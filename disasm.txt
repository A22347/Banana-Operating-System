
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 f0 7a 00 00       	call   c0007b10 <KeEntryPoint>

c0000020 <deregister_tm_clones>:
c0000020:	b8 64 41 02 c0       	mov    eax,0xc0024164
c0000025:	3d 64 41 02 c0       	cmp    eax,0xc0024164
c000002a:	74 1c                	je     c0000048 <deregister_tm_clones+0x28>
c000002c:	b8 00 00 00 00       	mov    eax,0x0
c0000031:	85 c0                	test   eax,eax
c0000033:	74 13                	je     c0000048 <deregister_tm_clones+0x28>
c0000035:	55                   	push   ebp
c0000036:	89 e5                	mov    ebp,esp
c0000038:	83 ec 14             	sub    esp,0x14
c000003b:	68 64 41 02 c0       	push   0xc0024164
c0000040:	ff d0                	call   eax
c0000042:	83 c4 10             	add    esp,0x10
c0000045:	c9                   	leave  
c0000046:	c3                   	ret    
c0000047:	90                   	nop
c0000048:	c3                   	ret    
c0000049:	8d 76 00             	lea    esi,[esi+0x0]

c000004c <register_tm_clones>:
c000004c:	b8 64 41 02 c0       	mov    eax,0xc0024164
c0000051:	2d 64 41 02 c0       	sub    eax,0xc0024164
c0000056:	c1 f8 02             	sar    eax,0x2
c0000059:	89 c2                	mov    edx,eax
c000005b:	c1 ea 1f             	shr    edx,0x1f
c000005e:	01 d0                	add    eax,edx
c0000060:	d1 f8                	sar    eax,1
c0000062:	74 1c                	je     c0000080 <register_tm_clones+0x34>
c0000064:	ba 00 00 00 00       	mov    edx,0x0
c0000069:	85 d2                	test   edx,edx
c000006b:	74 13                	je     c0000080 <register_tm_clones+0x34>
c000006d:	55                   	push   ebp
c000006e:	89 e5                	mov    ebp,esp
c0000070:	83 ec 10             	sub    esp,0x10
c0000073:	50                   	push   eax
c0000074:	68 64 41 02 c0       	push   0xc0024164
c0000079:	ff d2                	call   edx
c000007b:	83 c4 10             	add    esp,0x10
c000007e:	c9                   	leave  
c000007f:	c3                   	ret    
c0000080:	c3                   	ret    
c0000081:	8d 76 00             	lea    esi,[esi+0x0]

c0000084 <__do_global_dtors_aux>:
c0000084:	80 3d c0 60 02 c0 00 	cmp    BYTE PTR ds:0xc00260c0,0x0
c000008b:	75 63                	jne    c00000f0 <__do_global_dtors_aux+0x6c>
c000008d:	55                   	push   ebp
c000008e:	89 e5                	mov    ebp,esp
c0000090:	56                   	push   esi
c0000091:	53                   	push   ebx
c0000092:	bb cc 03 02 c0       	mov    ebx,0xc00203cc
c0000097:	81 eb c8 03 02 c0    	sub    ebx,0xc00203c8
c000009d:	c1 fb 02             	sar    ebx,0x2
c00000a0:	4b                   	dec    ebx
c00000a1:	be c8 03 02 c0       	mov    esi,0xc00203c8
c00000a6:	a1 c4 60 02 c0       	mov    eax,ds:0xc00260c4
c00000ab:	39 d8                	cmp    eax,ebx
c00000ad:	73 13                	jae    c00000c2 <__do_global_dtors_aux+0x3e>
c00000af:	90                   	nop
c00000b0:	40                   	inc    eax
c00000b1:	a3 c4 60 02 c0       	mov    ds:0xc00260c4,eax
c00000b6:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000b9:	a1 c4 60 02 c0       	mov    eax,ds:0xc00260c4
c00000be:	39 d8                	cmp    eax,ebx
c00000c0:	72 ee                	jb     c00000b0 <__do_global_dtors_aux+0x2c>
c00000c2:	e8 59 ff ff ff       	call   c0000020 <deregister_tm_clones>
c00000c7:	b8 00 00 00 00       	mov    eax,0x0
c00000cc:	85 c0                	test   eax,eax
c00000ce:	74 10                	je     c00000e0 <__do_global_dtors_aux+0x5c>
c00000d0:	83 ec 0c             	sub    esp,0xc
c00000d3:	68 64 41 02 c0       	push   0xc0024164
c00000d8:	e8 23 ff ff 3f       	call   0 <SIG_STATE_STRUCT>
c00000dd:	83 c4 10             	add    esp,0x10
c00000e0:	c6 05 c0 60 02 c0 01 	mov    BYTE PTR ds:0xc00260c0,0x1
c00000e7:	8d 65 f8             	lea    esp,[ebp-0x8]
c00000ea:	5b                   	pop    ebx
c00000eb:	5e                   	pop    esi
c00000ec:	5d                   	pop    ebp
c00000ed:	c3                   	ret    
c00000ee:	66 90                	xchg   ax,ax
c00000f0:	c3                   	ret    
c00000f1:	8d 76 00             	lea    esi,[esi+0x0]

c00000f4 <frame_dummy>:
c00000f4:	b8 00 00 00 00       	mov    eax,0x0
c00000f9:	85 c0                	test   eax,eax
c00000fb:	74 1f                	je     c000011c <frame_dummy+0x28>
c00000fd:	55                   	push   ebp
c00000fe:	89 e5                	mov    ebp,esp
c0000100:	83 ec 10             	sub    esp,0x10
c0000103:	68 c8 60 02 c0       	push   0xc00260c8
c0000108:	68 64 41 02 c0       	push   0xc0024164
c000010d:	e8 ee fe ff 3f       	call   0 <SIG_STATE_STRUCT>
c0000112:	83 c4 10             	add    esp,0x10
c0000115:	c9                   	leave  
c0000116:	e9 31 ff ff ff       	jmp    c000004c <register_tm_clones>
c000011b:	90                   	nop
c000011c:	e9 2b ff ff ff       	jmp    c000004c <register_tm_clones>
c0000121:	66 90                	xchg   ax,ax
c0000123:	66 90                	xchg   ax,ax
c0000125:	66 90                	xchg   ax,ax
c0000127:	66 90                	xchg   ax,ax
c0000129:	66 90                	xchg   ax,ax
c000012b:	66 90                	xchg   ax,ax
c000012d:	66 90                	xchg   ax,ax
c000012f:	90                   	nop

c0000130 <manualPCIProbe>:
c0000130:	31 c0                	xor    eax,eax
c0000132:	66 ba f8 0c          	mov    dx,0xcf8
c0000136:	ed                   	in     eax,dx
c0000137:	89 c3                	mov    ebx,eax
c0000139:	b8 00 00 00 80       	mov    eax,0x80000000
c000013e:	ef                   	out    dx,eax
c000013f:	ed                   	in     eax,dx
c0000140:	3d 00 00 00 80       	cmp    eax,0x80000000
c0000145:	75 0a                	jne    c0000151 <manualPCIProbe.noMech1>
c0000147:	b8 01 00 00 00       	mov    eax,0x1
c000014c:	e9 26 00 00 00       	jmp    c0000177 <manualPCIProbe.gotPCI>

c0000151 <manualPCIProbe.noMech1>:
c0000151:	89 d8                	mov    eax,ebx
c0000153:	ef                   	out    dx,eax
c0000154:	66 ba f8 0c          	mov    dx,0xcf8
c0000158:	ec                   	in     al,dx
c0000159:	88 c3                	mov    bl,al
c000015b:	30 c0                	xor    al,al
c000015d:	ee                   	out    dx,al
c000015e:	ec                   	in     al,dx
c000015f:	84 c0                	test   al,al
c0000161:	75 15                	jne    c0000178 <manualPCIProbe.noPCI>
c0000163:	66 ba fa 0c          	mov    dx,0xcfa
c0000167:	ec                   	in     al,dx
c0000168:	88 c7                	mov    bh,al
c000016a:	30 c0                	xor    al,al
c000016c:	ee                   	out    dx,al
c000016d:	ec                   	in     al,dx
c000016e:	84 c0                	test   al,al
c0000170:	75 06                	jne    c0000178 <manualPCIProbe.noPCI>
c0000172:	b8 02 00 00 00       	mov    eax,0x2

c0000177 <manualPCIProbe.gotPCI>:
c0000177:	c3                   	ret    

c0000178 <manualPCIProbe.noPCI>:
c0000178:	31 c0                	xor    eax,eax
c000017a:	c3                   	ret    

c000017b <prepareTramp>:
c000017b:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c0000182:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c0000189:	50                   	push   eax
c000018a:	0f 20 d8             	mov    eax,cr3
c000018d:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c0000192:	58                   	pop    eax
c0000193:	c3                   	ret    

c0000194 <doTPAUSE>:
c0000194:	fb                   	sti    
c0000195:	31 c0                	xor    eax,eax
c0000197:	31 d2                	xor    edx,edx
c0000199:	66 0f ae f0          	tpause eax
c000019d:	c3                   	ret    

c000019e <hasLegacyFPU>:
c000019e:	0f 20 c2             	mov    edx,cr0
c00001a1:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c00001a7:	0f 22 c2             	mov    cr0,edx
c00001aa:	db e3                	fninit 
c00001ac:	dd 3d c1 01 00 c0    	fnstsw WORD PTR ds:0xc00001c1
c00001b2:	31 c0                	xor    eax,eax
c00001b4:	66 81 3d c1 01 00 c0 00 00 	cmp    WORD PTR ds:0xc00001c1,0x0
c00001bd:	75 01                	jne    c00001c0 <hasLegacyFPU.nofpu>

c00001bf <hasLegacyFPU.hasfpu>:
c00001bf:	40                   	inc    eax

c00001c0 <hasLegacyFPU.nofpu>:
c00001c0:	c3                   	ret    

c00001c1 <testword>:
c00001c1:	aa                   	stos   BYTE PTR es:[edi],al
c00001c2:	55                   	push   ebp

c00001c3 <is486>:
c00001c3:	0f 09                	wbinvd 
c00001c5:	31 c0                	xor    eax,eax
c00001c7:	40                   	inc    eax
c00001c8:	c3                   	ret    
c00001c9:	90                   	nop
c00001ca:	90                   	nop
c00001cb:	90                   	nop
c00001cc:	90                   	nop
c00001cd:	90                   	nop
c00001ce:	90                   	nop
c00001cf:	90                   	nop
c00001d0:	90                   	nop
c00001d1:	90                   	nop
c00001d2:	90                   	nop
c00001d3:	90                   	nop
c00001d4:	90                   	nop
c00001d5:	90                   	nop
c00001d6:	90                   	nop
c00001d7:	90                   	nop
c00001d8:	90                   	nop
c00001d9:	90                   	nop
c00001da:	90                   	nop
c00001db:	90                   	nop
c00001dc:	90                   	nop
c00001dd:	90                   	nop
c00001de:	90                   	nop
c00001df:	90                   	nop
c00001e0:	90                   	nop
c00001e1:	90                   	nop
c00001e2:	90                   	nop
c00001e3:	90                   	nop
c00001e4:	90                   	nop
c00001e5:	90                   	nop
c00001e6:	90                   	nop
c00001e7:	90                   	nop
c00001e8:	90                   	nop
c00001e9:	90                   	nop
c00001ea:	90                   	nop
c00001eb:	90                   	nop
c00001ec:	90                   	nop
c00001ed:	90                   	nop
c00001ee:	90                   	nop
c00001ef:	90                   	nop
c00001f0:	90                   	nop
c00001f1:	90                   	nop
c00001f2:	90                   	nop
c00001f3:	90                   	nop
c00001f4:	90                   	nop
c00001f5:	90                   	nop
c00001f6:	31 c0                	xor    eax,eax
c00001f8:	c3                   	ret    

c00001f9 <detectCPUID>:
c00001f9:	9c                   	pushf  
c00001fa:	9c                   	pushf  
c00001fb:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c0000202:	9d                   	popf   
c0000203:	9c                   	pushf  
c0000204:	58                   	pop    eax
c0000205:	33 04 24             	xor    eax,DWORD PTR [esp]
c0000208:	9d                   	popf   
c0000209:	25 00 00 20 00       	and    eax,0x200000
c000020e:	c3                   	ret    

c000020f <goToVM86>:
c000020f:	55                   	push   ebp
c0000210:	89 e5                	mov    ebp,esp
c0000212:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000215:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000218:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c000021b:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c000021e:	25 ff ff 00 00       	and    eax,0xffff
c0000223:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000229:	81 e1 ff ff 00 00    	and    ecx,0xffff
c000022f:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000235:	52                   	push   edx
c0000236:	51                   	push   ecx
c0000237:	68 02 02 02 00       	push   0x20202
c000023c:	53                   	push   ebx
c000023d:	50                   	push   eax
c000023e:	cf                   	iret   

c000023f <goToUsermode>:
c000023f:	55                   	push   ebp
c0000240:	89 e5                	mov    ebp,esp
c0000242:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000245:	66 b8 23 00          	mov    ax,0x23
c0000249:	66 8e d8             	mov    ds,ax
c000024c:	66 8e c0             	mov    es,ax
c000024f:	66 8e e0             	mov    fs,ax
c0000252:	66 8e e8             	mov    gs,ax
c0000255:	89 e0                	mov    eax,esp
c0000257:	68 23 00 00 00       	push   0x23
c000025c:	50                   	push   eax
c000025d:	68 02 02 00 00       	push   0x202
c0000262:	68 1b 00 00 00       	push   0x1b
c0000267:	53                   	push   ebx
c0000268:	cf                   	iret   

c0000269 <switchToThreadASMFirstTime>:
c0000269:	9c                   	pushf  
c000026a:	fa                   	cli    
c000026b:	50                   	push   eax
c000026c:	53                   	push   ebx
c000026d:	51                   	push   ecx
c000026e:	52                   	push   edx
c000026f:	56                   	push   esi
c0000270:	57                   	push   edi
c0000271:	55                   	push   ebp
c0000272:	e9 11 00 00 00       	jmp    c0000288 <commonThreadSwitch>

c0000277 <switchToThreadASM>:
c0000277:	9c                   	pushf  
c0000278:	50                   	push   eax
c0000279:	53                   	push   ebx
c000027a:	51                   	push   ecx
c000027b:	52                   	push   edx
c000027c:	56                   	push   esi
c000027d:	57                   	push   edi
c000027e:	55                   	push   ebp
c000027f:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0000285:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c0000288 <commonThreadSwitch>:
c0000288:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000028c:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0000292:	8b 06                	mov    eax,DWORD PTR [esi]
c0000294:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0000297:	0f 20 d9             	mov    ecx,cr3
c000029a:	39 c8                	cmp    eax,ecx
c000029c:	74 03                	je     c00002a1 <commonThreadSwitch.doneVAS>
c000029e:	0f 22 d8             	mov    cr3,eax

c00002a1 <commonThreadSwitch.doneVAS>:
c00002a1:	85 d2                	test   edx,edx
c00002a3:	75 11                	jne    c00002b6 <commonThreadSwitch.firstTime>
c00002a5:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c00002a8:	e8 17 56 01 00       	call   c00158c4 <changeTSS>
c00002ad:	5d                   	pop    ebp
c00002ae:	5f                   	pop    edi
c00002af:	5e                   	pop    esi
c00002b0:	5a                   	pop    edx
c00002b1:	59                   	pop    ecx
c00002b2:	5b                   	pop    ebx
c00002b3:	58                   	pop    eax
c00002b4:	9d                   	popf   
c00002b5:	c3                   	ret    

c00002b6 <commonThreadSwitch.firstTime>:
c00002b6:	fa                   	cli    
c00002b7:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00002ba:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c00002bf:	60                   	pusha  
c00002c0:	e8 08 a4 00 00       	call   c000a6cd <mapVASFirstTime>
c00002c5:	61                   	popa   
c00002c6:	89 c4                	mov    esp,eax
c00002c8:	56                   	push   esi
c00002c9:	52                   	push   edx
c00002ca:	e8 f5 55 01 00       	call   c00158c4 <changeTSS>
c00002cf:	5a                   	pop    edx
c00002d0:	5e                   	pop    esi
c00002d1:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c00002d8:	5d                   	pop    ebp
c00002d9:	5f                   	pop    edi
c00002da:	5e                   	pop    esi
c00002db:	59                   	pop    ecx
c00002dc:	59                   	pop    ecx
c00002dd:	5b                   	pop    ebx
c00002de:	58                   	pop    eax
c00002df:	81 c4 04 00 00 00    	add    esp,0x4
c00002e5:	6a 02                	push   0x2
c00002e7:	9d                   	popf   
c00002e8:	52                   	push   edx
c00002e9:	e8 02 5b 01 00       	call   c0015df0 <taskStartupFunction>
c00002ee:	5a                   	pop    edx
c00002ef:	50                   	push   eax
c00002f0:	ff d2                	call   edx
c00002f2:	e8 c1 61 01 00       	call   c00164b8 <taskReturned>
c00002f7:	e9 fb ff ff ff       	jmp    c00002f7 <commonThreadSwitch.firstTime+0x41>

c00002fc <asmQuickAcquireLock>:
c00002fc:	55                   	push   ebp
c00002fd:	89 e5                	mov    ebp,esp
c00002ff:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c0000302 <asmQuickAcquireLock.retry>:
c0000302:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000307:	72 02                	jb     c000030b <asmQuickAcquireLock.spin_with_pause>
c0000309:	fa                   	cli    
c000030a:	c3                   	ret    

c000030b <asmQuickAcquireLock.spin_with_pause>:
c000030b:	f3 90                	pause  
c000030d:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000313:	75 f6                	jne    c000030b <asmQuickAcquireLock.spin_with_pause>
c0000315:	e9 e8 ff ff ff       	jmp    c0000302 <asmQuickAcquireLock.retry>

c000031a <asmQuickReleaseLock>:
c000031a:	55                   	push   ebp
c000031b:	89 e5                	mov    ebp,esp
c000031d:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c0000324:	5d                   	pop    ebp
c0000325:	c3                   	ret    

c0000326 <asmAcquireLock>:
c0000326:	55                   	push   ebp
c0000327:	89 e5                	mov    ebp,esp
c0000329:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c000032c <asmAcquireLock.retry>:
c000032c:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000331:	72 05                	jb     c0000338 <asmAcquireLock.spin_with_pause>
c0000333:	9c                   	pushf  
c0000334:	58                   	pop    eax
c0000335:	fa                   	cli    
c0000336:	5d                   	pop    ebp
c0000337:	c3                   	ret    

c0000338 <asmAcquireLock.spin_with_pause>:
c0000338:	f3 90                	pause  
c000033a:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000340:	75 f6                	jne    c0000338 <asmAcquireLock.spin_with_pause>
c0000342:	e9 e5 ff ff ff       	jmp    c000032c <asmAcquireLock.retry>

c0000347 <asmReleaseLock>:
c0000347:	55                   	push   ebp
c0000348:	89 e5                	mov    ebp,esp
c000034a:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c000034d:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0000350:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0000356:	52                   	push   edx
c0000357:	9d                   	popf   
c0000358:	5d                   	pop    ebp
c0000359:	c3                   	ret    

c000035a <loadGDT>:
c000035a:	0f 01 15 c0 6e 02 c0 	lgdtd  ds:0xc0026ec0
c0000361:	66 b8 10 00          	mov    ax,0x10
c0000365:	66 8e d8             	mov    ds,ax
c0000368:	66 8e c0             	mov    es,ax
c000036b:	66 8e e0             	mov    fs,ax
c000036e:	66 8e e8             	mov    gs,ax
c0000371:	66 8e d0             	mov    ss,ax
c0000374:	e9 00 00 00 00       	jmp    c0000379 <flush2>

c0000379 <flush2>:
c0000379:	c3                   	ret    

c000037a <memcpy>:
c000037a:	e9 97 12 01 00       	jmp    c0011616 <__not_memcpy>
c000037f:	90                   	nop

c0000380 <memcmp>:
c0000380:	56                   	push   esi
c0000381:	53                   	push   ebx
c0000382:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000386:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000038a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000038e:	85 f6                	test   esi,esi
c0000390:	74 21                	je     c00003b3 <memcmp+0x33>
c0000392:	8a 08                	mov    cl,BYTE PTR [eax]
c0000394:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c0000397:	38 d9                	cmp    cl,bl
c0000399:	75 25                	jne    c00003c0 <memcmp+0x40>
c000039b:	01 c6                	add    esi,eax
c000039d:	eb 0a                	jmp    c00003a9 <memcmp+0x29>
c000039f:	90                   	nop
c00003a0:	8a 08                	mov    cl,BYTE PTR [eax]
c00003a2:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c00003a5:	38 cb                	cmp    bl,cl
c00003a7:	75 17                	jne    c00003c0 <memcmp+0x40>
c00003a9:	83 c0 01             	add    eax,0x1
c00003ac:	83 c2 01             	add    edx,0x1
c00003af:	39 f0                	cmp    eax,esi
c00003b1:	75 ed                	jne    c00003a0 <memcmp+0x20>
c00003b3:	31 c0                	xor    eax,eax
c00003b5:	5b                   	pop    ebx
c00003b6:	5e                   	pop    esi
c00003b7:	c3                   	ret    
c00003b8:	90                   	nop
c00003b9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00003c0:	0f b6 c1             	movzx  eax,cl
c00003c3:	29 d8                	sub    eax,ebx
c00003c5:	5b                   	pop    ebx
c00003c6:	5e                   	pop    esi
c00003c7:	c3                   	ret    
c00003c8:	90                   	nop
c00003c9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]

c00003d0 <memmove>:
c00003d0:	55                   	push   ebp
c00003d1:	57                   	push   edi
c00003d2:	56                   	push   esi
c00003d3:	53                   	push   ebx
c00003d4:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c00003d8:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00003dc:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00003e0:	39 dd                	cmp    ebp,ebx
c00003e2:	0f 83 a8 00 00 00    	jae    c0000490 <memmove+0xc0>
c00003e8:	85 d2                	test   edx,edx
c00003ea:	0f 84 8c 00 00 00    	je     c000047c <memmove+0xac>
c00003f0:	8d 4b 04             	lea    ecx,[ebx+0x4]
c00003f3:	8d 75 04             	lea    esi,[ebp+0x4]
c00003f6:	39 cd                	cmp    ebp,ecx
c00003f8:	0f 93 c1             	setae  cl
c00003fb:	39 f3                	cmp    ebx,esi
c00003fd:	0f 93 c0             	setae  al
c0000400:	89 c6                	mov    esi,eax
c0000402:	31 c0                	xor    eax,eax
c0000404:	09 f1                	or     ecx,esi
c0000406:	8d 72 ff             	lea    esi,[edx-0x1]
c0000409:	83 fe 0c             	cmp    esi,0xc
c000040c:	0f 97 c0             	seta   al
c000040f:	89 c6                	mov    esi,eax
c0000411:	85 ce                	test   esi,ecx
c0000413:	0f 84 a7 00 00 00    	je     c00004c0 <memmove+0xf0>
c0000419:	89 e9                	mov    ecx,ebp
c000041b:	09 d9                	or     ecx,ebx
c000041d:	80 e1 03             	and    cl,0x3
c0000420:	0f 85 9a 00 00 00    	jne    c00004c0 <memmove+0xf0>
c0000426:	89 d7                	mov    edi,edx
c0000428:	89 d9                	mov    ecx,ebx
c000042a:	83 e7 fc             	and    edi,0xfffffffc
c000042d:	89 ee                	mov    esi,ebp
c000042f:	01 df                	add    edi,ebx
c0000431:	eb 0d                	jmp    c0000440 <memmove+0x70>
c0000433:	90                   	nop
c0000434:	90                   	nop
c0000435:	90                   	nop
c0000436:	90                   	nop
c0000437:	90                   	nop
c0000438:	90                   	nop
c0000439:	90                   	nop
c000043a:	90                   	nop
c000043b:	90                   	nop
c000043c:	90                   	nop
c000043d:	90                   	nop
c000043e:	90                   	nop
c000043f:	90                   	nop
c0000440:	8b 01                	mov    eax,DWORD PTR [ecx]
c0000442:	83 c6 04             	add    esi,0x4
c0000445:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c0000448:	83 c1 04             	add    ecx,0x4
c000044b:	39 f9                	cmp    ecx,edi
c000044d:	75 f1                	jne    c0000440 <memmove+0x70>
c000044f:	89 d1                	mov    ecx,edx
c0000451:	89 d7                	mov    edi,edx
c0000453:	83 e1 fc             	and    ecx,0xfffffffc
c0000456:	29 cf                	sub    edi,ecx
c0000458:	01 cb                	add    ebx,ecx
c000045a:	8d 74 0d 00          	lea    esi,[ebp+ecx*1+0x0]
c000045e:	39 ca                	cmp    edx,ecx
c0000460:	74 1a                	je     c000047c <memmove+0xac>
c0000462:	8a 03                	mov    al,BYTE PTR [ebx]
c0000464:	83 ff 01             	cmp    edi,0x1
c0000467:	88 06                	mov    BYTE PTR [esi],al
c0000469:	74 11                	je     c000047c <memmove+0xac>
c000046b:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c000046e:	83 ff 02             	cmp    edi,0x2
c0000471:	88 46 01             	mov    BYTE PTR [esi+0x1],al
c0000474:	74 06                	je     c000047c <memmove+0xac>
c0000476:	8a 43 02             	mov    al,BYTE PTR [ebx+0x2]
c0000479:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c000047c:	5b                   	pop    ebx
c000047d:	89 e8                	mov    eax,ebp
c000047f:	5e                   	pop    esi
c0000480:	5f                   	pop    edi
c0000481:	5d                   	pop    ebp
c0000482:	c3                   	ret    
c0000483:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000489:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000490:	76 ea                	jbe    c000047c <memmove+0xac>
c0000492:	85 d2                	test   edx,edx
c0000494:	74 e6                	je     c000047c <memmove+0xac>
c0000496:	83 eb 01             	sub    ebx,0x1
c0000499:	8d 4d ff             	lea    ecx,[ebp-0x1]
c000049c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c00004a0:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c00004a3:	88 04 11             	mov    BYTE PTR [ecx+edx*1],al
c00004a6:	83 ea 01             	sub    edx,0x1
c00004a9:	75 f5                	jne    c00004a0 <memmove+0xd0>
c00004ab:	5b                   	pop    ebx
c00004ac:	89 e8                	mov    eax,ebp
c00004ae:	5e                   	pop    esi
c00004af:	5f                   	pop    edi
c00004b0:	5d                   	pop    ebp
c00004b1:	c3                   	ret    
c00004b2:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00004b9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00004c0:	01 ea                	add    edx,ebp
c00004c2:	89 e9                	mov    ecx,ebp
c00004c4:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00004ca:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c00004d0:	8a 03                	mov    al,BYTE PTR [ebx]
c00004d2:	83 c1 01             	add    ecx,0x1
c00004d5:	88 41 ff             	mov    BYTE PTR [ecx-0x1],al
c00004d8:	83 c3 01             	add    ebx,0x1
c00004db:	39 d1                	cmp    ecx,edx
c00004dd:	75 f1                	jne    c00004d0 <memmove+0x100>
c00004df:	eb 9b                	jmp    c000047c <memmove+0xac>
c00004e1:	eb 0d                	jmp    c00004f0 <memset>
c00004e3:	90                   	nop
c00004e4:	90                   	nop
c00004e5:	90                   	nop
c00004e6:	90                   	nop
c00004e7:	90                   	nop
c00004e8:	90                   	nop
c00004e9:	90                   	nop
c00004ea:	90                   	nop
c00004eb:	90                   	nop
c00004ec:	90                   	nop
c00004ed:	90                   	nop
c00004ee:	90                   	nop
c00004ef:	90                   	nop

c00004f0 <memset>:
c00004f0:	57                   	push   edi
c00004f1:	56                   	push   esi
c00004f2:	53                   	push   ebx
c00004f3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00004f7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00004fb:	85 d2                	test   edx,edx
c00004fd:	74 1d                	je     c000051c <memset+0x2c>
c00004ff:	0f be 5c 24 14       	movsx  ebx,BYTE PTR [esp+0x14]
c0000504:	89 f7                	mov    edi,esi
c0000506:	83 fa 04             	cmp    edx,0x4
c0000509:	73 25                	jae    c0000530 <memset+0x40>
c000050b:	83 e2 03             	and    edx,0x3
c000050e:	74 0c                	je     c000051c <memset+0x2c>
c0000510:	31 c0                	xor    eax,eax
c0000512:	88 1c 07             	mov    BYTE PTR [edi+eax*1],bl
c0000515:	83 c0 01             	add    eax,0x1
c0000518:	39 d0                	cmp    eax,edx
c000051a:	72 f6                	jb     c0000512 <memset+0x22>
c000051c:	89 f0                	mov    eax,esi
c000051e:	5b                   	pop    ebx
c000051f:	5e                   	pop    esi
c0000520:	5f                   	pop    edi
c0000521:	c3                   	ret    
c0000522:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000529:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000530:	0f b6 c3             	movzx  eax,bl
c0000533:	88 c4                	mov    ah,al
c0000535:	89 c1                	mov    ecx,eax
c0000537:	c1 e1 10             	shl    ecx,0x10
c000053a:	09 c8                	or     eax,ecx
c000053c:	f7 c6 01 00 00 00    	test   esi,0x1
c0000542:	75 12                	jne    c0000556 <memset+0x66>
c0000544:	f7 c7 02 00 00 00    	test   edi,0x2
c000054a:	75 14                	jne    c0000560 <memset+0x70>
c000054c:	89 d1                	mov    ecx,edx
c000054e:	c1 e9 02             	shr    ecx,0x2
c0000551:	fc                   	cld    
c0000552:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0000554:	eb b5                	jmp    c000050b <memset+0x1b>
c0000556:	88 06                	mov    BYTE PTR [esi],al
c0000558:	8d 7e 01             	lea    edi,[esi+0x1]
c000055b:	83 ea 01             	sub    edx,0x1
c000055e:	eb e4                	jmp    c0000544 <memset+0x54>
c0000560:	66 89 07             	mov    WORD PTR [edi],ax
c0000563:	83 ea 02             	sub    edx,0x2
c0000566:	83 c7 02             	add    edi,0x2
c0000569:	eb e1                	jmp    c000054c <memset+0x5c>
c000056b:	90                   	nop
c000056c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]

c0000570 <strlen>:
c0000570:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0000574:	31 c0                	xor    eax,eax
c0000576:	80 3a 00             	cmp    BYTE PTR [edx],0x0
c0000579:	74 15                	je     c0000590 <strlen+0x20>
c000057b:	90                   	nop
c000057c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000580:	83 c0 01             	add    eax,0x1
c0000583:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c0000587:	75 f7                	jne    c0000580 <strlen+0x10>
c0000589:	c3                   	ret    
c000058a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000590:	c3                   	ret    
c0000591:	eb 0d                	jmp    c00005a0 <strpbrk>
c0000593:	90                   	nop
c0000594:	90                   	nop
c0000595:	90                   	nop
c0000596:	90                   	nop
c0000597:	90                   	nop
c0000598:	90                   	nop
c0000599:	90                   	nop
c000059a:	90                   	nop
c000059b:	90                   	nop
c000059c:	90                   	nop
c000059d:	90                   	nop
c000059e:	90                   	nop
c000059f:	90                   	nop

c00005a0 <strpbrk>:
c00005a0:	57                   	push   edi
c00005a1:	56                   	push   esi
c00005a2:	53                   	push   ebx
c00005a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00005a7:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00005ab:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00005ae:	85 db                	test   ebx,ebx
c00005b0:	74 36                	je     c00005e8 <strpbrk+0x48>
c00005b2:	0f be 37             	movsx  esi,BYTE PTR [edi]
c00005b5:	85 f6                	test   esi,esi
c00005b7:	74 25                	je     c00005de <strpbrk+0x3e>
c00005b9:	39 de                	cmp    esi,ebx
c00005bb:	74 2d                	je     c00005ea <strpbrk+0x4a>
c00005bd:	89 fa                	mov    edx,edi
c00005bf:	eb 13                	jmp    c00005d4 <strpbrk+0x34>
c00005c1:	eb 0d                	jmp    c00005d0 <strpbrk+0x30>
c00005c3:	90                   	nop
c00005c4:	90                   	nop
c00005c5:	90                   	nop
c00005c6:	90                   	nop
c00005c7:	90                   	nop
c00005c8:	90                   	nop
c00005c9:	90                   	nop
c00005ca:	90                   	nop
c00005cb:	90                   	nop
c00005cc:	90                   	nop
c00005cd:	90                   	nop
c00005ce:	90                   	nop
c00005cf:	90                   	nop
c00005d0:	39 d9                	cmp    ecx,ebx
c00005d2:	74 16                	je     c00005ea <strpbrk+0x4a>
c00005d4:	83 c2 01             	add    edx,0x1
c00005d7:	0f be 0a             	movsx  ecx,BYTE PTR [edx]
c00005da:	85 c9                	test   ecx,ecx
c00005dc:	75 f2                	jne    c00005d0 <strpbrk+0x30>
c00005de:	83 c0 01             	add    eax,0x1
c00005e1:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00005e4:	85 db                	test   ebx,ebx
c00005e6:	75 cd                	jne    c00005b5 <strpbrk+0x15>
c00005e8:	31 c0                	xor    eax,eax
c00005ea:	5b                   	pop    ebx
c00005eb:	5e                   	pop    esi
c00005ec:	5f                   	pop    edi
c00005ed:	c3                   	ret    
c00005ee:	66 90                	xchg   ax,ax

c00005f0 <strtok>:
c00005f0:	56                   	push   esi
c00005f1:	53                   	push   ebx
c00005f2:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00005f6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00005fa:	85 db                	test   ebx,ebx
c00005fc:	75 09                	jne    c0000607 <strtok+0x17>
c00005fe:	eb 30                	jmp    c0000630 <strtok+0x40>
c0000600:	83 c3 01             	add    ebx,0x1
c0000603:	c6 43 ff 00          	mov    BYTE PTR [ebx-0x1],0x0
c0000607:	56                   	push   esi
c0000608:	53                   	push   ebx
c0000609:	e8 92 ff ff ff       	call   c00005a0 <strpbrk>
c000060e:	5a                   	pop    edx
c000060f:	a3 e0 60 02 c0       	mov    ds:0xc00260e0,eax
c0000614:	59                   	pop    ecx
c0000615:	39 d8                	cmp    eax,ebx
c0000617:	74 e7                	je     c0000600 <strtok+0x10>
c0000619:	85 c0                	test   eax,eax
c000061b:	74 1d                	je     c000063a <strtok+0x4a>
c000061d:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0000620:	8d 50 01             	lea    edx,[eax+0x1]
c0000623:	89 d8                	mov    eax,ebx
c0000625:	89 15 e0 60 02 c0    	mov    DWORD PTR ds:0xc00260e0,edx
c000062b:	5b                   	pop    ebx
c000062c:	5e                   	pop    esi
c000062d:	c3                   	ret    
c000062e:	66 90                	xchg   ax,ax
c0000630:	8b 1d e0 60 02 c0    	mov    ebx,DWORD PTR ds:0xc00260e0
c0000636:	85 db                	test   ebx,ebx
c0000638:	75 cd                	jne    c0000607 <strtok+0x17>
c000063a:	31 c0                	xor    eax,eax
c000063c:	5b                   	pop    ebx
c000063d:	5e                   	pop    esi
c000063e:	c3                   	ret    
c000063f:	90                   	nop

c0000640 <strcpy>:
c0000640:	53                   	push   ebx
c0000641:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000645:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0000649:	89 c3                	mov    ebx,eax
c000064b:	8a 11                	mov    dl,BYTE PTR [ecx]
c000064d:	84 d2                	test   dl,dl
c000064f:	74 1d                	je     c000066e <strcpy+0x2e>
c0000651:	eb 0d                	jmp    c0000660 <strcpy+0x20>
c0000653:	90                   	nop
c0000654:	90                   	nop
c0000655:	90                   	nop
c0000656:	90                   	nop
c0000657:	90                   	nop
c0000658:	90                   	nop
c0000659:	90                   	nop
c000065a:	90                   	nop
c000065b:	90                   	nop
c000065c:	90                   	nop
c000065d:	90                   	nop
c000065e:	90                   	nop
c000065f:	90                   	nop
c0000660:	88 13                	mov    BYTE PTR [ebx],dl
c0000662:	83 c1 01             	add    ecx,0x1
c0000665:	83 c3 01             	add    ebx,0x1
c0000668:	8a 11                	mov    dl,BYTE PTR [ecx]
c000066a:	84 d2                	test   dl,dl
c000066c:	75 f2                	jne    c0000660 <strcpy+0x20>
c000066e:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0000671:	5b                   	pop    ebx
c0000672:	c3                   	ret    
c0000673:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000679:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000680 <strncpy>:
c0000680:	57                   	push   edi
c0000681:	56                   	push   esi
c0000682:	53                   	push   ebx
c0000683:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0000687:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000068b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000068f:	85 f6                	test   esi,esi
c0000691:	74 44                	je     c00006d7 <strncpy+0x57>
c0000693:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0000695:	8d 46 ff             	lea    eax,[esi-0x1]
c0000698:	8d 7a 01             	lea    edi,[edx+0x1]
c000069b:	88 0a                	mov    BYTE PTR [edx],cl
c000069d:	84 c9                	test   cl,cl
c000069f:	74 3f                	je     c00006e0 <strncpy+0x60>
c00006a1:	85 c0                	test   eax,eax
c00006a3:	74 32                	je     c00006d7 <strncpy+0x57>
c00006a5:	8d 4b 02             	lea    ecx,[ebx+0x2]
c00006a8:	8d 46 fe             	lea    eax,[esi-0x2]
c00006ab:	8a 5b 01             	mov    bl,BYTE PTR [ebx+0x1]
c00006ae:	8d 7a 02             	lea    edi,[edx+0x2]
c00006b1:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c00006b4:	84 db                	test   bl,bl
c00006b6:	75 1b                	jne    c00006d3 <strncpy+0x53>
c00006b8:	eb 26                	jmp    c00006e0 <strncpy+0x60>
c00006ba:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00006c0:	83 c1 01             	add    ecx,0x1
c00006c3:	83 c7 01             	add    edi,0x1
c00006c6:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00006c9:	83 e8 01             	sub    eax,0x1
c00006cc:	88 5f ff             	mov    BYTE PTR [edi-0x1],bl
c00006cf:	84 db                	test   bl,bl
c00006d1:	74 0d                	je     c00006e0 <strncpy+0x60>
c00006d3:	85 c0                	test   eax,eax
c00006d5:	75 e9                	jne    c00006c0 <strncpy+0x40>
c00006d7:	5b                   	pop    ebx
c00006d8:	89 d0                	mov    eax,edx
c00006da:	5e                   	pop    esi
c00006db:	5f                   	pop    edi
c00006dc:	c3                   	ret    
c00006dd:	8d 76 00             	lea    esi,[esi+0x0]
c00006e0:	85 c0                	test   eax,eax
c00006e2:	74 f3                	je     c00006d7 <strncpy+0x57>
c00006e4:	89 c3                	mov    ebx,eax
c00006e6:	83 f8 04             	cmp    eax,0x4
c00006e9:	73 25                	jae    c0000710 <strncpy+0x90>
c00006eb:	f6 c3 02             	test   bl,0x2
c00006ee:	74 08                	je     c00006f8 <strncpy+0x78>
c00006f0:	66 c7 07 00 00       	mov    WORD PTR [edi],0x0
c00006f5:	83 c7 02             	add    edi,0x2
c00006f8:	80 e3 01             	and    bl,0x1
c00006fb:	74 da                	je     c00006d7 <strncpy+0x57>
c00006fd:	c6 07 00             	mov    BYTE PTR [edi],0x0
c0000700:	89 d0                	mov    eax,edx
c0000702:	5b                   	pop    ebx
c0000703:	5e                   	pop    esi
c0000704:	5f                   	pop    edi
c0000705:	c3                   	ret    
c0000706:	8d 76 00             	lea    esi,[esi+0x0]
c0000709:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000710:	f7 c7 01 00 00 00    	test   edi,0x1
c0000716:	75 14                	jne    c000072c <strncpy+0xac>
c0000718:	f7 c7 02 00 00 00    	test   edi,0x2
c000071e:	75 17                	jne    c0000737 <strncpy+0xb7>
c0000720:	89 d9                	mov    ecx,ebx
c0000722:	c1 e9 02             	shr    ecx,0x2
c0000725:	fc                   	cld    
c0000726:	31 c0                	xor    eax,eax
c0000728:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c000072a:	eb bf                	jmp    c00006eb <strncpy+0x6b>
c000072c:	c6 07 00             	mov    BYTE PTR [edi],0x0
c000072f:	83 eb 01             	sub    ebx,0x1
c0000732:	83 c7 01             	add    edi,0x1
c0000735:	eb e1                	jmp    c0000718 <strncpy+0x98>
c0000737:	66 c7 07 00 00       	mov    WORD PTR [edi],0x0
c000073c:	83 eb 02             	sub    ebx,0x2
c000073f:	83 c7 02             	add    edi,0x2
c0000742:	eb dc                	jmp    c0000720 <strncpy+0xa0>
c0000744:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000074a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c0000750 <strcmp>:
c0000750:	57                   	push   edi
c0000751:	56                   	push   esi
c0000752:	53                   	push   ebx
c0000753:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0000757:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000075b:	8a 17                	mov    dl,BYTE PTR [edi]
c000075d:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0000760:	38 c2                	cmp    dl,al
c0000762:	75 32                	jne    c0000796 <strcmp+0x46>
c0000764:	85 c0                	test   eax,eax
c0000766:	74 28                	je     c0000790 <strcmp+0x40>
c0000768:	b8 01 00 00 00       	mov    eax,0x1
c000076d:	eb 08                	jmp    c0000777 <strcmp+0x27>
c000076f:	90                   	nop
c0000770:	83 c0 01             	add    eax,0x1
c0000773:	85 db                	test   ebx,ebx
c0000775:	74 19                	je     c0000790 <strcmp+0x40>
c0000777:	0f be 1c 07          	movsx  ebx,BYTE PTR [edi+eax*1]
c000077b:	8a 0c 06             	mov    cl,BYTE PTR [esi+eax*1]
c000077e:	89 da                	mov    edx,ebx
c0000780:	38 d9                	cmp    cl,bl
c0000782:	74 ec                	je     c0000770 <strcmp+0x20>
c0000784:	5b                   	pop    ebx
c0000785:	0f b6 c2             	movzx  eax,dl
c0000788:	0f b6 c9             	movzx  ecx,cl
c000078b:	5e                   	pop    esi
c000078c:	29 c8                	sub    eax,ecx
c000078e:	5f                   	pop    edi
c000078f:	c3                   	ret    
c0000790:	5b                   	pop    ebx
c0000791:	31 c0                	xor    eax,eax
c0000793:	5e                   	pop    esi
c0000794:	5f                   	pop    edi
c0000795:	c3                   	ret    
c0000796:	89 c1                	mov    ecx,eax
c0000798:	eb ea                	jmp    c0000784 <strcmp+0x34>
c000079a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]

c00007a0 <strchr>:
c00007a0:	53                   	push   ebx
c00007a1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00007a5:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00007a8:	85 db                	test   ebx,ebx
c00007aa:	74 22                	je     c00007ce <strchr+0x2e>
c00007ac:	0f be 54 24 0c       	movsx  edx,BYTE PTR [esp+0xc]
c00007b1:	39 d3                	cmp    ebx,edx
c00007b3:	74 1b                	je     c00007d0 <strchr+0x30>
c00007b5:	89 d1                	mov    ecx,edx
c00007b7:	eb 0b                	jmp    c00007c4 <strchr+0x24>
c00007b9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00007c0:	39 ca                	cmp    edx,ecx
c00007c2:	74 0c                	je     c00007d0 <strchr+0x30>
c00007c4:	83 c0 01             	add    eax,0x1
c00007c7:	0f be 10             	movsx  edx,BYTE PTR [eax]
c00007ca:	85 d2                	test   edx,edx
c00007cc:	75 f2                	jne    c00007c0 <strchr+0x20>
c00007ce:	31 c0                	xor    eax,eax
c00007d0:	5b                   	pop    ebx
c00007d1:	c3                   	ret    
c00007d2:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00007d9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c00007e0 <strncmp>:
c00007e0:	55                   	push   ebp
c00007e1:	57                   	push   edi
c00007e2:	56                   	push   esi
c00007e3:	53                   	push   ebx
c00007e4:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00007e8:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00007ec:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00007f0:	85 f6                	test   esi,esi
c00007f2:	74 35                	je     c0000829 <strncmp+0x49>
c00007f4:	8a 17                	mov    dl,BYTE PTR [edi]
c00007f6:	0f be 2b             	movsx  ebp,BYTE PTR [ebx]
c00007f9:	89 e9                	mov    ecx,ebp
c00007fb:	38 ca                	cmp    dl,cl
c00007fd:	75 31                	jne    c0000830 <strncmp+0x50>
c00007ff:	8d 47 01             	lea    eax,[edi+0x1]
c0000802:	85 ed                	test   ebp,ebp
c0000804:	74 23                	je     c0000829 <strncmp+0x49>
c0000806:	01 f7                	add    edi,esi
c0000808:	eb 18                	jmp    c0000822 <strncmp+0x42>
c000080a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000810:	0f be 30             	movsx  esi,BYTE PTR [eax]
c0000813:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0000815:	89 f2                	mov    edx,esi
c0000817:	38 d1                	cmp    cl,dl
c0000819:	75 15                	jne    c0000830 <strncmp+0x50>
c000081b:	83 c0 01             	add    eax,0x1
c000081e:	85 f6                	test   esi,esi
c0000820:	74 07                	je     c0000829 <strncmp+0x49>
c0000822:	83 c3 01             	add    ebx,0x1
c0000825:	39 c7                	cmp    edi,eax
c0000827:	75 e7                	jne    c0000810 <strncmp+0x30>
c0000829:	5b                   	pop    ebx
c000082a:	31 c0                	xor    eax,eax
c000082c:	5e                   	pop    esi
c000082d:	5f                   	pop    edi
c000082e:	5d                   	pop    ebp
c000082f:	c3                   	ret    
c0000830:	5b                   	pop    ebx
c0000831:	0f b6 c2             	movzx  eax,dl
c0000834:	5e                   	pop    esi
c0000835:	0f b6 c9             	movzx  ecx,cl
c0000838:	5f                   	pop    edi
c0000839:	29 c8                	sub    eax,ecx
c000083b:	5d                   	pop    ebp
c000083c:	c3                   	ret    
c000083d:	8d 76 00             	lea    esi,[esi+0x0]

c0000840 <strcat>:
c0000840:	56                   	push   esi
c0000841:	53                   	push   ebx
c0000842:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000846:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000084a:	89 c3                	mov    ebx,eax
c000084c:	eb 04                	jmp    c0000852 <strcat+0x12>
c000084e:	66 90                	xchg   ax,ax
c0000850:	89 d3                	mov    ebx,edx
c0000852:	8d 53 01             	lea    edx,[ebx+0x1]
c0000855:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000859:	75 f5                	jne    c0000850 <strcat+0x10>
c000085b:	31 d2                	xor    edx,edx
c000085d:	8d 76 00             	lea    esi,[esi+0x0]
c0000860:	8a 0c 16             	mov    cl,BYTE PTR [esi+edx*1]
c0000863:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c0000866:	83 c2 01             	add    edx,0x1
c0000869:	84 c9                	test   cl,cl
c000086b:	75 f3                	jne    c0000860 <strcat+0x20>
c000086d:	5b                   	pop    ebx
c000086e:	5e                   	pop    esi
c000086f:	c3                   	ret    

c0000870 <strncat>:
c0000870:	56                   	push   esi
c0000871:	53                   	push   ebx
c0000872:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000876:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000087a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000087e:	85 f6                	test   esi,esi
c0000880:	74 32                	je     c00008b4 <strncat+0x44>
c0000882:	89 c2                	mov    edx,eax
c0000884:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000088a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c0000890:	83 c2 01             	add    edx,0x1
c0000893:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000897:	75 f7                	jne    c0000890 <strncat+0x20>
c0000899:	01 ce                	add    esi,ecx
c000089b:	eb 0a                	jmp    c00008a7 <strncat+0x37>
c000089d:	8d 76 00             	lea    esi,[esi+0x0]
c00008a0:	39 f1                	cmp    ecx,esi
c00008a2:	74 1c                	je     c00008c0 <strncat+0x50>
c00008a4:	83 c2 01             	add    edx,0x1
c00008a7:	83 c1 01             	add    ecx,0x1
c00008aa:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00008ad:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00008b0:	84 db                	test   bl,bl
c00008b2:	75 ec                	jne    c00008a0 <strncat+0x30>
c00008b4:	5b                   	pop    ebx
c00008b5:	5e                   	pop    esi
c00008b6:	c3                   	ret    
c00008b7:	89 f6                	mov    esi,esi
c00008b9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00008c0:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00008c3:	5b                   	pop    ebx
c00008c4:	5e                   	pop    esi
c00008c5:	c3                   	ret    
c00008c6:	8d 76 00             	lea    esi,[esi+0x0]
c00008c9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c00008d0 <strstr>:
c00008d0:	57                   	push   edi
c00008d1:	56                   	push   esi
c00008d2:	53                   	push   ebx
c00008d3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00008d7:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00008db:	57                   	push   edi
c00008dc:	e8 8f fc ff ff       	call   c0000570 <strlen>
c00008e1:	59                   	pop    ecx
c00008e2:	85 c0                	test   eax,eax
c00008e4:	74 3a                	je     c0000920 <strstr+0x50>
c00008e6:	89 c6                	mov    esi,eax
c00008e8:	eb 18                	jmp    c0000902 <strstr+0x32>
c00008ea:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00008f0:	56                   	push   esi
c00008f1:	57                   	push   edi
c00008f2:	53                   	push   ebx
c00008f3:	e8 88 fa ff ff       	call   c0000380 <memcmp>
c00008f8:	83 c4 0c             	add    esp,0xc
c00008fb:	85 c0                	test   eax,eax
c00008fd:	74 21                	je     c0000920 <strstr+0x50>
c00008ff:	83 c3 01             	add    ebx,0x1
c0000902:	53                   	push   ebx
c0000903:	e8 68 fc ff ff       	call   c0000570 <strlen>
c0000908:	5a                   	pop    edx
c0000909:	39 f0                	cmp    eax,esi
c000090b:	73 e3                	jae    c00008f0 <strstr+0x20>
c000090d:	5b                   	pop    ebx
c000090e:	31 c0                	xor    eax,eax
c0000910:	5e                   	pop    esi
c0000911:	5f                   	pop    edi
c0000912:	c3                   	ret    
c0000913:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000919:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000920:	89 d8                	mov    eax,ebx
c0000922:	5b                   	pop    ebx
c0000923:	5e                   	pop    esi
c0000924:	5f                   	pop    edi
c0000925:	c3                   	ret    
c0000926:	8d 76 00             	lea    esi,[esi+0x0]
c0000929:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000930 <toupper>:
c0000930:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000934:	0f b6 d0             	movzx  edx,al
c0000937:	f6 82 e0 03 02 c0 02 	test   BYTE PTR [edx-0x3ffdfc20],0x2
c000093e:	74 03                	je     c0000943 <toupper+0x13>
c0000940:	83 e8 20             	sub    eax,0x20
c0000943:	c3                   	ret    
c0000944:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000094a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c0000950 <tolower>:
c0000950:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000954:	0f b6 d0             	movzx  edx,al
c0000957:	f6 82 e0 03 02 c0 01 	test   BYTE PTR [edx-0x3ffdfc20],0x1
c000095e:	74 03                	je     c0000963 <tolower+0x13>
c0000960:	83 c0 20             	add    eax,0x20
c0000963:	c3                   	ret    
c0000964:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000096a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c0000970 <simple_strtoul>:
c0000970:	55                   	push   ebp
c0000971:	57                   	push   edi
c0000972:	56                   	push   esi
c0000973:	53                   	push   ebx
c0000974:	83 ec 08             	sub    esp,0x8
c0000977:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000097b:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000097f:	eb 12                	jmp    c0000993 <simple_strtoul+0x23>
c0000981:	eb 0d                	jmp    c0000990 <simple_strtoul+0x20>
c0000983:	90                   	nop
c0000984:	90                   	nop
c0000985:	90                   	nop
c0000986:	90                   	nop
c0000987:	90                   	nop
c0000988:	90                   	nop
c0000989:	90                   	nop
c000098a:	90                   	nop
c000098b:	90                   	nop
c000098c:	90                   	nop
c000098d:	90                   	nop
c000098e:	90                   	nop
c000098f:	90                   	nop
c0000990:	83 c3 01             	add    ebx,0x1
c0000993:	0f b6 13             	movzx  edx,BYTE PTR [ebx]
c0000996:	f6 82 e0 03 02 c0 08 	test   BYTE PTR [edx-0x3ffdfc20],0x8
c000099d:	75 f1                	jne    c0000990 <simple_strtoul+0x20>
c000099f:	0f be c2             	movsx  eax,dl
c00009a2:	83 f8 09             	cmp    eax,0x9
c00009a5:	74 e9                	je     c0000990 <simple_strtoul+0x20>
c00009a7:	83 f8 2d             	cmp    eax,0x2d
c00009aa:	0f 84 60 01 00 00    	je     c0000b10 <simple_strtoul+0x1a0>
c00009b0:	83 f8 2b             	cmp    eax,0x2b
c00009b3:	0f 84 e7 00 00 00    	je     c0000aa0 <simple_strtoul+0x130>
c00009b9:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00009c1:	85 f6                	test   esi,esi
c00009c3:	0f 85 ea 00 00 00    	jne    c0000ab3 <simple_strtoul+0x143>
c00009c9:	0f be 13             	movsx  edx,BYTE PTR [ebx]
c00009cc:	89 d1                	mov    ecx,edx
c00009ce:	83 fa 30             	cmp    edx,0x30
c00009d1:	0f 84 90 01 00 00    	je     c0000b67 <simple_strtoul+0x1f7>
c00009d7:	be 0a 00 00 00       	mov    esi,0xa
c00009dc:	85 d2                	test   edx,edx
c00009de:	0f 84 c5 01 00 00    	je     c0000ba9 <simple_strtoul+0x239>
c00009e4:	31 ed                	xor    ebp,ebp
c00009e6:	31 ff                	xor    edi,edi
c00009e8:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00009ef:	eb 3e                	jmp    c0000a2f <simple_strtoul+0xbf>
c00009f1:	eb 0d                	jmp    c0000a00 <simple_strtoul+0x90>
c00009f3:	90                   	nop
c00009f4:	90                   	nop
c00009f5:	90                   	nop
c00009f6:	90                   	nop
c00009f7:	90                   	nop
c00009f8:	90                   	nop
c00009f9:	90                   	nop
c00009fa:	90                   	nop
c00009fb:	90                   	nop
c00009fc:	90                   	nop
c00009fd:	90                   	nop
c00009fe:	90                   	nop
c00009ff:	90                   	nop
c0000a00:	83 e9 30             	sub    ecx,0x30
c0000a03:	39 f1                	cmp    ecx,esi
c0000a05:	73 59                	jae    c0000a60 <simple_strtoul+0xf0>
c0000a07:	31 d2                	xor    edx,edx
c0000a09:	89 c8                	mov    eax,ecx
c0000a0b:	f7 d0                	not    eax
c0000a0d:	f7 f6                	div    esi
c0000a0f:	39 f8                	cmp    eax,edi
c0000a11:	0f 82 d9 00 00 00    	jb     c0000af0 <simple_strtoul+0x180>
c0000a17:	0f af fe             	imul   edi,esi
c0000a1a:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0000a21:	01 cf                	add    edi,ecx
c0000a23:	83 c3 01             	add    ebx,0x1
c0000a26:	0f be 13             	movsx  edx,BYTE PTR [ebx]
c0000a29:	89 d1                	mov    ecx,edx
c0000a2b:	85 d2                	test   edx,edx
c0000a2d:	74 31                	je     c0000a60 <simple_strtoul+0xf0>
c0000a2f:	0f b6 c9             	movzx  ecx,cl
c0000a32:	f6 81 e0 03 02 c0 04 	test   BYTE PTR [ecx-0x3ffdfc20],0x4
c0000a39:	75 c5                	jne    c0000a00 <simple_strtoul+0x90>
c0000a3b:	52                   	push   edx
c0000a3c:	e8 ef fe ff ff       	call   c0000930 <toupper>
c0000a41:	59                   	pop    ecx
c0000a42:	0f b6 d0             	movzx  edx,al
c0000a45:	f6 82 e0 03 02 c0 01 	test   BYTE PTR [edx-0x3ffdfc20],0x1
c0000a4c:	74 12                	je     c0000a60 <simple_strtoul+0xf0>
c0000a4e:	8d 48 c9             	lea    ecx,[eax-0x37]
c0000a51:	39 f1                	cmp    ecx,esi
c0000a53:	72 b2                	jb     c0000a07 <simple_strtoul+0x97>
c0000a55:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000a59:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000a60:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000a64:	85 c0                	test   eax,eax
c0000a66:	74 18                	je     c0000a80 <simple_strtoul+0x110>
c0000a68:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0000a6b:	09 f8                	or     eax,edi
c0000a6d:	0f 85 8d 00 00 00    	jne    c0000b00 <simple_strtoul+0x190>
c0000a73:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000a77:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000a7b:	31 ff                	xor    edi,edi
c0000a7d:	89 30                	mov    DWORD PTR [eax],esi
c0000a7f:	90                   	nop
c0000a80:	83 fd 01             	cmp    ebp,0x1
c0000a83:	75 05                	jne    c0000a8a <simple_strtoul+0x11a>
c0000a85:	bf ff ff ff ff       	mov    edi,0xffffffff
c0000a8a:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0000a8f:	75 02                	jne    c0000a93 <simple_strtoul+0x123>
c0000a91:	f7 df                	neg    edi
c0000a93:	83 c4 08             	add    esp,0x8
c0000a96:	89 f8                	mov    eax,edi
c0000a98:	5b                   	pop    ebx
c0000a99:	5e                   	pop    esi
c0000a9a:	5f                   	pop    edi
c0000a9b:	5d                   	pop    ebp
c0000a9c:	c3                   	ret    
c0000a9d:	8d 76 00             	lea    esi,[esi+0x0]
c0000aa0:	83 c3 01             	add    ebx,0x1
c0000aa3:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000aab:	85 f6                	test   esi,esi
c0000aad:	0f 84 16 ff ff ff    	je     c00009c9 <simple_strtoul+0x59>
c0000ab3:	8d 46 fe             	lea    eax,[esi-0x2]
c0000ab6:	83 f8 22             	cmp    eax,0x22
c0000ab9:	0f 87 8b 00 00 00    	ja     c0000b4a <simple_strtoul+0x1da>
c0000abf:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0000ac1:	83 fe 08             	cmp    esi,0x8
c0000ac4:	0f 84 c8 00 00 00    	je     c0000b92 <simple_strtoul+0x222>
c0000aca:	83 fe 10             	cmp    esi,0x10
c0000acd:	0f 85 0d 01 00 00    	jne    c0000be0 <simple_strtoul+0x270>
c0000ad3:	0f be d1             	movsx  edx,cl
c0000ad6:	83 fa 30             	cmp    edx,0x30
c0000ad9:	74 45                	je     c0000b20 <simple_strtoul+0x1b0>
c0000adb:	be 10 00 00 00       	mov    esi,0x10
c0000ae0:	e9 f7 fe ff ff       	jmp    c00009dc <simple_strtoul+0x6c>
c0000ae5:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000ae9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000af0:	bd 01 00 00 00       	mov    ebp,0x1
c0000af5:	31 ff                	xor    edi,edi
c0000af7:	e9 27 ff ff ff       	jmp    c0000a23 <simple_strtoul+0xb3>
c0000afc:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000b00:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b04:	89 18                	mov    DWORD PTR [eax],ebx
c0000b06:	e9 75 ff ff ff       	jmp    c0000a80 <simple_strtoul+0x110>
c0000b0b:	90                   	nop
c0000b0c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000b10:	83 c3 01             	add    ebx,0x1
c0000b13:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000b1b:	e9 a1 fe ff ff       	jmp    c00009c1 <simple_strtoul+0x51>
c0000b20:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000b24:	52                   	push   edx
c0000b25:	89 d1                	mov    ecx,edx
c0000b27:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0000b2b:	e8 20 fe ff ff       	call   c0000950 <tolower>
c0000b30:	5e                   	pop    esi
c0000b31:	83 f8 78             	cmp    eax,0x78
c0000b34:	0f 84 93 00 00 00    	je     c0000bcd <simple_strtoul+0x25d>
c0000b3a:	83 c3 01             	add    ebx,0x1
c0000b3d:	be 10 00 00 00       	mov    esi,0x10
c0000b42:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0000b45:	e9 92 fe ff ff       	jmp    c00009dc <simple_strtoul+0x6c>
c0000b4a:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0000b4e:	85 ff                	test   edi,edi
c0000b50:	74 69                	je     c0000bbb <simple_strtoul+0x24b>
c0000b52:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b56:	85 db                	test   ebx,ebx
c0000b58:	75 5b                	jne    c0000bb5 <simple_strtoul+0x245>
c0000b5a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000b60:	31 ff                	xor    edi,edi
c0000b62:	e9 23 ff ff ff       	jmp    c0000a8a <simple_strtoul+0x11a>
c0000b67:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000b6b:	52                   	push   edx
c0000b6c:	89 d1                	mov    ecx,edx
c0000b6e:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0000b72:	e8 d9 fd ff ff       	call   c0000950 <tolower>
c0000b77:	5d                   	pop    ebp
c0000b78:	83 f8 78             	cmp    eax,0x78
c0000b7b:	74 45                	je     c0000bc2 <simple_strtoul+0x252>
c0000b7d:	83 c3 01             	add    ebx,0x1
c0000b80:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0000b83:	83 fa 30             	cmp    edx,0x30
c0000b86:	74 16                	je     c0000b9e <simple_strtoul+0x22e>
c0000b88:	be 08 00 00 00       	mov    esi,0x8
c0000b8d:	e9 4a fe ff ff       	jmp    c00009dc <simple_strtoul+0x6c>
c0000b92:	0f be d1             	movsx  edx,cl
c0000b95:	83 fa 30             	cmp    edx,0x30
c0000b98:	0f 85 3e fe ff ff    	jne    c00009dc <simple_strtoul+0x6c>
c0000b9e:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000ba2:	83 c3 01             	add    ebx,0x1
c0000ba5:	89 d1                	mov    ecx,edx
c0000ba7:	eb df                	jmp    c0000b88 <simple_strtoul+0x218>
c0000ba9:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0000bad:	85 d2                	test   edx,edx
c0000baf:	74 0a                	je     c0000bbb <simple_strtoul+0x24b>
c0000bb1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000bb5:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000bb9:	89 30                	mov    DWORD PTR [eax],esi
c0000bbb:	31 ff                	xor    edi,edi
c0000bbd:	e9 c8 fe ff ff       	jmp    c0000a8a <simple_strtoul+0x11a>
c0000bc2:	8a 4b 02             	mov    cl,BYTE PTR [ebx+0x2]
c0000bc5:	83 c3 02             	add    ebx,0x2
c0000bc8:	e9 06 ff ff ff       	jmp    c0000ad3 <simple_strtoul+0x163>
c0000bcd:	0f be 53 02          	movsx  edx,BYTE PTR [ebx+0x2]
c0000bd1:	be 10 00 00 00       	mov    esi,0x10
c0000bd6:	89 d1                	mov    ecx,edx
c0000bd8:	83 c3 02             	add    ebx,0x2
c0000bdb:	e9 fc fd ff ff       	jmp    c00009dc <simple_strtoul+0x6c>
c0000be0:	0f be d1             	movsx  edx,cl
c0000be3:	e9 f4 fd ff ff       	jmp    c00009dc <simple_strtoul+0x6c>

c0000be8 <largebin_index>:
c0000be8:	89 c2                	mov    edx,eax
c0000bea:	c1 ea 08             	shr    edx,0x8
c0000bed:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000bf3:	77 10                	ja     c0000c05 <largebin_index+0x1d>
c0000bf5:	0f bd d2             	bsr    edx,edx
c0000bf8:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000bfb:	d3 e8                	shr    eax,cl
c0000bfd:	83 e0 03             	and    eax,0x3
c0000c00:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000c04:	c3                   	ret    
c0000c05:	b8 5f 00 00 00       	mov    eax,0x5f
c0000c0a:	c3                   	ret    

c0000c0b <malloc_init_state>:
c0000c0b:	53                   	push   ebx
c0000c0c:	8d 50 34             	lea    edx,[eax+0x34]
c0000c0f:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000c15:	89 d1                	mov    ecx,edx
c0000c17:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000c1a:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000c1d:	83 c2 08             	add    edx,0x8
c0000c20:	39 da                	cmp    edx,ebx
c0000c22:	75 f3                	jne    c0000c17 <malloc_init_state+0xc>
c0000c24:	8b 10                	mov    edx,DWORD PTR [eax]
c0000c26:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000c30:	83 e2 03             	and    edx,0x3
c0000c33:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c0000c3d:	83 ca 48             	or     edx,0x48
c0000c40:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000c4a:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000c54:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000c5b:	89 10                	mov    DWORD PTR [eax],edx
c0000c5d:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000c60:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000c6a:	5b                   	pop    ebx
c0000c6b:	c3                   	ret    

c0000c6c <malloc_consolidate>:
c0000c6c:	8b 10                	mov    edx,DWORD PTR [eax]
c0000c6e:	85 d2                	test   edx,edx
c0000c70:	0f 84 d8 00 00 00    	je     c0000d4e <malloc_consolidate+0xe2>
c0000c76:	55                   	push   ebp
c0000c77:	83 e2 fd             	and    edx,0xfffffffd
c0000c7a:	57                   	push   edi
c0000c7b:	89 c5                	mov    ebp,eax
c0000c7d:	56                   	push   esi
c0000c7e:	8d 78 34             	lea    edi,[eax+0x34]
c0000c81:	53                   	push   ebx
c0000c82:	83 ec 10             	sub    esp,0x10
c0000c85:	89 10                	mov    DWORD PTR [eax],edx
c0000c87:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000c8b:	c1 ea 03             	shr    edx,0x3
c0000c8e:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000c92:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000c96:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000c99:	85 d2                	test   edx,edx
c0000c9b:	0f 84 98 00 00 00    	je     c0000d39 <malloc_consolidate+0xcd>
c0000ca1:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000ca8:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000cab:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000cae:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000cb2:	89 f9                	mov    ecx,edi
c0000cb4:	83 e1 fe             	and    ecx,0xfffffffe
c0000cb7:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000cba:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000cbd:	83 e3 fc             	and    ebx,0xfffffffc
c0000cc0:	83 e7 01             	and    edi,0x1
c0000cc3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000cc6:	75 14                	jne    c0000cdc <malloc_consolidate+0x70>
c0000cc8:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000cca:	29 fa                	sub    edx,edi
c0000ccc:	01 f9                	add    ecx,edi
c0000cce:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000cd1:	89 fb                	mov    ebx,edi
c0000cd3:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000cd6:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000cd9:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000cdc:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000cdf:	74 40                	je     c0000d21 <malloc_consolidate+0xb5>
c0000ce1:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000ce4:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000ce7:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000ceb:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000cee:	83 e7 01             	and    edi,0x1
c0000cf1:	75 0e                	jne    c0000d01 <malloc_consolidate+0x95>
c0000cf3:	01 d9                	add    ecx,ebx
c0000cf5:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000cf8:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000cfb:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000cfe:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000d01:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000d04:	89 ce                	mov    esi,ecx
c0000d06:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000d09:	83 ce 01             	or     esi,0x1
c0000d0c:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000d0f:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000d12:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000d15:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000d19:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000d1c:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000d1f:	eb 0c                	jmp    c0000d2d <malloc_consolidate+0xc1>
c0000d21:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000d24:	83 c9 01             	or     ecx,0x1
c0000d27:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d2a:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000d2d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000d31:	85 d2                	test   edx,edx
c0000d33:	0f 85 6f ff ff ff    	jne    c0000ca8 <malloc_consolidate+0x3c>
c0000d39:	83 c5 04             	add    ebp,0x4
c0000d3c:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000d40:	0f 85 50 ff ff ff    	jne    c0000c96 <malloc_consolidate+0x2a>
c0000d46:	83 c4 10             	add    esp,0x10
c0000d49:	5b                   	pop    ebx
c0000d4a:	5e                   	pop    esi
c0000d4b:	5f                   	pop    edi
c0000d4c:	5d                   	pop    ebp
c0000d4d:	c3                   	ret    
c0000d4e:	e9 b8 fe ff ff       	jmp    c0000c0b <malloc_init_state>

c0000d53 <dlfree>:
c0000d53:	57                   	push   edi
c0000d54:	56                   	push   esi
c0000d55:	53                   	push   ebx
c0000d56:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000d5a:	85 db                	test   ebx,ebx
c0000d5c:	0f 84 e2 00 00 00    	je     c0000e44 <dlfree+0xf1>
c0000d62:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000d65:	8b 0d 00 61 02 c0    	mov    ecx,DWORD PTR ds:0xc0026100
c0000d6b:	89 f0                	mov    eax,esi
c0000d6d:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000d70:	83 e0 fc             	and    eax,0xfffffffc
c0000d73:	39 c1                	cmp    ecx,eax
c0000d75:	72 24                	jb     c0000d9b <dlfree+0x48>
c0000d77:	83 c9 03             	or     ecx,0x3
c0000d7a:	c1 e8 03             	shr    eax,0x3
c0000d7d:	89 0d 00 61 02 c0    	mov    DWORD PTR ds:0xc0026100,ecx
c0000d83:	83 e8 02             	sub    eax,0x2
c0000d86:	8b 0c 85 04 61 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd9efc]
c0000d8d:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000d8f:	89 14 85 04 61 02 c0 	mov    DWORD PTR [eax*4-0x3ffd9efc],edx
c0000d96:	e9 a9 00 00 00       	jmp    c0000e44 <dlfree+0xf1>
c0000d9b:	83 e6 02             	and    esi,0x2
c0000d9e:	0f 85 a0 00 00 00    	jne    c0000e44 <dlfree+0xf1>
c0000da4:	83 c9 01             	or     ecx,0x1
c0000da7:	8d 34 02             	lea    esi,[edx+eax*1]
c0000daa:	89 0d 00 61 02 c0    	mov    DWORD PTR ds:0xc0026100,ecx
c0000db0:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000db3:	83 e1 fc             	and    ecx,0xfffffffc
c0000db6:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000dba:	75 13                	jne    c0000dcf <dlfree+0x7c>
c0000dbc:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000dbf:	29 da                	sub    edx,ebx
c0000dc1:	01 d8                	add    eax,ebx
c0000dc3:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000dc6:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000dc9:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000dcc:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000dcf:	39 35 2c 61 02 c0    	cmp    DWORD PTR ds:0xc002612c,esi
c0000dd5:	74 40                	je     c0000e17 <dlfree+0xc4>
c0000dd7:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000ddb:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000dde:	80 e3 01             	and    bl,0x1
c0000de1:	75 0e                	jne    c0000df1 <dlfree+0x9e>
c0000de3:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000de6:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000de9:	01 c8                	add    eax,ecx
c0000deb:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000dee:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000df1:	8b 0d 3c 61 02 c0    	mov    ecx,DWORD PTR ds:0xc002613c
c0000df7:	c7 42 0c 34 61 02 c0 	mov    DWORD PTR [edx+0xc],0xc0026134
c0000dfe:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000e01:	89 15 3c 61 02 c0    	mov    DWORD PTR ds:0xc002613c,edx
c0000e07:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000e0a:	89 c1                	mov    ecx,eax
c0000e0c:	83 c9 01             	or     ecx,0x1
c0000e0f:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e12:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000e15:	eb 10                	jmp    c0000e27 <dlfree+0xd4>
c0000e17:	01 c8                	add    eax,ecx
c0000e19:	89 c1                	mov    ecx,eax
c0000e1b:	83 c9 01             	or     ecx,0x1
c0000e1e:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e21:	89 15 2c 61 02 c0    	mov    DWORD PTR ds:0xc002612c,edx
c0000e27:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000e2c:	76 16                	jbe    c0000e44 <dlfree+0xf1>
c0000e2e:	f6 05 00 61 02 c0 02 	test   BYTE PTR ds:0xc0026100,0x2
c0000e35:	74 0d                	je     c0000e44 <dlfree+0xf1>
c0000e37:	5b                   	pop    ebx
c0000e38:	b8 00 61 02 c0       	mov    eax,0xc0026100
c0000e3d:	5e                   	pop    esi
c0000e3e:	5f                   	pop    edi
c0000e3f:	e9 28 fe ff ff       	jmp    c0000c6c <malloc_consolidate>
c0000e44:	5b                   	pop    ebx
c0000e45:	5e                   	pop    esi
c0000e46:	5f                   	pop    edi
c0000e47:	c3                   	ret    

c0000e48 <sYSMALLOc>:
c0000e48:	55                   	push   ebp
c0000e49:	57                   	push   edi
c0000e4a:	56                   	push   esi
c0000e4b:	53                   	push   ebx
c0000e4c:	89 d3                	mov    ebx,edx
c0000e4e:	83 ec 2c             	sub    esp,0x2c
c0000e51:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000e55:	8b 92 5c 03 00 00    	mov    edx,DWORD PTR [edx+0x35c]
c0000e5b:	f6 03 02             	test   BYTE PTR [ebx],0x2
c0000e5e:	8d 42 ff             	lea    eax,[edx-0x1]
c0000e61:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0000e65:	74 1f                	je     c0000e86 <sYSMALLOc+0x3e>
c0000e67:	89 d8                	mov    eax,ebx
c0000e69:	e8 fe fd ff ff       	call   c0000c6c <malloc_consolidate>
c0000e6e:	83 ec 0c             	sub    esp,0xc
c0000e71:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0000e75:	83 e8 07             	sub    eax,0x7
c0000e78:	50                   	push   eax
c0000e79:	e8 2d 02 00 00       	call   c00010ab <dlmalloc>
c0000e7e:	83 c4 10             	add    esp,0x10
c0000e81:	e9 1d 02 00 00       	jmp    c00010a3 <sYSMALLOc+0x25b>
c0000e86:	8b 7b 2c             	mov    edi,DWORD PTR [ebx+0x2c]
c0000e89:	8b 8b 48 03 00 00    	mov    ecx,DWORD PTR [ebx+0x348]
c0000e8f:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0000e92:	83 e0 fc             	and    eax,0xfffffffc
c0000e95:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000e99:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000e9d:	83 c0 10             	add    eax,0x10
c0000ea0:	01 c1                	add    ecx,eax
c0000ea2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0000ea6:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000ead:	74 04                	je     c0000eb3 <sYSMALLOc+0x6b>
c0000eaf:	2b 4c 24 04          	sub    ecx,DWORD PTR [esp+0x4]
c0000eb3:	f7 da                	neg    edx
c0000eb5:	03 4c 24 14          	add    ecx,DWORD PTR [esp+0x14]
c0000eb9:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0000ebd:	21 d1                	and    ecx,edx
c0000ebf:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0000ec3:	7f 07                	jg     c0000ecc <sYSMALLOc+0x84>
c0000ec5:	31 c0                	xor    eax,eax
c0000ec7:	e9 d7 01 00 00       	jmp    c00010a3 <sYSMALLOc+0x25b>
c0000ecc:	83 ec 0c             	sub    esp,0xc
c0000ecf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000ed3:	e8 b0 6a 00 00       	call   c0007988 <sbrk>
c0000ed8:	83 c4 10             	add    esp,0x10
c0000edb:	89 c6                	mov    esi,eax
c0000edd:	83 f8 ff             	cmp    eax,0xffffffff
c0000ee0:	74 e3                	je     c0000ec5 <sYSMALLOc+0x7d>
c0000ee2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000ee6:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0000ee9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000eed:	03 83 68 03 00 00    	add    eax,DWORD PTR [ebx+0x368]
c0000ef3:	39 f1                	cmp    ecx,esi
c0000ef5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000ef9:	89 83 68 03 00 00    	mov    DWORD PTR [ebx+0x368],eax
c0000eff:	75 13                	jne    c0000f14 <sYSMALLOc+0xcc>
c0000f01:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000f05:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000f09:	83 c8 01             	or     eax,0x1
c0000f0c:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000f0f:	e9 37 01 00 00       	jmp    c000104b <sYSMALLOc+0x203>
c0000f14:	8b 93 60 03 00 00    	mov    edx,DWORD PTR [ebx+0x360]
c0000f1a:	89 d5                	mov    ebp,edx
c0000f1c:	83 e5 01             	and    ebp,0x1
c0000f1f:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000f24:	0f 95 c0             	setne  al
c0000f27:	21 e8                	and    eax,ebp
c0000f29:	39 f1                	cmp    ecx,esi
c0000f2b:	76 12                	jbe    c0000f3f <sYSMALLOc+0xf7>
c0000f2d:	85 c0                	test   eax,eax
c0000f2f:	74 0e                	je     c0000f3f <sYSMALLOc+0xf7>
c0000f31:	83 e2 fe             	and    edx,0xfffffffe
c0000f34:	89 93 60 03 00 00    	mov    DWORD PTR [ebx+0x360],edx
c0000f3a:	e9 82 00 00 00       	jmp    c0000fc1 <sYSMALLOc+0x179>
c0000f3f:	85 ed                	test   ebp,ebp
c0000f41:	74 7e                	je     c0000fc1 <sYSMALLOc+0x179>
c0000f43:	85 c0                	test   eax,eax
c0000f45:	74 0e                	je     c0000f55 <sYSMALLOc+0x10d>
c0000f47:	89 f0                	mov    eax,esi
c0000f49:	29 c8                	sub    eax,ecx
c0000f4b:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0000f4f:	89 83 68 03 00 00    	mov    DWORD PTR [ebx+0x368],eax
c0000f55:	89 f2                	mov    edx,esi
c0000f57:	83 e2 07             	and    edx,0x7
c0000f5a:	74 0c                	je     c0000f68 <sYSMALLOc+0x120>
c0000f5c:	b8 08 00 00 00       	mov    eax,0x8
c0000f61:	29 d0                	sub    eax,edx
c0000f63:	8d 2c 06             	lea    ebp,[esi+eax*1]
c0000f66:	eb 04                	jmp    c0000f6c <sYSMALLOc+0x124>
c0000f68:	89 f5                	mov    ebp,esi
c0000f6a:	31 c0                	xor    eax,eax
c0000f6c:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000f70:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000f74:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0000f78:	01 c1                	add    ecx,eax
c0000f7a:	83 ec 0c             	sub    esp,0xc
c0000f7d:	01 f1                	add    ecx,esi
c0000f7f:	01 ca                	add    edx,ecx
c0000f81:	29 c8                	sub    eax,ecx
c0000f83:	23 54 24 24          	and    edx,DWORD PTR [esp+0x24]
c0000f87:	01 c2                	add    edx,eax
c0000f89:	52                   	push   edx
c0000f8a:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0000f8e:	e8 f5 69 00 00       	call   c0007988 <sbrk>
c0000f93:	83 c4 10             	add    esp,0x10
c0000f96:	83 f8 ff             	cmp    eax,0xffffffff
c0000f99:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000f9d:	75 0f                	jne    c0000fae <sYSMALLOc+0x166>
c0000f9f:	83 ec 0c             	sub    esp,0xc
c0000fa2:	6a 00                	push   0x0
c0000fa4:	e8 df 69 00 00       	call   c0007988 <sbrk>
c0000fa9:	83 c4 10             	add    esp,0x10
c0000fac:	eb 30                	jmp    c0000fde <sYSMALLOc+0x196>
c0000fae:	39 c6                	cmp    esi,eax
c0000fb0:	76 33                	jbe    c0000fe5 <sYSMALLOc+0x19d>
c0000fb2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000fb6:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0000fbd:	01 f0                	add    eax,esi
c0000fbf:	eb 1d                	jmp    c0000fde <sYSMALLOc+0x196>
c0000fc1:	83 ec 0c             	sub    esp,0xc
c0000fc4:	89 f5                	mov    ebp,esi
c0000fc6:	6a 00                	push   0x0
c0000fc8:	e8 bb 69 00 00       	call   c0007988 <sbrk>
c0000fcd:	89 c2                	mov    edx,eax
c0000fcf:	29 f2                	sub    edx,esi
c0000fd1:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c0000fd5:	83 c4 10             	add    esp,0x10
c0000fd8:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000fde:	31 d2                	xor    edx,edx
c0000fe0:	83 f8 ff             	cmp    eax,0xffffffff
c0000fe3:	74 66                	je     c000104b <sYSMALLOc+0x203>
c0000fe5:	29 e8                	sub    eax,ebp
c0000fe7:	89 6b 2c             	mov    DWORD PTR [ebx+0x2c],ebp
c0000fea:	01 d0                	add    eax,edx
c0000fec:	83 c8 01             	or     eax,0x1
c0000fef:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0000ff2:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000ff8:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000ffd:	74 4c                	je     c000104b <sYSMALLOc+0x203>
c0000fff:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001003:	83 e8 0c             	sub    eax,0xc
c0001006:	83 e0 f8             	and    eax,0xfffffff8
c0001009:	89 c2                	mov    edx,eax
c000100b:	83 ca 01             	or     edx,0x1
c000100e:	83 f8 0f             	cmp    eax,0xf
c0001011:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c0001014:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c000101c:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c0001024:	76 25                	jbe    c000104b <sYSMALLOc+0x203>
c0001026:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c000102c:	83 ec 0c             	sub    esp,0xc
c000102f:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c0001039:	83 c7 08             	add    edi,0x8
c000103c:	57                   	push   edi
c000103d:	e8 11 fd ff ff       	call   c0000d53 <dlfree>
c0001042:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c0001048:	83 c4 10             	add    esp,0x10
c000104b:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c0001051:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c0001057:	73 06                	jae    c000105f <sYSMALLOc+0x217>
c0001059:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c000105f:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c0001065:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c000106b:	73 06                	jae    c0001073 <sYSMALLOc+0x22b>
c000106d:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c0001073:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0001076:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001079:	83 e2 fc             	and    edx,0xfffffffc
c000107c:	3b 54 24 1c          	cmp    edx,DWORD PTR [esp+0x1c]
c0001080:	0f 82 3f fe ff ff    	jb     c0000ec5 <sYSMALLOc+0x7d>
c0001086:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000108a:	8d 0c 38             	lea    ecx,[eax+edi*1]
c000108d:	29 fa                	sub    edx,edi
c000108f:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0001092:	83 ca 01             	or     edx,0x1
c0001095:	89 fb                	mov    ebx,edi
c0001097:	83 c0 08             	add    eax,0x8
c000109a:	83 cb 01             	or     ebx,0x1
c000109d:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c00010a0:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00010a3:	83 c4 2c             	add    esp,0x2c
c00010a6:	5b                   	pop    ebx
c00010a7:	5e                   	pop    esi
c00010a8:	5f                   	pop    edi
c00010a9:	5d                   	pop    ebp
c00010aa:	c3                   	ret    

c00010ab <dlmalloc>:
c00010ab:	55                   	push   ebp
c00010ac:	57                   	push   edi
c00010ad:	56                   	push   esi
c00010ae:	53                   	push   ebx
c00010af:	83 ec 1c             	sub    esp,0x1c
c00010b2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00010b6:	83 f8 df             	cmp    eax,0xffffffdf
c00010b9:	0f 87 70 03 00 00    	ja     c000142f <dlmalloc+0x384>
c00010bf:	83 c0 0b             	add    eax,0xb
c00010c2:	be 10 00 00 00       	mov    esi,0x10
c00010c7:	83 f8 0f             	cmp    eax,0xf
c00010ca:	76 05                	jbe    c00010d1 <dlmalloc+0x26>
c00010cc:	83 e0 f8             	and    eax,0xfffffff8
c00010cf:	89 c6                	mov    esi,eax
c00010d1:	8b 3d 00 61 02 c0    	mov    edi,DWORD PTR ds:0xc0026100
c00010d7:	f7 c7 01 00 00 00    	test   edi,0x1
c00010dd:	75 17                	jne    c00010f6 <dlmalloc+0x4b>
c00010df:	85 ff                	test   edi,edi
c00010e1:	0f 85 05 03 00 00    	jne    c00013ec <dlmalloc+0x341>
c00010e7:	b8 00 61 02 c0       	mov    eax,0xc0026100
c00010ec:	e8 7b fb ff ff       	call   c0000c6c <malloc_consolidate>
c00010f1:	e9 f6 02 00 00       	jmp    c00013ec <dlmalloc+0x341>
c00010f6:	39 f7                	cmp    edi,esi
c00010f8:	72 1f                	jb     c0001119 <dlmalloc+0x6e>
c00010fa:	89 f2                	mov    edx,esi
c00010fc:	c1 ea 03             	shr    edx,0x3
c00010ff:	83 ea 02             	sub    edx,0x2
c0001102:	8b 04 95 04 61 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd9efc]
c0001109:	85 c0                	test   eax,eax
c000110b:	74 0c                	je     c0001119 <dlmalloc+0x6e>
c000110d:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0001110:	89 0c 95 04 61 02 c0 	mov    DWORD PTR [edx*4-0x3ffd9efc],ecx
c0001117:	eb 30                	jmp    c0001149 <dlmalloc+0x9e>
c0001119:	89 f0                	mov    eax,esi
c000111b:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001121:	77 2e                	ja     c0001151 <dlmalloc+0xa6>
c0001123:	c1 e8 03             	shr    eax,0x3
c0001126:	8d 14 c5 34 61 02 c0 	lea    edx,[eax*8-0x3ffd9ecc]
c000112d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001131:	8d 5a f8             	lea    ebx,[edx-0x8]
c0001134:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c0001137:	39 c3                	cmp    ebx,eax
c0001139:	74 2e                	je     c0001169 <dlmalloc+0xbe>
c000113b:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c000113e:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c0001143:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0001146:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c0001149:	83 c0 08             	add    eax,0x8
c000114c:	e9 e0 02 00 00       	jmp    c0001431 <dlmalloc+0x386>
c0001151:	e8 92 fa ff ff       	call   c0000be8 <largebin_index>
c0001156:	83 e7 02             	and    edi,0x2
c0001159:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000115d:	74 0a                	je     c0001169 <dlmalloc+0xbe>
c000115f:	b8 00 61 02 c0       	mov    eax,0xc0026100
c0001164:	e8 03 fb ff ff       	call   c0000c6c <malloc_consolidate>
c0001169:	8d 46 10             	lea    eax,[esi+0x10]
c000116c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001170:	8b 1d 40 61 02 c0    	mov    ebx,DWORD PTR ds:0xc0026140
c0001176:	81 fb 34 61 02 c0    	cmp    ebx,0xc0026134
c000117c:	0f 84 13 01 00 00    	je     c0001295 <dlmalloc+0x1ea>
c0001182:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0001185:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0001188:	83 e7 fc             	and    edi,0xfffffffc
c000118b:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001191:	77 4c                	ja     c00011df <dlmalloc+0x134>
c0001193:	3d 34 61 02 c0       	cmp    eax,0xc0026134
c0001198:	75 45                	jne    c00011df <dlmalloc+0x134>
c000119a:	39 1d 30 61 02 c0    	cmp    DWORD PTR ds:0xc0026130,ebx
c00011a0:	75 3d                	jne    c00011df <dlmalloc+0x134>
c00011a2:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c00011a6:	73 37                	jae    c00011df <dlmalloc+0x134>
c00011a8:	8d 04 33             	lea    eax,[ebx+esi*1]
c00011ab:	89 fa                	mov    edx,edi
c00011ad:	a3 3c 61 02 c0       	mov    ds:0xc002613c,eax
c00011b2:	a3 40 61 02 c0       	mov    ds:0xc0026140,eax
c00011b7:	a3 30 61 02 c0       	mov    ds:0xc0026130,eax
c00011bc:	29 f2                	sub    edx,esi
c00011be:	c7 40 08 34 61 02 c0 	mov    DWORD PTR [eax+0x8],0xc0026134
c00011c5:	c7 40 0c 34 61 02 c0 	mov    DWORD PTR [eax+0xc],0xc0026134
c00011cc:	83 ce 01             	or     esi,0x1
c00011cf:	89 d1                	mov    ecx,edx
c00011d1:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c00011d4:	83 c9 01             	or     ecx,0x1
c00011d7:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c00011da:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c00011dd:	eb 15                	jmp    c00011f4 <dlmalloc+0x149>
c00011df:	a3 40 61 02 c0       	mov    ds:0xc0026140,eax
c00011e4:	39 fe                	cmp    esi,edi
c00011e6:	c7 40 08 34 61 02 c0 	mov    DWORD PTR [eax+0x8],0xc0026134
c00011ed:	75 0d                	jne    c00011fc <dlmalloc+0x151>
c00011ef:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c00011f4:	8d 43 08             	lea    eax,[ebx+0x8]
c00011f7:	e9 35 02 00 00       	jmp    c0001431 <dlmalloc+0x386>
c00011fc:	89 f8                	mov    eax,edi
c00011fe:	81 ff ff 00 00 00    	cmp    edi,0xff
c0001204:	77 19                	ja     c000121f <dlmalloc+0x174>
c0001206:	c1 e8 03             	shr    eax,0x3
c0001209:	8d 14 00             	lea    edx,[eax+eax*1]
c000120c:	83 c2 0d             	add    edx,0xd
c000120f:	8d 2c 95 f8 60 02 c0 	lea    ebp,[edx*4-0x3ffd9f08]
c0001216:	8b 14 95 00 61 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd9f00]
c000121d:	eb 46                	jmp    c0001265 <dlmalloc+0x1ba>
c000121f:	e8 c4 f9 ff ff       	call   c0000be8 <largebin_index>
c0001224:	8d 14 00             	lea    edx,[eax+eax*1]
c0001227:	83 c2 0d             	add    edx,0xd
c000122a:	8d 0c 95 00 61 02 c0 	lea    ecx,[edx*4-0x3ffd9f00]
c0001231:	8b 14 95 00 61 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd9f00]
c0001238:	8d 69 f8             	lea    ebp,[ecx-0x8]
c000123b:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c000123f:	89 d5                	mov    ebp,edx
c0001241:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c0001245:	74 1e                	je     c0001265 <dlmalloc+0x1ba>
c0001247:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c000124a:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c000124d:	77 12                	ja     c0001261 <dlmalloc+0x1b6>
c000124f:	83 cf 01             	or     edi,0x1
c0001252:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c0001255:	76 05                	jbe    c000125c <dlmalloc+0x1b1>
c0001257:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c000125a:	eb f6                	jmp    c0001252 <dlmalloc+0x1a7>
c000125c:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c000125f:	eb 04                	jmp    c0001265 <dlmalloc+0x1ba>
c0001261:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0001265:	89 c7                	mov    edi,eax
c0001267:	88 c1                	mov    cl,al
c0001269:	c1 ff 05             	sar    edi,0x5
c000126c:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0001270:	bf 01 00 00 00       	mov    edi,0x1
c0001275:	d3 e7                	shl    edi,cl
c0001277:	89 f8                	mov    eax,edi
c0001279:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000127d:	09 04 bd 34 64 02 c0 	or     DWORD PTR [edi*4-0x3ffd9bcc],eax
c0001284:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c0001287:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c000128a:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c000128d:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c0001290:	e9 db fe ff ff       	jmp    c0001170 <dlmalloc+0xc5>
c0001295:	81 fe ff 00 00 00    	cmp    esi,0xff
c000129b:	76 78                	jbe    c0001315 <dlmalloc+0x26a>
c000129d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00012a1:	8d 04 c5 34 61 02 c0 	lea    eax,[eax*8-0x3ffd9ecc]
c00012a8:	8d 48 f8             	lea    ecx,[eax-0x8]
c00012ab:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00012ae:	39 ca                	cmp    edx,ecx
c00012b0:	74 63                	je     c0001315 <dlmalloc+0x26a>
c00012b2:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c00012b5:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c00012b8:	83 e3 fc             	and    ebx,0xfffffffc
c00012bb:	39 de                	cmp    esi,ebx
c00012bd:	77 52                	ja     c0001311 <dlmalloc+0x266>
c00012bf:	89 df                	mov    edi,ebx
c00012c1:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c00012c4:	29 f7                	sub    edi,esi
c00012c6:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c00012c9:	01 d3                	add    ebx,edx
c00012cb:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c00012ce:	83 ff 0f             	cmp    edi,0xf
c00012d1:	8d 42 08             	lea    eax,[edx+0x8]
c00012d4:	77 09                	ja     c00012df <dlmalloc+0x234>
c00012d6:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c00012da:	e9 52 01 00 00       	jmp    c0001431 <dlmalloc+0x386>
c00012df:	8d 0c 32             	lea    ecx,[edx+esi*1]
c00012e2:	83 ce 01             	or     esi,0x1
c00012e5:	89 0d 3c 61 02 c0    	mov    DWORD PTR ds:0xc002613c,ecx
c00012eb:	89 0d 40 61 02 c0    	mov    DWORD PTR ds:0xc0026140,ecx
c00012f1:	c7 41 08 34 61 02 c0 	mov    DWORD PTR [ecx+0x8],0xc0026134
c00012f8:	c7 41 0c 34 61 02 c0 	mov    DWORD PTR [ecx+0xc],0xc0026134
c00012ff:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0001302:	89 fa                	mov    edx,edi
c0001304:	83 ca 01             	or     edx,0x1
c0001307:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000130a:	89 3b                	mov    DWORD PTR [ebx],edi
c000130c:	e9 20 01 00 00       	jmp    c0001431 <dlmalloc+0x386>
c0001311:	89 c2                	mov    edx,eax
c0001313:	eb 99                	jmp    c00012ae <dlmalloc+0x203>
c0001315:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001319:	b8 01 00 00 00       	mov    eax,0x1
c000131e:	41                   	inc    ecx
c000131f:	89 cb                	mov    ebx,ecx
c0001321:	8d 14 cd 2c 61 02 c0 	lea    edx,[ecx*8-0x3ffd9ed4]
c0001328:	c1 eb 05             	shr    ebx,0x5
c000132b:	d3 e0                	shl    eax,cl
c000132d:	8b 3c 9d 34 64 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd9bcc]
c0001334:	39 f8                	cmp    eax,edi
c0001336:	77 04                	ja     c000133c <dlmalloc+0x291>
c0001338:	85 c0                	test   eax,eax
c000133a:	75 26                	jne    c0001362 <dlmalloc+0x2b7>
c000133c:	43                   	inc    ebx
c000133d:	83 fb 02             	cmp    ebx,0x2
c0001340:	0f 87 a6 00 00 00    	ja     c00013ec <dlmalloc+0x341>
c0001346:	8b 3c 9d 34 64 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd9bcc]
c000134d:	85 ff                	test   edi,edi
c000134f:	74 eb                	je     c000133c <dlmalloc+0x291>
c0001351:	89 d8                	mov    eax,ebx
c0001353:	c1 e0 06             	shl    eax,0x6
c0001356:	8d 14 85 2c 61 02 c0 	lea    edx,[eax*4-0x3ffd9ed4]
c000135d:	b8 01 00 00 00       	mov    eax,0x1
c0001362:	85 f8                	test   eax,edi
c0001364:	75 07                	jne    c000136d <dlmalloc+0x2c2>
c0001366:	83 c2 08             	add    edx,0x8
c0001369:	01 c0                	add    eax,eax
c000136b:	eb f5                	jmp    c0001362 <dlmalloc+0x2b7>
c000136d:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0001370:	39 ca                	cmp    edx,ecx
c0001372:	75 14                	jne    c0001388 <dlmalloc+0x2dd>
c0001374:	89 c1                	mov    ecx,eax
c0001376:	83 c2 08             	add    edx,0x8
c0001379:	f7 d1                	not    ecx
c000137b:	01 c0                	add    eax,eax
c000137d:	21 cf                	and    edi,ecx
c000137f:	89 3c 9d 34 64 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd9bcc],edi
c0001386:	eb ac                	jmp    c0001334 <dlmalloc+0x289>
c0001388:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c000138b:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c000138e:	83 e0 fc             	and    eax,0xfffffffc
c0001391:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c0001394:	89 c3                	mov    ebx,eax
c0001396:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c0001399:	29 f3                	sub    ebx,esi
c000139b:	8d 14 01             	lea    edx,[ecx+eax*1]
c000139e:	83 fb 0f             	cmp    ebx,0xf
c00013a1:	8d 41 08             	lea    eax,[ecx+0x8]
c00013a4:	77 09                	ja     c00013af <dlmalloc+0x304>
c00013a6:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c00013aa:	e9 82 00 00 00       	jmp    c0001431 <dlmalloc+0x386>
c00013af:	8d 3c 31             	lea    edi,[ecx+esi*1]
c00013b2:	81 fe ff 00 00 00    	cmp    esi,0xff
c00013b8:	89 3d 3c 61 02 c0    	mov    DWORD PTR ds:0xc002613c,edi
c00013be:	89 3d 40 61 02 c0    	mov    DWORD PTR ds:0xc0026140,edi
c00013c4:	c7 47 08 34 61 02 c0 	mov    DWORD PTR [edi+0x8],0xc0026134
c00013cb:	c7 47 0c 34 61 02 c0 	mov    DWORD PTR [edi+0xc],0xc0026134
c00013d2:	77 06                	ja     c00013da <dlmalloc+0x32f>
c00013d4:	89 3d 30 61 02 c0    	mov    DWORD PTR ds:0xc0026130,edi
c00013da:	83 ce 01             	or     esi,0x1
c00013dd:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c00013e0:	89 d9                	mov    ecx,ebx
c00013e2:	83 c9 01             	or     ecx,0x1
c00013e5:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c00013e8:	89 1a                	mov    DWORD PTR [edx],ebx
c00013ea:	eb 45                	jmp    c0001431 <dlmalloc+0x386>
c00013ec:	a1 2c 61 02 c0       	mov    eax,ds:0xc002612c
c00013f1:	8d 4e 10             	lea    ecx,[esi+0x10]
c00013f4:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00013f7:	83 e2 fc             	and    edx,0xfffffffc
c00013fa:	39 d1                	cmp    ecx,edx
c00013fc:	77 1e                	ja     c000141c <dlmalloc+0x371>
c00013fe:	8d 0c 30             	lea    ecx,[eax+esi*1]
c0001401:	89 f3                	mov    ebx,esi
c0001403:	89 0d 2c 61 02 c0    	mov    DWORD PTR ds:0xc002612c,ecx
c0001409:	83 cb 01             	or     ebx,0x1
c000140c:	29 f2                	sub    edx,esi
c000140e:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0001411:	83 ca 01             	or     edx,0x1
c0001414:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001417:	e9 2d fd ff ff       	jmp    c0001149 <dlmalloc+0x9e>
c000141c:	83 c4 1c             	add    esp,0x1c
c000141f:	89 f0                	mov    eax,esi
c0001421:	5b                   	pop    ebx
c0001422:	ba 00 61 02 c0       	mov    edx,0xc0026100
c0001427:	5e                   	pop    esi
c0001428:	5f                   	pop    edi
c0001429:	5d                   	pop    ebp
c000142a:	e9 19 fa ff ff       	jmp    c0000e48 <sYSMALLOc>
c000142f:	31 c0                	xor    eax,eax
c0001431:	83 c4 1c             	add    esp,0x1c
c0001434:	5b                   	pop    ebx
c0001435:	5e                   	pop    esi
c0001436:	5f                   	pop    edi
c0001437:	5d                   	pop    ebp
c0001438:	c3                   	ret    

c0001439 <iALLOc>:
c0001439:	55                   	push   ebp
c000143a:	89 c5                	mov    ebp,eax
c000143c:	57                   	push   edi
c000143d:	56                   	push   esi
c000143e:	53                   	push   ebx
c000143f:	83 ec 2c             	sub    esp,0x2c
c0001442:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0001446:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000144a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000144e:	83 3d 00 61 02 c0 00 	cmp    DWORD PTR ds:0xc0026100,0x0
c0001455:	75 12                	jne    c0001469 <iALLOc+0x30>
c0001457:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000145b:	b8 00 61 02 c0       	mov    eax,0xc0026100
c0001460:	e8 07 f8 ff ff       	call   c0000c6c <malloc_consolidate>
c0001465:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0001469:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000146e:	74 12                	je     c0001482 <iALLOc+0x49>
c0001470:	85 ed                	test   ebp,ebp
c0001472:	0f 84 64 01 00 00    	je     c00015dc <iALLOc+0x1a3>
c0001478:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0001480:	eb 33                	jmp    c00014b5 <iALLOc+0x7c>
c0001482:	85 ed                	test   ebp,ebp
c0001484:	75 14                	jne    c000149a <iALLOc+0x61>
c0001486:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c000148e:	83 c4 2c             	add    esp,0x2c
c0001491:	5b                   	pop    ebx
c0001492:	5e                   	pop    esi
c0001493:	5f                   	pop    edi
c0001494:	5d                   	pop    ebp
c0001495:	e9 11 fc ff ff       	jmp    c00010ab <dlmalloc>
c000149a:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c00014a1:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c00014a9:	83 f8 0f             	cmp    eax,0xf
c00014ac:	76 07                	jbe    c00014b5 <iALLOc+0x7c>
c00014ae:	83 e0 f8             	and    eax,0xfffffff8
c00014b1:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00014b5:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c00014ba:	75 09                	jne    c00014c5 <iALLOc+0x8c>
c00014bc:	89 d0                	mov    eax,edx
c00014be:	8d 3c aa             	lea    edi,[edx+ebp*4]
c00014c1:	31 f6                	xor    esi,esi
c00014c3:	eb 3b                	jmp    c0001500 <iALLOc+0xc7>
c00014c5:	8b 02                	mov    eax,DWORD PTR [edx]
c00014c7:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c00014cf:	83 c0 0b             	add    eax,0xb
c00014d2:	83 f8 0f             	cmp    eax,0xf
c00014d5:	76 07                	jbe    c00014de <iALLOc+0xa5>
c00014d7:	83 e0 f8             	and    eax,0xfffffff8
c00014da:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00014de:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00014e2:	0f af f5             	imul   esi,ebp
c00014e5:	eb 25                	jmp    c000150c <iALLOc+0xd3>
c00014e7:	8b 18                	mov    ebx,DWORD PTR [eax]
c00014e9:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c00014ec:	bb 10 00 00 00       	mov    ebx,0x10
c00014f1:	83 f9 0f             	cmp    ecx,0xf
c00014f4:	76 05                	jbe    c00014fb <iALLOc+0xc2>
c00014f6:	83 e1 f8             	and    ecx,0xfffffff8
c00014f9:	89 cb                	mov    ebx,ecx
c00014fb:	01 de                	add    esi,ebx
c00014fd:	83 c0 04             	add    eax,0x4
c0001500:	39 c7                	cmp    edi,eax
c0001502:	75 e3                	jne    c00014e7 <iALLOc+0xae>
c0001504:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000150c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0001510:	8b 1d 54 64 02 c0    	mov    ebx,DWORD PTR ds:0xc0026454
c0001516:	83 ec 0c             	sub    esp,0xc
c0001519:	c7 05 54 64 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026454,0x0
c0001523:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001527:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c000152b:	50                   	push   eax
c000152c:	e8 7a fb ff ff       	call   c00010ab <dlmalloc>
c0001531:	83 c4 10             	add    esp,0x10
c0001534:	89 1d 54 64 02 c0    	mov    DWORD PTR ds:0xc0026454,ebx
c000153a:	85 c0                	test   eax,eax
c000153c:	0f 84 92 00 00 00    	je     c00015d4 <iALLOc+0x19b>
c0001542:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c0001545:	8d 78 f8             	lea    edi,[eax-0x8]
c0001548:	83 e3 fc             	and    ebx,0xfffffffc
c000154b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000154f:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c0001554:	74 1e                	je     c0001574 <iALLOc+0x13b>
c0001556:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000155a:	89 d9                	mov    ecx,ebx
c000155c:	52                   	push   edx
c000155d:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c0001561:	83 e9 04             	sub    ecx,0x4
c0001564:	51                   	push   ecx
c0001565:	6a 00                	push   0x0
c0001567:	50                   	push   eax
c0001568:	e8 83 ef ff ff       	call   c00004f0 <memset>
c000156d:	83 c4 10             	add    esp,0x10
c0001570:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001574:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0001579:	75 14                	jne    c000158f <iALLOc+0x156>
c000157b:	8d 04 37             	lea    eax,[edi+esi*1]
c000157e:	29 f3                	sub    ebx,esi
c0001580:	8d 48 08             	lea    ecx,[eax+0x8]
c0001583:	83 cb 01             	or     ebx,0x1
c0001586:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000158a:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000158d:	89 f3                	mov    ebx,esi
c000158f:	31 c0                	xor    eax,eax
c0001591:	4d                   	dec    ebp
c0001592:	8d 4f 08             	lea    ecx,[edi+0x8]
c0001595:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001599:	39 c5                	cmp    ebp,eax
c000159b:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c000159e:	74 2c                	je     c00015cc <iALLOc+0x193>
c00015a0:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00015a4:	85 c9                	test   ecx,ecx
c00015a6:	75 15                	jne    c00015bd <iALLOc+0x184>
c00015a8:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c00015ab:	8d 71 0b             	lea    esi,[ecx+0xb]
c00015ae:	b9 10 00 00 00       	mov    ecx,0x10
c00015b3:	83 fe 0f             	cmp    esi,0xf
c00015b6:	76 05                	jbe    c00015bd <iALLOc+0x184>
c00015b8:	83 e6 f8             	and    esi,0xfffffff8
c00015bb:	89 f1                	mov    ecx,esi
c00015bd:	89 ce                	mov    esi,ecx
c00015bf:	29 cb                	sub    ebx,ecx
c00015c1:	83 ce 01             	or     esi,0x1
c00015c4:	40                   	inc    eax
c00015c5:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c00015c8:	01 cf                	add    edi,ecx
c00015ca:	eb c6                	jmp    c0001592 <iALLOc+0x159>
c00015cc:	83 cb 01             	or     ebx,0x1
c00015cf:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c00015d2:	eb 08                	jmp    c00015dc <iALLOc+0x1a3>
c00015d4:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00015dc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00015e0:	83 c4 2c             	add    esp,0x2c
c00015e3:	5b                   	pop    ebx
c00015e4:	5e                   	pop    esi
c00015e5:	5f                   	pop    edi
c00015e6:	5d                   	pop    ebp
c00015e7:	c3                   	ret    

c00015e8 <dlrealloc>:
c00015e8:	55                   	push   ebp
c00015e9:	57                   	push   edi
c00015ea:	56                   	push   esi
c00015eb:	53                   	push   ebx
c00015ec:	83 ec 1c             	sub    esp,0x1c
c00015ef:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00015f3:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00015f7:	85 db                	test   ebx,ebx
c00015f9:	75 10                	jne    c000160b <dlrealloc+0x23>
c00015fb:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00015ff:	83 c4 1c             	add    esp,0x1c
c0001602:	5b                   	pop    ebx
c0001603:	5e                   	pop    esi
c0001604:	5f                   	pop    edi
c0001605:	5d                   	pop    ebp
c0001606:	e9 a0 fa ff ff       	jmp    c00010ab <dlmalloc>
c000160b:	83 f8 df             	cmp    eax,0xffffffdf
c000160e:	76 07                	jbe    c0001617 <dlrealloc+0x2f>
c0001610:	31 db                	xor    ebx,ebx
c0001612:	e9 6a 01 00 00       	jmp    c0001781 <dlrealloc+0x199>
c0001617:	83 c0 0b             	add    eax,0xb
c000161a:	bd 10 00 00 00       	mov    ebp,0x10
c000161f:	83 f8 0f             	cmp    eax,0xf
c0001622:	76 05                	jbe    c0001629 <dlrealloc+0x41>
c0001624:	83 e0 f8             	and    eax,0xfffffff8
c0001627:	89 c5                	mov    ebp,eax
c0001629:	8b 43 fc             	mov    eax,DWORD PTR [ebx-0x4]
c000162c:	8d 7b f8             	lea    edi,[ebx-0x8]
c000162f:	89 c6                	mov    esi,eax
c0001631:	83 e6 fc             	and    esi,0xfffffffc
c0001634:	a8 02                	test   al,0x2
c0001636:	75 d8                	jne    c0001610 <dlrealloc+0x28>
c0001638:	39 f5                	cmp    ebp,esi
c000163a:	0f 86 04 01 00 00    	jbe    c0001744 <dlrealloc+0x15c>
c0001640:	8d 14 37             	lea    edx,[edi+esi*1]
c0001643:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c0001646:	39 15 2c 61 02 c0    	cmp    DWORD PTR ds:0xc002612c,edx
c000164c:	75 33                	jne    c0001681 <dlrealloc+0x99>
c000164e:	83 e1 fc             	and    ecx,0xfffffffc
c0001651:	01 f1                	add    ecx,esi
c0001653:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0001657:	8d 4d 10             	lea    ecx,[ebp+0x10]
c000165a:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c000165e:	77 49                	ja     c00016a9 <dlrealloc+0xc1>
c0001660:	01 ef                	add    edi,ebp
c0001662:	83 e0 01             	and    eax,0x1
c0001665:	09 e8                	or     eax,ebp
c0001667:	89 43 fc             	mov    DWORD PTR [ebx-0x4],eax
c000166a:	89 3d 2c 61 02 c0    	mov    DWORD PTR ds:0xc002612c,edi
c0001670:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001674:	29 e8                	sub    eax,ebp
c0001676:	83 c8 01             	or     eax,0x1
c0001679:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c000167c:	e9 00 01 00 00       	jmp    c0001781 <dlrealloc+0x199>
c0001681:	89 c8                	mov    eax,ecx
c0001683:	83 e0 fe             	and    eax,0xfffffffe
c0001686:	f6 44 02 04 01       	test   BYTE PTR [edx+eax*1+0x4],0x1
c000168b:	75 1c                	jne    c00016a9 <dlrealloc+0xc1>
c000168d:	83 e1 fc             	and    ecx,0xfffffffc
c0001690:	01 f1                	add    ecx,esi
c0001692:	39 cd                	cmp    ebp,ecx
c0001694:	77 13                	ja     c00016a9 <dlrealloc+0xc1>
c0001696:	8b 72 08             	mov    esi,DWORD PTR [edx+0x8]
c0001699:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c000169c:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
c000169f:	89 70 08             	mov    DWORD PTR [eax+0x8],esi
c00016a2:	89 ce                	mov    esi,ecx
c00016a4:	e9 9b 00 00 00       	jmp    c0001744 <dlrealloc+0x15c>
c00016a9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00016ad:	8d 45 f9             	lea    eax,[ebp-0x7]
c00016b0:	83 ec 0c             	sub    esp,0xc
c00016b3:	50                   	push   eax
c00016b4:	e8 f2 f9 ff ff       	call   c00010ab <dlmalloc>
c00016b9:	83 c4 10             	add    esp,0x10
c00016bc:	85 c0                	test   eax,eax
c00016be:	0f 84 4c ff ff ff    	je     c0001610 <dlrealloc+0x28>
c00016c4:	8d 48 f8             	lea    ecx,[eax-0x8]
c00016c7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00016cb:	39 ca                	cmp    edx,ecx
c00016cd:	75 0a                	jne    c00016d9 <dlrealloc+0xf1>
c00016cf:	8b 40 fc             	mov    eax,DWORD PTR [eax-0x4]
c00016d2:	83 e0 fc             	and    eax,0xfffffffc
c00016d5:	01 c6                	add    esi,eax
c00016d7:	eb 6b                	jmp    c0001744 <dlrealloc+0x15c>
c00016d9:	8d 4e fc             	lea    ecx,[esi-0x4]
c00016dc:	83 f9 27             	cmp    ecx,0x27
c00016df:	76 08                	jbe    c00016e9 <dlrealloc+0x101>
c00016e1:	89 de                	mov    esi,ebx
c00016e3:	89 c7                	mov    edi,eax
c00016e5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00016e7:	eb 43                	jmp    c000172c <dlrealloc+0x144>
c00016e9:	8b 13                	mov    edx,DWORD PTR [ebx]
c00016eb:	83 f9 13             	cmp    ecx,0x13
c00016ee:	89 10                	mov    DWORD PTR [eax],edx
c00016f0:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c00016f3:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00016f6:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00016f9:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00016fc:	76 2e                	jbe    c000172c <dlrealloc+0x144>
c00016fe:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0001701:	83 f9 1b             	cmp    ecx,0x1b
c0001704:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0001707:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c000170a:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000170d:	76 1d                	jbe    c000172c <dlrealloc+0x144>
c000170f:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0001712:	83 f9 23             	cmp    ecx,0x23
c0001715:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0001718:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000171b:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000171e:	76 0c                	jbe    c000172c <dlrealloc+0x144>
c0001720:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0001723:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0001726:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0001729:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c000172c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001730:	83 ec 0c             	sub    esp,0xc
c0001733:	53                   	push   ebx
c0001734:	e8 1a f6 ff ff       	call   c0000d53 <dlfree>
c0001739:	83 c4 10             	add    esp,0x10
c000173c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001740:	89 c3                	mov    ebx,eax
c0001742:	eb 3d                	jmp    c0001781 <dlrealloc+0x199>
c0001744:	89 f2                	mov    edx,esi
c0001746:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c0001749:	29 ea                	sub    edx,ebp
c000174b:	83 e1 01             	and    ecx,0x1
c000174e:	8d 04 37             	lea    eax,[edi+esi*1]
c0001751:	83 fa 0f             	cmp    edx,0xf
c0001754:	77 0b                	ja     c0001761 <dlrealloc+0x179>
c0001756:	09 ce                	or     esi,ecx
c0001758:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c000175b:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c000175f:	eb 20                	jmp    c0001781 <dlrealloc+0x199>
c0001761:	01 ef                	add    edi,ebp
c0001763:	83 ec 0c             	sub    esp,0xc
c0001766:	09 cd                	or     ebp,ecx
c0001768:	83 ca 01             	or     edx,0x1
c000176b:	89 6b fc             	mov    DWORD PTR [ebx-0x4],ebp
c000176e:	83 c7 08             	add    edi,0x8
c0001771:	89 57 fc             	mov    DWORD PTR [edi-0x4],edx
c0001774:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c0001778:	57                   	push   edi
c0001779:	e8 d5 f5 ff ff       	call   c0000d53 <dlfree>
c000177e:	83 c4 10             	add    esp,0x10
c0001781:	83 c4 1c             	add    esp,0x1c
c0001784:	89 d8                	mov    eax,ebx
c0001786:	5b                   	pop    ebx
c0001787:	5e                   	pop    esi
c0001788:	5f                   	pop    edi
c0001789:	5d                   	pop    ebp
c000178a:	c3                   	ret    

c000178b <dlmemalign>:
c000178b:	55                   	push   ebp
c000178c:	57                   	push   edi
c000178d:	56                   	push   esi
c000178e:	53                   	push   ebx
c000178f:	83 ec 0c             	sub    esp,0xc
c0001792:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0001796:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000179a:	83 fa 08             	cmp    edx,0x8
c000179d:	77 10                	ja     c00017af <dlmemalign+0x24>
c000179f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00017a3:	83 c4 0c             	add    esp,0xc
c00017a6:	5b                   	pop    ebx
c00017a7:	5e                   	pop    esi
c00017a8:	5f                   	pop    edi
c00017a9:	5d                   	pop    ebp
c00017aa:	e9 fc f8 ff ff       	jmp    c00010ab <dlmalloc>
c00017af:	bf 10 00 00 00       	mov    edi,0x10
c00017b4:	83 fa 0f             	cmp    edx,0xf
c00017b7:	76 13                	jbe    c00017cc <dlmemalign+0x41>
c00017b9:	8d 4a ff             	lea    ecx,[edx-0x1]
c00017bc:	85 d1                	test   ecx,edx
c00017be:	75 04                	jne    c00017c4 <dlmemalign+0x39>
c00017c0:	89 d7                	mov    edi,edx
c00017c2:	eb 08                	jmp    c00017cc <dlmemalign+0x41>
c00017c4:	39 d7                	cmp    edi,edx
c00017c6:	73 04                	jae    c00017cc <dlmemalign+0x41>
c00017c8:	01 ff                	add    edi,edi
c00017ca:	eb f8                	jmp    c00017c4 <dlmemalign+0x39>
c00017cc:	83 f8 df             	cmp    eax,0xffffffdf
c00017cf:	76 07                	jbe    c00017d8 <dlmemalign+0x4d>
c00017d1:	31 c0                	xor    eax,eax
c00017d3:	e9 ce 00 00 00       	jmp    c00018a6 <dlmemalign+0x11b>
c00017d8:	83 c0 0b             	add    eax,0xb
c00017db:	bd 10 00 00 00       	mov    ebp,0x10
c00017e0:	83 f8 0f             	cmp    eax,0xf
c00017e3:	76 05                	jbe    c00017ea <dlmemalign+0x5f>
c00017e5:	83 e0 f8             	and    eax,0xfffffff8
c00017e8:	89 c5                	mov    ebp,eax
c00017ea:	83 ec 0c             	sub    esp,0xc
c00017ed:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c00017f1:	50                   	push   eax
c00017f2:	e8 b4 f8 ff ff       	call   c00010ab <dlmalloc>
c00017f7:	83 c4 10             	add    esp,0x10
c00017fa:	89 c1                	mov    ecx,eax
c00017fc:	85 c0                	test   eax,eax
c00017fe:	74 d1                	je     c00017d1 <dlmemalign+0x46>
c0001800:	31 d2                	xor    edx,edx
c0001802:	8d 70 f8             	lea    esi,[eax-0x8]
c0001805:	f7 f7                	div    edi
c0001807:	85 d2                	test   edx,edx
c0001809:	74 62                	je     c000186d <dlmemalign+0xe2>
c000180b:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c000180f:	89 f8                	mov    eax,edi
c0001811:	f7 d8                	neg    eax
c0001813:	21 c3                	and    ebx,eax
c0001815:	83 eb 08             	sub    ebx,0x8
c0001818:	89 d8                	mov    eax,ebx
c000181a:	29 f0                	sub    eax,esi
c000181c:	83 f8 0f             	cmp    eax,0xf
c000181f:	77 02                	ja     c0001823 <dlmemalign+0x98>
c0001821:	01 fb                	add    ebx,edi
c0001823:	89 d8                	mov    eax,ebx
c0001825:	29 f0                	sub    eax,esi
c0001827:	89 c6                	mov    esi,eax
c0001829:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c000182c:	89 c2                	mov    edx,eax
c000182e:	83 e2 fc             	and    edx,0xfffffffc
c0001831:	29 f2                	sub    edx,esi
c0001833:	a8 02                	test   al,0x2
c0001835:	74 10                	je     c0001847 <dlmemalign+0xbc>
c0001837:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c000183a:	83 ca 02             	or     edx,0x2
c000183d:	8d 43 08             	lea    eax,[ebx+0x8]
c0001840:	89 33                	mov    DWORD PTR [ebx],esi
c0001842:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0001845:	eb 5f                	jmp    c00018a6 <dlmemalign+0x11b>
c0001847:	83 ec 0c             	sub    esp,0xc
c000184a:	89 d0                	mov    eax,edx
c000184c:	83 c8 01             	or     eax,0x1
c000184f:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0001852:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c0001857:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c000185a:	83 e0 01             	and    eax,0x1
c000185d:	09 f0                	or     eax,esi
c000185f:	89 de                	mov    esi,ebx
c0001861:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c0001864:	51                   	push   ecx
c0001865:	e8 e9 f4 ff ff       	call   c0000d53 <dlfree>
c000186a:	83 c4 10             	add    esp,0x10
c000186d:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0001870:	a8 02                	test   al,0x2
c0001872:	75 2f                	jne    c00018a3 <dlmemalign+0x118>
c0001874:	83 e0 fc             	and    eax,0xfffffffc
c0001877:	8d 55 10             	lea    edx,[ebp+0x10]
c000187a:	39 c2                	cmp    edx,eax
c000187c:	73 25                	jae    c00018a3 <dlmemalign+0x118>
c000187e:	8d 14 2e             	lea    edx,[esi+ebp*1]
c0001881:	83 ec 0c             	sub    esp,0xc
c0001884:	29 e8                	sub    eax,ebp
c0001886:	83 c2 08             	add    edx,0x8
c0001889:	83 c8 01             	or     eax,0x1
c000188c:	89 42 fc             	mov    DWORD PTR [edx-0x4],eax
c000188f:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0001892:	83 e0 01             	and    eax,0x1
c0001895:	09 c5                	or     ebp,eax
c0001897:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c000189a:	52                   	push   edx
c000189b:	e8 b3 f4 ff ff       	call   c0000d53 <dlfree>
c00018a0:	83 c4 10             	add    esp,0x10
c00018a3:	8d 46 08             	lea    eax,[esi+0x8]
c00018a6:	83 c4 0c             	add    esp,0xc
c00018a9:	5b                   	pop    ebx
c00018aa:	5e                   	pop    esi
c00018ab:	5f                   	pop    edi
c00018ac:	5d                   	pop    ebp
c00018ad:	c3                   	ret    

c00018ae <dlcalloc>:
c00018ae:	53                   	push   ebx
c00018af:	83 ec 14             	sub    esp,0x14
c00018b2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00018b6:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c00018bb:	50                   	push   eax
c00018bc:	e8 ea f7 ff ff       	call   c00010ab <dlmalloc>
c00018c1:	83 c4 10             	add    esp,0x10
c00018c4:	89 c3                	mov    ebx,eax
c00018c6:	85 c0                	test   eax,eax
c00018c8:	74 77                	je     c0001941 <dlcalloc+0x93>
c00018ca:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c00018cd:	89 d0                	mov    eax,edx
c00018cf:	83 e0 fc             	and    eax,0xfffffffc
c00018d2:	80 e2 02             	and    dl,0x2
c00018d5:	75 5a                	jne    c0001931 <dlcalloc+0x83>
c00018d7:	83 e8 04             	sub    eax,0x4
c00018da:	83 f8 27             	cmp    eax,0x27
c00018dd:	76 03                	jbe    c00018e2 <dlcalloc+0x34>
c00018df:	51                   	push   ecx
c00018e0:	eb 53                	jmp    c0001935 <dlcalloc+0x87>
c00018e2:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00018e8:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00018ef:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c00018f6:	83 f8 13             	cmp    eax,0x13
c00018f9:	76 46                	jbe    c0001941 <dlcalloc+0x93>
c00018fb:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0001902:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0001909:	83 f8 1b             	cmp    eax,0x1b
c000190c:	76 33                	jbe    c0001941 <dlcalloc+0x93>
c000190e:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0001915:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000191c:	83 f8 23             	cmp    eax,0x23
c000191f:	76 20                	jbe    c0001941 <dlcalloc+0x93>
c0001921:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0001928:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c000192f:	eb 10                	jmp    c0001941 <dlcalloc+0x93>
c0001931:	83 e8 08             	sub    eax,0x8
c0001934:	52                   	push   edx
c0001935:	50                   	push   eax
c0001936:	6a 00                	push   0x0
c0001938:	53                   	push   ebx
c0001939:	e8 b2 eb ff ff       	call   c00004f0 <memset>
c000193e:	83 c4 10             	add    esp,0x10
c0001941:	89 d8                	mov    eax,ebx
c0001943:	83 c4 08             	add    esp,0x8
c0001946:	5b                   	pop    ebx
c0001947:	c3                   	ret    

c0001948 <dlcfree>:
c0001948:	e9 06 f4 ff ff       	jmp    c0000d53 <dlfree>

c000194d <dlindependent_calloc>:
c000194d:	83 ec 28             	sub    esp,0x28
c0001950:	b9 03 00 00 00       	mov    ecx,0x3
c0001955:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001959:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000195d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0001961:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0001965:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001969:	e8 cb fa ff ff       	call   c0001439 <iALLOc>
c000196e:	83 c4 2c             	add    esp,0x2c
c0001971:	c3                   	ret    

c0001972 <dlindependent_comalloc>:
c0001972:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0001976:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000197a:	31 c9                	xor    ecx,ecx
c000197c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0001980:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0001984:	e9 b0 fa ff ff       	jmp    c0001439 <iALLOc>

c0001989 <dlvalloc>:
c0001989:	83 ec 0c             	sub    esp,0xc
c000198c:	83 3d 00 61 02 c0 00 	cmp    DWORD PTR ds:0xc0026100,0x0
c0001993:	75 0a                	jne    c000199f <dlvalloc+0x16>
c0001995:	b8 00 61 02 c0       	mov    eax,0xc0026100
c000199a:	e8 cd f2 ff ff       	call   c0000c6c <malloc_consolidate>
c000199f:	50                   	push   eax
c00019a0:	50                   	push   eax
c00019a1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00019a5:	ff 35 5c 64 02 c0    	push   DWORD PTR ds:0xc002645c
c00019ab:	e8 db fd ff ff       	call   c000178b <dlmemalign>
c00019b0:	83 c4 1c             	add    esp,0x1c
c00019b3:	c3                   	ret    

c00019b4 <dlpvalloc>:
c00019b4:	83 ec 0c             	sub    esp,0xc
c00019b7:	83 3d 00 61 02 c0 00 	cmp    DWORD PTR ds:0xc0026100,0x0
c00019be:	75 0a                	jne    c00019ca <dlpvalloc+0x16>
c00019c0:	b8 00 61 02 c0       	mov    eax,0xc0026100
c00019c5:	e8 a2 f2 ff ff       	call   c0000c6c <malloc_consolidate>
c00019ca:	a1 5c 64 02 c0       	mov    eax,ds:0xc002645c
c00019cf:	89 c1                	mov    ecx,eax
c00019d1:	52                   	push   edx
c00019d2:	f7 d9                	neg    ecx
c00019d4:	52                   	push   edx
c00019d5:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00019d9:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c00019dd:	21 ca                	and    edx,ecx
c00019df:	52                   	push   edx
c00019e0:	50                   	push   eax
c00019e1:	e8 a5 fd ff ff       	call   c000178b <dlmemalign>
c00019e6:	83 c4 1c             	add    esp,0x1c
c00019e9:	c3                   	ret    

c00019ea <dlmalloc_trim>:
c00019ea:	b8 00 61 02 c0       	mov    eax,0xc0026100
c00019ef:	e8 78 f2 ff ff       	call   c0000c6c <malloc_consolidate>
c00019f4:	31 c0                	xor    eax,eax
c00019f6:	c3                   	ret    

c00019f7 <dlmalloc_usable_size>:
c00019f7:	53                   	push   ebx
c00019f8:	31 c0                	xor    eax,eax
c00019fa:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00019fe:	85 c9                	test   ecx,ecx
c0001a00:	74 24                	je     c0001a26 <dlmalloc_usable_size+0x2f>
c0001a02:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c0001a05:	f6 c2 02             	test   dl,0x2
c0001a08:	74 08                	je     c0001a12 <dlmalloc_usable_size+0x1b>
c0001a0a:	83 e2 fc             	and    edx,0xfffffffc
c0001a0d:	8d 42 f8             	lea    eax,[edx-0x8]
c0001a10:	eb 14                	jmp    c0001a26 <dlmalloc_usable_size+0x2f>
c0001a12:	89 d3                	mov    ebx,edx
c0001a14:	31 c0                	xor    eax,eax
c0001a16:	83 e3 fe             	and    ebx,0xfffffffe
c0001a19:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c0001a1e:	74 06                	je     c0001a26 <dlmalloc_usable_size+0x2f>
c0001a20:	83 e2 fc             	and    edx,0xfffffffc
c0001a23:	8d 42 fc             	lea    eax,[edx-0x4]
c0001a26:	5b                   	pop    ebx
c0001a27:	c3                   	ret    

c0001a28 <dlmallinfo>:
c0001a28:	55                   	push   ebp
c0001a29:	57                   	push   edi
c0001a2a:	56                   	push   esi
c0001a2b:	53                   	push   ebx
c0001a2c:	83 ec 08             	sub    esp,0x8
c0001a2f:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0001a33:	83 3d 2c 61 02 c0 00 	cmp    DWORD PTR ds:0xc002612c,0x0
c0001a3a:	75 0a                	jne    c0001a46 <dlmallinfo+0x1e>
c0001a3c:	b8 00 61 02 c0       	mov    eax,0xc0026100
c0001a41:	e8 26 f2 ff ff       	call   c0000c6c <malloc_consolidate>
c0001a46:	a1 2c 61 02 c0       	mov    eax,ds:0xc002612c
c0001a4b:	31 ed                	xor    ebp,ebp
c0001a4d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0001a50:	31 c9                	xor    ecx,ecx
c0001a52:	83 e0 fc             	and    eax,0xfffffffc
c0001a55:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001a59:	31 c0                	xor    eax,eax
c0001a5b:	8b 14 85 04 61 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd9efc]
c0001a62:	85 d2                	test   edx,edx
c0001a64:	74 0e                	je     c0001a74 <dlmallinfo+0x4c>
c0001a66:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c0001a69:	45                   	inc    ebp
c0001a6a:	83 e6 fc             	and    esi,0xfffffffc
c0001a6d:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0001a70:	01 f1                	add    ecx,esi
c0001a72:	eb ee                	jmp    c0001a62 <dlmallinfo+0x3a>
c0001a74:	40                   	inc    eax
c0001a75:	83 f8 0a             	cmp    eax,0xa
c0001a78:	75 e1                	jne    c0001a5b <dlmallinfo+0x33>
c0001a7a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001a7e:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0001a85:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001a88:	b8 34 61 02 c0       	mov    eax,0xc0026134
c0001a8d:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c0001a90:	39 f0                	cmp    eax,esi
c0001a92:	74 10                	je     c0001aa4 <dlmallinfo+0x7c>
c0001a94:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0001a97:	ff 04 24             	inc    DWORD PTR [esp]
c0001a9a:	83 e7 fc             	and    edi,0xfffffffc
c0001a9d:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0001aa0:	01 fa                	add    edx,edi
c0001aa2:	eb ec                	jmp    c0001a90 <dlmallinfo+0x68>
c0001aa4:	83 c0 08             	add    eax,0x8
c0001aa7:	3d 2c 64 02 c0       	cmp    eax,0xc002642c
c0001aac:	75 df                	jne    c0001a8d <dlmallinfo+0x65>
c0001aae:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c0001ab1:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0001ab4:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001ab7:	a1 68 64 02 c0       	mov    eax,ds:0xc0026468
c0001abc:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001abf:	89 03                	mov    DWORD PTR [ebx],eax
c0001ac1:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0001ac4:	8b 35 50 64 02 c0    	mov    esi,DWORD PTR ds:0xc0026450
c0001aca:	29 d0                	sub    eax,edx
c0001acc:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001acf:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001ad2:	8b 35 64 64 02 c0    	mov    esi,DWORD PTR ds:0xc0026464
c0001ad8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001adc:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001adf:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001ae2:	8b 35 74 64 02 c0    	mov    esi,DWORD PTR ds:0xc0026474
c0001ae8:	89 d8                	mov    eax,ebx
c0001aea:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001aed:	83 c4 08             	add    esp,0x8
c0001af0:	5b                   	pop    ebx
c0001af1:	5e                   	pop    esi
c0001af2:	5f                   	pop    edi
c0001af3:	5d                   	pop    ebp
c0001af4:	c2 04 00             	ret    0x4

c0001af7 <dlmalloc_stats>:
c0001af7:	83 ec 30             	sub    esp,0x30
c0001afa:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001afe:	50                   	push   eax
c0001aff:	e8 24 ff ff ff       	call   c0001a28 <dlmallinfo>
c0001b04:	83 c4 30             	add    esp,0x30
c0001b07:	c3                   	ret    

c0001b08 <dlmallopt>:
c0001b08:	56                   	push   esi
c0001b09:	b8 00 61 02 c0       	mov    eax,0xc0026100
c0001b0e:	53                   	push   ebx
c0001b0f:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001b13:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001b17:	e8 50 f1 ff ff       	call   c0000c6c <malloc_consolidate>
c0001b1c:	8d 46 04             	lea    eax,[esi+0x4]
c0001b1f:	83 f8 05             	cmp    eax,0x5
c0001b22:	77 67                	ja     c0001b8b <dlmallopt+0x83>
c0001b24:	ff 24 85 e4 04 02 c0 	jmp    DWORD PTR [eax*4-0x3ffdfb1c]
c0001b2b:	83 fb 50             	cmp    ebx,0x50
c0001b2e:	77 5b                	ja     c0001b8b <dlmallopt+0x83>
c0001b30:	ba 08 00 00 00       	mov    edx,0x8
c0001b35:	85 db                	test   ebx,ebx
c0001b37:	74 12                	je     c0001b4b <dlmallopt+0x43>
c0001b39:	83 c3 0b             	add    ebx,0xb
c0001b3c:	ba 10 00 00 00       	mov    edx,0x10
c0001b41:	83 fb 0f             	cmp    ebx,0xf
c0001b44:	76 05                	jbe    c0001b4b <dlmallopt+0x43>
c0001b46:	89 da                	mov    edx,ebx
c0001b48:	83 e2 f8             	and    edx,0xfffffff8
c0001b4b:	a1 00 61 02 c0       	mov    eax,ds:0xc0026100
c0001b50:	83 e0 03             	and    eax,0x3
c0001b53:	09 d0                	or     eax,edx
c0001b55:	a3 00 61 02 c0       	mov    ds:0xc0026100,eax
c0001b5a:	eb 31                	jmp    c0001b8d <dlmallopt+0x85>
c0001b5c:	89 1d 44 64 02 c0    	mov    DWORD PTR ds:0xc0026444,ebx
c0001b62:	eb 06                	jmp    c0001b6a <dlmallopt+0x62>
c0001b64:	89 1d 48 64 02 c0    	mov    DWORD PTR ds:0xc0026448,ebx
c0001b6a:	be 01 00 00 00       	mov    esi,0x1
c0001b6f:	eb 1c                	jmp    c0001b8d <dlmallopt+0x85>
c0001b71:	89 1d 4c 64 02 c0    	mov    DWORD PTR ds:0xc002644c,ebx
c0001b77:	eb f1                	jmp    c0001b6a <dlmallopt+0x62>
c0001b79:	31 f6                	xor    esi,esi
c0001b7b:	85 db                	test   ebx,ebx
c0001b7d:	75 0e                	jne    c0001b8d <dlmallopt+0x85>
c0001b7f:	c7 05 54 64 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026454,0x0
c0001b89:	eb df                	jmp    c0001b6a <dlmallopt+0x62>
c0001b8b:	31 f6                	xor    esi,esi
c0001b8d:	89 f0                	mov    eax,esi
c0001b8f:	5b                   	pop    ebx
c0001b90:	5e                   	pop    esi
c0001b91:	c3                   	ret    
c0001b92:	66 90                	xchg   ax,ax

c0001b94 <isblank>:
c0001b94:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001b99:	74 09                	je     c0001ba4 <isblank+0x10>
c0001b9b:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001ba0:	75 0a                	jne    c0001bac <isblank+0x18>
c0001ba2:	66 90                	xchg   ax,ax
c0001ba4:	b8 01 00 00 00       	mov    eax,0x1
c0001ba9:	c3                   	ret    
c0001baa:	66 90                	xchg   ax,ax
c0001bac:	b8 00 00 00 00       	mov    eax,0x0
c0001bb1:	c3                   	ret    
c0001bb2:	66 90                	xchg   ax,ax

c0001bb4 <iscntrl>:
c0001bb4:	83 7c 24 04 1f       	cmp    DWORD PTR [esp+0x4],0x1f
c0001bb9:	7e 09                	jle    c0001bc4 <iscntrl+0x10>
c0001bbb:	83 7c 24 04 7f       	cmp    DWORD PTR [esp+0x4],0x7f
c0001bc0:	75 0a                	jne    c0001bcc <iscntrl+0x18>
c0001bc2:	66 90                	xchg   ax,ax
c0001bc4:	b8 01 00 00 00       	mov    eax,0x1
c0001bc9:	c3                   	ret    
c0001bca:	66 90                	xchg   ax,ax
c0001bcc:	b8 00 00 00 00       	mov    eax,0x0
c0001bd1:	c3                   	ret    
c0001bd2:	66 90                	xchg   ax,ax

c0001bd4 <isdigit>:
c0001bd4:	83 7c 24 04 2f       	cmp    DWORD PTR [esp+0x4],0x2f
c0001bd9:	7e 0d                	jle    c0001be8 <isdigit+0x14>
c0001bdb:	83 7c 24 04 39       	cmp    DWORD PTR [esp+0x4],0x39
c0001be0:	7f 06                	jg     c0001be8 <isdigit+0x14>
c0001be2:	b8 01 00 00 00       	mov    eax,0x1
c0001be7:	c3                   	ret    
c0001be8:	b8 00 00 00 00       	mov    eax,0x0
c0001bed:	c3                   	ret    
c0001bee:	66 90                	xchg   ax,ax

c0001bf0 <islower>:
c0001bf0:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c0001bf5:	7e 0d                	jle    c0001c04 <islower+0x14>
c0001bf7:	83 7c 24 04 7a       	cmp    DWORD PTR [esp+0x4],0x7a
c0001bfc:	7f 06                	jg     c0001c04 <islower+0x14>
c0001bfe:	b8 01 00 00 00       	mov    eax,0x1
c0001c03:	c3                   	ret    
c0001c04:	b8 00 00 00 00       	mov    eax,0x0
c0001c09:	c3                   	ret    
c0001c0a:	66 90                	xchg   ax,ax

c0001c0c <isspace>:
c0001c0c:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001c11:	7c 19                	jl     c0001c2c <isspace+0x20>
c0001c13:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0001c18:	7e 0a                	jle    c0001c24 <isspace+0x18>
c0001c1a:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001c1f:	75 0b                	jne    c0001c2c <isspace+0x20>
c0001c21:	8d 76 00             	lea    esi,[esi+0x0]
c0001c24:	b8 01 00 00 00       	mov    eax,0x1
c0001c29:	c3                   	ret    
c0001c2a:	66 90                	xchg   ax,ax
c0001c2c:	b8 00 00 00 00       	mov    eax,0x0
c0001c31:	c3                   	ret    
c0001c32:	66 90                	xchg   ax,ax

c0001c34 <isupper>:
c0001c34:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c0001c39:	7e 0d                	jle    c0001c48 <isupper+0x14>
c0001c3b:	83 7c 24 04 5a       	cmp    DWORD PTR [esp+0x4],0x5a
c0001c40:	7f 06                	jg     c0001c48 <isupper+0x14>
c0001c42:	b8 01 00 00 00       	mov    eax,0x1
c0001c47:	c3                   	ret    
c0001c48:	b8 00 00 00 00       	mov    eax,0x0
c0001c4d:	c3                   	ret    
c0001c4e:	66 90                	xchg   ax,ax

c0001c50 <isalpha>:
c0001c50:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c54:	e8 db ff ff ff       	call   c0001c34 <isupper>
c0001c59:	83 c4 04             	add    esp,0x4
c0001c5c:	85 c0                	test   eax,eax
c0001c5e:	75 10                	jne    c0001c70 <isalpha+0x20>
c0001c60:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c64:	e8 87 ff ff ff       	call   c0001bf0 <islower>
c0001c69:	83 c4 04             	add    esp,0x4
c0001c6c:	85 c0                	test   eax,eax
c0001c6e:	74 08                	je     c0001c78 <isalpha+0x28>
c0001c70:	b8 01 00 00 00       	mov    eax,0x1
c0001c75:	c3                   	ret    
c0001c76:	66 90                	xchg   ax,ax
c0001c78:	b8 00 00 00 00       	mov    eax,0x0
c0001c7d:	c3                   	ret    
c0001c7e:	66 90                	xchg   ax,ax

c0001c80 <isalnum>:
c0001c80:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c84:	e8 c7 ff ff ff       	call   c0001c50 <isalpha>
c0001c89:	83 c4 04             	add    esp,0x4
c0001c8c:	85 c0                	test   eax,eax
c0001c8e:	75 10                	jne    c0001ca0 <isalnum+0x20>
c0001c90:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c94:	e8 3b ff ff ff       	call   c0001bd4 <isdigit>
c0001c99:	83 c4 04             	add    esp,0x4
c0001c9c:	85 c0                	test   eax,eax
c0001c9e:	74 08                	je     c0001ca8 <isalnum+0x28>
c0001ca0:	b8 01 00 00 00       	mov    eax,0x1
c0001ca5:	c3                   	ret    
c0001ca6:	66 90                	xchg   ax,ax
c0001ca8:	b8 00 00 00 00       	mov    eax,0x0
c0001cad:	c3                   	ret    
c0001cae:	66 90                	xchg   ax,ax

c0001cb0 <ispunct>:
c0001cb0:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001cb4:	e8 c7 ff ff ff       	call   c0001c80 <isalnum>
c0001cb9:	83 c4 04             	add    esp,0x4
c0001cbc:	85 c0                	test   eax,eax
c0001cbe:	75 28                	jne    c0001ce8 <ispunct+0x38>
c0001cc0:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001cc4:	e8 43 ff ff ff       	call   c0001c0c <isspace>
c0001cc9:	83 c4 04             	add    esp,0x4
c0001ccc:	85 c0                	test   eax,eax
c0001cce:	75 18                	jne    c0001ce8 <ispunct+0x38>
c0001cd0:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001cd4:	e8 db fe ff ff       	call   c0001bb4 <iscntrl>
c0001cd9:	83 c4 04             	add    esp,0x4
c0001cdc:	85 c0                	test   eax,eax
c0001cde:	75 08                	jne    c0001ce8 <ispunct+0x38>
c0001ce0:	b8 01 00 00 00       	mov    eax,0x1
c0001ce5:	c3                   	ret    
c0001ce6:	66 90                	xchg   ax,ax
c0001ce8:	b8 00 00 00 00       	mov    eax,0x0
c0001ced:	c3                   	ret    
c0001cee:	66 90                	xchg   ax,ax

c0001cf0 <isgraph>:
c0001cf0:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001cf4:	e8 87 ff ff ff       	call   c0001c80 <isalnum>
c0001cf9:	83 c4 04             	add    esp,0x4
c0001cfc:	85 c0                	test   eax,eax
c0001cfe:	75 10                	jne    c0001d10 <isgraph+0x20>
c0001d00:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001d04:	e8 a7 ff ff ff       	call   c0001cb0 <ispunct>
c0001d09:	83 c4 04             	add    esp,0x4
c0001d0c:	85 c0                	test   eax,eax
c0001d0e:	74 08                	je     c0001d18 <isgraph+0x28>
c0001d10:	b8 01 00 00 00       	mov    eax,0x1
c0001d15:	c3                   	ret    
c0001d16:	66 90                	xchg   ax,ax
c0001d18:	b8 00 00 00 00       	mov    eax,0x0
c0001d1d:	c3                   	ret    
c0001d1e:	66 90                	xchg   ax,ax

c0001d20 <isprint>:
c0001d20:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001d24:	e8 c7 ff ff ff       	call   c0001cf0 <isgraph>
c0001d29:	83 c4 04             	add    esp,0x4
c0001d2c:	85 c0                	test   eax,eax
c0001d2e:	75 08                	jne    c0001d38 <isprint+0x18>
c0001d30:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001d35:	75 09                	jne    c0001d40 <isprint+0x20>
c0001d37:	90                   	nop
c0001d38:	b8 01 00 00 00       	mov    eax,0x1
c0001d3d:	c3                   	ret    
c0001d3e:	66 90                	xchg   ax,ax
c0001d40:	b8 00 00 00 00       	mov    eax,0x0
c0001d45:	c3                   	ret    
c0001d46:	66 90                	xchg   ax,ax

c0001d48 <isxdigit>:
c0001d48:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001d4c:	e8 83 fe ff ff       	call   c0001bd4 <isdigit>
c0001d51:	83 c4 04             	add    esp,0x4
c0001d54:	85 c0                	test   eax,eax
c0001d56:	75 20                	jne    c0001d78 <isxdigit+0x30>
c0001d58:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c0001d5d:	7e 09                	jle    c0001d68 <isxdigit+0x20>
c0001d5f:	83 7c 24 04 46       	cmp    DWORD PTR [esp+0x4],0x46
c0001d64:	7e 12                	jle    c0001d78 <isxdigit+0x30>
c0001d66:	66 90                	xchg   ax,ax
c0001d68:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c0001d6d:	7e 11                	jle    c0001d80 <isxdigit+0x38>
c0001d6f:	83 7c 24 04 66       	cmp    DWORD PTR [esp+0x4],0x66
c0001d74:	7f 0a                	jg     c0001d80 <isxdigit+0x38>
c0001d76:	66 90                	xchg   ax,ax
c0001d78:	b8 01 00 00 00       	mov    eax,0x1
c0001d7d:	c3                   	ret    
c0001d7e:	66 90                	xchg   ax,ax
c0001d80:	b8 00 00 00 00       	mov    eax,0x0
c0001d85:	c3                   	ret    

c0001d86 <disk_status>:
c0001d86:	31 c0                	xor    eax,eax
c0001d88:	c3                   	ret    

c0001d89 <disk_initialize>:
c0001d89:	31 c0                	xor    eax,eax
c0001d8b:	c3                   	ret    

c0001d8c <disk_read>:
c0001d8c:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001d91:	0f b6 04 85 20 c8 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd37e0]
c0001d99:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001d9d:	e9 be 7c 01 00       	jmp    c0019a60 <fatWrapperReadDisk>

c0001da2 <disk_write>:
c0001da2:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001da7:	0f b6 04 85 20 c8 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd37e0]
c0001daf:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001db3:	e9 e8 7c 01 00       	jmp    c0019aa0 <fatWrapperWriteDisk>

c0001db8 <disk_ioctl>:
c0001db8:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001dbd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001dc1:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001dc6:	0f b6 04 85 20 c8 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd37e0]
c0001dce:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001dd2:	e9 09 7d 01 00       	jmp    c0019ae0 <fatWrapperIoctl>

c0001dd7 <ld_word>:
c0001dd7:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001ddb:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001dde:	c1 e2 08             	shl    edx,0x8
c0001de1:	09 d0                	or     eax,edx
c0001de3:	c3                   	ret    

c0001de4 <ld_dword>:
c0001de4:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001de8:	89 d1                	mov    ecx,edx
c0001dea:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001dee:	c1 e1 08             	shl    ecx,0x8
c0001df1:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001df4:	09 ca                	or     edx,ecx
c0001df6:	c1 e2 08             	shl    edx,0x8
c0001df9:	09 d0                	or     eax,edx
c0001dfb:	c3                   	ret    

c0001dfc <st_word>:
c0001dfc:	66 89 10             	mov    WORD PTR [eax],dx
c0001dff:	c3                   	ret    

c0001e00 <st_dword>:
c0001e00:	89 10                	mov    DWORD PTR [eax],edx
c0001e02:	c3                   	ret    

c0001e03 <mem_cpy>:
c0001e03:	85 c9                	test   ecx,ecx
c0001e05:	74 10                	je     c0001e17 <mem_cpy+0x14>
c0001e07:	57                   	push   edi
c0001e08:	01 c1                	add    ecx,eax
c0001e0a:	56                   	push   esi
c0001e0b:	89 c7                	mov    edi,eax
c0001e0d:	89 d6                	mov    esi,edx
c0001e0f:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001e10:	39 f9                	cmp    ecx,edi
c0001e12:	75 fb                	jne    c0001e0f <mem_cpy+0xc>
c0001e14:	5e                   	pop    esi
c0001e15:	5f                   	pop    edi
c0001e16:	c3                   	ret    
c0001e17:	c3                   	ret    

c0001e18 <mem_set>:
c0001e18:	01 c1                	add    ecx,eax
c0001e1a:	40                   	inc    eax
c0001e1b:	88 50 ff             	mov    BYTE PTR [eax-0x1],dl
c0001e1e:	39 c8                	cmp    eax,ecx
c0001e20:	75 f8                	jne    c0001e1a <mem_set+0x2>
c0001e22:	c3                   	ret    

c0001e23 <mem_cmp>:
c0001e23:	57                   	push   edi
c0001e24:	56                   	push   esi
c0001e25:	89 c6                	mov    esi,eax
c0001e27:	53                   	push   ebx
c0001e28:	46                   	inc    esi
c0001e29:	42                   	inc    edx
c0001e2a:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001e2e:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001e32:	29 fb                	sub    ebx,edi
c0001e34:	89 cf                	mov    edi,ecx
c0001e36:	29 f7                	sub    edi,esi
c0001e38:	01 c7                	add    edi,eax
c0001e3a:	74 04                	je     c0001e40 <mem_cmp+0x1d>
c0001e3c:	85 db                	test   ebx,ebx
c0001e3e:	74 e8                	je     c0001e28 <mem_cmp+0x5>
c0001e40:	89 d8                	mov    eax,ebx
c0001e42:	5b                   	pop    ebx
c0001e43:	5e                   	pop    esi
c0001e44:	5f                   	pop    edi
c0001e45:	c3                   	ret    

c0001e46 <chk_chr>:
c0001e46:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001e49:	85 c9                	test   ecx,ecx
c0001e4b:	74 07                	je     c0001e54 <chk_chr+0xe>
c0001e4d:	39 d1                	cmp    ecx,edx
c0001e4f:	74 03                	je     c0001e54 <chk_chr+0xe>
c0001e51:	40                   	inc    eax
c0001e52:	eb f2                	jmp    c0001e46 <chk_chr>
c0001e54:	89 c8                	mov    eax,ecx
c0001e56:	c3                   	ret    

c0001e57 <dbc_1st>:
c0001e57:	31 c0                	xor    eax,eax
c0001e59:	c3                   	ret    

c0001e5a <dbc_2nd>:
c0001e5a:	31 c0                	xor    eax,eax
c0001e5c:	c3                   	ret    

c0001e5d <tchar2uni>:
c0001e5d:	57                   	push   edi
c0001e5e:	56                   	push   esi
c0001e5f:	53                   	push   ebx
c0001e60:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001e62:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001e64:	8d 73 01             	lea    esi,[ebx+0x1]
c0001e67:	f6 c1 80             	test   cl,0x80
c0001e6a:	75 0a                	jne    c0001e76 <tchar2uni+0x19>
c0001e6c:	0f b6 d1             	movzx  edx,cl
c0001e6f:	89 f3                	mov    ebx,esi
c0001e71:	e9 b2 00 00 00       	jmp    c0001f28 <tchar2uni+0xcb>
c0001e76:	89 ca                	mov    edx,ecx
c0001e78:	81 e2 e0 00 00 00    	and    edx,0xe0
c0001e7e:	81 fa c0 00 00 00    	cmp    edx,0xc0
c0001e84:	89 ca                	mov    edx,ecx
c0001e86:	75 0a                	jne    c0001e92 <tchar2uni+0x35>
c0001e88:	83 e2 1f             	and    edx,0x1f
c0001e8b:	b9 01 00 00 00       	mov    ecx,0x1
c0001e90:	eb 37                	jmp    c0001ec9 <tchar2uni+0x6c>
c0001e92:	81 e2 f0 00 00 00    	and    edx,0xf0
c0001e98:	81 fa e0 00 00 00    	cmp    edx,0xe0
c0001e9e:	75 0c                	jne    c0001eac <tchar2uni+0x4f>
c0001ea0:	89 ca                	mov    edx,ecx
c0001ea2:	b9 02 00 00 00       	mov    ecx,0x2
c0001ea7:	83 e2 0f             	and    edx,0xf
c0001eaa:	eb 1d                	jmp    c0001ec9 <tchar2uni+0x6c>
c0001eac:	89 cf                	mov    edi,ecx
c0001eae:	83 ca ff             	or     edx,0xffffffff
c0001eb1:	81 e7 f8 00 00 00    	and    edi,0xf8
c0001eb7:	81 ff f0 00 00 00    	cmp    edi,0xf0
c0001ebd:	75 70                	jne    c0001f2f <tchar2uni+0xd2>
c0001ebf:	89 ca                	mov    edx,ecx
c0001ec1:	b9 03 00 00 00       	mov    ecx,0x3
c0001ec6:	83 e2 07             	and    edx,0x7
c0001ec9:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0001ecd:	46                   	inc    esi
c0001ece:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0001ed1:	89 cf                	mov    edi,ecx
c0001ed3:	81 e7 c0 00 00 00    	and    edi,0xc0
c0001ed9:	83 c7 80             	add    edi,0xffffff80
c0001edc:	75 4e                	jne    c0001f2c <tchar2uni+0xcf>
c0001ede:	c1 e2 06             	shl    edx,0x6
c0001ee1:	83 e1 3f             	and    ecx,0x3f
c0001ee4:	09 ca                	or     edx,ecx
c0001ee6:	39 de                	cmp    esi,ebx
c0001ee8:	75 e3                	jne    c0001ecd <tchar2uni+0x70>
c0001eea:	8d 4a 80             	lea    ecx,[edx-0x80]
c0001eed:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0001ef3:	77 37                	ja     c0001f2c <tchar2uni+0xcf>
c0001ef5:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0001efb:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001f01:	76 29                	jbe    c0001f2c <tchar2uni+0xcf>
c0001f03:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0001f09:	76 1d                	jbe    c0001f28 <tchar2uni+0xcb>
c0001f0b:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0001f11:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0001f17:	c1 e1 06             	shl    ecx,0x6
c0001f1a:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0001f20:	09 ca                	or     edx,ecx
c0001f22:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0001f28:	89 18                	mov    DWORD PTR [eax],ebx
c0001f2a:	eb 03                	jmp    c0001f2f <tchar2uni+0xd2>
c0001f2c:	83 ca ff             	or     edx,0xffffffff
c0001f2f:	5b                   	pop    ebx
c0001f30:	89 d0                	mov    eax,edx
c0001f32:	5e                   	pop    esi
c0001f33:	5f                   	pop    edi
c0001f34:	c3                   	ret    

c0001f35 <put_utf>:
c0001f35:	53                   	push   ebx
c0001f36:	83 f8 7f             	cmp    eax,0x7f
c0001f39:	89 c3                	mov    ebx,eax
c0001f3b:	b0 00                	mov    al,0x0
c0001f3d:	77 11                	ja     c0001f50 <put_utf+0x1b>
c0001f3f:	85 c9                	test   ecx,ecx
c0001f41:	0f 84 e5 00 00 00    	je     c000202c <put_utf+0xf7>
c0001f47:	88 1a                	mov    BYTE PTR [edx],bl
c0001f49:	b0 01                	mov    al,0x1
c0001f4b:	e9 dc 00 00 00       	jmp    c000202c <put_utf+0xf7>
c0001f50:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0001f56:	77 23                	ja     c0001f7b <put_utf+0x46>
c0001f58:	83 f9 01             	cmp    ecx,0x1
c0001f5b:	0f 86 cb 00 00 00    	jbe    c000202c <put_utf+0xf7>
c0001f61:	89 d8                	mov    eax,ebx
c0001f63:	83 e3 3f             	and    ebx,0x3f
c0001f66:	c1 e8 06             	shr    eax,0x6
c0001f69:	83 cb 80             	or     ebx,0xffffff80
c0001f6c:	83 c8 c0             	or     eax,0xffffffc0
c0001f6f:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0001f72:	88 02                	mov    BYTE PTR [edx],al
c0001f74:	b0 02                	mov    al,0x2
c0001f76:	e9 b1 00 00 00       	jmp    c000202c <put_utf+0xf7>
c0001f7b:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0001f81:	77 40                	ja     c0001fc3 <put_utf+0x8e>
c0001f83:	83 f9 02             	cmp    ecx,0x2
c0001f86:	0f 86 a0 00 00 00    	jbe    c000202c <put_utf+0xf7>
c0001f8c:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0001f92:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001f98:	0f 86 8e 00 00 00    	jbe    c000202c <put_utf+0xf7>
c0001f9e:	89 d8                	mov    eax,ebx
c0001fa0:	c1 e8 0c             	shr    eax,0xc
c0001fa3:	83 c8 e0             	or     eax,0xffffffe0
c0001fa6:	88 02                	mov    BYTE PTR [edx],al
c0001fa8:	89 d8                	mov    eax,ebx
c0001faa:	83 e3 3f             	and    ebx,0x3f
c0001fad:	c1 e8 06             	shr    eax,0x6
c0001fb0:	83 cb 80             	or     ebx,0xffffff80
c0001fb3:	83 e0 3f             	and    eax,0x3f
c0001fb6:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0001fb9:	83 c8 80             	or     eax,0xffffff80
c0001fbc:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001fbf:	b0 03                	mov    al,0x3
c0001fc1:	eb 69                	jmp    c000202c <put_utf+0xf7>
c0001fc3:	83 f9 03             	cmp    ecx,0x3
c0001fc6:	76 64                	jbe    c000202c <put_utf+0xf7>
c0001fc8:	89 d9                	mov    ecx,ebx
c0001fca:	0f b7 c3             	movzx  eax,bx
c0001fcd:	66 31 c9             	xor    cx,cx
c0001fd0:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c0001fd6:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0001fdc:	c1 e9 06             	shr    ecx,0x6
c0001fdf:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0001fe5:	77 43                	ja     c000202a <put_utf+0xf5>
c0001fe7:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c0001fed:	77 3b                	ja     c000202a <put_utf+0xf5>
c0001fef:	09 cb                	or     ebx,ecx
c0001ff1:	81 c3 00 00 01 00    	add    ebx,0x10000
c0001ff7:	89 d8                	mov    eax,ebx
c0001ff9:	c1 e8 12             	shr    eax,0x12
c0001ffc:	83 c8 f0             	or     eax,0xfffffff0
c0001fff:	88 02                	mov    BYTE PTR [edx],al
c0002001:	89 d8                	mov    eax,ebx
c0002003:	c1 e8 0c             	shr    eax,0xc
c0002006:	83 e0 3f             	and    eax,0x3f
c0002009:	83 c8 80             	or     eax,0xffffff80
c000200c:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c000200f:	89 d8                	mov    eax,ebx
c0002011:	83 e3 3f             	and    ebx,0x3f
c0002014:	c1 e8 06             	shr    eax,0x6
c0002017:	83 cb 80             	or     ebx,0xffffff80
c000201a:	83 e0 3f             	and    eax,0x3f
c000201d:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0002020:	83 c8 80             	or     eax,0xffffff80
c0002023:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c0002026:	b0 04                	mov    al,0x4
c0002028:	eb 02                	jmp    c000202c <put_utf+0xf7>
c000202a:	31 c0                	xor    eax,eax
c000202c:	5b                   	pop    ebx
c000202d:	c3                   	ret    

c000202e <clst2sect>:
c000202e:	8d 4a fe             	lea    ecx,[edx-0x2]
c0002031:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0002034:	83 ea 02             	sub    edx,0x2
c0002037:	39 ca                	cmp    edx,ecx
c0002039:	76 0d                	jbe    c0002048 <clst2sect+0x1a>
c000203b:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c000203f:	0f af d1             	imul   edx,ecx
c0002042:	03 50 2c             	add    edx,DWORD PTR [eax+0x2c]
c0002045:	89 d0                	mov    eax,edx
c0002047:	c3                   	ret    
c0002048:	31 c0                	xor    eax,eax
c000204a:	c3                   	ret    

c000204b <pick_lfn>:
c000204b:	55                   	push   ebp
c000204c:	57                   	push   edi
c000204d:	89 c7                	mov    edi,eax
c000204f:	56                   	push   esi
c0002050:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002053:	53                   	push   ebx
c0002054:	89 d3                	mov    ebx,edx
c0002056:	e8 7c fd ff ff       	call   c0001dd7 <ld_word>
c000205b:	66 85 c0             	test   ax,ax
c000205e:	74 04                	je     c0002064 <pick_lfn+0x19>
c0002060:	31 c0                	xor    eax,eax
c0002062:	eb 62                	jmp    c00020c6 <pick_lfn+0x7b>
c0002064:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0002067:	bd 01 00 00 00       	mov    ebp,0x1
c000206c:	83 e1 bf             	and    ecx,0xffffffbf
c000206f:	31 f6                	xor    esi,esi
c0002071:	49                   	dec    ecx
c0002072:	6b c9 0d             	imul   ecx,ecx,0xd
c0002075:	0f b6 86 40 06 02 c0 	movzx  eax,BYTE PTR [esi-0x3ffdf9c0]
c000207c:	01 d8                	add    eax,ebx
c000207e:	e8 54 fd ff ff       	call   c0001dd7 <ld_word>
c0002083:	66 85 ed             	test   bp,bp
c0002086:	74 11                	je     c0002099 <pick_lfn+0x4e>
c0002088:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c000208e:	77 d0                	ja     c0002060 <pick_lfn+0x15>
c0002090:	66 89 04 4f          	mov    WORD PTR [edi+ecx*2],ax
c0002094:	89 c5                	mov    ebp,eax
c0002096:	41                   	inc    ecx
c0002097:	eb 0a                	jmp    c00020a3 <pick_lfn+0x58>
c0002099:	0f b7 c0             	movzx  eax,ax
c000209c:	3d ff ff 00 00       	cmp    eax,0xffff
c00020a1:	75 bd                	jne    c0002060 <pick_lfn+0x15>
c00020a3:	46                   	inc    esi
c00020a4:	83 fe 0d             	cmp    esi,0xd
c00020a7:	75 cc                	jne    c0002075 <pick_lfn+0x2a>
c00020a9:	f6 03 40             	test   BYTE PTR [ebx],0x40
c00020ac:	74 13                	je     c00020c1 <pick_lfn+0x76>
c00020ae:	66 85 ed             	test   bp,bp
c00020b1:	74 0e                	je     c00020c1 <pick_lfn+0x76>
c00020b3:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c00020b9:	77 a5                	ja     c0002060 <pick_lfn+0x15>
c00020bb:	66 c7 04 4f 00 00    	mov    WORD PTR [edi+ecx*2],0x0
c00020c1:	b8 01 00 00 00       	mov    eax,0x1
c00020c6:	5b                   	pop    ebx
c00020c7:	5e                   	pop    esi
c00020c8:	5f                   	pop    edi
c00020c9:	5d                   	pop    ebp
c00020ca:	c3                   	ret    

c00020cb <put_lfn>:
c00020cb:	55                   	push   ebp
c00020cc:	57                   	push   edi
c00020cd:	89 d7                	mov    edi,edx
c00020cf:	56                   	push   esi
c00020d0:	31 f6                	xor    esi,esi
c00020d2:	53                   	push   ebx
c00020d3:	83 ec 0c             	sub    esp,0xc
c00020d6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00020da:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c00020de:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00020e2:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c00020e8:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c00020eb:	8d 42 1a             	lea    eax,[edx+0x1a]
c00020ee:	31 d2                	xor    edx,edx
c00020f0:	e8 07 fd ff ff       	call   c0001dfc <st_word>
c00020f5:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00020fc:	0f b6 d9             	movzx  ebx,cl
c00020ff:	4b                   	dec    ebx
c0002100:	6b db 0d             	imul   ebx,ebx,0xd
c0002103:	0f b7 c6             	movzx  eax,si
c0002106:	3d ff ff 00 00       	cmp    eax,0xffff
c000210b:	74 09                	je     c0002116 <put_lfn+0x4b>
c000210d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002111:	0f b7 34 58          	movzx  esi,WORD PTR [eax+ebx*2]
c0002115:	43                   	inc    ebx
c0002116:	0f b7 ee             	movzx  ebp,si
c0002119:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000211c:	89 ea                	mov    edx,ebp
c000211e:	0f b6 80 40 06 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffdf9c0]
c0002125:	01 f8                	add    eax,edi
c0002127:	e8 d0 fc ff ff       	call   c0001dfc <st_word>
c000212c:	85 ed                	test   ebp,ebp
c000212e:	75 05                	jne    c0002135 <put_lfn+0x6a>
c0002130:	be ff ff 00 00       	mov    esi,0xffff
c0002135:	ff 04 24             	inc    DWORD PTR [esp]
c0002138:	83 3c 24 0d          	cmp    DWORD PTR [esp],0xd
c000213c:	75 c5                	jne    c0002103 <put_lfn+0x38>
c000213e:	81 fe ff ff 00 00    	cmp    esi,0xffff
c0002144:	74 0b                	je     c0002151 <put_lfn+0x86>
c0002146:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000214a:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c000214f:	75 07                	jne    c0002158 <put_lfn+0x8d>
c0002151:	83 c9 40             	or     ecx,0x40
c0002154:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002158:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c000215c:	88 07                	mov    BYTE PTR [edi],al
c000215e:	83 c4 0c             	add    esp,0xc
c0002161:	5b                   	pop    ebx
c0002162:	5e                   	pop    esi
c0002163:	5f                   	pop    edi
c0002164:	5d                   	pop    ebp
c0002165:	c3                   	ret    

c0002166 <gen_numname>:
c0002166:	57                   	push   edi
c0002167:	89 cf                	mov    edi,ecx
c0002169:	56                   	push   esi
c000216a:	b9 0b 00 00 00       	mov    ecx,0xb
c000216f:	53                   	push   ebx
c0002170:	89 c6                	mov    esi,eax
c0002172:	83 ec 10             	sub    esp,0x10
c0002175:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0002179:	e8 85 fc ff ff       	call   c0001e03 <mem_cpy>
c000217e:	83 fb 05             	cmp    ebx,0x5
c0002181:	76 30                	jbe    c00021b3 <gen_numname+0x4d>
c0002183:	66 8b 07             	mov    ax,WORD PTR [edi]
c0002186:	66 85 c0             	test   ax,ax
c0002189:	74 28                	je     c00021b3 <gen_numname+0x4d>
c000218b:	83 c7 02             	add    edi,0x2
c000218e:	ba 10 00 00 00       	mov    edx,0x10
c0002193:	01 db                	add    ebx,ebx
c0002195:	89 c1                	mov    ecx,eax
c0002197:	c1 e0 10             	shl    eax,0x10
c000219a:	83 e1 01             	and    ecx,0x1
c000219d:	c1 e8 11             	shr    eax,0x11
c00021a0:	01 cb                	add    ebx,ecx
c00021a2:	0f ba e3 10          	bt     ebx,0x10
c00021a6:	73 06                	jae    c00021ae <gen_numname+0x48>
c00021a8:	81 f3 21 10 01 00    	xor    ebx,0x11021
c00021ae:	4a                   	dec    edx
c00021af:	75 e2                	jne    c0002193 <gen_numname+0x2d>
c00021b1:	eb d0                	jmp    c0002183 <gen_numname+0x1d>
c00021b3:	b8 07 00 00 00       	mov    eax,0x7
c00021b8:	89 d9                	mov    ecx,ebx
c00021ba:	83 e1 0f             	and    ecx,0xf
c00021bd:	8d 79 30             	lea    edi,[ecx+0x30]
c00021c0:	89 fa                	mov    edx,edi
c00021c2:	83 ff 39             	cmp    edi,0x39
c00021c5:	76 03                	jbe    c00021ca <gen_numname+0x64>
c00021c7:	8d 51 37             	lea    edx,[ecx+0x37]
c00021ca:	8d 48 ff             	lea    ecx,[eax-0x1]
c00021cd:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c00021d1:	89 da                	mov    edx,ebx
c00021d3:	c1 ea 04             	shr    edx,0x4
c00021d6:	83 fb 0f             	cmp    ebx,0xf
c00021d9:	76 06                	jbe    c00021e1 <gen_numname+0x7b>
c00021db:	89 c8                	mov    eax,ecx
c00021dd:	89 d3                	mov    ebx,edx
c00021df:	eb d7                	jmp    c00021b8 <gen_numname+0x52>
c00021e1:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c00021e6:	31 d2                	xor    edx,edx
c00021e8:	8d 58 fe             	lea    ebx,[eax-0x2]
c00021eb:	8d 04 16             	lea    eax,[esi+edx*1]
c00021ee:	39 ca                	cmp    edx,ecx
c00021f0:	73 19                	jae    c000220b <gen_numname+0xa5>
c00021f2:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c00021f5:	83 f8 20             	cmp    eax,0x20
c00021f8:	74 11                	je     c000220b <gen_numname+0xa5>
c00021fa:	e8 58 fc ff ff       	call   c0001e57 <dbc_1st>
c00021ff:	85 c0                	test   eax,eax
c0002201:	74 05                	je     c0002208 <gen_numname+0xa2>
c0002203:	39 d3                	cmp    ebx,edx
c0002205:	74 04                	je     c000220b <gen_numname+0xa5>
c0002207:	42                   	inc    edx
c0002208:	42                   	inc    edx
c0002209:	eb e0                	jmp    c00021eb <gen_numname+0x85>
c000220b:	b0 20                	mov    al,0x20
c000220d:	83 f9 07             	cmp    ecx,0x7
c0002210:	77 05                	ja     c0002217 <gen_numname+0xb1>
c0002212:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c0002216:	41                   	inc    ecx
c0002217:	42                   	inc    edx
c0002218:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c000221c:	83 fa 07             	cmp    edx,0x7
c000221f:	76 ea                	jbe    c000220b <gen_numname+0xa5>
c0002221:	83 c4 10             	add    esp,0x10
c0002224:	5b                   	pop    ebx
c0002225:	5e                   	pop    esi
c0002226:	5f                   	pop    edi
c0002227:	c3                   	ret    

c0002228 <sum_sfn>:
c0002228:	53                   	push   ebx
c0002229:	31 c9                	xor    ecx,ecx
c000222b:	31 db                	xor    ebx,ebx
c000222d:	0f b6 d1             	movzx  edx,cl
c0002230:	c1 e1 07             	shl    ecx,0x7
c0002233:	d1 ea                	shr    edx,1
c0002235:	09 ca                	or     edx,ecx
c0002237:	8a 0c 18             	mov    cl,BYTE PTR [eax+ebx*1]
c000223a:	43                   	inc    ebx
c000223b:	01 ca                	add    edx,ecx
c000223d:	83 fb 0b             	cmp    ebx,0xb
c0002240:	88 d1                	mov    cl,dl
c0002242:	75 e9                	jne    c000222d <sum_sfn+0x5>
c0002244:	88 d0                	mov    al,dl
c0002246:	5b                   	pop    ebx
c0002247:	c3                   	ret    

c0002248 <get_ldnumber>:
c0002248:	8b 10                	mov    edx,DWORD PTR [eax]
c000224a:	85 d2                	test   edx,edx
c000224c:	74 14                	je     c0002262 <get_ldnumber+0x1a>
c000224e:	56                   	push   esi
c000224f:	53                   	push   ebx
c0002250:	89 d3                	mov    ebx,edx
c0002252:	43                   	inc    ebx
c0002253:	8a 4b ff             	mov    cl,BYTE PTR [ebx-0x1]
c0002256:	80 f9 1f             	cmp    cl,0x1f
c0002259:	76 0d                	jbe    c0002268 <get_ldnumber+0x20>
c000225b:	80 f9 3a             	cmp    cl,0x3a
c000225e:	75 f2                	jne    c0002252 <get_ldnumber+0xa>
c0002260:	eb 0a                	jmp    c000226c <get_ldnumber+0x24>
c0002262:	83 c9 ff             	or     ecx,0xffffffff
c0002265:	89 c8                	mov    eax,ecx
c0002267:	c3                   	ret    
c0002268:	31 c9                	xor    ecx,ecx
c000226a:	eb 24                	jmp    c0002290 <get_ldnumber+0x48>
c000226c:	0f b6 32             	movzx  esi,BYTE PTR [edx]
c000226f:	8d 4e d0             	lea    ecx,[esi-0x30]
c0002272:	80 f9 09             	cmp    cl,0x9
c0002275:	77 16                	ja     c000228d <get_ldnumber+0x45>
c0002277:	83 c2 02             	add    edx,0x2
c000227a:	83 c9 ff             	or     ecx,0xffffffff
c000227d:	39 d3                	cmp    ebx,edx
c000227f:	75 0f                	jne    c0002290 <get_ldnumber+0x48>
c0002281:	89 f2                	mov    edx,esi
c0002283:	89 18                	mov    DWORD PTR [eax],ebx
c0002285:	0f be ca             	movsx  ecx,dl
c0002288:	83 e9 30             	sub    ecx,0x30
c000228b:	eb 03                	jmp    c0002290 <get_ldnumber+0x48>
c000228d:	83 c9 ff             	or     ecx,0xffffffff
c0002290:	89 c8                	mov    eax,ecx
c0002292:	5b                   	pop    ebx
c0002293:	5e                   	pop    esi
c0002294:	c3                   	ret    

c0002295 <validate>:
c0002295:	56                   	push   esi
c0002296:	53                   	push   ebx
c0002297:	89 d6                	mov    esi,edx
c0002299:	51                   	push   ecx
c000229a:	85 c0                	test   eax,eax
c000229c:	75 09                	jne    c00022a7 <validate+0x12>
c000229e:	b8 09 00 00 00       	mov    eax,0x9
c00022a3:	31 c9                	xor    ecx,ecx
c00022a5:	eb 2e                	jmp    c00022d5 <validate+0x40>
c00022a7:	89 c3                	mov    ebx,eax
c00022a9:	8b 00                	mov    eax,DWORD PTR [eax]
c00022ab:	85 c0                	test   eax,eax
c00022ad:	74 ef                	je     c000229e <validate+0x9>
c00022af:	80 38 00             	cmp    BYTE PTR [eax],0x0
c00022b2:	74 ea                	je     c000229e <validate+0x9>
c00022b4:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c00022b7:	66 39 50 06          	cmp    WORD PTR [eax+0x6],dx
c00022bb:	75 e1                	jne    c000229e <validate+0x9>
c00022bd:	83 ec 0c             	sub    esp,0xc
c00022c0:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00022c4:	50                   	push   eax
c00022c5:	e8 bc fa ff ff       	call   c0001d86 <disk_status>
c00022ca:	83 c4 10             	add    esp,0x10
c00022cd:	a8 01                	test   al,0x1
c00022cf:	75 cd                	jne    c000229e <validate+0x9>
c00022d1:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00022d3:	31 c0                	xor    eax,eax
c00022d5:	89 0e                	mov    DWORD PTR [esi],ecx
c00022d7:	5a                   	pop    edx
c00022d8:	5b                   	pop    ebx
c00022d9:	5e                   	pop    esi
c00022da:	c3                   	ret    

c00022db <sync_window>:
c00022db:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c00022df:	74 58                	je     c0002339 <sync_window+0x5e>
c00022e1:	56                   	push   esi
c00022e2:	53                   	push   ebx
c00022e3:	8d 70 34             	lea    esi,[eax+0x34]
c00022e6:	51                   	push   ecx
c00022e7:	89 c3                	mov    ebx,eax
c00022e9:	6a 01                	push   0x1
c00022eb:	ff 70 30             	push   DWORD PTR [eax+0x30]
c00022ee:	56                   	push   esi
c00022ef:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00022f3:	50                   	push   eax
c00022f4:	e8 a9 fa ff ff       	call   c0001da2 <disk_write>
c00022f9:	83 c4 10             	add    esp,0x10
c00022fc:	ba 01 00 00 00       	mov    edx,0x1
c0002301:	85 c0                	test   eax,eax
c0002303:	75 2e                	jne    c0002333 <sync_window+0x58>
c0002305:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0002308:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000230b:	89 c1                	mov    ecx,eax
c000230d:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c0002311:	2b 4b 24             	sub    ecx,DWORD PTR [ebx+0x24]
c0002314:	39 d1                	cmp    ecx,edx
c0002316:	73 19                	jae    c0002331 <sync_window+0x56>
c0002318:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c000231c:	75 13                	jne    c0002331 <sync_window+0x56>
c000231e:	6a 01                	push   0x1
c0002320:	01 d0                	add    eax,edx
c0002322:	50                   	push   eax
c0002323:	56                   	push   esi
c0002324:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002328:	50                   	push   eax
c0002329:	e8 74 fa ff ff       	call   c0001da2 <disk_write>
c000232e:	83 c4 10             	add    esp,0x10
c0002331:	31 d2                	xor    edx,edx
c0002333:	89 d0                	mov    eax,edx
c0002335:	5a                   	pop    edx
c0002336:	5b                   	pop    ebx
c0002337:	5e                   	pop    esi
c0002338:	c3                   	ret    
c0002339:	31 d2                	xor    edx,edx
c000233b:	89 d0                	mov    eax,edx
c000233d:	c3                   	ret    

c000233e <move_window>:
c000233e:	57                   	push   edi
c000233f:	56                   	push   esi
c0002340:	31 f6                	xor    esi,esi
c0002342:	53                   	push   ebx
c0002343:	39 50 30             	cmp    DWORD PTR [eax+0x30],edx
c0002346:	74 32                	je     c000237a <move_window+0x3c>
c0002348:	89 c3                	mov    ebx,eax
c000234a:	89 d7                	mov    edi,edx
c000234c:	e8 8a ff ff ff       	call   c00022db <sync_window>
c0002351:	89 c6                	mov    esi,eax
c0002353:	85 c0                	test   eax,eax
c0002355:	75 23                	jne    c000237a <move_window+0x3c>
c0002357:	6a 01                	push   0x1
c0002359:	8d 43 34             	lea    eax,[ebx+0x34]
c000235c:	57                   	push   edi
c000235d:	50                   	push   eax
c000235e:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002362:	50                   	push   eax
c0002363:	e8 24 fa ff ff       	call   c0001d8c <disk_read>
c0002368:	83 c4 10             	add    esp,0x10
c000236b:	85 c0                	test   eax,eax
c000236d:	74 08                	je     c0002377 <move_window+0x39>
c000236f:	be 01 00 00 00       	mov    esi,0x1
c0002374:	83 cf ff             	or     edi,0xffffffff
c0002377:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c000237a:	89 f0                	mov    eax,esi
c000237c:	5b                   	pop    ebx
c000237d:	5e                   	pop    esi
c000237e:	5f                   	pop    edi
c000237f:	c3                   	ret    

c0002380 <check_fs>:
c0002380:	53                   	push   ebx
c0002381:	89 c3                	mov    ebx,eax
c0002383:	83 ec 08             	sub    esp,0x8
c0002386:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c000238a:	c7 40 30 ff ff ff ff 	mov    DWORD PTR [eax+0x30],0xffffffff
c0002391:	e8 a8 ff ff ff       	call   c000233e <move_window>
c0002396:	ba 04 00 00 00       	mov    edx,0x4
c000239b:	85 c0                	test   eax,eax
c000239d:	75 68                	jne    c0002407 <check_fs+0x87>
c000239f:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c00023a5:	e8 2d fa ff ff       	call   c0001dd7 <ld_word>
c00023aa:	ba 03 00 00 00       	mov    edx,0x3
c00023af:	66 3d 55 aa          	cmp    ax,0xaa55
c00023b3:	75 52                	jne    c0002407 <check_fs+0x87>
c00023b5:	8a 43 34             	mov    al,BYTE PTR [ebx+0x34]
c00023b8:	8d 50 18             	lea    edx,[eax+0x18]
c00023bb:	80 fa 01             	cmp    dl,0x1
c00023be:	76 09                	jbe    c00023c9 <check_fs+0x49>
c00023c0:	ba 02 00 00 00       	mov    edx,0x2
c00023c5:	3c eb                	cmp    al,0xeb
c00023c7:	75 3e                	jne    c0002407 <check_fs+0x87>
c00023c9:	ba 84 2d 02 c0       	mov    edx,0xc0022d84
c00023ce:	8d 43 6a             	lea    eax,[ebx+0x6a]
c00023d1:	b9 03 00 00 00       	mov    ecx,0x3
c00023d6:	e8 48 fa ff ff       	call   c0001e23 <mem_cmp>
c00023db:	31 d2                	xor    edx,edx
c00023dd:	85 c0                	test   eax,eax
c00023df:	74 26                	je     c0002407 <check_fs+0x87>
c00023e1:	ba fc 04 02 c0       	mov    edx,0xc00204fc
c00023e6:	8d 83 86 00 00 00    	lea    eax,[ebx+0x86]
c00023ec:	b9 05 00 00 00       	mov    ecx,0x5
c00023f1:	e8 2d fa ff ff       	call   c0001e23 <mem_cmp>
c00023f6:	31 d2                	xor    edx,edx
c00023f8:	85 c0                	test   eax,eax
c00023fa:	74 0b                	je     c0002407 <check_fs+0x87>
c00023fc:	31 d2                	xor    edx,edx
c00023fe:	80 7b 76 28          	cmp    BYTE PTR [ebx+0x76],0x28
c0002402:	0f 95 c2             	setne  dl
c0002405:	01 d2                	add    edx,edx
c0002407:	89 d0                	mov    eax,edx
c0002409:	83 c4 08             	add    esp,0x8
c000240c:	5b                   	pop    ebx
c000240d:	c3                   	ret    

c000240e <find_volume>:
c000240e:	55                   	push   ebp
c000240f:	57                   	push   edi
c0002410:	56                   	push   esi
c0002411:	89 c6                	mov    esi,eax
c0002413:	53                   	push   ebx
c0002414:	89 d3                	mov    ebx,edx
c0002416:	83 ec 2c             	sub    esp,0x2c
c0002419:	31 d2                	xor    edx,edx
c000241b:	e8 60 ff ff ff       	call   c0002380 <check_fs>
c0002420:	83 f8 02             	cmp    eax,0x2
c0002423:	74 06                	je     c000242b <find_volume+0x1d>
c0002425:	77 62                	ja     c0002489 <find_volume+0x7b>
c0002427:	85 db                	test   ebx,ebx
c0002429:	74 5e                	je     c0002489 <find_volume+0x7b>
c000242b:	8d 4c 24 10          	lea    ecx,[esp+0x10]
c000242f:	8d 86 3a 02 00 00    	lea    eax,[esi+0x23a]
c0002435:	8d ae fa 01 00 00    	lea    ebp,[esi+0x1fa]
c000243b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000243f:	89 cf                	mov    edi,ecx
c0002441:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002445:	89 e8                	mov    eax,ebp
c0002447:	83 c5 10             	add    ebp,0x10
c000244a:	e8 95 f9 ff ff       	call   c0001de4 <ld_dword>
c000244f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002453:	89 01                	mov    DWORD PTR [ecx],eax
c0002455:	83 c1 04             	add    ecx,0x4
c0002458:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c000245c:	75 e3                	jne    c0002441 <find_volume+0x33>
c000245e:	31 ed                	xor    ebp,ebp
c0002460:	85 db                	test   ebx,ebx
c0002462:	74 03                	je     c0002467 <find_volume+0x59>
c0002464:	8d 6b ff             	lea    ebp,[ebx-0x1]
c0002467:	8b 14 af             	mov    edx,DWORD PTR [edi+ebp*4]
c000246a:	b8 03 00 00 00       	mov    eax,0x3
c000246f:	85 d2                	test   edx,edx
c0002471:	74 0c                	je     c000247f <find_volume+0x71>
c0002473:	89 f0                	mov    eax,esi
c0002475:	e8 06 ff ff ff       	call   c0002380 <check_fs>
c000247a:	83 f8 01             	cmp    eax,0x1
c000247d:	76 0a                	jbe    c0002489 <find_volume+0x7b>
c000247f:	85 db                	test   ebx,ebx
c0002481:	75 06                	jne    c0002489 <find_volume+0x7b>
c0002483:	45                   	inc    ebp
c0002484:	83 fd 03             	cmp    ebp,0x3
c0002487:	76 de                	jbe    c0002467 <find_volume+0x59>
c0002489:	83 c4 2c             	add    esp,0x2c
c000248c:	5b                   	pop    ebx
c000248d:	5e                   	pop    esi
c000248e:	5f                   	pop    edi
c000248f:	5d                   	pop    ebp
c0002490:	c3                   	ret    

c0002491 <mount_volume>:
c0002491:	55                   	push   ebp
c0002492:	89 d5                	mov    ebp,edx
c0002494:	57                   	push   edi
c0002495:	89 cf                	mov    edi,ecx
c0002497:	56                   	push   esi
c0002498:	53                   	push   ebx
c0002499:	bb 0b 00 00 00       	mov    ebx,0xb
c000249e:	83 ec 1c             	sub    esp,0x1c
c00024a1:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00024a7:	e8 9c fd ff ff       	call   c0002248 <get_ldnumber>
c00024ac:	85 c0                	test   eax,eax
c00024ae:	0f 88 c4 02 00 00    	js     c0002778 <mount_volume+0x2e7>
c00024b4:	8b 34 85 a0 64 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffd9b60]
c00024bb:	89 c2                	mov    edx,eax
c00024bd:	bb 0c 00 00 00       	mov    ebx,0xc
c00024c2:	85 f6                	test   esi,esi
c00024c4:	0f 84 ae 02 00 00    	je     c0002778 <mount_volume+0x2e7>
c00024ca:	89 75 00             	mov    DWORD PTR [ebp+0x0],esi
c00024cd:	83 e7 fe             	and    edi,0xfffffffe
c00024d0:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c00024d3:	74 3a                	je     c000250f <mount_volume+0x7e>
c00024d5:	89 04 24             	mov    DWORD PTR [esp],eax
c00024d8:	83 ec 0c             	sub    esp,0xc
c00024db:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00024df:	50                   	push   eax
c00024e0:	e8 a1 f8 ff ff       	call   c0001d86 <disk_status>
c00024e5:	83 c4 10             	add    esp,0x10
c00024e8:	a8 01                	test   al,0x1
c00024ea:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00024ed:	75 20                	jne    c000250f <mount_volume+0x7e>
c00024ef:	31 db                	xor    ebx,ebx
c00024f1:	81 e7 fe 00 00 00    	and    edi,0xfe
c00024f7:	0f 84 7b 02 00 00    	je     c0002778 <mount_volume+0x2e7>
c00024fd:	a8 04                	test   al,0x4
c00024ff:	0f 84 73 02 00 00    	je     c0002778 <mount_volume+0x2e7>
c0002505:	bb 0a 00 00 00       	mov    ebx,0xa
c000250a:	e9 69 02 00 00       	jmp    c0002778 <mount_volume+0x2e7>
c000250f:	83 ec 0c             	sub    esp,0xc
c0002512:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0002515:	88 56 01             	mov    BYTE PTR [esi+0x1],dl
c0002518:	0f b6 c2             	movzx  eax,dl
c000251b:	bb 03 00 00 00       	mov    ebx,0x3
c0002520:	50                   	push   eax
c0002521:	e8 63 f8 ff ff       	call   c0001d89 <disk_initialize>
c0002526:	83 c4 10             	add    esp,0x10
c0002529:	a8 01                	test   al,0x1
c000252b:	0f 85 47 02 00 00    	jne    c0002778 <mount_volume+0x2e7>
c0002531:	81 e7 fe 00 00 00    	and    edi,0xfe
c0002537:	74 04                	je     c000253d <mount_volume+0xac>
c0002539:	a8 04                	test   al,0x4
c000253b:	75 c8                	jne    c0002505 <mount_volume+0x74>
c000253d:	31 d2                	xor    edx,edx
c000253f:	89 f0                	mov    eax,esi
c0002541:	bb 01 00 00 00       	mov    ebx,0x1
c0002546:	e8 c3 fe ff ff       	call   c000240e <find_volume>
c000254b:	83 f8 04             	cmp    eax,0x4
c000254e:	0f 84 24 02 00 00    	je     c0002778 <mount_volume+0x2e7>
c0002554:	83 f8 01             	cmp    eax,0x1
c0002557:	76 0a                	jbe    c0002563 <mount_volume+0xd2>
c0002559:	bb 0d 00 00 00       	mov    ebx,0xd
c000255e:	e9 15 02 00 00       	jmp    c0002778 <mount_volume+0x2e7>
c0002563:	8d 46 3f             	lea    eax,[esi+0x3f]
c0002566:	e8 6c f8 ff ff       	call   c0001dd7 <ld_word>
c000256b:	66 3d 00 02          	cmp    ax,0x200
c000256f:	75 e8                	jne    c0002559 <mount_volume+0xc8>
c0002571:	8d 46 4a             	lea    eax,[esi+0x4a]
c0002574:	e8 5e f8 ff ff       	call   c0001dd7 <ld_word>
c0002579:	0f b7 c0             	movzx  eax,ax
c000257c:	89 04 24             	mov    DWORD PTR [esp],eax
c000257f:	85 c0                	test   eax,eax
c0002581:	75 0b                	jne    c000258e <mount_volume+0xfd>
c0002583:	8d 46 58             	lea    eax,[esi+0x58]
c0002586:	e8 59 f8 ff ff       	call   c0001de4 <ld_dword>
c000258b:	89 04 24             	mov    DWORD PTR [esp],eax
c000258e:	8b 46 30             	mov    eax,DWORD PTR [esi+0x30]
c0002591:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0002595:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002598:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c000259b:	8a 46 44             	mov    al,BYTE PTR [esi+0x44]
c000259e:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c00025a2:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c00025a5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00025a9:	48                   	dec    eax
c00025aa:	3c 01                	cmp    al,0x1
c00025ac:	77 ab                	ja     c0002559 <mount_volume+0xc8>
c00025ae:	0f b6 46 41          	movzx  eax,BYTE PTR [esi+0x41]
c00025b2:	89 c3                	mov    ebx,eax
c00025b4:	66 89 46 0a          	mov    WORD PTR [esi+0xa],ax
c00025b8:	66 85 c0             	test   ax,ax
c00025bb:	74 9c                	je     c0002559 <mount_volume+0xc8>
c00025bd:	8d 40 ff             	lea    eax,[eax-0x1]
c00025c0:	85 d8                	test   eax,ebx
c00025c2:	75 95                	jne    c0002559 <mount_volume+0xc8>
c00025c4:	8d 46 45             	lea    eax,[esi+0x45]
c00025c7:	e8 0b f8 ff ff       	call   c0001dd7 <ld_word>
c00025cc:	89 c7                	mov    edi,eax
c00025ce:	66 89 46 08          	mov    WORD PTR [esi+0x8],ax
c00025d2:	a8 0f                	test   al,0xf
c00025d4:	75 83                	jne    c0002559 <mount_volume+0xc8>
c00025d6:	8d 46 47             	lea    eax,[esi+0x47]
c00025d9:	e8 f9 f7 ff ff       	call   c0001dd7 <ld_word>
c00025de:	0f b7 e8             	movzx  ebp,ax
c00025e1:	85 ed                	test   ebp,ebp
c00025e3:	75 0a                	jne    c00025ef <mount_volume+0x15e>
c00025e5:	8d 46 54             	lea    eax,[esi+0x54]
c00025e8:	e8 f7 f7 ff ff       	call   c0001de4 <ld_dword>
c00025ed:	89 c5                	mov    ebp,eax
c00025ef:	8d 46 42             	lea    eax,[esi+0x42]
c00025f2:	e8 e0 f7 ff ff       	call   c0001dd7 <ld_word>
c00025f7:	0f b7 c8             	movzx  ecx,ax
c00025fa:	85 c9                	test   ecx,ecx
c00025fc:	0f 84 57 ff ff ff    	je     c0002559 <mount_volume+0xc8>
c0002602:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0002607:	0f af 04 24          	imul   eax,DWORD PTR [esp]
c000260b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000260f:	0f b7 c7             	movzx  eax,di
c0002612:	c1 e8 04             	shr    eax,0x4
c0002615:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0002619:	01 c8                	add    eax,ecx
c000261b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000261f:	39 c5                	cmp    ebp,eax
c0002621:	0f 82 32 ff ff ff    	jb     c0002559 <mount_volume+0xc8>
c0002627:	29 c5                	sub    ebp,eax
c0002629:	31 d2                	xor    edx,edx
c000262b:	89 e8                	mov    eax,ebp
c000262d:	f7 f3                	div    ebx
c000262f:	39 dd                	cmp    ebp,ebx
c0002631:	0f 82 22 ff ff ff    	jb     c0002559 <mount_volume+0xc8>
c0002637:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c000263c:	0f 87 17 ff ff ff    	ja     c0002559 <mount_volume+0xc8>
c0002642:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0002647:	0f 86 1c 01 00 00    	jbe    c0002769 <mount_volume+0x2d8>
c000264d:	bb 03 00 00 00       	mov    ebx,0x3
c0002652:	8d 68 02             	lea    ebp,[eax+0x2]
c0002655:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002659:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000265d:	03 54 24 04          	add    edx,DWORD PTR [esp+0x4]
c0002661:	89 46 20             	mov    DWORD PTR [esi+0x20],eax
c0002664:	89 6e 18             	mov    DWORD PTR [esi+0x18],ebp
c0002667:	01 c8                	add    eax,ecx
c0002669:	89 56 2c             	mov    DWORD PTR [esi+0x2c],edx
c000266c:	89 46 24             	mov    DWORD PTR [esi+0x24],eax
c000266f:	83 fb 03             	cmp    ebx,0x3
c0002672:	75 23                	jne    c0002697 <mount_volume+0x206>
c0002674:	8d 46 5e             	lea    eax,[esi+0x5e]
c0002677:	e8 5b f7 ff ff       	call   c0001dd7 <ld_word>
c000267c:	09 c7                	or     edi,eax
c000267e:	66 85 ff             	test   di,di
c0002681:	0f 85 d2 fe ff ff    	jne    c0002559 <mount_volume+0xc8>
c0002687:	8d 46 60             	lea    eax,[esi+0x60]
c000268a:	c1 e5 02             	shl    ebp,0x2
c000268d:	e8 52 f7 ff ff       	call   c0001de4 <ld_dword>
c0002692:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c0002695:	eb 24                	jmp    c00026bb <mount_volume+0x22a>
c0002697:	66 85 ff             	test   di,di
c000269a:	0f 84 b9 fe ff ff    	je     c0002559 <mount_volume+0xc8>
c00026a0:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c00026a4:	83 fb 02             	cmp    ebx,0x2
c00026a7:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c00026aa:	75 04                	jne    c00026b0 <mount_volume+0x21f>
c00026ac:	01 ed                	add    ebp,ebp
c00026ae:	eb 0b                	jmp    c00026bb <mount_volume+0x22a>
c00026b0:	8d 44 6d 00          	lea    eax,[ebp+ebp*2+0x0]
c00026b4:	83 e5 01             	and    ebp,0x1
c00026b7:	d1 e8                	shr    eax,1
c00026b9:	01 c5                	add    ebp,eax
c00026bb:	81 c5 ff 01 00 00    	add    ebp,0x1ff
c00026c1:	c1 ed 09             	shr    ebp,0x9
c00026c4:	3b 2c 24             	cmp    ebp,DWORD PTR [esp]
c00026c7:	0f 87 8c fe ff ff    	ja     c0002559 <mount_volume+0xc8>
c00026cd:	c7 46 14 ff ff ff ff 	mov    DWORD PTR [esi+0x14],0xffffffff
c00026d4:	c7 46 10 ff ff ff ff 	mov    DWORD PTR [esi+0x10],0xffffffff
c00026db:	c6 46 04 80          	mov    BYTE PTR [esi+0x4],0x80
c00026df:	83 fb 03             	cmp    ebx,0x3
c00026e2:	75 6e                	jne    c0002752 <mount_volume+0x2c1>
c00026e4:	8d 46 64             	lea    eax,[esi+0x64]
c00026e7:	e8 eb f6 ff ff       	call   c0001dd7 <ld_word>
c00026ec:	66 48                	dec    ax
c00026ee:	75 62                	jne    c0002752 <mount_volume+0x2c1>
c00026f0:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00026f4:	89 f0                	mov    eax,esi
c00026f6:	42                   	inc    edx
c00026f7:	e8 42 fc ff ff       	call   c000233e <move_window>
c00026fc:	85 c0                	test   eax,eax
c00026fe:	75 52                	jne    c0002752 <mount_volume+0x2c1>
c0002700:	c6 46 04 00          	mov    BYTE PTR [esi+0x4],0x0
c0002704:	8d 86 32 02 00 00    	lea    eax,[esi+0x232]
c000270a:	e8 c8 f6 ff ff       	call   c0001dd7 <ld_word>
c000270f:	66 3d 55 aa          	cmp    ax,0xaa55
c0002713:	75 3d                	jne    c0002752 <mount_volume+0x2c1>
c0002715:	8d 46 34             	lea    eax,[esi+0x34]
c0002718:	e8 c7 f6 ff ff       	call   c0001de4 <ld_dword>
c000271d:	3d 52 52 61 41       	cmp    eax,0x41615252
c0002722:	75 2e                	jne    c0002752 <mount_volume+0x2c1>
c0002724:	8d 86 18 02 00 00    	lea    eax,[esi+0x218]
c000272a:	e8 b5 f6 ff ff       	call   c0001de4 <ld_dword>
c000272f:	3d 72 72 41 61       	cmp    eax,0x61417272
c0002734:	75 1c                	jne    c0002752 <mount_volume+0x2c1>
c0002736:	8d 86 1c 02 00 00    	lea    eax,[esi+0x21c]
c000273c:	e8 a3 f6 ff ff       	call   c0001de4 <ld_dword>
c0002741:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c0002744:	8d 86 20 02 00 00    	lea    eax,[esi+0x220]
c000274a:	e8 95 f6 ff ff       	call   c0001de4 <ld_dword>
c000274f:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c0002752:	66 a1 80 64 02 c0    	mov    ax,ds:0xc0026480
c0002758:	88 1e                	mov    BYTE PTR [esi],bl
c000275a:	40                   	inc    eax
c000275b:	31 db                	xor    ebx,ebx
c000275d:	66 a3 80 64 02 c0    	mov    ds:0xc0026480,ax
c0002763:	66 89 46 06          	mov    WORD PTR [esi+0x6],ax
c0002767:	eb 0f                	jmp    c0002778 <mount_volume+0x2e7>
c0002769:	3d f6 0f 00 00       	cmp    eax,0xff6
c000276e:	19 db                	sbb    ebx,ebx
c0002770:	83 c3 02             	add    ebx,0x2
c0002773:	e9 da fe ff ff       	jmp    c0002652 <mount_volume+0x1c1>
c0002778:	83 c4 1c             	add    esp,0x1c
c000277b:	89 d8                	mov    eax,ebx
c000277d:	5b                   	pop    ebx
c000277e:	5e                   	pop    esi
c000277f:	5f                   	pop    edi
c0002780:	5d                   	pop    ebp
c0002781:	c3                   	ret    

c0002782 <put_fat>:
c0002782:	55                   	push   ebp
c0002783:	bd 02 00 00 00       	mov    ebp,0x2
c0002788:	57                   	push   edi
c0002789:	56                   	push   esi
c000278a:	53                   	push   ebx
c000278b:	83 ec 1c             	sub    esp,0x1c
c000278e:	83 fa 01             	cmp    edx,0x1
c0002791:	0f 86 38 01 00 00    	jbe    c00028cf <put_fat+0x14d>
c0002797:	39 50 18             	cmp    DWORD PTR [eax+0x18],edx
c000279a:	0f 86 2f 01 00 00    	jbe    c00028cf <put_fat+0x14d>
c00027a0:	89 c6                	mov    esi,eax
c00027a2:	89 cf                	mov    edi,ecx
c00027a4:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c00027a7:	89 d3                	mov    ebx,edx
c00027a9:	83 f8 02             	cmp    eax,0x2
c00027ac:	0f 84 b1 00 00 00    	je     c0002863 <put_fat+0xe1>
c00027b2:	83 f8 03             	cmp    eax,0x3
c00027b5:	0f 84 d5 00 00 00    	je     c0002890 <put_fat+0x10e>
c00027bb:	48                   	dec    eax
c00027bc:	0f 85 0d 01 00 00    	jne    c00028cf <put_fat+0x14d>
c00027c2:	89 d1                	mov    ecx,edx
c00027c4:	89 f0                	mov    eax,esi
c00027c6:	d1 e9                	shr    ecx,1
c00027c8:	01 d1                	add    ecx,edx
c00027ca:	89 ca                	mov    edx,ecx
c00027cc:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00027d0:	c1 ea 09             	shr    edx,0x9
c00027d3:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c00027d6:	e8 63 fb ff ff       	call   c000233e <move_window>
c00027db:	89 c5                	mov    ebp,eax
c00027dd:	85 c0                	test   eax,eax
c00027df:	0f 85 ea 00 00 00    	jne    c00028cf <put_fat+0x14d>
c00027e5:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00027e9:	8d 46 34             	lea    eax,[esi+0x34]
c00027ec:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00027f0:	8d 41 01             	lea    eax,[ecx+0x1]
c00027f3:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c00027f9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00027fd:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c0002801:	89 f8                	mov    eax,edi
c0002803:	83 e3 01             	and    ebx,0x1
c0002806:	74 11                	je     c0002819 <put_fat+0x97>
c0002808:	8a 11                	mov    dl,BYTE PTR [ecx]
c000280a:	89 f8                	mov    eax,edi
c000280c:	83 e2 0f             	and    edx,0xf
c000280f:	c1 e0 04             	shl    eax,0x4
c0002812:	25 f0 0f 00 00       	and    eax,0xff0
c0002817:	09 d0                	or     eax,edx
c0002819:	88 01                	mov    BYTE PTR [ecx],al
c000281b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000281f:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002823:	c1 ea 09             	shr    edx,0x9
c0002826:	89 f0                	mov    eax,esi
c0002828:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c000282b:	e8 0e fb ff ff       	call   c000233e <move_window>
c0002830:	89 c5                	mov    ebp,eax
c0002832:	85 c0                	test   eax,eax
c0002834:	0f 85 95 00 00 00    	jne    c00028cf <put_fat+0x14d>
c000283a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000283e:	25 ff 01 00 00       	and    eax,0x1ff
c0002843:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002847:	85 db                	test   ebx,ebx
c0002849:	74 07                	je     c0002852 <put_fat+0xd0>
c000284b:	c1 ef 04             	shr    edi,0x4
c000284e:	89 f9                	mov    ecx,edi
c0002850:	eb 0d                	jmp    c000285f <put_fat+0xdd>
c0002852:	8a 08                	mov    cl,BYTE PTR [eax]
c0002854:	c1 ef 08             	shr    edi,0x8
c0002857:	83 e1 f0             	and    ecx,0xfffffff0
c000285a:	83 e7 0f             	and    edi,0xf
c000285d:	09 f9                	or     ecx,edi
c000285f:	88 08                	mov    BYTE PTR [eax],cl
c0002861:	eb 27                	jmp    c000288a <put_fat+0x108>
c0002863:	c1 ea 08             	shr    edx,0x8
c0002866:	89 f0                	mov    eax,esi
c0002868:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c000286b:	e8 ce fa ff ff       	call   c000233e <move_window>
c0002870:	89 c5                	mov    ebp,eax
c0002872:	85 c0                	test   eax,eax
c0002874:	75 59                	jne    c00028cf <put_fat+0x14d>
c0002876:	01 db                	add    ebx,ebx
c0002878:	0f b7 d7             	movzx  edx,di
c000287b:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0002881:	8d 44 1e 34          	lea    eax,[esi+ebx*1+0x34]
c0002885:	e8 72 f5 ff ff       	call   c0001dfc <st_word>
c000288a:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c000288e:	eb 3f                	jmp    c00028cf <put_fat+0x14d>
c0002890:	c1 ea 07             	shr    edx,0x7
c0002893:	89 f0                	mov    eax,esi
c0002895:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0002898:	e8 a1 fa ff ff       	call   c000233e <move_window>
c000289d:	89 c5                	mov    ebp,eax
c000289f:	85 c0                	test   eax,eax
c00028a1:	75 2c                	jne    c00028cf <put_fat+0x14d>
c00028a3:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c00028a9:	c1 e3 02             	shl    ebx,0x2
c00028ac:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c00028b2:	8d 5c 1e 34          	lea    ebx,[esi+ebx*1+0x34]
c00028b6:	89 d8                	mov    eax,ebx
c00028b8:	e8 27 f5 ff ff       	call   c0001de4 <ld_dword>
c00028bd:	25 00 00 00 f0       	and    eax,0xf0000000
c00028c2:	09 f8                	or     eax,edi
c00028c4:	89 c2                	mov    edx,eax
c00028c6:	89 d8                	mov    eax,ebx
c00028c8:	e8 33 f5 ff ff       	call   c0001e00 <st_dword>
c00028cd:	eb bb                	jmp    c000288a <put_fat+0x108>
c00028cf:	83 c4 1c             	add    esp,0x1c
c00028d2:	89 e8                	mov    eax,ebp
c00028d4:	5b                   	pop    ebx
c00028d5:	5e                   	pop    esi
c00028d6:	5f                   	pop    edi
c00028d7:	5d                   	pop    ebp
c00028d8:	c3                   	ret    

c00028d9 <dir_clear>:
c00028d9:	55                   	push   ebp
c00028da:	57                   	push   edi
c00028db:	56                   	push   esi
c00028dc:	89 c6                	mov    esi,eax
c00028de:	53                   	push   ebx
c00028df:	83 ec 1c             	sub    esp,0x1c
c00028e2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00028e6:	e8 f0 f9 ff ff       	call   c00022db <sync_window>
c00028eb:	85 c0                	test   eax,eax
c00028ed:	0f 85 c0 00 00 00    	jne    c00029b3 <dir_clear+0xda>
c00028f3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00028f7:	89 f0                	mov    eax,esi
c00028f9:	e8 30 f7 ff ff       	call   c000202e <clst2sect>
c00028fe:	31 d2                	xor    edx,edx
c0002900:	89 46 30             	mov    DWORD PTR [esi+0x30],eax
c0002903:	89 c5                	mov    ebp,eax
c0002905:	b9 00 02 00 00       	mov    ecx,0x200
c000290a:	8d 46 34             	lea    eax,[esi+0x34]
c000290d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002911:	e8 02 f5 ff ff       	call   c0001e18 <mem_set>
c0002916:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c000291a:	c1 e3 09             	shl    ebx,0x9
c000291d:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c0002923:	76 1b                	jbe    c0002940 <dir_clear+0x67>
c0002925:	bb 00 80 00 00       	mov    ebx,0x8000
c000292a:	eb 14                	jmp    c0002940 <dir_clear+0x67>
c000292c:	83 ec 0c             	sub    esp,0xc
c000292f:	53                   	push   ebx
c0002930:	e8 eb 32 00 00       	call   c0005c20 <ff_memalloc>
c0002935:	83 c4 10             	add    esp,0x10
c0002938:	89 c7                	mov    edi,eax
c000293a:	85 c0                	test   eax,eax
c000293c:	75 7c                	jne    c00029ba <dir_clear+0xe1>
c000293e:	d1 eb                	shr    ebx,1
c0002940:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002946:	77 e4                	ja     c000292c <dir_clear+0x53>
c0002948:	31 db                	xor    ebx,ebx
c000294a:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c000294e:	39 d8                	cmp    eax,ebx
c0002950:	76 53                	jbe    c00029a5 <dir_clear+0xcc>
c0002952:	6a 01                	push   0x1
c0002954:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c0002957:	50                   	push   eax
c0002958:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c000295c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0002960:	50                   	push   eax
c0002961:	e8 3c f4 ff ff       	call   c0001da2 <disk_write>
c0002966:	83 c4 10             	add    esp,0x10
c0002969:	85 c0                	test   eax,eax
c000296b:	75 38                	jne    c00029a5 <dir_clear+0xcc>
c000296d:	43                   	inc    ebx
c000296e:	eb da                	jmp    c000294a <dir_clear+0x71>
c0002970:	52                   	push   edx
c0002971:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c0002974:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0002978:	50                   	push   eax
c0002979:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c000297d:	57                   	push   edi
c000297e:	50                   	push   eax
c000297f:	e8 1e f4 ff ff       	call   c0001da2 <disk_write>
c0002984:	83 c4 10             	add    esp,0x10
c0002987:	85 c0                	test   eax,eax
c0002989:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000298d:	75 0a                	jne    c0002999 <dir_clear+0xc0>
c000298f:	01 d3                	add    ebx,edx
c0002991:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0002995:	39 d8                	cmp    eax,ebx
c0002997:	77 d7                	ja     c0002970 <dir_clear+0x97>
c0002999:	83 ec 0c             	sub    esp,0xc
c000299c:	57                   	push   edi
c000299d:	e8 96 32 00 00       	call   c0005c38 <ff_memfree>
c00029a2:	83 c4 10             	add    esp,0x10
c00029a5:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00029a9:	39 d8                	cmp    eax,ebx
c00029ab:	0f 95 c0             	setne  al
c00029ae:	0f b6 c0             	movzx  eax,al
c00029b1:	eb 19                	jmp    c00029cc <dir_clear+0xf3>
c00029b3:	b8 01 00 00 00       	mov    eax,0x1
c00029b8:	eb 12                	jmp    c00029cc <dir_clear+0xf3>
c00029ba:	89 d9                	mov    ecx,ebx
c00029bc:	31 d2                	xor    edx,edx
c00029be:	e8 55 f4 ff ff       	call   c0001e18 <mem_set>
c00029c3:	89 da                	mov    edx,ebx
c00029c5:	31 db                	xor    ebx,ebx
c00029c7:	c1 ea 09             	shr    edx,0x9
c00029ca:	eb c5                	jmp    c0002991 <dir_clear+0xb8>
c00029cc:	83 c4 1c             	add    esp,0x1c
c00029cf:	5b                   	pop    ebx
c00029d0:	5e                   	pop    esi
c00029d1:	5f                   	pop    edi
c00029d2:	5d                   	pop    ebp
c00029d3:	c3                   	ret    

c00029d4 <create_name>:
c00029d4:	55                   	push   ebp
c00029d5:	57                   	push   edi
c00029d6:	89 d7                	mov    edi,edx
c00029d8:	56                   	push   esi
c00029d9:	31 f6                	xor    esi,esi
c00029db:	53                   	push   ebx
c00029dc:	83 ec 3c             	sub    esp,0x3c
c00029df:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00029e3:	8b 02                	mov    eax,DWORD PTR [edx]
c00029e5:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00029e9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00029ed:	8b 00                	mov    eax,DWORD PTR [eax]
c00029ef:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00029f2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00029f6:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00029fa:	e8 5e f4 ff ff       	call   c0001e5d <tchar2uni>
c00029ff:	89 c3                	mov    ebx,eax
c0002a01:	83 f8 ff             	cmp    eax,0xffffffff
c0002a04:	75 0a                	jne    c0002a10 <create_name+0x3c>
c0002a06:	b8 06 00 00 00       	mov    eax,0x6
c0002a0b:	e9 93 02 00 00       	jmp    c0002ca3 <create_name+0x2cf>
c0002a10:	3d ff ff 00 00       	cmp    eax,0xffff
c0002a15:	76 0c                	jbe    c0002a23 <create_name+0x4f>
c0002a17:	c1 e8 10             	shr    eax,0x10
c0002a1a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002a1e:	66 89 04 72          	mov    WORD PTR [edx+esi*2],ax
c0002a22:	46                   	inc    esi
c0002a23:	0f b7 d3             	movzx  edx,bx
c0002a26:	83 fa 1f             	cmp    edx,0x1f
c0002a29:	76 4a                	jbe    c0002a75 <create_name+0xa1>
c0002a2b:	83 fa 5c             	cmp    edx,0x5c
c0002a2e:	74 30                	je     c0002a60 <create_name+0x8c>
c0002a30:	83 fa 2f             	cmp    edx,0x2f
c0002a33:	74 2b                	je     c0002a60 <create_name+0x8c>
c0002a35:	83 fa 7f             	cmp    edx,0x7f
c0002a38:	77 0e                	ja     c0002a48 <create_name+0x74>
c0002a3a:	b8 02 05 02 c0       	mov    eax,0xc0020502
c0002a3f:	e8 02 f4 ff ff       	call   c0001e46 <chk_chr>
c0002a44:	85 c0                	test   eax,eax
c0002a46:	75 be                	jne    c0002a06 <create_name+0x32>
c0002a48:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0002a4e:	77 b6                	ja     c0002a06 <create_name+0x32>
c0002a50:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002a54:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0002a58:	46                   	inc    esi
c0002a59:	eb 9b                	jmp    c00029f6 <create_name+0x22>
c0002a5b:	40                   	inc    eax
c0002a5c:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0002a60:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002a64:	0f be 10             	movsx  edx,BYTE PTR [eax]
c0002a67:	83 fa 2f             	cmp    edx,0x2f
c0002a6a:	74 ef                	je     c0002a5b <create_name+0x87>
c0002a6c:	83 fa 5c             	cmp    edx,0x5c
c0002a6f:	74 ea                	je     c0002a5b <create_name+0x87>
c0002a71:	31 db                	xor    ebx,ebx
c0002a73:	eb 02                	jmp    c0002a77 <create_name+0xa3>
c0002a75:	b3 04                	mov    bl,0x4
c0002a77:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002a7b:	89 07                	mov    DWORD PTR [edi],eax
c0002a7d:	85 f6                	test   esi,esi
c0002a7f:	74 16                	je     c0002a97 <create_name+0xc3>
c0002a81:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002a85:	0f b7 44 70 fe       	movzx  eax,WORD PTR [eax+esi*2-0x2]
c0002a8a:	83 f8 20             	cmp    eax,0x20
c0002a8d:	74 05                	je     c0002a94 <create_name+0xc0>
c0002a8f:	83 f8 2e             	cmp    eax,0x2e
c0002a92:	75 03                	jne    c0002a97 <create_name+0xc3>
c0002a94:	4e                   	dec    esi
c0002a95:	eb e6                	jmp    c0002a7d <create_name+0xa9>
c0002a97:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002a9b:	31 ff                	xor    edi,edi
c0002a9d:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0002aa3:	85 f6                	test   esi,esi
c0002aa5:	0f 84 5b ff ff ff    	je     c0002a06 <create_name+0x32>
c0002aab:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002aaf:	8d 57 01             	lea    edx,[edi+0x1]
c0002ab2:	0f b7 04 78          	movzx  eax,WORD PTR [eax+edi*2]
c0002ab6:	83 f8 20             	cmp    eax,0x20
c0002ab9:	75 04                	jne    c0002abf <create_name+0xeb>
c0002abb:	89 d7                	mov    edi,edx
c0002abd:	eb ec                	jmp    c0002aab <create_name+0xd7>
c0002abf:	85 ff                	test   edi,edi
c0002ac1:	75 05                	jne    c0002ac8 <create_name+0xf4>
c0002ac3:	83 f8 2e             	cmp    eax,0x2e
c0002ac6:	75 08                	jne    c0002ad0 <create_name+0xfc>
c0002ac8:	83 cb 03             	or     ebx,0x3
c0002acb:	eb 03                	jmp    c0002ad0 <create_name+0xfc>
c0002acd:	4e                   	dec    esi
c0002ace:	74 0c                	je     c0002adc <create_name+0x108>
c0002ad0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002ad4:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0002ada:	75 f1                	jne    c0002acd <create_name+0xf9>
c0002adc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002ae0:	b9 0b 00 00 00       	mov    ecx,0xb
c0002ae5:	83 c0 20             	add    eax,0x20
c0002ae8:	ba 20 00 00 00       	mov    edx,0x20
c0002aed:	31 ed                	xor    ebp,ebp
c0002aef:	e8 24 f3 ff ff       	call   c0001e18 <mem_set>
c0002af4:	b9 08 00 00 00       	mov    ecx,0x8
c0002af9:	c6 44 24 08 00       	mov    BYTE PTR [esp+0x8],0x0
c0002afe:	8d 47 01             	lea    eax,[edi+0x1]
c0002b01:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0002b05:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002b09:	0f b7 04 78          	movzx  eax,WORD PTR [eax+edi*2]
c0002b0d:	89 c7                	mov    edi,eax
c0002b0f:	85 c0                	test   eax,eax
c0002b11:	0f 84 25 01 00 00    	je     c0002c3c <create_name+0x268>
c0002b17:	83 f8 20             	cmp    eax,0x20
c0002b1a:	74 0f                	je     c0002b2b <create_name+0x157>
c0002b1c:	83 f8 2e             	cmp    eax,0x2e
c0002b1f:	75 13                	jne    c0002b34 <create_name+0x160>
c0002b21:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002b25:	0f 84 6a 01 00 00    	je     c0002c95 <create_name+0x2c1>
c0002b2b:	83 cb 03             	or     ebx,0x3
c0002b2e:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0002b32:	eb ca                	jmp    c0002afe <create_name+0x12a>
c0002b34:	39 cd                	cmp    ebp,ecx
c0002b36:	73 0b                	jae    c0002b43 <create_name+0x16f>
c0002b38:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002b3c:	75 3f                	jne    c0002b7d <create_name+0x1a9>
c0002b3e:	e9 52 01 00 00       	jmp    c0002c95 <create_name+0x2c1>
c0002b43:	83 f9 0b             	cmp    ecx,0xb
c0002b46:	75 0d                	jne    c0002b55 <create_name+0x181>
c0002b48:	83 cb 03             	or     ebx,0x3
c0002b4b:	b9 0b 00 00 00       	mov    ecx,0xb
c0002b50:	e9 e7 00 00 00       	jmp    c0002c3c <create_name+0x268>
c0002b55:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002b59:	74 0d                	je     c0002b68 <create_name+0x194>
c0002b5b:	83 cb 03             	or     ebx,0x3
c0002b5e:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002b62:	0f 87 d4 00 00 00    	ja     c0002c3c <create_name+0x268>
c0002b68:	c1 64 24 08 02       	shl    DWORD PTR [esp+0x8],0x2
c0002b6d:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0002b71:	b9 0b 00 00 00       	mov    ecx,0xb
c0002b76:	bd 08 00 00 00       	mov    ebp,0x8
c0002b7b:	eb b1                	jmp    c0002b2e <create_name+0x15a>
c0002b7d:	83 f8 7f             	cmp    eax,0x7f
c0002b80:	76 66                	jbe    c0002be8 <create_name+0x214>
c0002b82:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0002b86:	89 d9                	mov    ecx,ebx
c0002b88:	83 c9 02             	or     ecx,0x2
c0002b8b:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0002b8f:	52                   	push   edx
c0002b90:	52                   	push   edx
c0002b91:	68 b5 01 00 00       	push   0x1b5
c0002b96:	50                   	push   eax
c0002b97:	e8 b4 30 00 00       	call   c0005c50 <ff_uni2oem>
c0002b9c:	83 c4 10             	add    esp,0x10
c0002b9f:	89 c7                	mov    edi,eax
c0002ba1:	a8 80                	test   al,0x80
c0002ba3:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0002ba7:	74 0c                	je     c0002bb5 <create_name+0x1e1>
c0002ba9:	83 e7 7f             	and    edi,0x7f
c0002bac:	0f b6 bf c0 05 02 c0 	movzx  edi,BYTE PTR [edi-0x3ffdfa40]
c0002bb3:	eb 2a                	jmp    c0002bdf <create_name+0x20b>
c0002bb5:	0f b7 c0             	movzx  eax,ax
c0002bb8:	3d ff 00 00 00       	cmp    eax,0xff
c0002bbd:	76 20                	jbe    c0002bdf <create_name+0x20b>
c0002bbf:	8d 51 ff             	lea    edx,[ecx-0x1]
c0002bc2:	39 ea                	cmp    edx,ebp
c0002bc4:	77 0a                	ja     c0002bd0 <create_name+0x1fc>
c0002bc6:	83 cb 03             	or     ebx,0x3
c0002bc9:	89 cd                	mov    ebp,ecx
c0002bcb:	e9 5e ff ff ff       	jmp    c0002b2e <create_name+0x15a>
c0002bd0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0002bd4:	88 64 2b 20          	mov    BYTE PTR [ebx+ebp*1+0x20],ah
c0002bd8:	45                   	inc    ebp
c0002bd9:	8a 5c 24 18          	mov    bl,BYTE PTR [esp+0x18]
c0002bdd:	eb 4d                	jmp    c0002c2c <create_name+0x258>
c0002bdf:	8a 5c 24 18          	mov    bl,BYTE PTR [esp+0x18]
c0002be3:	66 85 ff             	test   di,di
c0002be6:	74 19                	je     c0002c01 <create_name+0x22d>
c0002be8:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0002bec:	0f b7 d7             	movzx  edx,di
c0002bef:	b8 0b 05 02 c0       	mov    eax,0xc002050b
c0002bf4:	e8 4d f2 ff ff       	call   c0001e46 <chk_chr>
c0002bf9:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0002bfd:	85 c0                	test   eax,eax
c0002bff:	74 0a                	je     c0002c0b <create_name+0x237>
c0002c01:	83 cb 03             	or     ebx,0x3
c0002c04:	bf 5f 00 00 00       	mov    edi,0x5f
c0002c09:	eb 21                	jmp    c0002c2c <create_name+0x258>
c0002c0b:	8d 47 bf             	lea    eax,[edi-0x41]
c0002c0e:	66 83 f8 19          	cmp    ax,0x19
c0002c12:	77 07                	ja     c0002c1b <create_name+0x247>
c0002c14:	83 4c 24 08 02       	or     DWORD PTR [esp+0x8],0x2
c0002c19:	eb 11                	jmp    c0002c2c <create_name+0x258>
c0002c1b:	8d 47 9f             	lea    eax,[edi-0x61]
c0002c1e:	66 83 f8 19          	cmp    ax,0x19
c0002c22:	77 08                	ja     c0002c2c <create_name+0x258>
c0002c24:	83 4c 24 08 01       	or     DWORD PTR [esp+0x8],0x1
c0002c29:	83 ef 20             	sub    edi,0x20
c0002c2c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0002c30:	89 f8                	mov    eax,edi
c0002c32:	88 44 2a 20          	mov    BYTE PTR [edx+ebp*1+0x20],al
c0002c36:	45                   	inc    ebp
c0002c37:	e9 f2 fe ff ff       	jmp    c0002b2e <create_name+0x15a>
c0002c3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002c40:	80 78 20 e5          	cmp    BYTE PTR [eax+0x20],0xe5
c0002c44:	75 04                	jne    c0002c4a <create_name+0x276>
c0002c46:	c6 40 20 05          	mov    BYTE PTR [eax+0x20],0x5
c0002c4a:	83 f9 08             	cmp    ecx,0x8
c0002c4d:	75 05                	jne    c0002c54 <create_name+0x280>
c0002c4f:	c1 64 24 08 02       	shl    DWORD PTR [esp+0x8],0x2
c0002c54:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002c58:	83 e0 0c             	and    eax,0xc
c0002c5b:	83 f8 0c             	cmp    eax,0xc
c0002c5e:	74 0c                	je     c0002c6c <create_name+0x298>
c0002c60:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002c64:	83 e0 03             	and    eax,0x3
c0002c67:	83 f8 03             	cmp    eax,0x3
c0002c6a:	75 05                	jne    c0002c71 <create_name+0x29d>
c0002c6c:	83 cb 02             	or     ebx,0x2
c0002c6f:	eb 19                	jmp    c0002c8a <create_name+0x2b6>
c0002c71:	f6 c3 02             	test   bl,0x2
c0002c74:	75 14                	jne    c0002c8a <create_name+0x2b6>
c0002c76:	f6 44 24 08 01       	test   BYTE PTR [esp+0x8],0x1
c0002c7b:	74 03                	je     c0002c80 <create_name+0x2ac>
c0002c7d:	83 cb 10             	or     ebx,0x10
c0002c80:	f6 44 24 08 04       	test   BYTE PTR [esp+0x8],0x4
c0002c85:	74 03                	je     c0002c8a <create_name+0x2b6>
c0002c87:	83 cb 08             	or     ebx,0x8
c0002c8a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002c8e:	88 58 2b             	mov    BYTE PTR [eax+0x2b],bl
c0002c91:	31 c0                	xor    eax,eax
c0002c93:	eb 0e                	jmp    c0002ca3 <create_name+0x2cf>
c0002c95:	83 f9 0b             	cmp    ecx,0xb
c0002c98:	0f 85 ca fe ff ff    	jne    c0002b68 <create_name+0x194>
c0002c9e:	e9 a5 fe ff ff       	jmp    c0002b48 <create_name+0x174>
c0002ca3:	83 c4 3c             	add    esp,0x3c
c0002ca6:	5b                   	pop    ebx
c0002ca7:	5e                   	pop    esi
c0002ca8:	5f                   	pop    edi
c0002ca9:	5d                   	pop    ebp
c0002caa:	c3                   	ret    

c0002cab <cmp_lfn>:
c0002cab:	55                   	push   ebp
c0002cac:	57                   	push   edi
c0002cad:	89 d7                	mov    edi,edx
c0002caf:	56                   	push   esi
c0002cb0:	53                   	push   ebx
c0002cb1:	83 ec 1c             	sub    esp,0x1c
c0002cb4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002cb8:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002cbb:	e8 17 f1 ff ff       	call   c0001dd7 <ld_word>
c0002cc0:	66 85 c0             	test   ax,ax
c0002cc3:	74 07                	je     c0002ccc <cmp_lfn+0x21>
c0002cc5:	31 c0                	xor    eax,eax
c0002cc7:	e9 a1 00 00 00       	jmp    c0002d6d <cmp_lfn+0xc2>
c0002ccc:	8a 1f                	mov    bl,BYTE PTR [edi]
c0002cce:	bd 01 00 00 00       	mov    ebp,0x1
c0002cd3:	83 e3 3f             	and    ebx,0x3f
c0002cd6:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0002cde:	4b                   	dec    ebx
c0002cdf:	6b db 0d             	imul   ebx,ebx,0xd
c0002ce2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002ce6:	0f b6 80 40 06 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffdf9c0]
c0002ced:	01 f8                	add    eax,edi
c0002cef:	e8 e3 f0 ff ff       	call   c0001dd7 <ld_word>
c0002cf4:	66 85 ed             	test   bp,bp
c0002cf7:	89 c6                	mov    esi,eax
c0002cf9:	74 3c                	je     c0002d37 <cmp_lfn+0x8c>
c0002cfb:	81 fb ff 00 00 00    	cmp    ebx,0xff
c0002d01:	77 c2                	ja     c0002cc5 <cmp_lfn+0x1a>
c0002d03:	83 ec 0c             	sub    esp,0xc
c0002d06:	0f b7 c0             	movzx  eax,ax
c0002d09:	50                   	push   eax
c0002d0a:	e8 59 30 00 00       	call   c0005d68 <ff_wtoupper>
c0002d0f:	89 c5                	mov    ebp,eax
c0002d11:	8d 43 01             	lea    eax,[ebx+0x1]
c0002d14:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0002d18:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0002d1c:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c0002d20:	89 04 24             	mov    DWORD PTR [esp],eax
c0002d23:	e8 40 30 00 00       	call   c0005d68 <ff_wtoupper>
c0002d28:	83 c4 10             	add    esp,0x10
c0002d2b:	39 c5                	cmp    ebp,eax
c0002d2d:	75 96                	jne    c0002cc5 <cmp_lfn+0x1a>
c0002d2f:	89 f5                	mov    ebp,esi
c0002d31:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0002d35:	eb 0b                	jmp    c0002d42 <cmp_lfn+0x97>
c0002d37:	0f b7 c8             	movzx  ecx,ax
c0002d3a:	81 f9 ff ff 00 00    	cmp    ecx,0xffff
c0002d40:	75 83                	jne    c0002cc5 <cmp_lfn+0x1a>
c0002d42:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c0002d46:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0002d4b:	75 95                	jne    c0002ce2 <cmp_lfn+0x37>
c0002d4d:	f6 07 40             	test   BYTE PTR [edi],0x40
c0002d50:	74 16                	je     c0002d68 <cmp_lfn+0xbd>
c0002d52:	66 85 ed             	test   bp,bp
c0002d55:	74 11                	je     c0002d68 <cmp_lfn+0xbd>
c0002d57:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002d5b:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002d60:	0f 94 c0             	sete   al
c0002d63:	0f b6 c0             	movzx  eax,al
c0002d66:	eb 05                	jmp    c0002d6d <cmp_lfn+0xc2>
c0002d68:	b8 01 00 00 00       	mov    eax,0x1
c0002d6d:	83 c4 1c             	add    esp,0x1c
c0002d70:	5b                   	pop    ebx
c0002d71:	5e                   	pop    esi
c0002d72:	5f                   	pop    edi
c0002d73:	5d                   	pop    ebp
c0002d74:	c3                   	ret    

c0002d75 <sync_fs>:
c0002d75:	56                   	push   esi
c0002d76:	53                   	push   ebx
c0002d77:	53                   	push   ebx
c0002d78:	89 c3                	mov    ebx,eax
c0002d7a:	e8 5c f5 ff ff       	call   c00022db <sync_window>
c0002d7f:	85 c0                	test   eax,eax
c0002d81:	0f 85 9a 00 00 00    	jne    c0002e21 <sync_fs+0xac>
c0002d87:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c0002d8a:	75 7b                	jne    c0002e07 <sync_fs+0x92>
c0002d8c:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c0002d90:	75 75                	jne    c0002e07 <sync_fs+0x92>
c0002d92:	b9 00 02 00 00       	mov    ecx,0x200
c0002d97:	8d 73 34             	lea    esi,[ebx+0x34]
c0002d9a:	31 d2                	xor    edx,edx
c0002d9c:	89 f0                	mov    eax,esi
c0002d9e:	e8 75 f0 ff ff       	call   c0001e18 <mem_set>
c0002da3:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c0002da9:	ba 55 aa 00 00       	mov    edx,0xaa55
c0002dae:	e8 49 f0 ff ff       	call   c0001dfc <st_word>
c0002db3:	ba 52 52 61 41       	mov    edx,0x41615252
c0002db8:	89 f0                	mov    eax,esi
c0002dba:	e8 41 f0 ff ff       	call   c0001e00 <st_dword>
c0002dbf:	8d 83 18 02 00 00    	lea    eax,[ebx+0x218]
c0002dc5:	ba 72 72 41 61       	mov    edx,0x61417272
c0002dca:	e8 31 f0 ff ff       	call   c0001e00 <st_dword>
c0002dcf:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0002dd2:	8d 83 1c 02 00 00    	lea    eax,[ebx+0x21c]
c0002dd8:	e8 23 f0 ff ff       	call   c0001e00 <st_dword>
c0002ddd:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0002de0:	8d 83 20 02 00 00    	lea    eax,[ebx+0x220]
c0002de6:	e8 15 f0 ff ff       	call   c0001e00 <st_dword>
c0002deb:	6a 01                	push   0x1
c0002ded:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0002df0:	40                   	inc    eax
c0002df1:	50                   	push   eax
c0002df2:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0002df5:	56                   	push   esi
c0002df6:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002dfa:	50                   	push   eax
c0002dfb:	e8 a2 ef ff ff       	call   c0001da2 <disk_write>
c0002e00:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c0002e04:	83 c4 10             	add    esp,0x10
c0002e07:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002e0b:	51                   	push   ecx
c0002e0c:	6a 00                	push   0x0
c0002e0e:	6a 00                	push   0x0
c0002e10:	50                   	push   eax
c0002e11:	e8 a2 ef ff ff       	call   c0001db8 <disk_ioctl>
c0002e16:	83 c4 10             	add    esp,0x10
c0002e19:	85 c0                	test   eax,eax
c0002e1b:	0f 95 c0             	setne  al
c0002e1e:	0f b6 c0             	movzx  eax,al
c0002e21:	5a                   	pop    edx
c0002e22:	5b                   	pop    ebx
c0002e23:	5e                   	pop    esi
c0002e24:	c3                   	ret    

c0002e25 <create_partition>:
c0002e25:	55                   	push   ebp
c0002e26:	0f b6 c0             	movzx  eax,al
c0002e29:	57                   	push   edi
c0002e2a:	56                   	push   esi
c0002e2b:	53                   	push   ebx
c0002e2c:	83 ec 40             	sub    esp,0x40
c0002e2f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002e33:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0002e37:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0002e3b:	8d 44 24 30          	lea    eax,[esp+0x30]
c0002e3f:	50                   	push   eax
c0002e40:	6a 01                	push   0x1
c0002e42:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0002e46:	e8 6d ef ff ff       	call   c0001db8 <disk_ioctl>
c0002e4b:	83 c4 10             	add    esp,0x10
c0002e4e:	85 c0                	test   eax,eax
c0002e50:	0f 85 6a 01 00 00    	jne    c0002fc0 <create_partition+0x19b>
c0002e56:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002e5a:	b9 05 00 00 00       	mov    ecx,0x5
c0002e5f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0002e63:	be 08 00 00 00       	mov    esi,0x8
c0002e68:	89 f0                	mov    eax,esi
c0002e6a:	31 d2                	xor    edx,edx
c0002e6c:	0f b6 d8             	movzx  ebx,al
c0002e6f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002e73:	f7 f3                	div    ebx
c0002e75:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0002e7a:	76 0a                	jbe    c0002e86 <create_partition+0x61>
c0002e7c:	d1 e6                	shl    esi,1
c0002e7e:	49                   	dec    ecx
c0002e7f:	75 e7                	jne    c0002e68 <create_partition+0x43>
c0002e81:	be ff ff ff ff       	mov    esi,0xffffffff
c0002e86:	b9 00 02 00 00       	mov    ecx,0x200
c0002e8b:	31 d2                	xor    edx,edx
c0002e8d:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002e91:	e8 82 ef ff ff       	call   c0001e18 <mem_set>
c0002e96:	b9 64 00 00 00       	mov    ecx,0x64
c0002e9b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002e9f:	31 d2                	xor    edx,edx
c0002ea1:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0002ea9:	f7 f1                	div    ecx
c0002eab:	b9 3f 00 00 00       	mov    ecx,0x3f
c0002eb0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0002eb4:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002eb8:	8d 98 c6 01 00 00    	lea    ebx,[eax+0x1c6]
c0002ebe:	89 f0                	mov    eax,esi
c0002ec0:	0f b6 c0             	movzx  eax,al
c0002ec3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002ec7:	85 c9                	test   ecx,ecx
c0002ec9:	75 34                	jne    c0002eff <create_partition+0xda>
c0002ecb:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002ecf:	ba 55 aa 00 00       	mov    edx,0xaa55
c0002ed4:	05 fe 01 00 00       	add    eax,0x1fe
c0002ed9:	e8 1e ef ff ff       	call   c0001dfc <st_word>
c0002ede:	6a 01                	push   0x1
c0002ee0:	6a 00                	push   0x0
c0002ee2:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c0002ee6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0002eea:	e8 b3 ee ff ff       	call   c0001da2 <disk_write>
c0002eef:	83 c4 10             	add    esp,0x10
c0002ef2:	85 c0                	test   eax,eax
c0002ef4:	0f 95 c0             	setne  al
c0002ef7:	0f b6 c0             	movzx  eax,al
c0002efa:	e9 c6 00 00 00       	jmp    c0002fc5 <create_partition+0x1a0>
c0002eff:	39 4c 24 04          	cmp    DWORD PTR [esp+0x4],ecx
c0002f03:	76 c6                	jbe    c0002ecb <create_partition+0xa6>
c0002f05:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0002f09:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0002f0d:	8b 34 b8             	mov    esi,DWORD PTR [eax+edi*4]
c0002f10:	83 fe 64             	cmp    esi,0x64
c0002f13:	77 0d                	ja     c0002f22 <create_partition+0xfd>
c0002f15:	74 07                	je     c0002f1e <create_partition+0xf9>
c0002f17:	0f af 74 24 1c       	imul   esi,DWORD PTR [esp+0x1c]
c0002f1c:	eb 04                	jmp    c0002f22 <create_partition+0xfd>
c0002f1e:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0002f22:	31 c0                	xor    eax,eax
c0002f24:	89 f2                	mov    edx,esi
c0002f26:	01 ca                	add    edx,ecx
c0002f28:	0f 92 c0             	setb   al
c0002f2b:	3b 54 24 04          	cmp    edx,DWORD PTR [esp+0x4]
c0002f2f:	77 04                	ja     c0002f35 <create_partition+0x110>
c0002f31:	85 c0                	test   eax,eax
c0002f33:	74 08                	je     c0002f3d <create_partition+0x118>
c0002f35:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0002f39:	29 ce                	sub    esi,ecx
c0002f3b:	eb 04                	jmp    c0002f41 <create_partition+0x11c>
c0002f3d:	85 f6                	test   esi,esi
c0002f3f:	74 8a                	je     c0002ecb <create_partition+0xa6>
c0002f41:	89 ca                	mov    edx,ecx
c0002f43:	89 d8                	mov    eax,ebx
c0002f45:	bf 3f 00 00 00       	mov    edi,0x3f
c0002f4a:	e8 b1 ee ff ff       	call   c0001e00 <st_dword>
c0002f4f:	8d 43 04             	lea    eax,[ebx+0x4]
c0002f52:	89 f2                	mov    edx,esi
c0002f54:	83 c3 10             	add    ebx,0x10
c0002f57:	e8 a4 ee ff ff       	call   c0001e00 <st_dword>
c0002f5c:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c0002f60:	31 d2                	xor    edx,edx
c0002f62:	88 43 ec             	mov    BYTE PTR [ebx-0x14],al
c0002f65:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0002f69:	89 c8                	mov    eax,ecx
c0002f6b:	01 f1                	add    ecx,esi
c0002f6d:	f7 f7                	div    edi
c0002f6f:	89 d5                	mov    ebp,edx
c0002f71:	31 d2                	xor    edx,edx
c0002f73:	45                   	inc    ebp
c0002f74:	f7 74 24 10          	div    DWORD PTR [esp+0x10]
c0002f78:	88 53 e9             	mov    BYTE PTR [ebx-0x17],dl
c0002f7b:	88 43 eb             	mov    BYTE PTR [ebx-0x15],al
c0002f7e:	89 c2                	mov    edx,eax
c0002f80:	8d 41 ff             	lea    eax,[ecx-0x1]
c0002f83:	c1 ea 02             	shr    edx,0x2
c0002f86:	83 e2 c0             	and    edx,0xffffffc0
c0002f89:	09 ea                	or     edx,ebp
c0002f8b:	88 53 ea             	mov    BYTE PTR [ebx-0x16],dl
c0002f8e:	31 d2                	xor    edx,edx
c0002f90:	f7 f7                	div    edi
c0002f92:	89 d6                	mov    esi,edx
c0002f94:	31 d2                	xor    edx,edx
c0002f96:	46                   	inc    esi
c0002f97:	f7 74 24 10          	div    DWORD PTR [esp+0x10]
c0002f9b:	88 53 ed             	mov    BYTE PTR [ebx-0x13],dl
c0002f9e:	88 43 ef             	mov    BYTE PTR [ebx-0x11],al
c0002fa1:	89 c7                	mov    edi,eax
c0002fa3:	c1 ef 02             	shr    edi,0x2
c0002fa6:	83 e7 c0             	and    edi,0xffffffc0
c0002fa9:	09 fe                	or     esi,edi
c0002fab:	89 f2                	mov    edx,esi
c0002fad:	88 53 ee             	mov    BYTE PTR [ebx-0x12],dl
c0002fb0:	83 7c 24 08 04       	cmp    DWORD PTR [esp+0x8],0x4
c0002fb5:	0f 85 0c ff ff ff    	jne    c0002ec7 <create_partition+0xa2>
c0002fbb:	e9 0b ff ff ff       	jmp    c0002ecb <create_partition+0xa6>
c0002fc0:	b8 01 00 00 00       	mov    eax,0x1
c0002fc5:	83 c4 3c             	add    esp,0x3c
c0002fc8:	5b                   	pop    ebx
c0002fc9:	5e                   	pop    esi
c0002fca:	5f                   	pop    edi
c0002fcb:	5d                   	pop    ebp
c0002fcc:	c3                   	ret    

c0002fcd <get_fileinfo>:
c0002fcd:	55                   	push   ebp
c0002fce:	57                   	push   edi
c0002fcf:	56                   	push   esi
c0002fd0:	53                   	push   ebx
c0002fd1:	83 ec 1c             	sub    esp,0x1c
c0002fd4:	8b 30                	mov    esi,DWORD PTR [eax]
c0002fd6:	c6 42 16 00          	mov    BYTE PTR [edx+0x16],0x0
c0002fda:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0002fde:	83 78 18 00          	cmp    DWORD PTR [eax+0x18],0x0
c0002fe2:	0f 84 d3 01 00 00    	je     c00031bb <get_fileinfo+0x1ee>
c0002fe8:	89 d3                	mov    ebx,edx
c0002fea:	89 c6                	mov    esi,eax
c0002fec:	83 78 2c ff          	cmp    DWORD PTR [eax+0x2c],0xffffffff
c0002ff0:	74 72                	je     c0003064 <get_fileinfo+0x97>
c0002ff2:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0002ffa:	31 ed                	xor    ebp,ebp
c0002ffc:	31 ff                	xor    edi,edi
c0002ffe:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003002:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0003006:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003009:	0f b7 04 08          	movzx  eax,WORD PTR [eax+ecx*1]
c000300d:	89 c2                	mov    edx,eax
c000300f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003013:	85 c0                	test   eax,eax
c0003015:	74 41                	je     c0003058 <get_fileinfo+0x8b>
c0003017:	0f b7 c5             	movzx  eax,bp
c000301a:	85 c0                	test   eax,eax
c000301c:	75 0d                	jne    c000302b <get_fileinfo+0x5e>
c000301e:	8d 8a 00 28 00 00    	lea    ecx,[edx+0x2800]
c0003024:	66 81 f9 ff 07       	cmp    cx,0x7ff
c0003029:	76 22                	jbe    c000304d <get_fileinfo+0x80>
c000302b:	c1 e0 10             	shl    eax,0x10
c000302e:	b9 ff 00 00 00       	mov    ecx,0xff
c0003033:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0003037:	29 f9                	sub    ecx,edi
c0003039:	8d 54 3b 16          	lea    edx,[ebx+edi*1+0x16]
c000303d:	e8 f3 ee ff ff       	call   c0001f35 <put_utf>
c0003042:	0f b6 c0             	movzx  eax,al
c0003045:	85 c0                	test   eax,eax
c0003047:	74 0d                	je     c0003056 <get_fileinfo+0x89>
c0003049:	01 c7                	add    edi,eax
c000304b:	31 d2                	xor    edx,edx
c000304d:	83 44 24 04 02       	add    DWORD PTR [esp+0x4],0x2
c0003052:	89 d5                	mov    ebp,edx
c0003054:	eb a8                	jmp    c0002ffe <get_fileinfo+0x31>
c0003056:	31 ff                	xor    edi,edi
c0003058:	66 85 ed             	test   bp,bp
c000305b:	74 02                	je     c000305f <get_fileinfo+0x92>
c000305d:	31 ff                	xor    edi,edi
c000305f:	c6 44 3b 16 00       	mov    BYTE PTR [ebx+edi*1+0x16],0x0
c0003064:	31 ff                	xor    edi,edi
c0003066:	31 c9                	xor    ecx,ecx
c0003068:	83 f9 0a             	cmp    ecx,0xa
c000306b:	0f 87 ac 00 00 00    	ja     c000311d <get_fileinfo+0x150>
c0003071:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0003074:	8d 69 01             	lea    ebp,[ecx+0x1]
c0003077:	0f b6 04 08          	movzx  eax,BYTE PTR [eax+ecx*1]
c000307b:	89 c2                	mov    edx,eax
c000307d:	83 f8 20             	cmp    eax,0x20
c0003080:	0f 84 90 00 00 00    	je     c0003116 <get_fileinfo+0x149>
c0003086:	83 f8 05             	cmp    eax,0x5
c0003089:	75 05                	jne    c0003090 <get_fileinfo+0xc3>
c000308b:	ba e5 00 00 00       	mov    edx,0xe5
c0003090:	83 ff 0b             	cmp    edi,0xb
c0003093:	77 0b                	ja     c00030a0 <get_fileinfo+0xd3>
c0003095:	83 fd 09             	cmp    ebp,0x9
c0003098:	75 06                	jne    c00030a0 <get_fileinfo+0xd3>
c000309a:	c6 44 3b 09 2e       	mov    BYTE PTR [ebx+edi*1+0x9],0x2e
c000309f:	47                   	inc    edi
c00030a0:	0f b7 c2             	movzx  eax,dx
c00030a3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00030a7:	e8 ab ed ff ff       	call   c0001e57 <dbc_1st>
c00030ac:	85 c0                	test   eax,eax
c00030ae:	74 2f                	je     c00030df <get_fileinfo+0x112>
c00030b0:	83 fd 08             	cmp    ebp,0x8
c00030b3:	74 2a                	je     c00030df <get_fileinfo+0x112>
c00030b5:	83 fd 0b             	cmp    ebp,0xb
c00030b8:	74 25                	je     c00030df <get_fileinfo+0x112>
c00030ba:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00030bd:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c00030c1:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c00030c5:	e8 90 ed ff ff       	call   c0001e5a <dbc_2nd>
c00030ca:	85 c0                	test   eax,eax
c00030cc:	74 11                	je     c00030df <get_fileinfo+0x112>
c00030ce:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00030d2:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c00030d7:	c1 e0 08             	shl    eax,0x8
c00030da:	8d 69 02             	lea    ebp,[ecx+0x2]
c00030dd:	09 c2                	or     edx,eax
c00030df:	0f b7 d2             	movzx  edx,dx
c00030e2:	50                   	push   eax
c00030e3:	50                   	push   eax
c00030e4:	68 b5 01 00 00       	push   0x1b5
c00030e9:	52                   	push   edx
c00030ea:	e8 01 2c 00 00       	call   c0005cf0 <ff_oem2uni>
c00030ef:	83 c4 10             	add    esp,0x10
c00030f2:	0f b7 c0             	movzx  eax,ax
c00030f5:	85 c0                	test   eax,eax
c00030f7:	75 04                	jne    c00030fd <get_fileinfo+0x130>
c00030f9:	31 ff                	xor    edi,edi
c00030fb:	eb 20                	jmp    c000311d <get_fileinfo+0x150>
c00030fd:	b9 0c 00 00 00       	mov    ecx,0xc
c0003102:	8d 54 3b 09          	lea    edx,[ebx+edi*1+0x9]
c0003106:	29 f9                	sub    ecx,edi
c0003108:	e8 28 ee ff ff       	call   c0001f35 <put_utf>
c000310d:	0f b6 c0             	movzx  eax,al
c0003110:	85 c0                	test   eax,eax
c0003112:	74 e5                	je     c00030f9 <get_fileinfo+0x12c>
c0003114:	01 c7                	add    edi,eax
c0003116:	89 e9                	mov    ecx,ebp
c0003118:	e9 4b ff ff ff       	jmp    c0003068 <get_fileinfo+0x9b>
c000311d:	c6 44 3b 09 00       	mov    BYTE PTR [ebx+edi*1+0x9],0x0
c0003122:	80 7b 16 00          	cmp    BYTE PTR [ebx+0x16],0x0
c0003126:	75 5f                	jne    c0003187 <get_fileinfo+0x1ba>
c0003128:	85 ff                	test   edi,edi
c000312a:	75 0b                	jne    c0003137 <get_fileinfo+0x16a>
c000312c:	c6 43 16 3f          	mov    BYTE PTR [ebx+0x16],0x3f
c0003130:	ba 01 00 00 00       	mov    edx,0x1
c0003135:	eb 3e                	jmp    c0003175 <get_fileinfo+0x1a8>
c0003137:	bf 08 00 00 00       	mov    edi,0x8
c000313c:	31 d2                	xor    edx,edx
c000313e:	66 0f be 44 13 09    	movsx  ax,BYTE PTR [ebx+edx*1+0x9]
c0003144:	84 c0                	test   al,al
c0003146:	74 2d                	je     c0003175 <get_fileinfo+0x1a8>
c0003148:	66 83 f8 2e          	cmp    ax,0x2e
c000314c:	74 1b                	je     c0003169 <get_fileinfo+0x19c>
c000314e:	8d 48 bf             	lea    ecx,[eax-0x41]
c0003151:	66 83 f9 19          	cmp    cx,0x19
c0003155:	77 17                	ja     c000316e <get_fileinfo+0x1a1>
c0003157:	8b 4e 1c             	mov    ecx,DWORD PTR [esi+0x1c]
c000315a:	8a 49 0c             	mov    cl,BYTE PTR [ecx+0xc]
c000315d:	21 f9                	and    ecx,edi
c000315f:	80 e1 18             	and    cl,0x18
c0003162:	74 0a                	je     c000316e <get_fileinfo+0x1a1>
c0003164:	83 c0 20             	add    eax,0x20
c0003167:	eb 05                	jmp    c000316e <get_fileinfo+0x1a1>
c0003169:	bf 10 00 00 00       	mov    edi,0x10
c000316e:	88 44 13 16          	mov    BYTE PTR [ebx+edx*1+0x16],al
c0003172:	42                   	inc    edx
c0003173:	eb c9                	jmp    c000313e <get_fileinfo+0x171>
c0003175:	c6 44 13 16 00       	mov    BYTE PTR [ebx+edx*1+0x16],0x0
c000317a:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000317d:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c0003181:	75 04                	jne    c0003187 <get_fileinfo+0x1ba>
c0003183:	c6 43 09 00          	mov    BYTE PTR [ebx+0x9],0x0
c0003187:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000318a:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c000318d:	88 43 08             	mov    BYTE PTR [ebx+0x8],al
c0003190:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0003193:	83 c0 1c             	add    eax,0x1c
c0003196:	e8 49 ec ff ff       	call   c0001de4 <ld_dword>
c000319b:	89 03                	mov    DWORD PTR [ebx],eax
c000319d:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00031a0:	83 c0 16             	add    eax,0x16
c00031a3:	e8 2f ec ff ff       	call   c0001dd7 <ld_word>
c00031a8:	66 89 43 06          	mov    WORD PTR [ebx+0x6],ax
c00031ac:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00031af:	83 c0 18             	add    eax,0x18
c00031b2:	e8 20 ec ff ff       	call   c0001dd7 <ld_word>
c00031b7:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c00031bb:	83 c4 1c             	add    esp,0x1c
c00031be:	5b                   	pop    ebx
c00031bf:	5e                   	pop    esi
c00031c0:	5f                   	pop    edi
c00031c1:	5d                   	pop    ebp
c00031c2:	c3                   	ret    

c00031c3 <ld_clust.isra.0>:
c00031c3:	56                   	push   esi
c00031c4:	89 c6                	mov    esi,eax
c00031c6:	53                   	push   ebx
c00031c7:	8d 42 1a             	lea    eax,[edx+0x1a]
c00031ca:	89 d3                	mov    ebx,edx
c00031cc:	e8 06 ec ff ff       	call   c0001dd7 <ld_word>
c00031d1:	0f b7 c8             	movzx  ecx,ax
c00031d4:	89 f0                	mov    eax,esi
c00031d6:	3c 03                	cmp    al,0x3
c00031d8:	75 0d                	jne    c00031e7 <ld_clust.isra.0+0x24>
c00031da:	8d 43 14             	lea    eax,[ebx+0x14]
c00031dd:	e8 f5 eb ff ff       	call   c0001dd7 <ld_word>
c00031e2:	c1 e0 10             	shl    eax,0x10
c00031e5:	09 c1                	or     ecx,eax
c00031e7:	89 c8                	mov    eax,ecx
c00031e9:	5b                   	pop    ebx
c00031ea:	5e                   	pop    esi
c00031eb:	c3                   	ret    

c00031ec <st_clust.isra.1>:
c00031ec:	56                   	push   esi
c00031ed:	89 c6                	mov    esi,eax
c00031ef:	53                   	push   ebx
c00031f0:	89 d3                	mov    ebx,edx
c00031f2:	0f b7 d1             	movzx  edx,cx
c00031f5:	8d 43 1a             	lea    eax,[ebx+0x1a]
c00031f8:	e8 ff eb ff ff       	call   c0001dfc <st_word>
c00031fd:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c0003200:	75 0f                	jne    c0003211 <st_clust.isra.1+0x25>
c0003202:	c1 e9 10             	shr    ecx,0x10
c0003205:	8d 43 14             	lea    eax,[ebx+0x14]
c0003208:	89 ca                	mov    edx,ecx
c000320a:	5b                   	pop    ebx
c000320b:	5e                   	pop    esi
c000320c:	e9 eb eb ff ff       	jmp    c0001dfc <st_word>
c0003211:	5b                   	pop    ebx
c0003212:	5e                   	pop    esi
c0003213:	c3                   	ret    

c0003214 <get_fat.isra.2>:
c0003214:	b9 01 00 00 00       	mov    ecx,0x1
c0003219:	83 fa 01             	cmp    edx,0x1
c000321c:	0f 86 f3 00 00 00    	jbe    c0003315 <get_fat.isra.2+0x101>
c0003222:	3b 50 18             	cmp    edx,DWORD PTR [eax+0x18]
c0003225:	0f 83 ea 00 00 00    	jae    c0003315 <get_fat.isra.2+0x101>
c000322b:	55                   	push   ebp
c000322c:	57                   	push   edi
c000322d:	89 c7                	mov    edi,eax
c000322f:	56                   	push   esi
c0003230:	89 d6                	mov    esi,edx
c0003232:	53                   	push   ebx
c0003233:	83 ec 0c             	sub    esp,0xc
c0003236:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0003239:	83 f8 02             	cmp    eax,0x2
c000323c:	74 78                	je     c00032b6 <get_fat.isra.2+0xa2>
c000323e:	83 f8 03             	cmp    eax,0x3
c0003241:	0f 84 96 00 00 00    	je     c00032dd <get_fat.isra.2+0xc9>
c0003247:	48                   	dec    eax
c0003248:	0f 85 bd 00 00 00    	jne    c000330b <get_fat.isra.2+0xf7>
c000324e:	89 d3                	mov    ebx,edx
c0003250:	89 f8                	mov    eax,edi
c0003252:	d1 eb                	shr    ebx,1
c0003254:	01 d3                	add    ebx,edx
c0003256:	89 da                	mov    edx,ebx
c0003258:	c1 ea 09             	shr    edx,0x9
c000325b:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c000325e:	e8 db f0 ff ff       	call   c000233e <move_window>
c0003263:	85 c0                	test   eax,eax
c0003265:	74 08                	je     c000326f <get_fat.isra.2+0x5b>
c0003267:	83 c9 ff             	or     ecx,0xffffffff
c000326a:	e9 9c 00 00 00       	jmp    c000330b <get_fat.isra.2+0xf7>
c000326f:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0003272:	89 f8                	mov    eax,edi
c0003274:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c000327a:	89 ea                	mov    edx,ebp
c000327c:	8a 5c 1f 34          	mov    bl,BYTE PTR [edi+ebx*1+0x34]
c0003280:	c1 ea 09             	shr    edx,0x9
c0003283:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c0003286:	e8 b3 f0 ff ff       	call   c000233e <move_window>
c000328b:	85 c0                	test   eax,eax
c000328d:	75 d8                	jne    c0003267 <get_fat.isra.2+0x53>
c000328f:	0f b6 c3             	movzx  eax,bl
c0003292:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0003298:	0f b6 5c 2f 34       	movzx  ebx,BYTE PTR [edi+ebp*1+0x34]
c000329d:	c1 e3 08             	shl    ebx,0x8
c00032a0:	09 c3                	or     ebx,eax
c00032a2:	89 d9                	mov    ecx,ebx
c00032a4:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c00032aa:	83 e6 01             	and    esi,0x1
c00032ad:	74 5c                	je     c000330b <get_fat.isra.2+0xf7>
c00032af:	89 d9                	mov    ecx,ebx
c00032b1:	c1 e9 04             	shr    ecx,0x4
c00032b4:	eb 55                	jmp    c000330b <get_fat.isra.2+0xf7>
c00032b6:	c1 ea 08             	shr    edx,0x8
c00032b9:	89 f8                	mov    eax,edi
c00032bb:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c00032be:	e8 7b f0 ff ff       	call   c000233e <move_window>
c00032c3:	85 c0                	test   eax,eax
c00032c5:	75 a0                	jne    c0003267 <get_fat.isra.2+0x53>
c00032c7:	01 f6                	add    esi,esi
c00032c9:	81 e6 fe 01 00 00    	and    esi,0x1fe
c00032cf:	8d 44 37 34          	lea    eax,[edi+esi*1+0x34]
c00032d3:	e8 ff ea ff ff       	call   c0001dd7 <ld_word>
c00032d8:	0f b7 c8             	movzx  ecx,ax
c00032db:	eb 2e                	jmp    c000330b <get_fat.isra.2+0xf7>
c00032dd:	c1 ea 07             	shr    edx,0x7
c00032e0:	89 f8                	mov    eax,edi
c00032e2:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c00032e5:	e8 54 f0 ff ff       	call   c000233e <move_window>
c00032ea:	85 c0                	test   eax,eax
c00032ec:	0f 85 75 ff ff ff    	jne    c0003267 <get_fat.isra.2+0x53>
c00032f2:	c1 e6 02             	shl    esi,0x2
c00032f5:	81 e6 fc 01 00 00    	and    esi,0x1fc
c00032fb:	8d 44 37 34          	lea    eax,[edi+esi*1+0x34]
c00032ff:	e8 e0 ea ff ff       	call   c0001de4 <ld_dword>
c0003304:	25 ff ff ff 0f       	and    eax,0xfffffff
c0003309:	89 c1                	mov    ecx,eax
c000330b:	83 c4 0c             	add    esp,0xc
c000330e:	89 c8                	mov    eax,ecx
c0003310:	5b                   	pop    ebx
c0003311:	5e                   	pop    esi
c0003312:	5f                   	pop    edi
c0003313:	5d                   	pop    ebp
c0003314:	c3                   	ret    
c0003315:	89 c8                	mov    eax,ecx
c0003317:	c3                   	ret    

c0003318 <dir_sdi>:
c0003318:	81 fa ff ff 1f 00    	cmp    edx,0x1fffff
c000331e:	0f 87 b6 00 00 00    	ja     c00033da <dir_sdi+0xc2>
c0003324:	55                   	push   ebp
c0003325:	57                   	push   edi
c0003326:	56                   	push   esi
c0003327:	53                   	push   ebx
c0003328:	89 d3                	mov    ebx,edx
c000332a:	83 ec 1c             	sub    esp,0x1c
c000332d:	f6 c2 1f             	test   dl,0x1f
c0003330:	74 0a                	je     c000333c <dir_sdi+0x24>
c0003332:	b8 02 00 00 00       	mov    eax,0x2
c0003337:	e9 96 00 00 00       	jmp    c00033d2 <dir_sdi+0xba>
c000333c:	89 c6                	mov    esi,eax
c000333e:	8b 38                	mov    edi,DWORD PTR [eax]
c0003340:	89 56 10             	mov    DWORD PTR [esi+0x10],edx
c0003343:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0003346:	85 c9                	test   ecx,ecx
c0003348:	75 23                	jne    c000336d <dir_sdi+0x55>
c000334a:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c000334d:	76 07                	jbe    c0003356 <dir_sdi+0x3e>
c000334f:	8b 47 28             	mov    eax,DWORD PTR [edi+0x28]
c0003352:	85 c0                	test   eax,eax
c0003354:	75 15                	jne    c000336b <dir_sdi+0x53>
c0003356:	89 da                	mov    edx,ebx
c0003358:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c000335c:	c1 ea 05             	shr    edx,0x5
c000335f:	39 c2                	cmp    edx,eax
c0003361:	73 cf                	jae    c0003332 <dir_sdi+0x1a>
c0003363:	8b 47 28             	mov    eax,DWORD PTR [edi+0x28]
c0003366:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c0003369:	eb 3d                	jmp    c00033a8 <dir_sdi+0x90>
c000336b:	89 c1                	mov    ecx,eax
c000336d:	0f b7 6f 0a          	movzx  ebp,WORD PTR [edi+0xa]
c0003371:	c1 e5 09             	shl    ebp,0x9
c0003374:	89 ca                	mov    edx,ecx
c0003376:	39 eb                	cmp    ebx,ebp
c0003378:	72 1c                	jb     c0003396 <dir_sdi+0x7e>
c000337a:	8b 06                	mov    eax,DWORD PTR [esi]
c000337c:	e8 93 fe ff ff       	call   c0003214 <get_fat.isra.2>
c0003381:	89 c1                	mov    ecx,eax
c0003383:	83 f8 ff             	cmp    eax,0xffffffff
c0003386:	74 45                	je     c00033cd <dir_sdi+0xb5>
c0003388:	83 f8 01             	cmp    eax,0x1
c000338b:	76 a5                	jbe    c0003332 <dir_sdi+0x1a>
c000338d:	39 47 18             	cmp    DWORD PTR [edi+0x18],eax
c0003390:	76 a0                	jbe    c0003332 <dir_sdi+0x1a>
c0003392:	29 eb                	sub    ebx,ebp
c0003394:	eb de                	jmp    c0003374 <dir_sdi+0x5c>
c0003396:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000339a:	89 f8                	mov    eax,edi
c000339c:	e8 8d ec ff ff       	call   c000202e <clst2sect>
c00033a1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00033a5:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c00033a8:	8b 56 18             	mov    edx,DWORD PTR [esi+0x18]
c00033ab:	89 4e 14             	mov    DWORD PTR [esi+0x14],ecx
c00033ae:	85 d2                	test   edx,edx
c00033b0:	74 80                	je     c0003332 <dir_sdi+0x1a>
c00033b2:	89 d8                	mov    eax,ebx
c00033b4:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c00033ba:	c1 e8 09             	shr    eax,0x9
c00033bd:	01 d0                	add    eax,edx
c00033bf:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c00033c2:	8d 44 1f 34          	lea    eax,[edi+ebx*1+0x34]
c00033c6:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c00033c9:	31 c0                	xor    eax,eax
c00033cb:	eb 05                	jmp    c00033d2 <dir_sdi+0xba>
c00033cd:	b8 01 00 00 00       	mov    eax,0x1
c00033d2:	83 c4 1c             	add    esp,0x1c
c00033d5:	5b                   	pop    ebx
c00033d6:	5e                   	pop    esi
c00033d7:	5f                   	pop    edi
c00033d8:	5d                   	pop    ebp
c00033d9:	c3                   	ret    
c00033da:	b8 02 00 00 00       	mov    eax,0x2
c00033df:	c3                   	ret    

c00033e0 <create_chain>:
c00033e0:	55                   	push   ebp
c00033e1:	89 c5                	mov    ebp,eax
c00033e3:	57                   	push   edi
c00033e4:	89 d7                	mov    edi,edx
c00033e6:	56                   	push   esi
c00033e7:	53                   	push   ebx
c00033e8:	83 ec 1c             	sub    esp,0x1c
c00033eb:	85 d2                	test   edx,edx
c00033ed:	8b 30                	mov    esi,DWORD PTR [eax]
c00033ef:	75 0e                	jne    c00033ff <create_chain+0x1f>
c00033f1:	8b 4e 10             	mov    ecx,DWORD PTR [esi+0x10]
c00033f4:	85 c9                	test   ecx,ecx
c00033f6:	74 34                	je     c000342c <create_chain+0x4c>
c00033f8:	39 4e 18             	cmp    DWORD PTR [esi+0x18],ecx
c00033fb:	77 34                	ja     c0003431 <create_chain+0x51>
c00033fd:	eb 2d                	jmp    c000342c <create_chain+0x4c>
c00033ff:	89 f0                	mov    eax,esi
c0003401:	e8 0e fe ff ff       	call   c0003214 <get_fat.isra.2>
c0003406:	89 c3                	mov    ebx,eax
c0003408:	83 f8 01             	cmp    eax,0x1
c000340b:	77 0a                	ja     c0003417 <create_chain+0x37>
c000340d:	bb 01 00 00 00       	mov    ebx,0x1
c0003412:	e9 fe 00 00 00       	jmp    c0003515 <create_chain+0x135>
c0003417:	83 f8 ff             	cmp    eax,0xffffffff
c000341a:	0f 84 f2 00 00 00    	je     c0003512 <create_chain+0x132>
c0003420:	89 f9                	mov    ecx,edi
c0003422:	39 46 18             	cmp    DWORD PTR [esi+0x18],eax
c0003425:	76 0a                	jbe    c0003431 <create_chain+0x51>
c0003427:	e9 e9 00 00 00       	jmp    c0003515 <create_chain+0x135>
c000342c:	b9 01 00 00 00       	mov    ecx,0x1
c0003431:	83 7e 14 00          	cmp    DWORD PTR [esi+0x14],0x0
c0003435:	75 07                	jne    c000343e <create_chain+0x5e>
c0003437:	31 db                	xor    ebx,ebx
c0003439:	e9 d7 00 00 00       	jmp    c0003515 <create_chain+0x135>
c000343e:	39 f9                	cmp    ecx,edi
c0003440:	75 46                	jne    c0003488 <create_chain+0xa8>
c0003442:	8d 59 01             	lea    ebx,[ecx+0x1]
c0003445:	39 5e 18             	cmp    DWORD PTR [esi+0x18],ebx
c0003448:	77 05                	ja     c000344f <create_chain+0x6f>
c000344a:	bb 02 00 00 00       	mov    ebx,0x2
c000344f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003453:	89 da                	mov    edx,ebx
c0003455:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0003458:	e8 b7 fd ff ff       	call   c0003214 <get_fat.isra.2>
c000345d:	83 f8 01             	cmp    eax,0x1
c0003460:	74 ab                	je     c000340d <create_chain+0x2d>
c0003462:	83 f8 ff             	cmp    eax,0xffffffff
c0003465:	0f 84 a7 00 00 00    	je     c0003512 <create_chain+0x132>
c000346b:	85 c0                	test   eax,eax
c000346d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003471:	74 11                	je     c0003484 <create_chain+0xa4>
c0003473:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0003476:	83 f8 01             	cmp    eax,0x1
c0003479:	76 0d                	jbe    c0003488 <create_chain+0xa8>
c000347b:	3b 46 18             	cmp    eax,DWORD PTR [esi+0x18]
c000347e:	73 08                	jae    c0003488 <create_chain+0xa8>
c0003480:	89 c1                	mov    ecx,eax
c0003482:	eb 04                	jmp    c0003488 <create_chain+0xa8>
c0003484:	85 db                	test   ebx,ebx
c0003486:	75 3d                	jne    c00034c5 <create_chain+0xe5>
c0003488:	89 cb                	mov    ebx,ecx
c000348a:	43                   	inc    ebx
c000348b:	39 5e 18             	cmp    DWORD PTR [esi+0x18],ebx
c000348e:	77 0a                	ja     c000349a <create_chain+0xba>
c0003490:	83 f9 01             	cmp    ecx,0x1
c0003493:	76 a2                	jbe    c0003437 <create_chain+0x57>
c0003495:	bb 02 00 00 00       	mov    ebx,0x2
c000349a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000349e:	89 da                	mov    edx,ebx
c00034a0:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00034a3:	e8 6c fd ff ff       	call   c0003214 <get_fat.isra.2>
c00034a8:	85 c0                	test   eax,eax
c00034aa:	74 19                	je     c00034c5 <create_chain+0xe5>
c00034ac:	83 f8 01             	cmp    eax,0x1
c00034af:	0f 84 58 ff ff ff    	je     c000340d <create_chain+0x2d>
c00034b5:	40                   	inc    eax
c00034b6:	74 5a                	je     c0003512 <create_chain+0x132>
c00034b8:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00034bc:	39 cb                	cmp    ebx,ecx
c00034be:	75 ca                	jne    c000348a <create_chain+0xaa>
c00034c0:	e9 72 ff ff ff       	jmp    c0003437 <create_chain+0x57>
c00034c5:	83 c9 ff             	or     ecx,0xffffffff
c00034c8:	89 da                	mov    edx,ebx
c00034ca:	89 f0                	mov    eax,esi
c00034cc:	e8 b1 f2 ff ff       	call   c0002782 <put_fat>
c00034d1:	85 c0                	test   eax,eax
c00034d3:	75 36                	jne    c000350b <create_chain+0x12b>
c00034d5:	85 ff                	test   edi,edi
c00034d7:	75 16                	jne    c00034ef <create_chain+0x10f>
c00034d9:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00034dc:	8b 7e 18             	mov    edi,DWORD PTR [esi+0x18]
c00034df:	89 5e 10             	mov    DWORD PTR [esi+0x10],ebx
c00034e2:	8d 57 fe             	lea    edx,[edi-0x2]
c00034e5:	39 d0                	cmp    eax,edx
c00034e7:	77 17                	ja     c0003500 <create_chain+0x120>
c00034e9:	48                   	dec    eax
c00034ea:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c00034ed:	eb 11                	jmp    c0003500 <create_chain+0x120>
c00034ef:	89 d9                	mov    ecx,ebx
c00034f1:	89 fa                	mov    edx,edi
c00034f3:	89 f0                	mov    eax,esi
c00034f5:	e8 88 f2 ff ff       	call   c0002782 <put_fat>
c00034fa:	85 c0                	test   eax,eax
c00034fc:	74 db                	je     c00034d9 <create_chain+0xf9>
c00034fe:	eb 0b                	jmp    c000350b <create_chain+0x12b>
c0003500:	8a 46 04             	mov    al,BYTE PTR [esi+0x4]
c0003503:	83 c8 01             	or     eax,0x1
c0003506:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c0003509:	eb 0a                	jmp    c0003515 <create_chain+0x135>
c000350b:	48                   	dec    eax
c000350c:	0f 85 fb fe ff ff    	jne    c000340d <create_chain+0x2d>
c0003512:	83 cb ff             	or     ebx,0xffffffff
c0003515:	83 c4 1c             	add    esp,0x1c
c0003518:	89 d8                	mov    eax,ebx
c000351a:	5b                   	pop    ebx
c000351b:	5e                   	pop    esi
c000351c:	5f                   	pop    edi
c000351d:	5d                   	pop    ebp
c000351e:	c3                   	ret    

c000351f <remove_chain>:
c000351f:	55                   	push   ebp
c0003520:	57                   	push   edi
c0003521:	56                   	push   esi
c0003522:	89 d6                	mov    esi,edx
c0003524:	53                   	push   ebx
c0003525:	83 ec 0c             	sub    esp,0xc
c0003528:	83 fa 01             	cmp    edx,0x1
c000352b:	8b 18                	mov    ebx,DWORD PTR [eax]
c000352d:	76 6a                	jbe    c0003599 <remove_chain+0x7a>
c000352f:	39 53 18             	cmp    DWORD PTR [ebx+0x18],edx
c0003532:	76 65                	jbe    c0003599 <remove_chain+0x7a>
c0003534:	89 c5                	mov    ebp,eax
c0003536:	89 ca                	mov    edx,ecx
c0003538:	85 c9                	test   ecx,ecx
c000353a:	74 0e                	je     c000354a <remove_chain+0x2b>
c000353c:	83 c9 ff             	or     ecx,0xffffffff
c000353f:	89 d8                	mov    eax,ebx
c0003541:	e8 3c f2 ff ff       	call   c0002782 <put_fat>
c0003546:	85 c0                	test   eax,eax
c0003548:	75 5b                	jne    c00035a5 <remove_chain+0x86>
c000354a:	89 f2                	mov    edx,esi
c000354c:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000354f:	e8 c0 fc ff ff       	call   c0003214 <get_fat.isra.2>
c0003554:	89 c7                	mov    edi,eax
c0003556:	85 c0                	test   eax,eax
c0003558:	75 04                	jne    c000355e <remove_chain+0x3f>
c000355a:	31 c0                	xor    eax,eax
c000355c:	eb 47                	jmp    c00035a5 <remove_chain+0x86>
c000355e:	83 f8 01             	cmp    eax,0x1
c0003561:	74 36                	je     c0003599 <remove_chain+0x7a>
c0003563:	83 f8 ff             	cmp    eax,0xffffffff
c0003566:	74 38                	je     c00035a0 <remove_chain+0x81>
c0003568:	31 c9                	xor    ecx,ecx
c000356a:	89 f2                	mov    edx,esi
c000356c:	89 d8                	mov    eax,ebx
c000356e:	e8 0f f2 ff ff       	call   c0002782 <put_fat>
c0003573:	85 c0                	test   eax,eax
c0003575:	75 2e                	jne    c00035a5 <remove_chain+0x86>
c0003577:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000357a:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000357d:	8d 4a fe             	lea    ecx,[edx-0x2]
c0003580:	39 c8                	cmp    eax,ecx
c0003582:	73 0d                	jae    c0003591 <remove_chain+0x72>
c0003584:	40                   	inc    eax
c0003585:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0003588:	8a 43 04             	mov    al,BYTE PTR [ebx+0x4]
c000358b:	83 c8 01             	or     eax,0x1
c000358e:	88 43 04             	mov    BYTE PTR [ebx+0x4],al
c0003591:	89 fe                	mov    esi,edi
c0003593:	39 fa                	cmp    edx,edi
c0003595:	77 b3                	ja     c000354a <remove_chain+0x2b>
c0003597:	eb c1                	jmp    c000355a <remove_chain+0x3b>
c0003599:	b8 02 00 00 00       	mov    eax,0x2
c000359e:	eb 05                	jmp    c00035a5 <remove_chain+0x86>
c00035a0:	b8 01 00 00 00       	mov    eax,0x1
c00035a5:	83 c4 0c             	add    esp,0xc
c00035a8:	5b                   	pop    ebx
c00035a9:	5e                   	pop    esi
c00035aa:	5f                   	pop    edi
c00035ab:	5d                   	pop    ebp
c00035ac:	c3                   	ret    

c00035ad <dir_next>:
c00035ad:	55                   	push   ebp
c00035ae:	57                   	push   edi
c00035af:	56                   	push   esi
c00035b0:	53                   	push   ebx
c00035b1:	83 ec 1c             	sub    esp,0x1c
c00035b4:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c00035b7:	8b 28                	mov    ebp,DWORD PTR [eax]
c00035b9:	83 c7 20             	add    edi,0x20
c00035bc:	81 ff ff ff 1f 00    	cmp    edi,0x1fffff
c00035c2:	76 07                	jbe    c00035cb <dir_next+0x1e>
c00035c4:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c00035cb:	8b 70 18             	mov    esi,DWORD PTR [eax+0x18]
c00035ce:	b9 04 00 00 00       	mov    ecx,0x4
c00035d3:	85 f6                	test   esi,esi
c00035d5:	0f 84 cd 00 00 00    	je     c00036a8 <dir_next+0xfb>
c00035db:	89 c3                	mov    ebx,eax
c00035dd:	89 d1                	mov    ecx,edx
c00035df:	89 f8                	mov    eax,edi
c00035e1:	25 ff 01 00 00       	and    eax,0x1ff
c00035e6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00035ea:	0f 85 a8 00 00 00    	jne    c0003698 <dir_next+0xeb>
c00035f0:	46                   	inc    esi
c00035f1:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00035f4:	89 73 18             	mov    DWORD PTR [ebx+0x18],esi
c00035f7:	85 d2                	test   edx,edx
c00035f9:	75 22                	jne    c000361d <dir_next+0x70>
c00035fb:	89 fa                	mov    edx,edi
c00035fd:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c0003601:	c1 ea 05             	shr    edx,0x5
c0003604:	39 c2                	cmp    edx,eax
c0003606:	0f 82 8c 00 00 00    	jb     c0003698 <dir_next+0xeb>
c000360c:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0003613:	b9 04 00 00 00       	mov    ecx,0x4
c0003618:	e9 8b 00 00 00       	jmp    c00036a8 <dir_next+0xfb>
c000361d:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0003621:	89 fe                	mov    esi,edi
c0003623:	48                   	dec    eax
c0003624:	c1 ee 09             	shr    esi,0x9
c0003627:	85 f0                	test   eax,esi
c0003629:	75 6d                	jne    c0003698 <dir_next+0xeb>
c000362b:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000362f:	89 e8                	mov    eax,ebp
c0003631:	e8 de fb ff ff       	call   c0003214 <get_fat.isra.2>
c0003636:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000363a:	89 c6                	mov    esi,eax
c000363c:	83 f8 01             	cmp    eax,0x1
c000363f:	77 07                	ja     c0003648 <dir_next+0x9b>
c0003641:	b9 02 00 00 00       	mov    ecx,0x2
c0003646:	eb 60                	jmp    c00036a8 <dir_next+0xfb>
c0003648:	83 f8 ff             	cmp    eax,0xffffffff
c000364b:	75 07                	jne    c0003654 <dir_next+0xa7>
c000364d:	b9 01 00 00 00       	mov    ecx,0x1
c0003652:	eb 54                	jmp    c00036a8 <dir_next+0xfb>
c0003654:	39 45 18             	cmp    DWORD PTR [ebp+0x18],eax
c0003657:	77 30                	ja     c0003689 <dir_next+0xdc>
c0003659:	85 c9                	test   ecx,ecx
c000365b:	74 af                	je     c000360c <dir_next+0x5f>
c000365d:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0003660:	89 d8                	mov    eax,ebx
c0003662:	e8 79 fd ff ff       	call   c00033e0 <create_chain>
c0003667:	b9 07 00 00 00       	mov    ecx,0x7
c000366c:	89 c6                	mov    esi,eax
c000366e:	85 c0                	test   eax,eax
c0003670:	74 36                	je     c00036a8 <dir_next+0xfb>
c0003672:	83 f8 01             	cmp    eax,0x1
c0003675:	74 ca                	je     c0003641 <dir_next+0x94>
c0003677:	83 f8 ff             	cmp    eax,0xffffffff
c000367a:	74 d1                	je     c000364d <dir_next+0xa0>
c000367c:	89 c2                	mov    edx,eax
c000367e:	89 e8                	mov    eax,ebp
c0003680:	e8 54 f2 ff ff       	call   c00028d9 <dir_clear>
c0003685:	85 c0                	test   eax,eax
c0003687:	75 c4                	jne    c000364d <dir_next+0xa0>
c0003689:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c000368c:	89 f2                	mov    edx,esi
c000368e:	89 e8                	mov    eax,ebp
c0003690:	e8 99 e9 ff ff       	call   c000202e <clst2sect>
c0003695:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0003698:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000369c:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c000369f:	8d 44 05 34          	lea    eax,[ebp+eax*1+0x34]
c00036a3:	31 c9                	xor    ecx,ecx
c00036a5:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c00036a8:	83 c4 1c             	add    esp,0x1c
c00036ab:	89 c8                	mov    eax,ecx
c00036ad:	5b                   	pop    ebx
c00036ae:	5e                   	pop    esi
c00036af:	5f                   	pop    edi
c00036b0:	5d                   	pop    ebp
c00036b1:	c3                   	ret    

c00036b2 <dir_alloc>:
c00036b2:	55                   	push   ebp
c00036b3:	89 c5                	mov    ebp,eax
c00036b5:	57                   	push   edi
c00036b6:	89 d7                	mov    edi,edx
c00036b8:	56                   	push   esi
c00036b9:	31 d2                	xor    edx,edx
c00036bb:	53                   	push   ebx
c00036bc:	83 ec 0c             	sub    esp,0xc
c00036bf:	8b 30                	mov    esi,DWORD PTR [eax]
c00036c1:	e8 52 fc ff ff       	call   c0003318 <dir_sdi>
c00036c6:	85 c0                	test   eax,eax
c00036c8:	75 3b                	jne    c0003705 <dir_alloc+0x53>
c00036ca:	31 db                	xor    ebx,ebx
c00036cc:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c00036cf:	89 f0                	mov    eax,esi
c00036d1:	e8 68 ec ff ff       	call   c000233e <move_window>
c00036d6:	85 c0                	test   eax,eax
c00036d8:	75 2b                	jne    c0003705 <dir_alloc+0x53>
c00036da:	8b 55 1c             	mov    edx,DWORD PTR [ebp+0x1c]
c00036dd:	0f b6 12             	movzx  edx,BYTE PTR [edx]
c00036e0:	85 d2                	test   edx,edx
c00036e2:	74 08                	je     c00036ec <dir_alloc+0x3a>
c00036e4:	81 fa e5 00 00 00    	cmp    edx,0xe5
c00036ea:	75 07                	jne    c00036f3 <dir_alloc+0x41>
c00036ec:	43                   	inc    ebx
c00036ed:	39 fb                	cmp    ebx,edi
c00036ef:	75 04                	jne    c00036f5 <dir_alloc+0x43>
c00036f1:	eb 1c                	jmp    c000370f <dir_alloc+0x5d>
c00036f3:	31 db                	xor    ebx,ebx
c00036f5:	ba 01 00 00 00       	mov    edx,0x1
c00036fa:	89 e8                	mov    eax,ebp
c00036fc:	e8 ac fe ff ff       	call   c00035ad <dir_next>
c0003701:	85 c0                	test   eax,eax
c0003703:	74 c7                	je     c00036cc <dir_alloc+0x1a>
c0003705:	83 f8 04             	cmp    eax,0x4
c0003708:	75 05                	jne    c000370f <dir_alloc+0x5d>
c000370a:	b8 07 00 00 00       	mov    eax,0x7
c000370f:	83 c4 0c             	add    esp,0xc
c0003712:	5b                   	pop    ebx
c0003713:	5e                   	pop    esi
c0003714:	5f                   	pop    edi
c0003715:	5d                   	pop    ebp
c0003716:	c3                   	ret    

c0003717 <dir_read>:
c0003717:	55                   	push   ebp
c0003718:	57                   	push   edi
c0003719:	bf ff ff ff ff       	mov    edi,0xffffffff
c000371e:	56                   	push   esi
c000371f:	be 04 00 00 00       	mov    esi,0x4
c0003724:	53                   	push   ebx
c0003725:	89 c3                	mov    ebx,eax
c0003727:	83 ec 1c             	sub    esp,0x1c
c000372a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000372e:	8b 28                	mov    ebp,DWORD PTR [eax]
c0003730:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c0003735:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003738:	85 d2                	test   edx,edx
c000373a:	0f 84 e3 00 00 00    	je     c0003823 <dir_read+0x10c>
c0003740:	89 e8                	mov    eax,ebp
c0003742:	e8 f7 eb ff ff       	call   c000233e <move_window>
c0003747:	89 c6                	mov    esi,eax
c0003749:	85 c0                	test   eax,eax
c000374b:	0f 85 dd 00 00 00    	jne    c000382e <dir_read+0x117>
c0003751:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003754:	0f b6 02             	movzx  eax,BYTE PTR [edx]
c0003757:	88 04 24             	mov    BYTE PTR [esp],al
c000375a:	85 c0                	test   eax,eax
c000375c:	0f 84 c7 00 00 00    	je     c0003829 <dir_read+0x112>
c0003762:	8a 4a 0b             	mov    cl,BYTE PTR [edx+0xb]
c0003765:	83 e1 3f             	and    ecx,0x3f
c0003768:	83 f8 2e             	cmp    eax,0x2e
c000376b:	88 4b 06             	mov    BYTE PTR [ebx+0x6],cl
c000376e:	0f 84 95 00 00 00    	je     c0003809 <dir_read+0xf2>
c0003774:	3d e5 00 00 00       	cmp    eax,0xe5
c0003779:	0f 84 8a 00 00 00    	je     c0003809 <dir_read+0xf2>
c000377f:	0f b6 c9             	movzx  ecx,cl
c0003782:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0003786:	83 e1 df             	and    ecx,0xffffffdf
c0003789:	83 f9 08             	cmp    ecx,0x8
c000378c:	0f 94 c1             	sete   cl
c000378f:	0f b6 c9             	movzx  ecx,cl
c0003792:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c0003796:	75 71                	jne    c0003809 <dir_read+0xf2>
c0003798:	83 7c 24 08 0f       	cmp    DWORD PTR [esp+0x8],0xf
c000379d:	75 4a                	jne    c00037e9 <dir_read+0xd2>
c000379f:	f6 04 24 40          	test   BYTE PTR [esp],0x40
c00037a3:	74 16                	je     c00037bb <dir_read+0xa4>
c00037a5:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c00037a8:	81 24 24 bf 00 00 00 	and    DWORD PTR [esp],0xbf
c00037af:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c00037b3:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00037b6:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00037b9:	eb 0e                	jmp    c00037c9 <dir_read+0xb2>
c00037bb:	89 f9                	mov    ecx,edi
c00037bd:	bf ff ff ff ff       	mov    edi,0xffffffff
c00037c2:	0f b6 c9             	movzx  ecx,cl
c00037c5:	39 c1                	cmp    ecx,eax
c00037c7:	75 45                	jne    c000380e <dir_read+0xf7>
c00037c9:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c00037cd:	bf ff ff ff ff       	mov    edi,0xffffffff
c00037d2:	3a 42 0d             	cmp    al,BYTE PTR [edx+0xd]
c00037d5:	75 37                	jne    c000380e <dir_read+0xf7>
c00037d7:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00037da:	e8 6c e8 ff ff       	call   c000204b <pick_lfn>
c00037df:	85 c0                	test   eax,eax
c00037e1:	74 2b                	je     c000380e <dir_read+0xf7>
c00037e3:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00037e6:	4f                   	dec    edi
c00037e7:	eb 25                	jmp    c000380e <dir_read+0xf7>
c00037e9:	89 f8                	mov    eax,edi
c00037eb:	84 c0                	test   al,al
c00037ed:	75 11                	jne    c0003800 <dir_read+0xe9>
c00037ef:	89 d0                	mov    eax,edx
c00037f1:	e8 32 ea ff ff       	call   c0002228 <sum_sfn>
c00037f6:	38 44 24 07          	cmp    BYTE PTR [esp+0x7],al
c00037fa:	75 04                	jne    c0003800 <dir_read+0xe9>
c00037fc:	31 f6                	xor    esi,esi
c00037fe:	eb 35                	jmp    c0003835 <dir_read+0x11e>
c0003800:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c0003807:	eb 2c                	jmp    c0003835 <dir_read+0x11e>
c0003809:	bf ff ff ff ff       	mov    edi,0xffffffff
c000380e:	31 d2                	xor    edx,edx
c0003810:	89 d8                	mov    eax,ebx
c0003812:	e8 96 fd ff ff       	call   c00035ad <dir_next>
c0003817:	89 c6                	mov    esi,eax
c0003819:	85 c0                	test   eax,eax
c000381b:	0f 84 14 ff ff ff    	je     c0003735 <dir_read+0x1e>
c0003821:	eb 0b                	jmp    c000382e <dir_read+0x117>
c0003823:	85 f6                	test   esi,esi
c0003825:	74 d5                	je     c00037fc <dir_read+0xe5>
c0003827:	eb 05                	jmp    c000382e <dir_read+0x117>
c0003829:	be 04 00 00 00       	mov    esi,0x4
c000382e:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0003835:	83 c4 1c             	add    esp,0x1c
c0003838:	89 f0                	mov    eax,esi
c000383a:	5b                   	pop    ebx
c000383b:	5e                   	pop    esi
c000383c:	5f                   	pop    edi
c000383d:	5d                   	pop    ebp
c000383e:	c3                   	ret    

c000383f <dir_remove>:
c000383f:	57                   	push   edi
c0003840:	56                   	push   esi
c0003841:	53                   	push   ebx
c0003842:	89 c3                	mov    ebx,eax
c0003844:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0003847:	8b 30                	mov    esi,DWORD PTR [eax]
c0003849:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c000384c:	83 fa ff             	cmp    edx,0xffffffff
c000384f:	74 09                	je     c000385a <dir_remove+0x1b>
c0003851:	e8 c2 fa ff ff       	call   c0003318 <dir_sdi>
c0003856:	85 c0                	test   eax,eax
c0003858:	75 34                	jne    c000388e <dir_remove+0x4f>
c000385a:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000385d:	89 f0                	mov    eax,esi
c000385f:	e8 da ea ff ff       	call   c000233e <move_window>
c0003864:	85 c0                	test   eax,eax
c0003866:	75 1c                	jne    c0003884 <dir_remove+0x45>
c0003868:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000386b:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c000386e:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0003872:	39 7b 10             	cmp    DWORD PTR [ebx+0x10],edi
c0003875:	73 17                	jae    c000388e <dir_remove+0x4f>
c0003877:	31 d2                	xor    edx,edx
c0003879:	89 d8                	mov    eax,ebx
c000387b:	e8 2d fd ff ff       	call   c00035ad <dir_next>
c0003880:	85 c0                	test   eax,eax
c0003882:	74 d6                	je     c000385a <dir_remove+0x1b>
c0003884:	83 f8 04             	cmp    eax,0x4
c0003887:	75 05                	jne    c000388e <dir_remove+0x4f>
c0003889:	b8 02 00 00 00       	mov    eax,0x2
c000388e:	5b                   	pop    ebx
c000388f:	5e                   	pop    esi
c0003890:	5f                   	pop    edi
c0003891:	c3                   	ret    

c0003892 <dir_find>:
c0003892:	55                   	push   ebp
c0003893:	31 d2                	xor    edx,edx
c0003895:	57                   	push   edi
c0003896:	56                   	push   esi
c0003897:	53                   	push   ebx
c0003898:	89 c3                	mov    ebx,eax
c000389a:	83 ec 1c             	sub    esp,0x1c
c000389d:	8b 00                	mov    eax,DWORD PTR [eax]
c000389f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00038a3:	89 d8                	mov    eax,ebx
c00038a5:	e8 6e fa ff ff       	call   c0003318 <dir_sdi>
c00038aa:	89 c6                	mov    esi,eax
c00038ac:	85 c0                	test   eax,eax
c00038ae:	0f 85 1d 01 00 00    	jne    c00039d1 <dir_find+0x13f>
c00038b4:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c00038bb:	c6 44 24 0b ff       	mov    BYTE PTR [esp+0xb],0xff
c00038c0:	bf ff ff ff ff       	mov    edi,0xffffffff
c00038c5:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00038c8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00038cc:	e8 6d ea ff ff       	call   c000233e <move_window>
c00038d1:	89 c6                	mov    esi,eax
c00038d3:	85 c0                	test   eax,eax
c00038d5:	0f 85 f6 00 00 00    	jne    c00039d1 <dir_find+0x13f>
c00038db:	8b 6b 1c             	mov    ebp,DWORD PTR [ebx+0x1c]
c00038de:	0f b6 4d 00          	movzx  ecx,BYTE PTR [ebp+0x0]
c00038e2:	88 4c 24 04          	mov    BYTE PTR [esp+0x4],cl
c00038e6:	85 c9                	test   ecx,ecx
c00038e8:	0f 84 de 00 00 00    	je     c00039cc <dir_find+0x13a>
c00038ee:	8a 55 0b             	mov    dl,BYTE PTR [ebp+0xb]
c00038f1:	89 d0                	mov    eax,edx
c00038f3:	83 e0 3f             	and    eax,0x3f
c00038f6:	81 f9 e5 00 00 00    	cmp    ecx,0xe5
c00038fc:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c00038ff:	0f 84 a6 00 00 00    	je     c00039ab <dir_find+0x119>
c0003905:	80 e2 08             	and    dl,0x8
c0003908:	0f b6 c0             	movzx  eax,al
c000390b:	74 0b                	je     c0003918 <dir_find+0x86>
c000390d:	83 f8 0f             	cmp    eax,0xf
c0003910:	0f 85 95 00 00 00    	jne    c00039ab <dir_find+0x119>
c0003916:	eb 05                	jmp    c000391d <dir_find+0x8b>
c0003918:	83 f8 0f             	cmp    eax,0xf
c000391b:	75 62                	jne    c000397f <dir_find+0xed>
c000391d:	f6 43 2b 40          	test   BYTE PTR [ebx+0x2b],0x40
c0003921:	0f 85 90 00 00 00    	jne    c00039b7 <dir_find+0x125>
c0003927:	f6 44 24 04 40       	test   BYTE PTR [esp+0x4],0x40
c000392c:	74 17                	je     c0003945 <dir_find+0xb3>
c000392e:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c0003931:	81 64 24 04 bf 00 00 00 	and    DWORD PTR [esp+0x4],0xbf
c0003939:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000393d:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0003940:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0003943:	eb 13                	jmp    c0003958 <dir_find+0xc6>
c0003945:	89 f8                	mov    eax,edi
c0003947:	bf ff ff ff ff       	mov    edi,0xffffffff
c000394c:	0f b6 d0             	movzx  edx,al
c000394f:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0003954:	39 c2                	cmp    edx,eax
c0003956:	75 5f                	jne    c00039b7 <dir_find+0x125>
c0003958:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c000395c:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003961:	3a 45 0d             	cmp    al,BYTE PTR [ebp+0xd]
c0003964:	75 51                	jne    c00039b7 <dir_find+0x125>
c0003966:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000396a:	89 ea                	mov    edx,ebp
c000396c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000396f:	e8 37 f3 ff ff       	call   c0002cab <cmp_lfn>
c0003974:	85 c0                	test   eax,eax
c0003976:	74 3f                	je     c00039b7 <dir_find+0x125>
c0003978:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c000397c:	4f                   	dec    edi
c000397d:	eb 38                	jmp    c00039b7 <dir_find+0x125>
c000397f:	89 f8                	mov    eax,edi
c0003981:	84 c0                	test   al,al
c0003983:	75 0d                	jne    c0003992 <dir_find+0x100>
c0003985:	89 e8                	mov    eax,ebp
c0003987:	e8 9c e8 ff ff       	call   c0002228 <sum_sfn>
c000398c:	38 44 24 0b          	cmp    BYTE PTR [esp+0xb],al
c0003990:	74 3f                	je     c00039d1 <dir_find+0x13f>
c0003992:	f6 43 2b 01          	test   BYTE PTR [ebx+0x2b],0x1
c0003996:	75 13                	jne    c00039ab <dir_find+0x119>
c0003998:	8d 53 20             	lea    edx,[ebx+0x20]
c000399b:	b9 0b 00 00 00       	mov    ecx,0xb
c00039a0:	89 e8                	mov    eax,ebp
c00039a2:	e8 7c e4 ff ff       	call   c0001e23 <mem_cmp>
c00039a7:	85 c0                	test   eax,eax
c00039a9:	74 26                	je     c00039d1 <dir_find+0x13f>
c00039ab:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c00039b2:	bf ff ff ff ff       	mov    edi,0xffffffff
c00039b7:	31 d2                	xor    edx,edx
c00039b9:	89 d8                	mov    eax,ebx
c00039bb:	e8 ed fb ff ff       	call   c00035ad <dir_next>
c00039c0:	89 c6                	mov    esi,eax
c00039c2:	85 c0                	test   eax,eax
c00039c4:	0f 84 fb fe ff ff    	je     c00038c5 <dir_find+0x33>
c00039ca:	eb 05                	jmp    c00039d1 <dir_find+0x13f>
c00039cc:	be 04 00 00 00       	mov    esi,0x4
c00039d1:	83 c4 1c             	add    esp,0x1c
c00039d4:	89 f0                	mov    eax,esi
c00039d6:	5b                   	pop    ebx
c00039d7:	5e                   	pop    esi
c00039d8:	5f                   	pop    edi
c00039d9:	5d                   	pop    ebp
c00039da:	c3                   	ret    

c00039db <follow_path>:
c00039db:	56                   	push   esi
c00039dc:	53                   	push   ebx
c00039dd:	89 c3                	mov    ebx,eax
c00039df:	83 ec 14             	sub    esp,0x14
c00039e2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00039e6:	8b 30                	mov    esi,DWORD PTR [eax]
c00039e8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00039ec:	0f be 10             	movsx  edx,BYTE PTR [eax]
c00039ef:	83 fa 5c             	cmp    edx,0x5c
c00039f2:	75 07                	jne    c00039fb <follow_path+0x20>
c00039f4:	40                   	inc    eax
c00039f5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00039f9:	eb ed                	jmp    c00039e8 <follow_path+0xd>
c00039fb:	83 fa 2f             	cmp    edx,0x2f
c00039fe:	74 f4                	je     c00039f4 <follow_path+0x19>
c0003a00:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0003a07:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0003a0a:	77 3e                	ja     c0003a4a <follow_path+0x6f>
c0003a0c:	c6 43 2b 80          	mov    BYTE PTR [ebx+0x2b],0x80
c0003a10:	31 d2                	xor    edx,edx
c0003a12:	89 d8                	mov    eax,ebx
c0003a14:	e8 ff f8 ff ff       	call   c0003318 <dir_sdi>
c0003a19:	eb 4f                	jmp    c0003a6a <follow_path+0x8f>
c0003a1b:	89 d8                	mov    eax,ebx
c0003a1d:	e8 70 fe ff ff       	call   c0003892 <dir_find>
c0003a22:	8a 53 2b             	mov    dl,BYTE PTR [ebx+0x2b]
c0003a25:	85 c0                	test   eax,eax
c0003a27:	75 32                	jne    c0003a5b <follow_path+0x80>
c0003a29:	80 e2 04             	and    dl,0x4
c0003a2c:	75 3c                	jne    c0003a6a <follow_path+0x8f>
c0003a2e:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0003a32:	74 31                	je     c0003a65 <follow_path+0x8a>
c0003a34:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0003a37:	25 ff 01 00 00       	and    eax,0x1ff
c0003a3c:	8d 54 06 34          	lea    edx,[esi+eax*1+0x34]
c0003a40:	8a 06                	mov    al,BYTE PTR [esi]
c0003a42:	e8 7c f7 ff ff       	call   c00031c3 <ld_clust.isra.0>
c0003a47:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003a4a:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0003a4e:	89 d8                	mov    eax,ebx
c0003a50:	e8 7f ef ff ff       	call   c00029d4 <create_name>
c0003a55:	85 c0                	test   eax,eax
c0003a57:	74 c2                	je     c0003a1b <follow_path+0x40>
c0003a59:	eb 0f                	jmp    c0003a6a <follow_path+0x8f>
c0003a5b:	83 f8 04             	cmp    eax,0x4
c0003a5e:	75 0a                	jne    c0003a6a <follow_path+0x8f>
c0003a60:	80 e2 04             	and    dl,0x4
c0003a63:	75 05                	jne    c0003a6a <follow_path+0x8f>
c0003a65:	b8 05 00 00 00       	mov    eax,0x5
c0003a6a:	83 c4 14             	add    esp,0x14
c0003a6d:	5b                   	pop    ebx
c0003a6e:	5e                   	pop    esi
c0003a6f:	c3                   	ret    

c0003a70 <dir_register>:
c0003a70:	55                   	push   ebp
c0003a71:	57                   	push   edi
c0003a72:	56                   	push   esi
c0003a73:	be 06 00 00 00       	mov    esi,0x6
c0003a78:	53                   	push   ebx
c0003a79:	83 ec 2c             	sub    esp,0x2c
c0003a7c:	8a 50 2b             	mov    dl,BYTE PTR [eax+0x2b]
c0003a7f:	80 e2 a0             	and    dl,0xa0
c0003a82:	0f 85 66 01 00 00    	jne    c0003bee <dir_register+0x17e>
c0003a88:	8b 38                	mov    edi,DWORD PTR [eax]
c0003a8a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0003a92:	8b 57 0c             	mov    edx,DWORD PTR [edi+0xc]
c0003a95:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003a99:	66 83 3c 4a 00       	cmp    WORD PTR [edx+ecx*2],0x0
c0003a9e:	74 06                	je     c0003aa6 <dir_register+0x36>
c0003aa0:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0003aa4:	eb ef                	jmp    c0003a95 <dir_register+0x25>
c0003aa6:	89 c3                	mov    ebx,eax
c0003aa8:	b9 0c 00 00 00       	mov    ecx,0xc
c0003aad:	8d 40 20             	lea    eax,[eax+0x20]
c0003ab0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003ab4:	89 c2                	mov    edx,eax
c0003ab6:	8d 44 24 14          	lea    eax,[esp+0x14]
c0003aba:	e8 44 e3 ff ff       	call   c0001e03 <mem_cpy>
c0003abf:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c0003ac4:	74 48                	je     c0003b0e <dir_register+0x9e>
c0003ac6:	c6 43 2b 40          	mov    BYTE PTR [ebx+0x2b],0x40
c0003aca:	bd 01 00 00 00       	mov    ebp,0x1
c0003acf:	8b 4f 0c             	mov    ecx,DWORD PTR [edi+0xc]
c0003ad2:	55                   	push   ebp
c0003ad3:	8d 54 24 18          	lea    edx,[esp+0x18]
c0003ad7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003adb:	e8 86 e6 ff ff       	call   c0002166 <gen_numname>
c0003ae0:	58                   	pop    eax
c0003ae1:	89 d8                	mov    eax,ebx
c0003ae3:	e8 aa fd ff ff       	call   c0003892 <dir_find>
c0003ae8:	89 c6                	mov    esi,eax
c0003aea:	85 c0                	test   eax,eax
c0003aec:	75 10                	jne    c0003afe <dir_register+0x8e>
c0003aee:	45                   	inc    ebp
c0003aef:	83 fd 64             	cmp    ebp,0x64
c0003af2:	75 db                	jne    c0003acf <dir_register+0x5f>
c0003af4:	be 07 00 00 00       	mov    esi,0x7
c0003af9:	e9 f0 00 00 00       	jmp    c0003bee <dir_register+0x17e>
c0003afe:	83 f8 04             	cmp    eax,0x4
c0003b01:	0f 85 e7 00 00 00    	jne    c0003bee <dir_register+0x17e>
c0003b07:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0003b0b:	88 43 2b             	mov    BYTE PTR [ebx+0x2b],al
c0003b0e:	bd 01 00 00 00       	mov    ebp,0x1
c0003b13:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c0003b18:	74 13                	je     c0003b2d <dir_register+0xbd>
c0003b1a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003b1e:	b9 0d 00 00 00       	mov    ecx,0xd
c0003b23:	83 c0 0c             	add    eax,0xc
c0003b26:	31 d2                	xor    edx,edx
c0003b28:	f7 f1                	div    ecx
c0003b2a:	8d 68 01             	lea    ebp,[eax+0x1]
c0003b2d:	89 ea                	mov    edx,ebp
c0003b2f:	89 d8                	mov    eax,ebx
c0003b31:	e8 7c fb ff ff       	call   c00036b2 <dir_alloc>
c0003b36:	89 c6                	mov    esi,eax
c0003b38:	85 c0                	test   eax,eax
c0003b3a:	0f 85 ae 00 00 00    	jne    c0003bee <dir_register+0x17e>
c0003b40:	4d                   	dec    ebp
c0003b41:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c0003b45:	74 67                	je     c0003bae <dir_register+0x13e>
c0003b47:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0003b4a:	89 e8                	mov    eax,ebp
c0003b4c:	c1 e0 05             	shl    eax,0x5
c0003b4f:	29 c2                	sub    edx,eax
c0003b51:	89 d8                	mov    eax,ebx
c0003b53:	e8 c0 f7 ff ff       	call   c0003318 <dir_sdi>
c0003b58:	89 c6                	mov    esi,eax
c0003b5a:	85 c0                	test   eax,eax
c0003b5c:	0f 85 8c 00 00 00    	jne    c0003bee <dir_register+0x17e>
c0003b62:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003b66:	e8 bd e6 ff ff       	call   c0002228 <sum_sfn>
c0003b6b:	0f b6 e8             	movzx  ebp,al
c0003b6e:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003b71:	89 f8                	mov    eax,edi
c0003b73:	e8 c6 e7 ff ff       	call   c000233e <move_window>
c0003b78:	89 c6                	mov    esi,eax
c0003b7a:	85 c0                	test   eax,eax
c0003b7c:	75 70                	jne    c0003bee <dir_register+0x17e>
c0003b7e:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c0003b83:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003b86:	83 ec 0c             	sub    esp,0xc
c0003b89:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0003b8c:	55                   	push   ebp
c0003b8d:	e8 39 e5 ff ff       	call   c00020cb <put_lfn>
c0003b92:	31 d2                	xor    edx,edx
c0003b94:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003b98:	89 d8                	mov    eax,ebx
c0003b9a:	e8 0e fa ff ff       	call   c00035ad <dir_next>
c0003b9f:	83 c4 10             	add    esp,0x10
c0003ba2:	89 c6                	mov    esi,eax
c0003ba4:	85 c0                	test   eax,eax
c0003ba6:	75 46                	jne    c0003bee <dir_register+0x17e>
c0003ba8:	ff 4c 24 0c          	dec    DWORD PTR [esp+0xc]
c0003bac:	75 c0                	jne    c0003b6e <dir_register+0xfe>
c0003bae:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003bb1:	89 f8                	mov    eax,edi
c0003bb3:	e8 86 e7 ff ff       	call   c000233e <move_window>
c0003bb8:	89 c6                	mov    esi,eax
c0003bba:	85 c0                	test   eax,eax
c0003bbc:	75 30                	jne    c0003bee <dir_register+0x17e>
c0003bbe:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003bc1:	b9 20 00 00 00       	mov    ecx,0x20
c0003bc6:	31 d2                	xor    edx,edx
c0003bc8:	e8 4b e2 ff ff       	call   c0001e18 <mem_set>
c0003bcd:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003bd0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003bd4:	b9 0b 00 00 00       	mov    ecx,0xb
c0003bd9:	e8 25 e2 ff ff       	call   c0001e03 <mem_cpy>
c0003bde:	8a 43 2b             	mov    al,BYTE PTR [ebx+0x2b]
c0003be1:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003be4:	83 e0 18             	and    eax,0x18
c0003be7:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c0003bea:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003bee:	83 c4 2c             	add    esp,0x2c
c0003bf1:	89 f0                	mov    eax,esi
c0003bf3:	5b                   	pop    ebx
c0003bf4:	5e                   	pop    esi
c0003bf5:	5f                   	pop    edi
c0003bf6:	5d                   	pop    ebp
c0003bf7:	c3                   	ret    

c0003bf8 <f_mount>:
c0003bf8:	53                   	push   ebx
c0003bf9:	83 ec 18             	sub    esp,0x18
c0003bfc:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0003c00:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0003c04:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003c08:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0003c0c:	e8 37 e6 ff ff       	call   c0002248 <get_ldnumber>
c0003c11:	89 c2                	mov    edx,eax
c0003c13:	b8 0b 00 00 00       	mov    eax,0xb
c0003c18:	85 d2                	test   edx,edx
c0003c1a:	78 39                	js     c0003c55 <f_mount+0x5d>
c0003c1c:	8b 04 95 a0 64 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd9b60]
c0003c23:	85 c0                	test   eax,eax
c0003c25:	74 03                	je     c0003c2a <f_mount+0x32>
c0003c27:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003c2a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003c2e:	85 c0                	test   eax,eax
c0003c30:	74 03                	je     c0003c35 <f_mount+0x3d>
c0003c32:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003c35:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003c39:	89 04 95 a0 64 02 c0 	mov    DWORD PTR [edx*4-0x3ffd9b60],eax
c0003c40:	31 c0                	xor    eax,eax
c0003c42:	84 db                	test   bl,bl
c0003c44:	74 0f                	je     c0003c55 <f_mount+0x5d>
c0003c46:	31 c9                	xor    ecx,ecx
c0003c48:	8d 54 24 20          	lea    edx,[esp+0x20]
c0003c4c:	8d 44 24 24          	lea    eax,[esp+0x24]
c0003c50:	e8 3c e8 ff ff       	call   c0002491 <mount_volume>
c0003c55:	83 c4 18             	add    esp,0x18
c0003c58:	5b                   	pop    ebx
c0003c59:	c3                   	ret    

c0003c5a <f_open>:
c0003c5a:	55                   	push   ebp
c0003c5b:	b8 09 00 00 00       	mov    eax,0x9
c0003c60:	57                   	push   edi
c0003c61:	56                   	push   esi
c0003c62:	53                   	push   ebx
c0003c63:	83 ec 5c             	sub    esp,0x5c
c0003c66:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c0003c6a:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0003c6e:	85 db                	test   ebx,ebx
c0003c70:	0f 84 9f 02 00 00    	je     c0003f15 <f_open+0x2bb>
c0003c76:	89 fd                	mov    ebp,edi
c0003c78:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0003c7c:	83 e5 3f             	and    ebp,0x3f
c0003c7f:	89 e8                	mov    eax,ebp
c0003c81:	89 ee                	mov    esi,ebp
c0003c83:	0f b6 c8             	movzx  ecx,al
c0003c86:	8d 44 24 74          	lea    eax,[esp+0x74]
c0003c8a:	e8 02 e8 ff ff       	call   c0002491 <mount_volume>
c0003c8f:	85 c0                	test   eax,eax
c0003c91:	0f 85 78 02 00 00    	jne    c0003f0f <f_open+0x2b5>
c0003c97:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003c9b:	83 ec 0c             	sub    esp,0xc
c0003c9e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003ca2:	68 00 02 00 00       	push   0x200
c0003ca7:	e8 74 1f 00 00       	call   c0005c20 <ff_memalloc>
c0003cac:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0003cb0:	83 c4 10             	add    esp,0x10
c0003cb3:	b8 11 00 00 00       	mov    eax,0x11
c0003cb8:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0003cbd:	0f 84 52 02 00 00    	je     c0003f15 <f_open+0x2bb>
c0003cc3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003cc7:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003ccb:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0003ccf:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
c0003cd2:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003cd6:	e8 00 fd ff ff       	call   c00039db <follow_path>
c0003cdb:	85 c0                	test   eax,eax
c0003cdd:	75 0c                	jne    c0003ceb <f_open+0x91>
c0003cdf:	f6 44 24 4b 80       	test   BYTE PTR [esp+0x4b],0x80
c0003ce4:	74 05                	je     c0003ceb <f_open+0x91>
c0003ce6:	b8 06 00 00 00       	mov    eax,0x6
c0003ceb:	f7 c7 1c 00 00 00    	test   edi,0x1c
c0003cf1:	0f 84 d5 00 00 00    	je     c0003dcc <f_open+0x172>
c0003cf7:	85 c0                	test   eax,eax
c0003cf9:	74 21                	je     c0003d1c <f_open+0xc2>
c0003cfb:	83 f8 04             	cmp    eax,0x4
c0003cfe:	0f 85 f0 01 00 00    	jne    c0003ef4 <f_open+0x29a>
c0003d04:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003d08:	e8 63 fd ff ff       	call   c0003a70 <dir_register>
c0003d0d:	85 c0                	test   eax,eax
c0003d0f:	0f 85 df 01 00 00    	jne    c0003ef4 <f_open+0x29a>
c0003d15:	83 cd 08             	or     ebp,0x8
c0003d18:	89 ee                	mov    esi,ebp
c0003d1a:	eb 2c                	jmp    c0003d48 <f_open+0xee>
c0003d1c:	8a 54 24 26          	mov    dl,BYTE PTR [esp+0x26]
c0003d20:	b8 07 00 00 00       	mov    eax,0x7
c0003d25:	80 e2 11             	and    dl,0x11
c0003d28:	0f 85 c6 01 00 00    	jne    c0003ef4 <f_open+0x29a>
c0003d2e:	b8 08 00 00 00       	mov    eax,0x8
c0003d33:	f7 c7 04 00 00 00    	test   edi,0x4
c0003d39:	0f 85 b5 01 00 00    	jne    c0003ef4 <f_open+0x29a>
c0003d3f:	83 e7 08             	and    edi,0x8
c0003d42:	0f 84 b1 00 00 00    	je     c0003df9 <f_open+0x19f>
c0003d48:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0003d4c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003d50:	89 ea                	mov    edx,ebp
c0003d52:	8a 00                	mov    al,BYTE PTR [eax]
c0003d54:	e8 6a f4 ff ff       	call   c00031c3 <ld_clust.isra.0>
c0003d59:	ba 00 00 21 50       	mov    edx,0x50210000
c0003d5e:	89 c7                	mov    edi,eax
c0003d60:	8d 45 0e             	lea    eax,[ebp+0xe]
c0003d63:	e8 98 e0 ff ff       	call   c0001e00 <st_dword>
c0003d68:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003d6c:	31 c9                	xor    ecx,ecx
c0003d6e:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c0003d72:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003d76:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0003d7a:	e8 6d f4 ff ff       	call   c00031ec <st_clust.isra.1>
c0003d7f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003d83:	31 d2                	xor    edx,edx
c0003d85:	83 c0 1c             	add    eax,0x1c
c0003d88:	e8 73 e0 ff ff       	call   c0001e00 <st_dword>
c0003d8d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003d91:	85 ff                	test   edi,edi
c0003d93:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003d97:	74 60                	je     c0003df9 <f_open+0x19f>
c0003d99:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003d9d:	31 c9                	xor    ecx,ecx
c0003d9f:	8b 68 30             	mov    ebp,DWORD PTR [eax+0x30]
c0003da2:	89 fa                	mov    edx,edi
c0003da4:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003da8:	e8 72 f7 ff ff       	call   c000351f <remove_chain>
c0003dad:	85 c0                	test   eax,eax
c0003daf:	0f 85 3f 01 00 00    	jne    c0003ef4 <f_open+0x29a>
c0003db5:	89 ea                	mov    edx,ebp
c0003db7:	4f                   	dec    edi
c0003db8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003dbc:	e8 7d e5 ff ff       	call   c000233e <move_window>
c0003dc1:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0003dc5:	85 c0                	test   eax,eax
c0003dc7:	89 7a 10             	mov    DWORD PTR [edx+0x10],edi
c0003dca:	eb 27                	jmp    c0003df3 <f_open+0x199>
c0003dcc:	85 c0                	test   eax,eax
c0003dce:	0f 85 20 01 00 00    	jne    c0003ef4 <f_open+0x29a>
c0003dd4:	8a 54 24 26          	mov    dl,BYTE PTR [esp+0x26]
c0003dd8:	b8 04 00 00 00       	mov    eax,0x4
c0003ddd:	f6 c2 10             	test   dl,0x10
c0003de0:	0f 85 0e 01 00 00    	jne    c0003ef4 <f_open+0x29a>
c0003de6:	83 e7 02             	and    edi,0x2
c0003de9:	74 0e                	je     c0003df9 <f_open+0x19f>
c0003deb:	b8 07 00 00 00       	mov    eax,0x7
c0003df0:	80 e2 01             	and    dl,0x1
c0003df3:	0f 85 fb 00 00 00    	jne    c0003ef4 <f_open+0x29a>
c0003df9:	f7 c6 08 00 00 00    	test   esi,0x8
c0003dff:	74 03                	je     c0003e04 <f_open+0x1aa>
c0003e01:	83 ce 40             	or     esi,0x40
c0003e04:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
c0003e08:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0003e0c:	8b 45 30             	mov    eax,DWORD PTR [ebp+0x30]
c0003e0f:	89 fa                	mov    edx,edi
c0003e11:	89 7b 24             	mov    DWORD PTR [ebx+0x24],edi
c0003e14:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0003e17:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0003e1a:	e8 a4 f3 ff ff       	call   c00031c3 <ld_clust.isra.0>
c0003e1f:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003e22:	8d 47 1c             	lea    eax,[edi+0x1c]
c0003e25:	8d 7b 28             	lea    edi,[ebx+0x28]
c0003e28:	e8 b7 df ff ff       	call   c0001de4 <ld_dword>
c0003e2d:	89 2b                	mov    DWORD PTR [ebx],ebp
c0003e2f:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0003e32:	31 d2                	xor    edx,edx
c0003e34:	66 8b 45 06          	mov    ax,WORD PTR [ebp+0x6]
c0003e38:	b9 00 02 00 00       	mov    ecx,0x200
c0003e3d:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0003e41:	c6 43 11 00          	mov    BYTE PTR [ebx+0x11],0x0
c0003e45:	89 f0                	mov    eax,esi
c0003e47:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0003e4e:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0003e51:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0003e58:	89 f8                	mov    eax,edi
c0003e5a:	e8 b9 df ff ff       	call   c0001e18 <mem_set>
c0003e5f:	83 e6 20             	and    esi,0x20
c0003e62:	75 07                	jne    c0003e6b <f_open+0x211>
c0003e64:	31 c0                	xor    eax,eax
c0003e66:	e9 89 00 00 00       	jmp    c0003ef4 <f_open+0x29a>
c0003e6b:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c0003e6e:	85 ed                	test   ebp,ebp
c0003e70:	74 f2                	je     c0003e64 <f_open+0x20a>
c0003e72:	89 6b 14             	mov    DWORD PTR [ebx+0x14],ebp
c0003e75:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003e79:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0003e7c:	0f b7 70 0a          	movzx  esi,WORD PTR [eax+0xa]
c0003e80:	c1 e6 09             	shl    esi,0x9
c0003e83:	39 ee                	cmp    esi,ebp
c0003e85:	73 1c                	jae    c0003ea3 <f_open+0x249>
c0003e87:	8b 03                	mov    eax,DWORD PTR [ebx]
c0003e89:	29 f5                	sub    ebp,esi
c0003e8b:	e8 84 f3 ff ff       	call   c0003214 <get_fat.isra.2>
c0003e90:	89 c2                	mov    edx,eax
c0003e92:	83 f8 01             	cmp    eax,0x1
c0003e95:	76 10                	jbe    c0003ea7 <f_open+0x24d>
c0003e97:	83 f8 ff             	cmp    eax,0xffffffff
c0003e9a:	75 e7                	jne    c0003e83 <f_open+0x229>
c0003e9c:	b8 01 00 00 00       	mov    eax,0x1
c0003ea1:	eb 09                	jmp    c0003eac <f_open+0x252>
c0003ea3:	31 c0                	xor    eax,eax
c0003ea5:	eb 05                	jmp    c0003eac <f_open+0x252>
c0003ea7:	b8 02 00 00 00       	mov    eax,0x2
c0003eac:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0003eaf:	85 c0                	test   eax,eax
c0003eb1:	75 41                	jne    c0003ef4 <f_open+0x29a>
c0003eb3:	f7 c5 ff 01 00 00    	test   ebp,0x1ff
c0003eb9:	74 a9                	je     c0003e64 <f_open+0x20a>
c0003ebb:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0003ebf:	89 f0                	mov    eax,esi
c0003ec1:	e8 68 e1 ff ff       	call   c000202e <clst2sect>
c0003ec6:	89 c2                	mov    edx,eax
c0003ec8:	b8 02 00 00 00       	mov    eax,0x2
c0003ecd:	85 d2                	test   edx,edx
c0003ecf:	74 23                	je     c0003ef4 <f_open+0x29a>
c0003ed1:	c1 ed 09             	shr    ebp,0x9
c0003ed4:	8d 44 15 00          	lea    eax,[ebp+edx*1+0x0]
c0003ed8:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0003edb:	6a 01                	push   0x1
c0003edd:	50                   	push   eax
c0003ede:	57                   	push   edi
c0003edf:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0003ee3:	50                   	push   eax
c0003ee4:	e8 a3 de ff ff       	call   c0001d8c <disk_read>
c0003ee9:	83 c4 10             	add    esp,0x10
c0003eec:	85 c0                	test   eax,eax
c0003eee:	0f 95 c0             	setne  al
c0003ef1:	0f b6 c0             	movzx  eax,al
c0003ef4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003ef8:	83 ec 0c             	sub    esp,0xc
c0003efb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0003eff:	e8 34 1d 00 00       	call   c0005c38 <ff_memfree>
c0003f04:	83 c4 10             	add    esp,0x10
c0003f07:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003f0b:	85 c0                	test   eax,eax
c0003f0d:	74 06                	je     c0003f15 <f_open+0x2bb>
c0003f0f:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0003f15:	83 c4 5c             	add    esp,0x5c
c0003f18:	5b                   	pop    ebx
c0003f19:	5e                   	pop    esi
c0003f1a:	5f                   	pop    edi
c0003f1b:	5d                   	pop    ebp
c0003f1c:	c3                   	ret    

c0003f1d <f_read>:
c0003f1d:	55                   	push   ebp
c0003f1e:	57                   	push   edi
c0003f1f:	56                   	push   esi
c0003f20:	53                   	push   ebx
c0003f21:	83 ec 2c             	sub    esp,0x2c
c0003f24:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0003f28:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0003f2c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0003f32:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0003f36:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0003f3a:	89 d8                	mov    eax,ebx
c0003f3c:	e8 54 e3 ff ff       	call   c0002295 <validate>
c0003f41:	89 c5                	mov    ebp,eax
c0003f43:	85 c0                	test   eax,eax
c0003f45:	0f 85 c7 01 00 00    	jne    c0004112 <f_read+0x1f5>
c0003f4b:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c0003f4f:	85 ed                	test   ebp,ebp
c0003f51:	0f 85 bb 01 00 00    	jne    c0004112 <f_read+0x1f5>
c0003f57:	f6 43 10 01          	test   BYTE PTR [ebx+0x10],0x1
c0003f5b:	0f 84 ac 01 00 00    	je     c000410d <f_read+0x1f0>
c0003f61:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0003f64:	2b 43 14             	sub    eax,DWORD PTR [ebx+0x14]
c0003f67:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0003f6b:	39 f0                	cmp    eax,esi
c0003f6d:	0f 86 b0 00 00 00    	jbe    c0004023 <f_read+0x106>
c0003f73:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0003f77:	e9 a7 00 00 00       	jmp    c0004023 <f_read+0x106>
c0003f7c:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0003f7f:	a9 ff 01 00 00       	test   eax,0x1ff
c0003f84:	0f 85 56 01 00 00    	jne    c00040e0 <f_read+0x1c3>
c0003f8a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0003f8e:	0f b7 7a 0a          	movzx  edi,WORD PTR [edx+0xa]
c0003f92:	89 c2                	mov    edx,eax
c0003f94:	4f                   	dec    edi
c0003f95:	c1 ea 09             	shr    edx,0x9
c0003f98:	21 d7                	and    edi,edx
c0003f9a:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0003f9e:	0f 84 8f 00 00 00    	je     c0004033 <f_read+0x116>
c0003fa4:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003fa8:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003fab:	89 c8                	mov    eax,ecx
c0003fad:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003fb1:	e8 78 e0 ff ff       	call   c000202e <clst2sect>
c0003fb6:	85 c0                	test   eax,eax
c0003fb8:	0f 84 8d 00 00 00    	je     c000404b <f_read+0x12e>
c0003fbe:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003fc2:	81 7c 24 04 ff 01 00 00 	cmp    DWORD PTR [esp+0x4],0x1ff
c0003fca:	8d 3c 01             	lea    edi,[ecx+eax*1]
c0003fcd:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003fd1:	0f 86 bf 00 00 00    	jbe    c0004096 <f_read+0x179>
c0003fd7:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0003fdb:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0003fdf:	c1 ee 09             	shr    esi,0x9
c0003fe2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003fe6:	01 f2                	add    edx,esi
c0003fe8:	39 c2                	cmp    edx,eax
c0003fea:	76 06                	jbe    c0003ff2 <f_read+0xd5>
c0003fec:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c0003ff0:	89 c6                	mov    esi,eax
c0003ff2:	56                   	push   esi
c0003ff3:	57                   	push   edi
c0003ff4:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0003ff8:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0003ffc:	50                   	push   eax
c0003ffd:	e8 8a dd ff ff       	call   c0001d8c <disk_read>
c0004002:	83 c4 10             	add    esp,0x10
c0004005:	85 c0                	test   eax,eax
c0004007:	75 55                	jne    c000405e <f_read+0x141>
c0004009:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c000400d:	75 65                	jne    c0004074 <f_read+0x157>
c000400f:	c1 e6 09             	shl    esi,0x9
c0004012:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004016:	29 74 24 04          	sub    DWORD PTR [esp+0x4],esi
c000401a:	01 30                	add    DWORD PTR [eax],esi
c000401c:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c0004020:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c0004023:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0004028:	0f 85 4e ff ff ff    	jne    c0003f7c <f_read+0x5f>
c000402e:	e9 df 00 00 00       	jmp    c0004112 <f_read+0x1f5>
c0004033:	85 c0                	test   eax,eax
c0004035:	75 05                	jne    c000403c <f_read+0x11f>
c0004037:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000403a:	eb 0a                	jmp    c0004046 <f_read+0x129>
c000403c:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000403f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0004041:	e8 ce f1 ff ff       	call   c0003214 <get_fat.isra.2>
c0004046:	83 f8 01             	cmp    eax,0x1
c0004049:	77 0e                	ja     c0004059 <f_read+0x13c>
c000404b:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c000404f:	bd 02 00 00 00       	mov    ebp,0x2
c0004054:	e9 b9 00 00 00       	jmp    c0004112 <f_read+0x1f5>
c0004059:	83 f8 ff             	cmp    eax,0xffffffff
c000405c:	75 0e                	jne    c000406c <f_read+0x14f>
c000405e:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c0004062:	bd 01 00 00 00       	mov    ebp,0x1
c0004067:	e9 a6 00 00 00       	jmp    c0004112 <f_read+0x1f5>
c000406c:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000406f:	e9 30 ff ff ff       	jmp    c0003fa4 <f_read+0x87>
c0004074:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0004077:	29 f8                	sub    eax,edi
c0004079:	39 f0                	cmp    eax,esi
c000407b:	73 92                	jae    c000400f <f_read+0xf2>
c000407d:	c1 e0 09             	shl    eax,0x9
c0004080:	8d 53 28             	lea    edx,[ebx+0x28]
c0004083:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c0004087:	b9 00 02 00 00       	mov    ecx,0x200
c000408c:	e8 72 dd ff ff       	call   c0001e03 <mem_cpy>
c0004091:	e9 79 ff ff ff       	jmp    c000400f <f_read+0xf2>
c0004096:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0004099:	39 f8                	cmp    eax,edi
c000409b:	74 40                	je     c00040dd <f_read+0x1c0>
c000409d:	8d 73 28             	lea    esi,[ebx+0x28]
c00040a0:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c00040a4:	74 1e                	je     c00040c4 <f_read+0x1a7>
c00040a6:	6a 01                	push   0x1
c00040a8:	50                   	push   eax
c00040a9:	56                   	push   esi
c00040aa:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00040ae:	50                   	push   eax
c00040af:	e8 ee dc ff ff       	call   c0001da2 <disk_write>
c00040b4:	83 c4 10             	add    esp,0x10
c00040b7:	85 c0                	test   eax,eax
c00040b9:	75 a3                	jne    c000405e <f_read+0x141>
c00040bb:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00040be:	83 e0 7f             	and    eax,0x7f
c00040c1:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00040c4:	6a 01                	push   0x1
c00040c6:	57                   	push   edi
c00040c7:	56                   	push   esi
c00040c8:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00040cc:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00040d0:	50                   	push   eax
c00040d1:	e8 b6 dc ff ff       	call   c0001d8c <disk_read>
c00040d6:	83 c4 10             	add    esp,0x10
c00040d9:	85 c0                	test   eax,eax
c00040db:	75 81                	jne    c000405e <f_read+0x141>
c00040dd:	89 7b 1c             	mov    DWORD PTR [ebx+0x1c],edi
c00040e0:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00040e3:	ba 00 02 00 00       	mov    edx,0x200
c00040e8:	25 ff 01 00 00       	and    eax,0x1ff
c00040ed:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c00040f1:	29 c2                	sub    edx,eax
c00040f3:	39 d6                	cmp    esi,edx
c00040f5:	76 02                	jbe    c00040f9 <f_read+0x1dc>
c00040f7:	89 d6                	mov    esi,edx
c00040f9:	8d 54 03 28          	lea    edx,[ebx+eax*1+0x28]
c00040fd:	89 f1                	mov    ecx,esi
c00040ff:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0004103:	e8 fb dc ff ff       	call   c0001e03 <mem_cpy>
c0004108:	e9 05 ff ff ff       	jmp    c0004012 <f_read+0xf5>
c000410d:	bd 07 00 00 00       	mov    ebp,0x7
c0004112:	83 c4 2c             	add    esp,0x2c
c0004115:	89 e8                	mov    eax,ebp
c0004117:	5b                   	pop    ebx
c0004118:	5e                   	pop    esi
c0004119:	5f                   	pop    edi
c000411a:	5d                   	pop    ebp
c000411b:	c3                   	ret    

c000411c <f_write>:
c000411c:	55                   	push   ebp
c000411d:	57                   	push   edi
c000411e:	56                   	push   esi
c000411f:	53                   	push   ebx
c0004120:	83 ec 2c             	sub    esp,0x2c
c0004123:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004127:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000412b:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0004131:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004135:	89 d8                	mov    eax,ebx
c0004137:	e8 59 e1 ff ff       	call   c0002295 <validate>
c000413c:	89 c5                	mov    ebp,eax
c000413e:	85 c0                	test   eax,eax
c0004140:	0f 85 14 02 00 00    	jne    c000435a <f_write+0x23e>
c0004146:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c000414a:	85 ed                	test   ebp,ebp
c000414c:	0f 85 08 02 00 00    	jne    c000435a <f_write+0x23e>
c0004152:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004156:	0f 84 f9 01 00 00    	je     c0004355 <f_write+0x239>
c000415c:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000415f:	89 c7                	mov    edi,eax
c0004161:	03 7c 24 48          	add    edi,DWORD PTR [esp+0x48]
c0004165:	0f 83 ef 00 00 00    	jae    c000425a <f_write+0x13e>
c000416b:	f7 d0                	not    eax
c000416d:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0004171:	e9 e4 00 00 00       	jmp    c000425a <f_write+0x13e>
c0004176:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0004179:	f7 c2 ff 01 00 00    	test   edx,0x1ff
c000417f:	0f 85 9a 01 00 00    	jne    c000431f <f_write+0x203>
c0004185:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004189:	89 d1                	mov    ecx,edx
c000418b:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c000418f:	c1 e9 09             	shr    ecx,0x9
c0004192:	48                   	dec    eax
c0004193:	21 c8                	and    eax,ecx
c0004195:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004199:	0f 84 c8 00 00 00    	je     c0004267 <f_write+0x14b>
c000419f:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c00041a3:	0f 85 22 01 00 00    	jne    c00042cb <f_write+0x1af>
c00041a9:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00041ad:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00041b0:	89 c8                	mov    eax,ecx
c00041b2:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00041b6:	e8 73 de ff ff       	call   c000202e <clst2sect>
c00041bb:	85 c0                	test   eax,eax
c00041bd:	0f 84 d2 00 00 00    	je     c0004295 <f_write+0x179>
c00041c3:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00041c7:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00041cb:	01 c7                	add    edi,eax
c00041cd:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c00041d5:	0f 86 1c 01 00 00    	jbe    c00042f7 <f_write+0x1db>
c00041db:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00041df:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c00041e3:	c1 ee 09             	shr    esi,0x9
c00041e6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00041ea:	01 f2                	add    edx,esi
c00041ec:	39 c2                	cmp    edx,eax
c00041ee:	76 06                	jbe    c00041f6 <f_write+0xda>
c00041f0:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c00041f4:	89 c6                	mov    esi,eax
c00041f6:	56                   	push   esi
c00041f7:	57                   	push   edi
c00041f8:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00041fc:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0004200:	50                   	push   eax
c0004201:	e8 9c db ff ff       	call   c0001da2 <disk_write>
c0004206:	83 c4 10             	add    esp,0x10
c0004209:	85 c0                	test   eax,eax
c000420b:	0f 85 97 00 00 00    	jne    c00042a8 <f_write+0x18c>
c0004211:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0004214:	29 fa                	sub    edx,edi
c0004216:	39 f2                	cmp    edx,esi
c0004218:	73 1d                	jae    c0004237 <f_write+0x11b>
c000421a:	8d 43 28             	lea    eax,[ebx+0x28]
c000421d:	c1 e2 09             	shl    edx,0x9
c0004220:	b9 00 02 00 00       	mov    ecx,0x200
c0004225:	03 54 24 44          	add    edx,DWORD PTR [esp+0x44]
c0004229:	e8 d5 db ff ff       	call   c0001e03 <mem_cpy>
c000422e:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0004231:	83 e0 7f             	and    eax,0x7f
c0004234:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004237:	c1 e6 09             	shl    esi,0x9
c000423a:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c000423e:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004242:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c0004246:	01 30                	add    DWORD PTR [eax],esi
c0004248:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c000424b:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000424e:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0004251:	39 f0                	cmp    eax,esi
c0004253:	73 02                	jae    c0004257 <f_write+0x13b>
c0004255:	89 f0                	mov    eax,esi
c0004257:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000425a:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c000425f:	0f 85 11 ff ff ff    	jne    c0004176 <f_write+0x5a>
c0004265:	eb 1b                	jmp    c0004282 <f_write+0x166>
c0004267:	85 d2                	test   edx,edx
c0004269:	75 09                	jne    c0004274 <f_write+0x158>
c000426b:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000426e:	85 c0                	test   eax,eax
c0004270:	75 1e                	jne    c0004290 <f_write+0x174>
c0004272:	eb 03                	jmp    c0004277 <f_write+0x15b>
c0004274:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004277:	89 d8                	mov    eax,ebx
c0004279:	e8 62 f1 ff ff       	call   c00033e0 <create_chain>
c000427e:	85 c0                	test   eax,eax
c0004280:	75 0e                	jne    c0004290 <f_write+0x174>
c0004282:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0004285:	83 c8 40             	or     eax,0x40
c0004288:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c000428b:	e9 ca 00 00 00       	jmp    c000435a <f_write+0x23e>
c0004290:	83 f8 01             	cmp    eax,0x1
c0004293:	75 0e                	jne    c00042a3 <f_write+0x187>
c0004295:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c0004299:	bd 02 00 00 00       	mov    ebp,0x2
c000429e:	e9 b7 00 00 00       	jmp    c000435a <f_write+0x23e>
c00042a3:	83 f8 ff             	cmp    eax,0xffffffff
c00042a6:	75 0e                	jne    c00042b6 <f_write+0x19a>
c00042a8:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c00042ac:	bd 01 00 00 00       	mov    ebp,0x1
c00042b1:	e9 a4 00 00 00       	jmp    c000435a <f_write+0x23e>
c00042b6:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00042b9:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c00042bd:	0f 85 dc fe ff ff    	jne    c000419f <f_write+0x83>
c00042c3:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00042c6:	e9 d4 fe ff ff       	jmp    c000419f <f_write+0x83>
c00042cb:	6a 01                	push   0x1
c00042cd:	8d 43 28             	lea    eax,[ebx+0x28]
c00042d0:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00042d3:	50                   	push   eax
c00042d4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00042d8:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00042dc:	50                   	push   eax
c00042dd:	e8 c0 da ff ff       	call   c0001da2 <disk_write>
c00042e2:	83 c4 10             	add    esp,0x10
c00042e5:	85 c0                	test   eax,eax
c00042e7:	75 bf                	jne    c00042a8 <f_write+0x18c>
c00042e9:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00042ec:	83 e0 7f             	and    eax,0x7f
c00042ef:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00042f2:	e9 b2 fe ff ff       	jmp    c00041a9 <f_write+0x8d>
c00042f7:	39 7b 1c             	cmp    DWORD PTR [ebx+0x1c],edi
c00042fa:	74 20                	je     c000431c <f_write+0x200>
c00042fc:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00042ff:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c0004302:	76 18                	jbe    c000431c <f_write+0x200>
c0004304:	6a 01                	push   0x1
c0004306:	8d 43 28             	lea    eax,[ebx+0x28]
c0004309:	57                   	push   edi
c000430a:	50                   	push   eax
c000430b:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c000430f:	50                   	push   eax
c0004310:	e8 77 da ff ff       	call   c0001d8c <disk_read>
c0004315:	83 c4 10             	add    esp,0x10
c0004318:	85 c0                	test   eax,eax
c000431a:	75 8c                	jne    c00042a8 <f_write+0x18c>
c000431c:	89 7b 1c             	mov    DWORD PTR [ebx+0x1c],edi
c000431f:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004322:	ba 00 02 00 00       	mov    edx,0x200
c0004327:	25 ff 01 00 00       	and    eax,0x1ff
c000432c:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0004330:	29 c2                	sub    edx,eax
c0004332:	39 d6                	cmp    esi,edx
c0004334:	76 02                	jbe    c0004338 <f_write+0x21c>
c0004336:	89 d6                	mov    esi,edx
c0004338:	8d 44 03 28          	lea    eax,[ebx+eax*1+0x28]
c000433c:	89 f1                	mov    ecx,esi
c000433e:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0004342:	e8 bc da ff ff       	call   c0001e03 <mem_cpy>
c0004347:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000434a:	83 c8 80             	or     eax,0xffffff80
c000434d:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004350:	e9 e5 fe ff ff       	jmp    c000423a <f_write+0x11e>
c0004355:	bd 07 00 00 00       	mov    ebp,0x7
c000435a:	83 c4 2c             	add    esp,0x2c
c000435d:	89 e8                	mov    eax,ebp
c000435f:	5b                   	pop    ebx
c0004360:	5e                   	pop    esi
c0004361:	5f                   	pop    edi
c0004362:	5d                   	pop    ebp
c0004363:	c3                   	ret    

c0004364 <f_sync>:
c0004364:	56                   	push   esi
c0004365:	53                   	push   ebx
c0004366:	83 ec 14             	sub    esp,0x14
c0004369:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000436d:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004371:	89 d8                	mov    eax,ebx
c0004373:	e8 1d df ff ff       	call   c0002295 <validate>
c0004378:	85 c0                	test   eax,eax
c000437a:	0f 85 a3 00 00 00    	jne    c0004423 <f_sync+0xbf>
c0004380:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c0004383:	f6 c2 40             	test   dl,0x40
c0004386:	0f 84 97 00 00 00    	je     c0004423 <f_sync+0xbf>
c000438c:	80 e2 80             	and    dl,0x80
c000438f:	74 2e                	je     c00043bf <f_sync+0x5b>
c0004391:	6a 01                	push   0x1
c0004393:	8d 43 28             	lea    eax,[ebx+0x28]
c0004396:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0004399:	50                   	push   eax
c000439a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000439e:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00043a2:	50                   	push   eax
c00043a3:	e8 fa d9 ff ff       	call   c0001da2 <disk_write>
c00043a8:	83 c4 10             	add    esp,0x10
c00043ab:	89 c2                	mov    edx,eax
c00043ad:	b8 01 00 00 00       	mov    eax,0x1
c00043b2:	85 d2                	test   edx,edx
c00043b4:	75 6d                	jne    c0004423 <f_sync+0xbf>
c00043b6:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00043b9:	83 e0 7f             	and    eax,0x7f
c00043bc:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00043bf:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00043c2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00043c6:	e8 73 df ff ff       	call   c000233e <move_window>
c00043cb:	85 c0                	test   eax,eax
c00043cd:	75 54                	jne    c0004423 <f_sync+0xbf>
c00043cf:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c00043d2:	8a 46 0b             	mov    al,BYTE PTR [esi+0xb]
c00043d5:	89 f2                	mov    edx,esi
c00043d7:	83 c8 20             	or     eax,0x20
c00043da:	88 46 0b             	mov    BYTE PTR [esi+0xb],al
c00043dd:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c00043e0:	8b 03                	mov    eax,DWORD PTR [ebx]
c00043e2:	e8 05 ee ff ff       	call   c00031ec <st_clust.isra.1>
c00043e7:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00043ea:	8d 46 1c             	lea    eax,[esi+0x1c]
c00043ed:	e8 0e da ff ff       	call   c0001e00 <st_dword>
c00043f2:	8d 46 16             	lea    eax,[esi+0x16]
c00043f5:	ba 00 00 21 50       	mov    edx,0x50210000
c00043fa:	e8 01 da ff ff       	call   c0001e00 <st_dword>
c00043ff:	31 d2                	xor    edx,edx
c0004401:	8d 46 12             	lea    eax,[esi+0x12]
c0004404:	e8 f3 d9 ff ff       	call   c0001dfc <st_word>
c0004409:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000440d:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004411:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004415:	e8 5b e9 ff ff       	call   c0002d75 <sync_fs>
c000441a:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c000441d:	83 e2 bf             	and    edx,0xffffffbf
c0004420:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c0004423:	83 c4 14             	add    esp,0x14
c0004426:	5b                   	pop    ebx
c0004427:	5e                   	pop    esi
c0004428:	c3                   	ret    

c0004429 <f_close>:
c0004429:	53                   	push   ebx
c000442a:	83 ec 24             	sub    esp,0x24
c000442d:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0004431:	53                   	push   ebx
c0004432:	e8 2d ff ff ff       	call   c0004364 <f_sync>
c0004437:	83 c4 10             	add    esp,0x10
c000443a:	85 c0                	test   eax,eax
c000443c:	75 15                	jne    c0004453 <f_close+0x2a>
c000443e:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004442:	89 d8                	mov    eax,ebx
c0004444:	e8 4c de ff ff       	call   c0002295 <validate>
c0004449:	85 c0                	test   eax,eax
c000444b:	75 06                	jne    c0004453 <f_close+0x2a>
c000444d:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0004453:	83 c4 18             	add    esp,0x18
c0004456:	5b                   	pop    ebx
c0004457:	c3                   	ret    

c0004458 <f_lseek>:
c0004458:	55                   	push   ebp
c0004459:	57                   	push   edi
c000445a:	56                   	push   esi
c000445b:	53                   	push   ebx
c000445c:	83 ec 2c             	sub    esp,0x2c
c000445f:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0004463:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0004467:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000446b:	89 d8                	mov    eax,ebx
c000446d:	e8 23 de ff ff       	call   c0002295 <validate>
c0004472:	89 c5                	mov    ebp,eax
c0004474:	85 c0                	test   eax,eax
c0004476:	0f 85 83 01 00 00    	jne    c00045ff <f_lseek+0x1a7>
c000447c:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c0004480:	85 ed                	test   ebp,ebp
c0004482:	0f 85 77 01 00 00    	jne    c00045ff <f_lseek+0x1a7>
c0004488:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000448b:	39 f0                	cmp    eax,esi
c000448d:	73 08                	jae    c0004497 <f_lseek+0x3f>
c000448f:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004493:	75 02                	jne    c0004497 <f_lseek+0x3f>
c0004495:	89 c6                	mov    esi,eax
c0004497:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000449a:	85 f6                	test   esi,esi
c000449c:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00044a3:	75 07                	jne    c00044ac <f_lseek+0x54>
c00044a5:	31 f6                	xor    esi,esi
c00044a7:	e9 e2 00 00 00       	jmp    c000458e <f_lseek+0x136>
c00044ac:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00044b0:	0f b7 78 0a          	movzx  edi,WORD PTR [eax+0xa]
c00044b4:	c1 e7 09             	shl    edi,0x9
c00044b7:	85 c9                	test   ecx,ecx
c00044b9:	74 28                	je     c00044e3 <f_lseek+0x8b>
c00044bb:	49                   	dec    ecx
c00044bc:	31 d2                	xor    edx,edx
c00044be:	8d 46 ff             	lea    eax,[esi-0x1]
c00044c1:	f7 f7                	div    edi
c00044c3:	31 d2                	xor    edx,edx
c00044c5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00044c9:	89 c8                	mov    eax,ecx
c00044cb:	f7 f7                	div    edi
c00044cd:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c00044d1:	72 10                	jb     c00044e3 <f_lseek+0x8b>
c00044d3:	89 f8                	mov    eax,edi
c00044d5:	f7 d8                	neg    eax
c00044d7:	21 c1                	and    ecx,eax
c00044d9:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00044dc:	89 4b 14             	mov    DWORD PTR [ebx+0x14],ecx
c00044df:	29 ce                	sub    esi,ecx
c00044e1:	eb 3c                	jmp    c000451f <f_lseek+0xc7>
c00044e3:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00044e6:	85 c0                	test   eax,eax
c00044e8:	75 32                	jne    c000451c <f_lseek+0xc4>
c00044ea:	31 d2                	xor    edx,edx
c00044ec:	89 d8                	mov    eax,ebx
c00044ee:	e8 ed ee ff ff       	call   c00033e0 <create_chain>
c00044f3:	83 f8 01             	cmp    eax,0x1
c00044f6:	75 0e                	jne    c0004506 <f_lseek+0xae>
c00044f8:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c00044fc:	bd 02 00 00 00       	mov    ebp,0x2
c0004501:	e9 f9 00 00 00       	jmp    c00045ff <f_lseek+0x1a7>
c0004506:	83 f8 ff             	cmp    eax,0xffffffff
c0004509:	75 0e                	jne    c0004519 <f_lseek+0xc1>
c000450b:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c000450f:	bd 01 00 00 00       	mov    ebp,0x1
c0004514:	e9 e6 00 00 00       	jmp    c00045ff <f_lseek+0x1a7>
c0004519:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000451c:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000451f:	85 c0                	test   eax,eax
c0004521:	74 82                	je     c00044a5 <f_lseek+0x4d>
c0004523:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0004526:	39 fe                	cmp    esi,edi
c0004528:	76 3d                	jbe    c0004567 <f_lseek+0x10f>
c000452a:	01 fa                	add    edx,edi
c000452c:	29 fe                	sub    esi,edi
c000452e:	89 53 14             	mov    DWORD PTR [ebx+0x14],edx
c0004531:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004535:	89 c2                	mov    edx,eax
c0004537:	74 0d                	je     c0004546 <f_lseek+0xee>
c0004539:	89 d8                	mov    eax,ebx
c000453b:	e8 a0 ee ff ff       	call   c00033e0 <create_chain>
c0004540:	85 c0                	test   eax,eax
c0004542:	75 09                	jne    c000454d <f_lseek+0xf5>
c0004544:	eb 1f                	jmp    c0004565 <f_lseek+0x10d>
c0004546:	8b 03                	mov    eax,DWORD PTR [ebx]
c0004548:	e8 c7 ec ff ff       	call   c0003214 <get_fat.isra.2>
c000454d:	83 f8 ff             	cmp    eax,0xffffffff
c0004550:	74 b9                	je     c000450b <f_lseek+0xb3>
c0004552:	83 f8 01             	cmp    eax,0x1
c0004555:	76 a1                	jbe    c00044f8 <f_lseek+0xa0>
c0004557:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000455b:	39 42 18             	cmp    DWORD PTR [edx+0x18],eax
c000455e:	76 98                	jbe    c00044f8 <f_lseek+0xa0>
c0004560:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0004563:	eb be                	jmp    c0004523 <f_lseek+0xcb>
c0004565:	31 f6                	xor    esi,esi
c0004567:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c000456a:	f7 c6 ff 01 00 00    	test   esi,0x1ff
c0004570:	0f 84 2f ff ff ff    	je     c00044a5 <f_lseek+0x4d>
c0004576:	89 c2                	mov    edx,eax
c0004578:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000457c:	e8 ad da ff ff       	call   c000202e <clst2sect>
c0004581:	85 c0                	test   eax,eax
c0004583:	0f 84 6f ff ff ff    	je     c00044f8 <f_lseek+0xa0>
c0004589:	c1 ee 09             	shr    esi,0x9
c000458c:	01 c6                	add    esi,eax
c000458e:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004591:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c0004594:	76 0c                	jbe    c00045a2 <f_lseek+0x14a>
c0004596:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c0004599:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000459c:	83 ca 40             	or     edx,0x40
c000459f:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c00045a2:	a9 ff 01 00 00       	test   eax,0x1ff
c00045a7:	74 56                	je     c00045ff <f_lseek+0x1a7>
c00045a9:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00045ac:	39 f0                	cmp    eax,esi
c00045ae:	74 4f                	je     c00045ff <f_lseek+0x1a7>
c00045b0:	8d 7b 28             	lea    edi,[ebx+0x28]
c00045b3:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c00045b7:	74 26                	je     c00045df <f_lseek+0x187>
c00045b9:	6a 01                	push   0x1
c00045bb:	50                   	push   eax
c00045bc:	57                   	push   edi
c00045bd:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00045c1:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00045c5:	50                   	push   eax
c00045c6:	e8 d7 d7 ff ff       	call   c0001da2 <disk_write>
c00045cb:	83 c4 10             	add    esp,0x10
c00045ce:	85 c0                	test   eax,eax
c00045d0:	0f 85 35 ff ff ff    	jne    c000450b <f_lseek+0xb3>
c00045d6:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00045d9:	83 e0 7f             	and    eax,0x7f
c00045dc:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00045df:	6a 01                	push   0x1
c00045e1:	56                   	push   esi
c00045e2:	57                   	push   edi
c00045e3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00045e7:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00045eb:	50                   	push   eax
c00045ec:	e8 9b d7 ff ff       	call   c0001d8c <disk_read>
c00045f1:	83 c4 10             	add    esp,0x10
c00045f4:	85 c0                	test   eax,eax
c00045f6:	0f 85 0f ff ff ff    	jne    c000450b <f_lseek+0xb3>
c00045fc:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c00045ff:	83 c4 2c             	add    esp,0x2c
c0004602:	89 e8                	mov    eax,ebp
c0004604:	5b                   	pop    ebx
c0004605:	5e                   	pop    esi
c0004606:	5f                   	pop    edi
c0004607:	5d                   	pop    ebp
c0004608:	c3                   	ret    

c0004609 <f_opendir>:
c0004609:	56                   	push   esi
c000460a:	b8 09 00 00 00       	mov    eax,0x9
c000460f:	53                   	push   ebx
c0004610:	83 ec 24             	sub    esp,0x24
c0004613:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0004617:	85 db                	test   ebx,ebx
c0004619:	0f 84 af 00 00 00    	je     c00046ce <f_opendir+0xc5>
c000461f:	31 c9                	xor    ecx,ecx
c0004621:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004625:	8d 44 24 34          	lea    eax,[esp+0x34]
c0004629:	e8 63 de ff ff       	call   c0002491 <mount_volume>
c000462e:	85 c0                	test   eax,eax
c0004630:	0f 85 92 00 00 00    	jne    c00046c8 <f_opendir+0xbf>
c0004636:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000463a:	83 ec 0c             	sub    esp,0xc
c000463d:	89 03                	mov    DWORD PTR [ebx],eax
c000463f:	68 00 02 00 00       	push   0x200
c0004644:	e8 d7 15 00 00       	call   c0005c20 <ff_memalloc>
c0004649:	83 c4 10             	add    esp,0x10
c000464c:	89 c6                	mov    esi,eax
c000464e:	b8 11 00 00 00       	mov    eax,0x11
c0004653:	85 f6                	test   esi,esi
c0004655:	74 77                	je     c00046ce <f_opendir+0xc5>
c0004657:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000465b:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000465f:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004662:	89 d8                	mov    eax,ebx
c0004664:	e8 72 f3 ff ff       	call   c00039db <follow_path>
c0004669:	85 c0                	test   eax,eax
c000466b:	75 37                	jne    c00046a4 <f_opendir+0x9b>
c000466d:	f6 43 2b 80          	test   BYTE PTR [ebx+0x2b],0x80
c0004671:	75 1c                	jne    c000468f <f_opendir+0x86>
c0004673:	b8 05 00 00 00       	mov    eax,0x5
c0004678:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c000467c:	74 26                	je     c00046a4 <f_opendir+0x9b>
c000467e:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0004681:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004685:	8a 00                	mov    al,BYTE PTR [eax]
c0004687:	e8 37 eb ff ff       	call   c00031c3 <ld_clust.isra.0>
c000468c:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000468f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004693:	31 d2                	xor    edx,edx
c0004695:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0004699:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c000469d:	89 d8                	mov    eax,ebx
c000469f:	e8 74 ec ff ff       	call   c0003318 <dir_sdi>
c00046a4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00046a8:	83 ec 0c             	sub    esp,0xc
c00046ab:	56                   	push   esi
c00046ac:	e8 87 15 00 00       	call   c0005c38 <ff_memfree>
c00046b1:	83 c4 10             	add    esp,0x10
c00046b4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00046b8:	83 f8 04             	cmp    eax,0x4
c00046bb:	74 06                	je     c00046c3 <f_opendir+0xba>
c00046bd:	85 c0                	test   eax,eax
c00046bf:	74 0d                	je     c00046ce <f_opendir+0xc5>
c00046c1:	eb 05                	jmp    c00046c8 <f_opendir+0xbf>
c00046c3:	b8 05 00 00 00       	mov    eax,0x5
c00046c8:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00046ce:	83 c4 24             	add    esp,0x24
c00046d1:	5b                   	pop    ebx
c00046d2:	5e                   	pop    esi
c00046d3:	c3                   	ret    

c00046d4 <f_closedir>:
c00046d4:	53                   	push   ebx
c00046d5:	83 ec 18             	sub    esp,0x18
c00046d8:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00046dc:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00046e0:	89 d8                	mov    eax,ebx
c00046e2:	e8 ae db ff ff       	call   c0002295 <validate>
c00046e7:	85 c0                	test   eax,eax
c00046e9:	75 06                	jne    c00046f1 <f_closedir+0x1d>
c00046eb:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00046f1:	83 c4 18             	add    esp,0x18
c00046f4:	5b                   	pop    ebx
c00046f5:	c3                   	ret    

c00046f6 <f_readdir>:
c00046f6:	57                   	push   edi
c00046f7:	56                   	push   esi
c00046f8:	53                   	push   ebx
c00046f9:	83 ec 20             	sub    esp,0x20
c00046fc:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0004700:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0004704:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004708:	89 d8                	mov    eax,ebx
c000470a:	e8 86 db ff ff       	call   c0002295 <validate>
c000470f:	85 c0                	test   eax,eax
c0004711:	75 6e                	jne    c0004781 <f_readdir+0x8b>
c0004713:	85 ff                	test   edi,edi
c0004715:	75 0b                	jne    c0004722 <f_readdir+0x2c>
c0004717:	31 d2                	xor    edx,edx
c0004719:	89 d8                	mov    eax,ebx
c000471b:	e8 f8 eb ff ff       	call   c0003318 <dir_sdi>
c0004720:	eb 5f                	jmp    c0004781 <f_readdir+0x8b>
c0004722:	83 ec 0c             	sub    esp,0xc
c0004725:	68 00 02 00 00       	push   0x200
c000472a:	e8 f1 14 00 00       	call   c0005c20 <ff_memalloc>
c000472f:	83 c4 10             	add    esp,0x10
c0004732:	89 c6                	mov    esi,eax
c0004734:	b8 11 00 00 00       	mov    eax,0x11
c0004739:	85 f6                	test   esi,esi
c000473b:	74 44                	je     c0004781 <f_readdir+0x8b>
c000473d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004741:	31 d2                	xor    edx,edx
c0004743:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004746:	89 d8                	mov    eax,ebx
c0004748:	e8 ca ef ff ff       	call   c0003717 <dir_read>
c000474d:	a9 fb ff ff ff       	test   eax,0xfffffffb
c0004752:	75 19                	jne    c000476d <f_readdir+0x77>
c0004754:	89 fa                	mov    edx,edi
c0004756:	89 d8                	mov    eax,ebx
c0004758:	e8 70 e8 ff ff       	call   c0002fcd <get_fileinfo>
c000475d:	31 d2                	xor    edx,edx
c000475f:	89 d8                	mov    eax,ebx
c0004761:	e8 47 ee ff ff       	call   c00035ad <dir_next>
c0004766:	83 f8 04             	cmp    eax,0x4
c0004769:	75 02                	jne    c000476d <f_readdir+0x77>
c000476b:	31 c0                	xor    eax,eax
c000476d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004771:	83 ec 0c             	sub    esp,0xc
c0004774:	56                   	push   esi
c0004775:	e8 be 14 00 00       	call   c0005c38 <ff_memfree>
c000477a:	83 c4 10             	add    esp,0x10
c000477d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004781:	83 c4 20             	add    esp,0x20
c0004784:	5b                   	pop    ebx
c0004785:	5e                   	pop    esi
c0004786:	5f                   	pop    edi
c0004787:	c3                   	ret    

c0004788 <f_stat>:
c0004788:	57                   	push   edi
c0004789:	31 c9                	xor    ecx,ecx
c000478b:	56                   	push   esi
c000478c:	53                   	push   ebx
c000478d:	83 ec 30             	sub    esp,0x30
c0004790:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0004794:	89 e2                	mov    edx,esp
c0004796:	8d 44 24 40          	lea    eax,[esp+0x40]
c000479a:	e8 f2 dc ff ff       	call   c0002491 <mount_volume>
c000479f:	89 c3                	mov    ebx,eax
c00047a1:	85 c0                	test   eax,eax
c00047a3:	75 59                	jne    c00047fe <f_stat+0x76>
c00047a5:	83 ec 0c             	sub    esp,0xc
c00047a8:	bb 11 00 00 00       	mov    ebx,0x11
c00047ad:	68 00 02 00 00       	push   0x200
c00047b2:	e8 69 14 00 00       	call   c0005c20 <ff_memalloc>
c00047b7:	83 c4 10             	add    esp,0x10
c00047ba:	89 c6                	mov    esi,eax
c00047bc:	85 c0                	test   eax,eax
c00047be:	74 3e                	je     c00047fe <f_stat+0x76>
c00047c0:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00047c3:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00047c7:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00047ca:	89 e0                	mov    eax,esp
c00047cc:	e8 0a f2 ff ff       	call   c00039db <follow_path>
c00047d1:	89 c3                	mov    ebx,eax
c00047d3:	85 c0                	test   eax,eax
c00047d5:	75 1b                	jne    c00047f2 <f_stat+0x6a>
c00047d7:	f6 44 24 2b 80       	test   BYTE PTR [esp+0x2b],0x80
c00047dc:	75 0f                	jne    c00047ed <f_stat+0x65>
c00047de:	85 ff                	test   edi,edi
c00047e0:	74 10                	je     c00047f2 <f_stat+0x6a>
c00047e2:	89 fa                	mov    edx,edi
c00047e4:	89 e0                	mov    eax,esp
c00047e6:	e8 e2 e7 ff ff       	call   c0002fcd <get_fileinfo>
c00047eb:	eb 05                	jmp    c00047f2 <f_stat+0x6a>
c00047ed:	bb 06 00 00 00       	mov    ebx,0x6
c00047f2:	83 ec 0c             	sub    esp,0xc
c00047f5:	56                   	push   esi
c00047f6:	e8 3d 14 00 00       	call   c0005c38 <ff_memfree>
c00047fb:	83 c4 10             	add    esp,0x10
c00047fe:	83 c4 30             	add    esp,0x30
c0004801:	89 d8                	mov    eax,ebx
c0004803:	5b                   	pop    ebx
c0004804:	5e                   	pop    esi
c0004805:	5f                   	pop    edi
c0004806:	c3                   	ret    

c0004807 <f_getfree>:
c0004807:	55                   	push   ebp
c0004808:	31 c9                	xor    ecx,ecx
c000480a:	57                   	push   edi
c000480b:	56                   	push   esi
c000480c:	53                   	push   ebx
c000480d:	83 ec 2c             	sub    esp,0x2c
c0004810:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004814:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004818:	e8 74 dc ff ff       	call   c0002491 <mount_volume>
c000481d:	89 c7                	mov    edi,eax
c000481f:	85 c0                	test   eax,eax
c0004821:	0f 85 df 00 00 00    	jne    c0004906 <f_getfree+0xff>
c0004827:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000482b:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000482f:	89 30                	mov    DWORD PTR [eax],esi
c0004831:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0004834:	8b 6e 18             	mov    ebp,DWORD PTR [esi+0x18]
c0004837:	8d 55 fe             	lea    edx,[ebp-0x2]
c000483a:	39 d0                	cmp    eax,edx
c000483c:	77 0b                	ja     c0004849 <f_getfree+0x42>
c000483e:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c0004842:	89 01                	mov    DWORD PTR [ecx],eax
c0004844:	e9 bd 00 00 00       	jmp    c0004906 <f_getfree+0xff>
c0004849:	80 3e 01             	cmp    BYTE PTR [esi],0x1
c000484c:	75 29                	jne    c0004877 <f_getfree+0x70>
c000484e:	bd 02 00 00 00       	mov    ebp,0x2
c0004853:	31 db                	xor    ebx,ebx
c0004855:	89 ea                	mov    edx,ebp
c0004857:	89 f0                	mov    eax,esi
c0004859:	e8 b6 e9 ff ff       	call   c0003214 <get_fat.isra.2>
c000485e:	83 f8 ff             	cmp    eax,0xffffffff
c0004861:	74 7d                	je     c00048e0 <f_getfree+0xd9>
c0004863:	83 f8 01             	cmp    eax,0x1
c0004866:	74 7f                	je     c00048e7 <f_getfree+0xe0>
c0004868:	83 d3 00             	adc    ebx,0x0
c000486b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000486f:	45                   	inc    ebp
c0004870:	39 68 18             	cmp    DWORD PTR [eax+0x18],ebp
c0004873:	77 e0                	ja     c0004855 <f_getfree+0x4e>
c0004875:	eb 79                	jmp    c00048f0 <f_getfree+0xe9>
c0004877:	8b 56 24             	mov    edx,DWORD PTR [esi+0x24]
c000487a:	31 db                	xor    ebx,ebx
c000487c:	31 f6                	xor    esi,esi
c000487e:	85 f6                	test   esi,esi
c0004880:	75 18                	jne    c000489a <f_getfree+0x93>
c0004882:	8d 42 01             	lea    eax,[edx+0x1]
c0004885:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004889:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000488d:	e8 ac da ff ff       	call   c000233e <move_window>
c0004892:	85 c0                	test   eax,eax
c0004894:	75 58                	jne    c00048ee <f_getfree+0xe7>
c0004896:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000489a:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000489e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00048a2:	8d 44 31 34          	lea    eax,[ecx+esi*1+0x34]
c00048a6:	80 39 02             	cmp    BYTE PTR [ecx],0x2
c00048a9:	75 13                	jne    c00048be <f_getfree+0xb7>
c00048ab:	e8 27 d5 ff ff       	call   c0001dd7 <ld_word>
c00048b0:	0f b7 c0             	movzx  eax,ax
c00048b3:	83 f8 01             	cmp    eax,0x1
c00048b6:	83 d3 00             	adc    ebx,0x0
c00048b9:	83 c6 02             	add    esi,0x2
c00048bc:	eb 13                	jmp    c00048d1 <f_getfree+0xca>
c00048be:	e8 21 d5 ff ff       	call   c0001de4 <ld_dword>
c00048c3:	25 ff ff ff 0f       	and    eax,0xfffffff
c00048c8:	83 f8 01             	cmp    eax,0x1
c00048cb:	83 d3 00             	adc    ebx,0x0
c00048ce:	83 c6 04             	add    esi,0x4
c00048d1:	81 e6 ff 01 00 00    	and    esi,0x1ff
c00048d7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00048db:	4d                   	dec    ebp
c00048dc:	75 a0                	jne    c000487e <f_getfree+0x77>
c00048de:	eb 10                	jmp    c00048f0 <f_getfree+0xe9>
c00048e0:	bf 01 00 00 00       	mov    edi,0x1
c00048e5:	eb 09                	jmp    c00048f0 <f_getfree+0xe9>
c00048e7:	bf 02 00 00 00       	mov    edi,0x2
c00048ec:	eb 02                	jmp    c00048f0 <f_getfree+0xe9>
c00048ee:	89 c7                	mov    edi,eax
c00048f0:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00048f4:	89 18                	mov    DWORD PTR [eax],ebx
c00048f6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00048fa:	8a 50 04             	mov    dl,BYTE PTR [eax+0x4]
c00048fd:	89 58 14             	mov    DWORD PTR [eax+0x14],ebx
c0004900:	83 ca 01             	or     edx,0x1
c0004903:	88 50 04             	mov    BYTE PTR [eax+0x4],dl
c0004906:	83 c4 2c             	add    esp,0x2c
c0004909:	89 f8                	mov    eax,edi
c000490b:	5b                   	pop    ebx
c000490c:	5e                   	pop    esi
c000490d:	5f                   	pop    edi
c000490e:	5d                   	pop    ebp
c000490f:	c3                   	ret    

c0004910 <f_truncate>:
c0004910:	56                   	push   esi
c0004911:	53                   	push   ebx
c0004912:	83 ec 14             	sub    esp,0x14
c0004915:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0004919:	8d 54 24 0c          	lea    edx,[esp+0xc]
c000491d:	89 d8                	mov    eax,ebx
c000491f:	e8 71 d9 ff ff       	call   c0002295 <validate>
c0004924:	89 c6                	mov    esi,eax
c0004926:	85 c0                	test   eax,eax
c0004928:	0f 85 c4 00 00 00    	jne    c00049f2 <f_truncate+0xe2>
c000492e:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c0004932:	85 f6                	test   esi,esi
c0004934:	0f 85 b8 00 00 00    	jne    c00049f2 <f_truncate+0xe2>
c000493a:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c000493e:	0f 84 a9 00 00 00    	je     c00049ed <f_truncate+0xdd>
c0004944:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004947:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c000494a:	0f 83 a2 00 00 00    	jae    c00049f2 <f_truncate+0xe2>
c0004950:	85 c0                	test   eax,eax
c0004952:	75 15                	jne    c0004969 <f_truncate+0x59>
c0004954:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0004957:	31 c9                	xor    ecx,ecx
c0004959:	89 d8                	mov    eax,ebx
c000495b:	e8 bf eb ff ff       	call   c000351f <remove_chain>
c0004960:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0004967:	eb 35                	jmp    c000499e <f_truncate+0x8e>
c0004969:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000496c:	8b 03                	mov    eax,DWORD PTR [ebx]
c000496e:	e8 a1 e8 ff ff       	call   c0003214 <get_fat.isra.2>
c0004973:	89 c2                	mov    edx,eax
c0004975:	b8 01 00 00 00       	mov    eax,0x1
c000497a:	83 fa ff             	cmp    edx,0xffffffff
c000497d:	74 1f                	je     c000499e <f_truncate+0x8e>
c000497f:	b8 02 00 00 00       	mov    eax,0x2
c0004984:	83 fa 01             	cmp    edx,0x1
c0004987:	74 15                	je     c000499e <f_truncate+0x8e>
c0004989:	31 c0                	xor    eax,eax
c000498b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000498f:	39 51 18             	cmp    DWORD PTR [ecx+0x18],edx
c0004992:	76 0a                	jbe    c000499e <f_truncate+0x8e>
c0004994:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c0004997:	89 d8                	mov    eax,ebx
c0004999:	e8 81 eb ff ff       	call   c000351f <remove_chain>
c000499e:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00049a1:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00049a4:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c00049a7:	83 ca 40             	or     edx,0x40
c00049aa:	85 c0                	test   eax,eax
c00049ac:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c00049af:	75 35                	jne    c00049e6 <f_truncate+0xd6>
c00049b1:	80 e2 80             	and    dl,0x80
c00049b4:	74 3c                	je     c00049f2 <f_truncate+0xe2>
c00049b6:	6a 01                	push   0x1
c00049b8:	8d 43 28             	lea    eax,[ebx+0x28]
c00049bb:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00049be:	50                   	push   eax
c00049bf:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00049c3:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00049c7:	50                   	push   eax
c00049c8:	e8 d5 d3 ff ff       	call   c0001da2 <disk_write>
c00049cd:	83 c4 10             	add    esp,0x10
c00049d0:	85 c0                	test   eax,eax
c00049d2:	75 0d                	jne    c00049e1 <f_truncate+0xd1>
c00049d4:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00049d7:	31 f6                	xor    esi,esi
c00049d9:	83 e0 7f             	and    eax,0x7f
c00049dc:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00049df:	eb 11                	jmp    c00049f2 <f_truncate+0xe2>
c00049e1:	b8 01 00 00 00       	mov    eax,0x1
c00049e6:	88 43 11             	mov    BYTE PTR [ebx+0x11],al
c00049e9:	89 c6                	mov    esi,eax
c00049eb:	eb 05                	jmp    c00049f2 <f_truncate+0xe2>
c00049ed:	be 07 00 00 00       	mov    esi,0x7
c00049f2:	89 f0                	mov    eax,esi
c00049f4:	83 c4 14             	add    esp,0x14
c00049f7:	5b                   	pop    ebx
c00049f8:	5e                   	pop    esi
c00049f9:	c3                   	ret    

c00049fa <f_unlink>:
c00049fa:	55                   	push   ebp
c00049fb:	b9 02 00 00 00       	mov    ecx,0x2
c0004a00:	57                   	push   edi
c0004a01:	56                   	push   esi
c0004a02:	53                   	push   ebx
c0004a03:	81 ec 8c 00 00 00    	sub    esp,0x8c
c0004a09:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004a0d:	8d 84 24 a0 00 00 00 	lea    eax,[esp+0xa0]
c0004a14:	e8 78 da ff ff       	call   c0002491 <mount_volume>
c0004a19:	85 c0                	test   eax,eax
c0004a1b:	0f 85 f0 00 00 00    	jne    c0004b11 <f_unlink+0x117>
c0004a21:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004a25:	83 ec 0c             	sub    esp,0xc
c0004a28:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004a2c:	68 00 02 00 00       	push   0x200
c0004a31:	e8 ea 11 00 00       	call   c0005c20 <ff_memalloc>
c0004a36:	83 c4 10             	add    esp,0x10
c0004a39:	89 c3                	mov    ebx,eax
c0004a3b:	b8 11 00 00 00       	mov    eax,0x11
c0004a40:	85 db                	test   ebx,ebx
c0004a42:	0f 84 c9 00 00 00    	je     c0004b11 <f_unlink+0x117>
c0004a48:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004a4c:	8b 94 24 a0 00 00 00 	mov    edx,DWORD PTR [esp+0xa0]
c0004a53:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0004a56:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004a5a:	e8 7c ef ff ff       	call   c00039db <follow_path>
c0004a5f:	85 c0                	test   eax,eax
c0004a61:	0f 85 96 00 00 00    	jne    c0004afd <f_unlink+0x103>
c0004a67:	b8 06 00 00 00       	mov    eax,0x6
c0004a6c:	f6 44 24 4b 80       	test   BYTE PTR [esp+0x4b],0x80
c0004a71:	0f 85 86 00 00 00    	jne    c0004afd <f_unlink+0x103>
c0004a77:	0f b6 6c 24 26       	movzx  ebp,BYTE PTR [esp+0x26]
c0004a7c:	f7 c5 01 00 00 00    	test   ebp,0x1
c0004a82:	74 07                	je     c0004a8b <f_unlink+0x91>
c0004a84:	b8 07 00 00 00       	mov    eax,0x7
c0004a89:	eb 72                	jmp    c0004afd <f_unlink+0x103>
c0004a8b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0004a8f:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004a93:	8a 07                	mov    al,BYTE PTR [edi]
c0004a95:	e8 29 e7 ff ff       	call   c00031c3 <ld_clust.isra.0>
c0004a9a:	83 e5 10             	and    ebp,0x10
c0004a9d:	89 c6                	mov    esi,eax
c0004a9f:	75 0f                	jne    c0004ab0 <f_unlink+0xb6>
c0004aa1:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004aa5:	e8 95 ed ff ff       	call   c000383f <dir_remove>
c0004aaa:	85 c0                	test   eax,eax
c0004aac:	74 2f                	je     c0004add <f_unlink+0xe3>
c0004aae:	eb 4d                	jmp    c0004afd <f_unlink+0x103>
c0004ab0:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0004ab4:	31 d2                	xor    edx,edx
c0004ab6:	89 7c 24 50          	mov    DWORD PTR [esp+0x50],edi
c0004aba:	8d 44 24 50          	lea    eax,[esp+0x50]
c0004abe:	e8 55 e8 ff ff       	call   c0003318 <dir_sdi>
c0004ac3:	85 c0                	test   eax,eax
c0004ac5:	75 36                	jne    c0004afd <f_unlink+0x103>
c0004ac7:	31 d2                	xor    edx,edx
c0004ac9:	8d 44 24 50          	lea    eax,[esp+0x50]
c0004acd:	e8 45 ec ff ff       	call   c0003717 <dir_read>
c0004ad2:	85 c0                	test   eax,eax
c0004ad4:	74 ae                	je     c0004a84 <f_unlink+0x8a>
c0004ad6:	83 f8 04             	cmp    eax,0x4
c0004ad9:	75 22                	jne    c0004afd <f_unlink+0x103>
c0004adb:	eb c4                	jmp    c0004aa1 <f_unlink+0xa7>
c0004add:	85 f6                	test   esi,esi
c0004adf:	75 0b                	jne    c0004aec <f_unlink+0xf2>
c0004ae1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ae5:	e8 8b e2 ff ff       	call   c0002d75 <sync_fs>
c0004aea:	eb 11                	jmp    c0004afd <f_unlink+0x103>
c0004aec:	31 c9                	xor    ecx,ecx
c0004aee:	89 f2                	mov    edx,esi
c0004af0:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004af4:	e8 26 ea ff ff       	call   c000351f <remove_chain>
c0004af9:	85 c0                	test   eax,eax
c0004afb:	74 e4                	je     c0004ae1 <f_unlink+0xe7>
c0004afd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004b01:	83 ec 0c             	sub    esp,0xc
c0004b04:	53                   	push   ebx
c0004b05:	e8 2e 11 00 00       	call   c0005c38 <ff_memfree>
c0004b0a:	83 c4 10             	add    esp,0x10
c0004b0d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b11:	81 c4 8c 00 00 00    	add    esp,0x8c
c0004b17:	5b                   	pop    ebx
c0004b18:	5e                   	pop    esi
c0004b19:	5f                   	pop    edi
c0004b1a:	5d                   	pop    ebp
c0004b1b:	c3                   	ret    

c0004b1c <f_mkdir>:
c0004b1c:	57                   	push   edi
c0004b1d:	b9 02 00 00 00       	mov    ecx,0x2
c0004b22:	56                   	push   esi
c0004b23:	53                   	push   ebx
c0004b24:	83 ec 50             	sub    esp,0x50
c0004b27:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004b2b:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004b2f:	e8 5d d9 ff ff       	call   c0002491 <mount_volume>
c0004b34:	89 c3                	mov    ebx,eax
c0004b36:	85 c0                	test   eax,eax
c0004b38:	0f 85 70 01 00 00    	jne    c0004cae <f_mkdir+0x192>
c0004b3e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b42:	bb 11 00 00 00       	mov    ebx,0x11
c0004b47:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0004b4b:	83 ec 0c             	sub    esp,0xc
c0004b4e:	68 00 02 00 00       	push   0x200
c0004b53:	e8 c8 10 00 00       	call   c0005c20 <ff_memalloc>
c0004b58:	83 c4 10             	add    esp,0x10
c0004b5b:	89 c7                	mov    edi,eax
c0004b5d:	85 c0                	test   eax,eax
c0004b5f:	0f 84 49 01 00 00    	je     c0004cae <f_mkdir+0x192>
c0004b65:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b69:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004b6d:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c0004b70:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004b74:	e8 62 ee ff ff       	call   c00039db <follow_path>
c0004b79:	89 c3                	mov    ebx,eax
c0004b7b:	85 c0                	test   eax,eax
c0004b7d:	74 3e                	je     c0004bbd <f_mkdir+0xa1>
c0004b7f:	83 f8 04             	cmp    eax,0x4
c0004b82:	75 3e                	jne    c0004bc2 <f_mkdir+0xa6>
c0004b84:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b88:	31 d2                	xor    edx,edx
c0004b8a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004b8e:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004b92:	e8 49 e8 ff ff       	call   c00033e0 <create_chain>
c0004b97:	89 c6                	mov    esi,eax
c0004b99:	85 c0                	test   eax,eax
c0004b9b:	74 0c                	je     c0004ba9 <f_mkdir+0x8d>
c0004b9d:	bb 02 00 00 00       	mov    ebx,0x2
c0004ba2:	83 f8 01             	cmp    eax,0x1
c0004ba5:	74 07                	je     c0004bae <f_mkdir+0x92>
c0004ba7:	eb 2a                	jmp    c0004bd3 <f_mkdir+0xb7>
c0004ba9:	bb 07 00 00 00       	mov    ebx,0x7
c0004bae:	31 c9                	xor    ecx,ecx
c0004bb0:	89 f2                	mov    edx,esi
c0004bb2:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004bb6:	e8 64 e9 ff ff       	call   c000351f <remove_chain>
c0004bbb:	eb 05                	jmp    c0004bc2 <f_mkdir+0xa6>
c0004bbd:	bb 08 00 00 00       	mov    ebx,0x8
c0004bc2:	83 ec 0c             	sub    esp,0xc
c0004bc5:	57                   	push   edi
c0004bc6:	e8 6d 10 00 00       	call   c0005c38 <ff_memfree>
c0004bcb:	83 c4 10             	add    esp,0x10
c0004bce:	e9 db 00 00 00       	jmp    c0004cae <f_mkdir+0x192>
c0004bd3:	bb 01 00 00 00       	mov    ebx,0x1
c0004bd8:	83 f8 ff             	cmp    eax,0xffffffff
c0004bdb:	74 d1                	je     c0004bae <f_mkdir+0x92>
c0004bdd:	89 f2                	mov    edx,esi
c0004bdf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004be3:	e8 f1 dc ff ff       	call   c00028d9 <dir_clear>
c0004be8:	89 c3                	mov    ebx,eax
c0004bea:	85 c0                	test   eax,eax
c0004bec:	75 c0                	jne    c0004bae <f_mkdir+0x92>
c0004bee:	b9 0b 00 00 00       	mov    ecx,0xb
c0004bf3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004bf7:	ba 20 00 00 00       	mov    edx,0x20
c0004bfc:	83 c0 34             	add    eax,0x34
c0004bff:	e8 14 d2 ff ff       	call   c0001e18 <mem_set>
c0004c04:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c08:	ba 00 00 21 50       	mov    edx,0x50210000
c0004c0d:	c6 40 34 2e          	mov    BYTE PTR [eax+0x34],0x2e
c0004c11:	c6 40 3f 10          	mov    BYTE PTR [eax+0x3f],0x10
c0004c15:	83 c0 4a             	add    eax,0x4a
c0004c18:	e8 e3 d1 ff ff       	call   c0001e00 <st_dword>
c0004c1d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c21:	89 f1                	mov    ecx,esi
c0004c23:	8d 50 34             	lea    edx,[eax+0x34]
c0004c26:	e8 c1 e5 ff ff       	call   c00031ec <st_clust.isra.1>
c0004c2b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c2f:	b9 20 00 00 00       	mov    ecx,0x20
c0004c34:	8d 50 34             	lea    edx,[eax+0x34]
c0004c37:	83 c0 54             	add    eax,0x54
c0004c3a:	e8 c4 d1 ff ff       	call   c0001e03 <mem_cpy>
c0004c3f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c43:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0004c47:	8d 50 54             	lea    edx,[eax+0x54]
c0004c4a:	c6 40 55 2e          	mov    BYTE PTR [eax+0x55],0x2e
c0004c4e:	e8 99 e5 ff ff       	call   c00031ec <st_clust.isra.1>
c0004c53:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c57:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004c5b:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004c5f:	e8 0c ee ff ff       	call   c0003a70 <dir_register>
c0004c64:	89 c3                	mov    ebx,eax
c0004c66:	85 c0                	test   eax,eax
c0004c68:	0f 85 40 ff ff ff    	jne    c0004bae <f_mkdir+0x92>
c0004c6e:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004c72:	ba 00 00 21 50       	mov    edx,0x50210000
c0004c77:	83 c0 16             	add    eax,0x16
c0004c7a:	e8 81 d1 ff ff       	call   c0001e00 <st_dword>
c0004c7f:	89 f1                	mov    ecx,esi
c0004c81:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004c85:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c89:	e8 5e e5 ff ff       	call   c00031ec <st_clust.isra.1>
c0004c8e:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004c92:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c0004c96:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c9a:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004c9e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004ca2:	e8 ce e0 ff ff       	call   c0002d75 <sync_fs>
c0004ca7:	89 c3                	mov    ebx,eax
c0004ca9:	e9 14 ff ff ff       	jmp    c0004bc2 <f_mkdir+0xa6>
c0004cae:	83 c4 50             	add    esp,0x50
c0004cb1:	89 d8                	mov    eax,ebx
c0004cb3:	5b                   	pop    ebx
c0004cb4:	5e                   	pop    esi
c0004cb5:	5f                   	pop    edi
c0004cb6:	c3                   	ret    

c0004cb7 <f_rename>:
c0004cb7:	57                   	push   edi
c0004cb8:	56                   	push   esi
c0004cb9:	53                   	push   ebx
c0004cba:	81 ec a0 00 00 00    	sub    esp,0xa0
c0004cc0:	8d 84 24 b4 00 00 00 	lea    eax,[esp+0xb4]
c0004cc7:	e8 7c d5 ff ff       	call   c0002248 <get_ldnumber>
c0004ccc:	b9 02 00 00 00       	mov    ecx,0x2
c0004cd1:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004cd5:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c0004cdc:	e8 b0 d7 ff ff       	call   c0002491 <mount_volume>
c0004ce1:	85 c0                	test   eax,eax
c0004ce3:	0f 85 7c 01 00 00    	jne    c0004e65 <f_rename+0x1ae>
c0004ce9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ced:	83 ec 0c             	sub    esp,0xc
c0004cf0:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0004cf4:	68 00 02 00 00       	push   0x200
c0004cf9:	e8 22 0f 00 00       	call   c0005c20 <ff_memalloc>
c0004cfe:	83 c4 10             	add    esp,0x10
c0004d01:	89 c6                	mov    esi,eax
c0004d03:	b8 11 00 00 00       	mov    eax,0x11
c0004d08:	85 f6                	test   esi,esi
c0004d0a:	0f 84 55 01 00 00    	je     c0004e65 <f_rename+0x1ae>
c0004d10:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004d14:	8b 94 24 b0 00 00 00 	mov    edx,DWORD PTR [esp+0xb0]
c0004d1b:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004d1e:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004d22:	e8 b4 ec ff ff       	call   c00039db <follow_path>
c0004d27:	85 c0                	test   eax,eax
c0004d29:	0f 85 22 01 00 00    	jne    c0004e51 <f_rename+0x19a>
c0004d2f:	8a 54 24 6b          	mov    dl,BYTE PTR [esp+0x6b]
c0004d33:	b8 06 00 00 00       	mov    eax,0x6
c0004d38:	80 e2 a0             	and    dl,0xa0
c0004d3b:	0f 85 10 01 00 00    	jne    c0004e51 <f_rename+0x19a>
c0004d41:	b9 20 00 00 00       	mov    ecx,0x20
c0004d46:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004d4a:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004d4e:	e8 b0 d0 ff ff       	call   c0001e03 <mem_cpy>
c0004d53:	b9 30 00 00 00       	mov    ecx,0x30
c0004d58:	8d 54 24 40          	lea    edx,[esp+0x40]
c0004d5c:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004d60:	e8 9e d0 ff ff       	call   c0001e03 <mem_cpy>
c0004d65:	8b 94 24 b4 00 00 00 	mov    edx,DWORD PTR [esp+0xb4]
c0004d6c:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004d70:	e8 66 ec ff ff       	call   c00039db <follow_path>
c0004d75:	85 c0                	test   eax,eax
c0004d77:	75 20                	jne    c0004d99 <f_rename+0xe2>
c0004d79:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0004d7d:	b8 08 00 00 00       	mov    eax,0x8
c0004d82:	39 7c 24 78          	cmp    DWORD PTR [esp+0x78],edi
c0004d86:	0f 85 c5 00 00 00    	jne    c0004e51 <f_rename+0x19a>
c0004d8c:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0004d90:	39 8c 24 80 00 00 00 	cmp    DWORD PTR [esp+0x80],ecx
c0004d97:	eb 03                	jmp    c0004d9c <f_rename+0xe5>
c0004d99:	83 f8 04             	cmp    eax,0x4
c0004d9c:	0f 85 af 00 00 00    	jne    c0004e51 <f_rename+0x19a>
c0004da2:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004da6:	e8 c5 ec ff ff       	call   c0003a70 <dir_register>
c0004dab:	85 c0                	test   eax,eax
c0004dad:	0f 85 9e 00 00 00    	jne    c0004e51 <f_rename+0x19a>
c0004db3:	8b 9c 24 8c 00 00 00 	mov    ebx,DWORD PTR [esp+0x8c]
c0004dba:	b9 13 00 00 00       	mov    ecx,0x13
c0004dbf:	8d 43 0d             	lea    eax,[ebx+0xd]
c0004dc2:	8d 54 24 2d          	lea    edx,[esp+0x2d]
c0004dc6:	e8 38 d0 ff ff       	call   c0001e03 <mem_cpy>
c0004dcb:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c0004dcf:	a8 10                	test   al,0x10
c0004dd1:	75 03                	jne    c0004dd6 <f_rename+0x11f>
c0004dd3:	83 c8 20             	or     eax,0x20
c0004dd6:	88 43 0b             	mov    BYTE PTR [ebx+0xb],al
c0004dd9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ddd:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004de1:	f6 43 0b 10          	test   BYTE PTR [ebx+0xb],0x10
c0004de5:	74 54                	je     c0004e3b <f_rename+0x184>
c0004de7:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0004deb:	39 44 24 48          	cmp    DWORD PTR [esp+0x48],eax
c0004def:	74 4a                	je     c0004e3b <f_rename+0x184>
c0004df1:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0004df5:	89 da                	mov    edx,ebx
c0004df7:	8a 07                	mov    al,BYTE PTR [edi]
c0004df9:	e8 c5 e3 ff ff       	call   c00031c3 <ld_clust.isra.0>
c0004dfe:	89 c2                	mov    edx,eax
c0004e00:	89 f8                	mov    eax,edi
c0004e02:	e8 27 d2 ff ff       	call   c000202e <clst2sect>
c0004e07:	89 c2                	mov    edx,eax
c0004e09:	b8 02 00 00 00       	mov    eax,0x2
c0004e0e:	85 d2                	test   edx,edx
c0004e10:	74 3f                	je     c0004e51 <f_rename+0x19a>
c0004e12:	89 f8                	mov    eax,edi
c0004e14:	e8 25 d5 ff ff       	call   c000233e <move_window>
c0004e19:	85 c0                	test   eax,eax
c0004e1b:	75 34                	jne    c0004e51 <f_rename+0x19a>
c0004e1d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e21:	80 78 55 2e          	cmp    BYTE PTR [eax+0x55],0x2e
c0004e25:	75 14                	jne    c0004e3b <f_rename+0x184>
c0004e27:	8d 50 54             	lea    edx,[eax+0x54]
c0004e2a:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c0004e2e:	e8 b9 e3 ff ff       	call   c00031ec <st_clust.isra.1>
c0004e33:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e37:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004e3b:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004e3f:	e8 fb e9 ff ff       	call   c000383f <dir_remove>
c0004e44:	85 c0                	test   eax,eax
c0004e46:	75 09                	jne    c0004e51 <f_rename+0x19a>
c0004e48:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e4c:	e8 24 df ff ff       	call   c0002d75 <sync_fs>
c0004e51:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004e55:	83 ec 0c             	sub    esp,0xc
c0004e58:	56                   	push   esi
c0004e59:	e8 da 0d 00 00       	call   c0005c38 <ff_memfree>
c0004e5e:	83 c4 10             	add    esp,0x10
c0004e61:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e65:	81 c4 a0 00 00 00    	add    esp,0xa0
c0004e6b:	5b                   	pop    ebx
c0004e6c:	5e                   	pop    esi
c0004e6d:	5f                   	pop    edi
c0004e6e:	c3                   	ret    

c0004e6f <f_chmod>:
c0004e6f:	57                   	push   edi
c0004e70:	b9 02 00 00 00       	mov    ecx,0x2
c0004e75:	56                   	push   esi
c0004e76:	53                   	push   ebx
c0004e77:	83 ec 50             	sub    esp,0x50
c0004e7a:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c0004e7e:	8b 5c 24 68          	mov    ebx,DWORD PTR [esp+0x68]
c0004e82:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004e86:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004e8a:	e8 02 d6 ff ff       	call   c0002491 <mount_volume>
c0004e8f:	85 c0                	test   eax,eax
c0004e91:	0f 85 81 00 00 00    	jne    c0004f18 <f_chmod+0xa9>
c0004e97:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e9b:	83 ec 0c             	sub    esp,0xc
c0004e9e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004ea2:	68 00 02 00 00       	push   0x200
c0004ea7:	e8 74 0d 00 00       	call   c0005c20 <ff_memalloc>
c0004eac:	83 c4 10             	add    esp,0x10
c0004eaf:	89 c6                	mov    esi,eax
c0004eb1:	b8 11 00 00 00       	mov    eax,0x11
c0004eb6:	85 f6                	test   esi,esi
c0004eb8:	74 5e                	je     c0004f18 <f_chmod+0xa9>
c0004eba:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ebe:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004ec2:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004ec5:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004ec9:	e8 0d eb ff ff       	call   c00039db <follow_path>
c0004ece:	85 c0                	test   eax,eax
c0004ed0:	75 32                	jne    c0004f04 <f_chmod+0x95>
c0004ed2:	8a 54 24 4b          	mov    dl,BYTE PTR [esp+0x4b]
c0004ed6:	b8 06 00 00 00       	mov    eax,0x6
c0004edb:	80 e2 a0             	and    dl,0xa0
c0004ede:	75 24                	jne    c0004f04 <f_chmod+0x95>
c0004ee0:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004ee4:	8a 50 0b             	mov    dl,BYTE PTR [eax+0xb]
c0004ee7:	31 d7                	xor    edi,edx
c0004ee9:	21 fb                	and    ebx,edi
c0004eeb:	83 e3 27             	and    ebx,0x27
c0004eee:	31 d3                	xor    ebx,edx
c0004ef0:	88 58 0b             	mov    BYTE PTR [eax+0xb],bl
c0004ef3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ef7:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004efb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004eff:	e8 71 de ff ff       	call   c0002d75 <sync_fs>
c0004f04:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004f08:	83 ec 0c             	sub    esp,0xc
c0004f0b:	56                   	push   esi
c0004f0c:	e8 27 0d 00 00       	call   c0005c38 <ff_memfree>
c0004f11:	83 c4 10             	add    esp,0x10
c0004f14:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004f18:	83 c4 50             	add    esp,0x50
c0004f1b:	5b                   	pop    ebx
c0004f1c:	5e                   	pop    esi
c0004f1d:	5f                   	pop    edi
c0004f1e:	c3                   	ret    

c0004f1f <f_utime>:
c0004f1f:	56                   	push   esi
c0004f20:	b9 02 00 00 00       	mov    ecx,0x2
c0004f25:	53                   	push   ebx
c0004f26:	83 ec 54             	sub    esp,0x54
c0004f29:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c0004f2d:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004f31:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004f35:	e8 57 d5 ff ff       	call   c0002491 <mount_volume>
c0004f3a:	85 c0                	test   eax,eax
c0004f3c:	0f 85 87 00 00 00    	jne    c0004fc9 <f_utime+0xaa>
c0004f42:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004f46:	83 ec 0c             	sub    esp,0xc
c0004f49:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004f4d:	68 00 02 00 00       	push   0x200
c0004f52:	e8 c9 0c 00 00       	call   c0005c20 <ff_memalloc>
c0004f57:	83 c4 10             	add    esp,0x10
c0004f5a:	89 c3                	mov    ebx,eax
c0004f5c:	b8 11 00 00 00       	mov    eax,0x11
c0004f61:	85 db                	test   ebx,ebx
c0004f63:	74 64                	je     c0004fc9 <f_utime+0xaa>
c0004f65:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004f69:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004f6d:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0004f70:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004f74:	e8 62 ea ff ff       	call   c00039db <follow_path>
c0004f79:	85 c0                	test   eax,eax
c0004f7b:	75 38                	jne    c0004fb5 <f_utime+0x96>
c0004f7d:	8a 54 24 4b          	mov    dl,BYTE PTR [esp+0x4b]
c0004f81:	b8 06 00 00 00       	mov    eax,0x6
c0004f86:	80 e2 a0             	and    dl,0xa0
c0004f89:	75 2a                	jne    c0004fb5 <f_utime+0x96>
c0004f8b:	0f b7 46 06          	movzx  eax,WORD PTR [esi+0x6]
c0004f8f:	0f b7 56 04          	movzx  edx,WORD PTR [esi+0x4]
c0004f93:	c1 e2 10             	shl    edx,0x10
c0004f96:	09 c2                	or     edx,eax
c0004f98:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004f9c:	83 c0 16             	add    eax,0x16
c0004f9f:	e8 5c ce ff ff       	call   c0001e00 <st_dword>
c0004fa4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004fa8:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004fac:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004fb0:	e8 c0 dd ff ff       	call   c0002d75 <sync_fs>
c0004fb5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004fb9:	83 ec 0c             	sub    esp,0xc
c0004fbc:	53                   	push   ebx
c0004fbd:	e8 76 0c 00 00       	call   c0005c38 <ff_memfree>
c0004fc2:	83 c4 10             	add    esp,0x10
c0004fc5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004fc9:	83 c4 54             	add    esp,0x54
c0004fcc:	5b                   	pop    ebx
c0004fcd:	5e                   	pop    esi
c0004fce:	c3                   	ret    

c0004fcf <f_getlabel>:
c0004fcf:	55                   	push   ebp
c0004fd0:	31 c9                	xor    ecx,ecx
c0004fd2:	57                   	push   edi
c0004fd3:	56                   	push   esi
c0004fd4:	53                   	push   ebx
c0004fd5:	83 ec 5c             	sub    esp,0x5c
c0004fd8:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004fdc:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004fe0:	e8 ac d4 ff ff       	call   c0002491 <mount_volume>
c0004fe5:	89 c6                	mov    esi,eax
c0004fe7:	85 c0                	test   eax,eax
c0004fe9:	0f 85 27 01 00 00    	jne    c0005116 <f_getlabel+0x147>
c0004fef:	83 7c 24 74 00       	cmp    DWORD PTR [esp+0x74],0x0
c0004ff4:	0f 84 d0 00 00 00    	je     c00050ca <f_getlabel+0xfb>
c0004ffa:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ffe:	31 d2                	xor    edx,edx
c0005000:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0005004:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c000500c:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005010:	e8 03 e3 ff ff       	call   c0003318 <dir_sdi>
c0005015:	85 c0                	test   eax,eax
c0005017:	0f 85 a1 00 00 00    	jne    c00050be <f_getlabel+0xef>
c000501d:	ba 01 00 00 00       	mov    edx,0x1
c0005022:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005026:	e8 ec e6 ff ff       	call   c0003717 <dir_read>
c000502b:	85 c0                	test   eax,eax
c000502d:	0f 85 8b 00 00 00    	jne    c00050be <f_getlabel+0xef>
c0005033:	31 db                	xor    ebx,ebx
c0005035:	31 c9                	xor    ecx,ecx
c0005037:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c000503b:	8d 79 01             	lea    edi,[ecx+0x1]
c000503e:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0005043:	0f b6 54 0d 00       	movzx  edx,BYTE PTR [ebp+ecx*1+0x0]
c0005048:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000504c:	e8 06 ce ff ff       	call   c0001e57 <dbc_1st>
c0005051:	85 c0                	test   eax,eax
c0005053:	74 16                	je     c000506b <f_getlabel+0x9c>
c0005055:	83 ff 0b             	cmp    edi,0xb
c0005058:	74 11                	je     c000506b <f_getlabel+0x9c>
c000505a:	0f b6 54 3d 00       	movzx  edx,BYTE PTR [ebp+edi*1+0x0]
c000505f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005063:	8d 79 02             	lea    edi,[ecx+0x2]
c0005066:	c1 e0 08             	shl    eax,0x8
c0005069:	09 c2                	or     edx,eax
c000506b:	0f b7 d2             	movzx  edx,dx
c000506e:	50                   	push   eax
c000506f:	50                   	push   eax
c0005070:	68 b5 01 00 00       	push   0x1b5
c0005075:	52                   	push   edx
c0005076:	e8 75 0c 00 00       	call   c0005cf0 <ff_oem2uni>
c000507b:	83 c4 10             	add    esp,0x10
c000507e:	0f b7 c0             	movzx  eax,ax
c0005081:	85 c0                	test   eax,eax
c0005083:	74 22                	je     c00050a7 <f_getlabel+0xd8>
c0005085:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0005089:	b9 04 00 00 00       	mov    ecx,0x4
c000508e:	01 da                	add    edx,ebx
c0005090:	e8 a0 ce ff ff       	call   c0001f35 <put_utf>
c0005095:	0f b6 c0             	movzx  eax,al
c0005098:	85 c0                	test   eax,eax
c000509a:	74 0b                	je     c00050a7 <f_getlabel+0xd8>
c000509c:	01 c3                	add    ebx,eax
c000509e:	83 ff 0b             	cmp    edi,0xb
c00050a1:	74 06                	je     c00050a9 <f_getlabel+0xda>
c00050a3:	89 f9                	mov    ecx,edi
c00050a5:	eb 90                	jmp    c0005037 <f_getlabel+0x68>
c00050a7:	31 db                	xor    ebx,ebx
c00050a9:	03 5c 24 74          	add    ebx,DWORD PTR [esp+0x74]
c00050ad:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c00050b0:	39 5c 24 74          	cmp    DWORD PTR [esp+0x74],ebx
c00050b4:	74 14                	je     c00050ca <f_getlabel+0xfb>
c00050b6:	4b                   	dec    ebx
c00050b7:	80 3b 20             	cmp    BYTE PTR [ebx],0x20
c00050ba:	74 f1                	je     c00050ad <f_getlabel+0xde>
c00050bc:	eb 0c                	jmp    c00050ca <f_getlabel+0xfb>
c00050be:	83 f8 04             	cmp    eax,0x4
c00050c1:	75 51                	jne    c0005114 <f_getlabel+0x145>
c00050c3:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c00050c7:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00050ca:	83 7c 24 78 00       	cmp    DWORD PTR [esp+0x78],0x0
c00050cf:	74 45                	je     c0005116 <f_getlabel+0x147>
c00050d1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00050d5:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c00050d8:	e8 61 d2 ff ff       	call   c000233e <move_window>
c00050dd:	89 c6                	mov    esi,eax
c00050df:	85 c0                	test   eax,eax
c00050e1:	75 33                	jne    c0005116 <f_getlabel+0x147>
c00050e3:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00050e7:	b8 43 00 00 00       	mov    eax,0x43
c00050ec:	0f b6 0a             	movzx  ecx,BYTE PTR [edx]
c00050ef:	83 f9 03             	cmp    ecx,0x3
c00050f2:	74 0f                	je     c0005103 <f_getlabel+0x134>
c00050f4:	31 c0                	xor    eax,eax
c00050f6:	83 f9 04             	cmp    ecx,0x4
c00050f9:	0f 94 c0             	sete   al
c00050fc:	48                   	dec    eax
c00050fd:	83 e0 c3             	and    eax,0xffffffc3
c0005100:	83 c0 64             	add    eax,0x64
c0005103:	8d 44 02 34          	lea    eax,[edx+eax*1+0x34]
c0005107:	e8 d8 cc ff ff       	call   c0001de4 <ld_dword>
c000510c:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0005110:	89 07                	mov    DWORD PTR [edi],eax
c0005112:	eb 02                	jmp    c0005116 <f_getlabel+0x147>
c0005114:	89 c6                	mov    esi,eax
c0005116:	83 c4 5c             	add    esp,0x5c
c0005119:	89 f0                	mov    eax,esi
c000511b:	5b                   	pop    ebx
c000511c:	5e                   	pop    esi
c000511d:	5f                   	pop    edi
c000511e:	5d                   	pop    ebp
c000511f:	c3                   	ret    

c0005120 <f_setlabel>:
c0005120:	57                   	push   edi
c0005121:	b9 02 00 00 00       	mov    ecx,0x2
c0005126:	56                   	push   esi
c0005127:	53                   	push   ebx
c0005128:	83 ec 50             	sub    esp,0x50
c000512b:	8d 54 24 04          	lea    edx,[esp+0x4]
c000512f:	8d 44 24 60          	lea    eax,[esp+0x60]
c0005133:	e8 59 d3 ff ff       	call   c0002491 <mount_volume>
c0005138:	89 c6                	mov    esi,eax
c000513a:	85 c0                	test   eax,eax
c000513c:	0f 85 65 01 00 00    	jne    c00052a7 <f_setlabel+0x187>
c0005142:	b9 0b 00 00 00       	mov    ecx,0xb
c0005147:	ba 20 00 00 00       	mov    edx,0x20
c000514c:	8d 44 24 0a          	lea    eax,[esp+0xa]
c0005150:	31 db                	xor    ebx,ebx
c0005152:	e8 c1 cc ff ff       	call   c0001e18 <mem_set>
c0005157:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000515b:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c000515e:	76 5d                	jbe    c00051bd <f_setlabel+0x9d>
c0005160:	8d 44 24 60          	lea    eax,[esp+0x60]
c0005164:	e8 f4 cc ff ff       	call   c0001e5d <tchar2uni>
c0005169:	3d ff ff 00 00       	cmp    eax,0xffff
c000516e:	76 0a                	jbe    c000517a <f_setlabel+0x5a>
c0005170:	be 06 00 00 00       	mov    esi,0x6
c0005175:	e9 2d 01 00 00       	jmp    c00052a7 <f_setlabel+0x187>
c000517a:	83 ec 0c             	sub    esp,0xc
c000517d:	50                   	push   eax
c000517e:	e8 e5 0b 00 00       	call   c0005d68 <ff_wtoupper>
c0005183:	5a                   	pop    edx
c0005184:	59                   	pop    ecx
c0005185:	68 b5 01 00 00       	push   0x1b5
c000518a:	50                   	push   eax
c000518b:	e8 c0 0a 00 00       	call   c0005c50 <ff_uni2oem>
c0005190:	83 c4 10             	add    esp,0x10
c0005193:	0f b7 f0             	movzx  esi,ax
c0005196:	89 f7                	mov    edi,esi
c0005198:	85 f6                	test   esi,esi
c000519a:	74 d4                	je     c0005170 <f_setlabel+0x50>
c000519c:	89 f2                	mov    edx,esi
c000519e:	b8 90 05 02 c0       	mov    eax,0xc0020590
c00051a3:	e8 9e cc ff ff       	call   c0001e46 <chk_chr>
c00051a8:	85 c0                	test   eax,eax
c00051aa:	75 c4                	jne    c0005170 <f_setlabel+0x50>
c00051ac:	81 fe ff 00 00 00    	cmp    esi,0xff
c00051b2:	0f 87 c9 00 00 00    	ja     c0005281 <f_setlabel+0x161>
c00051b8:	e9 e0 00 00 00       	jmp    c000529d <f_setlabel+0x17d>
c00051bd:	80 7c 24 0a e5       	cmp    BYTE PTR [esp+0xa],0xe5
c00051c2:	74 ac                	je     c0005170 <f_setlabel+0x50>
c00051c4:	85 db                	test   ebx,ebx
c00051c6:	74 0e                	je     c00051d6 <f_setlabel+0xb6>
c00051c8:	8d 43 ff             	lea    eax,[ebx-0x1]
c00051cb:	80 7c 1c 09 20       	cmp    BYTE PTR [esp+ebx*1+0x9],0x20
c00051d0:	75 04                	jne    c00051d6 <f_setlabel+0xb6>
c00051d2:	89 c3                	mov    ebx,eax
c00051d4:	eb ee                	jmp    c00051c4 <f_setlabel+0xa4>
c00051d6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00051da:	31 d2                	xor    edx,edx
c00051dc:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00051e0:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c00051e8:	8d 44 24 20          	lea    eax,[esp+0x20]
c00051ec:	e8 27 e1 ff ff       	call   c0003318 <dir_sdi>
c00051f1:	89 c6                	mov    esi,eax
c00051f3:	85 c0                	test   eax,eax
c00051f5:	0f 85 ac 00 00 00    	jne    c00052a7 <f_setlabel+0x187>
c00051fb:	ba 01 00 00 00       	mov    edx,0x1
c0005200:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005204:	e8 0e e5 ff ff       	call   c0003717 <dir_read>
c0005209:	85 c0                	test   eax,eax
c000520b:	75 18                	jne    c0005225 <f_setlabel+0x105>
c000520d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0005211:	85 db                	test   ebx,ebx
c0005213:	74 0b                	je     c0005220 <f_setlabel+0x100>
c0005215:	b9 0b 00 00 00       	mov    ecx,0xb
c000521a:	8d 54 24 0a          	lea    edx,[esp+0xa]
c000521e:	eb 47                	jmp    c0005267 <f_setlabel+0x147>
c0005220:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c0005223:	eb 47                	jmp    c000526c <f_setlabel+0x14c>
c0005225:	83 f8 04             	cmp    eax,0x4
c0005228:	75 53                	jne    c000527d <f_setlabel+0x15d>
c000522a:	85 db                	test   ebx,ebx
c000522c:	74 79                	je     c00052a7 <f_setlabel+0x187>
c000522e:	ba 01 00 00 00       	mov    edx,0x1
c0005233:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005237:	e8 76 e4 ff ff       	call   c00036b2 <dir_alloc>
c000523c:	89 c6                	mov    esi,eax
c000523e:	85 c0                	test   eax,eax
c0005240:	75 65                	jne    c00052a7 <f_setlabel+0x187>
c0005242:	b9 20 00 00 00       	mov    ecx,0x20
c0005247:	31 d2                	xor    edx,edx
c0005249:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000524d:	e8 c6 cb ff ff       	call   c0001e18 <mem_set>
c0005252:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0005256:	b9 0b 00 00 00       	mov    ecx,0xb
c000525b:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c000525f:	8d 54 24 0a          	lea    edx,[esp+0xa]
c0005263:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0005267:	e8 97 cb ff ff       	call   c0001e03 <mem_cpy>
c000526c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005270:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005274:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005278:	e8 f8 da ff ff       	call   c0002d75 <sync_fs>
c000527d:	89 c6                	mov    esi,eax
c000527f:	eb 26                	jmp    c00052a7 <f_setlabel+0x187>
c0005281:	83 fb 09             	cmp    ebx,0x9
c0005284:	0f 87 e6 fe ff ff    	ja     c0005170 <f_setlabel+0x50>
c000528a:	89 f0                	mov    eax,esi
c000528c:	88 64 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],ah
c0005290:	43                   	inc    ebx
c0005291:	89 f8                	mov    eax,edi
c0005293:	88 44 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],al
c0005297:	43                   	inc    ebx
c0005298:	e9 ba fe ff ff       	jmp    c0005157 <f_setlabel+0x37>
c000529d:	83 fb 0a             	cmp    ebx,0xa
c00052a0:	76 ef                	jbe    c0005291 <f_setlabel+0x171>
c00052a2:	e9 c9 fe ff ff       	jmp    c0005170 <f_setlabel+0x50>
c00052a7:	83 c4 50             	add    esp,0x50
c00052aa:	89 f0                	mov    eax,esi
c00052ac:	5b                   	pop    ebx
c00052ad:	5e                   	pop    esi
c00052ae:	5f                   	pop    edi
c00052af:	c3                   	ret    

c00052b0 <f_expand>:
c00052b0:	55                   	push   ebp
c00052b1:	57                   	push   edi
c00052b2:	56                   	push   esi
c00052b3:	53                   	push   ebx
c00052b4:	83 ec 2c             	sub    esp,0x2c
c00052b7:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00052bb:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00052bf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00052c3:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00052c7:	89 d8                	mov    eax,ebx
c00052c9:	e8 c7 cf ff ff       	call   c0002295 <validate>
c00052ce:	89 c6                	mov    esi,eax
c00052d0:	85 c0                	test   eax,eax
c00052d2:	0f 85 3b 01 00 00    	jne    c0005413 <f_expand+0x163>
c00052d8:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c00052dc:	85 f6                	test   esi,esi
c00052de:	0f 85 2f 01 00 00    	jne    c0005413 <f_expand+0x163>
c00052e4:	83 7c 24 44 00       	cmp    DWORD PTR [esp+0x44],0x0
c00052e9:	75 0a                	jne    c00052f5 <f_expand+0x45>
c00052eb:	be 07 00 00 00       	mov    esi,0x7
c00052f0:	e9 1e 01 00 00       	jmp    c0005413 <f_expand+0x163>
c00052f5:	83 7b 0c 00          	cmp    DWORD PTR [ebx+0xc],0x0
c00052f9:	75 f0                	jne    c00052eb <f_expand+0x3b>
c00052fb:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c00052ff:	74 ea                	je     c00052eb <f_expand+0x3b>
c0005301:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
c0005305:	0f b7 4d 0a          	movzx  ecx,WORD PTR [ebp+0xa]
c0005309:	c1 e1 09             	shl    ecx,0x9
c000530c:	8d 41 ff             	lea    eax,[ecx-0x1]
c000530f:	85 44 24 44          	test   DWORD PTR [esp+0x44],eax
c0005313:	0f 95 c0             	setne  al
c0005316:	31 d2                	xor    edx,edx
c0005318:	0f b6 c0             	movzx  eax,al
c000531b:	89 c7                	mov    edi,eax
c000531d:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005321:	f7 f1                	div    ecx
c0005323:	01 f8                	add    eax,edi
c0005325:	8b 7d 10             	mov    edi,DWORD PTR [ebp+0x10]
c0005328:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000532c:	83 ff 01             	cmp    edi,0x1
c000532f:	76 05                	jbe    c0005336 <f_expand+0x86>
c0005331:	39 7d 18             	cmp    DWORD PTR [ebp+0x18],edi
c0005334:	77 05                	ja     c000533b <f_expand+0x8b>
c0005336:	bf 02 00 00 00       	mov    edi,0x2
c000533b:	89 3c 24             	mov    DWORD PTR [esp],edi
c000533e:	89 fd                	mov    ebp,edi
c0005340:	31 c9                	xor    ecx,ecx
c0005342:	89 ea                	mov    edx,ebp
c0005344:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005348:	8b 03                	mov    eax,DWORD PTR [ebx]
c000534a:	45                   	inc    ebp
c000534b:	e8 c4 de ff ff       	call   c0003214 <get_fat.isra.2>
c0005350:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0005354:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0005358:	39 6a 18             	cmp    DWORD PTR [edx+0x18],ebp
c000535b:	77 05                	ja     c0005362 <f_expand+0xb2>
c000535d:	bd 02 00 00 00       	mov    ebp,0x2
c0005362:	83 f8 01             	cmp    eax,0x1
c0005365:	74 20                	je     c0005387 <f_expand+0xd7>
c0005367:	83 f8 ff             	cmp    eax,0xffffffff
c000536a:	74 25                	je     c0005391 <f_expand+0xe1>
c000536c:	85 c0                	test   eax,eax
c000536e:	75 09                	jne    c0005379 <f_expand+0xc9>
c0005370:	41                   	inc    ecx
c0005371:	39 4c 24 04          	cmp    DWORD PTR [esp+0x4],ecx
c0005375:	75 07                	jne    c000537e <f_expand+0xce>
c0005377:	eb 1f                	jmp    c0005398 <f_expand+0xe8>
c0005379:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000537c:	31 c9                	xor    ecx,ecx
c000537e:	39 fd                	cmp    ebp,edi
c0005380:	75 c0                	jne    c0005342 <f_expand+0x92>
c0005382:	e9 64 ff ff ff       	jmp    c00052eb <f_expand+0x3b>
c0005387:	be 02 00 00 00       	mov    esi,0x2
c000538c:	e9 82 00 00 00       	jmp    c0005413 <f_expand+0x163>
c0005391:	be 01 00 00 00       	mov    esi,0x1
c0005396:	eb 7b                	jmp    c0005413 <f_expand+0x163>
c0005398:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c000539d:	74 2b                	je     c00053ca <f_expand+0x11a>
c000539f:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00053a2:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c00053a6:	85 ed                	test   ebp,ebp
c00053a8:	74 24                	je     c00053ce <f_expand+0x11e>
c00053aa:	83 c9 ff             	or     ecx,0xffffffff
c00053ad:	83 fd 01             	cmp    ebp,0x1
c00053b0:	74 03                	je     c00053b5 <f_expand+0x105>
c00053b2:	8d 4f 01             	lea    ecx,[edi+0x1]
c00053b5:	89 fa                	mov    edx,edi
c00053b7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00053bb:	e8 c2 d3 ff ff       	call   c0002782 <put_fat>
c00053c0:	85 c0                	test   eax,eax
c00053c2:	75 4d                	jne    c0005411 <f_expand+0x161>
c00053c4:	89 f8                	mov    eax,edi
c00053c6:	4d                   	dec    ebp
c00053c7:	47                   	inc    edi
c00053c8:	eb dc                	jmp    c00053a6 <f_expand+0xf6>
c00053ca:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00053cd:	48                   	dec    eax
c00053ce:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00053d2:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c00053d7:	89 42 10             	mov    DWORD PTR [edx+0x10],eax
c00053da:	74 37                	je     c0005413 <f_expand+0x163>
c00053dc:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00053df:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00053e2:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00053e6:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c00053e9:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00053ec:	83 c8 40             	or     eax,0x40
c00053ef:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00053f2:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c00053f5:	8b 5a 18             	mov    ebx,DWORD PTR [edx+0x18]
c00053f8:	8d 4b fe             	lea    ecx,[ebx-0x2]
c00053fb:	39 c8                	cmp    eax,ecx
c00053fd:	77 14                	ja     c0005413 <f_expand+0x163>
c00053ff:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c0005403:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0005406:	8a 42 04             	mov    al,BYTE PTR [edx+0x4]
c0005409:	83 c8 01             	or     eax,0x1
c000540c:	88 42 04             	mov    BYTE PTR [edx+0x4],al
c000540f:	eb 02                	jmp    c0005413 <f_expand+0x163>
c0005411:	89 c6                	mov    esi,eax
c0005413:	83 c4 2c             	add    esp,0x2c
c0005416:	89 f0                	mov    eax,esi
c0005418:	5b                   	pop    ebx
c0005419:	5e                   	pop    esi
c000541a:	5f                   	pop    edi
c000541b:	5d                   	pop    ebp
c000541c:	c3                   	ret    

c000541d <f_mkfs>:
c000541d:	55                   	push   ebp
c000541e:	57                   	push   edi
c000541f:	56                   	push   esi
c0005420:	be 0b 00 00 00       	mov    esi,0xb
c0005425:	53                   	push   ebx
c0005426:	83 ec 5c             	sub    esp,0x5c
c0005429:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c000542d:	8b 6c 24 78          	mov    ebp,DWORD PTR [esp+0x78]
c0005431:	8d 44 24 70          	lea    eax,[esp+0x70]
c0005435:	e8 0e ce ff ff       	call   c0002248 <get_ldnumber>
c000543a:	85 c0                	test   eax,eax
c000543c:	0f 88 d1 07 00 00    	js     c0005c13 <f_mkfs+0x7f6>
c0005442:	8b 14 85 a0 64 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd9b60]
c0005449:	85 d2                	test   edx,edx
c000544b:	74 03                	je     c0005450 <f_mkfs+0x33>
c000544d:	c6 02 00             	mov    BYTE PTR [edx],0x0
c0005450:	85 db                	test   ebx,ebx
c0005452:	75 05                	jne    c0005459 <f_mkfs+0x3c>
c0005454:	bb 80 05 02 c0       	mov    ebx,0xc0020580
c0005459:	83 ec 0c             	sub    esp,0xc
c000545c:	0f b6 c0             	movzx  eax,al
c000545f:	be 03 00 00 00       	mov    esi,0x3
c0005464:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005468:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000546c:	e8 18 c9 ff ff       	call   c0001d89 <disk_initialize>
c0005471:	83 c4 10             	add    esp,0x10
c0005474:	a8 01                	test   al,0x1
c0005476:	0f 85 97 07 00 00    	jne    c0005c13 <f_mkfs+0x7f6>
c000547c:	be 0a 00 00 00       	mov    esi,0xa
c0005481:	a8 04                	test   al,0x4
c0005483:	0f 85 8a 07 00 00    	jne    c0005c13 <f_mkfs+0x7f6>
c0005489:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000548c:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0005490:	85 c0                	test   eax,eax
c0005492:	75 20                	jne    c00054b4 <f_mkfs+0x97>
c0005494:	51                   	push   ecx
c0005495:	8d 44 24 44          	lea    eax,[esp+0x44]
c0005499:	50                   	push   eax
c000549a:	6a 03                	push   0x3
c000549c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00054a0:	e8 13 c9 ff ff       	call   c0001db8 <disk_ioctl>
c00054a5:	83 c4 10             	add    esp,0x10
c00054a8:	85 c0                	test   eax,eax
c00054aa:	74 08                	je     c00054b4 <f_mkfs+0x97>
c00054ac:	c7 44 24 40 01 00 00 00 	mov    DWORD PTR [esp+0x40],0x1
c00054b4:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00054b8:	8d 42 ff             	lea    eax,[edx-0x1]
c00054bb:	3d ff 7f 00 00       	cmp    eax,0x7fff
c00054c0:	77 04                	ja     c00054c6 <f_mkfs+0xa9>
c00054c2:	85 c2                	test   edx,eax
c00054c4:	74 08                	je     c00054ce <f_mkfs+0xb1>
c00054c6:	c7 44 24 40 01 00 00 00 	mov    DWORD PTR [esp+0x40],0x1
c00054ce:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c00054d1:	88 44 24 2c          	mov    BYTE PTR [esp+0x2c],al
c00054d5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00054d9:	48                   	dec    eax
c00054da:	3c 01                	cmp    al,0x1
c00054dc:	76 05                	jbe    c00054e3 <f_mkfs+0xc6>
c00054de:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c00054e3:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00054e6:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00054ea:	48                   	dec    eax
c00054eb:	3d ff 7f 00 00       	cmp    eax,0x7fff
c00054f0:	77 07                	ja     c00054f9 <f_mkfs+0xdc>
c00054f2:	f6 44 24 14 0f       	test   BYTE PTR [esp+0x14],0xf
c00054f7:	74 08                	je     c0005501 <f_mkfs+0xe4>
c00054f9:	c7 44 24 14 00 02 00 00 	mov    DWORD PTR [esp+0x14],0x200
c0005501:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c0005504:	81 ff 00 00 00 01    	cmp    edi,0x1000000
c000550a:	77 07                	ja     c0005513 <f_mkfs+0xf6>
c000550c:	8d 47 ff             	lea    eax,[edi-0x1]
c000550f:	85 f8                	test   eax,edi
c0005511:	74 02                	je     c0005515 <f_mkfs+0xf8>
c0005513:	31 ff                	xor    edi,edi
c0005515:	81 7c 24 7c ff 01 00 00 	cmp    DWORD PTR [esp+0x7c],0x1ff
c000551d:	77 0a                	ja     c0005529 <f_mkfs+0x10c>
c000551f:	be 11 00 00 00       	mov    esi,0x11
c0005524:	e9 ea 06 00 00       	jmp    c0005c13 <f_mkfs+0x7f6>
c0005529:	8b 33                	mov    esi,DWORD PTR [ebx]
c000552b:	85 ed                	test   ebp,ebp
c000552d:	89 eb                	mov    ebx,ebp
c000552f:	75 1e                	jne    c000554f <f_mkfs+0x132>
c0005531:	83 ec 0c             	sub    esp,0xc
c0005534:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c000553b:	25 00 fe ff ff       	and    eax,0xfffffe00
c0005540:	50                   	push   eax
c0005541:	e8 da 06 00 00       	call   c0005c20 <ff_memalloc>
c0005546:	83 c4 10             	add    esp,0x10
c0005549:	89 c3                	mov    ebx,eax
c000554b:	85 c0                	test   eax,eax
c000554d:	74 d0                	je     c000551f <f_mkfs+0x102>
c000554f:	c7 44 24 44 00 00 00 00 	mov    DWORD PTR [esp+0x44],0x0
c0005557:	52                   	push   edx
c0005558:	8d 44 24 48          	lea    eax,[esp+0x48]
c000555c:	50                   	push   eax
c000555d:	6a 01                	push   0x1
c000555f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005563:	e8 50 c8 ff ff       	call   c0001db8 <disk_ioctl>
c0005568:	83 c4 10             	add    esp,0x10
c000556b:	85 c0                	test   eax,eax
c000556d:	0f 85 49 06 00 00    	jne    c0005bbc <f_mkfs+0x79f>
c0005573:	89 f0                	mov    eax,esi
c0005575:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000557d:	83 e0 08             	and    eax,0x8
c0005580:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0005584:	75 18                	jne    c000559e <f_mkfs+0x181>
c0005586:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000558a:	83 f8 3f             	cmp    eax,0x3f
c000558d:	76 0f                	jbe    c000559e <f_mkfs+0x181>
c000558f:	83 e8 3f             	sub    eax,0x3f
c0005592:	c7 44 24 10 3f 00 00 00 	mov    DWORD PTR [esp+0x10],0x3f
c000559a:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000559e:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00055a2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00055a6:	83 f8 7f             	cmp    eax,0x7f
c00055a9:	0f 86 5b 02 00 00    	jbe    c000580a <f_mkfs+0x3ed>
c00055af:	b9 80 00 00 00       	mov    ecx,0x80
c00055b4:	81 ff ff 01 01 00    	cmp    edi,0x101ff
c00055ba:	77 05                	ja     c00055c1 <f_mkfs+0x1a4>
c00055bc:	c1 ef 09             	shr    edi,0x9
c00055bf:	89 f9                	mov    ecx,edi
c00055c1:	89 f0                	mov    eax,esi
c00055c3:	89 f7                	mov    edi,esi
c00055c5:	83 e0 01             	and    eax,0x1
c00055c8:	83 e7 02             	and    edi,0x2
c00055cb:	0f b6 c0             	movzx  eax,al
c00055ce:	89 7c 24 38          	mov    DWORD PTR [esp+0x38],edi
c00055d2:	74 0a                	je     c00055de <f_mkfs+0x1c1>
c00055d4:	85 c0                	test   eax,eax
c00055d6:	0f 84 4f 01 00 00    	je     c000572b <f_mkfs+0x30e>
c00055dc:	eb 37                	jmp    c0005615 <f_mkfs+0x1f8>
c00055de:	be 13 00 00 00       	mov    esi,0x13
c00055e3:	85 c0                	test   eax,eax
c00055e5:	75 2e                	jne    c0005615 <f_mkfs+0x1f8>
c00055e7:	e9 e7 05 00 00       	jmp    c0005bd3 <f_mkfs+0x7b6>
c00055ec:	83 f8 02             	cmp    eax,0x2
c00055ef:	0f 85 0d 02 00 00    	jne    c0005802 <f_mkfs+0x3e5>
c00055f5:	81 fe f5 ff 00 00    	cmp    esi,0xfff5
c00055fb:	0f 86 e4 01 00 00    	jbe    c00057e5 <f_mkfs+0x3c8>
c0005601:	85 c9                	test   ecx,ecx
c0005603:	0f 85 dc 05 00 00    	jne    c0005be5 <f_mkfs+0x7c8>
c0005609:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c000560c:	83 f9 40             	cmp    ecx,0x40
c000560f:	0f 87 e0 05 00 00    	ja     c0005bf5 <f_mkfs+0x7d8>
c0005615:	89 cf                	mov    edi,ecx
c0005617:	85 c9                	test   ecx,ecx
c0005619:	75 1c                	jne    c0005637 <f_mkfs+0x21a>
c000561b:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000561f:	b8 60 05 02 c0       	mov    eax,0xc0020560
c0005624:	c1 ee 0c             	shr    esi,0xc
c0005627:	bf 01 00 00 00       	mov    edi,0x1
c000562c:	0f b7 10             	movzx  edx,WORD PTR [eax]
c000562f:	85 d2                	test   edx,edx
c0005631:	0f 85 63 01 00 00    	jne    c000579a <f_mkfs+0x37d>
c0005637:	31 d2                	xor    edx,edx
c0005639:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000563d:	f7 f7                	div    edi
c000563f:	3d f5 0f 00 00       	cmp    eax,0xff5
c0005644:	0f 86 62 01 00 00    	jbe    c00057ac <f_mkfs+0x38f>
c000564a:	83 c0 02             	add    eax,0x2
c000564d:	c6 44 24 0b 02       	mov    BYTE PTR [esp+0xb],0x2
c0005652:	01 c0                	add    eax,eax
c0005654:	05 ff 01 00 00       	add    eax,0x1ff
c0005659:	c7 44 24 24 01 00 00 00 	mov    DWORD PTR [esp+0x24],0x1
c0005661:	c1 e8 09             	shr    eax,0x9
c0005664:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005668:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000566c:	c1 e0 05             	shl    eax,0x5
c000566f:	c1 e8 09             	shr    eax,0x9
c0005672:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0005676:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c000567b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000567f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005683:	03 44 24 24          	add    eax,DWORD PTR [esp+0x24]
c0005687:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000568b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000568f:	0f af 44 24 28       	imul   eax,DWORD PTR [esp+0x28]
c0005694:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c0005698:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c000569c:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00056a0:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00056a4:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00056a8:	8d 74 10 ff          	lea    esi,[eax+edx*1-0x1]
c00056ac:	f7 d8                	neg    eax
c00056ae:	21 c6                	and    esi,eax
c00056b0:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c00056b5:	29 d6                	sub    esi,edx
c00056b7:	83 f8 03             	cmp    eax,0x3
c00056ba:	0f 85 ff 00 00 00    	jne    c00057bf <f_mkfs+0x3a2>
c00056c0:	01 74 24 24          	add    DWORD PTR [esp+0x24],esi
c00056c4:	01 74 24 20          	add    DWORD PTR [esp+0x20],esi
c00056c8:	89 f8                	mov    eax,edi
c00056ca:	c1 e0 04             	shl    eax,0x4
c00056cd:	2b 44 24 10          	sub    eax,DWORD PTR [esp+0x10]
c00056d1:	03 44 24 34          	add    eax,DWORD PTR [esp+0x34]
c00056d5:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c00056d9:	0f 82 2b 01 00 00    	jb     c000580a <f_mkfs+0x3ed>
c00056df:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00056e3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00056e7:	2b 44 24 30          	sub    eax,DWORD PTR [esp+0x30]
c00056eb:	0f af 54 24 28       	imul   edx,DWORD PTR [esp+0x28]
c00056f0:	2b 44 24 24          	sub    eax,DWORD PTR [esp+0x24]
c00056f4:	29 d0                	sub    eax,edx
c00056f6:	31 d2                	xor    edx,edx
c00056f8:	f7 f7                	div    edi
c00056fa:	89 c6                	mov    esi,eax
c00056fc:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005701:	83 f8 03             	cmp    eax,0x3
c0005704:	0f 85 e2 fe ff ff    	jne    c00055ec <f_mkfs+0x1cf>
c000570a:	81 fe f5 ff 00 00    	cmp    esi,0xfff5
c0005710:	0f 87 03 01 00 00    	ja     c0005819 <f_mkfs+0x3fc>
c0005716:	85 c9                	test   ecx,ecx
c0005718:	0f 85 ec 00 00 00    	jne    c000580a <f_mkfs+0x3ed>
c000571e:	83 ff 01             	cmp    edi,0x1
c0005721:	0f 86 e3 00 00 00    	jbe    c000580a <f_mkfs+0x3ed>
c0005727:	d1 ef                	shr    edi,1
c0005729:	89 f9                	mov    ecx,edi
c000572b:	89 ce                	mov    esi,ecx
c000572d:	85 c9                	test   ecx,ecx
c000572f:	75 25                	jne    c0005756 <f_mkfs+0x339>
c0005731:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0005735:	b8 70 05 02 c0       	mov    eax,0xc0020570
c000573a:	c1 ee 11             	shr    esi,0x11
c000573d:	b9 01 00 00 00       	mov    ecx,0x1
c0005742:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0005745:	85 d2                	test   edx,edx
c0005747:	74 0b                	je     c0005754 <f_mkfs+0x337>
c0005749:	83 c0 02             	add    eax,0x2
c000574c:	39 f2                	cmp    edx,esi
c000574e:	77 04                	ja     c0005754 <f_mkfs+0x337>
c0005750:	01 c9                	add    ecx,ecx
c0005752:	eb ee                	jmp    c0005742 <f_mkfs+0x325>
c0005754:	31 f6                	xor    esi,esi
c0005756:	31 d2                	xor    edx,edx
c0005758:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000575c:	f7 f1                	div    ecx
c000575e:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c0005765:	2d f6 ff 00 00       	sub    eax,0xfff6
c000576a:	c1 ea 09             	shr    edx,0x9
c000576d:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c0005772:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0005776:	0f 87 8e 00 00 00    	ja     c000580a <f_mkfs+0x3ed>
c000577c:	89 cf                	mov    edi,ecx
c000577e:	c7 44 24 30 00 00 00 00 	mov    DWORD PTR [esp+0x30],0x0
c0005786:	89 f1                	mov    ecx,esi
c0005788:	c7 44 24 24 20 00 00 00 	mov    DWORD PTR [esp+0x24],0x20
c0005790:	c6 44 24 0b 03       	mov    BYTE PTR [esp+0xb],0x3
c0005795:	e9 dc fe ff ff       	jmp    c0005676 <f_mkfs+0x259>
c000579a:	83 c0 02             	add    eax,0x2
c000579d:	39 f2                	cmp    edx,esi
c000579f:	0f 87 92 fe ff ff    	ja     c0005637 <f_mkfs+0x21a>
c00057a5:	01 ff                	add    edi,edi
c00057a7:	e9 80 fe ff ff       	jmp    c000562c <f_mkfs+0x20f>
c00057ac:	8d 04 40             	lea    eax,[eax+eax*2]
c00057af:	c6 44 24 0b 01       	mov    BYTE PTR [esp+0xb],0x1
c00057b4:	40                   	inc    eax
c00057b5:	d1 e8                	shr    eax,1
c00057b7:	83 c0 03             	add    eax,0x3
c00057ba:	e9 95 fe ff ff       	jmp    c0005654 <f_mkfs+0x237>
c00057bf:	31 d2                	xor    edx,edx
c00057c1:	89 f0                	mov    eax,esi
c00057c3:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c00057c7:	85 d2                	test   edx,edx
c00057c9:	74 09                	je     c00057d4 <f_mkfs+0x3b7>
c00057cb:	4e                   	dec    esi
c00057cc:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c00057d0:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c00057d4:	89 f0                	mov    eax,esi
c00057d6:	31 d2                	xor    edx,edx
c00057d8:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c00057dc:	01 44 24 18          	add    DWORD PTR [esp+0x18],eax
c00057e0:	e9 e3 fe ff ff       	jmp    c00056c8 <f_mkfs+0x2ab>
c00057e5:	81 fe f5 0f 00 00    	cmp    esi,0xff5
c00057eb:	77 2c                	ja     c0005819 <f_mkfs+0x3fc>
c00057ed:	85 c9                	test   ecx,ecx
c00057ef:	75 19                	jne    c000580a <f_mkfs+0x3ed>
c00057f1:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c00057f4:	81 f9 80 00 00 00    	cmp    ecx,0x80
c00057fa:	0f 86 15 fe ff ff    	jbe    c0005615 <f_mkfs+0x1f8>
c0005800:	eb 08                	jmp    c000580a <f_mkfs+0x3ed>
c0005802:	81 fe f5 0f 00 00    	cmp    esi,0xff5
c0005808:	76 0a                	jbe    c0005814 <f_mkfs+0x3f7>
c000580a:	be 0e 00 00 00       	mov    esi,0xe
c000580f:	e9 bf 03 00 00       	jmp    c0005bd3 <f_mkfs+0x7b6>
c0005814:	c6 44 24 0b 01       	mov    BYTE PTR [esp+0xb],0x1
c0005819:	31 d2                	xor    edx,edx
c000581b:	b9 00 02 00 00       	mov    ecx,0x200
c0005820:	89 d8                	mov    eax,ebx
c0005822:	e8 f1 c5 ff ff       	call   c0001e18 <mem_set>
c0005827:	b9 0b 00 00 00       	mov    ecx,0xb
c000582c:	ba 12 05 02 c0       	mov    edx,0xc0020512
c0005831:	89 d8                	mov    eax,ebx
c0005833:	e8 cb c5 ff ff       	call   c0001e03 <mem_cpy>
c0005838:	8d 43 0b             	lea    eax,[ebx+0xb]
c000583b:	ba 00 02 00 00       	mov    edx,0x200
c0005840:	e8 b7 c5 ff ff       	call   c0001dfc <st_word>
c0005845:	89 f8                	mov    eax,edi
c0005847:	0f b7 54 24 24       	movzx  edx,WORD PTR [esp+0x24]
c000584c:	88 43 0d             	mov    BYTE PTR [ebx+0xd],al
c000584f:	8d 43 0e             	lea    eax,[ebx+0xe]
c0005852:	e8 a5 c5 ff ff       	call   c0001dfc <st_word>
c0005857:	8a 44 24 2c          	mov    al,BYTE PTR [esp+0x2c]
c000585b:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c000585e:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005863:	83 f8 03             	cmp    eax,0x3
c0005866:	75 08                	jne    c0005870 <f_mkfs+0x453>
c0005868:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0005870:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0005874:	8d 43 11             	lea    eax,[ebx+0x11]
c0005877:	e8 80 c5 ff ff       	call   c0001dfc <st_word>
c000587c:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0005880:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0005886:	77 0a                	ja     c0005892 <f_mkfs+0x475>
c0005888:	8d 43 13             	lea    eax,[ebx+0x13]
c000588b:	e8 6c c5 ff ff       	call   c0001dfc <st_word>
c0005890:	eb 08                	jmp    c000589a <f_mkfs+0x47d>
c0005892:	8d 43 20             	lea    eax,[ebx+0x20]
c0005895:	e8 66 c5 ff ff       	call   c0001e00 <st_dword>
c000589a:	8d 43 18             	lea    eax,[ebx+0x18]
c000589d:	ba 3f 00 00 00       	mov    edx,0x3f
c00058a2:	c6 43 15 f8          	mov    BYTE PTR [ebx+0x15],0xf8
c00058a6:	e8 51 c5 ff ff       	call   c0001dfc <st_word>
c00058ab:	8d 43 1a             	lea    eax,[ebx+0x1a]
c00058ae:	ba ff 00 00 00       	mov    edx,0xff
c00058b3:	e8 44 c5 ff ff       	call   c0001dfc <st_word>
c00058b8:	8d 43 1c             	lea    eax,[ebx+0x1c]
c00058bb:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00058bf:	e8 3c c5 ff ff       	call   c0001e00 <st_dword>
c00058c4:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c00058c9:	83 f8 03             	cmp    eax,0x3
c00058cc:	75 57                	jne    c0005925 <f_mkfs+0x508>
c00058ce:	8d 43 43             	lea    eax,[ebx+0x43]
c00058d1:	ba 00 00 21 50       	mov    edx,0x50210000
c00058d6:	e8 25 c5 ff ff       	call   c0001e00 <st_dword>
c00058db:	8d 43 24             	lea    eax,[ebx+0x24]
c00058de:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00058e2:	e8 19 c5 ff ff       	call   c0001e00 <st_dword>
c00058e7:	8d 43 2c             	lea    eax,[ebx+0x2c]
c00058ea:	ba 02 00 00 00       	mov    edx,0x2
c00058ef:	e8 0c c5 ff ff       	call   c0001e00 <st_dword>
c00058f4:	8d 43 30             	lea    eax,[ebx+0x30]
c00058f7:	ba 01 00 00 00       	mov    edx,0x1
c00058fc:	e8 fb c4 ff ff       	call   c0001dfc <st_word>
c0005901:	8d 43 32             	lea    eax,[ebx+0x32]
c0005904:	ba 06 00 00 00       	mov    edx,0x6
c0005909:	e8 ee c4 ff ff       	call   c0001dfc <st_word>
c000590e:	c6 43 40 80          	mov    BYTE PTR [ebx+0x40],0x80
c0005912:	c6 43 42 29          	mov    BYTE PTR [ebx+0x42],0x29
c0005916:	8d 43 47             	lea    eax,[ebx+0x47]
c0005919:	b9 13 00 00 00       	mov    ecx,0x13
c000591e:	ba 1e 05 02 c0       	mov    edx,0xc002051e
c0005923:	eb 2f                	jmp    c0005954 <f_mkfs+0x537>
c0005925:	8d 43 27             	lea    eax,[ebx+0x27]
c0005928:	ba 00 00 21 50       	mov    edx,0x50210000
c000592d:	e8 ce c4 ff ff       	call   c0001e00 <st_dword>
c0005932:	0f b7 54 24 18       	movzx  edx,WORD PTR [esp+0x18]
c0005937:	8d 43 16             	lea    eax,[ebx+0x16]
c000593a:	e8 bd c4 ff ff       	call   c0001dfc <st_word>
c000593f:	c6 43 24 80          	mov    BYTE PTR [ebx+0x24],0x80
c0005943:	c6 43 26 29          	mov    BYTE PTR [ebx+0x26],0x29
c0005947:	8d 43 2b             	lea    eax,[ebx+0x2b]
c000594a:	b9 13 00 00 00       	mov    ecx,0x13
c000594f:	ba 32 05 02 c0       	mov    edx,0xc0020532
c0005954:	e8 aa c4 ff ff       	call   c0001e03 <mem_cpy>
c0005959:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c000595f:	ba 55 aa 00 00       	mov    edx,0xaa55
c0005964:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005968:	e8 8f c4 ff ff       	call   c0001dfc <st_word>
c000596d:	6a 01                	push   0x1
c000596f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005973:	53                   	push   ebx
c0005974:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005978:	e8 25 c4 ff ff       	call   c0001da2 <disk_write>
c000597d:	83 c4 10             	add    esp,0x10
c0005980:	85 c0                	test   eax,eax
c0005982:	0f 85 34 02 00 00    	jne    c0005bbc <f_mkfs+0x79f>
c0005988:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c000598d:	83 f8 03             	cmp    eax,0x3
c0005990:	0f 85 98 00 00 00    	jne    c0005a2e <f_mkfs+0x611>
c0005996:	6a 01                	push   0x1
c0005998:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000599c:	83 c0 06             	add    eax,0x6
c000599f:	50                   	push   eax
c00059a0:	53                   	push   ebx
c00059a1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00059a5:	e8 f8 c3 ff ff       	call   c0001da2 <disk_write>
c00059aa:	b9 00 02 00 00       	mov    ecx,0x200
c00059af:	31 d2                	xor    edx,edx
c00059b1:	89 d8                	mov    eax,ebx
c00059b3:	e8 60 c4 ff ff       	call   c0001e18 <mem_set>
c00059b8:	ba 52 52 61 41       	mov    edx,0x41615252
c00059bd:	89 d8                	mov    eax,ebx
c00059bf:	e8 3c c4 ff ff       	call   c0001e00 <st_dword>
c00059c4:	8d 83 e4 01 00 00    	lea    eax,[ebx+0x1e4]
c00059ca:	ba 72 72 41 61       	mov    edx,0x61417272
c00059cf:	e8 2c c4 ff ff       	call   c0001e00 <st_dword>
c00059d4:	8d 56 ff             	lea    edx,[esi-0x1]
c00059d7:	8d 83 e8 01 00 00    	lea    eax,[ebx+0x1e8]
c00059dd:	e8 1e c4 ff ff       	call   c0001e00 <st_dword>
c00059e2:	8d 83 ec 01 00 00    	lea    eax,[ebx+0x1ec]
c00059e8:	ba 02 00 00 00       	mov    edx,0x2
c00059ed:	e8 0e c4 ff ff       	call   c0001e00 <st_dword>
c00059f2:	ba 55 aa 00 00       	mov    edx,0xaa55
c00059f7:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c00059fd:	e8 fa c3 ff ff       	call   c0001dfc <st_word>
c0005a02:	6a 01                	push   0x1
c0005a04:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0005a08:	83 c0 07             	add    eax,0x7
c0005a0b:	50                   	push   eax
c0005a0c:	53                   	push   ebx
c0005a0d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0005a11:	e8 8c c3 ff ff       	call   c0001da2 <disk_write>
c0005a16:	83 c4 20             	add    esp,0x20
c0005a19:	6a 01                	push   0x1
c0005a1b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005a1f:	40                   	inc    eax
c0005a20:	50                   	push   eax
c0005a21:	53                   	push   ebx
c0005a22:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005a26:	e8 77 c3 ff ff       	call   c0001da2 <disk_write>
c0005a2b:	83 c4 10             	add    esp,0x10
c0005a2e:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c0005a32:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0005a36:	c1 e8 09             	shr    eax,0x9
c0005a39:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c0005a3f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005a43:	31 d2                	xor    edx,edx
c0005a45:	89 d8                	mov    eax,ebx
c0005a47:	e8 cc c3 ff ff       	call   c0001e18 <mem_set>
c0005a4c:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005a51:	31 c9                	xor    ecx,ecx
c0005a53:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c0005a5b:	83 f8 01             	cmp    eax,0x1
c0005a5e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0005a62:	0f 94 c1             	sete   cl
c0005a65:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0005a69:	ff 4c 24 14          	dec    DWORD PTR [esp+0x14]
c0005a6d:	81 64 24 14 00 00 00 ff 	and    DWORD PTR [esp+0x14],0xff000000
c0005a75:	81 44 24 14 f8 ff ff 00 	add    DWORD PTR [esp+0x14],0xfffff8
c0005a7d:	83 7c 24 2c 03       	cmp    DWORD PTR [esp+0x2c],0x3
c0005a82:	75 21                	jne    c0005aa5 <f_mkfs+0x688>
c0005a84:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0005a89:	89 d8                	mov    eax,ebx
c0005a8b:	e8 70 c3 ff ff       	call   c0001e00 <st_dword>
c0005a90:	8d 43 04             	lea    eax,[ebx+0x4]
c0005a93:	83 ca ff             	or     edx,0xffffffff
c0005a96:	e8 65 c3 ff ff       	call   c0001e00 <st_dword>
c0005a9b:	8d 43 08             	lea    eax,[ebx+0x8]
c0005a9e:	ba ff ff ff 0f       	mov    edx,0xfffffff
c0005aa3:	eb 06                	jmp    c0005aab <f_mkfs+0x68e>
c0005aa5:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0005aa9:	89 d8                	mov    eax,ebx
c0005aab:	e8 50 c3 ff ff       	call   c0001e00 <st_dword>
c0005ab0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005ab4:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0005ab8:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0005abc:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005ac0:	39 ce                	cmp    esi,ecx
c0005ac2:	76 02                	jbe    c0005ac6 <f_mkfs+0x6a9>
c0005ac4:	89 ce                	mov    esi,ecx
c0005ac6:	56                   	push   esi
c0005ac7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0005acb:	53                   	push   ebx
c0005acc:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005ad0:	e8 cd c2 ff ff       	call   c0001da2 <disk_write>
c0005ad5:	83 c4 10             	add    esp,0x10
c0005ad8:	85 c0                	test   eax,eax
c0005ada:	0f 85 dc 00 00 00    	jne    c0005bbc <f_mkfs+0x79f>
c0005ae0:	31 d2                	xor    edx,edx
c0005ae2:	b9 00 02 00 00       	mov    ecx,0x200
c0005ae7:	89 d8                	mov    eax,ebx
c0005ae9:	e8 2a c3 ff ff       	call   c0001e18 <mem_set>
c0005aee:	01 74 24 20          	add    DWORD PTR [esp+0x20],esi
c0005af2:	29 74 24 1c          	sub    DWORD PTR [esp+0x1c],esi
c0005af6:	75 c0                	jne    c0005ab8 <f_mkfs+0x69b>
c0005af8:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0005afc:	c7 44 24 24 01 00 00 00 	mov    DWORD PTR [esp+0x24],0x1
c0005b04:	40                   	inc    eax
c0005b05:	39 44 24 28          	cmp    DWORD PTR [esp+0x28],eax
c0005b09:	0f 87 6e ff ff ff    	ja     c0005a7d <f_mkfs+0x660>
c0005b0f:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005b14:	83 f8 03             	cmp    eax,0x3
c0005b17:	74 04                	je     c0005b1d <f_mkfs+0x700>
c0005b19:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0005b1d:	89 fe                	mov    esi,edi
c0005b1f:	3b 7c 24 10          	cmp    edi,DWORD PTR [esp+0x10]
c0005b23:	76 04                	jbe    c0005b29 <f_mkfs+0x70c>
c0005b25:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0005b29:	56                   	push   esi
c0005b2a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0005b2e:	53                   	push   ebx
c0005b2f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005b33:	e8 6a c2 ff ff       	call   c0001da2 <disk_write>
c0005b38:	83 c4 10             	add    esp,0x10
c0005b3b:	85 c0                	test   eax,eax
c0005b3d:	75 7d                	jne    c0005bbc <f_mkfs+0x79f>
c0005b3f:	01 74 24 20          	add    DWORD PTR [esp+0x20],esi
c0005b43:	29 f7                	sub    edi,esi
c0005b45:	75 d6                	jne    c0005b1d <f_mkfs+0x700>
c0005b47:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005b4c:	b9 0c 00 00 00       	mov    ecx,0xc
c0005b51:	83 f8 03             	cmp    eax,0x3
c0005b54:	74 1e                	je     c0005b74 <f_mkfs+0x757>
c0005b56:	b9 06 00 00 00       	mov    ecx,0x6
c0005b5b:	81 7c 24 44 ff ff 00 00 	cmp    DWORD PTR [esp+0x44],0xffff
c0005b63:	77 0f                	ja     c0005b74 <f_mkfs+0x757>
c0005b65:	b9 04 00 00 00       	mov    ecx,0x4
c0005b6a:	83 f8 02             	cmp    eax,0x2
c0005b6d:	74 05                	je     c0005b74 <f_mkfs+0x757>
c0005b6f:	b9 01 00 00 00       	mov    ecx,0x1
c0005b74:	83 7c 24 3c 00       	cmp    DWORD PTR [esp+0x3c],0x0
c0005b79:	75 2a                	jne    c0005ba5 <f_mkfs+0x788>
c0005b7b:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005b7f:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c0005b87:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0005b8b:	83 ec 0c             	sub    esp,0xc
c0005b8e:	53                   	push   ebx
c0005b8f:	8d 54 24 58          	lea    edx,[esp+0x58]
c0005b93:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005b97:	e8 89 d2 ff ff       	call   c0002e25 <create_partition>
c0005b9c:	83 c4 10             	add    esp,0x10
c0005b9f:	89 c6                	mov    esi,eax
c0005ba1:	85 c0                	test   eax,eax
c0005ba3:	75 2e                	jne    c0005bd3 <f_mkfs+0x7b6>
c0005ba5:	31 f6                	xor    esi,esi
c0005ba7:	50                   	push   eax
c0005ba8:	6a 00                	push   0x0
c0005baa:	6a 00                	push   0x0
c0005bac:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005bb0:	e8 03 c2 ff ff       	call   c0001db8 <disk_ioctl>
c0005bb5:	83 c4 10             	add    esp,0x10
c0005bb8:	85 c0                	test   eax,eax
c0005bba:	74 17                	je     c0005bd3 <f_mkfs+0x7b6>
c0005bbc:	85 ed                	test   ebp,ebp
c0005bbe:	75 0c                	jne    c0005bcc <f_mkfs+0x7af>
c0005bc0:	83 ec 0c             	sub    esp,0xc
c0005bc3:	53                   	push   ebx
c0005bc4:	e8 6f 00 00 00       	call   c0005c38 <ff_memfree>
c0005bc9:	83 c4 10             	add    esp,0x10
c0005bcc:	be 01 00 00 00       	mov    esi,0x1
c0005bd1:	eb 40                	jmp    c0005c13 <f_mkfs+0x7f6>
c0005bd3:	85 ed                	test   ebp,ebp
c0005bd5:	75 3c                	jne    c0005c13 <f_mkfs+0x7f6>
c0005bd7:	83 ec 0c             	sub    esp,0xc
c0005bda:	53                   	push   ebx
c0005bdb:	e8 58 00 00 00       	call   c0005c38 <ff_memfree>
c0005be0:	83 c4 10             	add    esp,0x10
c0005be3:	eb 2e                	jmp    c0005c13 <f_mkfs+0x7f6>
c0005be5:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c0005bea:	0f 85 3b fb ff ff    	jne    c000572b <f_mkfs+0x30e>
c0005bf0:	e9 15 fc ff ff       	jmp    c000580a <f_mkfs+0x3ed>
c0005bf5:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c0005bfa:	0f 85 31 fb ff ff    	jne    c0005731 <f_mkfs+0x314>
c0005c00:	89 cf                	mov    edi,ecx
c0005c02:	81 f9 80 00 00 00    	cmp    ecx,0x80
c0005c08:	0f 86 29 fa ff ff    	jbe    c0005637 <f_mkfs+0x21a>
c0005c0e:	e9 f7 fb ff ff       	jmp    c000580a <f_mkfs+0x3ed>
c0005c13:	83 c4 5c             	add    esp,0x5c
c0005c16:	89 f0                	mov    eax,esi
c0005c18:	5b                   	pop    ebx
c0005c19:	5e                   	pop    esi
c0005c1a:	5f                   	pop    edi
c0005c1b:	5d                   	pop    ebp
c0005c1c:	c3                   	ret    
c0005c1d:	66 90                	xchg   ax,ax
c0005c1f:	90                   	nop

c0005c20 <ff_memalloc>:
c0005c20:	83 ec 0c             	sub    esp,0xc
c0005c23:	83 ec 0c             	sub    esp,0xc
c0005c26:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005c2a:	e8 87 1e 00 00       	call   c0007ab6 <malloc>
c0005c2f:	83 c4 10             	add    esp,0x10
c0005c32:	83 c4 0c             	add    esp,0xc
c0005c35:	c3                   	ret    
c0005c36:	66 90                	xchg   ax,ax

c0005c38 <ff_memfree>:
c0005c38:	83 ec 0c             	sub    esp,0xc
c0005c3b:	83 ec 0c             	sub    esp,0xc
c0005c3e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005c42:	e8 7f 1e 00 00       	call   c0007ac6 <free>
c0005c47:	83 c4 10             	add    esp,0x10
c0005c4a:	90                   	nop
c0005c4b:	83 c4 0c             	add    esp,0xc
c0005c4e:	c3                   	ret    
c0005c4f:	90                   	nop

c0005c50 <ff_uni2oem>:
c0005c50:	83 ec 14             	sub    esp,0x14
c0005c53:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005c57:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005c5b:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005c62:	c7 44 24 0c 60 09 02 c0 	mov    DWORD PTR [esp+0xc],0xc0020960
c0005c6a:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c0005c6f:	77 0b                	ja     c0005c7c <ff_uni2oem+0x2c>
c0005c71:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005c75:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005c7a:	eb 68                	jmp    c0005ce4 <ff_uni2oem+0x94>
c0005c7c:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c0005c84:	77 5e                	ja     c0005ce4 <ff_uni2oem+0x94>
c0005c86:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0005c8a:	3d b5 01 00 00       	cmp    eax,0x1b5
c0005c8f:	75 53                	jne    c0005ce4 <ff_uni2oem+0x94>
c0005c91:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005c98:	eb 12                	jmp    c0005cac <ff_uni2oem+0x5c>
c0005c9a:	66 90                	xchg   ax,ax
c0005c9c:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005ca1:	83 c0 01             	add    eax,0x1
c0005ca4:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005ca9:	8d 76 00             	lea    esi,[esi+0x0]
c0005cac:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0005cb1:	83 f8 7f             	cmp    eax,0x7f
c0005cb4:	77 1e                	ja     c0005cd4 <ff_uni2oem+0x84>
c0005cb6:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0005cbb:	01 c0                	add    eax,eax
c0005cbd:	89 c2                	mov    edx,eax
c0005cbf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005cc3:	01 d0                	add    eax,edx
c0005cc5:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005cc8:	0f b7 c0             	movzx  eax,ax
c0005ccb:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0005ccf:	75 cb                	jne    c0005c9c <ff_uni2oem+0x4c>
c0005cd1:	8d 76 00             	lea    esi,[esi+0x0]
c0005cd4:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005cd9:	83 e8 80             	sub    eax,0xffffff80
c0005cdc:	0f b6 c0             	movzx  eax,al
c0005cdf:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005ce4:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005ce9:	83 c4 14             	add    esp,0x14
c0005cec:	c3                   	ret    
c0005ced:	8d 76 00             	lea    esi,[esi+0x0]

c0005cf0 <ff_oem2uni>:
c0005cf0:	83 ec 18             	sub    esp,0x18
c0005cf3:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0005cf7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005cfb:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c0005d00:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005d04:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c0005d0b:	c7 44 24 10 60 09 02 c0 	mov    DWORD PTR [esp+0x10],0xc0020960
c0005d13:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005d18:	83 f8 7f             	cmp    eax,0x7f
c0005d1b:	77 0b                	ja     c0005d28 <ff_oem2uni+0x38>
c0005d1d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005d21:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0005d26:	eb 34                	jmp    c0005d5c <ff_oem2uni+0x6c>
c0005d28:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0005d2c:	3d b5 01 00 00       	cmp    eax,0x1b5
c0005d31:	75 29                	jne    c0005d5c <ff_oem2uni+0x6c>
c0005d33:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005d38:	3d ff 00 00 00       	cmp    eax,0xff
c0005d3d:	77 1d                	ja     c0005d5c <ff_oem2uni+0x6c>
c0005d3f:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005d44:	05 80 ff ff 7f       	add    eax,0x7fffff80
c0005d49:	01 c0                	add    eax,eax
c0005d4b:	89 c2                	mov    edx,eax
c0005d4d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005d51:	01 d0                	add    eax,edx
c0005d53:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005d56:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0005d5b:	90                   	nop
c0005d5c:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c0005d61:	83 c4 18             	add    esp,0x18
c0005d64:	c3                   	ret    
c0005d65:	8d 76 00             	lea    esi,[esi+0x0]

c0005d68 <ff_wtoupper>:
c0005d68:	83 ec 10             	sub    esp,0x10
c0005d6b:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0005d73:	0f 87 ab 01 00 00    	ja     c0005f24 <ff_wtoupper+0x1bc>
c0005d79:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005d7d:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005d82:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0005d87:	3d ff 0f 00 00       	cmp    eax,0xfff
c0005d8c:	77 0a                	ja     c0005d98 <ff_wtoupper+0x30>
c0005d8e:	b8 60 07 02 c0       	mov    eax,0xc0020760
c0005d93:	eb 0b                	jmp    c0005da0 <ff_wtoupper+0x38>
c0005d95:	8d 76 00             	lea    esi,[esi+0x0]
c0005d98:	b8 a0 06 02 c0       	mov    eax,0xc00206a0
c0005d9d:	8d 76 00             	lea    esi,[esi+0x0]
c0005da0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005da4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005da8:	8d 50 02             	lea    edx,[eax+0x2]
c0005dab:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005daf:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005db2:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0005db7:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0005dbc:	85 c0                	test   eax,eax
c0005dbe:	0f 84 54 01 00 00    	je     c0005f18 <ff_wtoupper+0x1b0>
c0005dc4:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0005dc9:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0005dce:	39 c2                	cmp    edx,eax
c0005dd0:	0f 82 42 01 00 00    	jb     c0005f18 <ff_wtoupper+0x1b0>
c0005dd6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005dda:	8d 50 02             	lea    edx,[eax+0x2]
c0005ddd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005de1:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005de4:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0005de9:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c0005dee:	c1 e8 08             	shr    eax,0x8
c0005df1:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c0005df6:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0005dfb:	0f b6 c0             	movzx  eax,al
c0005dfe:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0005e03:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0005e08:	0f b7 4c 24 08       	movzx  ecx,WORD PTR [esp+0x8]
c0005e0d:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c0005e12:	01 ca                	add    edx,ecx
c0005e14:	39 d0                	cmp    eax,edx
c0005e16:	0f 8d d8 00 00 00    	jge    c0005ef4 <ff_wtoupper+0x18c>
c0005e1c:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005e21:	83 f8 08             	cmp    eax,0x8
c0005e24:	0f 87 ea 00 00 00    	ja     c0005f14 <ff_wtoupper+0x1ac>
c0005e2a:	8b 04 85 60 06 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdf9a0]
c0005e31:	ff e0                	jmp    eax
c0005e33:	90                   	nop
c0005e34:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0005e39:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0005e3e:	29 c2                	sub    edx,eax
c0005e40:	89 d0                	mov    eax,edx
c0005e42:	01 c0                	add    eax,eax
c0005e44:	89 c2                	mov    edx,eax
c0005e46:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005e4a:	01 d0                	add    eax,edx
c0005e4c:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005e4f:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005e54:	e9 97 00 00 00       	jmp    c0005ef0 <ff_wtoupper+0x188>
c0005e59:	8d 76 00             	lea    esi,[esi+0x0]
c0005e5c:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0005e61:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005e65:	89 d1                	mov    ecx,edx
c0005e67:	29 c1                	sub    ecx,eax
c0005e69:	89 c8                	mov    eax,ecx
c0005e6b:	83 e0 01             	and    eax,0x1
c0005e6e:	89 c2                	mov    edx,eax
c0005e70:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005e75:	29 d0                	sub    eax,edx
c0005e77:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005e7c:	eb 72                	jmp    c0005ef0 <ff_wtoupper+0x188>
c0005e7e:	66 90                	xchg   ax,ax
c0005e80:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005e85:	83 e8 10             	sub    eax,0x10
c0005e88:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005e8d:	eb 61                	jmp    c0005ef0 <ff_wtoupper+0x188>
c0005e8f:	90                   	nop
c0005e90:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005e95:	83 e8 20             	sub    eax,0x20
c0005e98:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005e9d:	eb 51                	jmp    c0005ef0 <ff_wtoupper+0x188>
c0005e9f:	90                   	nop
c0005ea0:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005ea5:	83 e8 30             	sub    eax,0x30
c0005ea8:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005ead:	eb 41                	jmp    c0005ef0 <ff_wtoupper+0x188>
c0005eaf:	90                   	nop
c0005eb0:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005eb5:	83 e8 1a             	sub    eax,0x1a
c0005eb8:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005ebd:	eb 31                	jmp    c0005ef0 <ff_wtoupper+0x188>
c0005ebf:	90                   	nop
c0005ec0:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005ec5:	83 c0 08             	add    eax,0x8
c0005ec8:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005ecd:	eb 21                	jmp    c0005ef0 <ff_wtoupper+0x188>
c0005ecf:	90                   	nop
c0005ed0:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005ed5:	83 e8 50             	sub    eax,0x50
c0005ed8:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005edd:	eb 11                	jmp    c0005ef0 <ff_wtoupper+0x188>
c0005edf:	90                   	nop
c0005ee0:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005ee5:	2d 60 1c 00 00       	sub    eax,0x1c60
c0005eea:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005eef:	90                   	nop
c0005ef0:	eb 22                	jmp    c0005f14 <ff_wtoupper+0x1ac>
c0005ef2:	66 90                	xchg   ax,ax
c0005ef4:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005ef9:	85 c0                	test   eax,eax
c0005efb:	0f 85 a3 fe ff ff    	jne    c0005da4 <ff_wtoupper+0x3c>
c0005f01:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c0005f06:	01 c0                	add    eax,eax
c0005f08:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0005f0c:	e9 93 fe ff ff       	jmp    c0005da4 <ff_wtoupper+0x3c>
c0005f11:	8d 76 00             	lea    esi,[esi+0x0]
c0005f14:	90                   	nop
c0005f15:	8d 76 00             	lea    esi,[esi+0x0]
c0005f18:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0005f1d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005f21:	8d 76 00             	lea    esi,[esi+0x0]
c0005f24:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005f28:	83 c4 10             	add    esp,0x10
c0005f2b:	c3                   	ret    

c0005f2c <utf2ucs>:
c0005f2c:	57                   	push   edi
c0005f2d:	31 c9                	xor    ecx,ecx
c0005f2f:	56                   	push   esi
c0005f30:	89 d7                	mov    edi,edx
c0005f32:	53                   	push   ebx
c0005f33:	0f be 1c 0f          	movsx  ebx,BYTE PTR [edi+ecx*1]
c0005f37:	88 5c 48 01          	mov    BYTE PTR [eax+ecx*2+0x1],bl
c0005f3b:	89 de                	mov    esi,ebx
c0005f3d:	c1 fe 08             	sar    esi,0x8
c0005f40:	89 f2                	mov    edx,esi
c0005f42:	88 14 48             	mov    BYTE PTR [eax+ecx*2],dl
c0005f45:	41                   	inc    ecx
c0005f46:	85 db                	test   ebx,ebx
c0005f48:	75 e9                	jne    c0005f33 <utf2ucs+0x7>
c0005f4a:	5b                   	pop    ebx
c0005f4b:	5e                   	pop    esi
c0005f4c:	5f                   	pop    edi
c0005f4d:	c3                   	ret    

c0005f4e <ucs2utfn>:
c0005f4e:	83 e1 fe             	and    ecx,0xfffffffe
c0005f51:	01 d1                	add    ecx,edx
c0005f53:	39 d1                	cmp    ecx,edx
c0005f55:	75 04                	jne    c0005f5b <ucs2utfn+0xd>
c0005f57:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0005f5a:	c3                   	ret    
c0005f5b:	57                   	push   edi
c0005f5c:	56                   	push   esi
c0005f5d:	53                   	push   ebx
c0005f5e:	0f be 1a             	movsx  ebx,BYTE PTR [edx]
c0005f61:	83 c2 02             	add    edx,0x2
c0005f64:	89 de                	mov    esi,ebx
c0005f66:	0f be 5a ff          	movsx  ebx,BYTE PTR [edx-0x1]
c0005f6a:	c1 e6 08             	shl    esi,0x8
c0005f6d:	09 f3                	or     ebx,esi
c0005f6f:	83 fb 3b             	cmp    ebx,0x3b
c0005f72:	74 50                	je     c0005fc4 <ucs2utfn+0x76>
c0005f74:	83 fb 7f             	cmp    ebx,0x7f
c0005f77:	7f 05                	jg     c0005f7e <ucs2utfn+0x30>
c0005f79:	88 18                	mov    BYTE PTR [eax],bl
c0005f7b:	40                   	inc    eax
c0005f7c:	eb 42                	jmp    c0005fc0 <ucs2utfn+0x72>
c0005f7e:	89 de                	mov    esi,ebx
c0005f80:	89 df                	mov    edi,ebx
c0005f82:	c1 fe 06             	sar    esi,0x6
c0005f85:	83 e7 3f             	and    edi,0x3f
c0005f88:	83 cf 80             	or     edi,0xffffff80
c0005f8b:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0005f91:	7f 12                	jg     c0005fa5 <ucs2utfn+0x57>
c0005f93:	83 ce c0             	or     esi,0xffffffc0
c0005f96:	83 c0 02             	add    eax,0x2
c0005f99:	89 f3                	mov    ebx,esi
c0005f9b:	88 58 fe             	mov    BYTE PTR [eax-0x2],bl
c0005f9e:	89 fb                	mov    ebx,edi
c0005fa0:	88 58 ff             	mov    BYTE PTR [eax-0x1],bl
c0005fa3:	eb 1b                	jmp    c0005fc0 <ucs2utfn+0x72>
c0005fa5:	c1 fb 0c             	sar    ebx,0xc
c0005fa8:	83 e6 3f             	and    esi,0x3f
c0005fab:	83 cb e0             	or     ebx,0xffffffe0
c0005fae:	83 ce 80             	or     esi,0xffffff80
c0005fb1:	88 18                	mov    BYTE PTR [eax],bl
c0005fb3:	89 f3                	mov    ebx,esi
c0005fb5:	83 c0 03             	add    eax,0x3
c0005fb8:	88 58 fe             	mov    BYTE PTR [eax-0x2],bl
c0005fbb:	89 fb                	mov    ebx,edi
c0005fbd:	88 58 ff             	mov    BYTE PTR [eax-0x1],bl
c0005fc0:	39 d1                	cmp    ecx,edx
c0005fc2:	75 9a                	jne    c0005f5e <ucs2utfn+0x10>
c0005fc4:	5b                   	pop    ebx
c0005fc5:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0005fc8:	5e                   	pop    esi
c0005fc9:	5f                   	pop    edi
c0005fca:	c3                   	ret    

c0005fcb <isjoliet>:
c0005fcb:	31 d2                	xor    edx,edx
c0005fcd:	80 38 25             	cmp    BYTE PTR [eax],0x25
c0005fd0:	75 26                	jne    c0005ff8 <isjoliet+0x2d>
c0005fd2:	80 78 01 2f          	cmp    BYTE PTR [eax+0x1],0x2f
c0005fd6:	75 20                	jne    c0005ff8 <isjoliet+0x2d>
c0005fd8:	0f be 40 02          	movsx  eax,BYTE PTR [eax+0x2]
c0005fdc:	ba 02 00 00 00       	mov    edx,0x2
c0005fe1:	83 f8 43             	cmp    eax,0x43
c0005fe4:	74 12                	je     c0005ff8 <isjoliet+0x2d>
c0005fe6:	ba 03 00 00 00       	mov    edx,0x3
c0005feb:	83 f8 45             	cmp    eax,0x45
c0005fee:	74 08                	je     c0005ff8 <isjoliet+0x2d>
c0005ff0:	31 d2                	xor    edx,edx
c0005ff2:	83 f8 40             	cmp    eax,0x40
c0005ff5:	0f 94 c2             	sete   dl
c0005ff8:	89 d0                	mov    eax,edx
c0005ffa:	c3                   	ret    

c0005ffb <htohl_32>:
c0005ffb:	8b 00                	mov    eax,DWORD PTR [eax]
c0005ffd:	c3                   	ret    

c0005ffe <iso_733>:
c0005ffe:	eb fb                	jmp    c0005ffb <htohl_32>

c0006000 <bgrad_cache>:
c0006000:	83 fa 0e             	cmp    edx,0xe
c0006003:	77 16                	ja     c000601b <bgrad_cache+0x1b>
c0006005:	53                   	push   ebx
c0006006:	8b 0c 90             	mov    ecx,DWORD PTR [eax+edx*4]
c0006009:	8b 5c 90 04          	mov    ebx,DWORD PTR [eax+edx*4+0x4]
c000600d:	89 1c 90             	mov    DWORD PTR [eax+edx*4],ebx
c0006010:	42                   	inc    edx
c0006011:	83 fa 0f             	cmp    edx,0xf
c0006014:	75 f3                	jne    c0006009 <bgrad_cache+0x9>
c0006016:	89 48 3c             	mov    DWORD PTR [eax+0x3c],ecx
c0006019:	5b                   	pop    ebx
c000601a:	c3                   	ret    
c000601b:	c3                   	ret    

c000601c <ucscompare>:
c000601c:	55                   	push   ebp
c000601d:	57                   	push   edi
c000601e:	89 c7                	mov    edi,eax
c0006020:	56                   	push   esi
c0006021:	89 d6                	mov    esi,edx
c0006023:	53                   	push   ebx
c0006024:	31 d2                	xor    edx,edx
c0006026:	83 ec 1c             	sub    esp,0x1c
c0006029:	0f be 1c 16          	movsx  ebx,BYTE PTR [esi+edx*1]
c000602d:	0f be 44 16 01       	movsx  eax,BYTE PTR [esi+edx*1+0x1]
c0006032:	c1 e3 08             	shl    ebx,0x8
c0006035:	09 c3                	or     ebx,eax
c0006037:	39 ca                	cmp    edx,ecx
c0006039:	7d 42                	jge    c000607d <ucscompare+0x61>
c000603b:	0f be 04 17          	movsx  eax,BYTE PTR [edi+edx*1]
c000603f:	0f be 6c 17 01       	movsx  ebp,BYTE PTR [edi+edx*1+0x1]
c0006044:	c1 e0 08             	shl    eax,0x8
c0006047:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000604b:	09 e8                	or     eax,ebp
c000604d:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0006051:	83 f8 3b             	cmp    eax,0x3b
c0006054:	74 27                	je     c000607d <ucscompare+0x61>
c0006056:	83 ec 0c             	sub    esp,0xc
c0006059:	50                   	push   eax
c000605a:	e8 f1 a8 ff ff       	call   c0000950 <tolower>
c000605f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0006062:	89 c5                	mov    ebp,eax
c0006064:	e8 e7 a8 ff ff       	call   c0000950 <tolower>
c0006069:	83 c4 10             	add    esp,0x10
c000606c:	39 c5                	cmp    ebp,eax
c000606e:	75 20                	jne    c0006090 <ucscompare+0x74>
c0006070:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0006074:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0006078:	83 c2 02             	add    edx,0x2
c000607b:	eb ac                	jmp    c0006029 <ucscompare+0xd>
c000607d:	85 db                	test   ebx,ebx
c000607f:	0f 95 c2             	setne  dl
c0006082:	31 c0                	xor    eax,eax
c0006084:	83 fb 2f             	cmp    ebx,0x2f
c0006087:	0f 95 c0             	setne  al
c000608a:	21 d0                	and    eax,edx
c000608c:	f7 d8                	neg    eax
c000608e:	eb 03                	jmp    c0006093 <ucscompare+0x77>
c0006090:	83 c8 ff             	or     eax,0xffffffff
c0006093:	83 c4 1c             	add    esp,0x1c
c0006096:	5b                   	pop    ebx
c0006097:	5e                   	pop    esi
c0006098:	5f                   	pop    edi
c0006099:	5d                   	pop    ebp
c000609a:	c3                   	ret    

c000609b <fncompare>:
c000609b:	55                   	push   ebp
c000609c:	57                   	push   edi
c000609d:	89 c7                	mov    edi,eax
c000609f:	56                   	push   esi
c00060a0:	89 ce                	mov    esi,ecx
c00060a2:	53                   	push   ebx
c00060a3:	31 db                	xor    ebx,ebx
c00060a5:	83 ec 1c             	sub    esp,0x1c
c00060a8:	39 d3                	cmp    ebx,edx
c00060aa:	7d 45                	jge    c00060f1 <fncompare+0x56>
c00060ac:	0f be 04 1f          	movsx  eax,BYTE PTR [edi+ebx*1]
c00060b0:	83 f8 3b             	cmp    eax,0x3b
c00060b3:	74 3c                	je     c00060f1 <fncompare+0x56>
c00060b5:	83 f8 2e             	cmp    eax,0x2e
c00060b8:	75 0e                	jne    c00060c8 <fncompare+0x2d>
c00060ba:	8d 4a ff             	lea    ecx,[edx-0x1]
c00060bd:	39 d9                	cmp    ecx,ebx
c00060bf:	74 30                	je     c00060f1 <fncompare+0x56>
c00060c1:	80 7c 1f 01 3b       	cmp    BYTE PTR [edi+ebx*1+0x1],0x3b
c00060c6:	74 29                	je     c00060f1 <fncompare+0x56>
c00060c8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00060cc:	83 ec 0c             	sub    esp,0xc
c00060cf:	50                   	push   eax
c00060d0:	e8 7b a8 ff ff       	call   c0000950 <tolower>
c00060d5:	89 c5                	mov    ebp,eax
c00060d7:	0f be 04 1e          	movsx  eax,BYTE PTR [esi+ebx*1]
c00060db:	89 04 24             	mov    DWORD PTR [esp],eax
c00060de:	e8 6d a8 ff ff       	call   c0000950 <tolower>
c00060e3:	83 c4 10             	add    esp,0x10
c00060e6:	39 c5                	cmp    ebp,eax
c00060e8:	75 1e                	jne    c0006108 <fncompare+0x6d>
c00060ea:	43                   	inc    ebx
c00060eb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00060ef:	eb b7                	jmp    c00060a8 <fncompare+0xd>
c00060f1:	0f be 14 1e          	movsx  edx,BYTE PTR [esi+ebx*1]
c00060f5:	85 d2                	test   edx,edx
c00060f7:	0f 95 c1             	setne  cl
c00060fa:	31 c0                	xor    eax,eax
c00060fc:	83 fa 2f             	cmp    edx,0x2f
c00060ff:	0f 95 c0             	setne  al
c0006102:	21 c8                	and    eax,ecx
c0006104:	f7 d8                	neg    eax
c0006106:	eb 03                	jmp    c000610b <fncompare+0x70>
c0006108:	83 c8 ff             	or     eax,0xffffffff
c000610b:	83 c4 1c             	add    esp,0x1c
c000610e:	5b                   	pop    ebx
c000610f:	5e                   	pop    esi
c0006110:	5f                   	pop    edi
c0006111:	5d                   	pop    ebp
c0006112:	c3                   	ret    

c0006113 <bclear_cache>:
c0006113:	83 ec 18             	sub    esp,0x18
c0006116:	68 60 0a 02 c0       	push   0xc0020a60
c000611b:	e8 dc 42 01 00       	call   c001a3fc <iso_kprintf>
c0006120:	83 c4 10             	add    esp,0x10
c0006123:	31 c0                	xor    eax,eax
c0006125:	8b 14 85 20 60 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd9fe0]
c000612c:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c0006132:	8b 14 85 80 60 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd9f80]
c0006139:	40                   	inc    eax
c000613a:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c0006140:	83 f8 10             	cmp    eax,0x10
c0006143:	75 e0                	jne    c0006125 <bclear_cache+0x12>
c0006145:	83 c4 0c             	add    esp,0xc
c0006148:	c3                   	ret    

c0006149 <bclear>:
c0006149:	eb c8                	jmp    c0006113 <bclear_cache>

c000614b <iso_break_all>:
c000614b:	83 ec 18             	sub    esp,0x18
c000614e:	68 6e 0a 02 c0       	push   0xc0020a6e
c0006153:	e8 a4 42 01 00       	call   c001a3fc <iso_kprintf>
c0006158:	83 c4 10             	add    esp,0x10
c000615b:	31 c0                	xor    eax,eax
c000615d:	c7 80 d0 65 02 c0 01 00 00 00 	mov    DWORD PTR [eax-0x3ffd9a30],0x1
c0006167:	05 94 00 00 00       	add    eax,0x94
c000616c:	3d 40 09 00 00       	cmp    eax,0x940
c0006171:	75 ea                	jne    c000615d <iso_break_all+0x12>
c0006173:	83 c4 0c             	add    esp,0xc
c0006176:	c3                   	ret    

c0006177 <isoReadDiscSector>:
c0006177:	83 ec 0c             	sub    esp,0xc
c000617a:	0f be 05 60 60 02 c0 	movsx  eax,BYTE PTR ds:0xc0026060
c0006181:	50                   	push   eax
c0006182:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0006186:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000618a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000618e:	e8 0d 42 01 00       	call   c001a3a0 <isoReadDiscSectorHelper>
c0006193:	83 c4 1c             	add    esp,0x1c
c0006196:	c3                   	ret    

c0006197 <bread_cache>:
c0006197:	55                   	push   ebp
c0006198:	57                   	push   edi
c0006199:	89 d7                	mov    edi,edx
c000619b:	56                   	push   esi
c000619c:	ba 0f 00 00 00       	mov    edx,0xf
c00061a1:	53                   	push   ebx
c00061a2:	89 c6                	mov    esi,eax
c00061a4:	83 ec 0c             	sub    esp,0xc
c00061a7:	8b 04 96             	mov    eax,DWORD PTR [esi+edx*4]
c00061aa:	39 38                	cmp    DWORD PTR [eax],edi
c00061ac:	74 3c                	je     c00061ea <bread_cache+0x53>
c00061ae:	4a                   	dec    edx
c00061af:	83 fa ff             	cmp    edx,0xffffffff
c00061b2:	75 f3                	jne    c00061a7 <bread_cache+0x10>
c00061b4:	31 db                	xor    ebx,ebx
c00061b6:	8b 04 9e             	mov    eax,DWORD PTR [esi+ebx*4]
c00061b9:	83 38 ff             	cmp    DWORD PTR [eax],0xffffffff
c00061bc:	74 08                	je     c00061c6 <bread_cache+0x2f>
c00061be:	43                   	inc    ebx
c00061bf:	83 fb 10             	cmp    ebx,0x10
c00061c2:	75 f2                	jne    c00061b6 <bread_cache+0x1f>
c00061c4:	31 db                	xor    ebx,ebx
c00061c6:	8d 2c 9e             	lea    ebp,[esi+ebx*4]
c00061c9:	50                   	push   eax
c00061ca:	6a 01                	push   0x1
c00061cc:	57                   	push   edi
c00061cd:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00061d0:	83 c0 04             	add    eax,0x4
c00061d3:	50                   	push   eax
c00061d4:	e8 9e ff ff ff       	call   c0006177 <isoReadDiscSector>
c00061d9:	83 c4 10             	add    esp,0x10
c00061dc:	83 c9 ff             	or     ecx,0xffffffff
c00061df:	85 c0                	test   eax,eax
c00061e1:	78 13                	js     c00061f6 <bread_cache+0x5f>
c00061e3:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00061e6:	89 da                	mov    edx,ebx
c00061e8:	89 38                	mov    DWORD PTR [eax],edi
c00061ea:	89 f0                	mov    eax,esi
c00061ec:	e8 0f fe ff ff       	call   c0006000 <bgrad_cache>
c00061f1:	b9 0f 00 00 00       	mov    ecx,0xf
c00061f6:	83 c4 0c             	add    esp,0xc
c00061f9:	89 c8                	mov    eax,ecx
c00061fb:	5b                   	pop    ebx
c00061fc:	5e                   	pop    esi
c00061fd:	5f                   	pop    edi
c00061fe:	5d                   	pop    ebp
c00061ff:	c3                   	ret    

c0006200 <biread>:
c0006200:	89 c2                	mov    edx,eax
c0006202:	b8 80 60 02 c0       	mov    eax,0xc0026080
c0006207:	eb 8e                	jmp    c0006197 <bread_cache>

c0006209 <bdread>:
c0006209:	89 c2                	mov    edx,eax
c000620b:	b8 20 60 02 c0       	mov    eax,0xc0026020
c0006210:	eb 85                	jmp    c0006197 <bread_cache>

c0006212 <strnicmp>:
c0006212:	55                   	push   ebp
c0006213:	57                   	push   edi
c0006214:	31 ff                	xor    edi,edi
c0006216:	56                   	push   esi
c0006217:	53                   	push   ebx
c0006218:	83 ec 0c             	sub    esp,0xc
c000621b:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000621f:	3b 7c 24 28          	cmp    edi,DWORD PTR [esp+0x28]
c0006223:	74 43                	je     c0006268 <strnicmp+0x56>
c0006225:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0006229:	0f be 04 38          	movsx  eax,BYTE PTR [eax+edi*1]
c000622d:	85 c0                	test   eax,eax
c000622f:	74 37                	je     c0006268 <strnicmp+0x56>
c0006231:	0f be 14 3e          	movsx  edx,BYTE PTR [esi+edi*1]
c0006235:	85 d2                	test   edx,edx
c0006237:	74 2f                	je     c0006268 <strnicmp+0x56>
c0006239:	39 d0                	cmp    eax,edx
c000623b:	8d 6f 01             	lea    ebp,[edi+0x1]
c000623e:	75 04                	jne    c0006244 <strnicmp+0x32>
c0006240:	89 ef                	mov    edi,ebp
c0006242:	eb db                	jmp    c000621f <strnicmp+0xd>
c0006244:	83 ec 0c             	sub    esp,0xc
c0006247:	50                   	push   eax
c0006248:	e8 03 a7 ff ff       	call   c0000950 <tolower>
c000624d:	89 c3                	mov    ebx,eax
c000624f:	0f be 04 3e          	movsx  eax,BYTE PTR [esi+edi*1]
c0006253:	89 ef                	mov    edi,ebp
c0006255:	89 04 24             	mov    DWORD PTR [esp],eax
c0006258:	e8 f3 a6 ff ff       	call   c0000950 <tolower>
c000625d:	83 c4 10             	add    esp,0x10
c0006260:	29 c3                	sub    ebx,eax
c0006262:	89 d8                	mov    eax,ebx
c0006264:	74 b9                	je     c000621f <strnicmp+0xd>
c0006266:	eb 02                	jmp    c000626a <strnicmp+0x58>
c0006268:	31 c0                	xor    eax,eax
c000626a:	83 c4 0c             	add    esp,0xc
c000626d:	5b                   	pop    ebx
c000626e:	5e                   	pop    esi
c000626f:	5f                   	pop    edi
c0006270:	5d                   	pop    ebp
c0006271:	c3                   	ret    

c0006272 <find_object>:
c0006272:	55                   	push   ebp
c0006273:	57                   	push   edi
c0006274:	89 c7                	mov    edi,eax
c0006276:	56                   	push   esi
c0006277:	53                   	push   ebx
c0006278:	89 d3                	mov    ebx,edx
c000627a:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0006280:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c0006287:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000628b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000628f:	83 3d b4 6e 02 c0 00 	cmp    DWORD PTR ds:0xc0026eb4,0x0
c0006296:	74 0b                	je     c00062a3 <find_object+0x31>
c0006298:	89 fa                	mov    edx,edi
c000629a:	8d 44 24 20          	lea    eax,[esp+0x20]
c000629e:	e8 89 fc ff ff       	call   c0005f2c <utf2ucs>
c00062a3:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c00062a6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00062aa:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00062af:	7e 11                	jle    c00062c2 <find_object+0x50>
c00062b1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00062b5:	e8 46 ff ff ff       	call   c0006200 <biread>
c00062ba:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00062be:	85 c0                	test   eax,eax
c00062c0:	79 07                	jns    c00062c9 <find_object+0x57>
c00062c2:	31 db                	xor    ebx,ebx
c00062c4:	e9 56 01 00 00       	jmp    c000641f <find_object+0x1ad>
c00062c9:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00062d1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00062d5:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00062d9:	8b 04 85 80 60 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9f80]
c00062e0:	8d 5c 08 04          	lea    ebx,[eax+ecx*1+0x4]
c00062e4:	0f b6 33             	movzx  esi,BYTE PTR [ebx]
c00062e7:	85 f6                	test   esi,esi
c00062e9:	75 0e                	jne    c00062f9 <find_object+0x87>
c00062eb:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c00062ef:	81 6c 24 0c 00 08 00 00 	sub    DWORD PTR [esp+0xc],0x800
c00062f7:	eb b1                	jmp    c00062aa <find_object+0x38>
c00062f9:	8b 2d b4 6e 02 c0    	mov    ebp,DWORD PTR ds:0xc0026eb4
c00062ff:	0f b6 4b 20          	movzx  ecx,BYTE PTR [ebx+0x20]
c0006303:	85 ed                	test   ebp,ebp
c0006305:	89 c8                	mov    eax,ecx
c0006307:	74 2b                	je     c0006334 <find_object+0xc2>
c0006309:	8d 43 21             	lea    eax,[ebx+0x21]
c000630c:	8d 54 24 20          	lea    edx,[esp+0x20]
c0006310:	e8 07 fd ff ff       	call   c000601c <ucscompare>
c0006315:	85 c0                	test   eax,eax
c0006317:	0f 84 bf 00 00 00    	je     c00063dc <find_object+0x16a>
c000631d:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
c0006320:	01 44 24 08          	add    DWORD PTR [esp+0x8],eax
c0006324:	81 7c 24 08 ff 07 00 00 	cmp    DWORD PTR [esp+0x8],0x7ff
c000632c:	0f 8e da 00 00 00    	jle    c000640c <find_object+0x19a>
c0006332:	eb b7                	jmp    c00062eb <find_object+0x79>
c0006334:	29 ce                	sub    esi,ecx
c0006336:	8d 54 0b 21          	lea    edx,[ebx+ecx*1+0x21]
c000633a:	a8 01                	test   al,0x1
c000633c:	74 05                	je     c0006343 <find_object+0xd1>
c000633e:	83 ee 21             	sub    esi,0x21
c0006341:	eb 5a                	jmp    c000639d <find_object+0x12b>
c0006343:	42                   	inc    edx
c0006344:	83 ee 22             	sub    esi,0x22
c0006347:	eb 54                	jmp    c000639d <find_object+0x12b>
c0006349:	8a 42 03             	mov    al,BYTE PTR [edx+0x3]
c000634c:	48                   	dec    eax
c000634d:	3c 01                	cmp    al,0x1
c000634f:	77 51                	ja     c00063a2 <find_object+0x130>
c0006351:	50                   	push   eax
c0006352:	6a 02                	push   0x2
c0006354:	68 7d 0a 02 c0       	push   0xc0020a7d
c0006359:	52                   	push   edx
c000635a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000635e:	e8 7d a4 ff ff       	call   c00007e0 <strncmp>
c0006363:	83 c4 10             	add    esp,0x10
c0006366:	85 c0                	test   eax,eax
c0006368:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000636c:	75 27                	jne    c0006395 <find_object+0x123>
c000636e:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c0006372:	8d 68 fb             	lea    ebp,[eax-0x5]
c0006375:	50                   	push   eax
c0006376:	8d 42 05             	lea    eax,[edx+0x5]
c0006379:	55                   	push   ebp
c000637a:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000637e:	50                   	push   eax
c000637f:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0006383:	50                   	push   eax
c0006384:	e8 f7 a2 ff ff       	call   c0000680 <strncpy>
c0006389:	c6 44 2c 30 00       	mov    BYTE PTR [esp+ebp*1+0x30],0x0
c000638e:	83 c4 10             	add    esp,0x10
c0006391:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0006395:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c0006399:	29 c6                	sub    esi,eax
c000639b:	01 c2                	add    edx,eax
c000639d:	83 fe 03             	cmp    esi,0x3
c00063a0:	7f a7                	jg     c0006349 <find_object+0xd7>
c00063a2:	85 ed                	test   ebp,ebp
c00063a4:	7e 40                	jle    c00063e6 <find_object+0x174>
c00063a6:	51                   	push   ecx
c00063a7:	51                   	push   ecx
c00063a8:	6a 2f                	push   0x2f
c00063aa:	57                   	push   edi
c00063ab:	e8 f0 a3 ff ff       	call   c00007a0 <strchr>
c00063b0:	83 c4 10             	add    esp,0x10
c00063b3:	85 c0                	test   eax,eax
c00063b5:	74 04                	je     c00063bb <find_object+0x149>
c00063b7:	29 f8                	sub    eax,edi
c00063b9:	eb 0c                	jmp    c00063c7 <find_object+0x155>
c00063bb:	83 ec 0c             	sub    esp,0xc
c00063be:	57                   	push   edi
c00063bf:	e8 ac a1 ff ff       	call   c0000570 <strlen>
c00063c4:	83 c4 10             	add    esp,0x10
c00063c7:	52                   	push   edx
c00063c8:	50                   	push   eax
c00063c9:	57                   	push   edi
c00063ca:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00063ce:	50                   	push   eax
c00063cf:	e8 3e fe ff ff       	call   c0006212 <strnicmp>
c00063d4:	83 c4 10             	add    esp,0x10
c00063d7:	e9 39 ff ff ff       	jmp    c0006315 <find_object+0xa3>
c00063dc:	0f b6 43 19          	movzx  eax,BYTE PTR [ebx+0x19]
c00063e0:	3b 44 24 10          	cmp    eax,DWORD PTR [esp+0x10]
c00063e4:	eb 1e                	jmp    c0006404 <find_object+0x192>
c00063e6:	0f b6 53 20          	movzx  edx,BYTE PTR [ebx+0x20]
c00063ea:	8d 43 21             	lea    eax,[ebx+0x21]
c00063ed:	89 f9                	mov    ecx,edi
c00063ef:	e8 a7 fc ff ff       	call   c000609b <fncompare>
c00063f4:	85 c0                	test   eax,eax
c00063f6:	0f 85 21 ff ff ff    	jne    c000631d <find_object+0xab>
c00063fc:	0f b6 43 19          	movzx  eax,BYTE PTR [ebx+0x19]
c0006400:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c0006404:	0f 85 13 ff ff ff    	jne    c000631d <find_object+0xab>
c000640a:	eb 13                	jmp    c000641f <find_object+0x1ad>
c000640c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0006410:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c0006414:	0f 8f b7 fe ff ff    	jg     c00062d1 <find_object+0x5f>
c000641a:	e9 cc fe ff ff       	jmp    c00062eb <find_object+0x79>
c000641f:	81 c4 2c 01 00 00    	add    esp,0x12c
c0006425:	89 d8                	mov    eax,ebx
c0006427:	5b                   	pop    ebx
c0006428:	5e                   	pop    esi
c0006429:	5f                   	pop    edi
c000642a:	5d                   	pop    ebp
c000642b:	c3                   	ret    

c000642c <find_object_path>:
c000642c:	55                   	push   ebp
c000642d:	57                   	push   edi
c000642e:	89 d7                	mov    edi,edx
c0006430:	56                   	push   esi
c0006431:	89 c6                	mov    esi,eax
c0006433:	53                   	push   ebx
c0006434:	89 cb                	mov    ebx,ecx
c0006436:	83 ec 0c             	sub    esp,0xc
c0006439:	50                   	push   eax
c000643a:	50                   	push   eax
c000643b:	6a 2f                	push   0x2f
c000643d:	56                   	push   esi
c000643e:	e8 5d a3 ff ff       	call   c00007a0 <strchr>
c0006443:	83 c4 10             	add    esp,0x10
c0006446:	89 c5                	mov    ebp,eax
c0006448:	85 c0                	test   eax,eax
c000644a:	74 3a                	je     c0006486 <find_object_path+0x5a>
c000644c:	39 ee                	cmp    esi,ebp
c000644e:	74 31                	je     c0006481 <find_object_path+0x55>
c0006450:	8d 43 0a             	lea    eax,[ebx+0xa]
c0006453:	e8 a6 fb ff ff       	call   c0005ffe <iso_733>
c0006458:	89 c2                	mov    edx,eax
c000645a:	8d 43 02             	lea    eax,[ebx+0x2]
c000645d:	e8 9c fb ff ff       	call   c0005ffe <iso_733>
c0006462:	83 ec 0c             	sub    esp,0xc
c0006465:	89 c1                	mov    ecx,eax
c0006467:	52                   	push   edx
c0006468:	89 f0                	mov    eax,esi
c000646a:	ba 01 00 00 00       	mov    edx,0x1
c000646f:	e8 fe fd ff ff       	call   c0006272 <find_object>
c0006474:	83 c4 10             	add    esp,0x10
c0006477:	89 c3                	mov    ebx,eax
c0006479:	85 c0                	test   eax,eax
c000647b:	75 04                	jne    c0006481 <find_object_path+0x55>
c000647d:	31 db                	xor    ebx,ebx
c000647f:	eb 36                	jmp    c00064b7 <find_object_path+0x8b>
c0006481:	8d 75 01             	lea    esi,[ebp+0x1]
c0006484:	eb b3                	jmp    c0006439 <find_object_path+0xd>
c0006486:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c0006489:	74 28                	je     c00064b3 <find_object_path+0x87>
c000648b:	8d 43 0a             	lea    eax,[ebx+0xa]
c000648e:	e8 6b fb ff ff       	call   c0005ffe <iso_733>
c0006493:	89 c2                	mov    edx,eax
c0006495:	8d 43 02             	lea    eax,[ebx+0x2]
c0006498:	e8 61 fb ff ff       	call   c0005ffe <iso_733>
c000649d:	83 ec 0c             	sub    esp,0xc
c00064a0:	89 c1                	mov    ecx,eax
c00064a2:	52                   	push   edx
c00064a3:	89 f0                	mov    eax,esi
c00064a5:	89 fa                	mov    edx,edi
c00064a7:	e8 c6 fd ff ff       	call   c0006272 <find_object>
c00064ac:	83 c4 10             	add    esp,0x10
c00064af:	89 c3                	mov    ebx,eax
c00064b1:	eb 04                	jmp    c00064b7 <find_object_path+0x8b>
c00064b3:	85 ff                	test   edi,edi
c00064b5:	74 c6                	je     c000647d <find_object_path+0x51>
c00064b7:	83 c4 0c             	add    esp,0xc
c00064ba:	89 d8                	mov    eax,ebx
c00064bc:	5b                   	pop    ebx
c00064bd:	5e                   	pop    esi
c00064be:	5f                   	pop    edi
c00064bf:	5d                   	pop    ebp
c00064c0:	c3                   	ret    

c00064c1 <stricmp>:
c00064c1:	57                   	push   edi
c00064c2:	56                   	push   esi
c00064c3:	31 f6                	xor    esi,esi
c00064c5:	53                   	push   ebx
c00064c6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00064ca:	83 ec 0c             	sub    esp,0xc
c00064cd:	0f b6 3c 30          	movzx  edi,BYTE PTR [eax+esi*1]
c00064d1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00064d5:	0f b6 04 30          	movzx  eax,BYTE PTR [eax+esi*1]
c00064d9:	50                   	push   eax
c00064da:	e8 51 a4 ff ff       	call   c0000930 <toupper>
c00064df:	89 04 24             	mov    DWORD PTR [esp],eax
c00064e2:	e8 69 a4 ff ff       	call   c0000950 <tolower>
c00064e7:	89 3c 24             	mov    DWORD PTR [esp],edi
c00064ea:	89 c3                	mov    ebx,eax
c00064ec:	e8 3f a4 ff ff       	call   c0000930 <toupper>
c00064f1:	89 04 24             	mov    DWORD PTR [esp],eax
c00064f4:	e8 57 a4 ff ff       	call   c0000950 <tolower>
c00064f9:	83 c4 10             	add    esp,0x10
c00064fc:	39 c3                	cmp    ebx,eax
c00064fe:	75 05                	jne    c0006505 <stricmp+0x44>
c0006500:	46                   	inc    esi
c0006501:	85 db                	test   ebx,ebx
c0006503:	75 c1                	jne    c00064c6 <stricmp+0x5>
c0006505:	29 c3                	sub    ebx,eax
c0006507:	89 d8                	mov    eax,ebx
c0006509:	5b                   	pop    ebx
c000650a:	5e                   	pop    esi
c000650b:	5f                   	pop    edi
c000650c:	c3                   	ret    

c000650d <iso_open>:
c000650d:	57                   	push   edi
c000650e:	31 c0                	xor    eax,eax
c0006510:	56                   	push   esi
c0006511:	b9 80 6e 02 c0       	mov    ecx,0xc0026e80
c0006516:	53                   	push   ebx
c0006517:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000651c:	0f 95 c0             	setne  al
c000651f:	89 c2                	mov    edx,eax
c0006521:	89 c6                	mov    esi,eax
c0006523:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006527:	e8 00 ff ff ff       	call   c000642c <find_object_path>
c000652c:	83 ca ff             	or     edx,0xffffffff
c000652f:	85 c0                	test   eax,eax
c0006531:	74 5e                	je     c0006591 <iso_open+0x84>
c0006533:	89 c1                	mov    ecx,eax
c0006535:	31 d2                	xor    edx,edx
c0006537:	69 fa 94 00 00 00    	imul   edi,edx,0x94
c000653d:	83 bf 40 65 02 c0 00 	cmp    DWORD PTR [edi-0x3ffd9ac0],0x0
c0006544:	75 42                	jne    c0006588 <iso_open+0x7b>
c0006546:	8d 41 02             	lea    eax,[ecx+0x2]
c0006549:	c7 87 40 65 02 c0 ff ff ff ff 	mov    DWORD PTR [edi-0x3ffd9ac0],0xffffffff
c0006553:	e8 a6 fa ff ff       	call   c0005ffe <iso_733>
c0006558:	89 b7 44 65 02 c0    	mov    DWORD PTR [edi-0x3ffd9abc],esi
c000655e:	89 87 40 65 02 c0    	mov    DWORD PTR [edi-0x3ffd9ac0],eax
c0006564:	c7 87 48 65 02 c0 00 00 00 00 	mov    DWORD PTR [edi-0x3ffd9ab8],0x0
c000656e:	8d 41 0a             	lea    eax,[ecx+0xa]
c0006571:	e8 88 fa ff ff       	call   c0005ffe <iso_733>
c0006576:	c7 87 d0 65 02 c0 00 00 00 00 	mov    DWORD PTR [edi-0x3ffd9a30],0x0
c0006580:	89 87 4c 65 02 c0    	mov    DWORD PTR [edi-0x3ffd9ab4],eax
c0006586:	eb 09                	jmp    c0006591 <iso_open+0x84>
c0006588:	42                   	inc    edx
c0006589:	83 fa 10             	cmp    edx,0x10
c000658c:	75 a9                	jne    c0006537 <iso_open+0x2a>
c000658e:	83 ca ff             	or     edx,0xffffffff
c0006591:	5b                   	pop    ebx
c0006592:	89 d0                	mov    eax,edx
c0006594:	5e                   	pop    esi
c0006595:	5f                   	pop    edi
c0006596:	c3                   	ret    

c0006597 <iso_close>:
c0006597:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000659b:	83 f8 0f             	cmp    eax,0xf
c000659e:	7f 10                	jg     c00065b0 <iso_close+0x19>
c00065a0:	69 c0 94 00 00 00    	imul   eax,eax,0x94
c00065a6:	c7 80 40 65 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd9ac0],0x0
c00065b0:	e9 5e fb ff ff       	jmp    c0006113 <bclear_cache>

c00065b5 <iso_read>:
c00065b5:	55                   	push   ebp
c00065b6:	57                   	push   edi
c00065b7:	56                   	push   esi
c00065b8:	53                   	push   ebx
c00065b9:	83 ec 1c             	sub    esp,0x1c
c00065bc:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00065c0:	83 fd 0f             	cmp    ebp,0xf
c00065c3:	7e 0a                	jle    c00065cf <iso_read+0x1a>
c00065c5:	83 c8 ff             	or     eax,0xffffffff
c00065c8:	89 c2                	mov    edx,eax
c00065ca:	e9 f4 00 00 00       	jmp    c00066c3 <iso_read+0x10e>
c00065cf:	69 ed 94 00 00 00    	imul   ebp,ebp,0x94
c00065d5:	83 bd 40 65 02 c0 00 	cmp    DWORD PTR [ebp-0x3ffd9ac0],0x0
c00065dc:	74 e7                	je     c00065c5 <iso_read+0x10>
c00065de:	8b 95 d0 65 02 c0    	mov    edx,DWORD PTR [ebp-0x3ffd9a30]
c00065e4:	85 d2                	test   edx,edx
c00065e6:	75 dd                	jne    c00065c5 <iso_read+0x10>
c00065e8:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c00065ed:	0f 84 cd 00 00 00    	je     c00066c0 <iso_read+0x10b>
c00065f3:	8b 85 48 65 02 c0    	mov    eax,DWORD PTR [ebp-0x3ffd9ab8]
c00065f9:	8b 8d 4c 65 02 c0    	mov    ecx,DWORD PTR [ebp-0x3ffd9ab4]
c00065ff:	29 c1                	sub    ecx,eax
c0006601:	3b 4c 24 38          	cmp    ecx,DWORD PTR [esp+0x38]
c0006605:	76 04                	jbe    c000660b <iso_read+0x56>
c0006607:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000660b:	85 c9                	test   ecx,ecx
c000660d:	0f 84 ad 00 00 00    	je     c00066c0 <iso_read+0x10b>
c0006613:	89 c6                	mov    esi,eax
c0006615:	bb 00 08 00 00       	mov    ebx,0x800
c000661a:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0006620:	c1 e8 0b             	shr    eax,0xb
c0006623:	29 f3                	sub    ebx,esi
c0006625:	03 85 40 65 02 c0    	add    eax,DWORD PTR [ebp-0x3ffd9ac0]
c000662b:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0006631:	7e 3f                	jle    c0006672 <iso_read+0xbd>
c0006633:	81 fb 00 08 00 00    	cmp    ebx,0x800
c0006639:	75 37                	jne    c0006672 <iso_read+0xbd>
c000663b:	be 20 00 00 00       	mov    esi,0x20
c0006640:	81 f9 ff 07 01 00    	cmp    ecx,0x107ff
c0006646:	7f 05                	jg     c000664d <iso_read+0x98>
c0006648:	89 ce                	mov    esi,ecx
c000664a:	c1 fe 0b             	sar    esi,0xb
c000664d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0006651:	89 f3                	mov    ebx,esi
c0006653:	c1 e3 0b             	shl    ebx,0xb
c0006656:	52                   	push   edx
c0006657:	56                   	push   esi
c0006658:	50                   	push   eax
c0006659:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000665d:	e8 15 fb ff ff       	call   c0006177 <isoReadDiscSector>
c0006662:	83 c4 10             	add    esp,0x10
c0006665:	85 c0                	test   eax,eax
c0006667:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000666b:	7f 3e                	jg     c00066ab <iso_read+0xf6>
c000666d:	e9 53 ff ff ff       	jmp    c00065c5 <iso_read+0x10>
c0006672:	39 cb                	cmp    ebx,ecx
c0006674:	7e 02                	jle    c0006678 <iso_read+0xc3>
c0006676:	89 cb                	mov    ebx,ecx
c0006678:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000667c:	e8 88 fb ff ff       	call   c0006209 <bdread>
c0006681:	85 c0                	test   eax,eax
c0006683:	0f 88 3c ff ff ff    	js     c00065c5 <iso_read+0x10>
c0006689:	8b 0c 85 20 60 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd9fe0]
c0006690:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0006694:	8b 85 48 65 02 c0    	mov    eax,DWORD PTR [ebp-0x3ffd9ab8]
c000669a:	25 ff 07 00 00       	and    eax,0x7ff
c000669f:	8d 74 01 04          	lea    esi,[ecx+eax*1+0x4]
c00066a3:	89 d9                	mov    ecx,ebx
c00066a5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00066a7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00066ab:	01 5c 24 34          	add    DWORD PTR [esp+0x34],ebx
c00066af:	01 9d 48 65 02 c0    	add    DWORD PTR [ebp-0x3ffd9ab8],ebx
c00066b5:	29 5c 24 38          	sub    DWORD PTR [esp+0x38],ebx
c00066b9:	01 da                	add    edx,ebx
c00066bb:	e9 28 ff ff ff       	jmp    c00065e8 <iso_read+0x33>
c00066c0:	89 d0                	mov    eax,edx
c00066c2:	99                   	cdq    
c00066c3:	83 c4 1c             	add    esp,0x1c
c00066c6:	5b                   	pop    ebx
c00066c7:	5e                   	pop    esi
c00066c8:	5f                   	pop    edi
c00066c9:	5d                   	pop    ebp
c00066ca:	c3                   	ret    

c00066cb <iso_seek>:
c00066cb:	55                   	push   ebp
c00066cc:	83 c8 ff             	or     eax,0xffffffff
c00066cf:	57                   	push   edi
c00066d0:	89 c2                	mov    edx,eax
c00066d2:	56                   	push   esi
c00066d3:	53                   	push   ebx
c00066d4:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00066d8:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00066dc:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00066e0:	83 fe 0f             	cmp    esi,0xf
c00066e3:	7f 65                	jg     c000674a <iso_seek+0x7f>
c00066e5:	69 ee 94 00 00 00    	imul   ebp,esi,0x94
c00066eb:	8d 8d 40 65 02 c0    	lea    ecx,[ebp-0x3ffd9ac0]
c00066f1:	83 bd 40 65 02 c0 00 	cmp    DWORD PTR [ebp-0x3ffd9ac0],0x0
c00066f8:	74 50                	je     c000674a <iso_seek+0x7f>
c00066fa:	83 b9 90 00 00 00 00 	cmp    DWORD PTR [ecx+0x90],0x0
c0006701:	75 47                	jne    c000674a <iso_seek+0x7f>
c0006703:	83 fb 01             	cmp    ebx,0x1
c0006706:	74 0e                	je     c0006716 <iso_seek+0x4b>
c0006708:	83 fb 02             	cmp    ebx,0x2
c000670b:	74 0e                	je     c000671b <iso_seek+0x50>
c000670d:	85 db                	test   ebx,ebx
c000670f:	75 39                	jne    c000674a <iso_seek+0x7f>
c0006711:	89 79 08             	mov    DWORD PTR [ecx+0x8],edi
c0006714:	eb 0d                	jmp    c0006723 <iso_seek+0x58>
c0006716:	01 79 08             	add    DWORD PTR [ecx+0x8],edi
c0006719:	eb 08                	jmp    c0006723 <iso_seek+0x58>
c000671b:	8b 41 0c             	mov    eax,DWORD PTR [ecx+0xc]
c000671e:	01 f8                	add    eax,edi
c0006720:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c0006723:	69 c6 94 00 00 00    	imul   eax,esi,0x94
c0006729:	8b 88 4c 65 02 c0    	mov    ecx,DWORD PTR [eax-0x3ffd9ab4]
c000672f:	05 40 65 02 c0       	add    eax,0xc0026540
c0006734:	39 48 08             	cmp    DWORD PTR [eax+0x8],ecx
c0006737:	76 03                	jbe    c000673c <iso_seek+0x71>
c0006739:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c000673c:	69 d6 94 00 00 00    	imul   edx,esi,0x94
c0006742:	8b 82 48 65 02 c0    	mov    eax,DWORD PTR [edx-0x3ffd9ab8]
c0006748:	31 d2                	xor    edx,edx
c000674a:	5b                   	pop    ebx
c000674b:	5e                   	pop    esi
c000674c:	5f                   	pop    edi
c000674d:	5d                   	pop    ebp
c000674e:	c3                   	ret    

c000674f <iso_tell>:
c000674f:	83 c8 ff             	or     eax,0xffffffff
c0006752:	53                   	push   ebx
c0006753:	89 c2                	mov    edx,eax
c0006755:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0006759:	83 f9 0f             	cmp    ecx,0xf
c000675c:	7f 20                	jg     c000677e <iso_tell+0x2f>
c000675e:	69 d9 94 00 00 00    	imul   ebx,ecx,0x94
c0006764:	83 bb 40 65 02 c0 00 	cmp    DWORD PTR [ebx-0x3ffd9ac0],0x0
c000676b:	74 11                	je     c000677e <iso_tell+0x2f>
c000676d:	83 bb d0 65 02 c0 00 	cmp    DWORD PTR [ebx-0x3ffd9a30],0x0
c0006774:	75 08                	jne    c000677e <iso_tell+0x2f>
c0006776:	8b 83 48 65 02 c0    	mov    eax,DWORD PTR [ebx-0x3ffd9ab8]
c000677c:	31 d2                	xor    edx,edx
c000677e:	5b                   	pop    ebx
c000677f:	c3                   	ret    

c0006780 <iso_total>:
c0006780:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0006784:	83 c8 ff             	or     eax,0xffffffff
c0006787:	83 fa 0f             	cmp    edx,0xf
c000678a:	7f 1e                	jg     c00067aa <iso_total+0x2a>
c000678c:	69 d2 94 00 00 00    	imul   edx,edx,0x94
c0006792:	83 ba 40 65 02 c0 00 	cmp    DWORD PTR [edx-0x3ffd9ac0],0x0
c0006799:	74 0f                	je     c00067aa <iso_total+0x2a>
c000679b:	83 ba d0 65 02 c0 00 	cmp    DWORD PTR [edx-0x3ffd9a30],0x0
c00067a2:	75 06                	jne    c00067aa <iso_total+0x2a>
c00067a4:	8b 82 4c 65 02 c0    	mov    eax,DWORD PTR [edx-0x3ffd9ab4]
c00067aa:	c3                   	ret    

c00067ab <fn_postprocess>:
c00067ab:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00067af:	89 d0                	mov    eax,edx
c00067b1:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c00067b4:	83 f9 3b             	cmp    ecx,0x3b
c00067b7:	74 07                	je     c00067c0 <fn_postprocess+0x15>
c00067b9:	85 c9                	test   ecx,ecx
c00067bb:	74 03                	je     c00067c0 <fn_postprocess+0x15>
c00067bd:	40                   	inc    eax
c00067be:	eb f1                	jmp    c00067b1 <fn_postprocess+0x6>
c00067c0:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00067c3:	39 d0                	cmp    eax,edx
c00067c5:	76 0a                	jbe    c00067d1 <fn_postprocess+0x26>
c00067c7:	80 78 ff 2e          	cmp    BYTE PTR [eax-0x1],0x2e
c00067cb:	75 04                	jne    c00067d1 <fn_postprocess+0x26>
c00067cd:	c6 40 ff 00          	mov    BYTE PTR [eax-0x1],0x0
c00067d1:	c3                   	ret    

c00067d2 <iso_readdir>:
c00067d2:	55                   	push   ebp
c00067d3:	57                   	push   edi
c00067d4:	56                   	push   esi
c00067d5:	53                   	push   ebx
c00067d6:	83 ec 1c             	sub    esp,0x1c
c00067d9:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00067dd:	83 fb 0f             	cmp    ebx,0xf
c00067e0:	7f 28                	jg     c000680a <iso_readdir+0x38>
c00067e2:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c00067e8:	8d b8 40 65 02 c0    	lea    edi,[eax-0x3ffd9ac0]
c00067ee:	83 b8 40 65 02 c0 00 	cmp    DWORD PTR [eax-0x3ffd9ac0],0x0
c00067f5:	74 13                	je     c000680a <iso_readdir+0x38>
c00067f7:	83 7f 04 00          	cmp    DWORD PTR [edi+0x4],0x0
c00067fb:	74 0d                	je     c000680a <iso_readdir+0x38>
c00067fd:	83 bf 90 00 00 00 00 	cmp    DWORD PTR [edi+0x90],0x0
c0006804:	0f 84 b1 00 00 00    	je     c00068bb <iso_readdir+0xe9>
c000680a:	83 ec 0c             	sub    esp,0xc
c000680d:	68 80 0a 02 c0       	push   0xc0020a80
c0006812:	e8 e5 3b 01 00       	call   c001a3fc <iso_kprintf>
c0006817:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000681a:	e8 f9 3b 01 00       	call   c001a418 <iso_kprintfd>
c000681f:	69 db 94 00 00 00    	imul   ebx,ebx,0x94
c0006825:	c7 04 24 85 0a 02 c0 	mov    DWORD PTR [esp],0xc0020a85
c000682c:	e8 cb 3b 01 00       	call   c001a3fc <iso_kprintf>
c0006831:	5d                   	pop    ebp
c0006832:	ff b3 40 65 02 c0    	push   DWORD PTR [ebx-0x3ffd9ac0]
c0006838:	e8 db 3b 01 00       	call   c001a418 <iso_kprintfd>
c000683d:	c7 04 24 8b 0a 02 c0 	mov    DWORD PTR [esp],0xc0020a8b
c0006844:	e8 b3 3b 01 00       	call   c001a3fc <iso_kprintf>
c0006849:	58                   	pop    eax
c000684a:	ff b3 44 65 02 c0    	push   DWORD PTR [ebx-0x3ffd9abc]
c0006850:	e8 c3 3b 01 00       	call   c001a418 <iso_kprintfd>
c0006855:	c7 04 24 91 0a 02 c0 	mov    DWORD PTR [esp],0xc0020a91
c000685c:	e8 9b 3b 01 00       	call   c001a3fc <iso_kprintf>
c0006861:	58                   	pop    eax
c0006862:	ff b3 d0 65 02 c0    	push   DWORD PTR [ebx-0x3ffd9a30]
c0006868:	e8 ab 3b 01 00       	call   c001a418 <iso_kprintfd>
c000686d:	83 c4 10             	add    esp,0x10
c0006870:	eb 42                	jmp    c00068b4 <iso_readdir+0xe2>
c0006872:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c0006875:	8b 34 85 80 60 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffd9f80]
c000687c:	89 d1                	mov    ecx,edx
c000687e:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0006884:	8d 74 0e 04          	lea    esi,[esi+ecx*1+0x4]
c0006888:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c000688b:	75 35                	jne    c00068c2 <iso_readdir+0xf0>
c000688d:	81 e2 00 f8 ff ff    	and    edx,0xfffff800
c0006893:	81 c2 00 08 00 00    	add    edx,0x800
c0006899:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c000689c:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c000689f:	3b 57 0c             	cmp    edx,DWORD PTR [edi+0xc]
c00068a2:	73 1e                	jae    c00068c2 <iso_readdir+0xf0>
c00068a4:	c1 ea 0b             	shr    edx,0xb
c00068a7:	8b 07                	mov    eax,DWORD PTR [edi]
c00068a9:	01 d0                	add    eax,edx
c00068ab:	e8 50 f9 ff ff       	call   c0006200 <biread>
c00068b0:	85 c0                	test   eax,eax
c00068b2:	79 be                	jns    c0006872 <iso_readdir+0xa0>
c00068b4:	31 c0                	xor    eax,eax
c00068b6:	e9 66 01 00 00       	jmp    c0006a21 <iso_readdir+0x24f>
c00068bb:	31 f6                	xor    esi,esi
c00068bd:	83 c8 ff             	or     eax,0xffffffff
c00068c0:	eb da                	jmp    c000689c <iso_readdir+0xca>
c00068c2:	69 d3 94 00 00 00    	imul   edx,ebx,0x94
c00068c8:	8b ba 48 65 02 c0    	mov    edi,DWORD PTR [edx-0x3ffd9ab8]
c00068ce:	81 c2 40 65 02 c0    	add    edx,0xc0026540
c00068d4:	3b 7a 0c             	cmp    edi,DWORD PTR [edx+0xc]
c00068d7:	73 db                	jae    c00068b4 <iso_readdir+0xe2>
c00068d9:	80 7e 21 00          	cmp    BYTE PTR [esi+0x21],0x0
c00068dd:	75 34                	jne    c0006913 <iso_readdir+0x141>
c00068df:	80 7e 20 01          	cmp    BYTE PTR [esi+0x20],0x1
c00068e3:	75 2e                	jne    c0006913 <iso_readdir+0x141>
c00068e5:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c00068e8:	8b 34 85 80 60 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffd9f80]
c00068ef:	01 f9                	add    ecx,edi
c00068f1:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c00068f4:	89 c8                	mov    eax,ecx
c00068f6:	25 ff 07 00 00       	and    eax,0x7ff
c00068fb:	0f b6 44 06 04       	movzx  eax,BYTE PTR [esi+eax*1+0x4]
c0006900:	01 c8                	add    eax,ecx
c0006902:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c0006905:	25 ff 07 00 00       	and    eax,0x7ff
c000690a:	8d 74 06 04          	lea    esi,[esi+eax*1+0x4]
c000690e:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c0006911:	74 a1                	je     c00068b4 <iso_readdir+0xe2>
c0006913:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c0006919:	0f b6 4e 20          	movzx  ecx,BYTE PTR [esi+0x20]
c000691d:	8d 56 21             	lea    edx,[esi+0x21]
c0006920:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0006924:	8d a8 58 65 02 c0    	lea    ebp,[eax-0x3ffd9aa8]
c000692a:	83 3d b4 6e 02 c0 00 	cmp    DWORD PTR ds:0xc0026eb4,0x0
c0006931:	74 0c                	je     c000693f <iso_readdir+0x16d>
c0006933:	89 e8                	mov    eax,ebp
c0006935:	e8 14 f6 ff ff       	call   c0005f4e <ucs2utfn>
c000693a:	e9 a6 00 00 00       	jmp    c00069e5 <iso_readdir+0x213>
c000693f:	57                   	push   edi
c0006940:	51                   	push   ecx
c0006941:	52                   	push   edx
c0006942:	55                   	push   ebp
c0006943:	e8 38 9d ff ff       	call   c0000680 <strncpy>
c0006948:	0f b6 46 20          	movzx  eax,BYTE PTR [esi+0x20]
c000694c:	69 cb 94 00 00 00    	imul   ecx,ebx,0x94
c0006952:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0006955:	c6 84 01 58 65 02 c0 00 	mov    BYTE PTR [ecx+eax*1-0x3ffd9aa8],0x0
c000695d:	e8 49 fe ff ff       	call   c00067ab <fn_postprocess>
c0006962:	0f b6 56 20          	movzx  edx,BYTE PTR [esi+0x20]
c0006966:	0f b6 06             	movzx  eax,BYTE PTR [esi]
c0006969:	83 c4 10             	add    esp,0x10
c000696c:	29 d0                	sub    eax,edx
c000696e:	8d 7c 16 21          	lea    edi,[esi+edx*1+0x21]
c0006972:	f6 46 20 01          	test   BYTE PTR [esi+0x20],0x1
c0006976:	74 05                	je     c000697d <iso_readdir+0x1ab>
c0006978:	83 e8 21             	sub    eax,0x21
c000697b:	eb 04                	jmp    c0006981 <iso_readdir+0x1af>
c000697d:	47                   	inc    edi
c000697e:	83 e8 22             	sub    eax,0x22
c0006981:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0006985:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c000698b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000698f:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c0006994:	7e 4f                	jle    c00069e5 <iso_readdir+0x213>
c0006996:	8a 47 03             	mov    al,BYTE PTR [edi+0x3]
c0006999:	48                   	dec    eax
c000699a:	3c 01                	cmp    al,0x1
c000699c:	77 47                	ja     c00069e5 <iso_readdir+0x213>
c000699e:	52                   	push   edx
c000699f:	6a 02                	push   0x2
c00069a1:	68 7d 0a 02 c0       	push   0xc0020a7d
c00069a6:	57                   	push   edi
c00069a7:	e8 34 9e ff ff       	call   c00007e0 <strncmp>
c00069ac:	83 c4 10             	add    esp,0x10
c00069af:	85 c0                	test   eax,eax
c00069b1:	75 26                	jne    c00069d9 <iso_readdir+0x207>
c00069b3:	50                   	push   eax
c00069b4:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c00069b8:	83 e8 05             	sub    eax,0x5
c00069bb:	50                   	push   eax
c00069bc:	8d 47 05             	lea    eax,[edi+0x5]
c00069bf:	50                   	push   eax
c00069c0:	55                   	push   ebp
c00069c1:	e8 ba 9c ff ff       	call   c0000680 <strncpy>
c00069c6:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00069ca:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c00069ce:	83 c4 10             	add    esp,0x10
c00069d1:	c6 84 08 53 65 02 c0 00 	mov    BYTE PTR [eax+ecx*1-0x3ffd9aad],0x0
c00069d9:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c00069dd:	29 44 24 04          	sub    DWORD PTR [esp+0x4],eax
c00069e1:	01 c7                	add    edi,eax
c00069e3:	eb aa                	jmp    c000698f <iso_readdir+0x1bd>
c00069e5:	83 c8 ff             	or     eax,0xffffffff
c00069e8:	f6 46 19 02          	test   BYTE PTR [esi+0x19],0x2
c00069ec:	89 c2                	mov    edx,eax
c00069ee:	75 0a                	jne    c00069fa <iso_readdir+0x228>
c00069f0:	8d 46 0a             	lea    eax,[esi+0xa]
c00069f3:	e8 06 f6 ff ff       	call   c0005ffe <iso_733>
c00069f8:	31 d2                	xor    edx,edx
c00069fa:	69 db 94 00 00 00    	imul   ebx,ebx,0x94
c0006a00:	89 83 50 65 02 c0    	mov    DWORD PTR [ebx-0x3ffd9ab0],eax
c0006a06:	89 93 54 65 02 c0    	mov    DWORD PTR [ebx-0x3ffd9aac],edx
c0006a0c:	81 c3 40 65 02 c0    	add    ebx,0xc0026540
c0006a12:	0f b6 06             	movzx  eax,BYTE PTR [esi]
c0006a15:	01 43 08             	add    DWORD PTR [ebx+0x8],eax
c0006a18:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006a1c:	05 50 65 02 c0       	add    eax,0xc0026550
c0006a21:	83 c4 1c             	add    esp,0x1c
c0006a24:	5b                   	pop    ebx
c0006a25:	5e                   	pop    esi
c0006a26:	5f                   	pop    edi
c0006a27:	5d                   	pop    ebp
c0006a28:	c3                   	ret    

c0006a29 <iso_reset>:
c0006a29:	83 ec 18             	sub    esp,0x18
c0006a2c:	68 9a 0a 02 c0       	push   0xc0020a9a
c0006a31:	e8 c6 39 01 00       	call   c001a3fc <iso_kprintf>
c0006a36:	e8 10 f7 ff ff       	call   c000614b <iso_break_all>
c0006a3b:	e8 09 f7 ff ff       	call   c0006149 <bclear>
c0006a40:	31 c0                	xor    eax,eax
c0006a42:	83 c4 1c             	add    esp,0x1c
c0006a45:	c3                   	ret    

c0006a46 <init_percd>:
c0006a46:	57                   	push   edi
c0006a47:	56                   	push   esi
c0006a48:	53                   	push   ebx
c0006a49:	bb 01 00 00 00       	mov    ebx,0x1
c0006a4e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006a52:	a2 60 60 02 c0       	mov    ds:0xc0026060,al
c0006a57:	e8 cd ff ff ff       	call   c0006a29 <iso_reset>
c0006a5c:	c7 05 b4 6e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026eb4,0x0
c0006a66:	a1 ac 6e 02 c0       	mov    eax,ds:0xc0026eac
c0006a6b:	8d 44 03 10          	lea    eax,[ebx+eax*1+0x10]
c0006a6f:	e8 8c f7 ff ff       	call   c0006200 <biread>
c0006a74:	89 c6                	mov    esi,eax
c0006a76:	85 c0                	test   eax,eax
c0006a78:	0f 88 ba 00 00 00    	js     c0006b38 <init_percd+0xf2>
c0006a7e:	8b 04 85 80 60 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9f80]
c0006a85:	83 c0 04             	add    eax,0x4
c0006a88:	52                   	push   edx
c0006a89:	6a 06                	push   0x6
c0006a8b:	68 a5 0a 02 c0       	push   0xc0020aa5
c0006a90:	50                   	push   eax
c0006a91:	e8 ea 98 ff ff       	call   c0000380 <memcmp>
c0006a96:	83 c4 10             	add    esp,0x10
c0006a99:	85 c0                	test   eax,eax
c0006a9b:	74 08                	je     c0006aa5 <init_percd+0x5f>
c0006a9d:	43                   	inc    ebx
c0006a9e:	83 fb 04             	cmp    ebx,0x4
c0006aa1:	75 c3                	jne    c0006a66 <init_percd+0x20>
c0006aa3:	eb 1a                	jmp    c0006abf <init_percd+0x79>
c0006aa5:	8b 04 b5 80 60 02 c0 	mov    eax,DWORD PTR [esi*4-0x3ffd9f80]
c0006aac:	83 c0 5c             	add    eax,0x5c
c0006aaf:	e8 17 f5 ff ff       	call   c0005fcb <isjoliet>
c0006ab4:	a3 b4 6e 02 c0       	mov    ds:0xc0026eb4,eax
c0006ab9:	85 c0                	test   eax,eax
c0006abb:	74 e0                	je     c0006a9d <init_percd+0x57>
c0006abd:	eb 3e                	jmp    c0006afd <init_percd+0xb7>
c0006abf:	83 3d b4 6e 02 c0 00 	cmp    DWORD PTR ds:0xc0026eb4,0x0
c0006ac6:	75 35                	jne    c0006afd <init_percd+0xb7>
c0006ac8:	a1 ac 6e 02 c0       	mov    eax,ds:0xc0026eac
c0006acd:	83 c0 10             	add    eax,0x10
c0006ad0:	e8 2b f7 ff ff       	call   c0006200 <biread>
c0006ad5:	89 c6                	mov    esi,eax
c0006ad7:	85 c0                	test   eax,eax
c0006ad9:	78 5f                	js     c0006b3a <init_percd+0xf4>
c0006adb:	83 cb ff             	or     ebx,0xffffffff
c0006ade:	50                   	push   eax
c0006adf:	8b 04 b5 80 60 02 c0 	mov    eax,DWORD PTR [esi*4-0x3ffd9f80]
c0006ae6:	6a 06                	push   0x6
c0006ae8:	83 c0 04             	add    eax,0x4
c0006aeb:	68 ac 0a 02 c0       	push   0xc0020aac
c0006af0:	50                   	push   eax
c0006af1:	e8 8a 98 ff ff       	call   c0000380 <memcmp>
c0006af6:	83 c4 10             	add    esp,0x10
c0006af9:	85 c0                	test   eax,eax
c0006afb:	75 3d                	jne    c0006b3a <init_percd+0xf4>
c0006afd:	8b 34 b5 80 60 02 c0 	mov    esi,DWORD PTR [esi*4-0x3ffd9f80]
c0006b04:	bf 80 6e 02 c0       	mov    edi,0xc0026e80
c0006b09:	81 c6 a0 00 00 00    	add    esi,0xa0
c0006b0f:	b9 22 00 00 00       	mov    ecx,0x22
c0006b14:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0006b16:	b8 82 6e 02 c0       	mov    eax,0xc0026e82
c0006b1b:	31 db                	xor    ebx,ebx
c0006b1d:	e8 dc f4 ff ff       	call   c0005ffe <iso_733>
c0006b22:	a3 a8 6e 02 c0       	mov    ds:0xc0026ea8,eax
c0006b27:	b8 8a 6e 02 c0       	mov    eax,0xc0026e8a
c0006b2c:	e8 cd f4 ff ff       	call   c0005ffe <iso_733>
c0006b31:	a3 a4 6e 02 c0       	mov    ds:0xc0026ea4,eax
c0006b36:	eb 02                	jmp    c0006b3a <init_percd+0xf4>
c0006b38:	89 c3                	mov    ebx,eax
c0006b3a:	89 d8                	mov    eax,ebx
c0006b3c:	5b                   	pop    ebx
c0006b3d:	5e                   	pop    esi
c0006b3e:	5f                   	pop    edi
c0006b3f:	c3                   	ret    

c0006b40 <iso_ioctl>:
c0006b40:	83 ec 18             	sub    esp,0x18
c0006b43:	68 b3 0a 02 c0       	push   0xc0020ab3
c0006b48:	e8 af 38 01 00       	call   c001a3fc <iso_kprintf>
c0006b4d:	e8 d7 fe ff ff       	call   c0006a29 <iso_reset>
c0006b52:	31 c0                	xor    eax,eax
c0006b54:	83 c4 1c             	add    esp,0x1c
c0006b57:	c3                   	ret    

c0006b58 <fs_iso9660_init>:
c0006b58:	53                   	push   ebx
c0006b59:	31 db                	xor    ebx,ebx
c0006b5b:	83 ec 14             	sub    esp,0x14
c0006b5e:	68 be 0a 02 c0       	push   0xc0020abe
c0006b63:	e8 94 38 01 00       	call   c001a3fc <iso_kprintf>
c0006b68:	83 c4 0c             	add    esp,0xc
c0006b6b:	68 40 09 00 00       	push   0x940
c0006b70:	6a 00                	push   0x0
c0006b72:	68 40 65 02 c0       	push   0xc0026540
c0006b77:	e8 74 99 ff ff       	call   c00004f0 <memset>
c0006b7c:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0006b83:	c7 05 40 65 02 c0 ff ff ff ff 	mov    DWORD PTR ds:0xc0026540,0xffffffff
c0006b8d:	e8 24 0f 00 00       	call   c0007ab6 <malloc>
c0006b92:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0006b99:	a3 b0 6e 02 c0       	mov    ds:0xc0026eb0,eax
c0006b9e:	e8 13 0f 00 00       	call   c0007ab6 <malloc>
c0006ba3:	83 c4 10             	add    esp,0x10
c0006ba6:	a3 20 65 02 c0       	mov    ds:0xc0026520,eax
c0006bab:	83 ec 0c             	sub    esp,0xc
c0006bae:	68 04 08 00 00       	push   0x804
c0006bb3:	e8 fe 0e 00 00       	call   c0007ab6 <malloc>
c0006bb8:	89 04 9d 80 60 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd9f80],eax
c0006bbf:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0006bc5:	c7 04 24 04 08 00 00 	mov    DWORD PTR [esp],0x804
c0006bcc:	e8 e5 0e 00 00       	call   c0007ab6 <malloc>
c0006bd1:	83 c4 10             	add    esp,0x10
c0006bd4:	89 04 9d 20 60 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd9fe0],eax
c0006bdb:	43                   	inc    ebx
c0006bdc:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0006be2:	83 fb 10             	cmp    ebx,0x10
c0006be5:	75 c4                	jne    c0006bab <fs_iso9660_init+0x53>
c0006be7:	31 c0                	xor    eax,eax
c0006be9:	83 c4 08             	add    esp,0x8
c0006bec:	5b                   	pop    ebx
c0006bed:	c3                   	ret    

c0006bee <fs_iso9660_shutdown>:
c0006bee:	53                   	push   ebx
c0006bef:	31 db                	xor    ebx,ebx
c0006bf1:	83 ec 08             	sub    esp,0x8
c0006bf4:	83 ec 0c             	sub    esp,0xc
c0006bf7:	ff 34 9d 80 60 02 c0 	push   DWORD PTR [ebx*4-0x3ffd9f80]
c0006bfe:	e8 c3 0e 00 00       	call   c0007ac6 <free>
c0006c03:	58                   	pop    eax
c0006c04:	ff 34 9d 20 60 02 c0 	push   DWORD PTR [ebx*4-0x3ffd9fe0]
c0006c0b:	43                   	inc    ebx
c0006c0c:	e8 b5 0e 00 00       	call   c0007ac6 <free>
c0006c11:	83 c4 10             	add    esp,0x10
c0006c14:	83 fb 10             	cmp    ebx,0x10
c0006c17:	75 db                	jne    c0006bf4 <fs_iso9660_shutdown+0x6>
c0006c19:	a1 b0 6e 02 c0       	mov    eax,ds:0xc0026eb0
c0006c1e:	85 c0                	test   eax,eax
c0006c20:	74 0c                	je     c0006c2e <fs_iso9660_shutdown+0x40>
c0006c22:	83 ec 0c             	sub    esp,0xc
c0006c25:	50                   	push   eax
c0006c26:	e8 9b 0e 00 00       	call   c0007ac6 <free>
c0006c2b:	83 c4 10             	add    esp,0x10
c0006c2e:	a1 20 65 02 c0       	mov    eax,ds:0xc0026520
c0006c33:	85 c0                	test   eax,eax
c0006c35:	74 0c                	je     c0006c43 <fs_iso9660_shutdown+0x55>
c0006c37:	83 ec 0c             	sub    esp,0xc
c0006c3a:	50                   	push   eax
c0006c3b:	e8 86 0e 00 00       	call   c0007ac6 <free>
c0006c40:	83 c4 10             	add    esp,0x10
c0006c43:	c7 05 20 65 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026520,0x0
c0006c4d:	c7 05 b0 6e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026eb0,0x0
c0006c57:	31 c0                	xor    eax,eax
c0006c59:	83 c4 08             	add    esp,0x8
c0006c5c:	5b                   	pop    ebx
c0006c5d:	c3                   	ret    

c0006c5e <Computer::close(int, int, void*)>:
c0006c5e:	57                   	push   edi
c0006c5f:	56                   	push   esi
c0006c60:	53                   	push   ebx
c0006c61:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0006c65:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0006c69:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0006c6d:	e8 da a1 00 00       	call   c0010e4c <KeExecuteAtexit()>
c0006c72:	83 ec 0c             	sub    esp,0xc
c0006c75:	8b 83 68 01 00 00    	mov    eax,DWORD PTR [ebx+0x168]
c0006c7b:	50                   	push   eax
c0006c7c:	e8 6f 5e 00 00       	call   c000caf0 <Device::closeAll()>
c0006c81:	8b 83 68 01 00 00    	mov    eax,DWORD PTR [ebx+0x168]
c0006c87:	83 c4 10             	add    esp,0x10
c0006c8a:	8b 10                	mov    edx,DWORD PTR [eax]
c0006c8c:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c0006c90:	c7 44 24 18 0f 27 00 00 	mov    DWORD PTR [esp+0x18],0x270f
c0006c98:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0006c9c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0006ca0:	5b                   	pop    ebx
c0006ca1:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0006ca4:	5e                   	pop    esi
c0006ca5:	5f                   	pop    edi
c0006ca6:	ff e0                	jmp    eax

c0006ca8 <Krnl::firstTask()>:
c0006ca8:	53                   	push   ebx
c0006ca9:	83 ec 14             	sub    esp,0x14
c0006cac:	fb                   	sti    
c0006cad:	68 cf 0a 02 c0       	push   0xc0020acf
c0006cb2:	e8 74 a2 00 00       	call   c0010f2b <KeSetBootMessage(char const*)>
c0006cb7:	c7 04 24 24 07 00 00 	mov    DWORD PTR [esp],0x724
c0006cbe:	e8 f3 0d 00 00       	call   c0007ab6 <malloc>
c0006cc3:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0006cca:	89 c3                	mov    ebx,eax
c0006ccc:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0006cd1:	50                   	push   eax
c0006cd2:	68 e8 0a 02 c0       	push   0xc0020ae8
c0006cd7:	6a 01                	push   0x1
c0006cd9:	53                   	push   ebx
c0006cda:	e8 3d ef 00 00       	call   c0015c1c <Process::Process(bool, char const*, Process*, char**)>
c0006cdf:	83 c4 20             	add    esp,0x20
c0006ce2:	68 ff 00 00 00       	push   0xff
c0006ce7:	6a 00                	push   0x0
c0006ce9:	68 fd 74 00 c0       	push   0xc00074fd
c0006cee:	53                   	push   ebx
c0006cef:	e8 4c f1 00 00       	call   c0015e40 <Process::createThread(void (*)(void*), void*, int)>
c0006cf4:	8b 15 f0 c6 02 c0    	mov    edx,DWORD PTR ds:0xc002c6f0
c0006cfa:	6a 7a                	push   0x7a
c0006cfc:	6a 00                	push   0x0
c0006cfe:	68 28 69 01 c0       	push   0xc0016928
c0006d03:	52                   	push   edx
c0006d04:	e8 37 f1 00 00       	call   c0015e40 <Process::createThread(void (*)(void*), void*, int)>
c0006d09:	83 c4 14             	add    esp,0x14
c0006d0c:	a3 a8 c6 02 c0       	mov    ds:0xc002c6a8,eax
c0006d11:	68 e4 0b 02 c0       	push   0xc0020be4
c0006d16:	e8 10 a2 00 00       	call   c0010f2b <KeSetBootMessage(char const*)>
c0006d1b:	c6 05 bd 6e 02 c0 01 	mov    BYTE PTR ds:0xc0026ebd,0x1
c0006d22:	e8 bd aa 00 00       	call   c00117e4 <KeInitRand()>
c0006d27:	e8 1f 00 01 00       	call   c0016d4b <Vm::initialise8086()>
c0006d2c:	e8 15 4b 00 00       	call   c000b846 <Fs::initVFS()>
c0006d31:	c7 04 24 f5 0a 02 c0 	mov    DWORD PTR [esp],0xc0020af5
c0006d38:	e8 ee a1 00 00       	call   c0010f2b <KeSetBootMessage(char const*)>
c0006d3d:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0006d42:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c0006d48:	8b 10                	mov    edx,DWORD PTR [eax]
c0006d4a:	6a 00                	push   0x0
c0006d4c:	6a 00                	push   0x0
c0006d4e:	6a 00                	push   0x0
c0006d50:	50                   	push   eax
c0006d51:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0006d54:	83 c4 14             	add    esp,0x14
c0006d57:	68 e4 0b 02 c0       	push   0xc0020be4
c0006d5c:	e8 ca a1 00 00       	call   c0010f2b <KeSetBootMessage(char const*)>
c0006d61:	e8 10 47 00 00       	call   c000b476 <KeInitialiseSymlinks()>
c0006d66:	e8 23 a7 00 00       	call   c001148e <KeLoadSystemEnv()>
c0006d6b:	e8 80 a9 00 00       	call   c00116f0 <KeSetupPowerManager()>
c0006d70:	83 c4 0c             	add    esp,0xc
c0006d73:	6a 3a                	push   0x3a
c0006d75:	68 0f 0b 02 c0       	push   0xc0020b0f
c0006d7a:	68 18 0b 02 c0       	push   0xc0020b18
c0006d7f:	e8 b4 d0 00 00       	call   c0013e38 <Reg::readIntWithDefault(char*, char*, int)>
c0006d84:	89 04 24             	mov    DWORD PTR [esp],eax
c0006d87:	e8 c4 56 00 00       	call   c000c450 <User::loadClockSettings(int)>
c0006d8c:	c7 04 24 08 0c 02 c0 	mov    DWORD PTR [esp],0xc0020c08
c0006d93:	e8 93 a1 00 00       	call   c0010f2b <KeSetBootMessage(char const*)>
c0006d98:	59                   	pop    ecx
c0006d99:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0006d9e:	8b 98 68 01 00 00    	mov    ebx,DWORD PTR [eax+0x168]
c0006da4:	53                   	push   ebx
c0006da5:	e8 44 5d 00 00       	call   c000caee <Device::loadDriversForAll()>
c0006daa:	c7 04 24 20 0b 02 c0 	mov    DWORD PTR [esp],0xc0020b20
c0006db1:	e8 75 a1 00 00       	call   c0010f2b <KeSetBootMessage(char const*)>
c0006db6:	58                   	pop    eax
c0006db7:	8b 1d b8 6e 02 c0    	mov    ebx,DWORD PTR ds:0xc0026eb8
c0006dbd:	5a                   	pop    edx
c0006dbe:	6a 01                	push   0x1
c0006dc0:	68 31 0b 02 c0       	push   0xc0020b31
c0006dc5:	e8 65 e8 00 00       	call   c001562f <Thr::loadDLL(char const*, bool)>
c0006dca:	59                   	pop    ecx
c0006dcb:	5a                   	pop    edx
c0006dcc:	53                   	push   ebx
c0006dcd:	50                   	push   eax
c0006dce:	e8 8d ea 00 00       	call   c0015860 <Thr::executeDLL(unsigned long, void*)>
c0006dd3:	83 c4 10             	add    esp,0x10
c0006dd6:	83 ec 0c             	sub    esp,0xc
c0006dd9:	6a 02                	push   0x2
c0006ddb:	e8 c4 f4 00 00       	call   c00162a4 <blockTask(TaskState)>
c0006de0:	83 c4 10             	add    esp,0x10
c0006de3:	eb f1                	jmp    c0006dd6 <Krnl::firstTask()+0x12e>
c0006de5:	90                   	nop

c0006de6 <Computer::Computer()>:
c0006de6:	83 ec 0c             	sub    esp,0xc
c0006de9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ded:	83 ec 08             	sub    esp,0x8
c0006df0:	68 4d 0b 02 c0       	push   0xc0020b4d
c0006df5:	50                   	push   eax
c0006df6:	e8 6f 5d 00 00       	call   c000cb6a <Device::Device(char const*)>
c0006dfb:	83 c4 10             	add    esp,0x10
c0006dfe:	ba 54 0c 02 c0       	mov    edx,0xc0020c54
c0006e03:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e07:	89 10                	mov    DWORD PTR [eax],edx
c0006e09:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e0d:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c0006e17:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e1b:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c0006e25:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e29:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c0006e2f:	83 ca 04             	or     edx,0x4
c0006e32:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c0006e38:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e3c:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0006e42:	0f b6 d0             	movzx  edx,al
c0006e45:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e49:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c0006e50:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e54:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0006e5a:	0f b6 d0             	movzx  edx,al
c0006e5d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e61:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0006e66:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e6a:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0006e70:	8d 50 01             	lea    edx,[eax+0x1]
c0006e73:	88 d1                	mov    cl,dl
c0006e75:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0006e79:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c0006e7f:	0f b6 d0             	movzx  edx,al
c0006e82:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e86:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0006e8a:	83 e1 3f             	and    ecx,0x3f
c0006e8d:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0006e91:	90                   	nop
c0006e92:	83 c4 0c             	add    esp,0xc
c0006e95:	c3                   	ret    

c0006e96 <Computer::setBootMessage(char const*)>:
c0006e96:	c3                   	ret    
c0006e97:	90                   	nop

c0006e98 <Computer::detectFeatures()>:
c0006e98:	55                   	push   ebp
c0006e99:	57                   	push   edi
c0006e9a:	56                   	push   esi
c0006e9b:	53                   	push   ebx
c0006e9c:	83 ec 1c             	sub    esp,0x1c
c0006e9f:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0006ea3:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c0006ea9:	81 e2 04 00 fc ff    	and    edx,0xfffc0004
c0006eaf:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c0006eb5:	e8 3f 93 ff ff       	call   c00001f9 <detectCPUID>
c0006eba:	31 d2                	xor    edx,edx
c0006ebc:	85 c0                	test   eax,eax
c0006ebe:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006ec4:	0f 95 c2             	setne  dl
c0006ec7:	83 e0 fd             	and    eax,0xfffffffd
c0006eca:	d1 e2                	shl    edx,1
c0006ecc:	09 d0                	or     eax,edx
c0006ece:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006ed4:	a8 02                	test   al,0x2
c0006ed6:	75 51                	jne    c0006f29 <Computer::detectFeatures()+0x91>
c0006ed8:	f6 05 d1 6e 02 c0 04 	test   BYTE PTR ds:0xc0026ed1,0x4
c0006edf:	74 0f                	je     c0006ef0 <Computer::detectFeatures()+0x58>
c0006ee1:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006ee7:	83 e0 fb             	and    eax,0xfffffffb
c0006eea:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006ef0:	e8 d1 84 01 00       	call   c001f3c6 <x87Detect>
c0006ef5:	83 e0 01             	and    eax,0x1
c0006ef8:	c1 e0 04             	shl    eax,0x4
c0006efb:	89 c2                	mov    edx,eax
c0006efd:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006f03:	83 e0 ef             	and    eax,0xffffffef
c0006f06:	09 d0                	or     eax,edx
c0006f08:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006f0e:	88 c2                	mov    dl,al
c0006f10:	a8 10                	test   al,0x10
c0006f12:	0f 85 33 01 00 00    	jne    c000704b <Computer::detectFeatures()+0x1b3>
c0006f18:	80 e2 80             	and    dl,0x80
c0006f1b:	0f 85 4c 01 00 00    	jne    c000706d <Computer::detectFeatures()+0x1d5>
c0006f21:	83 c4 1c             	add    esp,0x1c
c0006f24:	5b                   	pop    ebx
c0006f25:	5e                   	pop    esi
c0006f26:	5f                   	pop    edi
c0006f27:	5d                   	pop    ebp
c0006f28:	c3                   	ret    
c0006f29:	83 ec 0c             	sub    esp,0xc
c0006f2c:	6a 20                	push   0x20
c0006f2e:	e8 31 94 00 00       	call   c0010364 <CPU::cpuidCheckEDX(unsigned int)>
c0006f33:	83 e0 01             	and    eax,0x1
c0006f36:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0006f3d:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006f43:	83 e0 f7             	and    eax,0xfffffff7
c0006f46:	09 d0                	or     eax,edx
c0006f48:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006f4e:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c0006f55:	e8 0a 94 00 00       	call   c0010364 <CPU::cpuidCheckEDX(unsigned int)>
c0006f5a:	89 c2                	mov    edx,eax
c0006f5c:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c0006f62:	83 e2 01             	and    edx,0x1
c0006f65:	83 e0 fe             	and    eax,0xfffffffe
c0006f68:	09 d0                	or     eax,edx
c0006f6a:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c0006f70:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c0006f77:	e8 e8 93 00 00       	call   c0010364 <CPU::cpuidCheckEDX(unsigned int)>
c0006f7c:	89 c2                	mov    edx,eax
c0006f7e:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c0006f84:	c1 e2 07             	shl    edx,0x7
c0006f87:	83 e0 7f             	and    eax,0x7f
c0006f8a:	09 d0                	or     eax,edx
c0006f8c:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c0006f92:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c0006f99:	e8 c6 93 00 00       	call   c0010364 <CPU::cpuidCheckEDX(unsigned int)>
c0006f9e:	83 c4 10             	add    esp,0x10
c0006fa1:	83 e0 01             	and    eax,0x1
c0006fa4:	c1 e0 05             	shl    eax,0x5
c0006fa7:	89 c2                	mov    edx,eax
c0006fa9:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006faf:	83 e0 df             	and    eax,0xffffffdf
c0006fb2:	09 d0                	or     eax,edx
c0006fb4:	f7 05 d0 6e 02 c0 01 04 00 00 	test   DWORD PTR ds:0xc0026ed0,0x401
c0006fbe:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006fc4:	0f 84 c9 00 00 00    	je     c0007093 <Computer::detectFeatures()+0x1fb>
c0006fca:	83 e0 fe             	and    eax,0xfffffffe
c0006fcd:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006fd3:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006fd9:	89 c2                	mov    edx,eax
c0006fdb:	83 e2 09             	and    edx,0x9
c0006fde:	83 fa 01             	cmp    edx,0x1
c0006fe1:	75 09                	jne    c0006fec <Computer::detectFeatures()+0x154>
c0006fe3:	83 e0 fe             	and    eax,0xfffffffe
c0006fe6:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006fec:	83 ec 0c             	sub    esp,0xc
c0006fef:	8d 44 24 18          	lea    eax,[esp+0x18]
c0006ff3:	50                   	push   eax
c0006ff4:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c0006ff8:	55                   	push   ebp
c0006ff9:	8d 7c 24 18          	lea    edi,[esp+0x18]
c0006ffd:	57                   	push   edi
c0006ffe:	8d 74 24 18          	lea    esi,[esp+0x18]
c0007002:	56                   	push   esi
c0007003:	68 00 00 00 80       	push   0x80000000
c0007008:	e8 d3 92 00 00       	call   c00102e0 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000700d:	83 c4 20             	add    esp,0x20
c0007010:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c0007017:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000701b:	0f 86 b7 fe ff ff    	jbe    c0006ed8 <Computer::detectFeatures()+0x40>
c0007021:	83 ec 0c             	sub    esp,0xc
c0007024:	50                   	push   eax
c0007025:	55                   	push   ebp
c0007026:	57                   	push   edi
c0007027:	56                   	push   esi
c0007028:	68 01 00 00 80       	push   0x80000001
c000702d:	e8 ae 92 00 00       	call   c00102e0 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0007032:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0007038:	83 c4 20             	add    esp,0x20
c000703b:	25 bf ff fc ff       	and    eax,0xfffcffbf
c0007040:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0007046:	e9 8d fe ff ff       	jmp    c0006ed8 <Computer::detectFeatures()+0x40>
c000704b:	e8 30 83 01 00       	call   c001f380 <absolutelyNoChanceInHell>
c0007050:	8a 93 6c 01 00 00    	mov    dl,BYTE PTR [ebx+0x16c]
c0007056:	c1 e0 07             	shl    eax,0x7
c0007059:	83 e2 7f             	and    edx,0x7f
c000705c:	09 c2                	or     edx,eax
c000705e:	88 93 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],dl
c0007064:	80 e2 80             	and    dl,0x80
c0007067:	0f 84 b4 fe ff ff    	je     c0006f21 <Computer::detectFeatures()+0x89>
c000706d:	e8 7e 7f 01 00       	call   c001eff0 <avxDetect>
c0007072:	83 e0 01             	and    eax,0x1
c0007075:	c1 e0 05             	shl    eax,0x5
c0007078:	89 c2                	mov    edx,eax
c000707a:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c0007080:	83 e0 df             	and    eax,0xffffffdf
c0007083:	09 d0                	or     eax,edx
c0007085:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c000708b:	83 c4 1c             	add    esp,0x1c
c000708e:	5b                   	pop    ebx
c000708f:	5e                   	pop    esi
c0007090:	5f                   	pop    edi
c0007091:	5d                   	pop    ebp
c0007092:	c3                   	ret    
c0007093:	83 ec 0c             	sub    esp,0xc
c0007096:	68 00 02 00 00       	push   0x200
c000709b:	e8 c4 92 00 00       	call   c0010364 <CPU::cpuidCheckEDX(unsigned int)>
c00070a0:	83 c4 10             	add    esp,0x10
c00070a3:	89 c2                	mov    edx,eax
c00070a5:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c00070ab:	83 e2 01             	and    edx,0x1
c00070ae:	83 e0 fe             	and    eax,0xfffffffe
c00070b1:	09 d0                	or     eax,edx
c00070b3:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c00070b9:	e9 15 ff ff ff       	jmp    c0006fd3 <Computer::detectFeatures()+0x13b>

c00070be <Computer::displayFeatures()>:
c00070be:	c3                   	ret    
c00070bf:	90                   	nop

c00070c0 <Computer::rdmsr(unsigned int)>:
c00070c0:	83 ec 0c             	sub    esp,0xc
c00070c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00070c7:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c00070ce:	74 0a                	je     c00070da <Computer::rdmsr(unsigned int)+0x1a>
c00070d0:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00070d4:	0f 32                	rdmsr  
c00070d6:	83 c4 0c             	add    esp,0xc
c00070d9:	c3                   	ret    
c00070da:	83 ec 0c             	sub    esp,0xc
c00070dd:	68 56 0b 02 c0       	push   0xc0020b56
c00070e2:	e8 44 a5 00 00       	call   c001162b <KePanic(char const*)>
c00070e7:	83 c4 10             	add    esp,0x10
c00070ea:	eb e4                	jmp    c00070d0 <Computer::rdmsr(unsigned int)+0x10>

c00070ec <Computer::wrmsr(unsigned int, unsigned long long)>:
c00070ec:	57                   	push   edi
c00070ed:	56                   	push   esi
c00070ee:	83 ec 04             	sub    esp,0x4
c00070f1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00070f5:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00070f9:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00070fd:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c0007104:	74 10                	je     c0007116 <Computer::wrmsr(unsigned int, unsigned long long)+0x2a>
c0007106:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000710a:	89 f0                	mov    eax,esi
c000710c:	89 fa                	mov    edx,edi
c000710e:	0f 30                	wrmsr  
c0007110:	83 c4 04             	add    esp,0x4
c0007113:	5e                   	pop    esi
c0007114:	5f                   	pop    edi
c0007115:	c3                   	ret    
c0007116:	83 ec 0c             	sub    esp,0xc
c0007119:	68 5c 0b 02 c0       	push   0xc0020b5c
c000711e:	e8 08 a5 00 00       	call   c001162b <KePanic(char const*)>
c0007123:	83 c4 10             	add    esp,0x10
c0007126:	eb de                	jmp    c0007106 <Computer::wrmsr(unsigned int, unsigned long long)+0x1a>

c0007128 <Computer::shutdown()>:
c0007128:	83 ec 0c             	sub    esp,0xc
c000712b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000712f:	8b 10                	mov    edx,DWORD PTR [eax]
c0007131:	6a 00                	push   0x0
c0007133:	6a 00                	push   0x0
c0007135:	6a 00                	push   0x0
c0007137:	50                   	push   eax
c0007138:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000713b:	83 c4 1c             	add    esp,0x1c
c000713e:	c3                   	ret    
c000713f:	90                   	nop

c0007140 <Computer::restart()>:
c0007140:	83 ec 0c             	sub    esp,0xc
c0007143:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007147:	8b 10                	mov    edx,DWORD PTR [eax]
c0007149:	6a 00                	push   0x0
c000714b:	6a 00                	push   0x0
c000714d:	6a 01                	push   0x1
c000714f:	50                   	push   eax
c0007150:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0007153:	83 c4 1c             	add    esp,0x1c
c0007156:	c3                   	ret    
c0007157:	90                   	nop

c0007158 <Computer::sleep()>:
c0007158:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000715c:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c0007162:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0007166:	e9 11 8c 00 00       	jmp    c000fd7c <ACPI::sleep()>
c000716b:	90                   	nop

c000716c <Computer::nmiEnabled()>:
c000716c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007170:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c0007176:	c3                   	ret    
c0007177:	90                   	nop

c0007178 <Computer::readCMOS(unsigned char)>:
c0007178:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000717c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007180:	80 ba 58 01 00 00 00 	cmp    BYTE PTR [edx+0x158],0x0
c0007187:	75 09                	jne    c0007192 <Computer::readCMOS(unsigned char)+0x1a>
c0007189:	b2 80                	mov    dl,0x80
c000718b:	09 d0                	or     eax,edx
c000718d:	e6 70                	out    0x70,al
c000718f:	e4 71                	in     al,0x71
c0007191:	c3                   	ret    
c0007192:	31 d2                	xor    edx,edx
c0007194:	eb f5                	jmp    c000718b <Computer::readCMOS(unsigned char)+0x13>

c0007196 <Computer::enableNMI(bool)>:
c0007196:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000719a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000719e:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c00071a4:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c00071ac:	eb ca                	jmp    c0007178 <Computer::readCMOS(unsigned char)>

c00071ae <Computer::open(int, int, void*)>:
c00071ae:	56                   	push   esi
c00071af:	53                   	push   ebx
c00071b0:	83 ec 10             	sub    esp,0x10
c00071b3:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00071b7:	f6 05 d0 6e 02 c0 04 	test   BYTE PTR ds:0xc0026ed0,0x4
c00071be:	68 62 0b 02 c0       	push   0xc0020b62
c00071c3:	0f 94 05 c0 35 02 c0 	sete   BYTE PTR ds:0xc00235c0
c00071ca:	e8 5c 9d 00 00       	call   c0010f2b <KeSetBootMessage(char const*)>
c00071cf:	c7 04 24 64 12 00 00 	mov    DWORD PTR [esp],0x1264
c00071d6:	e8 db 08 00 00       	call   c0007ab6 <malloc>
c00071db:	89 04 24             	mov    DWORD PTR [esp],eax
c00071de:	89 c6                	mov    esi,eax
c00071e0:	e8 0b 87 00 00       	call   c000f8f0 <ACPI::ACPI()>
c00071e5:	89 b3 68 01 00 00    	mov    DWORD PTR [ebx+0x168],esi
c00071eb:	58                   	pop    eax
c00071ec:	5a                   	pop    edx
c00071ed:	56                   	push   esi
c00071ee:	53                   	push   ebx
c00071ef:	e8 de 57 00 00       	call   c000c9d2 <Device::addChild(Device*)>
c00071f4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00071f7:	e8 9c fc ff ff       	call   c0006e98 <Computer::detectFeatures()>
c00071fc:	59                   	pop    ecx
c00071fd:	5e                   	pop    esi
c00071fe:	6a 01                	push   0x1
c0007200:	53                   	push   ebx
c0007201:	e8 90 ff ff ff       	call   c0007196 <Computer::enableNMI(bool)>
c0007206:	c7 04 24 7a 0b 02 c0 	mov    DWORD PTR [esp],0xc0020b7a
c000720d:	e8 19 9d 00 00       	call   c0010f2b <KeSetBootMessage(char const*)>
c0007212:	c7 04 24 94 11 00 00 	mov    DWORD PTR [esp],0x1194
c0007219:	e8 98 08 00 00       	call   c0007ab6 <malloc>
c000721e:	89 04 24             	mov    DWORD PTR [esp],eax
c0007221:	89 c6                	mov    esi,eax
c0007223:	e8 f4 91 00 00       	call   c001041c <CPU::CPU()>
c0007228:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c000722e:	58                   	pop    eax
c000722f:	5a                   	pop    edx
c0007230:	56                   	push   esi
c0007231:	53                   	push   ebx
c0007232:	e8 9b 57 00 00       	call   c000c9d2 <Device::addChild(Device*)>
c0007237:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000723d:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0007241:	8b 10                	mov    edx,DWORD PTR [eax]
c0007243:	51                   	push   ecx
c0007244:	6a 00                	push   0x0
c0007246:	6a 00                	push   0x0
c0007248:	50                   	push   eax
c0007249:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000724c:	83 c4 14             	add    esp,0x14
c000724f:	68 28 0c 02 c0       	push   0xc0020c28
c0007254:	e8 d2 9c 00 00       	call   c0010f2b <KeSetBootMessage(char const*)>
c0007259:	e8 2a 0d 01 00       	call   c0017f88 <HalInitialiseCoprocessor()>
c000725e:	c7 04 24 94 0b 02 c0 	mov    DWORD PTR [esp],0xc0020b94
c0007265:	e8 c1 9c 00 00       	call   c0010f2b <KeSetBootMessage(char const*)>
c000726a:	c7 04 24 a8 6c 00 c0 	mov    DWORD PTR [esp],0xc0006ca8
c0007271:	e8 f6 ec 00 00       	call   c0015f6c <setupMultitasking(void (*)())>
c0007276:	83 c4 14             	add    esp,0x14
c0007279:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000727e:	5b                   	pop    ebx
c000727f:	5e                   	pop    esi
c0007280:	c3                   	ret    
c0007281:	90                   	nop

c0007282 <Computer::disableNMI()>:
c0007282:	6a 00                	push   0x0
c0007284:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007288:	50                   	push   eax
c0007289:	e8 08 ff ff ff       	call   c0007196 <Computer::enableNMI(bool)>
c000728e:	5a                   	pop    edx
c000728f:	59                   	pop    ecx
c0007290:	c3                   	ret    
c0007291:	90                   	nop

c0007292 <Computer::writeCMOS(unsigned char, unsigned char)>:
c0007292:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0007296:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000729a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000729e:	80 b9 58 01 00 00 00 	cmp    BYTE PTR [ecx+0x158],0x0
c00072a5:	75 0b                	jne    c00072b2 <Computer::writeCMOS(unsigned char, unsigned char)+0x20>
c00072a7:	b1 80                	mov    cl,0x80
c00072a9:	09 c8                	or     eax,ecx
c00072ab:	e6 70                	out    0x70,al
c00072ad:	88 d0                	mov    al,dl
c00072af:	e6 71                	out    0x71,al
c00072b1:	c3                   	ret    
c00072b2:	31 c9                	xor    ecx,ecx
c00072b4:	eb f3                	jmp    c00072a9 <Computer::writeCMOS(unsigned char, unsigned char)+0x17>

c00072b6 <Computer::handleNMI()>:
c00072b6:	56                   	push   esi
c00072b7:	53                   	push   ebx
c00072b8:	83 ec 10             	sub    esp,0x10
c00072bb:	e4 92                	in     al,0x92
c00072bd:	89 c6                	mov    esi,eax
c00072bf:	e4 61                	in     al,0x61
c00072c1:	68 af 0b 02 c0       	push   0xc0020baf
c00072c6:	88 c3                	mov    bl,al
c00072c8:	e8 78 36 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c00072cd:	83 c4 10             	add    esp,0x10
c00072d0:	83 e6 10             	and    esi,0x10
c00072d3:	75 10                	jne    c00072e5 <Computer::handleNMI()+0x2f>
c00072d5:	f6 c3 40             	test   bl,0x40
c00072d8:	75 20                	jne    c00072fa <Computer::handleNMI()+0x44>
c00072da:	80 e3 80             	and    bl,0x80
c00072dd:	75 30                	jne    c000730f <Computer::handleNMI()+0x59>
c00072df:	83 c4 04             	add    esp,0x4
c00072e2:	5b                   	pop    ebx
c00072e3:	5e                   	pop    esi
c00072e4:	c3                   	ret    
c00072e5:	83 ec 0c             	sub    esp,0xc
c00072e8:	68 c0 0b 02 c0       	push   0xc0020bc0
c00072ed:	e8 39 a3 00 00       	call   c001162b <KePanic(char const*)>
c00072f2:	83 c4 10             	add    esp,0x10
c00072f5:	f6 c3 40             	test   bl,0x40
c00072f8:	74 e0                	je     c00072da <Computer::handleNMI()+0x24>
c00072fa:	83 ec 0c             	sub    esp,0xc
c00072fd:	68 cd 0b 02 c0       	push   0xc0020bcd
c0007302:	e8 24 a3 00 00       	call   c001162b <KePanic(char const*)>
c0007307:	83 c4 10             	add    esp,0x10
c000730a:	80 e3 80             	and    bl,0x80
c000730d:	74 d0                	je     c00072df <Computer::handleNMI()+0x29>
c000730f:	c7 44 24 10 d7 0b 02 c0 	mov    DWORD PTR [esp+0x10],0xc0020bd7
c0007317:	83 c4 04             	add    esp,0x4
c000731a:	5b                   	pop    ebx
c000731b:	5e                   	pop    esi
c000731c:	e9 0a a3 00 00       	jmp    c001162b <KePanic(char const*)>
c0007321:	90                   	nop

c0007322 <GDTEntry::setBase(unsigned int)>:
c0007322:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007326:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000732a:	89 c1                	mov    ecx,eax
c000732c:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c0007330:	c1 e9 10             	shr    ecx,0x10
c0007333:	c1 e8 18             	shr    eax,0x18
c0007336:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c0007339:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c000733c:	c3                   	ret    
c000733d:	90                   	nop

c000733e <GDTEntry::setLimit(unsigned int)>:
c000733e:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0007342:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007346:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c0007349:	66 89 01             	mov    WORD PTR [ecx],ax
c000734c:	83 e2 f0             	and    edx,0xfffffff0
c000734f:	c1 e8 10             	shr    eax,0x10
c0007352:	83 e0 0f             	and    eax,0xf
c0007355:	09 d0                	or     eax,edx
c0007357:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c000735a:	c3                   	ret    
c000735b:	90                   	nop

c000735c <GDT::GDT()>:
c000735c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007360:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0007366:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000736a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0007370:	90                   	nop
c0007371:	c3                   	ret    

c0007372 <GDT::addEntry(GDTEntry)>:
c0007372:	53                   	push   ebx
c0007373:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007377:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000737b:	8b 02                	mov    eax,DWORD PTR [edx]
c000737d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0007381:	89 4c c2 04          	mov    DWORD PTR [edx+eax*8+0x4],ecx
c0007385:	89 5c c2 08          	mov    DWORD PTR [edx+eax*8+0x8],ebx
c0007389:	8d 48 01             	lea    ecx,[eax+0x1]
c000738c:	c1 e0 03             	shl    eax,0x3
c000738f:	89 0a                	mov    DWORD PTR [edx],ecx
c0007391:	5b                   	pop    ebx
c0007392:	c3                   	ret    
c0007393:	90                   	nop

c0007394 <GDT::getNumberOfEntries()>:
c0007394:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007398:	8b 00                	mov    eax,DWORD PTR [eax]
c000739a:	c3                   	ret    
c000739b:	90                   	nop

c000739c <GDT::flush()>:
c000739c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00073a0:	8b 10                	mov    edx,DWORD PTR [eax]
c00073a2:	83 c0 04             	add    eax,0x4
c00073a5:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c00073ac:	a3 c2 6e 02 c0       	mov    ds:0xc0026ec2,eax
c00073b1:	66 89 15 c0 6e 02 c0 	mov    WORD PTR ds:0xc0026ec0,dx
c00073b8:	e9 9d 8f ff ff       	jmp    c000035a <loadGDT>
c00073bd:	90                   	nop

c00073be <GDT::setup()>:
c00073be:	57                   	push   edi
c00073bf:	56                   	push   esi
c00073c0:	53                   	push   ebx
c00073c1:	83 ec 30             	sub    esp,0x30
c00073c4:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00073c8:	6a 00                	push   0x0
c00073ca:	8d 74 24 14          	lea    esi,[esp+0x14]
c00073ce:	56                   	push   esi
c00073cf:	e8 4e ff ff ff       	call   c0007322 <GDTEntry::setBase(unsigned int)>
c00073d4:	6a 00                	push   0x0
c00073d6:	56                   	push   esi
c00073d7:	e8 62 ff ff ff       	call   c000733e <GDTEntry::setLimit(unsigned int)>
c00073dc:	81 64 24 24 ff 00 0f ff 	and    DWORD PTR [esp+0x24],0xff0f00ff
c00073e4:	6a 00                	push   0x0
c00073e6:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c00073ea:	56                   	push   esi
c00073eb:	e8 32 ff ff ff       	call   c0007322 <GDTEntry::setBase(unsigned int)>
c00073f0:	68 ff ff ff 00       	push   0xffffff
c00073f5:	56                   	push   esi
c00073f6:	e8 43 ff ff ff       	call   c000733e <GDTEntry::setLimit(unsigned int)>
c00073fb:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c00073ff:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0007403:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0007407:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c000740b:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c0007410:	0d 00 9a c0 00       	or     eax,0xc09a00
c0007415:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0007419:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000741d:	89 f8                	mov    eax,edi
c000741f:	89 fa                	mov    edx,edi
c0007421:	80 e4 f7             	and    ah,0xf7
c0007424:	80 ce 60             	or     dh,0x60
c0007427:	89 c7                	mov    edi,eax
c0007429:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000742d:	80 cc 60             	or     ah,0x60
c0007430:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0007434:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0007438:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000743c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007440:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007444:	83 c4 20             	add    esp,0x20
c0007447:	6a 00                	push   0x0
c0007449:	8d 44 24 24          	lea    eax,[esp+0x24]
c000744d:	50                   	push   eax
c000744e:	e8 cf fe ff ff       	call   c0007322 <GDTEntry::setBase(unsigned int)>
c0007453:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c0007457:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c000745b:	89 7c 24 34          	mov    DWORD PTR [esp+0x34],edi
c000745f:	83 e0 3f             	and    eax,0x3f
c0007462:	88 44 24 2e          	mov    BYTE PTR [esp+0x2e],al
c0007466:	6a 00                	push   0x0
c0007468:	8d 44 24 34          	lea    eax,[esp+0x34]
c000746c:	50                   	push   eax
c000746d:	e8 b0 fe ff ff       	call   c0007322 <GDTEntry::setBase(unsigned int)>
c0007472:	8a 44 24 3e          	mov    al,BYTE PTR [esp+0x3e]
c0007476:	83 e0 3f             	and    eax,0x3f
c0007479:	88 44 24 3e          	mov    BYTE PTR [esp+0x3e],al
c000747d:	83 c4 0c             	add    esp,0xc
c0007480:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007484:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007488:	53                   	push   ebx
c0007489:	e8 e4 fe ff ff       	call   c0007372 <GDT::addEntry(GDTEntry)>
c000748e:	83 c4 0c             	add    esp,0xc
c0007491:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007495:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007499:	53                   	push   ebx
c000749a:	e8 d3 fe ff ff       	call   c0007372 <GDT::addEntry(GDTEntry)>
c000749f:	83 c4 0c             	add    esp,0xc
c00074a2:	57                   	push   edi
c00074a3:	56                   	push   esi
c00074a4:	53                   	push   ebx
c00074a5:	e8 c8 fe ff ff       	call   c0007372 <GDT::addEntry(GDTEntry)>
c00074aa:	83 c4 0c             	add    esp,0xc
c00074ad:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c00074b1:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c00074b5:	53                   	push   ebx
c00074b6:	e8 b7 fe ff ff       	call   c0007372 <GDT::addEntry(GDTEntry)>
c00074bb:	83 c4 0c             	add    esp,0xc
c00074be:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00074c2:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00074c6:	53                   	push   ebx
c00074c7:	e8 a6 fe ff ff       	call   c0007372 <GDT::addEntry(GDTEntry)>
c00074cc:	83 c4 0c             	add    esp,0xc
c00074cf:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00074d3:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00074d7:	53                   	push   ebx
c00074d8:	e8 95 fe ff ff       	call   c0007372 <GDT::addEntry(GDTEntry)>
c00074dd:	83 c4 0c             	add    esp,0xc
c00074e0:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00074e4:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00074e8:	53                   	push   ebx
c00074e9:	e8 84 fe ff ff       	call   c0007372 <GDT::addEntry(GDTEntry)>
c00074ee:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00074f1:	e8 a6 fe ff ff       	call   c000739c <GDT::flush()>
c00074f6:	83 c4 40             	add    esp,0x40
c00074f9:	5b                   	pop    ebx
c00074fa:	5e                   	pop    esi
c00074fb:	5f                   	pop    edi
c00074fc:	c3                   	ret    

c00074fd <idleFunction(void*)>:
c00074fd:	83 ec 0c             	sub    esp,0xc
c0007500:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0007505:	48                   	dec    eax
c0007506:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c000750b:	75 01                	jne    c000750e <idleFunction(void*)+0x11>
c000750d:	fb                   	sti    
c000750e:	e8 41 07 01 00       	call   c0017c54 <HalSystemIdle()>
c0007513:	e8 6a 84 01 00       	call   c001f982 <idleCommon()>
c0007518:	eb f4                	jmp    c000750e <idleFunction(void*)+0x11>
c000751a:	66 90                	xchg   ax,ax

c000751c <IDTEntry::IDTEntry(bool)>:
c000751c:	53                   	push   ebx
c000751d:	83 ec 04             	sub    esp,0x4
c0007520:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007524:	88 04 24             	mov    BYTE PTR [esp],al
c0007527:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000752b:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c0007531:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007535:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c0007539:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000753d:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c0007540:	83 e2 f0             	and    edx,0xfffffff0
c0007543:	83 ca 0e             	or     edx,0xe
c0007546:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0007549:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000754d:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c0007550:	83 e2 ef             	and    edx,0xffffffef
c0007553:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0007556:	0f b6 04 24          	movzx  eax,BYTE PTR [esp]
c000755a:	85 c0                	test   eax,eax
c000755c:	74 06                	je     c0007564 <IDTEntry::IDTEntry(bool)+0x48>
c000755e:	b2 03                	mov    dl,0x3
c0007560:	eb 06                	jmp    c0007568 <IDTEntry::IDTEntry(bool)+0x4c>
c0007562:	66 90                	xchg   ax,ax
c0007564:	b2 00                	mov    dl,0x0
c0007566:	66 90                	xchg   ax,ax
c0007568:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000756c:	83 e2 03             	and    edx,0x3
c000756f:	89 d3                	mov    ebx,edx
c0007571:	c1 e3 05             	shl    ebx,0x5
c0007574:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c0007577:	83 e2 9f             	and    edx,0xffffff9f
c000757a:	88 d1                	mov    cl,dl
c000757c:	88 da                	mov    dl,bl
c000757e:	09 ca                	or     edx,ecx
c0007580:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0007583:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007587:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000758a:	83 ca 80             	or     edx,0xffffff80
c000758d:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0007590:	90                   	nop
c0007591:	83 c4 04             	add    esp,0x4
c0007594:	5b                   	pop    ebx
c0007595:	c3                   	ret    

c0007596 <IDTEntry::setOffset(unsigned int)>:
c0007596:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000759a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000759e:	66 89 02             	mov    WORD PTR [edx],ax
c00075a1:	c1 e8 10             	shr    eax,0x10
c00075a4:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c00075a8:	c3                   	ret    
c00075a9:	90                   	nop
c00075aa:	66 90                	xchg   ax,ax

c00075ac <IDT::IDT()>:
c00075ac:	90                   	nop
c00075ad:	c3                   	ret    

c00075ae <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c00075ae:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00075b2:	83 c0 30             	add    eax,0x30
c00075b5:	c3                   	ret    

c00075b6 <IDT::addEntry(IDTEntry, int)>:
c00075b6:	53                   	push   ebx
c00075b7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00075bb:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00075bf:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00075c3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00075c7:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c00075ca:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c00075ce:	5b                   	pop    ebx
c00075cf:	c3                   	ret    

c00075d0 <IDT::addEntry(int, void (*)(), bool)>:
c00075d0:	53                   	push   ebx
c00075d1:	83 ec 10             	sub    esp,0x10
c00075d4:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c00075d9:	50                   	push   eax
c00075da:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c00075de:	53                   	push   ebx
c00075df:	e8 38 ff ff ff       	call   c000751c <IDTEntry::IDTEntry(bool)>
c00075e4:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00075e8:	53                   	push   ebx
c00075e9:	e8 a8 ff ff ff       	call   c0007596 <IDTEntry::setOffset(unsigned int)>
c00075ee:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00075f2:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00075f6:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00075fa:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00075fe:	e8 b3 ff ff ff       	call   c00075b6 <IDT::addEntry(IDTEntry, int)>
c0007603:	83 c4 30             	add    esp,0x30
c0007606:	5b                   	pop    ebx
c0007607:	c3                   	ret    

c0007608 <IDT::flush()>:
c0007608:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000760c:	66 c7 05 c8 6e 02 c0 ff 07 	mov    WORD PTR ds:0xc0026ec8,0x7ff
c0007615:	a3 ca 6e 02 c0       	mov    ds:0xc0026eca,eax
c000761a:	0f 01 1d c8 6e 02 c0 	lidtd  ds:0xc0026ec8
c0007621:	c3                   	ret    

c0007622 <IDT::setup()>:
c0007622:	57                   	push   edi
c0007623:	56                   	push   esi
c0007624:	53                   	push   ebx
c0007625:	83 ec 10             	sub    esp,0x10
c0007628:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000762c:	6a 00                	push   0x0
c000762e:	68 80 f0 01 c0       	push   0xc001f080
c0007633:	6a 00                	push   0x0
c0007635:	53                   	push   ebx
c0007636:	e8 95 ff ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c000763b:	6a 00                	push   0x0
c000763d:	68 90 f0 01 c0       	push   0xc001f090
c0007642:	6a 01                	push   0x1
c0007644:	53                   	push   ebx
c0007645:	e8 86 ff ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c000764a:	83 c4 20             	add    esp,0x20
c000764d:	6a 00                	push   0x0
c000764f:	68 9a f0 01 c0       	push   0xc001f09a
c0007654:	6a 02                	push   0x2
c0007656:	53                   	push   ebx
c0007657:	e8 74 ff ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c000765c:	6a 00                	push   0x0
c000765e:	68 a4 f0 01 c0       	push   0xc001f0a4
c0007663:	6a 03                	push   0x3
c0007665:	53                   	push   ebx
c0007666:	e8 65 ff ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c000766b:	83 c4 20             	add    esp,0x20
c000766e:	6a 00                	push   0x0
c0007670:	68 ae f0 01 c0       	push   0xc001f0ae
c0007675:	6a 04                	push   0x4
c0007677:	53                   	push   ebx
c0007678:	e8 53 ff ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c000767d:	6a 00                	push   0x0
c000767f:	68 b8 f0 01 c0       	push   0xc001f0b8
c0007684:	6a 05                	push   0x5
c0007686:	53                   	push   ebx
c0007687:	e8 44 ff ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c000768c:	83 c4 20             	add    esp,0x20
c000768f:	6a 00                	push   0x0
c0007691:	68 c2 f0 01 c0       	push   0xc001f0c2
c0007696:	6a 06                	push   0x6
c0007698:	53                   	push   ebx
c0007699:	e8 32 ff ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c000769e:	6a 00                	push   0x0
c00076a0:	68 cc f0 01 c0       	push   0xc001f0cc
c00076a5:	6a 07                	push   0x7
c00076a7:	53                   	push   ebx
c00076a8:	e8 23 ff ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00076ad:	83 c4 20             	add    esp,0x20
c00076b0:	6a 00                	push   0x0
c00076b2:	68 d6 f0 01 c0       	push   0xc001f0d6
c00076b7:	6a 08                	push   0x8
c00076b9:	53                   	push   ebx
c00076ba:	e8 11 ff ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00076bf:	6a 00                	push   0x0
c00076c1:	68 de f0 01 c0       	push   0xc001f0de
c00076c6:	6a 09                	push   0x9
c00076c8:	53                   	push   ebx
c00076c9:	e8 02 ff ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00076ce:	83 c4 20             	add    esp,0x20
c00076d1:	6a 00                	push   0x0
c00076d3:	68 e8 f0 01 c0       	push   0xc001f0e8
c00076d8:	6a 0a                	push   0xa
c00076da:	53                   	push   ebx
c00076db:	e8 f0 fe ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00076e0:	6a 00                	push   0x0
c00076e2:	68 f0 f0 01 c0       	push   0xc001f0f0
c00076e7:	6a 0b                	push   0xb
c00076e9:	53                   	push   ebx
c00076ea:	e8 e1 fe ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00076ef:	83 c4 20             	add    esp,0x20
c00076f2:	6a 00                	push   0x0
c00076f4:	68 f8 f0 01 c0       	push   0xc001f0f8
c00076f9:	6a 0c                	push   0xc
c00076fb:	53                   	push   ebx
c00076fc:	e8 cf fe ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c0007701:	6a 00                	push   0x0
c0007703:	68 00 f1 01 c0       	push   0xc001f100
c0007708:	6a 0d                	push   0xd
c000770a:	53                   	push   ebx
c000770b:	e8 c0 fe ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c0007710:	83 c4 20             	add    esp,0x20
c0007713:	6a 00                	push   0x0
c0007715:	68 1a f1 01 c0       	push   0xc001f11a
c000771a:	6a 0e                	push   0xe
c000771c:	53                   	push   ebx
c000771d:	e8 ae fe ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c0007722:	6a 00                	push   0x0
c0007724:	68 22 f1 01 c0       	push   0xc001f122
c0007729:	6a 0f                	push   0xf
c000772b:	53                   	push   ebx
c000772c:	e8 9f fe ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c0007731:	83 c4 20             	add    esp,0x20
c0007734:	6a 00                	push   0x0
c0007736:	68 2c f1 01 c0       	push   0xc001f12c
c000773b:	6a 10                	push   0x10
c000773d:	53                   	push   ebx
c000773e:	e8 8d fe ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c0007743:	6a 00                	push   0x0
c0007745:	68 36 f1 01 c0       	push   0xc001f136
c000774a:	6a 11                	push   0x11
c000774c:	53                   	push   ebx
c000774d:	e8 7e fe ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c0007752:	83 c4 20             	add    esp,0x20
c0007755:	6a 00                	push   0x0
c0007757:	68 40 f1 01 c0       	push   0xc001f140
c000775c:	6a 12                	push   0x12
c000775e:	53                   	push   ebx
c000775f:	e8 6c fe ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c0007764:	6a 01                	push   0x1
c0007766:	68 da f1 01 c0       	push   0xc001f1da
c000776b:	6a 60                	push   0x60
c000776d:	53                   	push   ebx
c000776e:	e8 5d fe ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c0007773:	83 c4 20             	add    esp,0x20
c0007776:	6a 00                	push   0x0
c0007778:	68 e1 f1 01 c0       	push   0xc001f1e1
c000777d:	6a 20                	push   0x20
c000777f:	53                   	push   ebx
c0007780:	e8 4b fe ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c0007785:	6a 00                	push   0x0
c0007787:	68 cc f1 01 c0       	push   0xc001f1cc
c000778c:	6a 21                	push   0x21
c000778e:	53                   	push   ebx
c000778f:	e8 3c fe ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c0007794:	83 c4 20             	add    esp,0x20
c0007797:	6a 00                	push   0x0
c0007799:	68 d3 f1 01 c0       	push   0xc001f1d3
c000779e:	6a 22                	push   0x22
c00077a0:	53                   	push   ebx
c00077a1:	e8 2a fe ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00077a6:	6a 00                	push   0x0
c00077a8:	68 4a f1 01 c0       	push   0xc001f14a
c00077ad:	6a 23                	push   0x23
c00077af:	53                   	push   ebx
c00077b0:	e8 1b fe ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00077b5:	83 c4 20             	add    esp,0x20
c00077b8:	6a 00                	push   0x0
c00077ba:	68 54 f1 01 c0       	push   0xc001f154
c00077bf:	6a 24                	push   0x24
c00077c1:	53                   	push   ebx
c00077c2:	e8 09 fe ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00077c7:	6a 00                	push   0x0
c00077c9:	68 5e f1 01 c0       	push   0xc001f15e
c00077ce:	6a 25                	push   0x25
c00077d0:	53                   	push   ebx
c00077d1:	e8 fa fd ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00077d6:	83 c4 20             	add    esp,0x20
c00077d9:	6a 00                	push   0x0
c00077db:	68 68 f1 01 c0       	push   0xc001f168
c00077e0:	6a 26                	push   0x26
c00077e2:	53                   	push   ebx
c00077e3:	e8 e8 fd ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00077e8:	6a 00                	push   0x0
c00077ea:	68 72 f1 01 c0       	push   0xc001f172
c00077ef:	6a 27                	push   0x27
c00077f1:	53                   	push   ebx
c00077f2:	e8 d9 fd ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00077f7:	83 c4 20             	add    esp,0x20
c00077fa:	6a 00                	push   0x0
c00077fc:	68 7c f1 01 c0       	push   0xc001f17c
c0007801:	6a 28                	push   0x28
c0007803:	53                   	push   ebx
c0007804:	e8 c7 fd ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c0007809:	6a 00                	push   0x0
c000780b:	68 86 f1 01 c0       	push   0xc001f186
c0007810:	6a 29                	push   0x29
c0007812:	53                   	push   ebx
c0007813:	e8 b8 fd ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c0007818:	83 c4 20             	add    esp,0x20
c000781b:	6a 00                	push   0x0
c000781d:	68 90 f1 01 c0       	push   0xc001f190
c0007822:	6a 2a                	push   0x2a
c0007824:	53                   	push   ebx
c0007825:	e8 a6 fd ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c000782a:	6a 00                	push   0x0
c000782c:	68 9a f1 01 c0       	push   0xc001f19a
c0007831:	6a 2b                	push   0x2b
c0007833:	53                   	push   ebx
c0007834:	e8 97 fd ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c0007839:	83 c4 20             	add    esp,0x20
c000783c:	6a 00                	push   0x0
c000783e:	68 a4 f1 01 c0       	push   0xc001f1a4
c0007843:	6a 2c                	push   0x2c
c0007845:	53                   	push   ebx
c0007846:	e8 85 fd ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c000784b:	6a 00                	push   0x0
c000784d:	68 ae f1 01 c0       	push   0xc001f1ae
c0007852:	6a 2d                	push   0x2d
c0007854:	53                   	push   ebx
c0007855:	e8 76 fd ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c000785a:	83 c4 20             	add    esp,0x20
c000785d:	6a 00                	push   0x0
c000785f:	68 b8 f1 01 c0       	push   0xc001f1b8
c0007864:	6a 2e                	push   0x2e
c0007866:	53                   	push   ebx
c0007867:	e8 64 fd ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c000786c:	6a 00                	push   0x0
c000786e:	68 c2 f1 01 c0       	push   0xc001f1c2
c0007873:	6a 2f                	push   0x2f
c0007875:	53                   	push   ebx
c0007876:	e8 55 fd ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c000787b:	83 c4 20             	add    esp,0x20
c000787e:	6a 00                	push   0x0
c0007880:	68 1c f3 01 c0       	push   0xc001f31c
c0007885:	6a 30                	push   0x30
c0007887:	53                   	push   ebx
c0007888:	e8 43 fd ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c000788d:	6a 00                	push   0x0
c000788f:	68 26 f3 01 c0       	push   0xc001f326
c0007894:	6a 31                	push   0x31
c0007896:	53                   	push   ebx
c0007897:	e8 34 fd ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c000789c:	83 c4 20             	add    esp,0x20
c000789f:	6a 00                	push   0x0
c00078a1:	68 30 f3 01 c0       	push   0xc001f330
c00078a6:	6a 32                	push   0x32
c00078a8:	53                   	push   ebx
c00078a9:	e8 22 fd ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00078ae:	6a 00                	push   0x0
c00078b0:	68 3a f3 01 c0       	push   0xc001f33a
c00078b5:	6a 33                	push   0x33
c00078b7:	53                   	push   ebx
c00078b8:	e8 13 fd ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00078bd:	83 c4 20             	add    esp,0x20
c00078c0:	6a 00                	push   0x0
c00078c2:	68 44 f3 01 c0       	push   0xc001f344
c00078c7:	6a 34                	push   0x34
c00078c9:	53                   	push   ebx
c00078ca:	e8 01 fd ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00078cf:	6a 00                	push   0x0
c00078d1:	68 4e f3 01 c0       	push   0xc001f34e
c00078d6:	6a 35                	push   0x35
c00078d8:	53                   	push   ebx
c00078d9:	e8 f2 fc ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00078de:	83 c4 20             	add    esp,0x20
c00078e1:	6a 00                	push   0x0
c00078e3:	68 58 f3 01 c0       	push   0xc001f358
c00078e8:	6a 36                	push   0x36
c00078ea:	53                   	push   ebx
c00078eb:	e8 e0 fc ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00078f0:	6a 00                	push   0x0
c00078f2:	68 62 f3 01 c0       	push   0xc001f362
c00078f7:	6a 37                	push   0x37
c00078f9:	53                   	push   ebx
c00078fa:	e8 d1 fc ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00078ff:	83 c4 1c             	add    esp,0x1c
c0007902:	6a 03                	push   0x3
c0007904:	6a 02                	push   0x2
c0007906:	ff 35 b0 6f 02 c0    	push   DWORD PTR ds:0xc0026fb0
c000790c:	e8 13 25 00 00       	call   c0009e24 <VAS::allocatePages(int, int)>
c0007911:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0007918:	89 c6                	mov    esi,eax
c000791a:	e8 97 01 00 00       	call   c0007ab6 <malloc>
c000791f:	81 c6 00 20 00 00    	add    esi,0x2000
c0007925:	89 04 24             	mov    DWORD PTR [esp],eax
c0007928:	89 c7                	mov    edi,eax
c000792a:	e8 15 16 00 00       	call   c0008f44 <TSS::TSS()>
c000792f:	83 c4 0c             	add    esp,0xc
c0007932:	68 d6 f0 01 c0       	push   0xc001f0d6
c0007937:	56                   	push   esi
c0007938:	57                   	push   edi
c0007939:	e8 4a 16 00 00       	call   c0008f88 <TSS::setup(unsigned long, unsigned long)>
c000793e:	89 c6                	mov    esi,eax
c0007940:	58                   	pop    eax
c0007941:	5a                   	pop    edx
c0007942:	6a 00                	push   0x0
c0007944:	8d 44 24 14          	lea    eax,[esp+0x14]
c0007948:	50                   	push   eax
c0007949:	e8 ce fb ff ff       	call   c000751c <IDTEntry::IDTEntry(bool)>
c000794e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0007952:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c0007957:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c000795e:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c0007964:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007968:	80 ce 05             	or     dh,0x5
c000796b:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c000796e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0007972:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0007976:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c0007979:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000797c:	e8 87 fc ff ff       	call   c0007608 <IDT::flush()>
c0007981:	83 c4 20             	add    esp,0x20
c0007984:	5b                   	pop    ebx
c0007985:	5e                   	pop    esi
c0007986:	5f                   	pop    edi
c0007987:	c3                   	ret    

c0007988 <sbrk>:
c0007988:	55                   	push   ebp
c0007989:	57                   	push   edi
c000798a:	56                   	push   esi
c000798b:	53                   	push   ebx
c000798c:	83 ec 1c             	sub    esp,0x1c
c000798f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0007993:	85 c0                	test   eax,eax
c0007995:	74 61                	je     c00079f8 <sbrk+0x70>
c0007997:	78 66                	js     c00079ff <sbrk+0x77>
c0007999:	8b 15 b4 35 02 c0    	mov    edx,DWORD PTR ds:0xc00235b4
c000799f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00079a3:	05 ff 0f 00 00       	add    eax,0xfff
c00079a8:	89 c5                	mov    ebp,eax
c00079aa:	78 6b                	js     c0007a17 <sbrk+0x8f>
c00079ac:	c1 fd 0c             	sar    ebp,0xc
c00079af:	bb 00 00 00 00       	mov    ebx,0x0
c00079b4:	8b 35 b0 6f 02 c0    	mov    esi,DWORD PTR ds:0xc0026fb0
c00079ba:	8b 3d b4 35 02 c0    	mov    edi,DWORD PTR ds:0xc00235b4
c00079c0:	e8 fa 03 00 00       	call   c0007dbf <Phys::allocatePage()>
c00079c5:	68 01 04 00 00       	push   0x401
c00079ca:	57                   	push   edi
c00079cb:	50                   	push   eax
c00079cc:	56                   	push   esi
c00079cd:	e8 4e 23 00 00       	call   c0009d20 <VAS::mapPage(unsigned long, unsigned long, int)>
c00079d2:	81 05 b4 35 02 c0 00 10 00 00 	add    DWORD PTR ds:0xc00235b4,0x1000
c00079dc:	83 c3 01             	add    ebx,0x1
c00079df:	83 c4 10             	add    esp,0x10
c00079e2:	39 dd                	cmp    ebp,ebx
c00079e4:	75 ce                	jne    c00079b4 <sbrk+0x2c>
c00079e6:	0f 20 d8             	mov    eax,cr3
c00079e9:	0f 22 d8             	mov    cr3,eax
c00079ec:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00079f0:	83 c4 1c             	add    esp,0x1c
c00079f3:	5b                   	pop    ebx
c00079f4:	5e                   	pop    esi
c00079f5:	5f                   	pop    edi
c00079f6:	5d                   	pop    ebp
c00079f7:	c3                   	ret    
c00079f8:	a1 b4 35 02 c0       	mov    eax,ds:0xc00235b4
c00079fd:	eb f1                	jmp    c00079f0 <sbrk+0x68>
c00079ff:	83 ec 08             	sub    esp,0x8
c0007a02:	50                   	push   eax
c0007a03:	68 78 0c 02 c0       	push   0xc0020c78
c0007a08:	e8 38 2f 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0007a0d:	83 c4 10             	add    esp,0x10
c0007a10:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0007a15:	eb d9                	jmp    c00079f0 <sbrk+0x68>
c0007a17:	8d a8 ff 0f 00 00    	lea    ebp,[eax+0xfff]
c0007a1d:	eb 8d                	jmp    c00079ac <sbrk+0x24>

c0007a1f <mmap>:
c0007a1f:	83 ec 18             	sub    esp,0x18
c0007a22:	68 a8 0c 02 c0       	push   0xc0020ca8
c0007a27:	e8 ff 9b 00 00       	call   c001162b <KePanic(char const*)>
c0007a2c:	b8 00 00 00 00       	mov    eax,0x0
c0007a31:	83 c4 1c             	add    esp,0x1c
c0007a34:	c3                   	ret    

c0007a35 <munmap>:
c0007a35:	83 ec 18             	sub    esp,0x18
c0007a38:	68 ad 0c 02 c0       	push   0xc0020cad
c0007a3d:	e8 e9 9b 00 00       	call   c001162b <KePanic(char const*)>
c0007a42:	b8 00 00 00 00       	mov    eax,0x0
c0007a47:	83 c4 1c             	add    esp,0x1c
c0007a4a:	c3                   	ret    

c0007a4b <liballoc_lock()>:
c0007a4b:	fa                   	cli    
c0007a4c:	83 05 c8 c6 02 c0 01 	add    DWORD PTR ds:0xc002c6c8,0x1
c0007a53:	b8 00 00 00 00       	mov    eax,0x0
c0007a58:	c3                   	ret    

c0007a59 <liballoc_unlock()>:
c0007a59:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0007a5e:	83 e8 01             	sub    eax,0x1
c0007a61:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0007a66:	75 01                	jne    c0007a69 <liballoc_unlock()+0x10>
c0007a68:	fb                   	sti    
c0007a69:	b8 00 00 00 00       	mov    eax,0x0
c0007a6e:	c3                   	ret    

c0007a6f <liballoc_alloc(int)>:
c0007a6f:	83 ec 10             	sub    esp,0x10
c0007a72:	6a 01                	push   0x1
c0007a74:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007a78:	ff 35 b0 6f 02 c0    	push   DWORD PTR ds:0xc0026fb0
c0007a7e:	e8 a1 23 00 00       	call   c0009e24 <VAS::allocatePages(int, int)>
c0007a83:	83 c4 1c             	add    esp,0x1c
c0007a86:	c3                   	ret    

c0007a87 <liballoc_free(void*, int)>:
c0007a87:	83 ec 14             	sub    esp,0x14
c0007a8a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007a8e:	ff 35 b0 6f 02 c0    	push   DWORD PTR ds:0xc0026fb0
c0007a94:	e8 cf 1f 00 00       	call   c0009a68 <VAS::freeAllocatedPages(unsigned long)>
c0007a99:	b8 00 00 00 00       	mov    eax,0x0
c0007a9e:	83 c4 1c             	add    esp,0x1c
c0007aa1:	c3                   	ret    

c0007aa2 <realloc>:
c0007aa2:	83 ec 14             	sub    esp,0x14
c0007aa5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007aa9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007aad:	e8 36 9b ff ff       	call   c00015e8 <dlrealloc>
c0007ab2:	83 c4 1c             	add    esp,0x1c
c0007ab5:	c3                   	ret    

c0007ab6 <malloc>:
c0007ab6:	83 ec 18             	sub    esp,0x18
c0007ab9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007abd:	e8 e9 95 ff ff       	call   c00010ab <dlmalloc>
c0007ac2:	83 c4 1c             	add    esp,0x1c
c0007ac5:	c3                   	ret    

c0007ac6 <free>:
c0007ac6:	83 ec 18             	sub    esp,0x18
c0007ac9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007acd:	e8 81 92 ff ff       	call   c0000d53 <dlfree>
c0007ad2:	83 c4 1c             	add    esp,0x1c
c0007ad5:	c3                   	ret    

c0007ad6 <rfree>:
c0007ad6:	83 ec 18             	sub    esp,0x18
c0007ad9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007add:	e8 71 92 ff ff       	call   c0000d53 <dlfree>
c0007ae2:	83 c4 1c             	add    esp,0x1c
c0007ae5:	c3                   	ret    

c0007ae6 <calloc>:
c0007ae6:	56                   	push   esi
c0007ae7:	53                   	push   ebx
c0007ae8:	83 ec 10             	sub    esp,0x10
c0007aeb:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0007aef:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c0007af4:	53                   	push   ebx
c0007af5:	e8 bc ff ff ff       	call   c0007ab6 <malloc>
c0007afa:	89 c6                	mov    esi,eax
c0007afc:	83 c4 0c             	add    esp,0xc
c0007aff:	53                   	push   ebx
c0007b00:	6a 00                	push   0x0
c0007b02:	50                   	push   eax
c0007b03:	e8 e8 89 ff ff       	call   c00004f0 <memset>
c0007b08:	89 f0                	mov    eax,esi
c0007b0a:	83 c4 14             	add    esp,0x14
c0007b0d:	5b                   	pop    ebx
c0007b0e:	5e                   	pop    esi
c0007b0f:	c3                   	ret    

c0007b10 <KeEntryPoint>:
c0007b10:	57                   	push   edi
c0007b11:	bf f9 03 00 00       	mov    edi,0x3f9
c0007b16:	56                   	push   esi
c0007b17:	89 fa                	mov    edx,edi
c0007b19:	53                   	push   ebx
c0007b1a:	31 f6                	xor    esi,esi
c0007b1c:	83 ec 2c             	sub    esp,0x2c
c0007b1f:	a1 00 05 00 00       	mov    eax,ds:0x500
c0007b24:	a3 d0 6e 02 c0       	mov    ds:0xc0026ed0,eax
c0007b29:	89 f0                	mov    eax,esi
c0007b2b:	ee                   	out    dx,al
c0007b2c:	bb fb 03 00 00       	mov    ebx,0x3fb
c0007b31:	b0 80                	mov    al,0x80
c0007b33:	89 da                	mov    edx,ebx
c0007b35:	ee                   	out    dx,al
c0007b36:	b1 03                	mov    cl,0x3
c0007b38:	ba f8 03 00 00       	mov    edx,0x3f8
c0007b3d:	88 c8                	mov    al,cl
c0007b3f:	ee                   	out    dx,al
c0007b40:	89 f0                	mov    eax,esi
c0007b42:	89 fa                	mov    edx,edi
c0007b44:	ee                   	out    dx,al
c0007b45:	88 c8                	mov    al,cl
c0007b47:	89 da                	mov    edx,ebx
c0007b49:	ee                   	out    dx,al
c0007b4a:	b0 c7                	mov    al,0xc7
c0007b4c:	ba fa 03 00 00       	mov    edx,0x3fa
c0007b51:	ee                   	out    dx,al
c0007b52:	b0 0b                	mov    al,0xb
c0007b54:	ba fc 03 00 00       	mov    edx,0x3fc
c0007b59:	ee                   	out    dx,al
c0007b5a:	68 b4 0c 02 c0       	push   0xc0020cb4
c0007b5f:	e8 e1 2d 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0007b64:	e8 46 93 00 00       	call   c0010eaf <KeDisplaySplashScreen()>
c0007b69:	a1 24 05 00 00       	mov    eax,ds:0x524
c0007b6e:	05 ff 0f 00 00       	add    eax,0xfff
c0007b73:	25 00 f0 ff ff       	and    eax,0xfffff000
c0007b78:	89 04 24             	mov    DWORD PTR [esp],eax
c0007b7b:	e8 ad 03 00 00       	call   c0007f2d <Phys::physicalMemorySetup(unsigned int)>
c0007b80:	e8 66 1c 00 00       	call   c00097eb <Virt::virtualMemorySetup()>
c0007b85:	e8 6f 92 00 00       	call   c0010df9 <KeInitialiseAtexit()>
c0007b8a:	58                   	pop    eax
c0007b8b:	8d 5c 24 18          	lea    ebx,[esp+0x18]
c0007b8f:	53                   	push   ebx
c0007b90:	e8 53 1f 00 00       	call   c0009ae8 <VAS::VAS()>
c0007b95:	89 1d b0 6f 02 c0    	mov    DWORD PTR ds:0xc0026fb0,ebx
c0007b9b:	e8 7a 7d 01 00       	call   c001f91a <_init>
c0007ba0:	c7 04 24 70 01 00 00 	mov    DWORD PTR [esp],0x170
c0007ba7:	e8 0a ff ff ff       	call   c0007ab6 <malloc>
c0007bac:	89 04 24             	mov    DWORD PTR [esp],eax
c0007baf:	89 c6                	mov    esi,eax
c0007bb1:	e8 30 f2 ff ff       	call   c0006de6 <Computer::Computer()>
c0007bb6:	53                   	push   ebx
c0007bb7:	89 35 b8 6e 02 c0    	mov    DWORD PTR ds:0xc0026eb8,esi
c0007bbd:	6a 00                	push   0x0
c0007bbf:	6a 00                	push   0x0
c0007bc1:	56                   	push   esi
c0007bc2:	e8 e7 f5 ff ff       	call   c00071ae <Computer::open(int, int, void*)>
c0007bc7:	83 c4 14             	add    esp,0x14
c0007bca:	53                   	push   ebx
c0007bcb:	e8 e2 1f 00 00       	call   c0009bb2 <VAS::~VAS()>
c0007bd0:	83 c4 30             	add    esp,0x30
c0007bd3:	5b                   	pop    ebx
c0007bd4:	5e                   	pop    esi
c0007bd5:	5f                   	pop    edi
c0007bd6:	c3                   	ret    

c0007bd7 <Phys::allocateDMA(unsigned long)>:
c0007bd7:	55                   	push   ebp
c0007bd8:	31 ed                	xor    ebp,ebp
c0007bda:	57                   	push   edi
c0007bdb:	56                   	push   esi
c0007bdc:	53                   	push   ebx
c0007bdd:	31 db                	xor    ebx,ebx
c0007bdf:	83 ec 1c             	sub    esp,0x1c
c0007be2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0007be6:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0007bee:	8d b8 ff 0f 00 00    	lea    edi,[eax+0xfff]
c0007bf4:	31 c0                	xor    eax,eax
c0007bf6:	c1 ef 0c             	shr    edi,0xc
c0007bf9:	eb 1b                	jmp    c0007c16 <Phys::allocateDMA(unsigned long)+0x3f>
c0007bfb:	85 c0                	test   eax,eax
c0007bfd:	75 06                	jne    c0007c05 <Phys::allocateDMA(unsigned long)+0x2e>
c0007bff:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0007c03:	89 dd                	mov    ebp,ebx
c0007c05:	8d 70 01             	lea    esi,[eax+0x1]
c0007c08:	39 f7                	cmp    edi,esi
c0007c0a:	74 37                	je     c0007c43 <Phys::allocateDMA(unsigned long)+0x6c>
c0007c0c:	89 f0                	mov    eax,esi
c0007c0e:	83 c3 01             	add    ebx,0x1
c0007c11:	83 fb 0f             	cmp    ebx,0xf
c0007c14:	7f 13                	jg     c0007c29 <Phys::allocateDMA(unsigned long)+0x52>
c0007c16:	80 bb ec 6e 02 c0 00 	cmp    BYTE PTR [ebx-0x3ffd9114],0x0
c0007c1d:	74 dc                	je     c0007bfb <Phys::allocateDMA(unsigned long)+0x24>
c0007c1f:	31 c0                	xor    eax,eax
c0007c21:	83 c3 01             	add    ebx,0x1
c0007c24:	83 fb 0f             	cmp    ebx,0xf
c0007c27:	7e ed                	jle    c0007c16 <Phys::allocateDMA(unsigned long)+0x3f>
c0007c29:	83 ec 0c             	sub    esp,0xc
c0007c2c:	68 cc 0c 02 c0       	push   0xc0020ccc
c0007c31:	e8 f5 99 00 00       	call   c001162b <KePanic(char const*)>
c0007c36:	83 c4 10             	add    esp,0x10
c0007c39:	31 c0                	xor    eax,eax
c0007c3b:	83 c4 1c             	add    esp,0x1c
c0007c3e:	5b                   	pop    ebx
c0007c3f:	5e                   	pop    esi
c0007c40:	5f                   	pop    edi
c0007c41:	5d                   	pop    ebp
c0007c42:	c3                   	ret    
c0007c43:	89 e9                	mov    ecx,ebp
c0007c45:	c1 f9 04             	sar    ecx,0x4
c0007c48:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0007c4c:	8d 4c 3d 00          	lea    ecx,[ebp+edi*1+0x0]
c0007c50:	89 ca                	mov    edx,ecx
c0007c52:	83 ea 01             	sub    edx,0x1
c0007c55:	79 03                	jns    c0007c5a <Phys::allocateDMA(unsigned long)+0x83>
c0007c57:	8d 51 0e             	lea    edx,[ecx+0xe]
c0007c5a:	c1 fa 04             	sar    edx,0x4
c0007c5d:	39 54 24 0c          	cmp    DWORD PTR [esp+0xc],edx
c0007c61:	74 08                	je     c0007c6b <Phys::allocateDMA(unsigned long)+0x94>
c0007c63:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0007c67:	31 c0                	xor    eax,eax
c0007c69:	eb b6                	jmp    c0007c21 <Phys::allocateDMA(unsigned long)+0x4a>
c0007c6b:	85 f6                	test   esi,esi
c0007c6d:	74 17                	je     c0007c86 <Phys::allocateDMA(unsigned long)+0xaf>
c0007c6f:	8d 95 ec 6e 02 c0    	lea    edx,[ebp-0x3ffd9114]
c0007c75:	8d 84 05 ed 6e 02 c0 	lea    eax,[ebp+eax*1-0x3ffd9113]
c0007c7c:	c6 02 01             	mov    BYTE PTR [edx],0x1
c0007c7f:	83 c2 01             	add    edx,0x1
c0007c82:	39 d0                	cmp    eax,edx
c0007c84:	75 f6                	jne    c0007c7c <Phys::allocateDMA(unsigned long)+0xa5>
c0007c86:	a1 e4 6e 02 c0       	mov    eax,ds:0xc0026ee4
c0007c8b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0007c8f:	01 f8                	add    eax,edi
c0007c91:	85 d2                	test   edx,edx
c0007c93:	a3 e4 6e 02 c0       	mov    ds:0xc0026ee4,eax
c0007c98:	74 17                	je     c0007cb1 <Phys::allocateDMA(unsigned long)+0xda>
c0007c9a:	83 ec 0c             	sub    esp,0xc
c0007c9d:	68 cc 0c 02 c0       	push   0xc0020ccc
c0007ca2:	e8 84 99 00 00       	call   c001162b <KePanic(char const*)>
c0007ca7:	83 c4 10             	add    esp,0x10
c0007caa:	89 f0                	mov    eax,esi
c0007cac:	e9 5d ff ff ff       	jmp    c0007c0e <Phys::allocateDMA(unsigned long)+0x37>
c0007cb1:	c1 e5 0c             	shl    ebp,0xc
c0007cb4:	8d 85 00 00 01 c2    	lea    eax,[ebp-0x3dff0000]
c0007cba:	e9 7c ff ff ff       	jmp    c0007c3b <Phys::allocateDMA(unsigned long)+0x64>

c0007cbf <Phys::freeDMA(unsigned long, unsigned long)>:
c0007cbf:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007cc3:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c0007cc9:	a1 e4 6e 02 c0       	mov    eax,ds:0xc0026ee4
c0007cce:	c1 ea 0c             	shr    edx,0xc
c0007cd1:	29 d0                	sub    eax,edx
c0007cd3:	a3 e4 6e 02 c0       	mov    ds:0xc0026ee4,eax
c0007cd8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007cdc:	05 00 00 ff 3d       	add    eax,0x3dff0000
c0007ce1:	c1 e8 0c             	shr    eax,0xc
c0007ce4:	85 d2                	test   edx,edx
c0007ce6:	74 11                	je     c0007cf9 <Phys::freeDMA(unsigned long, unsigned long)+0x3a>
c0007ce8:	05 ec 6e 02 c0       	add    eax,0xc0026eec
c0007ced:	01 c2                	add    edx,eax
c0007cef:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0007cf2:	83 c0 01             	add    eax,0x1
c0007cf5:	39 d0                	cmp    eax,edx
c0007cf7:	75 f6                	jne    c0007cef <Phys::freeDMA(unsigned long, unsigned long)+0x30>
c0007cf9:	c3                   	ret    

c0007cfa <Phys::setPageState(unsigned long, bool)>:
c0007cfa:	57                   	push   edi
c0007cfb:	56                   	push   esi
c0007cfc:	8b 35 b8 35 02 c0    	mov    esi,DWORD PTR ds:0xc00235b8
c0007d02:	53                   	push   ebx
c0007d03:	bb fe ff ff ff       	mov    ebx,0xfffffffe
c0007d08:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0007d0c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0007d10:	0f b6 c0             	movzx  eax,al
c0007d13:	89 ca                	mov    edx,ecx
c0007d15:	83 e1 07             	and    ecx,0x7
c0007d18:	c1 ea 03             	shr    edx,0x3
c0007d1b:	d3 c3                	rol    ebx,cl
c0007d1d:	01 d6                	add    esi,edx
c0007d1f:	d3 e0                	shl    eax,cl
c0007d21:	0f b6 3e             	movzx  edi,BYTE PTR [esi]
c0007d24:	21 fb                	and    ebx,edi
c0007d26:	88 1e                	mov    BYTE PTR [esi],bl
c0007d28:	8b 1d b8 35 02 c0    	mov    ebx,DWORD PTR ds:0xc00235b8
c0007d2e:	01 da                	add    edx,ebx
c0007d30:	8a 0a                	mov    cl,BYTE PTR [edx]
c0007d32:	09 c8                	or     eax,ecx
c0007d34:	88 02                	mov    BYTE PTR [edx],al
c0007d36:	5b                   	pop    ebx
c0007d37:	5e                   	pop    esi
c0007d38:	5f                   	pop    edi
c0007d39:	c3                   	ret    

c0007d3a <Phys::getPageState(unsigned long)>:
c0007d3a:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0007d3e:	8b 15 b8 35 02 c0    	mov    edx,DWORD PTR ds:0xc00235b8
c0007d44:	89 c8                	mov    eax,ecx
c0007d46:	83 e1 07             	and    ecx,0x7
c0007d49:	c1 e8 03             	shr    eax,0x3
c0007d4c:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
c0007d50:	d3 f8                	sar    eax,cl
c0007d52:	83 e0 01             	and    eax,0x1
c0007d55:	c3                   	ret    

c0007d56 <Phys::freePage(unsigned long)>:
c0007d56:	53                   	push   ebx
c0007d57:	83 ec 08             	sub    esp,0x8
c0007d5a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007d5e:	8d 90 00 00 ff ff    	lea    edx,[eax-0x10000]
c0007d64:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0007d6a:	76 41                	jbe    c0007dad <Phys::freePage(unsigned long)+0x57>
c0007d6c:	c1 e8 0c             	shr    eax,0xc
c0007d6f:	50                   	push   eax
c0007d70:	89 c3                	mov    ebx,eax
c0007d72:	e8 c3 ff ff ff       	call   c0007d3a <Phys::getPageState(unsigned long)>
c0007d77:	5a                   	pop    edx
c0007d78:	84 c0                	test   al,al
c0007d7a:	74 20                	je     c0007d9c <Phys::freePage(unsigned long)+0x46>
c0007d7c:	83 ec 08             	sub    esp,0x8
c0007d7f:	a1 e4 6e 02 c0       	mov    eax,ds:0xc0026ee4
c0007d84:	6a 00                	push   0x0
c0007d86:	83 e8 01             	sub    eax,0x1
c0007d89:	53                   	push   ebx
c0007d8a:	a3 e4 6e 02 c0       	mov    ds:0xc0026ee4,eax
c0007d8f:	e8 66 ff ff ff       	call   c0007cfa <Phys::setPageState(unsigned long, bool)>
c0007d94:	83 c4 10             	add    esp,0x10
c0007d97:	83 c4 08             	add    esp,0x8
c0007d9a:	5b                   	pop    ebx
c0007d9b:	c3                   	ret    
c0007d9c:	c7 44 24 10 71 0d 02 c0 	mov    DWORD PTR [esp+0x10],0xc0020d71
c0007da4:	83 c4 08             	add    esp,0x8
c0007da7:	5b                   	pop    ebx
c0007da8:	e9 7e 98 00 00       	jmp    c001162b <KePanic(char const*)>
c0007dad:	68 00 10 00 00       	push   0x1000
c0007db2:	50                   	push   eax
c0007db3:	e8 07 ff ff ff       	call   c0007cbf <Phys::freeDMA(unsigned long, unsigned long)>
c0007db8:	59                   	pop    ecx
c0007db9:	5b                   	pop    ebx
c0007dba:	83 c4 08             	add    esp,0x8
c0007dbd:	5b                   	pop    ebx
c0007dbe:	c3                   	ret    

c0007dbf <Phys::allocatePage()>:
c0007dbf:	56                   	push   esi
c0007dc0:	53                   	push   ebx
c0007dc1:	83 ec 14             	sub    esp,0x14
c0007dc4:	8b 35 d8 6e 02 c0    	mov    esi,DWORD PTR ds:0xc0026ed8
c0007dca:	89 f3                	mov    ebx,esi
c0007dcc:	eb 0a                	jmp    c0007dd8 <Phys::allocatePage()+0x19>
c0007dce:	89 1d d8 6e 02 c0    	mov    DWORD PTR ds:0xc0026ed8,ebx
c0007dd4:	39 de                	cmp    esi,ebx
c0007dd6:	74 26                	je     c0007dfe <Phys::allocatePage()+0x3f>
c0007dd8:	53                   	push   ebx
c0007dd9:	e8 5c ff ff ff       	call   c0007d3a <Phys::getPageState(unsigned long)>
c0007dde:	5a                   	pop    edx
c0007ddf:	84 c0                	test   al,al
c0007de1:	74 67                	je     c0007e4a <Phys::allocatePage()+0x8b>
c0007de3:	83 c3 01             	add    ebx,0x1
c0007de6:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c0007dec:	75 e0                	jne    c0007dce <Phys::allocatePage()+0xf>
c0007dee:	31 db                	xor    ebx,ebx
c0007df0:	c7 05 d8 6e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026ed8,0x0
c0007dfa:	39 de                	cmp    esi,ebx
c0007dfc:	75 da                	jne    c0007dd8 <Phys::allocatePage()+0x19>
c0007dfe:	83 ec 0c             	sub    esp,0xc
c0007e01:	a0 fc 6e 02 c0       	mov    al,ds:0xc0026efc
c0007e06:	83 f0 01             	xor    eax,0x1
c0007e09:	a2 fc 6e 02 c0       	mov    ds:0xc0026efc,al
c0007e0e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0007e13:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0007e16:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0007e1c:	50                   	push   eax
c0007e1d:	e8 a8 27 00 00       	call   c000a5ca <VAS::scanForEviction()>
c0007e22:	83 c4 10             	add    esp,0x10
c0007e25:	85 c0                	test   eax,eax
c0007e27:	75 48                	jne    c0007e71 <Phys::allocatePage()+0xb2>
c0007e29:	83 ec 0c             	sub    esp,0xc
c0007e2c:	68 f4 0c 02 c0       	push   0xc0020cf4
c0007e31:	e8 f5 97 00 00       	call   c001162b <KePanic(char const*)>
c0007e36:	83 c4 10             	add    esp,0x10
c0007e39:	8b 1d d8 6e 02 c0    	mov    ebx,DWORD PTR ds:0xc0026ed8
c0007e3f:	53                   	push   ebx
c0007e40:	e8 f5 fe ff ff       	call   c0007d3a <Phys::getPageState(unsigned long)>
c0007e45:	5a                   	pop    edx
c0007e46:	84 c0                	test   al,al
c0007e48:	75 99                	jne    c0007de3 <Phys::allocatePage()+0x24>
c0007e4a:	6a 01                	push   0x1
c0007e4c:	53                   	push   ebx
c0007e4d:	e8 a8 fe ff ff       	call   c0007cfa <Phys::setPageState(unsigned long, bool)>
c0007e52:	8b 15 e4 6e 02 c0    	mov    edx,DWORD PTR ds:0xc0026ee4
c0007e58:	a1 d8 6e 02 c0       	mov    eax,ds:0xc0026ed8
c0007e5d:	83 c2 01             	add    edx,0x1
c0007e60:	59                   	pop    ecx
c0007e61:	89 15 e4 6e 02 c0    	mov    DWORD PTR ds:0xc0026ee4,edx
c0007e67:	c1 e0 0c             	shl    eax,0xc
c0007e6a:	5b                   	pop    ebx
c0007e6b:	83 c4 14             	add    esp,0x14
c0007e6e:	5b                   	pop    ebx
c0007e6f:	5e                   	pop    esi
c0007e70:	c3                   	ret    
c0007e71:	83 ec 08             	sub    esp,0x8
c0007e74:	89 c2                	mov    edx,eax
c0007e76:	6a 01                	push   0x1
c0007e78:	c1 ea 0c             	shr    edx,0xc
c0007e7b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007e7f:	52                   	push   edx
c0007e80:	e8 75 fe ff ff       	call   c0007cfa <Phys::setPageState(unsigned long, bool)>
c0007e85:	83 c4 10             	add    esp,0x10
c0007e88:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007e8c:	eb dd                	jmp    c0007e6b <Phys::allocatePage()+0xac>

c0007e8e <Phys::allocateContiguousPages(int)>:
c0007e8e:	57                   	push   edi
c0007e8f:	56                   	push   esi
c0007e90:	53                   	push   ebx
c0007e91:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0007e95:	fa                   	cli    
c0007e96:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0007e9b:	31 db                	xor    ebx,ebx
c0007e9d:	83 c0 01             	add    eax,0x1
c0007ea0:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0007ea5:	85 db                	test   ebx,ebx
c0007ea7:	75 11                	jne    c0007eba <Phys::allocateContiguousPages(int)+0x2c>
c0007ea9:	e8 11 ff ff ff       	call   c0007dbf <Phys::allocatePage()>
c0007eae:	83 fe 01             	cmp    esi,0x1
c0007eb1:	89 c7                	mov    edi,eax
c0007eb3:	74 21                	je     c0007ed6 <Phys::allocateContiguousPages(int)+0x48>
c0007eb5:	bb 01 00 00 00       	mov    ebx,0x1
c0007eba:	e8 00 ff ff ff       	call   c0007dbf <Phys::allocatePage()>
c0007ebf:	89 da                	mov    edx,ebx
c0007ec1:	c1 e2 0c             	shl    edx,0xc
c0007ec4:	01 fa                	add    edx,edi
c0007ec6:	39 c2                	cmp    edx,eax
c0007ec8:	74 22                	je     c0007eec <Phys::allocateContiguousPages(int)+0x5e>
c0007eca:	bb 01 00 00 00       	mov    ebx,0x1
c0007ecf:	89 c7                	mov    edi,eax
c0007ed1:	83 fe 01             	cmp    esi,0x1
c0007ed4:	75 e4                	jne    c0007eba <Phys::allocateContiguousPages(int)+0x2c>
c0007ed6:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0007edb:	83 e8 01             	sub    eax,0x1
c0007ede:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0007ee3:	75 01                	jne    c0007ee6 <Phys::allocateContiguousPages(int)+0x58>
c0007ee5:	fb                   	sti    
c0007ee6:	89 f8                	mov    eax,edi
c0007ee8:	5b                   	pop    ebx
c0007ee9:	5e                   	pop    esi
c0007eea:	5f                   	pop    edi
c0007eeb:	c3                   	ret    
c0007eec:	83 c3 01             	add    ebx,0x1
c0007eef:	39 f3                	cmp    ebx,esi
c0007ef1:	75 b2                	jne    c0007ea5 <Phys::allocateContiguousPages(int)+0x17>
c0007ef3:	eb e1                	jmp    c0007ed6 <Phys::allocateContiguousPages(int)+0x48>

c0007ef5 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c0007ef5:	56                   	push   esi
c0007ef6:	53                   	push   ebx
c0007ef7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0007efb:	39 1d dc 6e 02 c0    	cmp    DWORD PTR ds:0xc0026edc,ebx
c0007f01:	73 06                	jae    c0007f09 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c0007f03:	89 1d dc 6e 02 c0    	mov    DWORD PTR ds:0xc0026edc,ebx
c0007f09:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007f0d:	c1 eb 0c             	shr    ebx,0xc
c0007f10:	c1 e8 0c             	shr    eax,0xc
c0007f13:	39 d8                	cmp    eax,ebx
c0007f15:	73 13                	jae    c0007f2a <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c0007f17:	6a 00                	push   0x0
c0007f19:	8d 70 01             	lea    esi,[eax+0x1]
c0007f1c:	50                   	push   eax
c0007f1d:	e8 d8 fd ff ff       	call   c0007cfa <Phys::setPageState(unsigned long, bool)>
c0007f22:	5a                   	pop    edx
c0007f23:	89 f0                	mov    eax,esi
c0007f25:	59                   	pop    ecx
c0007f26:	39 f3                	cmp    ebx,esi
c0007f28:	75 ed                	jne    c0007f17 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c0007f2a:	5b                   	pop    ebx
c0007f2b:	5e                   	pop    esi
c0007f2c:	c3                   	ret    

c0007f2d <Phys::physicalMemorySetup(unsigned int)>:
c0007f2d:	55                   	push   ebp
c0007f2e:	57                   	push   edi
c0007f2f:	56                   	push   esi
c0007f30:	53                   	push   ebx
c0007f31:	83 ec 40             	sub    esp,0x40
c0007f34:	6a 10                	push   0x10
c0007f36:	6a 00                	push   0x0
c0007f38:	68 ec 6e 02 c0       	push   0xc0026eec
c0007f3d:	e8 ae 85 ff ff       	call   c00004f0 <memset>
c0007f42:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0007f46:	25 00 f0 ff ff       	and    eax,0xfffff000
c0007f4b:	05 00 10 00 00       	add    eax,0x1000
c0007f50:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0007f54:	5b                   	pop    ebx
c0007f55:	31 db                	xor    ebx,ebx
c0007f57:	5e                   	pop    esi
c0007f58:	50                   	push   eax
c0007f59:	68 87 0d 02 c0       	push   0xc0020d87
c0007f5e:	e8 e2 29 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0007f63:	83 c4 10             	add    esp,0x10
c0007f66:	83 ec 08             	sub    esp,0x8
c0007f69:	6a 01                	push   0x1
c0007f6b:	53                   	push   ebx
c0007f6c:	83 c3 01             	add    ebx,0x1
c0007f6f:	e8 86 fd ff ff       	call   c0007cfa <Phys::setPageState(unsigned long, bool)>
c0007f74:	83 c4 10             	add    esp,0x10
c0007f77:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c0007f7d:	75 e7                	jne    c0007f66 <Phys::physicalMemorySetup(unsigned int)+0x39>
c0007f7f:	0f b6 05 14 05 00 c2 	movzx  eax,BYTE PTR ds:0xc2000514
c0007f86:	0f b6 15 13 05 00 c2 	movzx  edx,BYTE PTR ds:0xc2000513
c0007f8d:	c1 e0 08             	shl    eax,0x8
c0007f90:	09 c2                	or     edx,eax
c0007f92:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0007f96:	0f 84 98 01 00 00    	je     c0008134 <Phys::physicalMemorySetup(unsigned int)+0x207>
c0007f9c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0007fa0:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0007fa8:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c0007fad:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007fb1:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0007fb9:	eb 1c                	jmp    c0007fd7 <Phys::physicalMemorySetup(unsigned int)+0xaa>
c0007fbb:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0007fbf:	83 c3 18             	add    ebx,0x18
c0007fc2:	83 c6 01             	add    esi,0x1
c0007fc5:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0007fc9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0007fcd:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c0007fd1:	0f 84 6d 01 00 00    	je     c0008144 <Phys::physicalMemorySetup(unsigned int)+0x217>
c0007fd7:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0007fda:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0007fdd:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0007fe0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007fe4:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0007fe8:	8b 33                	mov    esi,DWORD PTR [ebx]
c0007fea:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c0007fed:	01 f0                	add    eax,esi
c0007fef:	55                   	push   ebp
c0007ff0:	11 fa                	adc    edx,edi
c0007ff2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0007ff6:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0007ffa:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007ffe:	51                   	push   ecx
c0007fff:	56                   	push   esi
c0008000:	68 24 0d 02 c0       	push   0xc0020d24
c0008005:	e8 3b 29 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000800a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000800e:	83 c4 10             	add    esp,0x10
c0008011:	09 f8                	or     eax,edi
c0008013:	0f 85 2b 01 00 00    	jne    c0008144 <Phys::physicalMemorySetup(unsigned int)+0x217>
c0008019:	83 fd 01             	cmp    ebp,0x1
c000801c:	75 9d                	jne    c0007fbb <Phys::physicalMemorySetup(unsigned int)+0x8e>
c000801e:	ba 00 00 08 00       	mov    edx,0x80000
c0008023:	89 c1                	mov    ecx,eax
c0008025:	39 f2                	cmp    edx,esi
c0008027:	19 f9                	sbb    ecx,edi
c0008029:	0f 82 ab 00 00 00    	jb     c00080da <Phys::physicalMemorySetup(unsigned int)+0x1ad>
c000802f:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c0008033:	89 c1                	mov    ecx,eax
c0008035:	1b 4c 24 0c          	sbb    ecx,DWORD PTR [esp+0xc]
c0008039:	0f 83 9b 00 00 00    	jae    c00080da <Phys::physicalMemorySetup(unsigned int)+0x1ad>
c000803f:	ba 00 00 0a 00       	mov    edx,0xa0000
c0008044:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0008048:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000804c:	39 fa                	cmp    edx,edi
c000804e:	19 e8                	sbb    eax,ebp
c0008050:	0f 82 b0 01 00 00    	jb     c0008206 <Phys::physicalMemorySetup(unsigned int)+0x2d9>
c0008056:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000805a:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000805e:	81 c7 00 00 f8 ff    	add    edi,0xfff80000
c0008064:	ba ff 1f 00 00       	mov    edx,0x1fff
c0008069:	83 d5 ff             	adc    ebp,0xffffffff
c000806c:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c0008070:	31 c0                	xor    eax,eax
c0008072:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c0008076:	39 fa                	cmp    edx,edi
c0008078:	89 c1                	mov    ecx,eax
c000807a:	19 e9                	sbb    ecx,ebp
c000807c:	0f 83 39 ff ff ff    	jae    c0007fbb <Phys::physicalMemorySetup(unsigned int)+0x8e>
c0008082:	be 00 00 08 00       	mov    esi,0x80000
c0008087:	83 ec 04             	sub    esp,0x4
c000808a:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000808e:	57                   	push   edi
c000808f:	56                   	push   esi
c0008090:	68 48 0d 02 c0       	push   0xc0020d48
c0008095:	e8 ab 28 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000809a:	5d                   	pop    ebp
c000809b:	58                   	pop    eax
c000809c:	57                   	push   edi
c000809d:	56                   	push   esi
c000809e:	e8 52 fe ff ff       	call   c0007ef5 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c00080a3:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00080a7:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00080ab:	83 c4 0c             	add    esp,0xc
c00080ae:	0f ac d0 0c          	shrd   eax,edx,0xc
c00080b2:	8b 15 e8 6e 02 c0    	mov    edx,DWORD PTR ds:0xc0026ee8
c00080b8:	01 d0                	add    eax,edx
c00080ba:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c00080c1:	a3 e8 6e 02 c0       	mov    ds:0xc0026ee8,eax
c00080c6:	52                   	push   edx
c00080c7:	50                   	push   eax
c00080c8:	68 ad 0d 02 c0       	push   0xc0020dad
c00080cd:	e8 73 28 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c00080d2:	83 c4 10             	add    esp,0x10
c00080d5:	e9 e1 fe ff ff       	jmp    c0007fbb <Phys::physicalMemorySetup(unsigned int)+0x8e>
c00080da:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c00080de:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00080e2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00080e6:	39 ea                	cmp    edx,ebp
c00080e8:	1b 4c 24 2c          	sbb    ecx,DWORD PTR [esp+0x2c]
c00080ec:	0f 82 c9 fe ff ff    	jb     c0007fbb <Phys::physicalMemorySetup(unsigned int)+0x8e>
c00080f2:	ba ff 1f 00 00       	mov    edx,0x1fff
c00080f7:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c00080fb:	1b 44 24 1c          	sbb    eax,DWORD PTR [esp+0x1c]
c00080ff:	0f 83 b6 fe ff ff    	jae    c0007fbb <Phys::physicalMemorySetup(unsigned int)+0x8e>
c0008105:	39 ee                	cmp    esi,ebp
c0008107:	89 f8                	mov    eax,edi
c0008109:	1b 44 24 2c          	sbb    eax,DWORD PTR [esp+0x2c]
c000810d:	0f 83 74 ff ff ff    	jae    c0008087 <Phys::physicalMemorySetup(unsigned int)+0x15a>
c0008113:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0008117:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000811b:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c000811f:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008123:	1b 54 24 2c          	sbb    edx,DWORD PTR [esp+0x2c]
c0008127:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000812b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000812f:	e9 53 ff ff ff       	jmp    c0008087 <Phys::physicalMemorySetup(unsigned int)+0x15a>
c0008134:	83 ec 0c             	sub    esp,0xc
c0008137:	68 9f 0d 02 c0       	push   0xc0020d9f
c000813c:	e8 ea 94 00 00       	call   c001162b <KePanic(char const*)>
c0008141:	83 c4 10             	add    esp,0x10
c0008144:	83 ec 08             	sub    esp,0x8
c0008147:	bb 60 00 00 00       	mov    ebx,0x60
c000814c:	6a 00                	push   0x0
c000814e:	6a 06                	push   0x6
c0008150:	e8 a5 fb ff ff       	call   c0007cfa <Phys::setPageState(unsigned long, bool)>
c0008155:	58                   	pop    eax
c0008156:	5a                   	pop    edx
c0008157:	6a 00                	push   0x0
c0008159:	6a 07                	push   0x7
c000815b:	e8 9a fb ff ff       	call   c0007cfa <Phys::setPageState(unsigned long, bool)>
c0008160:	8b 0d e8 6e 02 c0    	mov    ecx,DWORD PTR ds:0xc0026ee8
c0008166:	83 c4 10             	add    esp,0x10
c0008169:	83 c1 02             	add    ecx,0x2
c000816c:	89 0d e8 6e 02 c0    	mov    DWORD PTR ds:0xc0026ee8,ecx
c0008172:	83 ec 08             	sub    esp,0x8
c0008175:	6a 00                	push   0x0
c0008177:	53                   	push   ebx
c0008178:	83 c3 01             	add    ebx,0x1
c000817b:	e8 7a fb ff ff       	call   c0007cfa <Phys::setPageState(unsigned long, bool)>
c0008180:	83 c4 10             	add    esp,0x10
c0008183:	81 fb 80 00 00 00    	cmp    ebx,0x80
c0008189:	75 e7                	jne    c0008172 <Phys::physicalMemorySetup(unsigned int)+0x245>
c000818b:	a1 e8 6e 02 c0       	mov    eax,ds:0xc0026ee8
c0008190:	bb 40 01 00 00       	mov    ebx,0x140
c0008195:	83 c0 20             	add    eax,0x20
c0008198:	a3 e8 6e 02 c0       	mov    ds:0xc0026ee8,eax
c000819d:	eb 26                	jmp    c00081c5 <Phys::physicalMemorySetup(unsigned int)+0x298>
c000819f:	83 ec 08             	sub    esp,0x8
c00081a2:	6a 00                	push   0x0
c00081a4:	53                   	push   ebx
c00081a5:	83 c3 01             	add    ebx,0x1
c00081a8:	e8 4d fb ff ff       	call   c0007cfa <Phys::setPageState(unsigned long, bool)>
c00081ad:	a1 e8 6e 02 c0       	mov    eax,ds:0xc0026ee8
c00081b2:	83 c4 10             	add    esp,0x10
c00081b5:	83 c0 01             	add    eax,0x1
c00081b8:	81 fb c0 01 00 00    	cmp    ebx,0x1c0
c00081be:	a3 e8 6e 02 c0       	mov    ds:0xc0026ee8,eax
c00081c3:	74 07                	je     c00081cc <Phys::physicalMemorySetup(unsigned int)+0x29f>
c00081c5:	3d ff 03 00 00       	cmp    eax,0x3ff
c00081ca:	7e d3                	jle    c000819f <Phys::physicalMemorySetup(unsigned int)+0x272>
c00081cc:	bb d0 01 00 00       	mov    ebx,0x1d0
c00081d1:	3d ff 07 00 00       	cmp    eax,0x7ff
c00081d6:	7f 26                	jg     c00081fe <Phys::physicalMemorySetup(unsigned int)+0x2d1>
c00081d8:	83 ec 08             	sub    esp,0x8
c00081db:	6a 00                	push   0x0
c00081dd:	53                   	push   ebx
c00081de:	83 c3 01             	add    ebx,0x1
c00081e1:	e8 14 fb ff ff       	call   c0007cfa <Phys::setPageState(unsigned long, bool)>
c00081e6:	a1 e8 6e 02 c0       	mov    eax,ds:0xc0026ee8
c00081eb:	83 c4 10             	add    esp,0x10
c00081ee:	83 c0 01             	add    eax,0x1
c00081f1:	81 fb e0 01 00 00    	cmp    ebx,0x1e0
c00081f7:	a3 e8 6e 02 c0       	mov    ds:0xc0026ee8,eax
c00081fc:	75 d3                	jne    c00081d1 <Phys::physicalMemorySetup(unsigned int)+0x2a4>
c00081fe:	83 c4 3c             	add    esp,0x3c
c0008201:	5b                   	pop    ebx
c0008202:	5e                   	pop    esi
c0008203:	5f                   	pop    edi
c0008204:	5d                   	pop    ebp
c0008205:	c3                   	ret    
c0008206:	c7 44 24 08 00 00 0a 00 	mov    DWORD PTR [esp+0x8],0xa0000
c000820e:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0008216:	e9 3b fe ff ff       	jmp    c0008056 <Phys::physicalMemorySetup(unsigned int)+0x129>
c000821b:	90                   	nop

c000821c <Pipe::isAtty()>:
c000821c:	31 c0                	xor    eax,eax
c000821e:	c3                   	ret    
c000821f:	90                   	nop

c0008220 <Pipe::~Pipe()>:
c0008220:	83 ec 0c             	sub    esp,0xc
c0008223:	ba 0c 0e 02 c0       	mov    edx,0xc0020e0c
c0008228:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000822c:	89 10                	mov    DWORD PTR [eax],edx
c000822e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008232:	83 ec 0c             	sub    esp,0xc
c0008235:	50                   	push   eax
c0008236:	e8 69 11 00 00       	call   c00093a4 <UnixFile::~UnixFile()>
c000823b:	83 c4 10             	add    esp,0x10
c000823e:	90                   	nop
c000823f:	83 c4 0c             	add    esp,0xc
c0008242:	c3                   	ret    
c0008243:	90                   	nop

c0008244 <Pipe::~Pipe()>:
c0008244:	83 ec 0c             	sub    esp,0xc
c0008247:	83 ec 0c             	sub    esp,0xc
c000824a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000824e:	e8 cd ff ff ff       	call   c0008220 <Pipe::~Pipe()>
c0008253:	83 c4 10             	add    esp,0x10
c0008256:	83 ec 08             	sub    esp,0x8
c0008259:	6a 20                	push   0x20
c000825b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000825f:	e8 b4 25 00 00       	call   c000a818 <operator delete(void*, unsigned long)>
c0008264:	83 c4 10             	add    esp,0x10
c0008267:	83 c4 0c             	add    esp,0xc
c000826a:	c3                   	ret    
c000826b:	90                   	nop

c000826c <Pipe::write(unsigned long long, void*, int*)>:
c000826c:	55                   	push   ebp
c000826d:	57                   	push   edi
c000826e:	56                   	push   esi
c000826f:	53                   	push   ebx
c0008270:	83 ec 1c             	sub    esp,0x1c
c0008273:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0008277:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000827b:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c000827e:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0008282:	89 04 24             	mov    DWORD PTR [esp],eax
c0008285:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0008289:	89 d8                	mov    eax,ebx
c000828b:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c000828e:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0008292:	89 d6                	mov    esi,edx
c0008294:	89 d7                	mov    edi,edx
c0008296:	c1 ff 1f             	sar    edi,0x1f
c0008299:	03 34 24             	add    esi,DWORD PTR [esp]
c000829c:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c00082a0:	c1 f8 1f             	sar    eax,0x1f
c00082a3:	39 f3                	cmp    ebx,esi
c00082a5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00082a9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00082ad:	19 f8                	sbb    eax,edi
c00082af:	b8 01 00 00 00       	mov    eax,0x1
c00082b4:	72 6e                	jb     c0008324 <Pipe::write(unsigned long long, void*, int*)+0xb8>
c00082b6:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00082b9:	01 d0                	add    eax,edx
c00082bb:	99                   	cdq    
c00082bc:	f7 fb                	idiv   ebx
c00082be:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00082c2:	29 d3                	sub    ebx,edx
c00082c4:	89 d7                	mov    edi,edx
c00082c6:	89 de                	mov    esi,ebx
c00082c8:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00082cb:	c1 fb 1f             	sar    ebx,0x1f
c00082ce:	39 f2                	cmp    edx,esi
c00082d0:	19 d8                	sbb    eax,ebx
c00082d2:	b8 00 00 00 00       	mov    eax,0x0
c00082d7:	72 04                	jb     c00082dd <Pipe::write(unsigned long long, void*, int*)+0x71>
c00082d9:	89 d0                	mov    eax,edx
c00082db:	29 f0                	sub    eax,esi
c00082dd:	89 d3                	mov    ebx,edx
c00082df:	29 c3                	sub    ebx,eax
c00082e1:	74 0b                	je     c00082ee <Pipe::write(unsigned long long, void*, int*)+0x82>
c00082e3:	03 7d 0c             	add    edi,DWORD PTR [ebp+0xc]
c00082e6:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c00082ea:	89 d9                	mov    ecx,ebx
c00082ec:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00082ee:	85 c0                	test   eax,eax
c00082f0:	74 0d                	je     c00082ff <Pipe::write(unsigned long long, void*, int*)+0x93>
c00082f2:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c00082f6:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c00082f9:	89 de                	mov    esi,ebx
c00082fb:	89 c1                	mov    ecx,eax
c00082fd:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00082ff:	01 55 14             	add    DWORD PTR [ebp+0x14],edx
c0008302:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0008307:	75 10                	jne    c0008319 <Pipe::write(unsigned long long, void*, int*)+0xad>
c0008309:	83 ec 0c             	sub    esp,0xc
c000830c:	68 c9 0d 02 c0       	push   0xc0020dc9
c0008311:	e8 15 93 00 00       	call   c001162b <KePanic(char const*)>
c0008316:	83 c4 10             	add    esp,0x10
c0008319:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000831d:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0008320:	89 08                	mov    DWORD PTR [eax],ecx
c0008322:	31 c0                	xor    eax,eax
c0008324:	83 c4 1c             	add    esp,0x1c
c0008327:	5b                   	pop    ebx
c0008328:	5e                   	pop    esi
c0008329:	5f                   	pop    edi
c000832a:	5d                   	pop    ebp
c000832b:	c3                   	ret    

c000832c <Pipe::read(unsigned long long, void*, int*)>:
c000832c:	55                   	push   ebp
c000832d:	57                   	push   edi
c000832e:	56                   	push   esi
c000832f:	53                   	push   ebx
c0008330:	83 ec 1c             	sub    esp,0x1c
c0008333:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0008337:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000833b:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000833f:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0008342:	89 c8                	mov    eax,ecx
c0008344:	99                   	cdq    
c0008345:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c0008349:	74 24                	je     c000836f <Pipe::read(unsigned long long, void*, int*)+0x43>
c000834b:	39 f9                	cmp    ecx,edi
c000834d:	89 d1                	mov    ecx,edx
c000834f:	19 f1                	sbb    ecx,esi
c0008351:	73 1c                	jae    c000836f <Pipe::read(unsigned long long, void*, int*)+0x43>
c0008353:	fa                   	cli    
c0008354:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c000835a:	e8 31 dd 00 00       	call   c0016090 <schedule()>
c000835f:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0008364:	48                   	dec    eax
c0008365:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c000836a:	75 d3                	jne    c000833f <Pipe::read(unsigned long long, void*, int*)+0x13>
c000836c:	fb                   	sti    
c000836d:	eb d0                	jmp    c000833f <Pipe::read(unsigned long long, void*, int*)+0x13>
c000836f:	39 f8                	cmp    eax,edi
c0008371:	89 d1                	mov    ecx,edx
c0008373:	89 3c 24             	mov    DWORD PTR [esp],edi
c0008376:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c000837a:	19 f1                	sbb    ecx,esi
c000837c:	73 07                	jae    c0008385 <Pipe::read(unsigned long long, void*, int*)+0x59>
c000837e:	89 04 24             	mov    DWORD PTR [esp],eax
c0008381:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0008385:	8b 73 10             	mov    esi,DWORD PTR [ebx+0x10]
c0008388:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c000838b:	29 f7                	sub    edi,esi
c000838d:	89 f8                	mov    eax,edi
c000838f:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0008393:	99                   	cdq    
c0008394:	39 3c 24             	cmp    DWORD PTR [esp],edi
c0008397:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000839b:	19 d0                	sbb    eax,edx
c000839d:	73 07                	jae    c00083a6 <Pipe::read(unsigned long long, void*, int*)+0x7a>
c000839f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00083a2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00083a6:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c00083a9:	89 ea                	mov    edx,ebp
c00083ab:	2b 54 24 0c          	sub    edx,DWORD PTR [esp+0xc]
c00083af:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00083b4:	74 0d                	je     c00083c3 <Pipe::read(unsigned long long, void*, int*)+0x97>
c00083b6:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c00083b9:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c00083bd:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00083c1:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00083c3:	85 d2                	test   edx,edx
c00083c5:	74 11                	je     c00083d8 <Pipe::read(unsigned long long, void*, int*)+0xac>
c00083c7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00083cb:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c00083ce:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c00083d2:	89 d1                	mov    ecx,edx
c00083d4:	89 c7                	mov    edi,eax
c00083d6:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00083d8:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00083db:	29 6b 14             	sub    DWORD PTR [ebx+0x14],ebp
c00083de:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c00083e1:	99                   	cdq    
c00083e2:	89 f7                	mov    edi,esi
c00083e4:	03 04 24             	add    eax,DWORD PTR [esp]
c00083e7:	13 54 24 04          	adc    edx,DWORD PTR [esp+0x4]
c00083eb:	c1 ff 1f             	sar    edi,0x1f
c00083ee:	57                   	push   edi
c00083ef:	56                   	push   esi
c00083f0:	52                   	push   edx
c00083f1:	50                   	push   eax
c00083f2:	e8 09 74 01 00       	call   c001f800 <__umoddi3>
c00083f7:	83 c4 10             	add    esp,0x10
c00083fa:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c00083fd:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0008402:	75 10                	jne    c0008414 <Pipe::read(unsigned long long, void*, int*)+0xe8>
c0008404:	83 ec 0c             	sub    esp,0xc
c0008407:	68 e6 0d 02 c0       	push   0xc0020de6
c000840c:	e8 1a 92 00 00       	call   c001162b <KePanic(char const*)>
c0008411:	83 c4 10             	add    esp,0x10
c0008414:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0008418:	8b 14 24             	mov    edx,DWORD PTR [esp]
c000841b:	89 10                	mov    DWORD PTR [eax],edx
c000841d:	83 c4 1c             	add    esp,0x1c
c0008420:	31 c0                	xor    eax,eax
c0008422:	5b                   	pop    ebx
c0008423:	5e                   	pop    esi
c0008424:	5f                   	pop    edi
c0008425:	5d                   	pop    ebp
c0008426:	c3                   	ret    
c0008427:	90                   	nop

c0008428 <Pipe::Pipe(int)>:
c0008428:	83 ec 0c             	sub    esp,0xc
c000842b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000842f:	83 ec 08             	sub    esp,0x8
c0008432:	6a 00                	push   0x0
c0008434:	50                   	push   eax
c0008435:	e8 84 0d 00 00       	call   c00091be <UnixFile::UnixFile(int)>
c000843a:	83 c4 10             	add    esp,0x10
c000843d:	ba 0c 0e 02 c0       	mov    edx,0xc0020e0c
c0008442:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008446:	89 10                	mov    DWORD PTR [eax],edx
c0008448:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000844c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0008450:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0008453:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008457:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c000845e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008462:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c0008469:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000846d:	83 ec 0c             	sub    esp,0xc
c0008470:	50                   	push   eax
c0008471:	e8 40 f6 ff ff       	call   c0007ab6 <malloc>
c0008476:	83 c4 10             	add    esp,0x10
c0008479:	89 c2                	mov    edx,eax
c000847b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000847f:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0008482:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008486:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c000848a:	90                   	nop
c000848b:	83 c4 0c             	add    esp,0xc
c000848e:	c3                   	ret    
c000848f:	90                   	nop

c0008490 <VgaText::isAtty()>:
c0008490:	b0 01                	mov    al,0x1
c0008492:	c3                   	ret    
c0008493:	90                   	nop

c0008494 <VgaText::~VgaText()>:
c0008494:	83 ec 0c             	sub    esp,0xc
c0008497:	ba 54 0e 02 c0       	mov    edx,0xc0020e54
c000849c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00084a0:	89 10                	mov    DWORD PTR [eax],edx
c00084a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00084a6:	83 ec 0c             	sub    esp,0xc
c00084a9:	50                   	push   eax
c00084aa:	e8 f5 0e 00 00       	call   c00093a4 <UnixFile::~UnixFile()>
c00084af:	83 c4 10             	add    esp,0x10
c00084b2:	90                   	nop
c00084b3:	83 c4 0c             	add    esp,0xc
c00084b6:	c3                   	ret    
c00084b7:	90                   	nop

c00084b8 <VgaText::~VgaText()>:
c00084b8:	83 ec 0c             	sub    esp,0xc
c00084bb:	83 ec 0c             	sub    esp,0xc
c00084be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00084c2:	e8 cd ff ff ff       	call   c0008494 <VgaText::~VgaText()>
c00084c7:	83 c4 10             	add    esp,0x10
c00084ca:	83 ec 08             	sub    esp,0x8
c00084cd:	68 84 01 00 00       	push   0x184
c00084d2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00084d6:	e8 3d 23 00 00       	call   c000a818 <operator delete(void*, unsigned long)>
c00084db:	83 c4 10             	add    esp,0x10
c00084de:	83 c4 0c             	add    esp,0xc
c00084e1:	c3                   	ret    

c00084e2 <VgaText::read(unsigned long long, void*, int*)>:
c00084e2:	83 ec 10             	sub    esp,0x10
c00084e5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00084e9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00084ed:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00084f1:	e8 b6 53 00 00       	call   c000d8ac <readKeyboard(VgaText*, char*, unsigned long)>
c00084f6:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00084fa:	89 02                	mov    DWORD PTR [edx],eax
c00084fc:	31 c0                	xor    eax,eax
c00084fe:	83 c4 1c             	add    esp,0x1c
c0008501:	c3                   	ret    

c0008502 <setTerminalScrollLock(bool)>:
c0008502:	c3                   	ret    

c0008503 <doTerminalCycle()>:
c0008503:	c3                   	ret    

c0008504 <addToTerminalCycle(VgaText*)>:
c0008504:	c3                   	ret    

c0008505 <scrollTerminalScrollLock(int)>:
c0008505:	c3                   	ret    

c0008506 <VgaText::updateTitle()>:
c0008506:	c3                   	ret    
c0008507:	90                   	nop

c0008508 <VgaText::load()>:
c0008508:	c3                   	ret    
c0008509:	90                   	nop

c000850a <VgaText::updateCursor()>:
c000850a:	83 ec 14             	sub    esp,0x14
c000850d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0008511:	ff 70 18             	push   DWORD PTR [eax+0x18]
c0008514:	ff 70 14             	push   DWORD PTR [eax+0x14]
c0008517:	e8 2c 09 01 00       	call   c0018e48 <HalConsoleCursorUpdate(int, int)>
c000851c:	83 c4 1c             	add    esp,0x1c
c000851f:	c3                   	ret    

c0008520 <VgaText::doANSI_SGR(int)>:
c0008520:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0008524:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008528:	85 d2                	test   edx,edx
c000852a:	75 0b                	jne    c0008537 <VgaText::doANSI_SGR(int)+0x17>
c000852c:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c000852f:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0008532:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0008535:	eb 59                	jmp    c0008590 <VgaText::doANSI_SGR(int)+0x70>
c0008537:	83 fa 07             	cmp    edx,0x7
c000853a:	75 0b                	jne    c0008547 <VgaText::doANSI_SGR(int)+0x27>
c000853c:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c000853f:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c0008542:	89 48 34             	mov    DWORD PTR [eax+0x34],ecx
c0008545:	eb 49                	jmp    c0008590 <VgaText::doANSI_SGR(int)+0x70>
c0008547:	83 fa 1b             	cmp    edx,0x1b
c000854a:	74 e0                	je     c000852c <VgaText::doANSI_SGR(int)+0xc>
c000854c:	8d 4a e2             	lea    ecx,[edx-0x1e]
c000854f:	83 f9 07             	cmp    ecx,0x7
c0008552:	77 09                	ja     c000855d <VgaText::doANSI_SGR(int)+0x3d>
c0008554:	8b 14 8d e0 35 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffdca20]
c000855b:	eb 20                	jmp    c000857d <VgaText::doANSI_SGR(int)+0x5d>
c000855d:	8d 4a d8             	lea    ecx,[edx-0x28]
c0008560:	83 f9 07             	cmp    ecx,0x7
c0008563:	77 09                	ja     c000856e <VgaText::doANSI_SGR(int)+0x4e>
c0008565:	8b 14 8d e0 35 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffdca20]
c000856c:	eb 22                	jmp    c0008590 <VgaText::doANSI_SGR(int)+0x70>
c000856e:	8d 4a a6             	lea    ecx,[edx-0x5a]
c0008571:	83 f9 07             	cmp    ecx,0x7
c0008574:	77 0b                	ja     c0008581 <VgaText::doANSI_SGR(int)+0x61>
c0008576:	8b 14 95 98 34 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdcb68]
c000857d:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0008580:	c3                   	ret    
c0008581:	8d 4a 9c             	lea    ecx,[edx-0x64]
c0008584:	83 f9 07             	cmp    ecx,0x7
c0008587:	77 0a                	ja     c0008593 <VgaText::doANSI_SGR(int)+0x73>
c0008589:	8b 14 95 70 34 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdcb90]
c0008590:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c0008593:	c3                   	ret    

c0008594 <VgaText::setDefaultBgColour(VgaColour)>:
c0008594:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008598:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000859c:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c000859f:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c00085a2:	c3                   	ret    
c00085a3:	90                   	nop

c00085a4 <VgaText::setDefaultFgColour(VgaColour)>:
c00085a4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00085a8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00085ac:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c00085af:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c00085b2:	c3                   	ret    
c00085b3:	90                   	nop

c00085b4 <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c00085b4:	53                   	push   ebx
c00085b5:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00085b9:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00085bd:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00085c1:	51                   	push   ecx
c00085c2:	e8 cd ff ff ff       	call   c0008594 <VgaText::setDefaultBgColour(VgaColour)>
c00085c7:	58                   	pop    eax
c00085c8:	5a                   	pop    edx
c00085c9:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c00085cd:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00085d1:	5b                   	pop    ebx
c00085d2:	eb d0                	jmp    c00085a4 <VgaText::setDefaultFgColour(VgaColour)>

c00085d4 <VgaText::setTitleTextColour(VgaColour)>:
c00085d4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00085d8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00085dc:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c00085df:	c3                   	ret    

c00085e0 <VgaText::setTitleColour(VgaColour)>:
c00085e0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00085e4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00085e8:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00085eb:	c3                   	ret    

c00085ec <VgaText::setTitle(char*)>:
c00085ec:	c3                   	ret    
c00085ed:	90                   	nop

c00085ee <VgaText::combineColours(unsigned char, unsigned char)>:
c00085ee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00085f2:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c00085f7:	83 e0 0f             	and    eax,0xf
c00085fa:	c1 e2 04             	shl    edx,0x4
c00085fd:	09 d0                	or     eax,edx
c00085ff:	c3                   	ret    

c0008600 <VgaText::scrollScreen()>:
c0008600:	55                   	push   ebp
c0008601:	57                   	push   edi
c0008602:	56                   	push   esi
c0008603:	be 01 00 00 00       	mov    esi,0x1
c0008608:	53                   	push   ebx
c0008609:	83 ec 0c             	sub    esp,0xc
c000860c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008610:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c0008613:	69 ce a0 00 00 00    	imul   ecx,esi,0xa0
c0008619:	31 ff                	xor    edi,edi
c000861b:	01 e9                	add    ecx,ebp
c000861d:	8a 01                	mov    al,BYTE PTR [ecx]
c000861f:	83 fe 18             	cmp    esi,0x18
c0008622:	88 81 60 ff ff ff    	mov    BYTE PTR [ecx-0xa0],al
c0008628:	75 20                	jne    c000864a <VgaText::scrollScreen()+0x4a>
c000862a:	f7 c7 01 00 00 00    	test   edi,0x1
c0008630:	74 15                	je     c0008647 <VgaText::scrollScreen()+0x47>
c0008632:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c0008636:	50                   	push   eax
c0008637:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c000863b:	50                   	push   eax
c000863c:	e8 ad ff ff ff       	call   c00085ee <VgaText::combineColours(unsigned char, unsigned char)>
c0008641:	5a                   	pop    edx
c0008642:	5a                   	pop    edx
c0008643:	88 01                	mov    BYTE PTR [ecx],al
c0008645:	eb 03                	jmp    c000864a <VgaText::scrollScreen()+0x4a>
c0008647:	c6 01 20             	mov    BYTE PTR [ecx],0x20
c000864a:	47                   	inc    edi
c000864b:	41                   	inc    ecx
c000864c:	81 ff a0 00 00 00    	cmp    edi,0xa0
c0008652:	75 c9                	jne    c000861d <VgaText::scrollScreen()+0x1d>
c0008654:	46                   	inc    esi
c0008655:	83 fe 19             	cmp    esi,0x19
c0008658:	75 b9                	jne    c0008613 <VgaText::scrollScreen()+0x13>
c000865a:	39 1d 04 6f 02 c0    	cmp    DWORD PTR ds:0xc0026f04,ebx
c0008660:	75 1f                	jne    c0008681 <VgaText::scrollScreen()+0x81>
c0008662:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c0008666:	74 05                	je     c000866d <VgaText::scrollScreen()+0x6d>
c0008668:	ff 4b 5c             	dec    DWORD PTR [ebx+0x5c]
c000866b:	eb 14                	jmp    c0008681 <VgaText::scrollScreen()+0x81>
c000866d:	50                   	push   eax
c000866e:	50                   	push   eax
c000866f:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c0008673:	50                   	push   eax
c0008674:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c0008678:	50                   	push   eax
c0008679:	e8 5e 06 01 00       	call   c0018cdc <HalConsoleScroll(int, int)>
c000867e:	83 c4 10             	add    esp,0x10
c0008681:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0008685:	83 c4 0c             	add    esp,0xc
c0008688:	5b                   	pop    ebx
c0008689:	5e                   	pop    esi
c000868a:	5f                   	pop    edi
c000868b:	5d                   	pop    ebp
c000868c:	e9 79 fe ff ff       	jmp    c000850a <VgaText::updateCursor()>
c0008691:	90                   	nop

c0008692 <VgaText::combineCharAndColour(char, unsigned char)>:
c0008692:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0008697:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c000869c:	c1 e0 08             	shl    eax,0x8
c000869f:	09 d0                	or     eax,edx
c00086a1:	c3                   	ret    

c00086a2 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c00086a2:	55                   	push   ebp
c00086a3:	57                   	push   edi
c00086a4:	56                   	push   esi
c00086a5:	53                   	push   ebx
c00086a6:	83 ec 1c             	sub    esp,0x1c
c00086a9:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00086ad:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00086b1:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c00086b5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00086b9:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c00086bd:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c00086c1:	0f b6 c3             	movzx  eax,bl
c00086c4:	50                   	push   eax
c00086c5:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c00086ca:	50                   	push   eax
c00086cb:	e8 1e ff ff ff       	call   c00085ee <VgaText::combineColours(unsigned char, unsigned char)>
c00086d0:	5a                   	pop    edx
c00086d1:	0f b6 c0             	movzx  eax,al
c00086d4:	59                   	pop    ecx
c00086d5:	0f be 4c 24 34       	movsx  ecx,BYTE PTR [esp+0x34]
c00086da:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00086de:	50                   	push   eax
c00086df:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00086e3:	e8 aa ff ff ff       	call   c0008692 <VgaText::combineCharAndColour(char, unsigned char)>
c00086e8:	5a                   	pop    edx
c00086e9:	6b d7 50             	imul   edx,edi,0x50
c00086ec:	59                   	pop    ecx
c00086ed:	01 f2                	add    edx,esi
c00086ef:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00086f2:	0f b7 d2             	movzx  edx,dx
c00086f5:	66 89 04 51          	mov    WORD PTR [ecx+edx*2],ax
c00086f9:	39 2d 04 6f 02 c0    	cmp    DWORD PTR ds:0xc0026f04,ebp
c00086ff:	75 28                	jne    c0008729 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x87>
c0008701:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008705:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c0008709:	89 74 24 3c          	mov    DWORD PTR [esp+0x3c],esi
c000870d:	89 5c 24 38          	mov    DWORD PTR [esp+0x38],ebx
c0008711:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0008715:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0008719:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000871d:	83 c4 1c             	add    esp,0x1c
c0008720:	5b                   	pop    ebx
c0008721:	5e                   	pop    esi
c0008722:	5f                   	pop    edi
c0008723:	5d                   	pop    ebp
c0008724:	e9 bb 06 01 00       	jmp    c0018de4 <HalConsoleWriteCharacter(char, int, int, int, int)>
c0008729:	83 c4 1c             	add    esp,0x1c
c000872c:	5b                   	pop    ebx
c000872d:	5e                   	pop    esi
c000872e:	5f                   	pop    edi
c000872f:	5d                   	pop    ebp
c0008730:	c3                   	ret    
c0008731:	90                   	nop

c0008732 <VgaText::getCursorX()>:
c0008732:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008736:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0008739:	c3                   	ret    

c000873a <VgaText::getCursorY()>:
c000873a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000873e:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0008741:	c3                   	ret    

c0008742 <VgaText::setCursor(int, int)>:
c0008742:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008746:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000874a:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c000874d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0008751:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0008754:	e9 b1 fd ff ff       	jmp    c000850a <VgaText::updateCursor()>

c0008759 <setActiveTerminal(VgaText*)>:
c0008759:	53                   	push   ebx
c000875a:	83 ec 08             	sub    esp,0x8
c000875d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008761:	85 db                	test   ebx,ebx
c0008763:	75 11                	jne    c0008776 <setActiveTerminal(VgaText*)+0x1d>
c0008765:	c7 44 24 10 20 0e 02 c0 	mov    DWORD PTR [esp+0x10],0xc0020e20
c000876d:	83 c4 08             	add    esp,0x8
c0008770:	5b                   	pop    ebx
c0008771:	e9 b5 8e 00 00       	jmp    c001162b <KePanic(char const*)>
c0008776:	a1 04 6f 02 c0       	mov    eax,ds:0xc0026f04
c000877b:	85 c0                	test   eax,eax
c000877d:	74 0c                	je     c000878b <setActiveTerminal(VgaText*)+0x32>
c000877f:	83 ec 0c             	sub    esp,0xc
c0008782:	50                   	push   eax
c0008783:	e8 82 fd ff ff       	call   c000850a <VgaText::updateCursor()>
c0008788:	83 c4 10             	add    esp,0x10
c000878b:	89 1d 04 6f 02 c0    	mov    DWORD PTR ds:0xc0026f04,ebx
c0008791:	50                   	push   eax
c0008792:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0008795:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0008798:	53                   	push   ebx
c0008799:	e8 a4 ff ff ff       	call   c0008742 <VgaText::setCursor(int, int)>
c000879e:	83 c4 18             	add    esp,0x18
c00087a1:	5b                   	pop    ebx
c00087a2:	c3                   	ret    
c00087a3:	90                   	nop

c00087a4 <VgaText::clearScreen()>:
c00087a4:	57                   	push   edi
c00087a5:	56                   	push   esi
c00087a6:	31 f6                	xor    esi,esi
c00087a8:	53                   	push   ebx
c00087a9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00087ad:	52                   	push   edx
c00087ae:	6a 00                	push   0x0
c00087b0:	6a 00                	push   0x0
c00087b2:	53                   	push   ebx
c00087b3:	e8 8a ff ff ff       	call   c0008742 <VgaText::setCursor(int, int)>
c00087b8:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c00087bf:	83 c4 10             	add    esp,0x10
c00087c2:	39 73 10             	cmp    DWORD PTR [ebx+0x10],esi
c00087c5:	7e 20                	jle    c00087e7 <VgaText::clearScreen()+0x43>
c00087c7:	31 ff                	xor    edi,edi
c00087c9:	50                   	push   eax
c00087ca:	50                   	push   eax
c00087cb:	56                   	push   esi
c00087cc:	57                   	push   edi
c00087cd:	47                   	inc    edi
c00087ce:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00087d1:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c00087d4:	6a 20                	push   0x20
c00087d6:	53                   	push   ebx
c00087d7:	e8 c6 fe ff ff       	call   c00086a2 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c00087dc:	83 c4 20             	add    esp,0x20
c00087df:	83 ff 50             	cmp    edi,0x50
c00087e2:	75 e5                	jne    c00087c9 <VgaText::clearScreen()+0x25>
c00087e4:	46                   	inc    esi
c00087e5:	eb db                	jmp    c00087c2 <VgaText::clearScreen()+0x1e>
c00087e7:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c00087ee:	5b                   	pop    ebx
c00087ef:	5e                   	pop    esi
c00087f0:	5f                   	pop    edi
c00087f1:	c3                   	ret    

c00087f2 <VgaText::setCursorX(int)>:
c00087f2:	83 ec 10             	sub    esp,0x10
c00087f5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00087f9:	ff 70 18             	push   DWORD PTR [eax+0x18]
c00087fc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008800:	50                   	push   eax
c0008801:	e8 3c ff ff ff       	call   c0008742 <VgaText::setCursor(int, int)>
c0008806:	83 c4 1c             	add    esp,0x1c
c0008809:	c3                   	ret    

c000880a <VgaText::setCursorY(int)>:
c000880a:	83 ec 10             	sub    esp,0x10
c000880d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008811:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0008815:	ff 70 14             	push   DWORD PTR [eax+0x14]
c0008818:	50                   	push   eax
c0008819:	e8 24 ff ff ff       	call   c0008742 <VgaText::setCursor(int, int)>
c000881e:	83 c4 1c             	add    esp,0x1c
c0008821:	c3                   	ret    

c0008822 <VgaText::incrementCursor(bool)>:
c0008822:	56                   	push   esi
c0008823:	53                   	push   ebx
c0008824:	51                   	push   ecx
c0008825:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008829:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000882d:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0008830:	40                   	inc    eax
c0008831:	83 f8 50             	cmp    eax,0x50
c0008834:	74 05                	je     c000883b <VgaText::incrementCursor(bool)+0x19>
c0008836:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0008839:	eb 24                	jmp    c000885f <VgaText::incrementCursor(bool)+0x3d>
c000883b:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000883e:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008845:	8d 50 01             	lea    edx,[eax+0x1]
c0008848:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c000884b:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c000884e:	75 0f                	jne    c000885f <VgaText::incrementCursor(bool)+0x3d>
c0008850:	83 ec 0c             	sub    esp,0xc
c0008853:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0008856:	53                   	push   ebx
c0008857:	e8 a4 fd ff ff       	call   c0008600 <VgaText::scrollScreen()>
c000885c:	83 c4 10             	add    esp,0x10
c000885f:	89 f0                	mov    eax,esi
c0008861:	84 c0                	test   al,al
c0008863:	74 0c                	je     c0008871 <VgaText::incrementCursor(bool)+0x4f>
c0008865:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008869:	5a                   	pop    edx
c000886a:	5b                   	pop    ebx
c000886b:	5e                   	pop    esi
c000886c:	e9 99 fc ff ff       	jmp    c000850a <VgaText::updateCursor()>
c0008871:	58                   	pop    eax
c0008872:	5b                   	pop    ebx
c0008873:	5e                   	pop    esi
c0008874:	c3                   	ret    
c0008875:	90                   	nop

c0008876 <VgaText::decrementCursor(bool)>:
c0008876:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000887a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000887e:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0008881:	85 c0                	test   eax,eax
c0008883:	74 04                	je     c0008889 <VgaText::decrementCursor(bool)+0x13>
c0008885:	48                   	dec    eax
c0008886:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0008889:	84 c9                	test   cl,cl
c000888b:	74 09                	je     c0008896 <VgaText::decrementCursor(bool)+0x20>
c000888d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0008891:	e9 74 fc ff ff       	jmp    c000850a <VgaText::updateCursor()>
c0008896:	c3                   	ret    
c0008897:	90                   	nop

c0008898 <VgaText::putchar(char, VgaColour, VgaColour)>:
c0008898:	53                   	push   ebx
c0008899:	83 ec 08             	sub    esp,0x8
c000889c:	0f be 44 24 14       	movsx  eax,BYTE PTR [esp+0x14]
c00088a1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00088a5:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00088a9:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00088ad:	83 f8 07             	cmp    eax,0x7
c00088b0:	75 21                	jne    c00088d3 <VgaText::putchar(char, VgaColour, VgaColour)+0x3b>
c00088b2:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00088ba:	c7 44 24 14 f4 01 00 00 	mov    DWORD PTR [esp+0x14],0x1f4
c00088c2:	c7 44 24 10 b8 01 00 00 	mov    DWORD PTR [esp+0x10],0x1b8
c00088ca:	83 c4 08             	add    esp,0x8
c00088cd:	5b                   	pop    ebx
c00088ce:	e9 24 3b 00 00       	jmp    c000c3f7 <Krnl::beep(int, int, bool)>
c00088d3:	83 f8 0d             	cmp    eax,0xd
c00088d6:	75 09                	jne    c00088e1 <VgaText::putchar(char, VgaColour, VgaColour)+0x49>
c00088d8:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00088df:	eb 2d                	jmp    c000890e <VgaText::putchar(char, VgaColour, VgaColour)+0x76>
c00088e1:	83 f8 0a             	cmp    eax,0xa
c00088e4:	75 31                	jne    c0008917 <VgaText::putchar(char, VgaColour, VgaColour)+0x7f>
c00088e6:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00088e9:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00088f0:	8d 50 01             	lea    edx,[eax+0x1]
c00088f3:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c00088f6:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c00088f9:	75 0f                	jne    c000890a <VgaText::putchar(char, VgaColour, VgaColour)+0x72>
c00088fb:	83 ec 0c             	sub    esp,0xc
c00088fe:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0008901:	53                   	push   ebx
c0008902:	e8 f9 fc ff ff       	call   c0008600 <VgaText::scrollScreen()>
c0008907:	83 c4 10             	add    esp,0x10
c000890a:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000890e:	83 c4 08             	add    esp,0x8
c0008911:	5b                   	pop    ebx
c0008912:	e9 f3 fb ff ff       	jmp    c000850a <VgaText::updateCursor()>
c0008917:	83 f8 08             	cmp    eax,0x8
c000891a:	75 25                	jne    c0008941 <VgaText::putchar(char, VgaColour, VgaColour)+0xa9>
c000891c:	50                   	push   eax
c000891d:	50                   	push   eax
c000891e:	6a 01                	push   0x1
c0008920:	53                   	push   ebx
c0008921:	e8 50 ff ff ff       	call   c0008876 <VgaText::decrementCursor(bool)>
c0008926:	5a                   	pop    edx
c0008927:	59                   	pop    ecx
c0008928:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000892b:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000892e:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008931:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008934:	6a 20                	push   0x20
c0008936:	53                   	push   ebx
c0008937:	e8 66 fd ff ff       	call   c00086a2 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000893c:	83 c4 28             	add    esp,0x28
c000893f:	5b                   	pop    ebx
c0008940:	c3                   	ret    
c0008941:	83 ec 08             	sub    esp,0x8
c0008944:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0008947:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000894a:	51                   	push   ecx
c000894b:	52                   	push   edx
c000894c:	50                   	push   eax
c000894d:	53                   	push   ebx
c000894e:	e8 4f fd ff ff       	call   c00086a2 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0008953:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c0008957:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c000895f:	83 c4 28             	add    esp,0x28
c0008962:	5b                   	pop    ebx
c0008963:	e9 ba fe ff ff       	jmp    c0008822 <VgaText::incrementCursor(bool)>

c0008968 <VgaText::putchar(char)>:
c0008968:	57                   	push   edi
c0008969:	56                   	push   esi
c000896a:	53                   	push   ebx
c000896b:	83 ec 10             	sub    esp,0x10
c000896e:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0008972:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008976:	89 f8                	mov    eax,edi
c0008978:	0f be c0             	movsx  eax,al
c000897b:	83 f8 5b             	cmp    eax,0x5b
c000897e:	75 18                	jne    c0008998 <VgaText::putchar(char)+0x30>
c0008980:	80 7b 40 00          	cmp    BYTE PTR [ebx+0x40],0x0
c0008984:	74 20                	je     c00089a6 <VgaText::putchar(char)+0x3e>
c0008986:	66 c7 43 40 00 01    	mov    WORD PTR [ebx+0x40],0x100
c000898c:	c7 43 54 00 00 00 00 	mov    DWORD PTR [ebx+0x54],0x0
c0008993:	e9 c1 00 00 00       	jmp    c0008a59 <VgaText::putchar(char)+0xf1>
c0008998:	83 f8 1b             	cmp    eax,0x1b
c000899b:	75 09                	jne    c00089a6 <VgaText::putchar(char)+0x3e>
c000899d:	c6 43 40 01          	mov    BYTE PTR [ebx+0x40],0x1
c00089a1:	e9 b3 00 00 00       	jmp    c0008a59 <VgaText::putchar(char)+0xf1>
c00089a6:	8a 4b 41             	mov    cl,BYTE PTR [ebx+0x41]
c00089a9:	84 c9                	test   cl,cl
c00089ab:	0f 84 98 00 00 00    	je     c0008a49 <VgaText::putchar(char)+0xe1>
c00089b1:	8d 77 c0             	lea    esi,[edi-0x40]
c00089b4:	89 f2                	mov    edx,esi
c00089b6:	80 fa 3e             	cmp    dl,0x3e
c00089b9:	77 78                	ja     c0008a33 <VgaText::putchar(char)+0xcb>
c00089bb:	83 f8 6d             	cmp    eax,0x6d
c00089be:	75 47                	jne    c0008a07 <VgaText::putchar(char)+0x9f>
c00089c0:	31 f6                	xor    esi,esi
c00089c2:	31 d2                	xor    edx,edx
c00089c4:	31 c0                	xor    eax,eax
c00089c6:	39 73 54             	cmp    DWORD PTR [ebx+0x54],esi
c00089c9:	7e 2d                	jle    c00089f8 <VgaText::putchar(char)+0x90>
c00089cb:	0f be 54 33 42       	movsx  edx,BYTE PTR [ebx+esi*1+0x42]
c00089d0:	83 fa 3b             	cmp    edx,0x3b
c00089d3:	75 17                	jne    c00089ec <VgaText::putchar(char)+0x84>
c00089d5:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c00089d9:	50                   	push   eax
c00089da:	53                   	push   ebx
c00089db:	e8 40 fb ff ff       	call   c0008520 <VgaText::doANSI_SGR(int)>
c00089e0:	59                   	pop    ecx
c00089e1:	31 d2                	xor    edx,edx
c00089e3:	5f                   	pop    edi
c00089e4:	31 c0                	xor    eax,eax
c00089e6:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c00089ea:	eb 09                	jmp    c00089f5 <VgaText::putchar(char)+0x8d>
c00089ec:	6b c0 0a             	imul   eax,eax,0xa
c00089ef:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c00089f3:	88 ca                	mov    dl,cl
c00089f5:	46                   	inc    esi
c00089f6:	eb ce                	jmp    c00089c6 <VgaText::putchar(char)+0x5e>
c00089f8:	84 d2                	test   dl,dl
c00089fa:	74 2f                	je     c0008a2b <VgaText::putchar(char)+0xc3>
c00089fc:	50                   	push   eax
c00089fd:	53                   	push   ebx
c00089fe:	e8 1d fb ff ff       	call   c0008520 <VgaText::doANSI_SGR(int)>
c0008a03:	58                   	pop    eax
c0008a04:	5a                   	pop    edx
c0008a05:	eb 24                	jmp    c0008a2b <VgaText::putchar(char)+0xc3>
c0008a07:	83 f8 4a             	cmp    eax,0x4a
c0008a0a:	75 1f                	jne    c0008a2b <VgaText::putchar(char)+0xc3>
c0008a0c:	80 7b 42 32          	cmp    BYTE PTR [ebx+0x42],0x32
c0008a10:	75 19                	jne    c0008a2b <VgaText::putchar(char)+0xc3>
c0008a12:	83 ec 0c             	sub    esp,0xc
c0008a15:	53                   	push   ebx
c0008a16:	e8 89 fd ff ff       	call   c00087a4 <VgaText::clearScreen()>
c0008a1b:	83 c4 0c             	add    esp,0xc
c0008a1e:	6a 00                	push   0x0
c0008a20:	6a 00                	push   0x0
c0008a22:	53                   	push   ebx
c0008a23:	e8 1a fd ff ff       	call   c0008742 <VgaText::setCursor(int, int)>
c0008a28:	83 c4 10             	add    esp,0x10
c0008a2b:	66 c7 43 40 00 00    	mov    WORD PTR [ebx+0x40],0x0
c0008a31:	eb 26                	jmp    c0008a59 <VgaText::putchar(char)+0xf1>
c0008a33:	8b 43 54             	mov    eax,DWORD PTR [ebx+0x54]
c0008a36:	83 f8 0e             	cmp    eax,0xe
c0008a39:	7f 1e                	jg     c0008a59 <VgaText::putchar(char)+0xf1>
c0008a3b:	8d 48 01             	lea    ecx,[eax+0x1]
c0008a3e:	89 4b 54             	mov    DWORD PTR [ebx+0x54],ecx
c0008a41:	89 f9                	mov    ecx,edi
c0008a43:	88 4c 03 42          	mov    BYTE PTR [ebx+eax*1+0x42],cl
c0008a47:	eb 10                	jmp    c0008a59 <VgaText::putchar(char)+0xf1>
c0008a49:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008a4c:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008a4f:	50                   	push   eax
c0008a50:	53                   	push   ebx
c0008a51:	e8 42 fe ff ff       	call   c0008898 <VgaText::putchar(char, VgaColour, VgaColour)>
c0008a56:	83 c4 10             	add    esp,0x10
c0008a59:	83 c4 10             	add    esp,0x10
c0008a5c:	5b                   	pop    ebx
c0008a5d:	5e                   	pop    esi
c0008a5e:	5f                   	pop    edi
c0008a5f:	c3                   	ret    

c0008a60 <VgaText::putx(unsigned int)>:
c0008a60:	57                   	push   edi
c0008a61:	b9 11 00 00 00       	mov    ecx,0x11
c0008a66:	56                   	push   esi
c0008a67:	be 2e 0e 02 c0       	mov    esi,0xc0020e2e
c0008a6c:	53                   	push   ebx
c0008a6d:	83 ec 20             	sub    esp,0x20
c0008a70:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0008a74:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c0008a78:	fc                   	cld    
c0008a79:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0008a7b:	be 08 00 00 00       	mov    esi,0x8
c0008a80:	50                   	push   eax
c0008a81:	50                   	push   eax
c0008a82:	89 d8                	mov    eax,ebx
c0008a84:	c1 e3 04             	shl    ebx,0x4
c0008a87:	c1 e8 1c             	shr    eax,0x1c
c0008a8a:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c0008a8f:	50                   	push   eax
c0008a90:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0008a94:	e8 cf fe ff ff       	call   c0008968 <VgaText::putchar(char)>
c0008a99:	83 c4 10             	add    esp,0x10
c0008a9c:	4e                   	dec    esi
c0008a9d:	75 e1                	jne    c0008a80 <VgaText::putx(unsigned int)+0x20>
c0008a9f:	83 c4 20             	add    esp,0x20
c0008aa2:	5b                   	pop    ebx
c0008aa3:	5e                   	pop    esi
c0008aa4:	5f                   	pop    edi
c0008aa5:	c3                   	ret    

c0008aa6 <VgaText::puts(char const*)>:
c0008aa6:	53                   	push   ebx
c0008aa7:	83 ec 08             	sub    esp,0x8
c0008aaa:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0008aae:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0008ab1:	85 c0                	test   eax,eax
c0008ab3:	74 12                	je     c0008ac7 <VgaText::puts(char const*)+0x21>
c0008ab5:	43                   	inc    ebx
c0008ab6:	51                   	push   ecx
c0008ab7:	51                   	push   ecx
c0008ab8:	50                   	push   eax
c0008ab9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008abd:	e8 a6 fe ff ff       	call   c0008968 <VgaText::putchar(char)>
c0008ac2:	83 c4 10             	add    esp,0x10
c0008ac5:	eb e7                	jmp    c0008aae <VgaText::puts(char const*)+0x8>
c0008ac7:	83 c4 08             	add    esp,0x8
c0008aca:	5b                   	pop    ebx
c0008acb:	c3                   	ret    

c0008acc <VgaText::write(unsigned long long, void*, int*)>:
c0008acc:	55                   	push   ebp
c0008acd:	57                   	push   edi
c0008ace:	56                   	push   esi
c0008acf:	53                   	push   ebx
c0008ad0:	83 ec 0c             	sub    esp,0xc
c0008ad3:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0008ad7:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0008adb:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0008adf:	c6 86 81 00 00 00 01 	mov    BYTE PTR [esi+0x81],0x1
c0008ae6:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c0008ae9:	39 eb                	cmp    ebx,ebp
c0008aeb:	74 13                	je     c0008b00 <VgaText::write(unsigned long long, void*, int*)+0x34>
c0008aed:	43                   	inc    ebx
c0008aee:	50                   	push   eax
c0008aef:	50                   	push   eax
c0008af0:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c0008af4:	50                   	push   eax
c0008af5:	56                   	push   esi
c0008af6:	e8 6d fe ff ff       	call   c0008968 <VgaText::putchar(char)>
c0008afb:	83 c4 10             	add    esp,0x10
c0008afe:	eb e9                	jmp    c0008ae9 <VgaText::write(unsigned long long, void*, int*)+0x1d>
c0008b00:	c6 86 81 00 00 00 00 	mov    BYTE PTR [esi+0x81],0x0
c0008b07:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008b0b:	89 38                	mov    DWORD PTR [eax],edi
c0008b0d:	83 c4 0c             	add    esp,0xc
c0008b10:	31 c0                	xor    eax,eax
c0008b12:	5b                   	pop    ebx
c0008b13:	5e                   	pop    esi
c0008b14:	5f                   	pop    edi
c0008b15:	5d                   	pop    ebp
c0008b16:	c3                   	ret    
c0008b17:	90                   	nop

c0008b18 <VgaText::puts(char const*, VgaColour, VgaColour)>:
c0008b18:	55                   	push   ebp
c0008b19:	57                   	push   edi
c0008b1a:	56                   	push   esi
c0008b1b:	53                   	push   ebx
c0008b1c:	83 ec 0c             	sub    esp,0xc
c0008b1f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008b23:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0008b28:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c0008b2f:	50                   	push   eax
c0008b30:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0008b35:	50                   	push   eax
c0008b36:	e8 b3 fa ff ff       	call   c00085ee <VgaText::combineColours(unsigned char, unsigned char)>
c0008b3b:	5a                   	pop    edx
c0008b3c:	6b 73 18 50          	imul   esi,DWORD PTR [ebx+0x18],0x50
c0008b40:	59                   	pop    ecx
c0008b41:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0008b44:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0008b48:	0f b7 f6             	movzx  esi,si
c0008b4b:	0f b6 e8             	movzx  ebp,al
c0008b4e:	01 f6                	add    esi,esi
c0008b50:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0008b53:	0f be 07             	movsx  eax,BYTE PTR [edi]
c0008b56:	85 c0                	test   eax,eax
c0008b58:	0f 84 ef 00 00 00    	je     c0008c4d <VgaText::puts(char const*, VgaColour, VgaColour)+0x135>
c0008b5e:	83 f8 0d             	cmp    eax,0xd
c0008b61:	75 0c                	jne    c0008b6f <VgaText::puts(char const*, VgaColour, VgaColour)+0x57>
c0008b63:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008b6a:	e9 d8 00 00 00       	jmp    c0008c47 <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c0008b6f:	83 f8 0a             	cmp    eax,0xa
c0008b72:	75 44                	jne    c0008bb8 <VgaText::puts(char const*, VgaColour, VgaColour)+0xa0>
c0008b74:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0008b77:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008b7e:	8d 48 01             	lea    ecx,[eax+0x1]
c0008b81:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0008b84:	3b 4b 10             	cmp    ecx,DWORD PTR [ebx+0x10]
c0008b87:	75 0f                	jne    c0008b98 <VgaText::puts(char const*, VgaColour, VgaColour)+0x80>
c0008b89:	83 ec 0c             	sub    esp,0xc
c0008b8c:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0008b8f:	53                   	push   ebx
c0008b90:	e8 6b fa ff ff       	call   c0008600 <VgaText::scrollScreen()>
c0008b95:	83 c4 10             	add    esp,0x10
c0008b98:	83 ec 0c             	sub    esp,0xc
c0008b9b:	53                   	push   ebx
c0008b9c:	e8 69 f9 ff ff       	call   c000850a <VgaText::updateCursor()>
c0008ba1:	6b 73 18 50          	imul   esi,DWORD PTR [ebx+0x18],0x50
c0008ba5:	83 c4 10             	add    esp,0x10
c0008ba8:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0008bab:	0f b7 f6             	movzx  esi,si
c0008bae:	01 f6                	add    esi,esi
c0008bb0:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0008bb3:	e9 8f 00 00 00       	jmp    c0008c47 <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c0008bb8:	83 f8 08             	cmp    eax,0x8
c0008bbb:	75 34                	jne    c0008bf1 <VgaText::puts(char const*, VgaColour, VgaColour)+0xd9>
c0008bbd:	51                   	push   ecx
c0008bbe:	51                   	push   ecx
c0008bbf:	6a 01                	push   0x1
c0008bc1:	53                   	push   ebx
c0008bc2:	e8 af fc ff ff       	call   c0008876 <VgaText::decrementCursor(bool)>
c0008bc7:	5e                   	pop    esi
c0008bc8:	58                   	pop    eax
c0008bc9:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0008bcc:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0008bcf:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008bd2:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008bd5:	6a 20                	push   0x20
c0008bd7:	53                   	push   ebx
c0008bd8:	e8 c5 fa ff ff       	call   c00086a2 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0008bdd:	6b 73 18 50          	imul   esi,DWORD PTR [ebx+0x18],0x50
c0008be1:	83 c4 20             	add    esp,0x20
c0008be4:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0008be7:	0f b7 f6             	movzx  esi,si
c0008bea:	01 f6                	add    esi,esi
c0008bec:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0008bef:	eb 56                	jmp    c0008c47 <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c0008bf1:	52                   	push   edx
c0008bf2:	52                   	push   edx
c0008bf3:	55                   	push   ebp
c0008bf4:	50                   	push   eax
c0008bf5:	e8 98 fa ff ff       	call   c0008692 <VgaText::combineCharAndColour(char, unsigned char)>
c0008bfa:	83 c4 10             	add    esp,0x10
c0008bfd:	66 89 06             	mov    WORD PTR [esi],ax
c0008c00:	39 1d 04 6f 02 c0    	cmp    DWORD PTR ds:0xc0026f04,ebx
c0008c06:	75 1d                	jne    c0008c25 <VgaText::puts(char const*, VgaColour, VgaColour)+0x10d>
c0008c08:	83 ec 0c             	sub    esp,0xc
c0008c0b:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0008c0e:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0008c11:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0008c15:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0008c19:	0f be 07             	movsx  eax,BYTE PTR [edi]
c0008c1c:	50                   	push   eax
c0008c1d:	e8 c2 01 01 00       	call   c0018de4 <HalConsoleWriteCharacter(char, int, int, int, int)>
c0008c22:	83 c4 20             	add    esp,0x20
c0008c25:	83 c6 02             	add    esi,0x2
c0008c28:	50                   	push   eax
c0008c29:	50                   	push   eax
c0008c2a:	6a 00                	push   0x0
c0008c2c:	53                   	push   ebx
c0008c2d:	e8 f0 fb ff ff       	call   c0008822 <VgaText::incrementCursor(bool)>
c0008c32:	83 c4 10             	add    esp,0x10
c0008c35:	83 7b 14 00          	cmp    DWORD PTR [ebx+0x14],0x0
c0008c39:	75 0c                	jne    c0008c47 <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c0008c3b:	6b 73 18 50          	imul   esi,DWORD PTR [ebx+0x18],0x50
c0008c3f:	0f b7 f6             	movzx  esi,si
c0008c42:	01 f6                	add    esi,esi
c0008c44:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0008c47:	47                   	inc    edi
c0008c48:	e9 06 ff ff ff       	jmp    c0008b53 <VgaText::puts(char const*, VgaColour, VgaColour)+0x3b>
c0008c4d:	83 ec 0c             	sub    esp,0xc
c0008c50:	53                   	push   ebx
c0008c51:	e8 b4 f8 ff ff       	call   c000850a <VgaText::updateCursor()>
c0008c56:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c0008c5d:	83 c4 1c             	add    esp,0x1c
c0008c60:	5b                   	pop    ebx
c0008c61:	5e                   	pop    esi
c0008c62:	5f                   	pop    edi
c0008c63:	5d                   	pop    ebp
c0008c64:	c3                   	ret    
c0008c65:	90                   	nop

c0008c66 <VgaText::VgaText(char const*)>:
c0008c66:	56                   	push   esi
c0008c67:	53                   	push   ebx
c0008c68:	83 ec 04             	sub    esp,0x4
c0008c6b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c6f:	83 ec 08             	sub    esp,0x8
c0008c72:	6a 00                	push   0x0
c0008c74:	50                   	push   eax
c0008c75:	e8 44 05 00 00       	call   c00091be <UnixFile::UnixFile(int)>
c0008c7a:	83 c4 10             	add    esp,0x10
c0008c7d:	ba 54 0e 02 c0       	mov    edx,0xc0020e54
c0008c82:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c86:	89 10                	mov    DWORD PTR [eax],edx
c0008c88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c8c:	c7 40 38 01 00 00 00 	mov    DWORD PTR [eax+0x38],0x1
c0008c93:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c97:	c7 40 3c 0f 00 00 00 	mov    DWORD PTR [eax+0x3c],0xf
c0008c9e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008ca2:	c6 40 40 00          	mov    BYTE PTR [eax+0x40],0x0
c0008ca6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008caa:	c6 40 41 00          	mov    BYTE PTR [eax+0x41],0x0
c0008cae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cb2:	c7 40 54 00 00 00 00 	mov    DWORD PTR [eax+0x54],0x0
c0008cb9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cbd:	c7 40 5c 00 00 00 00 	mov    DWORD PTR [eax+0x5c],0x0
c0008cc4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cc8:	c6 80 80 00 00 00 00 	mov    BYTE PTR [eax+0x80],0x0
c0008ccf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cd3:	c6 80 81 00 00 00 00 	mov    BYTE PTR [eax+0x81],0x0
c0008cda:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cde:	c7 40 10 19 00 00 00 	mov    DWORD PTR [eax+0x10],0x19
c0008ce5:	83 ec 0c             	sub    esp,0xc
c0008ce8:	6a 01                	push   0x1
c0008cea:	e8 1e 09 00 00       	call   c000960d <Virt::allocateKernelVirtualPages(int)>
c0008cef:	83 c4 10             	add    esp,0x10
c0008cf2:	89 c2                	mov    edx,eax
c0008cf4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cf8:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0008cfb:	8b 1d b0 6f 02 c0    	mov    ebx,DWORD PTR ds:0xc0026fb0
c0008d01:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d05:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0008d08:	89 c6                	mov    esi,eax
c0008d0a:	e8 b0 f0 ff ff       	call   c0007dbf <Phys::allocatePage()>
c0008d0f:	68 05 0c 00 00       	push   0xc05
c0008d14:	56                   	push   esi
c0008d15:	50                   	push   eax
c0008d16:	53                   	push   ebx
c0008d17:	e8 04 10 00 00       	call   c0009d20 <VAS::mapPage(unsigned long, unsigned long, int)>
c0008d1c:	83 c4 10             	add    esp,0x10
c0008d1f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d23:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0008d26:	83 ec 04             	sub    esp,0x4
c0008d29:	68 a0 0f 00 00       	push   0xfa0
c0008d2e:	6a 00                	push   0x0
c0008d30:	50                   	push   eax
c0008d31:	e8 ba 77 ff ff       	call   c00004f0 <memset>
c0008d36:	83 c4 10             	add    esp,0x10
c0008d39:	83 ec 04             	sub    esp,0x4
c0008d3c:	6a 00                	push   0x0
c0008d3e:	6a 07                	push   0x7
c0008d40:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008d44:	e8 6b f8 ff ff       	call   c00085b4 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0008d49:	83 c4 10             	add    esp,0x10
c0008d4c:	83 ec 04             	sub    esp,0x4
c0008d4f:	6a 00                	push   0x0
c0008d51:	6a 00                	push   0x0
c0008d53:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008d57:	e8 e6 f9 ff ff       	call   c0008742 <VgaText::setCursor(int, int)>
c0008d5c:	83 c4 10             	add    esp,0x10
c0008d5f:	83 ec 0c             	sub    esp,0xc
c0008d62:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008d66:	e8 39 fa ff ff       	call   c00087a4 <VgaText::clearScreen()>
c0008d6b:	83 c4 10             	add    esp,0x10
c0008d6e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d72:	c6 40 58 00          	mov    BYTE PTR [eax+0x58],0x0
c0008d76:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d7a:	05 82 00 00 00       	add    eax,0x82
c0008d7f:	83 ec 04             	sub    esp,0x4
c0008d82:	68 80 00 00 00       	push   0x80
c0008d87:	6a 00                	push   0x0
c0008d89:	50                   	push   eax
c0008d8a:	e8 61 77 ff ff       	call   c00004f0 <memset>
c0008d8f:	83 c4 10             	add    esp,0x10
c0008d92:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d96:	05 02 01 00 00       	add    eax,0x102
c0008d9b:	83 ec 04             	sub    esp,0x4
c0008d9e:	68 80 00 00 00       	push   0x80
c0008da3:	6a 00                	push   0x0
c0008da5:	50                   	push   eax
c0008da6:	e8 45 77 ff ff       	call   c00004f0 <memset>
c0008dab:	83 c4 10             	add    esp,0x10
c0008dae:	90                   	nop
c0008daf:	83 c4 04             	add    esp,0x4
c0008db2:	5b                   	pop    ebx
c0008db3:	5e                   	pop    esi
c0008db4:	c3                   	ret    
c0008db5:	90                   	nop

c0008db6 <VgaText::receiveKey(unsigned char)>:
c0008db6:	55                   	push   ebp
c0008db7:	57                   	push   edi
c0008db8:	56                   	push   esi
c0008db9:	53                   	push   ebx
c0008dba:	83 ec 2c             	sub    esp,0x2c
c0008dbd:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0008dc1:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0008dc5:	89 ef                	mov    edi,ebp
c0008dc7:	81 e7 ff 00 00 00    	and    edi,0xff
c0008dcd:	0f 84 66 01 00 00    	je     c0008f39 <VgaText::receiveKey(unsigned char)+0x183>
c0008dd3:	8d b3 82 00 00 00    	lea    esi,[ebx+0x82]
c0008dd9:	83 ff 08             	cmp    edi,0x8
c0008ddc:	75 73                	jne    c0008e51 <VgaText::receiveKey(unsigned char)+0x9b>
c0008dde:	83 ec 0c             	sub    esp,0xc
c0008de1:	56                   	push   esi
c0008de2:	e8 89 77 ff ff       	call   c0000570 <strlen>
c0008de7:	83 c4 10             	add    esp,0x10
c0008dea:	85 c0                	test   eax,eax
c0008dec:	0f 84 02 01 00 00    	je     c0008ef4 <VgaText::receiveKey(unsigned char)+0x13e>
c0008df2:	50                   	push   eax
c0008df3:	50                   	push   eax
c0008df4:	6a 08                	push   0x8
c0008df6:	53                   	push   ebx
c0008df7:	e8 6c fb ff ff       	call   c0008968 <VgaText::putchar(char)>
c0008dfc:	89 34 24             	mov    DWORD PTR [esp],esi
c0008dff:	e8 6c 77 ff ff       	call   c0000570 <strlen>
c0008e04:	83 c4 10             	add    esp,0x10
c0008e07:	0f be 94 03 81 00 00 00 	movsx  edx,BYTE PTR [ebx+eax*1+0x81]
c0008e0f:	83 fa 0d             	cmp    edx,0xd
c0008e12:	89 d0                	mov    eax,edx
c0008e14:	0f 95 c1             	setne  cl
c0008e17:	83 fa 1f             	cmp    edx,0x1f
c0008e1a:	0f 9e c2             	setle  dl
c0008e1d:	0f b6 d2             	movzx  edx,dl
c0008e20:	85 ca                	test   edx,ecx
c0008e22:	74 17                	je     c0008e3b <VgaText::receiveKey(unsigned char)+0x85>
c0008e24:	83 e8 08             	sub    eax,0x8
c0008e27:	3c 02                	cmp    al,0x2
c0008e29:	76 10                	jbe    c0008e3b <VgaText::receiveKey(unsigned char)+0x85>
c0008e2b:	55                   	push   ebp
c0008e2c:	55                   	push   ebp
c0008e2d:	68 3f 0e 02 c0       	push   0xc0020e3f
c0008e32:	53                   	push   ebx
c0008e33:	e8 6e fc ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c0008e38:	83 c4 10             	add    esp,0x10
c0008e3b:	83 ec 0c             	sub    esp,0xc
c0008e3e:	56                   	push   esi
c0008e3f:	e8 2c 77 ff ff       	call   c0000570 <strlen>
c0008e44:	c6 84 03 81 00 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x81],0x0
c0008e4c:	e9 a0 00 00 00       	jmp    c0008ef1 <VgaText::receiveKey(unsigned char)+0x13b>
c0008e51:	83 ec 0c             	sub    esp,0xc
c0008e54:	8d 83 02 01 00 00    	lea    eax,[ebx+0x102]
c0008e5a:	50                   	push   eax
c0008e5b:	e8 10 77 ff ff       	call   c0000570 <strlen>
c0008e60:	89 34 24             	mov    DWORD PTR [esp],esi
c0008e63:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008e67:	e8 04 77 ff ff       	call   c0000570 <strlen>
c0008e6c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0008e70:	83 c4 10             	add    esp,0x10
c0008e73:	8d 44 02 03          	lea    eax,[edx+eax*1+0x3]
c0008e77:	3d 80 00 00 00       	cmp    eax,0x80
c0008e7c:	0f 87 b7 00 00 00    	ja     c0008f39 <VgaText::receiveKey(unsigned char)+0x183>
c0008e82:	8d 45 ff             	lea    eax,[ebp-0x1]
c0008e85:	8d 55 f7             	lea    edx,[ebp-0x9]
c0008e88:	3c 1e                	cmp    al,0x1e
c0008e8a:	0f 96 c0             	setbe  al
c0008e8d:	80 fa 01             	cmp    dl,0x1
c0008e90:	0f 97 c2             	seta   dl
c0008e93:	0f b6 d2             	movzx  edx,dl
c0008e96:	85 c2                	test   edx,eax
c0008e98:	74 2e                	je     c0008ec8 <VgaText::receiveKey(unsigned char)+0x112>
c0008e9a:	83 ff 0d             	cmp    edi,0xd
c0008e9d:	74 29                	je     c0008ec8 <VgaText::receiveKey(unsigned char)+0x112>
c0008e9f:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008ea2:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008ea5:	68 45 0e 02 c0       	push   0xc0020e45
c0008eaa:	53                   	push   ebx
c0008eab:	e8 68 fc ff ff       	call   c0008b18 <VgaText::puts(char const*, VgaColour, VgaColour)>
c0008eb0:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008eb3:	8d 45 40             	lea    eax,[ebp+0x40]
c0008eb6:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008eb9:	0f b6 c0             	movzx  eax,al
c0008ebc:	50                   	push   eax
c0008ebd:	53                   	push   ebx
c0008ebe:	e8 d5 f9 ff ff       	call   c0008898 <VgaText::putchar(char, VgaColour, VgaColour)>
c0008ec3:	83 c4 20             	add    esp,0x20
c0008ec6:	eb 11                	jmp    c0008ed9 <VgaText::receiveKey(unsigned char)+0x123>
c0008ec8:	89 e8                	mov    eax,ebp
c0008eca:	51                   	push   ecx
c0008ecb:	0f be c0             	movsx  eax,al
c0008ece:	51                   	push   ecx
c0008ecf:	50                   	push   eax
c0008ed0:	53                   	push   ebx
c0008ed1:	e8 92 fa ff ff       	call   c0008968 <VgaText::putchar(char)>
c0008ed6:	83 c4 10             	add    esp,0x10
c0008ed9:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0008ede:	89 e8                	mov    eax,ebp
c0008ee0:	88 44 24 1e          	mov    BYTE PTR [esp+0x1e],al
c0008ee4:	52                   	push   edx
c0008ee5:	52                   	push   edx
c0008ee6:	8d 44 24 26          	lea    eax,[esp+0x26]
c0008eea:	50                   	push   eax
c0008eeb:	56                   	push   esi
c0008eec:	e8 4f 79 ff ff       	call   c0000840 <strcat>
c0008ef1:	83 c4 10             	add    esp,0x10
c0008ef4:	8a 93 80 00 00 00    	mov    dl,BYTE PTR [ebx+0x80]
c0008efa:	b0 01                	mov    al,0x1
c0008efc:	83 ff 1c             	cmp    edi,0x1c
c0008eff:	77 0e                	ja     c0008f0f <VgaText::receiveKey(unsigned char)+0x159>
c0008f01:	b8 08 04 00 10       	mov    eax,0x10000408
c0008f06:	89 f9                	mov    ecx,edi
c0008f08:	d3 e8                	shr    eax,cl
c0008f0a:	f7 d0                	not    eax
c0008f0c:	83 e0 01             	and    eax,0x1
c0008f0f:	84 c0                	test   al,al
c0008f11:	74 04                	je     c0008f17 <VgaText::receiveKey(unsigned char)+0x161>
c0008f13:	84 d2                	test   dl,dl
c0008f15:	74 22                	je     c0008f39 <VgaText::receiveKey(unsigned char)+0x183>
c0008f17:	81 c3 02 01 00 00    	add    ebx,0x102
c0008f1d:	50                   	push   eax
c0008f1e:	50                   	push   eax
c0008f1f:	56                   	push   esi
c0008f20:	53                   	push   ebx
c0008f21:	e8 1a 79 ff ff       	call   c0000840 <strcat>
c0008f26:	83 c4 0c             	add    esp,0xc
c0008f29:	68 80 00 00 00       	push   0x80
c0008f2e:	6a 00                	push   0x0
c0008f30:	56                   	push   esi
c0008f31:	e8 ba 75 ff ff       	call   c00004f0 <memset>
c0008f36:	83 c4 10             	add    esp,0x10
c0008f39:	83 c4 2c             	add    esp,0x2c
c0008f3c:	5b                   	pop    ebx
c0008f3d:	5e                   	pop    esi
c0008f3e:	5f                   	pop    edi
c0008f3f:	5d                   	pop    ebp
c0008f40:	c3                   	ret    
c0008f41:	90                   	nop

c0008f42 <VgaText::doUpdate()>:
c0008f42:	c3                   	ret    
c0008f43:	90                   	nop

c0008f44 <TSS::TSS()>:
c0008f44:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008f48:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0008f4f:	90                   	nop
c0008f50:	c3                   	ret    
c0008f51:	90                   	nop
c0008f52:	66 90                	xchg   ax,ax

c0008f54 <TSS::setESP(unsigned long)>:
c0008f54:	55                   	push   ebp
c0008f55:	89 e5                	mov    ebp,esp
c0008f57:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008f5a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008f5d:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0008f60:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008f63:	90                   	nop
c0008f64:	5d                   	pop    ebp
c0008f65:	c3                   	ret    
c0008f66:	66 90                	xchg   ax,ax

c0008f68 <TSS::flush()>:
c0008f68:	55                   	push   ebp
c0008f69:	89 e5                	mov    ebp,esp
c0008f6b:	83 ec 10             	sub    esp,0x10
c0008f6e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008f71:	8b 00                	mov    eax,DWORD PTR [eax]
c0008f73:	83 c8 03             	or     eax,0x3
c0008f76:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0008f7a:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0008f7e:	66 89 d0             	mov    ax,dx
c0008f81:	0f 00 d8             	ltr    ax
c0008f84:	90                   	nop
c0008f85:	c9                   	leave  
c0008f86:	c3                   	ret    
c0008f87:	90                   	nop

c0008f88 <TSS::setup(unsigned long, unsigned long)>:
c0008f88:	55                   	push   ebp
c0008f89:	89 e5                	mov    ebp,esp
c0008f8b:	83 ec 18             	sub    esp,0x18
c0008f8e:	83 ec 0c             	sub    esp,0xc
c0008f91:	6a 68                	push   0x68
c0008f93:	e8 1e eb ff ff       	call   c0007ab6 <malloc>
c0008f98:	83 c4 10             	add    esp,0x10
c0008f9b:	89 c2                	mov    edx,eax
c0008f9d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fa0:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008fa3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fa6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fa9:	83 ec 04             	sub    esp,0x4
c0008fac:	6a 68                	push   0x68
c0008fae:	6a 00                	push   0x0
c0008fb0:	50                   	push   eax
c0008fb1:	e8 3a 75 ff ff       	call   c00004f0 <memset>
c0008fb6:	83 c4 10             	add    esp,0x10
c0008fb9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fbc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fbf:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c0008fc5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fc8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fcb:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c0008fd1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fd4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fd7:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0008fda:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008fdd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fe0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fe3:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c0008fe9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fec:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fef:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c0008ff5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008ff8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008ffb:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c0009001:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009004:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009007:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c000900d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009010:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009013:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c0009019:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000901c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000901f:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c0009025:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009028:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000902b:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c000902e:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0009031:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009034:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009037:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000903a:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000903d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009040:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009043:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c000904a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000904d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009050:	0f 20 da             	mov    edx,cr3
c0009053:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0009056:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0009059:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c000905c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000905f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009062:	83 ec 08             	sub    esp,0x8
c0009065:	50                   	push   eax
c0009066:	8d 45 ec             	lea    eax,[ebp-0x14]
c0009069:	50                   	push   eax
c000906a:	e8 b3 e2 ff ff       	call   c0007322 <GDTEntry::setBase(unsigned int)>
c000906f:	83 c4 10             	add    esp,0x10
c0009072:	83 ec 08             	sub    esp,0x8
c0009075:	6a 68                	push   0x68
c0009077:	8d 45 ec             	lea    eax,[ebp-0x14]
c000907a:	50                   	push   eax
c000907b:	e8 be e2 ff ff       	call   c000733e <GDTEntry::setLimit(unsigned int)>
c0009080:	83 c4 10             	add    esp,0x10
c0009083:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c0009087:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c000908a:	83 e0 0f             	and    eax,0xf
c000908d:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0009090:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0009093:	83 c8 40             	or     eax,0x40
c0009096:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0009099:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000909e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00090a4:	05 78 01 00 00       	add    eax,0x178
c00090a9:	83 ec 04             	sub    esp,0x4
c00090ac:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c00090af:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c00090b2:	50                   	push   eax
c00090b3:	e8 ba e2 ff ff       	call   c0007372 <GDT::addEntry(GDTEntry)>
c00090b8:	83 c4 10             	add    esp,0x10
c00090bb:	89 c2                	mov    edx,eax
c00090bd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00090c0:	89 10                	mov    DWORD PTR [eax],edx
c00090c2:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c00090c7:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00090cd:	05 78 01 00 00       	add    eax,0x178
c00090d2:	83 ec 0c             	sub    esp,0xc
c00090d5:	50                   	push   eax
c00090d6:	e8 c1 e2 ff ff       	call   c000739c <GDT::flush()>
c00090db:	83 c4 10             	add    esp,0x10
c00090de:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00090e1:	8b 00                	mov    eax,DWORD PTR [eax]
c00090e3:	c9                   	leave  
c00090e4:	c3                   	ret    
c00090e5:	90                   	nop

c00090e6 <ReservedFilename::read(unsigned long long, void*, int*)>:
c00090e6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00090ea:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00090ee:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00090f1:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c00090f6:	75 08                	jne    c0009100 <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c00090f8:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00090fe:	eb 38                	jmp    c0009138 <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c0009100:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0009105:	75 17                	jne    c000911e <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c0009107:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000910c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000910f:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0009115:	8b 10                	mov    edx,DWORD PTR [eax]
c0009117:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000911b:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c000911e:	89 c1                	mov    ecx,eax
c0009120:	83 e1 fd             	and    ecx,0xfffffffd
c0009123:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c0009129:	74 cd                	je     c00090f8 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c000912b:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0009130:	83 e0 ef             	and    eax,0xffffffef
c0009133:	83 f8 08             	cmp    eax,0x8
c0009136:	76 c0                	jbe    c00090f8 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0009138:	31 c0                	xor    eax,eax
c000913a:	c3                   	ret    
c000913b:	90                   	nop

c000913c <ReservedFilename::isAtty()>:
c000913c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009140:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0009143:	31 c0                	xor    eax,eax
c0009145:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c000914b:	74 09                	je     c0009156 <ReservedFilename::isAtty()+0x1a>
c000914d:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c0009153:	0f 94 c0             	sete   al
c0009156:	c3                   	ret    
c0009157:	90                   	nop

c0009158 <ReservedFilename::write(unsigned long long, void*, int*)>:
c0009158:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000915c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009160:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009163:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0009167:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c000916c:	75 08                	jne    c0009176 <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c000916e:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0009174:	eb 3d                	jmp    c00091b3 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0009176:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c000917b:	75 17                	jne    c0009194 <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c000917d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0009182:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0009185:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c000918b:	8b 10                	mov    edx,DWORD PTR [eax]
c000918d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009191:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c0009194:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0009199:	75 04                	jne    c000919f <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c000919b:	89 0a                	mov    DWORD PTR [edx],ecx
c000919d:	eb 14                	jmp    c00091b3 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c000919f:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c00091a4:	74 c8                	je     c000916e <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c00091a6:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c00091ab:	83 e0 ef             	and    eax,0xffffffef
c00091ae:	83 f8 08             	cmp    eax,0x8
c00091b1:	76 bb                	jbe    c000916e <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c00091b3:	31 c0                	xor    eax,eax
c00091b5:	c3                   	ret    

c00091b6 <UnixFile::getFileDescriptor()>:
c00091b6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00091ba:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00091bd:	c3                   	ret    

c00091be <UnixFile::UnixFile(int)>:
c00091be:	53                   	push   ebx
c00091bf:	83 ec 28             	sub    esp,0x28
c00091c2:	ba 1c 0f 02 c0       	mov    edx,0xc0020f1c
c00091c7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00091cb:	89 10                	mov    DWORD PTR [eax],edx
c00091cd:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c00091d5:	0f 8f 90 01 00 00    	jg     c000936b <UnixFile::UnixFile(int)+0x1ad>
c00091db:	a1 20 36 02 c0       	mov    eax,ds:0xc0023620
c00091e0:	8d 50 01             	lea    edx,[eax+0x1]
c00091e3:	89 15 20 36 02 c0    	mov    DWORD PTR ds:0xc0023620,edx
c00091e9:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00091ed:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00091f0:	83 ec 08             	sub    esp,0x8
c00091f3:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c00091f7:	68 98 6f 02 c0       	push   0xc0026f98
c00091fc:	e8 e7 67 01 00       	call   c001f9e8 <LinkedList<UnixFile>::addElement(UnixFile*)>
c0009201:	83 c4 10             	add    esp,0x10
c0009204:	a0 94 6f 02 c0       	mov    al,ds:0xc0026f94
c0009209:	83 f0 01             	xor    eax,0x1
c000920c:	0f b6 c0             	movzx  eax,al
c000920f:	85 c0                	test   eax,eax
c0009211:	0f 84 55 01 00 00    	je     c000936c <UnixFile::UnixFile(int)+0x1ae>
c0009217:	c6 05 94 6f 02 c0 01 	mov    BYTE PTR ds:0xc0026f94,0x1
c000921e:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c0009226:	83 ec 0c             	sub    esp,0xc
c0009229:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000922d:	e8 84 e8 ff ff       	call   c0007ab6 <malloc>
c0009232:	83 c4 10             	add    esp,0x10
c0009235:	89 c3                	mov    ebx,eax
c0009237:	83 ec 08             	sub    esp,0x8
c000923a:	68 03 ff ff 0f       	push   0xfffff03
c000923f:	53                   	push   ebx
c0009240:	e8 2d 01 00 00       	call   c0009372 <ReservedFilename::ReservedFilename(int)>
c0009245:	83 c4 10             	add    esp,0x10
c0009248:	89 1d 8c 6f 02 c0    	mov    DWORD PTR ds:0xc0026f8c,ebx
c000924e:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c0009256:	83 ec 0c             	sub    esp,0xc
c0009259:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000925d:	e8 54 e8 ff ff       	call   c0007ab6 <malloc>
c0009262:	83 c4 10             	add    esp,0x10
c0009265:	89 c3                	mov    ebx,eax
c0009267:	83 ec 08             	sub    esp,0x8
c000926a:	68 01 ff ff 0f       	push   0xfffff01
c000926f:	53                   	push   ebx
c0009270:	e8 fd 00 00 00       	call   c0009372 <ReservedFilename::ReservedFilename(int)>
c0009275:	83 c4 10             	add    esp,0x10
c0009278:	89 1d 90 6f 02 c0    	mov    DWORD PTR ds:0xc0026f90,ebx
c000927e:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c0009286:	83 ec 0c             	sub    esp,0xc
c0009289:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000928d:	e8 24 e8 ff ff       	call   c0007ab6 <malloc>
c0009292:	83 c4 10             	add    esp,0x10
c0009295:	89 c3                	mov    ebx,eax
c0009297:	83 ec 08             	sub    esp,0x8
c000929a:	68 00 ff ff 0f       	push   0xfffff00
c000929f:	53                   	push   ebx
c00092a0:	e8 cd 00 00 00       	call   c0009372 <ReservedFilename::ReservedFilename(int)>
c00092a5:	83 c4 10             	add    esp,0x10
c00092a8:	89 1d 84 6f 02 c0    	mov    DWORD PTR ds:0xc0026f84,ebx
c00092ae:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c00092b6:	83 ec 0c             	sub    esp,0xc
c00092b9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00092bd:	e8 f4 e7 ff ff       	call   c0007ab6 <malloc>
c00092c2:	83 c4 10             	add    esp,0x10
c00092c5:	89 c3                	mov    ebx,eax
c00092c7:	83 ec 08             	sub    esp,0x8
c00092ca:	68 02 ff ff 0f       	push   0xfffff02
c00092cf:	53                   	push   ebx
c00092d0:	e8 9d 00 00 00       	call   c0009372 <ReservedFilename::ReservedFilename(int)>
c00092d5:	83 c4 10             	add    esp,0x10
c00092d8:	89 1d 88 6f 02 c0    	mov    DWORD PTR ds:0xc0026f88,ebx
c00092de:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00092e6:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c00092eb:	7f 7f                	jg     c000936c <UnixFile::UnixFile(int)+0x1ae>
c00092ed:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c00092f5:	83 ec 0c             	sub    esp,0xc
c00092f8:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00092fc:	e8 b5 e7 ff ff       	call   c0007ab6 <malloc>
c0009301:	83 c4 10             	add    esp,0x10
c0009304:	89 c3                	mov    ebx,eax
c0009306:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000930a:	05 10 ff ff 0f       	add    eax,0xfffff10
c000930f:	83 ec 08             	sub    esp,0x8
c0009312:	50                   	push   eax
c0009313:	53                   	push   ebx
c0009314:	e8 59 00 00 00       	call   c0009372 <ReservedFilename::ReservedFilename(int)>
c0009319:	83 c4 10             	add    esp,0x10
c000931c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009320:	89 1c 85 60 6f 02 c0 	mov    DWORD PTR [eax*4-0x3ffd90a0],ebx
c0009327:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c000932f:	83 ec 0c             	sub    esp,0xc
c0009332:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009336:	e8 7b e7 ff ff       	call   c0007ab6 <malloc>
c000933b:	83 c4 10             	add    esp,0x10
c000933e:	89 c3                	mov    ebx,eax
c0009340:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009344:	05 20 ff ff 0f       	add    eax,0xfffff20
c0009349:	83 ec 08             	sub    esp,0x8
c000934c:	50                   	push   eax
c000934d:	53                   	push   ebx
c000934e:	e8 1f 00 00 00       	call   c0009372 <ReservedFilename::ReservedFilename(int)>
c0009353:	83 c4 10             	add    esp,0x10
c0009356:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000935a:	89 1c 85 20 6f 02 c0 	mov    DWORD PTR [eax*4-0x3ffd90e0],ebx
c0009361:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0009366:	e9 7b ff ff ff       	jmp    c00092e6 <UnixFile::UnixFile(int)+0x128>
c000936b:	90                   	nop
c000936c:	83 c4 28             	add    esp,0x28
c000936f:	5b                   	pop    ebx
c0009370:	c3                   	ret    
c0009371:	90                   	nop

c0009372 <ReservedFilename::ReservedFilename(int)>:
c0009372:	83 ec 0c             	sub    esp,0xc
c0009375:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009379:	83 ec 08             	sub    esp,0x8
c000937c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009380:	50                   	push   eax
c0009381:	e8 38 fe ff ff       	call   c00091be <UnixFile::UnixFile(int)>
c0009386:	83 c4 10             	add    esp,0x10
c0009389:	ba 38 0f 02 c0       	mov    edx,0xc0020f38
c000938e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009392:	89 10                	mov    DWORD PTR [eax],edx
c0009394:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009398:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000939c:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000939f:	90                   	nop
c00093a0:	83 c4 0c             	add    esp,0xc
c00093a3:	c3                   	ret    

c00093a4 <UnixFile::~UnixFile()>:
c00093a4:	83 ec 1c             	sub    esp,0x1c
c00093a7:	ba 1c 0f 02 c0       	mov    edx,0xc0020f1c
c00093ac:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00093b0:	89 10                	mov    DWORD PTR [eax],edx
c00093b2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00093b6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00093b9:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c00093be:	7f 76                	jg     c0009436 <UnixFile::~UnixFile()+0x92>
c00093c0:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00093c8:	83 ec 0c             	sub    esp,0xc
c00093cb:	68 98 6f 02 c0       	push   0xc0026f98
c00093d0:	e8 e7 66 01 00       	call   c001fabc <LinkedList<UnixFile>::getFirstElement()>
c00093d5:	83 c4 10             	add    esp,0x10
c00093d8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00093dc:	83 ec 0c             	sub    esp,0xc
c00093df:	68 98 6f 02 c0       	push   0xc0026f98
c00093e4:	e8 db 66 01 00       	call   c001fac4 <LinkedList<UnixFile>::removeFirst()>
c00093e9:	83 c4 10             	add    esp,0x10
c00093ec:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00093f0:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c00093f4:	74 43                	je     c0009439 <UnixFile::~UnixFile()+0x95>
c00093f6:	83 ec 08             	sub    esp,0x8
c00093f9:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00093fd:	68 98 6f 02 c0       	push   0xc0026f98
c0009402:	e8 e1 65 01 00       	call   c001f9e8 <LinkedList<UnixFile>::addElement(UnixFile*)>
c0009407:	83 c4 10             	add    esp,0x10
c000940a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000940e:	8d 50 01             	lea    edx,[eax+0x1]
c0009411:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009415:	3d 20 a1 07 00       	cmp    eax,0x7a120
c000941a:	0f 94 c0             	sete   al
c000941d:	0f b6 c0             	movzx  eax,al
c0009420:	85 c0                	test   eax,eax
c0009422:	74 a4                	je     c00093c8 <UnixFile::~UnixFile()+0x24>
c0009424:	83 ec 0c             	sub    esp,0xc
c0009427:	68 f4 0e 02 c0       	push   0xc0020ef4
c000942c:	e8 fa 81 00 00       	call   c001162b <KePanic(char const*)>
c0009431:	83 c4 10             	add    esp,0x10
c0009434:	eb 92                	jmp    c00093c8 <UnixFile::~UnixFile()+0x24>
c0009436:	90                   	nop
c0009437:	eb 01                	jmp    c000943a <UnixFile::~UnixFile()+0x96>
c0009439:	90                   	nop
c000943a:	90                   	nop
c000943b:	83 c4 1c             	add    esp,0x1c
c000943e:	c3                   	ret    
c000943f:	90                   	nop

c0009440 <UnixFile::~UnixFile()>:
c0009440:	83 ec 0c             	sub    esp,0xc
c0009443:	83 ec 0c             	sub    esp,0xc
c0009446:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000944a:	e8 55 ff ff ff       	call   c00093a4 <UnixFile::~UnixFile()>
c000944f:	83 c4 10             	add    esp,0x10
c0009452:	83 ec 08             	sub    esp,0x8
c0009455:	6a 0c                	push   0xc
c0009457:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000945b:	e8 b8 13 00 00       	call   c000a818 <operator delete(void*, unsigned long)>
c0009460:	83 c4 10             	add    esp,0x10
c0009463:	83 c4 0c             	add    esp,0xc
c0009466:	c3                   	ret    
c0009467:	90                   	nop

c0009468 <ReservedFilename::~ReservedFilename()>:
c0009468:	83 ec 0c             	sub    esp,0xc
c000946b:	ba 38 0f 02 c0       	mov    edx,0xc0020f38
c0009470:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009474:	89 10                	mov    DWORD PTR [eax],edx
c0009476:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000947a:	83 ec 0c             	sub    esp,0xc
c000947d:	50                   	push   eax
c000947e:	e8 21 ff ff ff       	call   c00093a4 <UnixFile::~UnixFile()>
c0009483:	83 c4 10             	add    esp,0x10
c0009486:	90                   	nop
c0009487:	83 c4 0c             	add    esp,0xc
c000948a:	c3                   	ret    
c000948b:	90                   	nop

c000948c <ReservedFilename::~ReservedFilename()>:
c000948c:	83 ec 0c             	sub    esp,0xc
c000948f:	83 ec 0c             	sub    esp,0xc
c0009492:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009496:	e8 cd ff ff ff       	call   c0009468 <ReservedFilename::~ReservedFilename()>
c000949b:	83 c4 10             	add    esp,0x10
c000949e:	83 ec 08             	sub    esp,0x8
c00094a1:	6a 0c                	push   0xc
c00094a3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00094a7:	e8 6c 13 00 00       	call   c000a818 <operator delete(void*, unsigned long)>
c00094ac:	83 c4 10             	add    esp,0x10
c00094af:	83 c4 0c             	add    esp,0xc
c00094b2:	c3                   	ret    

c00094b3 <KeGetFileFromDescriptor(int)>:
c00094b3:	53                   	push   ebx
c00094b4:	83 ec 08             	sub    esp,0x8
c00094b7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00094bb:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c00094c1:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c00094c7:	7f 2c                	jg     c00094f5 <KeGetFileFromDescriptor(int)+0x42>
c00094c9:	83 ec 0c             	sub    esp,0xc
c00094cc:	68 98 6f 02 c0       	push   0xc0026f98
c00094d1:	e8 e6 65 01 00       	call   c001fabc <LinkedList<UnixFile>::getFirstElement()>
c00094d6:	83 c4 10             	add    esp,0x10
c00094d9:	85 c0                	test   eax,eax
c00094db:	75 04                	jne    c00094e1 <KeGetFileFromDescriptor(int)+0x2e>
c00094dd:	31 c0                	xor    eax,eax
c00094df:	eb 6e                	jmp    c000954f <KeGetFileFromDescriptor(int)+0x9c>
c00094e1:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c00094e4:	74 69                	je     c000954f <KeGetFileFromDescriptor(int)+0x9c>
c00094e6:	52                   	push   edx
c00094e7:	52                   	push   edx
c00094e8:	50                   	push   eax
c00094e9:	68 98 6f 02 c0       	push   0xc0026f98
c00094ee:	e8 73 66 01 00       	call   c001fb66 <LinkedList<UnixFile>::getNext(UnixFile*)>
c00094f3:	eb e1                	jmp    c00094d6 <KeGetFileFromDescriptor(int)+0x23>
c00094f5:	a1 8c 6f 02 c0       	mov    eax,ds:0xc0026f8c
c00094fa:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c0009500:	74 4d                	je     c000954f <KeGetFileFromDescriptor(int)+0x9c>
c0009502:	a1 90 6f 02 c0       	mov    eax,ds:0xc0026f90
c0009507:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c000950d:	74 40                	je     c000954f <KeGetFileFromDescriptor(int)+0x9c>
c000950f:	a1 88 6f 02 c0       	mov    eax,ds:0xc0026f88
c0009514:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c000951a:	74 33                	je     c000954f <KeGetFileFromDescriptor(int)+0x9c>
c000951c:	a1 84 6f 02 c0       	mov    eax,ds:0xc0026f84
c0009521:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c0009527:	74 26                	je     c000954f <KeGetFileFromDescriptor(int)+0x9c>
c0009529:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c000952f:	83 f8 08             	cmp    eax,0x8
c0009532:	77 09                	ja     c000953d <KeGetFileFromDescriptor(int)+0x8a>
c0009534:	8b 04 85 60 6f 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd90a0]
c000953b:	eb 12                	jmp    c000954f <KeGetFileFromDescriptor(int)+0x9c>
c000953d:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c0009543:	83 fb 08             	cmp    ebx,0x8
c0009546:	77 95                	ja     c00094dd <KeGetFileFromDescriptor(int)+0x2a>
c0009548:	8b 04 9d 20 6f 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd90e0]
c000954f:	83 c4 08             	add    esp,0x8
c0009552:	5b                   	pop    ebx
c0009553:	c3                   	ret    

c0009554 <__static_initialization_and_destruction_0(int, int)>:
c0009554:	83 ec 0c             	sub    esp,0xc
c0009557:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000955c:	75 34                	jne    c0009592 <__static_initialization_and_destruction_0(int, int)+0x3e>
c000955e:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0009566:	75 2a                	jne    c0009592 <__static_initialization_and_destruction_0(int, int)+0x3e>
c0009568:	83 ec 0c             	sub    esp,0xc
c000956b:	68 98 6f 02 c0       	push   0xc0026f98
c0009570:	e8 31 64 01 00       	call   c001f9a6 <LinkedList<UnixFile>::LinkedList()>
c0009575:	83 c4 10             	add    esp,0x10
c0009578:	83 ec 04             	sub    esp,0x4
c000957b:	68 b0 35 02 c0       	push   0xc00235b0
c0009580:	68 98 6f 02 c0       	push   0xc0026f98
c0009585:	68 a4 f9 01 c0       	push   0xc001f9a4
c000958a:	e8 39 12 00 00       	call   c000a7c8 <__cxa_atexit>
c000958f:	83 c4 10             	add    esp,0x10
c0009592:	90                   	nop
c0009593:	83 c4 0c             	add    esp,0xc
c0009596:	c3                   	ret    

c0009597 <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c0009597:	83 ec 0c             	sub    esp,0xc
c000959a:	83 ec 08             	sub    esp,0x8
c000959d:	68 ff ff 00 00       	push   0xffff
c00095a2:	6a 01                	push   0x1
c00095a4:	e8 ab ff ff ff       	call   c0009554 <__static_initialization_and_destruction_0(int, int)>
c00095a9:	83 c4 10             	add    esp,0x10
c00095ac:	83 c4 0c             	add    esp,0xc
c00095af:	c3                   	ret    

c00095b0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c00095b0:	53                   	push   ebx
c00095b1:	8b 15 28 36 02 c0    	mov    edx,DWORD PTR ds:0xc0023628
c00095b7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00095bb:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00095bf:	8d 98 00 80 f3 ff    	lea    ebx,[eax-0xc8000]
c00095c5:	89 d8                	mov    eax,ebx
c00095c7:	d1 e8                	shr    eax,1
c00095c9:	01 d0                	add    eax,edx
c00095cb:	80 e3 01             	and    bl,0x1
c00095ce:	8a 10                	mov    dl,BYTE PTR [eax]
c00095d0:	75 09                	jne    c00095db <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x2b>
c00095d2:	83 e2 f0             	and    edx,0xfffffff0
c00095d5:	09 ca                	or     edx,ecx
c00095d7:	88 10                	mov    BYTE PTR [eax],dl
c00095d9:	5b                   	pop    ebx
c00095da:	c3                   	ret    
c00095db:	83 e2 0f             	and    edx,0xf
c00095de:	0f b6 c9             	movzx  ecx,cl
c00095e1:	c1 e1 04             	shl    ecx,0x4
c00095e4:	09 ca                	or     edx,ecx
c00095e6:	88 10                	mov    BYTE PTR [eax],dl
c00095e8:	5b                   	pop    ebx
c00095e9:	c3                   	ret    

c00095ea <Virt::getPageState(unsigned long)>:
c00095ea:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00095ee:	8b 0d 28 36 02 c0    	mov    ecx,DWORD PTR ds:0xc0023628
c00095f4:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c00095fa:	89 d0                	mov    eax,edx
c00095fc:	d1 e8                	shr    eax,1
c00095fe:	80 e2 01             	and    dl,0x1
c0009601:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c0009604:	74 03                	je     c0009609 <Virt::getPageState(unsigned long)+0x1f>
c0009606:	c1 e8 04             	shr    eax,0x4
c0009609:	83 e0 0f             	and    eax,0xf
c000960c:	c3                   	ret    

c000960d <Virt::allocateKernelVirtualPages(int)>:
c000960d:	55                   	push   ebp
c000960e:	31 ed                	xor    ebp,ebp
c0009610:	57                   	push   edi
c0009611:	31 ff                	xor    edi,edi
c0009613:	56                   	push   esi
c0009614:	53                   	push   ebx
c0009615:	31 db                	xor    ebx,ebx
c0009617:	83 ec 0c             	sub    esp,0xc
c000961a:	8b 35 24 36 02 c0    	mov    esi,DWORD PTR ds:0xc0023624
c0009620:	56                   	push   esi
c0009621:	e8 c4 ff ff ff       	call   c00095ea <Virt::getPageState(unsigned long)>
c0009626:	5a                   	pop    edx
c0009627:	84 c0                	test   al,al
c0009629:	75 41                	jne    c000966c <Virt::allocateKernelVirtualPages(int)+0x5f>
c000962b:	85 db                	test   ebx,ebx
c000962d:	75 02                	jne    c0009631 <Virt::allocateKernelVirtualPages(int)+0x24>
c000962f:	89 f5                	mov    ebp,esi
c0009631:	83 c3 01             	add    ebx,0x1
c0009634:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c0009638:	74 5f                	je     c0009699 <Virt::allocateKernelVirtualPages(int)+0x8c>
c000963a:	83 c6 01             	add    esi,0x1
c000963d:	81 fe ff ff 0e 00    	cmp    esi,0xeffff
c0009643:	76 34                	jbe    c0009679 <Virt::allocateKernelVirtualPages(int)+0x6c>
c0009645:	c7 05 24 36 02 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc0023624,0xc8000
c000964f:	f7 c7 01 00 00 00    	test   edi,0x1
c0009655:	75 2a                	jne    c0009681 <Virt::allocateKernelVirtualPages(int)+0x74>
c0009657:	be 00 80 0c 00       	mov    esi,0xc8000
c000965c:	bf 01 00 00 00       	mov    edi,0x1
c0009661:	56                   	push   esi
c0009662:	e8 83 ff ff ff       	call   c00095ea <Virt::getPageState(unsigned long)>
c0009667:	5a                   	pop    edx
c0009668:	84 c0                	test   al,al
c000966a:	74 bf                	je     c000962b <Virt::allocateKernelVirtualPages(int)+0x1e>
c000966c:	31 db                	xor    ebx,ebx
c000966e:	83 c6 01             	add    esi,0x1
c0009671:	81 fe ff ff 0e 00    	cmp    esi,0xeffff
c0009677:	77 cc                	ja     c0009645 <Virt::allocateKernelVirtualPages(int)+0x38>
c0009679:	89 35 24 36 02 c0    	mov    DWORD PTR ds:0xc0023624,esi
c000967f:	eb 9f                	jmp    c0009620 <Virt::allocateKernelVirtualPages(int)+0x13>
c0009681:	83 ec 0c             	sub    esp,0xc
c0009684:	68 4c 0f 02 c0       	push   0xc0020f4c
c0009689:	e8 9d 7f 00 00       	call   c001162b <KePanic(char const*)>
c000968e:	8b 35 24 36 02 c0    	mov    esi,DWORD PTR ds:0xc0023624
c0009694:	83 c4 10             	add    esp,0x10
c0009697:	eb 87                	jmp    c0009620 <Virt::allocateKernelVirtualPages(int)+0x13>
c0009699:	89 2d 24 36 02 c0    	mov    DWORD PTR ds:0xc0023624,ebp
c000969f:	83 fb 01             	cmp    ebx,0x1
c00096a2:	74 6f                	je     c0009713 <Virt::allocateKernelVirtualPages(int)+0x106>
c00096a4:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00096a8:	85 c9                	test   ecx,ecx
c00096aa:	74 49                	je     c00096f5 <Virt::allocateKernelVirtualPages(int)+0xe8>
c00096ac:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00096b0:	89 e8                	mov    eax,ebp
c00096b2:	31 db                	xor    ebx,ebx
c00096b4:	8d 79 ff             	lea    edi,[ecx-0x1]
c00096b7:	eb 18                	jmp    c00096d1 <Virt::allocateKernelVirtualPages(int)+0xc4>
c00096b9:	6a 01                	push   0x1
c00096bb:	83 c3 01             	add    ebx,0x1
c00096be:	50                   	push   eax
c00096bf:	e8 ec fe ff ff       	call   c00095b0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00096c4:	58                   	pop    eax
c00096c5:	5a                   	pop    edx
c00096c6:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c00096ca:	74 29                	je     c00096f5 <Virt::allocateKernelVirtualPages(int)+0xe8>
c00096cc:	a1 24 36 02 c0       	mov    eax,ds:0xc0023624
c00096d1:	8d 50 01             	lea    edx,[eax+0x1]
c00096d4:	85 db                	test   ebx,ebx
c00096d6:	89 15 24 36 02 c0    	mov    DWORD PTR ds:0xc0023624,edx
c00096dc:	74 24                	je     c0009702 <Virt::allocateKernelVirtualPages(int)+0xf5>
c00096de:	39 df                	cmp    edi,ebx
c00096e0:	75 d7                	jne    c00096b9 <Virt::allocateKernelVirtualPages(int)+0xac>
c00096e2:	6a 03                	push   0x3
c00096e4:	83 c3 01             	add    ebx,0x1
c00096e7:	50                   	push   eax
c00096e8:	e8 c3 fe ff ff       	call   c00095b0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00096ed:	59                   	pop    ecx
c00096ee:	5e                   	pop    esi
c00096ef:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c00096f3:	75 d7                	jne    c00096cc <Virt::allocateKernelVirtualPages(int)+0xbf>
c00096f5:	83 c4 0c             	add    esp,0xc
c00096f8:	89 e8                	mov    eax,ebp
c00096fa:	5b                   	pop    ebx
c00096fb:	c1 e0 0c             	shl    eax,0xc
c00096fe:	5e                   	pop    esi
c00096ff:	5f                   	pop    edi
c0009700:	5d                   	pop    ebp
c0009701:	c3                   	ret    
c0009702:	6a 02                	push   0x2
c0009704:	bb 01 00 00 00       	mov    ebx,0x1
c0009709:	50                   	push   eax
c000970a:	e8 a1 fe ff ff       	call   c00095b0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000970f:	58                   	pop    eax
c0009710:	5a                   	pop    edx
c0009711:	eb b9                	jmp    c00096cc <Virt::allocateKernelVirtualPages(int)+0xbf>
c0009713:	6a 04                	push   0x4
c0009715:	8d 45 01             	lea    eax,[ebp+0x1]
c0009718:	55                   	push   ebp
c0009719:	a3 24 36 02 c0       	mov    ds:0xc0023624,eax
c000971e:	e8 8d fe ff ff       	call   c00095b0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009723:	5b                   	pop    ebx
c0009724:	89 e8                	mov    eax,ebp
c0009726:	5e                   	pop    esi
c0009727:	c1 e0 0c             	shl    eax,0xc
c000972a:	83 c4 0c             	add    esp,0xc
c000972d:	5b                   	pop    ebx
c000972e:	5e                   	pop    esi
c000972f:	5f                   	pop    edi
c0009730:	5d                   	pop    ebp
c0009731:	c3                   	ret    

c0009732 <Virt::freeSwapfilePage(unsigned long)>:
c0009732:	53                   	push   ebx
c0009733:	8b 15 ac 6f 02 c0    	mov    edx,DWORD PTR ds:0xc0026fac
c0009739:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000973d:	b8 01 00 00 00       	mov    eax,0x1
c0009742:	89 cb                	mov    ebx,ecx
c0009744:	d3 e0                	shl    eax,cl
c0009746:	c1 eb 05             	shr    ebx,0x5
c0009749:	f7 d0                	not    eax
c000974b:	8b 0c 9a             	mov    ecx,DWORD PTR [edx+ebx*4]
c000974e:	21 c1                	and    ecx,eax
c0009750:	89 0c 9a             	mov    DWORD PTR [edx+ebx*4],ecx
c0009753:	5b                   	pop    ebx
c0009754:	c3                   	ret    

c0009755 <Virt::swapIDToSector(unsigned long)>:
c0009755:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009759:	8b 15 2c 36 02 c0    	mov    edx,DWORD PTR ds:0xc002362c
c000975f:	8b 0d 34 36 02 c0    	mov    ecx,DWORD PTR ds:0xc0023634
c0009765:	0f af c2             	imul   eax,edx
c0009768:	01 c8                	add    eax,ecx
c000976a:	c3                   	ret    

c000976b <Virt::allocateSwapfilePage()>:
c000976b:	55                   	push   ebp
c000976c:	31 d2                	xor    edx,edx
c000976e:	57                   	push   edi
c000976f:	56                   	push   esi
c0009770:	53                   	push   ebx
c0009771:	83 ec 0c             	sub    esp,0xc
c0009774:	8b 0d 2c 36 02 c0    	mov    ecx,DWORD PTR ds:0xc002362c
c000977a:	a1 30 36 02 c0       	mov    eax,ds:0xc0023630
c000977f:	f7 f1                	div    ecx
c0009781:	39 0d 30 36 02 c0    	cmp    DWORD PTR ds:0xc0023630,ecx
c0009787:	72 2f                	jb     c00097b8 <Virt::allocateSwapfilePage()+0x4d>
c0009789:	8b 35 ac 6f 02 c0    	mov    esi,DWORD PTR ds:0xc0026fac
c000978f:	8b 16                	mov    edx,DWORD PTR [esi]
c0009791:	f6 c2 01             	test   dl,0x1
c0009794:	74 3e                	je     c00097d4 <Virt::allocateSwapfilePage()+0x69>
c0009796:	31 c9                	xor    ecx,ecx
c0009798:	bf 01 00 00 00       	mov    edi,0x1
c000979d:	eb 12                	jmp    c00097b1 <Virt::allocateSwapfilePage()+0x46>
c000979f:	89 fd                	mov    ebp,edi
c00097a1:	89 ca                	mov    edx,ecx
c00097a3:	d3 e5                	shl    ebp,cl
c00097a5:	c1 ea 05             	shr    edx,0x5
c00097a8:	8d 1c 96             	lea    ebx,[esi+edx*4]
c00097ab:	8b 13                	mov    edx,DWORD PTR [ebx]
c00097ad:	85 ea                	test   edx,ebp
c00097af:	74 2c                	je     c00097dd <Virt::allocateSwapfilePage()+0x72>
c00097b1:	83 c1 01             	add    ecx,0x1
c00097b4:	39 c8                	cmp    eax,ecx
c00097b6:	77 e7                	ja     c000979f <Virt::allocateSwapfilePage()+0x34>
c00097b8:	83 ec 0c             	sub    esp,0xc
c00097bb:	68 e0 11 02 c0       	push   0xc00211e0
c00097c0:	e8 66 7e 00 00       	call   c001162b <KePanic(char const*)>
c00097c5:	83 c4 10             	add    esp,0x10
c00097c8:	31 c9                	xor    ecx,ecx
c00097ca:	83 c4 0c             	add    esp,0xc
c00097cd:	89 c8                	mov    eax,ecx
c00097cf:	5b                   	pop    ebx
c00097d0:	5e                   	pop    esi
c00097d1:	5f                   	pop    edi
c00097d2:	5d                   	pop    ebp
c00097d3:	c3                   	ret    
c00097d4:	89 f3                	mov    ebx,esi
c00097d6:	bd 01 00 00 00       	mov    ebp,0x1
c00097db:	31 c9                	xor    ecx,ecx
c00097dd:	09 ea                	or     edx,ebp
c00097df:	89 c8                	mov    eax,ecx
c00097e1:	89 13                	mov    DWORD PTR [ebx],edx
c00097e3:	83 c4 0c             	add    esp,0xc
c00097e6:	5b                   	pop    ebx
c00097e7:	5e                   	pop    esi
c00097e8:	5f                   	pop    edi
c00097e9:	5d                   	pop    ebp
c00097ea:	c3                   	ret    

c00097eb <Virt::virtualMemorySetup()>:
c00097eb:	53                   	push   ebx
c00097ec:	bb 00 80 0c 00       	mov    ebx,0xc8000
c00097f1:	6a 0f                	push   0xf
c00097f3:	53                   	push   ebx
c00097f4:	83 c3 01             	add    ebx,0x1
c00097f7:	e8 b4 fd ff ff       	call   c00095b0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00097fc:	58                   	pop    eax
c00097fd:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c0009803:	5a                   	pop    edx
c0009804:	75 eb                	jne    c00097f1 <Virt::virtualMemorySetup()+0x6>
c0009806:	bb 00 80 0c 00       	mov    ebx,0xc8000
c000980b:	6a 00                	push   0x0
c000980d:	53                   	push   ebx
c000980e:	83 c3 01             	add    ebx,0x1
c0009811:	e8 9a fd ff ff       	call   c00095b0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009816:	59                   	pop    ecx
c0009817:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c000981d:	58                   	pop    eax
c000981e:	75 eb                	jne    c000980b <Virt::virtualMemorySetup()+0x20>
c0009820:	bb 00 00 0d 00       	mov    ebx,0xd0000
c0009825:	6a 0f                	push   0xf
c0009827:	53                   	push   ebx
c0009828:	83 c3 01             	add    ebx,0x1
c000982b:	e8 80 fd ff ff       	call   c00095b0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009830:	58                   	pop    eax
c0009831:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c0009837:	5a                   	pop    edx
c0009838:	75 eb                	jne    c0009825 <Virt::virtualMemorySetup()+0x3a>
c000983a:	5b                   	pop    ebx
c000983b:	c3                   	ret    

c000983c <Virt::setupPageSwapping(int)>:
c000983c:	53                   	push   ebx
c000983d:	83 ec 0c             	sub    esp,0xc
c0009840:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0009844:	a1 88 b8 02 c0       	mov    eax,ds:0xc002b888
c0009849:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000984f:	8b 10                	mov    edx,DWORD PTR [eax]
c0009851:	53                   	push   ebx
c0009852:	c1 e3 0b             	shl    ebx,0xb
c0009855:	68 f7 11 02 c0       	push   0xc00211f7
c000985a:	50                   	push   eax
c000985b:	ff 52 60             	call   DWORD PTR [edx+0x60]
c000985e:	89 1d 30 36 02 c0    	mov    DWORD PTR ds:0xc0023630,ebx
c0009864:	c6 05 38 36 02 c0 43 	mov    BYTE PTR ds:0xc0023638,0x43
c000986b:	c1 eb 08             	shr    ebx,0x8
c000986e:	a3 34 36 02 c0       	mov    ds:0xc0023634,eax
c0009873:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0009876:	c7 05 2c 36 02 c0 08 00 00 00 	mov    DWORD PTR ds:0xc002362c,0x8
c0009880:	e8 31 e2 ff ff       	call   c0007ab6 <malloc>
c0009885:	83 c4 0c             	add    esp,0xc
c0009888:	89 c1                	mov    ecx,eax
c000988a:	a3 ac 6f 02 c0       	mov    ds:0xc0026fac,eax
c000988f:	31 d2                	xor    edx,edx
c0009891:	a1 30 36 02 c0       	mov    eax,ds:0xc0023630
c0009896:	f7 35 2c 36 02 c0    	div    DWORD PTR ds:0xc002362c
c000989c:	c1 e8 05             	shr    eax,0x5
c000989f:	50                   	push   eax
c00098a0:	6a 00                	push   0x0
c00098a2:	51                   	push   ecx
c00098a3:	e8 48 6c ff ff       	call   c00004f0 <memset>
c00098a8:	83 c4 18             	add    esp,0x18
c00098ab:	5b                   	pop    ebx
c00098ac:	c3                   	ret    
c00098ad:	90                   	nop

c00098ae <VAS::setCPUSpecific(unsigned long)>:
c00098ae:	c3                   	ret    
c00098af:	90                   	nop

c00098b0 <VAS::VAS(VAS*)>:
c00098b0:	83 ec 0c             	sub    esp,0xc
c00098b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00098b7:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00098be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00098c2:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00098c9:	83 ec 0c             	sub    esp,0xc
c00098cc:	68 6c 0f 02 c0       	push   0xc0020f6c
c00098d1:	e8 55 7d 00 00       	call   c001162b <KePanic(char const*)>
c00098d6:	83 c4 10             	add    esp,0x10
c00098d9:	90                   	nop
c00098da:	83 c4 0c             	add    esp,0xc
c00098dd:	c3                   	ret    

c00098de <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c00098de:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00098e2:	0f b6 4c 24 08       	movzx  ecx,BYTE PTR [esp+0x8]
c00098e7:	89 c2                	mov    edx,eax
c00098e9:	c1 e8 0a             	shr    eax,0xa
c00098ec:	c1 ea 16             	shr    edx,0x16
c00098ef:	83 f9 01             	cmp    ecx,0x1
c00098f2:	19 c9                	sbb    ecx,ecx
c00098f4:	c1 e2 0c             	shl    edx,0xc
c00098f7:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c00098fd:	25 fc 0f 00 00       	and    eax,0xffc
c0009902:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c0009909:	01 d0                	add    eax,edx
c000990b:	c3                   	ret    

c000990c <VAS::getPageTableEntry(unsigned long)>:
c000990c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009910:	89 ca                	mov    edx,ecx
c0009912:	c1 e9 0a             	shr    ecx,0xa
c0009915:	c1 ea 16             	shr    edx,0x16
c0009918:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c000991e:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c0009924:	c1 e0 0c             	shl    eax,0xc
c0009927:	8d 04 08             	lea    eax,[eax+ecx*1]
c000992a:	c3                   	ret    

c000992b <Virt::freeKernelVirtualPages(unsigned long)>:
c000992b:	55                   	push   ebp
c000992c:	57                   	push   edi
c000992d:	bf 01 00 00 00       	mov    edi,0x1
c0009932:	56                   	push   esi
c0009933:	53                   	push   ebx
c0009934:	83 ec 1c             	sub    esp,0x1c
c0009937:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000993b:	c1 ee 0c             	shr    esi,0xc
c000993e:	eb 48                	jmp    c0009988 <Virt::freeKernelVirtualPages(unsigned long)+0x5d>
c0009940:	83 ec 08             	sub    esp,0x8
c0009943:	a1 b0 6f 02 c0       	mov    eax,ds:0xc0026fb0
c0009948:	55                   	push   ebp
c0009949:	50                   	push   eax
c000994a:	e8 bd ff ff ff       	call   c000990c <VAS::getPageTableEntry(unsigned long)>
c000994f:	83 c4 10             	add    esp,0x10
c0009952:	8b 10                	mov    edx,DWORD PTR [eax]
c0009954:	f6 c6 04             	test   dh,0x4
c0009957:	75 70                	jne    c00099c9 <Virt::freeKernelVirtualPages(unsigned long)+0x9e>
c0009959:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000995f:	83 fb 04             	cmp    ebx,0x4
c0009962:	0f 84 8a 00 00 00    	je     c00099f2 <Virt::freeKernelVirtualPages(unsigned long)+0xc7>
c0009968:	83 fb 02             	cmp    ebx,0x2
c000996b:	0f 84 9a 00 00 00    	je     c0009a0b <Virt::freeKernelVirtualPages(unsigned long)+0xe0>
c0009971:	83 fb 03             	cmp    ebx,0x3
c0009974:	0f 84 be 00 00 00    	je     c0009a38 <Virt::freeKernelVirtualPages(unsigned long)+0x10d>
c000997a:	83 fb 01             	cmp    ebx,0x1
c000997d:	0f 84 a2 00 00 00    	je     c0009a25 <Virt::freeKernelVirtualPages(unsigned long)+0xfa>
c0009983:	83 c6 01             	add    esi,0x1
c0009986:	31 ff                	xor    edi,edi
c0009988:	56                   	push   esi
c0009989:	89 f5                	mov    ebp,esi
c000998b:	e8 5a fc ff ff       	call   c00095ea <Virt::getPageState(unsigned long)>
c0009990:	c1 e5 0c             	shl    ebp,0xc
c0009993:	0f b6 d8             	movzx  ebx,al
c0009996:	5a                   	pop    edx
c0009997:	85 db                	test   ebx,ebx
c0009999:	75 a5                	jne    c0009940 <Virt::freeKernelVirtualPages(unsigned long)+0x15>
c000999b:	83 ec 0c             	sub    esp,0xc
c000999e:	68 0e 12 02 c0       	push   0xc002120e
c00099a3:	e8 83 7c 00 00       	call   c001162b <KePanic(char const*)>
c00099a8:	5a                   	pop    edx
c00099a9:	59                   	pop    ecx
c00099aa:	55                   	push   ebp
c00099ab:	8b 2d b0 6f 02 c0    	mov    ebp,DWORD PTR ds:0xc0026fb0
c00099b1:	55                   	push   ebp
c00099b2:	e8 55 ff ff ff       	call   c000990c <VAS::getPageTableEntry(unsigned long)>
c00099b7:	83 c4 10             	add    esp,0x10
c00099ba:	8b 10                	mov    edx,DWORD PTR [eax]
c00099bc:	f6 c6 04             	test   dh,0x4
c00099bf:	75 08                	jne    c00099c9 <Virt::freeKernelVirtualPages(unsigned long)+0x9e>
c00099c1:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00099c7:	eb ba                	jmp    c0009983 <Virt::freeKernelVirtualPages(unsigned long)+0x58>
c00099c9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00099cd:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c00099d3:	83 ec 0c             	sub    esp,0xc
c00099d6:	52                   	push   edx
c00099d7:	e8 7a e3 ff ff       	call   c0007d56 <Phys::freePage(unsigned long)>
c00099dc:	83 c4 10             	add    esp,0x10
c00099df:	83 fb 04             	cmp    ebx,0x4
c00099e2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00099e6:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00099ec:	0f 85 76 ff ff ff    	jne    c0009968 <Virt::freeKernelVirtualPages(unsigned long)+0x3d>
c00099f2:	83 e7 01             	and    edi,0x1
c00099f5:	75 46                	jne    c0009a3d <Virt::freeKernelVirtualPages(unsigned long)+0x112>
c00099f7:	c7 44 24 30 90 0f 02 c0 	mov    DWORD PTR [esp+0x30],0xc0020f90
c00099ff:	83 c4 1c             	add    esp,0x1c
c0009a02:	5b                   	pop    ebx
c0009a03:	5e                   	pop    esi
c0009a04:	5f                   	pop    edi
c0009a05:	5d                   	pop    ebp
c0009a06:	e9 20 7c 00 00       	jmp    c001162b <KePanic(char const*)>
c0009a0b:	83 e7 01             	and    edi,0x1
c0009a0e:	75 15                	jne    c0009a25 <Virt::freeKernelVirtualPages(unsigned long)+0xfa>
c0009a10:	83 ec 0c             	sub    esp,0xc
c0009a13:	68 2a 12 02 c0       	push   0xc002122a
c0009a18:	e8 0e 7c 00 00       	call   c001162b <KePanic(char const*)>
c0009a1d:	83 c4 10             	add    esp,0x10
c0009a20:	e9 5e ff ff ff       	jmp    c0009983 <Virt::freeKernelVirtualPages(unsigned long)+0x58>
c0009a25:	83 ec 08             	sub    esp,0x8
c0009a28:	6a 00                	push   0x0
c0009a2a:	56                   	push   esi
c0009a2b:	e8 80 fb ff ff       	call   c00095b0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009a30:	83 c4 10             	add    esp,0x10
c0009a33:	e9 4b ff ff ff       	jmp    c0009983 <Virt::freeKernelVirtualPages(unsigned long)+0x58>
c0009a38:	83 e7 01             	and    edi,0x1
c0009a3b:	75 16                	jne    c0009a53 <Virt::freeKernelVirtualPages(unsigned long)+0x128>
c0009a3d:	83 ec 08             	sub    esp,0x8
c0009a40:	6a 00                	push   0x0
c0009a42:	56                   	push   esi
c0009a43:	e8 68 fb ff ff       	call   c00095b0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009a48:	83 c4 10             	add    esp,0x10
c0009a4b:	83 c4 1c             	add    esp,0x1c
c0009a4e:	5b                   	pop    ebx
c0009a4f:	5e                   	pop    esi
c0009a50:	5f                   	pop    edi
c0009a51:	5d                   	pop    ebp
c0009a52:	c3                   	ret    
c0009a53:	c7 44 24 30 46 12 02 c0 	mov    DWORD PTR [esp+0x30],0xc0021246
c0009a5b:	83 c4 1c             	add    esp,0x1c
c0009a5e:	5b                   	pop    ebx
c0009a5f:	5e                   	pop    esi
c0009a60:	5f                   	pop    edi
c0009a61:	5d                   	pop    ebp
c0009a62:	e9 c4 7b 00 00       	jmp    c001162b <KePanic(char const*)>
c0009a67:	90                   	nop

c0009a68 <VAS::freeAllocatedPages(unsigned long)>:
c0009a68:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009a6c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009a70:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c0009a74:	74 09                	je     c0009a7f <VAS::freeAllocatedPages(unsigned long)+0x17>
c0009a76:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009a7a:	e9 ac fe ff ff       	jmp    c000992b <Virt::freeKernelVirtualPages(unsigned long)>
c0009a7f:	c7 44 24 04 b4 0f 02 c0 	mov    DWORD PTR [esp+0x4],0xc0020fb4
c0009a87:	e9 b9 0e 00 00       	jmp    c000a945 <Dbg::kprintf(char const*, ...)>

c0009a8c <VAS::virtualToPhysical(unsigned long)>:
c0009a8c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009a90:	50                   	push   eax
c0009a91:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009a95:	52                   	push   edx
c0009a96:	e8 71 fe ff ff       	call   c000990c <VAS::getPageTableEntry(unsigned long)>
c0009a9b:	59                   	pop    ecx
c0009a9c:	8b 00                	mov    eax,DWORD PTR [eax]
c0009a9e:	5a                   	pop    edx
c0009a9f:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009aa4:	c3                   	ret    
c0009aa5:	90                   	nop

c0009aa6 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>:
c0009aa6:	55                   	push   ebp
c0009aa7:	57                   	push   edi
c0009aa8:	56                   	push   esi
c0009aa9:	53                   	push   ebx
c0009aaa:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0009aae:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0009ab2:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0009ab6:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0009aba:	85 db                	test   ebx,ebx
c0009abc:	7e 24                	jle    c0009ae2 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)+0x3c>
c0009abe:	c1 e3 0c             	shl    ebx,0xc
c0009ac1:	01 f3                	add    ebx,esi
c0009ac3:	56                   	push   esi
c0009ac4:	81 c6 00 10 00 00    	add    esi,0x1000
c0009aca:	55                   	push   ebp
c0009acb:	e8 3c fe ff ff       	call   c000990c <VAS::getPageTableEntry(unsigned long)>
c0009ad0:	5a                   	pop    edx
c0009ad1:	59                   	pop    ecx
c0009ad2:	8b 08                	mov    ecx,DWORD PTR [eax]
c0009ad4:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0009ad8:	21 f9                	and    ecx,edi
c0009ada:	09 d1                	or     ecx,edx
c0009adc:	39 f3                	cmp    ebx,esi
c0009ade:	89 08                	mov    DWORD PTR [eax],ecx
c0009ae0:	75 e1                	jne    c0009ac3 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)+0x1d>
c0009ae2:	5b                   	pop    ebx
c0009ae3:	5e                   	pop    esi
c0009ae4:	5f                   	pop    edi
c0009ae5:	5d                   	pop    ebp
c0009ae6:	c3                   	ret    
c0009ae7:	90                   	nop

c0009ae8 <VAS::VAS()>:
c0009ae8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009aec:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0009af3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009af7:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0009afe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009b02:	a3 b0 6f 02 c0       	mov    ds:0xc0026fb0,eax
c0009b07:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009b0b:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c0009b0f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009b13:	c6 00 01             	mov    BYTE PTR [eax],0x1
c0009b16:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009b1a:	c7 40 0c 00 10 00 c2 	mov    DWORD PTR [eax+0xc],0xc2001000
c0009b21:	ba 7d 50 02 c0       	mov    edx,0xc002507d
c0009b26:	b8 00 50 02 c0       	mov    eax,0xc0025000
c0009b2b:	29 c2                	sub    edx,eax
c0009b2d:	89 d0                	mov    eax,edx
c0009b2f:	05 ff 0f 00 00       	add    eax,0xfff
c0009b34:	c1 e8 0c             	shr    eax,0xc
c0009b37:	89 c2                	mov    edx,eax
c0009b39:	b8 00 50 02 c0       	mov    eax,0xc0025000
c0009b3e:	6a 04                	push   0x4
c0009b40:	6a ff                	push   0xffffffff
c0009b42:	52                   	push   edx
c0009b43:	50                   	push   eax
c0009b44:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009b48:	e8 59 ff ff ff       	call   c0009aa6 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c0009b4d:	83 c4 14             	add    esp,0x14
c0009b50:	90                   	nop
c0009b51:	c3                   	ret    

c0009b52 <VAS::setToWriteCombining(unsigned long, int)>:
c0009b52:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0009b57:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009b5d:	f6 80 8c 11 00 00 20 	test   BYTE PTR [eax+0x118c],0x20
c0009b64:	75 01                	jne    c0009b67 <VAS::setToWriteCombining(unsigned long, int)+0x15>
c0009b66:	c3                   	ret    
c0009b67:	68 80 00 00 00       	push   0x80
c0009b6c:	6a ff                	push   0xffffffff
c0009b6e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0009b72:	50                   	push   eax
c0009b73:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0009b77:	52                   	push   edx
c0009b78:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0009b7c:	51                   	push   ecx
c0009b7d:	e8 24 ff ff ff       	call   c0009aa6 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c0009b82:	83 c4 14             	add    esp,0x14
c0009b85:	c3                   	ret    

c0009b86 <VAS::mapOtherVASIn(bool, VAS*)>:
c0009b86:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009b8a:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0009b8d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009b91:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0009b94:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0009b99:	83 f8 01             	cmp    eax,0x1
c0009b9c:	19 c0                	sbb    eax,eax
c0009b9e:	83 ca 03             	or     edx,0x3
c0009ba1:	83 e0 fc             	and    eax,0xfffffffc
c0009ba4:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c0009bab:	0f 20 d8             	mov    eax,cr3
c0009bae:	0f 22 d8             	mov    cr3,eax
c0009bb1:	c3                   	ret    

c0009bb2 <VAS::~VAS()>:
c0009bb2:	83 ec 2c             	sub    esp,0x2c
c0009bb5:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0009bbd:	fa                   	cli    
c0009bbe:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0009bc3:	83 c0 01             	add    eax,0x1
c0009bc6:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0009bcb:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0009bd0:	8b 00                	mov    eax,DWORD PTR [eax]
c0009bd2:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0009bd5:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0009bdb:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0009bdf:	6a 01                	push   0x1
c0009be1:	50                   	push   eax
c0009be2:	e8 9f ff ff ff       	call   c0009b86 <VAS::mapOtherVASIn(bool, VAS*)>
c0009be7:	83 c4 0c             	add    esp,0xc
c0009bea:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0009bf2:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c0009bfa:	0f 8f d8 00 00 00    	jg     c0009cd8 <VAS::~VAS()+0x126>
c0009c00:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009c04:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009c07:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0009c0b:	c1 e2 02             	shl    edx,0x2
c0009c0e:	01 d0                	add    eax,edx
c0009c10:	8b 00                	mov    eax,DWORD PTR [eax]
c0009c12:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009c16:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009c1a:	83 e0 01             	and    eax,0x1
c0009c1d:	0f 84 ab 00 00 00    	je     c0009cce <VAS::~VAS()+0x11c>
c0009c23:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0009c2b:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c0009c33:	7f 74                	jg     c0009ca9 <VAS::~VAS()+0xf7>
c0009c35:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009c39:	c1 e0 0a             	shl    eax,0xa
c0009c3c:	89 c2                	mov    edx,eax
c0009c3e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0009c42:	01 d0                	add    eax,edx
c0009c44:	c1 e0 0c             	shl    eax,0xc
c0009c47:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009c4b:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0009c50:	8b 00                	mov    eax,DWORD PTR [eax]
c0009c52:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0009c55:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0009c5b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009c5f:	6a 01                	push   0x1
c0009c61:	50                   	push   eax
c0009c62:	e8 77 fc ff ff       	call   c00098de <VAS::getForeignPageTableEntry(bool, unsigned long)>
c0009c67:	83 c4 0c             	add    esp,0xc
c0009c6a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009c6e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009c72:	8b 00                	mov    eax,DWORD PTR [eax]
c0009c74:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009c78:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009c7c:	25 01 04 00 00       	and    eax,0x401
c0009c81:	3d 01 04 00 00       	cmp    eax,0x401
c0009c86:	75 1a                	jne    c0009ca2 <VAS::~VAS()+0xf0>
c0009c88:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009c8c:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009c91:	83 ec 0c             	sub    esp,0xc
c0009c94:	50                   	push   eax
c0009c95:	e8 bc e0 ff ff       	call   c0007d56 <Phys::freePage(unsigned long)>
c0009c9a:	83 c4 10             	add    esp,0x10
c0009c9d:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0009ca2:	83 44 24 14 01       	add    DWORD PTR [esp+0x14],0x1
c0009ca7:	eb 82                	jmp    c0009c2b <VAS::~VAS()+0x79>
c0009ca9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009cad:	25 00 04 00 00       	and    eax,0x400
c0009cb2:	74 1a                	je     c0009cce <VAS::~VAS()+0x11c>
c0009cb4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009cb8:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009cbd:	83 ec 0c             	sub    esp,0xc
c0009cc0:	50                   	push   eax
c0009cc1:	e8 90 e0 ff ff       	call   c0007d56 <Phys::freePage(unsigned long)>
c0009cc6:	83 c4 10             	add    esp,0x10
c0009cc9:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0009cce:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c0009cd3:	e9 1a ff ff ff       	jmp    c0009bf2 <VAS::~VAS()+0x40>
c0009cd8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009cdc:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009cdf:	83 ec 0c             	sub    esp,0xc
c0009ce2:	50                   	push   eax
c0009ce3:	e8 43 fc ff ff       	call   c000992b <Virt::freeKernelVirtualPages(unsigned long)>
c0009ce8:	83 c4 10             	add    esp,0x10
c0009ceb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009cef:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0009cf2:	83 ec 0c             	sub    esp,0xc
c0009cf5:	50                   	push   eax
c0009cf6:	e8 5b e0 ff ff       	call   c0007d56 <Phys::freePage(unsigned long)>
c0009cfb:	83 c4 10             	add    esp,0x10
c0009cfe:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0009d03:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0009d08:	83 e8 01             	sub    eax,0x1
c0009d0b:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0009d10:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0009d15:	85 c0                	test   eax,eax
c0009d17:	75 01                	jne    c0009d1a <VAS::~VAS()+0x168>
c0009d19:	fb                   	sti    
c0009d1a:	90                   	nop
c0009d1b:	83 c4 2c             	add    esp,0x2c
c0009d1e:	c3                   	ret    
c0009d1f:	90                   	nop

c0009d20 <VAS::mapPage(unsigned long, unsigned long, int)>:
c0009d20:	55                   	push   ebp
c0009d21:	57                   	push   edi
c0009d22:	56                   	push   esi
c0009d23:	53                   	push   ebx
c0009d24:	83 ec 1c             	sub    esp,0x1c
c0009d27:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0009d2b:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0009d2f:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c0009d35:	77 08                	ja     c0009d3f <VAS::mapPage(unsigned long, unsigned long, int)+0x1f>
c0009d37:	0f 20 d8             	mov    eax,cr3
c0009d3a:	39 47 10             	cmp    DWORD PTR [edi+0x10],eax
c0009d3d:	75 49                	jne    c0009d88 <VAS::mapPage(unsigned long, unsigned long, int)+0x68>
c0009d3f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009d43:	09 d8                	or     eax,ebx
c0009d45:	a9 ff 0f 00 00       	test   eax,0xfff
c0009d4a:	75 59                	jne    c0009da5 <VAS::mapPage(unsigned long, unsigned long, int)+0x85>
c0009d4c:	89 de                	mov    esi,ebx
c0009d4e:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0009d51:	c1 ee 16             	shr    esi,0x16
c0009d54:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c0009d5b:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c0009d5f:	74 56                	je     c0009db7 <VAS::mapPage(unsigned long, unsigned long, int)+0x97>
c0009d61:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0009d65:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0009d69:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c0009d6f:	c1 eb 0a             	shr    ebx,0xa
c0009d72:	c1 e6 0c             	shl    esi,0xc
c0009d75:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c0009d7b:	09 d0                	or     eax,edx
c0009d7d:	89 04 33             	mov    DWORD PTR [ebx+esi*1],eax
c0009d80:	83 c4 1c             	add    esp,0x1c
c0009d83:	5b                   	pop    ebx
c0009d84:	5e                   	pop    esi
c0009d85:	5f                   	pop    edi
c0009d86:	5d                   	pop    ebp
c0009d87:	c3                   	ret    
c0009d88:	83 ec 0c             	sub    esp,0xc
c0009d8b:	68 d8 0f 02 c0       	push   0xc0020fd8
c0009d90:	e8 b0 0b 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0009d95:	83 c4 10             	add    esp,0x10
c0009d98:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009d9c:	09 d8                	or     eax,ebx
c0009d9e:	a9 ff 0f 00 00       	test   eax,0xfff
c0009da3:	74 a7                	je     c0009d4c <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c0009da5:	83 ec 0c             	sub    esp,0xc
c0009da8:	68 40 10 02 c0       	push   0xc0021040
c0009dad:	e8 79 78 00 00       	call   c001162b <KePanic(char const*)>
c0009db2:	83 c4 10             	add    esp,0x10
c0009db5:	eb 95                	jmp    c0009d4c <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c0009db7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009dbb:	e8 ff df ff ff       	call   c0007dbf <Phys::allocatePage()>
c0009dc0:	83 ec 0c             	sub    esp,0xc
c0009dc3:	89 c5                	mov    ebp,eax
c0009dc5:	8b 0d b0 6f 02 c0    	mov    ecx,DWORD PTR ds:0xc0026fb0
c0009dcb:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0009dcf:	6a 01                	push   0x1
c0009dd1:	e8 37 f8 ff ff       	call   c000960d <Virt::allocateKernelVirtualPages(int)>
c0009dd6:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0009ddd:	6a 01                	push   0x1
c0009ddf:	50                   	push   eax
c0009de0:	55                   	push   ebp
c0009de1:	81 cd 07 04 00 00    	or     ebp,0x407
c0009de7:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0009deb:	51                   	push   ecx
c0009dec:	e8 29 01 00 00       	call   c0009f1a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0009df1:	83 c4 1c             	add    esp,0x1c
c0009df4:	68 00 10 00 00       	push   0x1000
c0009df9:	6a 00                	push   0x0
c0009dfb:	50                   	push   eax
c0009dfc:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009e00:	e8 eb 66 ff ff       	call   c00004f0 <memset>
c0009e05:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0009e09:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009e0c:	e8 1a fb ff ff       	call   c000992b <Virt::freeKernelVirtualPages(unsigned long)>
c0009e11:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0009e15:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0009e18:	83 c4 10             	add    esp,0x10
c0009e1b:	89 2c 10             	mov    DWORD PTR [eax+edx*1],ebp
c0009e1e:	e9 3e ff ff ff       	jmp    c0009d61 <VAS::mapPage(unsigned long, unsigned long, int)+0x41>
c0009e23:	90                   	nop

c0009e24 <VAS::allocatePages(int, int)>:
c0009e24:	55                   	push   ebp
c0009e25:	57                   	push   edi
c0009e26:	56                   	push   esi
c0009e27:	53                   	push   ebx
c0009e28:	83 ec 1c             	sub    esp,0x1c
c0009e2b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0009e2f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0009e33:	80 7e 01 00          	cmp    BYTE PTR [esi+0x1],0x0
c0009e37:	75 71                	jne    c0009eaa <VAS::allocatePages(int, int)+0x86>
c0009e39:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0009e3c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009e40:	85 c0                	test   eax,eax
c0009e42:	74 4d                	je     c0009e91 <VAS::allocatePages(int, int)+0x6d>
c0009e44:	89 dd                	mov    ebp,ebx
c0009e46:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009e4a:	c1 e5 0c             	shl    ebp,0xc
c0009e4d:	01 c5                	add    ebp,eax
c0009e4f:	85 db                	test   ebx,ebx
c0009e51:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c0009e54:	7e 29                	jle    c0009e7f <VAS::allocatePages(int, int)+0x5b>
c0009e56:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0009e5a:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0009e5e:	81 cf 00 04 00 00    	or     edi,0x400
c0009e64:	e8 56 df ff ff       	call   c0007dbf <Phys::allocatePage()>
c0009e69:	57                   	push   edi
c0009e6a:	53                   	push   ebx
c0009e6b:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009e71:	50                   	push   eax
c0009e72:	56                   	push   esi
c0009e73:	e8 a8 fe ff ff       	call   c0009d20 <VAS::mapPage(unsigned long, unsigned long, int)>
c0009e78:	83 c4 10             	add    esp,0x10
c0009e7b:	39 dd                	cmp    ebp,ebx
c0009e7d:	75 e5                	jne    c0009e64 <VAS::allocatePages(int, int)+0x40>
c0009e7f:	0f 20 d8             	mov    eax,cr3
c0009e82:	0f 22 d8             	mov    cr3,eax
c0009e85:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009e89:	83 c4 1c             	add    esp,0x1c
c0009e8c:	5b                   	pop    ebx
c0009e8d:	5e                   	pop    esi
c0009e8e:	5f                   	pop    edi
c0009e8f:	5d                   	pop    ebp
c0009e90:	c3                   	ret    
c0009e91:	83 ec 0c             	sub    esp,0xc
c0009e94:	68 64 10 02 c0       	push   0xc0021064
c0009e99:	e8 8d 77 00 00       	call   c001162b <KePanic(char const*)>
c0009e9e:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0009ea1:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009ea5:	83 c4 10             	add    esp,0x10
c0009ea8:	eb 9a                	jmp    c0009e44 <VAS::allocatePages(int, int)+0x20>
c0009eaa:	83 ec 0c             	sub    esp,0xc
c0009ead:	53                   	push   ebx
c0009eae:	e8 5a f7 ff ff       	call   c000960d <Virt::allocateKernelVirtualPages(int)>
c0009eb3:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009eb7:	83 c4 10             	add    esp,0x10
c0009eba:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c0009ebf:	77 37                	ja     c0009ef8 <VAS::allocatePages(int, int)+0xd4>
c0009ec1:	85 db                	test   ebx,ebx
c0009ec3:	7e ba                	jle    c0009e7f <VAS::allocatePages(int, int)+0x5b>
c0009ec5:	c1 e3 0c             	shl    ebx,0xc
c0009ec8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009ecc:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0009ed0:	8d 2c 03             	lea    ebp,[ebx+eax*1]
c0009ed3:	81 cf 00 04 00 00    	or     edi,0x400
c0009ed9:	89 c3                	mov    ebx,eax
c0009edb:	e8 df de ff ff       	call   c0007dbf <Phys::allocatePage()>
c0009ee0:	57                   	push   edi
c0009ee1:	53                   	push   ebx
c0009ee2:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009ee8:	50                   	push   eax
c0009ee9:	56                   	push   esi
c0009eea:	e8 31 fe ff ff       	call   c0009d20 <VAS::mapPage(unsigned long, unsigned long, int)>
c0009eef:	83 c4 10             	add    esp,0x10
c0009ef2:	39 dd                	cmp    ebp,ebx
c0009ef4:	75 e5                	jne    c0009edb <VAS::allocatePages(int, int)+0xb7>
c0009ef6:	eb 87                	jmp    c0009e7f <VAS::allocatePages(int, int)+0x5b>
c0009ef8:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0009efd:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009f03:	f6 80 8c 11 00 00 10 	test   BYTE PTR [eax+0x118c],0x10
c0009f0a:	74 b5                	je     c0009ec1 <VAS::allocatePages(int, int)+0x9d>
c0009f0c:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0009f10:	80 ce 01             	or     dh,0x1
c0009f13:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0009f17:	eb a8                	jmp    c0009ec1 <VAS::allocatePages(int, int)+0x9d>
c0009f19:	90                   	nop

c0009f1a <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c0009f1a:	55                   	push   ebp
c0009f1b:	57                   	push   edi
c0009f1c:	56                   	push   esi
c0009f1d:	53                   	push   ebx
c0009f1e:	83 ec 0c             	sub    esp,0xc
c0009f21:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0009f25:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0009f29:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0009f2d:	85 db                	test   ebx,ebx
c0009f2f:	7e 2f                	jle    c0009f60 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x46>
c0009f31:	c1 e3 0c             	shl    ebx,0xc
c0009f34:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0009f38:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0009f3c:	01 d3                	add    ebx,edx
c0009f3e:	55                   	push   ebp
c0009f3f:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0009f43:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0009f47:	29 c2                	sub    edx,eax
c0009f49:	01 f2                	add    edx,esi
c0009f4b:	52                   	push   edx
c0009f4c:	56                   	push   esi
c0009f4d:	81 c6 00 10 00 00    	add    esi,0x1000
c0009f53:	57                   	push   edi
c0009f54:	e8 c7 fd ff ff       	call   c0009d20 <VAS::mapPage(unsigned long, unsigned long, int)>
c0009f59:	83 c4 10             	add    esp,0x10
c0009f5c:	39 de                	cmp    esi,ebx
c0009f5e:	75 de                	jne    c0009f3e <VAS::mapRange(unsigned long, unsigned long, int, int)+0x24>
c0009f60:	0f 20 d8             	mov    eax,cr3
c0009f63:	0f 22 d8             	mov    cr3,eax
c0009f66:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0009f6a:	83 c4 0c             	add    esp,0xc
c0009f6d:	5b                   	pop    ebx
c0009f6e:	5e                   	pop    esi
c0009f6f:	5f                   	pop    edi
c0009f70:	5d                   	pop    ebp
c0009f71:	c3                   	ret    

c0009f72 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c0009f72:	55                   	push   ebp
c0009f73:	57                   	push   edi
c0009f74:	56                   	push   esi
c0009f75:	53                   	push   ebx
c0009f76:	83 ec 1c             	sub    esp,0x1c
c0009f79:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0009f7d:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0009f81:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0009f85:	09 f8                	or     eax,edi
c0009f87:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0009f8b:	a9 ff 0f 00 00       	test   eax,0xfff
c0009f90:	75 4f                	jne    c0009fe1 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x6f>
c0009f92:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0009f96:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0009f99:	c1 eb 16             	shr    ebx,0x16
c0009f9c:	8d 3c 9d 00 00 00 00 	lea    edi,[ebx*4+0x0]
c0009fa3:	f6 04 38 01          	test   BYTE PTR [eax+edi*1],0x1
c0009fa7:	74 52                	je     c0009ffb <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x89>
c0009fa9:	0f b6 f2             	movzx  esi,dl
c0009fac:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0009fb0:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c0009fb4:	c1 e8 0a             	shr    eax,0xa
c0009fb7:	83 fe 01             	cmp    esi,0x1
c0009fba:	19 d2                	sbb    edx,edx
c0009fbc:	c1 e3 0c             	shl    ebx,0xc
c0009fbf:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
c0009fc5:	25 fc 0f 00 00       	and    eax,0xffc
c0009fca:	01 d8                	add    eax,ebx
c0009fcc:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0009fd0:	09 d9                	or     ecx,ebx
c0009fd2:	89 8c 02 00 00 c0 c2 	mov    DWORD PTR [edx+eax*1-0x3d400000],ecx
c0009fd9:	83 c4 1c             	add    esp,0x1c
c0009fdc:	5b                   	pop    ebx
c0009fdd:	5e                   	pop    esi
c0009fde:	5f                   	pop    edi
c0009fdf:	5d                   	pop    ebp
c0009fe0:	c3                   	ret    
c0009fe1:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009fe5:	83 ec 0c             	sub    esp,0xc
c0009fe8:	68 90 10 02 c0       	push   0xc0021090
c0009fed:	e8 39 76 00 00       	call   c001162b <KePanic(char const*)>
c0009ff2:	83 c4 10             	add    esp,0x10
c0009ff5:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009ff9:	eb 97                	jmp    c0009f92 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x20>
c0009ffb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009fff:	e8 bb dd ff ff       	call   c0007dbf <Phys::allocatePage()>
c000a004:	83 ec 0c             	sub    esp,0xc
c000a007:	89 c5                	mov    ebp,eax
c000a009:	8b 0d b0 6f 02 c0    	mov    ecx,DWORD PTR ds:0xc0026fb0
c000a00f:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000a013:	6a 01                	push   0x1
c000a015:	e8 f3 f5 ff ff       	call   c000960d <Virt::allocateKernelVirtualPages(int)>
c000a01a:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c000a021:	6a 01                	push   0x1
c000a023:	50                   	push   eax
c000a024:	55                   	push   ebp
c000a025:	81 cd 07 04 00 00    	or     ebp,0x407
c000a02b:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c000a02f:	51                   	push   ecx
c000a030:	e8 e5 fe ff ff       	call   c0009f1a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a035:	83 c4 1c             	add    esp,0x1c
c000a038:	68 00 10 00 00       	push   0x1000
c000a03d:	6a 00                	push   0x0
c000a03f:	50                   	push   eax
c000a040:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a044:	e8 a7 64 ff ff       	call   c00004f0 <memset>
c000a049:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000a04d:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a050:	e8 d6 f8 ff ff       	call   c000992b <Virt::freeKernelVirtualPages(unsigned long)>
c000a055:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000a058:	83 c4 10             	add    esp,0x10
c000a05b:	89 2c 38             	mov    DWORD PTR [eax+edi*1],ebp
c000a05e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000a062:	e9 42 ff ff ff       	jmp    c0009fa9 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x37>
c000a067:	90                   	nop

c000a068 <VAS::VAS(bool)>:
c000a068:	53                   	push   ebx
c000a069:	83 ec 28             	sub    esp,0x28
c000a06c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000a070:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c000a074:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a078:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000a07f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a083:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c000a08a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a08e:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c000a092:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c000a095:	e8 25 dd ff ff       	call   c0007dbf <Phys::allocatePage()>
c000a09a:	89 c2                	mov    edx,eax
c000a09c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a0a0:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000a0a3:	8b 1d b0 6f 02 c0    	mov    ebx,DWORD PTR ds:0xc0026fb0
c000a0a9:	83 ec 0c             	sub    esp,0xc
c000a0ac:	6a 01                	push   0x1
c000a0ae:	e8 5a f5 ff ff       	call   c000960d <Virt::allocateKernelVirtualPages(int)>
c000a0b3:	83 c4 10             	add    esp,0x10
c000a0b6:	89 c2                	mov    edx,eax
c000a0b8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a0bc:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000a0bf:	83 ec 0c             	sub    esp,0xc
c000a0c2:	6a 03                	push   0x3
c000a0c4:	6a 01                	push   0x1
c000a0c6:	52                   	push   edx
c000a0c7:	50                   	push   eax
c000a0c8:	53                   	push   ebx
c000a0c9:	e8 4c fe ff ff       	call   c0009f1a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a0ce:	83 c4 20             	add    esp,0x20
c000a0d1:	89 c2                	mov    edx,eax
c000a0d3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a0d7:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000a0da:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000a0e2:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c000a0ea:	7f 1d                	jg     c000a109 <VAS::VAS(bool)+0xa1>
c000a0ec:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a0f0:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a0f3:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000a0f7:	c1 e2 02             	shl    edx,0x2
c000a0fa:	01 d0                	add    eax,edx
c000a0fc:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c000a102:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c000a107:	eb d9                	jmp    c000a0e2 <VAS::VAS(bool)+0x7a>
c000a109:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c000a111:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c000a119:	7f 7e                	jg     c000a199 <VAS::VAS(bool)+0x131>
c000a11b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a11f:	2d 00 02 00 00       	sub    eax,0x200
c000a124:	c1 e0 0c             	shl    eax,0xc
c000a127:	83 c8 05             	or     eax,0x5
c000a12a:	89 c2                	mov    edx,eax
c000a12c:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000a131:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a137:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c000a13d:	83 e0 10             	and    eax,0x10
c000a140:	0f b6 c0             	movzx  eax,al
c000a143:	85 c0                	test   eax,eax
c000a145:	74 07                	je     c000a14e <VAS::VAS(bool)+0xe6>
c000a147:	b8 00 01 00 00       	mov    eax,0x100
c000a14c:	eb 05                	jmp    c000a153 <VAS::VAS(bool)+0xeb>
c000a14e:	b8 00 00 00 00       	mov    eax,0x0
c000a153:	09 d0                	or     eax,edx
c000a155:	89 c1                	mov    ecx,eax
c000a157:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a15b:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a15e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000a162:	c1 e2 02             	shl    edx,0x2
c000a165:	01 d0                	add    eax,edx
c000a167:	89 ca                	mov    edx,ecx
c000a169:	89 10                	mov    DWORD PTR [eax],edx
c000a16b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a16f:	2d 40 03 00 00       	sub    eax,0x340
c000a174:	83 f8 7f             	cmp    eax,0x7f
c000a177:	77 16                	ja     c000a18f <VAS::VAS(bool)+0x127>
c000a179:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a17d:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a180:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000a184:	c1 e2 02             	shl    edx,0x2
c000a187:	01 d0                	add    eax,edx
c000a189:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c000a18f:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c000a194:	e9 78 ff ff ff       	jmp    c000a111 <VAS::VAS(bool)+0xa9>
c000a199:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000a19e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a1a4:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c000a1aa:	83 e0 10             	and    eax,0x10
c000a1ad:	0f b6 c0             	movzx  eax,al
c000a1b0:	85 c0                	test   eax,eax
c000a1b2:	74 07                	je     c000a1bb <VAS::VAS(bool)+0x153>
c000a1b4:	b8 03 41 00 00       	mov    eax,0x4103
c000a1b9:	eb 05                	jmp    c000a1c0 <VAS::VAS(bool)+0x158>
c000a1bb:	b8 03 40 00 00       	mov    eax,0x4003
c000a1c0:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000a1c4:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c000a1c7:	81 c2 20 0c 00 00    	add    edx,0xc20
c000a1cd:	89 02                	mov    DWORD PTR [edx],eax
c000a1cf:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a1d3:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000a1d6:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000a1db:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a1e1:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c000a1e7:	83 e0 10             	and    eax,0x10
c000a1ea:	0f b6 c0             	movzx  eax,al
c000a1ed:	85 c0                	test   eax,eax
c000a1ef:	74 07                	je     c000a1f8 <VAS::VAS(bool)+0x190>
c000a1f1:	b8 00 01 00 00       	mov    eax,0x100
c000a1f6:	eb 05                	jmp    c000a1fd <VAS::VAS(bool)+0x195>
c000a1f8:	b8 00 00 00 00       	mov    eax,0x0
c000a1fd:	09 c2                	or     edx,eax
c000a1ff:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a203:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a206:	05 fc 0f 00 00       	add    eax,0xffc
c000a20b:	83 ca 03             	or     edx,0x3
c000a20e:	89 10                	mov    DWORD PTR [eax],edx
c000a210:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000a215:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a21b:	83 ec 0c             	sub    esp,0xc
c000a21e:	50                   	push   eax
c000a21f:	e8 42 2a 00 00       	call   c000cc66 <Device::getName()>
c000a224:	83 c4 10             	add    esp,0x10
c000a227:	83 ec 08             	sub    esp,0x8
c000a22a:	68 60 12 02 c0       	push   0xc0021260
c000a22f:	50                   	push   eax
c000a230:	e8 1b 65 ff ff       	call   c0000750 <strcmp>
c000a235:	83 c4 10             	add    esp,0x10
c000a238:	85 c0                	test   eax,eax
c000a23a:	0f 94 c0             	sete   al
c000a23d:	0f b6 c0             	movzx  eax,al
c000a240:	85 c0                	test   eax,eax
c000a242:	74 68                	je     c000a2ac <VAS::VAS(bool)+0x244>
c000a244:	fa                   	cli    
c000a245:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000a24a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a250:	05 7c 09 00 00       	add    eax,0x97c
c000a255:	83 ec 0c             	sub    esp,0xc
c000a258:	50                   	push   eax
c000a259:	e8 50 d3 ff ff       	call   c00075ae <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000a25e:	83 c4 10             	add    esp,0x10
c000a261:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a266:	89 c3                	mov    ebx,eax
c000a268:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000a26d:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a273:	05 7c 09 00 00       	add    eax,0x97c
c000a278:	83 ec 0c             	sub    esp,0xc
c000a27b:	50                   	push   eax
c000a27c:	e8 2d d3 ff ff       	call   c00075ae <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000a281:	83 c4 10             	add    esp,0x10
c000a284:	83 ec 08             	sub    esp,0x8
c000a287:	50                   	push   eax
c000a288:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a28c:	e8 7b f6 ff ff       	call   c000990c <VAS::getPageTableEntry(unsigned long)>
c000a291:	83 c4 10             	add    esp,0x10
c000a294:	8b 00                	mov    eax,DWORD PTR [eax]
c000a296:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a29b:	6a 11                	push   0x11
c000a29d:	53                   	push   ebx
c000a29e:	50                   	push   eax
c000a29f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a2a3:	e8 78 fa ff ff       	call   c0009d20 <VAS::mapPage(unsigned long, unsigned long, int)>
c000a2a8:	83 c4 10             	add    esp,0x10
c000a2ab:	fb                   	sti    
c000a2ac:	90                   	nop
c000a2ad:	83 c4 28             	add    esp,0x28
c000a2b0:	5b                   	pop    ebx
c000a2b1:	c3                   	ret    

c000a2b2 <VAS::evict(unsigned long)>:
c000a2b2:	55                   	push   ebp
c000a2b3:	57                   	push   edi
c000a2b4:	56                   	push   esi
c000a2b5:	53                   	push   ebx
c000a2b6:	83 ec 1c             	sub    esp,0x1c
c000a2b9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a2bd:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000a2c1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a2c5:	e8 a1 f4 ff ff       	call   c000976b <Virt::allocateSwapfilePage()>
c000a2ca:	89 c7                	mov    edi,eax
c000a2cc:	a1 2c 36 02 c0       	mov    eax,ds:0xc002362c
c000a2d1:	85 c0                	test   eax,eax
c000a2d3:	7e 40                	jle    c000a315 <VAS::evict(unsigned long)+0x63>
c000a2d5:	89 ee                	mov    esi,ebp
c000a2d7:	31 db                	xor    ebx,ebx
c000a2d9:	83 ec 0c             	sub    esp,0xc
c000a2dc:	57                   	push   edi
c000a2dd:	e8 73 f4 ff ff       	call   c0009755 <Virt::swapIDToSector(unsigned long)>
c000a2e2:	89 34 24             	mov    DWORD PTR [esp],esi
c000a2e5:	01 d8                	add    eax,ebx
c000a2e7:	6a 01                	push   0x1
c000a2e9:	31 d2                	xor    edx,edx
c000a2eb:	83 c3 01             	add    ebx,0x1
c000a2ee:	52                   	push   edx
c000a2ef:	81 c6 00 02 00 00    	add    esi,0x200
c000a2f5:	50                   	push   eax
c000a2f6:	0f be 05 38 36 02 c0 	movsx  eax,BYTE PTR ds:0xc0023638
c000a2fd:	8b 04 85 7c b7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4884]
c000a304:	50                   	push   eax
c000a305:	e8 16 3b 00 00       	call   c000de20 <LogicalDisk::write(unsigned long long, int, void*)>
c000a30a:	83 c4 20             	add    esp,0x20
c000a30d:	39 1d 2c 36 02 c0    	cmp    DWORD PTR ds:0xc002362c,ebx
c000a313:	7f c4                	jg     c000a2d9 <VAS::evict(unsigned long)+0x27>
c000a315:	83 ec 08             	sub    esp,0x8
c000a318:	c1 e7 0c             	shl    edi,0xc
c000a31b:	55                   	push   ebp
c000a31c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a320:	50                   	push   eax
c000a321:	e8 e6 f5 ff ff       	call   c000990c <VAS::getPageTableEntry(unsigned long)>
c000a326:	8b 10                	mov    edx,DWORD PTR [eax]
c000a328:	89 d3                	mov    ebx,edx
c000a32a:	81 e2 fe 07 00 00    	and    edx,0x7fe
c000a330:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000a336:	09 d7                	or     edi,edx
c000a338:	89 38                	mov    DWORD PTR [eax],edi
c000a33a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000a33d:	8b 15 a8 6f 02 c0    	mov    edx,DWORD PTR ds:0xc0026fa8
c000a343:	83 c2 01             	add    edx,0x1
c000a346:	89 15 a8 6f 02 c0    	mov    DWORD PTR ds:0xc0026fa8,edx
c000a34c:	e8 05 da ff ff       	call   c0007d56 <Phys::freePage(unsigned long)>
c000a351:	0f 20 d8             	mov    eax,cr3
c000a354:	0f 22 d8             	mov    cr3,eax
c000a357:	8b 0d a8 6f 02 c0    	mov    ecx,DWORD PTR ds:0xc0026fa8
c000a35d:	51                   	push   ecx
c000a35e:	55                   	push   ebp
c000a35f:	53                   	push   ebx
c000a360:	68 b4 10 02 c0       	push   0xc00210b4
c000a365:	e8 db 05 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000a36a:	a1 a4 6f 02 c0       	mov    eax,ds:0xc0026fa4
c000a36f:	c7 44 24 50 6e 12 02 c0 	mov    DWORD PTR [esp+0x50],0xc002126e
c000a377:	8d 50 01             	lea    edx,[eax+0x1]
c000a37a:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c000a37e:	89 15 a4 6f 02 c0    	mov    DWORD PTR ds:0xc0026fa4,edx
c000a384:	83 c4 3c             	add    esp,0x3c
c000a387:	5b                   	pop    ebx
c000a388:	5e                   	pop    esi
c000a389:	5f                   	pop    edi
c000a38a:	5d                   	pop    ebp
c000a38b:	e9 b5 05 00 00       	jmp    c000a945 <Dbg::kprintf(char const*, ...)>

c000a390 <VAS::tryLoadBackOffDisk(unsigned long)>:
c000a390:	55                   	push   ebp
c000a391:	57                   	push   edi
c000a392:	56                   	push   esi
c000a393:	53                   	push   ebx
c000a394:	81 ec 1c 10 00 00    	sub    esp,0x101c
c000a39a:	8b b4 24 34 10 00 00 	mov    esi,DWORD PTR [esp+0x1034]
c000a3a1:	89 f3                	mov    ebx,esi
c000a3a3:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000a3a9:	81 fe ff ff bf ff    	cmp    esi,0xffbfffff
c000a3af:	77 22                	ja     c000a3d3 <VAS::tryLoadBackOffDisk(unsigned long)+0x43>
c000a3b1:	83 ec 08             	sub    esp,0x8
c000a3b4:	56                   	push   esi
c000a3b5:	68 91 12 02 c0       	push   0xc0021291
c000a3ba:	e8 86 05 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000a3bf:	83 c4 10             	add    esp,0x10
c000a3c2:	85 db                	test   ebx,ebx
c000a3c4:	75 2a                	jne    c000a3f0 <VAS::tryLoadBackOffDisk(unsigned long)+0x60>
c000a3c6:	31 c0                	xor    eax,eax
c000a3c8:	81 c4 1c 10 00 00    	add    esp,0x101c
c000a3ce:	5b                   	pop    ebx
c000a3cf:	5e                   	pop    esi
c000a3d0:	5f                   	pop    edi
c000a3d1:	5d                   	pop    ebp
c000a3d2:	c3                   	ret    
c000a3d3:	83 ec 0c             	sub    esp,0xc
c000a3d6:	68 7f 12 02 c0       	push   0xc002127f
c000a3db:	e8 4b 72 00 00       	call   c001162b <KePanic(char const*)>
c000a3e0:	5f                   	pop    edi
c000a3e1:	5d                   	pop    ebp
c000a3e2:	56                   	push   esi
c000a3e3:	68 91 12 02 c0       	push   0xc0021291
c000a3e8:	e8 58 05 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000a3ed:	83 c4 10             	add    esp,0x10
c000a3f0:	83 ec 08             	sub    esp,0x8
c000a3f3:	53                   	push   ebx
c000a3f4:	8b 8c 24 3c 10 00 00 	mov    ecx,DWORD PTR [esp+0x103c]
c000a3fb:	51                   	push   ecx
c000a3fc:	e8 0b f5 ff ff       	call   c000990c <VAS::getPageTableEntry(unsigned long)>
c000a401:	83 c4 10             	add    esp,0x10
c000a404:	89 c2                	mov    edx,eax
c000a406:	85 c0                	test   eax,eax
c000a408:	74 bc                	je     c000a3c6 <VAS::tryLoadBackOffDisk(unsigned long)+0x36>
c000a40a:	8b 28                	mov    ebp,DWORD PTR [eax]
c000a40c:	f7 c5 00 02 00 00    	test   ebp,0x200
c000a412:	0f 85 c0 00 00 00    	jne    c000a4d8 <VAS::tryLoadBackOffDisk(unsigned long)+0x148>
c000a418:	89 e8                	mov    eax,ebp
c000a41a:	25 01 04 00 00       	and    eax,0x401
c000a41f:	3d 00 04 00 00       	cmp    eax,0x400
c000a424:	75 a0                	jne    c000a3c6 <VAS::tryLoadBackOffDisk(unsigned long)+0x36>
c000a426:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a42a:	c1 ed 0c             	shr    ebp,0xc
c000a42d:	e8 8d d9 ff ff       	call   c0007dbf <Phys::allocatePage()>
c000a432:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000a436:	8b 0a                	mov    ecx,DWORD PTR [edx]
c000a438:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c000a43e:	09 c1                	or     ecx,eax
c000a440:	81 c9 01 08 00 00    	or     ecx,0x801
c000a446:	89 0a                	mov    DWORD PTR [edx],ecx
c000a448:	8b 15 2c 36 02 c0    	mov    edx,DWORD PTR ds:0xc002362c
c000a44e:	85 d2                	test   edx,edx
c000a450:	7e 40                	jle    c000a492 <VAS::tryLoadBackOffDisk(unsigned long)+0x102>
c000a452:	89 df                	mov    edi,ebx
c000a454:	31 f6                	xor    esi,esi
c000a456:	83 ec 0c             	sub    esp,0xc
c000a459:	55                   	push   ebp
c000a45a:	e8 f6 f2 ff ff       	call   c0009755 <Virt::swapIDToSector(unsigned long)>
c000a45f:	89 3c 24             	mov    DWORD PTR [esp],edi
c000a462:	01 f0                	add    eax,esi
c000a464:	6a 01                	push   0x1
c000a466:	31 d2                	xor    edx,edx
c000a468:	83 c6 01             	add    esi,0x1
c000a46b:	52                   	push   edx
c000a46c:	81 c7 00 02 00 00    	add    edi,0x200
c000a472:	50                   	push   eax
c000a473:	0f be 05 38 36 02 c0 	movsx  eax,BYTE PTR ds:0xc0023638
c000a47a:	8b 04 85 7c b7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4884]
c000a481:	50                   	push   eax
c000a482:	e8 2d 39 00 00       	call   c000ddb4 <LogicalDisk::read(unsigned long long, int, void*)>
c000a487:	83 c4 20             	add    esp,0x20
c000a48a:	39 35 2c 36 02 c0    	cmp    DWORD PTR ds:0xc002362c,esi
c000a490:	7f c4                	jg     c000a456 <VAS::tryLoadBackOffDisk(unsigned long)+0xc6>
c000a492:	83 ec 04             	sub    esp,0x4
c000a495:	a1 a8 6f 02 c0       	mov    eax,ds:0xc0026fa8
c000a49a:	83 e8 01             	sub    eax,0x1
c000a49d:	50                   	push   eax
c000a49e:	a3 a8 6f 02 c0       	mov    ds:0xc0026fa8,eax
c000a4a3:	53                   	push   ebx
c000a4a4:	68 a4 12 02 c0       	push   0xc00212a4
c000a4a9:	e8 97 04 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000a4ae:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000a4b1:	e8 7c f2 ff ff       	call   c0009732 <Virt::freeSwapfilePage(unsigned long)>
c000a4b6:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000a4bb:	83 c4 10             	add    esp,0x10
c000a4be:	83 e8 01             	sub    eax,0x1
c000a4c1:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c000a4c6:	85 c0                	test   eax,eax
c000a4c8:	75 01                	jne    c000a4cb <VAS::tryLoadBackOffDisk(unsigned long)+0x13b>
c000a4ca:	fb                   	sti    
c000a4cb:	0f 20 d8             	mov    eax,cr3
c000a4ce:	0f 22 d8             	mov    cr3,eax
c000a4d1:	b0 01                	mov    al,0x1
c000a4d3:	e9 f0 fe ff ff       	jmp    c000a3c8 <VAS::tryLoadBackOffDisk(unsigned long)+0x38>
c000a4d8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a4dc:	bd 00 10 00 00       	mov    ebp,0x1000
c000a4e1:	83 ec 0c             	sub    esp,0xc
c000a4e4:	89 de                	mov    esi,ebx
c000a4e6:	68 e4 10 02 c0       	push   0xc00210e4
c000a4eb:	e8 55 04 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000a4f0:	8d 7c 24 20          	lea    edi,[esp+0x20]
c000a4f4:	e8 c6 d8 ff ff       	call   c0007dbf <Phys::allocatePage()>
c000a4f9:	89 e9                	mov    ecx,ebp
c000a4fb:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000a4fd:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000a501:	8b 0a                	mov    ecx,DWORD PTR [edx]
c000a503:	81 e1 ff 0d 00 00    	and    ecx,0xdff
c000a509:	09 c8                	or     eax,ecx
c000a50b:	83 c8 02             	or     eax,0x2
c000a50e:	89 02                	mov    DWORD PTR [edx],eax
c000a510:	0f 20 d8             	mov    eax,cr3
c000a513:	0f 22 d8             	mov    cr3,eax
c000a516:	8d 74 24 20          	lea    esi,[esp+0x20]
c000a51a:	89 df                	mov    edi,ebx
c000a51c:	89 e9                	mov    ecx,ebp
c000a51e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000a520:	b0 01                	mov    al,0x1
c000a522:	83 c4 10             	add    esp,0x10
c000a525:	e9 9e fe ff ff       	jmp    c000a3c8 <VAS::tryLoadBackOffDisk(unsigned long)+0x38>

c000a52a <VAS::allocateSharedMemoryWithKernel(unsigned long, unsigned long*)>:
c000a52a:	55                   	push   ebp
c000a52b:	57                   	push   edi
c000a52c:	56                   	push   esi
c000a52d:	53                   	push   ebx
c000a52e:	83 ec 28             	sub    esp,0x28
c000a531:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c000a535:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000a539:	50                   	push   eax
c000a53a:	e8 ce f0 ff ff       	call   c000960d <Virt::allocateKernelVirtualPages(int)>
c000a53f:	83 c4 0c             	add    esp,0xc
c000a542:	89 c5                	mov    ebp,eax
c000a544:	6a 07                	push   0x7
c000a546:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000a54a:	52                   	push   edx
c000a54b:	56                   	push   esi
c000a54c:	e8 d3 f8 ff ff       	call   c0009e24 <VAS::allocatePages(int, int)>
c000a551:	83 c4 10             	add    esp,0x10
c000a554:	89 c7                	mov    edi,eax
c000a556:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000a55a:	85 c9                	test   ecx,ecx
c000a55c:	74 2f                	je     c000a58d <VAS::allocateSharedMemoryWithKernel(unsigned long, unsigned long*)+0x63>
c000a55e:	31 db                	xor    ebx,ebx
c000a560:	e8 5a d8 ff ff       	call   c0007dbf <Phys::allocatePage()>
c000a565:	83 c3 01             	add    ebx,0x1
c000a568:	6a 03                	push   0x3
c000a56a:	55                   	push   ebp
c000a56b:	50                   	push   eax
c000a56c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a570:	56                   	push   esi
c000a571:	e8 aa f7 ff ff       	call   c0009d20 <VAS::mapPage(unsigned long, unsigned long, int)>
c000a576:	6a 07                	push   0x7
c000a578:	57                   	push   edi
c000a579:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000a57d:	50                   	push   eax
c000a57e:	56                   	push   esi
c000a57f:	e8 9c f7 ff ff       	call   c0009d20 <VAS::mapPage(unsigned long, unsigned long, int)>
c000a584:	83 c4 20             	add    esp,0x20
c000a587:	39 5c 24 34          	cmp    DWORD PTR [esp+0x34],ebx
c000a58b:	75 d3                	jne    c000a560 <VAS::allocateSharedMemoryWithKernel(unsigned long, unsigned long*)+0x36>
c000a58d:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000a591:	89 28                	mov    DWORD PTR [eax],ebp
c000a593:	83 c4 1c             	add    esp,0x1c
c000a596:	89 f8                	mov    eax,edi
c000a598:	5b                   	pop    ebx
c000a599:	5e                   	pop    esi
c000a59a:	5f                   	pop    edi
c000a59b:	5d                   	pop    ebp
c000a59c:	c3                   	ret    
c000a59d:	90                   	nop

c000a59e <VAS::freeSharedMemoryWithKernel(unsigned long, unsigned long)>:
c000a59e:	53                   	push   ebx
c000a59f:	83 ec 14             	sub    esp,0x14
c000a5a2:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c000a5a6:	68 04 11 02 c0       	push   0xc0021104
c000a5ab:	e8 95 03 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000a5b0:	c7 04 24 64 11 02 c0 	mov    DWORD PTR [esp],0xc0021164
c000a5b7:	e8 89 03 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000a5bc:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c000a5c0:	83 c4 18             	add    esp,0x18
c000a5c3:	5b                   	pop    ebx
c000a5c4:	e9 62 f3 ff ff       	jmp    c000992b <Virt::freeKernelVirtualPages(unsigned long)>
c000a5c9:	90                   	nop

c000a5ca <VAS::scanForEviction()>:
c000a5ca:	57                   	push   edi
c000a5cb:	56                   	push   esi
c000a5cc:	31 f6                	xor    esi,esi
c000a5ce:	53                   	push   ebx
c000a5cf:	83 ec 10             	sub    esp,0x10
c000a5d2:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000a5d6:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c000a5d9:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c000a5df:	75 0e                	jne    c000a5ef <VAS::scanForEviction()+0x25>
c000a5e1:	89 da                	mov    edx,ebx
c000a5e3:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000a5e6:	c1 ea 16             	shr    edx,0x16
c000a5e9:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c000a5ed:	74 57                	je     c000a646 <VAS::scanForEviction()+0x7c>
c000a5ef:	53                   	push   ebx
c000a5f0:	57                   	push   edi
c000a5f1:	e8 16 f3 ff ff       	call   c000990c <VAS::getPageTableEntry(unsigned long)>
c000a5f6:	5a                   	pop    edx
c000a5f7:	8b 10                	mov    edx,DWORD PTR [eax]
c000a5f9:	59                   	pop    ecx
c000a5fa:	89 d1                	mov    ecx,edx
c000a5fc:	c1 e9 0c             	shr    ecx,0xc
c000a5ff:	74 10                	je     c000a611 <VAS::scanForEviction()+0x47>
c000a601:	89 d1                	mov    ecx,edx
c000a603:	81 e1 01 08 00 00    	and    ecx,0x801
c000a609:	81 f9 01 08 00 00    	cmp    ecx,0x801
c000a60f:	74 40                	je     c000a651 <VAS::scanForEviction()+0x87>
c000a611:	81 c3 00 10 00 00    	add    ebx,0x1000
c000a617:	81 fb ff ff ff fe    	cmp    ebx,0xfeffffff
c000a61d:	76 2d                	jbe    c000a64c <VAS::scanForEviction()+0x82>
c000a61f:	83 c6 01             	add    esi,0x1
c000a622:	c7 47 08 00 00 00 00 	mov    DWORD PTR [edi+0x8],0x0
c000a629:	83 fe 03             	cmp    esi,0x3
c000a62c:	74 32                	je     c000a660 <VAS::scanForEviction()+0x96>
c000a62e:	31 db                	xor    ebx,ebx
c000a630:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c000a636:	75 b7                	jne    c000a5ef <VAS::scanForEviction()+0x25>
c000a638:	89 da                	mov    edx,ebx
c000a63a:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000a63d:	c1 ea 16             	shr    edx,0x16
c000a640:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c000a644:	75 a9                	jne    c000a5ef <VAS::scanForEviction()+0x25>
c000a646:	81 c3 00 00 40 00    	add    ebx,0x400000
c000a64c:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c000a64f:	eb 88                	jmp    c000a5d9 <VAS::scanForEviction()+0xf>
c000a651:	f6 c2 20             	test   dl,0x20
c000a654:	74 13                	je     c000a669 <VAS::scanForEviction()+0x9f>
c000a656:	83 e2 df             	and    edx,0xffffffdf
c000a659:	89 10                	mov    DWORD PTR [eax],edx
c000a65b:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c000a65e:	eb b1                	jmp    c000a611 <VAS::scanForEviction()+0x47>
c000a660:	83 c4 10             	add    esp,0x10
c000a663:	31 c0                	xor    eax,eax
c000a665:	5b                   	pop    ebx
c000a666:	5e                   	pop    esi
c000a667:	5f                   	pop    edi
c000a668:	c3                   	ret    
c000a669:	83 ec 08             	sub    esp,0x8
c000a66c:	89 d0                	mov    eax,edx
c000a66e:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a673:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000a677:	53                   	push   ebx
c000a678:	68 b9 12 02 c0       	push   0xc00212b9
c000a67d:	e8 c3 02 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000a682:	58                   	pop    eax
c000a683:	8b 4f 08             	mov    ecx,DWORD PTR [edi+0x8]
c000a686:	5a                   	pop    edx
c000a687:	51                   	push   ecx
c000a688:	57                   	push   edi
c000a689:	e8 24 fc ff ff       	call   c000a2b2 <VAS::evict(unsigned long)>
c000a68e:	5b                   	pop    ebx
c000a68f:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000a692:	5e                   	pop    esi
c000a693:	50                   	push   eax
c000a694:	68 cd 12 02 c0       	push   0xc00212cd
c000a699:	e8 a7 02 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000a69e:	58                   	pop    eax
c000a69f:	5a                   	pop    edx
c000a6a0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000a6a4:	50                   	push   eax
c000a6a5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a6a9:	68 e0 12 02 c0       	push   0xc00212e0
c000a6ae:	e8 92 02 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000a6b3:	8b 4f 08             	mov    ecx,DWORD PTR [edi+0x8]
c000a6b6:	83 c4 10             	add    esp,0x10
c000a6b9:	81 c1 00 10 00 00    	add    ecx,0x1000
c000a6bf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a6c3:	89 4f 08             	mov    DWORD PTR [edi+0x8],ecx
c000a6c6:	83 c4 10             	add    esp,0x10
c000a6c9:	5b                   	pop    ebx
c000a6ca:	5e                   	pop    esi
c000a6cb:	5f                   	pop    edi
c000a6cc:	c3                   	ret    

c000a6cd <mapVASFirstTime>:
c000a6cd:	55                   	push   ebp
c000a6ce:	57                   	push   edi
c000a6cf:	56                   	push   esi
c000a6d0:	53                   	push   ebx
c000a6d1:	83 ec 0c             	sub    esp,0xc
c000a6d4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000a6d9:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000a6dc:	83 fa 01             	cmp    edx,0x1
c000a6df:	0f 84 cb 00 00 00    	je     c000a7b0 <mapVASFirstTime+0xe3>
c000a6e5:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c000a6e8:	8b 68 38             	mov    ebp,DWORD PTR [eax+0x38]
c000a6eb:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c000a6f0:	c1 e5 15             	shl    ebp,0x15
c000a6f3:	bf 00 90 e7 01       	mov    edi,0x1e79000
c000a6f8:	8b b2 12 05 00 00    	mov    esi,DWORD PTR [edx+0x512]
c000a6fe:	29 eb                	sub    ebx,ebp
c000a700:	29 ef                	sub    edi,ebp
c000a702:	e8 b8 d6 ff ff       	call   c0007dbf <Phys::allocatePage()>
c000a707:	83 ec 0c             	sub    esp,0xc
c000a70a:	68 03 04 00 00       	push   0x403
c000a70f:	6a 01                	push   0x1
c000a711:	53                   	push   ebx
c000a712:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000a718:	50                   	push   eax
c000a719:	56                   	push   esi
c000a71a:	e8 fb f7 ff ff       	call   c0009f1a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a71f:	83 c4 20             	add    esp,0x20
c000a722:	39 fb                	cmp    ebx,edi
c000a724:	75 dc                	jne    c000a702 <mapVASFirstTime+0x35>
c000a726:	bb 00 f0 ff 01       	mov    ebx,0x1fff000
c000a72b:	bf 00 f0 fd 01       	mov    edi,0x1fdf000
c000a730:	29 eb                	sub    ebx,ebp
c000a732:	29 ef                	sub    edi,ebp
c000a734:	e8 86 d6 ff ff       	call   c0007dbf <Phys::allocatePage()>
c000a739:	0f b6 56 01          	movzx  edx,BYTE PTR [esi+0x1]
c000a73d:	83 fa 01             	cmp    edx,0x1
c000a740:	19 d2                	sbb    edx,edx
c000a742:	83 ec 0c             	sub    esp,0xc
c000a745:	83 e2 04             	and    edx,0x4
c000a748:	81 c2 03 04 00 00    	add    edx,0x403
c000a74e:	52                   	push   edx
c000a74f:	6a 01                	push   0x1
c000a751:	53                   	push   ebx
c000a752:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000a758:	50                   	push   eax
c000a759:	56                   	push   esi
c000a75a:	e8 bb f7 ff ff       	call   c0009f1a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a75f:	83 c4 20             	add    esp,0x20
c000a762:	39 df                	cmp    edi,ebx
c000a764:	75 ce                	jne    c000a734 <mapVASFirstTime+0x67>
c000a766:	83 ec 0c             	sub    esp,0xc
c000a769:	bb 7c 60 02 c0       	mov    ebx,0xc002607c
c000a76e:	6a 04                	push   0x4
c000a770:	81 eb 00 50 02 c0    	sub    ebx,0xc0025000
c000a776:	6a ff                	push   0xffffffff
c000a778:	c1 eb 0c             	shr    ebx,0xc
c000a77b:	53                   	push   ebx
c000a77c:	68 00 50 02 c0       	push   0xc0025000
c000a781:	56                   	push   esi
c000a782:	e8 1f f3 ff ff       	call   c0009aa6 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c000a787:	83 c4 14             	add    esp,0x14
c000a78a:	a1 b0 6f 02 c0       	mov    eax,ds:0xc0026fb0
c000a78f:	6a 04                	push   0x4
c000a791:	6a ff                	push   0xffffffff
c000a793:	53                   	push   ebx
c000a794:	68 00 50 02 c0       	push   0xc0025000
c000a799:	50                   	push   eax
c000a79a:	e8 07 f3 ff ff       	call   c0009aa6 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c000a79f:	0f 20 d8             	mov    eax,cr3
c000a7a2:	0f 22 d8             	mov    cr3,eax
c000a7a5:	83 c4 20             	add    esp,0x20
c000a7a8:	83 c4 0c             	add    esp,0xc
c000a7ab:	5b                   	pop    ebx
c000a7ac:	5e                   	pop    esi
c000a7ad:	5f                   	pop    edi
c000a7ae:	5d                   	pop    ebp
c000a7af:	c3                   	ret    
c000a7b0:	83 ec 0c             	sub    esp,0xc
c000a7b3:	68 ed 12 02 c0       	push   0xc00212ed
c000a7b8:	e8 88 01 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000a7bd:	83 c4 10             	add    esp,0x10
c000a7c0:	83 c4 0c             	add    esp,0xc
c000a7c3:	5b                   	pop    ebx
c000a7c4:	5e                   	pop    esi
c000a7c5:	5f                   	pop    edi
c000a7c6:	5d                   	pop    ebp
c000a7c7:	c3                   	ret    

c000a7c8 <__cxa_atexit>:
c000a7c8:	31 c0                	xor    eax,eax
c000a7ca:	c3                   	ret    

c000a7cb <__cxa_finalize>:
c000a7cb:	c3                   	ret    

c000a7cc <__stack_chk_fail>:
c000a7cc:	55                   	push   ebp
c000a7cd:	89 e5                	mov    ebp,esp
c000a7cf:	83 ec 10             	sub    esp,0x10
c000a7d2:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000a7d5:	68 06 13 02 c0       	push   0xc0021306
c000a7da:	e8 66 01 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000a7df:	58                   	pop    eax
c000a7e0:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000a7e3:	5a                   	pop    edx
c000a7e4:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000a7e7:	68 06 13 02 c0       	push   0xc0021306
c000a7ec:	e8 54 01 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000a7f1:	c7 04 24 0e 13 02 c0 	mov    DWORD PTR [esp],0xc002130e
c000a7f8:	e8 2e 6e 00 00       	call   c001162b <KePanic(char const*)>
c000a7fd:	83 c4 10             	add    esp,0x10
c000a800:	c9                   	leave  
c000a801:	c3                   	ret    

c000a802 <__cxa_pure_virtual>:
c000a802:	83 ec 18             	sub    esp,0x18
c000a805:	68 26 13 02 c0       	push   0xc0021326
c000a80a:	e8 1c 6e 00 00       	call   c001162b <KePanic(char const*)>
c000a80f:	83 c4 1c             	add    esp,0x1c
c000a812:	c3                   	ret    

c000a813 <operator new[](unsigned long)>:
c000a813:	e9 9e d2 ff ff       	jmp    c0007ab6 <malloc>

c000a818 <operator delete(void*, unsigned long)>:
c000a818:	e9 b9 d2 ff ff       	jmp    c0007ad6 <rfree>

c000a81d <operator delete[](void*)>:
c000a81d:	e9 b4 d2 ff ff       	jmp    c0007ad6 <rfree>

c000a822 <operator delete[](void*, unsigned long)>:
c000a822:	e9 af d2 ff ff       	jmp    c0007ad6 <rfree>

c000a827 <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c000a827:	55                   	push   ebp
c000a828:	57                   	push   edi
c000a829:	56                   	push   esi
c000a82a:	be 2f 0e 02 c0       	mov    esi,0xc0020e2f
c000a82f:	53                   	push   ebx
c000a830:	83 ec 20             	sub    esp,0x20
c000a833:	a0 2e 0e 02 c0       	mov    al,ds:0xc0020e2e
c000a838:	8d 7c 24 10          	lea    edi,[esp+0x10]
c000a83c:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000a840:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000a844:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000a848:	b8 10 00 00 00       	mov    eax,0x10
c000a84d:	f7 c7 02 00 00 00    	test   edi,0x2
c000a853:	75 60                	jne    c000a8b5 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x8e>
c000a855:	89 c1                	mov    ecx,eax
c000a857:	c1 e9 02             	shr    ecx,0x2
c000a85a:	fc                   	cld    
c000a85b:	31 d2                	xor    edx,edx
c000a85d:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000a85f:	a8 02                	test   al,0x2
c000a861:	74 0b                	je     c000a86e <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x47>
c000a863:	66 8b 16             	mov    dx,WORD PTR [esi]
c000a866:	66 89 17             	mov    WORD PTR [edi],dx
c000a869:	ba 02 00 00 00       	mov    edx,0x2
c000a86e:	a8 01                	test   al,0x1
c000a870:	74 06                	je     c000a878 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x51>
c000a872:	8a 04 16             	mov    al,BYTE PTR [esi+edx*1]
c000a875:	88 04 17             	mov    BYTE PTR [edi+edx*1],al
c000a878:	89 ee                	mov    esi,ebp
c000a87a:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000a87e:	eb 02                	jmp    c000a882 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x5b>
c000a880:	89 c6                	mov    esi,eax
c000a882:	31 d2                	xor    edx,edx
c000a884:	83 c1 01             	add    ecx,0x1
c000a887:	89 f0                	mov    eax,esi
c000a889:	f7 f3                	div    ebx
c000a88b:	39 de                	cmp    esi,ebx
c000a88d:	73 f1                	jae    c000a880 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x59>
c000a88f:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c000a892:	eb 02                	jmp    c000a896 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x6f>
c000a894:	89 c5                	mov    ebp,eax
c000a896:	31 d2                	xor    edx,edx
c000a898:	83 e9 01             	sub    ecx,0x1
c000a89b:	89 e8                	mov    eax,ebp
c000a89d:	f7 f3                	div    ebx
c000a89f:	39 dd                	cmp    ebp,ebx
c000a8a1:	8a 54 14 0f          	mov    dl,BYTE PTR [esp+edx*1+0xf]
c000a8a5:	88 11                	mov    BYTE PTR [ecx],dl
c000a8a7:	73 eb                	jae    c000a894 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x6d>
c000a8a9:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000a8ad:	83 c4 20             	add    esp,0x20
c000a8b0:	5b                   	pop    ebx
c000a8b1:	5e                   	pop    esi
c000a8b2:	5f                   	pop    edi
c000a8b3:	5d                   	pop    ebp
c000a8b4:	c3                   	ret    
c000a8b5:	66 8b 16             	mov    dx,WORD PTR [esi]
c000a8b8:	83 c7 02             	add    edi,0x2
c000a8bb:	66 89 57 fe          	mov    WORD PTR [edi-0x2],dx
c000a8bf:	83 c6 02             	add    esi,0x2
c000a8c2:	83 e8 02             	sub    eax,0x2
c000a8c5:	eb 8e                	jmp    c000a855 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x2e>

c000a8c7 <Dbg::logc(char)>:
c000a8c7:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a8cb:	f6 05 d0 6e 02 c0 10 	test   BYTE PTR ds:0xc0026ed0,0x10
c000a8d2:	75 12                	jne    c000a8e6 <Dbg::logc(char)+0x1f>
c000a8d4:	ba fd 03 00 00       	mov    edx,0x3fd
c000a8d9:	ec                   	in     al,dx
c000a8da:	a8 20                	test   al,0x20
c000a8dc:	74 fb                	je     c000a8d9 <Dbg::logc(char)+0x12>
c000a8de:	ba f8 03 00 00       	mov    edx,0x3f8
c000a8e3:	88 c8                	mov    al,cl
c000a8e5:	ee                   	out    dx,al
c000a8e6:	c3                   	ret    

c000a8e7 <Dbg::logs(char*)>:
c000a8e7:	53                   	push   ebx
c000a8e8:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000a8ec:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000a8ef:	85 c0                	test   eax,eax
c000a8f1:	74 11                	je     c000a904 <Dbg::logs(char*)+0x1d>
c000a8f3:	83 c3 01             	add    ebx,0x1
c000a8f6:	50                   	push   eax
c000a8f7:	e8 cb ff ff ff       	call   c000a8c7 <Dbg::logc(char)>
c000a8fc:	58                   	pop    eax
c000a8fd:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000a900:	85 c0                	test   eax,eax
c000a902:	75 ef                	jne    c000a8f3 <Dbg::logs(char*)+0xc>
c000a904:	5b                   	pop    ebx
c000a905:	c3                   	ret    

c000a906 <Dbg::logWriteInt(unsigned int)>:
c000a906:	83 ec 10             	sub    esp,0x10
c000a909:	6a 0a                	push   0xa
c000a90b:	8d 44 24 08          	lea    eax,[esp+0x8]
c000a90f:	50                   	push   eax
c000a910:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a914:	50                   	push   eax
c000a915:	e8 0d ff ff ff       	call   c000a827 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000a91a:	50                   	push   eax
c000a91b:	e8 c7 ff ff ff       	call   c000a8e7 <Dbg::logs(char*)>
c000a920:	83 c4 20             	add    esp,0x20
c000a923:	c3                   	ret    

c000a924 <Dbg::logWriteIntBase(unsigned int, int)>:
c000a924:	83 ec 10             	sub    esp,0x10
c000a927:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a92b:	50                   	push   eax
c000a92c:	8d 44 24 08          	lea    eax,[esp+0x8]
c000a930:	50                   	push   eax
c000a931:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000a935:	52                   	push   edx
c000a936:	e8 ec fe ff ff       	call   c000a827 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000a93b:	50                   	push   eax
c000a93c:	e8 a6 ff ff ff       	call   c000a8e7 <Dbg::logs(char*)>
c000a941:	83 c4 20             	add    esp,0x20
c000a944:	c3                   	ret    

c000a945 <Dbg::kprintf(char const*, ...)>:
c000a945:	55                   	push   ebp
c000a946:	57                   	push   edi
c000a947:	56                   	push   esi
c000a948:	53                   	push   ebx
c000a949:	83 ec 0c             	sub    esp,0xc
c000a94c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000a950:	f6 05 d0 6e 02 c0 10 	test   BYTE PTR ds:0xc0026ed0,0x10
c000a957:	74 08                	je     c000a961 <Dbg::kprintf(char const*, ...)+0x1c>
c000a959:	83 c4 0c             	add    esp,0xc
c000a95c:	5b                   	pop    ebx
c000a95d:	5e                   	pop    esi
c000a95e:	5f                   	pop    edi
c000a95f:	5d                   	pop    ebp
c000a960:	c3                   	ret    
c000a961:	8d 44 24 24          	lea    eax,[esp+0x24]
c000a965:	31 ff                	xor    edi,edi
c000a967:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000a96b:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000a96e:	85 c0                	test   eax,eax
c000a970:	74 e7                	je     c000a959 <Dbg::kprintf(char const*, ...)+0x14>
c000a972:	8d 77 01             	lea    esi,[edi+0x1]
c000a975:	83 f8 25             	cmp    eax,0x25
c000a978:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c000a97b:	75 47                	jne    c000a9c4 <Dbg::kprintf(char const*, ...)+0x7f>
c000a97d:	83 c7 02             	add    edi,0x2
c000a980:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c000a983:	8d 34 3b             	lea    esi,[ebx+edi*1]
c000a986:	83 e8 25             	sub    eax,0x25
c000a989:	0f b6 c0             	movzx  eax,al
c000a98c:	83 f8 53             	cmp    eax,0x53
c000a98f:	0f 87 ce 00 00 00    	ja     c000aa63 <Dbg::kprintf(char const*, ...)+0x11e>
c000a995:	ff 24 85 3c 13 02 c0 	jmp    DWORD PTR [eax*4-0x3ffdecc4]
c000a99c:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a9a0:	89 c8                	mov    eax,ecx
c000a9a2:	83 c1 04             	add    ecx,0x4
c000a9a5:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000a9a9:	8b 28                	mov    ebp,DWORD PTR [eax]
c000a9ab:	55                   	push   ebp
c000a9ac:	e8 55 ff ff ff       	call   c000a906 <Dbg::logWriteInt(unsigned int)>
c000a9b1:	58                   	pop    eax
c000a9b2:	0f be 06             	movsx  eax,BYTE PTR [esi]
c000a9b5:	85 c0                	test   eax,eax
c000a9b7:	74 a0                	je     c000a959 <Dbg::kprintf(char const*, ...)+0x14>
c000a9b9:	8d 77 01             	lea    esi,[edi+0x1]
c000a9bc:	83 f8 25             	cmp    eax,0x25
c000a9bf:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c000a9c2:	74 b9                	je     c000a97d <Dbg::kprintf(char const*, ...)+0x38>
c000a9c4:	50                   	push   eax
c000a9c5:	89 f7                	mov    edi,esi
c000a9c7:	e8 fb fe ff ff       	call   c000a8c7 <Dbg::logc(char)>
c000a9cc:	89 ee                	mov    esi,ebp
c000a9ce:	58                   	pop    eax
c000a9cf:	eb e1                	jmp    c000a9b2 <Dbg::kprintf(char const*, ...)+0x6d>
c000a9d1:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a9d5:	89 c8                	mov    eax,ecx
c000a9d7:	83 c1 04             	add    ecx,0x4
c000a9da:	8b 00                	mov    eax,DWORD PTR [eax]
c000a9dc:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000a9e0:	50                   	push   eax
c000a9e1:	e8 01 ff ff ff       	call   c000a8e7 <Dbg::logs(char*)>
c000a9e6:	58                   	pop    eax
c000a9e7:	eb c9                	jmp    c000a9b2 <Dbg::kprintf(char const*, ...)+0x6d>
c000a9e9:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000a9ed:	89 d0                	mov    eax,edx
c000a9ef:	83 c2 04             	add    edx,0x4
c000a9f2:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a9f6:	8b 00                	mov    eax,DWORD PTR [eax]
c000a9f8:	50                   	push   eax
c000a9f9:	e8 08 ff ff ff       	call   c000a906 <Dbg::logWriteInt(unsigned int)>
c000a9fe:	58                   	pop    eax
c000a9ff:	eb b1                	jmp    c000a9b2 <Dbg::kprintf(char const*, ...)+0x6d>
c000aa01:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000aa05:	89 d0                	mov    eax,edx
c000aa07:	83 c2 04             	add    edx,0x4
c000aa0a:	0f be 00             	movsx  eax,BYTE PTR [eax]
c000aa0d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aa11:	50                   	push   eax
c000aa12:	e8 b0 fe ff ff       	call   c000a8c7 <Dbg::logc(char)>
c000aa17:	58                   	pop    eax
c000aa18:	eb 98                	jmp    c000a9b2 <Dbg::kprintf(char const*, ...)+0x6d>
c000aa1a:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000aa1e:	89 c8                	mov    eax,ecx
c000aa20:	83 c1 04             	add    ecx,0x4
c000aa23:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000aa27:	6a 10                	push   0x10
c000aa29:	8b 08                	mov    ecx,DWORD PTR [eax]
c000aa2b:	51                   	push   ecx
c000aa2c:	e8 f3 fe ff ff       	call   c000a924 <Dbg::logWriteIntBase(unsigned int, int)>
c000aa31:	5d                   	pop    ebp
c000aa32:	58                   	pop    eax
c000aa33:	e9 7a ff ff ff       	jmp    c000a9b2 <Dbg::kprintf(char const*, ...)+0x6d>
c000aa38:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000aa3c:	89 d0                	mov    eax,edx
c000aa3e:	83 c2 08             	add    edx,0x8
c000aa41:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aa45:	6a 10                	push   0x10
c000aa47:	8b 00                	mov    eax,DWORD PTR [eax]
c000aa49:	50                   	push   eax
c000aa4a:	e8 d5 fe ff ff       	call   c000a924 <Dbg::logWriteIntBase(unsigned int, int)>
c000aa4f:	58                   	pop    eax
c000aa50:	5a                   	pop    edx
c000aa51:	e9 5c ff ff ff       	jmp    c000a9b2 <Dbg::kprintf(char const*, ...)+0x6d>
c000aa56:	6a 25                	push   0x25
c000aa58:	e8 6a fe ff ff       	call   c000a8c7 <Dbg::logc(char)>
c000aa5d:	5a                   	pop    edx
c000aa5e:	e9 4f ff ff ff       	jmp    c000a9b2 <Dbg::kprintf(char const*, ...)+0x6d>
c000aa63:	6a 25                	push   0x25
c000aa65:	e8 5d fe ff ff       	call   c000a8c7 <Dbg::logc(char)>
c000aa6a:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c000aa6e:	50                   	push   eax
c000aa6f:	e8 53 fe ff ff       	call   c000a8c7 <Dbg::logc(char)>
c000aa74:	5a                   	pop    edx
c000aa75:	59                   	pop    ecx
c000aa76:	e9 37 ff ff ff       	jmp    c000a9b2 <Dbg::kprintf(char const*, ...)+0x6d>
c000aa7b:	90                   	nop

c000aa7c <KiUbsanPrintDetails(char const*, void*)>:
c000aa7c:	83 ec 1c             	sub    esp,0x1c
c000aa7f:	83 ec 08             	sub    esp,0x8
c000aa82:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000aa86:	68 8c 14 02 c0       	push   0xc002148c
c000aa8b:	e8 b5 fe ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000aa90:	83 c4 10             	add    esp,0x10
c000aa93:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000aa97:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000aa9b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000aa9f:	8b 00                	mov    eax,DWORD PTR [eax]
c000aaa1:	83 ec 08             	sub    esp,0x8
c000aaa4:	50                   	push   eax
c000aaa5:	68 a0 14 02 c0       	push   0xc00214a0
c000aaaa:	e8 96 fe ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000aaaf:	83 c4 10             	add    esp,0x10
c000aab2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000aab6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000aab9:	83 ec 08             	sub    esp,0x8
c000aabc:	50                   	push   eax
c000aabd:	68 aa 14 02 c0       	push   0xc00214aa
c000aac2:	e8 7e fe ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000aac7:	83 c4 10             	add    esp,0x10
c000aaca:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000aace:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000aad1:	83 ec 08             	sub    esp,0x8
c000aad4:	50                   	push   eax
c000aad5:	68 b4 14 02 c0       	push   0xc00214b4
c000aada:	e8 66 fe ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000aadf:	83 c4 10             	add    esp,0x10
c000aae2:	90                   	nop
c000aae3:	83 c4 1c             	add    esp,0x1c
c000aae6:	c3                   	ret    
c000aae7:	90                   	nop

c000aae8 <__ubsan_handle_type_mismatch_v1>:
c000aae8:	83 ec 0c             	sub    esp,0xc
c000aaeb:	83 ec 08             	sub    esp,0x8
c000aaee:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000aaf2:	68 f8 15 02 c0       	push   0xc00215f8
c000aaf7:	e8 80 ff ff ff       	call   c000aa7c <KiUbsanPrintDetails(char const*, void*)>
c000aafc:	83 c4 10             	add    esp,0x10
c000aaff:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000ab04:	75 16                	jne    c000ab1c <__ubsan_handle_type_mismatch_v1+0x34>
c000ab06:	83 ec 0c             	sub    esp,0xc
c000ab09:	68 be 14 02 c0       	push   0xc00214be
c000ab0e:	e8 32 fe ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000ab13:	83 c4 10             	add    esp,0x10
c000ab16:	e9 91 00 00 00       	jmp    c000abac <__ubsan_handle_type_mismatch_v1+0xc4>
c000ab1b:	90                   	nop
c000ab1c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab20:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000ab23:	85 c0                	test   eax,eax
c000ab25:	74 29                	je     c000ab50 <__ubsan_handle_type_mismatch_v1+0x68>
c000ab27:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab2b:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000ab2e:	83 e8 01             	sub    eax,0x1
c000ab31:	23 44 24 14          	and    eax,DWORD PTR [esp+0x14]
c000ab35:	75 19                	jne    c000ab50 <__ubsan_handle_type_mismatch_v1+0x68>
c000ab37:	83 ec 08             	sub    esp,0x8
c000ab3a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ab3e:	68 18 16 02 c0       	push   0xc0021618
c000ab43:	e8 fd fd ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000ab48:	83 c4 10             	add    esp,0x10
c000ab4b:	eb 5f                	jmp    c000abac <__ubsan_handle_type_mismatch_v1+0xc4>
c000ab4d:	8d 76 00             	lea    esi,[esi+0x0]
c000ab50:	83 ec 0c             	sub    esp,0xc
c000ab53:	68 d3 14 02 c0       	push   0xc00214d3
c000ab58:	e8 e8 fd ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000ab5d:	83 c4 10             	add    esp,0x10
c000ab60:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab64:	8a 40 14             	mov    al,BYTE PTR [eax+0x14]
c000ab67:	0f b6 c0             	movzx  eax,al
c000ab6a:	83 ec 08             	sub    esp,0x8
c000ab6d:	50                   	push   eax
c000ab6e:	68 ed 14 02 c0       	push   0xc00214ed
c000ab73:	e8 cd fd ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000ab78:	83 c4 10             	add    esp,0x10
c000ab7b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab7f:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000ab82:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c000ab85:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000ab89:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab8d:	8a 40 14             	mov    al,BYTE PTR [eax+0x14]
c000ab90:	0f b6 c0             	movzx  eax,al
c000ab93:	8b 04 85 40 36 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc9c0]
c000ab9a:	51                   	push   ecx
c000ab9b:	52                   	push   edx
c000ab9c:	50                   	push   eax
c000ab9d:	68 40 16 02 c0       	push   0xc0021640
c000aba2:	e8 9e fd ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000aba7:	83 c4 10             	add    esp,0x10
c000abaa:	66 90                	xchg   ax,ax
c000abac:	83 ec 0c             	sub    esp,0xc
c000abaf:	68 f8 15 02 c0       	push   0xc00215f8
c000abb4:	e8 72 6a 00 00       	call   c001162b <KePanic(char const*)>
c000abb9:	83 c4 10             	add    esp,0x10
c000abbc:	90                   	nop
c000abbd:	83 c4 0c             	add    esp,0xc
c000abc0:	c3                   	ret    
c000abc1:	8d 76 00             	lea    esi,[esi+0x0]

c000abc4 <__ubsan_handle_pointer_overflow>:
c000abc4:	83 ec 0c             	sub    esp,0xc
c000abc7:	83 ec 08             	sub    esp,0x8
c000abca:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000abce:	68 88 16 02 c0       	push   0xc0021688
c000abd3:	e8 a4 fe ff ff       	call   c000aa7c <KiUbsanPrintDetails(char const*, void*)>
c000abd8:	83 c4 10             	add    esp,0x10
c000abdb:	83 ec 0c             	sub    esp,0xc
c000abde:	68 88 16 02 c0       	push   0xc0021688
c000abe3:	e8 43 6a 00 00       	call   c001162b <KePanic(char const*)>
c000abe8:	83 c4 10             	add    esp,0x10
c000abeb:	90                   	nop
c000abec:	83 c4 0c             	add    esp,0xc
c000abef:	c3                   	ret    

c000abf0 <__ubsan_handle_out_of_bounds>:
c000abf0:	83 ec 0c             	sub    esp,0xc
c000abf3:	83 ec 08             	sub    esp,0x8
c000abf6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000abfa:	68 f8 14 02 c0       	push   0xc00214f8
c000abff:	e8 78 fe ff ff       	call   c000aa7c <KiUbsanPrintDetails(char const*, void*)>
c000ac04:	83 c4 10             	add    esp,0x10
c000ac07:	83 ec 0c             	sub    esp,0xc
c000ac0a:	68 f8 14 02 c0       	push   0xc00214f8
c000ac0f:	e8 17 6a 00 00       	call   c001162b <KePanic(char const*)>
c000ac14:	83 c4 10             	add    esp,0x10
c000ac17:	90                   	nop
c000ac18:	83 c4 0c             	add    esp,0xc
c000ac1b:	c3                   	ret    

c000ac1c <__ubsan_handle_add_overflow>:
c000ac1c:	83 ec 0c             	sub    esp,0xc
c000ac1f:	83 ec 08             	sub    esp,0x8
c000ac22:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ac26:	68 15 15 02 c0       	push   0xc0021515
c000ac2b:	e8 4c fe ff ff       	call   c000aa7c <KiUbsanPrintDetails(char const*, void*)>
c000ac30:	83 c4 10             	add    esp,0x10
c000ac33:	83 ec 0c             	sub    esp,0xc
c000ac36:	68 15 15 02 c0       	push   0xc0021515
c000ac3b:	e8 eb 69 00 00       	call   c001162b <KePanic(char const*)>
c000ac40:	83 c4 10             	add    esp,0x10
c000ac43:	90                   	nop
c000ac44:	83 c4 0c             	add    esp,0xc
c000ac47:	c3                   	ret    

c000ac48 <__ubsan_handle_load_invalid_value>:
c000ac48:	83 ec 0c             	sub    esp,0xc
c000ac4b:	83 ec 08             	sub    esp,0x8
c000ac4e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ac52:	68 a8 16 02 c0       	push   0xc00216a8
c000ac57:	e8 20 fe ff ff       	call   c000aa7c <KiUbsanPrintDetails(char const*, void*)>
c000ac5c:	83 c4 10             	add    esp,0x10
c000ac5f:	83 ec 0c             	sub    esp,0xc
c000ac62:	68 a8 16 02 c0       	push   0xc00216a8
c000ac67:	e8 bf 69 00 00       	call   c001162b <KePanic(char const*)>
c000ac6c:	83 c4 10             	add    esp,0x10
c000ac6f:	90                   	nop
c000ac70:	83 c4 0c             	add    esp,0xc
c000ac73:	c3                   	ret    

c000ac74 <__ubsan_handle_divrem_overflow>:
c000ac74:	83 ec 0c             	sub    esp,0xc
c000ac77:	83 ec 08             	sub    esp,0x8
c000ac7a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ac7e:	68 cc 16 02 c0       	push   0xc00216cc
c000ac83:	e8 f4 fd ff ff       	call   c000aa7c <KiUbsanPrintDetails(char const*, void*)>
c000ac88:	83 c4 10             	add    esp,0x10
c000ac8b:	83 ec 0c             	sub    esp,0xc
c000ac8e:	68 cc 16 02 c0       	push   0xc00216cc
c000ac93:	e8 93 69 00 00       	call   c001162b <KePanic(char const*)>
c000ac98:	83 c4 10             	add    esp,0x10
c000ac9b:	90                   	nop
c000ac9c:	83 c4 0c             	add    esp,0xc
c000ac9f:	c3                   	ret    

c000aca0 <__ubsan_handle_mul_overflow>:
c000aca0:	83 ec 0c             	sub    esp,0xc
c000aca3:	83 ec 08             	sub    esp,0x8
c000aca6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000acaa:	68 31 15 02 c0       	push   0xc0021531
c000acaf:	e8 c8 fd ff ff       	call   c000aa7c <KiUbsanPrintDetails(char const*, void*)>
c000acb4:	83 c4 10             	add    esp,0x10
c000acb7:	83 ec 0c             	sub    esp,0xc
c000acba:	68 31 15 02 c0       	push   0xc0021531
c000acbf:	e8 67 69 00 00       	call   c001162b <KePanic(char const*)>
c000acc4:	83 c4 10             	add    esp,0x10
c000acc7:	90                   	nop
c000acc8:	83 c4 0c             	add    esp,0xc
c000accb:	c3                   	ret    

c000accc <__ubsan_handle_sub_overflow>:
c000accc:	83 ec 0c             	sub    esp,0xc
c000accf:	83 ec 08             	sub    esp,0x8
c000acd2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000acd6:	68 4d 15 02 c0       	push   0xc002154d
c000acdb:	e8 9c fd ff ff       	call   c000aa7c <KiUbsanPrintDetails(char const*, void*)>
c000ace0:	83 c4 10             	add    esp,0x10
c000ace3:	83 ec 0c             	sub    esp,0xc
c000ace6:	68 4d 15 02 c0       	push   0xc002154d
c000aceb:	e8 3b 69 00 00       	call   c001162b <KePanic(char const*)>
c000acf0:	83 c4 10             	add    esp,0x10
c000acf3:	90                   	nop
c000acf4:	83 c4 0c             	add    esp,0xc
c000acf7:	c3                   	ret    

c000acf8 <__ubsan_handle_shift_out_of_bounds>:
c000acf8:	83 ec 0c             	sub    esp,0xc
c000acfb:	83 ec 08             	sub    esp,0x8
c000acfe:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ad02:	68 ec 16 02 c0       	push   0xc00216ec
c000ad07:	e8 70 fd ff ff       	call   c000aa7c <KiUbsanPrintDetails(char const*, void*)>
c000ad0c:	83 c4 10             	add    esp,0x10
c000ad0f:	83 ec 0c             	sub    esp,0xc
c000ad12:	68 ec 16 02 c0       	push   0xc00216ec
c000ad17:	e8 0f 69 00 00       	call   c001162b <KePanic(char const*)>
c000ad1c:	83 c4 10             	add    esp,0x10
c000ad1f:	90                   	nop
c000ad20:	83 c4 0c             	add    esp,0xc
c000ad23:	c3                   	ret    

c000ad24 <__ubsan_handle_negate_overflow>:
c000ad24:	83 ec 0c             	sub    esp,0xc
c000ad27:	83 ec 08             	sub    esp,0x8
c000ad2a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ad2e:	68 10 17 02 c0       	push   0xc0021710
c000ad33:	e8 44 fd ff ff       	call   c000aa7c <KiUbsanPrintDetails(char const*, void*)>
c000ad38:	83 c4 10             	add    esp,0x10
c000ad3b:	83 ec 0c             	sub    esp,0xc
c000ad3e:	68 10 17 02 c0       	push   0xc0021710
c000ad43:	e8 e3 68 00 00       	call   c001162b <KePanic(char const*)>
c000ad48:	83 c4 10             	add    esp,0x10
c000ad4b:	90                   	nop
c000ad4c:	83 c4 0c             	add    esp,0xc
c000ad4f:	c3                   	ret    

c000ad50 <KiIsHashInTable(unsigned short)>:
c000ad50:	0f b7 d0             	movzx  edx,ax
c000ad53:	83 e0 07             	and    eax,0x7
c000ad56:	c1 fa 03             	sar    edx,0x3
c000ad59:	88 c1                	mov    cl,al
c000ad5b:	0f b6 92 00 74 02 c0 	movzx  edx,BYTE PTR [edx-0x3ffd8c00]
c000ad62:	d3 fa                	sar    edx,cl
c000ad64:	89 d0                	mov    eax,edx
c000ad66:	83 e0 01             	and    eax,0x1
c000ad69:	c3                   	ret    

c000ad6a <KiSetHashInTable(unsigned short, bool)>:
c000ad6a:	56                   	push   esi
c000ad6b:	53                   	push   ebx
c000ad6c:	0f b7 d8             	movzx  ebx,ax
c000ad6f:	83 e0 07             	and    eax,0x7
c000ad72:	c1 fb 03             	sar    ebx,0x3
c000ad75:	89 c1                	mov    ecx,eax
c000ad77:	0f b6 b3 00 74 02 c0 	movzx  esi,BYTE PTR [ebx-0x3ffd8c00]
c000ad7e:	b8 01 00 00 00       	mov    eax,0x1
c000ad83:	d3 e0                	shl    eax,cl
c000ad85:	84 d2                	test   dl,dl
c000ad87:	74 04                	je     c000ad8d <KiSetHashInTable(unsigned short, bool)+0x23>
c000ad89:	09 f0                	or     eax,esi
c000ad8b:	eb 04                	jmp    c000ad91 <KiSetHashInTable(unsigned short, bool)+0x27>
c000ad8d:	f7 d0                	not    eax
c000ad8f:	21 f0                	and    eax,esi
c000ad91:	88 83 00 74 02 c0    	mov    BYTE PTR [ebx-0x3ffd8c00],al
c000ad97:	5b                   	pop    ebx
c000ad98:	5e                   	pop    esi
c000ad99:	c3                   	ret    

c000ad9a <KiFlushSymlinkChanges()>:
c000ad9a:	57                   	push   edi
c000ad9b:	56                   	push   esi
c000ad9c:	53                   	push   ebx
c000ad9d:	83 ec 1c             	sub    esp,0x1c
c000ada0:	68 14 01 00 00       	push   0x114
c000ada5:	e8 0c cd ff ff       	call   c0007ab6 <malloc>
c000adaa:	83 c4 0c             	add    esp,0xc
c000adad:	89 c3                	mov    ebx,eax
c000adaf:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c000adb5:	68 2f 17 02 c0       	push   0xc002172f
c000adba:	50                   	push   eax
c000adbb:	e8 98 0d 00 00       	call   c000bb58 <File::File(char const*, Process*)>
c000adc0:	83 c4 10             	add    esp,0x10
c000adc3:	85 db                	test   ebx,ebx
c000adc5:	75 10                	jne    c000add7 <KiFlushSymlinkChanges()+0x3d>
c000adc7:	83 ec 0c             	sub    esp,0xc
c000adca:	68 4d 17 02 c0       	push   0xc002174d
c000adcf:	e8 57 68 00 00       	call   c001162b <KePanic(char const*)>
c000add4:	83 c4 10             	add    esp,0x10
c000add7:	50                   	push   eax
c000add8:	50                   	push   eax
c000add9:	6a 06                	push   0x6
c000addb:	53                   	push   ebx
c000addc:	e8 95 0d 00 00       	call   c000bb76 <File::open(FileOpenMode)>
c000ade1:	83 c4 10             	add    esp,0x10
c000ade4:	85 c0                	test   eax,eax
c000ade6:	74 10                	je     c000adf8 <KiFlushSymlinkChanges()+0x5e>
c000ade8:	83 ec 0c             	sub    esp,0xc
c000adeb:	68 67 17 02 c0       	push   0xc0021767
c000adf0:	e8 36 68 00 00       	call   c001162b <KePanic(char const*)>
c000adf5:	83 c4 10             	add    esp,0x10
c000adf8:	31 f6                	xor    esi,esi
c000adfa:	39 35 c0 6f 02 c0    	cmp    DWORD PTR ds:0xc0026fc0,esi
c000ae00:	7e 70                	jle    c000ae72 <KiFlushSymlinkChanges()+0xd8>
c000ae02:	83 ec 0c             	sub    esp,0xc
c000ae05:	8b 03                	mov    eax,DWORD PTR [ebx]
c000ae07:	8d 7c 24 18          	lea    edi,[esp+0x18]
c000ae0b:	8d 14 f5 e0 6f 02 c0 	lea    edx,[esi*8-0x3ffd9020]
c000ae12:	57                   	push   edi
c000ae13:	52                   	push   edx
c000ae14:	6a 00                	push   0x0
c000ae16:	6a 08                	push   0x8
c000ae18:	53                   	push   ebx
c000ae19:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000ae1c:	83 c4 20             	add    esp,0x20
c000ae1f:	83 7c 24 0c 08       	cmp    DWORD PTR [esp+0xc],0x8
c000ae24:	74 10                	je     c000ae36 <KiFlushSymlinkChanges()+0x9c>
c000ae26:	83 ec 0c             	sub    esp,0xc
c000ae29:	68 81 17 02 c0       	push   0xc0021781
c000ae2e:	e8 f8 67 00 00       	call   c001162b <KePanic(char const*)>
c000ae33:	83 c4 10             	add    esp,0x10
c000ae36:	83 ec 0c             	sub    esp,0xc
c000ae39:	8b 13                	mov    edx,DWORD PTR [ebx]
c000ae3b:	89 f0                	mov    eax,esi
c000ae3d:	57                   	push   edi
c000ae3e:	c1 e0 08             	shl    eax,0x8
c000ae41:	05 00 70 02 c0       	add    eax,0xc0027000
c000ae46:	50                   	push   eax
c000ae47:	6a 00                	push   0x0
c000ae49:	68 00 01 00 00       	push   0x100
c000ae4e:	53                   	push   ebx
c000ae4f:	ff 52 10             	call   DWORD PTR [edx+0x10]
c000ae52:	83 c4 20             	add    esp,0x20
c000ae55:	81 7c 24 0c 00 01 00 00 	cmp    DWORD PTR [esp+0xc],0x100
c000ae5d:	74 10                	je     c000ae6f <KiFlushSymlinkChanges()+0xd5>
c000ae5f:	83 ec 0c             	sub    esp,0xc
c000ae62:	68 9b 17 02 c0       	push   0xc002179b
c000ae67:	e8 bf 67 00 00       	call   c001162b <KePanic(char const*)>
c000ae6c:	83 c4 10             	add    esp,0x10
c000ae6f:	46                   	inc    esi
c000ae70:	eb 88                	jmp    c000adfa <KiFlushSymlinkChanges()+0x60>
c000ae72:	83 ec 0c             	sub    esp,0xc
c000ae75:	53                   	push   ebx
c000ae76:	e8 59 0d 00 00       	call   c000bbd4 <File::close()>
c000ae7b:	83 c4 10             	add    esp,0x10
c000ae7e:	85 db                	test   ebx,ebx
c000ae80:	74 0c                	je     c000ae8e <KiFlushSymlinkChanges()+0xf4>
c000ae82:	83 ec 0c             	sub    esp,0xc
c000ae85:	8b 03                	mov    eax,DWORD PTR [ebx]
c000ae87:	53                   	push   ebx
c000ae88:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000ae8b:	83 c4 10             	add    esp,0x10
c000ae8e:	c7 05 c0 6f 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026fc0,0x0
c000ae98:	83 c4 10             	add    esp,0x10
c000ae9b:	5b                   	pop    ebx
c000ae9c:	5e                   	pop    esi
c000ae9d:	5f                   	pop    edi
c000ae9e:	c3                   	ret    

c000ae9f <KiDeinitialiseSymlinks(void*)>:
c000ae9f:	e9 f6 fe ff ff       	jmp    c000ad9a <KiFlushSymlinkChanges()>

c000aea4 <KiGetSymlinkHash(char const*)>:
c000aea4:	53                   	push   ebx
c000aea5:	89 c3                	mov    ebx,eax
c000aea7:	83 ec 14             	sub    esp,0x14
c000aeaa:	50                   	push   eax
c000aeab:	e8 c0 56 ff ff       	call   c0000570 <strlen>
c000aeb0:	5a                   	pop    edx
c000aeb1:	59                   	pop    ecx
c000aeb2:	50                   	push   eax
c000aeb3:	53                   	push   ebx
c000aeb4:	e8 f4 60 00 00       	call   c0010fad <KeCalculateCRC32(unsigned char*, int)>
c000aeb9:	83 c4 18             	add    esp,0x18
c000aebc:	89 c2                	mov    edx,eax
c000aebe:	5b                   	pop    ebx
c000aebf:	c1 ea 10             	shr    edx,0x10
c000aec2:	31 d0                	xor    eax,edx
c000aec4:	c3                   	ret    

c000aec5 <KiCreateSymlinkID()>:
c000aec5:	55                   	push   ebp
c000aec6:	57                   	push   edi
c000aec7:	56                   	push   esi
c000aec8:	53                   	push   ebx
c000aec9:	31 db                	xor    ebx,ebx
c000aecb:	83 ec 1c             	sub    esp,0x1c
c000aece:	e8 a6 68 00 00       	call   c0011779 <KeRand()>
c000aed3:	43                   	inc    ebx
c000aed4:	8b 2d 00 94 02 c0    	mov    ebp,DWORD PTR ds:0xc0029400
c000aeda:	31 d2                	xor    edx,edx
c000aedc:	8d 4d 01             	lea    ecx,[ebp+0x1]
c000aedf:	0f a4 c2 1b          	shld   edx,eax,0x1b
c000aee3:	89 0d 00 94 02 c0    	mov    DWORD PTR ds:0xc0029400,ecx
c000aee9:	c1 e0 1b             	shl    eax,0x1b
c000aeec:	89 d7                	mov    edi,edx
c000aeee:	89 c6                	mov    esi,eax
c000aef0:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c000aef4:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000aefc:	81 fb 9a 02 00 00    	cmp    ebx,0x29a
c000af02:	75 10                	jne    c000af14 <KiCreateSymlinkID()+0x4f>
c000af04:	83 ec 0c             	sub    esp,0xc
c000af07:	68 b5 17 02 c0       	push   0xc00217b5
c000af0c:	e8 1a 67 00 00       	call   c001162b <KePanic(char const*)>
c000af11:	83 c4 10             	add    esp,0x10
c000af14:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c000af18:	75 04                	jne    c000af1e <KiCreateSymlinkID()+0x59>
c000af1a:	39 f5                	cmp    ebp,esi
c000af1c:	74 b0                	je     c000aece <KiCreateSymlinkID()+0x9>
c000af1e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000af22:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000af26:	31 f0                	xor    eax,esi
c000af28:	83 c4 1c             	add    esp,0x1c
c000af2b:	31 fa                	xor    edx,edi
c000af2d:	5b                   	pop    ebx
c000af2e:	5e                   	pop    esi
c000af2f:	5f                   	pop    edi
c000af30:	5d                   	pop    ebp
c000af31:	c3                   	ret    

c000af32 <KeRegisterSymlink(char const*, unsigned long long)>:
c000af32:	53                   	push   ebx
c000af33:	83 ec 0c             	sub    esp,0xc
c000af36:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000af3a:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000af3e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000af42:	a1 c0 6f 02 c0       	mov    eax,ds:0xc0026fc0
c000af47:	68 00 01 00 00       	push   0x100
c000af4c:	89 0c c5 e4 6f 02 c0 	mov    DWORD PTR [eax*8-0x3ffd901c],ecx
c000af53:	6a 00                	push   0x0
c000af55:	89 14 c5 e0 6f 02 c0 	mov    DWORD PTR [eax*8-0x3ffd9020],edx
c000af5c:	c1 e0 08             	shl    eax,0x8
c000af5f:	05 00 70 02 c0       	add    eax,0xc0027000
c000af64:	50                   	push   eax
c000af65:	e8 86 55 ff ff       	call   c00004f0 <memset>
c000af6a:	58                   	pop    eax
c000af6b:	a1 c0 6f 02 c0       	mov    eax,ds:0xc0026fc0
c000af70:	5a                   	pop    edx
c000af71:	c1 e0 08             	shl    eax,0x8
c000af74:	53                   	push   ebx
c000af75:	05 00 70 02 c0       	add    eax,0xc0027000
c000af7a:	50                   	push   eax
c000af7b:	e8 c0 56 ff ff       	call   c0000640 <strcpy>
c000af80:	89 d8                	mov    eax,ebx
c000af82:	e8 1d ff ff ff       	call   c000aea4 <KiGetSymlinkHash(char const*)>
c000af87:	ba 01 00 00 00       	mov    edx,0x1
c000af8c:	0f b7 c0             	movzx  eax,ax
c000af8f:	e8 d6 fd ff ff       	call   c000ad6a <KiSetHashInTable(unsigned short, bool)>
c000af94:	a1 c0 6f 02 c0       	mov    eax,ds:0xc0026fc0
c000af99:	83 c4 10             	add    esp,0x10
c000af9c:	40                   	inc    eax
c000af9d:	a3 c0 6f 02 c0       	mov    ds:0xc0026fc0,eax
c000afa2:	83 f8 03             	cmp    eax,0x3
c000afa5:	7e 09                	jle    c000afb0 <KeRegisterSymlink(char const*, unsigned long long)+0x7e>
c000afa7:	83 c4 08             	add    esp,0x8
c000afaa:	5b                   	pop    ebx
c000afab:	e9 ea fd ff ff       	jmp    c000ad9a <KiFlushSymlinkChanges()>
c000afb0:	83 c4 08             	add    esp,0x8
c000afb3:	5b                   	pop    ebx
c000afb4:	c3                   	ret    

c000afb5 <KiIsSymlinkRegistered(char const*)>:
c000afb5:	55                   	push   ebp
c000afb6:	57                   	push   edi
c000afb7:	56                   	push   esi
c000afb8:	53                   	push   ebx
c000afb9:	81 ec 1c 01 00 00    	sub    esp,0x11c
c000afbf:	8b b4 24 30 01 00 00 	mov    esi,DWORD PTR [esp+0x130]
c000afc6:	89 f0                	mov    eax,esi
c000afc8:	e8 d7 fe ff ff       	call   c000aea4 <KiGetSymlinkHash(char const*)>
c000afcd:	0f b7 c0             	movzx  eax,ax
c000afd0:	e8 7b fd ff ff       	call   c000ad50 <KiIsHashInTable(unsigned short)>
c000afd5:	31 d2                	xor    edx,edx
c000afd7:	88 c1                	mov    cl,al
c000afd9:	31 c0                	xor    eax,eax
c000afdb:	84 c9                	test   cl,cl
c000afdd:	0f 84 31 01 00 00    	je     c000b114 <KiIsSymlinkRegistered(char const*)+0x15f>
c000afe3:	31 db                	xor    ebx,ebx
c000afe5:	39 1d c0 6f 02 c0    	cmp    DWORD PTR ds:0xc0026fc0,ebx
c000afeb:	7e 30                	jle    c000b01d <KiIsSymlinkRegistered(char const*)+0x68>
c000afed:	89 d8                	mov    eax,ebx
c000afef:	51                   	push   ecx
c000aff0:	c1 e0 08             	shl    eax,0x8
c000aff3:	51                   	push   ecx
c000aff4:	05 00 70 02 c0       	add    eax,0xc0027000
c000aff9:	50                   	push   eax
c000affa:	56                   	push   esi
c000affb:	e8 50 57 ff ff       	call   c0000750 <strcmp>
c000b000:	83 c4 10             	add    esp,0x10
c000b003:	85 c0                	test   eax,eax
c000b005:	75 13                	jne    c000b01a <KiIsSymlinkRegistered(char const*)+0x65>
c000b007:	8b 04 dd e0 6f 02 c0 	mov    eax,DWORD PTR [ebx*8-0x3ffd9020]
c000b00e:	8b 14 dd e4 6f 02 c0 	mov    edx,DWORD PTR [ebx*8-0x3ffd901c]
c000b015:	e9 fa 00 00 00       	jmp    c000b114 <KiIsSymlinkRegistered(char const*)+0x15f>
c000b01a:	43                   	inc    ebx
c000b01b:	eb c8                	jmp    c000afe5 <KiIsSymlinkRegistered(char const*)+0x30>
c000b01d:	83 ec 0c             	sub    esp,0xc
c000b020:	68 14 01 00 00       	push   0x114
c000b025:	e8 8c ca ff ff       	call   c0007ab6 <malloc>
c000b02a:	83 c4 0c             	add    esp,0xc
c000b02d:	89 c3                	mov    ebx,eax
c000b02f:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c000b035:	68 2f 17 02 c0       	push   0xc002172f
c000b03a:	50                   	push   eax
c000b03b:	e8 18 0b 00 00       	call   c000bb58 <File::File(char const*, Process*)>
c000b040:	83 c4 10             	add    esp,0x10
c000b043:	85 db                	test   ebx,ebx
c000b045:	75 12                	jne    c000b059 <KiIsSymlinkRegistered(char const*)+0xa4>
c000b047:	83 ec 0c             	sub    esp,0xc
c000b04a:	68 be 17 02 c0       	push   0xc00217be
c000b04f:	e8 d7 65 00 00       	call   c001162b <KePanic(char const*)>
c000b054:	83 c4 10             	add    esp,0x10
c000b057:	eb 10                	jmp    c000b069 <KiIsSymlinkRegistered(char const*)+0xb4>
c000b059:	83 ec 0c             	sub    esp,0xc
c000b05c:	53                   	push   ebx
c000b05d:	e8 d8 0d 00 00       	call   c000be3a <File::exists()>
c000b062:	83 c4 10             	add    esp,0x10
c000b065:	84 c0                	test   al,al
c000b067:	74 de                	je     c000b047 <KiIsSymlinkRegistered(char const*)+0x92>
c000b069:	52                   	push   edx
c000b06a:	52                   	push   edx
c000b06b:	6a 01                	push   0x1
c000b06d:	53                   	push   ebx
c000b06e:	e8 03 0b 00 00       	call   c000bb76 <File::open(FileOpenMode)>
c000b073:	83 c4 10             	add    esp,0x10
c000b076:	85 c0                	test   eax,eax
c000b078:	74 10                	je     c000b08a <KiIsSymlinkRegistered(char const*)+0xd5>
c000b07a:	83 ec 0c             	sub    esp,0xc
c000b07d:	68 d9 17 02 c0       	push   0xc00217d9
c000b082:	e8 a4 65 00 00       	call   c001162b <KePanic(char const*)>
c000b087:	83 c4 10             	add    esp,0x10
c000b08a:	83 ec 0c             	sub    esp,0xc
c000b08d:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b08f:	8d 6c 24 10          	lea    ebp,[esp+0x10]
c000b093:	55                   	push   ebp
c000b094:	8d 7c 24 20          	lea    edi,[esp+0x20]
c000b098:	57                   	push   edi
c000b099:	6a 00                	push   0x0
c000b09b:	68 00 01 00 00       	push   0x100
c000b0a0:	53                   	push   ebx
c000b0a1:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000b0a4:	83 c4 20             	add    esp,0x20
c000b0a7:	81 7c 24 04 00 01 00 00 	cmp    DWORD PTR [esp+0x4],0x100
c000b0af:	75 4b                	jne    c000b0fc <KiIsSymlinkRegistered(char const*)+0x147>
c000b0b1:	83 ec 0c             	sub    esp,0xc
c000b0b4:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b0b6:	55                   	push   ebp
c000b0b7:	8d 54 24 18          	lea    edx,[esp+0x18]
c000b0bb:	52                   	push   edx
c000b0bc:	6a 00                	push   0x0
c000b0be:	6a 08                	push   0x8
c000b0c0:	53                   	push   ebx
c000b0c1:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000b0c4:	83 c4 20             	add    esp,0x20
c000b0c7:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c000b0cc:	75 2e                	jne    c000b0fc <KiIsSymlinkRegistered(char const*)+0x147>
c000b0ce:	50                   	push   eax
c000b0cf:	50                   	push   eax
c000b0d0:	57                   	push   edi
c000b0d1:	56                   	push   esi
c000b0d2:	e8 79 56 ff ff       	call   c0000750 <strcmp>
c000b0d7:	83 c4 10             	add    esp,0x10
c000b0da:	85 c0                	test   eax,eax
c000b0dc:	75 ac                	jne    c000b08a <KiIsSymlinkRegistered(char const*)+0xd5>
c000b0de:	83 ec 0c             	sub    esp,0xc
c000b0e1:	53                   	push   ebx
c000b0e2:	e8 ed 0a 00 00       	call   c000bbd4 <File::close()>
c000b0e7:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b0e9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b0ec:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b0ef:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000b0f3:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000b0f7:	83 c4 10             	add    esp,0x10
c000b0fa:	eb 18                	jmp    c000b114 <KiIsSymlinkRegistered(char const*)+0x15f>
c000b0fc:	83 ec 0c             	sub    esp,0xc
c000b0ff:	53                   	push   ebx
c000b100:	e8 cf 0a 00 00       	call   c000bbd4 <File::close()>
c000b105:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b107:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b10a:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b10d:	83 c4 10             	add    esp,0x10
c000b110:	31 c0                	xor    eax,eax
c000b112:	31 d2                	xor    edx,edx
c000b114:	81 c4 1c 01 00 00    	add    esp,0x11c
c000b11a:	5b                   	pop    ebx
c000b11b:	5e                   	pop    esi
c000b11c:	5f                   	pop    edi
c000b11d:	5d                   	pop    ebp
c000b11e:	c3                   	ret    

c000b11f <KeDereferenceSymlink(char const*, char*)>:
c000b11f:	55                   	push   ebp
c000b120:	57                   	push   edi
c000b121:	56                   	push   esi
c000b122:	53                   	push   ebx
c000b123:	83 ec 44             	sub    esp,0x44
c000b126:	8b 74 24 58          	mov    esi,DWORD PTR [esp+0x58]
c000b12a:	56                   	push   esi
c000b12b:	68 f4 17 02 c0       	push   0xc00217f4
c000b130:	e8 10 f8 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000b135:	89 34 24             	mov    DWORD PTR [esp],esi
c000b138:	e8 78 fe ff ff       	call   c000afb5 <KiIsSymlinkRegistered(char const*)>
c000b13d:	83 c4 10             	add    esp,0x10
c000b140:	89 c7                	mov    edi,eax
c000b142:	89 d0                	mov    eax,edx
c000b144:	09 f8                	or     eax,edi
c000b146:	75 07                	jne    c000b14f <KeDereferenceSymlink(char const*, char*)+0x30>
c000b148:	31 c0                	xor    eax,eax
c000b14a:	e9 e3 01 00 00       	jmp    c000b332 <KeDereferenceSymlink(char const*, char*)+0x213>
c000b14f:	89 d5                	mov    ebp,edx
c000b151:	53                   	push   ebx
c000b152:	53                   	push   ebx
c000b153:	57                   	push   edi
c000b154:	68 0e 18 02 c0       	push   0xc002180e
c000b159:	e8 e7 f7 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000b15e:	58                   	pop    eax
c000b15f:	5a                   	pop    edx
c000b160:	55                   	push   ebp
c000b161:	68 1c 18 02 c0       	push   0xc002181c
c000b166:	e8 da f7 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000b16b:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c000b172:	e8 3f c9 ff ff       	call   c0007ab6 <malloc>
c000b177:	83 c4 0c             	add    esp,0xc
c000b17a:	89 c3                	mov    ebx,eax
c000b17c:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c000b182:	56                   	push   esi
c000b183:	50                   	push   eax
c000b184:	e8 cf 09 00 00       	call   c000bb58 <File::File(char const*, Process*)>
c000b189:	83 c4 10             	add    esp,0x10
c000b18c:	85 db                	test   ebx,ebx
c000b18e:	0f 84 68 01 00 00    	je     c000b2fc <KeDereferenceSymlink(char const*, char*)+0x1dd>
c000b194:	83 ec 0c             	sub    esp,0xc
c000b197:	68 20 24 02 c0       	push   0xc0022420
c000b19c:	e8 a4 f7 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000b1a1:	5a                   	pop    edx
c000b1a2:	59                   	pop    ecx
c000b1a3:	6a 01                	push   0x1
c000b1a5:	53                   	push   ebx
c000b1a6:	e8 cb 09 00 00       	call   c000bb76 <File::open(FileOpenMode)>
c000b1ab:	83 c4 10             	add    esp,0x10
c000b1ae:	85 c0                	test   eax,eax
c000b1b0:	74 0b                	je     c000b1bd <KeDereferenceSymlink(char const*, char*)+0x9e>
c000b1b2:	83 ec 0c             	sub    esp,0xc
c000b1b5:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b1b7:	53                   	push   ebx
c000b1b8:	e9 39 01 00 00       	jmp    c000b2f6 <KeDereferenceSymlink(char const*, char*)+0x1d7>
c000b1bd:	83 ec 0c             	sub    esp,0xc
c000b1c0:	68 c6 0d 02 c0       	push   0xc0020dc6
c000b1c5:	e8 7b f7 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000b1ca:	58                   	pop    eax
c000b1cb:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b1cd:	8d 74 24 18          	lea    esi,[esp+0x18]
c000b1d1:	56                   	push   esi
c000b1d2:	8d 54 24 37          	lea    edx,[esp+0x37]
c000b1d6:	52                   	push   edx
c000b1d7:	6a 00                	push   0x0
c000b1d9:	6a 08                	push   0x8
c000b1db:	53                   	push   ebx
c000b1dc:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000b1df:	83 c4 20             	add    esp,0x20
c000b1e2:	85 c0                	test   eax,eax
c000b1e4:	0f 85 fe 00 00 00    	jne    c000b2e8 <KeDereferenceSymlink(char const*, char*)+0x1c9>
c000b1ea:	83 7c 24 0c 08       	cmp    DWORD PTR [esp+0xc],0x8
c000b1ef:	0f 85 f3 00 00 00    	jne    c000b2e8 <KeDereferenceSymlink(char const*, char*)+0x1c9>
c000b1f5:	83 ec 0c             	sub    esp,0xc
c000b1f8:	68 52 24 02 c0       	push   0xc0022452
c000b1fd:	e8 43 f7 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000b202:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b204:	8d 54 24 20          	lea    edx,[esp+0x20]
c000b208:	89 34 24             	mov    DWORD PTR [esp],esi
c000b20b:	52                   	push   edx
c000b20c:	6a 00                	push   0x0
c000b20e:	6a 08                	push   0x8
c000b210:	53                   	push   ebx
c000b211:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000b214:	83 c4 20             	add    esp,0x20
c000b217:	85 c0                	test   eax,eax
c000b219:	0f 85 c9 00 00 00    	jne    c000b2e8 <KeDereferenceSymlink(char const*, char*)+0x1c9>
c000b21f:	83 7c 24 0c 08       	cmp    DWORD PTR [esp+0xc],0x8
c000b224:	0f 85 be 00 00 00    	jne    c000b2e8 <KeDereferenceSymlink(char const*, char*)+0x1c9>
c000b22a:	39 6c 24 14          	cmp    DWORD PTR [esp+0x14],ebp
c000b22e:	0f 85 14 ff ff ff    	jne    c000b148 <KeDereferenceSymlink(char const*, char*)+0x29>
c000b234:	39 7c 24 10          	cmp    DWORD PTR [esp+0x10],edi
c000b238:	0f 85 0a ff ff ff    	jne    c000b148 <KeDereferenceSymlink(char const*, char*)+0x29>
c000b23e:	83 ec 0c             	sub    esp,0xc
c000b241:	68 2a 18 02 c0       	push   0xc002182a
c000b246:	e8 fa f6 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000b24b:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c000b253:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000b25b:	83 c4 0c             	add    esp,0xc
c000b25e:	8d 44 24 0f          	lea    eax,[esp+0xf]
c000b262:	50                   	push   eax
c000b263:	8d 44 24 20          	lea    eax,[esp+0x20]
c000b267:	50                   	push   eax
c000b268:	53                   	push   ebx
c000b269:	e8 0a 0c 00 00       	call   c000be78 <File::stat(unsigned long long*, bool*)>
c000b26e:	83 c4 10             	add    esp,0x10
c000b271:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000b276:	75 70                	jne    c000b2e8 <KeDereferenceSymlink(char const*, char*)+0x1c9>
c000b278:	31 ff                	xor    edi,edi
c000b27a:	b8 0f 00 00 00       	mov    eax,0xf
c000b27f:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c000b283:	89 f8                	mov    eax,edi
c000b285:	1b 44 24 1c          	sbb    eax,DWORD PTR [esp+0x1c]
c000b289:	73 5d                	jae    c000b2e8 <KeDereferenceSymlink(char const*, char*)+0x1c9>
c000b28b:	83 ec 0c             	sub    esp,0xc
c000b28e:	68 2a 18 02 c0       	push   0xc002182a
c000b293:	e8 ad f6 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000b298:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000b29c:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000b2a0:	83 c0 f0             	add    eax,0xfffffff0
c000b2a3:	b9 ff 00 00 00       	mov    ecx,0xff
c000b2a8:	83 d2 ff             	adc    edx,0xffffffff
c000b2ab:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b2af:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b2b3:	83 c4 10             	add    esp,0x10
c000b2b6:	39 c1                	cmp    ecx,eax
c000b2b8:	19 d7                	sbb    edi,edx
c000b2ba:	72 40                	jb     c000b2fc <KeDereferenceSymlink(char const*, char*)+0x1dd>
c000b2bc:	83 ec 0c             	sub    esp,0xc
c000b2bf:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c000b2c1:	56                   	push   esi
c000b2c2:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000b2c6:	52                   	push   edx
c000b2c7:	50                   	push   eax
c000b2c8:	53                   	push   ebx
c000b2c9:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c000b2cc:	83 c4 20             	add    esp,0x20
c000b2cf:	85 c0                	test   eax,eax
c000b2d1:	75 15                	jne    c000b2e8 <KeDereferenceSymlink(char const*, char*)+0x1c9>
c000b2d3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b2d7:	89 c7                	mov    edi,eax
c000b2d9:	c1 ff 1f             	sar    edi,0x1f
c000b2dc:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c000b2e0:	75 06                	jne    c000b2e8 <KeDereferenceSymlink(char const*, char*)+0x1c9>
c000b2e2:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c000b2e6:	74 19                	je     c000b301 <KeDereferenceSymlink(char const*, char*)+0x1e2>
c000b2e8:	83 ec 0c             	sub    esp,0xc
c000b2eb:	53                   	push   ebx
c000b2ec:	e8 e3 08 00 00       	call   c000bbd4 <File::close()>
c000b2f1:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b2f3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b2f6:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b2f9:	83 c4 10             	add    esp,0x10
c000b2fc:	83 c8 ff             	or     eax,0xffffffff
c000b2ff:	eb 31                	jmp    c000b332 <KeDereferenceSymlink(char const*, char*)+0x213>
c000b301:	83 ec 0c             	sub    esp,0xc
c000b304:	68 32 2f 02 c0       	push   0xc0022f32
c000b309:	e8 37 f6 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000b30e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b311:	e8 be 08 00 00       	call   c000bbd4 <File::close()>
c000b316:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b318:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b31b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b31e:	c7 04 24 2d 18 02 c0 	mov    DWORD PTR [esp],0xc002182d
c000b325:	e8 1b f6 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000b32a:	83 c4 10             	add    esp,0x10
c000b32d:	b8 01 00 00 00       	mov    eax,0x1
c000b332:	83 c4 3c             	add    esp,0x3c
c000b335:	5b                   	pop    ebx
c000b336:	5e                   	pop    esi
c000b337:	5f                   	pop    edi
c000b338:	5d                   	pop    ebp
c000b339:	c3                   	ret    

c000b33a <KeCreateSymlink(char const*, char const*)>:
c000b33a:	55                   	push   ebp
c000b33b:	57                   	push   edi
c000b33c:	56                   	push   esi
c000b33d:	53                   	push   ebx
c000b33e:	83 ec 38             	sub    esp,0x38
c000b341:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c000b345:	68 14 01 00 00       	push   0x114
c000b34a:	e8 67 c7 ff ff       	call   c0007ab6 <malloc>
c000b34f:	6a 00                	push   0x0
c000b351:	89 c3                	mov    ebx,eax
c000b353:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c000b359:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000b35d:	50                   	push   eax
c000b35e:	e8 17 07 00 00       	call   c000ba7a <File::File(char const*, Process*, bool)>
c000b363:	83 c4 20             	add    esp,0x20
c000b366:	b8 01 00 00 00       	mov    eax,0x1
c000b36b:	85 db                	test   ebx,ebx
c000b36d:	0f 84 fb 00 00 00    	je     c000b46e <KeCreateSymlink(char const*, char const*)+0x134>
c000b373:	52                   	push   edx
c000b374:	52                   	push   edx
c000b375:	6a 12                	push   0x12
c000b377:	53                   	push   ebx
c000b378:	e8 f9 07 00 00       	call   c000bb76 <File::open(FileOpenMode)>
c000b37d:	83 c4 10             	add    esp,0x10
c000b380:	85 c0                	test   eax,eax
c000b382:	74 0b                	je     c000b38f <KeCreateSymlink(char const*, char const*)+0x55>
c000b384:	83 ec 0c             	sub    esp,0xc
c000b387:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b389:	53                   	push   ebx
c000b38a:	e9 d4 00 00 00       	jmp    c000b463 <KeCreateSymlink(char const*, char const*)+0x129>
c000b38f:	8d 7c 24 17          	lea    edi,[esp+0x17]
c000b393:	be 30 18 02 c0       	mov    esi,0xc0021830
c000b398:	b9 09 00 00 00       	mov    ecx,0x9
c000b39d:	fc                   	cld    
c000b39e:	83 ec 0c             	sub    esp,0xc
c000b3a1:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000b3a3:	8d 74 24 10          	lea    esi,[esp+0x10]
c000b3a7:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b3a9:	56                   	push   esi
c000b3aa:	8d 54 24 27          	lea    edx,[esp+0x27]
c000b3ae:	52                   	push   edx
c000b3af:	6a 00                	push   0x0
c000b3b1:	6a 08                	push   0x8
c000b3b3:	53                   	push   ebx
c000b3b4:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000b3b7:	83 c4 20             	add    esp,0x20
c000b3ba:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c000b3bf:	0f 85 90 00 00 00    	jne    c000b455 <KeCreateSymlink(char const*, char const*)+0x11b>
c000b3c5:	85 c0                	test   eax,eax
c000b3c7:	0f 85 88 00 00 00    	jne    c000b455 <KeCreateSymlink(char const*, char const*)+0x11b>
c000b3cd:	e8 f3 fa ff ff       	call   c000aec5 <KiCreateSymlinkID()>
c000b3d2:	83 ec 0c             	sub    esp,0xc
c000b3d5:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000b3d9:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000b3dd:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b3df:	56                   	push   esi
c000b3e0:	8d 54 24 18          	lea    edx,[esp+0x18]
c000b3e4:	52                   	push   edx
c000b3e5:	6a 00                	push   0x0
c000b3e7:	6a 08                	push   0x8
c000b3e9:	53                   	push   ebx
c000b3ea:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000b3ed:	83 c4 20             	add    esp,0x20
c000b3f0:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c000b3f5:	75 5e                	jne    c000b455 <KeCreateSymlink(char const*, char const*)+0x11b>
c000b3f7:	85 c0                	test   eax,eax
c000b3f9:	75 5a                	jne    c000b455 <KeCreateSymlink(char const*, char const*)+0x11b>
c000b3fb:	83 ec 0c             	sub    esp,0xc
c000b3fe:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b400:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c000b403:	55                   	push   ebp
c000b404:	e8 67 51 ff ff       	call   c0000570 <strlen>
c000b409:	89 34 24             	mov    DWORD PTR [esp],esi
c000b40c:	31 d2                	xor    edx,edx
c000b40e:	55                   	push   ebp
c000b40f:	52                   	push   edx
c000b410:	50                   	push   eax
c000b411:	53                   	push   ebx
c000b412:	ff d7                	call   edi
c000b414:	83 c4 14             	add    esp,0x14
c000b417:	89 c6                	mov    esi,eax
c000b419:	55                   	push   ebp
c000b41a:	e8 51 51 ff ff       	call   c0000570 <strlen>
c000b41f:	83 c4 10             	add    esp,0x10
c000b422:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c000b426:	75 2d                	jne    c000b455 <KeCreateSymlink(char const*, char const*)+0x11b>
c000b428:	85 f6                	test   esi,esi
c000b42a:	75 29                	jne    c000b455 <KeCreateSymlink(char const*, char const*)+0x11b>
c000b42c:	50                   	push   eax
c000b42d:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b431:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b435:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c000b439:	e8 f4 fa ff ff       	call   c000af32 <KeRegisterSymlink(char const*, unsigned long long)>
c000b43e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b441:	e8 8e 07 00 00       	call   c000bbd4 <File::close()>
c000b446:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b448:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b44b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b44e:	83 c4 10             	add    esp,0x10
c000b451:	31 c0                	xor    eax,eax
c000b453:	eb 19                	jmp    c000b46e <KeCreateSymlink(char const*, char const*)+0x134>
c000b455:	83 ec 0c             	sub    esp,0xc
c000b458:	53                   	push   ebx
c000b459:	e8 76 07 00 00       	call   c000bbd4 <File::close()>
c000b45e:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b460:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b463:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b466:	83 c4 10             	add    esp,0x10
c000b469:	b8 01 00 00 00       	mov    eax,0x1
c000b46e:	83 c4 2c             	add    esp,0x2c
c000b471:	5b                   	pop    ebx
c000b472:	5e                   	pop    esi
c000b473:	5f                   	pop    edi
c000b474:	5d                   	pop    ebp
c000b475:	c3                   	ret    

c000b476 <KeInitialiseSymlinks()>:
c000b476:	57                   	push   edi
c000b477:	56                   	push   esi
c000b478:	53                   	push   ebx
c000b479:	81 ec 14 01 00 00    	sub    esp,0x114
c000b47f:	c7 05 c0 6f 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026fc0,0x0
c000b489:	68 00 20 00 00       	push   0x2000
c000b48e:	6a 00                	push   0x0
c000b490:	68 00 74 02 c0       	push   0xc0027400
c000b495:	e8 56 50 ff ff       	call   c00004f0 <memset>
c000b49a:	5b                   	pop    ebx
c000b49b:	5e                   	pop    esi
c000b49c:	6a 00                	push   0x0
c000b49e:	68 9f ae 00 c0       	push   0xc000ae9f
c000b4a3:	e8 70 59 00 00       	call   c0010e18 <KeRegisterAtexit(void (*)(void*), void*)>
c000b4a8:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c000b4af:	e8 02 c6 ff ff       	call   c0007ab6 <malloc>
c000b4b4:	83 c4 0c             	add    esp,0xc
c000b4b7:	89 c3                	mov    ebx,eax
c000b4b9:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c000b4bf:	68 2f 17 02 c0       	push   0xc002172f
c000b4c4:	50                   	push   eax
c000b4c5:	e8 8e 06 00 00       	call   c000bb58 <File::File(char const*, Process*)>
c000b4ca:	83 c4 10             	add    esp,0x10
c000b4cd:	85 db                	test   ebx,ebx
c000b4cf:	75 10                	jne    c000b4e1 <KeInitialiseSymlinks()+0x6b>
c000b4d1:	83 ec 0c             	sub    esp,0xc
c000b4d4:	68 39 18 02 c0       	push   0xc0021839
c000b4d9:	e8 4d 61 00 00       	call   c001162b <KePanic(char const*)>
c000b4de:	83 c4 10             	add    esp,0x10
c000b4e1:	83 ec 0c             	sub    esp,0xc
c000b4e4:	53                   	push   ebx
c000b4e5:	e8 50 09 00 00       	call   c000be3a <File::exists()>
c000b4ea:	83 c4 10             	add    esp,0x10
c000b4ed:	84 c0                	test   al,al
c000b4ef:	75 3a                	jne    c000b52b <KeInitialiseSymlinks()+0xb5>
c000b4f1:	51                   	push   ecx
c000b4f2:	51                   	push   ecx
c000b4f3:	6a 12                	push   0x12
c000b4f5:	53                   	push   ebx
c000b4f6:	e8 7b 06 00 00       	call   c000bb76 <File::open(FileOpenMode)>
c000b4fb:	83 c4 10             	add    esp,0x10
c000b4fe:	85 c0                	test   eax,eax
c000b500:	74 10                	je     c000b512 <KeInitialiseSymlinks()+0x9c>
c000b502:	83 ec 0c             	sub    esp,0xc
c000b505:	68 56 18 02 c0       	push   0xc0021856
c000b50a:	e8 1c 61 00 00       	call   c001162b <KePanic(char const*)>
c000b50f:	83 c4 10             	add    esp,0x10
c000b512:	83 ec 0c             	sub    esp,0xc
c000b515:	53                   	push   ebx
c000b516:	e8 b9 06 00 00       	call   c000bbd4 <File::close()>
c000b51b:	83 c4 10             	add    esp,0x10
c000b51e:	85 db                	test   ebx,ebx
c000b520:	0f 84 98 00 00 00    	je     c000b5be <KeInitialiseSymlinks()+0x148>
c000b526:	e9 87 00 00 00       	jmp    c000b5b2 <KeInitialiseSymlinks()+0x13c>
c000b52b:	52                   	push   edx
c000b52c:	52                   	push   edx
c000b52d:	6a 01                	push   0x1
c000b52f:	53                   	push   ebx
c000b530:	e8 41 06 00 00       	call   c000bb76 <File::open(FileOpenMode)>
c000b535:	83 c4 10             	add    esp,0x10
c000b538:	85 c0                	test   eax,eax
c000b53a:	74 10                	je     c000b54c <KeInitialiseSymlinks()+0xd6>
c000b53c:	83 ec 0c             	sub    esp,0xc
c000b53f:	68 73 18 02 c0       	push   0xc0021873
c000b544:	e8 e2 60 00 00       	call   c001162b <KePanic(char const*)>
c000b549:	83 c4 10             	add    esp,0x10
c000b54c:	83 ec 0c             	sub    esp,0xc
c000b54f:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b551:	8d 7c 24 10          	lea    edi,[esp+0x10]
c000b555:	57                   	push   edi
c000b556:	8d 74 24 20          	lea    esi,[esp+0x20]
c000b55a:	56                   	push   esi
c000b55b:	6a 00                	push   0x0
c000b55d:	68 00 01 00 00       	push   0x100
c000b562:	53                   	push   ebx
c000b563:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000b566:	83 c4 20             	add    esp,0x20
c000b569:	81 7c 24 04 00 01 00 00 	cmp    DWORD PTR [esp+0x4],0x100
c000b571:	75 33                	jne    c000b5a6 <KeInitialiseSymlinks()+0x130>
c000b573:	83 ec 0c             	sub    esp,0xc
c000b576:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b578:	57                   	push   edi
c000b579:	8d 54 24 18          	lea    edx,[esp+0x18]
c000b57d:	52                   	push   edx
c000b57e:	6a 00                	push   0x0
c000b580:	6a 08                	push   0x8
c000b582:	53                   	push   ebx
c000b583:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000b586:	83 c4 20             	add    esp,0x20
c000b589:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c000b58e:	75 16                	jne    c000b5a6 <KeInitialiseSymlinks()+0x130>
c000b590:	89 f0                	mov    eax,esi
c000b592:	e8 0d f9 ff ff       	call   c000aea4 <KiGetSymlinkHash(char const*)>
c000b597:	ba 01 00 00 00       	mov    edx,0x1
c000b59c:	0f b7 c0             	movzx  eax,ax
c000b59f:	e8 c6 f7 ff ff       	call   c000ad6a <KiSetHashInTable(unsigned short, bool)>
c000b5a4:	eb a6                	jmp    c000b54c <KeInitialiseSymlinks()+0xd6>
c000b5a6:	83 ec 0c             	sub    esp,0xc
c000b5a9:	53                   	push   ebx
c000b5aa:	e8 25 06 00 00       	call   c000bbd4 <File::close()>
c000b5af:	83 c4 10             	add    esp,0x10
c000b5b2:	83 ec 0c             	sub    esp,0xc
c000b5b5:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b5b7:	53                   	push   ebx
c000b5b8:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b5bb:	83 c4 10             	add    esp,0x10
c000b5be:	50                   	push   eax
c000b5bf:	50                   	push   eax
c000b5c0:	68 8e 18 02 c0       	push   0xc002188e
c000b5c5:	68 9c 18 02 c0       	push   0xc002189c
c000b5ca:	e8 6b fd ff ff       	call   c000b33a <KeCreateSymlink(char const*, char const*)>
c000b5cf:	81 c4 20 01 00 00    	add    esp,0x120
c000b5d5:	5b                   	pop    ebx
c000b5d6:	5e                   	pop    esi
c000b5d7:	5f                   	pop    edi
c000b5d8:	c3                   	ret    
c000b5d9:	90                   	nop

c000b5da <File::read(unsigned long long, void*, int*)>:
c000b5da:	53                   	push   ebx
c000b5db:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000b5df:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000b5e3:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000b5ea:	83 f8 19             	cmp    eax,0x19
c000b5ed:	77 35                	ja     c000b624 <File::read(unsigned long long, void*, int*)+0x4a>
c000b5ef:	8b 04 85 80 b8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4780]
c000b5f6:	85 c0                	test   eax,eax
c000b5f8:	74 2a                	je     c000b624 <File::read(unsigned long long, void*, int*)+0x4a>
c000b5fa:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000b600:	85 c0                	test   eax,eax
c000b602:	74 20                	je     c000b624 <File::read(unsigned long long, void*, int*)+0x4a>
c000b604:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b608:	74 21                	je     c000b62b <File::read(unsigned long long, void*, int*)+0x51>
c000b60a:	8b 08                	mov    ecx,DWORD PTR [eax]
c000b60c:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000b610:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000b616:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b61a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b61e:	5b                   	pop    ebx
c000b61f:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c000b622:	ff e0                	jmp    eax
c000b624:	b8 0b 00 00 00       	mov    eax,0xb
c000b629:	eb 05                	jmp    c000b630 <File::read(unsigned long long, void*, int*)+0x56>
c000b62b:	b8 05 00 00 00       	mov    eax,0x5
c000b630:	5b                   	pop    ebx
c000b631:	c3                   	ret    

c000b632 <File::write(unsigned long long, void*, int*)>:
c000b632:	53                   	push   ebx
c000b633:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000b637:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000b63b:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000b642:	83 f8 19             	cmp    eax,0x19
c000b645:	77 35                	ja     c000b67c <File::write(unsigned long long, void*, int*)+0x4a>
c000b647:	8b 04 85 80 b8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4780]
c000b64e:	85 c0                	test   eax,eax
c000b650:	74 2a                	je     c000b67c <File::write(unsigned long long, void*, int*)+0x4a>
c000b652:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000b658:	85 c0                	test   eax,eax
c000b65a:	74 20                	je     c000b67c <File::write(unsigned long long, void*, int*)+0x4a>
c000b65c:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b660:	74 21                	je     c000b683 <File::write(unsigned long long, void*, int*)+0x51>
c000b662:	8b 08                	mov    ecx,DWORD PTR [eax]
c000b664:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000b668:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000b66e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b672:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b676:	5b                   	pop    ebx
c000b677:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c000b67a:	ff e0                	jmp    eax
c000b67c:	b8 0b 00 00 00       	mov    eax,0xb
c000b681:	eb 05                	jmp    c000b688 <File::write(unsigned long long, void*, int*)+0x56>
c000b683:	b8 05 00 00 00       	mov    eax,0x5
c000b688:	5b                   	pop    ebx
c000b689:	c3                   	ret    

c000b68a <Directory::read(unsigned long long, void*, int*)>:
c000b68a:	53                   	push   ebx
c000b68b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000b68f:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000b693:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000b69a:	83 f8 19             	cmp    eax,0x19
c000b69d:	77 35                	ja     c000b6d4 <Directory::read(unsigned long long, void*, int*)+0x4a>
c000b69f:	8b 04 85 80 b8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4780]
c000b6a6:	85 c0                	test   eax,eax
c000b6a8:	74 2a                	je     c000b6d4 <Directory::read(unsigned long long, void*, int*)+0x4a>
c000b6aa:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000b6b0:	85 c0                	test   eax,eax
c000b6b2:	74 20                	je     c000b6d4 <Directory::read(unsigned long long, void*, int*)+0x4a>
c000b6b4:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b6b8:	74 21                	je     c000b6db <Directory::read(unsigned long long, void*, int*)+0x51>
c000b6ba:	8b 08                	mov    ecx,DWORD PTR [eax]
c000b6bc:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000b6c0:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000b6c6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b6ca:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b6ce:	5b                   	pop    ebx
c000b6cf:	8b 41 54             	mov    eax,DWORD PTR [ecx+0x54]
c000b6d2:	ff e0                	jmp    eax
c000b6d4:	b8 0b 00 00 00       	mov    eax,0xb
c000b6d9:	eb 05                	jmp    c000b6e0 <Directory::read(unsigned long long, void*, int*)+0x56>
c000b6db:	b8 05 00 00 00       	mov    eax,0x5
c000b6e0:	5b                   	pop    ebx
c000b6e1:	c3                   	ret    

c000b6e2 <Directory::write(unsigned long long, void*, int*)>:
c000b6e2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b6e6:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c000b6ed:	b8 0b 00 00 00       	mov    eax,0xb
c000b6f2:	83 fa 19             	cmp    edx,0x19
c000b6f5:	77 18                	ja     c000b70f <Directory::write(unsigned long long, void*, int*)+0x2d>
c000b6f7:	8b 14 95 80 b8 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd4780]
c000b6fe:	85 d2                	test   edx,edx
c000b700:	74 0d                	je     c000b70f <Directory::write(unsigned long long, void*, int*)+0x2d>
c000b702:	83 ba 74 01 00 00 01 	cmp    DWORD PTR [edx+0x174],0x1
c000b709:	19 c0                	sbb    eax,eax
c000b70b:	83 e0 0a             	and    eax,0xa
c000b70e:	40                   	inc    eax
c000b70f:	c3                   	ret    

c000b710 <File::isAtty()>:
c000b710:	31 c0                	xor    eax,eax
c000b712:	c3                   	ret    
c000b713:	90                   	nop

c000b714 <Directory::isAtty()>:
c000b714:	31 c0                	xor    eax,eax
c000b716:	c3                   	ret    
c000b717:	90                   	nop

c000b718 <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c000b718:	b8 0a 00 00 00       	mov    eax,0xa
c000b71d:	c3                   	ret    

c000b71e <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c000b71e:	b8 0a 00 00 00       	mov    eax,0xa
c000b723:	c3                   	ret    

c000b724 <Filesystem::allocateSwapfile(char const*, int)>:
c000b724:	31 c0                	xor    eax,eax
c000b726:	31 d2                	xor    edx,edx
c000b728:	c3                   	ret    
c000b729:	90                   	nop

c000b72a <File::~File()>:
c000b72a:	83 ec 0c             	sub    esp,0xc
c000b72d:	ba 54 19 02 c0       	mov    edx,0xc0021954
c000b732:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b736:	89 10                	mov    DWORD PTR [eax],edx
c000b738:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b73c:	83 ec 0c             	sub    esp,0xc
c000b73f:	50                   	push   eax
c000b740:	e8 5f dc ff ff       	call   c00093a4 <UnixFile::~UnixFile()>
c000b745:	83 c4 10             	add    esp,0x10
c000b748:	90                   	nop
c000b749:	83 c4 0c             	add    esp,0xc
c000b74c:	c3                   	ret    
c000b74d:	90                   	nop

c000b74e <File::~File()>:
c000b74e:	83 ec 0c             	sub    esp,0xc
c000b751:	83 ec 0c             	sub    esp,0xc
c000b754:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b758:	e8 cd ff ff ff       	call   c000b72a <File::~File()>
c000b75d:	83 c4 10             	add    esp,0x10
c000b760:	83 ec 08             	sub    esp,0x8
c000b763:	68 14 01 00 00       	push   0x114
c000b768:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b76c:	e8 a7 f0 ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c000b771:	83 c4 10             	add    esp,0x10
c000b774:	83 c4 0c             	add    esp,0xc
c000b777:	c3                   	ret    

c000b778 <Directory::~Directory()>:
c000b778:	83 ec 0c             	sub    esp,0xc
c000b77b:	ba 70 19 02 c0       	mov    edx,0xc0021970
c000b780:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b784:	89 10                	mov    DWORD PTR [eax],edx
c000b786:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b78a:	83 ec 0c             	sub    esp,0xc
c000b78d:	50                   	push   eax
c000b78e:	e8 11 dc ff ff       	call   c00093a4 <UnixFile::~UnixFile()>
c000b793:	83 c4 10             	add    esp,0x10
c000b796:	90                   	nop
c000b797:	83 c4 0c             	add    esp,0xc
c000b79a:	c3                   	ret    
c000b79b:	90                   	nop

c000b79c <Directory::~Directory()>:
c000b79c:	83 ec 0c             	sub    esp,0xc
c000b79f:	83 ec 0c             	sub    esp,0xc
c000b7a2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b7a6:	e8 cd ff ff ff       	call   c000b778 <Directory::~Directory()>
c000b7ab:	83 c4 10             	add    esp,0x10
c000b7ae:	83 ec 08             	sub    esp,0x8
c000b7b1:	68 14 01 00 00       	push   0x114
c000b7b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b7ba:	e8 59 f0 ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c000b7bf:	83 c4 10             	add    esp,0x10
c000b7c2:	83 c4 0c             	add    esp,0xc
c000b7c5:	c3                   	ret    

c000b7c6 <Filesystem::Filesystem()>:
c000b7c6:	ba e8 18 02 c0       	mov    edx,0xc00218e8
c000b7cb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b7cf:	89 10                	mov    DWORD PTR [eax],edx
c000b7d1:	8b 15 04 94 02 c0    	mov    edx,DWORD PTR ds:0xc0029404
c000b7d7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b7db:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000b7de:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b7e2:	a3 04 94 02 c0       	mov    ds:0xc0029404,eax
c000b7e7:	90                   	nop
c000b7e8:	c3                   	ret    
c000b7e9:	90                   	nop

c000b7ea <Filesystem::~Filesystem()>:
c000b7ea:	ba e8 18 02 c0       	mov    edx,0xc00218e8
c000b7ef:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b7f3:	89 10                	mov    DWORD PTR [eax],edx
c000b7f5:	90                   	nop
c000b7f6:	c3                   	ret    
c000b7f7:	90                   	nop

c000b7f8 <Filesystem::~Filesystem()>:
c000b7f8:	83 ec 0c             	sub    esp,0xc
c000b7fb:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b7ff:	e8 e6 ff ff ff       	call   c000b7ea <Filesystem::~Filesystem()>
c000b804:	83 c4 04             	add    esp,0x4
c000b807:	83 ec 08             	sub    esp,0x8
c000b80a:	6a 08                	push   0x8
c000b80c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b810:	e8 03 f0 ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c000b815:	83 c4 10             	add    esp,0x10
c000b818:	83 c4 0c             	add    esp,0xc
c000b81b:	c3                   	ret    

c000b81c <Fs::getcwd(Process*, char*, int)>:
c000b81c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000b820:	31 c0                	xor    eax,eax
c000b822:	8d 0c 02             	lea    ecx,[edx+eax*1]
c000b825:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000b829:	7d 15                	jge    c000b840 <Fs::getcwd(Process*, char*, int)+0x24>
c000b82b:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000b82f:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c000b836:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c000b839:	84 c9                	test   cl,cl
c000b83b:	74 06                	je     c000b843 <Fs::getcwd(Process*, char*, int)+0x27>
c000b83d:	40                   	inc    eax
c000b83e:	eb e2                	jmp    c000b822 <Fs::getcwd(Process*, char*, int)+0x6>
c000b840:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c000b843:	31 c0                	xor    eax,eax
c000b845:	c3                   	ret    

c000b846 <Fs::initVFS()>:
c000b846:	83 ec 18             	sub    esp,0x18
c000b849:	6a 08                	push   0x8
c000b84b:	e8 66 c2 ff ff       	call   c0007ab6 <malloc>
c000b850:	89 04 24             	mov    DWORD PTR [esp],eax
c000b853:	e8 a4 e3 00 00       	call   c0019bfc <FAT::FAT()>
c000b858:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000b85f:	e8 52 c2 ff ff       	call   c0007ab6 <malloc>
c000b864:	89 04 24             	mov    DWORD PTR [esp],eax
c000b867:	e8 bc f2 00 00       	call   c001ab28 <ISO9660::ISO9660()>
c000b86c:	83 c4 1c             	add    esp,0x1c
c000b86f:	c3                   	ret    

c000b870 <Fs::standardiseFiles(char*, char const*, char const*, bool)>:
c000b870:	55                   	push   ebp
c000b871:	57                   	push   edi
c000b872:	56                   	push   esi
c000b873:	53                   	push   ebx
c000b874:	81 ec 10 04 00 00    	sub    esp,0x410
c000b87a:	8b ac 24 28 04 00 00 	mov    ebp,DWORD PTR [esp+0x428]
c000b881:	8b b4 24 24 04 00 00 	mov    esi,DWORD PTR [esp+0x424]
c000b888:	0f b6 9c 24 30 04 00 00 	movzx  ebx,BYTE PTR [esp+0x430]
c000b890:	68 00 04 00 00       	push   0x400
c000b895:	6a 00                	push   0x0
c000b897:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c000b89b:	57                   	push   edi
c000b89c:	e8 4f 4c ff ff       	call   c00004f0 <memset>
c000b8a1:	83 c4 10             	add    esp,0x10
c000b8a4:	80 7d 01 3a          	cmp    BYTE PTR [ebp+0x1],0x3a
c000b8a8:	75 0b                	jne    c000b8b5 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x45>
c000b8aa:	50                   	push   eax
c000b8ab:	50                   	push   eax
c000b8ac:	55                   	push   ebp
c000b8ad:	57                   	push   edi
c000b8ae:	e8 8d 4d ff ff       	call   c0000640 <strcpy>
c000b8b3:	eb 51                	jmp    c000b906 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x96>
c000b8b5:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c000b8b9:	83 f8 5c             	cmp    eax,0x5c
c000b8bc:	74 05                	je     c000b8c3 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x53>
c000b8be:	83 f8 2f             	cmp    eax,0x2f
c000b8c1:	75 1e                	jne    c000b8e1 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x71>
c000b8c3:	8b 84 24 28 04 00 00 	mov    eax,DWORD PTR [esp+0x428]
c000b8ca:	8a 00                	mov    al,BYTE PTR [eax]
c000b8cc:	3c 60                	cmp    al,0x60
c000b8ce:	7e 03                	jle    c000b8d3 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x63>
c000b8d0:	83 e8 20             	sub    eax,0x20
c000b8d3:	88 04 24             	mov    BYTE PTR [esp],al
c000b8d6:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c000b8dd:	50                   	push   eax
c000b8de:	50                   	push   eax
c000b8df:	eb 1e                	jmp    c000b8ff <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x8f>
c000b8e1:	50                   	push   eax
c000b8e2:	50                   	push   eax
c000b8e3:	ff b4 24 30 04 00 00 	push   DWORD PTR [esp+0x430]
c000b8ea:	57                   	push   edi
c000b8eb:	e8 50 4d ff ff       	call   c0000640 <strcpy>
c000b8f0:	58                   	pop    eax
c000b8f1:	5a                   	pop    edx
c000b8f2:	68 a3 28 02 c0       	push   0xc00228a3
c000b8f7:	57                   	push   edi
c000b8f8:	e8 43 4f ff ff       	call   c0000840 <strcat>
c000b8fd:	59                   	pop    ecx
c000b8fe:	58                   	pop    eax
c000b8ff:	55                   	push   ebp
c000b900:	57                   	push   edi
c000b901:	e8 3a 4f ff ff       	call   c0000840 <strcat>
c000b906:	83 c4 10             	add    esp,0x10
c000b909:	8a 04 24             	mov    al,BYTE PTR [esp]
c000b90c:	3c 60                	cmp    al,0x60
c000b90e:	7e 03                	jle    c000b913 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xa3>
c000b910:	83 e8 20             	sub    eax,0x20
c000b913:	88 04 24             	mov    BYTE PTR [esp],al
c000b916:	88 06                	mov    BYTE PTR [esi],al
c000b918:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c000b91f:	66 c7 46 01 3a 2f    	mov    WORD PTR [esi+0x1],0x2f3a
c000b925:	c6 46 03 00          	mov    BYTE PTR [esi+0x3],0x0
c000b929:	bf 03 00 00 00       	mov    edi,0x3
c000b92e:	b8 03 00 00 00       	mov    eax,0x3
c000b933:	0f be 2c 3c          	movsx  ebp,BYTE PTR [esp+edi*1]
c000b937:	89 e9                	mov    ecx,ebp
c000b939:	85 ed                	test   ebp,ebp
c000b93b:	0f 84 97 00 00 00    	je     c000b9d8 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x168>
c000b941:	8d 57 01             	lea    edx,[edi+0x1]
c000b944:	83 fd 5c             	cmp    ebp,0x5c
c000b947:	74 05                	je     c000b94e <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xde>
c000b949:	83 fd 2f             	cmp    ebp,0x2f
c000b94c:	75 12                	jne    c000b960 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c000b94e:	89 c5                	mov    ebp,eax
c000b950:	80 7c 06 ff 2f       	cmp    BYTE PTR [esi+eax*1-0x1],0x2f
c000b955:	74 09                	je     c000b960 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c000b957:	40                   	inc    eax
c000b958:	c6 04 2e 2f          	mov    BYTE PTR [esi+ebp*1],0x2f
c000b95c:	89 d7                	mov    edi,edx
c000b95e:	eb d3                	jmp    c000b933 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xc3>
c000b960:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c000b965:	0f be e9             	movsx  ebp,cl
c000b968:	75 5e                	jne    c000b9c8 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x158>
c000b96a:	83 fd 2e             	cmp    ebp,0x2e
c000b96d:	75 59                	jne    c000b9c8 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x158>
c000b96f:	80 3c 14 2e          	cmp    BYTE PTR [esp+edx*1],0x2e
c000b973:	0f be 6c 3c 02       	movsx  ebp,BYTE PTR [esp+edi*1+0x2]
c000b978:	74 18                	je     c000b992 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x122>
c000b97a:	83 fd 2e             	cmp    ebp,0x2e
c000b97d:	74 53                	je     c000b9d2 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x162>
c000b97f:	89 fa                	mov    edx,edi
c000b981:	42                   	inc    edx
c000b982:	0f be 0c 14          	movsx  ecx,BYTE PTR [esp+edx*1]
c000b986:	83 f9 2f             	cmp    ecx,0x2f
c000b989:	74 f6                	je     c000b981 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x111>
c000b98b:	83 f9 5c             	cmp    ecx,0x5c
c000b98e:	74 f1                	je     c000b981 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x111>
c000b990:	eb ca                	jmp    c000b95c <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xec>
c000b992:	83 fd 2e             	cmp    ebp,0x2e
c000b995:	74 3b                	je     c000b9d2 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x162>
c000b997:	83 f8 03             	cmp    eax,0x3
c000b99a:	74 c0                	je     c000b95c <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xec>
c000b99c:	42                   	inc    edx
c000b99d:	0f be 0c 14          	movsx  ecx,BYTE PTR [esp+edx*1]
c000b9a1:	83 f9 5c             	cmp    ecx,0x5c
c000b9a4:	74 f6                	je     c000b99c <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x12c>
c000b9a6:	83 f9 2f             	cmp    ecx,0x2f
c000b9a9:	74 f1                	je     c000b99c <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x12c>
c000b9ab:	48                   	dec    eax
c000b9ac:	80 3c 06 2f          	cmp    BYTE PTR [esi+eax*1],0x2f
c000b9b0:	75 06                	jne    c000b9b8 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x148>
c000b9b2:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c000b9b6:	eb f3                	jmp    c000b9ab <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x13b>
c000b9b8:	80 3c 06 2f          	cmp    BYTE PTR [esi+eax*1],0x2f
c000b9bc:	74 07                	je     c000b9c5 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x155>
c000b9be:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c000b9c2:	48                   	dec    eax
c000b9c3:	eb f3                	jmp    c000b9b8 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x148>
c000b9c5:	40                   	inc    eax
c000b9c6:	eb 94                	jmp    c000b95c <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xec>
c000b9c8:	83 fd 5c             	cmp    ebp,0x5c
c000b9cb:	74 8f                	je     c000b95c <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xec>
c000b9cd:	83 fd 2f             	cmp    ebp,0x2f
c000b9d0:	74 8a                	je     c000b95c <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xec>
c000b9d2:	88 0c 06             	mov    BYTE PTR [esi+eax*1],cl
c000b9d5:	40                   	inc    eax
c000b9d6:	eb 84                	jmp    c000b95c <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xec>
c000b9d8:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c000b9dc:	83 ec 0c             	sub    esp,0xc
c000b9df:	56                   	push   esi
c000b9e0:	e8 8b 4b ff ff       	call   c0000570 <strlen>
c000b9e5:	83 c4 10             	add    esp,0x10
c000b9e8:	80 7c 06 ff 2e       	cmp    BYTE PTR [esi+eax*1-0x1],0x2e
c000b9ed:	74 17                	je     c000ba06 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x196>
c000b9ef:	83 ec 0c             	sub    esp,0xc
c000b9f2:	56                   	push   esi
c000b9f3:	e8 78 4b ff ff       	call   c0000570 <strlen>
c000b9f8:	83 c4 10             	add    esp,0x10
c000b9fb:	80 7c 06 ff 2f       	cmp    BYTE PTR [esi+eax*1-0x1],0x2f
c000ba00:	74 04                	je     c000ba06 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x196>
c000ba02:	31 ff                	xor    edi,edi
c000ba04:	eb 4c                	jmp    c000ba52 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1e2>
c000ba06:	83 ec 0c             	sub    esp,0xc
c000ba09:	56                   	push   esi
c000ba0a:	e8 61 4b ff ff       	call   c0000570 <strlen>
c000ba0f:	83 c4 10             	add    esp,0x10
c000ba12:	80 7c 06 fe 3a       	cmp    BYTE PTR [esi+eax*1-0x2],0x3a
c000ba17:	74 e9                	je     c000ba02 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x192>
c000ba19:	83 ec 0c             	sub    esp,0xc
c000ba1c:	56                   	push   esi
c000ba1d:	e8 4e 4b ff ff       	call   c0000570 <strlen>
c000ba22:	83 c4 10             	add    esp,0x10
c000ba25:	c6 44 06 ff 00       	mov    BYTE PTR [esi+eax*1-0x1],0x0
c000ba2a:	eb b0                	jmp    c000b9dc <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x16c>
c000ba2c:	50                   	push   eax
c000ba2d:	50                   	push   eax
c000ba2e:	56                   	push   esi
c000ba2f:	8d 6c 24 0c          	lea    ebp,[esp+0xc]
c000ba33:	55                   	push   ebp
c000ba34:	e8 07 4c ff ff       	call   c0000640 <strcpy>
c000ba39:	5a                   	pop    edx
c000ba3a:	59                   	pop    ecx
c000ba3b:	56                   	push   esi
c000ba3c:	55                   	push   ebp
c000ba3d:	e8 dd f6 ff ff       	call   c000b11f <KeDereferenceSymlink(char const*, char*)>
c000ba42:	83 c4 10             	add    esp,0x10
c000ba45:	48                   	dec    eax
c000ba46:	75 27                	jne    c000ba6f <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1ff>
c000ba48:	8d 47 01             	lea    eax,[edi+0x1]
c000ba4b:	83 ff 14             	cmp    edi,0x14
c000ba4e:	74 08                	je     c000ba58 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1e8>
c000ba50:	89 c7                	mov    edi,eax
c000ba52:	85 db                	test   ebx,ebx
c000ba54:	75 d6                	jne    c000ba2c <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1bc>
c000ba56:	eb 17                	jmp    c000ba6f <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1ff>
c000ba58:	83 ec 0c             	sub    esp,0xc
c000ba5b:	bf 15 00 00 00       	mov    edi,0x15
c000ba60:	68 ba 18 02 c0       	push   0xc00218ba
c000ba65:	e8 c1 5b 00 00       	call   c001162b <KePanic(char const*)>
c000ba6a:	83 c4 10             	add    esp,0x10
c000ba6d:	eb e3                	jmp    c000ba52 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1e2>
c000ba6f:	81 c4 0c 04 00 00    	add    esp,0x40c
c000ba75:	5b                   	pop    ebx
c000ba76:	5e                   	pop    esi
c000ba77:	5f                   	pop    edi
c000ba78:	5d                   	pop    ebp
c000ba79:	c3                   	ret    

c000ba7a <File::File(char const*, Process*, bool)>:
c000ba7a:	83 ec 1c             	sub    esp,0x1c
c000ba7d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ba81:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c000ba85:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ba89:	83 ec 08             	sub    esp,0x8
c000ba8c:	6a 00                	push   0x0
c000ba8e:	50                   	push   eax
c000ba8f:	e8 2a d7 ff ff       	call   c00091be <UnixFile::UnixFile(int)>
c000ba94:	83 c4 10             	add    esp,0x10
c000ba97:	ba 54 19 02 c0       	mov    edx,0xc0021954
c000ba9c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000baa0:	89 10                	mov    DWORD PTR [eax],edx
c000baa2:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c000baa7:	85 c0                	test   eax,eax
c000baa9:	74 0f                	je     c000baba <File::File(char const*, Process*, bool)+0x40>
c000baab:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c000bab0:	39 44 24 28          	cmp    DWORD PTR [esp+0x28],eax
c000bab4:	74 04                	je     c000baba <File::File(char const*, Process*, bool)+0x40>
c000bab6:	b0 01                	mov    al,0x1
c000bab8:	eb 02                	jmp    c000babc <File::File(char const*, Process*, bool)+0x42>
c000baba:	b0 00                	mov    al,0x0
c000babc:	0f b6 c0             	movzx  eax,al
c000babf:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000bac3:	8d 8a 0c 01 00 00    	lea    ecx,[edx+0x10c]
c000bac9:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000bacd:	83 c2 0d             	add    edx,0xd
c000bad0:	50                   	push   eax
c000bad1:	51                   	push   ecx
c000bad2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bad6:	52                   	push   edx
c000bad7:	e8 94 fd ff ff       	call   c000b870 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c000badc:	83 c4 10             	add    esp,0x10
c000badf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bae3:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000bae6:	83 e8 41             	sub    eax,0x41
c000bae9:	88 c2                	mov    dl,al
c000baeb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000baef:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000baf5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000baf9:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000bafd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bb01:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000bb07:	0f b6 c0             	movzx  eax,al
c000bb0a:	8b 04 85 80 b8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4780]
c000bb11:	85 c0                	test   eax,eax
c000bb13:	74 3e                	je     c000bb53 <File::File(char const*, Process*, bool)+0xd9>
c000bb15:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bb19:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000bb1f:	0f b6 c0             	movzx  eax,al
c000bb22:	8b 04 85 80 b8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4780]
c000bb29:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000bb2f:	85 c0                	test   eax,eax
c000bb31:	75 20                	jne    c000bb53 <File::File(char const*, Process*, bool)+0xd9>
c000bb33:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bb37:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000bb3d:	0f b6 c0             	movzx  eax,al
c000bb40:	8b 04 85 80 b8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4780]
c000bb47:	83 ec 0c             	sub    esp,0xc
c000bb4a:	50                   	push   eax
c000bb4b:	e8 a2 21 00 00       	call   c000dcf2 <LogicalDisk::mount()>
c000bb50:	83 c4 10             	add    esp,0x10
c000bb53:	90                   	nop
c000bb54:	83 c4 1c             	add    esp,0x1c
c000bb57:	c3                   	ret    

c000bb58 <File::File(char const*, Process*)>:
c000bb58:	83 ec 0c             	sub    esp,0xc
c000bb5b:	6a 01                	push   0x1
c000bb5d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bb61:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bb65:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bb69:	e8 0c ff ff ff       	call   c000ba7a <File::File(char const*, Process*, bool)>
c000bb6e:	83 c4 10             	add    esp,0x10
c000bb71:	90                   	nop
c000bb72:	83 c4 0c             	add    esp,0xc
c000bb75:	c3                   	ret    

c000bb76 <File::open(FileOpenMode)>:
c000bb76:	53                   	push   ebx
c000bb77:	b8 0b 00 00 00       	mov    eax,0xb
c000bb7c:	83 ec 08             	sub    esp,0x8
c000bb7f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000bb83:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000bb8a:	83 fa 19             	cmp    edx,0x19
c000bb8d:	77 40                	ja     c000bbcf <File::open(FileOpenMode)+0x59>
c000bb8f:	8b 14 95 80 b8 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd4780]
c000bb96:	85 d2                	test   edx,edx
c000bb98:	74 35                	je     c000bbcf <File::open(FileOpenMode)+0x59>
c000bb9a:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000bba0:	85 d2                	test   edx,edx
c000bba2:	74 2b                	je     c000bbcf <File::open(FileOpenMode)+0x59>
c000bba4:	b8 06 00 00 00       	mov    eax,0x6
c000bba9:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000bbad:	75 20                	jne    c000bbcf <File::open(FileOpenMode)+0x59>
c000bbaf:	8b 02                	mov    eax,DWORD PTR [edx]
c000bbb1:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000bbb7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bbbb:	51                   	push   ecx
c000bbbc:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000bbbf:	51                   	push   ecx
c000bbc0:	52                   	push   edx
c000bbc1:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000bbc4:	83 c4 10             	add    esp,0x10
c000bbc7:	85 c0                	test   eax,eax
c000bbc9:	75 04                	jne    c000bbcf <File::open(FileOpenMode)+0x59>
c000bbcb:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000bbcf:	83 c4 08             	add    esp,0x8
c000bbd2:	5b                   	pop    ebx
c000bbd3:	c3                   	ret    

c000bbd4 <File::close()>:
c000bbd4:	53                   	push   ebx
c000bbd5:	b8 0b 00 00 00       	mov    eax,0xb
c000bbda:	83 ec 08             	sub    esp,0x8
c000bbdd:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bbe1:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000bbe8:	83 f9 19             	cmp    ecx,0x19
c000bbeb:	77 41                	ja     c000bc2e <File::close()+0x5a>
c000bbed:	8b 1c 8d 80 b8 02 c0 	mov    ebx,DWORD PTR [ecx*4-0x3ffd4780]
c000bbf4:	85 db                	test   ebx,ebx
c000bbf6:	74 36                	je     c000bc2e <File::close()+0x5a>
c000bbf8:	83 bb 74 01 00 00 00 	cmp    DWORD PTR [ebx+0x174],0x0
c000bbff:	74 2d                	je     c000bc2e <File::close()+0x5a>
c000bc01:	b8 05 00 00 00       	mov    eax,0x5
c000bc06:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000bc0a:	74 22                	je     c000bc2e <File::close()+0x5a>
c000bc0c:	c6 42 0c 00          	mov    BYTE PTR [edx+0xc],0x0
c000bc10:	8b 04 8d 80 b8 02 c0 	mov    eax,DWORD PTR [ecx*4-0x3ffd4780]
c000bc17:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000bc1d:	53                   	push   ebx
c000bc1e:	53                   	push   ebx
c000bc1f:	8b 08                	mov    ecx,DWORD PTR [eax]
c000bc21:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c000bc27:	50                   	push   eax
c000bc28:	ff 51 1c             	call   DWORD PTR [ecx+0x1c]
c000bc2b:	83 c4 10             	add    esp,0x10
c000bc2e:	83 c4 08             	add    esp,0x8
c000bc31:	5b                   	pop    ebx
c000bc32:	c3                   	ret    
c000bc33:	90                   	nop

c000bc34 <File::seek(unsigned long long)>:
c000bc34:	56                   	push   esi
c000bc35:	53                   	push   ebx
c000bc36:	b8 0b 00 00 00       	mov    eax,0xb
c000bc3b:	51                   	push   ecx
c000bc3c:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000bc40:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000bc44:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c000bc4b:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000bc4f:	83 fa 19             	cmp    edx,0x19
c000bc52:	77 31                	ja     c000bc85 <File::seek(unsigned long long)+0x51>
c000bc54:	8b 14 95 80 b8 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd4780]
c000bc5b:	85 d2                	test   edx,edx
c000bc5d:	74 26                	je     c000bc85 <File::seek(unsigned long long)+0x51>
c000bc5f:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000bc65:	85 d2                	test   edx,edx
c000bc67:	74 1c                	je     c000bc85 <File::seek(unsigned long long)+0x51>
c000bc69:	b8 05 00 00 00       	mov    eax,0x5
c000bc6e:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c000bc72:	74 11                	je     c000bc85 <File::seek(unsigned long long)+0x51>
c000bc74:	8b 02                	mov    eax,DWORD PTR [edx]
c000bc76:	53                   	push   ebx
c000bc77:	51                   	push   ecx
c000bc78:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c000bc7e:	52                   	push   edx
c000bc7f:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000bc82:	83 c4 10             	add    esp,0x10
c000bc85:	5a                   	pop    edx
c000bc86:	5b                   	pop    ebx
c000bc87:	5e                   	pop    esi
c000bc88:	c3                   	ret    
c000bc89:	90                   	nop

c000bc8a <File::truncate(unsigned long long)>:
c000bc8a:	56                   	push   esi
c000bc8b:	53                   	push   ebx
c000bc8c:	b8 0b 00 00 00       	mov    eax,0xb
c000bc91:	51                   	push   ecx
c000bc92:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000bc96:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000bc9a:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c000bca1:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000bca5:	83 fa 19             	cmp    edx,0x19
c000bca8:	77 31                	ja     c000bcdb <File::truncate(unsigned long long)+0x51>
c000bcaa:	8b 14 95 80 b8 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd4780]
c000bcb1:	85 d2                	test   edx,edx
c000bcb3:	74 26                	je     c000bcdb <File::truncate(unsigned long long)+0x51>
c000bcb5:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000bcbb:	85 d2                	test   edx,edx
c000bcbd:	74 1c                	je     c000bcdb <File::truncate(unsigned long long)+0x51>
c000bcbf:	b8 05 00 00 00       	mov    eax,0x5
c000bcc4:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c000bcc8:	74 11                	je     c000bcdb <File::truncate(unsigned long long)+0x51>
c000bcca:	8b 02                	mov    eax,DWORD PTR [edx]
c000bccc:	53                   	push   ebx
c000bccd:	51                   	push   ecx
c000bcce:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c000bcd4:	52                   	push   edx
c000bcd5:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c000bcd8:	83 c4 10             	add    esp,0x10
c000bcdb:	5a                   	pop    edx
c000bcdc:	5b                   	pop    ebx
c000bcdd:	5e                   	pop    esi
c000bcde:	c3                   	ret    
c000bcdf:	90                   	nop

c000bce0 <File::tell(unsigned long long*)>:
c000bce0:	83 ec 0c             	sub    esp,0xc
c000bce3:	b8 0b 00 00 00       	mov    eax,0xb
c000bce8:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000bcec:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000bcf3:	83 fa 19             	cmp    edx,0x19
c000bcf6:	77 34                	ja     c000bd2c <File::tell(unsigned long long*)+0x4c>
c000bcf8:	8b 14 95 80 b8 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd4780]
c000bcff:	85 d2                	test   edx,edx
c000bd01:	74 29                	je     c000bd2c <File::tell(unsigned long long*)+0x4c>
c000bd03:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000bd09:	85 d2                	test   edx,edx
c000bd0b:	74 1f                	je     c000bd2c <File::tell(unsigned long long*)+0x4c>
c000bd0d:	b8 05 00 00 00       	mov    eax,0x5
c000bd12:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000bd16:	74 14                	je     c000bd2c <File::tell(unsigned long long*)+0x4c>
c000bd18:	50                   	push   eax
c000bd19:	8b 02                	mov    eax,DWORD PTR [edx]
c000bd1b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000bd1f:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000bd25:	52                   	push   edx
c000bd26:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000bd29:	83 c4 10             	add    esp,0x10
c000bd2c:	83 c4 0c             	add    esp,0xc
c000bd2f:	c3                   	ret    

c000bd30 <File::rewind()>:
c000bd30:	83 ec 10             	sub    esp,0x10
c000bd33:	6a 00                	push   0x0
c000bd35:	6a 00                	push   0x0
c000bd37:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bd3b:	e8 f4 fe ff ff       	call   c000bc34 <File::seek(unsigned long long)>
c000bd40:	83 c4 1c             	add    esp,0x1c
c000bd43:	c3                   	ret    

c000bd44 <File::unlink()>:
c000bd44:	83 ec 0c             	sub    esp,0xc
c000bd47:	b8 0b 00 00 00       	mov    eax,0xb
c000bd4c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bd50:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000bd57:	83 f9 19             	cmp    ecx,0x19
c000bd5a:	77 2f                	ja     c000bd8b <File::unlink()+0x47>
c000bd5c:	8b 0c 8d 80 b8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4780]
c000bd63:	85 c9                	test   ecx,ecx
c000bd65:	74 24                	je     c000bd8b <File::unlink()+0x47>
c000bd67:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000bd6d:	85 c9                	test   ecx,ecx
c000bd6f:	74 1a                	je     c000bd8b <File::unlink()+0x47>
c000bd71:	b8 06 00 00 00       	mov    eax,0x6
c000bd76:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000bd7a:	75 0f                	jne    c000bd8b <File::unlink()+0x47>
c000bd7c:	83 c2 0d             	add    edx,0xd
c000bd7f:	50                   	push   eax
c000bd80:	50                   	push   eax
c000bd81:	8b 01                	mov    eax,DWORD PTR [ecx]
c000bd83:	52                   	push   edx
c000bd84:	51                   	push   ecx
c000bd85:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c000bd88:	83 c4 10             	add    esp,0x10
c000bd8b:	83 c4 0c             	add    esp,0xc
c000bd8e:	c3                   	ret    
c000bd8f:	90                   	nop

c000bd90 <File::rename(char const*)>:
c000bd90:	83 ec 0c             	sub    esp,0xc
c000bd93:	b8 0b 00 00 00       	mov    eax,0xb
c000bd98:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bd9c:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000bda3:	83 f9 19             	cmp    ecx,0x19
c000bda6:	77 32                	ja     c000bdda <File::rename(char const*)+0x4a>
c000bda8:	8b 0c 8d 80 b8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4780]
c000bdaf:	85 c9                	test   ecx,ecx
c000bdb1:	74 27                	je     c000bdda <File::rename(char const*)+0x4a>
c000bdb3:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000bdb9:	85 c9                	test   ecx,ecx
c000bdbb:	74 1d                	je     c000bdda <File::rename(char const*)+0x4a>
c000bdbd:	b8 06 00 00 00       	mov    eax,0x6
c000bdc2:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000bdc6:	75 12                	jne    c000bdda <File::rename(char const*)+0x4a>
c000bdc8:	83 c2 0d             	add    edx,0xd
c000bdcb:	50                   	push   eax
c000bdcc:	8b 01                	mov    eax,DWORD PTR [ecx]
c000bdce:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000bdd2:	52                   	push   edx
c000bdd3:	51                   	push   ecx
c000bdd4:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000bdd7:	83 c4 10             	add    esp,0x10
c000bdda:	83 c4 0c             	add    esp,0xc
c000bddd:	c3                   	ret    

c000bdde <File::chfatattr(unsigned char, unsigned char)>:
c000bdde:	57                   	push   edi
c000bddf:	b8 0b 00 00 00       	mov    eax,0xb
c000bde4:	56                   	push   esi
c000bde5:	53                   	push   ebx
c000bde6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bdea:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000bdee:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000bdf5:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000bdf9:	83 f9 19             	cmp    ecx,0x19
c000bdfc:	77 37                	ja     c000be35 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000bdfe:	8b 0c 8d 80 b8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4780]
c000be05:	85 c9                	test   ecx,ecx
c000be07:	74 2c                	je     c000be35 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000be09:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000be0f:	85 c9                	test   ecx,ecx
c000be11:	74 22                	je     c000be35 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000be13:	b8 06 00 00 00       	mov    eax,0x6
c000be18:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000be1c:	75 17                	jne    c000be35 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000be1e:	8b 39                	mov    edi,DWORD PTR [ecx]
c000be20:	89 f0                	mov    eax,esi
c000be22:	83 c2 0d             	add    edx,0xd
c000be25:	0f b6 f0             	movzx  esi,al
c000be28:	0f b6 db             	movzx  ebx,bl
c000be2b:	56                   	push   esi
c000be2c:	53                   	push   ebx
c000be2d:	52                   	push   edx
c000be2e:	51                   	push   ecx
c000be2f:	ff 57 38             	call   DWORD PTR [edi+0x38]
c000be32:	83 c4 10             	add    esp,0x10
c000be35:	5b                   	pop    ebx
c000be36:	5e                   	pop    esi
c000be37:	5f                   	pop    edi
c000be38:	c3                   	ret    
c000be39:	90                   	nop

c000be3a <File::exists()>:
c000be3a:	83 ec 0c             	sub    esp,0xc
c000be3d:	31 c0                	xor    eax,eax
c000be3f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000be43:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000be4a:	83 f9 19             	cmp    ecx,0x19
c000be4d:	77 24                	ja     c000be73 <File::exists()+0x39>
c000be4f:	8b 0c 8d 80 b8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4780]
c000be56:	85 c9                	test   ecx,ecx
c000be58:	74 19                	je     c000be73 <File::exists()+0x39>
c000be5a:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000be60:	85 c9                	test   ecx,ecx
c000be62:	74 0f                	je     c000be73 <File::exists()+0x39>
c000be64:	83 c2 0d             	add    edx,0xd
c000be67:	50                   	push   eax
c000be68:	50                   	push   eax
c000be69:	8b 01                	mov    eax,DWORD PTR [ecx]
c000be6b:	52                   	push   edx
c000be6c:	51                   	push   ecx
c000be6d:	ff 50 48             	call   DWORD PTR [eax+0x48]
c000be70:	83 c4 10             	add    esp,0x10
c000be73:	83 c4 0c             	add    esp,0xc
c000be76:	c3                   	ret    
c000be77:	90                   	nop

c000be78 <File::stat(unsigned long long*, bool*)>:
c000be78:	56                   	push   esi
c000be79:	53                   	push   ebx
c000be7a:	50                   	push   eax
c000be7b:	b8 0b 00 00 00       	mov    eax,0xb
c000be80:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000be84:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000be88:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000be8f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000be93:	83 f9 19             	cmp    ecx,0x19
c000be96:	77 3d                	ja     c000bed5 <File::stat(unsigned long long*, bool*)+0x5d>
c000be98:	8b 0c 8d 80 b8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4780]
c000be9f:	85 c9                	test   ecx,ecx
c000bea1:	74 32                	je     c000bed5 <File::stat(unsigned long long*, bool*)+0x5d>
c000bea3:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000bea9:	85 c9                	test   ecx,ecx
c000beab:	74 28                	je     c000bed5 <File::stat(unsigned long long*, bool*)+0x5d>
c000bead:	8b 01                	mov    eax,DWORD PTR [ecx]
c000beaf:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000beb3:	74 13                	je     c000bec8 <File::stat(unsigned long long*, bool*)+0x50>
c000beb5:	83 ec 04             	sub    esp,0x4
c000beb8:	56                   	push   esi
c000beb9:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c000bebf:	51                   	push   ecx
c000bec0:	ff 50 30             	call   DWORD PTR [eax+0x30]
c000bec3:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000bec6:	eb 0a                	jmp    c000bed2 <File::stat(unsigned long long*, bool*)+0x5a>
c000bec8:	53                   	push   ebx
c000bec9:	83 c2 0d             	add    edx,0xd
c000becc:	56                   	push   esi
c000becd:	52                   	push   edx
c000bece:	51                   	push   ecx
c000becf:	ff 50 34             	call   DWORD PTR [eax+0x34]
c000bed2:	83 c4 10             	add    esp,0x10
c000bed5:	5a                   	pop    edx
c000bed6:	5b                   	pop    ebx
c000bed7:	5e                   	pop    esi
c000bed8:	c3                   	ret    

c000bed9 <Fs::setcwd(Process*, char*)>:
c000bed9:	55                   	push   ebp
c000beda:	57                   	push   edi
c000bedb:	56                   	push   esi
c000bedc:	53                   	push   ebx
c000bedd:	81 ec 1c 02 00 00    	sub    esp,0x21c
c000bee3:	8b ac 24 30 02 00 00 	mov    ebp,DWORD PTR [esp+0x230]
c000beea:	6a 00                	push   0x0
c000beec:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c000bef2:	57                   	push   edi
c000bef3:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c000befa:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c000befe:	56                   	push   esi
c000beff:	e8 6c f9 ff ff       	call   c000b870 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c000bf04:	89 34 24             	mov    DWORD PTR [esp],esi
c000bf07:	e8 64 46 ff ff       	call   c0000570 <strlen>
c000bf0c:	83 c4 10             	add    esp,0x10
c000bf0f:	83 f8 02             	cmp    eax,0x2
c000bf12:	77 15                	ja     c000bf29 <Fs::setcwd(Process*, char*)+0x50>
c000bf14:	0f be 5c 24 10       	movsx  ebx,BYTE PTR [esp+0x10]
c000bf19:	83 eb 41             	sub    ebx,0x41
c000bf1c:	8b 04 9d 80 b8 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd4780]
c000bf23:	85 c0                	test   eax,eax
c000bf25:	75 1c                	jne    c000bf43 <Fs::setcwd(Process*, char*)+0x6a>
c000bf27:	eb 2f                	jmp    c000bf58 <Fs::setcwd(Process*, char*)+0x7f>
c000bf29:	83 ec 0c             	sub    esp,0xc
c000bf2c:	56                   	push   esi
c000bf2d:	e8 3e 46 ff ff       	call   c0000570 <strlen>
c000bf32:	83 c4 10             	add    esp,0x10
c000bf35:	83 f8 03             	cmp    eax,0x3
c000bf38:	75 57                	jne    c000bf91 <Fs::setcwd(Process*, char*)+0xb8>
c000bf3a:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c000bf3f:	75 50                	jne    c000bf91 <Fs::setcwd(Process*, char*)+0xb8>
c000bf41:	eb d1                	jmp    c000bf14 <Fs::setcwd(Process*, char*)+0x3b>
c000bf43:	83 b8 74 01 00 00 00 	cmp    DWORD PTR [eax+0x174],0x0
c000bf4a:	75 0c                	jne    c000bf58 <Fs::setcwd(Process*, char*)+0x7f>
c000bf4c:	83 ec 0c             	sub    esp,0xc
c000bf4f:	50                   	push   eax
c000bf50:	e8 9d 1d 00 00       	call   c000dcf2 <LogicalDisk::mount()>
c000bf55:	83 c4 10             	add    esp,0x10
c000bf58:	b8 03 00 00 00       	mov    eax,0x3
c000bf5d:	83 fb 19             	cmp    ebx,0x19
c000bf60:	0f 87 c6 00 00 00    	ja     c000c02c <Fs::setcwd(Process*, char*)+0x153>
c000bf66:	8b 14 9d 80 b8 02 c0 	mov    edx,DWORD PTR [ebx*4-0x3ffd4780]
c000bf6d:	b8 05 00 00 00       	mov    eax,0x5
c000bf72:	85 d2                	test   edx,edx
c000bf74:	0f 84 b2 00 00 00    	je     c000c02c <Fs::setcwd(Process*, char*)+0x153>
c000bf7a:	b8 06 00 00 00       	mov    eax,0x6
c000bf7f:	83 ba 74 01 00 00 00 	cmp    DWORD PTR [edx+0x174],0x0
c000bf86:	0f 85 92 00 00 00    	jne    c000c01e <Fs::setcwd(Process*, char*)+0x145>
c000bf8c:	e9 9b 00 00 00       	jmp    c000c02c <Fs::setcwd(Process*, char*)+0x153>
c000bf91:	83 ec 0c             	sub    esp,0xc
c000bf94:	68 14 01 00 00       	push   0x114
c000bf99:	e8 18 bb ff ff       	call   c0007ab6 <malloc>
c000bf9e:	83 c4 0c             	add    esp,0xc
c000bfa1:	89 c3                	mov    ebx,eax
c000bfa3:	55                   	push   ebp
c000bfa4:	56                   	push   esi
c000bfa5:	50                   	push   eax
c000bfa6:	e8 ad fb ff ff       	call   c000bb58 <File::File(char const*, Process*)>
c000bfab:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c000bfb0:	83 c4 0c             	add    esp,0xc
c000bfb3:	8d 44 24 0b          	lea    eax,[esp+0xb]
c000bfb7:	50                   	push   eax
c000bfb8:	8d 44 24 10          	lea    eax,[esp+0x10]
c000bfbc:	50                   	push   eax
c000bfbd:	53                   	push   ebx
c000bfbe:	e8 b5 fe ff ff       	call   c000be78 <File::stat(unsigned long long*, bool*)>
c000bfc3:	83 c4 10             	add    esp,0x10
c000bfc6:	83 f8 02             	cmp    eax,0x2
c000bfc9:	74 27                	je     c000bff2 <Fs::setcwd(Process*, char*)+0x119>
c000bfcb:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000bfd0:	75 1c                	jne    c000bfee <Fs::setcwd(Process*, char*)+0x115>
c000bfd2:	b8 02 00 00 00       	mov    eax,0x2
c000bfd7:	85 db                	test   ebx,ebx
c000bfd9:	74 51                	je     c000c02c <Fs::setcwd(Process*, char*)+0x153>
c000bfdb:	83 ec 0c             	sub    esp,0xc
c000bfde:	8b 03                	mov    eax,DWORD PTR [ebx]
c000bfe0:	53                   	push   ebx
c000bfe1:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000bfe4:	83 c4 10             	add    esp,0x10
c000bfe7:	b8 02 00 00 00       	mov    eax,0x2
c000bfec:	eb 3e                	jmp    c000c02c <Fs::setcwd(Process*, char*)+0x153>
c000bfee:	85 c0                	test   eax,eax
c000bff0:	74 1c                	je     c000c00e <Fs::setcwd(Process*, char*)+0x135>
c000bff2:	b8 01 00 00 00       	mov    eax,0x1
c000bff7:	85 db                	test   ebx,ebx
c000bff9:	74 31                	je     c000c02c <Fs::setcwd(Process*, char*)+0x153>
c000bffb:	83 ec 0c             	sub    esp,0xc
c000bffe:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c000:	53                   	push   ebx
c000c001:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000c004:	83 c4 10             	add    esp,0x10
c000c007:	b8 01 00 00 00       	mov    eax,0x1
c000c00c:	eb 1e                	jmp    c000c02c <Fs::setcwd(Process*, char*)+0x153>
c000c00e:	85 db                	test   ebx,ebx
c000c010:	74 0c                	je     c000c01e <Fs::setcwd(Process*, char*)+0x145>
c000c012:	83 ec 0c             	sub    esp,0xc
c000c015:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c017:	53                   	push   ebx
c000c018:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000c01b:	83 c4 10             	add    esp,0x10
c000c01e:	50                   	push   eax
c000c01f:	50                   	push   eax
c000c020:	56                   	push   esi
c000c021:	57                   	push   edi
c000c022:	e8 19 46 ff ff       	call   c0000640 <strcpy>
c000c027:	83 c4 10             	add    esp,0x10
c000c02a:	31 c0                	xor    eax,eax
c000c02c:	81 c4 1c 02 00 00    	add    esp,0x21c
c000c032:	5b                   	pop    ebx
c000c033:	5e                   	pop    esi
c000c034:	5f                   	pop    edi
c000c035:	5d                   	pop    ebp
c000c036:	c3                   	ret    
c000c037:	90                   	nop

c000c038 <Directory::Directory(char const*, Process*)>:
c000c038:	83 ec 0c             	sub    esp,0xc
c000c03b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c03f:	83 ec 08             	sub    esp,0x8
c000c042:	6a 00                	push   0x0
c000c044:	50                   	push   eax
c000c045:	e8 74 d1 ff ff       	call   c00091be <UnixFile::UnixFile(int)>
c000c04a:	83 c4 10             	add    esp,0x10
c000c04d:	ba 70 19 02 c0       	mov    edx,0xc0021970
c000c052:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c056:	89 10                	mov    DWORD PTR [eax],edx
c000c058:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c000c05d:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c000c061:	0f 95 c0             	setne  al
c000c064:	0f b6 c0             	movzx  eax,al
c000c067:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000c06b:	8d 8a 0c 01 00 00    	lea    ecx,[edx+0x10c]
c000c071:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c075:	83 c2 0d             	add    edx,0xd
c000c078:	50                   	push   eax
c000c079:	51                   	push   ecx
c000c07a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c07e:	52                   	push   edx
c000c07f:	e8 ec f7 ff ff       	call   c000b870 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c000c084:	83 c4 10             	add    esp,0x10
c000c087:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c08b:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000c08e:	83 e8 41             	sub    eax,0x41
c000c091:	88 c2                	mov    dl,al
c000c093:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c097:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000c09d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c0a1:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000c0a5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c0a9:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000c0af:	0f b6 c0             	movzx  eax,al
c000c0b2:	8b 04 85 80 b8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4780]
c000c0b9:	85 c0                	test   eax,eax
c000c0bb:	74 3e                	je     c000c0fb <Directory::Directory(char const*, Process*)+0xc3>
c000c0bd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c0c1:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000c0c7:	0f b6 c0             	movzx  eax,al
c000c0ca:	8b 04 85 80 b8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4780]
c000c0d1:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000c0d7:	85 c0                	test   eax,eax
c000c0d9:	75 20                	jne    c000c0fb <Directory::Directory(char const*, Process*)+0xc3>
c000c0db:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c0df:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000c0e5:	0f b6 c0             	movzx  eax,al
c000c0e8:	8b 04 85 80 b8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4780]
c000c0ef:	83 ec 0c             	sub    esp,0xc
c000c0f2:	50                   	push   eax
c000c0f3:	e8 fa 1b 00 00       	call   c000dcf2 <LogicalDisk::mount()>
c000c0f8:	83 c4 10             	add    esp,0x10
c000c0fb:	90                   	nop
c000c0fc:	83 c4 0c             	add    esp,0xc
c000c0ff:	c3                   	ret    

c000c100 <Directory::open()>:
c000c100:	53                   	push   ebx
c000c101:	b8 0b 00 00 00       	mov    eax,0xb
c000c106:	83 ec 08             	sub    esp,0x8
c000c109:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000c10d:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000c114:	83 fa 19             	cmp    edx,0x19
c000c117:	77 3d                	ja     c000c156 <Directory::open()+0x56>
c000c119:	8b 14 95 80 b8 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd4780]
c000c120:	85 d2                	test   edx,edx
c000c122:	74 32                	je     c000c156 <Directory::open()+0x56>
c000c124:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000c12a:	85 d2                	test   edx,edx
c000c12c:	74 28                	je     c000c156 <Directory::open()+0x56>
c000c12e:	b8 06 00 00 00       	mov    eax,0x6
c000c133:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000c137:	75 1d                	jne    c000c156 <Directory::open()+0x56>
c000c139:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000c13f:	50                   	push   eax
c000c140:	8b 02                	mov    eax,DWORD PTR [edx]
c000c142:	51                   	push   ecx
c000c143:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000c146:	51                   	push   ecx
c000c147:	52                   	push   edx
c000c148:	ff 50 50             	call   DWORD PTR [eax+0x50]
c000c14b:	83 c4 10             	add    esp,0x10
c000c14e:	85 c0                	test   eax,eax
c000c150:	75 04                	jne    c000c156 <Directory::open()+0x56>
c000c152:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000c156:	83 c4 08             	add    esp,0x8
c000c159:	5b                   	pop    ebx
c000c15a:	c3                   	ret    
c000c15b:	90                   	nop

c000c15c <Directory::close()>:
c000c15c:	53                   	push   ebx
c000c15d:	b8 0b 00 00 00       	mov    eax,0xb
c000c162:	83 ec 08             	sub    esp,0x8
c000c165:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c169:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000c170:	83 f9 19             	cmp    ecx,0x19
c000c173:	77 41                	ja     c000c1b6 <Directory::close()+0x5a>
c000c175:	8b 1c 8d 80 b8 02 c0 	mov    ebx,DWORD PTR [ecx*4-0x3ffd4780]
c000c17c:	85 db                	test   ebx,ebx
c000c17e:	74 36                	je     c000c1b6 <Directory::close()+0x5a>
c000c180:	83 bb 74 01 00 00 00 	cmp    DWORD PTR [ebx+0x174],0x0
c000c187:	74 2d                	je     c000c1b6 <Directory::close()+0x5a>
c000c189:	b8 05 00 00 00       	mov    eax,0x5
c000c18e:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000c192:	74 22                	je     c000c1b6 <Directory::close()+0x5a>
c000c194:	c6 42 0c 00          	mov    BYTE PTR [edx+0xc],0x0
c000c198:	8b 04 8d 80 b8 02 c0 	mov    eax,DWORD PTR [ecx*4-0x3ffd4780]
c000c19f:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000c1a5:	53                   	push   ebx
c000c1a6:	53                   	push   ebx
c000c1a7:	8b 08                	mov    ecx,DWORD PTR [eax]
c000c1a9:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c000c1af:	50                   	push   eax
c000c1b0:	ff 51 20             	call   DWORD PTR [ecx+0x20]
c000c1b3:	83 c4 10             	add    esp,0x10
c000c1b6:	83 c4 08             	add    esp,0x8
c000c1b9:	5b                   	pop    ebx
c000c1ba:	c3                   	ret    
c000c1bb:	90                   	nop

c000c1bc <Directory::unlink()>:
c000c1bc:	83 ec 0c             	sub    esp,0xc
c000c1bf:	b8 0b 00 00 00       	mov    eax,0xb
c000c1c4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c1c8:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000c1cf:	83 f9 19             	cmp    ecx,0x19
c000c1d2:	77 2f                	ja     c000c203 <Directory::unlink()+0x47>
c000c1d4:	8b 0c 8d 80 b8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4780]
c000c1db:	85 c9                	test   ecx,ecx
c000c1dd:	74 24                	je     c000c203 <Directory::unlink()+0x47>
c000c1df:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000c1e5:	85 c9                	test   ecx,ecx
c000c1e7:	74 1a                	je     c000c203 <Directory::unlink()+0x47>
c000c1e9:	b8 06 00 00 00       	mov    eax,0x6
c000c1ee:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000c1f2:	75 0f                	jne    c000c203 <Directory::unlink()+0x47>
c000c1f4:	83 c2 0d             	add    edx,0xd
c000c1f7:	50                   	push   eax
c000c1f8:	50                   	push   eax
c000c1f9:	8b 01                	mov    eax,DWORD PTR [ecx]
c000c1fb:	52                   	push   edx
c000c1fc:	51                   	push   ecx
c000c1fd:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c000c200:	83 c4 10             	add    esp,0x10
c000c203:	83 c4 0c             	add    esp,0xc
c000c206:	c3                   	ret    
c000c207:	90                   	nop

c000c208 <Directory::rename(char const*)>:
c000c208:	83 ec 0c             	sub    esp,0xc
c000c20b:	b8 0b 00 00 00       	mov    eax,0xb
c000c210:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c214:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000c21b:	83 f9 19             	cmp    ecx,0x19
c000c21e:	77 32                	ja     c000c252 <Directory::rename(char const*)+0x4a>
c000c220:	8b 0c 8d 80 b8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4780]
c000c227:	85 c9                	test   ecx,ecx
c000c229:	74 27                	je     c000c252 <Directory::rename(char const*)+0x4a>
c000c22b:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000c231:	85 c9                	test   ecx,ecx
c000c233:	74 1d                	je     c000c252 <Directory::rename(char const*)+0x4a>
c000c235:	b8 06 00 00 00       	mov    eax,0x6
c000c23a:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000c23e:	75 12                	jne    c000c252 <Directory::rename(char const*)+0x4a>
c000c240:	83 c2 0d             	add    edx,0xd
c000c243:	50                   	push   eax
c000c244:	8b 01                	mov    eax,DWORD PTR [ecx]
c000c246:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000c24a:	52                   	push   edx
c000c24b:	51                   	push   ecx
c000c24c:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000c24f:	83 c4 10             	add    esp,0x10
c000c252:	83 c4 0c             	add    esp,0xc
c000c255:	c3                   	ret    

c000c256 <Directory::exists()>:
c000c256:	83 ec 0c             	sub    esp,0xc
c000c259:	31 c0                	xor    eax,eax
c000c25b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c25f:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000c266:	83 f9 19             	cmp    ecx,0x19
c000c269:	77 24                	ja     c000c28f <Directory::exists()+0x39>
c000c26b:	8b 0c 8d 80 b8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4780]
c000c272:	85 c9                	test   ecx,ecx
c000c274:	74 19                	je     c000c28f <Directory::exists()+0x39>
c000c276:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000c27c:	85 c9                	test   ecx,ecx
c000c27e:	74 0f                	je     c000c28f <Directory::exists()+0x39>
c000c280:	83 c2 0d             	add    edx,0xd
c000c283:	50                   	push   eax
c000c284:	50                   	push   eax
c000c285:	8b 01                	mov    eax,DWORD PTR [ecx]
c000c287:	52                   	push   edx
c000c288:	51                   	push   ecx
c000c289:	ff 50 48             	call   DWORD PTR [eax+0x48]
c000c28c:	83 c4 10             	add    esp,0x10
c000c28f:	83 c4 0c             	add    esp,0xc
c000c292:	c3                   	ret    
c000c293:	90                   	nop

c000c294 <Directory::read(dirent*)>:
c000c294:	83 ec 1c             	sub    esp,0x1c
c000c297:	b8 0b 00 00 00       	mov    eax,0xb
c000c29c:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000c2a0:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000c2a7:	83 f9 19             	cmp    ecx,0x19
c000c2aa:	77 30                	ja     c000c2dc <Directory::read(dirent*)+0x48>
c000c2ac:	8b 0c 8d 80 b8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4780]
c000c2b3:	85 c9                	test   ecx,ecx
c000c2b5:	74 25                	je     c000c2dc <Directory::read(dirent*)+0x48>
c000c2b7:	83 b9 74 01 00 00 00 	cmp    DWORD PTR [ecx+0x174],0x0
c000c2be:	74 1c                	je     c000c2dc <Directory::read(dirent*)+0x48>
c000c2c0:	83 ec 0c             	sub    esp,0xc
c000c2c3:	8b 02                	mov    eax,DWORD PTR [edx]
c000c2c5:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c000c2c9:	51                   	push   ecx
c000c2ca:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c2ce:	6a 00                	push   0x0
c000c2d0:	68 10 01 00 00       	push   0x110
c000c2d5:	52                   	push   edx
c000c2d6:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000c2d9:	83 c4 20             	add    esp,0x20
c000c2dc:	83 c4 1c             	add    esp,0x1c
c000c2df:	c3                   	ret    

c000c2e0 <Directory::create()>:
c000c2e0:	83 ec 0c             	sub    esp,0xc
c000c2e3:	b8 0b 00 00 00       	mov    eax,0xb
c000c2e8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c2ec:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000c2f3:	83 f9 19             	cmp    ecx,0x19
c000c2f6:	77 2f                	ja     c000c327 <Directory::create()+0x47>
c000c2f8:	8b 0c 8d 80 b8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4780]
c000c2ff:	85 c9                	test   ecx,ecx
c000c301:	74 24                	je     c000c327 <Directory::create()+0x47>
c000c303:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000c309:	85 c9                	test   ecx,ecx
c000c30b:	74 1a                	je     c000c327 <Directory::create()+0x47>
c000c30d:	b8 06 00 00 00       	mov    eax,0x6
c000c312:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000c316:	75 0f                	jne    c000c327 <Directory::create()+0x47>
c000c318:	83 c2 0d             	add    edx,0xd
c000c31b:	50                   	push   eax
c000c31c:	50                   	push   eax
c000c31d:	8b 01                	mov    eax,DWORD PTR [ecx]
c000c31f:	52                   	push   edx
c000c320:	51                   	push   ecx
c000c321:	ff 50 40             	call   DWORD PTR [eax+0x40]
c000c324:	83 c4 10             	add    esp,0x10
c000c327:	83 c4 0c             	add    esp,0xc
c000c32a:	c3                   	ret    
c000c32b:	90                   	nop

c000c32c <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c000c32c:	b8 0a 00 00 00       	mov    eax,0xa
c000c331:	c3                   	ret    
c000c332:	66 90                	xchg   ax,ax

c000c334 <Bus::Bus(char const*)>:
c000c334:	83 ec 0c             	sub    esp,0xc
c000c337:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c33b:	83 ec 08             	sub    esp,0x8
c000c33e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c342:	50                   	push   eax
c000c343:	e8 22 08 00 00       	call   c000cb6a <Device::Device(char const*)>
c000c348:	83 c4 10             	add    esp,0x10
c000c34b:	ba 8c 19 02 c0       	mov    edx,0xc002198c
c000c350:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c354:	89 10                	mov    DWORD PTR [eax],edx
c000c356:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c35a:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000c364:	90                   	nop
c000c365:	83 c4 0c             	add    esp,0xc
c000c368:	c3                   	ret    
c000c369:	90                   	nop
c000c36a:	66 90                	xchg   ax,ax

c000c36c <Bus::~Bus()>:
c000c36c:	83 ec 0c             	sub    esp,0xc
c000c36f:	ba 8c 19 02 c0       	mov    edx,0xc002198c
c000c374:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c378:	89 10                	mov    DWORD PTR [eax],edx
c000c37a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c37e:	83 ec 0c             	sub    esp,0xc
c000c381:	50                   	push   eax
c000c382:	e8 4d 05 00 00       	call   c000c8d4 <Device::~Device()>
c000c387:	83 c4 10             	add    esp,0x10
c000c38a:	90                   	nop
c000c38b:	83 c4 0c             	add    esp,0xc
c000c38e:	c3                   	ret    
c000c38f:	90                   	nop

c000c390 <Bus::~Bus()>:
c000c390:	83 ec 0c             	sub    esp,0xc
c000c393:	83 ec 0c             	sub    esp,0xc
c000c396:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c39a:	e8 cd ff ff ff       	call   c000c36c <Bus::~Bus()>
c000c39f:	83 c4 10             	add    esp,0x10
c000c3a2:	83 ec 08             	sub    esp,0x8
c000c3a5:	68 58 01 00 00       	push   0x158
c000c3aa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c3ae:	e8 65 e4 ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c000c3b3:	83 c4 10             	add    esp,0x10
c000c3b6:	83 c4 0c             	add    esp,0xc
c000c3b9:	c3                   	ret    

c000c3ba <beepThread(void*)>:
c000c3ba:	83 ec 0c             	sub    esp,0xc
c000c3bd:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000c3c2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c3c6:	48                   	dec    eax
c000c3c7:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c000c3cc:	75 01                	jne    c000c3cf <beepThread(void*)+0x15>
c000c3ce:	fb                   	sti    
c000c3cf:	83 ec 0c             	sub    esp,0xc
c000c3d2:	6b c2 0a             	imul   eax,edx,0xa
c000c3d5:	50                   	push   eax
c000c3d6:	e8 e5 9f 00 00       	call   c00163c0 <milliTenthSleep(unsigned int)>
c000c3db:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000c3e2:	e8 34 bf 00 00       	call   c001831b <HalMakeBeep(int)>
c000c3e7:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c000c3ef:	83 c4 1c             	add    esp,0x1c
c000c3f2:	e9 ad 9e 00 00       	jmp    c00162a4 <blockTask(TaskState)>

c000c3f7 <Krnl::beep(int, int, bool)>:
c000c3f7:	56                   	push   esi
c000c3f8:	53                   	push   ebx
c000c3f9:	83 ec 10             	sub    esp,0x10
c000c3fc:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000c400:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000c404:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c408:	e8 0e bf 00 00       	call   c001831b <HalMakeBeep(int)>
c000c40d:	83 c4 10             	add    esp,0x10
c000c410:	89 f0                	mov    eax,esi
c000c412:	84 c0                	test   al,al
c000c414:	74 1e                	je     c000c434 <Krnl::beep(int, int, bool)+0x3d>
c000c416:	83 ec 0c             	sub    esp,0xc
c000c419:	6b db 0a             	imul   ebx,ebx,0xa
c000c41c:	53                   	push   ebx
c000c41d:	e8 9e 9f 00 00       	call   c00163c0 <milliTenthSleep(unsigned int)>
c000c422:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c000c42a:	83 c4 14             	add    esp,0x14
c000c42d:	5b                   	pop    ebx
c000c42e:	5e                   	pop    esi
c000c42f:	e9 e7 be 00 00       	jmp    c001831b <HalMakeBeep(int)>
c000c434:	68 e6 00 00 00       	push   0xe6
c000c439:	53                   	push   ebx
c000c43a:	68 ba c3 00 c0       	push   0xc000c3ba
c000c43f:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c000c445:	e8 f6 99 00 00       	call   c0015e40 <Process::createThread(void (*)(void*), void*, int)>
c000c44a:	83 c4 14             	add    esp,0x14
c000c44d:	5b                   	pop    ebx
c000c44e:	5e                   	pop    esi
c000c44f:	c3                   	ret    

c000c450 <User::loadClockSettings(int)>:
c000c450:	53                   	push   ebx
c000c451:	83 ec 14             	sub    esp,0x14
c000c454:	68 14 01 00 00       	push   0x114
c000c459:	e8 58 b6 ff ff       	call   c0007ab6 <malloc>
c000c45e:	83 c4 0c             	add    esp,0xc
c000c461:	89 c3                	mov    ebx,eax
c000c463:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c000c469:	68 b0 19 02 c0       	push   0xc00219b0
c000c46e:	50                   	push   eax
c000c46f:	e8 e4 f6 ff ff       	call   c000bb58 <File::File(char const*, Process*)>
c000c474:	58                   	pop    eax
c000c475:	5a                   	pop    edx
c000c476:	6a 01                	push   0x1
c000c478:	53                   	push   ebx
c000c479:	e8 f8 f6 ff ff       	call   c000bb76 <File::open(FileOpenMode)>
c000c47e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000c481:	e8 4e f7 ff ff       	call   c000bbd4 <File::close()>
c000c486:	83 c4 10             	add    esp,0x10
c000c489:	85 db                	test   ebx,ebx
c000c48b:	74 0f                	je     c000c49c <User::loadClockSettings(int)+0x4c>
c000c48d:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c48f:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000c493:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000c496:	83 c4 08             	add    esp,0x8
c000c499:	5b                   	pop    ebx
c000c49a:	ff e0                	jmp    eax
c000c49c:	83 c4 08             	add    esp,0x8
c000c49f:	5b                   	pop    ebx
c000c4a0:	c3                   	ret    
c000c4a1:	90                   	nop

c000c4a2 <Clock::Clock(char const*)>:
c000c4a2:	83 ec 0c             	sub    esp,0xc
c000c4a5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c4a9:	83 ec 08             	sub    esp,0x8
c000c4ac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c4b0:	50                   	push   eax
c000c4b1:	e8 b4 06 00 00       	call   c000cb6a <Device::Device(char const*)>
c000c4b6:	83 c4 10             	add    esp,0x10
c000c4b9:	ba d8 19 02 c0       	mov    edx,0xc00219d8
c000c4be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c4c2:	89 10                	mov    DWORD PTR [eax],edx
c000c4c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c4c8:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c000c4d2:	90                   	nop
c000c4d3:	83 c4 0c             	add    esp,0xc
c000c4d6:	c3                   	ret    
c000c4d7:	90                   	nop

c000c4d8 <Clock::~Clock()>:
c000c4d8:	83 ec 0c             	sub    esp,0xc
c000c4db:	ba d8 19 02 c0       	mov    edx,0xc00219d8
c000c4e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c4e4:	89 10                	mov    DWORD PTR [eax],edx
c000c4e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c4ea:	83 ec 0c             	sub    esp,0xc
c000c4ed:	50                   	push   eax
c000c4ee:	e8 e1 03 00 00       	call   c000c8d4 <Device::~Device()>
c000c4f3:	83 c4 10             	add    esp,0x10
c000c4f6:	90                   	nop
c000c4f7:	83 c4 0c             	add    esp,0xc
c000c4fa:	c3                   	ret    
c000c4fb:	90                   	nop

c000c4fc <Clock::~Clock()>:
c000c4fc:	83 ec 0c             	sub    esp,0xc
c000c4ff:	83 ec 0c             	sub    esp,0xc
c000c502:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c506:	e8 cd ff ff ff       	call   c000c4d8 <Clock::~Clock()>
c000c50b:	83 c4 10             	add    esp,0x10
c000c50e:	83 ec 08             	sub    esp,0x8
c000c511:	68 58 01 00 00       	push   0x158
c000c516:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c51a:	e8 f9 e2 ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c000c51f:	83 c4 10             	add    esp,0x10
c000c522:	83 c4 0c             	add    esp,0xc
c000c525:	c3                   	ret    

c000c526 <Clock::timeInSecondsLocal()>:
c000c526:	53                   	push   ebx
c000c527:	83 ec 14             	sub    esp,0x14
c000c52a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000c52e:	8b 10                	mov    edx,DWORD PTR [eax]
c000c530:	50                   	push   eax
c000c531:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000c534:	0f b6 0d 08 94 02 c0 	movzx  ecx,BYTE PTR ds:0xc0029408
c000c53b:	03 0d 0c 94 02 c0    	add    ecx,DWORD PTR ds:0xc002940c
c000c541:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000c547:	89 cb                	mov    ebx,ecx
c000c549:	c1 fb 1f             	sar    ebx,0x1f
c000c54c:	01 c8                	add    eax,ecx
c000c54e:	11 da                	adc    edx,ebx
c000c550:	83 c4 10             	add    esp,0x10
c000c553:	31 c9                	xor    ecx,ecx
c000c555:	80 3d 09 94 02 c0 00 	cmp    BYTE PTR ds:0xc0029409,0x0
c000c55c:	74 05                	je     c000c563 <Clock::timeInSecondsLocal()+0x3d>
c000c55e:	b9 08 07 00 00       	mov    ecx,0x708
c000c563:	31 db                	xor    ebx,ebx
c000c565:	01 c8                	add    eax,ecx
c000c567:	11 da                	adc    edx,ebx
c000c569:	83 c4 08             	add    esp,0x8
c000c56c:	5b                   	pop    ebx
c000c56d:	c3                   	ret    

c000c56e <Clock::setTimeInSecondsLocal(unsigned long long)>:
c000c56e:	57                   	push   edi
c000c56f:	56                   	push   esi
c000c570:	53                   	push   ebx
c000c571:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000c575:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000c579:	8b 01                	mov    eax,DWORD PTR [ecx]
c000c57b:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000c57f:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c000c582:	0f b6 05 08 94 02 c0 	movzx  eax,BYTE PTR ds:0xc0029408
c000c589:	03 05 0c 94 02 c0    	add    eax,DWORD PTR ds:0xc002940c
c000c58f:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c000c595:	99                   	cdq    
c000c596:	29 c6                	sub    esi,eax
c000c598:	19 d7                	sbb    edi,edx
c000c59a:	89 f0                	mov    eax,esi
c000c59c:	89 fa                	mov    edx,edi
c000c59e:	31 f6                	xor    esi,esi
c000c5a0:	80 3d 09 94 02 c0 00 	cmp    BYTE PTR ds:0xc0029409,0x0
c000c5a7:	74 05                	je     c000c5ae <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c000c5a9:	be 08 07 00 00       	mov    esi,0x708
c000c5ae:	31 ff                	xor    edi,edi
c000c5b0:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c000c5b4:	29 f0                	sub    eax,esi
c000c5b6:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c5ba:	19 fa                	sbb    edx,edi
c000c5bc:	89 d8                	mov    eax,ebx
c000c5be:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c5c2:	5b                   	pop    ebx
c000c5c3:	5e                   	pop    esi
c000c5c4:	5f                   	pop    edi
c000c5c5:	ff e0                	jmp    eax

c000c5c7 <datetimeToSeconds(datetime_t)>:
c000c5c7:	55                   	push   ebp
c000c5c8:	57                   	push   edi
c000c5c9:	56                   	push   esi
c000c5ca:	53                   	push   ebx
c000c5cb:	83 ec 0c             	sub    esp,0xc
c000c5ce:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000c5d2:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c000c5d6:	89 d6                	mov    esi,edx
c000c5d8:	0f b6 c7             	movzx  eax,bh
c000c5db:	c1 ee 10             	shr    esi,0x10
c000c5de:	6b e8 3c             	imul   ebp,eax,0x3c
c000c5e1:	81 ee 6c 07 00 00    	sub    esi,0x76c
c000c5e7:	0f b6 ce             	movzx  ecx,dh
c000c5ea:	89 df                	mov    edi,ebx
c000c5ec:	49                   	dec    ecx
c000c5ed:	c1 ef 10             	shr    edi,0x10
c000c5f0:	0f b6 db             	movzx  ebx,bl
c000c5f3:	89 f8                	mov    eax,edi
c000c5f5:	69 db 10 0e 00 00    	imul   ebx,ebx,0xe10
c000c5fb:	0f b6 f8             	movzx  edi,al
c000c5fe:	0f b6 d2             	movzx  edx,dl
c000c601:	8d 44 3d 00          	lea    eax,[ebp+edi*1+0x0]
c000c605:	01 d8                	add    eax,ebx
c000c607:	0f b7 de             	movzx  ebx,si
c000c60a:	89 04 24             	mov    DWORD PTR [esp],eax
c000c60d:	c1 f8 1f             	sar    eax,0x1f
c000c610:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000c614:	0f b6 c1             	movzx  eax,cl
c000c617:	8b 0c 85 20 1a 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffde5e0]
c000c61e:	83 f8 01             	cmp    eax,0x1
c000c621:	8d 4c 0a ff          	lea    ecx,[edx+ecx*1-0x1]
c000c625:	76 27                	jbe    c000c64e <datetimeToSeconds(datetime_t)+0x87>
c000c627:	83 e6 03             	and    esi,0x3
c000c62a:	75 22                	jne    c000c64e <datetimeToSeconds(datetime_t)+0x87>
c000c62c:	31 d2                	xor    edx,edx
c000c62e:	be 64 00 00 00       	mov    esi,0x64
c000c633:	89 d8                	mov    eax,ebx
c000c635:	f7 f6                	div    esi
c000c637:	85 d2                	test   edx,edx
c000c639:	75 12                	jne    c000c64d <datetimeToSeconds(datetime_t)+0x86>
c000c63b:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c000c641:	be 90 01 00 00       	mov    esi,0x190
c000c646:	99                   	cdq    
c000c647:	f7 fe                	idiv   esi
c000c649:	85 d2                	test   edx,edx
c000c64b:	75 01                	jne    c000c64e <datetimeToSeconds(datetime_t)+0x87>
c000c64d:	41                   	inc    ecx
c000c64e:	83 fb 46             	cmp    ebx,0x46
c000c651:	76 48                	jbe    c000c69b <datetimeToSeconds(datetime_t)+0xd4>
c000c653:	be 46 00 00 00       	mov    esi,0x46
c000c658:	bf 64 00 00 00       	mov    edi,0x64
c000c65d:	bd 90 01 00 00       	mov    ebp,0x190
c000c662:	b8 6d 01 00 00       	mov    eax,0x16d
c000c667:	f7 c6 03 00 00 00    	test   esi,0x3
c000c66d:	75 23                	jne    c000c692 <datetimeToSeconds(datetime_t)+0xcb>
c000c66f:	89 f0                	mov    eax,esi
c000c671:	99                   	cdq    
c000c672:	f7 ff                	idiv   edi
c000c674:	b8 6e 01 00 00       	mov    eax,0x16e
c000c679:	85 d2                	test   edx,edx
c000c67b:	75 15                	jne    c000c692 <datetimeToSeconds(datetime_t)+0xcb>
c000c67d:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c000c683:	99                   	cdq    
c000c684:	f7 fd                	idiv   ebp
c000c686:	83 fa 01             	cmp    edx,0x1
c000c689:	19 c0                	sbb    eax,eax
c000c68b:	f7 d0                	not    eax
c000c68d:	05 6e 01 00 00       	add    eax,0x16e
c000c692:	01 c1                	add    ecx,eax
c000c694:	46                   	inc    esi
c000c695:	39 de                	cmp    esi,ebx
c000c697:	7c c9                	jl     c000c662 <datetimeToSeconds(datetime_t)+0x9b>
c000c699:	eb 34                	jmp    c000c6cf <datetimeToSeconds(datetime_t)+0x108>
c000c69b:	74 32                	je     c000c6cf <datetimeToSeconds(datetime_t)+0x108>
c000c69d:	b8 45 00 00 00       	mov    eax,0x45
c000c6a2:	89 c2                	mov    edx,eax
c000c6a4:	83 e2 03             	and    edx,0x3
c000c6a7:	39 d8                	cmp    eax,ebx
c000c6a9:	7e 0f                	jle    c000c6ba <datetimeToSeconds(datetime_t)+0xf3>
c000c6ab:	83 fa 01             	cmp    edx,0x1
c000c6ae:	19 d2                	sbb    edx,edx
c000c6b0:	48                   	dec    eax
c000c6b1:	8d 8c 11 93 fe ff ff 	lea    ecx,[ecx+edx*1-0x16d]
c000c6b8:	eb e8                	jmp    c000c6a2 <datetimeToSeconds(datetime_t)+0xdb>
c000c6ba:	b8 6d 01 00 00       	mov    eax,0x16d
c000c6bf:	85 d2                	test   edx,edx
c000c6c1:	75 0a                	jne    c000c6cd <datetimeToSeconds(datetime_t)+0x106>
c000c6c3:	83 fb 01             	cmp    ebx,0x1
c000c6c6:	19 c0                	sbb    eax,eax
c000c6c8:	05 6e 01 00 00       	add    eax,0x16e
c000c6cd:	29 c1                	sub    ecx,eax
c000c6cf:	b8 80 51 01 00       	mov    eax,0x15180
c000c6d4:	f7 e9                	imul   ecx
c000c6d6:	03 04 24             	add    eax,DWORD PTR [esp]
c000c6d9:	13 54 24 04          	adc    edx,DWORD PTR [esp+0x4]
c000c6dd:	83 c4 0c             	add    esp,0xc
c000c6e0:	5b                   	pop    ebx
c000c6e1:	5e                   	pop    esi
c000c6e2:	5f                   	pop    edi
c000c6e3:	5d                   	pop    ebp
c000c6e4:	c3                   	ret    
c000c6e5:	90                   	nop

c000c6e6 <Clock::setTimeInDatetimeLocal(datetime_t)>:
c000c6e6:	57                   	push   edi
c000c6e7:	56                   	push   esi
c000c6e8:	53                   	push   ebx
c000c6e9:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000c6ed:	8b 06                	mov    eax,DWORD PTR [esi]
c000c6ef:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c000c6f2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000c6f6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000c6fa:	e8 c8 fe ff ff       	call   c000c5c7 <datetimeToSeconds(datetime_t)>
c000c6ff:	59                   	pop    ecx
c000c700:	0f b6 0d 08 94 02 c0 	movzx  ecx,BYTE PTR ds:0xc0029408
c000c707:	5b                   	pop    ebx
c000c708:	03 0d 0c 94 02 c0    	add    ecx,DWORD PTR ds:0xc002940c
c000c70e:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000c714:	89 cb                	mov    ebx,ecx
c000c716:	c1 fb 1f             	sar    ebx,0x1f
c000c719:	29 c8                	sub    eax,ecx
c000c71b:	19 da                	sbb    edx,ebx
c000c71d:	31 c9                	xor    ecx,ecx
c000c71f:	80 3d 09 94 02 c0 00 	cmp    BYTE PTR ds:0xc0029409,0x0
c000c726:	74 05                	je     c000c72d <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c000c728:	b9 08 07 00 00       	mov    ecx,0x708
c000c72d:	31 db                	xor    ebx,ebx
c000c72f:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c000c733:	29 c8                	sub    eax,ecx
c000c735:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c739:	19 da                	sbb    edx,ebx
c000c73b:	89 f8                	mov    eax,edi
c000c73d:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c741:	5b                   	pop    ebx
c000c742:	5e                   	pop    esi
c000c743:	5f                   	pop    edi
c000c744:	ff e0                	jmp    eax

c000c746 <secondsToDatetime(unsigned long long)>:
c000c746:	55                   	push   ebp
c000c747:	57                   	push   edi
c000c748:	56                   	push   esi
c000c749:	53                   	push   ebx
c000c74a:	83 ec 1c             	sub    esp,0x1c
c000c74d:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000c751:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000c755:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000c759:	6a 00                	push   0x0
c000c75b:	68 80 51 01 00       	push   0x15180
c000c760:	55                   	push   ebp
c000c761:	57                   	push   edi
c000c762:	e8 99 2f 01 00       	call   c001f700 <__udivdi3>
c000c767:	83 c4 10             	add    esp,0x10
c000c76a:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c000c770:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c774:	6a 00                	push   0x0
c000c776:	68 80 51 01 00       	push   0x15180
c000c77b:	55                   	push   ebp
c000c77c:	57                   	push   edi
c000c77d:	bf 10 0e 00 00       	mov    edi,0xe10
c000c782:	e8 79 30 01 00       	call   c001f800 <__umoddi3>
c000c787:	83 c4 10             	add    esp,0x10
c000c78a:	99                   	cdq    
c000c78b:	f7 ff                	idiv   edi
c000c78d:	bf 3c 00 00 00       	mov    edi,0x3c
c000c792:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c000c795:	89 d0                	mov    eax,edx
c000c797:	99                   	cdq    
c000c798:	f7 ff                	idiv   edi
c000c79a:	85 db                	test   ebx,ebx
c000c79c:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c000c79f:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c000c7a2:	79 11                	jns    c000c7b5 <secondsToDatetime(unsigned long long)+0x6f>
c000c7a4:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000c7a8:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c000c7ae:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c000c7b3:	eb 07                	jmp    c000c7bc <secondsToDatetime(unsigned long long)+0x76>
c000c7b5:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c000c7ba:	89 d8                	mov    eax,ebx
c000c7bc:	bf b4 05 00 00       	mov    edi,0x5b4
c000c7c1:	99                   	cdq    
c000c7c2:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c000c7c7:	f7 f9                	idiv   ecx
c000c7c9:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c000c7ce:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c7d2:	31 d2                	xor    edx,edx
c000c7d4:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c000c7dc:	01 c3                	add    ebx,eax
c000c7de:	89 d8                	mov    eax,ebx
c000c7e0:	f7 f1                	div    ecx
c000c7e2:	31 d2                	xor    edx,edx
c000c7e4:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c000c7e7:	89 d8                	mov    eax,ebx
c000c7e9:	f7 f7                	div    edi
c000c7eb:	31 d2                	xor    edx,edx
c000c7ed:	29 c1                	sub    ecx,eax
c000c7ef:	89 d8                	mov    eax,ebx
c000c7f1:	f7 f5                	div    ebp
c000c7f3:	bd 6d 01 00 00       	mov    ebp,0x16d
c000c7f8:	29 c1                	sub    ecx,eax
c000c7fa:	31 d2                	xor    edx,edx
c000c7fc:	89 c8                	mov    eax,ecx
c000c7fe:	f7 f5                	div    ebp
c000c800:	bd 94 8e 00 00       	mov    ebp,0x8e94
c000c805:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000c809:	31 d2                	xor    edx,edx
c000c80b:	89 c8                	mov    eax,ecx
c000c80d:	f7 f5                	div    ebp
c000c80f:	31 d2                	xor    edx,edx
c000c811:	01 c3                	add    ebx,eax
c000c813:	89 c8                	mov    eax,ecx
c000c815:	f7 f7                	div    edi
c000c817:	bf 99 00 00 00       	mov    edi,0x99
c000c81c:	29 c3                	sub    ebx,eax
c000c81e:	31 d2                	xor    edx,edx
c000c820:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c000c828:	29 c3                	sub    ebx,eax
c000c82a:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000c82d:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c000c830:	bb 05 00 00 00       	mov    ebx,0x5
c000c835:	83 c1 02             	add    ecx,0x2
c000c838:	89 c8                	mov    eax,ecx
c000c83a:	f7 f7                	div    edi
c000c83c:	31 d2                	xor    edx,edx
c000c83e:	89 c7                	mov    edi,eax
c000c840:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c000c846:	83 c0 02             	add    eax,0x2
c000c849:	f7 f3                	div    ebx
c000c84b:	89 eb                	mov    ebx,ebp
c000c84d:	29 c3                	sub    ebx,eax
c000c84f:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c000c855:	88 1e                	mov    BYTE PTR [esi],bl
c000c857:	19 c0                	sbb    eax,eax
c000c859:	31 d2                	xor    edx,edx
c000c85b:	83 e0 0c             	and    eax,0xc
c000c85e:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c000c862:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c000c86a:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000c86e:	83 f9 01             	cmp    ecx,0x1
c000c871:	0f 96 c2             	setbe  dl
c000c874:	41                   	inc    ecx
c000c875:	01 d0                	add    eax,edx
c000c877:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c000c87a:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c000c87e:	83 c4 1c             	add    esp,0x1c
c000c881:	89 f0                	mov    eax,esi
c000c883:	5b                   	pop    ebx
c000c884:	5e                   	pop    esi
c000c885:	5f                   	pop    edi
c000c886:	5d                   	pop    ebp
c000c887:	c2 04 00             	ret    0x4

c000c88a <Clock::timeInDatetimeLocal()>:
c000c88a:	53                   	push   ebx
c000c88b:	83 ec 14             	sub    esp,0x14
c000c88e:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000c892:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000c896:	e8 8b fc ff ff       	call   c000c526 <Clock::timeInSecondsLocal()>
c000c89b:	83 c4 0c             	add    esp,0xc
c000c89e:	52                   	push   edx
c000c89f:	50                   	push   eax
c000c8a0:	53                   	push   ebx
c000c8a1:	e8 a0 fe ff ff       	call   c000c746 <secondsToDatetime(unsigned long long)>
c000c8a6:	89 d8                	mov    eax,ebx
c000c8a8:	83 c4 14             	add    esp,0x14
c000c8ab:	5b                   	pop    ebx
c000c8ac:	c2 04 00             	ret    0x4
c000c8af:	90                   	nop

c000c8b0 <Device::hibernate()>:
c000c8b0:	c3                   	ret    
c000c8b1:	90                   	nop

c000c8b2 <Device::wake()>:
c000c8b2:	c3                   	ret    
c000c8b3:	90                   	nop

c000c8b4 <Device::detect()>:
c000c8b4:	c3                   	ret    
c000c8b5:	90                   	nop

c000c8b6 <Device::disableLegacy()>:
c000c8b6:	c3                   	ret    
c000c8b7:	90                   	nop

c000c8b8 <Device::powerSaving(PowerSavingLevel)>:
c000c8b8:	c3                   	ret    
c000c8b9:	90                   	nop

c000c8ba <DriverlessDevice::close(int, int, void*)>:
c000c8ba:	31 c0                	xor    eax,eax
c000c8bc:	c3                   	ret    
c000c8bd:	90                   	nop

c000c8be <DriverlessDevice::detect()>:
c000c8be:	c3                   	ret    
c000c8bf:	90                   	nop

c000c8c0 <DriverlessDevice::open(int, int, void*)>:
c000c8c0:	83 ec 18             	sub    esp,0x18
c000c8c3:	68 50 1a 02 c0       	push   0xc0021a50
c000c8c8:	e8 5e 4d 00 00       	call   c001162b <KePanic(char const*)>
c000c8cd:	83 c8 ff             	or     eax,0xffffffff
c000c8d0:	83 c4 1c             	add    esp,0x1c
c000c8d3:	c3                   	ret    

c000c8d4 <Device::~Device()>:
c000c8d4:	ba b0 1a 02 c0       	mov    edx,0xc0021ab0
c000c8d9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c8dd:	89 10                	mov    DWORD PTR [eax],edx
c000c8df:	90                   	nop
c000c8e0:	c3                   	ret    
c000c8e1:	90                   	nop

c000c8e2 <Device::~Device()>:
c000c8e2:	83 ec 0c             	sub    esp,0xc
c000c8e5:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000c8e9:	e8 e6 ff ff ff       	call   c000c8d4 <Device::~Device()>
c000c8ee:	83 c4 04             	add    esp,0x4
c000c8f1:	83 ec 08             	sub    esp,0x8
c000c8f4:	68 58 01 00 00       	push   0x158
c000c8f9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c8fd:	e8 16 df ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c000c902:	83 c4 10             	add    esp,0x10
c000c905:	83 c4 0c             	add    esp,0xc
c000c908:	c3                   	ret    
c000c909:	90                   	nop

c000c90a <Device::findAndLoadDriver()>:
c000c90a:	c7 44 24 04 6e 1a 02 c0 	mov    DWORD PTR [esp+0x4],0xc0021a6e
c000c912:	e9 2e e0 ff ff       	jmp    c000a945 <Dbg::kprintf(char const*, ...)>
c000c917:	90                   	nop

c000c918 <Device::preOpenPCI(PCIDeviceInfo)>:
c000c918:	57                   	push   edi
c000c919:	b9 09 00 00 00       	mov    ecx,0x9
c000c91e:	56                   	push   esi
c000c91f:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000c923:	8d 74 24 10          	lea    esi,[esp+0x10]
c000c927:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c000c931:	81 c7 18 01 00 00    	add    edi,0x118
c000c937:	fc                   	cld    
c000c938:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000c93a:	5e                   	pop    esi
c000c93b:	5f                   	pop    edi
c000c93c:	c3                   	ret    
c000c93d:	90                   	nop

c000c93e <Device::preOpenACPI(void*, char*, char*)>:
c000c93e:	57                   	push   edi
c000c93f:	b9 1e 00 00 00       	mov    ecx,0x1e
c000c944:	56                   	push   esi
c000c945:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c949:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c94d:	c7 80 14 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x114],0x3
c000c957:	89 90 18 01 00 00    	mov    DWORD PTR [eax+0x118],edx
c000c95d:	8d b8 1c 01 00 00    	lea    edi,[eax+0x11c]
c000c963:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000c967:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000c969:	b9 0e 00 00 00       	mov    ecx,0xe
c000c96e:	8d b8 3a 01 00 00    	lea    edi,[eax+0x13a]
c000c974:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000c978:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000c97a:	5e                   	pop    esi
c000c97b:	5f                   	pop    edi
c000c97c:	c3                   	ret    
c000c97d:	90                   	nop

c000c97e <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000c97e:	53                   	push   ebx
c000c97f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c983:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000c987:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000c98b:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000c98f:	0f b6 c0             	movzx  eax,al
c000c992:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c000c996:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c99a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000c99e:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000c9a2:	5b                   	pop    ebx
c000c9a3:	e9 a8 05 00 00       	jmp    c000cf50 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)>

c000c9a8 <Device::getParent()>:
c000c9a8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c9ac:	8b 80 c8 00 00 00    	mov    eax,DWORD PTR [eax+0xc8]
c000c9b2:	c3                   	ret    
c000c9b3:	90                   	nop

c000c9b4 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c000c9b4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c9b8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c9bc:	0f b6 4c 24 10       	movzx  ecx,BYTE PTR [esp+0x10]
c000c9c1:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000c9c5:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000c9c9:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000c9cd:	e9 e6 06 00 00       	jmp    c000d0b8 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)>

c000c9d2 <Device::addChild(Device*)>:
c000c9d2:	53                   	push   ebx
c000c9d3:	83 ec 08             	sub    esp,0x8
c000c9d6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c9da:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000c9de:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c000c9e4:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c000c9ea:	8b 13                	mov    edx,DWORD PTR [ebx]
c000c9ec:	85 d2                	test   edx,edx
c000c9ee:	74 04                	je     c000c9f4 <Device::addChild(Device*)+0x22>
c000c9f0:	89 d3                	mov    ebx,edx
c000c9f2:	eb f6                	jmp    c000c9ea <Device::addChild(Device*)+0x18>
c000c9f4:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000c9f7:	83 ec 0c             	sub    esp,0xc
c000c9fa:	6a 08                	push   0x8
c000c9fc:	e8 b5 b0 ff ff       	call   c0007ab6 <malloc>
c000ca01:	89 03                	mov    DWORD PTR [ebx],eax
c000ca03:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000ca09:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000ca10:	83 c4 18             	add    esp,0x18
c000ca13:	5b                   	pop    ebx
c000ca14:	c3                   	ret    
c000ca15:	90                   	nop

c000ca16 <Device::removeAllChildren()>:
c000ca16:	56                   	push   esi
c000ca17:	53                   	push   ebx
c000ca18:	52                   	push   edx
c000ca19:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000ca1d:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c000ca23:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000ca26:	74 17                	je     c000ca3f <Device::removeAllChildren()+0x29>
c000ca28:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000ca2b:	85 c0                	test   eax,eax
c000ca2d:	74 0c                	je     c000ca3b <Device::removeAllChildren()+0x25>
c000ca2f:	83 ec 0c             	sub    esp,0xc
c000ca32:	8b 10                	mov    edx,DWORD PTR [eax]
c000ca34:	50                   	push   eax
c000ca35:	ff 52 04             	call   DWORD PTR [edx+0x4]
c000ca38:	83 c4 10             	add    esp,0x10
c000ca3b:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000ca3d:	eb e4                	jmp    c000ca23 <Device::removeAllChildren()+0xd>
c000ca3f:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000ca45:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000ca4b:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000ca51:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000ca58:	58                   	pop    eax
c000ca59:	5b                   	pop    ebx
c000ca5a:	5e                   	pop    esi
c000ca5b:	c3                   	ret    

c000ca5c <Device::hibernateAll()>:
c000ca5c:	53                   	push   ebx
c000ca5d:	83 ec 14             	sub    esp,0x14
c000ca60:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000ca64:	8b 03                	mov    eax,DWORD PTR [ebx]
c000ca66:	53                   	push   ebx
c000ca67:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000ca6a:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000ca70:	83 c4 10             	add    esp,0x10
c000ca73:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000ca76:	74 0f                	je     c000ca87 <Device::hibernateAll()+0x2b>
c000ca78:	83 ec 0c             	sub    esp,0xc
c000ca7b:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000ca7e:	e8 d9 ff ff ff       	call   c000ca5c <Device::hibernateAll()>
c000ca83:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000ca85:	eb e9                	jmp    c000ca70 <Device::hibernateAll()+0x14>
c000ca87:	83 c4 08             	add    esp,0x8
c000ca8a:	5b                   	pop    ebx
c000ca8b:	c3                   	ret    

c000ca8c <Device::wakeAll()>:
c000ca8c:	53                   	push   ebx
c000ca8d:	83 ec 14             	sub    esp,0x14
c000ca90:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000ca94:	8b 03                	mov    eax,DWORD PTR [ebx]
c000ca96:	53                   	push   ebx
c000ca97:	ff 50 14             	call   DWORD PTR [eax+0x14]
c000ca9a:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000caa0:	83 c4 10             	add    esp,0x10
c000caa3:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000caa6:	74 0f                	je     c000cab7 <Device::wakeAll()+0x2b>
c000caa8:	83 ec 0c             	sub    esp,0xc
c000caab:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000caae:	e8 d9 ff ff ff       	call   c000ca8c <Device::wakeAll()>
c000cab3:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000cab5:	eb e9                	jmp    c000caa0 <Device::wakeAll()+0x14>
c000cab7:	83 c4 08             	add    esp,0x8
c000caba:	5b                   	pop    ebx
c000cabb:	c3                   	ret    

c000cabc <Device::detectAll()>:
c000cabc:	53                   	push   ebx
c000cabd:	83 ec 14             	sub    esp,0x14
c000cac0:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000cac4:	8b 03                	mov    eax,DWORD PTR [ebx]
c000cac6:	53                   	push   ebx
c000cac7:	ff 50 18             	call   DWORD PTR [eax+0x18]
c000caca:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000cad0:	83 c4 10             	add    esp,0x10
c000cad3:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000cad6:	74 0f                	je     c000cae7 <Device::detectAll()+0x2b>
c000cad8:	83 ec 0c             	sub    esp,0xc
c000cadb:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000cade:	e8 d9 ff ff ff       	call   c000cabc <Device::detectAll()>
c000cae3:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000cae5:	eb e9                	jmp    c000cad0 <Device::detectAll()+0x14>
c000cae7:	83 c4 08             	add    esp,0x8
c000caea:	5b                   	pop    ebx
c000caeb:	c3                   	ret    

c000caec <Device::disableLegacyAll()>:
c000caec:	c3                   	ret    
c000caed:	90                   	nop

c000caee <Device::loadDriversForAll()>:
c000caee:	c3                   	ret    
c000caef:	90                   	nop

c000caf0 <Device::closeAll()>:
c000caf0:	53                   	push   ebx
c000caf1:	83 ec 08             	sub    esp,0x8
c000caf4:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000caf8:	8b 03                	mov    eax,DWORD PTR [ebx]
c000cafa:	6a 00                	push   0x0
c000cafc:	6a 00                	push   0x0
c000cafe:	6a 00                	push   0x0
c000cb00:	53                   	push   ebx
c000cb01:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000cb04:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000cb0a:	83 c4 10             	add    esp,0x10
c000cb0d:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000cb10:	74 0f                	je     c000cb21 <Device::closeAll()+0x31>
c000cb12:	83 ec 0c             	sub    esp,0xc
c000cb15:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000cb18:	e8 d3 ff ff ff       	call   c000caf0 <Device::closeAll()>
c000cb1d:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000cb1f:	eb e9                	jmp    c000cb0a <Device::closeAll()+0x1a>
c000cb21:	83 c4 08             	add    esp,0x8
c000cb24:	5b                   	pop    ebx
c000cb25:	c3                   	ret    

c000cb26 <Device::powerSavingAll(PowerSavingLevel)>:
c000cb26:	56                   	push   esi
c000cb27:	53                   	push   ebx
c000cb28:	83 ec 0c             	sub    esp,0xc
c000cb2b:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000cb2f:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000cb33:	8b 03                	mov    eax,DWORD PTR [ebx]
c000cb35:	56                   	push   esi
c000cb36:	53                   	push   ebx
c000cb37:	ff 50 20             	call   DWORD PTR [eax+0x20]
c000cb3a:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000cb40:	83 c4 10             	add    esp,0x10
c000cb43:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000cb46:	74 0f                	je     c000cb57 <Device::powerSavingAll(PowerSavingLevel)+0x31>
c000cb48:	52                   	push   edx
c000cb49:	52                   	push   edx
c000cb4a:	56                   	push   esi
c000cb4b:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000cb4e:	e8 d3 ff ff ff       	call   c000cb26 <Device::powerSavingAll(PowerSavingLevel)>
c000cb53:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000cb55:	eb e9                	jmp    c000cb40 <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c000cb57:	58                   	pop    eax
c000cb58:	5b                   	pop    ebx
c000cb59:	5e                   	pop    esi
c000cb5a:	c3                   	ret    
c000cb5b:	90                   	nop

c000cb5c <Device::setName(char const*)>:
c000cb5c:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c000cb64:	e9 d7 3a ff ff       	jmp    c0000640 <strcpy>
c000cb69:	90                   	nop

c000cb6a <Device::Device(char const*)>:
c000cb6a:	83 ec 1c             	sub    esp,0x1c
c000cb6d:	ba b0 1a 02 c0       	mov    edx,0xc0021ab0
c000cb72:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cb76:	89 10                	mov    DWORD PTR [eax],edx
c000cb78:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cb7c:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c000cb86:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cb8a:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000cb94:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cb98:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000cba2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cba6:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000cbb0:	83 ec 08             	sub    esp,0x8
c000cbb3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cbb7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cbbb:	e8 9c ff ff ff       	call   c000cb5c <Device::setName(char const*)>
c000cbc0:	83 c4 10             	add    esp,0x10
c000cbc3:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c000cbcb:	83 ec 0c             	sub    esp,0xc
c000cbce:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000cbd2:	e8 df ae ff ff       	call   c0007ab6 <malloc>
c000cbd7:	83 c4 10             	add    esp,0x10
c000cbda:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000cbe0:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000cbe7:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000cbeb:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c000cbf1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cbf5:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000cbfb:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000cc01:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cc05:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000cc0b:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000cc12:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cc16:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c000cc1d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cc21:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c000cc28:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cc2c:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000cc36:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cc3a:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000cc44:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cc48:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000cc52:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cc56:	c7 80 10 01 00 00 14 00 00 00 	mov    DWORD PTR [eax+0x110],0x14
c000cc60:	90                   	nop
c000cc61:	83 c4 1c             	add    esp,0x1c
c000cc64:	c3                   	ret    
c000cc65:	90                   	nop

c000cc66 <Device::getName()>:
c000cc66:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cc6a:	05 d0 00 00 00       	add    eax,0xd0
c000cc6f:	c3                   	ret    

c000cc70 <DriverlessDevice::DriverlessDevice(char const*)>:
c000cc70:	83 ec 0c             	sub    esp,0xc
c000cc73:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cc77:	83 ec 08             	sub    esp,0x8
c000cc7a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cc7e:	50                   	push   eax
c000cc7f:	e8 e6 fe ff ff       	call   c000cb6a <Device::Device(char const*)>
c000cc84:	83 c4 10             	add    esp,0x10
c000cc87:	ba dc 1a 02 c0       	mov    edx,0xc0021adc
c000cc8c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cc90:	89 10                	mov    DWORD PTR [eax],edx
c000cc92:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cc96:	c7 80 10 01 00 00 13 00 00 00 	mov    DWORD PTR [eax+0x110],0x13
c000cca0:	90                   	nop
c000cca1:	83 c4 0c             	add    esp,0xc
c000cca4:	c3                   	ret    
c000cca5:	90                   	nop

c000cca6 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c000cca6:	57                   	push   edi
c000cca7:	56                   	push   esi
c000cca8:	53                   	push   ebx
c000cca9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ccad:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000ccb1:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000ccb5:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c000ccbb:	75 0c                	jne    c000ccc9 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c000ccbd:	52                   	push   edx
c000ccbe:	52                   	push   edx
c000ccbf:	53                   	push   ebx
c000ccc0:	56                   	push   esi
c000ccc1:	e8 ec 2e 01 00       	call   c001fbb2 <LinkedList<Device>::addElement(Device*)>
c000ccc6:	83 c4 10             	add    esp,0x10
c000ccc9:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000cccf:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000ccd2:	74 12                	je     c000cce6 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c000ccd4:	50                   	push   eax
c000ccd5:	57                   	push   edi
c000ccd6:	56                   	push   esi
c000ccd7:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000ccda:	e8 c7 ff ff ff       	call   c000cca6 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000ccdf:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000cce1:	83 c4 10             	add    esp,0x10
c000cce4:	eb e9                	jmp    c000cccf <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c000cce6:	5b                   	pop    ebx
c000cce7:	5e                   	pop    esi
c000cce8:	5f                   	pop    edi
c000cce9:	c3                   	ret    

c000ccea <getDevicesOfType(DeviceType)>:
c000ccea:	53                   	push   ebx
c000cceb:	83 ec 14             	sub    esp,0x14
c000ccee:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000ccf2:	53                   	push   ebx
c000ccf3:	e8 96 2f 01 00       	call   c001fc8e <LinkedList<Device>::LinkedList()>
c000ccf8:	83 c4 0c             	add    esp,0xc
c000ccfb:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ccff:	53                   	push   ebx
c000cd00:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c000cd06:	e8 9b ff ff ff       	call   c000cca6 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000cd0b:	89 d8                	mov    eax,ebx
c000cd0d:	83 c4 18             	add    esp,0x18
c000cd10:	5b                   	pop    ebx
c000cd11:	c2 04 00             	ret    0x4

c000cd14 <HardDiskController::HardDiskController(char const*)>:
c000cd14:	83 ec 0c             	sub    esp,0xc
c000cd17:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cd1b:	83 ec 08             	sub    esp,0x8
c000cd1e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cd22:	50                   	push   eax
c000cd23:	e8 42 fe ff ff       	call   c000cb6a <Device::Device(char const*)>
c000cd28:	83 c4 10             	add    esp,0x10
c000cd2b:	ba 08 1b 02 c0       	mov    edx,0xc0021b08
c000cd30:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cd34:	89 10                	mov    DWORD PTR [eax],edx
c000cd36:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cd3a:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c000cd44:	90                   	nop
c000cd45:	83 c4 0c             	add    esp,0xc
c000cd48:	c3                   	ret    
c000cd49:	90                   	nop
c000cd4a:	66 90                	xchg   ax,ax

c000cd4c <HardDiskController::~HardDiskController()>:
c000cd4c:	83 ec 0c             	sub    esp,0xc
c000cd4f:	ba 08 1b 02 c0       	mov    edx,0xc0021b08
c000cd54:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cd58:	89 10                	mov    DWORD PTR [eax],edx
c000cd5a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cd5e:	83 ec 0c             	sub    esp,0xc
c000cd61:	50                   	push   eax
c000cd62:	e8 6d fb ff ff       	call   c000c8d4 <Device::~Device()>
c000cd67:	83 c4 10             	add    esp,0x10
c000cd6a:	90                   	nop
c000cd6b:	83 c4 0c             	add    esp,0xc
c000cd6e:	c3                   	ret    
c000cd6f:	90                   	nop

c000cd70 <HardDiskController::~HardDiskController()>:
c000cd70:	83 ec 0c             	sub    esp,0xc
c000cd73:	83 ec 0c             	sub    esp,0xc
c000cd76:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cd7a:	e8 cd ff ff ff       	call   c000cd4c <HardDiskController::~HardDiskController()>
c000cd7f:	83 c4 10             	add    esp,0x10
c000cd82:	83 ec 08             	sub    esp,0x8
c000cd85:	68 58 01 00 00       	push   0x158
c000cd8a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cd8e:	e8 85 da ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c000cd93:	83 c4 10             	add    esp,0x10
c000cd96:	83 c4 0c             	add    esp,0xc
c000cd99:	c3                   	ret    

c000cd9a <PhysicalDisk::eject()>:
c000cd9a:	83 c8 ff             	or     eax,0xffffffff
c000cd9d:	c3                   	ret    

c000cd9e <PhysicalDisk::PhysicalDisk(char const*, int)>:
c000cd9e:	83 ec 0c             	sub    esp,0xc
c000cda1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cda5:	83 ec 08             	sub    esp,0x8
c000cda8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cdac:	50                   	push   eax
c000cdad:	e8 b8 fd ff ff       	call   c000cb6a <Device::Device(char const*)>
c000cdb2:	83 c4 10             	add    esp,0x10
c000cdb5:	ba 34 1b 02 c0       	mov    edx,0xc0021b34
c000cdba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cdbe:	89 10                	mov    DWORD PTR [eax],edx
c000cdc0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cdc4:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000cdcb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cdcf:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c000cdd6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cdda:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c000cde4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cde8:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000cdec:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c000cdf2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cdf6:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c000ce00:	90                   	nop
c000ce01:	83 c4 0c             	add    esp,0xc
c000ce04:	c3                   	ret    
c000ce05:	90                   	nop

c000ce06 <PhysicalDisk::startCache()>:
c000ce06:	56                   	push   esi
c000ce07:	53                   	push   ebx
c000ce08:	83 ec 10             	sub    esp,0x10
c000ce0b:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000ce0f:	6a 44                	push   0x44
c000ce11:	e8 a0 ac ff ff       	call   c0007ab6 <malloc>
c000ce16:	89 c6                	mov    esi,eax
c000ce18:	58                   	pop    eax
c000ce19:	5a                   	pop    edx
c000ce1a:	53                   	push   ebx
c000ce1b:	56                   	push   esi
c000ce1c:	e8 7b 17 00 00       	call   c000e59c <VCache::VCache(PhysicalDisk*)>
c000ce21:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c000ce27:	83 c4 14             	add    esp,0x14
c000ce2a:	5b                   	pop    ebx
c000ce2b:	5e                   	pop    esi
c000ce2c:	c3                   	ret    
c000ce2d:	90                   	nop

c000ce2e <PhysicalDisk::~PhysicalDisk()>:
c000ce2e:	83 ec 0c             	sub    esp,0xc
c000ce31:	ba 34 1b 02 c0       	mov    edx,0xc0021b34
c000ce36:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ce3a:	89 10                	mov    DWORD PTR [eax],edx
c000ce3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ce40:	83 ec 0c             	sub    esp,0xc
c000ce43:	50                   	push   eax
c000ce44:	e8 8b fa ff ff       	call   c000c8d4 <Device::~Device()>
c000ce49:	83 c4 10             	add    esp,0x10
c000ce4c:	90                   	nop
c000ce4d:	83 c4 0c             	add    esp,0xc
c000ce50:	c3                   	ret    
c000ce51:	90                   	nop

c000ce52 <PhysicalDisk::~PhysicalDisk()>:
c000ce52:	83 ec 0c             	sub    esp,0xc
c000ce55:	83 ec 0c             	sub    esp,0xc
c000ce58:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce5c:	e8 cd ff ff ff       	call   c000ce2e <PhysicalDisk::~PhysicalDisk()>
c000ce61:	83 c4 10             	add    esp,0x10
c000ce64:	83 ec 08             	sub    esp,0x8
c000ce67:	68 6c 01 00 00       	push   0x16c
c000ce6c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce70:	e8 a3 d9 ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c000ce75:	83 c4 10             	add    esp,0x10
c000ce78:	83 c4 0c             	add    esp,0xc
c000ce7b:	c3                   	ret    

c000ce7c <int_handler>:
c000ce7c:	55                   	push   ebp
c000ce7d:	57                   	push   edi
c000ce7e:	56                   	push   esi
c000ce7f:	53                   	push   ebx
c000ce80:	83 ec 0c             	sub    esp,0xc
c000ce83:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000ce87:	80 3d 88 be 02 c0 00 	cmp    BYTE PTR ds:0xc002be88,0x0
c000ce8e:	74 0b                	je     c000ce9b <int_handler+0x1f>
c000ce90:	fa                   	cli    
c000ce91:	f4                   	hlt    
c000ce92:	80 3d 88 be 02 c0 00 	cmp    BYTE PTR ds:0xc002be88,0x0
c000ce99:	75 f5                	jne    c000ce90 <int_handler+0x14>
c000ce9b:	8b 77 30             	mov    esi,DWORD PTR [edi+0x30]
c000ce9e:	8d 46 e0             	lea    eax,[esi-0x20]
c000cea1:	83 f8 17             	cmp    eax,0x17
c000cea4:	76 40                	jbe    c000cee6 <int_handler+0x6a>
c000cea6:	c1 e6 04             	shl    esi,0x4
c000cea9:	31 db                	xor    ebx,ebx
c000ceab:	8d ae 20 a4 02 c0    	lea    ebp,[esi-0x3ffd5be0]
c000ceb1:	81 c6 20 94 02 c0    	add    esi,0xc0029420
c000ceb7:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c000cebb:	85 c0                	test   eax,eax
c000cebd:	74 13                	je     c000ced2 <int_handler+0x56>
c000cebf:	8b 14 9e             	mov    edx,DWORD PTR [esi+ebx*4]
c000cec2:	83 7f 30 60          	cmp    DWORD PTR [edi+0x30],0x60
c000cec6:	74 2c                	je     c000cef4 <int_handler+0x78>
c000cec8:	83 ec 08             	sub    esp,0x8
c000cecb:	52                   	push   edx
c000cecc:	57                   	push   edi
c000cecd:	ff d0                	call   eax
c000cecf:	83 c4 10             	add    esp,0x10
c000ced2:	83 c3 01             	add    ebx,0x1
c000ced5:	83 fb 04             	cmp    ebx,0x4
c000ced8:	75 dd                	jne    c000ceb7 <int_handler+0x3b>
c000ceda:	83 c4 0c             	add    esp,0xc
c000cedd:	31 c0                	xor    eax,eax
c000cedf:	5b                   	pop    ebx
c000cee0:	31 d2                	xor    edx,edx
c000cee2:	5e                   	pop    esi
c000cee3:	5f                   	pop    edi
c000cee4:	5d                   	pop    ebp
c000cee5:	c3                   	ret    
c000cee6:	83 ec 0c             	sub    esp,0xc
c000cee9:	50                   	push   eax
c000ceea:	e8 69 b4 00 00       	call   c0018358 <HalEndOfInterrupt(int)>
c000ceef:	83 c4 10             	add    esp,0x10
c000cef2:	eb b2                	jmp    c000cea6 <int_handler+0x2a>
c000cef4:	83 ec 08             	sub    esp,0x8
c000cef7:	52                   	push   edx
c000cef8:	57                   	push   edi
c000cef9:	ff d0                	call   eax
c000cefb:	83 c4 10             	add    esp,0x10
c000cefe:	83 c4 0c             	add    esp,0xc
c000cf01:	5b                   	pop    ebx
c000cf02:	5e                   	pop    esi
c000cf03:	5f                   	pop    edi
c000cf04:	5d                   	pop    ebp
c000cf05:	c3                   	ret    

c000cf06 <installISRHandler(int, void (*)(regs*, void*), void*)>:
c000cf06:	56                   	push   esi
c000cf07:	31 c0                	xor    eax,eax
c000cf09:	53                   	push   ebx
c000cf0a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000cf0e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000cf12:	89 ca                	mov    edx,ecx
c000cf14:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000cf18:	c1 e2 04             	shl    edx,0x4
c000cf1b:	83 bc 82 20 a4 02 c0 00 	cmp    DWORD PTR [edx+eax*4-0x3ffd5be0],0x0
c000cf23:	74 17                	je     c000cf3c <installISRHandler(int, void (*)(regs*, void*), void*)+0x36>
c000cf25:	83 c0 01             	add    eax,0x1
c000cf28:	83 f8 04             	cmp    eax,0x4
c000cf2b:	75 ee                	jne    c000cf1b <installISRHandler(int, void (*)(regs*, void*), void*)+0x15>
c000cf2d:	c7 44 24 0c 64 1b 02 c0 	mov    DWORD PTR [esp+0xc],0xc0021b64
c000cf35:	5b                   	pop    ebx
c000cf36:	5e                   	pop    esi
c000cf37:	e9 ef 46 00 00       	jmp    c001162b <KePanic(char const*)>
c000cf3c:	8d 04 88             	lea    eax,[eax+ecx*4]
c000cf3f:	89 1c 85 20 a4 02 c0 	mov    DWORD PTR [eax*4-0x3ffd5be0],ebx
c000cf46:	89 34 85 20 94 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6be0],esi
c000cf4d:	5b                   	pop    ebx
c000cf4e:	5e                   	pop    esi
c000cf4f:	c3                   	ret    

c000cf50 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000cf50:	57                   	push   edi
c000cf51:	8b 15 b8 6e 02 c0    	mov    edx,DWORD PTR ds:0xc0026eb8
c000cf57:	56                   	push   esi
c000cf58:	53                   	push   ebx
c000cf59:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000cf5d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000cf61:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c000cf68:	74 54                	je     c000cfbe <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x6e>
c000cf6a:	89 c7                	mov    edi,eax
c000cf6c:	84 c0                	test   al,al
c000cf6e:	74 1d                	je     c000cf8d <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3d>
c000cf70:	83 fe 0f             	cmp    esi,0xf
c000cf73:	0f 8f d5 00 00 00    	jg     c000d04e <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xfe>
c000cf79:	0f b6 b6 68 36 02 c0 	movzx  esi,BYTE PTR [esi-0x3ffdc998]
c000cf80:	0f b7 bc 36 c0 bb 02 c0 	movzx  edi,WORD PTR [esi+esi*1-0x3ffd4440]
c000cf88:	d1 ef                	shr    edi,1
c000cf8a:	83 e7 01             	and    edi,0x1
c000cf8d:	83 ec 08             	sub    esp,0x8
c000cf90:	a1 c0 d0 02 c0       	mov    eax,ds:0xc002d0c0
c000cf95:	31 db                	xor    ebx,ebx
c000cf97:	50                   	push   eax
c000cf98:	68 71 1b 02 c0       	push   0xc0021b71
c000cf9d:	e8 a3 d9 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000cfa2:	83 c4 10             	add    esp,0x10
c000cfa5:	a1 c0 d0 02 c0       	mov    eax,ds:0xc002d0c0
c000cfaa:	85 c0                	test   eax,eax
c000cfac:	7f 55                	jg     c000d003 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xb3>
c000cfae:	83 ec 0c             	sub    esp,0xc
c000cfb1:	68 88 1b 02 c0       	push   0xc0021b88
c000cfb6:	e8 70 46 00 00       	call   c001162b <KePanic(char const*)>
c000cfbb:	83 c4 10             	add    esp,0x10
c000cfbe:	8d 7e 20             	lea    edi,[esi+0x20]
c000cfc1:	89 f8                	mov    eax,edi
c000cfc3:	31 d2                	xor    edx,edx
c000cfc5:	c1 e0 04             	shl    eax,0x4
c000cfc8:	8b 8c 90 20 a4 02 c0 	mov    ecx,DWORD PTR [eax+edx*4-0x3ffd5be0]
c000cfcf:	85 c9                	test   ecx,ecx
c000cfd1:	0f 84 8e 00 00 00    	je     c000d065 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x115>
c000cfd7:	83 c2 01             	add    edx,0x1
c000cfda:	83 fa 04             	cmp    edx,0x4
c000cfdd:	75 e9                	jne    c000cfc8 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x78>
c000cfdf:	83 ec 0c             	sub    esp,0xc
c000cfe2:	68 dc 1b 02 c0       	push   0xc0021bdc
c000cfe7:	e8 3f 46 00 00       	call   c001162b <KePanic(char const*)>
c000cfec:	83 c4 10             	add    esp,0x10
c000cfef:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000cff4:	5b                   	pop    ebx
c000cff5:	5e                   	pop    esi
c000cff6:	5f                   	pop    edi
c000cff7:	c3                   	ret    
c000cff8:	83 c3 01             	add    ebx,0x1
c000cffb:	39 1d c0 d0 02 c0    	cmp    DWORD PTR ds:0xc002d0c0,ebx
c000d001:	7e ab                	jle    c000cfae <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x5e>
c000d003:	83 ec 08             	sub    esp,0x8
c000d006:	8b 04 9d e0 d0 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd2f20]
c000d00d:	56                   	push   esi
c000d00e:	50                   	push   eax
c000d00f:	e8 ce 1a 01 00       	call   c001eae2 <IOAPIC::handlesGSIWithNumber(unsigned int)>
c000d014:	83 c4 10             	add    esp,0x10
c000d017:	84 c0                	test   al,al
c000d019:	74 dd                	je     c000cff8 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xa8>
c000d01b:	83 ec 04             	sub    esp,0x4
c000d01e:	89 f8                	mov    eax,edi
c000d020:	8b 1c 9d e0 d0 02 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffd2f20]
c000d027:	0f b6 f8             	movzx  edi,al
c000d02a:	57                   	push   edi
c000d02b:	8d 7e 20             	lea    edi,[esi+0x20]
c000d02e:	6a 00                	push   0x0
c000d030:	89 f8                	mov    eax,edi
c000d032:	0f b6 c0             	movzx  eax,al
c000d035:	50                   	push   eax
c000d036:	89 f0                	mov    eax,esi
c000d038:	6a 00                	push   0x0
c000d03a:	0f b6 c0             	movzx  eax,al
c000d03d:	6a 00                	push   0x0
c000d03f:	50                   	push   eax
c000d040:	53                   	push   ebx
c000d041:	e8 08 1c 01 00       	call   c001ec4e <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c000d046:	83 c4 20             	add    esp,0x20
c000d049:	e9 73 ff ff ff       	jmp    c000cfc1 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x71>
c000d04e:	83 ec 0c             	sub    esp,0xc
c000d051:	31 ff                	xor    edi,edi
c000d053:	68 a4 1b 02 c0       	push   0xc0021ba4
c000d058:	e8 ce 45 00 00       	call   c001162b <KePanic(char const*)>
c000d05d:	83 c4 10             	add    esp,0x10
c000d060:	e9 28 ff ff ff       	jmp    c000cf8d <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3d>
c000d065:	8d 04 ba             	lea    eax,[edx+edi*4]
c000d068:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d06c:	89 14 85 20 a4 02 c0 	mov    DWORD PTR [eax*4-0x3ffd5be0],edx
c000d073:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000d077:	5b                   	pop    ebx
c000d078:	89 14 85 20 94 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6be0],edx
c000d07f:	89 f0                	mov    eax,esi
c000d081:	5e                   	pop    esi
c000d082:	5f                   	pop    edi
c000d083:	c3                   	ret    

c000d084 <uninstallISRHandler(int, void (*)(regs*, void*))>:
c000d084:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d088:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000d08c:	c1 e0 04             	shl    eax,0x4
c000d08f:	8d 50 10             	lea    edx,[eax+0x10]
c000d092:	39 88 20 a4 02 c0    	cmp    DWORD PTR [eax-0x3ffd5be0],ecx
c000d098:	74 08                	je     c000d0a2 <uninstallISRHandler(int, void (*)(regs*, void*))+0x1e>
c000d09a:	83 c0 04             	add    eax,0x4
c000d09d:	39 d0                	cmp    eax,edx
c000d09f:	75 f1                	jne    c000d092 <uninstallISRHandler(int, void (*)(regs*, void*))+0xe>
c000d0a1:	c3                   	ret    
c000d0a2:	c7 80 20 a4 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd5be0],0x0
c000d0ac:	c7 80 20 94 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd6be0],0x0
c000d0b6:	eb e2                	jmp    c000d09a <uninstallISRHandler(int, void (*)(regs*, void*))+0x16>

c000d0b8 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c000d0b8:	53                   	push   ebx
c000d0b9:	83 ec 08             	sub    esp,0x8
c000d0bc:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000d0c0:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c000d0c5:	74 0e                	je     c000d0d5 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c000d0c7:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000d0cc:	f6 80 6c 01 00 00 01 	test   BYTE PTR [eax+0x16c],0x1
c000d0d3:	75 37                	jne    c000d10c <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x54>
c000d0d5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d0d9:	83 c0 20             	add    eax,0x20
c000d0dc:	c1 e0 04             	shl    eax,0x4
c000d0df:	8d 50 10             	lea    edx,[eax+0x10]
c000d0e2:	39 98 20 a4 02 c0    	cmp    DWORD PTR [eax-0x3ffd5be0],ebx
c000d0e8:	74 0c                	je     c000d0f6 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x3e>
c000d0ea:	83 c0 04             	add    eax,0x4
c000d0ed:	39 d0                	cmp    eax,edx
c000d0ef:	75 f1                	jne    c000d0e2 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2a>
c000d0f1:	83 c4 08             	add    esp,0x8
c000d0f4:	5b                   	pop    ebx
c000d0f5:	c3                   	ret    
c000d0f6:	c7 80 20 a4 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd5be0],0x0
c000d100:	c7 80 20 94 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd6be0],0x0
c000d10a:	eb de                	jmp    c000d0ea <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x32>
c000d10c:	83 7c 24 10 0f       	cmp    DWORD PTR [esp+0x10],0xf
c000d111:	7f 11                	jg     c000d124 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x6c>
c000d113:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d117:	0f b6 80 68 36 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffdc998]
c000d11e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d122:	eb b1                	jmp    c000d0d5 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c000d124:	83 ec 0c             	sub    esp,0xc
c000d127:	68 95 1b 02 c0       	push   0xc0021b95
c000d12c:	e8 fa 44 00 00       	call   c001162b <KePanic(char const*)>
c000d131:	83 c4 10             	add    esp,0x10
c000d134:	eb 9f                	jmp    c000d0d5 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>

c000d136 <setupINTS()>:
c000d136:	31 c0                	xor    eax,eax
c000d138:	c7 80 20 a4 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd5be0],0x0
c000d142:	c7 80 20 94 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd6be0],0x0
c000d14c:	c7 80 24 a4 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd5bdc],0x0
c000d156:	c7 80 24 94 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd6bdc],0x0
c000d160:	c7 80 28 a4 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd5bd8],0x0
c000d16a:	c7 80 28 94 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd6bd8],0x0
c000d174:	c7 80 2c a4 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd5bd4],0x0
c000d17e:	c7 80 2c 94 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd6bd4],0x0
c000d188:	83 c0 10             	add    eax,0x10
c000d18b:	3d 00 10 00 00       	cmp    eax,0x1000
c000d190:	75 a6                	jne    c000d138 <setupINTS()+0x2>
c000d192:	c3                   	ret    

c000d193 <convertLegacyIRQNumber(int)>:
c000d193:	83 ec 0c             	sub    esp,0xc
c000d196:	8b 15 b8 6e 02 c0    	mov    edx,DWORD PTR ds:0xc0026eb8
c000d19c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d1a0:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c000d1a7:	74 0c                	je     c000d1b5 <convertLegacyIRQNumber(int)+0x22>
c000d1a9:	83 f8 0f             	cmp    eax,0xf
c000d1ac:	7f 0b                	jg     c000d1b9 <convertLegacyIRQNumber(int)+0x26>
c000d1ae:	0f b6 80 68 36 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffdc998]
c000d1b5:	83 c4 0c             	add    esp,0xc
c000d1b8:	c3                   	ret    
c000d1b9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d1bd:	83 ec 0c             	sub    esp,0xc
c000d1c0:	68 a4 1b 02 c0       	push   0xc0021ba4
c000d1c5:	e8 61 44 00 00       	call   c001162b <KePanic(char const*)>
c000d1ca:	83 c4 10             	add    esp,0x10
c000d1cd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d1d1:	83 c4 0c             	add    esp,0xc
c000d1d4:	c3                   	ret    
c000d1d5:	90                   	nop

c000d1d6 <startGUI(void*)>:
c000d1d6:	55                   	push   ebp
c000d1d7:	89 e5                	mov    ebp,esp
c000d1d9:	53                   	push   ebx
c000d1da:	83 ec 04             	sub    esp,0x4
c000d1dd:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000d1e2:	83 e8 01             	sub    eax,0x1
c000d1e5:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c000d1ea:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000d1ef:	85 c0                	test   eax,eax
c000d1f1:	75 01                	jne    c000d1f4 <startGUI(void*)+0x1e>
c000d1f3:	fb                   	sti    
c000d1f4:	8b 1d b8 6e 02 c0    	mov    ebx,DWORD PTR ds:0xc0026eb8
c000d1fa:	83 ec 08             	sub    esp,0x8
c000d1fd:	6a 01                	push   0x1
c000d1ff:	68 01 1c 02 c0       	push   0xc0021c01
c000d204:	e8 26 84 00 00       	call   c001562f <Thr::loadDLL(char const*, bool)>
c000d209:	83 c4 10             	add    esp,0x10
c000d20c:	83 ec 08             	sub    esp,0x8
c000d20f:	53                   	push   ebx
c000d210:	50                   	push   eax
c000d211:	e8 4a 86 00 00       	call   c0015860 <Thr::executeDLL(unsigned long, void*)>
c000d216:	83 c4 10             	add    esp,0x10
c000d219:	8b 1d b8 6e 02 c0    	mov    ebx,DWORD PTR ds:0xc0026eb8
c000d21f:	83 ec 08             	sub    esp,0x8
c000d222:	6a 01                	push   0x1
c000d224:	68 1b 1c 02 c0       	push   0xc0021c1b
c000d229:	e8 01 84 00 00       	call   c001562f <Thr::loadDLL(char const*, bool)>
c000d22e:	83 c4 10             	add    esp,0x10
c000d231:	83 ec 08             	sub    esp,0x8
c000d234:	53                   	push   ebx
c000d235:	50                   	push   eax
c000d236:	e8 25 86 00 00       	call   c0015860 <Thr::executeDLL(unsigned long, void*)>
c000d23b:	83 c4 10             	add    esp,0x10
c000d23e:	90                   	nop
c000d23f:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000d242:	c9                   	leave  
c000d243:	c3                   	ret    

c000d244 <startGUIVESA(void*)>:
c000d244:	55                   	push   ebp
c000d245:	89 e5                	mov    ebp,esp
c000d247:	53                   	push   ebx
c000d248:	83 ec 04             	sub    esp,0x4
c000d24b:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000d250:	83 e8 01             	sub    eax,0x1
c000d253:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c000d258:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000d25d:	85 c0                	test   eax,eax
c000d25f:	75 01                	jne    c000d262 <startGUIVESA(void*)+0x1e>
c000d261:	fb                   	sti    
c000d262:	8b 1d b8 6e 02 c0    	mov    ebx,DWORD PTR ds:0xc0026eb8
c000d268:	83 ec 08             	sub    esp,0x8
c000d26b:	6a 01                	push   0x1
c000d26d:	68 39 1c 02 c0       	push   0xc0021c39
c000d272:	e8 b8 83 00 00       	call   c001562f <Thr::loadDLL(char const*, bool)>
c000d277:	83 c4 10             	add    esp,0x10
c000d27a:	83 ec 08             	sub    esp,0x8
c000d27d:	53                   	push   ebx
c000d27e:	50                   	push   eax
c000d27f:	e8 dc 85 00 00       	call   c0015860 <Thr::executeDLL(unsigned long, void*)>
c000d284:	83 c4 10             	add    esp,0x10
c000d287:	8b 1d b8 6e 02 c0    	mov    ebx,DWORD PTR ds:0xc0026eb8
c000d28d:	83 ec 08             	sub    esp,0x8
c000d290:	6a 01                	push   0x1
c000d292:	68 1b 1c 02 c0       	push   0xc0021c1b
c000d297:	e8 93 83 00 00       	call   c001562f <Thr::loadDLL(char const*, bool)>
c000d29c:	83 c4 10             	add    esp,0x10
c000d29f:	83 ec 08             	sub    esp,0x8
c000d2a2:	53                   	push   ebx
c000d2a3:	50                   	push   eax
c000d2a4:	e8 b7 85 00 00       	call   c0015860 <Thr::executeDLL(unsigned long, void*)>
c000d2a9:	83 c4 10             	add    esp,0x10
c000d2ac:	90                   	nop
c000d2ad:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000d2b0:	c9                   	leave  
c000d2b1:	c3                   	ret    

c000d2b2 <sendKeyToTerminal(unsigned char)>:
c000d2b2:	55                   	push   ebp
c000d2b3:	89 e5                	mov    ebp,esp
c000d2b5:	83 ec 28             	sub    esp,0x28
c000d2b8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d2bb:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c000d2be:	a1 04 6f 02 c0       	mov    eax,ds:0xc0026f04
c000d2c3:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
c000d2c7:	83 ec 08             	sub    esp,0x8
c000d2ca:	52                   	push   edx
c000d2cb:	50                   	push   eax
c000d2cc:	e8 e5 ba ff ff       	call   c0008db6 <VgaText::receiveKey(unsigned char)>
c000d2d1:	83 c4 10             	add    esp,0x10
c000d2d4:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c000d2d8:	83 f8 0a             	cmp    eax,0xa
c000d2db:	74 16                	je     c000d2f3 <sendKeyToTerminal(unsigned char)+0x41>
c000d2dd:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c000d2e1:	83 f8 03             	cmp    eax,0x3
c000d2e4:	74 0d                	je     c000d2f3 <sendKeyToTerminal(unsigned char)+0x41>
c000d2e6:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c000d2ea:	83 f8 1c             	cmp    eax,0x1c
c000d2ed:	0f 85 97 00 00 00    	jne    c000d38a <sendKeyToTerminal(unsigned char)+0xd8>
c000d2f3:	fa                   	cli    
c000d2f4:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000d2f9:	83 c0 01             	add    eax,0x1
c000d2fc:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c000d301:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c000d306:	83 c0 01             	add    eax,0x1
c000d309:	a3 c4 c6 02 c0       	mov    ds:0xc002c6c4,eax
c000d30e:	a1 20 b4 02 c0       	mov    eax,ds:0xc002b420
c000d313:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000d316:	c7 05 20 b4 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002b420,0x0
c000d320:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c000d324:	74 1f                	je     c000d345 <sendKeyToTerminal(unsigned char)+0x93>
c000d326:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000d329:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c000d32c:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000d32f:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000d332:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000d335:	83 ec 0c             	sub    esp,0xc
c000d338:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000d33b:	e8 68 92 00 00       	call   c00165a8 <unblockTask(ThreadControlBlock*)>
c000d340:	83 c4 10             	add    esp,0x10
c000d343:	eb db                	jmp    c000d320 <sendKeyToTerminal(unsigned char)+0x6e>
c000d345:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c000d34a:	83 e8 01             	sub    eax,0x1
c000d34d:	a3 c4 c6 02 c0       	mov    ds:0xc002c6c4,eax
c000d352:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c000d357:	85 c0                	test   eax,eax
c000d359:	75 18                	jne    c000d373 <sendKeyToTerminal(unsigned char)+0xc1>
c000d35b:	a1 c0 c6 02 c0       	mov    eax,ds:0xc002c6c0
c000d360:	85 c0                	test   eax,eax
c000d362:	74 0f                	je     c000d373 <sendKeyToTerminal(unsigned char)+0xc1>
c000d364:	c7 05 c0 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6c0,0x0
c000d36e:	e8 1d 8d 00 00       	call   c0016090 <schedule()>
c000d373:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000d378:	83 e8 01             	sub    eax,0x1
c000d37b:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c000d380:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000d385:	85 c0                	test   eax,eax
c000d387:	75 01                	jne    c000d38a <sendKeyToTerminal(unsigned char)+0xd8>
c000d389:	fb                   	sti    
c000d38a:	90                   	nop
c000d38b:	c9                   	leave  
c000d38c:	c3                   	ret    

c000d38d <sendKeyboardToken(KeyboardToken)>:
c000d38d:	55                   	push   ebp
c000d38e:	89 e5                	mov    ebp,esp
c000d390:	83 ec 18             	sub    esp,0x18
c000d393:	e8 e3 42 00 00       	call   c001167b <KeUserIOReceived()>
c000d398:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c000d39b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d39e:	0f b7 c0             	movzx  eax,ax
c000d3a1:	83 f2 01             	xor    edx,0x1
c000d3a4:	88 90 40 b4 02 c0    	mov    BYTE PTR [eax-0x3ffd4bc0],dl
c000d3aa:	a1 28 b4 02 c0       	mov    eax,ds:0xc002b428
c000d3af:	85 c0                	test   eax,eax
c000d3b1:	74 24                	je     c000d3d7 <sendKeyboardToken(KeyboardToken)+0x4a>
c000d3b3:	8b 0d 28 b4 02 c0    	mov    ecx,DWORD PTR ds:0xc002b428
c000d3b9:	83 ec 04             	sub    esp,0x4
c000d3bc:	68 40 b4 02 c0       	push   0xc002b440
c000d3c1:	83 ec 08             	sub    esp,0x8
c000d3c4:	89 e2                	mov    edx,esp
c000d3c6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d3c9:	89 02                	mov    DWORD PTR [edx],eax
c000d3cb:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000d3ce:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c000d3d2:	ff d1                	call   ecx
c000d3d4:	83 c4 10             	add    esp,0x10
c000d3d7:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c000d3db:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c000d3de:	a0 48 b8 02 c0       	mov    al,ds:0xc002b848
c000d3e3:	0f b6 d2             	movzx  edx,dl
c000d3e6:	0f b6 c0             	movzx  eax,al
c000d3e9:	39 c2                	cmp    edx,eax
c000d3eb:	74 1c                	je     c000d409 <sendKeyboardToken(KeyboardToken)+0x7c>
c000d3ed:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c000d3f0:	a2 48 b8 02 c0       	mov    ds:0xc002b848,al
c000d3f5:	a0 48 b8 02 c0       	mov    al,ds:0xc002b848
c000d3fa:	0f b6 c0             	movzx  eax,al
c000d3fd:	83 ec 0c             	sub    esp,0xc
c000d400:	50                   	push   eax
c000d401:	e8 fc b0 ff ff       	call   c0008502 <setTerminalScrollLock(bool)>
c000d406:	83 c4 10             	add    esp,0x10
c000d409:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c000d40c:	0f b6 c0             	movzx  eax,al
c000d40f:	85 c0                	test   eax,eax
c000d411:	0f 84 da 00 00 00    	je     c000d4f1 <sendKeyboardToken(KeyboardToken)+0x164>
c000d417:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d41a:	0f b7 c0             	movzx  eax,ax
c000d41d:	3d 18 03 00 00       	cmp    eax,0x318
c000d422:	75 06                	jne    c000d42a <sendKeyboardToken(KeyboardToken)+0x9d>
c000d424:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c000d42a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d42d:	0f b7 c0             	movzx  eax,ax
c000d430:	3d 19 03 00 00       	cmp    eax,0x319
c000d435:	75 06                	jne    c000d43d <sendKeyboardToken(KeyboardToken)+0xb0>
c000d437:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c000d43d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d440:	0f b7 c0             	movzx  eax,ax
c000d443:	3d 1a 03 00 00       	cmp    eax,0x31a
c000d448:	75 06                	jne    c000d450 <sendKeyboardToken(KeyboardToken)+0xc3>
c000d44a:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c000d450:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d453:	0f b7 c0             	movzx  eax,ax
c000d456:	3d 1b 03 00 00       	cmp    eax,0x31b
c000d45b:	75 06                	jne    c000d463 <sendKeyboardToken(KeyboardToken)+0xd6>
c000d45d:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c000d463:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d466:	0f b7 c0             	movzx  eax,ax
c000d469:	3d 1c 03 00 00       	cmp    eax,0x31c
c000d46e:	75 06                	jne    c000d476 <sendKeyboardToken(KeyboardToken)+0xe9>
c000d470:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c000d476:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d479:	0f b7 c0             	movzx  eax,ax
c000d47c:	3d 1d 03 00 00       	cmp    eax,0x31d
c000d481:	75 06                	jne    c000d489 <sendKeyboardToken(KeyboardToken)+0xfc>
c000d483:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000d489:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d48c:	0f b7 c0             	movzx  eax,ax
c000d48f:	3d 1e 03 00 00       	cmp    eax,0x31e
c000d494:	75 06                	jne    c000d49c <sendKeyboardToken(KeyboardToken)+0x10f>
c000d496:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c000d49c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d49f:	0f b7 c0             	movzx  eax,ax
c000d4a2:	3d 1f 03 00 00       	cmp    eax,0x31f
c000d4a7:	75 06                	jne    c000d4af <sendKeyboardToken(KeyboardToken)+0x122>
c000d4a9:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c000d4af:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d4b2:	0f b7 c0             	movzx  eax,ax
c000d4b5:	3d 20 03 00 00       	cmp    eax,0x320
c000d4ba:	75 06                	jne    c000d4c2 <sendKeyboardToken(KeyboardToken)+0x135>
c000d4bc:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c000d4c2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d4c5:	0f b7 c0             	movzx  eax,ax
c000d4c8:	3d 21 03 00 00       	cmp    eax,0x321
c000d4cd:	75 06                	jne    c000d4d5 <sendKeyboardToken(KeyboardToken)+0x148>
c000d4cf:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c000d4d5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d4d8:	0f b7 c0             	movzx  eax,ax
c000d4db:	3d 22 03 00 00       	cmp    eax,0x322
c000d4e0:	0f 85 f1 00 00 00    	jne    c000d5d7 <sendKeyboardToken(KeyboardToken)+0x24a>
c000d4e6:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c000d4ec:	e9 e6 00 00 00       	jmp    c000d5d7 <sendKeyboardToken(KeyboardToken)+0x24a>
c000d4f1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d4f4:	0f b7 c0             	movzx  eax,ax
c000d4f7:	3d 18 03 00 00       	cmp    eax,0x318
c000d4fc:	75 0a                	jne    c000d508 <sendKeyboardToken(KeyboardToken)+0x17b>
c000d4fe:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c000d504:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d508:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d50b:	0f b7 c0             	movzx  eax,ax
c000d50e:	3d 19 03 00 00       	cmp    eax,0x319
c000d513:	75 0a                	jne    c000d51f <sendKeyboardToken(KeyboardToken)+0x192>
c000d515:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c000d51b:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d51f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d522:	0f b7 c0             	movzx  eax,ax
c000d525:	3d 1a 03 00 00       	cmp    eax,0x31a
c000d52a:	75 0a                	jne    c000d536 <sendKeyboardToken(KeyboardToken)+0x1a9>
c000d52c:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c000d532:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d536:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d539:	0f b7 c0             	movzx  eax,ax
c000d53c:	3d 1b 03 00 00       	cmp    eax,0x31b
c000d541:	75 0a                	jne    c000d54d <sendKeyboardToken(KeyboardToken)+0x1c0>
c000d543:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c000d549:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d54d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d550:	0f b7 c0             	movzx  eax,ax
c000d553:	3d 1c 03 00 00       	cmp    eax,0x31c
c000d558:	75 0a                	jne    c000d564 <sendKeyboardToken(KeyboardToken)+0x1d7>
c000d55a:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c000d560:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d564:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d567:	0f b7 c0             	movzx  eax,ax
c000d56a:	3d 1d 03 00 00       	cmp    eax,0x31d
c000d56f:	75 0a                	jne    c000d57b <sendKeyboardToken(KeyboardToken)+0x1ee>
c000d571:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000d577:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d57b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d57e:	0f b7 c0             	movzx  eax,ax
c000d581:	3d 1e 03 00 00       	cmp    eax,0x31e
c000d586:	75 0a                	jne    c000d592 <sendKeyboardToken(KeyboardToken)+0x205>
c000d588:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c000d58e:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d592:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d595:	0f b7 c0             	movzx  eax,ax
c000d598:	3d 1f 03 00 00       	cmp    eax,0x31f
c000d59d:	75 0a                	jne    c000d5a9 <sendKeyboardToken(KeyboardToken)+0x21c>
c000d59f:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c000d5a5:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d5a9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d5ac:	0f b7 c0             	movzx  eax,ax
c000d5af:	3d 20 03 00 00       	cmp    eax,0x320
c000d5b4:	75 0a                	jne    c000d5c0 <sendKeyboardToken(KeyboardToken)+0x233>
c000d5b6:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c000d5bc:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d5c0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d5c3:	0f b7 c0             	movzx  eax,ax
c000d5c6:	3d 21 03 00 00       	cmp    eax,0x321
c000d5cb:	75 0a                	jne    c000d5d7 <sendKeyboardToken(KeyboardToken)+0x24a>
c000d5cd:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c000d5d3:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d5d7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d5da:	0f b7 c0             	movzx  eax,ax
c000d5dd:	3d 00 02 00 00       	cmp    eax,0x200
c000d5e2:	75 2f                	jne    c000d613 <sendKeyboardToken(KeyboardToken)+0x286>
c000d5e4:	a0 40 b8 02 c0       	mov    al,ds:0xc002b840
c000d5e9:	83 f0 01             	xor    eax,0x1
c000d5ec:	0f b6 c0             	movzx  eax,al
c000d5ef:	85 c0                	test   eax,eax
c000d5f1:	74 20                	je     c000d613 <sendKeyboardToken(KeyboardToken)+0x286>
c000d5f3:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c000d5f8:	6a 01                	push   0x1
c000d5fa:	6a 00                	push   0x0
c000d5fc:	68 d6 d1 00 c0       	push   0xc000d1d6
c000d601:	50                   	push   eax
c000d602:	e8 39 88 00 00       	call   c0015e40 <Process::createThread(void (*)(void*), void*, int)>
c000d607:	83 c4 10             	add    esp,0x10
c000d60a:	c6 05 40 b8 02 c0 01 	mov    BYTE PTR ds:0xc002b840,0x1
c000d611:	eb 3a                	jmp    c000d64d <sendKeyboardToken(KeyboardToken)+0x2c0>
c000d613:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d616:	0f b7 c0             	movzx  eax,ax
c000d619:	3d 01 02 00 00       	cmp    eax,0x201
c000d61e:	75 2d                	jne    c000d64d <sendKeyboardToken(KeyboardToken)+0x2c0>
c000d620:	a0 40 b8 02 c0       	mov    al,ds:0xc002b840
c000d625:	83 f0 01             	xor    eax,0x1
c000d628:	0f b6 c0             	movzx  eax,al
c000d62b:	85 c0                	test   eax,eax
c000d62d:	74 1e                	je     c000d64d <sendKeyboardToken(KeyboardToken)+0x2c0>
c000d62f:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c000d634:	6a 01                	push   0x1
c000d636:	6a 00                	push   0x0
c000d638:	68 44 d2 00 c0       	push   0xc000d244
c000d63d:	50                   	push   eax
c000d63e:	e8 fd 87 00 00       	call   c0015e40 <Process::createThread(void (*)(void*), void*, int)>
c000d643:	83 c4 10             	add    esp,0x10
c000d646:	c6 05 40 b8 02 c0 01 	mov    BYTE PTR ds:0xc002b840,0x1
c000d64d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d650:	0f b7 c0             	movzx  eax,ax
c000d653:	3d 25 03 00 00       	cmp    eax,0x325
c000d658:	75 06                	jne    c000d660 <sendKeyboardToken(KeyboardToken)+0x2d3>
c000d65a:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c000d660:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d663:	0f b7 c0             	movzx  eax,ax
c000d666:	3d 24 03 00 00       	cmp    eax,0x324
c000d66b:	75 06                	jne    c000d673 <sendKeyboardToken(KeyboardToken)+0x2e6>
c000d66d:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c000d673:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d676:	0f b7 c0             	movzx  eax,ax
c000d679:	3d 23 03 00 00       	cmp    eax,0x323
c000d67e:	75 06                	jne    c000d686 <sendKeyboardToken(KeyboardToken)+0x2f9>
c000d680:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c000d686:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d689:	0f b7 c0             	movzx  eax,ax
c000d68c:	3d 26 03 00 00       	cmp    eax,0x326
c000d691:	75 06                	jne    c000d699 <sendKeyboardToken(KeyboardToken)+0x30c>
c000d693:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c000d699:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d69c:	0f b7 c0             	movzx  eax,ax
c000d69f:	3d 27 03 00 00       	cmp    eax,0x327
c000d6a4:	75 06                	jne    c000d6ac <sendKeyboardToken(KeyboardToken)+0x31f>
c000d6a6:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c000d6ac:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d6af:	0f b7 c0             	movzx  eax,ax
c000d6b2:	3d 22 03 00 00       	cmp    eax,0x322
c000d6b7:	75 06                	jne    c000d6bf <sendKeyboardToken(KeyboardToken)+0x332>
c000d6b9:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c000d6bf:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c000d6c3:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000d6c6:	83 f0 01             	xor    eax,0x1
c000d6c9:	0f b6 c0             	movzx  eax,al
c000d6cc:	85 c0                	test   eax,eax
c000d6ce:	74 7c                	je     c000d74c <sendKeyboardToken(KeyboardToken)+0x3bf>
c000d6d0:	a0 41 b5 02 c0       	mov    al,ds:0xc002b541
c000d6d5:	0f b6 c0             	movzx  eax,al
c000d6d8:	85 c0                	test   eax,eax
c000d6da:	74 43                	je     c000d71f <sendKeyboardToken(KeyboardToken)+0x392>
c000d6dc:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000d6e0:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
c000d6e4:	85 c0                	test   eax,eax
c000d6e6:	74 2b                	je     c000d713 <sendKeyboardToken(KeyboardToken)+0x386>
c000d6e8:	8b 15 44 b8 02 c0    	mov    edx,DWORD PTR ds:0xc002b844
c000d6ee:	89 d0                	mov    eax,edx
c000d6f0:	c1 e0 02             	shl    eax,0x2
c000d6f3:	01 d0                	add    eax,edx
c000d6f5:	01 c0                	add    eax,eax
c000d6f7:	a3 44 b8 02 c0       	mov    ds:0xc002b844,eax
c000d6fc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d6ff:	0f b7 c0             	movzx  eax,ax
c000d702:	8d 50 d0             	lea    edx,[eax-0x30]
c000d705:	a1 44 b8 02 c0       	mov    eax,ds:0xc002b844
c000d70a:	01 d0                	add    eax,edx
c000d70c:	a3 44 b8 02 c0       	mov    ds:0xc002b844,eax
c000d711:	eb 71                	jmp    c000d784 <sendKeyboardToken(KeyboardToken)+0x3f7>
c000d713:	c7 05 44 b8 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002b844,0x0
c000d71d:	eb 65                	jmp    c000d784 <sendKeyboardToken(KeyboardToken)+0x3f7>
c000d71f:	a1 44 b8 02 c0       	mov    eax,ds:0xc002b844
c000d724:	85 c0                	test   eax,eax
c000d726:	74 18                	je     c000d740 <sendKeyboardToken(KeyboardToken)+0x3b3>
c000d728:	a1 44 b8 02 c0       	mov    eax,ds:0xc002b844
c000d72d:	0f b6 c0             	movzx  eax,al
c000d730:	83 ec 0c             	sub    esp,0xc
c000d733:	50                   	push   eax
c000d734:	e8 79 fb ff ff       	call   c000d2b2 <sendKeyToTerminal(unsigned char)>
c000d739:	83 c4 10             	add    esp,0x10
c000d73c:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000d740:	c7 05 44 b8 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002b844,0x0
c000d74a:	eb 38                	jmp    c000d784 <sendKeyboardToken(KeyboardToken)+0x3f7>
c000d74c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d74f:	0f b7 c0             	movzx  eax,ax
c000d752:	3d 01 01 00 00       	cmp    eax,0x101
c000d757:	75 2b                	jne    c000d784 <sendKeyboardToken(KeyboardToken)+0x3f7>
c000d759:	a1 44 b8 02 c0       	mov    eax,ds:0xc002b844
c000d75e:	85 c0                	test   eax,eax
c000d760:	74 18                	je     c000d77a <sendKeyboardToken(KeyboardToken)+0x3ed>
c000d762:	a1 44 b8 02 c0       	mov    eax,ds:0xc002b844
c000d767:	0f b6 c0             	movzx  eax,al
c000d76a:	83 ec 0c             	sub    esp,0xc
c000d76d:	50                   	push   eax
c000d76e:	e8 3f fb ff ff       	call   c000d2b2 <sendKeyToTerminal(unsigned char)>
c000d773:	83 c4 10             	add    esp,0x10
c000d776:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000d77a:	c7 05 44 b8 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002b844,0x0
c000d784:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000d787:	83 f0 01             	xor    eax,0x1
c000d78a:	0f b6 c0             	movzx  eax,al
c000d78d:	85 c0                	test   eax,eax
c000d78f:	74 5a                	je     c000d7eb <sendKeyboardToken(KeyboardToken)+0x45e>
c000d791:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000d794:	83 f0 01             	xor    eax,0x1
c000d797:	0f b6 c0             	movzx  eax,al
c000d79a:	85 c0                	test   eax,eax
c000d79c:	74 4d                	je     c000d7eb <sendKeyboardToken(KeyboardToken)+0x45e>
c000d79e:	a0 40 b5 02 c0       	mov    al,ds:0xc002b540
c000d7a3:	83 f0 01             	xor    eax,0x1
c000d7a6:	0f b6 c0             	movzx  eax,al
c000d7a9:	85 c0                	test   eax,eax
c000d7ab:	74 3e                	je     c000d7eb <sendKeyboardToken(KeyboardToken)+0x45e>
c000d7ad:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d7b0:	0f b7 c0             	movzx  eax,ax
c000d7b3:	83 f8 1f             	cmp    eax,0x1f
c000d7b6:	76 0b                	jbe    c000d7c3 <sendKeyboardToken(KeyboardToken)+0x436>
c000d7b8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d7bb:	0f b7 c0             	movzx  eax,ax
c000d7be:	83 f8 7e             	cmp    eax,0x7e
c000d7c1:	76 16                	jbe    c000d7d9 <sendKeyboardToken(KeyboardToken)+0x44c>
c000d7c3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d7c6:	0f b7 c0             	movzx  eax,ax
c000d7c9:	83 f8 0a             	cmp    eax,0xa
c000d7cc:	74 0b                	je     c000d7d9 <sendKeyboardToken(KeyboardToken)+0x44c>
c000d7ce:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d7d1:	0f b7 c0             	movzx  eax,ax
c000d7d4:	83 f8 08             	cmp    eax,0x8
c000d7d7:	75 12                	jne    c000d7eb <sendKeyboardToken(KeyboardToken)+0x45e>
c000d7d9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d7dc:	0f b6 c0             	movzx  eax,al
c000d7df:	83 ec 0c             	sub    esp,0xc
c000d7e2:	50                   	push   eax
c000d7e3:	e8 ca fa ff ff       	call   c000d2b2 <sendKeyToTerminal(unsigned char)>
c000d7e8:	83 c4 10             	add    esp,0x10
c000d7eb:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000d7ee:	83 f0 01             	xor    eax,0x1
c000d7f1:	0f b6 c0             	movzx  eax,al
c000d7f4:	85 c0                	test   eax,eax
c000d7f6:	74 5d                	je     c000d855 <sendKeyboardToken(KeyboardToken)+0x4c8>
c000d7f8:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000d7fb:	83 f0 01             	xor    eax,0x1
c000d7fe:	0f b6 c0             	movzx  eax,al
c000d801:	85 c0                	test   eax,eax
c000d803:	74 50                	je     c000d855 <sendKeyboardToken(KeyboardToken)+0x4c8>
c000d805:	a0 40 b5 02 c0       	mov    al,ds:0xc002b540
c000d80a:	0f b6 c0             	movzx  eax,al
c000d80d:	85 c0                	test   eax,eax
c000d80f:	74 44                	je     c000d855 <sendKeyboardToken(KeyboardToken)+0x4c8>
c000d811:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d814:	0f b7 c0             	movzx  eax,ax
c000d817:	83 f8 3f             	cmp    eax,0x3f
c000d81a:	76 39                	jbe    c000d855 <sendKeyboardToken(KeyboardToken)+0x4c8>
c000d81c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d81f:	0f b7 c0             	movzx  eax,ax
c000d822:	83 f8 7f             	cmp    eax,0x7f
c000d825:	77 2e                	ja     c000d855 <sendKeyboardToken(KeyboardToken)+0x4c8>
c000d827:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d82a:	88 c2                	mov    dl,al
c000d82c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d82f:	0f b7 c0             	movzx  eax,ax
c000d832:	83 f8 5f             	cmp    eax,0x5f
c000d835:	76 04                	jbe    c000d83b <sendKeyboardToken(KeyboardToken)+0x4ae>
c000d837:	b0 20                	mov    al,0x20
c000d839:	eb 02                	jmp    c000d83d <sendKeyboardToken(KeyboardToken)+0x4b0>
c000d83b:	b0 00                	mov    al,0x0
c000d83d:	89 d1                	mov    ecx,edx
c000d83f:	29 c1                	sub    ecx,eax
c000d841:	89 c8                	mov    eax,ecx
c000d843:	83 e8 40             	sub    eax,0x40
c000d846:	0f b6 c0             	movzx  eax,al
c000d849:	83 ec 0c             	sub    esp,0xc
c000d84c:	50                   	push   eax
c000d84d:	e8 60 fa ff ff       	call   c000d2b2 <sendKeyToTerminal(unsigned char)>
c000d852:	83 c4 10             	add    esp,0x10
c000d855:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d858:	0f b7 c0             	movzx  eax,ax
c000d85b:	3d 00 03 00 00       	cmp    eax,0x300
c000d860:	75 12                	jne    c000d874 <sendKeyboardToken(KeyboardToken)+0x4e7>
c000d862:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000d865:	83 f0 01             	xor    eax,0x1
c000d868:	0f b6 c0             	movzx  eax,al
c000d86b:	85 c0                	test   eax,eax
c000d86d:	74 05                	je     c000d874 <sendKeyboardToken(KeyboardToken)+0x4e7>
c000d86f:	e8 8f ac ff ff       	call   c0008503 <doTerminalCycle()>
c000d874:	90                   	nop
c000d875:	c9                   	leave  
c000d876:	c3                   	ret    

c000d877 <clearInternalKeybuffer(VgaText*)>:
c000d877:	55                   	push   ebp
c000d878:	89 e5                	mov    ebp,esp
c000d87a:	83 ec 08             	sub    esp,0x8
c000d87d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d880:	05 02 01 00 00       	add    eax,0x102
c000d885:	83 ec 0c             	sub    esp,0xc
c000d888:	50                   	push   eax
c000d889:	e8 e2 2c ff ff       	call   c0000570 <strlen>
c000d88e:	83 c4 10             	add    esp,0x10
c000d891:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000d894:	81 c2 02 01 00 00    	add    edx,0x102
c000d89a:	83 ec 04             	sub    esp,0x4
c000d89d:	50                   	push   eax
c000d89e:	6a 00                	push   0x0
c000d8a0:	52                   	push   edx
c000d8a1:	e8 4a 2c ff ff       	call   c00004f0 <memset>
c000d8a6:	83 c4 10             	add    esp,0x10
c000d8a9:	90                   	nop
c000d8aa:	c9                   	leave  
c000d8ab:	c3                   	ret    

c000d8ac <readKeyboard(VgaText*, char*, unsigned long)>:
c000d8ac:	55                   	push   ebp
c000d8ad:	89 e5                	mov    ebp,esp
c000d8af:	83 ec 18             	sub    esp,0x18
c000d8b2:	a1 28 b4 02 c0       	mov    eax,ds:0xc002b428
c000d8b7:	85 c0                	test   eax,eax
c000d8b9:	74 2a                	je     c000d8e5 <readKeyboard(VgaText*, char*, unsigned long)+0x39>
c000d8bb:	66 c7 45 ec 00 00    	mov    WORD PTR [ebp-0x14],0x0
c000d8c1:	8b 0d 28 b4 02 c0    	mov    ecx,DWORD PTR ds:0xc002b428
c000d8c7:	83 ec 04             	sub    esp,0x4
c000d8ca:	68 40 b4 02 c0       	push   0xc002b440
c000d8cf:	83 ec 08             	sub    esp,0x8
c000d8d2:	89 e2                	mov    edx,esp
c000d8d4:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c000d8d7:	89 02                	mov    DWORD PTR [edx],eax
c000d8d9:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000d8dc:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c000d8e0:	ff d1                	call   ecx
c000d8e2:	83 c4 10             	add    esp,0x10
c000d8e5:	fb                   	sti    
c000d8e6:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c000d8ed:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c000d8f1:	0f 84 0d 01 00 00    	je     c000da04 <readKeyboard(VgaText*, char*, unsigned long)+0x158>
c000d8f7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d8fa:	8a 80 02 01 00 00    	mov    al,BYTE PTR [eax+0x102]
c000d900:	0f be c0             	movsx  eax,al
c000d903:	85 c0                	test   eax,eax
c000d905:	75 2c                	jne    c000d933 <readKeyboard(VgaText*, char*, unsigned long)+0x87>
c000d907:	fa                   	cli    
c000d908:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000d90d:	83 c0 01             	add    eax,0x1
c000d910:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c000d915:	e8 76 87 00 00       	call   c0016090 <schedule()>
c000d91a:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000d91f:	83 e8 01             	sub    eax,0x1
c000d922:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c000d927:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000d92c:	85 c0                	test   eax,eax
c000d92e:	75 c7                	jne    c000d8f7 <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c000d930:	fb                   	sti    
c000d931:	eb c4                	jmp    c000d8f7 <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c000d933:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000d936:	8d 50 01             	lea    edx,[eax+0x1]
c000d939:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000d93c:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000d93f:	8a 92 02 01 00 00    	mov    dl,BYTE PTR [edx+0x102]
c000d945:	88 10                	mov    BYTE PTR [eax],dl
c000d947:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d94a:	8a 80 02 01 00 00    	mov    al,BYTE PTR [eax+0x102]
c000d950:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c000d953:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000d957:	83 f8 03             	cmp    eax,0x3
c000d95a:	75 1e                	jne    c000d97a <readKeyboard(VgaText*, char*, unsigned long)+0xce>
c000d95c:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000d961:	8b 00                	mov    eax,DWORD PTR [eax]
c000d963:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000d966:	8b 80 20 07 00 00    	mov    eax,DWORD PTR [eax+0x720]
c000d96c:	83 ec 08             	sub    esp,0x8
c000d96f:	6a 02                	push   0x2
c000d971:	50                   	push   eax
c000d972:	e8 57 41 00 00       	call   c0011ace <KeRaiseSignal(SigHandlerBlock*, int)>
c000d977:	83 c4 10             	add    esp,0x10
c000d97a:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000d97e:	83 f8 1c             	cmp    eax,0x1c
c000d981:	75 1e                	jne    c000d9a1 <readKeyboard(VgaText*, char*, unsigned long)+0xf5>
c000d983:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000d988:	8b 00                	mov    eax,DWORD PTR [eax]
c000d98a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000d98d:	8b 80 20 07 00 00    	mov    eax,DWORD PTR [eax+0x720]
c000d993:	83 ec 08             	sub    esp,0x8
c000d996:	6a 09                	push   0x9
c000d998:	50                   	push   eax
c000d999:	e8 30 41 00 00       	call   c0011ace <KeRaiseSignal(SigHandlerBlock*, int)>
c000d99e:	83 c4 10             	add    esp,0x10
c000d9a1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d9a4:	05 02 01 00 00       	add    eax,0x102
c000d9a9:	83 ec 0c             	sub    esp,0xc
c000d9ac:	50                   	push   eax
c000d9ad:	e8 be 2b ff ff       	call   c0000570 <strlen>
c000d9b2:	83 c4 10             	add    esp,0x10
c000d9b5:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000d9b8:	81 c2 02 01 00 00    	add    edx,0x102
c000d9be:	8d 4a 01             	lea    ecx,[edx+0x1]
c000d9c1:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000d9c4:	81 c2 02 01 00 00    	add    edx,0x102
c000d9ca:	83 ec 04             	sub    esp,0x4
c000d9cd:	50                   	push   eax
c000d9ce:	51                   	push   ecx
c000d9cf:	52                   	push   edx
c000d9d0:	e8 fb 29 ff ff       	call   c00003d0 <memmove>
c000d9d5:	83 c4 10             	add    esp,0x10
c000d9d8:	83 6d 10 01          	sub    DWORD PTR [ebp+0x10],0x1
c000d9dc:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
c000d9e0:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000d9e4:	83 f8 0a             	cmp    eax,0xa
c000d9e7:	74 16                	je     c000d9ff <readKeyboard(VgaText*, char*, unsigned long)+0x153>
c000d9e9:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000d9ed:	83 f8 03             	cmp    eax,0x3
c000d9f0:	74 0d                	je     c000d9ff <readKeyboard(VgaText*, char*, unsigned long)+0x153>
c000d9f2:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000d9f6:	83 f8 1c             	cmp    eax,0x1c
c000d9f9:	0f 85 ee fe ff ff    	jne    c000d8ed <readKeyboard(VgaText*, char*, unsigned long)+0x41>
c000d9ff:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000da02:	eb 03                	jmp    c000da07 <readKeyboard(VgaText*, char*, unsigned long)+0x15b>
c000da04:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000da07:	c9                   	leave  
c000da08:	c3                   	ret    
c000da09:	90                   	nop

c000da0a <Keyboard::Keyboard(char const*)>:
c000da0a:	83 ec 0c             	sub    esp,0xc
c000da0d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000da11:	83 ec 08             	sub    esp,0x8
c000da14:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da18:	50                   	push   eax
c000da19:	e8 4c f1 ff ff       	call   c000cb6a <Device::Device(char const*)>
c000da1e:	83 c4 10             	add    esp,0x10
c000da21:	ba 5c 1c 02 c0       	mov    edx,0xc0021c5c
c000da26:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000da2a:	89 10                	mov    DWORD PTR [eax],edx
c000da2c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000da30:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c000da3a:	c6 05 24 b4 02 c0 01 	mov    BYTE PTR ds:0xc002b424,0x1
c000da41:	90                   	nop
c000da42:	83 c4 0c             	add    esp,0xc
c000da45:	c3                   	ret    

c000da46 <Keyboard::~Keyboard()>:
c000da46:	83 ec 0c             	sub    esp,0xc
c000da49:	ba 5c 1c 02 c0       	mov    edx,0xc0021c5c
c000da4e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000da52:	89 10                	mov    DWORD PTR [eax],edx
c000da54:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000da58:	83 ec 0c             	sub    esp,0xc
c000da5b:	50                   	push   eax
c000da5c:	e8 73 ee ff ff       	call   c000c8d4 <Device::~Device()>
c000da61:	83 c4 10             	add    esp,0x10
c000da64:	90                   	nop
c000da65:	83 c4 0c             	add    esp,0xc
c000da68:	c3                   	ret    
c000da69:	90                   	nop

c000da6a <Keyboard::~Keyboard()>:
c000da6a:	83 ec 0c             	sub    esp,0xc
c000da6d:	83 ec 0c             	sub    esp,0xc
c000da70:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da74:	e8 cd ff ff ff       	call   c000da46 <Keyboard::~Keyboard()>
c000da79:	83 c4 10             	add    esp,0x10
c000da7c:	83 ec 08             	sub    esp,0x8
c000da7f:	68 5c 01 00 00       	push   0x15c
c000da84:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da88:	e8 8b cd ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c000da8d:	83 c4 10             	add    esp,0x10
c000da90:	83 c4 0c             	add    esp,0xc
c000da93:	c3                   	ret    

c000da94 <LogicalDisk::close(int, int, void*)>:
c000da94:	83 c8 ff             	or     eax,0xffffffff
c000da97:	c3                   	ret    

c000da98 <LogicalDisk::~LogicalDisk()>:
c000da98:	83 ec 0c             	sub    esp,0xc
c000da9b:	ba d4 1c 02 c0       	mov    edx,0xc0021cd4
c000daa0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000daa4:	89 10                	mov    DWORD PTR [eax],edx
c000daa6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000daaa:	83 ec 0c             	sub    esp,0xc
c000daad:	50                   	push   eax
c000daae:	e8 21 ee ff ff       	call   c000c8d4 <Device::~Device()>
c000dab3:	83 c4 10             	add    esp,0x10
c000dab6:	90                   	nop
c000dab7:	83 c4 0c             	add    esp,0xc
c000daba:	c3                   	ret    
c000dabb:	90                   	nop

c000dabc <LogicalDisk::~LogicalDisk()>:
c000dabc:	83 ec 0c             	sub    esp,0xc
c000dabf:	83 ec 0c             	sub    esp,0xc
c000dac2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dac6:	e8 cd ff ff ff       	call   c000da98 <LogicalDisk::~LogicalDisk()>
c000dacb:	83 c4 10             	add    esp,0x10
c000dace:	83 ec 08             	sub    esp,0x8
c000dad1:	68 78 01 00 00       	push   0x178
c000dad6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dada:	e8 39 cd ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c000dadf:	83 c4 10             	add    esp,0x10
c000dae2:	83 c4 0c             	add    esp,0xc
c000dae5:	c3                   	ret    

c000dae6 <LogicalDisk::open(int, int, void*)>:
c000dae6:	83 ec 18             	sub    esp,0x18
c000dae9:	68 88 1c 02 c0       	push   0xc0021c88
c000daee:	e8 38 3b 00 00       	call   c001162b <KePanic(char const*)>
c000daf3:	83 c8 ff             	or     eax,0xffffffff
c000daf6:	83 c4 1c             	add    esp,0x1c
c000daf9:	c3                   	ret    

c000dafa <LogicalDisk::absoluteToRelative(unsigned long long)>:
c000dafa:	53                   	push   ebx
c000dafb:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000daff:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000db03:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000db07:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c000db0d:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c000db13:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c000db19:	77 10                	ja     c000db2b <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c000db1b:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c000db21:	89 d3                	mov    ebx,edx
c000db23:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c000db29:	72 05                	jb     c000db30 <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c000db2b:	83 c8 ff             	or     eax,0xffffffff
c000db2e:	89 c2                	mov    edx,eax
c000db30:	5b                   	pop    ebx
c000db31:	c3                   	ret    

c000db32 <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c000db32:	56                   	push   esi
c000db33:	83 c8 ff             	or     eax,0xffffffff
c000db36:	53                   	push   ebx
c000db37:	89 c2                	mov    edx,eax
c000db39:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000db3d:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000db41:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000db45:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000db4b:	77 27                	ja     c000db74 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c000db4d:	89 d8                	mov    eax,ebx
c000db4f:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c000db55:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c000db5b:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000db60:	89 c2                	mov    edx,eax
c000db62:	73 10                	jae    c000db74 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c000db64:	89 c8                	mov    eax,ecx
c000db66:	89 da                	mov    edx,ebx
c000db68:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c000db6e:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c000db74:	5b                   	pop    ebx
c000db75:	5e                   	pop    esi
c000db76:	c3                   	ret    
c000db77:	90                   	nop

c000db78 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c000db78:	83 ec 1c             	sub    esp,0x1c
c000db7b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000db7f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000db83:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000db87:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000db8b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000db8f:	89 04 24             	mov    DWORD PTR [esp],eax
c000db92:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000db96:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000db9a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000db9e:	83 ec 08             	sub    esp,0x8
c000dba1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000dba5:	50                   	push   eax
c000dba6:	e8 bf ef ff ff       	call   c000cb6a <Device::Device(char const*)>
c000dbab:	83 c4 10             	add    esp,0x10
c000dbae:	ba d4 1c 02 c0       	mov    edx,0xc0021cd4
c000dbb3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dbb7:	89 10                	mov    DWORD PTR [eax],edx
c000dbb9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dbbd:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000dbc4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dbc8:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c000dbcf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dbd3:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000dbda:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dbde:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c000dbe8:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000dbec:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000dbf0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000dbf4:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c000dbfa:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c000dc00:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000dc04:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000dc07:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000dc0b:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c000dc11:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c000dc17:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dc1b:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000dc1f:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c000dc25:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dc29:	c7 80 74 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x174],0x0
c000dc33:	90                   	nop
c000dc34:	83 c4 1c             	add    esp,0x1c
c000dc37:	c3                   	ret    

c000dc38 <LogicalDisk::assignDriveLetter()>:
c000dc38:	55                   	push   ebp
c000dc39:	57                   	push   edi
c000dc3a:	56                   	push   esi
c000dc3b:	53                   	push   ebx
c000dc3c:	83 ec 14             	sub    esp,0x14
c000dc3f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000dc43:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c000dc49:	b0 41                	mov    al,0x41
c000dc4b:	8a 93 69 01 00 00    	mov    dl,BYTE PTR [ebx+0x169]
c000dc51:	84 d2                	test   dl,dl
c000dc53:	75 02                	jne    c000dc57 <LogicalDisk::assignDriveLetter()+0x1f>
c000dc55:	b0 43                	mov    al,0x43
c000dc57:	8b 3d 60 b8 02 c0    	mov    edi,DWORD PTR ds:0xc002b860
c000dc5d:	0f b6 ca             	movzx  ecx,dl
c000dc60:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c000dc64:	0f be e8             	movsx  ebp,al
c000dc67:	8b 3d 64 b8 02 c0    	mov    edi,DWORD PTR ds:0xc002b864
c000dc6d:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000dc71:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000dc75:	3c 43                	cmp    al,0x43
c000dc77:	75 10                	jne    c000dc89 <LogicalDisk::assignDriveLetter()+0x51>
c000dc79:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c000dc80:	75 5a                	jne    c000dcdc <LogicalDisk::assignDriveLetter()+0xa4>
c000dc82:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000dc87:	75 53                	jne    c000dcdc <LogicalDisk::assignDriveLetter()+0xa4>
c000dc89:	8d 75 bf             	lea    esi,[ebp-0x41]
c000dc8c:	ba 01 00 00 00       	mov    edx,0x1
c000dc91:	89 34 24             	mov    DWORD PTR [esp],esi
c000dc94:	8a 0c 24             	mov    cl,BYTE PTR [esp]
c000dc97:	d3 e2                	shl    edx,cl
c000dc99:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000dc9d:	89 d7                	mov    edi,edx
c000dc9f:	89 d6                	mov    esi,edx
c000dca1:	c1 ff 1f             	sar    edi,0x1f
c000dca4:	23 54 24 04          	and    edx,DWORD PTR [esp+0x4]
c000dca8:	21 f9                	and    ecx,edi
c000dcaa:	09 d1                	or     ecx,edx
c000dcac:	75 2e                	jne    c000dcdc <LogicalDisk::assignDriveLetter()+0xa4>
c000dcae:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c000dcb2:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000dcb6:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c000dcbc:	09 f2                	or     edx,esi
c000dcbe:	8b 34 24             	mov    esi,DWORD PTR [esp]
c000dcc1:	89 15 60 b8 02 c0    	mov    DWORD PTR ds:0xc002b860,edx
c000dcc7:	89 1c b5 80 b8 02 c0 	mov    DWORD PTR [esi*4-0x3ffd4780],ebx
c000dcce:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000dcd2:	09 fa                	or     edx,edi
c000dcd4:	89 15 64 b8 02 c0    	mov    DWORD PTR ds:0xc002b864,edx
c000dcda:	eb 0d                	jmp    c000dce9 <LogicalDisk::assignDriveLetter()+0xb1>
c000dcdc:	8d 50 01             	lea    edx,[eax+0x1]
c000dcdf:	45                   	inc    ebp
c000dce0:	88 d0                	mov    al,dl
c000dce2:	80 fa 5b             	cmp    dl,0x5b
c000dce5:	75 8e                	jne    c000dc75 <LogicalDisk::assignDriveLetter()+0x3d>
c000dce7:	31 c0                	xor    eax,eax
c000dce9:	83 c4 14             	add    esp,0x14
c000dcec:	5b                   	pop    ebx
c000dced:	5e                   	pop    esi
c000dcee:	5f                   	pop    edi
c000dcef:	5d                   	pop    ebp
c000dcf0:	c3                   	ret    
c000dcf1:	90                   	nop

c000dcf2 <LogicalDisk::mount()>:
c000dcf2:	56                   	push   esi
c000dcf3:	53                   	push   ebx
c000dcf4:	53                   	push   ebx
c000dcf5:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000dcf9:	8b 1d 04 94 02 c0    	mov    ebx,DWORD PTR ds:0xc0029404
c000dcff:	c7 86 74 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x174],0x0
c000dd09:	85 db                	test   ebx,ebx
c000dd0b:	74 27                	je     c000dd34 <LogicalDisk::mount()+0x42>
c000dd0d:	51                   	push   ecx
c000dd0e:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c000dd15:	8b 13                	mov    edx,DWORD PTR [ebx]
c000dd17:	83 e8 41             	sub    eax,0x41
c000dd1a:	50                   	push   eax
c000dd1b:	56                   	push   esi
c000dd1c:	53                   	push   ebx
c000dd1d:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000dd20:	83 c4 10             	add    esp,0x10
c000dd23:	84 c0                	test   al,al
c000dd25:	74 08                	je     c000dd2f <LogicalDisk::mount()+0x3d>
c000dd27:	89 9e 74 01 00 00    	mov    DWORD PTR [esi+0x174],ebx
c000dd2d:	eb 07                	jmp    c000dd36 <LogicalDisk::mount()+0x44>
c000dd2f:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c000dd32:	eb d5                	jmp    c000dd09 <LogicalDisk::mount()+0x17>
c000dd34:	31 c0                	xor    eax,eax
c000dd36:	5a                   	pop    edx
c000dd37:	5b                   	pop    ebx
c000dd38:	5e                   	pop    esi
c000dd39:	c3                   	ret    

c000dd3a <LogicalDisk::unmount()>:
c000dd3a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000dd3e:	c7 80 74 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x174],0x0
c000dd48:	c3                   	ret    
c000dd49:	90                   	nop

c000dd4a <LogicalDisk::eject()>:
c000dd4a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000dd4e:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c000dd54:	8b 10                	mov    edx,DWORD PTR [eax]
c000dd56:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000dd5a:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
c000dd5d:	90                   	nop

c000dd5e <LogicalDisk::unassignDriveLetter()>:
c000dd5e:	57                   	push   edi
c000dd5f:	56                   	push   esi
c000dd60:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000dd64:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c000dd6b:	85 c9                	test   ecx,ecx
c000dd6d:	75 0f                	jne    c000dd7e <LogicalDisk::unassignDriveLetter()+0x20>
c000dd6f:	c7 44 24 0c ac 1c 02 c0 	mov    DWORD PTR [esp+0xc],0xc0021cac
c000dd77:	5e                   	pop    esi
c000dd78:	5f                   	pop    edi
c000dd79:	e9 ad 38 00 00       	jmp    c001162b <KePanic(char const*)>
c000dd7e:	83 e9 41             	sub    ecx,0x41
c000dd81:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c000dd88:	b8 01 00 00 00       	mov    eax,0x1
c000dd8d:	c7 04 8d 80 b8 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffd4780],0x0
c000dd98:	d3 e0                	shl    eax,cl
c000dd9a:	89 c7                	mov    edi,eax
c000dd9c:	f7 d0                	not    eax
c000dd9e:	c1 ff 1f             	sar    edi,0x1f
c000dda1:	21 05 60 b8 02 c0    	and    DWORD PTR ds:0xc002b860,eax
c000dda7:	89 fe                	mov    esi,edi
c000dda9:	f7 d6                	not    esi
c000ddab:	21 35 64 b8 02 c0    	and    DWORD PTR ds:0xc002b864,esi
c000ddb1:	5e                   	pop    esi
c000ddb2:	5f                   	pop    edi
c000ddb3:	c3                   	ret    

c000ddb4 <LogicalDisk::read(unsigned long long, int, void*)>:
c000ddb4:	57                   	push   edi
c000ddb5:	56                   	push   esi
c000ddb6:	53                   	push   ebx
c000ddb7:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000ddbb:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000ddbf:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ddc3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000ddc7:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000ddcd:	77 41                	ja     c000de10 <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c000ddcf:	99                   	cdq    
c000ddd0:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000ddd6:	01 c8                	add    eax,ecx
c000ddd8:	11 da                	adc    edx,ebx
c000ddda:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000dde0:	19 d7                	sbb    edi,edx
c000dde2:	72 33                	jb     c000de17 <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c000dde4:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000ddea:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000ddf0:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000ddf4:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000ddf8:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000ddfe:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000de04:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000de08:	5b                   	pop    ebx
c000de09:	5e                   	pop    esi
c000de0a:	5f                   	pop    edi
c000de0b:	e9 c6 0a 00 00       	jmp    c000e8d6 <VCache::read(unsigned long long, int, void*)>
c000de10:	b8 05 00 00 00       	mov    eax,0x5
c000de15:	eb 05                	jmp    c000de1c <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c000de17:	b8 07 00 00 00       	mov    eax,0x7
c000de1c:	5b                   	pop    ebx
c000de1d:	5e                   	pop    esi
c000de1e:	5f                   	pop    edi
c000de1f:	c3                   	ret    

c000de20 <LogicalDisk::write(unsigned long long, int, void*)>:
c000de20:	57                   	push   edi
c000de21:	56                   	push   esi
c000de22:	53                   	push   ebx
c000de23:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000de27:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000de2b:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000de2f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000de33:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000de39:	77 41                	ja     c000de7c <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c000de3b:	99                   	cdq    
c000de3c:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000de42:	01 c8                	add    eax,ecx
c000de44:	11 da                	adc    edx,ebx
c000de46:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000de4c:	19 d7                	sbb    edi,edx
c000de4e:	72 33                	jb     c000de83 <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c000de50:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000de56:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000de5c:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000de60:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000de64:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000de6a:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000de70:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000de74:	5b                   	pop    ebx
c000de75:	5e                   	pop    esi
c000de76:	5f                   	pop    edi
c000de77:	e9 6c 09 00 00       	jmp    c000e7e8 <VCache::write(unsigned long long, int, void*)>
c000de7c:	b8 05 00 00 00       	mov    eax,0x5
c000de81:	eb 05                	jmp    c000de88 <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c000de83:	b8 07 00 00 00       	mov    eax,0x7
c000de88:	5b                   	pop    ebx
c000de89:	5e                   	pop    esi
c000de8a:	5f                   	pop    edi
c000de8b:	c3                   	ret    

c000de8c <Mouse::Mouse(char const*)>:
c000de8c:	83 ec 0c             	sub    esp,0xc
c000de8f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000de93:	83 ec 08             	sub    esp,0x8
c000de96:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000de9a:	50                   	push   eax
c000de9b:	e8 ca ec ff ff       	call   c000cb6a <Device::Device(char const*)>
c000dea0:	83 c4 10             	add    esp,0x10
c000dea3:	ba 00 1d 02 c0       	mov    edx,0xc0021d00
c000dea8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000deac:	89 10                	mov    DWORD PTR [eax],edx
c000deae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000deb2:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c000debc:	90                   	nop
c000debd:	83 c4 0c             	add    esp,0xc
c000dec0:	c3                   	ret    
c000dec1:	90                   	nop
c000dec2:	66 90                	xchg   ax,ax

c000dec4 <Mouse::~Mouse()>:
c000dec4:	83 ec 0c             	sub    esp,0xc
c000dec7:	ba 00 1d 02 c0       	mov    edx,0xc0021d00
c000decc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ded0:	89 10                	mov    DWORD PTR [eax],edx
c000ded2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ded6:	83 ec 0c             	sub    esp,0xc
c000ded9:	50                   	push   eax
c000deda:	e8 f5 e9 ff ff       	call   c000c8d4 <Device::~Device()>
c000dedf:	83 c4 10             	add    esp,0x10
c000dee2:	90                   	nop
c000dee3:	83 c4 0c             	add    esp,0xc
c000dee6:	c3                   	ret    
c000dee7:	90                   	nop

c000dee8 <Mouse::~Mouse()>:
c000dee8:	83 ec 0c             	sub    esp,0xc
c000deeb:	83 ec 0c             	sub    esp,0xc
c000deee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000def2:	e8 cd ff ff ff       	call   c000dec4 <Mouse::~Mouse()>
c000def7:	83 c4 10             	add    esp,0x10
c000defa:	83 ec 08             	sub    esp,0x8
c000defd:	68 58 01 00 00       	push   0x158
c000df02:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000df06:	e8 0d c9 ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c000df0b:	83 c4 10             	add    esp,0x10
c000df0e:	83 c4 0c             	add    esp,0xc
c000df11:	c3                   	ret    

c000df12 <NIC::getMAC()>:
c000df12:	31 c0                	xor    eax,eax
c000df14:	31 d2                	xor    edx,edx
c000df16:	c3                   	ret    
c000df17:	90                   	nop

c000df18 <NIC::write(int, unsigned char*, int*)>:
c000df18:	b8 01 00 00 00       	mov    eax,0x1
c000df1d:	c3                   	ret    

c000df1e <NIC::NIC(char const*)>:
c000df1e:	83 ec 0c             	sub    esp,0xc
c000df21:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df25:	83 ec 08             	sub    esp,0x8
c000df28:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000df2c:	50                   	push   eax
c000df2d:	e8 38 ec ff ff       	call   c000cb6a <Device::Device(char const*)>
c000df32:	83 c4 10             	add    esp,0x10
c000df35:	ba 2c 1d 02 c0       	mov    edx,0xc0021d2c
c000df3a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df3e:	89 10                	mov    DWORD PTR [eax],edx
c000df40:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df44:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c000df4e:	90                   	nop
c000df4f:	83 c4 0c             	add    esp,0xc
c000df52:	c3                   	ret    
c000df53:	90                   	nop

c000df54 <NIC::~NIC()>:
c000df54:	83 ec 0c             	sub    esp,0xc
c000df57:	ba 2c 1d 02 c0       	mov    edx,0xc0021d2c
c000df5c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df60:	89 10                	mov    DWORD PTR [eax],edx
c000df62:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df66:	83 ec 0c             	sub    esp,0xc
c000df69:	50                   	push   eax
c000df6a:	e8 65 e9 ff ff       	call   c000c8d4 <Device::~Device()>
c000df6f:	83 c4 10             	add    esp,0x10
c000df72:	90                   	nop
c000df73:	83 c4 0c             	add    esp,0xc
c000df76:	c3                   	ret    
c000df77:	90                   	nop

c000df78 <NIC::~NIC()>:
c000df78:	83 ec 0c             	sub    esp,0xc
c000df7b:	83 ec 0c             	sub    esp,0xc
c000df7e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000df82:	e8 cd ff ff ff       	call   c000df54 <NIC::~NIC()>
c000df87:	83 c4 10             	add    esp,0x10
c000df8a:	83 ec 08             	sub    esp,0x8
c000df8d:	68 58 01 00 00       	push   0x158
c000df92:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000df96:	e8 7d c8 ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c000df9b:	83 c4 10             	add    esp,0x10
c000df9e:	83 c4 0c             	add    esp,0xc
c000dfa1:	c3                   	ret    

c000dfa2 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c000dfa2:	55                   	push   ebp
c000dfa3:	57                   	push   edi
c000dfa4:	56                   	push   esi
c000dfa5:	53                   	push   ebx
c000dfa6:	81 ec 28 01 00 00    	sub    esp,0x128
c000dfac:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c000dfb3:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c000dfba:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c000dfc1:	8b 94 24 44 01 00 00 	mov    edx,DWORD PTR [esp+0x144]
c000dfc8:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000dfcc:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000dfd0:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000dfd7:	e8 8a ec ff ff       	call   c000cc66 <Device::getName()>
c000dfdc:	5a                   	pop    edx
c000dfdd:	59                   	pop    ecx
c000dfde:	50                   	push   eax
c000dfdf:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c000dfe3:	55                   	push   ebp
c000dfe4:	e8 57 26 ff ff       	call   c0000640 <strcpy>
c000dfe9:	5b                   	pop    ebx
c000dfea:	58                   	pop    eax
c000dfeb:	68 58 1d 02 c0       	push   0xc0021d58
c000dff0:	55                   	push   ebp
c000dff1:	e8 4a 28 ff ff       	call   c0000840 <strcat>
c000dff6:	c7 04 24 78 01 00 00 	mov    DWORD PTR [esp],0x178
c000dffd:	e8 b4 9a ff ff       	call   c0007ab6 <malloc>
c000e002:	83 c4 0c             	add    esp,0xc
c000e005:	89 c3                	mov    ebx,eax
c000e007:	57                   	push   edi
c000e008:	56                   	push   esi
c000e009:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e00d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e011:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c000e018:	55                   	push   ebp
c000e019:	50                   	push   eax
c000e01a:	e8 59 fb ff ff       	call   c000db78 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c000e01f:	83 c4 14             	add    esp,0x14
c000e022:	53                   	push   ebx
c000e023:	e8 10 fc ff ff       	call   c000dc38 <LogicalDisk::assignDriveLetter()>
c000e028:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000e02b:	e8 c2 fc ff ff       	call   c000dcf2 <LogicalDisk::mount()>
c000e030:	58                   	pop    eax
c000e031:	5a                   	pop    edx
c000e032:	53                   	push   ebx
c000e033:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000e03a:	e8 93 e9 ff ff       	call   c000c9d2 <Device::addChild(Device*)>
c000e03f:	81 c4 2c 01 00 00    	add    esp,0x12c
c000e045:	5b                   	pop    ebx
c000e046:	5e                   	pop    esi
c000e047:	5f                   	pop    edi
c000e048:	5d                   	pop    ebp
c000e049:	c3                   	ret    

c000e04a <createPartitionsForDisk(PhysicalDisk*)>:
c000e04a:	55                   	push   ebp
c000e04b:	57                   	push   edi
c000e04c:	56                   	push   esi
c000e04d:	53                   	push   ebx
c000e04e:	81 ec 5c 02 00 00    	sub    esp,0x25c
c000e054:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c000e05b:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c000e061:	3d 00 02 00 00       	cmp    eax,0x200
c000e066:	74 27                	je     c000e08f <createPartitionsForDisk(PhysicalDisk*)+0x45>
c000e068:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c000e06e:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c000e074:	83 ec 10             	sub    esp,0x10
c000e077:	0f a4 f7 0a          	shld   edi,esi,0xa
c000e07b:	99                   	cdq    
c000e07c:	c1 e6 0a             	shl    esi,0xa
c000e07f:	52                   	push   edx
c000e080:	89 fd                	mov    ebp,edi
c000e082:	50                   	push   eax
c000e083:	55                   	push   ebp
c000e084:	56                   	push   esi
c000e085:	e8 76 16 01 00       	call   c001f700 <__udivdi3>
c000e08a:	e9 b9 00 00 00       	jmp    c000e148 <createPartitionsForDisk(PhysicalDisk*)+0xfe>
c000e08f:	83 ec 0c             	sub    esp,0xc
c000e092:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e094:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c000e098:	56                   	push   esi
c000e099:	6a 01                	push   0x1
c000e09b:	6a 00                	push   0x0
c000e09d:	6a 00                	push   0x0
c000e09f:	53                   	push   ebx
c000e0a0:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000e0a3:	83 c4 20             	add    esp,0x20
c000e0a6:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c000e0ae:	75 0a                	jne    c000e0ba <createPartitionsForDisk(PhysicalDisk*)+0x70>
c000e0b0:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c000e0b8:	74 2c                	je     c000e0e6 <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c000e0ba:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000e0c0:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000e0c6:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000e0cc:	83 ec 10             	sub    esp,0x10
c000e0cf:	0f a4 c2 0a          	shld   edx,eax,0xa
c000e0d3:	89 f7                	mov    edi,esi
c000e0d5:	c1 e0 0a             	shl    eax,0xa
c000e0d8:	c1 ff 1f             	sar    edi,0x1f
c000e0db:	57                   	push   edi
c000e0dc:	56                   	push   esi
c000e0dd:	52                   	push   edx
c000e0de:	50                   	push   eax
c000e0df:	e8 1c 16 01 00       	call   c001f700 <__udivdi3>
c000e0e4:	eb 62                	jmp    c000e148 <createPartitionsForDisk(PhysicalDisk*)+0xfe>
c000e0e6:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c000e0ed:	8a 94 24 1e 02 00 00 	mov    dl,BYTE PTR [esp+0x21e]
c000e0f4:	89 cf                	mov    edi,ecx
c000e0f6:	83 e2 7f             	and    edx,0x7f
c000e0f9:	83 e7 7f             	and    edi,0x7f
c000e0fc:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c000e103:	8d 0c 17             	lea    ecx,[edi+edx*1]
c000e106:	83 e0 7f             	and    eax,0x7f
c000e109:	8d 14 01             	lea    edx,[ecx+eax*1]
c000e10c:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c000e113:	83 e0 7f             	and    eax,0x7f
c000e116:	01 d0                	add    eax,edx
c000e118:	89 c5                	mov    ebp,eax
c000e11a:	84 c0                	test   al,al
c000e11c:	74 41                	je     c000e15f <createPartitionsForDisk(PhysicalDisk*)+0x115>
c000e11e:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000e124:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000e12a:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000e130:	83 ec 10             	sub    esp,0x10
c000e133:	0f a4 c2 0a          	shld   edx,eax,0xa
c000e137:	89 f7                	mov    edi,esi
c000e139:	c1 e0 0a             	shl    eax,0xa
c000e13c:	c1 ff 1f             	sar    edi,0x1f
c000e13f:	57                   	push   edi
c000e140:	56                   	push   esi
c000e141:	52                   	push   edx
c000e142:	50                   	push   eax
c000e143:	e8 b8 15 01 00       	call   c001f700 <__udivdi3>
c000e148:	83 c4 14             	add    esp,0x14
c000e14b:	52                   	push   edx
c000e14c:	50                   	push   eax
c000e14d:	6a 00                	push   0x0
c000e14f:	6a 00                	push   0x0
c000e151:	53                   	push   ebx
c000e152:	e8 4b fe ff ff       	call   c000dfa2 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000e157:	83 c4 20             	add    esp,0x20
c000e15a:	e9 73 01 00 00       	jmp    c000e2d2 <createPartitionsForDisk(PhysicalDisk*)+0x288>
c000e15f:	89 f0                	mov    eax,esi
c000e161:	31 c9                	xor    ecx,ecx
c000e163:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c000e16a:	75 02                	jne    c000e16e <createPartitionsForDisk(PhysicalDisk*)+0x124>
c000e16c:	89 cd                	mov    ebp,ecx
c000e16e:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c000e175:	0f b6 b0 c8 01 00 00 	movzx  esi,BYTE PTR [eax+0x1c8]
c000e17c:	c1 e2 08             	shl    edx,0x8
c000e17f:	c1 e6 10             	shl    esi,0x10
c000e182:	c7 44 cc 14 00 00 00 00 	mov    DWORD PTR [esp+ecx*8+0x14],0x0
c000e18a:	09 f2                	or     edx,esi
c000e18c:	c7 44 cc 34 00 00 00 00 	mov    DWORD PTR [esp+ecx*8+0x34],0x0
c000e194:	0f b6 b0 c6 01 00 00 	movzx  esi,BYTE PTR [eax+0x1c6]
c000e19b:	83 c0 10             	add    eax,0x10
c000e19e:	09 f2                	or     edx,esi
c000e1a0:	0f b6 b0 b9 01 00 00 	movzx  esi,BYTE PTR [eax+0x1b9]
c000e1a7:	c1 e6 18             	shl    esi,0x18
c000e1aa:	09 f2                	or     edx,esi
c000e1ac:	0f b6 b0 bc 01 00 00 	movzx  esi,BYTE PTR [eax+0x1bc]
c000e1b3:	89 54 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],edx
c000e1b7:	c1 e6 10             	shl    esi,0x10
c000e1ba:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c000e1c1:	c1 e2 08             	shl    edx,0x8
c000e1c4:	09 f2                	or     edx,esi
c000e1c6:	0f b6 b0 ba 01 00 00 	movzx  esi,BYTE PTR [eax+0x1ba]
c000e1cd:	09 f2                	or     edx,esi
c000e1cf:	0f b6 b0 bd 01 00 00 	movzx  esi,BYTE PTR [eax+0x1bd]
c000e1d6:	c1 e6 18             	shl    esi,0x18
c000e1d9:	09 f2                	or     edx,esi
c000e1db:	89 54 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],edx
c000e1df:	41                   	inc    ecx
c000e1e0:	83 f9 04             	cmp    ecx,0x4
c000e1e3:	0f 85 7a ff ff ff    	jne    c000e163 <createPartitionsForDisk(PhysicalDisk*)+0x119>
c000e1e9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e1ed:	83 f0 01             	xor    eax,0x1
c000e1f0:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000e1f4:	75 4f                	jne    c000e245 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c000e1f6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e1fa:	83 f0 01             	xor    eax,0x1
c000e1fd:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c000e201:	75 42                	jne    c000e245 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c000e203:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000e20b:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000e213:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000e219:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000e21f:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000e225:	0f a4 c2 0a          	shld   edx,eax,0xa
c000e229:	89 f7                	mov    edi,esi
c000e22b:	c1 e0 0a             	shl    eax,0xa
c000e22e:	c1 ff 1f             	sar    edi,0x1f
c000e231:	57                   	push   edi
c000e232:	56                   	push   esi
c000e233:	52                   	push   edx
c000e234:	50                   	push   eax
c000e235:	e8 c6 14 01 00       	call   c001f700 <__udivdi3>
c000e23a:	83 c4 10             	add    esp,0x10
c000e23d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000e241:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000e245:	89 e8                	mov    eax,ebp
c000e247:	0f b6 e8             	movzx  ebp,al
c000e24a:	85 ed                	test   ebp,ebp
c000e24c:	74 50                	je     c000e29e <createPartitionsForDisk(PhysicalDisk*)+0x254>
c000e24e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e252:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000e256:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000e25a:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000e25e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e262:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e266:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c000e26a:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c000e26e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e272:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e276:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e27a:	89 74 ec 10          	mov    DWORD PTR [esp+ebp*8+0x10],esi
c000e27e:	89 7c ec 14          	mov    DWORD PTR [esp+ebp*8+0x14],edi
c000e282:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c000e286:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c000e28a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000e28e:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c000e292:	89 7c 24 34          	mov    DWORD PTR [esp+0x34],edi
c000e296:	89 44 ec 30          	mov    DWORD PTR [esp+ebp*8+0x30],eax
c000e29a:	89 54 ec 34          	mov    DWORD PTR [esp+ebp*8+0x34],edx
c000e29e:	31 ed                	xor    ebp,ebp
c000e2a0:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c000e2a4:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c000e2a8:	89 f8                	mov    eax,edi
c000e2aa:	09 f0                	or     eax,esi
c000e2ac:	74 1e                	je     c000e2cc <createPartitionsForDisk(PhysicalDisk*)+0x282>
c000e2ae:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c000e2b2:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c000e2b6:	89 d1                	mov    ecx,edx
c000e2b8:	09 c1                	or     ecx,eax
c000e2ba:	74 10                	je     c000e2cc <createPartitionsForDisk(PhysicalDisk*)+0x282>
c000e2bc:	83 ec 0c             	sub    esp,0xc
c000e2bf:	57                   	push   edi
c000e2c0:	56                   	push   esi
c000e2c1:	52                   	push   edx
c000e2c2:	50                   	push   eax
c000e2c3:	53                   	push   ebx
c000e2c4:	e8 d9 fc ff ff       	call   c000dfa2 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000e2c9:	83 c4 20             	add    esp,0x20
c000e2cc:	45                   	inc    ebp
c000e2cd:	83 fd 04             	cmp    ebp,0x4
c000e2d0:	75 ce                	jne    c000e2a0 <createPartitionsForDisk(PhysicalDisk*)+0x256>
c000e2d2:	81 c4 5c 02 00 00    	add    esp,0x25c
c000e2d8:	5b                   	pop    ebx
c000e2d9:	5e                   	pop    esi
c000e2da:	5f                   	pop    edi
c000e2db:	5d                   	pop    ebp
c000e2dc:	c3                   	ret    
c000e2dd:	66 90                	xchg   ax,ax
c000e2df:	90                   	nop

c000e2e0 <Serial::Serial(char const*)>:
c000e2e0:	83 ec 0c             	sub    esp,0xc
c000e2e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e2e7:	83 ec 08             	sub    esp,0x8
c000e2ea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e2ee:	50                   	push   eax
c000e2ef:	e8 76 e8 ff ff       	call   c000cb6a <Device::Device(char const*)>
c000e2f4:	83 c4 10             	add    esp,0x10
c000e2f7:	ba 6c 1d 02 c0       	mov    edx,0xc0021d6c
c000e2fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e300:	89 10                	mov    DWORD PTR [eax],edx
c000e302:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e306:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c000e310:	90                   	nop
c000e311:	83 c4 0c             	add    esp,0xc
c000e314:	c3                   	ret    
c000e315:	90                   	nop
c000e316:	66 90                	xchg   ax,ax

c000e318 <Serial::~Serial()>:
c000e318:	83 ec 0c             	sub    esp,0xc
c000e31b:	ba 6c 1d 02 c0       	mov    edx,0xc0021d6c
c000e320:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e324:	89 10                	mov    DWORD PTR [eax],edx
c000e326:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e32a:	83 ec 0c             	sub    esp,0xc
c000e32d:	50                   	push   eax
c000e32e:	e8 a1 e5 ff ff       	call   c000c8d4 <Device::~Device()>
c000e333:	83 c4 10             	add    esp,0x10
c000e336:	90                   	nop
c000e337:	83 c4 0c             	add    esp,0xc
c000e33a:	c3                   	ret    
c000e33b:	90                   	nop

c000e33c <Serial::~Serial()>:
c000e33c:	83 ec 0c             	sub    esp,0xc
c000e33f:	83 ec 0c             	sub    esp,0xc
c000e342:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e346:	e8 cd ff ff ff       	call   c000e318 <Serial::~Serial()>
c000e34b:	83 c4 10             	add    esp,0x10
c000e34e:	83 ec 08             	sub    esp,0x8
c000e351:	68 58 01 00 00       	push   0x158
c000e356:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e35a:	e8 b9 c4 ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c000e35f:	83 c4 10             	add    esp,0x10
c000e362:	83 c4 0c             	add    esp,0xc
c000e365:	c3                   	ret    
c000e366:	66 90                	xchg   ax,ax

c000e368 <Timer::Timer(char const*)>:
c000e368:	83 ec 0c             	sub    esp,0xc
c000e36b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e36f:	83 ec 08             	sub    esp,0x8
c000e372:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e376:	50                   	push   eax
c000e377:	e8 ee e7 ff ff       	call   c000cb6a <Device::Device(char const*)>
c000e37c:	83 c4 10             	add    esp,0x10
c000e37f:	ba b0 1d 02 c0       	mov    edx,0xc0021db0
c000e384:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e388:	89 10                	mov    DWORD PTR [eax],edx
c000e38a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e38e:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c000e398:	90                   	nop
c000e399:	83 c4 0c             	add    esp,0xc
c000e39c:	c3                   	ret    
c000e39d:	90                   	nop
c000e39e:	66 90                	xchg   ax,ax

c000e3a0 <Timer::~Timer()>:
c000e3a0:	83 ec 0c             	sub    esp,0xc
c000e3a3:	ba b0 1d 02 c0       	mov    edx,0xc0021db0
c000e3a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e3ac:	89 10                	mov    DWORD PTR [eax],edx
c000e3ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e3b2:	83 ec 0c             	sub    esp,0xc
c000e3b5:	50                   	push   eax
c000e3b6:	e8 19 e5 ff ff       	call   c000c8d4 <Device::~Device()>
c000e3bb:	83 c4 10             	add    esp,0x10
c000e3be:	90                   	nop
c000e3bf:	83 c4 0c             	add    esp,0xc
c000e3c2:	c3                   	ret    
c000e3c3:	90                   	nop

c000e3c4 <Timer::~Timer()>:
c000e3c4:	83 ec 0c             	sub    esp,0xc
c000e3c7:	83 ec 0c             	sub    esp,0xc
c000e3ca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e3ce:	e8 cd ff ff ff       	call   c000e3a0 <Timer::~Timer()>
c000e3d3:	83 c4 10             	add    esp,0x10
c000e3d6:	83 ec 08             	sub    esp,0x8
c000e3d9:	68 5c 01 00 00       	push   0x15c
c000e3de:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e3e2:	e8 31 c4 ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c000e3e7:	83 c4 10             	add    esp,0x10
c000e3ea:	83 c4 0c             	add    esp,0xc
c000e3ed:	c3                   	ret    

c000e3ee <Timer::read()>:
c000e3ee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e3f2:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000e3f8:	c3                   	ret    

c000e3f9 <setupTimer(int)>:
c000e3f9:	53                   	push   ebx
c000e3fa:	83 ec 14             	sub    esp,0x14
c000e3fd:	68 5c 01 00 00       	push   0x15c
c000e402:	e8 af 96 ff ff       	call   c0007ab6 <malloc>
c000e407:	89 04 24             	mov    DWORD PTR [esp],eax
c000e40a:	89 c3                	mov    ebx,eax
c000e40c:	e8 5b 0b 01 00       	call   c001ef6c <PIT::PIT()>
c000e411:	58                   	pop    eax
c000e412:	5a                   	pop    edx
c000e413:	53                   	push   ebx
c000e414:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c000e41a:	e8 b3 e5 ff ff       	call   c000c9d2 <Device::addChild(Device*)>
c000e41f:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e421:	6a 00                	push   0x0
c000e423:	6a 00                	push   0x0
c000e425:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000e429:	53                   	push   ebx
c000e42a:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000e42d:	89 d8                	mov    eax,ebx
c000e42f:	83 c4 28             	add    esp,0x28
c000e432:	5b                   	pop    ebx
c000e433:	c3                   	ret    

c000e434 <timerHandler(unsigned int)>:
c000e434:	56                   	push   esi
c000e435:	53                   	push   ebx
c000e436:	51                   	push   ecx
c000e437:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e43b:	01 05 ec b8 02 c0    	add    DWORD PTR ds:0xc002b8ec,eax
c000e441:	80 3d bd 6e 02 c0 00 	cmp    BYTE PTR ds:0xc0026ebd,0x0
c000e448:	0f 84 4a 01 00 00    	je     c000e598 <timerHandler(unsigned int)+0x164>
c000e44e:	fa                   	cli    
c000e44f:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c000e455:	83 ec 0c             	sub    esp,0xc
c000e458:	ff 05 c4 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c4
c000e45e:	68 d8 c6 02 c0       	push   0xc002c6d8
c000e463:	e8 68 18 01 00       	call   c001fcd0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000e468:	83 c4 10             	add    esp,0x10
c000e46b:	84 c0                	test   al,al
c000e46d:	0f 85 a1 00 00 00    	jne    c000e514 <timerHandler(unsigned int)+0xe0>
c000e473:	83 ec 0c             	sub    esp,0xc
c000e476:	68 d8 c6 02 c0       	push   0xc002c6d8
c000e47b:	e8 6c 18 01 00       	call   c001fcec <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000e480:	83 c4 10             	add    esp,0x10
c000e483:	89 c6                	mov    esi,eax
c000e485:	8d 76 00             	lea    esi,[esi+0x0]
c000e488:	83 ec 0c             	sub    esp,0xc
c000e48b:	68 d8 c6 02 c0       	push   0xc002c6d8
c000e490:	e8 57 18 01 00       	call   c001fcec <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000e495:	c7 04 24 d8 c6 02 c0 	mov    DWORD PTR [esp],0xc002c6d8
c000e49c:	89 c3                	mov    ebx,eax
c000e49e:	e8 51 18 01 00       	call   c001fcf4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c000e4a3:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000e4a6:	83 c4 10             	add    esp,0x10
c000e4a9:	3b 05 ec b8 02 c0    	cmp    eax,DWORD PTR ds:0xc002b8ec
c000e4af:	77 23                	ja     c000e4d4 <timerHandler(unsigned int)+0xa0>
c000e4b1:	83 ec 0c             	sub    esp,0xc
c000e4b4:	53                   	push   ebx
c000e4b5:	e8 ee 80 00 00       	call   c00165a8 <unblockTask(ThreadControlBlock*)>
c000e4ba:	83 c4 10             	add    esp,0x10
c000e4bd:	39 de                	cmp    esi,ebx
c000e4bf:	75 27                	jne    c000e4e8 <timerHandler(unsigned int)+0xb4>
c000e4c1:	83 ec 0c             	sub    esp,0xc
c000e4c4:	68 d8 c6 02 c0       	push   0xc002c6d8
c000e4c9:	e8 1e 18 01 00       	call   c001fcec <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000e4ce:	89 c6                	mov    esi,eax
c000e4d0:	eb 12                	jmp    c000e4e4 <timerHandler(unsigned int)+0xb0>
c000e4d2:	66 90                	xchg   ax,ax
c000e4d4:	52                   	push   edx
c000e4d5:	52                   	push   edx
c000e4d6:	53                   	push   ebx
c000e4d7:	68 d8 c6 02 c0       	push   0xc002c6d8
c000e4dc:	e8 cf 18 01 00       	call   c001fdb0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c000e4e1:	8d 76 00             	lea    esi,[esi+0x0]
c000e4e4:	83 c4 10             	add    esp,0x10
c000e4e7:	90                   	nop
c000e4e8:	83 ec 0c             	sub    esp,0xc
c000e4eb:	68 d8 c6 02 c0       	push   0xc002c6d8
c000e4f0:	e8 db 17 01 00       	call   c001fcd0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000e4f5:	83 c4 10             	add    esp,0x10
c000e4f8:	84 c0                	test   al,al
c000e4fa:	75 18                	jne    c000e514 <timerHandler(unsigned int)+0xe0>
c000e4fc:	83 ec 0c             	sub    esp,0xc
c000e4ff:	68 d8 c6 02 c0       	push   0xc002c6d8
c000e504:	e8 e3 17 01 00       	call   c001fcec <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000e509:	83 c4 10             	add    esp,0x10
c000e50c:	39 f0                	cmp    eax,esi
c000e50e:	0f 85 74 ff ff ff    	jne    c000e488 <timerHandler(unsigned int)+0x54>
c000e514:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000e519:	83 78 34 00          	cmp    DWORD PTR [eax+0x34],0x0
c000e51d:	74 41                	je     c000e560 <timerHandler(unsigned int)+0x12c>
c000e51f:	80 3d bc 6e 02 c0 00 	cmp    BYTE PTR ds:0xc0026ebc,0x0
c000e526:	74 38                	je     c000e560 <timerHandler(unsigned int)+0x12c>
c000e528:	fa                   	cli    
c000e529:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c000e52f:	a1 ec b8 02 c0       	mov    eax,ds:0xc002b8ec
c000e534:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000e53a:	29 42 34             	sub    DWORD PTR [edx+0x34],eax
c000e53d:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000e543:	3b 42 34             	cmp    eax,DWORD PTR [edx+0x34]
c000e546:	72 08                	jb     c000e550 <timerHandler(unsigned int)+0x11c>
c000e548:	e8 43 7b 00 00       	call   c0016090 <schedule()>
c000e54d:	8d 76 00             	lea    esi,[esi+0x0]
c000e550:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000e555:	48                   	dec    eax
c000e556:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c000e55b:	75 03                	jne    c000e560 <timerHandler(unsigned int)+0x12c>
c000e55d:	fb                   	sti    
c000e55e:	66 90                	xchg   ax,ax
c000e560:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c000e565:	48                   	dec    eax
c000e566:	a3 c4 c6 02 c0       	mov    ds:0xc002c6c4,eax
c000e56b:	75 1b                	jne    c000e588 <timerHandler(unsigned int)+0x154>
c000e56d:	83 3d c0 c6 02 c0 00 	cmp    DWORD PTR ds:0xc002c6c0,0x0
c000e574:	74 12                	je     c000e588 <timerHandler(unsigned int)+0x154>
c000e576:	c7 05 c0 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6c0,0x0
c000e580:	e8 0b 7b 00 00       	call   c0016090 <schedule()>
c000e585:	8d 76 00             	lea    esi,[esi+0x0]
c000e588:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c000e58d:	48                   	dec    eax
c000e58e:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c000e593:	75 03                	jne    c000e598 <timerHandler(unsigned int)+0x164>
c000e595:	fb                   	sti    
c000e596:	66 90                	xchg   ax,ax
c000e598:	58                   	pop    eax
c000e599:	5b                   	pop    ebx
c000e59a:	5e                   	pop    esi
c000e59b:	c3                   	ret    

c000e59c <VCache::VCache(PhysicalDisk*)>:
c000e59c:	53                   	push   ebx
c000e59d:	83 ec 18             	sub    esp,0x18
c000e5a0:	ba e0 1d 02 c0       	mov    edx,0xc0021de0
c000e5a5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e5a9:	89 10                	mov    DWORD PTR [eax],edx
c000e5ab:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e5af:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c000e5b6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e5ba:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c000e5c1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e5c5:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c000e5cc:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c000e5d3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e5d7:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c000e5de:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c000e5e5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e5e9:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c000e5f0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e5f4:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000e5f8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e5fc:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
c000e603:	c7 40 34 00 00 00 00 	mov    DWORD PTR [eax+0x34],0x0
c000e60a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e60e:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000e612:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e616:	c6 40 3d 00          	mov    BYTE PTR [eax+0x3d],0x0
c000e61a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e61e:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000e622:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e626:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c000e62d:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c000e635:	83 ec 0c             	sub    esp,0xc
c000e638:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e63c:	e8 75 94 ff ff       	call   c0007ab6 <malloc>
c000e641:	83 c4 10             	add    esp,0x10
c000e644:	89 c3                	mov    ebx,eax
c000e646:	83 ec 0c             	sub    esp,0xc
c000e649:	53                   	push   ebx
c000e64a:	e8 dd 77 00 00       	call   c0015e2c <Mutex::Mutex()>
c000e64f:	83 c4 10             	add    esp,0x10
c000e652:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e656:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000e659:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e65d:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000e661:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000e664:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e668:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c000e66f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000e673:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c000e679:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e67d:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000e680:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000e684:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c000e68a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000e690:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000e694:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c000e697:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c000e69a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e69e:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000e6a2:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000e6a6:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000e6ac:	05 00 02 00 00       	add    eax,0x200
c000e6b1:	c1 e0 03             	shl    eax,0x3
c000e6b4:	83 ec 0c             	sub    esp,0xc
c000e6b7:	50                   	push   eax
c000e6b8:	e8 f9 93 ff ff       	call   c0007ab6 <malloc>
c000e6bd:	83 c4 10             	add    esp,0x10
c000e6c0:	89 c2                	mov    edx,eax
c000e6c2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e6c6:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000e6c9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e6cd:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c000e6d4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e6d8:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000e6dc:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000e6e0:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c000e6e6:	89 d0                	mov    eax,edx
c000e6e8:	c1 e0 02             	shl    eax,0x2
c000e6eb:	01 d0                	add    eax,edx
c000e6ed:	c1 e0 04             	shl    eax,0x4
c000e6f0:	83 ec 0c             	sub    esp,0xc
c000e6f3:	50                   	push   eax
c000e6f4:	e8 bd 93 ff ff       	call   c0007ab6 <malloc>
c000e6f9:	83 c4 10             	add    esp,0x10
c000e6fc:	89 c2                	mov    edx,eax
c000e6fe:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e702:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c000e705:	90                   	nop
c000e706:	83 c4 18             	add    esp,0x18
c000e709:	5b                   	pop    ebx
c000e70a:	c3                   	ret    
c000e70b:	90                   	nop

c000e70c <VCache::invalidateReadBuffer()>:
c000e70c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e710:	66 c7 40 3c 00 00    	mov    WORD PTR [eax+0x3c],0x0
c000e716:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000e71a:	c3                   	ret    
c000e71b:	90                   	nop

c000e71c <VCache::writeWriteBuffer()>:
c000e71c:	53                   	push   ebx
c000e71d:	83 ec 08             	sub    esp,0x8
c000e720:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e724:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000e728:	74 1e                	je     c000e748 <VCache::writeWriteBuffer()+0x2c>
c000e72a:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000e72d:	83 ec 0c             	sub    esp,0xc
c000e730:	8b 10                	mov    edx,DWORD PTR [eax]
c000e732:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c000e735:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c000e738:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c000e73b:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000e73e:	50                   	push   eax
c000e73f:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c000e742:	83 c4 20             	add    esp,0x20
c000e745:	8d 76 00             	lea    esi,[esi+0x0]
c000e748:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000e74f:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c000e756:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c000e75a:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c000e761:	83 c4 08             	add    esp,0x8
c000e764:	5b                   	pop    ebx
c000e765:	c3                   	ret    
c000e766:	66 90                	xchg   ax,ax

c000e768 <VCache::~VCache()>:
c000e768:	83 ec 0c             	sub    esp,0xc
c000e76b:	ba e0 1d 02 c0       	mov    edx,0xc0021de0
c000e770:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e774:	89 10                	mov    DWORD PTR [eax],edx
c000e776:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e77a:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c000e77d:	0f b6 c0             	movzx  eax,al
c000e780:	85 c0                	test   eax,eax
c000e782:	74 10                	je     c000e794 <VCache::~VCache()+0x2c>
c000e784:	83 ec 0c             	sub    esp,0xc
c000e787:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e78b:	e8 8c ff ff ff       	call   c000e71c <VCache::writeWriteBuffer()>
c000e790:	83 c4 10             	add    esp,0x10
c000e793:	90                   	nop
c000e794:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e798:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000e79b:	83 ec 0c             	sub    esp,0xc
c000e79e:	50                   	push   eax
c000e79f:	e8 22 93 ff ff       	call   c0007ac6 <free>
c000e7a4:	83 c4 10             	add    esp,0x10
c000e7a7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7ab:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000e7ae:	83 ec 0c             	sub    esp,0xc
c000e7b1:	50                   	push   eax
c000e7b2:	e8 0f 93 ff ff       	call   c0007ac6 <free>
c000e7b7:	83 c4 10             	add    esp,0x10
c000e7ba:	90                   	nop
c000e7bb:	83 c4 0c             	add    esp,0xc
c000e7be:	c3                   	ret    
c000e7bf:	90                   	nop

c000e7c0 <VCache::~VCache()>:
c000e7c0:	83 ec 0c             	sub    esp,0xc
c000e7c3:	83 ec 0c             	sub    esp,0xc
c000e7c6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e7ca:	e8 99 ff ff ff       	call   c000e768 <VCache::~VCache()>
c000e7cf:	83 c4 10             	add    esp,0x10
c000e7d2:	83 ec 08             	sub    esp,0x8
c000e7d5:	6a 44                	push   0x44
c000e7d7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e7db:	e8 38 c0 ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c000e7e0:	83 c4 10             	add    esp,0x10
c000e7e3:	83 c4 0c             	add    esp,0xc
c000e7e6:	c3                   	ret    
c000e7e7:	90                   	nop

c000e7e8 <VCache::write(unsigned long long, int, void*)>:
c000e7e8:	55                   	push   ebp
c000e7e9:	57                   	push   edi
c000e7ea:	56                   	push   esi
c000e7eb:	53                   	push   ebx
c000e7ec:	83 ec 1c             	sub    esp,0x1c
c000e7ef:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000e7f3:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e7f7:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000e7fb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e7ff:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000e803:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000e807:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c000e80b:	74 07                	je     c000e814 <VCache::write(unsigned long long, int, void*)+0x2c>
c000e80d:	53                   	push   ebx
c000e80e:	e8 f9 fe ff ff       	call   c000e70c <VCache::invalidateReadBuffer()>
c000e813:	58                   	pop    eax
c000e814:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000e818:	74 62                	je     c000e87c <VCache::write(unsigned long long, int, void*)+0x94>
c000e81a:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c000e81d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000e821:	99                   	cdq    
c000e822:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e826:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c000e829:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c000e82c:	31 c1                	xor    ecx,eax
c000e82e:	89 d0                	mov    eax,edx
c000e830:	89 ca                	mov    edx,ecx
c000e832:	31 e8                	xor    eax,ebp
c000e834:	09 c2                	or     edx,eax
c000e836:	75 38                	jne    c000e870 <VCache::write(unsigned long long, int, void*)+0x88>
c000e838:	83 ff 01             	cmp    edi,0x1
c000e83b:	75 33                	jne    c000e870 <VCache::write(unsigned long long, int, void*)+0x88>
c000e83d:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000e840:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000e844:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000e84a:	8b 7b 28             	mov    edi,DWORD PTR [ebx+0x28]
c000e84d:	0f af c8             	imul   ecx,eax
c000e850:	01 cf                	add    edi,ecx
c000e852:	89 c1                	mov    ecx,eax
c000e854:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e856:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c000e859:	40                   	inc    eax
c000e85a:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c000e85d:	83 f8 50             	cmp    eax,0x50
c000e860:	75 6a                	jne    c000e8cc <VCache::write(unsigned long long, int, void*)+0xe4>
c000e862:	83 ec 0c             	sub    esp,0xc
c000e865:	53                   	push   ebx
c000e866:	e8 b1 fe ff ff       	call   c000e71c <VCache::writeWriteBuffer()>
c000e86b:	83 c4 10             	add    esp,0x10
c000e86e:	eb 5c                	jmp    c000e8cc <VCache::write(unsigned long long, int, void*)+0xe4>
c000e870:	83 ec 0c             	sub    esp,0xc
c000e873:	53                   	push   ebx
c000e874:	e8 a3 fe ff ff       	call   c000e71c <VCache::writeWriteBuffer()>
c000e879:	83 c4 10             	add    esp,0x10
c000e87c:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000e87f:	83 ff 4f             	cmp    edi,0x4f
c000e882:	7f 20                	jg     c000e8a4 <VCache::write(unsigned long long, int, void*)+0xbc>
c000e884:	89 7b 24             	mov    DWORD PTR [ebx+0x24],edi
c000e887:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000e88b:	89 6b 20             	mov    DWORD PTR [ebx+0x20],ebp
c000e88e:	89 53 1c             	mov    DWORD PTR [ebx+0x1c],edx
c000e891:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c000e895:	8b 7b 28             	mov    edi,DWORD PTR [ebx+0x28]
c000e898:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000e89e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e8a0:	eb 2a                	jmp    c000e8cc <VCache::write(unsigned long long, int, void*)+0xe4>
c000e8a2:	66 90                	xchg   ax,ax
c000e8a4:	8b 10                	mov    edx,DWORD PTR [eax]
c000e8a6:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c000e8aa:	89 7c 24 3c          	mov    DWORD PTR [esp+0x3c],edi
c000e8ae:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000e8b2:	89 6c 24 38          	mov    DWORD PTR [esp+0x38],ebp
c000e8b6:	89 74 24 34          	mov    DWORD PTR [esp+0x34],esi
c000e8ba:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000e8be:	8b 42 2c             	mov    eax,DWORD PTR [edx+0x2c]
c000e8c1:	83 c4 1c             	add    esp,0x1c
c000e8c4:	5b                   	pop    ebx
c000e8c5:	5e                   	pop    esi
c000e8c6:	5f                   	pop    edi
c000e8c7:	5d                   	pop    ebp
c000e8c8:	ff e0                	jmp    eax
c000e8ca:	66 90                	xchg   ax,ax
c000e8cc:	83 c4 1c             	add    esp,0x1c
c000e8cf:	31 c0                	xor    eax,eax
c000e8d1:	5b                   	pop    ebx
c000e8d2:	5e                   	pop    esi
c000e8d3:	5f                   	pop    edi
c000e8d4:	5d                   	pop    ebp
c000e8d5:	c3                   	ret    

c000e8d6 <VCache::read(unsigned long long, int, void*)>:
c000e8d6:	55                   	push   ebp
c000e8d7:	57                   	push   edi
c000e8d8:	56                   	push   esi
c000e8d9:	53                   	push   ebx
c000e8da:	83 ec 1c             	sub    esp,0x1c
c000e8dd:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c000e8e1:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e8e5:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000e8e9:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000e8ed:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c000e8f1:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000e8f5:	80 7f 2c 00          	cmp    BYTE PTR [edi+0x2c],0x0
c000e8f9:	74 0d                	je     c000e908 <VCache::read(unsigned long long, int, void*)+0x32>
c000e8fb:	83 ec 0c             	sub    esp,0xc
c000e8fe:	57                   	push   edi
c000e8ff:	e8 18 fe ff ff       	call   c000e71c <VCache::writeWriteBuffer()>
c000e904:	83 c4 10             	add    esp,0x10
c000e907:	90                   	nop
c000e908:	83 fd 01             	cmp    ebp,0x1
c000e90b:	0f 85 93 00 00 00    	jne    c000e9a4 <VCache::read(unsigned long long, int, void*)+0xce>
c000e911:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000e914:	89 04 24             	mov    DWORD PTR [esp],eax
c000e917:	80 b8 68 01 00 00 00 	cmp    BYTE PTR [eax+0x168],0x0
c000e91e:	0f 85 80 00 00 00    	jne    c000e9a4 <VCache::read(unsigned long long, int, void*)+0xce>
c000e924:	8b 6f 40             	mov    ebp,DWORD PTR [edi+0x40]
c000e927:	89 e9                	mov    ecx,ebp
c000e929:	f7 d9                	neg    ecx
c000e92b:	89 c8                	mov    eax,ecx
c000e92d:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000e931:	c1 f8 1f             	sar    eax,0x1f
c000e934:	21 d9                	and    ecx,ebx
c000e936:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e93a:	89 c8                	mov    eax,ecx
c000e93c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000e940:	21 f1                	and    ecx,esi
c000e942:	80 7f 3c 00          	cmp    BYTE PTR [edi+0x3c],0x0
c000e946:	89 ca                	mov    edx,ecx
c000e948:	74 2e                	je     c000e978 <VCache::read(unsigned long long, int, void*)+0xa2>
c000e94a:	39 4f 34             	cmp    DWORD PTR [edi+0x34],ecx
c000e94d:	75 29                	jne    c000e978 <VCache::read(unsigned long long, int, void*)+0xa2>
c000e94f:	39 47 30             	cmp    DWORD PTR [edi+0x30],eax
c000e952:	75 24                	jne    c000e978 <VCache::read(unsigned long long, int, void*)+0xa2>
c000e954:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000e957:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000e95d:	8b 47 40             	mov    eax,DWORD PTR [edi+0x40]
c000e960:	8d 70 ff             	lea    esi,[eax-0x1]
c000e963:	21 f3                	and    ebx,esi
c000e965:	0f af d9             	imul   ebx,ecx
c000e968:	03 5f 38             	add    ebx,DWORD PTR [edi+0x38]
c000e96b:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c000e96f:	89 de                	mov    esi,ebx
c000e971:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e973:	31 c0                	xor    eax,eax
c000e975:	eb 61                	jmp    c000e9d8 <VCache::read(unsigned long long, int, void*)+0x102>
c000e977:	90                   	nop
c000e978:	83 ec 0c             	sub    esp,0xc
c000e97b:	c6 47 3c 01          	mov    BYTE PTR [edi+0x3c],0x1
c000e97f:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000e983:	89 47 30             	mov    DWORD PTR [edi+0x30],eax
c000e986:	89 57 34             	mov    DWORD PTR [edi+0x34],edx
c000e989:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000e98b:	ff 77 38             	push   DWORD PTR [edi+0x38]
c000e98e:	55                   	push   ebp
c000e98f:	52                   	push   edx
c000e990:	50                   	push   eax
c000e991:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e995:	ff 51 28             	call   DWORD PTR [ecx+0x28]
c000e998:	83 c4 20             	add    esp,0x20
c000e99b:	85 c0                	test   eax,eax
c000e99d:	75 39                	jne    c000e9d8 <VCache::read(unsigned long long, int, void*)+0x102>
c000e99f:	eb b3                	jmp    c000e954 <VCache::read(unsigned long long, int, void*)+0x7e>
c000e9a1:	8d 76 00             	lea    esi,[esi+0x0]
c000e9a4:	83 ec 0c             	sub    esp,0xc
c000e9a7:	57                   	push   edi
c000e9a8:	e8 5f fd ff ff       	call   c000e70c <VCache::invalidateReadBuffer()>
c000e9ad:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000e9b0:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000e9b4:	8b 10                	mov    edx,DWORD PTR [eax]
c000e9b6:	89 6c 24 4c          	mov    DWORD PTR [esp+0x4c],ebp
c000e9ba:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c000e9be:	89 74 24 48          	mov    DWORD PTR [esp+0x48],esi
c000e9c2:	89 4c 24 50          	mov    DWORD PTR [esp+0x50],ecx
c000e9c6:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000e9ca:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c000e9cd:	83 c4 2c             	add    esp,0x2c
c000e9d0:	5b                   	pop    ebx
c000e9d1:	5e                   	pop    esi
c000e9d2:	5f                   	pop    edi
c000e9d3:	5d                   	pop    ebp
c000e9d4:	ff e0                	jmp    eax
c000e9d6:	66 90                	xchg   ax,ax
c000e9d8:	83 c4 1c             	add    esp,0x1c
c000e9db:	5b                   	pop    ebx
c000e9dc:	5e                   	pop    esi
c000e9dd:	5f                   	pop    edi
c000e9de:	5d                   	pop    ebp
c000e9df:	c3                   	ret    

c000e9e0 <Video::putrect(int, int, int, int, unsigned int)>:
c000e9e0:	55                   	push   ebp
c000e9e1:	57                   	push   edi
c000e9e2:	56                   	push   esi
c000e9e3:	53                   	push   ebx
c000e9e4:	83 ec 1c             	sub    esp,0x1c
c000e9e7:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000e9eb:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e9ef:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c000e9f3:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c000e9f7:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000e9fb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e9ff:	01 df                	add    edi,ebx
c000ea01:	39 fb                	cmp    ebx,edi
c000ea03:	7d 1f                	jge    c000ea24 <Video::putrect(int, int, int, int, unsigned int)+0x44>
c000ea05:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000ea09:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c000ea0d:	7d 12                	jge    c000ea21 <Video::putrect(int, int, int, int, unsigned int)+0x41>
c000ea0f:	8b 16                	mov    edx,DWORD PTR [esi]
c000ea11:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ea15:	53                   	push   ebx
c000ea16:	55                   	push   ebp
c000ea17:	45                   	inc    ebp
c000ea18:	56                   	push   esi
c000ea19:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000ea1c:	83 c4 10             	add    esp,0x10
c000ea1f:	eb e8                	jmp    c000ea09 <Video::putrect(int, int, int, int, unsigned int)+0x29>
c000ea21:	43                   	inc    ebx
c000ea22:	eb dd                	jmp    c000ea01 <Video::putrect(int, int, int, int, unsigned int)+0x21>
c000ea24:	83 c4 1c             	add    esp,0x1c
c000ea27:	5b                   	pop    ebx
c000ea28:	5e                   	pop    esi
c000ea29:	5f                   	pop    edi
c000ea2a:	5d                   	pop    ebp
c000ea2b:	c3                   	ret    

c000ea2c <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c000ea2c:	55                   	push   ebp
c000ea2d:	57                   	push   edi
c000ea2e:	31 ff                	xor    edi,edi
c000ea30:	56                   	push   esi
c000ea31:	53                   	push   ebx
c000ea32:	83 ec 1c             	sub    esp,0x1c
c000ea35:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c000ea39:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000ea3d:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c000ea44:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c000ea49:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ea4d:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c000ea51:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000ea55:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c000ea58:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000ea5c:	01 f9                	add    ecx,edi
c000ea5e:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c000ea62:	7d 2f                	jge    c000ea93 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c000ea64:	31 f6                	xor    esi,esi
c000ea66:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000ea6a:	01 f2                	add    edx,esi
c000ea6c:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c000ea70:	7d 1a                	jge    c000ea8c <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c000ea72:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000ea75:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c000ea78:	46                   	inc    esi
c000ea79:	51                   	push   ecx
c000ea7a:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000ea7e:	52                   	push   edx
c000ea7f:	55                   	push   ebp
c000ea80:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000ea83:	83 c4 10             	add    esp,0x10
c000ea86:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000ea8a:	eb da                	jmp    c000ea66 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c000ea8c:	47                   	inc    edi
c000ea8d:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c000ea91:	eb c5                	jmp    c000ea58 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c000ea93:	83 c4 1c             	add    esp,0x1c
c000ea96:	5b                   	pop    ebx
c000ea97:	5e                   	pop    esi
c000ea98:	5f                   	pop    edi
c000ea99:	5d                   	pop    ebp
c000ea9a:	c3                   	ret    
c000ea9b:	90                   	nop

c000ea9c <Video::blit(unsigned int*, int, int, int, int)>:
c000ea9c:	55                   	push   ebp
c000ea9d:	57                   	push   edi
c000ea9e:	56                   	push   esi
c000ea9f:	53                   	push   ebx
c000eaa0:	83 ec 1c             	sub    esp,0x1c
c000eaa3:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000eaa7:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000eaab:	85 c0                	test   eax,eax
c000eaad:	79 02                	jns    c000eab1 <Video::blit(unsigned int*, int, int, int, int)+0x15>
c000eaaf:	31 c0                	xor    eax,eax
c000eab1:	c1 e0 02             	shl    eax,0x2
c000eab4:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000eab8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000eabc:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000eac0:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c000eac4:	39 d8                	cmp    eax,ebx
c000eac6:	7e 49                	jle    c000eb11 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c000eac8:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c000eace:	7c 41                	jl     c000eb11 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c000ead0:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c000ead4:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000ead8:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000eadc:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c000eae0:	39 f9                	cmp    ecx,edi
c000eae2:	7e 22                	jle    c000eb06 <Video::blit(unsigned int*, int, int, int, int)+0x6a>
c000eae4:	83 c5 04             	add    ebp,0x4
c000eae7:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c000eaed:	7c 14                	jl     c000eb03 <Video::blit(unsigned int*, int, int, int, int)+0x67>
c000eaef:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000eaf1:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c000eaf4:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000eaf8:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000eafc:	56                   	push   esi
c000eafd:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c000eb00:	83 c4 10             	add    esp,0x10
c000eb03:	47                   	inc    edi
c000eb04:	eb d2                	jmp    c000ead8 <Video::blit(unsigned int*, int, int, int, int)+0x3c>
c000eb06:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000eb0a:	43                   	inc    ebx
c000eb0b:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c000eb0f:	eb ab                	jmp    c000eabc <Video::blit(unsigned int*, int, int, int, int)+0x20>
c000eb11:	83 c4 1c             	add    esp,0x1c
c000eb14:	5b                   	pop    ebx
c000eb15:	5e                   	pop    esi
c000eb16:	5f                   	pop    edi
c000eb17:	5d                   	pop    ebp
c000eb18:	c3                   	ret    
c000eb19:	90                   	nop

c000eb1a <Video::clearScreen(unsigned int)>:
c000eb1a:	57                   	push   edi
c000eb1b:	56                   	push   esi
c000eb1c:	53                   	push   ebx
c000eb1d:	31 db                	xor    ebx,ebx
c000eb1f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000eb23:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c000eb29:	7e 1f                	jle    c000eb4a <Video::clearScreen(unsigned int)+0x30>
c000eb2b:	31 ff                	xor    edi,edi
c000eb2d:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c000eb33:	7e 12                	jle    c000eb47 <Video::clearScreen(unsigned int)+0x2d>
c000eb35:	8b 06                	mov    eax,DWORD PTR [esi]
c000eb37:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000eb3b:	53                   	push   ebx
c000eb3c:	57                   	push   edi
c000eb3d:	47                   	inc    edi
c000eb3e:	56                   	push   esi
c000eb3f:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000eb42:	83 c4 10             	add    esp,0x10
c000eb45:	eb e6                	jmp    c000eb2d <Video::clearScreen(unsigned int)+0x13>
c000eb47:	43                   	inc    ebx
c000eb48:	eb d9                	jmp    c000eb23 <Video::clearScreen(unsigned int)+0x9>
c000eb4a:	5b                   	pop    ebx
c000eb4b:	5e                   	pop    esi
c000eb4c:	5f                   	pop    edi
c000eb4d:	c3                   	ret    

c000eb4e <Video::putpixel(int, int, unsigned int)>:
c000eb4e:	c7 44 24 04 e8 1d 02 c0 	mov    DWORD PTR [esp+0x4],0xc0021de8
c000eb56:	e9 d0 2a 00 00       	jmp    c001162b <KePanic(char const*)>
c000eb5b:	90                   	nop

c000eb5c <Video::readPixelApprox(int, int)>:
c000eb5c:	83 ec 18             	sub    esp,0x18
c000eb5f:	68 09 1e 02 c0       	push   0xc0021e09
c000eb64:	e8 c2 2a 00 00       	call   c001162b <KePanic(char const*)>
c000eb69:	31 c0                	xor    eax,eax
c000eb6b:	83 c4 1c             	add    esp,0x1c
c000eb6e:	c3                   	ret    
c000eb6f:	90                   	nop

c000eb70 <Video::Video(char const*)>:
c000eb70:	83 ec 0c             	sub    esp,0xc
c000eb73:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eb77:	83 ec 08             	sub    esp,0x8
c000eb7a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000eb7e:	50                   	push   eax
c000eb7f:	e8 e6 df ff ff       	call   c000cb6a <Device::Device(char const*)>
c000eb84:	83 c4 10             	add    esp,0x10
c000eb87:	ba 84 1e 02 c0       	mov    edx,0xc0021e84
c000eb8c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eb90:	89 10                	mov    DWORD PTR [eax],edx
c000eb92:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eb96:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c000eba0:	90                   	nop
c000eba1:	83 c4 0c             	add    esp,0xc
c000eba4:	c3                   	ret    
c000eba5:	90                   	nop

c000eba6 <Video::~Video()>:
c000eba6:	83 ec 0c             	sub    esp,0xc
c000eba9:	ba 84 1e 02 c0       	mov    edx,0xc0021e84
c000ebae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ebb2:	89 10                	mov    DWORD PTR [eax],edx
c000ebb4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ebb8:	83 ec 0c             	sub    esp,0xc
c000ebbb:	50                   	push   eax
c000ebbc:	e8 13 dd ff ff       	call   c000c8d4 <Device::~Device()>
c000ebc1:	83 c4 10             	add    esp,0x10
c000ebc4:	90                   	nop
c000ebc5:	83 c4 0c             	add    esp,0xc
c000ebc8:	c3                   	ret    
c000ebc9:	90                   	nop

c000ebca <Video::~Video()>:
c000ebca:	83 ec 0c             	sub    esp,0xc
c000ebcd:	83 ec 0c             	sub    esp,0xc
c000ebd0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ebd4:	e8 cd ff ff ff       	call   c000eba6 <Video::~Video()>
c000ebd9:	83 c4 10             	add    esp,0x10
c000ebdc:	83 ec 08             	sub    esp,0x8
c000ebdf:	68 64 01 00 00       	push   0x164
c000ebe4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ebe8:	e8 2b bc ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c000ebed:	83 c4 10             	add    esp,0x10
c000ebf0:	83 c4 0c             	add    esp,0xc
c000ebf3:	c3                   	ret    

c000ebf4 <Video::isMonochrome()>:
c000ebf4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ebf8:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c000ebfe:	c3                   	ret    
c000ebff:	90                   	nop

c000ec00 <Video::getWidth()>:
c000ec00:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ec04:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000ec0a:	c3                   	ret    
c000ec0b:	90                   	nop

c000ec0c <Video::getHeight()>:
c000ec0c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ec10:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000ec16:	c3                   	ret    
c000ec17:	90                   	nop

c000ec18 <Video::drawCursor(int, int, unsigned int*, int)>:
c000ec18:	55                   	push   ebp
c000ec19:	57                   	push   edi
c000ec1a:	56                   	push   esi
c000ec1b:	53                   	push   ebx
c000ec1c:	83 ec 2c             	sub    esp,0x2c
c000ec1f:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000ec23:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000ec27:	83 f8 01             	cmp    eax,0x1
c000ec2a:	19 c9                	sbb    ecx,ecx
c000ec2c:	31 db                	xor    ebx,ebx
c000ec2e:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000ec32:	89 cd                	mov    ebp,ecx
c000ec34:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c000ec3c:	f7 d5                	not    ebp
c000ec3e:	81 e5 ff ff ff 00    	and    ebp,0xffffff
c000ec44:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000ec48:	01 d8                	add    eax,ebx
c000ec4a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000ec4e:	56                   	push   esi
c000ec4f:	e8 b8 ff ff ff       	call   c000ec0c <Video::getHeight()>
c000ec54:	59                   	pop    ecx
c000ec55:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000ec59:	7e 70                	jle    c000eccb <Video::drawCursor(int, int, unsigned int*, int)+0xb3>
c000ec5b:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000ec5f:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c000ec63:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c000ec66:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000ec6a:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000ec6e:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c000ec75:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ec79:	89 f8                	mov    eax,edi
c000ec7b:	83 c0 20             	add    eax,0x20
c000ec7e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000ec82:	56                   	push   esi
c000ec83:	e8 78 ff ff ff       	call   c000ec00 <Video::getWidth()>
c000ec88:	5a                   	pop    edx
c000ec89:	39 c7                	cmp    edi,eax
c000ec8b:	7d 34                	jge    c000ecc1 <Video::drawCursor(int, int, unsigned int*, int)+0xa9>
c000ec8d:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c000ec92:	74 05                	je     c000ec99 <Video::drawCursor(int, int, unsigned int*, int)+0x81>
c000ec94:	8b 06                	mov    eax,DWORD PTR [esi]
c000ec96:	55                   	push   ebp
c000ec97:	eb 0d                	jmp    c000eca6 <Video::drawCursor(int, int, unsigned int*, int)+0x8e>
c000ec99:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c000ec9e:	74 12                	je     c000ecb2 <Video::drawCursor(int, int, unsigned int*, int)+0x9a>
c000eca0:	8b 06                	mov    eax,DWORD PTR [esi]
c000eca2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000eca6:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000ecaa:	57                   	push   edi
c000ecab:	56                   	push   esi
c000ecac:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000ecaf:	83 c4 10             	add    esp,0x10
c000ecb2:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c000ecb6:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c000ecba:	47                   	inc    edi
c000ecbb:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c000ecbf:	75 c1                	jne    c000ec82 <Video::drawCursor(int, int, unsigned int*, int)+0x6a>
c000ecc1:	43                   	inc    ebx
c000ecc2:	83 fb 20             	cmp    ebx,0x20
c000ecc5:	0f 85 79 ff ff ff    	jne    c000ec44 <Video::drawCursor(int, int, unsigned int*, int)+0x2c>
c000eccb:	83 c4 2c             	add    esp,0x2c
c000ecce:	5b                   	pop    ebx
c000eccf:	5e                   	pop    esi
c000ecd0:	5f                   	pop    edi
c000ecd1:	5d                   	pop    ebp
c000ecd2:	c3                   	ret    
c000ecd3:	90                   	nop

c000ecd4 <Video::tgaParse(unsigned char*, int, int*, int*)>:
c000ecd4:	55                   	push   ebp
c000ecd5:	57                   	push   edi
c000ecd6:	56                   	push   esi
c000ecd7:	53                   	push   ebx
c000ecd8:	83 ec 28             	sub    esp,0x28
c000ecdb:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000ecdf:	0f b6 43 0c          	movzx  eax,BYTE PTR [ebx+0xc]
c000ece3:	0f b6 73 0d          	movzx  esi,BYTE PTR [ebx+0xd]
c000ece7:	0f b6 53 0e          	movzx  edx,BYTE PTR [ebx+0xe]
c000eceb:	c1 e6 08             	shl    esi,0x8
c000ecee:	01 c6                	add    esi,eax
c000ecf0:	0f b6 43 0f          	movzx  eax,BYTE PTR [ebx+0xf]
c000ecf4:	c1 e0 08             	shl    eax,0x8
c000ecf7:	01 d0                	add    eax,edx
c000ecf9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000ecfd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ed01:	0f af c6             	imul   eax,esi
c000ed04:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c000ed0b:	50                   	push   eax
c000ed0c:	e8 a5 8d ff ff       	call   c0007ab6 <malloc>
c000ed11:	83 c4 10             	add    esp,0x10
c000ed14:	89 c7                	mov    edi,eax
c000ed16:	85 c0                	test   eax,eax
c000ed18:	75 10                	jne    c000ed2a <Video::tgaParse(unsigned char*, int, int*, int*)+0x56>
c000ed1a:	83 ec 0c             	sub    esp,0xc
c000ed1d:	68 34 1e 02 c0       	push   0xc0021e34
c000ed22:	e8 04 29 00 00       	call   c001162b <KePanic(char const*)>
c000ed27:	83 c4 10             	add    esp,0x10
c000ed2a:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000ed2e:	ba 12 00 00 00       	mov    edx,0x12
c000ed33:	85 c0                	test   eax,eax
c000ed35:	74 11                	je     c000ed48 <Video::tgaParse(unsigned char*, int, int*, int*)+0x74>
c000ed37:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c000ed3b:	0f b7 4b 05          	movzx  ecx,WORD PTR [ebx+0x5]
c000ed3f:	c1 fa 03             	sar    edx,0x3
c000ed42:	0f af d1             	imul   edx,ecx
c000ed45:	83 c2 12             	add    edx,0x12
c000ed48:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c000ed4c:	74 04                	je     c000ed52 <Video::tgaParse(unsigned char*, int, int*, int*)+0x7e>
c000ed4e:	85 f6                	test   esi,esi
c000ed50:	75 12                	jne    c000ed64 <Video::tgaParse(unsigned char*, int, int*, int*)+0x90>
c000ed52:	83 ec 0c             	sub    esp,0xc
c000ed55:	68 44 1e 02 c0       	push   0xc0021e44
c000ed5a:	e8 e6 bb ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000ed5f:	e9 b8 00 00 00       	jmp    c000ee1c <Video::tgaParse(unsigned char*, int, int*, int*)+0x148>
c000ed64:	0f b6 4b 02          	movzx  ecx,BYTE PTR [ebx+0x2]
c000ed68:	83 f9 02             	cmp    ecx,0x2
c000ed6b:	0f 85 96 00 00 00    	jne    c000ee07 <Video::tgaParse(unsigned char*, int, int*, int*)+0x133>
c000ed71:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c000ed76:	75 0e                	jne    c000ed86 <Video::tgaParse(unsigned char*, int, int*, int*)+0xb2>
c000ed78:	85 c0                	test   eax,eax
c000ed7a:	75 0a                	jne    c000ed86 <Video::tgaParse(unsigned char*, int, int*, int*)+0xb2>
c000ed7c:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000ed7f:	83 e8 18             	sub    eax,0x18
c000ed82:	a8 f7                	test   al,0xf7
c000ed84:	74 0a                	je     c000ed90 <Video::tgaParse(unsigned char*, int, int*, int*)+0xbc>
c000ed86:	83 ec 0c             	sub    esp,0xc
c000ed89:	68 59 1e 02 c0       	push   0xc0021e59
c000ed8e:	eb 7f                	jmp    c000ee0f <Video::tgaParse(unsigned char*, int, int*, int*)+0x13b>
c000ed90:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000ed98:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c000eda0:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c000eda4:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000edac:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c000edb0:	75 0c                	jne    c000edbe <Video::tgaParse(unsigned char*, int, int*, int*)+0xea>
c000edb2:	0f b6 44 13 03       	movzx  eax,BYTE PTR [ebx+edx*1+0x3]
c000edb7:	c1 e0 18             	shl    eax,0x18
c000edba:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000edbe:	45                   	inc    ebp
c000edbf:	0f b6 4c 13 02       	movzx  ecx,BYTE PTR [ebx+edx*1+0x2]
c000edc4:	c1 e1 10             	shl    ecx,0x10
c000edc7:	89 c8                	mov    eax,ecx
c000edc9:	0f b6 4c 13 01       	movzx  ecx,BYTE PTR [ebx+edx*1+0x1]
c000edce:	c1 e1 08             	shl    ecx,0x8
c000edd1:	09 c1                	or     ecx,eax
c000edd3:	0f b6 04 13          	movzx  eax,BYTE PTR [ebx+edx*1]
c000edd7:	09 c1                	or     ecx,eax
c000edd9:	0b 4c 24 08          	or     ecx,DWORD PTR [esp+0x8]
c000eddd:	89 4c af fc          	mov    DWORD PTR [edi+ebp*4-0x4],ecx
c000ede1:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c000ede5:	c1 f8 03             	sar    eax,0x3
c000ede8:	01 c2                	add    edx,eax
c000edea:	89 e8                	mov    eax,ebp
c000edec:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c000edf0:	39 c6                	cmp    esi,eax
c000edf2:	7f b0                	jg     c000eda4 <Video::tgaParse(unsigned char*, int, int*, int*)+0xd0>
c000edf4:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000edf8:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000edfc:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c000edff:	7e 22                	jle    c000ee23 <Video::tgaParse(unsigned char*, int, int*, int*)+0x14f>
c000ee01:	89 6c 24 04          	mov    DWORD PTR [esp+0x4],ebp
c000ee05:	eb 99                	jmp    c000eda0 <Video::tgaParse(unsigned char*, int, int*, int*)+0xcc>
c000ee07:	50                   	push   eax
c000ee08:	50                   	push   eax
c000ee09:	51                   	push   ecx
c000ee0a:	68 67 1e 02 c0       	push   0xc0021e67
c000ee0f:	e8 31 bb ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000ee14:	89 3c 24             	mov    DWORD PTR [esp],edi
c000ee17:	e8 aa 8c ff ff       	call   c0007ac6 <free>
c000ee1c:	83 c4 10             	add    esp,0x10
c000ee1f:	31 ff                	xor    edi,edi
c000ee21:	eb 0f                	jmp    c000ee32 <Video::tgaParse(unsigned char*, int, int*, int*)+0x15e>
c000ee23:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000ee27:	89 30                	mov    DWORD PTR [eax],esi
c000ee29:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ee2d:	8b 34 24             	mov    esi,DWORD PTR [esp]
c000ee30:	89 30                	mov    DWORD PTR [eax],esi
c000ee32:	83 c4 1c             	add    esp,0x1c
c000ee35:	89 f8                	mov    eax,edi
c000ee37:	5b                   	pop    ebx
c000ee38:	5e                   	pop    esi
c000ee39:	5f                   	pop    edi
c000ee3a:	5d                   	pop    ebp
c000ee3b:	c3                   	ret    

c000ee3c <Video::putTGA(int, int, unsigned char*, int)>:
c000ee3c:	55                   	push   ebp
c000ee3d:	57                   	push   edi
c000ee3e:	56                   	push   esi
c000ee3f:	53                   	push   ebx
c000ee40:	83 ec 28             	sub    esp,0x28
c000ee43:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c000ee47:	8d 44 24 18          	lea    eax,[esp+0x18]
c000ee4b:	50                   	push   eax
c000ee4c:	8d 44 24 18          	lea    eax,[esp+0x18]
c000ee50:	50                   	push   eax
c000ee51:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000ee55:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000ee59:	56                   	push   esi
c000ee5a:	e8 75 fe ff ff       	call   c000ecd4 <Video::tgaParse(unsigned char*, int, int*, int*)>
c000ee5f:	83 c4 20             	add    esp,0x20
c000ee62:	85 c0                	test   eax,eax
c000ee64:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000ee68:	74 35                	je     c000ee9f <Video::putTGA(int, int, unsigned char*, int)+0x63>
c000ee6a:	89 c7                	mov    edi,eax
c000ee6c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000ee70:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000ee74:	39 d8                	cmp    eax,ebx
c000ee76:	7e 27                	jle    c000ee9f <Video::putTGA(int, int, unsigned char*, int)+0x63>
c000ee78:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000ee7c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000ee80:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000ee84:	39 e8                	cmp    eax,ebp
c000ee86:	7e 14                	jle    c000ee9c <Video::putTGA(int, int, unsigned char*, int)+0x60>
c000ee88:	8b 06                	mov    eax,DWORD PTR [esi]
c000ee8a:	83 c7 04             	add    edi,0x4
c000ee8d:	ff 77 fc             	push   DWORD PTR [edi-0x4]
c000ee90:	53                   	push   ebx
c000ee91:	55                   	push   ebp
c000ee92:	45                   	inc    ebp
c000ee93:	56                   	push   esi
c000ee94:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000ee97:	83 c4 10             	add    esp,0x10
c000ee9a:	eb e0                	jmp    c000ee7c <Video::putTGA(int, int, unsigned char*, int)+0x40>
c000ee9c:	43                   	inc    ebx
c000ee9d:	eb cd                	jmp    c000ee6c <Video::putTGA(int, int, unsigned char*, int)+0x30>
c000ee9f:	83 c4 1c             	add    esp,0x1c
c000eea2:	5b                   	pop    ebx
c000eea3:	5e                   	pop    esi
c000eea4:	5f                   	pop    edi
c000eea5:	5d                   	pop    ebp
c000eea6:	c3                   	ret    
c000eea7:	90                   	nop

c000eea8 <ACPI::close(int, int, void*)>:
c000eea8:	83 ec 1c             	sub    esp,0x1c
c000eeab:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c000eeb3:	74 0b                	je     c000eec0 <ACPI::close(int, int, void*)+0x18>
c000eeb5:	b8 00 00 00 00       	mov    eax,0x0
c000eeba:	e9 99 00 00 00       	jmp    c000ef58 <ACPI::close(int, int, void*)+0xb0>
c000eebf:	90                   	nop
c000eec0:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c000eec5:	75 29                	jne    c000eef0 <ACPI::close(int, int, void*)+0x48>
c000eec7:	a1 08 b9 02 c0       	mov    eax,ds:0xc002b908
c000eecc:	85 c0                	test   eax,eax
c000eece:	74 08                	je     c000eed8 <ACPI::close(int, int, void*)+0x30>
c000eed0:	a1 08 b9 02 c0       	mov    eax,ds:0xc002b908
c000eed5:	ff d0                	call   eax
c000eed7:	90                   	nop
c000eed8:	83 ec 0c             	sub    esp,0xc
c000eedb:	68 c8 1e 02 c0       	push   0xc0021ec8
c000eee0:	e8 46 27 00 00       	call   c001162b <KePanic(char const*)>
c000eee5:	83 c4 10             	add    esp,0x10
c000eee8:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000eeed:	eb 69                	jmp    c000ef58 <ACPI::close(int, int, void*)+0xb0>
c000eeef:	90                   	nop
c000eef0:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c000eef5:	75 59                	jne    c000ef50 <ACPI::close(int, int, void*)+0xa8>
c000eef7:	a1 04 b9 02 c0       	mov    eax,ds:0xc002b904
c000eefc:	85 c0                	test   eax,eax
c000eefe:	74 08                	je     c000ef08 <ACPI::close(int, int, void*)+0x60>
c000ef00:	a1 04 b9 02 c0       	mov    eax,ds:0xc002b904
c000ef05:	ff d0                	call   eax
c000ef07:	90                   	nop
c000ef08:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c000ef0d:	8d 76 00             	lea    esi,[esi+0x0]
c000ef10:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c000ef15:	83 e0 02             	and    eax,0x2
c000ef18:	74 1e                	je     c000ef38 <ACPI::close(int, int, void*)+0x90>
c000ef1a:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c000ef21:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ef25:	89 c2                	mov    edx,eax
c000ef27:	ec                   	in     al,dx
c000ef28:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000ef2c:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c000ef30:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000ef34:	eb da                	jmp    c000ef10 <ACPI::close(int, int, void*)+0x68>
c000ef36:	66 90                	xchg   ax,ax
c000ef38:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c000ef3f:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c000ef44:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c000ef48:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ef4c:	ee                   	out    dx,al
c000ef4d:	8d 76 00             	lea    esi,[esi+0x0]
c000ef50:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000ef55:	8d 76 00             	lea    esi,[esi+0x0]
c000ef58:	83 c4 1c             	add    esp,0x1c
c000ef5b:	c3                   	ret    

c000ef5c <findRSDP()>:
c000ef5c:	83 ec 1c             	sub    esp,0x1c
c000ef5f:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000ef64:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000ef6a:	83 e0 04             	and    eax,0x4
c000ef6d:	0f b6 c0             	movzx  eax,al
c000ef70:	85 c0                	test   eax,eax
c000ef72:	75 08                	jne    c000ef7c <findRSDP()+0x20>
c000ef74:	b8 00 00 00 00       	mov    eax,0x0
c000ef79:	eb 75                	jmp    c000eff0 <findRSDP()+0x94>
c000ef7b:	90                   	nop
c000ef7c:	a1 e8 6e 02 c0       	mov    eax,ds:0xc0026ee8
c000ef81:	3d ff 07 00 00       	cmp    eax,0x7ff
c000ef86:	7f 1c                	jg     c000efa4 <findRSDP()+0x48>
c000ef88:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000ef8d:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000ef93:	83 e2 fb             	and    edx,0xfffffffb
c000ef96:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000ef9c:	b8 00 00 00 00       	mov    eax,0x0
c000efa1:	eb 4d                	jmp    c000eff0 <findRSDP()+0x94>
c000efa3:	90                   	nop
c000efa4:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c000efac:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c000efb4:	77 32                	ja     c000efe8 <findRSDP()+0x8c>
c000efb6:	83 ec 04             	sub    esp,0x4
c000efb9:	6a 08                	push   0x8
c000efbb:	68 63 1f 02 c0       	push   0xc0021f63
c000efc0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000efc4:	e8 b7 13 ff ff       	call   c0000380 <memcmp>
c000efc9:	83 c4 10             	add    esp,0x10
c000efcc:	85 c0                	test   eax,eax
c000efce:	0f 94 c0             	sete   al
c000efd1:	0f b6 c0             	movzx  eax,al
c000efd4:	85 c0                	test   eax,eax
c000efd6:	74 08                	je     c000efe0 <findRSDP()+0x84>
c000efd8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000efdc:	eb 12                	jmp    c000eff0 <findRSDP()+0x94>
c000efde:	66 90                	xchg   ax,ax
c000efe0:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c000efe5:	eb c5                	jmp    c000efac <findRSDP()+0x50>
c000efe7:	90                   	nop
c000efe8:	b8 00 00 00 00       	mov    eax,0x0
c000efed:	8d 76 00             	lea    esi,[esi+0x0]
c000eff0:	83 c4 1c             	add    esp,0x1c
c000eff3:	c3                   	ret    

c000eff4 <loadACPITables(unsigned char*)>:
c000eff4:	57                   	push   edi
c000eff5:	56                   	push   esi
c000eff6:	53                   	push   ebx
c000eff7:	83 ec 60             	sub    esp,0x60
c000effa:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000efff:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000f005:	83 e0 04             	and    eax,0x4
c000f008:	0f b6 c0             	movzx  eax,al
c000f00b:	85 c0                	test   eax,eax
c000f00d:	0f 84 41 02 00 00    	je     c000f254 <loadACPITables(unsigned char*)+0x260>
c000f013:	a0 20 bb 02 c0       	mov    al,ds:0xc002bb20
c000f018:	0f b6 c0             	movzx  eax,al
c000f01b:	85 c0                	test   eax,eax
c000f01d:	74 79                	je     c000f098 <loadACPITables(unsigned char*)+0xa4>
c000f01f:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000f023:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000f027:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000f02b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000f02e:	83 e8 24             	sub    eax,0x24
c000f031:	c1 e8 03             	shr    eax,0x3
c000f034:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000f038:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c000f040:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000f044:	3b 44 24 4c          	cmp    eax,DWORD PTR [esp+0x4c]
c000f048:	0f 8d ba 00 00 00    	jge    c000f108 <loadACPITables(unsigned char*)+0x114>
c000f04e:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000f052:	83 c0 24             	add    eax,0x24
c000f055:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000f059:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000f05d:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000f061:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000f065:	c1 e0 03             	shl    eax,0x3
c000f068:	01 44 24 44          	add    DWORD PTR [esp+0x44],eax
c000f06c:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000f070:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000f073:	8b 00                	mov    eax,DWORD PTR [eax]
c000f075:	89 c1                	mov    ecx,eax
c000f077:	a1 0c b9 02 c0       	mov    eax,ds:0xc002b90c
c000f07c:	8d 50 01             	lea    edx,[eax+0x1]
c000f07f:	89 15 0c b9 02 c0    	mov    DWORD PTR ds:0xc002b90c,edx
c000f085:	89 ca                	mov    edx,ecx
c000f087:	89 14 c5 24 b9 02 c0 	mov    DWORD PTR [eax*8-0x3ffd46dc],edx
c000f08e:	83 44 24 5c 01       	add    DWORD PTR [esp+0x5c],0x1
c000f093:	eb ab                	jmp    c000f040 <loadACPITables(unsigned char*)+0x4c>
c000f095:	8d 76 00             	lea    esi,[esi+0x0]
c000f098:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000f09c:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000f0a0:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000f0a4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000f0a7:	83 e8 24             	sub    eax,0x24
c000f0aa:	c1 e8 02             	shr    eax,0x2
c000f0ad:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000f0b1:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c000f0b9:	8d 76 00             	lea    esi,[esi+0x0]
c000f0bc:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000f0c0:	3b 44 24 3c          	cmp    eax,DWORD PTR [esp+0x3c]
c000f0c4:	7d 42                	jge    c000f108 <loadACPITables(unsigned char*)+0x114>
c000f0c6:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000f0ca:	83 c0 24             	add    eax,0x24
c000f0cd:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000f0d1:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000f0d5:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000f0d9:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000f0dd:	c1 e0 02             	shl    eax,0x2
c000f0e0:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c000f0e4:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000f0e8:	8b 08                	mov    ecx,DWORD PTR [eax]
c000f0ea:	a1 0c b9 02 c0       	mov    eax,ds:0xc002b90c
c000f0ef:	8d 50 01             	lea    edx,[eax+0x1]
c000f0f2:	89 15 0c b9 02 c0    	mov    DWORD PTR ds:0xc002b90c,edx
c000f0f8:	89 ca                	mov    edx,ecx
c000f0fa:	89 14 c5 24 b9 02 c0 	mov    DWORD PTR [eax*8-0x3ffd46dc],edx
c000f101:	83 44 24 58 01       	add    DWORD PTR [esp+0x58],0x1
c000f106:	eb b4                	jmp    c000f0bc <loadACPITables(unsigned char*)+0xc8>
c000f108:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000f110:	a1 0c b9 02 c0       	mov    eax,ds:0xc002b90c
c000f115:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c000f119:	0f 8d 39 01 00 00    	jge    c000f258 <loadACPITables(unsigned char*)+0x264>
c000f11f:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000f123:	8b 04 c5 24 b9 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd46dc]
c000f12a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000f12e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f132:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000f136:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f13a:	25 ff 0f 00 00       	and    eax,0xfff
c000f13f:	89 c6                	mov    esi,eax
c000f141:	8b 1d b0 6f 02 c0    	mov    ebx,DWORD PTR ds:0xc0026fb0
c000f147:	83 ec 0c             	sub    esp,0xc
c000f14a:	6a 01                	push   0x1
c000f14c:	e8 bc a4 ff ff       	call   c000960d <Virt::allocateKernelVirtualPages(int)>
c000f151:	83 c4 10             	add    esp,0x10
c000f154:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000f158:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000f15e:	83 ec 0c             	sub    esp,0xc
c000f161:	6a 01                	push   0x1
c000f163:	6a 01                	push   0x1
c000f165:	50                   	push   eax
c000f166:	52                   	push   edx
c000f167:	53                   	push   ebx
c000f168:	e8 ad ad ff ff       	call   c0009f1a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000f16d:	83 c4 20             	add    esp,0x20
c000f170:	09 f0                	or     eax,esi
c000f172:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000f176:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000f17a:	c1 e0 03             	shl    eax,0x3
c000f17d:	05 20 b9 02 c0       	add    eax,0xc002b920
c000f182:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000f186:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f18a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000f18e:	c7 44 24 14 04 00 00 00 	mov    DWORD PTR [esp+0x14],0x4
c000f196:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000f19a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000f19e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f1a2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f1a6:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000f1aa:	89 c6                	mov    esi,eax
c000f1ac:	89 d7                	mov    edi,edx
c000f1ae:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f1b0:	89 c8                	mov    eax,ecx
c000f1b2:	89 fa                	mov    edx,edi
c000f1b4:	89 f3                	mov    ebx,esi
c000f1b6:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000f1ba:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000f1be:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000f1c2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f1c6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000f1c9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000f1cd:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f1d1:	05 00 10 00 00       	add    eax,0x1000
c000f1d6:	c1 e8 0c             	shr    eax,0xc
c000f1d9:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000f1dd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f1e1:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000f1e5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f1e9:	25 ff 0f 00 00       	and    eax,0xfff
c000f1ee:	89 c6                	mov    esi,eax
c000f1f0:	8b 1d b0 6f 02 c0    	mov    ebx,DWORD PTR ds:0xc0026fb0
c000f1f6:	83 ec 0c             	sub    esp,0xc
c000f1f9:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000f1fd:	e8 0b a4 ff ff       	call   c000960d <Virt::allocateKernelVirtualPages(int)>
c000f202:	83 c4 10             	add    esp,0x10
c000f205:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000f209:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000f20f:	83 ec 0c             	sub    esp,0xc
c000f212:	6a 01                	push   0x1
c000f214:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000f218:	50                   	push   eax
c000f219:	52                   	push   edx
c000f21a:	53                   	push   ebx
c000f21b:	e8 fa ac ff ff       	call   c0009f1a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000f220:	83 c4 20             	add    esp,0x20
c000f223:	09 f0                	or     eax,esi
c000f225:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000f229:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f22d:	83 ec 0c             	sub    esp,0xc
c000f230:	50                   	push   eax
c000f231:	e8 f5 a6 ff ff       	call   c000992b <Virt::freeKernelVirtualPages(unsigned long)>
c000f236:	83 c4 10             	add    esp,0x10
c000f239:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000f23d:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000f241:	89 14 c5 24 b9 02 c0 	mov    DWORD PTR [eax*8-0x3ffd46dc],edx
c000f248:	83 44 24 54 01       	add    DWORD PTR [esp+0x54],0x1
c000f24d:	e9 be fe ff ff       	jmp    c000f110 <loadACPITables(unsigned char*)+0x11c>
c000f252:	66 90                	xchg   ax,ax
c000f254:	90                   	nop
c000f255:	8d 76 00             	lea    esi,[esi+0x0]
c000f258:	83 c4 60             	add    esp,0x60
c000f25b:	5b                   	pop    ebx
c000f25c:	5e                   	pop    esi
c000f25d:	5f                   	pop    edi
c000f25e:	c3                   	ret    
c000f25f:	90                   	nop

c000f260 <findRSDT(unsigned char*)>:
c000f260:	57                   	push   edi
c000f261:	56                   	push   esi
c000f262:	53                   	push   ebx
c000f263:	83 ec 50             	sub    esp,0x50
c000f266:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000f26b:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000f271:	83 e0 04             	and    eax,0x4
c000f274:	0f b6 c0             	movzx  eax,al
c000f277:	85 c0                	test   eax,eax
c000f279:	75 0d                	jne    c000f288 <findRSDT(unsigned char*)+0x28>
c000f27b:	b8 00 00 00 00       	mov    eax,0x0
c000f280:	e9 2b 01 00 00       	jmp    c000f3b0 <findRSDT(unsigned char*)+0x150>
c000f285:	8d 76 00             	lea    esi,[esi+0x0]
c000f288:	89 e0                	mov    eax,esp
c000f28a:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000f28e:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f292:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000f296:	c7 44 24 34 24 00 00 00 	mov    DWORD PTR [esp+0x34],0x24
c000f29e:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000f2a2:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000f2a6:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000f2aa:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000f2ae:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000f2b2:	89 c6                	mov    esi,eax
c000f2b4:	89 d7                	mov    edi,edx
c000f2b6:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f2b8:	89 c8                	mov    eax,ecx
c000f2ba:	89 fa                	mov    edx,edi
c000f2bc:	89 f3                	mov    ebx,esi
c000f2be:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c000f2c2:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000f2c6:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000f2ca:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000f2ce:	88 44 24 4b          	mov    BYTE PTR [esp+0x4b],al
c000f2d2:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c000f2da:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f2de:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f2e2:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000f2e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f2ea:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000f2ee:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000f2f2:	25 ff 0f 00 00       	and    eax,0xfff
c000f2f7:	89 c6                	mov    esi,eax
c000f2f9:	8b 1d b0 6f 02 c0    	mov    ebx,DWORD PTR ds:0xc0026fb0
c000f2ff:	83 ec 0c             	sub    esp,0xc
c000f302:	6a 02                	push   0x2
c000f304:	e8 04 a3 ff ff       	call   c000960d <Virt::allocateKernelVirtualPages(int)>
c000f309:	83 c4 10             	add    esp,0x10
c000f30c:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000f310:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000f316:	83 ec 0c             	sub    esp,0xc
c000f319:	6a 01                	push   0x1
c000f31b:	6a 02                	push   0x2
c000f31d:	50                   	push   eax
c000f31e:	52                   	push   edx
c000f31f:	53                   	push   ebx
c000f320:	e8 f5 ab ff ff       	call   c0009f1a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000f325:	83 c4 20             	add    esp,0x20
c000f328:	09 f0                	or     eax,esi
c000f32a:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000f32e:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000f332:	25 ff 0f 00 00       	and    eax,0xfff
c000f337:	89 c6                	mov    esi,eax
c000f339:	8b 1d b0 6f 02 c0    	mov    ebx,DWORD PTR ds:0xc0026fb0
c000f33f:	83 ec 0c             	sub    esp,0xc
c000f342:	6a 02                	push   0x2
c000f344:	e8 c4 a2 ff ff       	call   c000960d <Virt::allocateKernelVirtualPages(int)>
c000f349:	83 c4 10             	add    esp,0x10
c000f34c:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000f350:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000f356:	83 ec 0c             	sub    esp,0xc
c000f359:	6a 01                	push   0x1
c000f35b:	6a 02                	push   0x2
c000f35d:	50                   	push   eax
c000f35e:	52                   	push   edx
c000f35f:	53                   	push   ebx
c000f360:	e8 b5 ab ff ff       	call   c0009f1a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000f365:	83 c4 20             	add    esp,0x20
c000f368:	09 f0                	or     eax,esi
c000f36a:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000f36e:	0f b6 44 24 4b       	movzx  eax,BYTE PTR [esp+0x4b]
c000f373:	85 c0                	test   eax,eax
c000f375:	75 11                	jne    c000f388 <findRSDT(unsigned char*)+0x128>
c000f377:	c6 05 20 bb 02 c0 00 	mov    BYTE PTR ds:0xc002bb20,0x0
c000f37e:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000f382:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000f386:	eb 24                	jmp    c000f3ac <findRSDT(unsigned char*)+0x14c>
c000f388:	0f b6 44 24 4b       	movzx  eax,BYTE PTR [esp+0x4b]
c000f38d:	83 f8 02             	cmp    eax,0x2
c000f390:	75 12                	jne    c000f3a4 <findRSDT(unsigned char*)+0x144>
c000f392:	c6 05 20 bb 02 c0 01 	mov    BYTE PTR ds:0xc002bb20,0x1
c000f399:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000f39d:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000f3a1:	eb 09                	jmp    c000f3ac <findRSDT(unsigned char*)+0x14c>
c000f3a3:	90                   	nop
c000f3a4:	b8 00 00 00 00       	mov    eax,0x0
c000f3a9:	eb 05                	jmp    c000f3b0 <findRSDT(unsigned char*)+0x150>
c000f3ab:	90                   	nop
c000f3ac:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000f3b0:	83 c4 50             	add    esp,0x50
c000f3b3:	5b                   	pop    ebx
c000f3b4:	5e                   	pop    esi
c000f3b5:	5f                   	pop    edi
c000f3b6:	c3                   	ret    
c000f3b7:	90                   	nop

c000f3b8 <findDataTable(unsigned char*, char*)>:
c000f3b8:	83 ec 1c             	sub    esp,0x1c
c000f3bb:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000f3c0:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000f3c6:	83 e0 04             	and    eax,0x4
c000f3c9:	0f b6 c0             	movzx  eax,al
c000f3cc:	85 c0                	test   eax,eax
c000f3ce:	75 08                	jne    c000f3d8 <findDataTable(unsigned char*, char*)+0x20>
c000f3d0:	b8 00 00 00 00       	mov    eax,0x0
c000f3d5:	eb 5d                	jmp    c000f434 <findDataTable(unsigned char*, char*)+0x7c>
c000f3d7:	90                   	nop
c000f3d8:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000f3e0:	a1 0c b9 02 c0       	mov    eax,ds:0xc002b90c
c000f3e5:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c000f3e9:	7d 41                	jge    c000f42c <findDataTable(unsigned char*, char*)+0x74>
c000f3eb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f3ef:	c1 e0 03             	shl    eax,0x3
c000f3f2:	05 20 b9 02 c0       	add    eax,0xc002b920
c000f3f7:	83 ec 04             	sub    esp,0x4
c000f3fa:	6a 04                	push   0x4
c000f3fc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f400:	50                   	push   eax
c000f401:	e8 7a 0f ff ff       	call   c0000380 <memcmp>
c000f406:	83 c4 10             	add    esp,0x10
c000f409:	85 c0                	test   eax,eax
c000f40b:	0f 94 c0             	sete   al
c000f40e:	0f b6 c0             	movzx  eax,al
c000f411:	85 c0                	test   eax,eax
c000f413:	74 0f                	je     c000f424 <findDataTable(unsigned char*, char*)+0x6c>
c000f415:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f419:	8b 04 c5 24 b9 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd46dc]
c000f420:	eb 12                	jmp    c000f434 <findDataTable(unsigned char*, char*)+0x7c>
c000f422:	66 90                	xchg   ax,ax
c000f424:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c000f429:	eb b5                	jmp    c000f3e0 <findDataTable(unsigned char*, char*)+0x28>
c000f42b:	90                   	nop
c000f42c:	b8 00 00 00 00       	mov    eax,0x0
c000f431:	8d 76 00             	lea    esi,[esi+0x0]
c000f434:	83 c4 1c             	add    esp,0x1c
c000f437:	c3                   	ret    

c000f438 <scanMADT()>:
c000f438:	53                   	push   ebx
c000f439:	83 ec 38             	sub    esp,0x38
c000f43c:	a1 d0 6e 02 c0       	mov    eax,ds:0xc0026ed0
c000f441:	25 00 04 00 00       	and    eax,0x400
c000f446:	74 14                	je     c000f45c <scanMADT()+0x24>
c000f448:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000f44d:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000f453:	83 e2 fb             	and    edx,0xfffffffb
c000f456:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000f45c:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000f461:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000f467:	83 e0 04             	and    eax,0x4
c000f46a:	0f b6 c0             	movzx  eax,al
c000f46d:	85 c0                	test   eax,eax
c000f46f:	0f 84 6b 04 00 00    	je     c000f8e0 <scanMADT()+0x4a8>
c000f475:	e8 e2 fa ff ff       	call   c000ef5c <findRSDP()>
c000f47a:	a3 2c bb 02 c0       	mov    ds:0xc002bb2c,eax
c000f47f:	a1 2c bb 02 c0       	mov    eax,ds:0xc002bb2c
c000f484:	85 c0                	test   eax,eax
c000f486:	75 1c                	jne    c000f4a4 <scanMADT()+0x6c>
c000f488:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000f48d:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000f493:	83 e2 fb             	and    edx,0xfffffffb
c000f496:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000f49c:	e9 47 04 00 00       	jmp    c000f8e8 <scanMADT()+0x4b0>
c000f4a1:	8d 76 00             	lea    esi,[esi+0x0]
c000f4a4:	a1 2c bb 02 c0       	mov    eax,ds:0xc002bb2c
c000f4a9:	83 ec 0c             	sub    esp,0xc
c000f4ac:	50                   	push   eax
c000f4ad:	e8 ae fd ff ff       	call   c000f260 <findRSDT(unsigned char*)>
c000f4b2:	83 c4 10             	add    esp,0x10
c000f4b5:	a3 28 bb 02 c0       	mov    ds:0xc002bb28,eax
c000f4ba:	a1 28 bb 02 c0       	mov    eax,ds:0xc002bb28
c000f4bf:	85 c0                	test   eax,eax
c000f4c1:	75 19                	jne    c000f4dc <scanMADT()+0xa4>
c000f4c3:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000f4c8:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000f4ce:	83 e2 fb             	and    edx,0xfffffffb
c000f4d1:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000f4d7:	e9 0c 04 00 00       	jmp    c000f8e8 <scanMADT()+0x4b0>
c000f4dc:	a1 28 bb 02 c0       	mov    eax,ds:0xc002bb28
c000f4e1:	83 ec 0c             	sub    esp,0xc
c000f4e4:	50                   	push   eax
c000f4e5:	e8 0a fb ff ff       	call   c000eff4 <loadACPITables(unsigned char*)>
c000f4ea:	83 c4 10             	add    esp,0x10
c000f4ed:	a1 28 bb 02 c0       	mov    eax,ds:0xc002bb28
c000f4f2:	83 ec 08             	sub    esp,0x8
c000f4f5:	68 6c 1f 02 c0       	push   0xc0021f6c
c000f4fa:	50                   	push   eax
c000f4fb:	e8 b8 fe ff ff       	call   c000f3b8 <findDataTable(unsigned char*, char*)>
c000f500:	83 c4 10             	add    esp,0x10
c000f503:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000f507:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c000f50c:	75 1a                	jne    c000f528 <scanMADT()+0xf0>
c000f50e:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000f513:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000f519:	83 e2 fe             	and    edx,0xfffffffe
c000f51c:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000f522:	e9 c1 03 00 00       	jmp    c000f8e8 <scanMADT()+0x4b0>
c000f527:	90                   	nop
c000f528:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000f530:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f534:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000f537:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c000f53b:	0f 87 a7 03 00 00    	ja     c000f8e8 <scanMADT()+0x4b0>
c000f541:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c000f549:	0f 87 99 03 00 00    	ja     c000f8e8 <scanMADT()+0x4b0>
c000f54f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f553:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000f557:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f55b:	8d 50 01             	lea    edx,[eax+0x1]
c000f55e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f562:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f566:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000f56a:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c000f56e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f572:	8d 50 01             	lea    edx,[eax+0x1]
c000f575:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f579:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f57d:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000f581:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c000f585:	0f b6 44 24 22       	movzx  eax,BYTE PTR [esp+0x22]
c000f58a:	83 f8 02             	cmp    eax,0x2
c000f58d:	0f 86 51 03 00 00    	jbe    c000f8e4 <scanMADT()+0x4ac>
c000f593:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000f598:	85 c0                	test   eax,eax
c000f59a:	75 58                	jne    c000f5f4 <scanMADT()+0x1bc>
c000f59c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f5a0:	8d 50 01             	lea    edx,[eax+0x1]
c000f5a3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f5a7:	8a 15 20 bd 02 c0    	mov    dl,BYTE PTR ds:0xc002bd20
c000f5ad:	0f b6 d2             	movzx  edx,dl
c000f5b0:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000f5b4:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000f5b8:	88 82 60 bd 02 c0    	mov    BYTE PTR [edx-0x3ffd42a0],al
c000f5be:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f5c2:	8d 50 01             	lea    edx,[eax+0x1]
c000f5c5:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f5c9:	8a 15 20 bd 02 c0    	mov    dl,BYTE PTR ds:0xc002bd20
c000f5cf:	8d 4a 01             	lea    ecx,[edx+0x1]
c000f5d2:	88 0d 20 bd 02 c0    	mov    BYTE PTR ds:0xc002bd20,cl
c000f5d8:	0f b6 d2             	movzx  edx,dl
c000f5db:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000f5df:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000f5e3:	88 82 40 bd 02 c0    	mov    BYTE PTR [edx-0x3ffd42c0],al
c000f5e9:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000f5ee:	e9 d9 02 00 00       	jmp    c000f8cc <scanMADT()+0x494>
c000f5f3:	90                   	nop
c000f5f4:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000f5f9:	83 f8 01             	cmp    eax,0x1
c000f5fc:	0f 85 1a 01 00 00    	jne    c000f71c <scanMADT()+0x2e4>
c000f602:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f606:	8d 50 01             	lea    edx,[eax+0x1]
c000f609:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f60d:	8a 15 e0 bb 02 c0    	mov    dl,BYTE PTR ds:0xc002bbe0
c000f613:	0f b6 d2             	movzx  edx,dl
c000f616:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000f61a:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000f61e:	88 82 00 bc 02 c0    	mov    BYTE PTR [edx-0x3ffd4400],al
c000f624:	83 44 24 2c 01       	add    DWORD PTR [esp+0x2c],0x1
c000f629:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f62d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f631:	01 d0                	add    eax,edx
c000f633:	83 c0 2c             	add    eax,0x2c
c000f636:	8a 00                	mov    al,BYTE PTR [eax]
c000f638:	0f b6 d0             	movzx  edx,al
c000f63b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f63f:	8d 48 01             	lea    ecx,[eax+0x1]
c000f642:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f646:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000f64a:	0f b6 c0             	movzx  eax,al
c000f64d:	c1 e0 08             	shl    eax,0x8
c000f650:	89 d1                	mov    ecx,edx
c000f652:	09 c1                	or     ecx,eax
c000f654:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f658:	8d 50 02             	lea    edx,[eax+0x2]
c000f65b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f65f:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000f663:	0f b6 c0             	movzx  eax,al
c000f666:	c1 e0 10             	shl    eax,0x10
c000f669:	09 c1                	or     ecx,eax
c000f66b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f66f:	8d 50 03             	lea    edx,[eax+0x3]
c000f672:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f676:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000f67a:	0f b6 c0             	movzx  eax,al
c000f67d:	c1 e0 18             	shl    eax,0x18
c000f680:	09 c1                	or     ecx,eax
c000f682:	89 ca                	mov    edx,ecx
c000f684:	a0 e0 bb 02 c0       	mov    al,ds:0xc002bbe0
c000f689:	0f b6 c0             	movzx  eax,al
c000f68c:	89 14 85 20 bc 02 c0 	mov    DWORD PTR [eax*4-0x3ffd43e0],edx
c000f693:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000f698:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f69c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f6a0:	01 d0                	add    eax,edx
c000f6a2:	83 c0 2c             	add    eax,0x2c
c000f6a5:	8a 00                	mov    al,BYTE PTR [eax]
c000f6a7:	0f b6 d0             	movzx  edx,al
c000f6aa:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f6ae:	8d 48 01             	lea    ecx,[eax+0x1]
c000f6b1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f6b5:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000f6b9:	0f b6 c0             	movzx  eax,al
c000f6bc:	c1 e0 08             	shl    eax,0x8
c000f6bf:	89 d1                	mov    ecx,edx
c000f6c1:	09 c1                	or     ecx,eax
c000f6c3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f6c7:	8d 50 02             	lea    edx,[eax+0x2]
c000f6ca:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f6ce:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000f6d2:	0f b6 c0             	movzx  eax,al
c000f6d5:	c1 e0 10             	shl    eax,0x10
c000f6d8:	09 c1                	or     ecx,eax
c000f6da:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f6de:	8d 50 03             	lea    edx,[eax+0x3]
c000f6e1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f6e5:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000f6e9:	0f b6 c0             	movzx  eax,al
c000f6ec:	c1 e0 18             	shl    eax,0x18
c000f6ef:	09 c1                	or     ecx,eax
c000f6f1:	89 ca                	mov    edx,ecx
c000f6f3:	a0 e0 bb 02 c0       	mov    al,ds:0xc002bbe0
c000f6f8:	0f b6 c0             	movzx  eax,al
c000f6fb:	89 14 85 a0 bc 02 c0 	mov    DWORD PTR [eax*4-0x3ffd4360],edx
c000f702:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000f707:	a0 e0 bb 02 c0       	mov    al,ds:0xc002bbe0
c000f70c:	83 c0 01             	add    eax,0x1
c000f70f:	a2 e0 bb 02 c0       	mov    ds:0xc002bbe0,al
c000f714:	e9 b3 01 00 00       	jmp    c000f8cc <scanMADT()+0x494>
c000f719:	8d 76 00             	lea    esi,[esi+0x0]
c000f71c:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000f721:	83 f8 02             	cmp    eax,0x2
c000f724:	0f 85 ea 00 00 00    	jne    c000f814 <scanMADT()+0x3dc>
c000f72a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f72e:	8d 50 01             	lea    edx,[eax+0x1]
c000f731:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f735:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f739:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000f73d:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c000f741:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f745:	8d 50 01             	lea    edx,[eax+0x1]
c000f748:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f74c:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f750:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000f754:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c000f758:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f75c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f760:	01 d0                	add    eax,edx
c000f762:	83 c0 2c             	add    eax,0x2c
c000f765:	8a 00                	mov    al,BYTE PTR [eax]
c000f767:	0f b6 d0             	movzx  edx,al
c000f76a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f76e:	8d 48 01             	lea    ecx,[eax+0x1]
c000f771:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f775:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000f779:	0f b6 c0             	movzx  eax,al
c000f77c:	c1 e0 08             	shl    eax,0x8
c000f77f:	89 d1                	mov    ecx,edx
c000f781:	09 c1                	or     ecx,eax
c000f783:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f787:	8d 50 02             	lea    edx,[eax+0x2]
c000f78a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f78e:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000f792:	0f b6 c0             	movzx  eax,al
c000f795:	c1 e0 10             	shl    eax,0x10
c000f798:	09 c1                	or     ecx,eax
c000f79a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f79e:	8d 50 03             	lea    edx,[eax+0x3]
c000f7a1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f7a5:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000f7a9:	0f b6 c0             	movzx  eax,al
c000f7ac:	c1 e0 18             	shl    eax,0x18
c000f7af:	09 c8                	or     eax,ecx
c000f7b1:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000f7b5:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000f7ba:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f7be:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f7c2:	01 d0                	add    eax,edx
c000f7c4:	83 c0 2c             	add    eax,0x2c
c000f7c7:	8a 00                	mov    al,BYTE PTR [eax]
c000f7c9:	0f b6 c0             	movzx  eax,al
c000f7cc:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000f7d0:	8d 4a 01             	lea    ecx,[edx+0x1]
c000f7d3:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f7d7:	8a 54 0a 2c          	mov    dl,BYTE PTR [edx+ecx*1+0x2c]
c000f7db:	0f b6 d2             	movzx  edx,dl
c000f7de:	c1 e2 08             	shl    edx,0x8
c000f7e1:	09 d0                	or     eax,edx
c000f7e3:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c000f7e8:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c000f7ed:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c000f7f2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f7f6:	88 90 68 36 02 c0    	mov    BYTE PTR [eax-0x3ffdc998],dl
c000f7fc:	0f b6 54 24 20       	movzx  edx,BYTE PTR [esp+0x20]
c000f801:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c000f806:	66 89 84 12 c0 bb 02 c0 	mov    WORD PTR [edx+edx*1-0x3ffd4440],ax
c000f80e:	e9 b9 00 00 00       	jmp    c000f8cc <scanMADT()+0x494>
c000f813:	90                   	nop
c000f814:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000f819:	83 f8 04             	cmp    eax,0x4
c000f81c:	0f 85 9a 00 00 00    	jne    c000f8bc <scanMADT()+0x484>
c000f822:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f826:	8d 50 01             	lea    edx,[eax+0x1]
c000f829:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f82d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f831:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000f835:	0f b6 c0             	movzx  eax,al
c000f838:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000f83c:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f840:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f844:	01 d0                	add    eax,edx
c000f846:	83 c0 2c             	add    eax,0x2c
c000f849:	8a 00                	mov    al,BYTE PTR [eax]
c000f84b:	0f b6 d0             	movzx  edx,al
c000f84e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f852:	8d 48 01             	lea    ecx,[eax+0x1]
c000f855:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f859:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000f85d:	0f b6 c0             	movzx  eax,al
c000f860:	c1 e0 08             	shl    eax,0x8
c000f863:	09 d0                	or     eax,edx
c000f865:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000f869:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c000f86e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f872:	8d 50 01             	lea    edx,[eax+0x1]
c000f875:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f879:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f87d:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000f881:	0f b6 c0             	movzx  eax,al
c000f884:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000f888:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f88c:	c1 e0 08             	shl    eax,0x8
c000f88f:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000f893:	89 c1                	mov    ecx,eax
c000f895:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f899:	c1 e0 18             	shl    eax,0x18
c000f89c:	89 c3                	mov    ebx,eax
c000f89e:	a1 30 bb 02 c0       	mov    eax,ds:0xc002bb30
c000f8a3:	8d 50 01             	lea    edx,[eax+0x1]
c000f8a6:	89 15 30 bb 02 c0    	mov    DWORD PTR ds:0xc002bb30,edx
c000f8ac:	09 d9                	or     ecx,ebx
c000f8ae:	89 ca                	mov    edx,ecx
c000f8b0:	89 14 85 40 bb 02 c0 	mov    DWORD PTR [eax*4-0x3ffd44c0],edx
c000f8b7:	eb 13                	jmp    c000f8cc <scanMADT()+0x494>
c000f8b9:	8d 76 00             	lea    esi,[esi+0x0]
c000f8bc:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000f8c1:	83 f8 05             	cmp    eax,0x5
c000f8c4:	75 06                	jne    c000f8cc <scanMADT()+0x494>
c000f8c6:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c000f8cb:	90                   	nop
c000f8cc:	0f b6 54 24 22       	movzx  edx,BYTE PTR [esp+0x22]
c000f8d1:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000f8d5:	01 d0                	add    eax,edx
c000f8d7:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000f8db:	e9 50 fc ff ff       	jmp    c000f530 <scanMADT()+0xf8>
c000f8e0:	90                   	nop
c000f8e1:	eb 05                	jmp    c000f8e8 <scanMADT()+0x4b0>
c000f8e3:	90                   	nop
c000f8e4:	90                   	nop
c000f8e5:	8d 76 00             	lea    esi,[esi+0x0]
c000f8e8:	83 c4 38             	add    esp,0x38
c000f8eb:	5b                   	pop    ebx
c000f8ec:	c3                   	ret    
c000f8ed:	90                   	nop
c000f8ee:	66 90                	xchg   ax,ax

c000f8f0 <ACPI::ACPI()>:
c000f8f0:	83 ec 0c             	sub    esp,0xc
c000f8f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f8f7:	83 ec 08             	sub    esp,0x8
c000f8fa:	68 71 1f 02 c0       	push   0xc0021f71
c000f8ff:	50                   	push   eax
c000f900:	e8 65 d2 ff ff       	call   c000cb6a <Device::Device(char const*)>
c000f905:	83 c4 10             	add    esp,0x10
c000f908:	ba c4 20 02 c0       	mov    edx,0xc00220c4
c000f90d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f911:	89 10                	mov    DWORD PTR [eax],edx
c000f913:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f917:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c000f91e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f922:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c000f92c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f930:	c7 80 60 12 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1260],0x0
c000f93a:	e8 f9 fa ff ff       	call   c000f438 <scanMADT()>
c000f93f:	90                   	nop
c000f940:	83 c4 0c             	add    esp,0xc
c000f943:	c3                   	ret    

c000f944 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c000f944:	83 ec 2c             	sub    esp,0x2c
c000f947:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000f94b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000f94f:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000f953:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c000f957:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c000f95c:	88 d0                	mov    al,dl
c000f95e:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000f962:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000f967:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000f96f:	90                   	nop
c000f970:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000f974:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000f97a:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c000f97e:	0f 8d b0 00 00 00    	jge    c000fa34 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xf0>
c000f984:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000f988:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000f98c:	83 c2 2a             	add    edx,0x2a
c000f98f:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c000f993:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c000f998:	0f b7 c0             	movzx  eax,ax
c000f99b:	39 c2                	cmp    edx,eax
c000f99d:	0f 85 85 00 00 00    	jne    c000fa28 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xe4>
c000f9a3:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000f9a7:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000f9ab:	83 c2 2a             	add    edx,0x2a
c000f9ae:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c000f9b2:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c000f9b7:	0f b6 c0             	movzx  eax,al
c000f9ba:	39 c2                	cmp    edx,eax
c000f9bc:	75 6a                	jne    c000fa28 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xe4>
c000f9be:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c000f9c3:	85 c0                	test   eax,eax
c000f9c5:	74 3d                	je     c000fa04 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xc0>
c000f9c7:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000f9cb:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000f9cf:	83 c2 2a             	add    edx,0x2a
c000f9d2:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c000f9d6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f9da:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000f9dd:	39 c2                	cmp    edx,eax
c000f9df:	74 13                	je     c000f9f4 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xb0>
c000f9e1:	83 ec 0c             	sub    esp,0xc
c000f9e4:	68 ec 1e 02 c0       	push   0xc0021eec
c000f9e9:	e8 3d 1c 00 00       	call   c001162b <KePanic(char const*)>
c000f9ee:	83 c4 10             	add    esp,0x10
c000f9f1:	8d 76 00             	lea    esi,[esi+0x0]
c000f9f4:	83 ec 0c             	sub    esp,0xc
c000f9f7:	68 76 1f 02 c0       	push   0xc0021f76
c000f9fc:	e8 2a 1c 00 00       	call   c001162b <KePanic(char const*)>
c000fa01:	83 c4 10             	add    esp,0x10
c000fa04:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000fa08:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000fa0c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000fa10:	83 c2 2a             	add    edx,0x2a
c000fa13:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c000fa17:	8b 02                	mov    eax,DWORD PTR [edx]
c000fa19:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c000fa1c:	89 01                	mov    DWORD PTR [ecx],eax
c000fa1e:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000fa21:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000fa26:	66 90                	xchg   ax,ax
c000fa28:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c000fa2d:	e9 3e ff ff ff       	jmp    c000f970 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2c>
c000fa32:	66 90                	xchg   ax,ax
c000fa34:	90                   	nop
c000fa35:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000fa39:	83 c4 2c             	add    esp,0x2c
c000fa3c:	c2 04 00             	ret    0x4
c000fa3f:	90                   	nop

c000fa40 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c000fa40:	83 ec 1c             	sub    esp,0x1c
c000fa43:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000fa47:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000fa4b:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000fa4f:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c000fa54:	88 c8                	mov    al,cl
c000fa56:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c000fa5a:	88 d0                	mov    al,dl
c000fa5c:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000fa60:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fa64:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000fa6a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fa6e:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c000fa71:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c000fa75:	88 54 c8 0f          	mov    BYTE PTR [eax+ecx*8+0xf],dl
c000fa79:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fa7d:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000fa83:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000fa87:	8d 48 2a             	lea    ecx,[eax+0x2a]
c000fa8a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fa8e:	66 89 44 ca 0c       	mov    WORD PTR [edx+ecx*8+0xc],ax
c000fa93:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fa97:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000fa9d:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c000faa1:	83 c0 01             	add    eax,0x1
c000faa4:	88 c1                	mov    cl,al
c000faa6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000faaa:	83 c2 2a             	add    edx,0x2a
c000faad:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c000fab1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fab5:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000fabb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fabf:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c000fac2:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000fac6:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c000faca:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000face:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000fad4:	8d 50 01             	lea    edx,[eax+0x1]
c000fad7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fadb:	89 90 5c 11 00 00    	mov    DWORD PTR [eax+0x115c],edx
c000fae1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fae5:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000faeb:	3d 00 02 00 00       	cmp    eax,0x200
c000faf0:	75 12                	jne    c000fb04 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xc4>
c000faf2:	83 ec 0c             	sub    esp,0xc
c000faf5:	68 85 1f 02 c0       	push   0xc0021f85
c000fafa:	e8 2c 1b 00 00       	call   c001162b <KePanic(char const*)>
c000faff:	83 c4 10             	add    esp,0x10
c000fb02:	66 90                	xchg   ax,ax
c000fb04:	90                   	nop
c000fb05:	83 c4 1c             	add    esp,0x1c
c000fb08:	c3                   	ret    
c000fb09:	90                   	nop
c000fb0a:	66 90                	xchg   ax,ax

c000fb0c <ACPI::setScreenBrightnessLevel(void*, int)>:
c000fb0c:	b8 00 00 00 00       	mov    eax,0x0
c000fb11:	c3                   	ret    
c000fb12:	66 90                	xchg   ax,ax

c000fb14 <ACPI::detectPCI()>:
c000fb14:	53                   	push   ebx
c000fb15:	83 ec 28             	sub    esp,0x28
c000fb18:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000fb1d:	c6 44 24 1e 00       	mov    BYTE PTR [esp+0x1e],0x0
c000fb22:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000fb27:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000fb2d:	83 e0 04             	and    eax,0x4
c000fb30:	0f b6 c0             	movzx  eax,al
c000fb33:	85 c0                	test   eax,eax
c000fb35:	74 2d                	je     c000fb64 <ACPI::detectPCI()+0x50>
c000fb37:	a1 28 bb 02 c0       	mov    eax,ds:0xc002bb28
c000fb3c:	83 ec 08             	sub    esp,0x8
c000fb3f:	68 a2 1f 02 c0       	push   0xc0021fa2
c000fb44:	50                   	push   eax
c000fb45:	e8 6e f8 ff ff       	call   c000f3b8 <findDataTable(unsigned char*, char*)>
c000fb4a:	83 c4 10             	add    esp,0x10
c000fb4d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000fb51:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000fb56:	74 0c                	je     c000fb64 <ACPI::detectPCI()+0x50>
c000fb58:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000fb5d:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000fb62:	66 90                	xchg   ax,ax
c000fb64:	c7 44 24 14 5f 0c 00 00 	mov    DWORD PTR [esp+0x14],0xc5f
c000fb6c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000fb70:	8a 00                	mov    al,BYTE PTR [eax]
c000fb72:	0f b6 c0             	movzx  eax,al
c000fb75:	83 f8 01             	cmp    eax,0x1
c000fb78:	75 0e                	jne    c000fb88 <ACPI::detectPCI()+0x74>
c000fb7a:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000fb7f:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000fb84:	eb 2e                	jmp    c000fbb4 <ACPI::detectPCI()+0xa0>
c000fb86:	66 90                	xchg   ax,ax
c000fb88:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000fb8c:	8a 00                	mov    al,BYTE PTR [eax]
c000fb8e:	0f b6 c0             	movzx  eax,al
c000fb91:	83 f8 02             	cmp    eax,0x2
c000fb94:	75 1e                	jne    c000fbb4 <ACPI::detectPCI()+0xa0>
c000fb96:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000fb9b:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c000fba0:	85 c0                	test   eax,eax
c000fba2:	74 10                	je     c000fbb4 <ACPI::detectPCI()+0xa0>
c000fba4:	83 ec 0c             	sub    esp,0xc
c000fba7:	68 1c 1f 02 c0       	push   0xc0021f1c
c000fbac:	e8 7a 1a 00 00       	call   c001162b <KePanic(char const*)>
c000fbb1:	83 c4 10             	add    esp,0x10
c000fbb4:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c000fbb8:	83 f0 01             	xor    eax,0x1
c000fbbb:	0f b6 c0             	movzx  eax,al
c000fbbe:	85 c0                	test   eax,eax
c000fbc0:	74 46                	je     c000fc08 <ACPI::detectPCI()+0xf4>
c000fbc2:	e8 69 05 ff ff       	call   c0000130 <manualPCIProbe>
c000fbc7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000fbcb:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000fbd0:	75 0e                	jne    c000fbe0 <ACPI::detectPCI()+0xcc>
c000fbd2:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000fbd7:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000fbdc:	eb 2a                	jmp    c000fc08 <ACPI::detectPCI()+0xf4>
c000fbde:	66 90                	xchg   ax,ax
c000fbe0:	83 7c 24 10 02       	cmp    DWORD PTR [esp+0x10],0x2
c000fbe5:	75 21                	jne    c000fc08 <ACPI::detectPCI()+0xf4>
c000fbe7:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000fbec:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c000fbf1:	85 c0                	test   eax,eax
c000fbf3:	74 13                	je     c000fc08 <ACPI::detectPCI()+0xf4>
c000fbf5:	83 ec 0c             	sub    esp,0xc
c000fbf8:	68 1c 1f 02 c0       	push   0xc0021f1c
c000fbfd:	e8 29 1a 00 00       	call   c001162b <KePanic(char const*)>
c000fc02:	83 c4 10             	add    esp,0x10
c000fc05:	8d 76 00             	lea    esi,[esi+0x0]
c000fc08:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c000fc0d:	85 c0                	test   eax,eax
c000fc0f:	0f 84 87 00 00 00    	je     c000fc9c <ACPI::detectPCI()+0x188>
c000fc15:	83 ec 0c             	sub    esp,0xc
c000fc18:	68 a7 1f 02 c0       	push   0xc0021fa7
c000fc1d:	e8 09 13 00 00       	call   c0010f2b <KeSetBootMessage(char const*)>
c000fc22:	83 c4 10             	add    esp,0x10
c000fc25:	c7 44 24 04 5c 01 00 00 	mov    DWORD PTR [esp+0x4],0x15c
c000fc2d:	83 ec 0c             	sub    esp,0xc
c000fc30:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000fc34:	e8 7d 7e ff ff       	call   c0007ab6 <malloc>
c000fc39:	83 c4 10             	add    esp,0x10
c000fc3c:	89 c3                	mov    ebx,eax
c000fc3e:	83 ec 0c             	sub    esp,0xc
c000fc41:	53                   	push   ebx
c000fc42:	e8 21 b5 00 00       	call   c001b168 <PCI::PCI()>
c000fc47:	83 c4 10             	add    esp,0x10
c000fc4a:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000fc4e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000fc52:	83 ec 08             	sub    esp,0x8
c000fc55:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000fc59:	50                   	push   eax
c000fc5a:	e8 73 cd ff ff       	call   c000c9d2 <Device::addChild(Device*)>
c000fc5f:	83 c4 10             	add    esp,0x10
c000fc62:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fc66:	8b 00                	mov    eax,DWORD PTR [eax]
c000fc68:	83 c0 08             	add    eax,0x8
c000fc6b:	8b 00                	mov    eax,DWORD PTR [eax]
c000fc6d:	0f b6 54 24 1e       	movzx  edx,BYTE PTR [esp+0x1e]
c000fc72:	85 d2                	test   edx,edx
c000fc74:	74 0a                	je     c000fc80 <ACPI::detectPCI()+0x16c>
c000fc76:	ba 01 00 00 00       	mov    edx,0x1
c000fc7b:	eb 0b                	jmp    c000fc88 <ACPI::detectPCI()+0x174>
c000fc7d:	8d 76 00             	lea    esi,[esi+0x0]
c000fc80:	ba 02 00 00 00       	mov    edx,0x2
c000fc85:	8d 76 00             	lea    esi,[esi+0x0]
c000fc88:	6a 00                	push   0x0
c000fc8a:	6a 00                	push   0x0
c000fc8c:	52                   	push   edx
c000fc8d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000fc91:	ff d0                	call   eax
c000fc93:	83 c4 10             	add    esp,0x10
c000fc96:	e9 91 00 00 00       	jmp    c000fd2c <ACPI::detectPCI()+0x218>
c000fc9b:	90                   	nop
c000fc9c:	83 ec 0c             	sub    esp,0xc
c000fc9f:	68 bf 1f 02 c0       	push   0xc0021fbf
c000fca4:	e8 82 12 00 00       	call   c0010f2b <KeSetBootMessage(char const*)>
c000fca9:	83 c4 10             	add    esp,0x10
c000fcac:	c7 04 24 70 02 00 00 	mov    DWORD PTR [esp],0x270
c000fcb3:	83 ec 0c             	sub    esp,0xc
c000fcb6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000fcba:	e8 f7 7d ff ff       	call   c0007ab6 <malloc>
c000fcbf:	83 c4 10             	add    esp,0x10
c000fcc2:	89 c3                	mov    ebx,eax
c000fcc4:	83 ec 0c             	sub    esp,0xc
c000fcc7:	53                   	push   ebx
c000fcc8:	e8 35 c0 00 00       	call   c001bd02 <IDE::IDE()>
c000fccd:	83 c4 10             	add    esp,0x10
c000fcd0:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000fcd4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000fcd8:	83 ec 08             	sub    esp,0x8
c000fcdb:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000fcdf:	50                   	push   eax
c000fce0:	e8 ed cc ff ff       	call   c000c9d2 <Device::addChild(Device*)>
c000fce5:	83 c4 10             	add    esp,0x10
c000fce8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fcec:	c7 80 14 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x114],0x1
c000fcf6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fcfa:	66 c7 80 18 01 00 00 f0 01 	mov    WORD PTR [eax+0x118],0x1f0
c000fd03:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fd07:	66 c7 80 1a 01 00 00 70 01 	mov    WORD PTR [eax+0x11a],0x170
c000fd10:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fd14:	8b 00                	mov    eax,DWORD PTR [eax]
c000fd16:	83 c0 08             	add    eax,0x8
c000fd19:	8b 00                	mov    eax,DWORD PTR [eax]
c000fd1b:	6a 00                	push   0x0
c000fd1d:	6a 00                	push   0x0
c000fd1f:	6a 00                	push   0x0
c000fd21:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000fd25:	ff d0                	call   eax
c000fd27:	83 c4 10             	add    esp,0x10
c000fd2a:	66 90                	xchg   ax,ax
c000fd2c:	90                   	nop
c000fd2d:	83 c4 28             	add    esp,0x28
c000fd30:	5b                   	pop    ebx
c000fd31:	c3                   	ret    
c000fd32:	66 90                	xchg   ax,ax

c000fd34 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c000fd34:	83 ec 1c             	sub    esp,0x1c
c000fd37:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fd3b:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000fd3e:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000fd42:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000fd47:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c000fd4c:	83 ec 08             	sub    esp,0x8
c000fd4f:	52                   	push   edx
c000fd50:	50                   	push   eax
c000fd51:	e8 22 74 ff ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c000fd56:	83 c4 10             	add    esp,0x10
c000fd59:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c000fd5d:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c000fd62:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c000fd67:	83 ec 04             	sub    esp,0x4
c000fd6a:	6a 01                	push   0x1
c000fd6c:	52                   	push   edx
c000fd6d:	50                   	push   eax
c000fd6e:	e8 1f 75 ff ff       	call   c0007292 <Computer::writeCMOS(unsigned char, unsigned char)>
c000fd73:	83 c4 10             	add    esp,0x10
c000fd76:	90                   	nop
c000fd77:	83 c4 1c             	add    esp,0x1c
c000fd7a:	c3                   	ret    
c000fd7b:	90                   	nop

c000fd7c <ACPI::sleep()>:
c000fd7c:	83 ec 0c             	sub    esp,0xc
c000fd7f:	a1 00 b9 02 c0       	mov    eax,ds:0xc002b900
c000fd84:	85 c0                	test   eax,eax
c000fd86:	74 08                	je     c000fd90 <ACPI::sleep()+0x14>
c000fd88:	a1 00 b9 02 c0       	mov    eax,ds:0xc002b900
c000fd8d:	ff d0                	call   eax
c000fd8f:	90                   	nop
c000fd90:	90                   	nop
c000fd91:	83 c4 0c             	add    esp,0xc
c000fd94:	c3                   	ret    
c000fd95:	90                   	nop
c000fd96:	66 90                	xchg   ax,ax

c000fd98 <ACPI::open(int, int, void*)>:
c000fd98:	57                   	push   edi
c000fd99:	56                   	push   esi
c000fd9a:	53                   	push   ebx
c000fd9b:	81 ec 70 01 00 00    	sub    esp,0x170
c000fda1:	83 ec 0c             	sub    esp,0xc
c000fda4:	ff b4 24 8c 01 00 00 	push   DWORD PTR [esp+0x18c]
c000fdab:	e8 64 fd ff ff       	call   c000fb14 <ACPI::detectPCI()>
c000fdb0:	83 c4 10             	add    esp,0x10
c000fdb3:	83 ec 0c             	sub    esp,0xc
c000fdb6:	68 44 1f 02 c0       	push   0xc0021f44
c000fdbb:	e8 6b 11 00 00       	call   c0010f2b <KeSetBootMessage(char const*)>
c000fdc0:	83 c4 10             	add    esp,0x10
c000fdc3:	b8 4c 05 00 00       	mov    eax,0x54c
c000fdc8:	8a 00                	mov    al,BYTE PTR [eax]
c000fdca:	88 84 24 6e 01 00 00 	mov    BYTE PTR [esp+0x16e],al
c000fdd1:	0f b6 84 24 6e 01 00 00 	movzx  eax,BYTE PTR [esp+0x16e]
c000fdd9:	83 f8 01             	cmp    eax,0x1
c000fddc:	75 12                	jne    c000fdf0 <ACPI::open(int, int, void*)+0x58>
c000fdde:	83 ec 0c             	sub    esp,0xc
c000fde1:	68 9c 18 02 c0       	push   0xc002189c
c000fde6:	e8 ca 4d 00 00       	call   c0014bb5 <Thr::loadKernelSymbolTable(char const*)>
c000fdeb:	83 c4 10             	add    esp,0x10
c000fdee:	eb 34                	jmp    c000fe24 <ACPI::open(int, int, void*)+0x8c>
c000fdf0:	0f b6 84 24 6e 01 00 00 	movzx  eax,BYTE PTR [esp+0x16e]
c000fdf8:	3d bb 00 00 00       	cmp    eax,0xbb
c000fdfd:	75 15                	jne    c000fe14 <ACPI::open(int, int, void*)+0x7c>
c000fdff:	83 ec 0c             	sub    esp,0xc
c000fe02:	68 d4 1f 02 c0       	push   0xc0021fd4
c000fe07:	e8 a9 4d 00 00       	call   c0014bb5 <Thr::loadKernelSymbolTable(char const*)>
c000fe0c:	83 c4 10             	add    esp,0x10
c000fe0f:	eb 13                	jmp    c000fe24 <ACPI::open(int, int, void*)+0x8c>
c000fe11:	8d 76 00             	lea    esi,[esi+0x0]
c000fe14:	83 ec 0c             	sub    esp,0xc
c000fe17:	68 f2 1f 02 c0       	push   0xc0021ff2
c000fe1c:	e8 0a 18 00 00       	call   c001162b <KePanic(char const*)>
c000fe21:	83 c4 10             	add    esp,0x10
c000fe24:	c6 84 24 6f 01 00 00 00 	mov    BYTE PTR [esp+0x16f],0x0
c000fe2c:	c7 84 24 44 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x144],0x114
c000fe37:	83 ec 0c             	sub    esp,0xc
c000fe3a:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c000fe41:	e8 70 7c ff ff       	call   c0007ab6 <malloc>
c000fe46:	83 c4 10             	add    esp,0x10
c000fe49:	89 c3                	mov    ebx,eax
c000fe4b:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c000fe50:	83 ec 04             	sub    esp,0x4
c000fe53:	50                   	push   eax
c000fe54:	68 0c 20 02 c0       	push   0xc002200c
c000fe59:	53                   	push   ebx
c000fe5a:	e8 f9 bc ff ff       	call   c000bb58 <File::File(char const*, Process*)>
c000fe5f:	83 c4 10             	add    esp,0x10
c000fe62:	89 9c 24 68 01 00 00 	mov    DWORD PTR [esp+0x168],ebx
c000fe69:	83 ec 08             	sub    esp,0x8
c000fe6c:	6a 01                	push   0x1
c000fe6e:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c000fe75:	e8 fc bc ff ff       	call   c000bb76 <File::open(FileOpenMode)>
c000fe7a:	83 c4 10             	add    esp,0x10
c000fe7d:	89 84 24 64 01 00 00 	mov    DWORD PTR [esp+0x164],eax
c000fe84:	83 bc 24 64 01 00 00 00 	cmp    DWORD PTR [esp+0x164],0x0
c000fe8c:	75 16                	jne    c000fea4 <ACPI::open(int, int, void*)+0x10c>
c000fe8e:	83 ec 0c             	sub    esp,0xc
c000fe91:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c000fe98:	e8 37 bd ff ff       	call   c000bbd4 <File::close()>
c000fe9d:	83 c4 10             	add    esp,0x10
c000fea0:	eb 0a                	jmp    c000feac <ACPI::open(int, int, void*)+0x114>
c000fea2:	66 90                	xchg   ax,ax
c000fea4:	c6 84 24 6f 01 00 00 01 	mov    BYTE PTR [esp+0x16f],0x1
c000feac:	83 bc 24 68 01 00 00 00 	cmp    DWORD PTR [esp+0x168],0x0
c000feb4:	74 1e                	je     c000fed4 <ACPI::open(int, int, void*)+0x13c>
c000feb6:	8b 84 24 68 01 00 00 	mov    eax,DWORD PTR [esp+0x168]
c000febd:	8b 00                	mov    eax,DWORD PTR [eax]
c000febf:	83 c0 08             	add    eax,0x8
c000fec2:	8b 00                	mov    eax,DWORD PTR [eax]
c000fec4:	83 ec 0c             	sub    esp,0xc
c000fec7:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c000fece:	ff d0                	call   eax
c000fed0:	83 c4 10             	add    esp,0x10
c000fed3:	90                   	nop
c000fed4:	8a 84 24 6f 01 00 00 	mov    al,BYTE PTR [esp+0x16f]
c000fedb:	83 f0 01             	xor    eax,0x1
c000fede:	0f b6 c0             	movzx  eax,al
c000fee1:	85 c0                	test   eax,eax
c000fee3:	74 43                	je     c000ff28 <ACPI::open(int, int, void*)+0x190>
c000fee5:	83 ec 0c             	sub    esp,0xc
c000fee8:	68 2a 20 02 c0       	push   0xc002202a
c000feed:	e8 39 10 00 00       	call   c0010f2b <KeSetBootMessage(char const*)>
c000fef2:	83 c4 10             	add    esp,0x10
c000fef5:	83 ec 04             	sub    esp,0x4
c000fef8:	6a 0c                	push   0xc
c000fefa:	68 45 20 02 c0       	push   0xc0022045
c000feff:	68 56 20 02 c0       	push   0xc0022056
c000ff04:	e8 2f 3f 00 00       	call   c0013e38 <Reg::readIntWithDefault(char*, char*, int)>
c000ff09:	83 c4 10             	add    esp,0x10
c000ff0c:	89 84 24 60 01 00 00 	mov    DWORD PTR [esp+0x160],eax
c000ff13:	83 ec 0c             	sub    esp,0xc
c000ff16:	ff b4 24 6c 01 00 00 	push   DWORD PTR [esp+0x16c]
c000ff1d:	e8 1a 99 ff ff       	call   c000983c <Virt::setupPageSwapping(int)>
c000ff22:	83 c4 10             	add    esp,0x10
c000ff25:	8d 76 00             	lea    esi,[esi+0x0]
c000ff28:	83 ec 0c             	sub    esp,0xc
c000ff2b:	68 f5 0a 02 c0       	push   0xc0020af5
c000ff30:	e8 f6 0f 00 00       	call   c0010f2b <KeSetBootMessage(char const*)>
c000ff35:	83 c4 10             	add    esp,0x10
c000ff38:	8d 84 24 30 01 00 00 	lea    eax,[esp+0x130]
c000ff3f:	83 ec 08             	sub    esp,0x8
c000ff42:	6a 13                	push   0x13
c000ff44:	50                   	push   eax
c000ff45:	e8 a0 cd ff ff       	call   c000ccea <getDevicesOfType(DeviceType)>
c000ff4a:	83 c4 0c             	add    esp,0xc
c000ff4d:	8d 76 00             	lea    esi,[esi+0x0]
c000ff50:	83 ec 0c             	sub    esp,0xc
c000ff53:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000ff5a:	50                   	push   eax
c000ff5b:	e8 80 ff 00 00       	call   c001fee0 <LinkedList<Device>::isEmpty()>
c000ff60:	83 c4 10             	add    esp,0x10
c000ff63:	83 f0 01             	xor    eax,0x1
c000ff66:	0f b6 c0             	movzx  eax,al
c000ff69:	85 c0                	test   eax,eax
c000ff6b:	0f 84 47 01 00 00    	je     c00100b8 <ACPI::open(int, int, void*)+0x320>
c000ff71:	83 ec 0c             	sub    esp,0xc
c000ff74:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000ff7b:	50                   	push   eax
c000ff7c:	e8 7b ff 00 00       	call   c001fefc <LinkedList<Device>::getFirstElement()>
c000ff81:	83 c4 10             	add    esp,0x10
c000ff84:	89 84 24 5c 01 00 00 	mov    DWORD PTR [esp+0x15c],eax
c000ff8b:	83 ec 0c             	sub    esp,0xc
c000ff8e:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000ff95:	50                   	push   eax
c000ff96:	e8 69 ff 00 00       	call   c001ff04 <LinkedList<Device>::removeFirst()>
c000ff9b:	83 c4 10             	add    esp,0x10
c000ff9e:	8b 84 24 5c 01 00 00 	mov    eax,DWORD PTR [esp+0x15c]
c000ffa5:	89 84 24 58 01 00 00 	mov    DWORD PTR [esp+0x158],eax
c000ffac:	8b 94 24 58 01 00 00 	mov    edx,DWORD PTR [esp+0x158]
c000ffb3:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000ffb7:	8d 9a 18 01 00 00    	lea    ebx,[edx+0x118]
c000ffbd:	ba 09 00 00 00       	mov    edx,0x9
c000ffc2:	fc                   	cld    
c000ffc3:	89 c7                	mov    edi,eax
c000ffc5:	89 de                	mov    esi,ebx
c000ffc7:	89 d1                	mov    ecx,edx
c000ffc9:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000ffcb:	83 ec 08             	sub    esp,0x8
c000ffce:	8d 44 24 38          	lea    eax,[esp+0x38]
c000ffd2:	50                   	push   eax
c000ffd3:	83 ec 24             	sub    esp,0x24
c000ffd6:	89 e0                	mov    eax,esp
c000ffd8:	89 c3                	mov    ebx,eax
c000ffda:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c000ffde:	ba 09 00 00 00       	mov    edx,0x9
c000ffe3:	89 df                	mov    edi,ebx
c000ffe5:	89 c6                	mov    esi,eax
c000ffe7:	89 d1                	mov    ecx,edx
c000ffe9:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000ffeb:	e8 62 b6 00 00       	call   c001b652 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>
c000fff0:	83 c4 30             	add    esp,0x30
c000fff3:	89 84 24 54 01 00 00 	mov    DWORD PTR [esp+0x154],eax
c000fffa:	83 bc 24 54 01 00 00 00 	cmp    DWORD PTR [esp+0x154],0x0
c0010002:	0f 84 48 ff ff ff    	je     c000ff50 <ACPI::open(int, int, void*)+0x1b8>
c0010008:	c7 84 24 40 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x140],0x114
c0010013:	83 ec 0c             	sub    esp,0xc
c0010016:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001001d:	e8 94 7a ff ff       	call   c0007ab6 <malloc>
c0010022:	83 c4 10             	add    esp,0x10
c0010025:	89 c3                	mov    ebx,eax
c0010027:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c001002c:	83 ec 04             	sub    esp,0x4
c001002f:	50                   	push   eax
c0010030:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c0010037:	53                   	push   ebx
c0010038:	e8 1b bb ff ff       	call   c000bb58 <File::File(char const*, Process*)>
c001003d:	83 c4 10             	add    esp,0x10
c0010040:	89 9c 24 50 01 00 00 	mov    DWORD PTR [esp+0x150],ebx
c0010047:	83 ec 0c             	sub    esp,0xc
c001004a:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c0010051:	e8 e4 bd ff ff       	call   c000be3a <File::exists()>
c0010056:	83 c4 10             	add    esp,0x10
c0010059:	0f b6 c0             	movzx  eax,al
c001005c:	85 c0                	test   eax,eax
c001005e:	74 28                	je     c0010088 <ACPI::open(int, int, void*)+0x2f0>
c0010060:	83 ec 08             	sub    esp,0x8
c0010063:	6a 01                	push   0x1
c0010065:	ff b4 24 60 01 00 00 	push   DWORD PTR [esp+0x160]
c001006c:	e8 be 55 00 00       	call   c001562f <Thr::loadDLL(char const*, bool)>
c0010071:	83 c4 10             	add    esp,0x10
c0010074:	83 ec 08             	sub    esp,0x8
c0010077:	ff b4 24 60 01 00 00 	push   DWORD PTR [esp+0x160]
c001007e:	50                   	push   eax
c001007f:	e8 dc 57 00 00       	call   c0015860 <Thr::executeDLL(unsigned long, void*)>
c0010084:	83 c4 10             	add    esp,0x10
c0010087:	90                   	nop
c0010088:	83 bc 24 50 01 00 00 00 	cmp    DWORD PTR [esp+0x150],0x0
c0010090:	0f 84 ba fe ff ff    	je     c000ff50 <ACPI::open(int, int, void*)+0x1b8>
c0010096:	8b 84 24 50 01 00 00 	mov    eax,DWORD PTR [esp+0x150]
c001009d:	8b 00                	mov    eax,DWORD PTR [eax]
c001009f:	83 c0 08             	add    eax,0x8
c00100a2:	8b 00                	mov    eax,DWORD PTR [eax]
c00100a4:	83 ec 0c             	sub    esp,0xc
c00100a7:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c00100ae:	ff d0                	call   eax
c00100b0:	83 c4 10             	add    esp,0x10
c00100b3:	e9 98 fe ff ff       	jmp    c000ff50 <ACPI::open(int, int, void*)+0x1b8>
c00100b8:	83 ec 0c             	sub    esp,0xc
c00100bb:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c00100c2:	50                   	push   eax
c00100c3:	e8 14 fe 00 00       	call   c001fedc <LinkedList<Device>::~LinkedList()>
c00100c8:	83 c4 10             	add    esp,0x10
c00100cb:	8b 1d b8 6e 02 c0    	mov    ebx,DWORD PTR ds:0xc0026eb8
c00100d1:	83 ec 08             	sub    esp,0x8
c00100d4:	6a 01                	push   0x1
c00100d6:	68 5d 20 02 c0       	push   0xc002205d
c00100db:	e8 4f 55 00 00       	call   c001562f <Thr::loadDLL(char const*, bool)>
c00100e0:	83 c4 10             	add    esp,0x10
c00100e3:	83 ec 08             	sub    esp,0x8
c00100e6:	53                   	push   ebx
c00100e7:	50                   	push   eax
c00100e8:	e8 73 57 00 00       	call   c0015860 <Thr::executeDLL(unsigned long, void*)>
c00100ed:	83 c4 10             	add    esp,0x10
c00100f0:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c00100f5:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c00100fb:	83 e0 04             	and    eax,0x4
c00100fe:	0f b6 c0             	movzx  eax,al
c0010101:	85 c0                	test   eax,eax
c0010103:	0f 84 1b 01 00 00    	je     c0010224 <ACPI::open(int, int, void*)+0x48c>
c0010109:	83 ec 0c             	sub    esp,0xc
c001010c:	68 7a 20 02 c0       	push   0xc002207a
c0010111:	e8 15 0e 00 00       	call   c0010f2b <KeSetBootMessage(char const*)>
c0010116:	83 c4 10             	add    esp,0x10
c0010119:	c7 84 24 3c 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x13c],0x114
c0010124:	83 ec 0c             	sub    esp,0xc
c0010127:	ff b4 24 48 01 00 00 	push   DWORD PTR [esp+0x148]
c001012e:	e8 83 79 ff ff       	call   c0007ab6 <malloc>
c0010133:	83 c4 10             	add    esp,0x10
c0010136:	89 c3                	mov    ebx,eax
c0010138:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c001013d:	83 ec 04             	sub    esp,0x4
c0010140:	50                   	push   eax
c0010141:	68 97 20 02 c0       	push   0xc0022097
c0010146:	53                   	push   ebx
c0010147:	e8 0c ba ff ff       	call   c000bb58 <File::File(char const*, Process*)>
c001014c:	83 c4 10             	add    esp,0x10
c001014f:	89 9c 24 4c 01 00 00 	mov    DWORD PTR [esp+0x14c],ebx
c0010156:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c001015e:	74 20                	je     c0010180 <ACPI::open(int, int, void*)+0x3e8>
c0010160:	83 ec 0c             	sub    esp,0xc
c0010163:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c001016a:	e8 cb bc ff ff       	call   c000be3a <File::exists()>
c001016f:	83 c4 10             	add    esp,0x10
c0010172:	0f b6 c0             	movzx  eax,al
c0010175:	85 c0                	test   eax,eax
c0010177:	74 07                	je     c0010180 <ACPI::open(int, int, void*)+0x3e8>
c0010179:	b0 01                	mov    al,0x1
c001017b:	eb 07                	jmp    c0010184 <ACPI::open(int, int, void*)+0x3ec>
c001017d:	8d 76 00             	lea    esi,[esi+0x0]
c0010180:	b0 00                	mov    al,0x0
c0010182:	66 90                	xchg   ax,ax
c0010184:	0f b6 c0             	movzx  eax,al
c0010187:	85 c0                	test   eax,eax
c0010189:	74 25                	je     c00101b0 <ACPI::open(int, int, void*)+0x418>
c001018b:	83 ec 08             	sub    esp,0x8
c001018e:	6a 01                	push   0x1
c0010190:	68 97 20 02 c0       	push   0xc0022097
c0010195:	e8 95 54 00 00       	call   c001562f <Thr::loadDLL(char const*, bool)>
c001019a:	83 c4 10             	add    esp,0x10
c001019d:	83 ec 08             	sub    esp,0x8
c00101a0:	ff b4 24 88 01 00 00 	push   DWORD PTR [esp+0x188]
c00101a7:	50                   	push   eax
c00101a8:	e8 b3 56 00 00       	call   c0015860 <Thr::executeDLL(unsigned long, void*)>
c00101ad:	83 c4 10             	add    esp,0x10
c00101b0:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c00101b8:	74 2a                	je     c00101e4 <ACPI::open(int, int, void*)+0x44c>
c00101ba:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c00101c2:	74 20                	je     c00101e4 <ACPI::open(int, int, void*)+0x44c>
c00101c4:	8b 84 24 4c 01 00 00 	mov    eax,DWORD PTR [esp+0x14c]
c00101cb:	8b 00                	mov    eax,DWORD PTR [eax]
c00101cd:	83 c0 08             	add    eax,0x8
c00101d0:	8b 00                	mov    eax,DWORD PTR [eax]
c00101d2:	83 ec 0c             	sub    esp,0xc
c00101d5:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c00101dc:	ff d0                	call   eax
c00101de:	83 c4 10             	add    esp,0x10
c00101e1:	8d 76 00             	lea    esi,[esi+0x0]
c00101e4:	a1 28 bb 02 c0       	mov    eax,ds:0xc002bb28
c00101e9:	83 ec 08             	sub    esp,0x8
c00101ec:	68 b4 20 02 c0       	push   0xc00220b4
c00101f1:	50                   	push   eax
c00101f2:	e8 c1 f1 ff ff       	call   c000f3b8 <findDataTable(unsigned char*, char*)>
c00101f7:	83 c4 10             	add    esp,0x10
c00101fa:	89 84 24 48 01 00 00 	mov    DWORD PTR [esp+0x148],eax
c0010201:	83 bc 24 48 01 00 00 00 	cmp    DWORD PTR [esp+0x148],0x0
c0010209:	74 19                	je     c0010224 <ACPI::open(int, int, void*)+0x48c>
c001020b:	83 ec 08             	sub    esp,0x8
c001020e:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c0010215:	ff b4 24 8c 01 00 00 	push   DWORD PTR [esp+0x18c]
c001021c:	e8 13 fb ff ff       	call   c000fd34 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c0010221:	83 c4 10             	add    esp,0x10
c0010224:	b8 00 00 00 00       	mov    eax,0x0
c0010229:	81 c4 70 01 00 00    	add    esp,0x170
c001022f:	5b                   	pop    ebx
c0010230:	5e                   	pop    esi
c0010231:	5f                   	pop    edi
c0010232:	c3                   	ret    
c0010233:	90                   	nop

c0010234 <CPU::close(int, int, void*)>:
c0010234:	31 c0                	xor    eax,eax
c0010236:	c3                   	ret    
c0010237:	90                   	nop

c0010238 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>:
c0010238:	60                   	pusha  
c0010239:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001023d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010241:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0010245:	9c                   	pushf  
c0010246:	fa                   	cli    
c0010247:	0f 09                	wbinvd 
c0010249:	0f 30                	wrmsr  
c001024b:	9d                   	popf   
c001024c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0010250:	89 02                	mov    DWORD PTR [edx],eax
c0010252:	61                   	popa   
c0010253:	c3                   	ret    

c0010254 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>:
c0010254:	60                   	pusha  
c0010255:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0010259:	9c                   	pushf  
c001025a:	fa                   	cli    
c001025b:	0f 09                	wbinvd 
c001025d:	31 c0                	xor    eax,eax
c001025f:	31 d2                	xor    edx,edx
c0010261:	0f 32                	rdmsr  
c0010263:	9d                   	popf   
c0010264:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010268:	89 02                	mov    DWORD PTR [edx],eax
c001026a:	61                   	popa   
c001026b:	c3                   	ret    

c001026c <CPU::AMD_K6_writeback(int, int, int)>:
c001026c:	56                   	push   esi
c001026d:	53                   	push   ebx
c001026e:	83 ec 10             	sub    esp,0x10
c0010271:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010275:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c001027a:	75 5d                	jne    c00102d9 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c001027c:	83 f8 08             	cmp    eax,0x8
c001027f:	75 09                	jne    c001028a <CPU::AMD_K6_writeback(int, int, int)+0x1e>
c0010281:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c0010286:	7e 13                	jle    c001029b <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c0010288:	eb 30                	jmp    c00102ba <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c001028a:	83 f8 06             	cmp    eax,0x6
c001028d:	7c 4a                	jl     c00102d9 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c001028f:	83 f8 07             	cmp    eax,0x7
c0010292:	7e 07                	jle    c001029b <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c0010294:	83 f8 09             	cmp    eax,0x9
c0010297:	74 21                	je     c00102ba <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c0010299:	eb 3e                	jmp    c00102d9 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c001029b:	89 e6                	mov    esi,esp
c001029d:	8b 1d dc 6e 02 c0    	mov    ebx,DWORD PTR ds:0xc0026edc
c00102a3:	56                   	push   esi
c00102a4:	c1 eb 15             	shr    ebx,0x15
c00102a7:	68 82 00 00 c0       	push   0xc0000082
c00102ac:	83 e3 7e             	and    ebx,0x7e
c00102af:	e8 a0 ff ff ff       	call   c0010254 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c00102b4:	56                   	push   esi
c00102b5:	6a 00                	push   0x0
c00102b7:	53                   	push   ebx
c00102b8:	eb 12                	jmp    c00102cc <CPU::AMD_K6_writeback(int, int, int)+0x60>
c00102ba:	89 e3                	mov    ebx,esp
c00102bc:	53                   	push   ebx
c00102bd:	68 82 00 00 c0       	push   0xc0000082
c00102c2:	e8 8d ff ff ff       	call   c0010254 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c00102c7:	53                   	push   ebx
c00102c8:	6a 00                	push   0x0
c00102ca:	6a 00                	push   0x0
c00102cc:	68 82 00 00 c0       	push   0xc0000082
c00102d1:	e8 62 ff ff ff       	call   c0010238 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>
c00102d6:	83 c4 18             	add    esp,0x18
c00102d9:	83 c4 10             	add    esp,0x10
c00102dc:	5b                   	pop    ebx
c00102dd:	5e                   	pop    esi
c00102de:	c3                   	ret    
c00102df:	90                   	nop

c00102e0 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c00102e0:	55                   	push   ebp
c00102e1:	57                   	push   edi
c00102e2:	56                   	push   esi
c00102e3:	53                   	push   ebx
c00102e4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00102e8:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00102ec:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00102f0:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c00102f4:	39 05 78 36 02 c0    	cmp    DWORD PTR ds:0xc0023678,eax
c00102fa:	75 23                	jne    c001031f <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c00102fc:	a1 8c bd 02 c0       	mov    eax,ds:0xc002bd8c
c0010301:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0010305:	89 06                	mov    DWORD PTR [esi],eax
c0010307:	a1 88 bd 02 c0       	mov    eax,ds:0xc002bd88
c001030c:	89 07                	mov    DWORD PTR [edi],eax
c001030e:	a1 84 bd 02 c0       	mov    eax,ds:0xc002bd84
c0010313:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0010316:	a1 80 bd 02 c0       	mov    eax,ds:0xc002bd80
c001031b:	89 02                	mov    DWORD PTR [edx],eax
c001031d:	eb 3f                	jmp    c001035e <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c001031f:	31 c9                	xor    ecx,ecx
c0010321:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010325:	0f a2                	cpuid  
c0010327:	89 06                	mov    DWORD PTR [esi],eax
c0010329:	89 1f                	mov    DWORD PTR [edi],ebx
c001032b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001032f:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c0010332:	89 10                	mov    DWORD PTR [eax],edx
c0010334:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010338:	a3 78 36 02 c0       	mov    ds:0xc0023678,eax
c001033d:	8b 06                	mov    eax,DWORD PTR [esi]
c001033f:	a3 8c bd 02 c0       	mov    ds:0xc002bd8c,eax
c0010344:	8b 07                	mov    eax,DWORD PTR [edi]
c0010346:	a3 88 bd 02 c0       	mov    ds:0xc002bd88,eax
c001034b:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001034e:	a3 84 bd 02 c0       	mov    ds:0xc002bd84,eax
c0010353:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0010357:	8b 00                	mov    eax,DWORD PTR [eax]
c0010359:	a3 80 bd 02 c0       	mov    ds:0xc002bd80,eax
c001035e:	5b                   	pop    ebx
c001035f:	5e                   	pop    esi
c0010360:	5f                   	pop    edi
c0010361:	5d                   	pop    ebp
c0010362:	c3                   	ret    
c0010363:	90                   	nop

c0010364 <CPU::cpuidCheckEDX(unsigned int)>:
c0010364:	83 ec 10             	sub    esp,0x10
c0010367:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001036b:	50                   	push   eax
c001036c:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0010370:	50                   	push   eax
c0010371:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0010375:	50                   	push   eax
c0010376:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001037a:	50                   	push   eax
c001037b:	6a 01                	push   0x1
c001037d:	e8 5e ff ff ff       	call   c00102e0 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0010382:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0010386:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c001038a:	0f 95 c0             	setne  al
c001038d:	83 c4 24             	add    esp,0x24
c0010390:	c3                   	ret    
c0010391:	90                   	nop

c0010392 <CPU::cpuidCheckECX(unsigned int)>:
c0010392:	83 ec 10             	sub    esp,0x10
c0010395:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0010399:	50                   	push   eax
c001039a:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001039e:	50                   	push   eax
c001039f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00103a3:	50                   	push   eax
c00103a4:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00103a8:	50                   	push   eax
c00103a9:	6a 01                	push   0x1
c00103ab:	e8 30 ff ff ff       	call   c00102e0 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00103b0:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00103b4:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c00103b8:	0f 95 c0             	setne  al
c00103bb:	83 c4 24             	add    esp,0x24
c00103be:	c3                   	ret    
c00103bf:	90                   	nop

c00103c0 <CPU::cpuidCheckExtendedEBX(unsigned int)>:
c00103c0:	83 ec 10             	sub    esp,0x10
c00103c3:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00103c7:	50                   	push   eax
c00103c8:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00103cc:	50                   	push   eax
c00103cd:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00103d1:	50                   	push   eax
c00103d2:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00103d6:	50                   	push   eax
c00103d7:	6a 07                	push   0x7
c00103d9:	e8 02 ff ff ff       	call   c00102e0 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00103de:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00103e2:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c00103e6:	0f 95 c0             	setne  al
c00103e9:	83 c4 24             	add    esp,0x24
c00103ec:	c3                   	ret    
c00103ed:	90                   	nop

c00103ee <CPU::cpuidCheckExtendedECX(unsigned int)>:
c00103ee:	83 ec 10             	sub    esp,0x10
c00103f1:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00103f5:	50                   	push   eax
c00103f6:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00103fa:	50                   	push   eax
c00103fb:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00103ff:	50                   	push   eax
c0010400:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0010404:	50                   	push   eax
c0010405:	6a 07                	push   0x7
c0010407:	e8 d4 fe ff ff       	call   c00102e0 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001040c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0010410:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c0010414:	0f 95 c0             	setne  al
c0010417:	83 c4 24             	add    esp,0x24
c001041a:	c3                   	ret    
c001041b:	90                   	nop

c001041c <CPU::CPU()>:
c001041c:	83 ec 0c             	sub    esp,0xc
c001041f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010423:	83 ec 08             	sub    esp,0x8
c0010426:	68 d9 21 02 c0       	push   0xc00221d9
c001042b:	50                   	push   eax
c001042c:	e8 39 c7 ff ff       	call   c000cb6a <Device::Device(char const*)>
c0010431:	83 c4 10             	add    esp,0x10
c0010434:	ba 6c 22 02 c0       	mov    edx,0xc002226c
c0010439:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001043d:	89 10                	mov    DWORD PTR [eax],edx
c001043f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010443:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c001044d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010451:	05 78 01 00 00       	add    eax,0x178
c0010456:	83 ec 0c             	sub    esp,0xc
c0010459:	50                   	push   eax
c001045a:	e8 fd 6e ff ff       	call   c000735c <GDT::GDT()>
c001045f:	83 c4 10             	add    esp,0x10
c0010462:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010466:	05 7c 09 00 00       	add    eax,0x97c
c001046b:	83 ec 0c             	sub    esp,0xc
c001046e:	50                   	push   eax
c001046f:	e8 38 71 ff ff       	call   c00075ac <IDT::IDT()>
c0010474:	83 c4 10             	add    esp,0x10
c0010477:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001047b:	05 7c 11 00 00       	add    eax,0x117c
c0010480:	83 ec 0c             	sub    esp,0xc
c0010483:	50                   	push   eax
c0010484:	e8 bb 8a ff ff       	call   c0008f44 <TSS::TSS()>
c0010489:	83 c4 10             	add    esp,0x10
c001048c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010490:	c6 80 90 11 00 00 00 	mov    BYTE PTR [eax+0x1190],0x0
c0010497:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001049b:	c7 80 10 01 00 00 11 00 00 00 	mov    DWORD PTR [eax+0x110],0x11
c00104a5:	90                   	nop
c00104a6:	83 c4 0c             	add    esp,0xc
c00104a9:	c3                   	ret    

c00104aa <CPU::displayFeatures()>:
c00104aa:	c3                   	ret    
c00104ab:	90                   	nop

c00104ac <CPU::detectFeatures()>:
c00104ac:	55                   	push   ebp
c00104ad:	57                   	push   edi
c00104ae:	56                   	push   esi
c00104af:	53                   	push   ebx
c00104b0:	83 ec 30             	sub    esp,0x30
c00104b3:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c00104b7:	81 a3 8c 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x118c],0xfff80700
c00104c1:	c6 83 90 11 00 00 01 	mov    BYTE PTR [ebx+0x1190],0x1
c00104c8:	8d ab 5f 01 00 00    	lea    ebp,[ebx+0x15f]
c00104ce:	6a 0d                	push   0xd
c00104d0:	6a 00                	push   0x0
c00104d2:	55                   	push   ebp
c00104d3:	e8 18 00 ff ff       	call   c00004f0 <memset>
c00104d8:	83 c4 10             	add    esp,0x10
c00104db:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c00104e0:	f6 80 6c 01 00 00 02 	test   BYTE PTR [eax+0x16c],0x2
c00104e7:	0f 84 db 05 00 00    	je     c0010ac8 <CPU::detectFeatures()+0x61c>
c00104ed:	83 ec 0c             	sub    esp,0xc
c00104f0:	89 ef                	mov    edi,ebp
c00104f2:	6a 10                	push   0x10
c00104f4:	e8 6b fe ff ff       	call   c0010364 <CPU::cpuidCheckEDX(unsigned int)>
c00104f9:	83 e0 01             	and    eax,0x1
c00104fc:	8d 14 00             	lea    edx,[eax+eax*1]
c00104ff:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c0010505:	83 e0 fd             	and    eax,0xfffffffd
c0010508:	09 d0                	or     eax,edx
c001050a:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c0010510:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c0010517:	e8 48 fe ff ff       	call   c0010364 <CPU::cpuidCheckEDX(unsigned int)>
c001051c:	83 e0 01             	and    eax,0x1
c001051f:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0010526:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c001052c:	83 e0 fb             	and    eax,0xfffffffb
c001052f:	09 d0                	or     eax,edx
c0010531:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c0010537:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c001053e:	e8 21 fe ff ff       	call   c0010364 <CPU::cpuidCheckEDX(unsigned int)>
c0010543:	83 e0 01             	and    eax,0x1
c0010546:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c001054d:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c0010553:	83 e0 f7             	and    eax,0xfffffff7
c0010556:	09 d0                	or     eax,edx
c0010558:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c001055e:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c0010565:	e8 fa fd ff ff       	call   c0010364 <CPU::cpuidCheckEDX(unsigned int)>
c001056a:	83 e0 01             	and    eax,0x1
c001056d:	c1 e0 04             	shl    eax,0x4
c0010570:	89 c2                	mov    edx,eax
c0010572:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c0010578:	83 e0 ef             	and    eax,0xffffffef
c001057b:	09 d0                	or     eax,edx
c001057d:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c0010583:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c001058a:	e8 d5 fd ff ff       	call   c0010364 <CPU::cpuidCheckEDX(unsigned int)>
c001058f:	83 e0 01             	and    eax,0x1
c0010592:	c1 e0 05             	shl    eax,0x5
c0010595:	89 c2                	mov    edx,eax
c0010597:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c001059d:	83 e0 df             	and    eax,0xffffffdf
c00105a0:	09 d0                	or     eax,edx
c00105a2:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c00105a8:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00105af:	e8 b0 fd ff ff       	call   c0010364 <CPU::cpuidCheckEDX(unsigned int)>
c00105b4:	83 e0 01             	and    eax,0x1
c00105b7:	8d 14 00             	lea    edx,[eax+eax*1]
c00105ba:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c00105c0:	83 e0 fd             	and    eax,0xfffffffd
c00105c3:	09 d0                	or     eax,edx
c00105c5:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c00105cb:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c00105d2:	e8 8d fd ff ff       	call   c0010364 <CPU::cpuidCheckEDX(unsigned int)>
c00105d7:	83 e0 01             	and    eax,0x1
c00105da:	c1 e0 06             	shl    eax,0x6
c00105dd:	89 c2                	mov    edx,eax
c00105df:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c00105e5:	83 e0 bf             	and    eax,0xffffffbf
c00105e8:	09 d0                	or     eax,edx
c00105ea:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c00105f0:	58                   	pop    eax
c00105f1:	8d 44 24 28          	lea    eax,[esp+0x28]
c00105f5:	50                   	push   eax
c00105f6:	8d 44 24 28          	lea    eax,[esp+0x28]
c00105fa:	50                   	push   eax
c00105fb:	8d 74 24 28          	lea    esi,[esp+0x28]
c00105ff:	56                   	push   esi
c0010600:	8d 44 24 28          	lea    eax,[esp+0x28]
c0010604:	50                   	push   eax
c0010605:	6a 00                	push   0x0
c0010607:	e8 d4 fc ff ff       	call   c00102e0 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001060c:	b8 04 00 00 00       	mov    eax,0x4
c0010611:	89 c1                	mov    ecx,eax
c0010613:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010615:	8d bb 63 01 00 00    	lea    edi,[ebx+0x163]
c001061b:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c001061f:	89 c1                	mov    ecx,eax
c0010621:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010623:	8d bb 67 01 00 00    	lea    edi,[ebx+0x167]
c0010629:	8d 74 24 38          	lea    esi,[esp+0x38]
c001062d:	89 c1                	mov    ecx,eax
c001062f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010631:	83 c4 18             	add    esp,0x18
c0010634:	68 e8 20 02 c0       	push   0xc00220e8
c0010639:	55                   	push   ebp
c001063a:	e8 11 01 ff ff       	call   c0000750 <strcmp>
c001063f:	83 c4 10             	add    esp,0x10
c0010642:	85 c0                	test   eax,eax
c0010644:	75 0f                	jne    c0010655 <CPU::detectFeatures()+0x1a9>
c0010646:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c0010650:	e9 22 02 00 00       	jmp    c0010877 <CPU::detectFeatures()+0x3cb>
c0010655:	50                   	push   eax
c0010656:	50                   	push   eax
c0010657:	68 f5 20 02 c0       	push   0xc00220f5
c001065c:	55                   	push   ebp
c001065d:	e8 ee 00 ff ff       	call   c0000750 <strcmp>
c0010662:	83 c4 10             	add    esp,0x10
c0010665:	85 c0                	test   eax,eax
c0010667:	74 dd                	je     c0010646 <CPU::detectFeatures()+0x19a>
c0010669:	50                   	push   eax
c001066a:	50                   	push   eax
c001066b:	68 02 21 02 c0       	push   0xc0022102
c0010670:	55                   	push   ebp
c0010671:	e8 da 00 ff ff       	call   c0000750 <strcmp>
c0010676:	83 c4 10             	add    esp,0x10
c0010679:	85 c0                	test   eax,eax
c001067b:	74 2a                	je     c00106a7 <CPU::detectFeatures()+0x1fb>
c001067d:	50                   	push   eax
c001067e:	50                   	push   eax
c001067f:	68 0f 21 02 c0       	push   0xc002210f
c0010684:	55                   	push   ebp
c0010685:	e8 c6 00 ff ff       	call   c0000750 <strcmp>
c001068a:	83 c4 10             	add    esp,0x10
c001068d:	85 c0                	test   eax,eax
c001068f:	74 16                	je     c00106a7 <CPU::detectFeatures()+0x1fb>
c0010691:	50                   	push   eax
c0010692:	50                   	push   eax
c0010693:	68 1c 21 02 c0       	push   0xc002211c
c0010698:	55                   	push   ebp
c0010699:	e8 b2 00 ff ff       	call   c0000750 <strcmp>
c001069e:	83 c4 10             	add    esp,0x10
c00106a1:	85 c0                	test   eax,eax
c00106a3:	74 48                	je     c00106ed <CPU::detectFeatures()+0x241>
c00106a5:	eb 0f                	jmp    c00106b6 <CPU::detectFeatures()+0x20a>
c00106a7:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c00106b1:	e9 c1 01 00 00       	jmp    c0010877 <CPU::detectFeatures()+0x3cb>
c00106b6:	50                   	push   eax
c00106b7:	50                   	push   eax
c00106b8:	68 29 21 02 c0       	push   0xc0022129
c00106bd:	55                   	push   ebp
c00106be:	e8 8d 00 ff ff       	call   c0000750 <strcmp>
c00106c3:	83 c4 10             	add    esp,0x10
c00106c6:	85 c0                	test   eax,eax
c00106c8:	74 23                	je     c00106ed <CPU::detectFeatures()+0x241>
c00106ca:	57                   	push   edi
c00106cb:	57                   	push   edi
c00106cc:	68 36 21 02 c0       	push   0xc0022136
c00106d1:	55                   	push   ebp
c00106d2:	e8 79 00 ff ff       	call   c0000750 <strcmp>
c00106d7:	83 c4 10             	add    esp,0x10
c00106da:	85 c0                	test   eax,eax
c00106dc:	75 1e                	jne    c00106fc <CPU::detectFeatures()+0x250>
c00106de:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c00106e8:	e9 8a 01 00 00       	jmp    c0010877 <CPU::detectFeatures()+0x3cb>
c00106ed:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c00106f7:	e9 7b 01 00 00       	jmp    c0010877 <CPU::detectFeatures()+0x3cb>
c00106fc:	56                   	push   esi
c00106fd:	56                   	push   esi
c00106fe:	68 43 21 02 c0       	push   0xc0022143
c0010703:	55                   	push   ebp
c0010704:	e8 47 00 ff ff       	call   c0000750 <strcmp>
c0010709:	83 c4 10             	add    esp,0x10
c001070c:	85 c0                	test   eax,eax
c001070e:	75 0f                	jne    c001071f <CPU::detectFeatures()+0x273>
c0010710:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c001071a:	e9 58 01 00 00       	jmp    c0010877 <CPU::detectFeatures()+0x3cb>
c001071f:	51                   	push   ecx
c0010720:	51                   	push   ecx
c0010721:	68 02 21 02 c0       	push   0xc0022102
c0010726:	55                   	push   ebp
c0010727:	e8 24 00 ff ff       	call   c0000750 <strcmp>
c001072c:	83 c4 10             	add    esp,0x10
c001072f:	85 c0                	test   eax,eax
c0010731:	75 0f                	jne    c0010742 <CPU::detectFeatures()+0x296>
c0010733:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c001073d:	e9 35 01 00 00       	jmp    c0010877 <CPU::detectFeatures()+0x3cb>
c0010742:	52                   	push   edx
c0010743:	52                   	push   edx
c0010744:	68 50 21 02 c0       	push   0xc0022150
c0010749:	55                   	push   ebp
c001074a:	e8 01 00 ff ff       	call   c0000750 <strcmp>
c001074f:	83 c4 10             	add    esp,0x10
c0010752:	85 c0                	test   eax,eax
c0010754:	75 0f                	jne    c0010765 <CPU::detectFeatures()+0x2b9>
c0010756:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c0010760:	e9 12 01 00 00       	jmp    c0010877 <CPU::detectFeatures()+0x3cb>
c0010765:	50                   	push   eax
c0010766:	50                   	push   eax
c0010767:	68 5d 21 02 c0       	push   0xc002215d
c001076c:	55                   	push   ebp
c001076d:	e8 de ff fe ff       	call   c0000750 <strcmp>
c0010772:	83 c4 10             	add    esp,0x10
c0010775:	85 c0                	test   eax,eax
c0010777:	75 0f                	jne    c0010788 <CPU::detectFeatures()+0x2dc>
c0010779:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c0010783:	e9 ef 00 00 00       	jmp    c0010877 <CPU::detectFeatures()+0x3cb>
c0010788:	50                   	push   eax
c0010789:	50                   	push   eax
c001078a:	68 6a 21 02 c0       	push   0xc002216a
c001078f:	55                   	push   ebp
c0010790:	e8 bb ff fe ff       	call   c0000750 <strcmp>
c0010795:	83 c4 10             	add    esp,0x10
c0010798:	85 c0                	test   eax,eax
c001079a:	75 0f                	jne    c00107ab <CPU::detectFeatures()+0x2ff>
c001079c:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c00107a6:	e9 cc 00 00 00       	jmp    c0010877 <CPU::detectFeatures()+0x3cb>
c00107ab:	50                   	push   eax
c00107ac:	50                   	push   eax
c00107ad:	68 77 21 02 c0       	push   0xc0022177
c00107b2:	55                   	push   ebp
c00107b3:	e8 98 ff fe ff       	call   c0000750 <strcmp>
c00107b8:	83 c4 10             	add    esp,0x10
c00107bb:	85 c0                	test   eax,eax
c00107bd:	75 0f                	jne    c00107ce <CPU::detectFeatures()+0x322>
c00107bf:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c00107c9:	e9 a9 00 00 00       	jmp    c0010877 <CPU::detectFeatures()+0x3cb>
c00107ce:	50                   	push   eax
c00107cf:	50                   	push   eax
c00107d0:	68 84 21 02 c0       	push   0xc0022184
c00107d5:	55                   	push   ebp
c00107d6:	e8 75 ff fe ff       	call   c0000750 <strcmp>
c00107db:	83 c4 10             	add    esp,0x10
c00107de:	85 c0                	test   eax,eax
c00107e0:	75 0f                	jne    c00107f1 <CPU::detectFeatures()+0x345>
c00107e2:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c00107ec:	e9 86 00 00 00       	jmp    c0010877 <CPU::detectFeatures()+0x3cb>
c00107f1:	50                   	push   eax
c00107f2:	50                   	push   eax
c00107f3:	68 91 21 02 c0       	push   0xc0022191
c00107f8:	55                   	push   ebp
c00107f9:	e8 52 ff fe ff       	call   c0000750 <strcmp>
c00107fe:	83 c4 10             	add    esp,0x10
c0010801:	85 c0                	test   eax,eax
c0010803:	75 0c                	jne    c0010811 <CPU::detectFeatures()+0x365>
c0010805:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c001080f:	eb 66                	jmp    c0010877 <CPU::detectFeatures()+0x3cb>
c0010811:	50                   	push   eax
c0010812:	50                   	push   eax
c0010813:	68 9e 21 02 c0       	push   0xc002219e
c0010818:	55                   	push   ebp
c0010819:	e8 32 ff fe ff       	call   c0000750 <strcmp>
c001081e:	83 c4 10             	add    esp,0x10
c0010821:	85 c0                	test   eax,eax
c0010823:	75 0c                	jne    c0010831 <CPU::detectFeatures()+0x385>
c0010825:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c001082f:	eb 46                	jmp    c0010877 <CPU::detectFeatures()+0x3cb>
c0010831:	57                   	push   edi
c0010832:	57                   	push   edi
c0010833:	68 ab 21 02 c0       	push   0xc00221ab
c0010838:	55                   	push   ebp
c0010839:	e8 12 ff fe ff       	call   c0000750 <strcmp>
c001083e:	83 c4 10             	add    esp,0x10
c0010841:	85 c0                	test   eax,eax
c0010843:	74 e0                	je     c0010825 <CPU::detectFeatures()+0x379>
c0010845:	56                   	push   esi
c0010846:	56                   	push   esi
c0010847:	68 b8 21 02 c0       	push   0xc00221b8
c001084c:	55                   	push   ebp
c001084d:	e8 fe fe fe ff       	call   c0000750 <strcmp>
c0010852:	83 c4 10             	add    esp,0x10
c0010855:	85 c0                	test   eax,eax
c0010857:	74 cc                	je     c0010825 <CPU::detectFeatures()+0x379>
c0010859:	51                   	push   ecx
c001085a:	51                   	push   ecx
c001085b:	68 c5 21 02 c0       	push   0xc00221c5
c0010860:	55                   	push   ebp
c0010861:	e8 ea fe fe ff       	call   c0000750 <strcmp>
c0010866:	83 c4 10             	add    esp,0x10
c0010869:	85 c0                	test   eax,eax
c001086b:	74 b8                	je     c0010825 <CPU::detectFeatures()+0x379>
c001086d:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c0010877:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c001087c:	0f 86 be 00 00 00    	jbe    c0010940 <CPU::detectFeatures()+0x494>
c0010882:	83 ec 0c             	sub    esp,0xc
c0010885:	68 80 00 00 00       	push   0x80
c001088a:	e8 31 fb ff ff       	call   c00103c0 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c001088f:	83 e0 01             	and    eax,0x1
c0010892:	c1 e0 06             	shl    eax,0x6
c0010895:	89 c2                	mov    edx,eax
c0010897:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c001089d:	83 e0 bf             	and    eax,0xffffffbf
c00108a0:	09 d0                	or     eax,edx
c00108a2:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c00108a8:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c00108af:	e8 0c fb ff ff       	call   c00103c0 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c00108b4:	83 e0 01             	and    eax,0x1
c00108b7:	c1 e0 04             	shl    eax,0x4
c00108ba:	89 c2                	mov    edx,eax
c00108bc:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c00108c2:	83 e0 ef             	and    eax,0xffffffef
c00108c5:	09 d0                	or     eax,edx
c00108c7:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c00108cd:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c00108d4:	e8 e7 fa ff ff       	call   c00103c0 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c00108d9:	89 c2                	mov    edx,eax
c00108db:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c00108e1:	c1 e2 07             	shl    edx,0x7
c00108e4:	83 e0 7f             	and    eax,0x7f
c00108e7:	09 d0                	or     eax,edx
c00108e9:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c00108ef:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c00108f6:	e8 f3 fa ff ff       	call   c00103ee <CPU::cpuidCheckExtendedECX(unsigned int)>
c00108fb:	83 e0 01             	and    eax,0x1
c00108fe:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0010905:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c001090b:	83 e0 f7             	and    eax,0xfffffff7
c001090e:	09 d0                	or     eax,edx
c0010910:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c0010916:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c001091d:	e8 cc fa ff ff       	call   c00103ee <CPU::cpuidCheckExtendedECX(unsigned int)>
c0010922:	83 c4 10             	add    esp,0x10
c0010925:	83 e0 01             	and    eax,0x1
c0010928:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c001092f:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c0010935:	83 e0 fb             	and    eax,0xfffffffb
c0010938:	09 d0                	or     eax,edx
c001093a:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c0010940:	83 ec 0c             	sub    esp,0xc
c0010943:	8d 44 24 28          	lea    eax,[esp+0x28]
c0010947:	50                   	push   eax
c0010948:	8d 44 24 28          	lea    eax,[esp+0x28]
c001094c:	50                   	push   eax
c001094d:	8d 7c 24 28          	lea    edi,[esp+0x28]
c0010951:	57                   	push   edi
c0010952:	8d 74 24 28          	lea    esi,[esp+0x28]
c0010956:	56                   	push   esi
c0010957:	6a 01                	push   0x1
c0010959:	e8 82 f9 ff ff       	call   c00102e0 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001095e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010962:	8a 93 5c 01 00 00    	mov    dl,BYTE PTR [ebx+0x15c]
c0010968:	89 c1                	mov    ecx,eax
c001096a:	83 e2 f0             	and    edx,0xfffffff0
c001096d:	83 e1 0f             	and    ecx,0xf
c0010970:	09 ca                	or     edx,ecx
c0010972:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c0010978:	89 c2                	mov    edx,eax
c001097a:	c1 ea 04             	shr    edx,0x4
c001097d:	83 e2 0f             	and    edx,0xf
c0010980:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0010984:	89 d1                	mov    ecx,edx
c0010986:	83 c4 20             	add    esp,0x20
c0010989:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c001098f:	c1 e1 06             	shl    ecx,0x6
c0010992:	81 e2 3f c0 ff ff    	and    edx,0xffffc03f
c0010998:	09 ca                	or     edx,ecx
c001099a:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c00109a1:	89 c2                	mov    edx,eax
c00109a3:	8a 8b 5d 01 00 00    	mov    cl,BYTE PTR [ebx+0x15d]
c00109a9:	c1 ea 08             	shr    edx,0x8
c00109ac:	83 e1 3f             	and    ecx,0x3f
c00109af:	83 e2 0f             	and    edx,0xf
c00109b2:	89 d5                	mov    ebp,edx
c00109b4:	83 e5 03             	and    ebp,0x3
c00109b7:	c1 e5 06             	shl    ebp,0x6
c00109ba:	09 e9                	or     ecx,ebp
c00109bc:	89 d5                	mov    ebp,edx
c00109be:	88 8b 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],cl
c00109c4:	c1 ed 02             	shr    ebp,0x2
c00109c7:	8a 8b 5e 01 00 00    	mov    cl,BYTE PTR [ebx+0x15e]
c00109cd:	83 e1 c0             	and    ecx,0xffffffc0
c00109d0:	09 e9                	or     ecx,ebp
c00109d2:	89 c5                	mov    ebp,eax
c00109d4:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c00109da:	c1 ed 08             	shr    ebp,0x8
c00109dd:	8a 8b 5c 01 00 00    	mov    cl,BYTE PTR [ebx+0x15c]
c00109e3:	83 e5 30             	and    ebp,0x30
c00109e6:	83 e1 cf             	and    ecx,0xffffffcf
c00109e9:	09 e9                	or     ecx,ebp
c00109eb:	83 fa 06             	cmp    edx,0x6
c00109ee:	88 8b 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],cl
c00109f4:	74 05                	je     c00109fb <CPU::detectFeatures()+0x54f>
c00109f6:	83 fa 0f             	cmp    edx,0xf
c00109f9:	75 64                	jne    c0010a5f <CPU::detectFeatures()+0x5b3>
c00109fb:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c0010a01:	89 c1                	mov    ecx,eax
c0010a03:	81 e5 3f c0 ff ff    	and    ebp,0xffffc03f
c0010a09:	c1 e9 10             	shr    ecx,0x10
c0010a0c:	c1 e1 04             	shl    ecx,0x4
c0010a0f:	0b 4c 24 0c          	or     ecx,DWORD PTR [esp+0xc]
c0010a13:	0f b6 c9             	movzx  ecx,cl
c0010a16:	c1 e1 06             	shl    ecx,0x6
c0010a19:	09 e9                	or     ecx,ebp
c0010a1b:	83 fa 0f             	cmp    edx,0xf
c0010a1e:	66 89 8b 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],cx
c0010a25:	75 38                	jne    c0010a5f <CPU::detectFeatures()+0x5b3>
c0010a27:	c1 e8 14             	shr    eax,0x14
c0010a2a:	83 c0 0f             	add    eax,0xf
c0010a2d:	0f b6 c0             	movzx  eax,al
c0010a30:	89 c2                	mov    edx,eax
c0010a32:	c1 e8 02             	shr    eax,0x2
c0010a35:	83 e2 03             	and    edx,0x3
c0010a38:	89 d1                	mov    ecx,edx
c0010a3a:	8a 93 5d 01 00 00    	mov    dl,BYTE PTR [ebx+0x15d]
c0010a40:	c1 e1 06             	shl    ecx,0x6
c0010a43:	83 e2 3f             	and    edx,0x3f
c0010a46:	09 ca                	or     edx,ecx
c0010a48:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c0010a4e:	8a 93 5e 01 00 00    	mov    dl,BYTE PTR [ebx+0x15e]
c0010a54:	83 e2 c0             	and    edx,0xffffffc0
c0010a57:	09 d0                	or     eax,edx
c0010a59:	88 83 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],al
c0010a5f:	83 ec 0c             	sub    esp,0xc
c0010a62:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c0010a68:	83 c8 07             	or     eax,0x7
c0010a6b:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c0010a71:	8d 44 24 28          	lea    eax,[esp+0x28]
c0010a75:	50                   	push   eax
c0010a76:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c0010a7a:	55                   	push   ebp
c0010a7b:	57                   	push   edi
c0010a7c:	56                   	push   esi
c0010a7d:	68 00 00 00 80       	push   0x80000000
c0010a82:	e8 59 f8 ff ff       	call   c00102e0 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0010a87:	83 c4 20             	add    esp,0x20
c0010a8a:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c0010a92:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0010a96:	76 1e                	jbe    c0010ab6 <CPU::detectFeatures()+0x60a>
c0010a98:	83 ec 0c             	sub    esp,0xc
c0010a9b:	50                   	push   eax
c0010a9c:	55                   	push   ebp
c0010a9d:	57                   	push   edi
c0010a9e:	56                   	push   esi
c0010a9f:	68 01 00 00 80       	push   0x80000001
c0010aa4:	e8 37 f8 ff ff       	call   c00102e0 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0010aa9:	81 a3 8c 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x118c],0xfffe5fff
c0010ab3:	83 c4 20             	add    esp,0x20
c0010ab6:	52                   	push   edx
c0010ab7:	52                   	push   edx
c0010ab8:	68 d1 21 02 c0       	push   0xc00221d1
c0010abd:	53                   	push   ebx
c0010abe:	e8 99 c0 ff ff       	call   c000cb5c <Device::setName(char const*)>
c0010ac3:	83 c4 10             	add    esp,0x10
c0010ac6:	eb 69                	jmp    c0010b31 <CPU::detectFeatures()+0x685>
c0010ac8:	50                   	push   eax
c0010ac9:	50                   	push   eax
c0010aca:	68 36 21 02 c0       	push   0xc0022136
c0010acf:	55                   	push   ebp
c0010ad0:	e8 6b fb fe ff       	call   c0000640 <strcpy>
c0010ad5:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c0010adf:	e8 df f6 fe ff       	call   c00001c3 <is486>
c0010ae4:	83 c4 10             	add    esp,0x10
c0010ae7:	85 c0                	test   eax,eax
c0010ae9:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c0010aef:	74 1f                	je     c0010b10 <CPU::detectFeatures()+0x664>
c0010af1:	83 c8 07             	or     eax,0x7
c0010af4:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c0010afa:	0f 20 c0             	mov    eax,cr0
c0010afd:	83 e0 14             	and    eax,0x14
c0010b00:	83 f8 04             	cmp    eax,0x4
c0010b03:	75 10                	jne    c0010b15 <CPU::detectFeatures()+0x669>
c0010b05:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c0010b0b:	83 e0 fd             	and    eax,0xfffffffd
c0010b0e:	eb 1b                	jmp    c0010b2b <CPU::detectFeatures()+0x67f>
c0010b10:	83 e0 f8             	and    eax,0xfffffff8
c0010b13:	eb df                	jmp    c0010af4 <CPU::detectFeatures()+0x648>
c0010b15:	e8 84 f6 fe ff       	call   c000019e <hasLegacyFPU>
c0010b1a:	83 e0 01             	and    eax,0x1
c0010b1d:	8d 14 00             	lea    edx,[eax+eax*1]
c0010b20:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c0010b26:	83 e0 fd             	and    eax,0xfffffffd
c0010b29:	09 d0                	or     eax,edx
c0010b2b:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c0010b31:	f6 83 8e 11 00 00 02 	test   BYTE PTR [ebx+0x118e],0x2
c0010b38:	74 17                	je     c0010b51 <CPU::detectFeatures()+0x6a5>
c0010b3a:	8b 15 b8 6e 02 c0    	mov    edx,DWORD PTR ds:0xc0026eb8
c0010b40:	8a 82 6c 01 00 00    	mov    al,BYTE PTR [edx+0x16c]
c0010b46:	83 c8 10             	or     eax,0x10
c0010b49:	88 82 6c 01 00 00    	mov    BYTE PTR [edx+0x16c],al
c0010b4f:	eb 20                	jmp    c0010b71 <CPU::detectFeatures()+0x6c5>
c0010b51:	e8 48 f6 fe ff       	call   c000019e <hasLegacyFPU>
c0010b56:	83 e0 01             	and    eax,0x1
c0010b59:	8d 14 00             	lea    edx,[eax+eax*1]
c0010b5c:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c0010b62:	83 e0 fd             	and    eax,0xfffffffd
c0010b65:	09 d0                	or     eax,edx
c0010b67:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c0010b6d:	a8 02                	test   al,0x2
c0010b6f:	75 c9                	jne    c0010b3a <CPU::detectFeatures()+0x68e>
c0010b71:	c6 83 90 11 00 00 00 	mov    BYTE PTR [ebx+0x1190],0x0
c0010b78:	83 c4 2c             	add    esp,0x2c
c0010b7b:	5b                   	pop    ebx
c0010b7c:	5e                   	pop    esi
c0010b7d:	5f                   	pop    edi
c0010b7e:	5d                   	pop    ebp
c0010b7f:	c3                   	ret    

c0010b80 <CPU::setupSMEP()>:
c0010b80:	0f 20 e0             	mov    eax,cr4
c0010b83:	0d 00 00 10 00       	or     eax,0x100000
c0010b88:	0f 22 e0             	mov    cr4,eax
c0010b8b:	c3                   	ret    

c0010b8c <CPU::setupUMIP()>:
c0010b8c:	0f 20 e0             	mov    eax,cr4
c0010b8f:	80 cc 08             	or     ah,0x8
c0010b92:	0f 22 e0             	mov    cr4,eax
c0010b95:	c3                   	ret    

c0010b96 <CPU::setupTSC()>:
c0010b96:	0f 20 e0             	mov    eax,cr4
c0010b99:	83 c8 04             	or     eax,0x4
c0010b9c:	0f 22 e0             	mov    cr4,eax
c0010b9f:	c3                   	ret    

c0010ba0 <CPU::setupLargePages()>:
c0010ba0:	0f 20 e0             	mov    eax,cr4
c0010ba3:	83 c8 10             	or     eax,0x10
c0010ba6:	0f 22 e0             	mov    cr4,eax
c0010ba9:	c3                   	ret    

c0010baa <CPU::setupPAT()>:
c0010baa:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0010baf:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c0010bb6:	74 2c                	je     c0010be4 <CPU::setupPAT()+0x3a>
c0010bb8:	53                   	push   ebx
c0010bb9:	83 ec 10             	sub    esp,0x10
c0010bbc:	68 77 02 00 00       	push   0x277
c0010bc1:	50                   	push   eax
c0010bc2:	e8 f9 64 ff ff       	call   c00070c0 <Computer::rdmsr(unsigned int)>
c0010bc7:	83 e2 f8             	and    edx,0xfffffff8
c0010bca:	83 ca 01             	or     edx,0x1
c0010bcd:	52                   	push   edx
c0010bce:	50                   	push   eax
c0010bcf:	68 77 02 00 00       	push   0x277
c0010bd4:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0010bda:	e8 0d 65 ff ff       	call   c00070ec <Computer::wrmsr(unsigned int, unsigned long long)>
c0010bdf:	83 c4 28             	add    esp,0x28
c0010be2:	5b                   	pop    ebx
c0010be3:	c3                   	ret    
c0010be4:	c3                   	ret    
c0010be5:	90                   	nop

c0010be6 <CPU::setupMTRR()>:
c0010be6:	c3                   	ret    
c0010be7:	90                   	nop

c0010be8 <CPU::setupGlobalPages()>:
c0010be8:	0f 20 e0             	mov    eax,cr4
c0010beb:	0c 80                	or     al,0x80
c0010bed:	0f 22 e0             	mov    cr4,eax
c0010bf0:	c3                   	ret    
c0010bf1:	90                   	nop

c0010bf2 <CPU::allowUsermodeDataAccess()>:
c0010bf2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010bf6:	f6 80 8d 11 00 00 10 	test   BYTE PTR [eax+0x118d],0x10
c0010bfd:	74 03                	je     c0010c02 <CPU::allowUsermodeDataAccess()+0x10>
c0010bff:	0f 01 cb             	stac   
c0010c02:	c3                   	ret    
c0010c03:	90                   	nop

c0010c04 <CPU::prohibitUsermodeDataAccess()>:
c0010c04:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010c08:	f6 80 8d 11 00 00 10 	test   BYTE PTR [eax+0x118d],0x10
c0010c0f:	74 03                	je     c0010c14 <CPU::prohibitUsermodeDataAccess()+0x10>
c0010c11:	0f 01 ca             	clac   
c0010c14:	c3                   	ret    
c0010c15:	90                   	nop

c0010c16 <CPU::setupSMAP()>:
c0010c16:	0f 20 e0             	mov    eax,cr4
c0010c19:	0d 00 00 20 00       	or     eax,0x200000
c0010c1e:	0f 22 e0             	mov    cr4,eax
c0010c21:	eb e1                	jmp    c0010c04 <CPU::prohibitUsermodeDataAccess()>
c0010c23:	90                   	nop

c0010c24 <CPU::setupFeatures()>:
c0010c24:	53                   	push   ebx
c0010c25:	83 ec 08             	sub    esp,0x8
c0010c28:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010c2c:	f6 83 8d 11 00 00 08 	test   BYTE PTR [ebx+0x118d],0x8
c0010c33:	74 18                	je     c0010c4d <CPU::setupFeatures()+0x29>
c0010c35:	83 ec 0c             	sub    esp,0xc
c0010c38:	68 dd 21 02 c0       	push   0xc00221dd
c0010c3d:	e8 03 9d ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0010c42:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010c45:	e8 42 ff ff ff       	call   c0010b8c <CPU::setupUMIP()>
c0010c4a:	83 c4 10             	add    esp,0x10
c0010c4d:	f6 83 8c 11 00 00 02 	test   BYTE PTR [ebx+0x118c],0x2
c0010c54:	74 18                	je     c0010c6e <CPU::setupFeatures()+0x4a>
c0010c56:	83 ec 0c             	sub    esp,0xc
c0010c59:	68 e7 21 02 c0       	push   0xc00221e7
c0010c5e:	e8 e2 9c ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0010c63:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010c66:	e8 2b ff ff ff       	call   c0010b96 <CPU::setupTSC()>
c0010c6b:	83 c4 10             	add    esp,0x10
c0010c6e:	f6 83 8c 11 00 00 08 	test   BYTE PTR [ebx+0x118c],0x8
c0010c75:	74 18                	je     c0010c8f <CPU::setupFeatures()+0x6b>
c0010c77:	83 ec 0c             	sub    esp,0xc
c0010c7a:	68 f0 21 02 c0       	push   0xc00221f0
c0010c7f:	e8 c1 9c ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0010c84:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010c87:	e8 14 ff ff ff       	call   c0010ba0 <CPU::setupLargePages()>
c0010c8c:	83 c4 10             	add    esp,0x10
c0010c8f:	f6 83 8c 11 00 00 10 	test   BYTE PTR [ebx+0x118c],0x10
c0010c96:	74 18                	je     c0010cb0 <CPU::setupFeatures()+0x8c>
c0010c98:	83 ec 0c             	sub    esp,0xc
c0010c9b:	68 f9 21 02 c0       	push   0xc00221f9
c0010ca0:	e8 a0 9c ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0010ca5:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010ca8:	e8 3b ff ff ff       	call   c0010be8 <CPU::setupGlobalPages()>
c0010cad:	83 c4 10             	add    esp,0x10
c0010cb0:	f6 83 8c 11 00 00 20 	test   BYTE PTR [ebx+0x118c],0x20
c0010cb7:	74 18                	je     c0010cd1 <CPU::setupFeatures()+0xad>
c0010cb9:	83 ec 0c             	sub    esp,0xc
c0010cbc:	68 0b 22 02 c0       	push   0xc002220b
c0010cc1:	e8 7f 9c ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0010cc6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010cc9:	e8 dc fe ff ff       	call   c0010baa <CPU::setupPAT()>
c0010cce:	83 c4 10             	add    esp,0x10
c0010cd1:	f6 83 8e 11 00 00 01 	test   BYTE PTR [ebx+0x118e],0x1
c0010cd8:	74 11                	je     c0010ceb <CPU::setupFeatures()+0xc7>
c0010cda:	c7 44 24 10 14 22 02 c0 	mov    DWORD PTR [esp+0x10],0xc0022214
c0010ce2:	83 c4 08             	add    esp,0x8
c0010ce5:	5b                   	pop    ebx
c0010ce6:	e9 5a 9c ff ff       	jmp    c000a945 <Dbg::kprintf(char const*, ...)>
c0010ceb:	83 c4 08             	add    esp,0x8
c0010cee:	5b                   	pop    ebx
c0010cef:	c3                   	ret    

c0010cf0 <CPU::open(int, int, void*)>:
c0010cf0:	55                   	push   ebp
c0010cf1:	57                   	push   edi
c0010cf2:	56                   	push   esi
c0010cf3:	53                   	push   ebx
c0010cf4:	83 ec 18             	sub    esp,0x18
c0010cf7:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0010cfb:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0010cff:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0010d03:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c0010d09:	89 bb 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edi
c0010d0f:	8d ab 7c 11 00 00    	lea    ebp,[ebx+0x117c]
c0010d15:	50                   	push   eax
c0010d16:	e8 a3 66 ff ff       	call   c00073be <GDT::setup()>
c0010d1b:	83 c4 0c             	add    esp,0xc
c0010d1e:	6a 00                	push   0x0
c0010d20:	68 ef be ad de       	push   0xdeadbeef
c0010d25:	55                   	push   ebp
c0010d26:	e8 5d 82 ff ff       	call   c0008f88 <TSS::setup(unsigned long, unsigned long)>
c0010d2b:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0010d2e:	e8 35 82 ff ff       	call   c0008f68 <TSS::flush()>
c0010d33:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c0010d39:	89 04 24             	mov    DWORD PTR [esp],eax
c0010d3c:	e8 e1 68 ff ff       	call   c0007622 <IDT::setup()>
c0010d41:	b8 00 04 00 00       	mov    eax,0x400
c0010d46:	0f 23 f8             	mov    db7,eax
c0010d49:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c0010d53:	e8 67 70 ff ff       	call   c0007dbf <Phys::allocatePage()>
c0010d58:	83 c4 10             	add    esp,0x10
c0010d5b:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0010d61:	85 f6                	test   esi,esi
c0010d63:	89 38                	mov    DWORD PTR [eax],edi
c0010d65:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0010d6b:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0010d6e:	74 10                	je     c0010d80 <CPU::open(int, int, void*)+0x90>
c0010d70:	50                   	push   eax
c0010d71:	50                   	push   eax
c0010d72:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0010d78:	56                   	push   esi
c0010d79:	e8 30 8b ff ff       	call   c00098ae <VAS::setCPUSpecific(unsigned long)>
c0010d7e:	eb 0d                	jmp    c0010d8d <CPU::open(int, int, void*)+0x9d>
c0010d80:	83 ec 0c             	sub    esp,0xc
c0010d83:	68 1e 22 02 c0       	push   0xc002221e
c0010d88:	e8 9e 08 00 00       	call   c001162b <KePanic(char const*)>
c0010d8d:	83 c4 10             	add    esp,0x10
c0010d90:	83 ec 0c             	sub    esp,0xc
c0010d93:	68 2c 22 02 c0       	push   0xc002222c
c0010d98:	e8 8e 01 00 00       	call   c0010f2b <KeSetBootMessage(char const*)>
c0010d9d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010da0:	e8 07 f7 ff ff       	call   c00104ac <CPU::detectFeatures()>
c0010da5:	c7 04 24 4f 22 02 c0 	mov    DWORD PTR [esp],0xc002224f
c0010dac:	e8 7a 01 00 00       	call   c0010f2b <KeSetBootMessage(char const*)>
c0010db1:	e8 af 73 00 00       	call   c0018165 <HalInitialise()>
c0010db6:	a1 d0 6e 02 c0       	mov    eax,ds:0xc0026ed0
c0010dbb:	83 e0 10             	and    eax,0x10
c0010dbe:	83 f8 01             	cmp    eax,0x1
c0010dc1:	19 c0                	sbb    eax,eax
c0010dc3:	83 e0 46             	and    eax,0x46
c0010dc6:	83 c0 1e             	add    eax,0x1e
c0010dc9:	89 04 24             	mov    DWORD PTR [esp],eax
c0010dcc:	e8 28 d6 ff ff       	call   c000e3f9 <setupTimer(int)>
c0010dd1:	83 c4 10             	add    esp,0x10
c0010dd4:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c0010dda:	f6 05 d0 6e 02 c0 20 	test   BYTE PTR ds:0xc0026ed0,0x20
c0010de1:	74 0c                	je     c0010def <CPU::open(int, int, void*)+0xff>
c0010de3:	83 ec 0c             	sub    esp,0xc
c0010de6:	53                   	push   ebx
c0010de7:	e8 38 fe ff ff       	call   c0010c24 <CPU::setupFeatures()>
c0010dec:	83 c4 10             	add    esp,0x10
c0010def:	83 c4 0c             	add    esp,0xc
c0010df2:	31 c0                	xor    eax,eax
c0010df4:	5b                   	pop    ebx
c0010df5:	5e                   	pop    esi
c0010df6:	5f                   	pop    edi
c0010df7:	5d                   	pop    ebp
c0010df8:	c3                   	ret    

c0010df9 <KeInitialiseAtexit()>:
c0010df9:	83 ec 10             	sub    esp,0x10
c0010dfc:	c7 05 a0 bd 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002bda0,0x0
c0010e06:	6a 60                	push   0x60
c0010e08:	6a 00                	push   0x0
c0010e0a:	68 20 be 02 c0       	push   0xc002be20
c0010e0f:	e8 dc f6 fe ff       	call   c00004f0 <memset>
c0010e14:	83 c4 1c             	add    esp,0x1c
c0010e17:	c3                   	ret    

c0010e18 <KeRegisterAtexit(void (*)(void*), void*)>:
c0010e18:	a1 a0 bd 02 c0       	mov    eax,ds:0xc002bda0
c0010e1d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0010e21:	89 14 85 20 be 02 c0 	mov    DWORD PTR [eax*4-0x3ffd41e0],edx
c0010e28:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010e2c:	89 14 85 c0 bd 02 c0 	mov    DWORD PTR [eax*4-0x3ffd4240],edx
c0010e33:	40                   	inc    eax
c0010e34:	a3 a0 bd 02 c0       	mov    ds:0xc002bda0,eax
c0010e39:	83 f8 17             	cmp    eax,0x17
c0010e3c:	7e 0d                	jle    c0010e4b <KeRegisterAtexit(void (*)(void*), void*)+0x33>
c0010e3e:	c7 44 24 04 90 22 02 c0 	mov    DWORD PTR [esp+0x4],0xc0022290
c0010e46:	e9 e0 07 00 00       	jmp    c001162b <KePanic(char const*)>
c0010e4b:	c3                   	ret    

c0010e4c <KeExecuteAtexit()>:
c0010e4c:	53                   	push   ebx
c0010e4d:	31 db                	xor    ebx,ebx
c0010e4f:	83 ec 08             	sub    esp,0x8
c0010e52:	39 1d a0 bd 02 c0    	cmp    DWORD PTR ds:0xc002bda0,ebx
c0010e58:	7e 50                	jle    c0010eaa <KeExecuteAtexit()+0x5e>
c0010e5a:	8b 04 9d 20 be 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd41e0]
c0010e61:	85 c0                	test   eax,eax
c0010e63:	74 42                	je     c0010ea7 <KeExecuteAtexit()+0x5b>
c0010e65:	51                   	push   ecx
c0010e66:	50                   	push   eax
c0010e67:	53                   	push   ebx
c0010e68:	68 a9 22 02 c0       	push   0xc00222a9
c0010e6d:	e8 d3 9a ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0010e72:	58                   	pop    eax
c0010e73:	ff 34 9d c0 bd 02 c0 	push   DWORD PTR [ebx*4-0x3ffd4240]
c0010e7a:	ff 14 9d 20 be 02 c0 	call   DWORD PTR [ebx*4-0x3ffd41e0]
c0010e81:	c7 04 24 cb 22 02 c0 	mov    DWORD PTR [esp],0xc00222cb
c0010e88:	e8 b8 9a ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0010e8d:	c7 04 24 2b 34 02 c0 	mov    DWORD PTR [esp],0xc002342b
c0010e94:	c7 04 9d 20 be 02 c0 00 00 00 00 	mov    DWORD PTR [ebx*4-0x3ffd41e0],0x0
c0010e9f:	e8 a1 9a ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0010ea4:	83 c4 10             	add    esp,0x10
c0010ea7:	43                   	inc    ebx
c0010ea8:	eb a8                	jmp    c0010e52 <KeExecuteAtexit()+0x6>
c0010eaa:	83 c4 08             	add    esp,0x8
c0010ead:	5b                   	pop    ebx
c0010eae:	c3                   	ret    

c0010eaf <KeDisplaySplashScreen()>:
c0010eaf:	55                   	push   ebp
c0010eb0:	bd 05 00 00 00       	mov    ebp,0x5
c0010eb5:	57                   	push   edi
c0010eb6:	bf 0a 00 00 00       	mov    edi,0xa
c0010ebb:	56                   	push   esi
c0010ebc:	31 f6                	xor    esi,esi
c0010ebe:	53                   	push   ebx
c0010ebf:	31 db                	xor    ebx,ebx
c0010ec1:	83 ec 0c             	sub    esp,0xc
c0010ec4:	0f b6 96 80 36 02 c0 	movzx  edx,BYTE PTR [esi-0x3ffdc980]
c0010ecb:	89 d0                	mov    eax,edx
c0010ecd:	85 d2                	test   edx,edx
c0010ecf:	74 52                	je     c0010f23 <KeDisplaySplashScreen()+0x74>
c0010ed1:	80 bb b6 36 02 c0 db 	cmp    BYTE PTR [ebx-0x3ffdc94a],0xdb
c0010ed8:	75 13                	jne    c0010eed <KeDisplaySplashScreen()+0x3e>
c0010eda:	0f b6 8b b5 36 02 c0 	movzx  ecx,BYTE PTR [ebx-0x3ffdc94b]
c0010ee1:	83 e1 fe             	and    ecx,0xfffffffe
c0010ee4:	81 f9 ba 00 00 00    	cmp    ecx,0xba
c0010eea:	75 01                	jne    c0010eed <KeDisplaySplashScreen()+0x3e>
c0010eec:	47                   	inc    edi
c0010eed:	83 fa 0d             	cmp    edx,0xd
c0010ef0:	74 28                	je     c0010f1a <KeDisplaySplashScreen()+0x6b>
c0010ef2:	83 fa 0a             	cmp    edx,0xa
c0010ef5:	75 0a                	jne    c0010f01 <KeDisplaySplashScreen()+0x52>
c0010ef7:	45                   	inc    ebp
c0010ef8:	bf 0a 00 00 00       	mov    edi,0xa
c0010efd:	31 db                	xor    ebx,ebx
c0010eff:	eb 19                	jmp    c0010f1a <KeDisplaySplashScreen()+0x6b>
c0010f01:	83 ec 0c             	sub    esp,0xc
c0010f04:	8d 14 1f             	lea    edx,[edi+ebx*1]
c0010f07:	55                   	push   ebp
c0010f08:	0f be c0             	movsx  eax,al
c0010f0b:	52                   	push   edx
c0010f0c:	43                   	inc    ebx
c0010f0d:	6a 00                	push   0x0
c0010f0f:	6a 0e                	push   0xe
c0010f11:	50                   	push   eax
c0010f12:	e8 cd 7e 00 00       	call   c0018de4 <HalConsoleWriteCharacter(char, int, int, int, int)>
c0010f17:	83 c4 20             	add    esp,0x20
c0010f1a:	46                   	inc    esi
c0010f1b:	81 fe 42 01 00 00    	cmp    esi,0x142
c0010f21:	75 a1                	jne    c0010ec4 <KeDisplaySplashScreen()+0x15>
c0010f23:	83 c4 0c             	add    esp,0xc
c0010f26:	5b                   	pop    ebx
c0010f27:	5e                   	pop    esi
c0010f28:	5f                   	pop    edi
c0010f29:	5d                   	pop    ebp
c0010f2a:	c3                   	ret    

c0010f2b <KeSetBootMessage(char const*)>:
c0010f2b:	57                   	push   edi
c0010f2c:	56                   	push   esi
c0010f2d:	53                   	push   ebx
c0010f2e:	81 ec a4 00 00 00    	sub    esp,0xa4
c0010f34:	8b 9c 24 b4 00 00 00 	mov    ebx,DWORD PTR [esp+0xb4]
c0010f3b:	68 9e 00 00 00       	push   0x9e
c0010f40:	6a 00                	push   0x0
c0010f42:	8d 74 24 0e          	lea    esi,[esp+0xe]
c0010f46:	56                   	push   esi
c0010f47:	e8 a4 f5 fe ff       	call   c00004f0 <memset>
c0010f4c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010f4f:	e8 1c f6 fe ff       	call   c0000570 <strlen>
c0010f54:	ba 50 00 00 00       	mov    edx,0x50
c0010f59:	83 c4 10             	add    esp,0x10
c0010f5c:	29 c2                	sub    edx,eax
c0010f5e:	31 c9                	xor    ecx,ecx
c0010f60:	83 e2 fe             	and    edx,0xfffffffe
c0010f63:	01 f2                	add    edx,esi
c0010f65:	66 0f be 04 0b       	movsx  ax,BYTE PTR [ebx+ecx*1]
c0010f6a:	84 c0                	test   al,al
c0010f6c:	74 0a                	je     c0010f78 <KeSetBootMessage(char const*)+0x4d>
c0010f6e:	80 cc 0f             	or     ah,0xf
c0010f71:	66 89 04 4a          	mov    WORD PTR [edx+ecx*2],ax
c0010f75:	41                   	inc    ecx
c0010f76:	eb ed                	jmp    c0010f65 <KeSetBootMessage(char const*)+0x3a>
c0010f78:	bf 80 8c 0b c2       	mov    edi,0xc20b8c80
c0010f7d:	b9 9e 00 00 00       	mov    ecx,0x9e
c0010f82:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010f84:	81 c4 a0 00 00 00    	add    esp,0xa0
c0010f8a:	5b                   	pop    ebx
c0010f8b:	5e                   	pop    esi
c0010f8c:	5f                   	pop    edi
c0010f8d:	c3                   	ret    
c0010f8e:	66 90                	xchg   ax,ax

c0010f90 <Krnl::handlePowerButton()>:
c0010f90:	83 ec 0c             	sub    esp,0xc
c0010f93:	e8 ee 06 00 00       	call   c0011686 <KeHandlePowerButton()>
c0010f98:	90                   	nop
c0010f99:	83 c4 0c             	add    esp,0xc
c0010f9c:	c3                   	ret    
c0010f9d:	8d 76 00             	lea    esi,[esi+0x0]

c0010fa0 <Krnl::handleSleepButton()>:
c0010fa0:	83 ec 0c             	sub    esp,0xc
c0010fa3:	e8 13 07 00 00       	call   c00116bb <KeHandleSleepButton()>
c0010fa8:	90                   	nop
c0010fa9:	83 c4 0c             	add    esp,0xc
c0010fac:	c3                   	ret    

c0010fad <KeCalculateCRC32(unsigned char*, int)>:
c0010fad:	53                   	push   ebx
c0010fae:	83 c8 ff             	or     eax,0xffffffff
c0010fb1:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0010fb5:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0010fb9:	01 cb                	add    ebx,ecx
c0010fbb:	39 d9                	cmp    ecx,ebx
c0010fbd:	74 15                	je     c0010fd4 <KeCalculateCRC32(unsigned char*, int)+0x27>
c0010fbf:	41                   	inc    ecx
c0010fc0:	8a 51 ff             	mov    dl,BYTE PTR [ecx-0x1]
c0010fc3:	31 c2                	xor    edx,eax
c0010fc5:	c1 e8 08             	shr    eax,0x8
c0010fc8:	0f b6 d2             	movzx  edx,dl
c0010fcb:	33 04 95 e0 37 02 c0 	xor    eax,DWORD PTR [edx*4-0x3ffdc820]
c0010fd2:	eb e7                	jmp    c0010fbb <KeCalculateCRC32(unsigned char*, int)+0xe>
c0010fd4:	f7 d0                	not    eax
c0010fd6:	5b                   	pop    ebx
c0010fd7:	c3                   	ret    

c0010fd8 <EnvVarContainer::getEnv(char const*)>:
c0010fd8:	57                   	push   edi
c0010fd9:	56                   	push   esi
c0010fda:	53                   	push   ebx
c0010fdb:	31 db                	xor    ebx,ebx
c0010fdd:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0010fe1:	39 1e                	cmp    DWORD PTR [esi],ebx
c0010fe3:	7e 2b                	jle    c0011010 <EnvVarContainer::getEnv(char const*)+0x38>
c0010fe5:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c0010fec:	50                   	push   eax
c0010fed:	50                   	push   eax
c0010fee:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0010ff1:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c0010ff4:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0010ff8:	e8 53 f7 fe ff       	call   c0000750 <strcmp>
c0010ffd:	83 c4 10             	add    esp,0x10
c0011000:	85 c0                	test   eax,eax
c0011002:	75 09                	jne    c001100d <EnvVarContainer::getEnv(char const*)+0x35>
c0011004:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0011007:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c001100b:	eb 05                	jmp    c0011012 <EnvVarContainer::getEnv(char const*)+0x3a>
c001100d:	43                   	inc    ebx
c001100e:	eb d1                	jmp    c0010fe1 <EnvVarContainer::getEnv(char const*)+0x9>
c0011010:	31 c0                	xor    eax,eax
c0011012:	5b                   	pop    ebx
c0011013:	5e                   	pop    esi
c0011014:	5f                   	pop    edi
c0011015:	c3                   	ret    

c0011016 <EnvVarContainer::setEnv(char const*, char const*)>:
c0011016:	55                   	push   ebp
c0011017:	57                   	push   edi
c0011018:	56                   	push   esi
c0011019:	53                   	push   ebx
c001101a:	83 ec 28             	sub    esp,0x28
c001101d:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0011021:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c0011025:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0011029:	56                   	push   esi
c001102a:	e8 41 f5 fe ff       	call   c0000570 <strlen>
c001102f:	40                   	inc    eax
c0011030:	89 04 24             	mov    DWORD PTR [esp],eax
c0011033:	e8 7e 6a ff ff       	call   c0007ab6 <malloc>
c0011038:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001103b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001103f:	e8 2c f5 fe ff       	call   c0000570 <strlen>
c0011044:	40                   	inc    eax
c0011045:	89 04 24             	mov    DWORD PTR [esp],eax
c0011048:	e8 69 6a ff ff       	call   c0007ab6 <malloc>
c001104d:	89 34 24             	mov    DWORD PTR [esp],esi
c0011050:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011054:	e8 17 f5 fe ff       	call   c0000570 <strlen>
c0011059:	83 c4 0c             	add    esp,0xc
c001105c:	40                   	inc    eax
c001105d:	50                   	push   eax
c001105e:	6a 00                	push   0x0
c0011060:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0011064:	e8 87 f4 fe ff       	call   c00004f0 <memset>
c0011069:	89 34 24             	mov    DWORD PTR [esp],esi
c001106c:	e8 ff f4 fe ff       	call   c0000570 <strlen>
c0011071:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0011075:	8d 48 01             	lea    ecx,[eax+0x1]
c0011078:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001107a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001107d:	89 de                	mov    esi,ebx
c001107f:	e8 ec f4 fe ff       	call   c0000570 <strlen>
c0011084:	83 c4 0c             	add    esp,0xc
c0011087:	40                   	inc    eax
c0011088:	50                   	push   eax
c0011089:	6a 00                	push   0x0
c001108b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001108f:	e8 5c f4 fe ff       	call   c00004f0 <memset>
c0011094:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011097:	e8 d4 f4 fe ff       	call   c0000570 <strlen>
c001109c:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00110a0:	8d 48 01             	lea    ecx,[eax+0x1]
c00110a3:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00110a5:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00110a8:	40                   	inc    eax
c00110a9:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c00110ac:	c1 e0 03             	shl    eax,0x3
c00110af:	5a                   	pop    edx
c00110b0:	59                   	pop    ecx
c00110b1:	50                   	push   eax
c00110b2:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c00110b5:	e8 e8 69 ff ff       	call   c0007aa2 <realloc>
c00110ba:	8d 74 24 18          	lea    esi,[esp+0x18]
c00110be:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c00110c1:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c00110c4:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c00110c8:	b9 08 00 00 00       	mov    ecx,0x8
c00110cd:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00110cf:	83 c4 2c             	add    esp,0x2c
c00110d2:	5b                   	pop    ebx
c00110d3:	5e                   	pop    esi
c00110d4:	5f                   	pop    edi
c00110d5:	5d                   	pop    ebp
c00110d6:	c3                   	ret    
c00110d7:	90                   	nop

c00110d8 <EnvVarContainer::deleteEnv(char const*)>:
c00110d8:	c3                   	ret    
c00110d9:	90                   	nop

c00110da <EnvVarContainer::loadFrom(char const*, char const*)>:
c00110da:	55                   	push   ebp
c00110db:	57                   	push   edi
c00110dc:	56                   	push   esi
c00110dd:	53                   	push   ebx
c00110de:	81 ec 38 01 00 00    	sub    esp,0x138
c00110e4:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c00110eb:	8b b4 24 54 01 00 00 	mov    esi,DWORD PTR [esp+0x154]
c00110f2:	68 14 01 00 00       	push   0x114
c00110f7:	e8 ba 69 ff ff       	call   c0007ab6 <malloc>
c00110fc:	83 c4 0c             	add    esp,0xc
c00110ff:	89 c3                	mov    ebx,eax
c0011101:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0011104:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001110b:	50                   	push   eax
c001110c:	e8 47 aa ff ff       	call   c000bb58 <File::File(char const*, Process*)>
c0011111:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011114:	e8 21 ad ff ff       	call   c000be3a <File::exists()>
c0011119:	83 c4 10             	add    esp,0x10
c001111c:	84 c0                	test   al,al
c001111e:	75 31                	jne    c0011151 <EnvVarContainer::loadFrom(char const*, char const*)+0x77>
c0011120:	50                   	push   eax
c0011121:	50                   	push   eax
c0011122:	6a 12                	push   0x12
c0011124:	53                   	push   ebx
c0011125:	e8 4c aa ff ff       	call   c000bb76 <File::open(FileOpenMode)>
c001112a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001112c:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c001112f:	89 34 24             	mov    DWORD PTR [esp],esi
c0011132:	e8 39 f4 fe ff       	call   c0000570 <strlen>
c0011137:	5a                   	pop    edx
c0011138:	31 d2                	xor    edx,edx
c001113a:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c001113e:	51                   	push   ecx
c001113f:	56                   	push   esi
c0011140:	52                   	push   edx
c0011141:	50                   	push   eax
c0011142:	53                   	push   ebx
c0011143:	ff d7                	call   edi
c0011145:	83 c4 14             	add    esp,0x14
c0011148:	53                   	push   ebx
c0011149:	e8 86 aa ff ff       	call   c000bbd4 <File::close()>
c001114e:	83 c4 10             	add    esp,0x10
c0011151:	56                   	push   esi
c0011152:	31 f6                	xor    esi,esi
c0011154:	68 00 01 00 00       	push   0x100
c0011159:	6a 00                	push   0x0
c001115b:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c001115f:	50                   	push   eax
c0011160:	e8 8b f3 fe ff       	call   c00004f0 <memset>
c0011165:	5f                   	pop    edi
c0011166:	58                   	pop    eax
c0011167:	6a 01                	push   0x1
c0011169:	53                   	push   ebx
c001116a:	e8 07 aa ff ff       	call   c000bb76 <File::open(FileOpenMode)>
c001116f:	83 c4 10             	add    esp,0x10
c0011172:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001117a:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0011182:	83 ec 0c             	sub    esp,0xc
c0011185:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011187:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c001118b:	51                   	push   ecx
c001118c:	8d 54 24 23          	lea    edx,[esp+0x23]
c0011190:	52                   	push   edx
c0011191:	6a 00                	push   0x0
c0011193:	6a 01                	push   0x1
c0011195:	53                   	push   ebx
c0011196:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0011199:	0f be 44 24 33       	movsx  eax,BYTE PTR [esp+0x33]
c001119e:	83 c4 20             	add    esp,0x20
c00111a1:	89 c2                	mov    edx,eax
c00111a3:	85 c0                	test   eax,eax
c00111a5:	0f 84 36 01 00 00    	je     c00112e1 <EnvVarContainer::loadFrom(char const*, char const*)+0x207>
c00111ab:	83 f8 0d             	cmp    eax,0xd
c00111ae:	0f 84 22 01 00 00    	je     c00112d6 <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c00111b4:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00111b9:	0f 84 f0 00 00 00    	je     c00112af <EnvVarContainer::loadFrom(char const*, char const*)+0x1d5>
c00111bf:	83 f8 0a             	cmp    eax,0xa
c00111c2:	74 13                	je     c00111d7 <EnvVarContainer::loadFrom(char const*, char const*)+0xfd>
c00111c4:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00111c9:	74 0c                	je     c00111d7 <EnvVarContainer::loadFrom(char const*, char const*)+0xfd>
c00111cb:	81 fe fe 00 00 00    	cmp    esi,0xfe
c00111d1:	0f 8e f6 00 00 00    	jle    c00112cd <EnvVarContainer::loadFrom(char const*, char const*)+0x1f3>
c00111d7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00111db:	83 ec 0c             	sub    esp,0xc
c00111de:	8d 78 01             	lea    edi,[eax+0x1]
c00111e1:	57                   	push   edi
c00111e2:	e8 cf 68 ff ff       	call   c0007ab6 <malloc>
c00111e7:	2b 74 24 18          	sub    esi,DWORD PTR [esp+0x18]
c00111eb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00111ef:	8d 56 04             	lea    edx,[esi+0x4]
c00111f2:	89 14 24             	mov    DWORD PTR [esp],edx
c00111f5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00111f9:	e8 b8 68 ff ff       	call   c0007ab6 <malloc>
c00111fe:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0011202:	83 c4 0c             	add    esp,0xc
c0011205:	57                   	push   edi
c0011206:	6a 00                	push   0x0
c0011208:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001120c:	e8 df f2 fe ff       	call   c00004f0 <memset>
c0011211:	8d 74 24 30          	lea    esi,[esp+0x30]
c0011215:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0011219:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001121d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001121f:	83 c4 0c             	add    esp,0xc
c0011222:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0011226:	52                   	push   edx
c0011227:	6a 00                	push   0x0
c0011229:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001122d:	e8 be f2 fe ff       	call   c00004f0 <memset>
c0011232:	8d 74 24 30          	lea    esi,[esp+0x30]
c0011236:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c001123a:	89 34 24             	mov    DWORD PTR [esp],esi
c001123d:	e8 2e f3 fe ff       	call   c0000570 <strlen>
c0011242:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c0011246:	89 c1                	mov    ecx,eax
c0011248:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001124a:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001124d:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0011250:	40                   	inc    eax
c0011251:	83 c4 10             	add    esp,0x10
c0011254:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0011257:	85 d2                	test   edx,edx
c0011259:	75 0c                	jne    c0011267 <EnvVarContainer::loadFrom(char const*, char const*)+0x18d>
c001125b:	83 ec 0c             	sub    esp,0xc
c001125e:	6a 08                	push   0x8
c0011260:	e8 51 68 ff ff       	call   c0007ab6 <malloc>
c0011265:	eb 0c                	jmp    c0011273 <EnvVarContainer::loadFrom(char const*, char const*)+0x199>
c0011267:	c1 e0 03             	shl    eax,0x3
c001126a:	51                   	push   ecx
c001126b:	51                   	push   ecx
c001126c:	50                   	push   eax
c001126d:	52                   	push   edx
c001126e:	e8 2f 68 ff ff       	call   c0007aa2 <realloc>
c0011273:	83 c4 10             	add    esp,0x10
c0011276:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0011279:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001127c:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c001127f:	8d 74 24 18          	lea    esi,[esp+0x18]
c0011283:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c0011287:	b9 08 00 00 00       	mov    ecx,0x8
c001128c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001128e:	31 f6                	xor    esi,esi
c0011290:	50                   	push   eax
c0011291:	68 00 01 00 00       	push   0x100
c0011296:	6a 00                	push   0x0
c0011298:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c001129c:	50                   	push   eax
c001129d:	e8 4e f2 fe ff       	call   c00004f0 <memset>
c00112a2:	83 c4 10             	add    esp,0x10
c00112a5:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00112ad:	eb 27                	jmp    c00112d6 <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c00112af:	83 f8 3d             	cmp    eax,0x3d
c00112b2:	74 1e                	je     c00112d2 <EnvVarContainer::loadFrom(char const*, char const*)+0x1f8>
c00112b4:	81 fe fe 00 00 00    	cmp    esi,0xfe
c00112ba:	7f 07                	jg     c00112c3 <EnvVarContainer::loadFrom(char const*, char const*)+0x1e9>
c00112bc:	88 54 34 20          	mov    BYTE PTR [esp+esi*1+0x20],dl
c00112c0:	46                   	inc    esi
c00112c1:	eb 13                	jmp    c00112d6 <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c00112c3:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c00112cb:	eb 09                	jmp    c00112d6 <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c00112cd:	83 f8 3d             	cmp    eax,0x3d
c00112d0:	75 ea                	jne    c00112bc <EnvVarContainer::loadFrom(char const*, char const*)+0x1e2>
c00112d2:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c00112d6:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00112db:	0f 85 99 fe ff ff    	jne    c001117a <EnvVarContainer::loadFrom(char const*, char const*)+0xa0>
c00112e1:	83 ec 0c             	sub    esp,0xc
c00112e4:	53                   	push   ebx
c00112e5:	e8 ea a8 ff ff       	call   c000bbd4 <File::close()>
c00112ea:	8b 03                	mov    eax,DWORD PTR [ebx]
c00112ec:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00112ef:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00112f2:	81 c4 3c 01 00 00    	add    esp,0x13c
c00112f8:	5b                   	pop    ebx
c00112f9:	5e                   	pop    esi
c00112fa:	5f                   	pop    edi
c00112fb:	5d                   	pop    ebp
c00112fc:	c3                   	ret    
c00112fd:	90                   	nop

c00112fe <EnvVarContainer::__loadSystem()>:
c00112fe:	83 ec 10             	sub    esp,0x10
c0011301:	68 e0 3b 02 c0       	push   0xc0023be0
c0011306:	68 d0 22 02 c0       	push   0xc00222d0
c001130b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001130f:	e8 c6 fd ff ff       	call   c00110da <EnvVarContainer::loadFrom(char const*, char const*)>
c0011314:	83 c4 1c             	add    esp,0x1c
c0011317:	c3                   	ret    

c0011318 <EnvVarContainer::__loadUser()>:
c0011318:	c3                   	ret    
c0011319:	90                   	nop

c001131a <EnvVarContainer::EnvVarContainer(Process*)>:
c001131a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001131e:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0011324:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011328:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001132c:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001132f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011333:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001133a:	90                   	nop
c001133b:	c3                   	ret    

c001133c <EnvVarContainer::~EnvVarContainer()>:
c001133c:	83 ec 0c             	sub    esp,0xc
c001133f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011343:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011346:	85 c0                	test   eax,eax
c0011348:	74 1d                	je     c0011367 <EnvVarContainer::~EnvVarContainer()+0x2b>
c001134a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001134e:	8b 00                	mov    eax,DWORD PTR [eax]
c0011350:	85 c0                	test   eax,eax
c0011352:	74 13                	je     c0011367 <EnvVarContainer::~EnvVarContainer()+0x2b>
c0011354:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011358:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001135b:	83 ec 0c             	sub    esp,0xc
c001135e:	50                   	push   eax
c001135f:	e8 62 67 ff ff       	call   c0007ac6 <free>
c0011364:	83 c4 10             	add    esp,0x10
c0011367:	90                   	nop
c0011368:	83 c4 0c             	add    esp,0xc
c001136b:	c3                   	ret    

c001136c <KeGetEnv(Process*, char const*)>:
c001136c:	53                   	push   ebx
c001136d:	83 ec 08             	sub    esp,0x8
c0011370:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011374:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0011378:	39 05 f0 c6 02 c0    	cmp    DWORD PTR ds:0xc002c6f0,eax
c001137e:	74 04                	je     c0011384 <KeGetEnv(Process*, char const*)+0x18>
c0011380:	85 c0                	test   eax,eax
c0011382:	75 0b                	jne    c001138f <KeGetEnv(Process*, char const*)+0x23>
c0011384:	a1 80 be 02 c0       	mov    eax,ds:0xc002be80
c0011389:	85 c0                	test   eax,eax
c001138b:	75 19                	jne    c00113a6 <KeGetEnv(Process*, char const*)+0x3a>
c001138d:	eb 27                	jmp    c00113b6 <KeGetEnv(Process*, char const*)+0x4a>
c001138f:	52                   	push   edx
c0011390:	52                   	push   edx
c0011391:	53                   	push   ebx
c0011392:	ff b0 1a 07 00 00    	push   DWORD PTR [eax+0x71a]
c0011398:	e8 3b fc ff ff       	call   c0010fd8 <EnvVarContainer::getEnv(char const*)>
c001139d:	83 c4 10             	add    esp,0x10
c00113a0:	85 c0                	test   eax,eax
c00113a2:	75 28                	jne    c00113cc <KeGetEnv(Process*, char const*)+0x60>
c00113a4:	eb de                	jmp    c0011384 <KeGetEnv(Process*, char const*)+0x18>
c00113a6:	52                   	push   edx
c00113a7:	52                   	push   edx
c00113a8:	53                   	push   ebx
c00113a9:	50                   	push   eax
c00113aa:	e8 29 fc ff ff       	call   c0010fd8 <EnvVarContainer::getEnv(char const*)>
c00113af:	83 c4 10             	add    esp,0x10
c00113b2:	85 c0                	test   eax,eax
c00113b4:	75 16                	jne    c00113cc <KeGetEnv(Process*, char const*)+0x60>
c00113b6:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c00113ba:	a1 84 be 02 c0       	mov    eax,ds:0xc002be84
c00113bf:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00113c3:	83 c4 08             	add    esp,0x8
c00113c6:	5b                   	pop    ebx
c00113c7:	e9 0c fc ff ff       	jmp    c0010fd8 <EnvVarContainer::getEnv(char const*)>
c00113cc:	83 c4 08             	add    esp,0x8
c00113cf:	5b                   	pop    ebx
c00113d0:	c3                   	ret    

c00113d1 <KeSetEnvSystem(char const*, char const*)>:
c00113d1:	83 ec 10             	sub    esp,0x10
c00113d4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00113d8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00113dc:	ff 35 84 be 02 c0    	push   DWORD PTR ds:0xc002be84
c00113e2:	e8 2f fc ff ff       	call   c0011016 <EnvVarContainer::setEnv(char const*, char const*)>
c00113e7:	83 c4 1c             	add    esp,0x1c
c00113ea:	c3                   	ret    

c00113eb <KeSetEnvUser(char const*, char const*)>:
c00113eb:	a1 80 be 02 c0       	mov    eax,ds:0xc002be80
c00113f0:	85 c0                	test   eax,eax
c00113f2:	74 15                	je     c0011409 <KeSetEnvUser(char const*, char const*)+0x1e>
c00113f4:	83 ec 10             	sub    esp,0x10
c00113f7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00113fb:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00113ff:	50                   	push   eax
c0011400:	e8 11 fc ff ff       	call   c0011016 <EnvVarContainer::setEnv(char const*, char const*)>
c0011405:	83 c4 1c             	add    esp,0x1c
c0011408:	c3                   	ret    
c0011409:	c3                   	ret    

c001140a <KeSetEnvProcess(Process*, char const*, char const*)>:
c001140a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001140e:	8b 80 1a 07 00 00    	mov    eax,DWORD PTR [eax+0x71a]
c0011414:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011418:	e9 f9 fb ff ff       	jmp    c0011016 <EnvVarContainer::setEnv(char const*, char const*)>

c001141d <KeDeleteEnvSystem(char const*)>:
c001141d:	c3                   	ret    

c001141e <KeDeleteEnvUser(char const*)>:
c001141e:	c3                   	ret    

c001141f <KeDeleteEnvProcess(Process*, char const*)>:
c001141f:	c3                   	ret    

c0011420 <KeNewProcessEnv(Process*)>:
c0011420:	83 ec 28             	sub    esp,0x28
c0011423:	6a 0c                	push   0xc
c0011425:	e8 8c 66 ff ff       	call   c0007ab6 <malloc>
c001142a:	5a                   	pop    edx
c001142b:	59                   	pop    ecx
c001142c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0011430:	50                   	push   eax
c0011431:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011435:	e8 e0 fe ff ff       	call   c001131a <EnvVarContainer::EnvVarContainer(Process*)>
c001143a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001143e:	83 c4 2c             	add    esp,0x2c
c0011441:	c3                   	ret    

c0011442 <KeCopyProcessEnv(Process*, Process*)>:
c0011442:	57                   	push   edi
c0011443:	56                   	push   esi
c0011444:	53                   	push   ebx
c0011445:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011449:	83 ec 0c             	sub    esp,0xc
c001144c:	8b b8 1a 07 00 00    	mov    edi,DWORD PTR [eax+0x71a]
c0011452:	6a 0c                	push   0xc
c0011454:	e8 5d 66 ff ff       	call   c0007ab6 <malloc>
c0011459:	89 c3                	mov    ebx,eax
c001145b:	58                   	pop    eax
c001145c:	5a                   	pop    edx
c001145d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011461:	53                   	push   ebx
c0011462:	e8 b3 fe ff ff       	call   c001131a <EnvVarContainer::EnvVarContainer(Process*)>
c0011467:	8b 07                	mov    eax,DWORD PTR [edi]
c0011469:	89 03                	mov    DWORD PTR [ebx],eax
c001146b:	c1 e0 03             	shl    eax,0x3
c001146e:	89 04 24             	mov    DWORD PTR [esp],eax
c0011471:	e8 40 66 ff ff       	call   c0007ab6 <malloc>
c0011476:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0011479:	8b 0f                	mov    ecx,DWORD PTR [edi]
c001147b:	8b 77 04             	mov    esi,DWORD PTR [edi+0x4]
c001147e:	c1 e1 03             	shl    ecx,0x3
c0011481:	89 c7                	mov    edi,eax
c0011483:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0011485:	83 c4 10             	add    esp,0x10
c0011488:	89 d8                	mov    eax,ebx
c001148a:	5b                   	pop    ebx
c001148b:	5e                   	pop    esi
c001148c:	5f                   	pop    edi
c001148d:	c3                   	ret    

c001148e <KeLoadSystemEnv()>:
c001148e:	53                   	push   ebx
c001148f:	83 ec 14             	sub    esp,0x14
c0011492:	6a 0c                	push   0xc
c0011494:	e8 1d 66 ff ff       	call   c0007ab6 <malloc>
c0011499:	89 c3                	mov    ebx,eax
c001149b:	58                   	pop    eax
c001149c:	5a                   	pop    edx
c001149d:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c00114a3:	53                   	push   ebx
c00114a4:	e8 71 fe ff ff       	call   c001131a <EnvVarContainer::EnvVarContainer(Process*)>
c00114a9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00114ac:	89 1d 84 be 02 c0    	mov    DWORD PTR ds:0xc002be84,ebx
c00114b2:	e8 47 fe ff ff       	call   c00112fe <EnvVarContainer::__loadSystem()>
c00114b7:	83 c4 18             	add    esp,0x18
c00114ba:	5b                   	pop    ebx
c00114bb:	c3                   	ret    

c00114bc <KeLoadUserEnv()>:
c00114bc:	53                   	push   ebx
c00114bd:	83 ec 14             	sub    esp,0x14
c00114c0:	6a 0c                	push   0xc
c00114c2:	e8 ef 65 ff ff       	call   c0007ab6 <malloc>
c00114c7:	89 c3                	mov    ebx,eax
c00114c9:	58                   	pop    eax
c00114ca:	5a                   	pop    edx
c00114cb:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c00114d1:	53                   	push   ebx
c00114d2:	e8 43 fe ff ff       	call   c001131a <EnvVarContainer::EnvVarContainer(Process*)>
c00114d7:	89 1d 80 be 02 c0    	mov    DWORD PTR ds:0xc002be80,ebx
c00114dd:	83 c4 18             	add    esp,0x18
c00114e0:	5b                   	pop    ebx
c00114e1:	c3                   	ret    

c00114e2 <KeFlushEnv()>:
c00114e2:	c3                   	ret    

c00114e3 <KeGetProcessTotalEnvCount(Process*)>:
c00114e3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00114e7:	8b 15 80 be 02 c0    	mov    edx,DWORD PTR ds:0xc002be80
c00114ed:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c00114f3:	a1 84 be 02 c0       	mov    eax,ds:0xc002be84
c00114f8:	8b 00                	mov    eax,DWORD PTR [eax]
c00114fa:	03 01                	add    eax,DWORD PTR [ecx]
c00114fc:	85 d2                	test   edx,edx
c00114fe:	74 02                	je     c0011502 <KeGetProcessTotalEnvCount(Process*)+0x1f>
c0011500:	03 02                	add    eax,DWORD PTR [edx]
c0011502:	c3                   	ret    

c0011503 <KeGetProcessEnvPair(Process*, int)>:
c0011503:	57                   	push   edi
c0011504:	56                   	push   esi
c0011505:	8b 35 80 be 02 c0    	mov    esi,DWORD PTR ds:0xc002be80
c001150b:	53                   	push   ebx
c001150c:	85 f6                	test   esi,esi
c001150e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0011512:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011516:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c001151c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0011520:	8b 01                	mov    eax,DWORD PTR [ecx]
c0011522:	75 16                	jne    c001153a <KeGetProcessEnvPair(Process*, int)+0x37>
c0011524:	39 c2                	cmp    edx,eax
c0011526:	7c 16                	jl     c001153e <KeGetProcessEnvPair(Process*, int)+0x3b>
c0011528:	8b 0d 84 be 02 c0    	mov    ecx,DWORD PTR ds:0xc002be84
c001152e:	8b 31                	mov    esi,DWORD PTR [ecx]
c0011530:	01 c6                	add    esi,eax
c0011532:	39 d6                	cmp    esi,edx
c0011534:	7e 3c                	jle    c0011572 <KeGetProcessEnvPair(Process*, int)+0x6f>
c0011536:	29 c2                	sub    edx,eax
c0011538:	eb 04                	jmp    c001153e <KeGetProcessEnvPair(Process*, int)+0x3b>
c001153a:	39 c2                	cmp    edx,eax
c001153c:	7d 05                	jge    c0011543 <KeGetProcessEnvPair(Process*, int)+0x40>
c001153e:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c0011541:	eb 20                	jmp    c0011563 <KeGetProcessEnvPair(Process*, int)+0x60>
c0011543:	8b 3e                	mov    edi,DWORD PTR [esi]
c0011545:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0011548:	39 d1                	cmp    ecx,edx
c001154a:	7e 04                	jle    c0011550 <KeGetProcessEnvPair(Process*, int)+0x4d>
c001154c:	29 c2                	sub    edx,eax
c001154e:	eb 10                	jmp    c0011560 <KeGetProcessEnvPair(Process*, int)+0x5d>
c0011550:	8b 35 84 be 02 c0    	mov    esi,DWORD PTR ds:0xc002be84
c0011556:	03 0e                	add    ecx,DWORD PTR [esi]
c0011558:	39 d1                	cmp    ecx,edx
c001155a:	7e 16                	jle    c0011572 <KeGetProcessEnvPair(Process*, int)+0x6f>
c001155c:	29 c2                	sub    edx,eax
c001155e:	29 fa                	sub    edx,edi
c0011560:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0011563:	8d 14 d0             	lea    edx,[eax+edx*8]
c0011566:	8b 02                	mov    eax,DWORD PTR [edx]
c0011568:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c001156b:	89 03                	mov    DWORD PTR [ebx],eax
c001156d:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0011570:	eb 1d                	jmp    c001158f <KeGetProcessEnvPair(Process*, int)+0x8c>
c0011572:	83 ec 0c             	sub    esp,0xc
c0011575:	68 f2 22 02 c0       	push   0xc00222f2
c001157a:	e8 ac 00 00 00       	call   c001162b <KePanic(char const*)>
c001157f:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0011585:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001158c:	83 c4 10             	add    esp,0x10
c001158f:	89 d8                	mov    eax,ebx
c0011591:	5b                   	pop    ebx
c0011592:	5e                   	pop    esi
c0011593:	5f                   	pop    edi
c0011594:	c2 04 00             	ret    0x4

c0011597 <CPU::current()>:
c0011597:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c001159c:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00115a2:	c3                   	ret    

c00115a3 <operator new(unsigned long)>:
c00115a3:	e9 0e 65 ff ff       	jmp    c0007ab6 <malloc>

c00115a8 <operator delete(void*)>:
c00115a8:	e9 29 65 ff ff       	jmp    c0007ad6 <rfree>

c00115ad <disableIRQs()>:
c00115ad:	fa                   	cli    
c00115ae:	c3                   	ret    

c00115af <enableIRQs()>:
c00115af:	fb                   	sti    
c00115b0:	c3                   	ret    

c00115b1 <lockScheduler()>:
c00115b1:	fa                   	cli    
c00115b2:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c00115b8:	c3                   	ret    

c00115b9 <unlockScheduler()>:
c00115b9:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c00115be:	48                   	dec    eax
c00115bf:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c00115c4:	75 01                	jne    c00115c7 <unlockScheduler()+0xe>
c00115c6:	fb                   	sti    
c00115c7:	c3                   	ret    

c00115c8 <lockStuff()>:
c00115c8:	fa                   	cli    
c00115c9:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c00115cf:	ff 05 c4 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c4
c00115d5:	c3                   	ret    

c00115d6 <unlockStuff()>:
c00115d6:	83 ec 0c             	sub    esp,0xc
c00115d9:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c00115de:	48                   	dec    eax
c00115df:	a3 c4 c6 02 c0       	mov    ds:0xc002c6c4,eax
c00115e4:	75 18                	jne    c00115fe <unlockStuff()+0x28>
c00115e6:	83 3d c0 c6 02 c0 00 	cmp    DWORD PTR ds:0xc002c6c0,0x0
c00115ed:	74 0f                	je     c00115fe <unlockStuff()+0x28>
c00115ef:	c7 05 c0 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6c0,0x0
c00115f9:	e8 92 4a 00 00       	call   c0016090 <schedule()>
c00115fe:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0011603:	48                   	dec    eax
c0011604:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0011609:	75 01                	jne    c001160c <unlockStuff()+0x36>
c001160b:	fb                   	sti    
c001160c:	83 c4 0c             	add    esp,0xc
c001160f:	c3                   	ret    

c0011610 <Virt::getAKernelVAS()>:
c0011610:	a1 b0 6f 02 c0       	mov    eax,ds:0xc0026fb0
c0011615:	c3                   	ret    

c0011616 <__not_memcpy>:
c0011616:	57                   	push   edi
c0011617:	56                   	push   esi
c0011618:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001161c:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0011620:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0011624:	89 c7                	mov    edi,eax
c0011626:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0011628:	5e                   	pop    esi
c0011629:	5f                   	pop    edi
c001162a:	c3                   	ret    

c001162b <KePanic(char const*)>:
c001162b:	c6 05 88 be 02 c0 01 	mov    BYTE PTR ds:0xc002be88,0x1
c0011632:	e9 ff 69 00 00       	jmp    c0018036 <HalPanic(char const*)>

c0011637 <KePowerThread(void*)>:
c0011637:	83 ec 0c             	sub    esp,0xc
c001163a:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c001163f:	48                   	dec    eax
c0011640:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0011645:	75 01                	jne    c0011648 <KePowerThread(void*)+0x11>
c0011647:	fb                   	sti    
c0011648:	83 ec 0c             	sub    esp,0xc
c001164b:	c6 05 a0 be 02 c0 00 	mov    BYTE PTR ds:0xc002bea0,0x0
c0011652:	6a 0a                	push   0xa
c0011654:	e8 7b 4d 00 00       	call   c00163d4 <sleep(unsigned int)>
c0011659:	83 05 e4 be 02 c0 0a 	add    DWORD PTR ds:0xc002bee4,0xa
c0011660:	83 c4 10             	add    esp,0x10
c0011663:	eb e3                	jmp    c0011648 <KePowerThread(void*)+0x11>

c0011665 <KeChangePowerSettings(PowerSettings)>:
c0011665:	57                   	push   edi
c0011666:	b9 09 00 00 00       	mov    ecx,0x9
c001166b:	56                   	push   esi
c001166c:	bf c0 be 02 c0       	mov    edi,0xc002bec0
c0011671:	fc                   	cld    
c0011672:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0011676:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0011678:	5e                   	pop    esi
c0011679:	5f                   	pop    edi
c001167a:	c3                   	ret    

c001167b <KeUserIOReceived()>:
c001167b:	c7 05 e4 be 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002bee4,0x0
c0011685:	c3                   	ret    

c0011686 <KeHandlePowerButton()>:
c0011686:	83 ec 0c             	sub    esp,0xc
c0011689:	a1 c0 be 02 c0       	mov    eax,ds:0xc002bec0
c001168e:	83 f8 02             	cmp    eax,0x2
c0011691:	75 10                	jne    c00116a3 <KeHandlePowerButton()+0x1d>
c0011693:	83 ec 0c             	sub    esp,0xc
c0011696:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c001169c:	e8 87 5a ff ff       	call   c0007128 <Computer::shutdown()>
c00116a1:	eb 11                	jmp    c00116b4 <KeHandlePowerButton()+0x2e>
c00116a3:	48                   	dec    eax
c00116a4:	75 11                	jne    c00116b7 <KeHandlePowerButton()+0x31>
c00116a6:	83 ec 0c             	sub    esp,0xc
c00116a9:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c00116af:	e8 a4 5a ff ff       	call   c0007158 <Computer::sleep()>
c00116b4:	83 c4 10             	add    esp,0x10
c00116b7:	83 c4 0c             	add    esp,0xc
c00116ba:	c3                   	ret    

c00116bb <KeHandleSleepButton()>:
c00116bb:	83 ec 0c             	sub    esp,0xc
c00116be:	a1 c4 be 02 c0       	mov    eax,ds:0xc002bec4
c00116c3:	83 f8 02             	cmp    eax,0x2
c00116c6:	75 10                	jne    c00116d8 <KeHandleSleepButton()+0x1d>
c00116c8:	83 ec 0c             	sub    esp,0xc
c00116cb:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c00116d1:	e8 52 5a ff ff       	call   c0007128 <Computer::shutdown()>
c00116d6:	eb 11                	jmp    c00116e9 <KeHandleSleepButton()+0x2e>
c00116d8:	48                   	dec    eax
c00116d9:	75 11                	jne    c00116ec <KeHandleSleepButton()+0x31>
c00116db:	83 ec 0c             	sub    esp,0xc
c00116de:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c00116e4:	e8 6f 5a ff ff       	call   c0007158 <Computer::sleep()>
c00116e9:	83 c4 10             	add    esp,0x10
c00116ec:	83 c4 0c             	add    esp,0xc
c00116ef:	c3                   	ret    

c00116f0 <KeSetupPowerManager()>:
c00116f0:	83 ec 0c             	sub    esp,0xc
c00116f3:	c7 05 e4 be 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002bee4,0x0
c00116fd:	68 f0 00 00 00       	push   0xf0
c0011702:	c6 05 a0 be 02 c0 00 	mov    BYTE PTR ds:0xc002bea0,0x0
c0011709:	6a 00                	push   0x0
c001170b:	68 37 16 01 c0       	push   0xc0011637
c0011710:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c0011716:	e8 25 47 00 00       	call   c0015e40 <Process::createThread(void (*)(void*), void*, int)>
c001171b:	c7 05 c0 be 02 c0 02 00 00 00 	mov    DWORD PTR ds:0xc002bec0,0x2
c0011725:	c7 05 c4 be 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002bec4,0x1
c001172f:	c7 05 c8 be 02 c0 03 00 00 00 	mov    DWORD PTR ds:0xc002bec8,0x3
c0011739:	c7 05 cc be 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002becc,0x0
c0011743:	c7 05 d8 be 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002bed8,0x0
c001174d:	c7 05 d0 be 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002bed0,0x0
c0011757:	c7 05 dc be 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002bedc,0x0
c0011761:	c7 05 d4 be 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc002bed4,0x3c
c001176b:	c7 05 e0 be 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc002bee0,0x3c
c0011775:	83 c4 1c             	add    esp,0x1c
c0011778:	c3                   	ret    

c0011779 <KeRand()>:
c0011779:	69 05 e8 be 02 c0 75 28 00 00 	imul   eax,DWORD PTR ds:0xc002bee8,0x2875
c0011783:	69 0d ec be 02 c0 75 b1 e7 a2 	imul   ecx,DWORD PTR ds:0xc002beec,0xa2e7b175
c001178d:	53                   	push   ebx
c001178e:	01 c1                	add    ecx,eax
c0011790:	b8 75 b1 e7 a2       	mov    eax,0xa2e7b175
c0011795:	f7 25 e8 be 02 c0    	mul    DWORD PTR ds:0xc002bee8
c001179b:	01 ca                	add    edx,ecx
c001179d:	05 ef 04 b5 00       	add    eax,0xb504ef
c00117a2:	83 d2 00             	adc    edx,0x0
c00117a5:	a3 e8 be 02 c0       	mov    ds:0xc002bee8,eax
c00117aa:	0f b7 da             	movzx  ebx,dx
c00117ad:	89 da                	mov    edx,ebx
c00117af:	89 1d ec be 02 c0    	mov    DWORD PTR ds:0xc002beec,ebx
c00117b5:	0f ac d0 0e          	shrd   eax,edx,0xe
c00117b9:	5b                   	pop    ebx
c00117ba:	c3                   	ret    

c00117bb <KeSeedRand(unsigned int)>:
c00117bb:	53                   	push   ebx
c00117bc:	83 ec 08             	sub    esp,0x8
c00117bf:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00117c3:	e8 8d 6b 00 00       	call   c0018355 <HalGetRand()>
c00117c8:	c7 05 ec be 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002beec,0x0
c00117d2:	31 d8                	xor    eax,ebx
c00117d4:	a3 e8 be 02 c0       	mov    ds:0xc002bee8,eax
c00117d9:	e8 9b ff ff ff       	call   c0011779 <KeRand()>
c00117de:	83 c4 08             	add    esp,0x8
c00117e1:	5b                   	pop    ebx
c00117e2:	eb 95                	jmp    c0011779 <KeRand()>

c00117e4 <KeInitRand()>:
c00117e4:	83 ec 0c             	sub    esp,0xc
c00117e7:	e8 5e 69 00 00       	call   c001814a <HalQueryPerformanceCounter()>
c00117ec:	0f 20 da             	mov    edx,cr3
c00117ef:	0f 22 da             	mov    cr3,edx
c00117f2:	0f 20 da             	mov    edx,cr3
c00117f5:	0f 22 da             	mov    cr3,edx
c00117f8:	0f 20 da             	mov    edx,cr3
c00117fb:	0f 22 da             	mov    cr3,edx
c00117fe:	0f 20 da             	mov    edx,cr3
c0011801:	0f 22 da             	mov    cr3,edx
c0011804:	83 ec 0c             	sub    esp,0xc
c0011807:	35 03 8a 95 38       	xor    eax,0x38958a03
c001180c:	50                   	push   eax
c001180d:	e8 a9 ff ff ff       	call   c00117bb <KeSeedRand(unsigned int)>
c0011812:	83 c4 1c             	add    esp,0x1c
c0011815:	c3                   	ret    
c0011816:	66 90                	xchg   ax,ax

c0011818 <KeResolveCompatibilitySymbol(char*)>:
c0011818:	83 ec 0c             	sub    esp,0xc
c001181b:	83 ec 08             	sub    esp,0x8
c001181e:	68 0c 23 02 c0       	push   0xc002230c
c0011823:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011827:	e8 24 ef fe ff       	call   c0000750 <strcmp>
c001182c:	83 c4 10             	add    esp,0x10
c001182f:	85 c0                	test   eax,eax
c0011831:	0f 94 c0             	sete   al
c0011834:	0f b6 c0             	movzx  eax,al
c0011837:	85 c0                	test   eax,eax
c0011839:	74 0d                	je     c0011848 <KeResolveCompatibilitySymbol(char*)+0x30>
c001183b:	b8 b8 6e 02 c0       	mov    eax,0xc0026eb8
c0011840:	e9 8b 01 00 00       	jmp    c00119d0 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0011845:	8d 76 00             	lea    esi,[esi+0x0]
c0011848:	83 ec 08             	sub    esp,0x8
c001184b:	68 15 23 02 c0       	push   0xc0022315
c0011850:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011854:	e8 f7 ee fe ff       	call   c0000750 <strcmp>
c0011859:	83 c4 10             	add    esp,0x10
c001185c:	85 c0                	test   eax,eax
c001185e:	0f 94 c0             	sete   al
c0011861:	0f b6 c0             	movzx  eax,al
c0011864:	85 c0                	test   eax,eax
c0011866:	74 0c                	je     c0011874 <KeResolveCompatibilitySymbol(char*)+0x5c>
c0011868:	b8 00 f7 01 c0       	mov    eax,0xc001f700
c001186d:	e9 5e 01 00 00       	jmp    c00119d0 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0011872:	66 90                	xchg   ax,ax
c0011874:	83 ec 08             	sub    esp,0x8
c0011877:	68 1f 23 02 c0       	push   0xc002231f
c001187c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011880:	e8 cb ee fe ff       	call   c0000750 <strcmp>
c0011885:	83 c4 10             	add    esp,0x10
c0011888:	85 c0                	test   eax,eax
c001188a:	0f 94 c0             	sete   al
c001188d:	0f b6 c0             	movzx  eax,al
c0011890:	85 c0                	test   eax,eax
c0011892:	74 0c                	je     c00118a0 <KeResolveCompatibilitySymbol(char*)+0x88>
c0011894:	b8 34 f4 01 c0       	mov    eax,0xc001f434
c0011899:	e9 32 01 00 00       	jmp    c00119d0 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c001189e:	66 90                	xchg   ax,ax
c00118a0:	83 ec 08             	sub    esp,0x8
c00118a3:	68 28 23 02 c0       	push   0xc0022328
c00118a8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00118ac:	e8 9f ee fe ff       	call   c0000750 <strcmp>
c00118b1:	83 c4 10             	add    esp,0x10
c00118b4:	85 c0                	test   eax,eax
c00118b6:	0f 94 c0             	sete   al
c00118b9:	0f b6 c0             	movzx  eax,al
c00118bc:	85 c0                	test   eax,eax
c00118be:	74 0c                	je     c00118cc <KeResolveCompatibilitySymbol(char*)+0xb4>
c00118c0:	b8 2b 16 01 c0       	mov    eax,0xc001162b
c00118c5:	e9 06 01 00 00       	jmp    c00119d0 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c00118ca:	66 90                	xchg   ax,ax
c00118cc:	83 ec 08             	sub    esp,0x8
c00118cf:	68 3b 23 02 c0       	push   0xc002233b
c00118d4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00118d8:	e8 73 ee fe ff       	call   c0000750 <strcmp>
c00118dd:	83 c4 10             	add    esp,0x10
c00118e0:	85 c0                	test   eax,eax
c00118e2:	0f 94 c0             	sete   al
c00118e5:	0f b6 c0             	movzx  eax,al
c00118e8:	85 c0                	test   eax,eax
c00118ea:	74 0c                	je     c00118f8 <KeResolveCompatibilitySymbol(char*)+0xe0>
c00118ec:	b8 2b 0f 01 c0       	mov    eax,0xc0010f2b
c00118f1:	e9 da 00 00 00       	jmp    c00119d0 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c00118f6:	66 90                	xchg   ax,ax
c00118f8:	83 ec 08             	sub    esp,0x8
c00118fb:	68 58 23 02 c0       	push   0xc0022358
c0011900:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011904:	e8 47 ee fe ff       	call   c0000750 <strcmp>
c0011909:	83 c4 10             	add    esp,0x10
c001190c:	85 c0                	test   eax,eax
c001190e:	0f 94 c0             	sete   al
c0011911:	0f b6 c0             	movzx  eax,al
c0011914:	85 c0                	test   eax,eax
c0011916:	74 0c                	je     c0011924 <KeResolveCompatibilitySymbol(char*)+0x10c>
c0011918:	b8 00 f8 01 c0       	mov    eax,0xc001f800
c001191d:	e9 ae 00 00 00       	jmp    c00119d0 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0011922:	66 90                	xchg   ax,ax
c0011924:	83 ec 08             	sub    esp,0x8
c0011927:	68 62 23 02 c0       	push   0xc0022362
c001192c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011930:	e8 1b ee fe ff       	call   c0000750 <strcmp>
c0011935:	83 c4 10             	add    esp,0x10
c0011938:	85 c0                	test   eax,eax
c001193a:	0f 94 c0             	sete   al
c001193d:	0f b6 c0             	movzx  eax,al
c0011940:	85 c0                	test   eax,eax
c0011942:	74 0c                	je     c0011950 <KeResolveCompatibilitySymbol(char*)+0x138>
c0011944:	b8 80 f5 01 c0       	mov    eax,0xc001f580
c0011949:	e9 82 00 00 00       	jmp    c00119d0 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c001194e:	66 90                	xchg   ax,ax
c0011950:	83 ec 08             	sub    esp,0x8
c0011953:	68 6b 23 02 c0       	push   0xc002236b
c0011958:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001195c:	e8 ef ed fe ff       	call   c0000750 <strcmp>
c0011961:	83 c4 10             	add    esp,0x10
c0011964:	85 c0                	test   eax,eax
c0011966:	0f 94 c0             	sete   al
c0011969:	0f b6 c0             	movzx  eax,al
c001196c:	85 c0                	test   eax,eax
c001196e:	74 08                	je     c0011978 <KeResolveCompatibilitySymbol(char*)+0x160>
c0011970:	b8 bc 6e 02 c0       	mov    eax,0xc0026ebc
c0011975:	eb 59                	jmp    c00119d0 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0011977:	90                   	nop
c0011978:	83 ec 08             	sub    esp,0x8
c001197b:	68 83 23 02 c0       	push   0xc0022383
c0011980:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011984:	e8 c7 ed fe ff       	call   c0000750 <strcmp>
c0011989:	83 c4 10             	add    esp,0x10
c001198c:	85 c0                	test   eax,eax
c001198e:	0f 94 c0             	sete   al
c0011991:	0f b6 c0             	movzx  eax,al
c0011994:	85 c0                	test   eax,eax
c0011996:	74 08                	je     c00119a0 <KeResolveCompatibilitySymbol(char*)+0x188>
c0011998:	b8 bc 6e 02 c0       	mov    eax,0xc0026ebc
c001199d:	eb 31                	jmp    c00119d0 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c001199f:	90                   	nop
c00119a0:	83 ec 08             	sub    esp,0x8
c00119a3:	68 90 23 02 c0       	push   0xc0022390
c00119a8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00119ac:	e8 9f ed fe ff       	call   c0000750 <strcmp>
c00119b1:	83 c4 10             	add    esp,0x10
c00119b4:	85 c0                	test   eax,eax
c00119b6:	0f 94 c0             	sete   al
c00119b9:	0f b6 c0             	movzx  eax,al
c00119bc:	85 c0                	test   eax,eax
c00119be:	74 08                	je     c00119c8 <KeResolveCompatibilitySymbol(char*)+0x1b0>
c00119c0:	b8 bd 6e 02 c0       	mov    eax,0xc0026ebd
c00119c5:	eb 09                	jmp    c00119d0 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c00119c7:	90                   	nop
c00119c8:	b8 00 00 00 00       	mov    eax,0x0
c00119cd:	8d 76 00             	lea    esi,[esi+0x0]
c00119d0:	83 c4 0c             	add    esp,0xc
c00119d3:	c3                   	ret    

c00119d4 <KiSigKill(int)>:
c00119d4:	83 ec 0c             	sub    esp,0xc
c00119d7:	6a 00                	push   0x0
c00119d9:	6a 00                	push   0x0
c00119db:	6a ff                	push   0xffffffff
c00119dd:	6a 01                	push   0x1
c00119df:	e8 6e 36 01 00       	call   c0025052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c00119e4:	83 c4 1c             	add    esp,0x1c
c00119e7:	c3                   	ret    

c00119e8 <KiDefaultSignalHandlerIgnore(int)>:
c00119e8:	c3                   	ret    

c00119e9 <KiDefaultSignalHandlerPause(int)>:
c00119e9:	57                   	push   edi
c00119ea:	b9 07 00 00 00       	mov    ecx,0x7
c00119ef:	56                   	push   esi
c00119f0:	be d9 23 02 c0       	mov    esi,0xc00223d9
c00119f5:	83 ec 24             	sub    esp,0x24
c00119f8:	8d 7c 24 04          	lea    edi,[esp+0x4]
c00119fc:	fc                   	cld    
c00119fd:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00119ff:	8d 44 24 04          	lea    eax,[esp+0x4]
c0011a03:	50                   	push   eax
c0011a04:	6a 00                	push   0x0
c0011a06:	6a 00                	push   0x0
c0011a08:	6a 27                	push   0x27
c0011a0a:	e8 43 36 01 00       	call   c0025052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0011a0f:	83 c4 34             	add    esp,0x34
c0011a12:	5e                   	pop    esi
c0011a13:	5f                   	pop    edi
c0011a14:	c3                   	ret    

c0011a15 <KiDefaultSignalHandlerResume(int)>:
c0011a15:	57                   	push   edi
c0011a16:	b9 1d 00 00 00       	mov    ecx,0x1d
c0011a1b:	56                   	push   esi
c0011a1c:	be f5 23 02 c0       	mov    esi,0xc00223f5
c0011a21:	83 ec 24             	sub    esp,0x24
c0011a24:	8d 7c 24 03          	lea    edi,[esp+0x3]
c0011a28:	fc                   	cld    
c0011a29:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0011a2b:	8d 44 24 03          	lea    eax,[esp+0x3]
c0011a2f:	50                   	push   eax
c0011a30:	6a 00                	push   0x0
c0011a32:	6a 00                	push   0x0
c0011a34:	6a 27                	push   0x27
c0011a36:	e8 17 36 01 00       	call   c0025052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0011a3b:	83 c4 34             	add    esp,0x34
c0011a3e:	5e                   	pop    esi
c0011a3f:	5f                   	pop    edi
c0011a40:	c3                   	ret    

c0011a41 <KeDeinitSignals(SigHandlerBlock*)>:
c0011a41:	e9 80 60 ff ff       	jmp    c0007ac6 <free>

c0011a46 <KeInitSignals()>:
c0011a46:	53                   	push   ebx
c0011a47:	83 ec 14             	sub    esp,0x14
c0011a4a:	68 c8 00 00 00       	push   0xc8
c0011a4f:	e8 62 60 ff ff       	call   c0007ab6 <malloc>
c0011a54:	83 c4 0c             	add    esp,0xc
c0011a57:	c7 80 bc 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xbc],0x0
c0011a61:	c7 80 c0 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc0],0x0
c0011a6b:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c0011a72:	89 c3                	mov    ebx,eax
c0011a74:	6a 20                	push   0x20
c0011a76:	8d 80 9c 00 00 00    	lea    eax,[eax+0x9c]
c0011a7c:	6a 00                	push   0x0
c0011a7e:	50                   	push   eax
c0011a7f:	e8 6c ea fe ff       	call   c00004f0 <memset>
c0011a84:	83 c4 0c             	add    esp,0xc
c0011a87:	6a 44                	push   0x44
c0011a89:	6a 00                	push   0x0
c0011a8b:	53                   	push   ebx
c0011a8c:	e8 5f ea fe ff       	call   c00004f0 <memset>
c0011a91:	89 d8                	mov    eax,ebx
c0011a93:	83 c4 18             	add    esp,0x18
c0011a96:	5b                   	pop    ebx
c0011a97:	c3                   	ret    

c0011a98 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)>:
c0011a98:	53                   	push   ebx
c0011a99:	b8 01 00 00 00       	mov    eax,0x1
c0011a9e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0011aa2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0011aa6:	83 f9 10             	cmp    ecx,0x10
c0011aa9:	7f 21                	jg     c0011acc <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)+0x34>
c0011aab:	8d 1c 8a             	lea    ebx,[edx+ecx*4]
c0011aae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011ab2:	89 03                	mov    DWORD PTR [ebx],eax
c0011ab4:	b8 01 00 00 00       	mov    eax,0x1
c0011ab9:	d3 e0                	shl    eax,cl
c0011abb:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c0011abf:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0011ac2:	c6 84 0a 88 00 00 00 00 	mov    BYTE PTR [edx+ecx*1+0x88],0x0
c0011aca:	31 c0                	xor    eax,eax
c0011acc:	5b                   	pop    ebx
c0011acd:	c3                   	ret    

c0011ace <KeRaiseSignal(SigHandlerBlock*, int)>:
c0011ace:	55                   	push   ebp
c0011acf:	57                   	push   edi
c0011ad0:	bf 08 00 00 00       	mov    edi,0x8
c0011ad5:	56                   	push   esi
c0011ad6:	53                   	push   ebx
c0011ad7:	83 ec 18             	sub    esp,0x18
c0011ada:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0011ade:	68 12 24 02 c0       	push   0xc0022412
c0011ae3:	e8 5d 8e ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0011ae8:	c6 83 c4 00 00 00 01 	mov    BYTE PTR [ebx+0xc4],0x1
c0011aef:	8b ab bc 00 00 00    	mov    ebp,DWORD PTR [ebx+0xbc]
c0011af5:	83 c4 10             	add    esp,0x10
c0011af8:	31 c9                	xor    ecx,ecx
c0011afa:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c0011afe:	99                   	cdq    
c0011aff:	f7 ff                	idiv   edi
c0011b01:	8d 42 24             	lea    eax,[edx+0x24]
c0011b04:	8b 74 83 0c          	mov    esi,DWORD PTR [ebx+eax*4+0xc]
c0011b08:	85 f6                	test   esi,esi
c0011b0a:	75 1a                	jne    c0011b26 <KeRaiseSignal(SigHandlerBlock*, int)+0x58>
c0011b0c:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0011b10:	89 4c 83 0c          	mov    DWORD PTR [ebx+eax*4+0xc],ecx
c0011b14:	50                   	push   eax
c0011b15:	50                   	push   eax
c0011b16:	52                   	push   edx
c0011b17:	68 23 24 02 c0       	push   0xc0022423
c0011b1c:	e8 24 8e ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0011b21:	83 c4 10             	add    esp,0x10
c0011b24:	eb 1b                	jmp    c0011b41 <KeRaiseSignal(SigHandlerBlock*, int)+0x73>
c0011b26:	41                   	inc    ecx
c0011b27:	83 f9 08             	cmp    ecx,0x8
c0011b2a:	75 ce                	jne    c0011afa <KeRaiseSignal(SigHandlerBlock*, int)+0x2c>
c0011b2c:	83 ec 0c             	sub    esp,0xc
c0011b2f:	be 01 00 00 00       	mov    esi,0x1
c0011b34:	68 44 24 02 c0       	push   0xc0022444
c0011b39:	e8 07 8e ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0011b3e:	83 c4 10             	add    esp,0x10
c0011b41:	83 c4 0c             	add    esp,0xc
c0011b44:	89 f0                	mov    eax,esi
c0011b46:	5b                   	pop    ebx
c0011b47:	5e                   	pop    esi
c0011b48:	5f                   	pop    edi
c0011b49:	5d                   	pop    ebp
c0011b4a:	c3                   	ret    

c0011b4b <KeCheckSignal(SigHandlerBlock*, int*)>:
c0011b4b:	55                   	push   ebp
c0011b4c:	57                   	push   edi
c0011b4d:	56                   	push   esi
c0011b4e:	53                   	push   ebx
c0011b4f:	51                   	push   ecx
c0011b50:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0011b54:	85 db                	test   ebx,ebx
c0011b56:	0f 84 bc 00 00 00    	je     c0011c18 <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c0011b5c:	80 bb c4 00 00 00 00 	cmp    BYTE PTR [ebx+0xc4],0x0
c0011b63:	0f 84 af 00 00 00    	je     c0011c18 <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c0011b69:	31 c9                	xor    ecx,ecx
c0011b6b:	bf 08 00 00 00       	mov    edi,0x8
c0011b70:	8b b3 bc 00 00 00    	mov    esi,DWORD PTR [ebx+0xbc]
c0011b76:	8d 04 0e             	lea    eax,[esi+ecx*1]
c0011b79:	99                   	cdq    
c0011b7a:	f7 ff                	idiv   edi
c0011b7c:	8b ac 93 9c 00 00 00 	mov    ebp,DWORD PTR [ebx+edx*4+0x9c]
c0011b83:	85 ed                	test   ebp,ebp
c0011b85:	0f 84 9e 00 00 00    	je     c0011c29 <KeCheckSignal(SigHandlerBlock*, int*)+0xde>
c0011b8b:	89 e9                	mov    ecx,ebp
c0011b8d:	8b 83 c0 00 00 00    	mov    eax,DWORD PTR [ebx+0xc0]
c0011b93:	bf 01 00 00 00       	mov    edi,0x1
c0011b98:	89 04 24             	mov    DWORD PTR [esp],eax
c0011b9b:	d3 e7                	shl    edi,cl
c0011b9d:	31 c9                	xor    ecx,ecx
c0011b9f:	b8 01 00 00 00       	mov    eax,0x1
c0011ba4:	d3 e0                	shl    eax,cl
c0011ba6:	85 04 24             	test   DWORD PTR [esp],eax
c0011ba9:	74 06                	je     c0011bb1 <KeCheckSignal(SigHandlerBlock*, int*)+0x66>
c0011bab:	85 7c 8b 44          	test   DWORD PTR [ebx+ecx*4+0x44],edi
c0011baf:	75 67                	jne    c0011c18 <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c0011bb1:	41                   	inc    ecx
c0011bb2:	83 f9 11             	cmp    ecx,0x11
c0011bb5:	75 e8                	jne    c0011b9f <KeCheckSignal(SigHandlerBlock*, int*)+0x54>
c0011bb7:	46                   	inc    esi
c0011bb8:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0011bbb:	89 b3 bc 00 00 00    	mov    DWORD PTR [ebx+0xbc],esi
c0011bc1:	09 f8                	or     eax,edi
c0011bc3:	c7 84 93 9c 00 00 00 00 00 00 00 	mov    DWORD PTR [ebx+edx*4+0x9c],0x0
c0011bce:	89 83 c0 00 00 00    	mov    DWORD PTR [ebx+0xc0],eax
c0011bd4:	c6 83 c4 00 00 00 00 	mov    BYTE PTR [ebx+0xc4],0x0
c0011bdb:	31 c0                	xor    eax,eax
c0011bdd:	83 bc 83 9c 00 00 00 00 	cmp    DWORD PTR [ebx+eax*4+0x9c],0x0
c0011be5:	74 09                	je     c0011bf0 <KeCheckSignal(SigHandlerBlock*, int*)+0xa5>
c0011be7:	c6 83 c4 00 00 00 01 	mov    BYTE PTR [ebx+0xc4],0x1
c0011bee:	eb 06                	jmp    c0011bf6 <KeCheckSignal(SigHandlerBlock*, int*)+0xab>
c0011bf0:	40                   	inc    eax
c0011bf1:	83 f8 08             	cmp    eax,0x8
c0011bf4:	75 e7                	jne    c0011bdd <KeCheckSignal(SigHandlerBlock*, int*)+0x92>
c0011bf6:	8b 04 ab             	mov    eax,DWORD PTR [ebx+ebp*4]
c0011bf9:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0011bfd:	83 fd 09             	cmp    ebp,0x9
c0011c00:	89 2a                	mov    DWORD PTR [edx],ebp
c0011c02:	75 07                	jne    c0011c0b <KeCheckSignal(SigHandlerBlock*, int*)+0xc0>
c0011c04:	b8 d4 19 01 c0       	mov    eax,0xc00119d4
c0011c09:	eb 31                	jmp    c0011c3c <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c0011c0b:	83 f8 01             	cmp    eax,0x1
c0011c0e:	75 0c                	jne    c0011c1c <KeCheckSignal(SigHandlerBlock*, int*)+0xd1>
c0011c10:	f7 d7                	not    edi
c0011c12:	21 bb c0 00 00 00    	and    DWORD PTR [ebx+0xc0],edi
c0011c18:	31 c0                	xor    eax,eax
c0011c1a:	eb 20                	jmp    c0011c3c <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c0011c1c:	85 c0                	test   eax,eax
c0011c1e:	75 1c                	jne    c0011c3c <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c0011c20:	8b 04 ad 40 3c 02 c0 	mov    eax,DWORD PTR [ebp*4-0x3ffdc3c0]
c0011c27:	eb 13                	jmp    c0011c3c <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c0011c29:	46                   	inc    esi
c0011c2a:	41                   	inc    ecx
c0011c2b:	89 b3 bc 00 00 00    	mov    DWORD PTR [ebx+0xbc],esi
c0011c31:	83 f9 08             	cmp    ecx,0x8
c0011c34:	0f 85 36 ff ff ff    	jne    c0011b70 <KeCheckSignal(SigHandlerBlock*, int*)+0x25>
c0011c3a:	eb dc                	jmp    c0011c18 <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c0011c3c:	5a                   	pop    edx
c0011c3d:	5b                   	pop    ebx
c0011c3e:	5e                   	pop    esi
c0011c3f:	5f                   	pop    edi
c0011c40:	5d                   	pop    ebp
c0011c41:	c3                   	ret    

c0011c42 <KiCheckSignalZ>:
c0011c42:	83 ec 10             	sub    esp,0x10
c0011c45:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0011c49:	50                   	push   eax
c0011c4a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011c4f:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011c52:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c0011c58:	e8 ee fe ff ff       	call   c0011b4b <KeCheckSignal(SigHandlerBlock*, int*)>
c0011c5d:	5a                   	pop    edx
c0011c5e:	31 d2                	xor    edx,edx
c0011c60:	59                   	pop    ecx
c0011c61:	85 c0                	test   eax,eax
c0011c63:	74 19                	je     c0011c7e <KiCheckSignalZ+0x3c>
c0011c65:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0011c6b:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0011c6e:	89 02                	mov    DWORD PTR [edx],eax
c0011c70:	c7 42 04 00 00 00 00 	mov    DWORD PTR [edx+0x4],0x0
c0011c77:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011c7b:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c0011c7e:	89 d0                	mov    eax,edx
c0011c80:	83 c4 10             	add    esp,0x10
c0011c83:	c3                   	ret    

c0011c84 <KeCompleteSignal(SigHandlerBlock*, int)>:
c0011c84:	56                   	push   esi
c0011c85:	53                   	push   ebx
c0011c86:	bb 01 00 00 00       	mov    ebx,0x1
c0011c8b:	52                   	push   edx
c0011c8c:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0011c90:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0011c94:	d3 e3                	shl    ebx,cl
c0011c96:	83 f9 10             	cmp    ecx,0x10
c0011c99:	7f 08                	jg     c0011ca3 <KeCompleteSignal(SigHandlerBlock*, int)+0x1f>
c0011c9b:	85 9e c0 00 00 00    	test   DWORD PTR [esi+0xc0],ebx
c0011ca1:	75 10                	jne    c0011cb3 <KeCompleteSignal(SigHandlerBlock*, int)+0x2f>
c0011ca3:	83 ec 0c             	sub    esp,0xc
c0011ca6:	68 55 24 02 c0       	push   0xc0022455
c0011cab:	e8 7b f9 ff ff       	call   c001162b <KePanic(char const*)>
c0011cb0:	83 c4 10             	add    esp,0x10
c0011cb3:	f7 d3                	not    ebx
c0011cb5:	21 9e c0 00 00 00    	and    DWORD PTR [esi+0xc0],ebx
c0011cbb:	58                   	pop    eax
c0011cbc:	5b                   	pop    ebx
c0011cbd:	5e                   	pop    esi
c0011cbe:	c3                   	ret    

c0011cbf <KiFinishSignalZ>:
c0011cbf:	53                   	push   ebx
c0011cc0:	83 ec 10             	sub    esp,0x10
c0011cc3:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0011cc7:	ff 73 08             	push   DWORD PTR [ebx+0x8]
c0011cca:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011ccf:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011cd2:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c0011cd8:	e8 a7 ff ff ff       	call   c0011c84 <KeCompleteSignal(SigHandlerBlock*, int)>
c0011cdd:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0011ce3:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0011cea:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0011cf1:	83 c4 18             	add    esp,0x18
c0011cf4:	5b                   	pop    ebx
c0011cf5:	c3                   	ret    

c0011cf6 <SysSeekDir(regs*)>:
c0011cf6:	31 c0                	xor    eax,eax
c0011cf8:	31 d2                	xor    edx,edx
c0011cfa:	c3                   	ret    

c0011cfb <SysTellDir(regs*)>:
c0011cfb:	31 c0                	xor    eax,eax
c0011cfd:	31 d2                	xor    edx,edx
c0011cff:	c3                   	ret    

c0011d00 <SysVerify(regs*)>:
c0011d00:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011d04:	31 d2                	xor    edx,edx
c0011d06:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0011d09:	c3                   	ret    

c0011d0a <SysGetArgc(regs*)>:
c0011d0a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011d0f:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011d12:	8b 80 16 05 00 00    	mov    eax,DWORD PTR [eax+0x516]
c0011d18:	89 c2                	mov    edx,eax
c0011d1a:	c1 fa 1f             	sar    edx,0x1f
c0011d1d:	c3                   	ret    

c0011d1e <SysTTYName(regs*)>:
c0011d1e:	b8 01 00 00 00       	mov    eax,0x1
c0011d23:	31 d2                	xor    edx,edx
c0011d25:	c3                   	ret    

c0011d26 <SysFormatDisk(regs*)>:
c0011d26:	56                   	push   esi
c0011d27:	53                   	push   ebx
c0011d28:	83 ec 04             	sub    esp,0x4
c0011d2b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0011d2f:	8b 1d 04 94 02 c0    	mov    ebx,DWORD PTR ds:0xc0029404
c0011d35:	eb 28                	jmp    c0011d5f <SysFormatDisk(regs*)+0x39>
c0011d37:	83 ec 0c             	sub    esp,0xc
c0011d3a:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0011d3d:	8b 4e 28             	mov    ecx,DWORD PTR [esi+0x28]
c0011d40:	8b 13                	mov    edx,DWORD PTR [ebx]
c0011d42:	51                   	push   ecx
c0011d43:	8b 4e 24             	mov    ecx,DWORD PTR [esi+0x24]
c0011d46:	51                   	push   ecx
c0011d47:	50                   	push   eax
c0011d48:	8b 04 85 80 b8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4780]
c0011d4f:	50                   	push   eax
c0011d50:	53                   	push   ebx
c0011d51:	ff 52 4c             	call   DWORD PTR [edx+0x4c]
c0011d54:	83 c4 20             	add    esp,0x20
c0011d57:	83 f8 08             	cmp    eax,0x8
c0011d5a:	75 14                	jne    c0011d70 <SysFormatDisk(regs*)+0x4a>
c0011d5c:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c0011d5f:	85 db                	test   ebx,ebx
c0011d61:	75 d4                	jne    c0011d37 <SysFormatDisk(regs*)+0x11>
c0011d63:	83 c4 04             	add    esp,0x4
c0011d66:	b8 03 00 00 00       	mov    eax,0x3
c0011d6b:	31 d2                	xor    edx,edx
c0011d6d:	5b                   	pop    ebx
c0011d6e:	5e                   	pop    esi
c0011d6f:	c3                   	ret    
c0011d70:	85 c0                	test   eax,eax
c0011d72:	74 1f                	je     c0011d93 <SysFormatDisk(regs*)+0x6d>
c0011d74:	83 f8 09             	cmp    eax,0x9
c0011d77:	74 0d                	je     c0011d86 <SysFormatDisk(regs*)+0x60>
c0011d79:	83 c4 04             	add    esp,0x4
c0011d7c:	b8 02 00 00 00       	mov    eax,0x2
c0011d81:	31 d2                	xor    edx,edx
c0011d83:	5b                   	pop    ebx
c0011d84:	5e                   	pop    esi
c0011d85:	c3                   	ret    
c0011d86:	83 c4 04             	add    esp,0x4
c0011d89:	b8 01 00 00 00       	mov    eax,0x1
c0011d8e:	31 d2                	xor    edx,edx
c0011d90:	5b                   	pop    ebx
c0011d91:	5e                   	pop    esi
c0011d92:	c3                   	ret    
c0011d93:	83 c4 04             	add    esp,0x4
c0011d96:	31 c0                	xor    eax,eax
c0011d98:	31 d2                	xor    edx,edx
c0011d9a:	5b                   	pop    ebx
c0011d9b:	5e                   	pop    esi
c0011d9c:	c3                   	ret    

c0011d9d <SysSetDiskVolumeLabel(regs*)>:
c0011d9d:	56                   	push   esi
c0011d9e:	53                   	push   ebx
c0011d9f:	83 ec 04             	sub    esp,0x4
c0011da2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0011da6:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0011da9:	83 f8 19             	cmp    eax,0x19
c0011dac:	77 33                	ja     c0011de1 <SysSetDiskVolumeLabel(regs*)+0x44>
c0011dae:	8b 0c 85 80 b8 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd4780]
c0011db5:	85 c9                	test   ecx,ecx
c0011db7:	74 28                	je     c0011de1 <SysSetDiskVolumeLabel(regs*)+0x44>
c0011db9:	8b 5a 24             	mov    ebx,DWORD PTR [edx+0x24]
c0011dbc:	85 db                	test   ebx,ebx
c0011dbe:	74 21                	je     c0011de1 <SysSetDiskVolumeLabel(regs*)+0x44>
c0011dc0:	8b 91 74 01 00 00    	mov    edx,DWORD PTR [ecx+0x174]
c0011dc6:	85 d2                	test   edx,edx
c0011dc8:	74 17                	je     c0011de1 <SysSetDiskVolumeLabel(regs*)+0x44>
c0011dca:	8b 32                	mov    esi,DWORD PTR [edx]
c0011dcc:	53                   	push   ebx
c0011dcd:	50                   	push   eax
c0011dce:	51                   	push   ecx
c0011dcf:	52                   	push   edx
c0011dd0:	ff 56 5c             	call   DWORD PTR [esi+0x5c]
c0011dd3:	83 c4 10             	add    esp,0x10
c0011dd6:	89 c2                	mov    edx,eax
c0011dd8:	83 c4 04             	add    esp,0x4
c0011ddb:	c1 fa 1f             	sar    edx,0x1f
c0011dde:	5b                   	pop    ebx
c0011ddf:	5e                   	pop    esi
c0011de0:	c3                   	ret    
c0011de1:	83 c4 04             	add    esp,0x4
c0011de4:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0011de9:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011dee:	5b                   	pop    ebx
c0011def:	5e                   	pop    esi
c0011df0:	c3                   	ret    

c0011df1 <SysGetDiskVolumeLabel(regs*)>:
c0011df1:	57                   	push   edi
c0011df2:	56                   	push   esi
c0011df3:	53                   	push   ebx
c0011df4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011df8:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0011dfb:	83 fa 19             	cmp    edx,0x19
c0011dfe:	77 3c                	ja     c0011e3c <SysGetDiskVolumeLabel(regs*)+0x4b>
c0011e00:	8b 0c 95 80 b8 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffd4780]
c0011e07:	85 c9                	test   ecx,ecx
c0011e09:	74 31                	je     c0011e3c <SysGetDiskVolumeLabel(regs*)+0x4b>
c0011e0b:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c0011e0e:	85 db                	test   ebx,ebx
c0011e10:	74 2a                	je     c0011e3c <SysGetDiskVolumeLabel(regs*)+0x4b>
c0011e12:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c0011e15:	85 f6                	test   esi,esi
c0011e17:	74 23                	je     c0011e3c <SysGetDiskVolumeLabel(regs*)+0x4b>
c0011e19:	8b 81 74 01 00 00    	mov    eax,DWORD PTR [ecx+0x174]
c0011e1f:	85 c0                	test   eax,eax
c0011e21:	74 19                	je     c0011e3c <SysGetDiskVolumeLabel(regs*)+0x4b>
c0011e23:	83 ec 0c             	sub    esp,0xc
c0011e26:	8b 38                	mov    edi,DWORD PTR [eax]
c0011e28:	56                   	push   esi
c0011e29:	53                   	push   ebx
c0011e2a:	52                   	push   edx
c0011e2b:	51                   	push   ecx
c0011e2c:	50                   	push   eax
c0011e2d:	ff 57 58             	call   DWORD PTR [edi+0x58]
c0011e30:	83 c4 20             	add    esp,0x20
c0011e33:	89 c2                	mov    edx,eax
c0011e35:	5b                   	pop    ebx
c0011e36:	c1 fa 1f             	sar    edx,0x1f
c0011e39:	5e                   	pop    esi
c0011e3a:	5f                   	pop    edi
c0011e3b:	c3                   	ret    
c0011e3c:	5b                   	pop    ebx
c0011e3d:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0011e42:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011e47:	5e                   	pop    esi
c0011e48:	5f                   	pop    edi
c0011e49:	c3                   	ret    

c0011e4a <SysShutdown(regs*)>:
c0011e4a:	83 ec 0c             	sub    esp,0xc
c0011e4d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011e51:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0011e54:	85 c0                	test   eax,eax
c0011e56:	74 18                	je     c0011e70 <SysShutdown(regs*)+0x26>
c0011e58:	83 f8 01             	cmp    eax,0x1
c0011e5b:	74 38                	je     c0011e95 <SysShutdown(regs*)+0x4b>
c0011e5d:	83 f8 02             	cmp    eax,0x2
c0011e60:	74 24                	je     c0011e86 <SysShutdown(regs*)+0x3c>
c0011e62:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011e67:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011e6c:	83 c4 0c             	add    esp,0xc
c0011e6f:	c3                   	ret    
c0011e70:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0011e75:	8b 10                	mov    edx,DWORD PTR [eax]
c0011e77:	6a 00                	push   0x0
c0011e79:	6a 00                	push   0x0
c0011e7b:	6a 00                	push   0x0
c0011e7d:	50                   	push   eax
c0011e7e:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0011e81:	83 c4 10             	add    esp,0x10
c0011e84:	eb dc                	jmp    c0011e62 <SysShutdown(regs*)+0x18>
c0011e86:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0011e8b:	8b 10                	mov    edx,DWORD PTR [eax]
c0011e8d:	6a 00                	push   0x0
c0011e8f:	6a 00                	push   0x0
c0011e91:	6a 01                	push   0x1
c0011e93:	eb e8                	jmp    c0011e7d <SysShutdown(regs*)+0x33>
c0011e95:	a1 00 b9 02 c0       	mov    eax,ds:0xc002b900
c0011e9a:	85 c0                	test   eax,eax
c0011e9c:	74 02                	je     c0011ea0 <SysShutdown(regs*)+0x56>
c0011e9e:	ff d0                	call   eax
c0011ea0:	31 c0                	xor    eax,eax
c0011ea2:	31 d2                	xor    edx,edx
c0011ea4:	83 c4 0c             	add    esp,0xc
c0011ea7:	c3                   	ret    

c0011ea8 <SysRealpath(regs*)>:
c0011ea8:	83 ec 0c             	sub    esp,0xc
c0011eab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011eaf:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0011eb2:	85 d2                	test   edx,edx
c0011eb4:	74 07                	je     c0011ebd <SysRealpath(regs*)+0x15>
c0011eb6:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0011eb9:	85 c0                	test   eax,eax
c0011ebb:	75 0b                	jne    c0011ec8 <SysRealpath(regs*)+0x20>
c0011ebd:	b8 01 00 00 00       	mov    eax,0x1
c0011ec2:	31 d2                	xor    edx,edx
c0011ec4:	83 c4 0c             	add    esp,0xc
c0011ec7:	c3                   	ret    
c0011ec8:	6a 00                	push   0x0
c0011eca:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0011ed0:	8b 49 3c             	mov    ecx,DWORD PTR [ecx+0x3c]
c0011ed3:	81 c1 0c 01 00 00    	add    ecx,0x10c
c0011ed9:	51                   	push   ecx
c0011eda:	52                   	push   edx
c0011edb:	50                   	push   eax
c0011edc:	e8 8f 99 ff ff       	call   c000b870 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c0011ee1:	83 c4 10             	add    esp,0x10
c0011ee4:	31 c0                	xor    eax,eax
c0011ee6:	31 d2                	xor    edx,edx
c0011ee8:	83 c4 0c             	add    esp,0xc
c0011eeb:	c3                   	ret    

c0011eec <SysReadDir(regs*)>:
c0011eec:	53                   	push   ebx
c0011eed:	83 ec 18             	sub    esp,0x18
c0011ef0:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011ef4:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0011ef7:	83 f8 02             	cmp    eax,0x2
c0011efa:	76 61                	jbe    c0011f5d <SysReadDir(regs*)+0x71>
c0011efc:	81 7b 20 00 ff ff 0f 	cmp    DWORD PTR [ebx+0x20],0xfffff00
c0011f03:	77 49                	ja     c0011f4e <SysReadDir(regs*)+0x62>
c0011f05:	83 ec 0c             	sub    esp,0xc
c0011f08:	50                   	push   eax
c0011f09:	e8 a5 75 ff ff       	call   c00094b3 <KeGetFileFromDescriptor(int)>
c0011f0e:	83 c4 10             	add    esp,0x10
c0011f11:	85 c0                	test   eax,eax
c0011f13:	74 39                	je     c0011f4e <SysReadDir(regs*)+0x62>
c0011f15:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011f1d:	83 ec 0c             	sub    esp,0xc
c0011f20:	8b 10                	mov    edx,DWORD PTR [eax]
c0011f22:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0011f26:	51                   	push   ecx
c0011f27:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c0011f2a:	51                   	push   ecx
c0011f2b:	6a 00                	push   0x0
c0011f2d:	68 10 01 00 00       	push   0x110
c0011f32:	50                   	push   eax
c0011f33:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0011f36:	83 c4 20             	add    esp,0x20
c0011f39:	85 c0                	test   eax,eax
c0011f3b:	74 29                	je     c0011f66 <SysReadDir(regs*)+0x7a>
c0011f3d:	83 f8 07             	cmp    eax,0x7
c0011f40:	74 1b                	je     c0011f5d <SysReadDir(regs*)+0x71>
c0011f42:	b8 02 00 00 00       	mov    eax,0x2
c0011f47:	31 d2                	xor    edx,edx
c0011f49:	83 c4 18             	add    esp,0x18
c0011f4c:	5b                   	pop    ebx
c0011f4d:	c3                   	ret    
c0011f4e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011f53:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011f58:	83 c4 18             	add    esp,0x18
c0011f5b:	5b                   	pop    ebx
c0011f5c:	c3                   	ret    
c0011f5d:	b8 01 00 00 00       	mov    eax,0x1
c0011f62:	31 d2                	xor    edx,edx
c0011f64:	eb e3                	jmp    c0011f49 <SysReadDir(regs*)+0x5d>
c0011f66:	31 c0                	xor    eax,eax
c0011f68:	31 d2                	xor    edx,edx
c0011f6a:	eb dd                	jmp    c0011f49 <SysReadDir(regs*)+0x5d>

c0011f6c <SysIsATTY(regs*)>:
c0011f6c:	83 ec 0c             	sub    esp,0xc
c0011f6f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011f73:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0011f76:	83 f8 02             	cmp    eax,0x2
c0011f79:	76 07                	jbe    c0011f82 <SysIsATTY(regs*)+0x16>
c0011f7b:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0011f80:	75 26                	jne    c0011fa8 <SysIsATTY(regs*)+0x3c>
c0011f82:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011f87:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011f8a:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0011f90:	85 c0                	test   eax,eax
c0011f92:	74 24                	je     c0011fb8 <SysIsATTY(regs*)+0x4c>
c0011f94:	83 ec 0c             	sub    esp,0xc
c0011f97:	8b 10                	mov    edx,DWORD PTR [eax]
c0011f99:	50                   	push   eax
c0011f9a:	ff 12                	call   DWORD PTR [edx]
c0011f9c:	31 d2                	xor    edx,edx
c0011f9e:	0f b6 c0             	movzx  eax,al
c0011fa1:	83 c4 10             	add    esp,0x10
c0011fa4:	83 c4 0c             	add    esp,0xc
c0011fa7:	c3                   	ret    
c0011fa8:	83 ec 0c             	sub    esp,0xc
c0011fab:	50                   	push   eax
c0011fac:	e8 02 75 ff ff       	call   c00094b3 <KeGetFileFromDescriptor(int)>
c0011fb1:	83 c4 10             	add    esp,0x10
c0011fb4:	85 c0                	test   eax,eax
c0011fb6:	75 dc                	jne    c0011f94 <SysIsATTY(regs*)+0x28>
c0011fb8:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011fbd:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011fc2:	83 c4 0c             	add    esp,0xc
c0011fc5:	c3                   	ret    

c0011fc6 <SysSeek(regs*)>:
c0011fc6:	53                   	push   ebx
c0011fc7:	83 ec 08             	sub    esp,0x8
c0011fca:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011fce:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011fd1:	8d 50 fd             	lea    edx,[eax-0x3]
c0011fd4:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c0011fda:	77 32                	ja     c001200e <SysSeek(regs*)+0x48>
c0011fdc:	83 ec 0c             	sub    esp,0xc
c0011fdf:	50                   	push   eax
c0011fe0:	e8 ce 74 ff ff       	call   c00094b3 <KeGetFileFromDescriptor(int)>
c0011fe5:	83 c4 0c             	add    esp,0xc
c0011fe8:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0011feb:	31 db                	xor    ebx,ebx
c0011fed:	53                   	push   ebx
c0011fee:	51                   	push   ecx
c0011fef:	50                   	push   eax
c0011ff0:	e8 3f 9c ff ff       	call   c000bc34 <File::seek(unsigned long long)>
c0011ff5:	83 c4 10             	add    esp,0x10
c0011ff8:	85 c0                	test   eax,eax
c0011ffa:	0f 95 c0             	setne  al
c0011ffd:	31 d2                	xor    edx,edx
c0011fff:	0f b6 c0             	movzx  eax,al
c0012002:	f7 d8                	neg    eax
c0012004:	83 d2 00             	adc    edx,0x0
c0012007:	83 c4 08             	add    esp,0x8
c001200a:	f7 da                	neg    edx
c001200c:	5b                   	pop    ebx
c001200d:	c3                   	ret    
c001200e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0012013:	ba ff ff ff ff       	mov    edx,0xffffffff
c0012018:	83 c4 08             	add    esp,0x8
c001201b:	5b                   	pop    ebx
c001201c:	c3                   	ret    

c001201d <SysTell(regs*)>:
c001201d:	53                   	push   ebx
c001201e:	83 ec 08             	sub    esp,0x8
c0012021:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012025:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0012028:	83 f8 02             	cmp    eax,0x2
c001202b:	76 4e                	jbe    c001207b <SysTell(regs*)+0x5e>
c001202d:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0012032:	76 19                	jbe    c001204d <SysTell(regs*)+0x30>
c0012034:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0012037:	31 d2                	xor    edx,edx
c0012039:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001203f:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0012046:	31 c0                	xor    eax,eax
c0012048:	83 c4 08             	add    esp,0x8
c001204b:	5b                   	pop    ebx
c001204c:	c3                   	ret    
c001204d:	83 ec 0c             	sub    esp,0xc
c0012050:	50                   	push   eax
c0012051:	e8 5d 74 ff ff       	call   c00094b3 <KeGetFileFromDescriptor(int)>
c0012056:	5a                   	pop    edx
c0012057:	8b 5b 28             	mov    ebx,DWORD PTR [ebx+0x28]
c001205a:	59                   	pop    ecx
c001205b:	53                   	push   ebx
c001205c:	50                   	push   eax
c001205d:	e8 7e 9c ff ff       	call   c000bce0 <File::tell(unsigned long long*)>
c0012062:	83 c4 10             	add    esp,0x10
c0012065:	85 c0                	test   eax,eax
c0012067:	0f 95 c0             	setne  al
c001206a:	31 d2                	xor    edx,edx
c001206c:	0f b6 c0             	movzx  eax,al
c001206f:	f7 d8                	neg    eax
c0012071:	83 d2 00             	adc    edx,0x0
c0012074:	83 c4 08             	add    esp,0x8
c0012077:	f7 da                	neg    edx
c0012079:	5b                   	pop    ebx
c001207a:	c3                   	ret    
c001207b:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0012080:	ba ff ff ff ff       	mov    edx,0xffffffff
c0012085:	83 c4 08             	add    esp,0x8
c0012088:	5b                   	pop    ebx
c0012089:	c3                   	ret    

c001208a <SysSize(regs*)>:
c001208a:	53                   	push   ebx
c001208b:	83 ec 18             	sub    esp,0x18
c001208e:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0012092:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0012095:	83 f8 02             	cmp    eax,0x2
c0012098:	76 54                	jbe    c00120ee <SysSize(regs*)+0x64>
c001209a:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001209f:	76 19                	jbe    c00120ba <SysSize(regs*)+0x30>
c00120a1:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00120a4:	31 d2                	xor    edx,edx
c00120a6:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00120ac:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00120b3:	31 c0                	xor    eax,eax
c00120b5:	83 c4 18             	add    esp,0x18
c00120b8:	5b                   	pop    ebx
c00120b9:	c3                   	ret    
c00120ba:	83 ec 0c             	sub    esp,0xc
c00120bd:	50                   	push   eax
c00120be:	e8 f0 73 ff ff       	call   c00094b3 <KeGetFileFromDescriptor(int)>
c00120c3:	83 c4 0c             	add    esp,0xc
c00120c6:	8d 54 24 13          	lea    edx,[esp+0x13]
c00120ca:	52                   	push   edx
c00120cb:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00120ce:	52                   	push   edx
c00120cf:	50                   	push   eax
c00120d0:	e8 a3 9d ff ff       	call   c000be78 <File::stat(unsigned long long*, bool*)>
c00120d5:	83 c4 10             	add    esp,0x10
c00120d8:	85 c0                	test   eax,eax
c00120da:	0f 95 c0             	setne  al
c00120dd:	31 d2                	xor    edx,edx
c00120df:	0f b6 c0             	movzx  eax,al
c00120e2:	f7 d8                	neg    eax
c00120e4:	83 d2 00             	adc    edx,0x0
c00120e7:	83 c4 18             	add    esp,0x18
c00120ea:	f7 da                	neg    edx
c00120ec:	5b                   	pop    ebx
c00120ed:	c3                   	ret    
c00120ee:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00120f3:	ba ff ff ff ff       	mov    edx,0xffffffff
c00120f8:	83 c4 18             	add    esp,0x18
c00120fb:	5b                   	pop    ebx
c00120fc:	c3                   	ret    

c00120fd <SysSizeFromFilename(regs*)>:
c00120fd:	55                   	push   ebp
c00120fe:	57                   	push   edi
c00120ff:	56                   	push   esi
c0012100:	53                   	push   ebx
c0012101:	81 ec 3c 01 00 00    	sub    esp,0x13c
c0012107:	8b 9c 24 50 01 00 00 	mov    ebx,DWORD PTR [esp+0x150]
c001210e:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0012111:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0012114:	85 f6                	test   esi,esi
c0012116:	74 34                	je     c001214c <SysSizeFromFilename(regs*)+0x4f>
c0012118:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c001211e:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0012121:	83 f8 02             	cmp    eax,0x2
c0012124:	76 2d                	jbe    c0012153 <SysSizeFromFilename(regs*)+0x56>
c0012126:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001212b:	76 3b                	jbe    c0012168 <SysSizeFromFilename(regs*)+0x6b>
c001212d:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0012130:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0012136:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001213d:	81 c4 3c 01 00 00    	add    esp,0x13c
c0012143:	31 c0                	xor    eax,eax
c0012145:	5b                   	pop    ebx
c0012146:	31 d2                	xor    edx,edx
c0012148:	5e                   	pop    esi
c0012149:	5f                   	pop    edi
c001214a:	5d                   	pop    ebp
c001214b:	c3                   	ret    
c001214c:	89 f8                	mov    eax,edi
c001214e:	83 f8 02             	cmp    eax,0x2
c0012151:	77 d3                	ja     c0012126 <SysSizeFromFilename(regs*)+0x29>
c0012153:	81 c4 3c 01 00 00    	add    esp,0x13c
c0012159:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001215e:	5b                   	pop    ebx
c001215f:	ba ff ff ff ff       	mov    edx,0xffffffff
c0012164:	5e                   	pop    esi
c0012165:	5f                   	pop    edi
c0012166:	5d                   	pop    ebp
c0012167:	c3                   	ret    
c0012168:	83 ec 0c             	sub    esp,0xc
c001216b:	68 14 01 00 00       	push   0x114
c0012170:	e8 41 59 ff ff       	call   c0007ab6 <malloc>
c0012175:	6a 01                	push   0x1
c0012177:	89 c5                	mov    ebp,eax
c0012179:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001217e:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0012181:	50                   	push   eax
c0012182:	57                   	push   edi
c0012183:	55                   	push   ebp
c0012184:	e8 f1 98 ff ff       	call   c000ba7a <File::File(char const*, Process*, bool)>
c0012189:	83 c4 1c             	add    esp,0x1c
c001218c:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c0012190:	50                   	push   eax
c0012191:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0012194:	52                   	push   edx
c0012195:	55                   	push   ebp
c0012196:	e8 dd 9c ff ff       	call   c000be78 <File::stat(unsigned long long*, bool*)>
c001219b:	83 c4 10             	add    esp,0x10
c001219e:	85 ed                	test   ebp,ebp
c00121a0:	74 15                	je     c00121b7 <SysSizeFromFilename(regs*)+0xba>
c00121a2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00121a6:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c00121a9:	83 ec 0c             	sub    esp,0xc
c00121ac:	55                   	push   ebp
c00121ad:	ff 52 08             	call   DWORD PTR [edx+0x8]
c00121b0:	83 c4 10             	add    esp,0x10
c00121b3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00121b7:	85 c0                	test   eax,eax
c00121b9:	75 98                	jne    c0012153 <SysSizeFromFilename(regs*)+0x56>
c00121bb:	83 ec 08             	sub    esp,0x8
c00121be:	8d 44 24 20          	lea    eax,[esp+0x20]
c00121c2:	50                   	push   eax
c00121c3:	57                   	push   edi
c00121c4:	e8 56 8f ff ff       	call   c000b11f <KeDereferenceSymlink(char const*, char*)>
c00121c9:	83 c4 10             	add    esp,0x10
c00121cc:	83 f8 01             	cmp    eax,0x1
c00121cf:	74 1a                	je     c00121eb <SysSizeFromFilename(regs*)+0xee>
c00121d1:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c00121d6:	74 26                	je     c00121fe <SysSizeFromFilename(regs*)+0x101>
c00121d8:	85 f6                	test   esi,esi
c00121da:	0f 84 5d ff ff ff    	je     c001213d <SysSizeFromFilename(regs*)+0x40>
c00121e0:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c00121e6:	e9 52 ff ff ff       	jmp    c001213d <SysSizeFromFilename(regs*)+0x40>
c00121eb:	85 f6                	test   esi,esi
c00121ed:	0f 84 4a ff ff ff    	je     c001213d <SysSizeFromFilename(regs*)+0x40>
c00121f3:	c7 06 02 00 00 00    	mov    DWORD PTR [esi],0x2
c00121f9:	e9 3f ff ff ff       	jmp    c001213d <SysSizeFromFilename(regs*)+0x40>
c00121fe:	85 f6                	test   esi,esi
c0012200:	0f 84 37 ff ff ff    	je     c001213d <SysSizeFromFilename(regs*)+0x40>
c0012206:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c001220c:	e9 2c ff ff ff       	jmp    c001213d <SysSizeFromFilename(regs*)+0x40>

c0012211 <SysSizeFromFilenameNoSymlink(regs*)>:
c0012211:	55                   	push   ebp
c0012212:	57                   	push   edi
c0012213:	56                   	push   esi
c0012214:	53                   	push   ebx
c0012215:	81 ec 3c 01 00 00    	sub    esp,0x13c
c001221b:	8b 9c 24 50 01 00 00 	mov    ebx,DWORD PTR [esp+0x150]
c0012222:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0012225:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0012228:	85 f6                	test   esi,esi
c001222a:	74 34                	je     c0012260 <SysSizeFromFilenameNoSymlink(regs*)+0x4f>
c001222c:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0012232:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0012235:	83 f8 02             	cmp    eax,0x2
c0012238:	76 2d                	jbe    c0012267 <SysSizeFromFilenameNoSymlink(regs*)+0x56>
c001223a:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001223f:	76 3b                	jbe    c001227c <SysSizeFromFilenameNoSymlink(regs*)+0x6b>
c0012241:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0012244:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001224a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0012251:	81 c4 3c 01 00 00    	add    esp,0x13c
c0012257:	31 c0                	xor    eax,eax
c0012259:	5b                   	pop    ebx
c001225a:	31 d2                	xor    edx,edx
c001225c:	5e                   	pop    esi
c001225d:	5f                   	pop    edi
c001225e:	5d                   	pop    ebp
c001225f:	c3                   	ret    
c0012260:	89 f8                	mov    eax,edi
c0012262:	83 f8 02             	cmp    eax,0x2
c0012265:	77 d3                	ja     c001223a <SysSizeFromFilenameNoSymlink(regs*)+0x29>
c0012267:	81 c4 3c 01 00 00    	add    esp,0x13c
c001226d:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0012272:	5b                   	pop    ebx
c0012273:	ba ff ff ff ff       	mov    edx,0xffffffff
c0012278:	5e                   	pop    esi
c0012279:	5f                   	pop    edi
c001227a:	5d                   	pop    ebp
c001227b:	c3                   	ret    
c001227c:	83 ec 0c             	sub    esp,0xc
c001227f:	68 14 01 00 00       	push   0x114
c0012284:	e8 2d 58 ff ff       	call   c0007ab6 <malloc>
c0012289:	6a 00                	push   0x0
c001228b:	89 c5                	mov    ebp,eax
c001228d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012292:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0012295:	50                   	push   eax
c0012296:	57                   	push   edi
c0012297:	55                   	push   ebp
c0012298:	e8 dd 97 ff ff       	call   c000ba7a <File::File(char const*, Process*, bool)>
c001229d:	83 c4 1c             	add    esp,0x1c
c00122a0:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c00122a4:	50                   	push   eax
c00122a5:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00122a8:	52                   	push   edx
c00122a9:	55                   	push   ebp
c00122aa:	e8 c9 9b ff ff       	call   c000be78 <File::stat(unsigned long long*, bool*)>
c00122af:	83 c4 10             	add    esp,0x10
c00122b2:	85 ed                	test   ebp,ebp
c00122b4:	74 15                	je     c00122cb <SysSizeFromFilenameNoSymlink(regs*)+0xba>
c00122b6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00122ba:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c00122bd:	83 ec 0c             	sub    esp,0xc
c00122c0:	55                   	push   ebp
c00122c1:	ff 52 08             	call   DWORD PTR [edx+0x8]
c00122c4:	83 c4 10             	add    esp,0x10
c00122c7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00122cb:	85 c0                	test   eax,eax
c00122cd:	75 98                	jne    c0012267 <SysSizeFromFilenameNoSymlink(regs*)+0x56>
c00122cf:	83 ec 08             	sub    esp,0x8
c00122d2:	8d 44 24 20          	lea    eax,[esp+0x20]
c00122d6:	50                   	push   eax
c00122d7:	57                   	push   edi
c00122d8:	e8 42 8e ff ff       	call   c000b11f <KeDereferenceSymlink(char const*, char*)>
c00122dd:	83 c4 10             	add    esp,0x10
c00122e0:	83 f8 01             	cmp    eax,0x1
c00122e3:	74 1a                	je     c00122ff <SysSizeFromFilenameNoSymlink(regs*)+0xee>
c00122e5:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c00122ea:	74 26                	je     c0012312 <SysSizeFromFilenameNoSymlink(regs*)+0x101>
c00122ec:	85 f6                	test   esi,esi
c00122ee:	0f 84 5d ff ff ff    	je     c0012251 <SysSizeFromFilenameNoSymlink(regs*)+0x40>
c00122f4:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c00122fa:	e9 52 ff ff ff       	jmp    c0012251 <SysSizeFromFilenameNoSymlink(regs*)+0x40>
c00122ff:	85 f6                	test   esi,esi
c0012301:	0f 84 4a ff ff ff    	je     c0012251 <SysSizeFromFilenameNoSymlink(regs*)+0x40>
c0012307:	c7 06 02 00 00 00    	mov    DWORD PTR [esi],0x2
c001230d:	e9 3f ff ff ff       	jmp    c0012251 <SysSizeFromFilenameNoSymlink(regs*)+0x40>
c0012312:	85 f6                	test   esi,esi
c0012314:	0f 84 37 ff ff ff    	je     c0012251 <SysSizeFromFilenameNoSymlink(regs*)+0x40>
c001231a:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0012320:	e9 2c ff ff ff       	jmp    c0012251 <SysSizeFromFilenameNoSymlink(regs*)+0x40>

c0012325 <SysClose(regs*)>:
c0012325:	53                   	push   ebx
c0012326:	83 ec 08             	sub    esp,0x8
c0012329:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001232d:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0012330:	83 f8 02             	cmp    eax,0x2
c0012333:	76 41                	jbe    c0012376 <SysClose(regs*)+0x51>
c0012335:	8d 90 00 01 00 f0    	lea    edx,[eax-0xfffff00]
c001233b:	83 fa 01             	cmp    edx,0x1
c001233e:	76 2d                	jbe    c001236d <SysClose(regs*)+0x48>
c0012340:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0012345:	77 2f                	ja     c0012376 <SysClose(regs*)+0x51>
c0012347:	83 ec 0c             	sub    esp,0xc
c001234a:	50                   	push   eax
c001234b:	e8 63 71 ff ff       	call   c00094b3 <KeGetFileFromDescriptor(int)>
c0012350:	89 c3                	mov    ebx,eax
c0012352:	89 04 24             	mov    DWORD PTR [esp],eax
c0012355:	e8 7a 98 ff ff       	call   c000bbd4 <File::close()>
c001235a:	83 c4 10             	add    esp,0x10
c001235d:	85 db                	test   ebx,ebx
c001235f:	74 0c                	je     c001236d <SysClose(regs*)+0x48>
c0012361:	83 ec 0c             	sub    esp,0xc
c0012364:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012366:	53                   	push   ebx
c0012367:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001236a:	83 c4 10             	add    esp,0x10
c001236d:	31 c0                	xor    eax,eax
c001236f:	31 d2                	xor    edx,edx
c0012371:	83 c4 08             	add    esp,0x8
c0012374:	5b                   	pop    ebx
c0012375:	c3                   	ret    
c0012376:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001237b:	ba ff ff ff ff       	mov    edx,0xffffffff
c0012380:	83 c4 08             	add    esp,0x8
c0012383:	5b                   	pop    ebx
c0012384:	c3                   	ret    

c0012385 <SysOpenDir(regs*)>:
c0012385:	56                   	push   esi
c0012386:	53                   	push   ebx
c0012387:	83 ec 04             	sub    esp,0x4
c001238a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001238e:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c0012391:	85 c9                	test   ecx,ecx
c0012393:	74 5d                	je     c00123f2 <SysOpenDir(regs*)+0x6d>
c0012395:	83 ec 0c             	sub    esp,0xc
c0012398:	68 14 01 00 00       	push   0x114
c001239d:	e8 14 57 ff ff       	call   c0007ab6 <malloc>
c00123a2:	83 c4 0c             	add    esp,0xc
c00123a5:	89 c6                	mov    esi,eax
c00123a7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00123ac:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00123af:	50                   	push   eax
c00123b0:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c00123b3:	52                   	push   edx
c00123b4:	56                   	push   esi
c00123b5:	e8 7e 9c ff ff       	call   c000c038 <Directory::Directory(char const*, Process*)>
c00123ba:	83 c4 10             	add    esp,0x10
c00123bd:	85 f6                	test   esi,esi
c00123bf:	74 31                	je     c00123f2 <SysOpenDir(regs*)+0x6d>
c00123c1:	83 ec 0c             	sub    esp,0xc
c00123c4:	56                   	push   esi
c00123c5:	e8 36 9d ff ff       	call   c000c100 <Directory::open()>
c00123ca:	83 c4 10             	add    esp,0x10
c00123cd:	85 c0                	test   eax,eax
c00123cf:	75 21                	jne    c00123f2 <SysOpenDir(regs*)+0x6d>
c00123d1:	83 ec 0c             	sub    esp,0xc
c00123d4:	56                   	push   esi
c00123d5:	e8 dc 6d ff ff       	call   c00091b6 <UnixFile::getFileDescriptor()>
c00123da:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00123dd:	83 c4 10             	add    esp,0x10
c00123e0:	89 02                	mov    DWORD PTR [edx],eax
c00123e2:	c1 f8 1f             	sar    eax,0x1f
c00123e5:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00123e8:	83 c4 04             	add    esp,0x4
c00123eb:	31 c0                	xor    eax,eax
c00123ed:	31 d2                	xor    edx,edx
c00123ef:	5b                   	pop    ebx
c00123f0:	5e                   	pop    esi
c00123f1:	c3                   	ret    
c00123f2:	83 c4 04             	add    esp,0x4
c00123f5:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00123fa:	ba ff ff ff ff       	mov    edx,0xffffffff
c00123ff:	5b                   	pop    ebx
c0012400:	5e                   	pop    esi
c0012401:	c3                   	ret    

c0012402 <SysMakeDir(regs*)>:
c0012402:	56                   	push   esi
c0012403:	53                   	push   ebx
c0012404:	83 ec 10             	sub    esp,0x10
c0012407:	68 14 01 00 00       	push   0x114
c001240c:	e8 a5 56 ff ff       	call   c0007ab6 <malloc>
c0012411:	83 c4 0c             	add    esp,0xc
c0012414:	89 c3                	mov    ebx,eax
c0012416:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001241b:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001241e:	50                   	push   eax
c001241f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012423:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c0012426:	52                   	push   edx
c0012427:	53                   	push   ebx
c0012428:	e8 0b 9c ff ff       	call   c000c038 <Directory::Directory(char const*, Process*)>
c001242d:	83 c4 10             	add    esp,0x10
c0012430:	85 db                	test   ebx,ebx
c0012432:	74 2c                	je     c0012460 <SysMakeDir(regs*)+0x5e>
c0012434:	83 ec 0c             	sub    esp,0xc
c0012437:	53                   	push   ebx
c0012438:	e8 a3 9e ff ff       	call   c000c2e0 <Directory::create()>
c001243d:	89 c6                	mov    esi,eax
c001243f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012441:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0012444:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0012447:	83 c4 10             	add    esp,0x10
c001244a:	31 c0                	xor    eax,eax
c001244c:	85 f6                	test   esi,esi
c001244e:	0f 95 c0             	setne  al
c0012451:	31 d2                	xor    edx,edx
c0012453:	f7 d8                	neg    eax
c0012455:	83 d2 00             	adc    edx,0x0
c0012458:	83 c4 04             	add    esp,0x4
c001245b:	f7 da                	neg    edx
c001245d:	5b                   	pop    ebx
c001245e:	5e                   	pop    esi
c001245f:	c3                   	ret    
c0012460:	83 c4 04             	add    esp,0x4
c0012463:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0012468:	ba ff ff ff ff       	mov    edx,0xffffffff
c001246d:	5b                   	pop    ebx
c001246e:	5e                   	pop    esi
c001246f:	c3                   	ret    

c0012470 <SysCloseDir(regs*)>:
c0012470:	53                   	push   ebx
c0012471:	83 ec 08             	sub    esp,0x8
c0012474:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012478:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001247b:	8d 50 fd             	lea    edx,[eax-0x3]
c001247e:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c0012484:	77 2f                	ja     c00124b5 <SysCloseDir(regs*)+0x45>
c0012486:	83 ec 0c             	sub    esp,0xc
c0012489:	50                   	push   eax
c001248a:	e8 24 70 ff ff       	call   c00094b3 <KeGetFileFromDescriptor(int)>
c001248f:	89 c3                	mov    ebx,eax
c0012491:	89 04 24             	mov    DWORD PTR [esp],eax
c0012494:	e8 c3 9c ff ff       	call   c000c15c <Directory::close()>
c0012499:	83 c4 10             	add    esp,0x10
c001249c:	85 db                	test   ebx,ebx
c001249e:	74 0c                	je     c00124ac <SysCloseDir(regs*)+0x3c>
c00124a0:	83 ec 0c             	sub    esp,0xc
c00124a3:	8b 03                	mov    eax,DWORD PTR [ebx]
c00124a5:	53                   	push   ebx
c00124a6:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00124a9:	83 c4 10             	add    esp,0x10
c00124ac:	31 c0                	xor    eax,eax
c00124ae:	31 d2                	xor    edx,edx
c00124b0:	83 c4 08             	add    esp,0x8
c00124b3:	5b                   	pop    ebx
c00124b4:	c3                   	ret    
c00124b5:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00124ba:	ba ff ff ff ff       	mov    edx,0xffffffff
c00124bf:	83 c4 08             	add    esp,0x8
c00124c2:	5b                   	pop    ebx
c00124c3:	c3                   	ret    

c00124c4 <SysWait(regs*)>:
c00124c4:	83 ec 10             	sub    esp,0x10
c00124c7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00124cb:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c00124ce:	52                   	push   edx
c00124cf:	8b 48 24             	mov    ecx,DWORD PTR [eax+0x24]
c00124d2:	51                   	push   ecx
c00124d3:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00124d6:	50                   	push   eax
c00124d7:	e8 00 3e 00 00       	call   c00162dc <waitTask(int, int*, int)>
c00124dc:	83 c4 1c             	add    esp,0x1c
c00124df:	89 c2                	mov    edx,eax
c00124e1:	c1 fa 1f             	sar    edx,0x1f
c00124e4:	c3                   	ret    

c00124e5 <SysNotImpl(regs*)>:
c00124e5:	83 ec 18             	sub    esp,0x18
c00124e8:	68 66 24 02 c0       	push   0xc0022466
c00124ed:	e8 39 f1 ff ff       	call   c001162b <KePanic(char const*)>
c00124f2:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00124f7:	ba ff ff ff ff       	mov    edx,0xffffffff
c00124fc:	83 c4 1c             	add    esp,0x1c
c00124ff:	c3                   	ret    

c0012500 <SysPanic(regs*)>:
c0012500:	83 ec 18             	sub    esp,0x18
c0012503:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012507:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c001250a:	50                   	push   eax
c001250b:	e8 1b f1 ff ff       	call   c001162b <KePanic(char const*)>
c0012510:	b8 01 00 00 00       	mov    eax,0x1
c0012515:	31 d2                	xor    edx,edx
c0012517:	83 c4 1c             	add    esp,0x1c
c001251a:	c3                   	ret    

c001251b <SysRmdir(regs*)>:
c001251b:	56                   	push   esi
c001251c:	53                   	push   ebx
c001251d:	83 ec 20             	sub    esp,0x20
c0012520:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0012524:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0012527:	68 14 01 00 00       	push   0x114
c001252c:	e8 85 55 ff ff       	call   c0007ab6 <malloc>
c0012531:	6a 00                	push   0x0
c0012533:	89 c3                	mov    ebx,eax
c0012535:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001253a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001253d:	50                   	push   eax
c001253e:	56                   	push   esi
c001253f:	53                   	push   ebx
c0012540:	e8 35 95 ff ff       	call   c000ba7a <File::File(char const*, Process*, bool)>
c0012545:	83 c4 14             	add    esp,0x14
c0012548:	53                   	push   ebx
c0012549:	e8 f6 97 ff ff       	call   c000bd44 <File::unlink()>
c001254e:	83 c4 10             	add    esp,0x10
c0012551:	85 db                	test   ebx,ebx
c0012553:	74 14                	je     c0012569 <SysRmdir(regs*)+0x4e>
c0012555:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012559:	8b 13                	mov    edx,DWORD PTR [ebx]
c001255b:	83 ec 0c             	sub    esp,0xc
c001255e:	53                   	push   ebx
c001255f:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0012562:	83 c4 10             	add    esp,0x10
c0012565:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012569:	85 c0                	test   eax,eax
c001256b:	0f 95 c0             	setne  al
c001256e:	31 d2                	xor    edx,edx
c0012570:	0f b6 c0             	movzx  eax,al
c0012573:	f7 d8                	neg    eax
c0012575:	83 d2 00             	adc    edx,0x0
c0012578:	83 c4 14             	add    esp,0x14
c001257b:	f7 da                	neg    edx
c001257d:	5b                   	pop    ebx
c001257e:	5e                   	pop    esi
c001257f:	c3                   	ret    

c0012580 <SysUnlink(regs*)>:
c0012580:	56                   	push   esi
c0012581:	53                   	push   ebx
c0012582:	83 ec 20             	sub    esp,0x20
c0012585:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0012589:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001258c:	68 14 01 00 00       	push   0x114
c0012591:	e8 20 55 ff ff       	call   c0007ab6 <malloc>
c0012596:	6a 00                	push   0x0
c0012598:	89 c3                	mov    ebx,eax
c001259a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001259f:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00125a2:	50                   	push   eax
c00125a3:	56                   	push   esi
c00125a4:	53                   	push   ebx
c00125a5:	e8 d0 94 ff ff       	call   c000ba7a <File::File(char const*, Process*, bool)>
c00125aa:	83 c4 14             	add    esp,0x14
c00125ad:	53                   	push   ebx
c00125ae:	e8 91 97 ff ff       	call   c000bd44 <File::unlink()>
c00125b3:	83 c4 10             	add    esp,0x10
c00125b6:	85 db                	test   ebx,ebx
c00125b8:	74 14                	je     c00125ce <SysUnlink(regs*)+0x4e>
c00125ba:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00125be:	8b 13                	mov    edx,DWORD PTR [ebx]
c00125c0:	83 ec 0c             	sub    esp,0xc
c00125c3:	53                   	push   ebx
c00125c4:	ff 52 08             	call   DWORD PTR [edx+0x8]
c00125c7:	83 c4 10             	add    esp,0x10
c00125ca:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00125ce:	85 c0                	test   eax,eax
c00125d0:	0f 95 c0             	setne  al
c00125d3:	31 d2                	xor    edx,edx
c00125d5:	0f b6 c0             	movzx  eax,al
c00125d8:	f7 d8                	neg    eax
c00125da:	83 d2 00             	adc    edx,0x0
c00125dd:	83 c4 14             	add    esp,0x14
c00125e0:	f7 da                	neg    edx
c00125e2:	5b                   	pop    ebx
c00125e3:	5e                   	pop    esi
c00125e4:	c3                   	ret    

c00125e5 <SysGetArgv(regs*)>:
c00125e5:	83 ec 0c             	sub    esp,0xc
c00125e8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00125ec:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c00125ef:	85 c0                	test   eax,eax
c00125f1:	78 2c                	js     c001261f <SysGetArgv(regs*)+0x3a>
c00125f3:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c00125f9:	8b 49 3c             	mov    ecx,DWORD PTR [ecx+0x3c]
c00125fc:	3b 81 16 05 00 00    	cmp    eax,DWORD PTR [ecx+0x516]
c0012602:	7d 1b                	jge    c001261f <SysGetArgv(regs*)+0x3a>
c0012604:	8b 84 81 1a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x51a]
c001260b:	85 c0                	test   eax,eax
c001260d:	74 18                	je     c0012627 <SysGetArgv(regs*)+0x42>
c001260f:	83 ec 08             	sub    esp,0x8
c0012612:	50                   	push   eax
c0012613:	8b 42 24             	mov    eax,DWORD PTR [edx+0x24]
c0012616:	50                   	push   eax
c0012617:	e8 24 e0 fe ff       	call   c0000640 <strcpy>
c001261c:	83 c4 10             	add    esp,0x10
c001261f:	31 c0                	xor    eax,eax
c0012621:	31 d2                	xor    edx,edx
c0012623:	83 c4 0c             	add    esp,0xc
c0012626:	c3                   	ret    
c0012627:	b8 01 00 00 00       	mov    eax,0x1
c001262c:	31 d2                	xor    edx,edx
c001262e:	83 c4 0c             	add    esp,0xc
c0012631:	c3                   	ret    

c0012632 <SysUSleep(regs*)>:
c0012632:	83 ec 1c             	sub    esp,0x1c
c0012635:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0012639:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c001263c:	8b 51 28             	mov    edx,DWORD PTR [ecx+0x28]
c001263f:	6a 00                	push   0x0
c0012641:	6a 64                	push   0x64
c0012643:	52                   	push   edx
c0012644:	50                   	push   eax
c0012645:	e8 b6 d0 00 00       	call   c001f700 <__udivdi3>
c001264a:	83 c4 14             	add    esp,0x14
c001264d:	50                   	push   eax
c001264e:	e8 6d 3d 00 00       	call   c00163c0 <milliTenthSleep(unsigned int)>
c0012653:	31 c0                	xor    eax,eax
c0012655:	31 d2                	xor    edx,edx
c0012657:	83 c4 1c             	add    esp,0x1c
c001265a:	c3                   	ret    

c001265b <SysSpawn(regs*)>:
c001265b:	56                   	push   esi
c001265c:	53                   	push   ebx
c001265d:	83 ec 04             	sub    esp,0x4
c0012660:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012664:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0012667:	85 f6                	test   esi,esi
c0012669:	75 0a                	jne    c0012675 <SysSpawn(regs*)+0x1a>
c001266b:	83 c4 04             	add    esp,0x4
c001266e:	31 c0                	xor    eax,eax
c0012670:	31 d2                	xor    edx,edx
c0012672:	5b                   	pop    ebx
c0012673:	5e                   	pop    esi
c0012674:	c3                   	ret    
c0012675:	83 ec 0c             	sub    esp,0xc
c0012678:	68 24 07 00 00       	push   0x724
c001267d:	e8 34 54 ff ff       	call   c0007ab6 <malloc>
c0012682:	83 c4 10             	add    esp,0x10
c0012685:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c0012688:	89 c6                	mov    esi,eax
c001268a:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c001268d:	85 c9                	test   ecx,ecx
c001268f:	75 39                	jne    c00126ca <SysSpawn(regs*)+0x6f>
c0012691:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012696:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0012699:	52                   	push   edx
c001269a:	50                   	push   eax
c001269b:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001269e:	50                   	push   eax
c001269f:	56                   	push   esi
c00126a0:	e8 6b 33 00 00       	call   c0015a10 <Process::Process(char const*, Process*, char**)>
c00126a5:	83 c4 10             	add    esp,0x10
c00126a8:	80 be 1e 07 00 00 00 	cmp    BYTE PTR [esi+0x71e],0x0
c00126af:	75 ba                	jne    c001266b <SysSpawn(regs*)+0x10>
c00126b1:	83 ec 0c             	sub    esp,0xc
c00126b4:	56                   	push   esi
c00126b5:	e8 92 38 00 00       	call   c0015f4c <Process::createUserThread()>
c00126ba:	8b 06                	mov    eax,DWORD PTR [esi]
c00126bc:	83 c4 10             	add    esp,0x10
c00126bf:	89 c2                	mov    edx,eax
c00126c1:	83 c4 04             	add    esp,0x4
c00126c4:	c1 fa 1f             	sar    edx,0x1f
c00126c7:	5b                   	pop    ebx
c00126c8:	5e                   	pop    esi
c00126c9:	c3                   	ret    
c00126ca:	31 c0                	xor    eax,eax
c00126cc:	eb cb                	jmp    c0012699 <SysSpawn(regs*)+0x3e>

c00126ce <SysGetEnv(regs*)>:
c00126ce:	57                   	push   edi
c00126cf:	56                   	push   esi
c00126d0:	53                   	push   ebx
c00126d1:	83 ec 1c             	sub    esp,0x1c
c00126d4:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00126d8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00126dd:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c00126e0:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c00126e3:	8b 48 3c             	mov    ecx,DWORD PTR [eax+0x3c]
c00126e6:	51                   	push   ecx
c00126e7:	e8 f7 ed ff ff       	call   c00114e3 <KeGetProcessTotalEnvCount(Process*)>
c00126ec:	83 c4 10             	add    esp,0x10
c00126ef:	39 c7                	cmp    edi,eax
c00126f1:	7c 14                	jl     c0012707 <SysGetEnv(regs*)+0x39>
c00126f3:	85 f6                	test   esi,esi
c00126f5:	75 0b                	jne    c0012702 <SysGetEnv(regs*)+0x34>
c00126f7:	83 c4 10             	add    esp,0x10
c00126fa:	31 c0                	xor    eax,eax
c00126fc:	5b                   	pop    ebx
c00126fd:	31 d2                	xor    edx,edx
c00126ff:	5e                   	pop    esi
c0012700:	5f                   	pop    edi
c0012701:	c3                   	ret    
c0012702:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0012705:	eb f0                	jmp    c00126f7 <SysGetEnv(regs*)+0x29>
c0012707:	8d 44 24 08          	lea    eax,[esp+0x8]
c001270b:	83 ec 04             	sub    esp,0x4
c001270e:	57                   	push   edi
c001270f:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0012715:	8b 7a 3c             	mov    edi,DWORD PTR [edx+0x3c]
c0012718:	57                   	push   edi
c0012719:	50                   	push   eax
c001271a:	e8 e4 ed ff ff       	call   c0011503 <KeGetProcessEnvPair(Process*, int)>
c001271f:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0012722:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012726:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001272a:	83 c4 0c             	add    esp,0xc
c001272d:	85 d2                	test   edx,edx
c001272f:	75 23                	jne    c0012754 <SysGetEnv(regs*)+0x86>
c0012731:	83 ec 0c             	sub    esp,0xc
c0012734:	50                   	push   eax
c0012735:	e8 36 de fe ff       	call   c0000570 <strlen>
c001273a:	89 3c 24             	mov    DWORD PTR [esp],edi
c001273d:	89 c3                	mov    ebx,eax
c001273f:	e8 2c de fe ff       	call   c0000570 <strlen>
c0012744:	83 c4 10             	add    esp,0x10
c0012747:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c001274b:	83 c4 10             	add    esp,0x10
c001274e:	31 d2                	xor    edx,edx
c0012750:	5b                   	pop    ebx
c0012751:	5e                   	pop    esi
c0012752:	5f                   	pop    edi
c0012753:	c3                   	ret    
c0012754:	83 ec 08             	sub    esp,0x8
c0012757:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001275a:	50                   	push   eax
c001275b:	56                   	push   esi
c001275c:	e8 df de fe ff       	call   c0000640 <strcpy>
c0012761:	58                   	pop    eax
c0012762:	5a                   	pop    edx
c0012763:	68 80 24 02 c0       	push   0xc0022480
c0012768:	56                   	push   esi
c0012769:	e8 d2 e0 fe ff       	call   c0000840 <strcat>
c001276e:	59                   	pop    ecx
c001276f:	5b                   	pop    ebx
c0012770:	57                   	push   edi
c0012771:	56                   	push   esi
c0012772:	e8 c9 e0 fe ff       	call   c0000840 <strcat>
c0012777:	83 c4 10             	add    esp,0x10
c001277a:	e9 78 ff ff ff       	jmp    c00126f7 <SysGetEnv(regs*)+0x29>

c001277f <SysSetFatAttrib(regs*)>:
c001277f:	57                   	push   edi
c0012780:	56                   	push   esi
c0012781:	53                   	push   ebx
c0012782:	83 ec 1c             	sub    esp,0x1c
c0012785:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0012789:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c001278c:	68 14 01 00 00       	push   0x114
c0012791:	e8 20 53 ff ff       	call   c0007ab6 <malloc>
c0012796:	83 c4 0c             	add    esp,0xc
c0012799:	89 c3                	mov    ebx,eax
c001279b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00127a0:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00127a3:	50                   	push   eax
c00127a4:	57                   	push   edi
c00127a5:	53                   	push   ebx
c00127a6:	e8 ad 93 ff ff       	call   c000bb58 <File::File(char const*, Process*)>
c00127ab:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c00127ae:	83 c4 0c             	add    esp,0xc
c00127b1:	0f b6 d4             	movzx  edx,ah
c00127b4:	0f b6 c0             	movzx  eax,al
c00127b7:	52                   	push   edx
c00127b8:	50                   	push   eax
c00127b9:	53                   	push   ebx
c00127ba:	e8 1f 96 ff ff       	call   c000bdde <File::chfatattr(unsigned char, unsigned char)>
c00127bf:	83 c4 10             	add    esp,0x10
c00127c2:	85 db                	test   ebx,ebx
c00127c4:	74 14                	je     c00127da <SysSetFatAttrib(regs*)+0x5b>
c00127c6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00127ca:	8b 13                	mov    edx,DWORD PTR [ebx]
c00127cc:	83 ec 0c             	sub    esp,0xc
c00127cf:	53                   	push   ebx
c00127d0:	ff 52 08             	call   DWORD PTR [edx+0x8]
c00127d3:	83 c4 10             	add    esp,0x10
c00127d6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00127da:	85 c0                	test   eax,eax
c00127dc:	0f 95 c0             	setne  al
c00127df:	31 d2                	xor    edx,edx
c00127e1:	0f b6 c0             	movzx  eax,al
c00127e4:	f7 d8                	neg    eax
c00127e6:	83 d2 00             	adc    edx,0x0
c00127e9:	83 c4 10             	add    esp,0x10
c00127ec:	f7 da                	neg    edx
c00127ee:	5b                   	pop    ebx
c00127ef:	5e                   	pop    esi
c00127f0:	5f                   	pop    edi
c00127f1:	c3                   	ret    

c00127f2 <SysPipe(regs*)>:
c00127f2:	57                   	push   edi
c00127f3:	56                   	push   esi
c00127f4:	53                   	push   ebx
c00127f5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00127f9:	83 ec 0c             	sub    esp,0xc
c00127fc:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c00127ff:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c0012802:	6a 20                	push   0x20
c0012804:	e8 ad 52 ff ff       	call   c0007ab6 <malloc>
c0012809:	89 c3                	mov    ebx,eax
c001280b:	58                   	pop    eax
c001280c:	5a                   	pop    edx
c001280d:	68 00 50 00 00       	push   0x5000
c0012812:	53                   	push   ebx
c0012813:	e8 10 5c ff ff       	call   c0008428 <Pipe::Pipe(int)>
c0012818:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001281b:	e8 96 69 ff ff       	call   c00091b6 <UnixFile::getFileDescriptor()>
c0012820:	89 07                	mov    DWORD PTR [edi],eax
c0012822:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0012825:	e8 8c 69 ff ff       	call   c00091b6 <UnixFile::getFileDescriptor()>
c001282a:	83 c4 10             	add    esp,0x10
c001282d:	89 06                	mov    DWORD PTR [esi],eax
c001282f:	31 d2                	xor    edx,edx
c0012831:	5b                   	pop    ebx
c0012832:	31 c0                	xor    eax,eax
c0012834:	5e                   	pop    esi
c0012835:	5f                   	pop    edi
c0012836:	c3                   	ret    

c0012837 <SysGetUnixTime(regs*)>:
c0012837:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c001283c:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0012842:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012846:	e9 db 9c ff ff       	jmp    c000c526 <Clock::timeInSecondsLocal()>

c001284b <string_ends_with(char const*, char const*)>:
c001284b:	57                   	push   edi
c001284c:	56                   	push   esi
c001284d:	53                   	push   ebx
c001284e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012852:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0012856:	83 ec 0c             	sub    esp,0xc
c0012859:	53                   	push   ebx
c001285a:	e8 11 dd fe ff       	call   c0000570 <strlen>
c001285f:	89 3c 24             	mov    DWORD PTR [esp],edi
c0012862:	89 c6                	mov    esi,eax
c0012864:	e8 07 dd fe ff       	call   c0000570 <strlen>
c0012869:	83 c4 10             	add    esp,0x10
c001286c:	39 c6                	cmp    esi,eax
c001286e:	7d 06                	jge    c0012876 <string_ends_with(char const*, char const*)+0x2b>
c0012870:	5b                   	pop    ebx
c0012871:	31 c0                	xor    eax,eax
c0012873:	5e                   	pop    esi
c0012874:	5f                   	pop    edi
c0012875:	c3                   	ret    
c0012876:	83 ec 08             	sub    esp,0x8
c0012879:	29 c6                	sub    esi,eax
c001287b:	57                   	push   edi
c001287c:	01 f3                	add    ebx,esi
c001287e:	53                   	push   ebx
c001287f:	e8 cc de fe ff       	call   c0000750 <strcmp>
c0012884:	83 c4 10             	add    esp,0x10
c0012887:	85 c0                	test   eax,eax
c0012889:	5b                   	pop    ebx
c001288a:	0f 94 c0             	sete   al
c001288d:	5e                   	pop    esi
c001288e:	0f b6 c0             	movzx  eax,al
c0012891:	5f                   	pop    edi
c0012892:	c3                   	ret    

c0012893 <SysOpen(regs*)>:
c0012893:	56                   	push   esi
c0012894:	53                   	push   ebx
c0012895:	81 ec 04 01 00 00    	sub    esp,0x104
c001289b:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c00128a2:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00128a5:	85 c0                	test   eax,eax
c00128a7:	0f 84 bc 01 00 00    	je     c0012a69 <SysOpen(regs*)+0x1d6>
c00128ad:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00128b0:	85 c0                	test   eax,eax
c00128b2:	0f 84 b1 01 00 00    	je     c0012a69 <SysOpen(regs*)+0x1d6>
c00128b8:	6a 00                	push   0x0
c00128ba:	68 82 24 02 c0       	push   0xc0022482
c00128bf:	50                   	push   eax
c00128c0:	8d 74 24 0c          	lea    esi,[esp+0xc]
c00128c4:	56                   	push   esi
c00128c5:	e8 a6 8f ff ff       	call   c000b870 <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c00128ca:	89 34 24             	mov    DWORD PTR [esp],esi
c00128cd:	e8 9e dc fe ff       	call   c0000570 <strlen>
c00128d2:	83 c4 10             	add    esp,0x10
c00128d5:	83 e8 01             	sub    eax,0x1
c00128d8:	74 21                	je     c00128fb <SysOpen(regs*)+0x68>
c00128da:	0f be 14 04          	movsx  edx,BYTE PTR [esp+eax*1]
c00128de:	eb 12                	jmp    c00128f2 <SysOpen(regs*)+0x5f>
c00128e0:	83 fa 3a             	cmp    edx,0x3a
c00128e3:	74 12                	je     c00128f7 <SysOpen(regs*)+0x64>
c00128e5:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c00128e9:	83 e8 01             	sub    eax,0x1
c00128ec:	74 0d                	je     c00128fb <SysOpen(regs*)+0x68>
c00128ee:	0f be 14 06          	movsx  edx,BYTE PTR [esi+eax*1]
c00128f2:	83 fa 2e             	cmp    edx,0x2e
c00128f5:	75 e9                	jne    c00128e0 <SysOpen(regs*)+0x4d>
c00128f7:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c00128fb:	83 ec 08             	sub    esp,0x8
c00128fe:	68 86 24 02 c0       	push   0xc0022486
c0012903:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0012906:	50                   	push   eax
c0012907:	e8 3f ff ff ff       	call   c001284b <string_ends_with(char const*, char const*)>
c001290c:	83 c4 10             	add    esp,0x10
c001290f:	85 c0                	test   eax,eax
c0012911:	74 1d                	je     c0012930 <SysOpen(regs*)+0x9d>
c0012913:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0012916:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c001291c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0012923:	81 c4 04 01 00 00    	add    esp,0x104
c0012929:	31 c0                	xor    eax,eax
c001292b:	31 d2                	xor    edx,edx
c001292d:	5b                   	pop    ebx
c001292e:	5e                   	pop    esi
c001292f:	c3                   	ret    
c0012930:	83 ec 08             	sub    esp,0x8
c0012933:	68 8b 24 02 c0       	push   0xc002248b
c0012938:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001293b:	50                   	push   eax
c001293c:	e8 0a ff ff ff       	call   c001284b <string_ends_with(char const*, char const*)>
c0012941:	83 c4 10             	add    esp,0x10
c0012944:	85 c0                	test   eax,eax
c0012946:	75 cb                	jne    c0012913 <SysOpen(regs*)+0x80>
c0012948:	83 ec 08             	sub    esp,0x8
c001294b:	68 87 24 02 c0       	push   0xc0022487
c0012950:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0012953:	50                   	push   eax
c0012954:	e8 f7 dd fe ff       	call   c0000750 <strcmp>
c0012959:	83 c4 10             	add    esp,0x10
c001295c:	85 c0                	test   eax,eax
c001295e:	74 b3                	je     c0012913 <SysOpen(regs*)+0x80>
c0012960:	83 ec 08             	sub    esp,0x8
c0012963:	68 86 24 02 c0       	push   0xc0022486
c0012968:	56                   	push   esi
c0012969:	e8 dd fe ff ff       	call   c001284b <string_ends_with(char const*, char const*)>
c001296e:	83 c4 10             	add    esp,0x10
c0012971:	85 c0                	test   eax,eax
c0012973:	75 9e                	jne    c0012913 <SysOpen(regs*)+0x80>
c0012975:	83 ec 08             	sub    esp,0x8
c0012978:	68 90 24 02 c0       	push   0xc0022490
c001297d:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0012980:	50                   	push   eax
c0012981:	e8 c5 fe ff ff       	call   c001284b <string_ends_with(char const*, char const*)>
c0012986:	83 c4 10             	add    esp,0x10
c0012989:	85 c0                	test   eax,eax
c001298b:	0f 85 eb 00 00 00    	jne    c0012a7c <SysOpen(regs*)+0x1e9>
c0012991:	83 ec 08             	sub    esp,0x8
c0012994:	68 95 24 02 c0       	push   0xc0022495
c0012999:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001299c:	50                   	push   eax
c001299d:	e8 a9 fe ff ff       	call   c001284b <string_ends_with(char const*, char const*)>
c00129a2:	83 c4 10             	add    esp,0x10
c00129a5:	85 c0                	test   eax,eax
c00129a7:	0f 85 cf 00 00 00    	jne    c0012a7c <SysOpen(regs*)+0x1e9>
c00129ad:	83 ec 08             	sub    esp,0x8
c00129b0:	68 91 24 02 c0       	push   0xc0022491
c00129b5:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c00129b8:	51                   	push   ecx
c00129b9:	e8 92 dd fe ff       	call   c0000750 <strcmp>
c00129be:	83 c4 10             	add    esp,0x10
c00129c1:	85 c0                	test   eax,eax
c00129c3:	0f 84 b3 00 00 00    	je     c0012a7c <SysOpen(regs*)+0x1e9>
c00129c9:	83 ec 08             	sub    esp,0x8
c00129cc:	68 90 24 02 c0       	push   0xc0022490
c00129d1:	56                   	push   esi
c00129d2:	e8 74 fe ff ff       	call   c001284b <string_ends_with(char const*, char const*)>
c00129d7:	83 c4 10             	add    esp,0x10
c00129da:	85 c0                	test   eax,eax
c00129dc:	0f 85 9a 00 00 00    	jne    c0012a7c <SysOpen(regs*)+0x1e9>
c00129e2:	83 ec 0c             	sub    esp,0xc
c00129e5:	68 14 01 00 00       	push   0x114
c00129ea:	e8 c7 50 ff ff       	call   c0007ab6 <malloc>
c00129ef:	83 c4 0c             	add    esp,0xc
c00129f2:	89 c6                	mov    esi,eax
c00129f4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00129f9:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00129fc:	50                   	push   eax
c00129fd:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0012a00:	52                   	push   edx
c0012a01:	56                   	push   esi
c0012a02:	e8 51 91 ff ff       	call   c000bb58 <File::File(char const*, Process*)>
c0012a07:	83 c4 10             	add    esp,0x10
c0012a0a:	85 f6                	test   esi,esi
c0012a0c:	74 5b                	je     c0012a69 <SysOpen(regs*)+0x1d6>
c0012a0e:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0012a11:	0f b6 c2             	movzx  eax,dl
c0012a14:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c0012a17:	89 d0                	mov    eax,edx
c0012a19:	83 e0 01             	and    eax,0x1
c0012a1c:	f6 c2 02             	test   dl,0x2
c0012a1f:	74 03                	je     c0012a24 <SysOpen(regs*)+0x191>
c0012a21:	83 c8 02             	or     eax,0x2
c0012a24:	f6 c2 04             	test   dl,0x4
c0012a27:	74 03                	je     c0012a2c <SysOpen(regs*)+0x199>
c0012a29:	83 c8 04             	or     eax,0x4
c0012a2c:	f6 c2 08             	test   dl,0x8
c0012a2f:	74 03                	je     c0012a34 <SysOpen(regs*)+0x1a1>
c0012a31:	83 c8 0a             	or     eax,0xa
c0012a34:	80 e2 10             	and    dl,0x10
c0012a37:	74 03                	je     c0012a3c <SysOpen(regs*)+0x1a9>
c0012a39:	83 c8 12             	or     eax,0x12
c0012a3c:	83 ec 08             	sub    esp,0x8
c0012a3f:	50                   	push   eax
c0012a40:	56                   	push   esi
c0012a41:	e8 30 91 ff ff       	call   c000bb76 <File::open(FileOpenMode)>
c0012a46:	83 c4 10             	add    esp,0x10
c0012a49:	85 c0                	test   eax,eax
c0012a4b:	75 1c                	jne    c0012a69 <SysOpen(regs*)+0x1d6>
c0012a4d:	83 ec 0c             	sub    esp,0xc
c0012a50:	56                   	push   esi
c0012a51:	e8 60 67 ff ff       	call   c00091b6 <UnixFile::getFileDescriptor()>
c0012a56:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0012a59:	83 c4 10             	add    esp,0x10
c0012a5c:	89 02                	mov    DWORD PTR [edx],eax
c0012a5e:	c1 f8 1f             	sar    eax,0x1f
c0012a61:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0012a64:	e9 ba fe ff ff       	jmp    c0012923 <SysOpen(regs*)+0x90>
c0012a69:	81 c4 04 01 00 00    	add    esp,0x104
c0012a6f:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0012a74:	ba ff ff ff ff       	mov    edx,0xffffffff
c0012a79:	5b                   	pop    ebx
c0012a7a:	5e                   	pop    esi
c0012a7b:	c3                   	ret    
c0012a7c:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0012a7f:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c0012a85:	e9 92 fe ff ff       	jmp    c001291c <SysOpen(regs*)+0x89>

c0012a8a <KeSystemCall(regs*, void*)>:
c0012a8a:	53                   	push   ebx
c0012a8b:	83 ec 08             	sub    esp,0x8
c0012a8e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012a92:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0012a95:	83 f8 3e             	cmp    eax,0x3e
c0012a98:	77 16                	ja     c0012ab0 <KeSystemCall(regs*, void*)+0x26>
c0012a9a:	8b 14 85 a0 3c 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdc360]
c0012aa1:	85 d2                	test   edx,edx
c0012aa3:	74 0b                	je     c0012ab0 <KeSystemCall(regs*, void*)+0x26>
c0012aa5:	83 ec 0c             	sub    esp,0xc
c0012aa8:	53                   	push   ebx
c0012aa9:	ff d2                	call   edx
c0012aab:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0012aae:	eb 0d                	jmp    c0012abd <KeSystemCall(regs*, void*)+0x33>
c0012ab0:	52                   	push   edx
c0012ab1:	52                   	push   edx
c0012ab2:	50                   	push   eax
c0012ab3:	68 9a 24 02 c0       	push   0xc002249a
c0012ab8:	e8 88 7e ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0012abd:	83 c4 10             	add    esp,0x10
c0012ac0:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0012ac5:	31 d2                	xor    edx,edx
c0012ac7:	83 c4 08             	add    esp,0x8
c0012aca:	5b                   	pop    ebx
c0012acb:	c3                   	ret    

c0012acc <KeSwitchEndian16(unsigned short)>:
c0012acc:	83 ec 04             	sub    esp,0x4
c0012acf:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0012ad3:	66 89 04 24          	mov    WORD PTR [esp],ax
c0012ad7:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0012adb:	c1 f8 08             	sar    eax,0x8
c0012ade:	89 c2                	mov    edx,eax
c0012ae0:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0012ae4:	c1 e0 08             	shl    eax,0x8
c0012ae7:	09 d0                	or     eax,edx
c0012ae9:	83 c4 04             	add    esp,0x4
c0012aec:	c3                   	ret    
c0012aed:	8d 76 00             	lea    esi,[esi+0x0]

c0012af0 <KeSwitchEndian32(unsigned int)>:
c0012af0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012af4:	c1 e8 18             	shr    eax,0x18
c0012af7:	89 c2                	mov    edx,eax
c0012af9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012afd:	c1 e0 08             	shl    eax,0x8
c0012b00:	25 00 00 ff 00       	and    eax,0xff0000
c0012b05:	09 c2                	or     edx,eax
c0012b07:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012b0b:	c1 e8 08             	shr    eax,0x8
c0012b0e:	25 00 ff 00 00       	and    eax,0xff00
c0012b13:	09 c2                	or     edx,eax
c0012b15:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012b19:	c1 e0 18             	shl    eax,0x18
c0012b1c:	09 d0                	or     eax,edx
c0012b1e:	c3                   	ret    
c0012b1f:	90                   	nop

c0012b20 <EthernetCRC32(unsigned char*, int)>:
c0012b20:	83 ec 10             	sub    esp,0x10
c0012b23:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0012b28:	75 0a                	jne    c0012b34 <EthernetCRC32(unsigned char*, int)+0x14>
c0012b2a:	b8 00 00 00 00       	mov    eax,0x0
c0012b2f:	e9 8c 00 00 00       	jmp    c0012bc0 <EthernetCRC32(unsigned char*, int)+0xa0>
c0012b34:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0012b39:	7f 09                	jg     c0012b44 <EthernetCRC32(unsigned char*, int)+0x24>
c0012b3b:	b8 00 00 00 00       	mov    eax,0x0
c0012b40:	eb 7e                	jmp    c0012bc0 <EthernetCRC32(unsigned char*, int)+0xa0>
c0012b42:	66 90                	xchg   ax,ax
c0012b44:	c7 44 24 04 ff ff ff ff 	mov    DWORD PTR [esp+0x4],0xffffffff
c0012b4c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0012b54:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0012b58:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c0012b5c:	7d 5a                	jge    c0012bb8 <EthernetCRC32(unsigned char*, int)+0x98>
c0012b5e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012b62:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012b66:	01 d0                	add    eax,edx
c0012b68:	8a 00                	mov    al,BYTE PTR [eax]
c0012b6a:	0f b6 c0             	movzx  eax,al
c0012b6d:	31 44 24 04          	xor    DWORD PTR [esp+0x4],eax
c0012b71:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0012b79:	8d 76 00             	lea    esi,[esi+0x0]
c0012b7c:	83 7c 24 0c 07       	cmp    DWORD PTR [esp+0xc],0x7
c0012b81:	7f 2d                	jg     c0012bb0 <EthernetCRC32(unsigned char*, int)+0x90>
c0012b83:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012b87:	83 e0 01             	and    eax,0x1
c0012b8a:	74 10                	je     c0012b9c <EthernetCRC32(unsigned char*, int)+0x7c>
c0012b8c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012b90:	d1 e8                	shr    eax,1
c0012b92:	35 20 83 b8 ed       	xor    eax,0xedb88320
c0012b97:	eb 0b                	jmp    c0012ba4 <EthernetCRC32(unsigned char*, int)+0x84>
c0012b99:	8d 76 00             	lea    esi,[esi+0x0]
c0012b9c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012ba0:	d1 e8                	shr    eax,1
c0012ba2:	66 90                	xchg   ax,ax
c0012ba4:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012ba8:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c0012bad:	eb cd                	jmp    c0012b7c <EthernetCRC32(unsigned char*, int)+0x5c>
c0012baf:	90                   	nop
c0012bb0:	83 44 24 08 01       	add    DWORD PTR [esp+0x8],0x1
c0012bb5:	eb 9d                	jmp    c0012b54 <EthernetCRC32(unsigned char*, int)+0x34>
c0012bb7:	90                   	nop
c0012bb8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012bbc:	f7 d0                	not    eax
c0012bbe:	66 90                	xchg   ax,ax
c0012bc0:	83 c4 10             	add    esp,0x10
c0012bc3:	c3                   	ret    

c0012bc4 <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)>:
c0012bc4:	83 ec 2c             	sub    esp,0x2c
c0012bc7:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012bcb:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0012bd0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012bd4:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0012bd8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012bdc:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0012bdf:	0f b7 c0             	movzx  eax,ax
c0012be2:	3d 06 08 00 00       	cmp    eax,0x806
c0012be7:	75 13                	jne    c0012bfc <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)+0x38>
c0012be9:	83 ec 0c             	sub    esp,0xc
c0012bec:	68 ae 24 02 c0       	push   0xc00224ae
c0012bf1:	e8 4f 7d ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0012bf6:	83 c4 10             	add    esp,0x10
c0012bf9:	eb 25                	jmp    c0012c20 <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)+0x5c>
c0012bfb:	90                   	nop
c0012bfc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012c00:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0012c03:	0f b7 c0             	movzx  eax,ax
c0012c06:	3d 00 08 00 00       	cmp    eax,0x800
c0012c0b:	75 13                	jne    c0012c20 <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)+0x5c>
c0012c0d:	83 ec 0c             	sub    esp,0xc
c0012c10:	68 c4 24 02 c0       	push   0xc00224c4
c0012c15:	e8 2b 7d ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0012c1a:	83 c4 10             	add    esp,0x10
c0012c1d:	8d 76 00             	lea    esi,[esi+0x0]
c0012c20:	90                   	nop
c0012c21:	83 c4 2c             	add    esp,0x2c
c0012c24:	c3                   	ret    

c0012c25 <CmOpen(char const*)>:
c0012c25:	57                   	push   edi
c0012c26:	56                   	push   esi
c0012c27:	53                   	push   ebx
c0012c28:	83 ec 1c             	sub    esp,0x1c
c0012c2b:	6a 30                	push   0x30
c0012c2d:	e8 84 4e ff ff       	call   c0007ab6 <malloc>
c0012c32:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0012c39:	89 c3                	mov    ebx,eax
c0012c3b:	e8 76 4e ff ff       	call   c0007ab6 <malloc>
c0012c40:	83 c4 0c             	add    esp,0xc
c0012c43:	89 c6                	mov    esi,eax
c0012c45:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c0012c4b:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0012c4f:	50                   	push   eax
c0012c50:	e8 03 8f ff ff       	call   c000bb58 <File::File(char const*, Process*)>
c0012c55:	83 c4 0c             	add    esp,0xc
c0012c58:	89 33                	mov    DWORD PTR [ebx],esi
c0012c5a:	8d 44 24 07          	lea    eax,[esp+0x7]
c0012c5e:	50                   	push   eax
c0012c5f:	8d 44 24 10          	lea    eax,[esp+0x10]
c0012c63:	50                   	push   eax
c0012c64:	56                   	push   esi
c0012c65:	e8 0e 92 ff ff       	call   c000be78 <File::stat(unsigned long long*, bool*)>
c0012c6a:	5a                   	pop    edx
c0012c6b:	59                   	pop    ecx
c0012c6c:	6a 01                	push   0x1
c0012c6e:	ff 33                	push   DWORD PTR [ebx]
c0012c70:	e8 01 8f ff ff       	call   c000bb76 <File::open(FileOpenMode)>
c0012c75:	5e                   	pop    esi
c0012c76:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012c7a:	e8 37 4e ff ff       	call   c0007ab6 <malloc>
c0012c7f:	5a                   	pop    edx
c0012c80:	89 c7                	mov    edi,eax
c0012c82:	8d 74 24 10          	lea    esi,[esp+0x10]
c0012c86:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012c88:	8b 10                	mov    edx,DWORD PTR [eax]
c0012c8a:	56                   	push   esi
c0012c8b:	57                   	push   edi
c0012c8c:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0012c90:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0012c94:	50                   	push   eax
c0012c95:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0012c98:	83 c4 14             	add    esp,0x14
c0012c9b:	ff 33                	push   DWORD PTR [ebx]
c0012c9d:	e8 32 8f ff ff       	call   c000bbd4 <File::close()>
c0012ca2:	59                   	pop    ecx
c0012ca3:	58                   	pop    eax
c0012ca4:	6a 13                	push   0x13
c0012ca6:	ff 33                	push   DWORD PTR [ebx]
c0012ca8:	e8 c9 8e ff ff       	call   c000bb76 <File::open(FileOpenMode)>
c0012cad:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012caf:	8b 10                	mov    edx,DWORD PTR [eax]
c0012cb1:	89 34 24             	mov    DWORD PTR [esp],esi
c0012cb4:	57                   	push   edi
c0012cb5:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0012cb9:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0012cbd:	50                   	push   eax
c0012cbe:	ff 52 10             	call   DWORD PTR [edx+0x10]
c0012cc1:	83 c4 14             	add    esp,0x14
c0012cc4:	57                   	push   edi
c0012cc5:	e8 fc 4d ff ff       	call   c0007ac6 <free>
c0012cca:	83 c4 10             	add    esp,0x10
c0012ccd:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0012cd0:	75 10                	jne    c0012ce2 <CmOpen(char const*)+0xbd>
c0012cd2:	83 ec 0c             	sub    esp,0xc
c0012cd5:	68 d9 24 02 c0       	push   0xc00224d9
c0012cda:	e8 4c e9 ff ff       	call   c001162b <KePanic(char const*)>
c0012cdf:	83 c4 10             	add    esp,0x10
c0012ce2:	8d 7b 05             	lea    edi,[ebx+0x5]
c0012ce5:	50                   	push   eax
c0012ce6:	6a 00                	push   0x0
c0012ce8:	6a 00                	push   0x0
c0012cea:	ff 33                	push   DWORD PTR [ebx]
c0012cec:	e8 43 8f ff ff       	call   c000bc34 <File::seek(unsigned long long)>
c0012cf1:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012cf3:	8b 10                	mov    edx,DWORD PTR [eax]
c0012cf5:	89 34 24             	mov    DWORD PTR [esp],esi
c0012cf8:	57                   	push   edi
c0012cf9:	6a 00                	push   0x0
c0012cfb:	6a 2b                	push   0x2b
c0012cfd:	50                   	push   eax
c0012cfe:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0012d01:	83 c4 1c             	add    esp,0x1c
c0012d04:	6a 00                	push   0x0
c0012d06:	6a 00                	push   0x0
c0012d08:	ff 33                	push   DWORD PTR [ebx]
c0012d0a:	e8 25 8f ff ff       	call   c000bc34 <File::seek(unsigned long long)>
c0012d0f:	83 c4 0c             	add    esp,0xc
c0012d12:	6a 08                	push   0x8
c0012d14:	68 ea 24 02 c0       	push   0xc00224ea
c0012d19:	57                   	push   edi
c0012d1a:	e8 61 d6 fe ff       	call   c0000380 <memcmp>
c0012d1f:	83 c4 10             	add    esp,0x10
c0012d22:	85 c0                	test   eax,eax
c0012d24:	74 10                	je     c0012d36 <CmOpen(char const*)+0x111>
c0012d26:	83 ec 0c             	sub    esp,0xc
c0012d29:	68 f3 24 02 c0       	push   0xc00224f3
c0012d2e:	e8 f8 e8 ff ff       	call   c001162b <KePanic(char const*)>
c0012d33:	83 c4 10             	add    esp,0x10
c0012d36:	c6 43 04 01          	mov    BYTE PTR [ebx+0x4],0x1
c0012d3a:	89 d8                	mov    eax,ebx
c0012d3c:	83 c4 10             	add    esp,0x10
c0012d3f:	5b                   	pop    ebx
c0012d40:	5e                   	pop    esi
c0012d41:	5f                   	pop    edi
c0012d42:	c3                   	ret    

c0012d43 <CmClose(Reghive_Tag*)>:
c0012d43:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012d47:	80 78 04 00          	cmp    BYTE PTR [eax+0x4],0x0
c0012d4b:	74 0b                	je     c0012d58 <CmClose(Reghive_Tag*)+0x15>
c0012d4d:	8b 00                	mov    eax,DWORD PTR [eax]
c0012d4f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012d53:	e9 7c 8e ff ff       	jmp    c000bbd4 <File::close()>
c0012d58:	c3                   	ret    

c0012d59 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>:
c0012d59:	53                   	push   ebx
c0012d5a:	83 ec 18             	sub    esp,0x18
c0012d5d:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0012d61:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c0012d65:	74 29                	je     c0012d90 <CmReadExtent(Reghive_Tag*, int, unsigned char*)+0x37>
c0012d67:	50                   	push   eax
c0012d68:	6b 44 24 28 2b       	imul   eax,DWORD PTR [esp+0x28],0x2b
c0012d6d:	99                   	cdq    
c0012d6e:	52                   	push   edx
c0012d6f:	50                   	push   eax
c0012d70:	ff 33                	push   DWORD PTR [ebx]
c0012d72:	e8 bd 8e ff ff       	call   c000bc34 <File::seek(unsigned long long)>
c0012d77:	5a                   	pop    edx
c0012d78:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012d7a:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0012d7e:	8b 10                	mov    edx,DWORD PTR [eax]
c0012d80:	51                   	push   ecx
c0012d81:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0012d85:	6a 00                	push   0x0
c0012d87:	6a 2b                	push   0x2b
c0012d89:	50                   	push   eax
c0012d8a:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0012d8d:	83 c4 20             	add    esp,0x20
c0012d90:	83 c4 18             	add    esp,0x18
c0012d93:	5b                   	pop    ebx
c0012d94:	c3                   	ret    

c0012d95 <CmGetString(Reghive_Tag*, int, char*)>:
c0012d95:	55                   	push   ebp
c0012d96:	57                   	push   edi
c0012d97:	56                   	push   esi
c0012d98:	53                   	push   ebx
c0012d99:	31 db                	xor    ebx,ebx
c0012d9b:	83 ec 70             	sub    esp,0x70
c0012d9e:	8b ac 24 84 00 00 00 	mov    ebp,DWORD PTR [esp+0x84]
c0012da5:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0012da9:	50                   	push   eax
c0012daa:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c0012db1:	55                   	push   ebp
c0012db2:	e8 a2 ff ff ff       	call   c0012d59 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012db7:	83 c4 10             	add    esp,0x10
c0012dba:	0f b6 44 1c 22       	movzx  eax,BYTE PTR [esp+ebx*1+0x22]
c0012dbf:	c1 e0 08             	shl    eax,0x8
c0012dc2:	89 c2                	mov    edx,eax
c0012dc4:	0f b6 44 1c 21       	movzx  eax,BYTE PTR [esp+ebx*1+0x21]
c0012dc9:	09 d0                	or     eax,edx
c0012dcb:	0f b6 54 1c 20       	movzx  edx,BYTE PTR [esp+ebx*1+0x20]
c0012dd0:	c1 e0 08             	shl    eax,0x8
c0012dd3:	09 d0                	or     eax,edx
c0012dd5:	74 25                	je     c0012dfc <CmGetString(Reghive_Tag*, int, char*)+0x67>
c0012dd7:	6b fb 0d             	imul   edi,ebx,0xd
c0012dda:	52                   	push   edx
c0012ddb:	8d 54 24 39          	lea    edx,[esp+0x39]
c0012ddf:	52                   	push   edx
c0012de0:	50                   	push   eax
c0012de1:	55                   	push   ebp
c0012de2:	e8 72 ff ff ff       	call   c0012d59 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012de7:	8d 74 24 49          	lea    esi,[esp+0x49]
c0012deb:	03 bc 24 98 00 00 00 	add    edi,DWORD PTR [esp+0x98]
c0012df2:	b9 27 00 00 00       	mov    ecx,0x27
c0012df7:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0012df9:	83 c4 10             	add    esp,0x10
c0012dfc:	83 c3 03             	add    ebx,0x3
c0012dff:	83 fb 15             	cmp    ebx,0x15
c0012e02:	75 b6                	jne    c0012dba <CmGetString(Reghive_Tag*, int, char*)+0x25>
c0012e04:	83 c4 6c             	add    esp,0x6c
c0012e07:	5b                   	pop    ebx
c0012e08:	5e                   	pop    esi
c0012e09:	5f                   	pop    edi
c0012e0a:	5d                   	pop    ebp
c0012e0b:	c3                   	ret    

c0012e0c <CmEnterDirectory(Reghive_Tag*, int)>:
c0012e0c:	83 ec 40             	sub    esp,0x40
c0012e0f:	8d 44 24 09          	lea    eax,[esp+0x9]
c0012e13:	50                   	push   eax
c0012e14:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012e18:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012e1c:	e8 38 ff ff ff       	call   c0012d59 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012e21:	83 c4 10             	add    esp,0x10
c0012e24:	83 c8 ff             	or     eax,0xffffffff
c0012e27:	80 7c 24 05 4e       	cmp    BYTE PTR [esp+0x5],0x4e
c0012e2c:	75 19                	jne    c0012e47 <CmEnterDirectory(Reghive_Tag*, int)+0x3b>
c0012e2e:	0f b6 54 24 1b       	movzx  edx,BYTE PTR [esp+0x1b]
c0012e33:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0012e38:	c1 e0 08             	shl    eax,0x8
c0012e3b:	09 c2                	or     edx,eax
c0012e3d:	0f b6 44 24 1d       	movzx  eax,BYTE PTR [esp+0x1d]
c0012e42:	c1 e0 10             	shl    eax,0x10
c0012e45:	09 d0                	or     eax,edx
c0012e47:	83 c4 3c             	add    esp,0x3c
c0012e4a:	c3                   	ret    

c0012e4b <CmGetNext(Reghive_Tag*, int)>:
c0012e4b:	83 ec 40             	sub    esp,0x40
c0012e4e:	8d 44 24 09          	lea    eax,[esp+0x9]
c0012e52:	50                   	push   eax
c0012e53:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012e57:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012e5b:	e8 f9 fe ff ff       	call   c0012d59 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012e60:	0f b6 54 24 16       	movzx  edx,BYTE PTR [esp+0x16]
c0012e65:	0f b6 44 24 17       	movzx  eax,BYTE PTR [esp+0x17]
c0012e6a:	c1 e0 08             	shl    eax,0x8
c0012e6d:	09 c2                	or     edx,eax
c0012e6f:	0f b6 44 24 18       	movzx  eax,BYTE PTR [esp+0x18]
c0012e74:	83 c4 4c             	add    esp,0x4c
c0012e77:	c1 e0 10             	shl    eax,0x10
c0012e7a:	09 d0                	or     eax,edx
c0012e7c:	c3                   	ret    

c0012e7d <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>:
c0012e7d:	53                   	push   ebx
c0012e7e:	83 ec 18             	sub    esp,0x18
c0012e81:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0012e85:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c0012e89:	74 29                	je     c0012eb4 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)+0x37>
c0012e8b:	50                   	push   eax
c0012e8c:	6b 44 24 28 2b       	imul   eax,DWORD PTR [esp+0x28],0x2b
c0012e91:	99                   	cdq    
c0012e92:	52                   	push   edx
c0012e93:	50                   	push   eax
c0012e94:	ff 33                	push   DWORD PTR [ebx]
c0012e96:	e8 99 8d ff ff       	call   c000bc34 <File::seek(unsigned long long)>
c0012e9b:	5a                   	pop    edx
c0012e9c:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012e9e:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0012ea2:	8b 10                	mov    edx,DWORD PTR [eax]
c0012ea4:	51                   	push   ecx
c0012ea5:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0012ea9:	6a 00                	push   0x0
c0012eab:	6a 2b                	push   0x2b
c0012ead:	50                   	push   eax
c0012eae:	ff 52 10             	call   DWORD PTR [edx+0x10]
c0012eb1:	83 c4 20             	add    esp,0x20
c0012eb4:	83 c4 18             	add    esp,0x18
c0012eb7:	5b                   	pop    ebx
c0012eb8:	c3                   	ret    

c0012eb9 <CmFreeExtent(Reghive_Tag*, int)>:
c0012eb9:	53                   	push   ebx
c0012eba:	83 ec 3c             	sub    esp,0x3c
c0012ebd:	6a 2b                	push   0x2b
c0012ebf:	6a 00                	push   0x0
c0012ec1:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c0012ec5:	53                   	push   ebx
c0012ec6:	e8 25 d6 fe ff       	call   c00004f0 <memset>
c0012ecb:	83 c4 0c             	add    esp,0xc
c0012ece:	53                   	push   ebx
c0012ecf:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012ed3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012ed7:	e8 a1 ff ff ff       	call   c0012e7d <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0012edc:	83 c4 48             	add    esp,0x48
c0012edf:	5b                   	pop    ebx
c0012ee0:	c3                   	ret    

c0012ee1 <CmUpdateHeader(Reghive_Tag*)>:
c0012ee1:	83 ec 0c             	sub    esp,0xc
c0012ee4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012ee8:	80 78 04 00          	cmp    BYTE PTR [eax+0x4],0x0
c0012eec:	74 10                	je     c0012efe <CmUpdateHeader(Reghive_Tag*)+0x1d>
c0012eee:	52                   	push   edx
c0012eef:	8d 50 05             	lea    edx,[eax+0x5]
c0012ef2:	52                   	push   edx
c0012ef3:	6a 00                	push   0x0
c0012ef5:	50                   	push   eax
c0012ef6:	e8 82 ff ff ff       	call   c0012e7d <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0012efb:	83 c4 10             	add    esp,0x10
c0012efe:	83 c4 0c             	add    esp,0xc
c0012f01:	c3                   	ret    

c0012f02 <CmExpand(Reghive_Tag*, int)>:
c0012f02:	57                   	push   edi
c0012f03:	56                   	push   esi
c0012f04:	83 ce ff             	or     esi,0xffffffff
c0012f07:	53                   	push   ebx
c0012f08:	83 ec 30             	sub    esp,0x30
c0012f0b:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0012f0f:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c0012f13:	74 5f                	je     c0012f74 <CmExpand(Reghive_Tag*, int)+0x72>
c0012f15:	31 d2                	xor    edx,edx
c0012f17:	31 f6                	xor    esi,esi
c0012f19:	50                   	push   eax
c0012f1a:	6b 43 0d 2b          	imul   eax,DWORD PTR [ebx+0xd],0x2b
c0012f1e:	52                   	push   edx
c0012f1f:	50                   	push   eax
c0012f20:	ff 33                	push   DWORD PTR [ebx]
c0012f22:	e8 0d 8d ff ff       	call   c000bc34 <File::seek(unsigned long long)>
c0012f27:	83 c4 0c             	add    esp,0xc
c0012f2a:	6a 2b                	push   0x2b
c0012f2c:	6a 00                	push   0x0
c0012f2e:	8d 7c 24 11          	lea    edi,[esp+0x11]
c0012f32:	57                   	push   edi
c0012f33:	e8 b8 d5 fe ff       	call   c00004f0 <memset>
c0012f38:	83 c4 10             	add    esp,0x10
c0012f3b:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c0012f3f:	7d 1b                	jge    c0012f5c <CmExpand(Reghive_Tag*, int)+0x5a>
c0012f41:	83 ec 0c             	sub    esp,0xc
c0012f44:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012f46:	8d 4c 24 0c          	lea    ecx,[esp+0xc]
c0012f4a:	8b 10                	mov    edx,DWORD PTR [eax]
c0012f4c:	46                   	inc    esi
c0012f4d:	51                   	push   ecx
c0012f4e:	57                   	push   edi
c0012f4f:	6a 00                	push   0x0
c0012f51:	6a 2b                	push   0x2b
c0012f53:	50                   	push   eax
c0012f54:	ff 52 10             	call   DWORD PTR [edx+0x10]
c0012f57:	83 c4 20             	add    esp,0x20
c0012f5a:	eb df                	jmp    c0012f3b <CmExpand(Reghive_Tag*, int)+0x39>
c0012f5c:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0012f60:	8b 73 0d             	mov    esi,DWORD PTR [ebx+0xd]
c0012f63:	83 ec 0c             	sub    esp,0xc
c0012f66:	01 f2                	add    edx,esi
c0012f68:	89 53 0d             	mov    DWORD PTR [ebx+0xd],edx
c0012f6b:	53                   	push   ebx
c0012f6c:	e8 70 ff ff ff       	call   c0012ee1 <CmUpdateHeader(Reghive_Tag*)>
c0012f71:	83 c4 10             	add    esp,0x10
c0012f74:	83 c4 30             	add    esp,0x30
c0012f77:	89 f0                	mov    eax,esi
c0012f79:	5b                   	pop    ebx
c0012f7a:	5e                   	pop    esi
c0012f7b:	5f                   	pop    edi
c0012f7c:	c3                   	ret    

c0012f7d <CmFindUnusedExtent(Reghive_Tag*)>:
c0012f7d:	55                   	push   ebp
c0012f7e:	57                   	push   edi
c0012f7f:	56                   	push   esi
c0012f80:	53                   	push   ebx
c0012f81:	83 cb ff             	or     ebx,0xffffffff
c0012f84:	83 ec 1c             	sub    esp,0x1c
c0012f87:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0012f8b:	80 7d 04 00          	cmp    BYTE PTR [ebp+0x4],0x0
c0012f8f:	74 68                	je     c0012ff9 <CmFindUnusedExtent(Reghive_Tag*)+0x7c>
c0012f91:	be 2b 00 00 00       	mov    esi,0x2b
c0012f96:	51                   	push   ecx
c0012f97:	31 ff                	xor    edi,edi
c0012f99:	6a 00                	push   0x0
c0012f9b:	31 db                	xor    ebx,ebx
c0012f9d:	6a 00                	push   0x0
c0012f9f:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c0012fa2:	e8 8d 8c ff ff       	call   c000bc34 <File::seek(unsigned long long)>
c0012fa7:	83 c4 10             	add    esp,0x10
c0012faa:	39 5d 0d             	cmp    DWORD PTR [ebp+0xd],ebx
c0012fad:	76 3b                	jbe    c0012fea <CmFindUnusedExtent(Reghive_Tag*)+0x6d>
c0012faf:	83 ec 0c             	sub    esp,0xc
c0012fb2:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012fb5:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0012fb9:	8b 10                	mov    edx,DWORD PTR [eax]
c0012fbb:	51                   	push   ecx
c0012fbc:	8d 4c 24 1b          	lea    ecx,[esp+0x1b]
c0012fc0:	51                   	push   ecx
c0012fc1:	6a 00                	push   0x0
c0012fc3:	6a 01                	push   0x1
c0012fc5:	50                   	push   eax
c0012fc6:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0012fc9:	83 c4 20             	add    esp,0x20
c0012fcc:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0012fd1:	74 26                	je     c0012ff9 <CmFindUnusedExtent(Reghive_Tag*)+0x7c>
c0012fd3:	43                   	inc    ebx
c0012fd4:	52                   	push   edx
c0012fd5:	57                   	push   edi
c0012fd6:	56                   	push   esi
c0012fd7:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c0012fda:	e8 55 8c ff ff       	call   c000bc34 <File::seek(unsigned long long)>
c0012fdf:	83 c6 2b             	add    esi,0x2b
c0012fe2:	83 d7 00             	adc    edi,0x0
c0012fe5:	83 c4 10             	add    esp,0x10
c0012fe8:	eb c0                	jmp    c0012faa <CmFindUnusedExtent(Reghive_Tag*)+0x2d>
c0012fea:	50                   	push   eax
c0012feb:	50                   	push   eax
c0012fec:	6a 40                	push   0x40
c0012fee:	55                   	push   ebp
c0012fef:	e8 0e ff ff ff       	call   c0012f02 <CmExpand(Reghive_Tag*, int)>
c0012ff4:	83 c4 10             	add    esp,0x10
c0012ff7:	89 c3                	mov    ebx,eax
c0012ff9:	83 c4 1c             	add    esp,0x1c
c0012ffc:	89 d8                	mov    eax,ebx
c0012ffe:	5b                   	pop    ebx
c0012fff:	5e                   	pop    esi
c0013000:	5f                   	pop    edi
c0013001:	5d                   	pop    ebp
c0013002:	c3                   	ret    

c0013003 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>:
c0013003:	55                   	push   ebp
c0013004:	57                   	push   edi
c0013005:	56                   	push   esi
c0013006:	53                   	push   ebx
c0013007:	81 ec 88 00 00 00    	sub    esp,0x88
c001300d:	8b 9c 24 a0 00 00 00 	mov    ebx,DWORD PTR [esp+0xa0]
c0013014:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c001301b:	e8 5d ff ff ff       	call   c0012f7d <CmFindUnusedExtent(Reghive_Tag*)>
c0013020:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0013024:	83 c4 0c             	add    esp,0xc
c0013027:	6a 2b                	push   0x2b
c0013029:	6a 00                	push   0x0
c001302b:	8d 6c 24 26          	lea    ebp,[esp+0x26]
c001302f:	55                   	push   ebp
c0013030:	e8 bb d4 fe ff       	call   c00004f0 <memset>
c0013035:	83 c4 10             	add    esp,0x10
c0013038:	85 db                	test   ebx,ebx
c001303a:	74 12                	je     c001304e <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x4b>
c001303c:	51                   	push   ecx
c001303d:	55                   	push   ebp
c001303e:	53                   	push   ebx
c001303f:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0013046:	e8 0e fd ff ff       	call   c0012d59 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c001304b:	83 c4 10             	add    esp,0x10
c001304e:	8d 7c 24 45          	lea    edi,[esp+0x45]
c0013052:	8b b4 24 9c 00 00 00 	mov    esi,DWORD PTR [esp+0x9c]
c0013059:	b9 2b 00 00 00       	mov    ecx,0x2b
c001305e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013060:	85 db                	test   ebx,ebx
c0013062:	74 49                	je     c00130ad <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xaa>
c0013064:	0f b6 4c 24 1b       	movzx  ecx,BYTE PTR [esp+0x1b]
c0013069:	0f b7 44 24 1c       	movzx  eax,WORD PTR [esp+0x1c]
c001306e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0013072:	c1 e0 08             	shl    eax,0x8
c0013075:	81 e2 ff ff ff 00    	and    edx,0xffffff
c001307b:	09 c8                	or     eax,ecx
c001307d:	74 11                	je     c0013090 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x8d>
c001307f:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c0013083:	88 64 24 47          	mov    BYTE PTR [esp+0x47],ah
c0013087:	c1 e8 10             	shr    eax,0x10
c001308a:	88 44 24 48          	mov    BYTE PTR [esp+0x48],al
c001308e:	eb 0f                	jmp    c001309f <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x9c>
c0013090:	c6 44 24 46 00       	mov    BYTE PTR [esp+0x46],0x0
c0013095:	c6 44 24 47 00       	mov    BYTE PTR [esp+0x47],0x0
c001309a:	c6 44 24 48 00       	mov    BYTE PTR [esp+0x48],0x0
c001309f:	88 54 24 1b          	mov    BYTE PTR [esp+0x1b],dl
c00130a3:	c1 ea 08             	shr    edx,0x8
c00130a6:	66 89 54 24 1c       	mov    WORD PTR [esp+0x1c],dx
c00130ab:	eb 0f                	jmp    c00130bc <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xb9>
c00130ad:	c6 44 24 46 00       	mov    BYTE PTR [esp+0x46],0x0
c00130b2:	c6 44 24 47 00       	mov    BYTE PTR [esp+0x47],0x0
c00130b7:	c6 44 24 48 00       	mov    BYTE PTR [esp+0x48],0x0
c00130bc:	52                   	push   edx
c00130bd:	8d 44 24 49          	lea    eax,[esp+0x49]
c00130c1:	50                   	push   eax
c00130c2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00130c6:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c00130cd:	e8 ab fd ff ff       	call   c0012e7d <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c00130d2:	83 c4 10             	add    esp,0x10
c00130d5:	85 db                	test   ebx,ebx
c00130d7:	74 12                	je     c00130eb <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xe8>
c00130d9:	50                   	push   eax
c00130da:	55                   	push   ebp
c00130db:	53                   	push   ebx
c00130dc:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c00130e3:	e8 95 fd ff ff       	call   c0012e7d <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c00130e8:	83 c4 10             	add    esp,0x10
c00130eb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00130ef:	83 c4 7c             	add    esp,0x7c
c00130f2:	5b                   	pop    ebx
c00130f3:	5e                   	pop    esi
c00130f4:	5f                   	pop    edi
c00130f5:	5d                   	pop    ebp
c00130f6:	c3                   	ret    

c00130f7 <CmSetString(Reghive_Tag*, int, char const*)>:
c00130f7:	55                   	push   ebp
c00130f8:	57                   	push   edi
c00130f9:	56                   	push   esi
c00130fa:	53                   	push   ebx
c00130fb:	bb 27 00 00 00       	mov    ebx,0x27
c0013100:	81 ec 88 00 00 00    	sub    esp,0x88
c0013106:	8b b4 24 9c 00 00 00 	mov    esi,DWORD PTR [esp+0x9c]
c001310d:	ff b4 24 a4 00 00 00 	push   DWORD PTR [esp+0xa4]
c0013114:	e8 57 d4 fe ff       	call   c0000570 <strlen>
c0013119:	8d 48 26             	lea    ecx,[eax+0x26]
c001311c:	89 c8                	mov    eax,ecx
c001311e:	99                   	cdq    
c001311f:	f7 fb                	idiv   ebx
c0013121:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0013125:	83 c4 10             	add    esp,0x10
c0013128:	81 f9 37 01 00 00    	cmp    ecx,0x137
c001312e:	7e 10                	jle    c0013140 <CmSetString(Reghive_Tag*, int, char const*)+0x49>
c0013130:	83 ec 0c             	sub    esp,0xc
c0013133:	68 04 25 02 c0       	push   0xc0022504
c0013138:	e8 ee e4 ff ff       	call   c001162b <KePanic(char const*)>
c001313d:	83 c4 10             	add    esp,0x10
c0013140:	31 ff                	xor    edi,edi
c0013142:	50                   	push   eax
c0013143:	8d 5c 24 1e          	lea    ebx,[esp+0x1e]
c0013147:	53                   	push   ebx
c0013148:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c001314f:	56                   	push   esi
c0013150:	e8 04 fc ff ff       	call   c0012d59 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0013155:	83 c4 10             	add    esp,0x10
c0013158:	0f b6 53 18          	movzx  edx,BYTE PTR [ebx+0x18]
c001315c:	89 d0                	mov    eax,edx
c001315e:	0f b6 53 17          	movzx  edx,BYTE PTR [ebx+0x17]
c0013162:	c1 e0 08             	shl    eax,0x8
c0013165:	09 c2                	or     edx,eax
c0013167:	0f b6 43 16          	movzx  eax,BYTE PTR [ebx+0x16]
c001316b:	c1 e2 08             	shl    edx,0x8
c001316e:	09 c2                	or     edx,eax
c0013170:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c0013174:	7e 76                	jle    c00131ec <CmSetString(Reghive_Tag*, int, char const*)+0xf5>
c0013176:	85 d2                	test   edx,edx
c0013178:	75 25                	jne    c001319f <CmSetString(Reghive_Tag*, int, char const*)+0xa8>
c001317a:	c6 44 24 45 13       	mov    BYTE PTR [esp+0x45],0x13
c001317f:	8d 44 24 45          	lea    eax,[esp+0x45]
c0013183:	50                   	push   eax
c0013184:	6a 00                	push   0x0
c0013186:	6a 00                	push   0x0
c0013188:	56                   	push   esi
c0013189:	e8 75 fe ff ff       	call   c0013003 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c001318e:	83 c4 10             	add    esp,0x10
c0013191:	89 c2                	mov    edx,eax
c0013193:	88 43 16             	mov    BYTE PTR [ebx+0x16],al
c0013196:	88 63 17             	mov    BYTE PTR [ebx+0x17],ah
c0013199:	c1 f8 10             	sar    eax,0x10
c001319c:	88 43 18             	mov    BYTE PTR [ebx+0x18],al
c001319f:	55                   	push   ebp
c00131a0:	8d 6c 24 49          	lea    ebp,[esp+0x49]
c00131a4:	55                   	push   ebp
c00131a5:	52                   	push   edx
c00131a6:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00131aa:	56                   	push   esi
c00131ab:	e8 a9 fb ff ff       	call   c0012d59 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c00131b0:	83 c4 0c             	add    esp,0xc
c00131b3:	6a 27                	push   0x27
c00131b5:	6a 00                	push   0x0
c00131b7:	8d 4c 24 55          	lea    ecx,[esp+0x55]
c00131bb:	51                   	push   ecx
c00131bc:	e8 2f d3 fe ff       	call   c00004f0 <memset>
c00131c1:	83 c4 0c             	add    esp,0xc
c00131c4:	6b c7 27             	imul   eax,edi,0x27
c00131c7:	6a 27                	push   0x27
c00131c9:	03 84 24 a0 00 00 00 	add    eax,DWORD PTR [esp+0xa0]
c00131d0:	50                   	push   eax
c00131d1:	8d 4c 24 55          	lea    ecx,[esp+0x55]
c00131d5:	51                   	push   ecx
c00131d6:	e8 a5 d4 fe ff       	call   c0000680 <strncpy>
c00131db:	83 c4 0c             	add    esp,0xc
c00131de:	55                   	push   ebp
c00131df:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00131e3:	52                   	push   edx
c00131e4:	56                   	push   esi
c00131e5:	e8 93 fc ff ff       	call   c0012e7d <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c00131ea:	eb 19                	jmp    c0013205 <CmSetString(Reghive_Tag*, int, char const*)+0x10e>
c00131ec:	85 d2                	test   edx,edx
c00131ee:	74 18                	je     c0013208 <CmSetString(Reghive_Tag*, int, char const*)+0x111>
c00131f0:	51                   	push   ecx
c00131f1:	51                   	push   ecx
c00131f2:	52                   	push   edx
c00131f3:	56                   	push   esi
c00131f4:	e8 c0 fc ff ff       	call   c0012eb9 <CmFreeExtent(Reghive_Tag*, int)>
c00131f9:	c6 43 16 00          	mov    BYTE PTR [ebx+0x16],0x0
c00131fd:	c6 43 17 00          	mov    BYTE PTR [ebx+0x17],0x0
c0013201:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c0013205:	83 c4 10             	add    esp,0x10
c0013208:	47                   	inc    edi
c0013209:	83 c3 03             	add    ebx,0x3
c001320c:	83 ff 07             	cmp    edi,0x7
c001320f:	0f 85 43 ff ff ff    	jne    c0013158 <CmSetString(Reghive_Tag*, int, char const*)+0x61>
c0013215:	50                   	push   eax
c0013216:	8d 44 24 1e          	lea    eax,[esp+0x1e]
c001321a:	50                   	push   eax
c001321b:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0013222:	56                   	push   esi
c0013223:	e8 55 fc ff ff       	call   c0012e7d <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0013228:	81 c4 8c 00 00 00    	add    esp,0x8c
c001322e:	5b                   	pop    ebx
c001322f:	5e                   	pop    esi
c0013230:	5f                   	pop    edi
c0013231:	5d                   	pop    ebp
c0013232:	c3                   	ret    

c0013233 <CmGetMatch(char*, char*, bool, bool*)>:
c0013233:	56                   	push   esi
c0013234:	53                   	push   ebx
c0013235:	50                   	push   eax
c0013236:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c001323a:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c001323f:	74 25                	je     c0013266 <CmGetMatch(char*, char*, bool, bool*)+0x33>
c0013241:	c6 06 01             	mov    BYTE PTR [esi],0x1
c0013244:	31 db                	xor    ebx,ebx
c0013246:	50                   	push   eax
c0013247:	50                   	push   eax
c0013248:	8d 04 9d a0 3d 02 c0 	lea    eax,[ebx*4-0x3ffdc260]
c001324f:	50                   	push   eax
c0013250:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013254:	e8 f7 d4 fe ff       	call   c0000750 <strcmp>
c0013259:	83 c4 10             	add    esp,0x10
c001325c:	85 c0                	test   eax,eax
c001325e:	74 2e                	je     c001328e <CmGetMatch(char*, char*, bool, bool*)+0x5b>
c0013260:	43                   	inc    ebx
c0013261:	83 fb 3f             	cmp    ebx,0x3f
c0013264:	75 e0                	jne    c0013246 <CmGetMatch(char*, char*, bool, bool*)+0x13>
c0013266:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0013269:	31 db                	xor    ebx,ebx
c001326b:	8d 04 9d a0 3d 02 c0 	lea    eax,[ebx*4-0x3ffdc260]
c0013272:	51                   	push   ecx
c0013273:	51                   	push   ecx
c0013274:	50                   	push   eax
c0013275:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0013279:	e8 d2 d4 fe ff       	call   c0000750 <strcmp>
c001327e:	83 c4 10             	add    esp,0x10
c0013281:	85 c0                	test   eax,eax
c0013283:	74 09                	je     c001328e <CmGetMatch(char*, char*, bool, bool*)+0x5b>
c0013285:	43                   	inc    ebx
c0013286:	83 fb 3f             	cmp    ebx,0x3f
c0013289:	75 e0                	jne    c001326b <CmGetMatch(char*, char*, bool, bool*)+0x38>
c001328b:	83 cb ff             	or     ebx,0xffffffff
c001328e:	89 d8                	mov    eax,ebx
c0013290:	5a                   	pop    edx
c0013291:	5b                   	pop    ebx
c0013292:	5e                   	pop    esi
c0013293:	c3                   	ret    

c0013294 <CmAddShift(unsigned int*, int*, unsigned char, int)>:
c0013294:	55                   	push   ebp
c0013295:	31 c0                	xor    eax,eax
c0013297:	57                   	push   edi
c0013298:	56                   	push   esi
c0013299:	53                   	push   ebx
c001329a:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001329e:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00132a2:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00132a4:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00132a8:	8d 2c 31             	lea    ebp,[ecx+esi*1]
c00132ab:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00132af:	83 fd 1f             	cmp    ebp,0x1f
c00132b2:	7f 0b                	jg     c00132bf <CmAddShift(unsigned int*, int*, unsigned char, int)+0x2b>
c00132b4:	0f b6 c2             	movzx  eax,dl
c00132b7:	d3 e0                	shl    eax,cl
c00132b9:	09 07                	or     DWORD PTR [edi],eax
c00132bb:	b0 01                	mov    al,0x1
c00132bd:	01 33                	add    DWORD PTR [ebx],esi
c00132bf:	5b                   	pop    ebx
c00132c0:	5e                   	pop    esi
c00132c1:	5f                   	pop    edi
c00132c2:	5d                   	pop    ebp
c00132c3:	c3                   	ret    

c00132c4 <CmGetShift(unsigned int*, int*, int, bool*)>:
c00132c4:	57                   	push   edi
c00132c5:	56                   	push   esi
c00132c6:	53                   	push   ebx
c00132c7:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00132cb:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00132cf:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c00132d3:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00132d7:	39 0b                	cmp    DWORD PTR [ebx],ecx
c00132d9:	7c 17                	jl     c00132f2 <CmGetShift(unsigned int*, int*, int, bool*)+0x2e>
c00132db:	8b 17                	mov    edx,DWORD PTR [edi]
c00132dd:	b8 01 00 00 00       	mov    eax,0x1
c00132e2:	d3 e0                	shl    eax,cl
c00132e4:	48                   	dec    eax
c00132e5:	21 d0                	and    eax,edx
c00132e7:	d3 ea                	shr    edx,cl
c00132e9:	89 17                	mov    DWORD PTR [edi],edx
c00132eb:	29 0b                	sub    DWORD PTR [ebx],ecx
c00132ed:	c6 06 01             	mov    BYTE PTR [esi],0x1
c00132f0:	eb 05                	jmp    c00132f7 <CmGetShift(unsigned int*, int*, int, bool*)+0x33>
c00132f2:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00132f5:	31 c0                	xor    eax,eax
c00132f7:	5b                   	pop    ebx
c00132f8:	5e                   	pop    esi
c00132f9:	5f                   	pop    edi
c00132fa:	c3                   	ret    

c00132fb <CmGetInteger(Reghive_Tag*, int, unsigned long long*)>:
c00132fb:	83 ec 40             	sub    esp,0x40
c00132fe:	8d 44 24 09          	lea    eax,[esp+0x9]
c0013302:	50                   	push   eax
c0013303:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0013307:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001330b:	e8 49 fa ff ff       	call   c0012d59 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0013310:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0013314:	8b 54 24 2b          	mov    edx,DWORD PTR [esp+0x2b]
c0013318:	8b 4c 24 2f          	mov    ecx,DWORD PTR [esp+0x2f]
c001331c:	89 10                	mov    DWORD PTR [eax],edx
c001331e:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0013321:	83 c4 4c             	add    esp,0x4c
c0013324:	c3                   	ret    

c0013325 <CmSetInteger(Reghive_Tag*, int, unsigned long long)>:
c0013325:	55                   	push   ebp
c0013326:	57                   	push   edi
c0013327:	56                   	push   esi
c0013328:	53                   	push   ebx
c0013329:	83 ec 40             	sub    esp,0x40
c001332c:	8b 74 24 58          	mov    esi,DWORD PTR [esp+0x58]
c0013330:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c0013334:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c0013338:	8d 5c 24 09          	lea    ebx,[esp+0x9]
c001333c:	53                   	push   ebx
c001333d:	56                   	push   esi
c001333e:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0013342:	e8 12 fa ff ff       	call   c0012d59 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0013347:	89 7c 24 2b          	mov    DWORD PTR [esp+0x2b],edi
c001334b:	89 6c 24 2f          	mov    DWORD PTR [esp+0x2f],ebp
c001334f:	83 c4 0c             	add    esp,0xc
c0013352:	53                   	push   ebx
c0013353:	56                   	push   esi
c0013354:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0013358:	e8 20 fb ff ff       	call   c0012e7d <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c001335d:	83 c4 4c             	add    esp,0x4c
c0013360:	5b                   	pop    ebx
c0013361:	5e                   	pop    esi
c0013362:	5f                   	pop    edi
c0013363:	5d                   	pop    ebp
c0013364:	c3                   	ret    

c0013365 <CmConvertFromInternalFilename(unsigned char const*, char*)>:
c0013365:	55                   	push   ebp
c0013366:	57                   	push   edi
c0013367:	56                   	push   esi
c0013368:	31 f6                	xor    esi,esi
c001336a:	53                   	push   ebx
c001336b:	31 db                	xor    ebx,ebx
c001336d:	83 ec 40             	sub    esp,0x40
c0013370:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0013378:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0013380:	6a 12                	push   0x12
c0013382:	68 ee 00 00 00       	push   0xee
c0013387:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c001338b:	e8 60 d1 fe ff       	call   c00004f0 <memset>
c0013390:	83 c4 10             	add    esp,0x10
c0013393:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0013397:	6a 08                	push   0x8
c0013399:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001339d:	0f b6 04 18          	movzx  eax,BYTE PTR [eax+ebx*1]
c00133a1:	50                   	push   eax
c00133a2:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c00133a6:	55                   	push   ebp
c00133a7:	57                   	push   edi
c00133a8:	e8 e7 fe ff ff       	call   c0013294 <CmAddShift(unsigned int*, int*, unsigned char, int)>
c00133ad:	83 c4 10             	add    esp,0x10
c00133b0:	8d 44 24 0f          	lea    eax,[esp+0xf]
c00133b4:	50                   	push   eax
c00133b5:	6a 06                	push   0x6
c00133b7:	55                   	push   ebp
c00133b8:	57                   	push   edi
c00133b9:	e8 06 ff ff ff       	call   c00132c4 <CmGetShift(unsigned int*, int*, int, bool*)>
c00133be:	83 c4 10             	add    esp,0x10
c00133c1:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c00133c6:	74 07                	je     c00133cf <CmConvertFromInternalFilename(unsigned char const*, char*)+0x6a>
c00133c8:	46                   	inc    esi
c00133c9:	88 44 34 17          	mov    BYTE PTR [esp+esi*1+0x17],al
c00133cd:	eb e1                	jmp    c00133b0 <CmConvertFromInternalFilename(unsigned char const*, char*)+0x4b>
c00133cf:	43                   	inc    ebx
c00133d0:	83 fb 12             	cmp    ebx,0x12
c00133d3:	75 c2                	jne    c0013397 <CmConvertFromInternalFilename(unsigned char const*, char*)+0x32>
c00133d5:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c00133d9:	31 db                	xor    ebx,ebx
c00133db:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00133de:	50                   	push   eax
c00133df:	50                   	push   eax
c00133e0:	0f b6 44 1c 20       	movzx  eax,BYTE PTR [esp+ebx*1+0x20]
c00133e5:	43                   	inc    ebx
c00133e6:	8d 04 85 a0 3d 02 c0 	lea    eax,[eax*4-0x3ffdc260]
c00133ed:	50                   	push   eax
c00133ee:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c00133f2:	e8 49 d4 fe ff       	call   c0000840 <strcat>
c00133f7:	83 c4 10             	add    esp,0x10
c00133fa:	83 fb 18             	cmp    ebx,0x18
c00133fd:	75 df                	jne    c00133de <CmConvertFromInternalFilename(unsigned char const*, char*)+0x79>
c00133ff:	83 c4 3c             	add    esp,0x3c
c0013402:	31 c0                	xor    eax,eax
c0013404:	5b                   	pop    ebx
c0013405:	5e                   	pop    esi
c0013406:	5f                   	pop    edi
c0013407:	5d                   	pop    ebp
c0013408:	c3                   	ret    

c0013409 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>:
c0013409:	83 ec 40             	sub    esp,0x40
c001340c:	8d 44 24 09          	lea    eax,[esp+0x9]
c0013410:	50                   	push   eax
c0013411:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0013415:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0013419:	e8 3b f9 ff ff       	call   c0012d59 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c001341e:	58                   	pop    eax
c001341f:	5a                   	pop    edx
c0013420:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c0013424:	8d 44 24 15          	lea    eax,[esp+0x15]
c0013428:	50                   	push   eax
c0013429:	e8 37 ff ff ff       	call   c0013365 <CmConvertFromInternalFilename(unsigned char const*, char*)>
c001342e:	0f b6 44 24 15       	movzx  eax,BYTE PTR [esp+0x15]
c0013433:	83 c4 4c             	add    esp,0x4c
c0013436:	c3                   	ret    

c0013437 <CmConvertToInternalFilename(char const*, unsigned char*)>:
c0013437:	55                   	push   ebp
c0013438:	57                   	push   edi
c0013439:	56                   	push   esi
c001343a:	53                   	push   ebx
c001343b:	31 db                	xor    ebx,ebx
c001343d:	83 ec 70             	sub    esp,0x70
c0013440:	8b bc 24 84 00 00 00 	mov    edi,DWORD PTR [esp+0x84]
c0013447:	6a 30                	push   0x30
c0013449:	6a 00                	push   0x0
c001344b:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c001344f:	56                   	push   esi
c0013450:	e8 9b d0 fe ff       	call   c00004f0 <memset>
c0013455:	83 c4 10             	add    esp,0x10
c0013458:	83 ec 0c             	sub    esp,0xc
c001345b:	57                   	push   edi
c001345c:	e8 0f d1 fe ff       	call   c0000570 <strlen>
c0013461:	83 c4 10             	add    esp,0x10
c0013464:	39 d8                	cmp    eax,ebx
c0013466:	76 16                	jbe    c001347e <CmConvertToInternalFilename(char const*, unsigned char*)+0x47>
c0013468:	83 ec 0c             	sub    esp,0xc
c001346b:	0f be 04 1f          	movsx  eax,BYTE PTR [edi+ebx*1]
c001346f:	50                   	push   eax
c0013470:	e8 bb d4 fe ff       	call   c0000930 <toupper>
c0013475:	83 c4 10             	add    esp,0x10
c0013478:	88 04 1e             	mov    BYTE PTR [esi+ebx*1],al
c001347b:	43                   	inc    ebx
c001347c:	eb da                	jmp    c0013458 <CmConvertToInternalFilename(char const*, unsigned char*)+0x21>
c001347e:	31 f6                	xor    esi,esi
c0013480:	52                   	push   edx
c0013481:	31 ff                	xor    edi,edi
c0013483:	6a 18                	push   0x18
c0013485:	6a 3f                	push   0x3f
c0013487:	8d 44 24 24          	lea    eax,[esp+0x24]
c001348b:	50                   	push   eax
c001348c:	e8 5f d0 fe ff       	call   c00004f0 <memset>
c0013491:	83 c4 10             	add    esp,0x10
c0013494:	8a 44 34 30          	mov    al,BYTE PTR [esp+esi*1+0x30]
c0013498:	8d 5c 24 10          	lea    ebx,[esp+0x10]
c001349c:	84 c0                	test   al,al
c001349e:	0f 84 b0 00 00 00    	je     c0013554 <CmConvertToInternalFilename(char const*, unsigned char*)+0x11d>
c00134a4:	88 44 24 14          	mov    BYTE PTR [esp+0x14],al
c00134a8:	c6 44 24 16 00       	mov    BYTE PTR [esp+0x16],0x0
c00134ad:	88 44 24 10          	mov    BYTE PTR [esp+0x10],al
c00134b1:	c6 44 24 11 00       	mov    BYTE PTR [esp+0x11],0x0
c00134b6:	8d 6e 01             	lea    ebp,[esi+0x1]
c00134b9:	83 ec 0c             	sub    esp,0xc
c00134bc:	8a 54 2c 3c          	mov    dl,BYTE PTR [esp+ebp*1+0x3c]
c00134c0:	88 54 24 21          	mov    BYTE PTR [esp+0x21],dl
c00134c4:	53                   	push   ebx
c00134c5:	e8 a6 d0 fe ff       	call   c0000570 <strlen>
c00134ca:	83 c4 10             	add    esp,0x10
c00134cd:	85 c0                	test   eax,eax
c00134cf:	8d 44 24 0f          	lea    eax,[esp+0xf]
c00134d3:	74 0b                	je     c00134e0 <CmConvertToInternalFilename(char const*, unsigned char*)+0xa9>
c00134d5:	50                   	push   eax
c00134d6:	6a 01                	push   0x1
c00134d8:	53                   	push   ebx
c00134d9:	8d 44 24 20          	lea    eax,[esp+0x20]
c00134dd:	50                   	push   eax
c00134de:	eb 0a                	jmp    c00134ea <CmConvertToInternalFilename(char const*, unsigned char*)+0xb3>
c00134e0:	50                   	push   eax
c00134e1:	6a 00                	push   0x0
c00134e3:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00134e7:	50                   	push   eax
c00134e8:	6a 00                	push   0x0
c00134ea:	e8 44 fd ff ff       	call   c0013233 <CmGetMatch(char*, char*, bool, bool*)>
c00134ef:	83 c4 10             	add    esp,0x10
c00134f2:	83 f8 ff             	cmp    eax,0xffffffff
c00134f5:	75 1a                	jne    c0013511 <CmConvertToInternalFilename(char const*, unsigned char*)+0xda>
c00134f7:	83 ec 0c             	sub    esp,0xc
c00134fa:	68 19 25 02 c0       	push   0xc0022519
c00134ff:	e8 27 e1 ff ff       	call   c001162b <KePanic(char const*)>
c0013504:	83 c4 10             	add    esp,0x10
c0013507:	b8 02 00 00 00       	mov    eax,0x2
c001350c:	e9 bc 00 00 00       	jmp    c00135cd <CmConvertToInternalFilename(char const*, unsigned char*)+0x196>
c0013511:	83 ff 18             	cmp    edi,0x18
c0013514:	75 1a                	jne    c0013530 <CmConvertToInternalFilename(char const*, unsigned char*)+0xf9>
c0013516:	83 ec 0c             	sub    esp,0xc
c0013519:	68 2e 25 02 c0       	push   0xc002252e
c001351e:	e8 08 e1 ff ff       	call   c001162b <KePanic(char const*)>
c0013523:	83 c4 10             	add    esp,0x10
c0013526:	b8 01 00 00 00       	mov    eax,0x1
c001352b:	e9 9d 00 00 00       	jmp    c00135cd <CmConvertToInternalFilename(char const*, unsigned char*)+0x196>
c0013530:	47                   	inc    edi
c0013531:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0013536:	88 44 3c 17          	mov    BYTE PTR [esp+edi*1+0x17],al
c001353a:	74 02                	je     c001353e <CmConvertToInternalFilename(char const*, unsigned char*)+0x107>
c001353c:	89 ee                	mov    esi,ebp
c001353e:	83 ec 0c             	sub    esp,0xc
c0013541:	53                   	push   ebx
c0013542:	e8 29 d0 fe ff       	call   c0000570 <strlen>
c0013547:	83 c4 10             	add    esp,0x10
c001354a:	85 c0                	test   eax,eax
c001354c:	74 06                	je     c0013554 <CmConvertToInternalFilename(char const*, unsigned char*)+0x11d>
c001354e:	46                   	inc    esi
c001354f:	e9 40 ff ff ff       	jmp    c0013494 <CmConvertToInternalFilename(char const*, unsigned char*)+0x5d>
c0013554:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001355c:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0013564:	31 f6                	xor    esi,esi
c0013566:	50                   	push   eax
c0013567:	31 ff                	xor    edi,edi
c0013569:	6a 12                	push   0x12
c001356b:	68 ee 00 00 00       	push   0xee
c0013570:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c0013577:	e8 74 cf fe ff       	call   c00004f0 <memset>
c001357c:	83 c4 10             	add    esp,0x10
c001357f:	83 fe 17             	cmp    esi,0x17
c0013582:	8d 6c 24 14          	lea    ebp,[esp+0x14]
c0013586:	7e 26                	jle    c00135ae <CmConvertToInternalFilename(char const*, unsigned char*)+0x177>
c0013588:	8d 44 24 0f          	lea    eax,[esp+0xf]
c001358c:	50                   	push   eax
c001358d:	6a 08                	push   0x8
c001358f:	55                   	push   ebp
c0013590:	53                   	push   ebx
c0013591:	e8 2e fd ff ff       	call   c00132c4 <CmGetShift(unsigned int*, int*, int, bool*)>
c0013596:	83 c4 10             	add    esp,0x10
c0013599:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001359e:	74 26                	je     c00135c6 <CmConvertToInternalFilename(char const*, unsigned char*)+0x18f>
c00135a0:	8b 8c 24 84 00 00 00 	mov    ecx,DWORD PTR [esp+0x84]
c00135a7:	4e                   	dec    esi
c00135a8:	88 04 39             	mov    BYTE PTR [ecx+edi*1],al
c00135ab:	47                   	inc    edi
c00135ac:	eb 1c                	jmp    c00135ca <CmConvertToInternalFilename(char const*, unsigned char*)+0x193>
c00135ae:	6a 06                	push   0x6
c00135b0:	0f b6 44 34 1c       	movzx  eax,BYTE PTR [esp+esi*1+0x1c]
c00135b5:	50                   	push   eax
c00135b6:	55                   	push   ebp
c00135b7:	53                   	push   ebx
c00135b8:	e8 d7 fc ff ff       	call   c0013294 <CmAddShift(unsigned int*, int*, unsigned char, int)>
c00135bd:	83 c4 10             	add    esp,0x10
c00135c0:	84 c0                	test   al,al
c00135c2:	75 06                	jne    c00135ca <CmConvertToInternalFilename(char const*, unsigned char*)+0x193>
c00135c4:	eb c2                	jmp    c0013588 <CmConvertToInternalFilename(char const*, unsigned char*)+0x151>
c00135c6:	31 c0                	xor    eax,eax
c00135c8:	eb 03                	jmp    c00135cd <CmConvertToInternalFilename(char const*, unsigned char*)+0x196>
c00135ca:	46                   	inc    esi
c00135cb:	eb b2                	jmp    c001357f <CmConvertToInternalFilename(char const*, unsigned char*)+0x148>
c00135cd:	83 c4 6c             	add    esp,0x6c
c00135d0:	5b                   	pop    ebx
c00135d1:	5e                   	pop    esi
c00135d2:	5f                   	pop    edi
c00135d3:	5d                   	pop    ebp
c00135d4:	c3                   	ret    

c00135d5 <CmCreateString(Reghive_Tag*, int, char const*)>:
c00135d5:	53                   	push   ebx
c00135d6:	83 ec 3c             	sub    esp,0x3c
c00135d9:	6a 2b                	push   0x2b
c00135db:	6a 00                	push   0x0
c00135dd:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c00135e1:	53                   	push   ebx
c00135e2:	e8 09 cf fe ff       	call   c00004f0 <memset>
c00135e7:	58                   	pop    eax
c00135e8:	5a                   	pop    edx
c00135e9:	8d 44 24 11          	lea    eax,[esp+0x11]
c00135ed:	50                   	push   eax
c00135ee:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00135f2:	e8 40 fe ff ff       	call   c0013437 <CmConvertToInternalFilename(char const*, unsigned char*)>
c00135f7:	c6 44 24 15 c1       	mov    BYTE PTR [esp+0x15],0xc1
c00135fc:	83 c4 0c             	add    esp,0xc
c00135ff:	6a 15                	push   0x15
c0013601:	6a 00                	push   0x0
c0013603:	8d 44 24 27          	lea    eax,[esp+0x27]
c0013607:	50                   	push   eax
c0013608:	e8 e3 ce fe ff       	call   c00004f0 <memset>
c001360d:	53                   	push   ebx
c001360e:	6a 00                	push   0x0
c0013610:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0013614:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0013618:	e8 e6 f9 ff ff       	call   c0013003 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c001361d:	83 c4 58             	add    esp,0x58
c0013620:	5b                   	pop    ebx
c0013621:	c3                   	ret    

c0013622 <CmFindInDirectory(Reghive_Tag*, int, char const*)>:
c0013622:	56                   	push   esi
c0013623:	53                   	push   ebx
c0013624:	83 ec 48             	sub    esp,0x48
c0013627:	6a 12                	push   0x12
c0013629:	68 ff 00 00 00       	push   0xff
c001362e:	8d 74 24 0f          	lea    esi,[esp+0xf]
c0013632:	56                   	push   esi
c0013633:	e8 b8 ce fe ff       	call   c00004f0 <memset>
c0013638:	5a                   	pop    edx
c0013639:	59                   	pop    ecx
c001363a:	56                   	push   esi
c001363b:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c001363f:	e8 f3 fd ff ff       	call   c0013437 <CmConvertToInternalFilename(char const*, unsigned char*)>
c0013644:	83 c4 10             	add    esp,0x10
c0013647:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c001364b:	85 db                	test   ebx,ebx
c001364d:	74 42                	je     c0013691 <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x6f>
c001364f:	50                   	push   eax
c0013650:	8d 44 24 19          	lea    eax,[esp+0x19]
c0013654:	50                   	push   eax
c0013655:	53                   	push   ebx
c0013656:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001365a:	e8 fa f6 ff ff       	call   c0012d59 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c001365f:	83 c4 0c             	add    esp,0xc
c0013662:	6a 12                	push   0x12
c0013664:	8d 44 24 21          	lea    eax,[esp+0x21]
c0013668:	50                   	push   eax
c0013669:	56                   	push   esi
c001366a:	e8 11 cd fe ff       	call   c0000380 <memcmp>
c001366f:	83 c4 10             	add    esp,0x10
c0013672:	85 c0                	test   eax,eax
c0013674:	74 1e                	je     c0013694 <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x72>
c0013676:	0f b6 44 24 16       	movzx  eax,BYTE PTR [esp+0x16]
c001367b:	0f b6 5c 24 17       	movzx  ebx,BYTE PTR [esp+0x17]
c0013680:	c1 e3 08             	shl    ebx,0x8
c0013683:	09 d8                	or     eax,ebx
c0013685:	0f b6 5c 24 18       	movzx  ebx,BYTE PTR [esp+0x18]
c001368a:	c1 e3 10             	shl    ebx,0x10
c001368d:	09 c3                	or     ebx,eax
c001368f:	eb ba                	jmp    c001364b <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x29>
c0013691:	83 cb ff             	or     ebx,0xffffffff
c0013694:	89 d8                	mov    eax,ebx
c0013696:	83 c4 44             	add    esp,0x44
c0013699:	5b                   	pop    ebx
c001369a:	5e                   	pop    esi
c001369b:	c3                   	ret    

c001369c <CmCreateInteger(Reghive_Tag*, int, char const*, unsigned long long, int)>:
c001369c:	57                   	push   edi
c001369d:	56                   	push   esi
c001369e:	53                   	push   ebx
c001369f:	83 ec 34             	sub    esp,0x34
c00136a2:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c00136a6:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c00136aa:	6a 2b                	push   0x2b
c00136ac:	6a 00                	push   0x0
c00136ae:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c00136b2:	53                   	push   ebx
c00136b3:	e8 38 ce fe ff       	call   c00004f0 <memset>
c00136b8:	58                   	pop    eax
c00136b9:	5a                   	pop    edx
c00136ba:	8d 44 24 11          	lea    eax,[esp+0x11]
c00136be:	50                   	push   eax
c00136bf:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00136c3:	e8 6f fd ff ff       	call   c0013437 <CmConvertToInternalFilename(char const*, unsigned char*)>
c00136c8:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c00136cc:	89 74 24 2b          	mov    DWORD PTR [esp+0x2b],esi
c00136d0:	89 7c 24 2f          	mov    DWORD PTR [esp+0x2f],edi
c00136d4:	88 44 24 15          	mov    BYTE PTR [esp+0x15],al
c00136d8:	53                   	push   ebx
c00136d9:	6a 00                	push   0x0
c00136db:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00136df:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00136e3:	e8 1b f9 ff ff       	call   c0013003 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c00136e8:	83 c4 50             	add    esp,0x50
c00136eb:	5b                   	pop    ebx
c00136ec:	5e                   	pop    esi
c00136ed:	5f                   	pop    edi
c00136ee:	c3                   	ret    

c00136ef <CmCreateDirectory(Reghive_Tag*, int, char const*)>:
c00136ef:	55                   	push   ebp
c00136f0:	57                   	push   edi
c00136f1:	56                   	push   esi
c00136f2:	53                   	push   ebx
c00136f3:	83 ec 40             	sub    esp,0x40
c00136f6:	8b 6c 24 58          	mov    ebp,DWORD PTR [esp+0x58]
c00136fa:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c00136fe:	6a 2b                	push   0x2b
c0013700:	6a 00                	push   0x0
c0013702:	8d 74 24 11          	lea    esi,[esp+0x11]
c0013706:	56                   	push   esi
c0013707:	e8 e4 cd fe ff       	call   c00004f0 <memset>
c001370c:	5f                   	pop    edi
c001370d:	89 ef                	mov    edi,ebp
c001370f:	58                   	pop    eax
c0013710:	8d 44 24 11          	lea    eax,[esp+0x11]
c0013714:	50                   	push   eax
c0013715:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c0013719:	e8 19 fd ff ff       	call   c0013437 <CmConvertToInternalFilename(char const*, unsigned char*)>
c001371e:	c6 44 24 15 4e       	mov    BYTE PTR [esp+0x15],0x4e
c0013723:	c6 44 24 2b 00       	mov    BYTE PTR [esp+0x2b],0x0
c0013728:	c6 44 24 2c 00       	mov    BYTE PTR [esp+0x2c],0x0
c001372d:	c6 44 24 2d 00       	mov    BYTE PTR [esp+0x2d],0x0
c0013732:	83 c4 10             	add    esp,0x10
c0013735:	85 ed                	test   ebp,ebp
c0013737:	74 14                	je     c001374d <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x5e>
c0013739:	51                   	push   ecx
c001373a:	51                   	push   ecx
c001373b:	57                   	push   edi
c001373c:	53                   	push   ebx
c001373d:	e8 09 f7 ff ff       	call   c0012e4b <CmGetNext(Reghive_Tag*, int)>
c0013742:	83 c4 10             	add    esp,0x10
c0013745:	85 c0                	test   eax,eax
c0013747:	74 04                	je     c001374d <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x5e>
c0013749:	89 c7                	mov    edi,eax
c001374b:	eb e8                	jmp    c0013735 <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x46>
c001374d:	56                   	push   esi
c001374e:	6a 00                	push   0x0
c0013750:	57                   	push   edi
c0013751:	53                   	push   ebx
c0013752:	e8 ac f8 ff ff       	call   c0013003 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c0013757:	83 c4 0c             	add    esp,0xc
c001375a:	89 c7                	mov    edi,eax
c001375c:	56                   	push   esi
c001375d:	50                   	push   eax
c001375e:	53                   	push   ebx
c001375f:	e8 f5 f5 ff ff       	call   c0012d59 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0013764:	58                   	pop    eax
c0013765:	5a                   	pop    edx
c0013766:	6a 6c                	push   0x6c
c0013768:	6a 00                	push   0x0
c001376a:	6a 00                	push   0x0
c001376c:	68 3f 25 02 c0       	push   0xc002253f
c0013771:	57                   	push   edi
c0013772:	53                   	push   ebx
c0013773:	e8 24 ff ff ff       	call   c001369c <CmCreateInteger(Reghive_Tag*, int, char const*, unsigned long long, int)>
c0013778:	88 44 24 3b          	mov    BYTE PTR [esp+0x3b],al
c001377c:	88 64 24 3c          	mov    BYTE PTR [esp+0x3c],ah
c0013780:	c1 e8 10             	shr    eax,0x10
c0013783:	88 44 24 3d          	mov    BYTE PTR [esp+0x3d],al
c0013787:	83 c4 1c             	add    esp,0x1c
c001378a:	56                   	push   esi
c001378b:	57                   	push   edi
c001378c:	53                   	push   ebx
c001378d:	e8 eb f6 ff ff       	call   c0012e7d <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0013792:	0f b6 54 24 2b       	movzx  edx,BYTE PTR [esp+0x2b]
c0013797:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001379c:	c1 e0 08             	shl    eax,0x8
c001379f:	09 c2                	or     edx,eax
c00137a1:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c00137a6:	83 c4 4c             	add    esp,0x4c
c00137a9:	c1 e0 10             	shl    eax,0x10
c00137ac:	5b                   	pop    ebx
c00137ad:	09 d0                	or     eax,edx
c00137af:	5e                   	pop    esi
c00137b0:	5f                   	pop    edi
c00137b1:	5d                   	pop    ebp
c00137b2:	c3                   	ret    

c00137b3 <zStrtok(char*, char const*)>:
c00137b3:	55                   	push   ebp
c00137b4:	57                   	push   edi
c00137b5:	56                   	push   esi
c00137b6:	53                   	push   ebx
c00137b7:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00137bb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00137bf:	85 db                	test   ebx,ebx
c00137c1:	74 2f                	je     c00137f2 <zStrtok(char*, char const*)+0x3f>
c00137c3:	85 c0                	test   eax,eax
c00137c5:	75 09                	jne    c00137d0 <zStrtok(char*, char const*)+0x1d>
c00137c7:	a1 f0 be 02 c0       	mov    eax,ds:0xc002bef0
c00137cc:	85 c0                	test   eax,eax
c00137ce:	74 50                	je     c0013820 <zStrtok(char*, char const*)+0x6d>
c00137d0:	31 c9                	xor    ecx,ecx
c00137d2:	80 3c 08 00          	cmp    BYTE PTR [eax+ecx*1],0x0
c00137d6:	74 03                	je     c00137db <zStrtok(char*, char const*)+0x28>
c00137d8:	41                   	inc    ecx
c00137d9:	eb f7                	jmp    c00137d2 <zStrtok(char*, char const*)+0x1f>
c00137db:	31 d2                	xor    edx,edx
c00137dd:	39 ca                	cmp    edx,ecx
c00137df:	74 15                	je     c00137f6 <zStrtok(char*, char const*)+0x43>
c00137e1:	0f be 34 10          	movsx  esi,BYTE PTR [eax+edx*1]
c00137e5:	0f be 2b             	movsx  ebp,BYTE PTR [ebx]
c00137e8:	8d 3c 10             	lea    edi,[eax+edx*1]
c00137eb:	39 ee                	cmp    esi,ebp
c00137ed:	74 13                	je     c0013802 <zStrtok(char*, char const*)+0x4f>
c00137ef:	42                   	inc    edx
c00137f0:	eb eb                	jmp    c00137dd <zStrtok(char*, char const*)+0x2a>
c00137f2:	31 c0                	xor    eax,eax
c00137f4:	eb 2a                	jmp    c0013820 <zStrtok(char*, char const*)+0x6d>
c00137f6:	c7 05 f0 be 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002bef0,0x0
c0013800:	eb 1e                	jmp    c0013820 <zStrtok(char*, char const*)+0x6d>
c0013802:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0013805:	39 ce                	cmp    esi,ecx
c0013807:	75 0a                	jne    c0013813 <zStrtok(char*, char const*)+0x60>
c0013809:	40                   	inc    eax
c001380a:	a3 f0 be 02 c0       	mov    ds:0xc002bef0,eax
c001380f:	89 d8                	mov    eax,ebx
c0013811:	eb 0d                	jmp    c0013820 <zStrtok(char*, char const*)+0x6d>
c0013813:	8d 54 10 01          	lea    edx,[eax+edx*1+0x1]
c0013817:	c6 07 00             	mov    BYTE PTR [edi],0x0
c001381a:	89 15 f0 be 02 c0    	mov    DWORD PTR ds:0xc002bef0,edx
c0013820:	5b                   	pop    ebx
c0013821:	5e                   	pop    esi
c0013822:	5f                   	pop    edi
c0013823:	5d                   	pop    ebp
c0013824:	c3                   	ret    

c0013825 <CmFindObjectFromPath(Reghive_Tag*, char const*)>:
c0013825:	57                   	push   edi
c0013826:	56                   	push   esi
c0013827:	53                   	push   ebx
c0013828:	81 ec 08 01 00 00    	sub    esp,0x108
c001382e:	8b bc 24 18 01 00 00 	mov    edi,DWORD PTR [esp+0x118]
c0013835:	ff b4 24 1c 01 00 00 	push   DWORD PTR [esp+0x11c]
c001383c:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c0013840:	53                   	push   ebx
c0013841:	e8 fa cd fe ff       	call   c0000640 <strcpy>
c0013846:	59                   	pop    ecx
c0013847:	5e                   	pop    esi
c0013848:	68 a3 28 02 c0       	push   0xc00228a3
c001384d:	53                   	push   ebx
c001384e:	bb 01 00 00 00       	mov    ebx,0x1
c0013853:	e8 5b ff ff ff       	call   c00137b3 <zStrtok(char*, char const*)>
c0013858:	83 c4 10             	add    esp,0x10
c001385b:	85 c0                	test   eax,eax
c001385d:	74 3b                	je     c001389a <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c001385f:	52                   	push   edx
c0013860:	50                   	push   eax
c0013861:	6a 01                	push   0x1
c0013863:	57                   	push   edi
c0013864:	e8 b9 fd ff ff       	call   c0013622 <CmFindInDirectory(Reghive_Tag*, int, char const*)>
c0013869:	59                   	pop    ecx
c001386a:	89 c3                	mov    ebx,eax
c001386c:	5e                   	pop    esi
c001386d:	68 a3 28 02 c0       	push   0xc00228a3
c0013872:	6a 00                	push   0x0
c0013874:	e8 3a ff ff ff       	call   c00137b3 <zStrtok(char*, char const*)>
c0013879:	83 c4 10             	add    esp,0x10
c001387c:	89 c6                	mov    esi,eax
c001387e:	85 c0                	test   eax,eax
c0013880:	74 18                	je     c001389a <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c0013882:	52                   	push   edx
c0013883:	52                   	push   edx
c0013884:	53                   	push   ebx
c0013885:	57                   	push   edi
c0013886:	e8 81 f5 ff ff       	call   c0012e0c <CmEnterDirectory(Reghive_Tag*, int)>
c001388b:	83 c4 10             	add    esp,0x10
c001388e:	89 c3                	mov    ebx,eax
c0013890:	83 f8 ff             	cmp    eax,0xffffffff
c0013893:	74 05                	je     c001389a <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c0013895:	50                   	push   eax
c0013896:	56                   	push   esi
c0013897:	53                   	push   ebx
c0013898:	eb c9                	jmp    c0013863 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x3e>
c001389a:	81 c4 00 01 00 00    	add    esp,0x100
c00138a0:	89 d8                	mov    eax,ebx
c00138a2:	5b                   	pop    ebx
c00138a3:	5e                   	pop    esi
c00138a4:	5f                   	pop    edi
c00138a5:	c3                   	ret    

c00138a6 <CmDisplayTree(Reghive_Tag*, int, int)>:
c00138a6:	55                   	push   ebp
c00138a7:	57                   	push   edi
c00138a8:	56                   	push   esi
c00138a9:	53                   	push   ebx
c00138aa:	83 ec 5c             	sub    esp,0x5c
c00138ad:	8b 74 24 70          	mov    esi,DWORD PTR [esp+0x70]
c00138b1:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c00138b5:	85 db                	test   ebx,ebx
c00138b7:	0f 8e 84 00 00 00    	jle    c0013941 <CmDisplayTree(Reghive_Tag*, int, int)+0x9b>
c00138bd:	31 ed                	xor    ebp,ebp
c00138bf:	57                   	push   edi
c00138c0:	6a 32                	push   0x32
c00138c2:	6a 00                	push   0x0
c00138c4:	8d 7c 24 2a          	lea    edi,[esp+0x2a]
c00138c8:	57                   	push   edi
c00138c9:	e8 22 cc fe ff       	call   c00004f0 <memset>
c00138ce:	83 c4 0c             	add    esp,0xc
c00138d1:	57                   	push   edi
c00138d2:	53                   	push   ebx
c00138d3:	56                   	push   esi
c00138d4:	e8 30 fb ff ff       	call   c0013409 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c00138d9:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00138dd:	83 c4 10             	add    esp,0x10
c00138e0:	3b 6c 24 78          	cmp    ebp,DWORD PTR [esp+0x78]
c00138e4:	7d 13                	jge    c00138f9 <CmDisplayTree(Reghive_Tag*, int, int)+0x53>
c00138e6:	83 ec 0c             	sub    esp,0xc
c00138e9:	45                   	inc    ebp
c00138ea:	68 47 2c 02 c0       	push   0xc0022c47
c00138ef:	e8 51 70 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c00138f4:	83 c4 10             	add    esp,0x10
c00138f7:	eb e7                	jmp    c00138e0 <CmDisplayTree(Reghive_Tag*, int, int)+0x3a>
c00138f9:	51                   	push   ecx
c00138fa:	57                   	push   edi
c00138fb:	53                   	push   ebx
c00138fc:	68 45 25 02 c0       	push   0xc0022545
c0013901:	e8 3f 70 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0013906:	83 c4 10             	add    esp,0x10
c0013909:	83 7c 24 0c 4e       	cmp    DWORD PTR [esp+0xc],0x4e
c001390e:	75 1e                	jne    c001392e <CmDisplayTree(Reghive_Tag*, int, int)+0x88>
c0013910:	52                   	push   edx
c0013911:	52                   	push   edx
c0013912:	53                   	push   ebx
c0013913:	56                   	push   esi
c0013914:	e8 f3 f4 ff ff       	call   c0012e0c <CmEnterDirectory(Reghive_Tag*, int)>
c0013919:	83 c4 0c             	add    esp,0xc
c001391c:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0013920:	8d 51 04             	lea    edx,[ecx+0x4]
c0013923:	52                   	push   edx
c0013924:	50                   	push   eax
c0013925:	56                   	push   esi
c0013926:	e8 7b ff ff ff       	call   c00138a6 <CmDisplayTree(Reghive_Tag*, int, int)>
c001392b:	83 c4 10             	add    esp,0x10
c001392e:	50                   	push   eax
c001392f:	50                   	push   eax
c0013930:	53                   	push   ebx
c0013931:	56                   	push   esi
c0013932:	e8 14 f5 ff ff       	call   c0012e4b <CmGetNext(Reghive_Tag*, int)>
c0013937:	83 c4 10             	add    esp,0x10
c001393a:	89 c3                	mov    ebx,eax
c001393c:	e9 74 ff ff ff       	jmp    c00138b5 <CmDisplayTree(Reghive_Tag*, int, int)+0xf>
c0013941:	83 c4 5c             	add    esp,0x5c
c0013944:	5b                   	pop    ebx
c0013945:	5e                   	pop    esi
c0013946:	5f                   	pop    edi
c0013947:	5d                   	pop    ebp
c0013948:	c3                   	ret    

c0013949 <CmSplitFinalSlashInPlace(char*)>:
c0013949:	53                   	push   ebx
c001394a:	83 ec 14             	sub    esp,0x14
c001394d:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013951:	53                   	push   ebx
c0013952:	e8 19 cc fe ff       	call   c0000570 <strlen>
c0013957:	83 c4 10             	add    esp,0x10
c001395a:	48                   	dec    eax
c001395b:	85 c0                	test   eax,eax
c001395d:	74 15                	je     c0013974 <CmSplitFinalSlashInPlace(char*)+0x2b>
c001395f:	8d 14 03             	lea    edx,[ebx+eax*1]
c0013962:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c0013966:	75 09                	jne    c0013971 <CmSplitFinalSlashInPlace(char*)+0x28>
c0013968:	c6 02 00             	mov    BYTE PTR [edx],0x0
c001396b:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c001396f:	eb 05                	jmp    c0013976 <CmSplitFinalSlashInPlace(char*)+0x2d>
c0013971:	48                   	dec    eax
c0013972:	eb e7                	jmp    c001395b <CmSplitFinalSlashInPlace(char*)+0x12>
c0013974:	31 c0                	xor    eax,eax
c0013976:	83 c4 08             	add    esp,0x8
c0013979:	5b                   	pop    ebx
c001397a:	c3                   	ret    

c001397b <Reg::findLineFromLoadedData(char*, char*, char*)>:
c001397b:	55                   	push   ebp
c001397c:	57                   	push   edi
c001397d:	56                   	push   esi
c001397e:	53                   	push   ebx
c001397f:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0013985:	8b 9c 24 44 01 00 00 	mov    ebx,DWORD PTR [esp+0x144]
c001398c:	8a 13                	mov    dl,BYTE PTR [ebx]
c001398e:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0013991:	80 fa 40             	cmp    dl,0x40
c0013994:	75 1c                	jne    c00139b2 <Reg::findLineFromLoadedData(char*, char*, char*)+0x37>
c0013996:	0f be 0b             	movsx  ecx,BYTE PTR [ebx]
c0013999:	85 c9                	test   ecx,ecx
c001399b:	0f 84 09 01 00 00    	je     c0013aaa <Reg::findLineFromLoadedData(char*, char*, char*)+0x12f>
c00139a1:	8d 43 01             	lea    eax,[ebx+0x1]
c00139a4:	83 f9 3a             	cmp    ecx,0x3a
c00139a7:	74 04                	je     c00139ad <Reg::findLineFromLoadedData(char*, char*, char*)+0x32>
c00139a9:	89 c3                	mov    ebx,eax
c00139ab:	eb e9                	jmp    c0013996 <Reg::findLineFromLoadedData(char*, char*, char*)+0x1b>
c00139ad:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c00139b0:	89 c3                	mov    ebx,eax
c00139b2:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c00139b6:	50                   	push   eax
c00139b7:	6a 40                	push   0x40
c00139b9:	6a 00                	push   0x0
c00139bb:	8d 44 24 24          	lea    eax,[esp+0x24]
c00139bf:	50                   	push   eax
c00139c0:	e8 2b cb fe ff       	call   c00004f0 <memset>
c00139c5:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c00139cc:	31 c0                	xor    eax,eax
c00139ce:	83 c4 10             	add    esp,0x10
c00139d1:	0f be 74 24 0c       	movsx  esi,BYTE PTR [esp+0xc]
c00139d6:	0f be 17             	movsx  edx,BYTE PTR [edi]
c00139d9:	89 d1                	mov    ecx,edx
c00139db:	85 d2                	test   edx,edx
c00139dd:	0f 84 c7 00 00 00    	je     c0013aaa <Reg::findLineFromLoadedData(char*, char*, char*)+0x12f>
c00139e3:	3d c7 00 00 00       	cmp    eax,0xc7
c00139e8:	0f 8f bc 00 00 00    	jg     c0013aaa <Reg::findLineFromLoadedData(char*, char*, char*)+0x12f>
c00139ee:	83 fa 0a             	cmp    edx,0xa
c00139f1:	0f 85 a4 00 00 00    	jne    c0013a9b <Reg::findLineFromLoadedData(char*, char*, char*)+0x120>
c00139f7:	c6 44 04 58 00       	mov    BYTE PTR [esp+eax*1+0x58],0x0
c00139fc:	0f be 4c 24 58       	movsx  ecx,BYTE PTR [esp+0x58]
c0013a01:	89 c8                	mov    eax,ecx
c0013a03:	a8 df                	test   al,0xdf
c0013a05:	0f 94 c2             	sete   dl
c0013a08:	83 f9 23             	cmp    ecx,0x23
c0013a0b:	0f 94 44 24 0c       	sete   BYTE PTR [esp+0xc]
c0013a10:	0b 54 24 0c          	or     edx,DWORD PTR [esp+0xc]
c0013a14:	80 e2 01             	and    dl,0x1
c0013a17:	75 4a                	jne    c0013a63 <Reg::findLineFromLoadedData(char*, char*, char*)+0xe8>
c0013a19:	83 e8 09             	sub    eax,0x9
c0013a1c:	3c 01                	cmp    al,0x1
c0013a1e:	76 43                	jbe    c0013a63 <Reg::findLineFromLoadedData(char*, char*, char*)+0xe8>
c0013a20:	83 f9 5b             	cmp    ecx,0x5b
c0013a23:	75 42                	jne    c0013a67 <Reg::findLineFromLoadedData(char*, char*, char*)+0xec>
c0013a25:	83 fe 40             	cmp    esi,0x40
c0013a28:	75 39                	jne    c0013a63 <Reg::findLineFromLoadedData(char*, char*, char*)+0xe8>
c0013a2a:	83 ec 0c             	sub    esp,0xc
c0013a2d:	8d 54 24 65          	lea    edx,[esp+0x65]
c0013a31:	52                   	push   edx
c0013a32:	e8 39 cb fe ff       	call   c0000570 <strlen>
c0013a37:	83 c4 10             	add    esp,0x10
c0013a3a:	83 f8 3f             	cmp    eax,0x3f
c0013a3d:	77 6b                	ja     c0013aaa <Reg::findLineFromLoadedData(char*, char*, char*)+0x12f>
c0013a3f:	50                   	push   eax
c0013a40:	50                   	push   eax
c0013a41:	8d 54 24 61          	lea    edx,[esp+0x61]
c0013a45:	52                   	push   edx
c0013a46:	8d 54 24 24          	lea    edx,[esp+0x24]
c0013a4a:	52                   	push   edx
c0013a4b:	e8 f0 cb fe ff       	call   c0000640 <strcpy>
c0013a50:	58                   	pop    eax
c0013a51:	8d 54 24 24          	lea    edx,[esp+0x24]
c0013a55:	52                   	push   edx
c0013a56:	e8 15 cb fe ff       	call   c0000570 <strlen>
c0013a5b:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c0013a60:	83 c4 10             	add    esp,0x10
c0013a63:	31 d2                	xor    edx,edx
c0013a65:	eb 3b                	jmp    c0013aa2 <Reg::findLineFromLoadedData(char*, char*, char*)+0x127>
c0013a67:	83 fe 40             	cmp    esi,0x40
c0013a6a:	74 06                	je     c0013a72 <Reg::findLineFromLoadedData(char*, char*, char*)+0xf7>
c0013a6c:	8d 44 24 58          	lea    eax,[esp+0x58]
c0013a70:	eb 20                	jmp    c0013a92 <Reg::findLineFromLoadedData(char*, char*, char*)+0x117>
c0013a72:	50                   	push   eax
c0013a73:	50                   	push   eax
c0013a74:	55                   	push   ebp
c0013a75:	8d 44 24 24          	lea    eax,[esp+0x24]
c0013a79:	50                   	push   eax
c0013a7a:	e8 d1 cc fe ff       	call   c0000750 <strcmp>
c0013a7f:	83 c4 10             	add    esp,0x10
c0013a82:	85 c0                	test   eax,eax
c0013a84:	75 dd                	jne    c0013a63 <Reg::findLineFromLoadedData(char*, char*, char*)+0xe8>
c0013a86:	eb e4                	jmp    c0013a6c <Reg::findLineFromLoadedData(char*, char*, char*)+0xf1>
c0013a88:	8d 50 01             	lea    edx,[eax+0x1]
c0013a8b:	83 f9 3d             	cmp    ecx,0x3d
c0013a8e:	74 1e                	je     c0013aae <Reg::findLineFromLoadedData(char*, char*, char*)+0x133>
c0013a90:	89 d0                	mov    eax,edx
c0013a92:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0013a95:	85 c9                	test   ecx,ecx
c0013a97:	75 ef                	jne    c0013a88 <Reg::findLineFromLoadedData(char*, char*, char*)+0x10d>
c0013a99:	eb 0f                	jmp    c0013aaa <Reg::findLineFromLoadedData(char*, char*, char*)+0x12f>
c0013a9b:	8d 50 01             	lea    edx,[eax+0x1]
c0013a9e:	88 4c 04 58          	mov    BYTE PTR [esp+eax*1+0x58],cl
c0013aa2:	47                   	inc    edi
c0013aa3:	89 d0                	mov    eax,edx
c0013aa5:	e9 2c ff ff ff       	jmp    c00139d6 <Reg::findLineFromLoadedData(char*, char*, char*)+0x5b>
c0013aaa:	31 c0                	xor    eax,eax
c0013aac:	eb 33                	jmp    c0013ae1 <Reg::findLineFromLoadedData(char*, char*, char*)+0x166>
c0013aae:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0013ab2:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0013ab5:	50                   	push   eax
c0013ab6:	50                   	push   eax
c0013ab7:	8d 44 24 60          	lea    eax,[esp+0x60]
c0013abb:	50                   	push   eax
c0013abc:	53                   	push   ebx
c0013abd:	e8 8e cc fe ff       	call   c0000750 <strcmp>
c0013ac2:	83 c4 10             	add    esp,0x10
c0013ac5:	85 c0                	test   eax,eax
c0013ac7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0013acb:	75 96                	jne    c0013a63 <Reg::findLineFromLoadedData(char*, char*, char*)+0xe8>
c0013acd:	51                   	push   ecx
c0013ace:	51                   	push   ecx
c0013acf:	52                   	push   edx
c0013ad0:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c0013ad7:	e8 64 cb fe ff       	call   c0000640 <strcpy>
c0013adc:	83 c4 10             	add    esp,0x10
c0013adf:	b0 01                	mov    al,0x1
c0013ae1:	81 c4 2c 01 00 00    	add    esp,0x12c
c0013ae7:	5b                   	pop    ebx
c0013ae8:	5e                   	pop    esi
c0013ae9:	5f                   	pop    edi
c0013aea:	5d                   	pop    ebp
c0013aeb:	c3                   	ret    

c0013aec <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c0013aec:	57                   	push   edi
c0013aed:	56                   	push   esi
c0013aee:	53                   	push   ebx
c0013aef:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0013af5:	8b b4 24 3c 01 00 00 	mov    esi,DWORD PTR [esp+0x13c]
c0013afc:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c0013b03:	53                   	push   ebx
c0013b04:	e8 67 ca fe ff       	call   c0000570 <strlen>
c0013b09:	89 34 24             	mov    DWORD PTR [esp],esi
c0013b0c:	89 c7                	mov    edi,eax
c0013b0e:	e8 5d ca fe ff       	call   c0000570 <strlen>
c0013b13:	83 c4 10             	add    esp,0x10
c0013b16:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c0013b1a:	3d ff 00 00 00       	cmp    eax,0xff
c0013b1f:	0f 87 d3 00 00 00    	ja     c0013bf8 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c0013b25:	57                   	push   edi
c0013b26:	57                   	push   edi
c0013b27:	56                   	push   esi
c0013b28:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0013b2c:	56                   	push   esi
c0013b2d:	e8 0e cb fe ff       	call   c0000640 <strcpy>
c0013b32:	58                   	pop    eax
c0013b33:	5a                   	pop    edx
c0013b34:	68 a3 28 02 c0       	push   0xc00228a3
c0013b39:	56                   	push   esi
c0013b3a:	e8 01 cd fe ff       	call   c0000840 <strcat>
c0013b3f:	59                   	pop    ecx
c0013b40:	5f                   	pop    edi
c0013b41:	53                   	push   ebx
c0013b42:	56                   	push   esi
c0013b43:	e8 f8 cc fe ff       	call   c0000840 <strcat>
c0013b48:	58                   	pop    eax
c0013b49:	5a                   	pop    edx
c0013b4a:	68 4f 25 02 c0       	push   0xc002254f
c0013b4f:	56                   	push   esi
c0013b50:	e8 eb cc fe ff       	call   c0000840 <strcat>
c0013b55:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0013b5c:	e8 55 3f ff ff       	call   c0007ab6 <malloc>
c0013b61:	83 c4 0c             	add    esp,0xc
c0013b64:	89 c3                	mov    ebx,eax
c0013b66:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c0013b6c:	56                   	push   esi
c0013b6d:	50                   	push   eax
c0013b6e:	e8 e5 7f ff ff       	call   c000bb58 <File::File(char const*, Process*)>
c0013b73:	83 c4 10             	add    esp,0x10
c0013b76:	85 db                	test   ebx,ebx
c0013b78:	74 7e                	je     c0013bf8 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c0013b7a:	51                   	push   ecx
c0013b7b:	51                   	push   ecx
c0013b7c:	6a 01                	push   0x1
c0013b7e:	53                   	push   ebx
c0013b7f:	e8 f2 7f ff ff       	call   c000bb76 <File::open(FileOpenMode)>
c0013b84:	83 c4 10             	add    esp,0x10
c0013b87:	85 c0                	test   eax,eax
c0013b89:	74 08                	je     c0013b93 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa7>
c0013b8b:	83 ec 0c             	sub    esp,0xc
c0013b8e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013b90:	53                   	push   ebx
c0013b91:	eb 5f                	jmp    c0013bf2 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c0013b93:	52                   	push   edx
c0013b94:	8d 44 24 17          	lea    eax,[esp+0x17]
c0013b98:	50                   	push   eax
c0013b99:	8d 44 24 20          	lea    eax,[esp+0x20]
c0013b9d:	50                   	push   eax
c0013b9e:	53                   	push   ebx
c0013b9f:	e8 d4 82 ff ff       	call   c000be78 <File::stat(unsigned long long*, bool*)>
c0013ba4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0013ba8:	83 c4 10             	add    esp,0x10
c0013bab:	89 c1                	mov    ecx,eax
c0013bad:	0b 4c 24 1c          	or     ecx,DWORD PTR [esp+0x1c]
c0013bb1:	74 31                	je     c0013be4 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c0013bb3:	83 ec 0c             	sub    esp,0xc
c0013bb6:	50                   	push   eax
c0013bb7:	e8 fa 3e ff ff       	call   c0007ab6 <malloc>
c0013bbc:	89 c6                	mov    esi,eax
c0013bbe:	58                   	pop    eax
c0013bbf:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013bc1:	8d 54 24 20          	lea    edx,[esp+0x20]
c0013bc5:	52                   	push   edx
c0013bc6:	56                   	push   esi
c0013bc7:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0013bcb:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0013bcf:	53                   	push   ebx
c0013bd0:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013bd3:	83 c4 20             	add    esp,0x20
c0013bd6:	85 c0                	test   eax,eax
c0013bd8:	75 0a                	jne    c0013be4 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c0013bda:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013bde:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0013be2:	74 18                	je     c0013bfc <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x110>
c0013be4:	83 ec 0c             	sub    esp,0xc
c0013be7:	53                   	push   ebx
c0013be8:	e8 e7 7f ff ff       	call   c000bbd4 <File::close()>
c0013bed:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013bef:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013bf2:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013bf5:	83 c4 10             	add    esp,0x10
c0013bf8:	31 c0                	xor    eax,eax
c0013bfa:	eb 3b                	jmp    c0013c37 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x14b>
c0013bfc:	83 ec 0c             	sub    esp,0xc
c0013bff:	53                   	push   ebx
c0013c00:	e8 cf 7f ff ff       	call   c000bbd4 <File::close()>
c0013c05:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013c07:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013c0a:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013c0d:	83 c4 0c             	add    esp,0xc
c0013c10:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c0013c17:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c0013c1e:	56                   	push   esi
c0013c1f:	e8 57 fd ff ff       	call   c001397b <Reg::findLineFromLoadedData(char*, char*, char*)>
c0013c24:	89 34 24             	mov    DWORD PTR [esp],esi
c0013c27:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0013c2b:	e8 96 3e ff ff       	call   c0007ac6 <free>
c0013c30:	83 c4 10             	add    esp,0x10
c0013c33:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0013c37:	81 c4 20 01 00 00    	add    esp,0x120
c0013c3d:	5b                   	pop    ebx
c0013c3e:	5e                   	pop    esi
c0013c3f:	5f                   	pop    edi
c0013c40:	c3                   	ret    

c0013c41 <Reg::getLine(char*, char*, char*)>:
c0013c41:	57                   	push   edi
c0013c42:	56                   	push   esi
c0013c43:	53                   	push   ebx
c0013c44:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013c48:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0013c4c:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0013c50:	57                   	push   edi
c0013c51:	56                   	push   esi
c0013c52:	53                   	push   ebx
c0013c53:	68 54 25 02 c0       	push   0xc0022554
c0013c58:	e8 8f fe ff ff       	call   c0013aec <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c0013c5d:	83 c4 10             	add    esp,0x10
c0013c60:	84 c0                	test   al,al
c0013c62:	75 10                	jne    c0013c74 <Reg::getLine(char*, char*, char*)+0x33>
c0013c64:	57                   	push   edi
c0013c65:	56                   	push   esi
c0013c66:	53                   	push   ebx
c0013c67:	68 79 25 02 c0       	push   0xc0022579
c0013c6c:	e8 7b fe ff ff       	call   c0013aec <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c0013c71:	83 c4 10             	add    esp,0x10
c0013c74:	5b                   	pop    ebx
c0013c75:	5e                   	pop    esi
c0013c76:	5f                   	pop    edi
c0013c77:	c3                   	ret    

c0013c78 <Reg::readInt(char*, char*, int*)>:
c0013c78:	55                   	push   ebp
c0013c79:	57                   	push   edi
c0013c7a:	56                   	push   esi
c0013c7b:	53                   	push   ebx
c0013c7c:	81 ec f0 00 00 00    	sub    esp,0xf0
c0013c82:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c0013c86:	55                   	push   ebp
c0013c87:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c0013c8e:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c0013c95:	e8 a7 ff ff ff       	call   c0013c41 <Reg::getLine(char*, char*, char*)>
c0013c9a:	83 c4 10             	add    esp,0x10
c0013c9d:	84 c0                	test   al,al
c0013c9f:	0f 84 b6 00 00 00    	je     c0013d5b <Reg::readInt(char*, char*, int*)+0xe3>
c0013ca5:	0f be 54 24 18       	movsx  edx,BYTE PTR [esp+0x18]
c0013caa:	83 fa 2b             	cmp    edx,0x2b
c0013cad:	74 0c                	je     c0013cbb <Reg::readInt(char*, char*, int*)+0x43>
c0013caf:	83 fa 2d             	cmp    edx,0x2d
c0013cb2:	75 0e                	jne    c0013cc2 <Reg::readInt(char*, char*, int*)+0x4a>
c0013cb4:	ba 01 00 00 00       	mov    edx,0x1
c0013cb9:	eb 0b                	jmp    c0013cc6 <Reg::readInt(char*, char*, int*)+0x4e>
c0013cbb:	ba 01 00 00 00       	mov    edx,0x1
c0013cc0:	eb 02                	jmp    c0013cc4 <Reg::readInt(char*, char*, int*)+0x4c>
c0013cc2:	31 d2                	xor    edx,edx
c0013cc4:	31 c0                	xor    eax,eax
c0013cc6:	be 0a 00 00 00       	mov    esi,0xa
c0013ccb:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c0013cd0:	75 21                	jne    c0013cf3 <Reg::readInt(char*, char*, int*)+0x7b>
c0013cd2:	0f be 4c 14 19       	movsx  ecx,BYTE PTR [esp+edx*1+0x19]
c0013cd7:	83 f9 78             	cmp    ecx,0x78
c0013cda:	75 0a                	jne    c0013ce6 <Reg::readInt(char*, char*, int*)+0x6e>
c0013cdc:	83 c2 02             	add    edx,0x2
c0013cdf:	be 10 00 00 00       	mov    esi,0x10
c0013ce4:	eb 0d                	jmp    c0013cf3 <Reg::readInt(char*, char*, int*)+0x7b>
c0013ce6:	83 f9 62             	cmp    ecx,0x62
c0013ce9:	75 08                	jne    c0013cf3 <Reg::readInt(char*, char*, int*)+0x7b>
c0013ceb:	83 c2 02             	add    edx,0x2
c0013cee:	be 02 00 00 00       	mov    esi,0x2
c0013cf3:	01 d5                	add    ebp,edx
c0013cf5:	31 d2                	xor    edx,edx
c0013cf7:	0f be 4d 00          	movsx  ecx,BYTE PTR [ebp+0x0]
c0013cfb:	83 f9 0d             	cmp    ecx,0xd
c0013cfe:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c0013d02:	0f 94 c3             	sete   bl
c0013d05:	85 c9                	test   ecx,ecx
c0013d07:	89 df                	mov    edi,ebx
c0013d09:	0f 94 c3             	sete   bl
c0013d0c:	09 df                	or     edi,ebx
c0013d0e:	89 fb                	mov    ebx,edi
c0013d10:	83 e7 01             	and    edi,0x1
c0013d13:	75 35                	jne    c0013d4a <Reg::readInt(char*, char*, int*)+0xd2>
c0013d15:	0f af d6             	imul   edx,esi
c0013d18:	83 fe 10             	cmp    esi,0x10
c0013d1b:	75 26                	jne    c0013d43 <Reg::readInt(char*, char*, int*)+0xcb>
c0013d1d:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0013d21:	83 ef 41             	sub    edi,0x41
c0013d24:	89 fb                	mov    ebx,edi
c0013d26:	80 fb 05             	cmp    bl,0x5
c0013d29:	77 06                	ja     c0013d31 <Reg::readInt(char*, char*, int*)+0xb9>
c0013d2b:	8d 54 0a c9          	lea    edx,[edx+ecx*1-0x37]
c0013d2f:	eb 16                	jmp    c0013d47 <Reg::readInt(char*, char*, int*)+0xcf>
c0013d31:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0013d35:	83 eb 61             	sub    ebx,0x61
c0013d38:	80 fb 05             	cmp    bl,0x5
c0013d3b:	77 06                	ja     c0013d43 <Reg::readInt(char*, char*, int*)+0xcb>
c0013d3d:	8d 54 0a a9          	lea    edx,[edx+ecx*1-0x57]
c0013d41:	eb 04                	jmp    c0013d47 <Reg::readInt(char*, char*, int*)+0xcf>
c0013d43:	8d 54 0a d0          	lea    edx,[edx+ecx*1-0x30]
c0013d47:	45                   	inc    ebp
c0013d48:	eb ad                	jmp    c0013cf7 <Reg::readInt(char*, char*, int*)+0x7f>
c0013d4a:	84 c0                	test   al,al
c0013d4c:	74 02                	je     c0013d50 <Reg::readInt(char*, char*, int*)+0xd8>
c0013d4e:	f7 da                	neg    edx
c0013d50:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c0013d57:	89 10                	mov    DWORD PTR [eax],edx
c0013d59:	88 d8                	mov    al,bl
c0013d5b:	81 c4 ec 00 00 00    	add    esp,0xec
c0013d61:	5b                   	pop    ebx
c0013d62:	5e                   	pop    esi
c0013d63:	5f                   	pop    edi
c0013d64:	5d                   	pop    ebp
c0013d65:	c3                   	ret    

c0013d66 <Reg::readString(char*, char*, char*, int)>:
c0013d66:	57                   	push   edi
c0013d67:	56                   	push   esi
c0013d68:	53                   	push   ebx
c0013d69:	81 ec d4 00 00 00    	sub    esp,0xd4
c0013d6f:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c0013d76:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c0013d7a:	57                   	push   edi
c0013d7b:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c0013d82:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c0013d89:	e8 b3 fe ff ff       	call   c0013c41 <Reg::getLine(char*, char*, char*)>
c0013d8e:	83 c4 10             	add    esp,0x10
c0013d91:	89 c6                	mov    esi,eax
c0013d93:	84 c0                	test   al,al
c0013d95:	74 44                	je     c0013ddb <Reg::readString(char*, char*, char*, int)+0x75>
c0013d97:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c0013d9e:	31 c0                	xor    eax,eax
c0013da0:	4a                   	dec    edx
c0013da1:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c0013da4:	84 c9                	test   cl,cl
c0013da6:	74 0f                	je     c0013db7 <Reg::readString(char*, char*, char*, int)+0x51>
c0013da8:	39 c2                	cmp    edx,eax
c0013daa:	7e 0b                	jle    c0013db7 <Reg::readString(char*, char*, char*, int)+0x51>
c0013dac:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c0013daf:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c0013db4:	40                   	inc    eax
c0013db5:	eb ea                	jmp    c0013da1 <Reg::readString(char*, char*, char*, int)+0x3b>
c0013db7:	83 ec 0c             	sub    esp,0xc
c0013dba:	53                   	push   ebx
c0013dbb:	e8 b0 c7 fe ff       	call   c0000570 <strlen>
c0013dc0:	83 c4 10             	add    esp,0x10
c0013dc3:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c0013dc8:	75 11                	jne    c0013ddb <Reg::readString(char*, char*, char*, int)+0x75>
c0013dca:	83 ec 0c             	sub    esp,0xc
c0013dcd:	53                   	push   ebx
c0013dce:	e8 9d c7 fe ff       	call   c0000570 <strlen>
c0013dd3:	83 c4 10             	add    esp,0x10
c0013dd6:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c0013ddb:	81 c4 d0 00 00 00    	add    esp,0xd0
c0013de1:	89 f0                	mov    eax,esi
c0013de3:	5b                   	pop    ebx
c0013de4:	5e                   	pop    esi
c0013de5:	5f                   	pop    edi
c0013de6:	c3                   	ret    

c0013de7 <Reg::readBool(char*, char*, bool*)>:
c0013de7:	83 ec 20             	sub    esp,0x20
c0013dea:	8d 44 24 10          	lea    eax,[esp+0x10]
c0013dee:	50                   	push   eax
c0013def:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013df3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013df7:	e8 7c fe ff ff       	call   c0013c78 <Reg::readInt(char*, char*, int*)>
c0013dfc:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0013e01:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0013e05:	0f 95 02             	setne  BYTE PTR [edx]
c0013e08:	83 c4 2c             	add    esp,0x2c
c0013e0b:	c3                   	ret    

c0013e0c <Reg::readBoolWithDefault(char*, char*, bool)>:
c0013e0c:	53                   	push   ebx
c0013e0d:	83 ec 1c             	sub    esp,0x1c
c0013e10:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c0013e14:	8d 44 24 13          	lea    eax,[esp+0x13]
c0013e18:	50                   	push   eax
c0013e19:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013e1d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013e21:	e8 c1 ff ff ff       	call   c0013de7 <Reg::readBool(char*, char*, bool*)>
c0013e26:	83 c4 10             	add    esp,0x10
c0013e29:	84 c0                	test   al,al
c0013e2b:	74 04                	je     c0013e31 <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c0013e2d:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c0013e31:	88 d8                	mov    al,bl
c0013e33:	83 c4 18             	add    esp,0x18
c0013e36:	5b                   	pop    ebx
c0013e37:	c3                   	ret    

c0013e38 <Reg::readIntWithDefault(char*, char*, int)>:
c0013e38:	53                   	push   ebx
c0013e39:	83 ec 1c             	sub    esp,0x1c
c0013e3c:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0013e40:	8d 44 24 10          	lea    eax,[esp+0x10]
c0013e44:	50                   	push   eax
c0013e45:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013e49:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013e4d:	e8 26 fe ff ff       	call   c0013c78 <Reg::readInt(char*, char*, int*)>
c0013e52:	83 c4 10             	add    esp,0x10
c0013e55:	84 c0                	test   al,al
c0013e57:	74 04                	je     c0013e5d <Reg::readIntWithDefault(char*, char*, int)+0x25>
c0013e59:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0013e5d:	89 d8                	mov    eax,ebx
c0013e5f:	83 c4 18             	add    esp,0x18
c0013e62:	5b                   	pop    ebx
c0013e63:	c3                   	ret    

c0013e64 <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c0013e64:	57                   	push   edi
c0013e65:	56                   	push   esi
c0013e66:	56                   	push   esi
c0013e67:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0013e6b:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0013e6f:	56                   	push   esi
c0013e70:	57                   	push   edi
c0013e71:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013e75:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013e79:	e8 e8 fe ff ff       	call   c0013d66 <Reg::readString(char*, char*, char*, int)>
c0013e7e:	83 c4 10             	add    esp,0x10
c0013e81:	84 c0                	test   al,al
c0013e83:	75 1a                	jne    c0013e9f <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x3b>
c0013e85:	51                   	push   ecx
c0013e86:	56                   	push   esi
c0013e87:	6a 00                	push   0x0
c0013e89:	57                   	push   edi
c0013e8a:	e8 61 c6 fe ff       	call   c00004f0 <memset>
c0013e8f:	8d 4e ff             	lea    ecx,[esi-0x1]
c0013e92:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0013e96:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013e98:	83 c4 10             	add    esp,0x10
c0013e9b:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0013e9f:	89 f8                	mov    eax,edi
c0013ea1:	5a                   	pop    edx
c0013ea2:	5e                   	pop    esi
c0013ea3:	5f                   	pop    edi
c0013ea4:	c3                   	ret    

c0013ea5 <SysEject(regs*)>:
c0013ea5:	83 ec 0c             	sub    esp,0xc
c0013ea8:	83 ca ff             	or     edx,0xffffffff
c0013eab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013eaf:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c0013eb2:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0013eb7:	83 e9 41             	sub    ecx,0x41
c0013eba:	83 f9 19             	cmp    ecx,0x19
c0013ebd:	77 18                	ja     c0013ed7 <SysEject(regs*)+0x32>
c0013ebf:	8b 0c 8d 80 b8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4780]
c0013ec6:	85 c9                	test   ecx,ecx
c0013ec8:	74 0d                	je     c0013ed7 <SysEject(regs*)+0x32>
c0013eca:	83 ec 0c             	sub    esp,0xc
c0013ecd:	51                   	push   ecx
c0013ece:	e8 77 9e ff ff       	call   c000dd4a <LogicalDisk::eject()>
c0013ed3:	83 c4 10             	add    esp,0x10
c0013ed6:	99                   	cdq    
c0013ed7:	83 c4 0c             	add    esp,0xc
c0013eda:	c3                   	ret    

c0013edb <SysExit(regs*)>:
c0013edb:	83 ec 18             	sub    esp,0x18
c0013ede:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013ee2:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0013ee5:	e8 46 2b 00 00       	call   c0016a30 <terminateTask(int)>
c0013eea:	83 c8 ff             	or     eax,0xffffffff
c0013eed:	83 c4 1c             	add    esp,0x1c
c0013ef0:	89 c2                	mov    edx,eax
c0013ef2:	c3                   	ret    

c0013ef3 <SysGetCwd(regs*)>:
c0013ef3:	83 ec 10             	sub    esp,0x10
c0013ef6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013efa:	ff 70 28             	push   DWORD PTR [eax+0x28]
c0013efd:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0013f00:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013f05:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0013f08:	e8 0f 79 ff ff       	call   c000b81c <Fs::getcwd(Process*, char*, int)>
c0013f0d:	83 c4 1c             	add    esp,0x1c
c0013f10:	99                   	cdq    
c0013f11:	c3                   	ret    

c0013f12 <SysGetPID(regs*)>:
c0013f12:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013f17:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013f1a:	8b 00                	mov    eax,DWORD PTR [eax]
c0013f1c:	99                   	cdq    
c0013f1d:	c3                   	ret    

c0013f1e <SysGetRAMData(regs*)>:
c0013f1e:	8b 0d e8 6e 02 c0    	mov    ecx,DWORD PTR ds:0xc0026ee8
c0013f24:	69 05 e4 6e 02 c0 c8 00 00 00 	imul   eax,DWORD PTR ds:0xc0026ee4,0xc8
c0013f2e:	99                   	cdq    
c0013f2f:	f7 f9                	idiv   ecx
c0013f31:	c1 e0 18             	shl    eax,0x18
c0013f34:	09 c8                	or     eax,ecx
c0013f36:	99                   	cdq    
c0013f37:	c3                   	ret    

c0013f38 <SysGetVGAPtr(regs*)>:
c0013f38:	55                   	push   ebp
c0013f39:	57                   	push   edi
c0013f3a:	56                   	push   esi
c0013f3b:	53                   	push   ebx
c0013f3c:	83 ec 18             	sub    esp,0x18
c0013f3f:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0013f43:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0013f46:	e8 b1 25 00 00       	call   c00164fc <Thr::processFromPID(int)>
c0013f4b:	83 c4 10             	add    esp,0x10
c0013f4e:	89 c1                	mov    ecx,eax
c0013f50:	b8 01 00 00 00       	mov    eax,0x1
c0013f55:	85 c9                	test   ecx,ecx
c0013f57:	74 57                	je     c0013fb0 <SysGetVGAPtr(regs*)+0x78>
c0013f59:	8b a9 06 05 00 00    	mov    ebp,DWORD PTR [ecx+0x506]
c0013f5f:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c0013f63:	74 0c                	je     c0013f71 <SysGetVGAPtr(regs*)+0x39>
c0013f65:	83 ec 0c             	sub    esp,0xc
c0013f68:	55                   	push   ebp
c0013f69:	e8 eb 47 ff ff       	call   c0008759 <setActiveTerminal(VgaText*)>
c0013f6e:	83 c4 10             	add    esp,0x10
c0013f71:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
c0013f74:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0013f77:	b9 a0 0f 00 00       	mov    ecx,0xfa0
c0013f7c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013f7e:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0013f81:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0013f84:	89 90 a0 0f 00 00    	mov    DWORD PTR [eax+0xfa0],edx
c0013f8a:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0013f8d:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0013f90:	89 90 a4 0f 00 00    	mov    DWORD PTR [eax+0xfa4],edx
c0013f96:	50                   	push   eax
c0013f97:	50                   	push   eax
c0013f98:	68 94 25 02 c0       	push   0xc0022594
c0013f9d:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0013fa0:	05 a8 0f 00 00       	add    eax,0xfa8
c0013fa5:	50                   	push   eax
c0013fa6:	e8 95 c6 fe ff       	call   c0000640 <strcpy>
c0013fab:	83 c4 10             	add    esp,0x10
c0013fae:	31 c0                	xor    eax,eax
c0013fb0:	83 c4 0c             	add    esp,0xc
c0013fb3:	31 d2                	xor    edx,edx
c0013fb5:	5b                   	pop    ebx
c0013fb6:	5e                   	pop    esi
c0013fb7:	5f                   	pop    edi
c0013fb8:	5d                   	pop    ebp
c0013fb9:	c3                   	ret    
c0013fba:	66 90                	xchg   ax,ax

c0013fbc <SysKill(regs*)>:
c0013fbc:	53                   	push   ebx
c0013fbd:	83 ec 08             	sub    esp,0x8
c0013fc0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013fc4:	83 7b 28 ff          	cmp    DWORD PTR [ebx+0x28],0xffffffff
c0013fc8:	75 16                	jne    c0013fe0 <SysKill(regs*)+0x24>
c0013fca:	83 ec 0c             	sub    esp,0xc
c0013fcd:	68 9e 25 02 c0       	push   0xc002259e
c0013fd2:	e8 54 d6 ff ff       	call   c001162b <KePanic(char const*)>
c0013fd7:	83 c4 10             	add    esp,0x10
c0013fda:	e9 89 00 00 00       	jmp    c0014068 <SysKill(regs*)+0xac>
c0013fdf:	90                   	nop
c0013fe0:	83 ec 0c             	sub    esp,0xc
c0013fe3:	68 e4 c6 02 c0       	push   0xc002c6e4
c0013fe8:	e8 ff bc 00 00       	call   c001fcec <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0013fed:	8d 76 00             	lea    esi,[esi+0x0]
c0013ff0:	83 c4 10             	add    esp,0x10
c0013ff3:	85 c0                	test   eax,eax
c0013ff5:	74 19                	je     c0014010 <SysKill(regs*)+0x54>
c0013ff7:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c0013ffa:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0013ffd:	39 0a                	cmp    DWORD PTR [edx],ecx
c0013fff:	74 33                	je     c0014034 <SysKill(regs*)+0x78>
c0014001:	52                   	push   edx
c0014002:	52                   	push   edx
c0014003:	50                   	push   eax
c0014004:	68 e4 c6 02 c0       	push   0xc002c6e4
c0014009:	e8 fe bf 00 00       	call   c002000c <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c001400e:	eb e0                	jmp    c0013ff0 <SysKill(regs*)+0x34>
c0014010:	83 ec 0c             	sub    esp,0xc
c0014013:	68 d8 c6 02 c0       	push   0xc002c6d8
c0014018:	e8 cf bc 00 00       	call   c001fcec <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001401d:	8d 76 00             	lea    esi,[esi+0x0]
c0014020:	83 c4 10             	add    esp,0x10
c0014023:	85 c0                	test   eax,eax
c0014025:	74 41                	je     c0014068 <SysKill(regs*)+0xac>
c0014027:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c001402a:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c001402d:	39 0a                	cmp    DWORD PTR [edx],ecx
c001402f:	75 27                	jne    c0014058 <SysKill(regs*)+0x9c>
c0014031:	8d 76 00             	lea    esi,[esi+0x0]
c0014034:	51                   	push   ecx
c0014035:	51                   	push   ecx
c0014036:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0014039:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001403e:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014041:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c0014047:	e8 82 da ff ff       	call   c0011ace <KeRaiseSignal(SigHandlerBlock*, int)>
c001404c:	83 c4 10             	add    esp,0x10
c001404f:	31 c0                	xor    eax,eax
c0014051:	31 d2                	xor    edx,edx
c0014053:	eb 1b                	jmp    c0014070 <SysKill(regs*)+0xb4>
c0014055:	8d 76 00             	lea    esi,[esi+0x0]
c0014058:	52                   	push   edx
c0014059:	52                   	push   edx
c001405a:	50                   	push   eax
c001405b:	68 d8 c6 02 c0       	push   0xc002c6d8
c0014060:	e8 a7 bf 00 00       	call   c002000c <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c0014065:	eb b9                	jmp    c0014020 <SysKill(regs*)+0x64>
c0014067:	90                   	nop
c0014068:	83 c8 ff             	or     eax,0xffffffff
c001406b:	89 c2                	mov    edx,eax
c001406d:	8d 76 00             	lea    esi,[esi+0x0]
c0014070:	83 c4 08             	add    esp,0x8
c0014073:	5b                   	pop    ebx
c0014074:	c3                   	ret    

c0014075 <SysLoadDLL(regs*)>:
c0014075:	56                   	push   esi
c0014076:	53                   	push   ebx
c0014077:	31 d2                	xor    edx,edx
c0014079:	51                   	push   ecx
c001407a:	b8 01 00 00 00       	mov    eax,0x1
c001407f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0014083:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c0014087:	0f 84 8c 00 00 00    	je     c0014119 <SysLoadDLL(regs*)+0xa4>
c001408d:	83 ec 0c             	sub    esp,0xc
c0014090:	68 14 01 00 00       	push   0x114
c0014095:	e8 1c 3a ff ff       	call   c0007ab6 <malloc>
c001409a:	83 c4 0c             	add    esp,0xc
c001409d:	89 c3                	mov    ebx,eax
c001409f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00140a4:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c00140a7:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00140aa:	53                   	push   ebx
c00140ab:	e8 a8 7a ff ff       	call   c000bb58 <File::File(char const*, Process*)>
c00140b0:	83 c4 10             	add    esp,0x10
c00140b3:	31 d2                	xor    edx,edx
c00140b5:	b8 02 00 00 00       	mov    eax,0x2
c00140ba:	85 db                	test   ebx,ebx
c00140bc:	74 5b                	je     c0014119 <SysLoadDLL(regs*)+0xa4>
c00140be:	83 ec 0c             	sub    esp,0xc
c00140c1:	53                   	push   ebx
c00140c2:	e8 73 7d ff ff       	call   c000be3a <File::exists()>
c00140c7:	83 c4 10             	add    esp,0x10
c00140ca:	84 c0                	test   al,al
c00140cc:	8b 03                	mov    eax,DWORD PTR [ebx]
c00140ce:	75 11                	jne    c00140e1 <SysLoadDLL(regs*)+0x6c>
c00140d0:	83 ec 0c             	sub    esp,0xc
c00140d3:	53                   	push   ebx
c00140d4:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00140d7:	83 c4 10             	add    esp,0x10
c00140da:	b8 03 00 00 00       	mov    eax,0x3
c00140df:	eb 36                	jmp    c0014117 <SysLoadDLL(regs*)+0xa2>
c00140e1:	83 ec 0c             	sub    esp,0xc
c00140e4:	53                   	push   ebx
c00140e5:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00140e8:	58                   	pop    eax
c00140e9:	5a                   	pop    edx
c00140ea:	6a 00                	push   0x0
c00140ec:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00140ef:	e8 3b 15 00 00       	call   c001562f <Thr::loadDLL(char const*, bool)>
c00140f4:	83 c4 10             	add    esp,0x10
c00140f7:	89 c1                	mov    ecx,eax
c00140f9:	31 d2                	xor    edx,edx
c00140fb:	b8 04 00 00 00       	mov    eax,0x4
c0014100:	85 c9                	test   ecx,ecx
c0014102:	74 15                	je     c0014119 <SysLoadDLL(regs*)+0xa4>
c0014104:	53                   	push   ebx
c0014105:	53                   	push   ebx
c0014106:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c001410c:	51                   	push   ecx
c001410d:	e8 4e 17 00 00       	call   c0015860 <Thr::executeDLL(unsigned long, void*)>
c0014112:	83 c4 10             	add    esp,0x10
c0014115:	31 c0                	xor    eax,eax
c0014117:	31 d2                	xor    edx,edx
c0014119:	59                   	pop    ecx
c001411a:	5b                   	pop    ebx
c001411b:	5e                   	pop    esi
c001411c:	c3                   	ret    

c001411d <SysRead(regs*)>:
c001411d:	57                   	push   edi
c001411e:	56                   	push   esi
c001411f:	53                   	push   ebx
c0014120:	83 ec 10             	sub    esp,0x10
c0014123:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0014127:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001412a:	83 f8 02             	cmp    eax,0x2
c001412d:	77 10                	ja     c001413f <SysRead(regs*)+0x22>
c001412f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014134:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014137:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c001413d:	eb 0e                	jmp    c001414d <SysRead(regs*)+0x30>
c001413f:	83 ec 0c             	sub    esp,0xc
c0014142:	50                   	push   eax
c0014143:	e8 6b 53 ff ff       	call   c00094b3 <KeGetFileFromDescriptor(int)>
c0014148:	83 c4 10             	add    esp,0x10
c001414b:	89 c1                	mov    ecx,eax
c001414d:	83 c8 ff             	or     eax,0xffffffff
c0014150:	85 c9                	test   ecx,ecx
c0014152:	89 c2                	mov    edx,eax
c0014154:	74 28                	je     c001417e <SysRead(regs*)+0x61>
c0014156:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001415e:	31 ff                	xor    edi,edi
c0014160:	83 ec 0c             	sub    esp,0xc
c0014163:	8b 01                	mov    eax,DWORD PTR [ecx]
c0014165:	8d 54 24 18          	lea    edx,[esp+0x18]
c0014169:	52                   	push   edx
c001416a:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001416d:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c0014170:	57                   	push   edi
c0014171:	56                   	push   esi
c0014172:	51                   	push   ecx
c0014173:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014176:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001417a:	83 c4 20             	add    esp,0x20
c001417d:	99                   	cdq    
c001417e:	83 c4 10             	add    esp,0x10
c0014181:	5b                   	pop    ebx
c0014182:	5e                   	pop    esi
c0014183:	5f                   	pop    edi
c0014184:	c3                   	ret    

c0014185 <SysRegisterSignal(regs*)>:
c0014185:	83 ec 18             	sub    esp,0x18
c0014188:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001418c:	6a 00                	push   0x0
c001418e:	6a 00                	push   0x0
c0014190:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0014193:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0014196:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001419b:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001419e:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c00141a4:	e8 ef d8 ff ff       	call   c0011a98 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)>
c00141a9:	83 c4 2c             	add    esp,0x2c
c00141ac:	99                   	cdq    
c00141ad:	c3                   	ret    

c00141ae <SysRegistryGetTypeFromPath(regs*)>:
c00141ae:	57                   	push   edi
c00141af:	56                   	push   esi
c00141b0:	53                   	push   ebx
c00141b1:	81 ec 38 01 00 00    	sub    esp,0x138
c00141b7:	8b 9c 24 48 01 00 00 	mov    ebx,DWORD PTR [esp+0x148]
c00141be:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00141c1:	68 bf 25 02 c0       	push   0xc00225bf
c00141c6:	e8 7a 67 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c00141cb:	5a                   	pop    edx
c00141cc:	59                   	pop    ecx
c00141cd:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00141d0:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00141d3:	e8 4d f6 ff ff       	call   c0013825 <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c00141d8:	5f                   	pop    edi
c00141d9:	89 c6                	mov    esi,eax
c00141db:	5a                   	pop    edx
c00141dc:	50                   	push   eax
c00141dd:	68 df 25 02 c0       	push   0xc00225df
c00141e2:	e8 5e 67 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c00141e7:	83 c4 10             	add    esp,0x10
c00141ea:	85 f6                	test   esi,esi
c00141ec:	74 28                	je     c0014216 <SysRegistryGetTypeFromPath(regs*)+0x68>
c00141ee:	50                   	push   eax
c00141ef:	8d 7c 24 08          	lea    edi,[esp+0x8]
c00141f3:	57                   	push   edi
c00141f4:	56                   	push   esi
c00141f5:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00141f8:	e8 0c f2 ff ff       	call   c0013409 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c00141fd:	83 c4 0c             	add    esp,0xc
c0014200:	89 c3                	mov    ebx,eax
c0014202:	57                   	push   edi
c0014203:	50                   	push   eax
c0014204:	68 e7 25 02 c0       	push   0xc00225e7
c0014209:	e8 37 67 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001420e:	89 d8                	mov    eax,ebx
c0014210:	83 c4 10             	add    esp,0x10
c0014213:	99                   	cdq    
c0014214:	eb 05                	jmp    c001421b <SysRegistryGetTypeFromPath(regs*)+0x6d>
c0014216:	83 c8 ff             	or     eax,0xffffffff
c0014219:	89 c2                	mov    edx,eax
c001421b:	81 c4 30 01 00 00    	add    esp,0x130
c0014221:	5b                   	pop    ebx
c0014222:	5e                   	pop    esi
c0014223:	5f                   	pop    edi
c0014224:	c3                   	ret    

c0014225 <SysRegistryReadExtent(regs*)>:
c0014225:	83 ec 1c             	sub    esp,0x1c
c0014228:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001422c:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c001422f:	8b 4a 20             	mov    ecx,DWORD PTR [edx+0x20]
c0014232:	85 c0                	test   eax,eax
c0014234:	79 1f                	jns    c0014255 <SysRegistryReadExtent(regs*)+0x30>
c0014236:	25 ff ff ff 7f       	and    eax,0x7fffffff
c001423b:	52                   	push   edx
c001423c:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0014240:	52                   	push   edx
c0014241:	50                   	push   eax
c0014242:	51                   	push   ecx
c0014243:	e8 b3 f0 ff ff       	call   c00132fb <CmGetInteger(Reghive_Tag*, int, unsigned long long*)>
c0014248:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001424c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0014250:	83 c4 10             	add    esp,0x10
c0014253:	eb 14                	jmp    c0014269 <SysRegistryReadExtent(regs*)+0x44>
c0014255:	83 ec 04             	sub    esp,0x4
c0014258:	ff 72 24             	push   DWORD PTR [edx+0x24]
c001425b:	50                   	push   eax
c001425c:	51                   	push   ecx
c001425d:	e8 33 eb ff ff       	call   c0012d95 <CmGetString(Reghive_Tag*, int, char*)>
c0014262:	83 c4 10             	add    esp,0x10
c0014265:	31 c0                	xor    eax,eax
c0014267:	31 d2                	xor    edx,edx
c0014269:	83 c4 1c             	add    esp,0x1c
c001426c:	c3                   	ret    

c001426d <SysRegistryPathToExtentLookup(regs*)>:
c001426d:	53                   	push   ebx
c001426e:	83 ec 10             	sub    esp,0x10
c0014271:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0014275:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0014278:	68 fd 25 02 c0       	push   0xc00225fd
c001427d:	e8 c3 66 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0014282:	58                   	pop    eax
c0014283:	5a                   	pop    edx
c0014284:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0014287:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c001428a:	e8 96 f5 ff ff       	call   c0013825 <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c001428f:	83 c4 18             	add    esp,0x18
c0014292:	99                   	cdq    
c0014293:	5b                   	pop    ebx
c0014294:	c3                   	ret    

c0014295 <SysRegistryEnterDirectory(regs*)>:
c0014295:	53                   	push   ebx
c0014296:	83 ec 10             	sub    esp,0x10
c0014299:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001429d:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c00142a0:	68 20 26 02 c0       	push   0xc0022620
c00142a5:	e8 9b 66 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c00142aa:	58                   	pop    eax
c00142ab:	5a                   	pop    edx
c00142ac:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c00142af:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00142b2:	e8 55 eb ff ff       	call   c0012e0c <CmEnterDirectory(Reghive_Tag*, int)>
c00142b7:	83 c4 18             	add    esp,0x18
c00142ba:	99                   	cdq    
c00142bb:	5b                   	pop    ebx
c00142bc:	c3                   	ret    

c00142bd <SysRegistryGetNext(regs*)>:
c00142bd:	53                   	push   ebx
c00142be:	83 ec 10             	sub    esp,0x10
c00142c1:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00142c5:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c00142c8:	68 3e 26 02 c0       	push   0xc002263e
c00142cd:	e8 73 66 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c00142d2:	58                   	pop    eax
c00142d3:	5a                   	pop    edx
c00142d4:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c00142d7:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00142da:	e8 6c eb ff ff       	call   c0012e4b <CmGetNext(Reghive_Tag*, int)>
c00142df:	83 c4 18             	add    esp,0x18
c00142e2:	99                   	cdq    
c00142e3:	5b                   	pop    ebx
c00142e4:	c3                   	ret    

c00142e5 <SysRegistryGetNameAndTypeFromExtent(regs*)>:
c00142e5:	57                   	push   edi
c00142e6:	56                   	push   esi
c00142e7:	53                   	push   ebx
c00142e8:	81 ec 34 01 00 00    	sub    esp,0x134
c00142ee:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c00142f5:	8d 7c 24 08          	lea    edi,[esp+0x8]
c00142f9:	57                   	push   edi
c00142fa:	ff 76 28             	push   DWORD PTR [esi+0x28]
c00142fd:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0014300:	e8 04 f1 ff ff       	call   c0013409 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c0014305:	89 c3                	mov    ebx,eax
c0014307:	58                   	pop    eax
c0014308:	5a                   	pop    edx
c0014309:	57                   	push   edi
c001430a:	ff 76 24             	push   DWORD PTR [esi+0x24]
c001430d:	e8 2e c3 fe ff       	call   c0000640 <strcpy>
c0014312:	89 d8                	mov    eax,ebx
c0014314:	81 c4 40 01 00 00    	add    esp,0x140
c001431a:	99                   	cdq    
c001431b:	5b                   	pop    ebx
c001431c:	5e                   	pop    esi
c001431d:	5f                   	pop    edi
c001431e:	c3                   	ret    

c001431f <SysRegistryOpen(regs*)>:
c001431f:	83 ec 18             	sub    esp,0x18
c0014322:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014326:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0014329:	e8 f7 e8 ff ff       	call   c0012c25 <CmOpen(char const*)>
c001432e:	83 c4 1c             	add    esp,0x1c
c0014331:	99                   	cdq    
c0014332:	c3                   	ret    

c0014333 <SysRegistryClose(regs*)>:
c0014333:	83 ec 18             	sub    esp,0x18
c0014336:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001433a:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001433d:	e8 01 ea ff ff       	call   c0012d43 <CmClose(Reghive_Tag*)>
c0014342:	31 c0                	xor    eax,eax
c0014344:	31 d2                	xor    edx,edx
c0014346:	83 c4 1c             	add    esp,0x1c
c0014349:	c3                   	ret    

c001434a <SysSbrk(regs*)>:
c001434a:	56                   	push   esi
c001434b:	53                   	push   ebx
c001434c:	50                   	push   eax
c001434d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014352:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0014356:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014359:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c001435c:	8b 88 12 05 00 00    	mov    ecx,DWORD PTR [eax+0x512]
c0014362:	85 db                	test   ebx,ebx
c0014364:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c0014367:	74 02                	je     c001436b <SysSbrk(regs*)+0x21>
c0014369:	79 06                	jns    c0014371 <SysSbrk(regs*)+0x27>
c001436b:	89 f0                	mov    eax,esi
c001436d:	31 d2                	xor    edx,edx
c001436f:	eb 2a                	jmp    c001439b <SysSbrk(regs*)+0x51>
c0014371:	83 c8 ff             	or     eax,0xffffffff
c0014374:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c001437a:	89 c2                	mov    edx,eax
c001437c:	77 1d                	ja     c001439b <SysSbrk(regs*)+0x51>
c001437e:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c0014384:	50                   	push   eax
c0014385:	c1 ea 0c             	shr    edx,0xc
c0014388:	68 07 0c 00 00       	push   0xc07
c001438d:	52                   	push   edx
c001438e:	51                   	push   ecx
c001438f:	e8 90 5a ff ff       	call   c0009e24 <VAS::allocatePages(int, int)>
c0014394:	89 f0                	mov    eax,esi
c0014396:	31 d2                	xor    edx,edx
c0014398:	83 c4 10             	add    esp,0x10
c001439b:	59                   	pop    ecx
c001439c:	5b                   	pop    ebx
c001439d:	5e                   	pop    esi
c001439e:	c3                   	ret    

c001439f <SysSetCwd(regs*)>:
c001439f:	83 ec 14             	sub    esp,0x14
c00143a2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00143a6:	ff 70 20             	push   DWORD PTR [eax+0x20]
c00143a9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00143ae:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c00143b1:	e8 23 7b ff ff       	call   c000bed9 <Fs::setcwd(Process*, char*)>
c00143b6:	83 c4 1c             	add    esp,0x1c
c00143b9:	99                   	cdq    
c00143ba:	c3                   	ret    

c00143bb <SysSetTime(regs*)>:
c00143bb:	55                   	push   ebp
c00143bc:	31 c9                	xor    ecx,ecx
c00143be:	57                   	push   edi
c00143bf:	bd 0c 00 00 00       	mov    ebp,0xc
c00143c4:	56                   	push   esi
c00143c5:	53                   	push   ebx
c00143c6:	31 db                	xor    ebx,ebx
c00143c8:	83 ec 10             	sub    esp,0x10
c00143cb:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00143cf:	8b 72 20             	mov    esi,DWORD PTR [edx+0x20]
c00143d2:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c00143d5:	8b 7a 24             	mov    edi,DWORD PTR [edx+0x24]
c00143d8:	89 c2                	mov    edx,eax
c00143da:	81 ef 6c 07 00 00    	sub    edi,0x76c
c00143e0:	83 e2 1f             	and    edx,0x1f
c00143e3:	c1 e7 10             	shl    edi,0x10
c00143e6:	42                   	inc    edx
c00143e7:	c1 e8 05             	shr    eax,0x5
c00143ea:	88 d1                	mov    cl,dl
c00143ec:	31 d2                	xor    edx,edx
c00143ee:	f7 f5                	div    ebp
c00143f0:	89 dd                	mov    ebp,ebx
c00143f2:	88 d5                	mov    ch,dl
c00143f4:	81 e5 ff ff 00 ff    	and    ebp,0xff00ffff
c00143fa:	0f b7 c1             	movzx  eax,cx
c00143fd:	31 d2                	xor    edx,edx
c00143ff:	09 f8                	or     eax,edi
c0014401:	bf 3c 00 00 00       	mov    edi,0x3c
c0014406:	89 c1                	mov    ecx,eax
c0014408:	89 f0                	mov    eax,esi
c001440a:	f7 f7                	div    edi
c001440c:	c1 e2 10             	shl    edx,0x10
c001440f:	09 d5                	or     ebp,edx
c0014411:	31 d2                	xor    edx,edx
c0014413:	89 eb                	mov    ebx,ebp
c0014415:	f7 f7                	div    edi
c0014417:	bf 10 0e 00 00       	mov    edi,0xe10
c001441c:	88 d7                	mov    bh,dl
c001441e:	89 f0                	mov    eax,esi
c0014420:	31 d2                	xor    edx,edx
c0014422:	f7 f7                	div    edi
c0014424:	bf 18 00 00 00       	mov    edi,0x18
c0014429:	31 d2                	xor    edx,edx
c001442b:	f7 f7                	div    edi
c001442d:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0014432:	88 d3                	mov    bl,dl
c0014434:	53                   	push   ebx
c0014435:	51                   	push   ecx
c0014436:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c001443c:	e8 a5 82 ff ff       	call   c000c6e6 <Clock::setTimeInDatetimeLocal(datetime_t)>
c0014441:	83 c4 1c             	add    esp,0x1c
c0014444:	83 f0 01             	xor    eax,0x1
c0014447:	5b                   	pop    ebx
c0014448:	0f b6 c0             	movzx  eax,al
c001444b:	5e                   	pop    esi
c001444c:	31 d2                	xor    edx,edx
c001444e:	5f                   	pop    edi
c001444f:	5d                   	pop    ebp
c0014450:	c3                   	ret    

c0014451 <SysSymlink(regs*)>:
c0014451:	53                   	push   ebx
c0014452:	83 c8 ff             	or     eax,0xffffffff
c0014455:	83 ec 08             	sub    esp,0x8
c0014458:	89 c2                	mov    edx,eax
c001445a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001445e:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0014461:	85 c9                	test   ecx,ecx
c0014463:	74 14                	je     c0014479 <SysSymlink(regs*)+0x28>
c0014465:	8b 5b 24             	mov    ebx,DWORD PTR [ebx+0x24]
c0014468:	85 db                	test   ebx,ebx
c001446a:	74 0d                	je     c0014479 <SysSymlink(regs*)+0x28>
c001446c:	50                   	push   eax
c001446d:	50                   	push   eax
c001446e:	53                   	push   ebx
c001446f:	51                   	push   ecx
c0014470:	e8 c5 6e ff ff       	call   c000b33a <KeCreateSymlink(char const*, char const*)>
c0014475:	83 c4 10             	add    esp,0x10
c0014478:	99                   	cdq    
c0014479:	83 c4 08             	add    esp,0x8
c001447c:	5b                   	pop    ebx
c001447d:	c3                   	ret    

c001447e <SysTimezone(regs*)>:
c001447e:	53                   	push   ebx
c001447f:	83 ec 08             	sub    esp,0x8
c0014482:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014486:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c001448a:	75 17                	jne    c00144a3 <SysTimezone(regs*)+0x25>
c001448c:	83 ec 0c             	sub    esp,0xc
c001448f:	68 55 26 02 c0       	push   0xc0022655
c0014494:	e8 ac 64 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0014499:	83 c8 ff             	or     eax,0xffffffff
c001449c:	83 c4 10             	add    esp,0x10
c001449f:	89 c2                	mov    edx,eax
c00144a1:	eb 20                	jmp    c00144c3 <SysTimezone(regs*)+0x45>
c00144a3:	83 ec 0c             	sub    esp,0xc
c00144a6:	68 6a 26 02 c0       	push   0xc002266a
c00144ab:	e8 95 64 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c00144b0:	58                   	pop    eax
c00144b1:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00144b4:	e8 97 7f ff ff       	call   c000c450 <User::loadClockSettings(int)>
c00144b9:	83 c4 10             	add    esp,0x10
c00144bc:	b8 01 00 00 00       	mov    eax,0x1
c00144c1:	31 d2                	xor    edx,edx
c00144c3:	83 c4 08             	add    esp,0x8
c00144c6:	5b                   	pop    ebx
c00144c7:	c3                   	ret    

c00144c8 <SysTruncate(regs*)>:
c00144c8:	55                   	push   ebp
c00144c9:	57                   	push   edi
c00144ca:	31 ff                	xor    edi,edi
c00144cc:	56                   	push   esi
c00144cd:	53                   	push   ebx
c00144ce:	83 ec 0c             	sub    esp,0xc
c00144d1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00144d5:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c00144d8:	8b 68 24             	mov    ebp,DWORD PTR [eax+0x24]
c00144db:	89 ce                	mov    esi,ecx
c00144dd:	83 78 28 00          	cmp    DWORD PTR [eax+0x28],0x0
c00144e1:	0f 84 9a 00 00 00    	je     c0014581 <SysTruncate(regs*)+0xb9>
c00144e7:	83 ec 0c             	sub    esp,0xc
c00144ea:	68 14 01 00 00       	push   0x114
c00144ef:	e8 c2 35 ff ff       	call   c0007ab6 <malloc>
c00144f4:	83 c4 0c             	add    esp,0xc
c00144f7:	89 c3                	mov    ebx,eax
c00144f9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00144fe:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0014501:	55                   	push   ebp
c0014502:	53                   	push   ebx
c0014503:	e8 50 76 ff ff       	call   c000bb58 <File::File(char const*, Process*)>
c0014508:	83 c4 10             	add    esp,0x10
c001450b:	31 d2                	xor    edx,edx
c001450d:	b8 03 00 00 00       	mov    eax,0x3
c0014512:	85 db                	test   ebx,ebx
c0014514:	0f 84 a2 00 00 00    	je     c00145bc <SysTruncate(regs*)+0xf4>
c001451a:	51                   	push   ecx
c001451b:	51                   	push   ecx
c001451c:	6a 02                	push   0x2
c001451e:	53                   	push   ebx
c001451f:	e8 52 76 ff ff       	call   c000bb76 <File::open(FileOpenMode)>
c0014524:	83 c4 10             	add    esp,0x10
c0014527:	85 c0                	test   eax,eax
c0014529:	74 13                	je     c001453e <SysTruncate(regs*)+0x76>
c001452b:	83 ec 0c             	sub    esp,0xc
c001452e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014530:	53                   	push   ebx
c0014531:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0014534:	83 c4 10             	add    esp,0x10
c0014537:	b8 04 00 00 00       	mov    eax,0x4
c001453c:	eb 7c                	jmp    c00145ba <SysTruncate(regs*)+0xf2>
c001453e:	52                   	push   edx
c001453f:	57                   	push   edi
c0014540:	56                   	push   esi
c0014541:	53                   	push   ebx
c0014542:	e8 43 77 ff ff       	call   c000bc8a <File::truncate(unsigned long long)>
c0014547:	83 c4 10             	add    esp,0x10
c001454a:	85 c0                	test   eax,eax
c001454c:	74 1b                	je     c0014569 <SysTruncate(regs*)+0xa1>
c001454e:	83 ec 0c             	sub    esp,0xc
c0014551:	53                   	push   ebx
c0014552:	e8 7d 76 ff ff       	call   c000bbd4 <File::close()>
c0014557:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014559:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001455c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001455f:	83 c4 10             	add    esp,0x10
c0014562:	b8 05 00 00 00       	mov    eax,0x5
c0014567:	eb 51                	jmp    c00145ba <SysTruncate(regs*)+0xf2>
c0014569:	83 ec 0c             	sub    esp,0xc
c001456c:	53                   	push   ebx
c001456d:	e8 62 76 ff ff       	call   c000bbd4 <File::close()>
c0014572:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014574:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014577:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001457a:	83 c4 10             	add    esp,0x10
c001457d:	31 c0                	xor    eax,eax
c001457f:	eb 39                	jmp    c00145ba <SysTruncate(regs*)+0xf2>
c0014581:	31 d2                	xor    edx,edx
c0014583:	b8 01 00 00 00       	mov    eax,0x1
c0014588:	83 fd 02             	cmp    ebp,0x2
c001458b:	7e 2f                	jle    c00145bc <SysTruncate(regs*)+0xf4>
c001458d:	83 ec 0c             	sub    esp,0xc
c0014590:	51                   	push   ecx
c0014591:	e8 1d 4f ff ff       	call   c00094b3 <KeGetFileFromDescriptor(int)>
c0014596:	83 c4 10             	add    esp,0x10
c0014599:	89 c1                	mov    ecx,eax
c001459b:	31 d2                	xor    edx,edx
c001459d:	b8 02 00 00 00       	mov    eax,0x2
c00145a2:	85 c9                	test   ecx,ecx
c00145a4:	74 16                	je     c00145bc <SysTruncate(regs*)+0xf4>
c00145a6:	50                   	push   eax
c00145a7:	57                   	push   edi
c00145a8:	56                   	push   esi
c00145a9:	51                   	push   ecx
c00145aa:	e8 db 76 ff ff       	call   c000bc8a <File::truncate(unsigned long long)>
c00145af:	83 c4 10             	add    esp,0x10
c00145b2:	85 c0                	test   eax,eax
c00145b4:	0f 95 c0             	setne  al
c00145b7:	0f b6 c0             	movzx  eax,al
c00145ba:	31 d2                	xor    edx,edx
c00145bc:	83 c4 0c             	add    esp,0xc
c00145bf:	5b                   	pop    ebx
c00145c0:	5e                   	pop    esi
c00145c1:	5f                   	pop    edi
c00145c2:	5d                   	pop    ebp
c00145c3:	c3                   	ret    

c00145c4 <SysWrite(regs*)>:
c00145c4:	57                   	push   edi
c00145c5:	56                   	push   esi
c00145c6:	53                   	push   ebx
c00145c7:	83 ec 10             	sub    esp,0x10
c00145ca:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00145ce:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00145d1:	83 f8 02             	cmp    eax,0x2
c00145d4:	77 10                	ja     c00145e6 <SysWrite(regs*)+0x22>
c00145d6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00145db:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00145de:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c00145e4:	eb 0e                	jmp    c00145f4 <SysWrite(regs*)+0x30>
c00145e6:	83 ec 0c             	sub    esp,0xc
c00145e9:	50                   	push   eax
c00145ea:	e8 c4 4e ff ff       	call   c00094b3 <KeGetFileFromDescriptor(int)>
c00145ef:	83 c4 10             	add    esp,0x10
c00145f2:	89 c1                	mov    ecx,eax
c00145f4:	83 c8 ff             	or     eax,0xffffffff
c00145f7:	85 c9                	test   ecx,ecx
c00145f9:	89 c2                	mov    edx,eax
c00145fb:	74 28                	je     c0014625 <SysWrite(regs*)+0x61>
c00145fd:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0014605:	31 ff                	xor    edi,edi
c0014607:	83 ec 0c             	sub    esp,0xc
c001460a:	8b 01                	mov    eax,DWORD PTR [ecx]
c001460c:	8d 54 24 18          	lea    edx,[esp+0x18]
c0014610:	52                   	push   edx
c0014611:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0014614:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c0014617:	57                   	push   edi
c0014618:	56                   	push   esi
c0014619:	51                   	push   ecx
c001461a:	ff 50 10             	call   DWORD PTR [eax+0x10]
c001461d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0014621:	83 c4 20             	add    esp,0x20
c0014624:	99                   	cdq    
c0014625:	83 c4 10             	add    esp,0x10
c0014628:	5b                   	pop    ebx
c0014629:	5e                   	pop    esi
c001462a:	5f                   	pop    edi
c001462b:	c3                   	ret    

c001462c <SysWsbe(regs*)>:
c001462c:	57                   	push   edi
c001462d:	b9 0b 00 00 00       	mov    ecx,0xb
c0014632:	56                   	push   esi
c0014633:	be a9 26 02 c0       	mov    esi,0xc00226a9
c0014638:	53                   	push   ebx
c0014639:	83 ec 30             	sub    esp,0x30
c001463c:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0014640:	fc                   	cld    
c0014641:	83 ec 0c             	sub    esp,0xc
c0014644:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0014646:	8d 7c 24 10          	lea    edi,[esp+0x10]
c001464a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001464f:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014652:	8b b0 06 05 00 00    	mov    esi,DWORD PTR [eax+0x506]
c0014658:	8b 06                	mov    eax,DWORD PTR [esi]
c001465a:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c001465d:	57                   	push   edi
c001465e:	e8 0d bf fe ff       	call   c0000570 <strlen>
c0014663:	5a                   	pop    edx
c0014664:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0014668:	52                   	push   edx
c0014669:	31 d2                	xor    edx,edx
c001466b:	57                   	push   edi
c001466c:	52                   	push   edx
c001466d:	50                   	push   eax
c001466e:	56                   	push   esi
c001466f:	ff d3                	call   ebx
c0014671:	83 c4 14             	add    esp,0x14
c0014674:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0014678:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001467b:	e8 b0 23 00 00       	call   c0016a30 <terminateTask(int)>
c0014680:	83 c4 40             	add    esp,0x40
c0014683:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0014688:	5b                   	pop    ebx
c0014689:	31 d2                	xor    edx,edx
c001468b:	5e                   	pop    esi
c001468c:	5f                   	pop    edi
c001468d:	c3                   	ret    

c001468e <SysYield(regs*)>:
c001468e:	83 ec 0c             	sub    esp,0xc
c0014691:	fa                   	cli    
c0014692:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c0014698:	e8 f3 19 00 00       	call   c0016090 <schedule()>
c001469d:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c00146a2:	48                   	dec    eax
c00146a3:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c00146a8:	75 01                	jne    c00146ab <SysYield(regs*)+0x1d>
c00146aa:	fb                   	sti    
c00146ab:	31 c0                	xor    eax,eax
c00146ad:	31 d2                	xor    edx,edx
c00146af:	83 c4 0c             	add    esp,0xc
c00146b2:	c3                   	ret    

c00146b3 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c00146b3:	55                   	push   ebp
c00146b4:	57                   	push   edi
c00146b5:	56                   	push   esi
c00146b6:	53                   	push   ebx
c00146b7:	81 ec 2c 10 00 00    	sub    esp,0x102c
c00146bd:	83 bc 24 50 10 00 00 00 	cmp    DWORD PTR [esp+0x1050],0x0
c00146c5:	0f 95 c0             	setne  al
c00146c8:	31 d2                	xor    edx,edx
c00146ca:	83 bc 24 48 10 00 00 00 	cmp    DWORD PTR [esp+0x1048],0x0
c00146d2:	0f 94 c2             	sete   dl
c00146d5:	85 c2                	test   edx,eax
c00146d7:	74 34                	je     c001470d <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x5a>
c00146d9:	f7 84 24 4c 10 00 00 ff 0f 00 00 	test   DWORD PTR [esp+0x104c],0xfff
c00146e4:	74 27                	je     c001470d <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x5a>
c00146e6:	8b 84 24 4c 10 00 00 	mov    eax,DWORD PTR [esp+0x104c]
c00146ed:	05 00 10 00 00       	add    eax,0x1000
c00146f2:	89 c1                	mov    ecx,eax
c00146f4:	25 00 f0 ff ff       	and    eax,0xfffff000
c00146f9:	81 c9 00 f0 ff ff    	or     ecx,0xfffff000
c00146ff:	89 84 24 4c 10 00 00 	mov    DWORD PTR [esp+0x104c],eax
c0014706:	89 8c 24 48 10 00 00 	mov    DWORD PTR [esp+0x1048],ecx
c001470d:	8b 84 24 48 10 00 00 	mov    eax,DWORD PTR [esp+0x1048]
c0014714:	83 ec 0c             	sub    esp,0xc
c0014717:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c001471d:	6a 01                	push   0x1
c001471f:	e8 e9 4e ff ff       	call   c000960d <Virt::allocateKernelVirtualPages(int)>
c0014724:	83 c4 10             	add    esp,0x10
c0014727:	89 c3                	mov    ebx,eax
c0014729:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c001472f:	0f 86 25 01 00 00    	jbe    c001485a <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1a7>
c0014735:	c1 ee 0c             	shr    esi,0xc
c0014738:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c001473f:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0014743:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001474b:	8b bc 24 48 10 00 00 	mov    edi,DWORD PTR [esp+0x1048]
c0014752:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0014756:	03 bc 24 4c 10 00 00 	add    edi,DWORD PTR [esp+0x104c]
c001475d:	29 ef                	sub    edi,ebp
c001475f:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c0014763:	0f 83 f8 00 00 00    	jae    c0014861 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1ae>
c0014769:	81 ff 00 10 00 00    	cmp    edi,0x1000
c001476f:	76 05                	jbe    c0014776 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xc3>
c0014771:	bf 00 10 00 00       	mov    edi,0x1000
c0014776:	83 ec 0c             	sub    esp,0xc
c0014779:	31 d2                	xor    edx,edx
c001477b:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c0014782:	8b 08                	mov    ecx,DWORD PTR [eax]
c0014784:	8d 44 24 28          	lea    eax,[esp+0x28]
c0014788:	50                   	push   eax
c0014789:	8d 74 24 30          	lea    esi,[esp+0x30]
c001478d:	56                   	push   esi
c001478e:	52                   	push   edx
c001478f:	57                   	push   edi
c0014790:	ff b4 24 60 10 00 00 	push   DWORD PTR [esp+0x1060]
c0014797:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001479a:	83 c4 20             	add    esp,0x20
c001479d:	85 c0                	test   eax,eax
c001479f:	75 06                	jne    c00147a7 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xf4>
c00147a1:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c00147a5:	74 13                	je     c00147ba <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x107>
c00147a7:	83 ec 0c             	sub    esp,0xc
c00147aa:	53                   	push   ebx
c00147ab:	e8 7b 51 ff ff       	call   c000992b <Virt::freeKernelVirtualPages(unsigned long)>
c00147b0:	83 c4 10             	add    esp,0x10
c00147b3:	31 c0                	xor    eax,eax
c00147b5:	e9 7c 01 00 00       	jmp    c0014936 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x283>
c00147ba:	fa                   	cli    
c00147bb:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c00147c1:	e8 f9 35 ff ff       	call   c0007dbf <Phys::allocatePage()>
c00147c6:	6a 07                	push   0x7
c00147c8:	89 c7                	mov    edi,eax
c00147ca:	53                   	push   ebx
c00147cb:	50                   	push   eax
c00147cc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00147d1:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00147d4:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00147da:	e8 41 55 ff ff       	call   c0009d20 <VAS::mapPage(unsigned long, unsigned long, int)>
c00147df:	83 c4 0c             	add    esp,0xc
c00147e2:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c00147e9:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00147ef:	6a 00                	push   0x0
c00147f1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00147f6:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00147f9:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00147ff:	e8 82 53 ff ff       	call   c0009b86 <VAS::mapOtherVASIn(bool, VAS*)>
c0014804:	58                   	pop    eax
c0014805:	5a                   	pop    edx
c0014806:	68 07 0c 00 00       	push   0xc07
c001480b:	55                   	push   ebp
c001480c:	57                   	push   edi
c001480d:	89 df                	mov    edi,ebx
c001480f:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c0014816:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c001481c:	6a 00                	push   0x0
c001481e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014823:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014826:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c001482c:	e8 41 57 ff ff       	call   c0009f72 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c0014831:	b9 00 10 00 00       	mov    ecx,0x1000
c0014836:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0014838:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c001483d:	83 c4 20             	add    esp,0x20
c0014840:	48                   	dec    eax
c0014841:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0014846:	85 c0                	test   eax,eax
c0014848:	75 01                	jne    c001484b <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x198>
c001484a:	fb                   	sti    
c001484b:	81 c5 00 10 00 00    	add    ebp,0x1000
c0014851:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0014855:	e9 f1 fe ff ff       	jmp    c001474b <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x98>
c001485a:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c0014861:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c0014868:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c001486e:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c0014874:	0f 86 ae 00 00 00    	jbe    c0014928 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x275>
c001487a:	fa                   	cli    
c001487b:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c0014881:	c1 ee 0c             	shr    esi,0xc
c0014884:	51                   	push   ecx
c0014885:	31 ff                	xor    edi,edi
c0014887:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c001488e:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0014894:	6a 00                	push   0x0
c0014896:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001489b:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001489e:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00148a4:	e8 dd 52 ff ff       	call   c0009b86 <VAS::mapOtherVASIn(bool, VAS*)>
c00148a9:	83 c4 10             	add    esp,0x10
c00148ac:	e8 0e 35 ff ff       	call   c0007dbf <Phys::allocatePage()>
c00148b1:	47                   	inc    edi
c00148b2:	6a 07                	push   0x7
c00148b4:	53                   	push   ebx
c00148b5:	50                   	push   eax
c00148b6:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00148ba:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00148c0:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c00148c3:	ff b2 12 05 00 00    	push   DWORD PTR [edx+0x512]
c00148c9:	e8 52 54 ff ff       	call   c0009d20 <VAS::mapPage(unsigned long, unsigned long, int)>
c00148ce:	58                   	pop    eax
c00148cf:	5a                   	pop    edx
c00148d0:	68 07 0c 00 00       	push   0xc07
c00148d5:	55                   	push   ebp
c00148d6:	81 c5 00 10 00 00    	add    ebp,0x1000
c00148dc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00148e0:	50                   	push   eax
c00148e1:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c00148e8:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00148ee:	6a 00                	push   0x0
c00148f0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00148f5:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00148f8:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00148fe:	e8 6f 56 ff ff       	call   c0009f72 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c0014903:	83 c4 1c             	add    esp,0x1c
c0014906:	68 00 10 00 00       	push   0x1000
c001490b:	6a 00                	push   0x0
c001490d:	53                   	push   ebx
c001490e:	e8 dd bb fe ff       	call   c00004f0 <memset>
c0014913:	83 c4 10             	add    esp,0x10
c0014916:	39 fe                	cmp    esi,edi
c0014918:	77 92                	ja     c00148ac <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1f9>
c001491a:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c001491f:	48                   	dec    eax
c0014920:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0014925:	75 01                	jne    c0014928 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x275>
c0014927:	fb                   	sti    
c0014928:	83 ec 0c             	sub    esp,0xc
c001492b:	53                   	push   ebx
c001492c:	e8 fa 4f ff ff       	call   c000992b <Virt::freeKernelVirtualPages(unsigned long)>
c0014931:	83 c4 10             	add    esp,0x10
c0014934:	b0 01                	mov    al,0x1
c0014936:	81 c4 2c 10 00 00    	add    esp,0x102c
c001493c:	5b                   	pop    ebx
c001493d:	5e                   	pop    esi
c001493e:	5f                   	pop    edi
c001493f:	5d                   	pop    ebp
c0014940:	c3                   	ret    

c0014941 <Thr::loadProgramIntoMemory(Process*, char const*)>:
c0014941:	55                   	push   ebp
c0014942:	57                   	push   edi
c0014943:	56                   	push   esi
c0014944:	53                   	push   ebx
c0014945:	83 ec 48             	sub    esp,0x48
c0014948:	68 14 01 00 00       	push   0x114
c001494d:	e8 64 31 ff ff       	call   c0007ab6 <malloc>
c0014952:	83 c4 0c             	add    esp,0xc
c0014955:	89 c6                	mov    esi,eax
c0014957:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c001495b:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001495f:	50                   	push   eax
c0014960:	e8 f3 71 ff ff       	call   c000bb58 <File::File(char const*, Process*)>
c0014965:	58                   	pop    eax
c0014966:	5a                   	pop    edx
c0014967:	6a 01                	push   0x1
c0014969:	56                   	push   esi
c001496a:	e8 07 72 ff ff       	call   c000bb76 <File::open(FileOpenMode)>
c001496f:	83 c4 10             	add    esp,0x10
c0014972:	85 c0                	test   eax,eax
c0014974:	0f 85 43 01 00 00    	jne    c0014abd <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c001497a:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0014982:	83 ec 0c             	sub    esp,0xc
c0014985:	6a 34                	push   0x34
c0014987:	e8 2a 31 ff ff       	call   c0007ab6 <malloc>
c001498c:	89 c3                	mov    ebx,eax
c001498e:	58                   	pop    eax
c001498f:	8b 06                	mov    eax,DWORD PTR [esi]
c0014991:	8d 7c 24 38          	lea    edi,[esp+0x38]
c0014995:	57                   	push   edi
c0014996:	53                   	push   ebx
c0014997:	6a 00                	push   0x0
c0014999:	6a 34                	push   0x34
c001499b:	56                   	push   esi
c001499c:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001499f:	83 c4 20             	add    esp,0x20
c00149a2:	85 c0                	test   eax,eax
c00149a4:	0f 85 13 01 00 00    	jne    c0014abd <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c00149aa:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c00149b0:	0f 85 07 01 00 00    	jne    c0014abd <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c00149b6:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00149b9:	85 c0                	test   eax,eax
c00149bb:	0f 84 fc 00 00 00    	je     c0014abd <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c00149c1:	31 d2                	xor    edx,edx
c00149c3:	55                   	push   ebp
c00149c4:	52                   	push   edx
c00149c5:	50                   	push   eax
c00149c6:	56                   	push   esi
c00149c7:	e8 68 72 ff ff       	call   c000bc34 <File::seek(unsigned long long)>
c00149cc:	83 c4 10             	add    esp,0x10
c00149cf:	85 c0                	test   eax,eax
c00149d1:	0f 85 e6 00 00 00    	jne    c0014abd <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c00149d7:	83 ec 0c             	sub    esp,0xc
c00149da:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00149dd:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c00149e1:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00149e5:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c00149e9:	0f af c2             	imul   eax,edx
c00149ec:	50                   	push   eax
c00149ed:	e8 c4 30 ff ff       	call   c0007ab6 <malloc>
c00149f2:	8b 0e                	mov    ecx,DWORD PTR [esi]
c00149f4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00149f8:	89 3c 24             	mov    DWORD PTR [esp],edi
c00149fb:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00149ff:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c0014a03:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c0014a07:	0f af c2             	imul   eax,edx
c0014a0a:	99                   	cdq    
c0014a0b:	52                   	push   edx
c0014a0c:	50                   	push   eax
c0014a0d:	56                   	push   esi
c0014a0e:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014a11:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0014a14:	83 c4 20             	add    esp,0x20
c0014a17:	85 c0                	test   eax,eax
c0014a19:	0f 84 9e 00 00 00    	je     c0014abd <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c0014a1f:	31 d2                	xor    edx,edx
c0014a21:	51                   	push   ecx
c0014a22:	52                   	push   edx
c0014a23:	50                   	push   eax
c0014a24:	56                   	push   esi
c0014a25:	e8 0a 72 ff ff       	call   c000bc34 <File::seek(unsigned long long)>
c0014a2a:	83 c4 10             	add    esp,0x10
c0014a2d:	85 c0                	test   eax,eax
c0014a2f:	0f 85 88 00 00 00    	jne    c0014abd <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c0014a35:	83 ec 0c             	sub    esp,0xc
c0014a38:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c0014a3c:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c0014a40:	31 ed                	xor    ebp,ebp
c0014a42:	0f af c2             	imul   eax,edx
c0014a45:	50                   	push   eax
c0014a46:	e8 6b 30 ff ff       	call   c0007ab6 <malloc>
c0014a4b:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0014a4d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0014a51:	89 3c 24             	mov    DWORD PTR [esp],edi
c0014a54:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014a58:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c0014a5c:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c0014a60:	0f af c2             	imul   eax,edx
c0014a63:	99                   	cdq    
c0014a64:	52                   	push   edx
c0014a65:	50                   	push   eax
c0014a66:	56                   	push   esi
c0014a67:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014a6a:	83 c4 20             	add    esp,0x20
c0014a6d:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0014a75:	0f b7 fd             	movzx  edi,bp
c0014a78:	66 3b 6b 2c          	cmp    bp,WORD PTR [ebx+0x2c]
c0014a7c:	73 7d                	jae    c0014afb <Thr::loadProgramIntoMemory(Process*, char const*)+0x1ba>
c0014a7e:	c1 e7 05             	shl    edi,0x5
c0014a81:	03 7c 24 0c          	add    edi,DWORD PTR [esp+0xc]
c0014a85:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c0014a88:	75 6b                	jne    c0014af5 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b4>
c0014a8a:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0014a8d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014a91:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0014a94:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014a98:	52                   	push   edx
c0014a99:	31 d2                	xor    edx,edx
c0014a9b:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0014a9e:	52                   	push   edx
c0014a9f:	50                   	push   eax
c0014aa0:	56                   	push   esi
c0014aa1:	e8 8e 71 ff ff       	call   c000bc34 <File::seek(unsigned long long)>
c0014aa6:	83 c4 10             	add    esp,0x10
c0014aa9:	85 c0                	test   eax,eax
c0014aab:	74 17                	je     c0014ac4 <Thr::loadProgramIntoMemory(Process*, char const*)+0x183>
c0014aad:	83 ec 0c             	sub    esp,0xc
c0014ab0:	68 d5 26 02 c0       	push   0xc00226d5
c0014ab5:	e8 8b 5e ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0014aba:	83 c4 10             	add    esp,0x10
c0014abd:	31 c0                	xor    eax,eax
c0014abf:	e9 87 00 00 00       	jmp    c0014b4b <Thr::loadProgramIntoMemory(Process*, char const*)+0x20a>
c0014ac4:	83 ec 0c             	sub    esp,0xc
c0014ac7:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c0014aca:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c0014acd:	50                   	push   eax
c0014ace:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0014ad2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014ad6:	56                   	push   esi
c0014ad7:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0014adb:	e8 d3 fb ff ff       	call   c00146b3 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c0014ae0:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0014ae4:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c0014ae8:	83 c4 20             	add    esp,0x20
c0014aeb:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c0014aef:	73 04                	jae    c0014af5 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b4>
c0014af1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0014af5:	45                   	inc    ebp
c0014af6:	e9 7a ff ff ff       	jmp    c0014a75 <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c0014afb:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0014aff:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0014b03:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0014b07:	89 91 0e 05 00 00    	mov    DWORD PTR [ecx+0x50e],edx
c0014b0d:	83 ec 0c             	sub    esp,0xc
c0014b10:	8b 91 12 05 00 00    	mov    edx,DWORD PTR [ecx+0x512]
c0014b16:	25 00 f0 ff ff       	and    eax,0xfffff000
c0014b1b:	05 00 10 00 00       	add    eax,0x1000
c0014b20:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0014b23:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014b27:	e8 9a 2f ff ff       	call   c0007ac6 <free>
c0014b2c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014b2f:	e8 92 2f ff ff       	call   c0007ac6 <free>
c0014b34:	58                   	pop    eax
c0014b35:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014b39:	e8 88 2f ff ff       	call   c0007ac6 <free>
c0014b3e:	89 34 24             	mov    DWORD PTR [esp],esi
c0014b41:	e8 8e 70 ff ff       	call   c000bbd4 <File::close()>
c0014b46:	83 c4 10             	add    esp,0x10
c0014b49:	b0 01                	mov    al,0x1
c0014b4b:	83 c4 3c             	add    esp,0x3c
c0014b4e:	5b                   	pop    ebx
c0014b4f:	5e                   	pop    esi
c0014b50:	5f                   	pop    edi
c0014b51:	5d                   	pop    ebp
c0014b52:	c3                   	ret    

c0014b53 <Thr::runtimeReferenceHelper()>:
c0014b53:	83 ec 18             	sub    esp,0x18
c0014b56:	68 dd 26 02 c0       	push   0xc00226dd
c0014b5b:	e8 e5 5d ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0014b60:	fa                   	cli    
c0014b61:	83 c4 10             	add    esp,0x10
c0014b64:	eb fe                	jmp    c0014b64 <Thr::runtimeReferenceHelper()+0x11>

c0014b66 <Thr::getAddressOfKernelSymbol(char const*)>:
c0014b66:	57                   	push   edi
c0014b67:	56                   	push   esi
c0014b68:	53                   	push   ebx
c0014b69:	31 db                	xor    ebx,ebx
c0014b6b:	39 1d a0 c6 02 c0    	cmp    DWORD PTR ds:0xc002c6a0,ebx
c0014b71:	7e 3c                	jle    c0014baf <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c0014b73:	8b 34 9d 20 c6 02 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffd39e0]
c0014b7a:	31 ff                	xor    edi,edi
c0014b7c:	39 3c 9d 20 c5 02 c0 	cmp    DWORD PTR [ebx*4-0x3ffd3ae0],edi
c0014b83:	7e 27                	jle    c0014bac <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c0014b85:	50                   	push   eax
c0014b86:	50                   	push   eax
c0014b87:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014b8b:	8b 06                	mov    eax,DWORD PTR [esi]
c0014b8d:	03 04 9d a0 c5 02 c0 	add    eax,DWORD PTR [ebx*4-0x3ffd3a60]
c0014b94:	50                   	push   eax
c0014b95:	e8 b6 bb fe ff       	call   c0000750 <strcmp>
c0014b9a:	83 c4 10             	add    esp,0x10
c0014b9d:	85 c0                	test   eax,eax
c0014b9f:	75 05                	jne    c0014ba6 <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c0014ba1:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0014ba4:	eb 0b                	jmp    c0014bb1 <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c0014ba6:	83 c6 10             	add    esi,0x10
c0014ba9:	47                   	inc    edi
c0014baa:	eb d0                	jmp    c0014b7c <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c0014bac:	43                   	inc    ebx
c0014bad:	eb bc                	jmp    c0014b6b <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c0014baf:	31 c0                	xor    eax,eax
c0014bb1:	5b                   	pop    ebx
c0014bb2:	5e                   	pop    esi
c0014bb3:	5f                   	pop    edi
c0014bb4:	c3                   	ret    

c0014bb5 <Thr::loadKernelSymbolTable(char const*)>:
c0014bb5:	55                   	push   ebp
c0014bb6:	57                   	push   edi
c0014bb7:	56                   	push   esi
c0014bb8:	53                   	push   ebx
c0014bb9:	83 ec 68             	sub    esp,0x68
c0014bbc:	8b 35 f0 c6 02 c0    	mov    esi,DWORD PTR ds:0xc002c6f0
c0014bc2:	68 14 01 00 00       	push   0x114
c0014bc7:	e8 ea 2e ff ff       	call   c0007ab6 <malloc>
c0014bcc:	83 c4 0c             	add    esp,0xc
c0014bcf:	89 c3                	mov    ebx,eax
c0014bd1:	56                   	push   esi
c0014bd2:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c0014bd6:	50                   	push   eax
c0014bd7:	e8 7c 6f ff ff       	call   c000bb58 <File::File(char const*, Process*)>
c0014bdc:	5e                   	pop    esi
c0014bdd:	5f                   	pop    edi
c0014bde:	6a 01                	push   0x1
c0014be0:	53                   	push   ebx
c0014be1:	e8 90 6f ff ff       	call   c000bb76 <File::open(FileOpenMode)>
c0014be6:	83 c4 10             	add    esp,0x10
c0014be9:	85 c0                	test   eax,eax
c0014beb:	74 0a                	je     c0014bf7 <Thr::loadKernelSymbolTable(char const*)+0x42>
c0014bed:	83 ec 0c             	sub    esp,0xc
c0014bf0:	68 ff 26 02 c0       	push   0xc00226ff
c0014bf5:	eb 34                	jmp    c0014c2b <Thr::loadKernelSymbolTable(char const*)+0x76>
c0014bf7:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0014bff:	83 ec 0c             	sub    esp,0xc
c0014c02:	6a 34                	push   0x34
c0014c04:	e8 ad 2e ff ff       	call   c0007ab6 <malloc>
c0014c09:	59                   	pop    ecx
c0014c0a:	89 c7                	mov    edi,eax
c0014c0c:	8d 74 24 34          	lea    esi,[esp+0x34]
c0014c10:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014c12:	56                   	push   esi
c0014c13:	57                   	push   edi
c0014c14:	6a 00                	push   0x0
c0014c16:	6a 34                	push   0x34
c0014c18:	53                   	push   ebx
c0014c19:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014c1c:	83 c4 20             	add    esp,0x20
c0014c1f:	85 c0                	test   eax,eax
c0014c21:	74 17                	je     c0014c3a <Thr::loadKernelSymbolTable(char const*)+0x85>
c0014c23:	83 ec 0c             	sub    esp,0xc
c0014c26:	68 16 27 02 c0       	push   0xc0022716
c0014c2b:	e8 fb c9 ff ff       	call   c001162b <KePanic(char const*)>
c0014c30:	83 c4 10             	add    esp,0x10
c0014c33:	31 c0                	xor    eax,eax
c0014c35:	e9 31 02 00 00       	jmp    c0014e6b <Thr::loadKernelSymbolTable(char const*)+0x2b6>
c0014c3a:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c0014c40:	75 e1                	jne    c0014c23 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0014c42:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c0014c45:	85 c0                	test   eax,eax
c0014c47:	74 da                	je     c0014c23 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0014c49:	52                   	push   edx
c0014c4a:	31 d2                	xor    edx,edx
c0014c4c:	52                   	push   edx
c0014c4d:	50                   	push   eax
c0014c4e:	53                   	push   ebx
c0014c4f:	e8 e0 6f ff ff       	call   c000bc34 <File::seek(unsigned long long)>
c0014c54:	83 c4 10             	add    esp,0x10
c0014c57:	85 c0                	test   eax,eax
c0014c59:	75 c8                	jne    c0014c23 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0014c5b:	83 ec 0c             	sub    esp,0xc
c0014c5e:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0014c62:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0014c66:	31 ed                	xor    ebp,ebp
c0014c68:	0f af c2             	imul   eax,edx
c0014c6b:	50                   	push   eax
c0014c6c:	e8 45 2e ff ff       	call   c0007ab6 <malloc>
c0014c71:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0014c73:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014c77:	89 34 24             	mov    DWORD PTR [esp],esi
c0014c7a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014c7e:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0014c82:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0014c86:	0f af c2             	imul   eax,edx
c0014c89:	99                   	cdq    
c0014c8a:	52                   	push   edx
c0014c8b:	50                   	push   eax
c0014c8c:	53                   	push   ebx
c0014c8d:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014c90:	83 c4 20             	add    esp,0x20
c0014c93:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0014c9b:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0014ca3:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0014cab:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0014cb3:	0f b7 f5             	movzx  esi,bp
c0014cb6:	66 3b 6f 30          	cmp    bp,WORD PTR [edi+0x30]
c0014cba:	0f 83 a7 00 00 00    	jae    c0014d67 <Thr::loadKernelSymbolTable(char const*)+0x1b2>
c0014cc0:	6b f6 28             	imul   esi,esi,0x28
c0014cc3:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c0014cc7:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0014cca:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014cce:	50                   	push   eax
c0014ccf:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0014cd3:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c0014cd7:	8b 16                	mov    edx,DWORD PTR [esi]
c0014cd9:	6b c0 28             	imul   eax,eax,0x28
c0014cdc:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c0014ce0:	89 d0                	mov    eax,edx
c0014ce2:	31 d2                	xor    edx,edx
c0014ce4:	52                   	push   edx
c0014ce5:	50                   	push   eax
c0014ce6:	53                   	push   ebx
c0014ce7:	e8 48 6f ff ff       	call   c000bc34 <File::seek(unsigned long long)>
c0014cec:	83 c4 0c             	add    esp,0xc
c0014cef:	6a 20                	push   0x20
c0014cf1:	6a 00                	push   0x0
c0014cf3:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c0014cf7:	52                   	push   edx
c0014cf8:	e8 f3 b7 fe ff       	call   c00004f0 <memset>
c0014cfd:	58                   	pop    eax
c0014cfe:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014d00:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c0014d04:	51                   	push   ecx
c0014d05:	8d 54 24 40          	lea    edx,[esp+0x40]
c0014d09:	52                   	push   edx
c0014d0a:	6a 00                	push   0x0
c0014d0c:	6a 1f                	push   0x1f
c0014d0e:	53                   	push   ebx
c0014d0f:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014d12:	83 c4 18             	add    esp,0x18
c0014d15:	68 2d 27 02 c0       	push   0xc002272d
c0014d1a:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c0014d1e:	52                   	push   edx
c0014d1f:	e8 2c ba fe ff       	call   c0000750 <strcmp>
c0014d24:	83 c4 10             	add    esp,0x10
c0014d27:	85 c0                	test   eax,eax
c0014d29:	75 0f                	jne    c0014d3a <Thr::loadKernelSymbolTable(char const*)+0x185>
c0014d2b:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0014d2e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014d32:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014d36:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0014d3a:	50                   	push   eax
c0014d3b:	50                   	push   eax
c0014d3c:	68 35 27 02 c0       	push   0xc0022735
c0014d41:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c0014d45:	50                   	push   eax
c0014d46:	e8 05 ba fe ff       	call   c0000750 <strcmp>
c0014d4b:	83 c4 10             	add    esp,0x10
c0014d4e:	85 c0                	test   eax,eax
c0014d50:	75 0f                	jne    c0014d61 <Thr::loadKernelSymbolTable(char const*)+0x1ac>
c0014d52:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0014d55:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014d59:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014d5d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0014d61:	45                   	inc    ebp
c0014d62:	e9 4c ff ff ff       	jmp    c0014cb3 <Thr::loadKernelSymbolTable(char const*)+0xfe>
c0014d67:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0014d6c:	75 10                	jne    c0014d7e <Thr::loadKernelSymbolTable(char const*)+0x1c9>
c0014d6e:	83 ec 0c             	sub    esp,0xc
c0014d71:	68 3d 27 02 c0       	push   0xc002273d
c0014d76:	e8 b0 c8 ff ff       	call   c001162b <KePanic(char const*)>
c0014d7b:	83 c4 10             	add    esp,0x10
c0014d7e:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c0014d83:	75 10                	jne    c0014d95 <Thr::loadKernelSymbolTable(char const*)+0x1e0>
c0014d85:	83 ec 0c             	sub    esp,0xc
c0014d88:	68 3d 27 02 c0       	push   0xc002273d
c0014d8d:	e8 99 c8 ff ff       	call   c001162b <KePanic(char const*)>
c0014d92:	83 c4 10             	add    esp,0x10
c0014d95:	31 d2                	xor    edx,edx
c0014d97:	50                   	push   eax
c0014d98:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014d9c:	52                   	push   edx
c0014d9d:	50                   	push   eax
c0014d9e:	53                   	push   ebx
c0014d9f:	e8 90 6e ff ff       	call   c000bc34 <File::seek(unsigned long long)>
c0014da4:	5a                   	pop    edx
c0014da5:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0014da9:	e8 08 2d ff ff       	call   c0007ab6 <malloc>
c0014dae:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0014db2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0014db6:	31 c9                	xor    ecx,ecx
c0014db8:	5e                   	pop    esi
c0014db9:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014dbb:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c0014dbf:	55                   	push   ebp
c0014dc0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014dc4:	51                   	push   ecx
c0014dc5:	52                   	push   edx
c0014dc6:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0014dca:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c0014dce:	53                   	push   ebx
c0014dcf:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014dd2:	83 c4 14             	add    esp,0x14
c0014dd5:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0014dd9:	e8 d8 2c ff ff       	call   c0007ab6 <malloc>
c0014dde:	89 c6                	mov    esi,eax
c0014de0:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014de2:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0014de5:	56                   	push   esi
c0014de6:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0014dea:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0014dee:	51                   	push   ecx
c0014def:	52                   	push   edx
c0014df0:	53                   	push   ebx
c0014df1:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014df4:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0014df8:	8b 15 a0 c6 02 c0    	mov    edx,DWORD PTR ds:0xc002c6a0
c0014dfe:	83 c4 1c             	add    esp,0x1c
c0014e01:	c1 e8 04             	shr    eax,0x4
c0014e04:	89 04 95 20 c5 02 c0 	mov    DWORD PTR [edx*4-0x3ffd3ae0],eax
c0014e0b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014e0f:	31 d2                	xor    edx,edx
c0014e11:	52                   	push   edx
c0014e12:	50                   	push   eax
c0014e13:	53                   	push   ebx
c0014e14:	e8 1b 6e ff ff       	call   c000bc34 <File::seek(unsigned long long)>
c0014e19:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0014e1b:	31 d2                	xor    edx,edx
c0014e1d:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0014e20:	56                   	push   esi
c0014e21:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0014e25:	52                   	push   edx
c0014e26:	50                   	push   eax
c0014e27:	53                   	push   ebx
c0014e28:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014e2b:	83 c4 14             	add    esp,0x14
c0014e2e:	53                   	push   ebx
c0014e2f:	e8 a0 6d ff ff       	call   c000bbd4 <File::close()>
c0014e34:	5d                   	pop    ebp
c0014e35:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0014e39:	e8 88 2c ff ff       	call   c0007ac6 <free>
c0014e3e:	89 3c 24             	mov    DWORD PTR [esp],edi
c0014e41:	e8 80 2c ff ff       	call   c0007ac6 <free>
c0014e46:	a1 a0 c6 02 c0       	mov    eax,ds:0xc002c6a0
c0014e4b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0014e4f:	8d 50 01             	lea    edx,[eax+0x1]
c0014e52:	89 0c 85 20 c6 02 c0 	mov    DWORD PTR [eax*4-0x3ffd39e0],ecx
c0014e59:	89 34 85 a0 c5 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3a60],esi
c0014e60:	89 15 a0 c6 02 c0    	mov    DWORD PTR ds:0xc002c6a0,edx
c0014e66:	83 c4 10             	add    esp,0x10
c0014e69:	b0 01                	mov    al,0x1
c0014e6b:	83 c4 5c             	add    esp,0x5c
c0014e6e:	5b                   	pop    ebx
c0014e6f:	5e                   	pop    esi
c0014e70:	5f                   	pop    edi
c0014e71:	5d                   	pop    ebp
c0014e72:	c3                   	ret    

c0014e73 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c0014e73:	55                   	push   ebp
c0014e74:	57                   	push   edi
c0014e75:	56                   	push   esi
c0014e76:	53                   	push   ebx
c0014e77:	81 ec 68 03 00 00    	sub    esp,0x368
c0014e7d:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c0014e84:	8b 1d f0 c6 02 c0    	mov    ebx,DWORD PTR ds:0xc002c6f0
c0014e8a:	88 44 24 47          	mov    BYTE PTR [esp+0x47],al
c0014e8e:	68 14 01 00 00       	push   0x114
c0014e93:	e8 1e 2c ff ff       	call   c0007ab6 <malloc>
c0014e98:	83 c4 0c             	add    esp,0xc
c0014e9b:	89 c5                	mov    ebp,eax
c0014e9d:	53                   	push   ebx
c0014e9e:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c0014ea5:	50                   	push   eax
c0014ea6:	e8 ad 6c ff ff       	call   c000bb58 <File::File(char const*, Process*)>
c0014eab:	5e                   	pop    esi
c0014eac:	5f                   	pop    edi
c0014ead:	6a 01                	push   0x1
c0014eaf:	55                   	push   ebp
c0014eb0:	e8 c1 6c ff ff       	call   c000bb76 <File::open(FileOpenMode)>
c0014eb5:	83 c4 10             	add    esp,0x10
c0014eb8:	85 c0                	test   eax,eax
c0014eba:	0f 85 aa 06 00 00    	jne    c001556a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c0014ec0:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0014ec8:	83 ec 0c             	sub    esp,0xc
c0014ecb:	6a 34                	push   0x34
c0014ecd:	e8 e4 2b ff ff       	call   c0007ab6 <malloc>
c0014ed2:	5b                   	pop    ebx
c0014ed3:	89 c7                	mov    edi,eax
c0014ed5:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c0014ed9:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0014edc:	53                   	push   ebx
c0014edd:	57                   	push   edi
c0014ede:	6a 00                	push   0x0
c0014ee0:	6a 34                	push   0x34
c0014ee2:	55                   	push   ebp
c0014ee3:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014ee6:	83 c4 20             	add    esp,0x20
c0014ee9:	85 c0                	test   eax,eax
c0014eeb:	0f 85 79 06 00 00    	jne    c001556a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c0014ef1:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c0014ef7:	0f 85 6d 06 00 00    	jne    c001556a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c0014efd:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c0014f00:	85 c0                	test   eax,eax
c0014f02:	0f 84 62 06 00 00    	je     c001556a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c0014f08:	31 d2                	xor    edx,edx
c0014f0a:	51                   	push   ecx
c0014f0b:	52                   	push   edx
c0014f0c:	50                   	push   eax
c0014f0d:	55                   	push   ebp
c0014f0e:	e8 21 6d ff ff       	call   c000bc34 <File::seek(unsigned long long)>
c0014f13:	83 c4 10             	add    esp,0x10
c0014f16:	85 c0                	test   eax,eax
c0014f18:	0f 85 4c 06 00 00    	jne    c001556a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c0014f1e:	83 ec 0c             	sub    esp,0xc
c0014f21:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
c0014f24:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0014f28:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0014f2c:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0014f30:	0f af c2             	imul   eax,edx
c0014f33:	50                   	push   eax
c0014f34:	e8 7d 2b ff ff       	call   c0007ab6 <malloc>
c0014f39:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0014f3c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014f40:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014f43:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014f47:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0014f4b:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0014f4f:	0f af c2             	imul   eax,edx
c0014f52:	99                   	cdq    
c0014f53:	52                   	push   edx
c0014f54:	50                   	push   eax
c0014f55:	55                   	push   ebp
c0014f56:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014f59:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c0014f5c:	83 c4 20             	add    esp,0x20
c0014f5f:	85 c0                	test   eax,eax
c0014f61:	0f 84 03 06 00 00    	je     c001556a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c0014f67:	52                   	push   edx
c0014f68:	31 d2                	xor    edx,edx
c0014f6a:	52                   	push   edx
c0014f6b:	50                   	push   eax
c0014f6c:	55                   	push   ebp
c0014f6d:	e8 c2 6c ff ff       	call   c000bc34 <File::seek(unsigned long long)>
c0014f72:	83 c4 10             	add    esp,0x10
c0014f75:	85 c0                	test   eax,eax
c0014f77:	0f 85 ed 05 00 00    	jne    c001556a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c0014f7d:	83 ec 0c             	sub    esp,0xc
c0014f80:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c0014f84:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c0014f88:	31 f6                	xor    esi,esi
c0014f8a:	0f af c2             	imul   eax,edx
c0014f8d:	50                   	push   eax
c0014f8e:	e8 23 2b ff ff       	call   c0007ab6 <malloc>
c0014f93:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0014f96:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0014f9a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014f9d:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0014fa1:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c0014fa5:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c0014fa9:	0f af c2             	imul   eax,edx
c0014fac:	99                   	cdq    
c0014fad:	52                   	push   edx
c0014fae:	50                   	push   eax
c0014faf:	55                   	push   ebp
c0014fb0:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014fb3:	83 c4 20             	add    esp,0x20
c0014fb6:	0f b7 de             	movzx  ebx,si
c0014fb9:	66 3b 77 2c          	cmp    si,WORD PTR [edi+0x2c]
c0014fbd:	0f 83 87 00 00 00    	jae    c001504a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d7>
c0014fc3:	c1 e3 05             	shl    ebx,0x5
c0014fc6:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c0014fca:	83 3b 01             	cmp    DWORD PTR [ebx],0x1
c0014fcd:	75 75                	jne    c0015044 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d1>
c0014fcf:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0014fd2:	31 d2                	xor    edx,edx
c0014fd4:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014fd8:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0014fdb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0014fdf:	50                   	push   eax
c0014fe0:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0014fe3:	52                   	push   edx
c0014fe4:	50                   	push   eax
c0014fe5:	55                   	push   ebp
c0014fe6:	e8 49 6c ff ff       	call   c000bc34 <File::seek(unsigned long long)>
c0014feb:	83 c4 10             	add    esp,0x10
c0014fee:	85 c0                	test   eax,eax
c0014ff0:	0f 85 74 05 00 00    	jne    c001556a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c0014ff6:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c0014ffd:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0015000:	2b 44 24 24          	sub    eax,DWORD PTR [esp+0x24]
c0015004:	31 d2                	xor    edx,edx
c0015006:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c001500a:	83 ec 0c             	sub    esp,0xc
c001500d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0015011:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0015018:	50                   	push   eax
c0015019:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001501d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015021:	52                   	push   edx
c0015022:	50                   	push   eax
c0015023:	55                   	push   ebp
c0015024:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0015027:	83 c4 1c             	add    esp,0x1c
c001502a:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001502d:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c0015030:	50                   	push   eax
c0015031:	6a 00                	push   0x0
c0015033:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015037:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c001503b:	50                   	push   eax
c001503c:	e8 af b4 fe ff       	call   c00004f0 <memset>
c0015041:	83 c4 10             	add    esp,0x10
c0015044:	46                   	inc    esi
c0015045:	e9 6c ff ff ff       	jmp    c0014fb6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x143>
c001504a:	53                   	push   ebx
c001504b:	31 db                	xor    ebx,ebx
c001504d:	68 00 01 00 00       	push   0x100
c0015052:	6a 00                	push   0x0
c0015054:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c0015058:	50                   	push   eax
c0015059:	e8 92 b4 fe ff       	call   c00004f0 <memset>
c001505e:	83 c4 0c             	add    esp,0xc
c0015061:	68 00 01 00 00       	push   0x100
c0015066:	6a 00                	push   0x0
c0015068:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c001506f:	50                   	push   eax
c0015070:	e8 7b b4 fe ff       	call   c00004f0 <memset>
c0015075:	83 c4 10             	add    esp,0x10
c0015078:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0015080:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0015088:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0015090:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0015098:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00150a0:	0f b7 f3             	movzx  esi,bx
c00150a3:	66 3b 5f 30          	cmp    bx,WORD PTR [edi+0x30]
c00150a7:	0f 83 2d 01 00 00    	jae    c00151da <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x367>
c00150ad:	6b f6 28             	imul   esi,esi,0x28
c00150b0:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c00150b4:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c00150b7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00150bb:	52                   	push   edx
c00150bc:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00150c0:	0f b7 57 32          	movzx  edx,WORD PTR [edi+0x32]
c00150c4:	8b 06                	mov    eax,DWORD PTR [esi]
c00150c6:	6b d2 28             	imul   edx,edx,0x28
c00150c9:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c00150cd:	31 d2                	xor    edx,edx
c00150cf:	52                   	push   edx
c00150d0:	50                   	push   eax
c00150d1:	55                   	push   ebp
c00150d2:	e8 5d 6b ff ff       	call   c000bc34 <File::seek(unsigned long long)>
c00150d7:	83 c4 0c             	add    esp,0xc
c00150da:	6a 20                	push   0x20
c00150dc:	6a 00                	push   0x0
c00150de:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c00150e5:	51                   	push   ecx
c00150e6:	e8 05 b4 fe ff       	call   c00004f0 <memset>
c00150eb:	59                   	pop    ecx
c00150ec:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00150ef:	8d 54 24 58          	lea    edx,[esp+0x58]
c00150f3:	52                   	push   edx
c00150f4:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c00150fb:	51                   	push   ecx
c00150fc:	6a 00                	push   0x0
c00150fe:	6a 1f                	push   0x1f
c0015100:	55                   	push   ebp
c0015101:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0015104:	83 c4 1c             	add    esp,0x1c
c0015107:	6a 09                	push   0x9
c0015109:	68 57 27 02 c0       	push   0xc0022757
c001510e:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0015115:	51                   	push   ecx
c0015116:	e8 65 b2 fe ff       	call   c0000380 <memcmp>
c001511b:	83 c4 10             	add    esp,0x10
c001511e:	85 c0                	test   eax,eax
c0015120:	75 21                	jne    c0015143 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2d0>
c0015122:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015126:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001512a:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c001512e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0015132:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0015135:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c001513c:	89 d0                	mov    eax,edx
c001513e:	40                   	inc    eax
c001513f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0015143:	50                   	push   eax
c0015144:	6a 09                	push   0x9
c0015146:	68 61 27 02 c0       	push   0xc0022761
c001514b:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0015152:	50                   	push   eax
c0015153:	e8 28 b2 fe ff       	call   c0000380 <memcmp>
c0015158:	83 c4 10             	add    esp,0x10
c001515b:	85 c0                	test   eax,eax
c001515d:	75 21                	jne    c0015180 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x30d>
c001515f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015163:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0015167:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001516b:	89 4c 84 50          	mov    DWORD PTR [esp+eax*4+0x50],ecx
c001516f:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0015172:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c0015179:	89 d0                	mov    eax,edx
c001517b:	40                   	inc    eax
c001517c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0015180:	50                   	push   eax
c0015181:	50                   	push   eax
c0015182:	68 2d 27 02 c0       	push   0xc002272d
c0015187:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001518e:	50                   	push   eax
c001518f:	e8 bc b5 fe ff       	call   c0000750 <strcmp>
c0015194:	83 c4 10             	add    esp,0x10
c0015197:	85 c0                	test   eax,eax
c0015199:	75 0f                	jne    c00151aa <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x337>
c001519b:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001519e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00151a2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00151a6:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00151aa:	50                   	push   eax
c00151ab:	50                   	push   eax
c00151ac:	68 35 27 02 c0       	push   0xc0022735
c00151b1:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00151b8:	50                   	push   eax
c00151b9:	e8 92 b5 fe ff       	call   c0000750 <strcmp>
c00151be:	83 c4 10             	add    esp,0x10
c00151c1:	85 c0                	test   eax,eax
c00151c3:	75 0f                	jne    c00151d4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x361>
c00151c5:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00151c8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00151cc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00151d0:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00151d4:	43                   	inc    ebx
c00151d5:	e9 c6 fe ff ff       	jmp    c00150a0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x22d>
c00151da:	31 d2                	xor    edx,edx
c00151dc:	50                   	push   eax
c00151dd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00151e1:	52                   	push   edx
c00151e2:	50                   	push   eax
c00151e3:	55                   	push   ebp
c00151e4:	e8 4b 6a ff ff       	call   c000bc34 <File::seek(unsigned long long)>
c00151e9:	58                   	pop    eax
c00151ea:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00151ee:	e8 c3 28 ff ff       	call   c0007ab6 <malloc>
c00151f3:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c00151f6:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c00151fa:	31 d2                	xor    edx,edx
c00151fc:	58                   	pop    eax
c00151fd:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c0015201:	53                   	push   ebx
c0015202:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0015206:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001520a:	52                   	push   edx
c001520b:	50                   	push   eax
c001520c:	55                   	push   ebp
c001520d:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0015210:	83 c4 14             	add    esp,0x14
c0015213:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0015217:	e8 9a 28 ff ff       	call   c0007ab6 <malloc>
c001521c:	31 d2                	xor    edx,edx
c001521e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0015222:	83 c4 0c             	add    esp,0xc
c0015225:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0015229:	52                   	push   edx
c001522a:	50                   	push   eax
c001522b:	55                   	push   ebp
c001522c:	e8 03 6a ff ff       	call   c000bc34 <File::seek(unsigned long long)>
c0015231:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0015234:	31 d2                	xor    edx,edx
c0015236:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015239:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001523d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0015241:	52                   	push   edx
c0015242:	50                   	push   eax
c0015243:	55                   	push   ebp
c0015244:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0015247:	83 c4 20             	add    esp,0x20
c001524a:	0f b6 44 24 3b       	movzx  eax,BYTE PTR [esp+0x3b]
c001524f:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0015257:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001525b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001525f:	39 5c 24 04          	cmp    DWORD PTR [esp+0x4],ebx
c0015263:	0f 84 05 03 00 00    	je     c001556e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6fb>
c0015269:	8b 84 9c 50 01 00 00 	mov    eax,DWORD PTR [esp+ebx*4+0x150]
c0015270:	31 d2                	xor    edx,edx
c0015272:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0015276:	c1 e8 03             	shr    eax,0x3
c0015279:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c001527d:	51                   	push   ecx
c001527e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0015282:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c0015286:	52                   	push   edx
c0015287:	50                   	push   eax
c0015288:	55                   	push   ebp
c0015289:	e8 a6 69 ff ff       	call   c000bc34 <File::seek(unsigned long long)>
c001528e:	5b                   	pop    ebx
c001528f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015293:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c001529a:	e8 17 28 ff ff       	call   c0007ab6 <malloc>
c001529f:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c00152a2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00152a6:	31 d2                	xor    edx,edx
c00152a8:	5e                   	pop    esi
c00152a9:	8d 44 24 58          	lea    eax,[esp+0x58]
c00152ad:	50                   	push   eax
c00152ae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00152b2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00152b6:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c00152bd:	52                   	push   edx
c00152be:	50                   	push   eax
c00152bf:	55                   	push   ebp
c00152c0:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00152c3:	83 c4 20             	add    esp,0x20
c00152c6:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c00152ce:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c00152d2:	39 5c 24 20          	cmp    DWORD PTR [esp+0x20],ebx
c00152d6:	0f 8d 76 02 00 00    	jge    c0015552 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6df>
c00152dc:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00152e0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00152e4:	c6 44 24 3a 00       	mov    BYTE PTR [esp+0x3a],0x0
c00152e9:	8b 04 c8             	mov    eax,DWORD PTR [eax+ecx*8]
c00152ec:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00152f0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00152f4:	8b 44 c8 04          	mov    eax,DWORD PTR [eax+ecx*8+0x4]
c00152f8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00152fc:	c1 e8 08             	shr    eax,0x8
c00152ff:	89 c6                	mov    esi,eax
c0015301:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0015305:	c1 e6 04             	shl    esi,0x4
c0015308:	03 74 24 34          	add    esi,DWORD PTR [esp+0x34]
c001530c:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c001530f:	85 db                	test   ebx,ebx
c0015311:	0f 85 b3 00 00 00    	jne    c00153ca <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x557>
c0015317:	83 ec 0c             	sub    esp,0xc
c001531a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001531e:	03 06                	add    eax,DWORD PTR [esi]
c0015320:	50                   	push   eax
c0015321:	e8 40 f8 ff ff       	call   c0014b66 <Thr::getAddressOfKernelSymbol(char const*)>
c0015326:	83 c4 10             	add    esp,0x10
c0015329:	89 c3                	mov    ebx,eax
c001532b:	c6 44 24 3a 01       	mov    BYTE PTR [esp+0x3a],0x1
c0015330:	85 c0                	test   eax,eax
c0015332:	0f 85 92 00 00 00    	jne    c00153ca <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x557>
c0015338:	83 ec 0c             	sub    esp,0xc
c001533b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001533f:	03 06                	add    eax,DWORD PTR [esi]
c0015341:	50                   	push   eax
c0015342:	e8 d1 c4 ff ff       	call   c0011818 <KeResolveCompatibilitySymbol(char*)>
c0015347:	83 c4 10             	add    esp,0x10
c001534a:	89 c3                	mov    ebx,eax
c001534c:	85 c0                	test   eax,eax
c001534e:	75 7a                	jne    c00153ca <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x557>
c0015350:	51                   	push   ecx
c0015351:	51                   	push   ecx
c0015352:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0015356:	03 06                	add    eax,DWORD PTR [esi]
c0015358:	50                   	push   eax
c0015359:	68 6b 27 02 c0       	push   0xc002276b
c001535e:	e8 e2 55 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0015363:	58                   	pop    eax
c0015364:	5a                   	pop    edx
c0015365:	68 85 27 02 c0       	push   0xc0022785
c001536a:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0015371:	50                   	push   eax
c0015372:	e8 c9 b2 fe ff       	call   c0000640 <strcpy>
c0015377:	59                   	pop    ecx
c0015378:	58                   	pop    eax
c0015379:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001537d:	03 06                	add    eax,DWORD PTR [esi]
c001537f:	50                   	push   eax
c0015380:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0015387:	50                   	push   eax
c0015388:	e8 b3 b4 fe ff       	call   c0000840 <strcat>
c001538d:	58                   	pop    eax
c001538e:	5a                   	pop    edx
c001538f:	68 1b 28 02 c0       	push   0xc002281b
c0015394:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001539b:	50                   	push   eax
c001539c:	e8 9f b4 fe ff       	call   c0000840 <strcat>
c00153a1:	83 c4 10             	add    esp,0x10
c00153a4:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c00153a9:	0f 84 5d 01 00 00    	je     c001550c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x699>
c00153af:	83 ec 0c             	sub    esp,0xc
c00153b2:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00153b9:	50                   	push   eax
c00153ba:	e8 6c c2 ff ff       	call   c001162b <KePanic(char const*)>
c00153bf:	83 c4 10             	add    esp,0x10
c00153c2:	8a 44 24 3b          	mov    al,BYTE PTR [esp+0x3b]
c00153c6:	88 44 24 3a          	mov    BYTE PTR [esp+0x3a],al
c00153ca:	0f b6 44 24 18       	movzx  eax,BYTE PTR [esp+0x18]
c00153cf:	83 f8 01             	cmp    eax,0x1
c00153d2:	0f 85 8f 00 00 00    	jne    c0015467 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5f4>
c00153d8:	8b 8c 24 74 03 00 00 	mov    ecx,DWORD PTR [esp+0x374]
c00153df:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c00153e3:	2b 4c 24 24          	sub    ecx,DWORD PTR [esp+0x24]
c00153e7:	01 ce                	add    esi,ecx
c00153e9:	81 7c 24 18 01 04 00 00 	cmp    DWORD PTR [esp+0x18],0x401
c00153f1:	0f 94 c0             	sete   al
c00153f4:	81 7c 24 18 01 01 00 00 	cmp    DWORD PTR [esp+0x18],0x101
c00153fc:	0f 94 c2             	sete   dl
c00153ff:	09 c2                	or     edx,eax
c0015401:	8b 06                	mov    eax,DWORD PTR [esi]
c0015403:	80 7c 24 3a 00       	cmp    BYTE PTR [esp+0x3a],0x0
c0015408:	0f b6 d2             	movzx  edx,dl
c001540b:	74 41                	je     c001544e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5db>
c001540d:	8d 0c 03             	lea    ecx,[ebx+eax*1]
c0015410:	85 d2                	test   edx,edx
c0015412:	75 15                	jne    c0015429 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5b6>
c0015414:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0015418:	66 83 f8 0c          	cmp    ax,0xc
c001541c:	76 05                	jbe    c0015423 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5b0>
c001541e:	b8 0c 00 00 00       	mov    eax,0xc
c0015423:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c0015427:	76 37                	jbe    c0015460 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ed>
c0015429:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c001542d:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0015432:	0f 84 d4 00 00 00    	je     c001550c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x699>
c0015438:	83 ec 0c             	sub    esp,0xc
c001543b:	68 9c 27 02 c0       	push   0xc002279c
c0015440:	e8 e6 c1 ff ff       	call   c001162b <KePanic(char const*)>
c0015445:	83 c4 10             	add    esp,0x10
c0015448:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001544c:	eb 12                	jmp    c0015460 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ed>
c001544e:	01 c1                	add    ecx,eax
c0015450:	85 d2                	test   edx,edx
c0015452:	75 0c                	jne    c0015460 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ed>
c0015454:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0015458:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c001545c:	77 02                	ja     c0015460 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ed>
c001545e:	01 d9                	add    ecx,ebx
c0015460:	89 0e                	mov    DWORD PTR [esi],ecx
c0015462:	e9 e2 00 00 00       	jmp    c0015549 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d6>
c0015467:	83 f8 02             	cmp    eax,0x2
c001546a:	75 77                	jne    c00154e3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x670>
c001546c:	8b b4 24 74 03 00 00 	mov    esi,DWORD PTR [esp+0x374]
c0015473:	2b 74 24 24          	sub    esi,DWORD PTR [esp+0x24]
c0015477:	03 74 24 28          	add    esi,DWORD PTR [esp+0x28]
c001547b:	81 7c 24 18 01 04 00 00 	cmp    DWORD PTR [esp+0x18],0x401
c0015483:	74 21                	je     c00154a6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x633>
c0015485:	81 7c 24 18 01 01 00 00 	cmp    DWORD PTR [esp+0x18],0x101
c001548d:	74 17                	je     c00154a6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x633>
c001548f:	0f b7 57 30          	movzx  edx,WORD PTR [edi+0x30]
c0015493:	b8 0a 00 00 00       	mov    eax,0xa
c0015498:	83 fa 0e             	cmp    edx,0xe
c001549b:	77 03                	ja     c00154a0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x62d>
c001549d:	8d 42 fc             	lea    eax,[edx-0x4]
c00154a0:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c00154a4:	76 17                	jbe    c00154bd <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x64a>
c00154a6:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c00154ab:	74 5f                	je     c001550c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x699>
c00154ad:	83 ec 0c             	sub    esp,0xc
c00154b0:	68 b8 27 02 c0       	push   0xc00227b8
c00154b5:	e8 71 c1 ff ff       	call   c001162b <KePanic(char const*)>
c00154ba:	83 c4 10             	add    esp,0x10
c00154bd:	8b 06                	mov    eax,DWORD PTR [esi]
c00154bf:	80 7c 24 3a 00       	cmp    BYTE PTR [esp+0x3a],0x0
c00154c4:	74 13                	je     c00154d9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x666>
c00154c6:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00154ca:	2b 94 24 74 03 00 00 	sub    edx,DWORD PTR [esp+0x374]
c00154d1:	2b 54 24 28          	sub    edx,DWORD PTR [esp+0x28]
c00154d5:	01 d0                	add    eax,edx
c00154d7:	eb 04                	jmp    c00154dd <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x66a>
c00154d9:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c00154dd:	01 c3                	add    ebx,eax
c00154df:	89 1e                	mov    DWORD PTR [esi],ebx
c00154e1:	eb 66                	jmp    c0015549 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d6>
c00154e3:	52                   	push   edx
c00154e4:	52                   	push   edx
c00154e5:	50                   	push   eax
c00154e6:	68 d4 27 02 c0       	push   0xc00227d4
c00154eb:	e8 55 54 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c00154f0:	83 c4 10             	add    esp,0x10
c00154f3:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c00154f8:	74 12                	je     c001550c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x699>
c00154fa:	83 ec 0c             	sub    esp,0xc
c00154fd:	68 df 27 02 c0       	push   0xc00227df
c0015502:	e8 24 c1 ff ff       	call   c001162b <KePanic(char const*)>
c0015507:	83 c4 10             	add    esp,0x10
c001550a:	eb 3d                	jmp    c0015549 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d6>
c001550c:	83 ec 0c             	sub    esp,0xc
c001550f:	55                   	push   ebp
c0015510:	e8 bf 66 ff ff       	call   c000bbd4 <File::close()>
c0015515:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0015518:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001551b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001551e:	59                   	pop    ecx
c001551f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0015523:	e8 9e 25 ff ff       	call   c0007ac6 <free>
c0015528:	5b                   	pop    ebx
c0015529:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001552d:	e8 94 25 ff ff       	call   c0007ac6 <free>
c0015532:	89 3c 24             	mov    DWORD PTR [esp],edi
c0015535:	e8 8c 25 ff ff       	call   c0007ac6 <free>
c001553a:	5e                   	pop    esi
c001553b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001553f:	e8 82 25 ff ff       	call   c0007ac6 <free>
c0015544:	83 c4 10             	add    esp,0x10
c0015547:	eb 21                	jmp    c001556a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c0015549:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c001554d:	e9 7c fd ff ff       	jmp    c00152ce <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x45b>
c0015552:	83 ec 0c             	sub    esp,0xc
c0015555:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0015559:	e8 68 25 ff ff       	call   c0007ac6 <free>
c001555e:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c0015562:	83 c4 10             	add    esp,0x10
c0015565:	e9 f1 fc ff ff       	jmp    c001525b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3e8>
c001556a:	31 c0                	xor    eax,eax
c001556c:	eb 33                	jmp    c00155a1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x72e>
c001556e:	83 ec 0c             	sub    esp,0xc
c0015571:	55                   	push   ebp
c0015572:	e8 5d 66 ff ff       	call   c000bbd4 <File::close()>
c0015577:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001557a:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001557d:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015580:	58                   	pop    eax
c0015581:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0015585:	e8 3c 25 ff ff       	call   c0007ac6 <free>
c001558a:	89 3c 24             	mov    DWORD PTR [esp],edi
c001558d:	e8 34 25 ff ff       	call   c0007ac6 <free>
c0015592:	5a                   	pop    edx
c0015593:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015597:	e8 2a 25 ff ff       	call   c0007ac6 <free>
c001559c:	83 c4 10             	add    esp,0x10
c001559f:	b0 01                	mov    al,0x1
c00155a1:	81 c4 5c 03 00 00    	add    esp,0x35c
c00155a7:	5b                   	pop    ebx
c00155a8:	5e                   	pop    esi
c00155a9:	5f                   	pop    edi
c00155aa:	5d                   	pop    ebp
c00155ab:	c3                   	ret    

c00155ac <Thr::getDriverBaseFromAddress(unsigned long)>:
c00155ac:	56                   	push   esi
c00155ad:	31 d2                	xor    edx,edx
c00155af:	53                   	push   ebx
c00155b0:	8b 1d 00 bf 02 c0    	mov    ebx,DWORD PTR ds:0xc002bf00
c00155b6:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00155ba:	39 d3                	cmp    ebx,edx
c00155bc:	7e 1b                	jle    c00155d9 <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c00155be:	8b 04 95 20 c1 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd3ee0]
c00155c5:	39 c8                	cmp    eax,ecx
c00155c7:	77 0d                	ja     c00155d6 <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c00155c9:	8b 34 95 20 bf 02 c0 	mov    esi,DWORD PTR [edx*4-0x3ffd40e0]
c00155d0:	01 c6                	add    esi,eax
c00155d2:	39 ce                	cmp    esi,ecx
c00155d4:	77 05                	ja     c00155db <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c00155d6:	42                   	inc    edx
c00155d7:	eb e1                	jmp    c00155ba <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c00155d9:	31 c0                	xor    eax,eax
c00155db:	5b                   	pop    ebx
c00155dc:	5e                   	pop    esi
c00155dd:	c3                   	ret    

c00155de <Thr::getDriverNameFromAddress(unsigned long)>:
c00155de:	53                   	push   ebx
c00155df:	31 c0                	xor    eax,eax
c00155e1:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00155e5:	8b 1d 00 bf 02 c0    	mov    ebx,DWORD PTR ds:0xc002bf00
c00155eb:	39 c3                	cmp    ebx,eax
c00155ed:	7e 22                	jle    c0015611 <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c00155ef:	8b 14 85 20 c1 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd3ee0]
c00155f6:	39 ca                	cmp    edx,ecx
c00155f8:	77 14                	ja     c001560e <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c00155fa:	03 14 85 20 bf 02 c0 	add    edx,DWORD PTR [eax*4-0x3ffd40e0]
c0015601:	39 ca                	cmp    edx,ecx
c0015603:	76 09                	jbe    c001560e <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c0015605:	8b 04 85 20 c3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3ce0]
c001560c:	eb 05                	jmp    c0015613 <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c001560e:	40                   	inc    eax
c001560f:	eb da                	jmp    c00155eb <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c0015611:	31 c0                	xor    eax,eax
c0015613:	5b                   	pop    ebx
c0015614:	c3                   	ret    

c0015615 <Thr::getDriverOffsetFromAddress(unsigned long)>:
c0015615:	53                   	push   ebx
c0015616:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001561a:	53                   	push   ebx
c001561b:	e8 8c ff ff ff       	call   c00155ac <Thr::getDriverBaseFromAddress(unsigned long)>
c0015620:	5a                   	pop    edx
c0015621:	31 d2                	xor    edx,edx
c0015623:	85 c0                	test   eax,eax
c0015625:	74 04                	je     c001562b <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c0015627:	89 da                	mov    edx,ebx
c0015629:	29 c2                	sub    edx,eax
c001562b:	89 d0                	mov    eax,edx
c001562d:	5b                   	pop    ebx
c001562e:	c3                   	ret    

c001562f <Thr::loadDLL(char const*, bool)>:
c001562f:	55                   	push   ebp
c0015630:	57                   	push   edi
c0015631:	56                   	push   esi
c0015632:	53                   	push   ebx
c0015633:	81 ec 34 01 00 00    	sub    esp,0x134
c0015639:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c0015640:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c0015647:	56                   	push   esi
c0015648:	68 f7 27 02 c0       	push   0xc00227f7
c001564d:	e8 f3 52 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0015652:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0015659:	e8 58 24 ff ff       	call   c0007ab6 <malloc>
c001565e:	83 c4 0c             	add    esp,0xc
c0015661:	89 c3                	mov    ebx,eax
c0015663:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c0015669:	56                   	push   esi
c001566a:	50                   	push   eax
c001566b:	e8 e8 64 ff ff       	call   c000bb58 <File::File(char const*, Process*)>
c0015670:	83 c4 10             	add    esp,0x10
c0015673:	85 db                	test   ebx,ebx
c0015675:	75 3c                	jne    c00156b3 <Thr::loadDLL(char const*, bool)+0x84>
c0015677:	89 f8                	mov    eax,edi
c0015679:	84 c0                	test   al,al
c001567b:	0f 84 d2 01 00 00    	je     c0015853 <Thr::loadDLL(char const*, bool)+0x224>
c0015681:	55                   	push   ebp
c0015682:	55                   	push   ebp
c0015683:	68 08 28 02 c0       	push   0xc0022808
c0015688:	8d 6c 24 2c          	lea    ebp,[esp+0x2c]
c001568c:	55                   	push   ebp
c001568d:	e8 ae af fe ff       	call   c0000640 <strcpy>
c0015692:	58                   	pop    eax
c0015693:	5a                   	pop    edx
c0015694:	56                   	push   esi
c0015695:	55                   	push   ebp
c0015696:	e8 a5 b1 fe ff       	call   c0000840 <strcat>
c001569b:	59                   	pop    ecx
c001569c:	58                   	pop    eax
c001569d:	68 1b 28 02 c0       	push   0xc002281b
c00156a2:	55                   	push   ebp
c00156a3:	e8 98 b1 fe ff       	call   c0000840 <strcat>
c00156a8:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00156ab:	e8 7b bf ff ff       	call   c001162b <KePanic(char const*)>
c00156b0:	83 c4 10             	add    esp,0x10
c00156b3:	51                   	push   ecx
c00156b4:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c00156b8:	50                   	push   eax
c00156b9:	8d 44 24 20          	lea    eax,[esp+0x20]
c00156bd:	50                   	push   eax
c00156be:	53                   	push   ebx
c00156bf:	e8 b4 67 ff ff       	call   c000be78 <File::stat(unsigned long long*, bool*)>
c00156c4:	83 c4 10             	add    esp,0x10
c00156c7:	85 db                	test   ebx,ebx
c00156c9:	74 0c                	je     c00156d7 <Thr::loadDLL(char const*, bool)+0xa8>
c00156cb:	83 ec 0c             	sub    esp,0xc
c00156ce:	8b 03                	mov    eax,DWORD PTR [ebx]
c00156d0:	53                   	push   ebx
c00156d1:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00156d4:	83 c4 10             	add    esp,0x10
c00156d7:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c00156dc:	75 0a                	jne    c00156e8 <Thr::loadDLL(char const*, bool)+0xb9>
c00156de:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00156e2:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c00156e6:	75 3c                	jne    c0015724 <Thr::loadDLL(char const*, bool)+0xf5>
c00156e8:	89 f8                	mov    eax,edi
c00156ea:	84 c0                	test   al,al
c00156ec:	0f 84 49 01 00 00    	je     c001583b <Thr::loadDLL(char const*, bool)+0x20c>
c00156f2:	51                   	push   ecx
c00156f3:	51                   	push   ecx
c00156f4:	68 08 28 02 c0       	push   0xc0022808
c00156f9:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c00156fd:	53                   	push   ebx
c00156fe:	e8 3d af fe ff       	call   c0000640 <strcpy>
c0015703:	5d                   	pop    ebp
c0015704:	58                   	pop    eax
c0015705:	56                   	push   esi
c0015706:	53                   	push   ebx
c0015707:	e8 34 b1 fe ff       	call   c0000840 <strcat>
c001570c:	58                   	pop    eax
c001570d:	5a                   	pop    edx
c001570e:	68 1b 28 02 c0       	push   0xc002281b
c0015713:	53                   	push   ebx
c0015714:	e8 27 b1 fe ff       	call   c0000840 <strcat>
c0015719:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001571c:	e8 0a bf ff ff       	call   c001162b <KePanic(char const*)>
c0015721:	83 c4 10             	add    esp,0x10
c0015724:	52                   	push   edx
c0015725:	6a 03                	push   0x3
c0015727:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001572b:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001572f:	05 ff 0f 00 00       	add    eax,0xfff
c0015734:	83 d2 00             	adc    edx,0x0
c0015737:	0f ac d0 0c          	shrd   eax,edx,0xc
c001573b:	50                   	push   eax
c001573c:	ff 35 b0 6f 02 c0    	push   DWORD PTR ds:0xc0026fb0
c0015742:	e8 dd 46 ff ff       	call   c0009e24 <VAS::allocatePages(int, int)>
c0015747:	59                   	pop    ecx
c0015748:	89 c3                	mov    ebx,eax
c001574a:	5d                   	pop    ebp
c001574b:	50                   	push   eax
c001574c:	68 92 0d 02 c0       	push   0xc0020d92
c0015751:	e8 ef 51 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0015756:	89 34 24             	mov    DWORD PTR [esp],esi
c0015759:	e8 12 ae fe ff       	call   c0000570 <strlen>
c001575e:	8b 2d 00 bf 02 c0    	mov    ebp,DWORD PTR ds:0xc002bf00
c0015764:	40                   	inc    eax
c0015765:	89 04 24             	mov    DWORD PTR [esp],eax
c0015768:	e8 49 23 ff ff       	call   c0007ab6 <malloc>
c001576d:	89 04 ad 20 c3 02 c0 	mov    DWORD PTR [ebp*4-0x3ffd3ce0],eax
c0015774:	58                   	pop    eax
c0015775:	a1 00 bf 02 c0       	mov    eax,ds:0xc002bf00
c001577a:	5a                   	pop    edx
c001577b:	56                   	push   esi
c001577c:	ff 34 85 20 c3 02 c0 	push   DWORD PTR [eax*4-0x3ffd3ce0]
c0015783:	e8 b8 ae fe ff       	call   c0000640 <strcpy>
c0015788:	a1 00 bf 02 c0       	mov    eax,ds:0xc002bf00
c001578d:	8d 50 01             	lea    edx,[eax+0x1]
c0015790:	89 1c 85 20 c1 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3ee0],ebx
c0015797:	89 15 00 bf 02 c0    	mov    DWORD PTR ds:0xc002bf00,edx
c001579d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00157a1:	83 c4 0c             	add    esp,0xc
c00157a4:	89 14 85 20 bf 02 c0 	mov    DWORD PTR [eax*4-0x3ffd40e0],edx
c00157ab:	6a 01                	push   0x1
c00157ad:	53                   	push   ebx
c00157ae:	56                   	push   esi
c00157af:	e8 bf f6 ff ff       	call   c0014e73 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c00157b4:	83 c4 10             	add    esp,0x10
c00157b7:	0f b6 c0             	movzx  eax,al
c00157ba:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00157be:	85 c0                	test   eax,eax
c00157c0:	0f 85 89 00 00 00    	jne    c001584f <Thr::loadDLL(char const*, bool)+0x220>
c00157c6:	89 f8                	mov    eax,edi
c00157c8:	84 c0                	test   al,al
c00157ca:	74 73                	je     c001583f <Thr::loadDLL(char const*, bool)+0x210>
c00157cc:	83 ec 0c             	sub    esp,0xc
c00157cf:	68 1d 28 02 c0       	push   0xc002281d
c00157d4:	e8 52 be ff ff       	call   c001162b <KePanic(char const*)>
c00157d9:	83 c4 10             	add    esp,0x10
c00157dc:	eb 61                	jmp    c001583f <Thr::loadDLL(char const*, bool)+0x210>
c00157de:	50                   	push   eax
c00157df:	50                   	push   eax
c00157e0:	89 e8                	mov    eax,ebp
c00157e2:	c1 e0 0c             	shl    eax,0xc
c00157e5:	01 d8                	add    eax,ebx
c00157e7:	50                   	push   eax
c00157e8:	ff 35 b0 6f 02 c0    	push   DWORD PTR ds:0xc0026fb0
c00157ee:	e8 19 41 ff ff       	call   c000990c <VAS::getPageTableEntry(unsigned long)>
c00157f3:	83 c4 10             	add    esp,0x10
c00157f6:	8b 00                	mov    eax,DWORD PTR [eax]
c00157f8:	a8 60                	test   al,0x60
c00157fa:	75 11                	jne    c001580d <Thr::loadDLL(char const*, bool)+0x1de>
c00157fc:	83 ec 0c             	sub    esp,0xc
c00157ff:	25 00 f0 ff ff       	and    eax,0xfffff000
c0015804:	50                   	push   eax
c0015805:	e8 4c 25 ff ff       	call   c0007d56 <Phys::freePage(unsigned long)>
c001580a:	83 c4 10             	add    esp,0x10
c001580d:	45                   	inc    ebp
c001580e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0015812:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0015816:	05 ff 0f 00 00       	add    eax,0xfff
c001581b:	bf 00 00 00 00       	mov    edi,0x0
c0015820:	83 d2 00             	adc    edx,0x0
c0015823:	0f ac d0 0c          	shrd   eax,edx,0xc
c0015827:	c1 ea 0c             	shr    edx,0xc
c001582a:	39 c5                	cmp    ebp,eax
c001582c:	89 d1                	mov    ecx,edx
c001582e:	89 f8                	mov    eax,edi
c0015830:	19 c8                	sbb    eax,ecx
c0015832:	72 aa                	jb     c00157de <Thr::loadDLL(char const*, bool)+0x1af>
c0015834:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0015839:	75 18                	jne    c0015853 <Thr::loadDLL(char const*, bool)+0x224>
c001583b:	31 db                	xor    ebx,ebx
c001583d:	eb 14                	jmp    c0015853 <Thr::loadDLL(char const*, bool)+0x224>
c001583f:	83 ec 0c             	sub    esp,0xc
c0015842:	68 3c 28 02 c0       	push   0xc002283c
c0015847:	e8 df bd ff ff       	call   c001162b <KePanic(char const*)>
c001584c:	83 c4 10             	add    esp,0x10
c001584f:	31 ed                	xor    ebp,ebp
c0015851:	eb bb                	jmp    c001580e <Thr::loadDLL(char const*, bool)+0x1df>
c0015853:	81 c4 2c 01 00 00    	add    esp,0x12c
c0015859:	89 d8                	mov    eax,ebx
c001585b:	5b                   	pop    ebx
c001585c:	5e                   	pop    esi
c001585d:	5f                   	pop    edi
c001585e:	5d                   	pop    ebp
c001585f:	c3                   	ret    

c0015860 <Thr::executeDLL(unsigned long, void*)>:
c0015860:	56                   	push   esi
c0015861:	53                   	push   ebx
c0015862:	52                   	push   edx
c0015863:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0015867:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001586b:	85 db                	test   ebx,ebx
c001586d:	75 10                	jne    c001587f <Thr::executeDLL(unsigned long, void*)+0x1f>
c001586f:	83 ec 0c             	sub    esp,0xc
c0015872:	68 58 28 02 c0       	push   0xc0022858
c0015877:	e8 af bd ff ff       	call   c001162b <KePanic(char const*)>
c001587c:	83 c4 10             	add    esp,0x10
c001587f:	50                   	push   eax
c0015880:	50                   	push   eax
c0015881:	53                   	push   ebx
c0015882:	68 82 28 02 c0       	push   0xc0022882
c0015887:	e8 b9 50 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001588c:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0015890:	89 d8                	mov    eax,ebx
c0015892:	83 c4 14             	add    esp,0x14
c0015895:	5b                   	pop    ebx
c0015896:	5e                   	pop    esi
c0015897:	ff e0                	jmp    eax
c0015899:	66 90                	xchg   ax,ax
c001589b:	90                   	nop

c001589c <userModeEntryPoint(void*)>:
c001589c:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c00158a1:	83 e8 01             	sub    eax,0x1
c00158a4:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c00158a9:	75 01                	jne    c00158ac <userModeEntryPoint(void*)+0x10>
c00158ab:	fb                   	sti    
c00158ac:	fb                   	sti    
c00158ad:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00158b2:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00158b5:	8b 80 0e 05 00 00    	mov    eax,DWORD PTR [eax+0x50e]
c00158bb:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00158bf:	e9 7b a9 fe ff       	jmp    c000023f <goToUsermode>

c00158c4 <changeTSS>:
c00158c4:	83 ec 14             	sub    esp,0x14
c00158c7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00158cc:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c00158cf:	b8 00 00 e8 01       	mov    eax,0x1e80000
c00158d4:	c1 e2 15             	shl    edx,0x15
c00158d7:	29 d0                	sub    eax,edx
c00158d9:	50                   	push   eax
c00158da:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c00158df:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00158e5:	05 7c 11 00 00       	add    eax,0x117c
c00158ea:	50                   	push   eax
c00158eb:	e8 64 36 ff ff       	call   c0008f54 <TSS::setESP(unsigned long)>
c00158f0:	83 c4 1c             	add    esp,0x1c
c00158f3:	c3                   	ret    

c00158f4 <switchToThread(ThreadControlBlock*)>:
c00158f4:	57                   	push   edi
c00158f5:	8b 0d c4 c6 02 c0    	mov    ecx,DWORD PTR ds:0xc002c6c4
c00158fb:	56                   	push   esi
c00158fc:	85 c9                	test   ecx,ecx
c00158fe:	53                   	push   ebx
c00158ff:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0015903:	0f 85 8b 00 00 00    	jne    c0015994 <switchToThread(ThreadControlBlock*)+0xa0>
c0015909:	0f b6 53 40          	movzx  edx,BYTE PTR [ebx+0x40]
c001590d:	81 fa ff 00 00 00    	cmp    edx,0xff
c0015913:	74 7b                	je     c0015990 <switchToThread(ThreadControlBlock*)+0x9c>
c0015915:	b8 00 04 00 00       	mov    eax,0x400
c001591a:	29 d0                	sub    eax,edx
c001591c:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c001591f:	d1 f8                	sar    eax,1
c0015921:	01 d0                	add    eax,edx
c0015923:	90                   	nop
c0015924:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0015927:	e8 1e 28 00 00       	call   c001814a <HalQueryPerformanceCounter()>
c001592c:	a3 08 c7 02 c0       	mov    ds:0xc002c708,eax
c0015931:	89 15 0c c7 02 c0    	mov    DWORD PTR ds:0xc002c70c,edx
c0015937:	89 c6                	mov    esi,eax
c0015939:	89 d7                	mov    edi,edx
c001593b:	2b 35 f8 c6 02 c0    	sub    esi,DWORD PTR ds:0xc002c6f8
c0015941:	a3 f8 c6 02 c0       	mov    ds:0xc002c6f8,eax
c0015946:	1b 3d fc c6 02 c0    	sbb    edi,DWORD PTR ds:0xc002c6fc
c001594c:	89 35 00 c7 02 c0    	mov    DWORD PTR ds:0xc002c700,esi
c0015952:	89 3d 04 c7 02 c0    	mov    DWORD PTR ds:0xc002c704,edi
c0015958:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001595e:	89 15 fc c6 02 c0    	mov    DWORD PTR ds:0xc002c6fc,edx
c0015964:	8b 41 10             	mov    eax,DWORD PTR [ecx+0x10]
c0015967:	8b 51 14             	mov    edx,DWORD PTR [ecx+0x14]
c001596a:	01 c6                	add    esi,eax
c001596c:	11 d7                	adc    edi,edx
c001596e:	89 71 10             	mov    DWORD PTR [ecx+0x10],esi
c0015971:	83 ec 0c             	sub    esp,0xc
c0015974:	89 79 14             	mov    DWORD PTR [ecx+0x14],edi
c0015977:	53                   	push   ebx
c0015978:	e8 fa a8 fe ff       	call   c0000277 <switchToThreadASM>
c001597d:	0f 20 c0             	mov    eax,cr0
c0015980:	83 c8 08             	or     eax,0x8
c0015983:	0f 22 c0             	mov    cr0,eax
c0015986:	83 c4 10             	add    esp,0x10
c0015989:	5b                   	pop    ebx
c001598a:	5e                   	pop    esi
c001598b:	5f                   	pop    edi
c001598c:	c3                   	ret    
c001598d:	8d 76 00             	lea    esi,[esi+0x0]
c0015990:	31 c0                	xor    eax,eax
c0015992:	eb 90                	jmp    c0015924 <switchToThread(ThreadControlBlock*)+0x30>
c0015994:	5b                   	pop    ebx
c0015995:	c7 05 c0 c6 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002c6c0,0x1
c001599f:	5e                   	pop    esi
c00159a0:	5f                   	pop    edi
c00159a1:	c3                   	ret    
c00159a2:	66 90                	xchg   ax,ax

c00159a4 <Process::addArgs(char**)>:
c00159a4:	57                   	push   edi
c00159a5:	56                   	push   esi
c00159a6:	53                   	push   ebx
c00159a7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00159ab:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00159af:	c7 86 16 05 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x516],0x0
c00159b9:	85 ff                	test   edi,edi
c00159bb:	74 4f                	je     c0015a0c <Process::addArgs(char**)+0x68>
c00159bd:	8b 07                	mov    eax,DWORD PTR [edi]
c00159bf:	85 c0                	test   eax,eax
c00159c1:	74 49                	je     c0015a0c <Process::addArgs(char**)+0x68>
c00159c3:	31 db                	xor    ebx,ebx
c00159c5:	8d 76 00             	lea    esi,[esi+0x0]
c00159c8:	83 ec 0c             	sub    esp,0xc
c00159cb:	50                   	push   eax
c00159cc:	e8 9f ab fe ff       	call   c0000570 <strlen>
c00159d1:	83 c0 01             	add    eax,0x1
c00159d4:	89 04 24             	mov    DWORD PTR [esp],eax
c00159d7:	e8 da 20 ff ff       	call   c0007ab6 <malloc>
c00159dc:	89 84 9e 1a 05 00 00 	mov    DWORD PTR [esi+ebx*4+0x51a],eax
c00159e3:	5a                   	pop    edx
c00159e4:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c00159e7:	59                   	pop    ecx
c00159e8:	83 c3 01             	add    ebx,0x1
c00159eb:	52                   	push   edx
c00159ec:	50                   	push   eax
c00159ed:	e8 4e ac fe ff       	call   c0000640 <strcpy>
c00159f2:	8b 8e 16 05 00 00    	mov    ecx,DWORD PTR [esi+0x516]
c00159f8:	83 c4 10             	add    esp,0x10
c00159fb:	83 c1 01             	add    ecx,0x1
c00159fe:	89 8e 16 05 00 00    	mov    DWORD PTR [esi+0x516],ecx
c0015a04:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c0015a07:	85 c0                	test   eax,eax
c0015a09:	75 bd                	jne    c00159c8 <Process::addArgs(char**)+0x24>
c0015a0b:	90                   	nop
c0015a0c:	5b                   	pop    ebx
c0015a0d:	5e                   	pop    esi
c0015a0e:	5f                   	pop    edi
c0015a0f:	c3                   	ret    

c0015a10 <Process::Process(char const*, Process*, char**)>:
c0015a10:	56                   	push   esi
c0015a11:	53                   	push   ebx
c0015a12:	83 ec 14             	sub    esp,0x14
c0015a15:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015a19:	05 0c 02 00 00       	add    eax,0x20c
c0015a1e:	bb 07 00 00 00       	mov    ebx,0x7
c0015a23:	89 c6                	mov    esi,eax
c0015a25:	8d 76 00             	lea    esi,[esi+0x0]
c0015a28:	85 db                	test   ebx,ebx
c0015a2a:	78 14                	js     c0015a40 <Process::Process(char const*, Process*, char**)+0x30>
c0015a2c:	83 ec 0c             	sub    esp,0xc
c0015a2f:	56                   	push   esi
c0015a30:	e8 e3 a5 00 00       	call   c0020018 <ThreadControlBlock::ThreadControlBlock()>
c0015a35:	83 c4 10             	add    esp,0x10
c0015a38:	83 c6 5f             	add    esi,0x5f
c0015a3b:	83 eb 01             	sub    ebx,0x1
c0015a3e:	eb e8                	jmp    c0015a28 <Process::Process(char const*, Process*, char**)+0x18>
c0015a40:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015a44:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c0015a4b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015a4f:	c6 80 1f 07 00 00 00 	mov    BYTE PTR [eax+0x71f],0x0
c0015a56:	83 ec 0c             	sub    esp,0xc
c0015a59:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015a5d:	e8 be b9 ff ff       	call   c0011420 <KeNewProcessEnv(Process*)>
c0015a62:	83 c4 10             	add    esp,0x10
c0015a65:	89 c2                	mov    edx,eax
c0015a67:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015a6b:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c0015a71:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015a75:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c0015a7e:	a1 a0 3e 02 c0       	mov    eax,ds:0xc0023ea0
c0015a83:	8d 50 01             	lea    edx,[eax+0x1]
c0015a86:	89 15 a0 3e 02 c0    	mov    DWORD PTR ds:0xc0023ea0,edx
c0015a8c:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0015a90:	89 02                	mov    DWORD PTR [edx],eax
c0015a92:	c7 44 24 08 14 00 00 00 	mov    DWORD PTR [esp+0x8],0x14
c0015a9a:	83 ec 0c             	sub    esp,0xc
c0015a9d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0015aa1:	e8 10 20 ff ff       	call   c0007ab6 <malloc>
c0015aa6:	83 c4 10             	add    esp,0x10
c0015aa9:	89 c3                	mov    ebx,eax
c0015aab:	83 ec 08             	sub    esp,0x8
c0015aae:	6a 00                	push   0x0
c0015ab0:	53                   	push   ebx
c0015ab1:	e8 b2 45 ff ff       	call   c000a068 <VAS::VAS(bool)>
c0015ab6:	83 c4 10             	add    esp,0x10
c0015ab9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015abd:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c0015ac3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015ac7:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0015ad1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015ad5:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0015ad9:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c0015adf:	e8 62 bf ff ff       	call   c0011a46 <KeInitSignals()>
c0015ae4:	89 c2                	mov    edx,eax
c0015ae6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015aea:	89 90 20 07 00 00    	mov    DWORD PTR [eax+0x720],edx
c0015af0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015af4:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0015afa:	85 c0                	test   eax,eax
c0015afc:	74 42                	je     c0015b40 <Process::Process(char const*, Process*, char**)+0x130>
c0015afe:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015b02:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0015b08:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0015b0e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015b12:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c0015b18:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015b1c:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0015b22:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0015b28:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015b2c:	05 0c 01 00 00       	add    eax,0x10c
c0015b31:	83 ec 08             	sub    esp,0x8
c0015b34:	52                   	push   edx
c0015b35:	50                   	push   eax
c0015b36:	e8 05 ab fe ff       	call   c0000640 <strcpy>
c0015b3b:	83 c4 10             	add    esp,0x10
c0015b3e:	eb 64                	jmp    c0015ba4 <Process::Process(char const*, Process*, char**)+0x194>
c0015b40:	c7 44 24 04 84 01 00 00 	mov    DWORD PTR [esp+0x4],0x184
c0015b48:	83 ec 0c             	sub    esp,0xc
c0015b4b:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0015b4f:	e8 62 1f ff ff       	call   c0007ab6 <malloc>
c0015b54:	83 c4 10             	add    esp,0x10
c0015b57:	89 c3                	mov    ebx,eax
c0015b59:	83 ec 08             	sub    esp,0x8
c0015b5c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015b60:	53                   	push   ebx
c0015b61:	e8 00 31 ff ff       	call   c0008c66 <VgaText::VgaText(char const*)>
c0015b66:	83 c4 10             	add    esp,0x10
c0015b69:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015b6d:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c0015b73:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015b77:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015b7d:	83 ec 0c             	sub    esp,0xc
c0015b80:	50                   	push   eax
c0015b81:	e8 7e 29 ff ff       	call   c0008504 <addToTerminalCycle(VgaText*)>
c0015b86:	83 c4 10             	add    esp,0x10
c0015b89:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015b8d:	05 0c 01 00 00       	add    eax,0x10c
c0015b92:	83 ec 08             	sub    esp,0x8
c0015b95:	68 a1 28 02 c0       	push   0xc00228a1
c0015b9a:	50                   	push   eax
c0015b9b:	e8 a0 aa fe ff       	call   c0000640 <strcpy>
c0015ba0:	83 c4 10             	add    esp,0x10
c0015ba3:	90                   	nop
c0015ba4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015ba8:	83 c0 0c             	add    eax,0xc
c0015bab:	83 ec 08             	sub    esp,0x8
c0015bae:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015bb2:	50                   	push   eax
c0015bb3:	e8 88 aa fe ff       	call   c0000640 <strcpy>
c0015bb8:	83 c4 10             	add    esp,0x10
c0015bbb:	83 ec 08             	sub    esp,0x8
c0015bbe:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0015bc2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015bc6:	e8 d9 fd ff ff       	call   c00159a4 <Process::addArgs(char**)>
c0015bcb:	83 c4 10             	add    esp,0x10
c0015bce:	83 ec 08             	sub    esp,0x8
c0015bd1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015bd5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015bd9:	e8 63 ed ff ff       	call   c0014941 <Thr::loadProgramIntoMemory(Process*, char const*)>
c0015bde:	83 c4 10             	add    esp,0x10
c0015be1:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0015be5:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0015be9:	83 f0 01             	xor    eax,0x1
c0015bec:	88 c2                	mov    dl,al
c0015bee:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015bf2:	88 90 1e 07 00 00    	mov    BYTE PTR [eax+0x71e],dl
c0015bf8:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0015bfd:	83 ec 04             	sub    esp,0x4
c0015c00:	50                   	push   eax
c0015c01:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015c05:	68 f8 28 02 c0       	push   0xc00228f8
c0015c0a:	e8 36 4d ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0015c0f:	83 c4 10             	add    esp,0x10
c0015c12:	90                   	nop
c0015c13:	83 c4 14             	add    esp,0x14
c0015c16:	5b                   	pop    ebx
c0015c17:	5e                   	pop    esi
c0015c18:	c3                   	ret    
c0015c19:	90                   	nop
c0015c1a:	66 90                	xchg   ax,ax

c0015c1c <Process::Process(bool, char const*, Process*, char**)>:
c0015c1c:	56                   	push   esi
c0015c1d:	53                   	push   ebx
c0015c1e:	83 ec 24             	sub    esp,0x24
c0015c21:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0015c25:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0015c29:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015c2d:	05 0c 02 00 00       	add    eax,0x20c
c0015c32:	bb 07 00 00 00       	mov    ebx,0x7
c0015c37:	89 c6                	mov    esi,eax
c0015c39:	8d 76 00             	lea    esi,[esi+0x0]
c0015c3c:	85 db                	test   ebx,ebx
c0015c3e:	78 14                	js     c0015c54 <Process::Process(bool, char const*, Process*, char**)+0x38>
c0015c40:	83 ec 0c             	sub    esp,0xc
c0015c43:	56                   	push   esi
c0015c44:	e8 cf a3 00 00       	call   c0020018 <ThreadControlBlock::ThreadControlBlock()>
c0015c49:	83 c4 10             	add    esp,0x10
c0015c4c:	83 c6 5f             	add    esi,0x5f
c0015c4f:	83 eb 01             	sub    ebx,0x1
c0015c52:	eb e8                	jmp    c0015c3c <Process::Process(bool, char const*, Process*, char**)+0x20>
c0015c54:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015c58:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c0015c5f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015c63:	c6 80 1f 07 00 00 00 	mov    BYTE PTR [eax+0x71f],0x0
c0015c6a:	83 ec 0c             	sub    esp,0xc
c0015c6d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0015c71:	e8 aa b7 ff ff       	call   c0011420 <KeNewProcessEnv(Process*)>
c0015c76:	83 c4 10             	add    esp,0x10
c0015c79:	89 c2                	mov    edx,eax
c0015c7b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015c7f:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c0015c85:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015c89:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c0015c92:	a1 a0 3e 02 c0       	mov    eax,ds:0xc0023ea0
c0015c97:	8d 50 01             	lea    edx,[eax+0x1]
c0015c9a:	89 15 a0 3e 02 c0    	mov    DWORD PTR ds:0xc0023ea0,edx
c0015ca0:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0015ca4:	89 02                	mov    DWORD PTR [edx],eax
c0015ca6:	c7 44 24 1c 14 00 00 00 	mov    DWORD PTR [esp+0x1c],0x14
c0015cae:	83 ec 0c             	sub    esp,0xc
c0015cb1:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0015cb5:	e8 fc 1d ff ff       	call   c0007ab6 <malloc>
c0015cba:	83 c4 10             	add    esp,0x10
c0015cbd:	89 c3                	mov    ebx,eax
c0015cbf:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0015cc4:	83 ec 08             	sub    esp,0x8
c0015cc7:	50                   	push   eax
c0015cc8:	53                   	push   ebx
c0015cc9:	e8 9a 43 ff ff       	call   c000a068 <VAS::VAS(bool)>
c0015cce:	83 c4 10             	add    esp,0x10
c0015cd1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015cd5:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c0015cdb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015cdf:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0015ce9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015ced:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0015cf1:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c0015cf7:	e8 4a bd ff ff       	call   c0011a46 <KeInitSignals()>
c0015cfc:	89 c2                	mov    edx,eax
c0015cfe:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015d02:	89 90 20 07 00 00    	mov    DWORD PTR [eax+0x720],edx
c0015d08:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015d0c:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0015d12:	85 c0                	test   eax,eax
c0015d14:	74 42                	je     c0015d58 <Process::Process(bool, char const*, Process*, char**)+0x13c>
c0015d16:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015d1a:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0015d20:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0015d26:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015d2a:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c0015d30:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015d34:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0015d3a:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0015d40:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015d44:	05 0c 01 00 00       	add    eax,0x10c
c0015d49:	83 ec 08             	sub    esp,0x8
c0015d4c:	52                   	push   edx
c0015d4d:	50                   	push   eax
c0015d4e:	e8 ed a8 fe ff       	call   c0000640 <strcpy>
c0015d53:	83 c4 10             	add    esp,0x10
c0015d56:	eb 64                	jmp    c0015dbc <Process::Process(bool, char const*, Process*, char**)+0x1a0>
c0015d58:	c7 44 24 18 84 01 00 00 	mov    DWORD PTR [esp+0x18],0x184
c0015d60:	83 ec 0c             	sub    esp,0xc
c0015d63:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0015d67:	e8 4a 1d ff ff       	call   c0007ab6 <malloc>
c0015d6c:	83 c4 10             	add    esp,0x10
c0015d6f:	89 c3                	mov    ebx,eax
c0015d71:	83 ec 08             	sub    esp,0x8
c0015d74:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0015d78:	53                   	push   ebx
c0015d79:	e8 e8 2e ff ff       	call   c0008c66 <VgaText::VgaText(char const*)>
c0015d7e:	83 c4 10             	add    esp,0x10
c0015d81:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015d85:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c0015d8b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015d8f:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015d95:	83 ec 0c             	sub    esp,0xc
c0015d98:	50                   	push   eax
c0015d99:	e8 66 27 ff ff       	call   c0008504 <addToTerminalCycle(VgaText*)>
c0015d9e:	83 c4 10             	add    esp,0x10
c0015da1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015da5:	05 0c 01 00 00       	add    eax,0x10c
c0015daa:	83 ec 08             	sub    esp,0x8
c0015dad:	68 a1 28 02 c0       	push   0xc00228a1
c0015db2:	50                   	push   eax
c0015db3:	e8 88 a8 fe ff       	call   c0000640 <strcpy>
c0015db8:	83 c4 10             	add    esp,0x10
c0015dbb:	90                   	nop
c0015dbc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015dc0:	83 c0 0c             	add    eax,0xc
c0015dc3:	83 ec 08             	sub    esp,0x8
c0015dc6:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0015dca:	50                   	push   eax
c0015dcb:	e8 70 a8 fe ff       	call   c0000640 <strcpy>
c0015dd0:	83 c4 10             	add    esp,0x10
c0015dd3:	83 ec 08             	sub    esp,0x8
c0015dd6:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0015dda:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0015dde:	e8 c1 fb ff ff       	call   c00159a4 <Process::addArgs(char**)>
c0015de3:	83 c4 10             	add    esp,0x10
c0015de6:	90                   	nop
c0015de7:	83 c4 24             	add    esp,0x24
c0015dea:	5b                   	pop    ebx
c0015deb:	5e                   	pop    esi
c0015dec:	c3                   	ret    
c0015ded:	8d 76 00             	lea    esi,[esi+0x0]

c0015df0 <taskStartupFunction>:
c0015df0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015df5:	8b 40 41             	mov    eax,DWORD PTR [eax+0x41]
c0015df8:	c3                   	ret    
c0015df9:	90                   	nop
c0015dfa:	66 90                	xchg   ax,ax

c0015dfc <Semaphore::Semaphore(int)>:
c0015dfc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015e00:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0015e04:	89 10                	mov    DWORD PTR [eax],edx
c0015e06:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015e0a:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c0015e11:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015e15:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0015e1c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015e20:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0015e27:	90                   	nop
c0015e28:	c3                   	ret    
c0015e29:	90                   	nop
c0015e2a:	66 90                	xchg   ax,ax

c0015e2c <Mutex::Mutex()>:
c0015e2c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015e30:	6a 01                	push   0x1
c0015e32:	50                   	push   eax
c0015e33:	e8 c4 ff ff ff       	call   c0015dfc <Semaphore::Semaphore(int)>
c0015e38:	83 c4 08             	add    esp,0x8
c0015e3b:	90                   	nop
c0015e3c:	c3                   	ret    
c0015e3d:	90                   	nop
c0015e3e:	66 90                	xchg   ax,ax

c0015e40 <Process::createThread(void (*)(void*), void*, int)>:
c0015e40:	57                   	push   edi
c0015e41:	31 c9                	xor    ecx,ecx
c0015e43:	56                   	push   esi
c0015e44:	53                   	push   ebx
c0015e45:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0015e49:	66 8b b3 04 05 00 00 	mov    si,WORD PTR [ebx+0x504]
c0015e50:	89 f2                	mov    edx,esi
c0015e52:	66 90                	xchg   ax,ax
c0015e54:	0f b7 c2             	movzx  eax,dx
c0015e57:	80 e2 01             	and    dl,0x1
c0015e5a:	74 14                	je     c0015e70 <Process::createThread(void (*)(void*), void*, int)+0x30>
c0015e5c:	d1 f8                	sar    eax,1
c0015e5e:	83 c1 01             	add    ecx,0x1
c0015e61:	89 c2                	mov    edx,eax
c0015e63:	83 f9 10             	cmp    ecx,0x10
c0015e66:	75 ec                	jne    c0015e54 <Process::createThread(void (*)(void*), void*, int)+0x14>
c0015e68:	31 db                	xor    ebx,ebx
c0015e6a:	89 d8                	mov    eax,ebx
c0015e6c:	5b                   	pop    ebx
c0015e6d:	5e                   	pop    esi
c0015e6e:	5f                   	pop    edi
c0015e6f:	c3                   	ret    
c0015e70:	b8 01 00 00 00       	mov    eax,0x1
c0015e75:	d3 e0                	shl    eax,cl
c0015e77:	09 c6                	or     esi,eax
c0015e79:	8d 04 c9             	lea    eax,[ecx+ecx*8]
c0015e7c:	66 89 b3 04 05 00 00 	mov    WORD PTR [ebx+0x504],si
c0015e83:	01 c0                	add    eax,eax
c0015e85:	01 c8                	add    eax,ecx
c0015e87:	8d 04 80             	lea    eax,[eax+eax*4]
c0015e8a:	01 d8                	add    eax,ebx
c0015e8c:	80 b8 6a 02 00 00 00 	cmp    BYTE PTR [eax+0x26a],0x0
c0015e93:	75 0b                	jne    c0015ea0 <Process::createThread(void (*)(void*), void*, int)+0x60>
c0015e95:	c7 80 61 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x261],0x0
c0015e9f:	90                   	nop
c0015ea0:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c0015ea6:	83 ec 0c             	sub    esp,0xc
c0015ea9:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0015eac:	8d 04 c9             	lea    eax,[ecx+ecx*8]
c0015eaf:	01 c0                	add    eax,eax
c0015eb1:	01 c8                	add    eax,ecx
c0015eb3:	8d 3c 80             	lea    edi,[eax+eax*4]
c0015eb6:	8d 04 3b             	lea    eax,[ebx+edi*1]
c0015eb9:	89 90 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edx
c0015ebf:	8d b0 00 02 00 00    	lea    esi,[eax+0x200]
c0015ec5:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0015ec9:	89 88 44 02 00 00    	mov    DWORD PTR [eax+0x244],ecx
c0015ecf:	89 90 4d 02 00 00    	mov    DWORD PTR [eax+0x24d],edx
c0015ed5:	89 98 48 02 00 00    	mov    DWORD PTR [eax+0x248],ebx
c0015edb:	89 ca                	mov    edx,ecx
c0015edd:	8d 9c 3b 0c 02 00 00 	lea    ebx,[ebx+edi*1+0x20c]
c0015ee4:	f7 da                	neg    edx
c0015ee6:	c1 e2 15             	shl    edx,0x15
c0015ee9:	81 c2 e0 ff ff 01    	add    edx,0x1ffffe0
c0015eef:	89 90 10 02 00 00    	mov    DWORD PTR [eax+0x210],edx
c0015ef5:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0015ef9:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c0015f03:	88 90 4c 02 00 00    	mov    BYTE PTR [eax+0x24c],dl
c0015f09:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0015f0d:	89 90 18 02 00 00    	mov    DWORD PTR [eax+0x218],edx
c0015f13:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c0015f1d:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c0015f27:	68 00 01 00 00       	push   0x100
c0015f2c:	e8 85 1b ff ff       	call   c0007ab6 <malloc>
c0015f31:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c0015f34:	58                   	pop    eax
c0015f35:	5a                   	pop    edx
c0015f36:	53                   	push   ebx
c0015f37:	68 e4 c6 02 c0       	push   0xc002c6e4
c0015f3c:	e8 6f 9e 00 00       	call   c001fdb0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0015f41:	83 c4 10             	add    esp,0x10
c0015f44:	89 d8                	mov    eax,ebx
c0015f46:	5b                   	pop    ebx
c0015f47:	5e                   	pop    esi
c0015f48:	5f                   	pop    edi
c0015f49:	c3                   	ret    
c0015f4a:	66 90                	xchg   ax,ax

c0015f4c <Process::createUserThread()>:
c0015f4c:	83 ec 0c             	sub    esp,0xc
c0015f4f:	68 80 00 00 00       	push   0x80
c0015f54:	6a 00                	push   0x0
c0015f56:	68 9c 58 01 c0       	push   0xc001589c
c0015f5b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015f5f:	50                   	push   eax
c0015f60:	e8 db fe ff ff       	call   c0015e40 <Process::createThread(void (*)(void*), void*, int)>
c0015f65:	83 c4 1c             	add    esp,0x1c
c0015f68:	c3                   	ret    
c0015f69:	8d 76 00             	lea    esi,[esi+0x0]

c0015f6c <setupMultitasking(void (*)())>:
c0015f6c:	56                   	push   esi
c0015f6d:	53                   	push   ebx
c0015f6e:	83 ec 04             	sub    esp,0x4
c0015f71:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0015f75:	eb 11                	jmp    c0015f88 <setupMultitasking(void (*)())+0x1c>
c0015f77:	90                   	nop
c0015f78:	83 ec 0c             	sub    esp,0xc
c0015f7b:	68 e4 c6 02 c0       	push   0xc002c6e4
c0015f80:	e8 6f 9d 00 00       	call   c001fcf4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0015f85:	83 c4 10             	add    esp,0x10
c0015f88:	83 ec 0c             	sub    esp,0xc
c0015f8b:	68 e4 c6 02 c0       	push   0xc002c6e4
c0015f90:	e8 3b 9d 00 00       	call   c001fcd0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0015f95:	83 c4 10             	add    esp,0x10
c0015f98:	84 c0                	test   al,al
c0015f9a:	74 dc                	je     c0015f78 <setupMultitasking(void (*)())+0xc>
c0015f9c:	83 ec 0c             	sub    esp,0xc
c0015f9f:	68 24 07 00 00       	push   0x724
c0015fa4:	e8 0d 1b ff ff       	call   c0007ab6 <malloc>
c0015fa9:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0015fb0:	89 c3                	mov    ebx,eax
c0015fb2:	6a 00                	push   0x0
c0015fb4:	68 a5 28 02 c0       	push   0xc00228a5
c0015fb9:	6a 01                	push   0x1
c0015fbb:	50                   	push   eax
c0015fbc:	e8 5b fc ff ff       	call   c0015c1c <Process::Process(bool, char const*, Process*, char**)>
c0015fc1:	83 c4 14             	add    esp,0x14
c0015fc4:	8b 83 06 05 00 00    	mov    eax,DWORD PTR [ebx+0x506]
c0015fca:	89 1d f0 c6 02 c0    	mov    DWORD PTR ds:0xc002c6f0,ebx
c0015fd0:	50                   	push   eax
c0015fd1:	e8 83 27 ff ff       	call   c0008759 <setActiveTerminal(VgaText*)>
c0015fd6:	66 8b 83 04 05 00 00 	mov    ax,WORD PTR [ebx+0x504]
c0015fdd:	c7 83 61 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x261],0x0
c0015fe7:	83 c8 01             	or     eax,0x1
c0015fea:	66 89 83 04 05 00 00 	mov    WORD PTR [ebx+0x504],ax
c0015ff1:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c0015ff7:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0015ffa:	c7 83 44 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x244],0x0
c0016004:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c001600a:	89 9b 48 02 00 00    	mov    DWORD PTR [ebx+0x248],ebx
c0016010:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c001601a:	c7 83 40 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x240],0x2faf080
c0016024:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c001602e:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c0016034:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c001603e:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c0016044:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c001604e:	c7 04 24 00 01 00 00 	mov    DWORD PTR [esp],0x100
c0016055:	e8 5c 1a ff ff       	call   c0007ab6 <malloc>
c001605a:	89 83 14 02 00 00    	mov    DWORD PTR [ebx+0x214],eax
c0016060:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0016066:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c001606c:	5a                   	pop    edx
c001606d:	59                   	pop    ecx
c001606e:	68 a1 28 02 c0       	push   0xc00228a1
c0016073:	50                   	push   eax
c0016074:	e8 c7 a5 fe ff       	call   c0000640 <strcpy>
c0016079:	c6 83 4c 02 00 00 80 	mov    BYTE PTR [ebx+0x24c],0x80
c0016080:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0016084:	83 c4 14             	add    esp,0x14
c0016087:	5b                   	pop    ebx
c0016088:	5e                   	pop    esi
c0016089:	e9 db a1 fe ff       	jmp    c0000269 <switchToThreadASMFirstTime>
c001608e:	66 90                	xchg   ax,ax

c0016090 <schedule()>:
c0016090:	8b 15 c4 c6 02 c0    	mov    edx,DWORD PTR ds:0xc002c6c4
c0016096:	85 d2                	test   edx,edx
c0016098:	74 0e                	je     c00160a8 <schedule()+0x18>
c001609a:	c7 05 c0 c6 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002c6c0,0x1
c00160a4:	c3                   	ret    
c00160a5:	8d 76 00             	lea    esi,[esi+0x0]
c00160a8:	53                   	push   ebx
c00160a9:	83 ec 14             	sub    esp,0x14
c00160ac:	68 e4 c6 02 c0       	push   0xc002c6e4
c00160b1:	e8 1a 9c 00 00       	call   c001fcd0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00160b6:	83 c4 10             	add    esp,0x10
c00160b9:	84 c0                	test   al,al
c00160bb:	75 3f                	jne    c00160fc <schedule()+0x6c>
c00160bd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00160c2:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c00160c5:	83 fa 01             	cmp    edx,0x1
c00160c8:	74 3a                	je     c0016104 <schedule()+0x74>
c00160ca:	66 90                	xchg   ax,ax
c00160cc:	83 ec 0c             	sub    esp,0xc
c00160cf:	68 e4 c6 02 c0       	push   0xc002c6e4
c00160d4:	e8 13 9c 00 00       	call   c001fcec <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00160d9:	c7 04 24 e4 c6 02 c0 	mov    DWORD PTR [esp],0xc002c6e4
c00160e0:	89 c3                	mov    ebx,eax
c00160e2:	e8 0d 9c 00 00       	call   c001fcf4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c00160e7:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c00160ee:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00160f1:	e8 fe f7 ff ff       	call   c00158f4 <switchToThread(ThreadControlBlock*)>
c00160f6:	83 c4 10             	add    esp,0x10
c00160f9:	8d 76 00             	lea    esi,[esi+0x0]
c00160fc:	83 c4 08             	add    esp,0x8
c00160ff:	5b                   	pop    ebx
c0016100:	c3                   	ret    
c0016101:	8d 76 00             	lea    esi,[esi+0x0]
c0016104:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c001610b:	83 ec 08             	sub    esp,0x8
c001610e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016113:	50                   	push   eax
c0016114:	68 e4 c6 02 c0       	push   0xc002c6e4
c0016119:	e8 92 9c 00 00       	call   c001fdb0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001611e:	83 c4 10             	add    esp,0x10
c0016121:	eb a9                	jmp    c00160cc <schedule()+0x3c>
c0016123:	90                   	nop

c0016124 <Semaphore::tryAcquire()>:
c0016124:	53                   	push   ebx
c0016125:	83 ec 08             	sub    esp,0x8
c0016128:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001612c:	fa                   	cli    
c001612d:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016132:	8d 50 01             	lea    edx,[eax+0x1]
c0016135:	89 15 c8 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c8,edx
c001613b:	8b 15 c4 c6 02 c0    	mov    edx,DWORD PTR ds:0xc002c6c4
c0016141:	8d 5a 01             	lea    ebx,[edx+0x1]
c0016144:	89 1d c4 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c4,ebx
c001614a:	8b 59 0c             	mov    ebx,DWORD PTR [ecx+0xc]
c001614d:	3b 19                	cmp    ebx,DWORD PTR [ecx]
c001614f:	7c 33                	jl     c0016184 <Semaphore::tryAcquire()+0x60>
c0016151:	89 15 c4 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c4,edx
c0016157:	85 d2                	test   edx,edx
c0016159:	75 0d                	jne    c0016168 <Semaphore::tryAcquire()+0x44>
c001615b:	8b 15 c0 c6 02 c0    	mov    edx,DWORD PTR ds:0xc002c6c0
c0016161:	85 d2                	test   edx,edx
c0016163:	75 6f                	jne    c00161d4 <Semaphore::tryAcquire()+0xb0>
c0016165:	8d 76 00             	lea    esi,[esi+0x0]
c0016168:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c001616d:	85 c0                	test   eax,eax
c001616f:	74 0b                	je     c001617c <Semaphore::tryAcquire()+0x58>
c0016171:	8d 76 00             	lea    esi,[esi+0x0]
c0016174:	31 c0                	xor    eax,eax
c0016176:	83 c4 08             	add    esp,0x8
c0016179:	5b                   	pop    ebx
c001617a:	c3                   	ret    
c001617b:	90                   	nop
c001617c:	fb                   	sti    
c001617d:	83 c4 08             	add    esp,0x8
c0016180:	5b                   	pop    ebx
c0016181:	c3                   	ret    
c0016182:	66 90                	xchg   ax,ax
c0016184:	83 c3 01             	add    ebx,0x1
c0016187:	89 15 c4 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c4,edx
c001618d:	89 59 0c             	mov    DWORD PTR [ecx+0xc],ebx
c0016190:	85 d2                	test   edx,edx
c0016192:	75 24                	jne    c00161b8 <Semaphore::tryAcquire()+0x94>
c0016194:	8b 0d c0 c6 02 c0    	mov    ecx,DWORD PTR ds:0xc002c6c0
c001619a:	85 c9                	test   ecx,ecx
c001619c:	74 1a                	je     c00161b8 <Semaphore::tryAcquire()+0x94>
c001619e:	c7 05 c0 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6c0,0x0
c00161a8:	e8 e3 fe ff ff       	call   c0016090 <schedule()>
c00161ad:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c00161b2:	83 e8 01             	sub    eax,0x1
c00161b5:	8d 76 00             	lea    esi,[esi+0x0]
c00161b8:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c00161bd:	85 c0                	test   eax,eax
c00161bf:	75 0b                	jne    c00161cc <Semaphore::tryAcquire()+0xa8>
c00161c1:	fb                   	sti    
c00161c2:	b0 01                	mov    al,0x1
c00161c4:	83 c4 08             	add    esp,0x8
c00161c7:	5b                   	pop    ebx
c00161c8:	c3                   	ret    
c00161c9:	8d 76 00             	lea    esi,[esi+0x0]
c00161cc:	b0 01                	mov    al,0x1
c00161ce:	83 c4 08             	add    esp,0x8
c00161d1:	5b                   	pop    ebx
c00161d2:	c3                   	ret    
c00161d3:	90                   	nop
c00161d4:	c7 05 c0 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6c0,0x0
c00161de:	e8 ad fe ff ff       	call   c0016090 <schedule()>
c00161e3:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c00161e8:	83 e8 01             	sub    eax,0x1
c00161eb:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c00161f0:	85 c0                	test   eax,eax
c00161f2:	75 80                	jne    c0016174 <Semaphore::tryAcquire()+0x50>
c00161f4:	eb 86                	jmp    c001617c <Semaphore::tryAcquire()+0x58>
c00161f6:	66 90                	xchg   ax,ax

c00161f8 <Semaphore::assertLocked(char const*)>:
c00161f8:	83 ec 0c             	sub    esp,0xc
c00161fb:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00161ff:	fa                   	cli    
c0016200:	8b 0d c8 c6 02 c0    	mov    ecx,DWORD PTR ds:0xc002c6c8
c0016206:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c001620b:	83 c1 01             	add    ecx,0x1
c001620e:	89 0d c8 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c8,ecx
c0016214:	8d 48 01             	lea    ecx,[eax+0x1]
c0016217:	89 0d c4 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c4,ecx
c001621d:	8b 0a                	mov    ecx,DWORD PTR [edx]
c001621f:	39 4a 0c             	cmp    DWORD PTR [edx+0xc],ecx
c0016222:	7c 28                	jl     c001624c <Semaphore::assertLocked(char const*)+0x54>
c0016224:	a3 c4 c6 02 c0       	mov    ds:0xc002c6c4,eax
c0016229:	85 c0                	test   eax,eax
c001622b:	75 0b                	jne    c0016238 <Semaphore::assertLocked(char const*)+0x40>
c001622d:	a1 c0 c6 02 c0       	mov    eax,ds:0xc002c6c0
c0016232:	85 c0                	test   eax,eax
c0016234:	75 32                	jne    c0016268 <Semaphore::assertLocked(char const*)+0x70>
c0016236:	66 90                	xchg   ax,ax
c0016238:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c001623d:	83 e8 01             	sub    eax,0x1
c0016240:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016245:	75 01                	jne    c0016248 <Semaphore::assertLocked(char const*)+0x50>
c0016247:	fb                   	sti    
c0016248:	83 c4 0c             	add    esp,0xc
c001624b:	c3                   	ret    
c001624c:	83 ec 0c             	sub    esp,0xc
c001624f:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0016253:	52                   	push   edx
c0016254:	e8 d2 b3 ff ff       	call   c001162b <KePanic(char const*)>
c0016259:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c001625e:	83 c4 10             	add    esp,0x10
c0016261:	83 e8 01             	sub    eax,0x1
c0016264:	eb be                	jmp    c0016224 <Semaphore::assertLocked(char const*)+0x2c>
c0016266:	66 90                	xchg   ax,ax
c0016268:	c7 05 c0 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6c0,0x0
c0016272:	e8 19 fe ff ff       	call   c0016090 <schedule()>
c0016277:	eb bf                	jmp    c0016238 <Semaphore::assertLocked(char const*)+0x40>
c0016279:	8d 76 00             	lea    esi,[esi+0x0]

c001627c <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c001627c:	83 ec 0c             	sub    esp,0xc
c001627f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016284:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0016288:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001628b:	e8 00 fe ff ff       	call   c0016090 <schedule()>
c0016290:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016295:	83 e8 01             	sub    eax,0x1
c0016298:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c001629d:	75 01                	jne    c00162a0 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)+0x24>
c001629f:	fb                   	sti    
c00162a0:	83 c4 0c             	add    esp,0xc
c00162a3:	c3                   	ret    

c00162a4 <blockTask(TaskState)>:
c00162a4:	83 ec 0c             	sub    esp,0xc
c00162a7:	fa                   	cli    
c00162a8:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c00162ad:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00162b1:	83 c0 01             	add    eax,0x1
c00162b4:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c00162b9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00162be:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00162c1:	e8 ca fd ff ff       	call   c0016090 <schedule()>
c00162c6:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c00162cb:	83 e8 01             	sub    eax,0x1
c00162ce:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c00162d3:	75 03                	jne    c00162d8 <blockTask(TaskState)+0x34>
c00162d5:	fb                   	sti    
c00162d6:	66 90                	xchg   ax,ax
c00162d8:	83 c4 0c             	add    esp,0xc
c00162db:	c3                   	ret    

c00162dc <waitTask(int, int*, int)>:
c00162dc:	83 ec 18             	sub    esp,0x18
c00162df:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00162e4:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00162e8:	89 50 45             	mov    DWORD PTR [eax+0x45],edx
c00162eb:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00162ef:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00162f4:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c00162f7:	6a 07                	push   0x7
c00162f9:	e8 a6 ff ff ff       	call   c00162a4 <blockTask(TaskState)>
c00162fe:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016303:	83 c4 10             	add    esp,0x10
c0016306:	8b 50 49             	mov    edx,DWORD PTR [eax+0x49]
c0016309:	85 d2                	test   edx,edx
c001630b:	74 0b                	je     c0016318 <waitTask(int, int*, int)+0x3c>
c001630d:	8b 40 4d             	mov    eax,DWORD PTR [eax+0x4d]
c0016310:	89 02                	mov    DWORD PTR [edx],eax
c0016312:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016317:	90                   	nop
c0016318:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c001631b:	83 c4 0c             	add    esp,0xc
c001631e:	c3                   	ret    
c001631f:	90                   	nop

c0016320 <milliTenthSleepUntil(unsigned int)>:
c0016320:	83 ec 0c             	sub    esp,0xc
c0016323:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016327:	39 05 ec b8 02 c0    	cmp    DWORD PTR ds:0xc002b8ec,eax
c001632d:	76 05                	jbe    c0016334 <milliTenthSleepUntil(unsigned int)+0x14>
c001632f:	90                   	nop
c0016330:	83 c4 0c             	add    esp,0xc
c0016333:	c3                   	ret    
c0016334:	fa                   	cli    
c0016335:	8b 15 c8 c6 02 c0    	mov    edx,DWORD PTR ds:0xc002c6c8
c001633b:	83 ec 08             	sub    esp,0x8
c001633e:	83 c2 01             	add    edx,0x1
c0016341:	8b 0d c4 c6 02 c0    	mov    ecx,DWORD PTR ds:0xc002c6c4
c0016347:	89 15 c8 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c8,edx
c001634d:	83 c1 01             	add    ecx,0x1
c0016350:	89 0d c4 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c4,ecx
c0016356:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001635c:	89 42 2c             	mov    DWORD PTR [edx+0x2c],eax
c001635f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016364:	50                   	push   eax
c0016365:	68 d8 c6 02 c0       	push   0xc002c6d8
c001636a:	e8 41 9a 00 00       	call   c001fdb0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001636f:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0016376:	e8 29 ff ff ff       	call   c00162a4 <blockTask(TaskState)>
c001637b:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c0016380:	83 c4 10             	add    esp,0x10
c0016383:	83 e8 01             	sub    eax,0x1
c0016386:	a3 c4 c6 02 c0       	mov    ds:0xc002c6c4,eax
c001638b:	85 c0                	test   eax,eax
c001638d:	75 09                	jne    c0016398 <milliTenthSleepUntil(unsigned int)+0x78>
c001638f:	a1 c0 c6 02 c0       	mov    eax,ds:0xc002c6c0
c0016394:	85 c0                	test   eax,eax
c0016396:	75 14                	jne    c00163ac <milliTenthSleepUntil(unsigned int)+0x8c>
c0016398:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c001639d:	83 e8 01             	sub    eax,0x1
c00163a0:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c00163a5:	75 89                	jne    c0016330 <milliTenthSleepUntil(unsigned int)+0x10>
c00163a7:	fb                   	sti    
c00163a8:	83 c4 0c             	add    esp,0xc
c00163ab:	c3                   	ret    
c00163ac:	c7 05 c0 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6c0,0x0
c00163b6:	e8 d5 fc ff ff       	call   c0016090 <schedule()>
c00163bb:	eb db                	jmp    c0016398 <milliTenthSleepUntil(unsigned int)+0x78>
c00163bd:	8d 76 00             	lea    esi,[esi+0x0]

c00163c0 <milliTenthSleep(unsigned int)>:
c00163c0:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00163c4:	a1 ec b8 02 c0       	mov    eax,ds:0xc002b8ec
c00163c9:	01 c2                	add    edx,eax
c00163cb:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00163cf:	e9 4c ff ff ff       	jmp    c0016320 <milliTenthSleepUntil(unsigned int)>

c00163d4 <sleep(unsigned int)>:
c00163d4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00163d8:	8d 04 80             	lea    eax,[eax+eax*4]
c00163db:	8d 04 80             	lea    eax,[eax+eax*4]
c00163de:	8d 04 80             	lea    eax,[eax+eax*4]
c00163e1:	8d 04 80             	lea    eax,[eax+eax*4]
c00163e4:	c1 e0 04             	shl    eax,0x4
c00163e7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00163eb:	eb d3                	jmp    c00163c0 <milliTenthSleep(unsigned int)>
c00163ed:	90                   	nop
c00163ee:	66 90                	xchg   ax,ax

c00163f0 <Semaphore::acquire()>:
c00163f0:	83 ec 0c             	sub    esp,0xc
c00163f3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00163f7:	fa                   	cli    
c00163f8:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c00163fd:	83 c0 01             	add    eax,0x1
c0016400:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016405:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c001640a:	8d 48 01             	lea    ecx,[eax+0x1]
c001640d:	89 0d c4 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c4,ecx
c0016413:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0016416:	3b 0a                	cmp    ecx,DWORD PTR [edx]
c0016418:	7d 2e                	jge    c0016448 <Semaphore::acquire()+0x58>
c001641a:	83 c1 01             	add    ecx,0x1
c001641d:	89 4a 0c             	mov    DWORD PTR [edx+0xc],ecx
c0016420:	a3 c4 c6 02 c0       	mov    ds:0xc002c6c4,eax
c0016425:	85 c0                	test   eax,eax
c0016427:	75 0b                	jne    c0016434 <Semaphore::acquire()+0x44>
c0016429:	a1 c0 c6 02 c0       	mov    eax,ds:0xc002c6c0
c001642e:	85 c0                	test   eax,eax
c0016430:	75 66                	jne    c0016498 <Semaphore::acquire()+0xa8>
c0016432:	66 90                	xchg   ax,ax
c0016434:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016439:	83 e8 01             	sub    eax,0x1
c001643c:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016441:	75 01                	jne    c0016444 <Semaphore::acquire()+0x54>
c0016443:	fb                   	sti    
c0016444:	83 c4 0c             	add    esp,0xc
c0016447:	c3                   	ret    
c0016448:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001644d:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0016454:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c0016457:	85 c9                	test   ecx,ecx
c0016459:	74 51                	je     c00164ac <Semaphore::acquire()+0xbc>
c001645b:	8b 42 08             	mov    eax,DWORD PTR [edx+0x8]
c001645e:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0016464:	89 48 20             	mov    DWORD PTR [eax+0x20],ecx
c0016467:	90                   	nop
c0016468:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001646d:	83 ec 0c             	sub    esp,0xc
c0016470:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c0016473:	68 24 29 02 c0       	push   0xc0022924
c0016478:	e8 c8 44 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001647d:	c7 04 24 05 00 00 00 	mov    DWORD PTR [esp],0x5
c0016484:	e8 1b fe ff ff       	call   c00162a4 <blockTask(TaskState)>
c0016489:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c001648e:	83 c4 10             	add    esp,0x10
c0016491:	83 e8 01             	sub    eax,0x1
c0016494:	eb 8a                	jmp    c0016420 <Semaphore::acquire()+0x30>
c0016496:	66 90                	xchg   ax,ax
c0016498:	c7 05 c0 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6c0,0x0
c00164a2:	e8 e9 fb ff ff       	call   c0016090 <schedule()>
c00164a7:	eb 8b                	jmp    c0016434 <Semaphore::acquire()+0x44>
c00164a9:	8d 76 00             	lea    esi,[esi+0x0]
c00164ac:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00164b1:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00164b4:	eb b2                	jmp    c0016468 <Semaphore::acquire()+0x78>
c00164b6:	66 90                	xchg   ax,ax

c00164b8 <taskReturned>:
c00164b8:	83 ec 18             	sub    esp,0x18
c00164bb:	68 44 29 02 c0       	push   0xc0022944
c00164c0:	e8 66 b1 ff ff       	call   c001162b <KePanic(char const*)>
c00164c5:	83 c4 10             	add    esp,0x10
c00164c8:	83 ec 0c             	sub    esp,0xc
c00164cb:	6a 02                	push   0x2
c00164cd:	e8 d2 fd ff ff       	call   c00162a4 <blockTask(TaskState)>
c00164d2:	fa                   	cli    
c00164d3:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c00164d8:	83 c0 01             	add    eax,0x1
c00164db:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c00164e0:	e8 ab fb ff ff       	call   c0016090 <schedule()>
c00164e5:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c00164ea:	83 c4 10             	add    esp,0x10
c00164ed:	83 e8 01             	sub    eax,0x1
c00164f0:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c00164f5:	85 c0                	test   eax,eax
c00164f7:	75 cf                	jne    c00164c8 <taskReturned+0x10>
c00164f9:	fb                   	sti    
c00164fa:	eb cc                	jmp    c00164c8 <taskReturned+0x10>

c00164fc <Thr::processFromPID(int)>:
c00164fc:	57                   	push   edi
c00164fd:	56                   	push   esi
c00164fe:	53                   	push   ebx
c00164ff:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016503:	fa                   	cli    
c0016504:	8b 0d c8 c6 02 c0    	mov    ecx,DWORD PTR ds:0xc002c6c8
c001650a:	83 ec 0c             	sub    esp,0xc
c001650d:	83 c1 01             	add    ecx,0x1
c0016510:	68 e4 c6 02 c0       	push   0xc002c6e4
c0016515:	89 0d c8 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c8,ecx
c001651b:	e8 cc 97 00 00       	call   c001fcec <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016520:	83 c4 10             	add    esp,0x10
c0016523:	89 c7                	mov    edi,eax
c0016525:	eb 15                	jmp    c001653c <Thr::processFromPID(int)+0x40>
c0016527:	90                   	nop
c0016528:	83 ec 0c             	sub    esp,0xc
c001652b:	68 e4 c6 02 c0       	push   0xc002c6e4
c0016530:	e8 b7 97 00 00       	call   c001fcec <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016535:	83 c4 10             	add    esp,0x10
c0016538:	39 f8                	cmp    eax,edi
c001653a:	74 50                	je     c001658c <Thr::processFromPID(int)+0x90>
c001653c:	83 ec 0c             	sub    esp,0xc
c001653f:	68 e4 c6 02 c0       	push   0xc002c6e4
c0016544:	e8 a3 97 00 00       	call   c001fcec <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016549:	c7 04 24 e4 c6 02 c0 	mov    DWORD PTR [esp],0xc002c6e4
c0016550:	89 c3                	mov    ebx,eax
c0016552:	e8 9d 97 00 00       	call   c001fcf4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0016557:	58                   	pop    eax
c0016558:	5a                   	pop    edx
c0016559:	53                   	push   ebx
c001655a:	68 e4 c6 02 c0       	push   0xc002c6e4
c001655f:	e8 4c 98 00 00       	call   c001fdb0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0016564:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0016567:	83 c4 10             	add    esp,0x10
c001656a:	39 30                	cmp    DWORD PTR [eax],esi
c001656c:	75 ba                	jne    c0016528 <Thr::processFromPID(int)+0x2c>
c001656e:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016573:	83 e8 01             	sub    eax,0x1
c0016576:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c001657b:	74 0b                	je     c0016588 <Thr::processFromPID(int)+0x8c>
c001657d:	8d 76 00             	lea    esi,[esi+0x0]
c0016580:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0016583:	5b                   	pop    ebx
c0016584:	5e                   	pop    esi
c0016585:	5f                   	pop    edi
c0016586:	c3                   	ret    
c0016587:	90                   	nop
c0016588:	fb                   	sti    
c0016589:	eb f5                	jmp    c0016580 <Thr::processFromPID(int)+0x84>
c001658b:	90                   	nop
c001658c:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016591:	83 e8 01             	sub    eax,0x1
c0016594:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016599:	75 05                	jne    c00165a0 <Thr::processFromPID(int)+0xa4>
c001659b:	fb                   	sti    
c001659c:	5b                   	pop    ebx
c001659d:	5e                   	pop    esi
c001659e:	5f                   	pop    edi
c001659f:	c3                   	ret    
c00165a0:	5b                   	pop    ebx
c00165a1:	31 c0                	xor    eax,eax
c00165a3:	5e                   	pop    esi
c00165a4:	5f                   	pop    edi
c00165a5:	c3                   	ret    
c00165a6:	66 90                	xchg   ax,ax

c00165a8 <unblockTask(ThreadControlBlock*)>:
c00165a8:	53                   	push   ebx
c00165a9:	83 ec 08             	sub    esp,0x8
c00165ac:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00165b0:	fa                   	cli    
c00165b1:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c00165b6:	83 c0 01             	add    eax,0x1
c00165b9:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c00165be:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00165c1:	85 c0                	test   eax,eax
c00165c3:	74 67                	je     c001662c <unblockTask(ThreadControlBlock*)+0x84>
c00165c5:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00165c8:	83 f8 01             	cmp    eax,0x1
c00165cb:	74 37                	je     c0016604 <unblockTask(ThreadControlBlock*)+0x5c>
c00165cd:	83 ec 0c             	sub    esp,0xc
c00165d0:	68 e4 c6 02 c0       	push   0xc002c6e4
c00165d5:	e8 12 97 00 00       	call   c001fcec <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00165da:	83 c4 10             	add    esp,0x10
c00165dd:	85 c0                	test   eax,eax
c00165df:	75 1b                	jne    c00165fc <unblockTask(ThreadControlBlock*)+0x54>
c00165e1:	eb 5d                	jmp    c0016640 <unblockTask(ThreadControlBlock*)+0x98>
c00165e3:	90                   	nop
c00165e4:	83 ec 08             	sub    esp,0x8
c00165e7:	50                   	push   eax
c00165e8:	68 e4 c6 02 c0       	push   0xc002c6e4
c00165ed:	e8 1a 9a 00 00       	call   c002000c <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c00165f2:	83 c4 10             	add    esp,0x10
c00165f5:	85 c0                	test   eax,eax
c00165f7:	74 47                	je     c0016640 <unblockTask(ThreadControlBlock*)+0x98>
c00165f9:	8d 76 00             	lea    esi,[esi+0x0]
c00165fc:	39 c3                	cmp    ebx,eax
c00165fe:	75 e4                	jne    c00165e4 <unblockTask(ThreadControlBlock*)+0x3c>
c0016600:	eb 12                	jmp    c0016614 <unblockTask(ThreadControlBlock*)+0x6c>
c0016602:	66 90                	xchg   ax,ax
c0016604:	83 ec 0c             	sub    esp,0xc
c0016607:	68 c3 28 02 c0       	push   0xc00228c3
c001660c:	e8 34 43 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0016611:	83 c4 10             	add    esp,0x10
c0016614:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016619:	83 e8 01             	sub    eax,0x1
c001661c:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016621:	75 01                	jne    c0016624 <unblockTask(ThreadControlBlock*)+0x7c>
c0016623:	fb                   	sti    
c0016624:	83 c4 08             	add    esp,0x8
c0016627:	5b                   	pop    ebx
c0016628:	c3                   	ret    
c0016629:	8d 76 00             	lea    esi,[esi+0x0]
c001662c:	83 ec 0c             	sub    esp,0xc
c001662f:	68 ac 28 02 c0       	push   0xc00228ac
c0016634:	e8 0c 43 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0016639:	83 c4 10             	add    esp,0x10
c001663c:	eb d6                	jmp    c0016614 <unblockTask(ThreadControlBlock*)+0x6c>
c001663e:	66 90                	xchg   ax,ax
c0016640:	83 ec 08             	sub    esp,0x8
c0016643:	53                   	push   ebx
c0016644:	68 e4 c6 02 c0       	push   0xc002c6e4
c0016649:	e8 62 97 00 00       	call   c001fdb0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001664e:	83 c4 10             	add    esp,0x10
c0016651:	eb c1                	jmp    c0016614 <unblockTask(ThreadControlBlock*)+0x6c>
c0016653:	90                   	nop

c0016654 <cleanupTerminatedTask(ThreadControlBlock*)>:
c0016654:	55                   	push   ebp
c0016655:	57                   	push   edi
c0016656:	56                   	push   esi
c0016657:	53                   	push   ebx
c0016658:	83 ec 1c             	sub    esp,0x1c
c001665b:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001665f:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0016662:	8b a8 16 05 00 00    	mov    ebp,DWORD PTR [eax+0x516]
c0016668:	85 ed                	test   ebp,ebp
c001666a:	7e 28                	jle    c0016694 <cleanupTerminatedTask(ThreadControlBlock*)+0x40>
c001666c:	31 f6                	xor    esi,esi
c001666e:	66 90                	xchg   ax,ax
c0016670:	83 ec 0c             	sub    esp,0xc
c0016673:	8b bc b0 1a 05 00 00 	mov    edi,DWORD PTR [eax+esi*4+0x51a]
c001667a:	83 c6 01             	add    esi,0x1
c001667d:	57                   	push   edi
c001667e:	e8 43 14 ff ff       	call   c0007ac6 <free>
c0016683:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0016686:	83 c4 10             	add    esp,0x10
c0016689:	39 b0 16 05 00 00    	cmp    DWORD PTR [eax+0x516],esi
c001668f:	7f df                	jg     c0016670 <cleanupTerminatedTask(ThreadControlBlock*)+0x1c>
c0016691:	8d 76 00             	lea    esi,[esi+0x0]
c0016694:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c001669e:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c00166a3:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c00166a6:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c00166a9:	d3 c0                	rol    eax,cl
c00166ab:	66 8b 8a 04 05 00 00 	mov    cx,WORD PTR [edx+0x504]
c00166b2:	21 c8                	and    eax,ecx
c00166b4:	66 89 82 04 05 00 00 	mov    WORD PTR [edx+0x504],ax
c00166bb:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c00166be:	89 f7                	mov    edi,esi
c00166c0:	66 83 be 04 05 00 00 00 	cmp    WORD PTR [esi+0x504],0x0
c00166c8:	0f 85 72 01 00 00    	jne    c0016840 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ec>
c00166ce:	8b ae 1a 07 00 00    	mov    ebp,DWORD PTR [esi+0x71a]
c00166d4:	85 ed                	test   ebp,ebp
c00166d6:	74 1c                	je     c00166f4 <cleanupTerminatedTask(ThreadControlBlock*)+0xa0>
c00166d8:	83 ec 0c             	sub    esp,0xc
c00166db:	55                   	push   ebp
c00166dc:	e8 5b ac ff ff       	call   c001133c <EnvVarContainer::~EnvVarContainer()>
c00166e1:	59                   	pop    ecx
c00166e2:	5e                   	pop    esi
c00166e3:	6a 0c                	push   0xc
c00166e5:	55                   	push   ebp
c00166e6:	e8 2d 41 ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c00166eb:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c00166ee:	83 c4 10             	add    esp,0x10
c00166f1:	89 f7                	mov    edi,esi
c00166f3:	90                   	nop
c00166f4:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c00166fa:	85 c0                	test   eax,eax
c00166fc:	0f 84 b2 00 00 00    	je     c00167b4 <cleanupTerminatedTask(ThreadControlBlock*)+0x160>
c0016702:	8b 4b 51             	mov    ecx,DWORD PTR [ebx+0x51]
c0016705:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0016709:	31 c9                	xor    ecx,ecx
c001670b:	eb 17                	jmp    c0016724 <cleanupTerminatedTask(ThreadControlBlock*)+0xd0>
c001670d:	8d 76 00             	lea    esi,[esi+0x0]
c0016710:	83 c1 01             	add    ecx,0x1
c0016713:	83 f9 10             	cmp    ecx,0x10
c0016716:	0f 84 98 00 00 00    	je     c00167b4 <cleanupTerminatedTask(ThreadControlBlock*)+0x160>
c001671c:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c0016722:	66 90                	xchg   ax,ax
c0016724:	0f b7 90 04 05 00 00 	movzx  edx,WORD PTR [eax+0x504]
c001672b:	d3 fa                	sar    edx,cl
c001672d:	80 e2 01             	and    dl,0x1
c0016730:	74 de                	je     c0016710 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c0016732:	8d 14 c9             	lea    edx,[ecx+ecx*8]
c0016735:	01 d2                	add    edx,edx
c0016737:	01 ca                	add    edx,ecx
c0016739:	8d 14 92             	lea    edx,[edx+edx*4]
c001673c:	01 d0                	add    eax,edx
c001673e:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c0016744:	83 fd 07             	cmp    ebp,0x7
c0016747:	75 c7                	jne    c0016710 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c0016749:	05 40 02 00 00       	add    eax,0x240
c001674e:	8b 68 11             	mov    ebp,DWORD PTR [eax+0x11]
c0016751:	83 fd ff             	cmp    ebp,0xffffffff
c0016754:	0f 8c ee 00 00 00    	jl     c0016848 <cleanupTerminatedTask(ThreadControlBlock*)+0x1f4>
c001675a:	0f 84 ac 01 00 00    	je     c001690c <cleanupTerminatedTask(ThreadControlBlock*)+0x2b8>
c0016760:	85 ed                	test   ebp,ebp
c0016762:	0f 84 90 01 00 00    	je     c00168f8 <cleanupTerminatedTask(ThreadControlBlock*)+0x2a4>
c0016768:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c001676a:	75 a4                	jne    c0016710 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c001676c:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c0016772:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0016776:	01 d0                	add    eax,edx
c0016778:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c001677c:	83 ec 0c             	sub    esp,0xc
c001677f:	89 b8 59 02 00 00    	mov    DWORD PTR [eax+0x259],edi
c0016785:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0016788:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c001678e:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c0016795:	50                   	push   eax
c0016796:	e8 0d fe ff ff       	call   c00165a8 <unblockTask(ThreadControlBlock*)>
c001679b:	83 c4 10             	add    esp,0x10
c001679e:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c00167a1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00167a5:	89 f7                	mov    edi,esi
c00167a7:	83 c1 01             	add    ecx,0x1
c00167aa:	83 f9 10             	cmp    ecx,0x10
c00167ad:	0f 85 69 ff ff ff    	jne    c001671c <cleanupTerminatedTask(ThreadControlBlock*)+0xc8>
c00167b3:	90                   	nop
c00167b4:	8b 86 06 05 00 00    	mov    eax,DWORD PTR [esi+0x506]
c00167ba:	85 c0                	test   eax,eax
c00167bc:	74 62                	je     c0016820 <cleanupTerminatedTask(ThreadControlBlock*)+0x1cc>
c00167be:	8b 96 0a 05 00 00    	mov    edx,DWORD PTR [esi+0x50a]
c00167c4:	3b 82 06 05 00 00    	cmp    eax,DWORD PTR [edx+0x506]
c00167ca:	74 54                	je     c0016820 <cleanupTerminatedTask(ThreadControlBlock*)+0x1cc>
c00167cc:	83 ec 0c             	sub    esp,0xc
c00167cf:	68 e4 c6 02 c0       	push   0xc002c6e4
c00167d4:	e8 13 95 00 00       	call   c001fcec <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00167d9:	c7 04 24 e4 c6 02 c0 	mov    DWORD PTR [esp],0xc002c6e4
c00167e0:	89 c7                	mov    edi,eax
c00167e2:	e8 e9 94 00 00       	call   c001fcd0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00167e7:	83 c4 10             	add    esp,0x10
c00167ea:	84 c0                	test   al,al
c00167ec:	0f 84 ce 00 00 00    	je     c00168c0 <cleanupTerminatedTask(ThreadControlBlock*)+0x26c>
c00167f2:	66 90                	xchg   ax,ax
c00167f4:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00167f7:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c00167fd:	85 d2                	test   edx,edx
c00167ff:	74 0f                	je     c0016810 <cleanupTerminatedTask(ThreadControlBlock*)+0x1bc>
c0016801:	83 ec 0c             	sub    esp,0xc
c0016804:	8b 02                	mov    eax,DWORD PTR [edx]
c0016806:	52                   	push   edx
c0016807:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001680a:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001680d:	83 c4 10             	add    esp,0x10
c0016810:	c7 80 06 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x506],0x0
c001681a:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c001681d:	8d 76 00             	lea    esi,[esi+0x0]
c0016820:	8b 9f 12 05 00 00    	mov    ebx,DWORD PTR [edi+0x512]
c0016826:	85 db                	test   ebx,ebx
c0016828:	74 16                	je     c0016840 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ec>
c001682a:	83 ec 0c             	sub    esp,0xc
c001682d:	53                   	push   ebx
c001682e:	e8 7f 33 ff ff       	call   c0009bb2 <VAS::~VAS()>
c0016833:	58                   	pop    eax
c0016834:	5a                   	pop    edx
c0016835:	6a 14                	push   0x14
c0016837:	53                   	push   ebx
c0016838:	e8 db 3f ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c001683d:	83 c4 10             	add    esp,0x10
c0016840:	83 c4 1c             	add    esp,0x1c
c0016843:	5b                   	pop    ebx
c0016844:	5e                   	pop    esi
c0016845:	5f                   	pop    edi
c0016846:	5d                   	pop    ebp
c0016847:	c3                   	ret    
c0016848:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001684c:	83 ec 0c             	sub    esp,0xc
c001684f:	68 78 29 02 c0       	push   0xc0022978
c0016854:	e8 d2 ad ff ff       	call   c001162b <KePanic(char const*)>
c0016859:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c001685c:	83 c4 10             	add    esp,0x10
c001685f:	89 f7                	mov    edi,esi
c0016861:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016865:	e9 a6 fe ff ff       	jmp    c0016710 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c001686a:	66 90                	xchg   ax,ax
c001686c:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016872:	39 82 06 05 00 00    	cmp    DWORD PTR [edx+0x506],eax
c0016878:	75 1e                	jne    c0016898 <cleanupTerminatedTask(ThreadControlBlock*)+0x244>
c001687a:	83 ec 0c             	sub    esp,0xc
c001687d:	68 e0 29 02 c0       	push   0xc00229e0
c0016882:	e8 be 40 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0016887:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001688e:	e8 11 fa ff ff       	call   c00162a4 <blockTask(TaskState)>
c0016893:	83 c4 10             	add    esp,0x10
c0016896:	66 90                	xchg   ax,ax
c0016898:	83 ec 08             	sub    esp,0x8
c001689b:	56                   	push   esi
c001689c:	68 e4 c6 02 c0       	push   0xc002c6e4
c00168a1:	e8 0a 95 00 00       	call   c001fdb0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00168a6:	c7 04 24 e4 c6 02 c0 	mov    DWORD PTR [esp],0xc002c6e4
c00168ad:	e8 3a 94 00 00       	call   c001fcec <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00168b2:	83 c4 10             	add    esp,0x10
c00168b5:	39 f8                	cmp    eax,edi
c00168b7:	0f 84 37 ff ff ff    	je     c00167f4 <cleanupTerminatedTask(ThreadControlBlock*)+0x1a0>
c00168bd:	8d 76 00             	lea    esi,[esi+0x0]
c00168c0:	83 ec 0c             	sub    esp,0xc
c00168c3:	68 e4 c6 02 c0       	push   0xc002c6e4
c00168c8:	e8 1f 94 00 00       	call   c001fcec <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00168cd:	c7 04 24 e4 c6 02 c0 	mov    DWORD PTR [esp],0xc002c6e4
c00168d4:	89 c6                	mov    esi,eax
c00168d6:	e8 19 94 00 00       	call   c001fcf4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c00168db:	83 c4 10             	add    esp,0x10
c00168de:	39 f3                	cmp    ebx,esi
c00168e0:	74 b6                	je     c0016898 <cleanupTerminatedTask(ThreadControlBlock*)+0x244>
c00168e2:	8b 56 3c             	mov    edx,DWORD PTR [esi+0x3c]
c00168e5:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00168e8:	39 82 0a 05 00 00    	cmp    DWORD PTR [edx+0x50a],eax
c00168ee:	75 a8                	jne    c0016898 <cleanupTerminatedTask(ThreadControlBlock*)+0x244>
c00168f0:	e9 77 ff ff ff       	jmp    c001686c <cleanupTerminatedTask(ThreadControlBlock*)+0x218>
c00168f5:	8d 76 00             	lea    esi,[esi+0x0]
c00168f8:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00168fc:	83 ec 0c             	sub    esp,0xc
c00168ff:	68 ac 29 02 c0       	push   0xc00229ac
c0016904:	e9 4b ff ff ff       	jmp    c0016854 <cleanupTerminatedTask(ThreadControlBlock*)+0x200>
c0016909:	8d 76 00             	lea    esi,[esi+0x0]
c001690c:	8b 36                	mov    esi,DWORD PTR [esi]
c001690e:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0016912:	89 70 11             	mov    DWORD PTR [eax+0x11],esi
c0016915:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0016918:	8b b8 0a 05 00 00    	mov    edi,DWORD PTR [eax+0x50a]
c001691e:	01 d7                	add    edi,edx
c0016920:	89 f8                	mov    eax,edi
c0016922:	e9 51 fe ff ff       	jmp    c0016778 <cleanupTerminatedTask(ThreadControlBlock*)+0x124>
c0016927:	90                   	nop

c0016928 <cleanerTaskFunction(void*)>:
c0016928:	53                   	push   ebx
c0016929:	83 ec 08             	sub    esp,0x8
c001692c:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016931:	83 e8 01             	sub    eax,0x1
c0016934:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016939:	75 01                	jne    c001693c <cleanerTaskFunction(void*)+0x14>
c001693b:	fb                   	sti    
c001693c:	fa                   	cli    
c001693d:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016942:	80 3d ac c6 02 c0 00 	cmp    BYTE PTR ds:0xc002c6ac,0x0
c0016949:	8d 50 01             	lea    edx,[eax+0x1]
c001694c:	89 15 c8 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c8,edx
c0016952:	0f 84 c4 00 00 00    	je     c0016a1c <cleanerTaskFunction(void*)+0xf4>
c0016958:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c001695d:	85 c0                	test   eax,eax
c001695f:	75 03                	jne    c0016964 <cleanerTaskFunction(void*)+0x3c>
c0016961:	fb                   	sti    
c0016962:	66 90                	xchg   ax,ax
c0016964:	c6 05 ac c6 02 c0 00 	mov    BYTE PTR ds:0xc002c6ac,0x0
c001696b:	fa                   	cli    
c001696c:	8b 15 c8 c6 02 c0    	mov    edx,DWORD PTR ds:0xc002c6c8
c0016972:	8b 0d c4 c6 02 c0    	mov    ecx,DWORD PTR ds:0xc002c6c4
c0016978:	83 c2 01             	add    edx,0x1
c001697b:	83 c1 01             	add    ecx,0x1
c001697e:	89 15 c8 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c8,edx
c0016984:	89 0d c4 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c4,ecx
c001698a:	fa                   	cli    
c001698b:	8b 1d c8 c6 02 c0    	mov    ebx,DWORD PTR ds:0xc002c6c8
c0016991:	83 c3 01             	add    ebx,0x1
c0016994:	89 1d c8 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c8,ebx
c001699a:	eb 28                	jmp    c00169c4 <cleanerTaskFunction(void*)+0x9c>
c001699c:	83 ec 0c             	sub    esp,0xc
c001699f:	68 cc c6 02 c0       	push   0xc002c6cc
c00169a4:	e8 43 93 00 00       	call   c001fcec <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00169a9:	c7 04 24 cc c6 02 c0 	mov    DWORD PTR [esp],0xc002c6cc
c00169b0:	89 c3                	mov    ebx,eax
c00169b2:	e8 3d 93 00 00       	call   c001fcf4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c00169b7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00169ba:	e8 95 fc ff ff       	call   c0016654 <cleanupTerminatedTask(ThreadControlBlock*)>
c00169bf:	83 c4 10             	add    esp,0x10
c00169c2:	66 90                	xchg   ax,ax
c00169c4:	83 ec 0c             	sub    esp,0xc
c00169c7:	68 cc c6 02 c0       	push   0xc002c6cc
c00169cc:	e8 ff 92 00 00       	call   c001fcd0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00169d1:	83 c4 10             	add    esp,0x10
c00169d4:	84 c0                	test   al,al
c00169d6:	74 c4                	je     c001699c <cleanerTaskFunction(void*)+0x74>
c00169d8:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c00169dd:	83 e8 01             	sub    eax,0x1
c00169e0:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c00169e5:	75 01                	jne    c00169e8 <cleanerTaskFunction(void*)+0xc0>
c00169e7:	fb                   	sti    
c00169e8:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c00169ed:	83 e8 01             	sub    eax,0x1
c00169f0:	a3 c4 c6 02 c0       	mov    ds:0xc002c6c4,eax
c00169f5:	0f 85 31 ff ff ff    	jne    c001692c <cleanerTaskFunction(void*)+0x4>
c00169fb:	a1 c0 c6 02 c0       	mov    eax,ds:0xc002c6c0
c0016a00:	85 c0                	test   eax,eax
c0016a02:	0f 84 24 ff ff ff    	je     c001692c <cleanerTaskFunction(void*)+0x4>
c0016a08:	c7 05 c0 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6c0,0x0
c0016a12:	e8 79 f6 ff ff       	call   c0016090 <schedule()>
c0016a17:	e9 10 ff ff ff       	jmp    c001692c <cleanerTaskFunction(void*)+0x4>
c0016a1c:	83 ec 0c             	sub    esp,0xc
c0016a1f:	6a 02                	push   0x2
c0016a21:	e8 56 f8 ff ff       	call   c001627c <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0016a26:	83 c4 10             	add    esp,0x10
c0016a29:	e9 36 ff ff ff       	jmp    c0016964 <cleanerTaskFunction(void*)+0x3c>
c0016a2e:	66 90                	xchg   ax,ax

c0016a30 <terminateTask(int)>:
c0016a30:	83 ec 14             	sub    esp,0x14
c0016a33:	fa                   	cli    
c0016a34:	8b 15 c8 c6 02 c0    	mov    edx,DWORD PTR ds:0xc002c6c8
c0016a3a:	8b 0d c4 c6 02 c0    	mov    ecx,DWORD PTR ds:0xc002c6c4
c0016a40:	83 c2 01             	add    edx,0x1
c0016a43:	83 c1 01             	add    ecx,0x1
c0016a46:	89 15 c8 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c8,edx
c0016a4c:	89 0d c4 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c4,ecx
c0016a52:	fa                   	cli    
c0016a53:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016a58:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0016a5c:	83 c0 01             	add    eax,0x1
c0016a5f:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016a64:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016a69:	89 50 51             	mov    DWORD PTR [eax+0x51],edx
c0016a6c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016a71:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0016a74:	50                   	push   eax
c0016a75:	68 cc c6 02 c0       	push   0xc002c6cc
c0016a7a:	e8 31 93 00 00       	call   c001fdb0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0016a7f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016a84:	83 c4 10             	add    esp,0x10
c0016a87:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c0016a8e:	a1 a8 c6 02 c0       	mov    eax,ds:0xc002c6a8
c0016a93:	85 c0                	test   eax,eax
c0016a95:	74 65                	je     c0016afc <terminateTask(int)+0xcc>
c0016a97:	83 ec 0c             	sub    esp,0xc
c0016a9a:	c6 05 ac c6 02 c0 01 	mov    BYTE PTR ds:0xc002c6ac,0x1
c0016aa1:	50                   	push   eax
c0016aa2:	e8 01 fb ff ff       	call   c00165a8 <unblockTask(ThreadControlBlock*)>
c0016aa7:	83 c4 10             	add    esp,0x10
c0016aaa:	66 90                	xchg   ax,ax
c0016aac:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016ab1:	83 e8 01             	sub    eax,0x1
c0016ab4:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016ab9:	75 01                	jne    c0016abc <terminateTask(int)+0x8c>
c0016abb:	fb                   	sti    
c0016abc:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c0016ac1:	83 e8 01             	sub    eax,0x1
c0016ac4:	a3 c4 c6 02 c0       	mov    ds:0xc002c6c4,eax
c0016ac9:	75 09                	jne    c0016ad4 <terminateTask(int)+0xa4>
c0016acb:	83 3d c0 c6 02 c0 00 	cmp    DWORD PTR ds:0xc002c6c0,0x0
c0016ad2:	75 3c                	jne    c0016b10 <terminateTask(int)+0xe0>
c0016ad4:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016ad9:	83 e8 01             	sub    eax,0x1
c0016adc:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016ae1:	75 01                	jne    c0016ae4 <terminateTask(int)+0xb4>
c0016ae3:	fb                   	sti    
c0016ae4:	fa                   	cli    
c0016ae5:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016aea:	83 c0 01             	add    eax,0x1
c0016aed:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016af2:	66 90                	xchg   ax,ax
c0016af4:	e8 97 f5 ff ff       	call   c0016090 <schedule()>
c0016af9:	eb d9                	jmp    c0016ad4 <terminateTask(int)+0xa4>
c0016afb:	90                   	nop
c0016afc:	83 ec 0c             	sub    esp,0xc
c0016aff:	68 da 28 02 c0       	push   0xc00228da
c0016b04:	e8 3c 3e ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0016b09:	83 c4 10             	add    esp,0x10
c0016b0c:	eb 9e                	jmp    c0016aac <terminateTask(int)+0x7c>
c0016b0e:	66 90                	xchg   ax,ax
c0016b10:	c7 05 c0 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6c0,0x0
c0016b1a:	eb d8                	jmp    c0016af4 <terminateTask(int)+0xc4>

c0016b1c <Thr::terminateFromIRQ(int)>:
c0016b1c:	83 ec 18             	sub    esp,0x18
c0016b1f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016b23:	50                   	push   eax
c0016b24:	e8 07 ff ff ff       	call   c0016a30 <terminateTask(int)>
c0016b29:	90                   	nop
c0016b2a:	66 90                	xchg   ax,ax

c0016b2c <Semaphore::release()>:
c0016b2c:	83 ec 0c             	sub    esp,0xc
c0016b2f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0016b33:	fa                   	cli    
c0016b34:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016b39:	83 c0 01             	add    eax,0x1
c0016b3c:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016b41:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c0016b46:	8d 48 01             	lea    ecx,[eax+0x1]
c0016b49:	89 0d c4 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c4,ecx
c0016b4f:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c0016b52:	85 c9                	test   ecx,ecx
c0016b54:	74 42                	je     c0016b98 <Semaphore::release()+0x6c>
c0016b56:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c0016b59:	83 ec 0c             	sub    esp,0xc
c0016b5c:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0016b5f:	51                   	push   ecx
c0016b60:	e8 43 fa ff ff       	call   c00165a8 <unblockTask(ThreadControlBlock*)>
c0016b65:	a1 c4 c6 02 c0       	mov    eax,ds:0xc002c6c4
c0016b6a:	83 c4 10             	add    esp,0x10
c0016b6d:	83 e8 01             	sub    eax,0x1
c0016b70:	a3 c4 c6 02 c0       	mov    ds:0xc002c6c4,eax
c0016b75:	85 c0                	test   eax,eax
c0016b77:	75 0b                	jne    c0016b84 <Semaphore::release()+0x58>
c0016b79:	a1 c0 c6 02 c0       	mov    eax,ds:0xc002c6c0
c0016b7e:	85 c0                	test   eax,eax
c0016b80:	75 22                	jne    c0016ba4 <Semaphore::release()+0x78>
c0016b82:	66 90                	xchg   ax,ax
c0016b84:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016b89:	83 e8 01             	sub    eax,0x1
c0016b8c:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016b91:	75 01                	jne    c0016b94 <Semaphore::release()+0x68>
c0016b93:	fb                   	sti    
c0016b94:	83 c4 0c             	add    esp,0xc
c0016b97:	c3                   	ret    
c0016b98:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0016b9b:	83 e9 01             	sub    ecx,0x1
c0016b9e:	89 4a 0c             	mov    DWORD PTR [edx+0xc],ecx
c0016ba1:	eb cd                	jmp    c0016b70 <Semaphore::release()+0x44>
c0016ba3:	90                   	nop
c0016ba4:	c7 05 c0 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6c0,0x0
c0016bae:	e8 dd f4 ff ff       	call   c0016090 <schedule()>
c0016bb3:	eb cf                	jmp    c0016b84 <Semaphore::release()+0x58>
c0016bb5:	8d 76 00             	lea    esi,[esi+0x0]

c0016bb8 <__static_initialization_and_destruction_0(int, int)>:
c0016bb8:	83 ec 0c             	sub    esp,0xc
c0016bbb:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0016bc0:	0f 85 8e 00 00 00    	jne    c0016c54 <__static_initialization_and_destruction_0(int, int)+0x9c>
c0016bc6:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0016bce:	0f 85 80 00 00 00    	jne    c0016c54 <__static_initialization_and_destruction_0(int, int)+0x9c>
c0016bd4:	83 ec 0c             	sub    esp,0xc
c0016bd7:	68 e4 c6 02 c0       	push   0xc002c6e4
c0016bdc:	e8 83 94 00 00       	call   c0020064 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0016be1:	83 c4 10             	add    esp,0x10
c0016be4:	83 ec 04             	sub    esp,0x4
c0016be7:	68 b0 35 02 c0       	push   0xc00235b0
c0016bec:	68 e4 c6 02 c0       	push   0xc002c6e4
c0016bf1:	68 14 00 02 c0       	push   0xc0020014
c0016bf6:	e8 cd 3b ff ff       	call   c000a7c8 <__cxa_atexit>
c0016bfb:	83 c4 10             	add    esp,0x10
c0016bfe:	83 ec 0c             	sub    esp,0xc
c0016c01:	68 d8 c6 02 c0       	push   0xc002c6d8
c0016c06:	e8 59 94 00 00       	call   c0020064 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0016c0b:	83 c4 10             	add    esp,0x10
c0016c0e:	83 ec 04             	sub    esp,0x4
c0016c11:	68 b0 35 02 c0       	push   0xc00235b0
c0016c16:	68 d8 c6 02 c0       	push   0xc002c6d8
c0016c1b:	68 14 00 02 c0       	push   0xc0020014
c0016c20:	e8 a3 3b ff ff       	call   c000a7c8 <__cxa_atexit>
c0016c25:	83 c4 10             	add    esp,0x10
c0016c28:	83 ec 0c             	sub    esp,0xc
c0016c2b:	68 cc c6 02 c0       	push   0xc002c6cc
c0016c30:	e8 2f 94 00 00       	call   c0020064 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0016c35:	83 c4 10             	add    esp,0x10
c0016c38:	83 ec 04             	sub    esp,0x4
c0016c3b:	68 b0 35 02 c0       	push   0xc00235b0
c0016c40:	68 cc c6 02 c0       	push   0xc002c6cc
c0016c45:	68 14 00 02 c0       	push   0xc0020014
c0016c4a:	e8 79 3b ff ff       	call   c000a7c8 <__cxa_atexit>
c0016c4f:	83 c4 10             	add    esp,0x10
c0016c52:	66 90                	xchg   ax,ax
c0016c54:	90                   	nop
c0016c55:	83 c4 0c             	add    esp,0xc
c0016c58:	c3                   	ret    
c0016c59:	8d 76 00             	lea    esi,[esi+0x0]

c0016c5c <_GLOBAL__sub_I__ZN3Thr7nextPIDE>:
c0016c5c:	83 ec 0c             	sub    esp,0xc
c0016c5f:	83 ec 08             	sub    esp,0x8
c0016c62:	68 ff ff 00 00       	push   0xffff
c0016c67:	6a 01                	push   0x1
c0016c69:	e8 4a ff ff ff       	call   c0016bb8 <__static_initialization_and_destruction_0(int, int)>
c0016c6e:	83 c4 10             	add    esp,0x10
c0016c71:	83 c4 0c             	add    esp,0xc
c0016c74:	c3                   	ret    

c0016c75 <Vm::inbv(unsigned short)>:
c0016c75:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0016c79:	66 81 fa fe fe       	cmp    dx,0xfefe
c0016c7e:	75 06                	jne    c0016c86 <Vm::inbv(unsigned short)+0x11>
c0016c80:	a0 2c c7 02 c0       	mov    al,ds:0xc002c72c
c0016c85:	c3                   	ret    
c0016c86:	ec                   	in     al,dx
c0016c87:	c3                   	ret    

c0016c88 <Vm::outbv(unsigned short, unsigned char)>:
c0016c88:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0016c8c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016c90:	66 81 fa fe fe       	cmp    dx,0xfefe
c0016c95:	75 25                	jne    c0016cbc <Vm::outbv(unsigned short, unsigned char)+0x34>
c0016c97:	8b 0d 2c c7 02 c0    	mov    ecx,DWORD PTR ds:0xc002c72c
c0016c9d:	8d 51 01             	lea    edx,[ecx+0x1]
c0016ca0:	88 81 40 c7 02 c0    	mov    BYTE PTR [ecx-0x3ffd38c0],al
c0016ca6:	89 15 2c c7 02 c0    	mov    DWORD PTR ds:0xc002c72c,edx
c0016cac:	83 fa 20             	cmp    edx,0x20
c0016caf:	75 0c                	jne    c0016cbd <Vm::outbv(unsigned short, unsigned char)+0x35>
c0016cb1:	c7 05 2c c7 02 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc002c72c,0x1f
c0016cbb:	c3                   	ret    
c0016cbc:	ee                   	out    dx,al
c0016cbd:	c3                   	ret    

c0016cbe <Vm::realToLinear(unsigned short, unsigned short)>:
c0016cbe:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0016cc3:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0016cc8:	c1 e0 04             	shl    eax,0x4
c0016ccb:	01 d0                	add    eax,edx
c0016ccd:	c3                   	ret    

c0016cce <Vm::getSegment(unsigned int)>:
c0016cce:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016cd2:	c1 e8 10             	shr    eax,0x10
c0016cd5:	c3                   	ret    

c0016cd6 <Vm::getOffset(unsigned int)>:
c0016cd6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016cda:	c3                   	ret    

c0016cdb <Vm::mainloop2()>:
c0016cdb:	83 ec 18             	sub    esp,0x18
c0016cde:	fa                   	cli    
c0016cdf:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c0016ce5:	6a 02                	push   0x2
c0016ce7:	c6 05 25 c7 02 c0 01 	mov    BYTE PTR ds:0xc002c725,0x1
c0016cee:	e8 89 f5 ff ff       	call   c001627c <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0016cf3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016cf8:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c0016cfc:	52                   	push   edx
c0016cfd:	0f b7 50 59          	movzx  edx,WORD PTR [eax+0x59]
c0016d01:	52                   	push   edx
c0016d02:	0f b7 50 57          	movzx  edx,WORD PTR [eax+0x57]
c0016d06:	52                   	push   edx
c0016d07:	0f b7 40 55          	movzx  eax,WORD PTR [eax+0x55]
c0016d0b:	50                   	push   eax
c0016d0c:	e8 fe 94 fe ff       	call   c000020f <goToVM86>
c0016d11:	83 c4 2c             	add    esp,0x2c
c0016d14:	c3                   	ret    

c0016d15 <Vm::mainVm8086Loop(void*)>:
c0016d15:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016d1a:	48                   	dec    eax
c0016d1b:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016d20:	75 01                	jne    c0016d23 <Vm::mainVm8086Loop(void*)+0xe>
c0016d22:	fb                   	sti    
c0016d23:	eb b6                	jmp    c0016cdb <Vm::mainloop2()>

c0016d25 <Vm::mainloop3(unsigned long)>:
c0016d25:	83 ec 18             	sub    esp,0x18
c0016d28:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016d2c:	fa                   	cli    
c0016d2d:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c0016d33:	6a 02                	push   0x2
c0016d35:	c6 05 24 c7 02 c0 01 	mov    BYTE PTR ds:0xc002c724,0x1
c0016d3c:	a3 20 c7 02 c0       	mov    ds:0xc002c720,eax
c0016d41:	e8 36 f5 ff ff       	call   c001627c <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0016d46:	83 c4 1c             	add    esp,0x1c
c0016d49:	eb 90                	jmp    c0016cdb <Vm::mainloop2()>

c0016d4b <Vm::initialise8086()>:
c0016d4b:	83 ec 0c             	sub    esp,0xc
c0016d4e:	68 80 00 00 00       	push   0x80
c0016d53:	6a 00                	push   0x0
c0016d55:	68 15 6d 01 c0       	push   0xc0016d15
c0016d5a:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c0016d60:	e8 db f0 ff ff       	call   c0015e40 <Process::createThread(void (*)(void*), void*, int)>
c0016d65:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c0016d6c:	a3 28 c7 02 c0       	mov    ds:0xc002c728,eax
c0016d71:	68 00 01 00 00       	push   0x100
c0016d76:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0016d7b:	6a 00                	push   0x0
c0016d7d:	6a 00                	push   0x0
c0016d7f:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0016d85:	e8 90 31 ff ff       	call   c0009f1a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0016d8a:	83 c4 2c             	add    esp,0x2c
c0016d8d:	c3                   	ret    

c0016d8e <Vm::finish8086()>:
c0016d8e:	53                   	push   ebx
c0016d8f:	83 ec 08             	sub    esp,0x8
c0016d92:	fa                   	cli    
c0016d93:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c0016d99:	80 3d 24 c7 02 c0 00 	cmp    BYTE PTR ds:0xc002c724,0x0
c0016da0:	75 15                	jne    c0016db7 <Vm::finish8086()+0x29>
c0016da2:	e8 e9 f2 ff ff       	call   c0016090 <schedule()>
c0016da7:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016dac:	48                   	dec    eax
c0016dad:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016db2:	75 de                	jne    c0016d92 <Vm::finish8086()+0x4>
c0016db4:	fb                   	sti    
c0016db5:	eb db                	jmp    c0016d92 <Vm::finish8086()+0x4>
c0016db7:	83 ec 0c             	sub    esp,0xc
c0016dba:	8b 1d 20 c7 02 c0    	mov    ebx,DWORD PTR ds:0xc002c720
c0016dc0:	ff 35 28 c7 02 c0    	push   DWORD PTR ds:0xc002c728
c0016dc6:	c6 05 24 c7 02 c0 00 	mov    BYTE PTR ds:0xc002c724,0x0
c0016dcd:	e8 d6 f7 ff ff       	call   c00165a8 <unblockTask(ThreadControlBlock*)>
c0016dd2:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016dd7:	83 c4 10             	add    esp,0x10
c0016dda:	8d 50 ff             	lea    edx,[eax-0x1]
c0016ddd:	89 15 c8 c6 02 c0    	mov    DWORD PTR ds:0xc002c6c8,edx
c0016de3:	85 d2                	test   edx,edx
c0016de5:	75 01                	jne    c0016de8 <Vm::finish8086()+0x5a>
c0016de7:	fb                   	sti    
c0016de8:	89 d8                	mov    eax,ebx
c0016dea:	83 c4 08             	add    esp,0x8
c0016ded:	5b                   	pop    ebx
c0016dee:	c3                   	ret    

c0016def <Vm::getOutput8086(unsigned char*)>:
c0016def:	57                   	push   edi
c0016df0:	8b 0d 2c c7 02 c0    	mov    ecx,DWORD PTR ds:0xc002c72c
c0016df6:	56                   	push   esi
c0016df7:	be 40 c7 02 c0       	mov    esi,0xc002c740
c0016dfc:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0016e00:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016e02:	a1 2c c7 02 c0       	mov    eax,ds:0xc002c72c
c0016e07:	5e                   	pop    esi
c0016e08:	c7 05 2c c7 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c72c,0x0
c0016e12:	5f                   	pop    edi
c0016e13:	c3                   	ret    

c0016e14 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)>:
c0016e14:	55                   	push   ebp
c0016e15:	57                   	push   edi
c0016e16:	56                   	push   esi
c0016e17:	53                   	push   ebx
c0016e18:	83 ec 0c             	sub    esp,0xc
c0016e1b:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0016e1f:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0016e23:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0016e27:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0016e2b:	fa                   	cli    
c0016e2c:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c0016e32:	80 3d 25 c7 02 c0 00 	cmp    BYTE PTR ds:0xc002c725,0x0
c0016e39:	75 15                	jne    c0016e50 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x3c>
c0016e3b:	e8 50 f2 ff ff       	call   c0016090 <schedule()>
c0016e40:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016e45:	48                   	dec    eax
c0016e46:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016e4b:	75 de                	jne    c0016e2b <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0016e4d:	fb                   	sti    
c0016e4e:	eb db                	jmp    c0016e2b <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0016e50:	a1 28 c7 02 c0       	mov    eax,ds:0xc002c728
c0016e55:	c7 05 2c c7 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c72c,0x0
c0016e5f:	66 89 78 55          	mov    WORD PTR [eax+0x55],di
c0016e63:	66 89 70 57          	mov    WORD PTR [eax+0x57],si
c0016e67:	66 89 68 59          	mov    WORD PTR [eax+0x59],bp
c0016e6b:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c0016e6f:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c0016e73:	0f b7 ff             	movzx  edi,di
c0016e76:	0f b7 f6             	movzx  esi,si
c0016e79:	50                   	push   eax
c0016e7a:	6a 20                	push   0x20
c0016e7c:	6a 00                	push   0x0
c0016e7e:	68 40 c7 02 c0       	push   0xc002c740
c0016e83:	e8 68 96 fe ff       	call   c00004f0 <memset>
c0016e88:	5a                   	pop    edx
c0016e89:	59                   	pop    ecx
c0016e8a:	57                   	push   edi
c0016e8b:	56                   	push   esi
c0016e8c:	e8 2d fe ff ff       	call   c0016cbe <Vm::realToLinear(unsigned short, unsigned short)>
c0016e91:	83 c4 10             	add    esp,0x10
c0016e94:	89 c7                	mov    edi,eax
c0016e96:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0016e9a:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0016e9e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016ea0:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016ea5:	c6 05 25 c7 02 c0 00 	mov    BYTE PTR ds:0xc002c725,0x0
c0016eac:	48                   	dec    eax
c0016ead:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016eb2:	75 01                	jne    c0016eb5 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0xa1>
c0016eb4:	fb                   	sti    
c0016eb5:	83 ec 0c             	sub    esp,0xc
c0016eb8:	ff 35 28 c7 02 c0    	push   DWORD PTR ds:0xc002c728
c0016ebe:	e8 e5 f6 ff ff       	call   c00165a8 <unblockTask(ThreadControlBlock*)>
c0016ec3:	83 c4 1c             	add    esp,0x1c
c0016ec6:	b0 01                	mov    al,0x1
c0016ec8:	5b                   	pop    ebx
c0016ec9:	5e                   	pop    esi
c0016eca:	5f                   	pop    edi
c0016ecb:	5d                   	pop    ebp
c0016ecc:	c3                   	ret    

c0016ecd <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c0016ecd:	55                   	push   ebp
c0016ece:	57                   	push   edi
c0016ecf:	56                   	push   esi
c0016ed0:	53                   	push   ebx
c0016ed1:	83 ec 34             	sub    esp,0x34
c0016ed4:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0016ed8:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c0016edc:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c0016ee0:	8b 6c 24 54          	mov    ebp,DWORD PTR [esp+0x54]
c0016ee4:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0016ee8:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0016eec:	68 08 2a 02 c0       	push   0xc0022a08
c0016ef1:	e8 4f 3a ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0016ef6:	83 c4 10             	add    esp,0x10
c0016ef9:	fa                   	cli    
c0016efa:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c0016f00:	8a 1d 25 c7 02 c0    	mov    bl,BYTE PTR ds:0xc002c725
c0016f06:	84 db                	test   bl,bl
c0016f08:	75 15                	jne    c0016f1f <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x52>
c0016f0a:	e8 81 f1 ff ff       	call   c0016090 <schedule()>
c0016f0f:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016f14:	48                   	dec    eax
c0016f15:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016f1a:	75 dd                	jne    c0016ef9 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x2c>
c0016f1c:	fb                   	sti    
c0016f1d:	eb da                	jmp    c0016ef9 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x2c>
c0016f1f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016f23:	a1 28 c7 02 c0       	mov    eax,ds:0xc002c728
c0016f28:	c7 05 2c c7 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c72c,0x0
c0016f32:	66 89 50 5b          	mov    WORD PTR [eax+0x5b],dx
c0016f36:	66 89 68 59          	mov    WORD PTR [eax+0x59],bp
c0016f3a:	66 89 78 55          	mov    WORD PTR [eax+0x55],di
c0016f3e:	66 89 70 57          	mov    WORD PTR [eax+0x57],si
c0016f42:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c0016f46:	50                   	push   eax
c0016f47:	6a 20                	push   0x20
c0016f49:	6a 00                	push   0x0
c0016f4b:	68 40 c7 02 c0       	push   0xc002c740
c0016f50:	e8 9b 95 fe ff       	call   c00004f0 <memset>
c0016f55:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0016f5c:	e8 55 0b ff ff       	call   c0007ab6 <malloc>
c0016f61:	83 c4 0c             	add    esp,0xc
c0016f64:	89 c5                	mov    ebp,eax
c0016f66:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c0016f6c:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0016f70:	50                   	push   eax
c0016f71:	e8 e2 4b ff ff       	call   c000bb58 <File::File(char const*, Process*)>
c0016f76:	83 c4 10             	add    esp,0x10
c0016f79:	85 ed                	test   ebp,ebp
c0016f7b:	75 0a                	jne    c0016f87 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xba>
c0016f7d:	83 ec 0c             	sub    esp,0xc
c0016f80:	68 2a 2a 02 c0       	push   0xc0022a2a
c0016f85:	eb 2b                	jmp    c0016fb2 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xe5>
c0016f87:	50                   	push   eax
c0016f88:	8d 44 24 17          	lea    eax,[esp+0x17]
c0016f8c:	50                   	push   eax
c0016f8d:	8d 44 24 20          	lea    eax,[esp+0x20]
c0016f91:	50                   	push   eax
c0016f92:	55                   	push   ebp
c0016f93:	e8 e0 4e ff ff       	call   c000be78 <File::stat(unsigned long long*, bool*)>
c0016f98:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c0016f9c:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0016fa0:	83 c4 10             	add    esp,0x10
c0016fa3:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c0016fa8:	74 27                	je     c0016fd1 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x104>
c0016faa:	83 ec 0c             	sub    esp,0xc
c0016fad:	68 3e 2a 02 c0       	push   0xc0022a3e
c0016fb2:	e8 74 a6 ff ff       	call   c001162b <KePanic(char const*)>
c0016fb7:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016fbc:	83 c4 10             	add    esp,0x10
c0016fbf:	48                   	dec    eax
c0016fc0:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016fc5:	85 c0                	test   eax,eax
c0016fc7:	75 01                	jne    c0016fca <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xfd>
c0016fc9:	fb                   	sti    
c0016fca:	31 db                	xor    ebx,ebx
c0016fcc:	e9 90 00 00 00       	jmp    c0017061 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x194>
c0016fd1:	51                   	push   ecx
c0016fd2:	51                   	push   ecx
c0016fd3:	6a 01                	push   0x1
c0016fd5:	55                   	push   ebp
c0016fd6:	e8 9b 4b ff ff       	call   c000bb76 <File::open(FileOpenMode)>
c0016fdb:	83 c4 10             	add    esp,0x10
c0016fde:	85 c0                	test   eax,eax
c0016fe0:	74 26                	je     c0017008 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x13b>
c0016fe2:	83 ec 0c             	sub    esp,0xc
c0016fe5:	68 57 2a 02 c0       	push   0xc0022a57
c0016fea:	e8 3c a6 ff ff       	call   c001162b <KePanic(char const*)>
c0016fef:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0016ff4:	83 c4 10             	add    esp,0x10
c0016ff7:	48                   	dec    eax
c0016ff8:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0016ffd:	85 c0                	test   eax,eax
c0016fff:	75 c9                	jne    c0016fca <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xfd>
c0017001:	fb                   	sti    
c0017002:	8a 5c 24 0c          	mov    bl,BYTE PTR [esp+0xc]
c0017006:	eb 59                	jmp    c0017061 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x194>
c0017008:	0f b7 ff             	movzx  edi,di
c001700b:	50                   	push   eax
c001700c:	0f b7 f6             	movzx  esi,si
c001700f:	50                   	push   eax
c0017010:	57                   	push   edi
c0017011:	56                   	push   esi
c0017012:	e8 a7 fc ff ff       	call   c0016cbe <Vm::realToLinear(unsigned short, unsigned short)>
c0017017:	5a                   	pop    edx
c0017018:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001701b:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c001701f:	51                   	push   ecx
c0017020:	50                   	push   eax
c0017021:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0017025:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0017029:	55                   	push   ebp
c001702a:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001702d:	83 c4 14             	add    esp,0x14
c0017030:	55                   	push   ebp
c0017031:	e8 9e 4b ff ff       	call   c000bbd4 <File::close()>
c0017036:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c001703b:	83 c4 10             	add    esp,0x10
c001703e:	48                   	dec    eax
c001703f:	c6 05 25 c7 02 c0 00 	mov    BYTE PTR ds:0xc002c725,0x0
c0017046:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c001704b:	85 c0                	test   eax,eax
c001704d:	75 01                	jne    c0017050 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x183>
c001704f:	fb                   	sti    
c0017050:	83 ec 0c             	sub    esp,0xc
c0017053:	ff 35 28 c7 02 c0    	push   DWORD PTR ds:0xc002c728
c0017059:	e8 4a f5 ff ff       	call   c00165a8 <unblockTask(ThreadControlBlock*)>
c001705e:	83 c4 10             	add    esp,0x10
c0017061:	83 c4 2c             	add    esp,0x2c
c0017064:	88 d8                	mov    al,bl
c0017066:	5b                   	pop    ebx
c0017067:	5e                   	pop    esi
c0017068:	5f                   	pop    edi
c0017069:	5d                   	pop    ebp
c001706a:	c3                   	ret    

c001706b <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c001706b:	57                   	push   edi
c001706c:	56                   	push   esi
c001706d:	53                   	push   ebx
c001706e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0017072:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017076:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001707a:	83 e8 06             	sub    eax,0x6
c001707d:	0f b7 c0             	movzx  eax,ax
c0017080:	50                   	push   eax
c0017081:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c0017086:	50                   	push   eax
c0017087:	e8 32 fc ff ff       	call   c0016cbe <Vm::realToLinear(unsigned short, unsigned short)>
c001708c:	5a                   	pop    edx
c001708d:	8b 73 38             	mov    esi,DWORD PTR [ebx+0x38]
c0017090:	59                   	pop    ecx
c0017091:	8b 4b 44             	mov    ecx,DWORD PTR [ebx+0x44]
c0017094:	8d 51 fa             	lea    edx,[ecx-0x6]
c0017097:	81 e2 ff ff 00 00    	and    edx,0xffff
c001709d:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c00170a0:	8d 56 02             	lea    edx,[esi+0x2]
c00170a3:	66 89 10             	mov    WORD PTR [eax],dx
c00170a6:	66 8b 53 3c          	mov    dx,WORD PTR [ebx+0x3c]
c00170aa:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c00170ae:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c00170b1:	66 8b 53 40          	mov    dx,WORD PTR [ebx+0x40]
c00170b5:	0f b6 f1             	movzx  esi,cl
c00170b8:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c00170bc:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00170c2:	80 7a 5d 00          	cmp    BYTE PTR [edx+0x5d],0x0
c00170c6:	0f b6 d5             	movzx  edx,ch
c00170c9:	74 0a                	je     c00170d5 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x6a>
c00170cb:	c1 e2 08             	shl    edx,0x8
c00170ce:	09 f2                	or     edx,esi
c00170d0:	80 ce 02             	or     dh,0x2
c00170d3:	eb 08                	jmp    c00170dd <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x72>
c00170d5:	c1 e2 08             	shl    edx,0x8
c00170d8:	09 f2                	or     edx,esi
c00170da:	80 e6 fd             	and    dh,0xfd
c00170dd:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c00170e1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00170e6:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c00170ea:	0f b7 04 bd 02 00 00 00 	movzx  eax,WORD PTR [edi*4+0x2]
c00170f2:	89 43 3c             	mov    DWORD PTR [ebx+0x3c],eax
c00170f5:	0f b7 04 bd 00 00 00 00 	movzx  eax,WORD PTR [edi*4+0x0]
c00170fd:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0017100:	5b                   	pop    ebx
c0017101:	5e                   	pop    esi
c0017102:	5f                   	pop    edi
c0017103:	c3                   	ret    

c0017104 <Vm::readByteFromReal(unsigned short, unsigned short)>:
c0017104:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0017109:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001710e:	c1 e0 04             	shl    eax,0x4
c0017111:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c0017114:	c3                   	ret    

c0017115 <Vm::readWordFromReal(unsigned short, unsigned short)>:
c0017115:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001711a:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001711f:	c1 e0 04             	shl    eax,0x4
c0017122:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c0017126:	c3                   	ret    

c0017127 <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c0017127:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001712c:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0017131:	c1 e0 04             	shl    eax,0x4
c0017134:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c0017137:	c3                   	ret    

c0017138 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c0017138:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001713d:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0017142:	c1 e0 04             	shl    eax,0x4
c0017145:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0017149:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c001714c:	c3                   	ret    

c001714d <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c001714d:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0017152:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0017157:	c1 e0 04             	shl    eax,0x4
c001715a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001715e:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c0017162:	c3                   	ret    

c0017163 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c0017163:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0017168:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001716d:	c1 e0 04             	shl    eax,0x4
c0017170:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0017174:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c0017177:	c3                   	ret    

c0017178 <Vm::faultHandler(regs*)>:
c0017178:	55                   	push   ebp
c0017179:	57                   	push   edi
c001717a:	56                   	push   esi
c001717b:	53                   	push   ebx
c001717c:	83 ec 2c             	sub    esp,0x2c
c001717f:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0017183:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0017186:	0f b7 53 38          	movzx  edx,WORD PTR [ebx+0x38]
c001718a:	0f b7 f8             	movzx  edi,ax
c001718d:	52                   	push   edx
c001718e:	0f b7 c0             	movzx  eax,ax
c0017191:	50                   	push   eax
c0017192:	e8 27 fb ff ff       	call   c0016cbe <Vm::realToLinear(unsigned short, unsigned short)>
c0017197:	5a                   	pop    edx
c0017198:	59                   	pop    ecx
c0017199:	89 c1                	mov    ecx,eax
c001719b:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001719e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00171a2:	0f b7 44 24 10       	movzx  eax,WORD PTR [esp+0x10]
c00171a7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00171ab:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c00171ae:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00171b2:	0f b7 44 24 14       	movzx  eax,WORD PTR [esp+0x14]
c00171b7:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00171bb:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00171bf:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00171c3:	e8 f6 fa ff ff       	call   c0016cbe <Vm::realToLinear(unsigned short, unsigned short)>
c00171c8:	5e                   	pop    esi
c00171c9:	be 06 00 00 00       	mov    esi,0x6
c00171ce:	5d                   	pop    ebp
c00171cf:	31 ed                	xor    ebp,ebp
c00171d1:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c00171d6:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c00171d9:	81 fa 9d 00 00 00    	cmp    edx,0x9d
c00171df:	0f 84 74 02 00 00    	je     c0017459 <Vm::faultHandler(regs*)+0x2e1>
c00171e5:	0f 87 94 00 00 00    	ja     c001727f <Vm::faultHandler(regs*)+0x107>
c00171eb:	83 fa 66             	cmp    edx,0x66
c00171ee:	0f 84 e2 01 00 00    	je     c00173d6 <Vm::faultHandler(regs*)+0x25e>
c00171f4:	77 47                	ja     c001723d <Vm::faultHandler(regs*)+0xc5>
c00171f6:	83 fa 36             	cmp    edx,0x36
c00171f9:	0f 84 ca 01 00 00    	je     c00173c9 <Vm::faultHandler(regs*)+0x251>
c00171ff:	77 1a                	ja     c001721b <Vm::faultHandler(regs*)+0xa3>
c0017201:	83 fa 26             	cmp    edx,0x26
c0017204:	0f 84 98 01 00 00    	je     c00173a2 <Vm::faultHandler(regs*)+0x22a>
c001720a:	83 fa 2e             	cmp    edx,0x2e
c001720d:	0f 85 21 06 00 00    	jne    c0017834 <Vm::faultHandler(regs*)+0x6bc>
c0017213:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0017216:	31 f6                	xor    esi,esi
c0017218:	41                   	inc    ecx
c0017219:	eb bb                	jmp    c00171d6 <Vm::faultHandler(regs*)+0x5e>
c001721b:	83 fa 64             	cmp    edx,0x64
c001721e:	0f 84 8b 01 00 00    	je     c00173af <Vm::faultHandler(regs*)+0x237>
c0017224:	0f 87 92 01 00 00    	ja     c00173bc <Vm::faultHandler(regs*)+0x244>
c001722a:	83 fa 3e             	cmp    edx,0x3e
c001722d:	0f 85 01 06 00 00    	jne    c0017834 <Vm::faultHandler(regs*)+0x6bc>
c0017233:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0017236:	be 01 00 00 00       	mov    esi,0x1
c001723b:	eb db                	jmp    c0017218 <Vm::faultHandler(regs*)+0xa0>
c001723d:	83 fa 6d             	cmp    edx,0x6d
c0017240:	0f 84 34 03 00 00    	je     c001757a <Vm::faultHandler(regs*)+0x402>
c0017246:	77 17                	ja     c001725f <Vm::faultHandler(regs*)+0xe7>
c0017248:	83 fa 67             	cmp    edx,0x67
c001724b:	0f 84 92 01 00 00    	je     c00173e3 <Vm::faultHandler(regs*)+0x26b>
c0017251:	83 fa 6c             	cmp    edx,0x6c
c0017254:	0f 84 b1 02 00 00    	je     c001750b <Vm::faultHandler(regs*)+0x393>
c001725a:	e9 d5 05 00 00       	jmp    c0017834 <Vm::faultHandler(regs*)+0x6bc>
c001725f:	83 fa 6f             	cmp    edx,0x6f
c0017262:	0f 84 3d 04 00 00    	je     c00176a5 <Vm::faultHandler(regs*)+0x52d>
c0017268:	0f 82 9f 03 00 00    	jb     c001760d <Vm::faultHandler(regs*)+0x495>
c001726e:	81 fa 9c 00 00 00    	cmp    edx,0x9c
c0017274:	0f 84 76 01 00 00    	je     c00173f0 <Vm::faultHandler(regs*)+0x278>
c001727a:	e9 b5 05 00 00       	jmp    c0017834 <Vm::faultHandler(regs*)+0x6bc>
c001727f:	81 fa ec 00 00 00    	cmp    edx,0xec
c0017285:	0f 84 51 05 00 00    	je     c00177dc <Vm::faultHandler(regs*)+0x664>
c001728b:	0f 87 a9 00 00 00    	ja     c001733a <Vm::faultHandler(regs*)+0x1c2>
c0017291:	81 fa e4 00 00 00    	cmp    edx,0xe4
c0017297:	0f 84 d0 04 00 00    	je     c001776d <Vm::faultHandler(regs*)+0x5f5>
c001729d:	77 78                	ja     c0017317 <Vm::faultHandler(regs*)+0x19f>
c001729f:	81 fa cd 00 00 00    	cmp    edx,0xcd
c00172a5:	0f 84 0e 02 00 00    	je     c00174b9 <Vm::faultHandler(regs*)+0x341>
c00172ab:	81 fa cf 00 00 00    	cmp    edx,0xcf
c00172b1:	0f 85 7d 05 00 00    	jne    c0017834 <Vm::faultHandler(regs*)+0x6bc>
c00172b7:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c00172bb:	89 d1                	mov    ecx,edx
c00172bd:	0f b6 10             	movzx  edx,BYTE PTR [eax]
c00172c0:	c1 e1 08             	shl    ecx,0x8
c00172c3:	09 ca                	or     edx,ecx
c00172c5:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c00172c8:	0f b6 50 03          	movzx  edx,BYTE PTR [eax+0x3]
c00172cc:	89 d1                	mov    ecx,edx
c00172ce:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
c00172d2:	c1 e1 08             	shl    ecx,0x8
c00172d5:	09 ca                	or     edx,ecx
c00172d7:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c00172da:	0f b6 50 05          	movzx  edx,BYTE PTR [eax+0x5]
c00172de:	89 d1                	mov    ecx,edx
c00172e0:	0f b6 50 04          	movzx  edx,BYTE PTR [eax+0x4]
c00172e4:	c1 e1 08             	shl    ecx,0x8
c00172e7:	09 ca                	or     edx,ecx
c00172e9:	81 ca 00 02 02 00    	or     edx,0x20200
c00172ef:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c00172f2:	0f b6 40 05          	movzx  eax,BYTE PTR [eax+0x5]
c00172f6:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00172fc:	d1 e8                	shr    eax,1
c00172fe:	83 e0 01             	and    eax,0x1
c0017301:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0017304:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0017307:	83 c0 06             	add    eax,0x6
c001730a:	25 ff ff 00 00       	and    eax,0xffff
c001730f:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0017312:	e9 19 05 00 00       	jmp    c0017830 <Vm::faultHandler(regs*)+0x6b8>
c0017317:	81 fa e6 00 00 00    	cmp    edx,0xe6
c001731d:	0f 84 8f 04 00 00    	je     c00177b2 <Vm::faultHandler(regs*)+0x63a>
c0017323:	0f 82 60 04 00 00    	jb     c0017789 <Vm::faultHandler(regs*)+0x611>
c0017329:	81 fa e7 00 00 00    	cmp    edx,0xe7
c001732f:	0f 84 94 04 00 00    	je     c00177c9 <Vm::faultHandler(regs*)+0x651>
c0017335:	e9 fa 04 00 00       	jmp    c0017834 <Vm::faultHandler(regs*)+0x6bc>
c001733a:	81 fa ef 00 00 00    	cmp    edx,0xef
c0017340:	0f 84 d7 04 00 00    	je     c001781d <Vm::faultHandler(regs*)+0x6a5>
c0017346:	77 2e                	ja     c0017376 <Vm::faultHandler(regs*)+0x1fe>
c0017348:	81 fa ed 00 00 00    	cmp    edx,0xed
c001734e:	0f 84 a4 04 00 00    	je     c00177f8 <Vm::faultHandler(regs*)+0x680>
c0017354:	81 fa ee 00 00 00    	cmp    edx,0xee
c001735a:	0f 85 d4 04 00 00    	jne    c0017834 <Vm::faultHandler(regs*)+0x6bc>
c0017360:	50                   	push   eax
c0017361:	50                   	push   eax
c0017362:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c0017366:	50                   	push   eax
c0017367:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001736b:	50                   	push   eax
c001736c:	e8 17 f9 ff ff       	call   c0016c88 <Vm::outbv(unsigned short, unsigned char)>
c0017371:	e9 9f 04 00 00       	jmp    c0017815 <Vm::faultHandler(regs*)+0x69d>
c0017376:	81 fa fa 00 00 00    	cmp    edx,0xfa
c001737c:	0f 84 6d 01 00 00    	je     c00174ef <Vm::faultHandler(regs*)+0x377>
c0017382:	81 fa fb 00 00 00    	cmp    edx,0xfb
c0017388:	0f 84 6f 01 00 00    	je     c00174fd <Vm::faultHandler(regs*)+0x385>
c001738e:	81 fa f3 00 00 00    	cmp    edx,0xf3
c0017394:	0f 85 9a 04 00 00    	jne    c0017834 <Vm::faultHandler(regs*)+0x6bc>
c001739a:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001739d:	e9 76 fe ff ff       	jmp    c0017218 <Vm::faultHandler(regs*)+0xa0>
c00173a2:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00173a5:	be 02 00 00 00       	mov    esi,0x2
c00173aa:	e9 69 fe ff ff       	jmp    c0017218 <Vm::faultHandler(regs*)+0xa0>
c00173af:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00173b2:	be 03 00 00 00       	mov    esi,0x3
c00173b7:	e9 5c fe ff ff       	jmp    c0017218 <Vm::faultHandler(regs*)+0xa0>
c00173bc:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00173bf:	be 04 00 00 00       	mov    esi,0x4
c00173c4:	e9 4f fe ff ff       	jmp    c0017218 <Vm::faultHandler(regs*)+0xa0>
c00173c9:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00173cc:	be 05 00 00 00       	mov    esi,0x5
c00173d1:	e9 42 fe ff ff       	jmp    c0017218 <Vm::faultHandler(regs*)+0xa0>
c00173d6:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00173d9:	bd 01 00 00 00       	mov    ebp,0x1
c00173de:	e9 35 fe ff ff       	jmp    c0017218 <Vm::faultHandler(regs*)+0xa0>
c00173e3:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00173e6:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c00173eb:	e9 28 fe ff ff       	jmp    c0017218 <Vm::faultHandler(regs*)+0xa0>
c00173f0:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c00173f3:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00173f7:	83 e5 01             	and    ebp,0x1
c00173fa:	74 30                	je     c001742c <Vm::faultHandler(regs*)+0x2b4>
c00173fc:	83 e9 04             	sub    ecx,0x4
c00173ff:	81 e2 ff 0d 00 00    	and    edx,0xdff
c0017405:	81 e1 ff ff 00 00    	and    ecx,0xffff
c001740b:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c001740e:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c0017411:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0017417:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c001741b:	0f 84 0c 04 00 00    	je     c001782d <Vm::faultHandler(regs*)+0x6b5>
c0017421:	80 ce 02             	or     dh,0x2
c0017424:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c0017427:	e9 01 04 00 00       	jmp    c001782d <Vm::faultHandler(regs*)+0x6b5>
c001742c:	83 e9 02             	sub    ecx,0x2
c001742f:	81 e1 ff ff 00 00    	and    ecx,0xffff
c0017435:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c0017438:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c001743c:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0017442:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c0017446:	74 05                	je     c001744d <Vm::faultHandler(regs*)+0x2d5>
c0017448:	80 ce 02             	or     dh,0x2
c001744b:	eb 03                	jmp    c0017450 <Vm::faultHandler(regs*)+0x2d8>
c001744d:	80 e6 fd             	and    dh,0xfd
c0017450:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c0017454:	e9 d4 03 00 00       	jmp    c001782d <Vm::faultHandler(regs*)+0x6b5>
c0017459:	83 e5 01             	and    ebp,0x1
c001745c:	74 2a                	je     c0017488 <Vm::faultHandler(regs*)+0x310>
c001745e:	8b 10                	mov    edx,DWORD PTR [eax]
c0017460:	81 e2 ff 0d 00 00    	and    edx,0xdff
c0017466:	81 ca 00 02 02 00    	or     edx,0x20200
c001746c:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c001746f:	8b 00                	mov    eax,DWORD PTR [eax]
c0017471:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0017477:	c1 e8 09             	shr    eax,0x9
c001747a:	83 e0 01             	and    eax,0x1
c001747d:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0017480:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0017483:	83 c0 04             	add    eax,0x4
c0017486:	eb 24                	jmp    c00174ac <Vm::faultHandler(regs*)+0x334>
c0017488:	0f b7 10             	movzx  edx,WORD PTR [eax]
c001748b:	81 ca 00 02 02 00    	or     edx,0x20200
c0017491:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0017494:	0f b7 00             	movzx  eax,WORD PTR [eax]
c0017497:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001749d:	c1 e8 09             	shr    eax,0x9
c00174a0:	83 e0 01             	and    eax,0x1
c00174a3:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c00174a6:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c00174a9:	83 c0 02             	add    eax,0x2
c00174ac:	25 ff ff 00 00       	and    eax,0xffff
c00174b1:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c00174b4:	e9 74 03 00 00       	jmp    c001782d <Vm::faultHandler(regs*)+0x6b5>
c00174b9:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00174bd:	3d ee 00 00 00       	cmp    eax,0xee
c00174c2:	75 10                	jne    c00174d4 <Vm::faultHandler(regs*)+0x35c>
c00174c4:	83 ec 0c             	sub    esp,0xc
c00174c7:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c00174ca:	e8 56 f8 ff ff       	call   c0016d25 <Vm::mainloop3(unsigned long)>
c00174cf:	e9 44 03 00 00       	jmp    c0017818 <Vm::faultHandler(regs*)+0x6a0>
c00174d4:	83 ec 0c             	sub    esp,0xc
c00174d7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00174db:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00174df:	51                   	push   ecx
c00174e0:	50                   	push   eax
c00174e1:	53                   	push   ebx
c00174e2:	e8 84 fb ff ff       	call   c001706b <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c00174e7:	83 c4 20             	add    esp,0x20
c00174ea:	e9 41 03 00 00       	jmp    c0017830 <Vm::faultHandler(regs*)+0x6b8>
c00174ef:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00174f4:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c00174f8:	e9 30 03 00 00       	jmp    c001782d <Vm::faultHandler(regs*)+0x6b5>
c00174fd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017502:	c6 40 5d 01          	mov    BYTE PTR [eax+0x5d],0x1
c0017506:	e9 22 03 00 00       	jmp    c001782d <Vm::faultHandler(regs*)+0x6b5>
c001750b:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c001750e:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0017513:	74 2b                	je     c0017540 <Vm::faultHandler(regs*)+0x3c8>
c0017515:	81 7b 10 ff ff 00 00 	cmp    DWORD PTR [ebx+0x10],0xffff
c001751c:	76 22                	jbe    c0017540 <Vm::faultHandler(regs*)+0x3c8>
c001751e:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0017522:	50                   	push   eax
c0017523:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0017527:	50                   	push   eax
c0017528:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001752c:	50                   	push   eax
c001752d:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0017531:	50                   	push   eax
c0017532:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0017536:	50                   	push   eax
c0017537:	6a 6c                	push   0x6c
c0017539:	6a 6c                	push   0x6c
c001753b:	e9 bd 01 00 00       	jmp    c00176fd <Vm::faultHandler(regs*)+0x585>
c0017540:	83 ec 0c             	sub    esp,0xc
c0017543:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0017547:	0f b7 f6             	movzx  esi,si
c001754a:	50                   	push   eax
c001754b:	e8 25 f7 ff ff       	call   c0016c75 <Vm::inbv(unsigned short)>
c0017550:	83 c4 0c             	add    esp,0xc
c0017553:	0f b6 c0             	movzx  eax,al
c0017556:	50                   	push   eax
c0017557:	0f b7 43 10          	movzx  eax,WORD PTR [ebx+0x10]
c001755b:	50                   	push   eax
c001755c:	56                   	push   esi
c001755d:	e8 d6 fb ff ff       	call   c0017138 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c0017562:	83 c4 10             	add    esp,0x10
c0017565:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0017568:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001756c:	74 03                	je     c0017571 <Vm::faultHandler(regs*)+0x3f9>
c001756e:	48                   	dec    eax
c001756f:	eb 01                	jmp    c0017572 <Vm::faultHandler(regs*)+0x3fa>
c0017571:	40                   	inc    eax
c0017572:	0f b7 c0             	movzx  eax,ax
c0017575:	e9 8b 00 00 00       	jmp    c0017605 <Vm::faultHandler(regs*)+0x48d>
c001757a:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c001757d:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0017580:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0017585:	74 29                	je     c00175b0 <Vm::faultHandler(regs*)+0x438>
c0017587:	3d ff ff 00 00       	cmp    eax,0xffff
c001758c:	76 22                	jbe    c00175b0 <Vm::faultHandler(regs*)+0x438>
c001758e:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0017592:	50                   	push   eax
c0017593:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0017597:	50                   	push   eax
c0017598:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001759c:	50                   	push   eax
c001759d:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c00175a1:	50                   	push   eax
c00175a2:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00175a6:	50                   	push   eax
c00175a7:	6a 6d                	push   0x6d
c00175a9:	6a 6d                	push   0x6d
c00175ab:	e9 4d 01 00 00       	jmp    c00176fd <Vm::faultHandler(regs*)+0x585>
c00175b0:	0f b7 c8             	movzx  ecx,ax
c00175b3:	0f b7 f6             	movzx  esi,si
c00175b6:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c00175b9:	83 e5 01             	and    ebp,0x1
c00175bc:	74 20                	je     c00175de <Vm::faultHandler(regs*)+0x466>
c00175be:	ed                   	in     eax,dx
c00175bf:	55                   	push   ebp
c00175c0:	50                   	push   eax
c00175c1:	51                   	push   ecx
c00175c2:	56                   	push   esi
c00175c3:	e8 9b fb ff ff       	call   c0017163 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c00175c8:	83 c4 10             	add    esp,0x10
c00175cb:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00175ce:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c00175d2:	74 05                	je     c00175d9 <Vm::faultHandler(regs*)+0x461>
c00175d4:	83 e8 04             	sub    eax,0x4
c00175d7:	eb 27                	jmp    c0017600 <Vm::faultHandler(regs*)+0x488>
c00175d9:	83 c0 04             	add    eax,0x4
c00175dc:	eb 22                	jmp    c0017600 <Vm::faultHandler(regs*)+0x488>
c00175de:	66 ed                	in     ax,dx
c00175e0:	0f b7 c0             	movzx  eax,ax
c00175e3:	57                   	push   edi
c00175e4:	50                   	push   eax
c00175e5:	51                   	push   ecx
c00175e6:	56                   	push   esi
c00175e7:	e8 61 fb ff ff       	call   c001714d <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c00175ec:	83 c4 10             	add    esp,0x10
c00175ef:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00175f2:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c00175f6:	74 05                	je     c00175fd <Vm::faultHandler(regs*)+0x485>
c00175f8:	83 e8 02             	sub    eax,0x2
c00175fb:	eb 03                	jmp    c0017600 <Vm::faultHandler(regs*)+0x488>
c00175fd:	83 c0 02             	add    eax,0x2
c0017600:	25 ff ff 00 00       	and    eax,0xffff
c0017605:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0017608:	e9 20 02 00 00       	jmp    c001782d <Vm::faultHandler(regs*)+0x6b5>
c001760d:	8d 46 ff             	lea    eax,[esi-0x1]
c0017610:	0f b6 f0             	movzx  esi,al
c0017613:	83 fe 05             	cmp    esi,0x5
c0017616:	77 23                	ja     c001763b <Vm::faultHandler(regs*)+0x4c3>
c0017618:	ff 24 b5 cc 2a 02 c0 	jmp    DWORD PTR [esi*4-0x3ffdd534]
c001761f:	0f b7 7c 24 14       	movzx  edi,WORD PTR [esp+0x14]
c0017624:	eb 15                	jmp    c001763b <Vm::faultHandler(regs*)+0x4c3>
c0017626:	0f b7 7b 0c          	movzx  edi,WORD PTR [ebx+0xc]
c001762a:	eb 0f                	jmp    c001763b <Vm::faultHandler(regs*)+0x4c3>
c001762c:	0f b7 7b 08          	movzx  edi,WORD PTR [ebx+0x8]
c0017630:	eb 09                	jmp    c001763b <Vm::faultHandler(regs*)+0x4c3>
c0017632:	0f b7 7b 04          	movzx  edi,WORD PTR [ebx+0x4]
c0017636:	eb 03                	jmp    c001763b <Vm::faultHandler(regs*)+0x4c3>
c0017638:	0f b7 3b             	movzx  edi,WORD PTR [ebx]
c001763b:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001763e:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0017643:	74 29                	je     c001766e <Vm::faultHandler(regs*)+0x4f6>
c0017645:	3d ff ff 00 00       	cmp    eax,0xffff
c001764a:	76 22                	jbe    c001766e <Vm::faultHandler(regs*)+0x4f6>
c001764c:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0017650:	50                   	push   eax
c0017651:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0017655:	50                   	push   eax
c0017656:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001765a:	50                   	push   eax
c001765b:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001765f:	50                   	push   eax
c0017660:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0017664:	50                   	push   eax
c0017665:	6a 6e                	push   0x6e
c0017667:	6a 6e                	push   0x6e
c0017669:	e9 8f 00 00 00       	jmp    c00176fd <Vm::faultHandler(regs*)+0x585>
c001766e:	0f b7 c0             	movzx  eax,ax
c0017671:	52                   	push   edx
c0017672:	52                   	push   edx
c0017673:	50                   	push   eax
c0017674:	57                   	push   edi
c0017675:	e8 8a fa ff ff       	call   c0017104 <Vm::readByteFromReal(unsigned short, unsigned short)>
c001767a:	59                   	pop    ecx
c001767b:	0f b6 c0             	movzx  eax,al
c001767e:	5e                   	pop    esi
c001767f:	50                   	push   eax
c0017680:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0017684:	50                   	push   eax
c0017685:	e8 fe f5 ff ff       	call   c0016c88 <Vm::outbv(unsigned short, unsigned char)>
c001768a:	83 c4 10             	add    esp,0x10
c001768d:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0017690:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0017694:	74 03                	je     c0017699 <Vm::faultHandler(regs*)+0x521>
c0017696:	48                   	dec    eax
c0017697:	eb 01                	jmp    c001769a <Vm::faultHandler(regs*)+0x522>
c0017699:	40                   	inc    eax
c001769a:	0f b7 c0             	movzx  eax,ax
c001769d:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c00176a0:	e9 88 01 00 00       	jmp    c001782d <Vm::faultHandler(regs*)+0x6b5>
c00176a5:	8d 46 ff             	lea    eax,[esi-0x1]
c00176a8:	0f b6 f0             	movzx  esi,al
c00176ab:	83 fe 05             	cmp    esi,0x5
c00176ae:	77 1e                	ja     c00176ce <Vm::faultHandler(regs*)+0x556>
c00176b0:	ff 24 b5 e4 2a 02 c0 	jmp    DWORD PTR [esi*4-0x3ffdd51c]
c00176b7:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00176bb:	eb 11                	jmp    c00176ce <Vm::faultHandler(regs*)+0x556>
c00176bd:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c00176c0:	eb 0c                	jmp    c00176ce <Vm::faultHandler(regs*)+0x556>
c00176c2:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c00176c5:	eb 07                	jmp    c00176ce <Vm::faultHandler(regs*)+0x556>
c00176c7:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00176ca:	eb 02                	jmp    c00176ce <Vm::faultHandler(regs*)+0x556>
c00176cc:	8b 3b                	mov    edi,DWORD PTR [ebx]
c00176ce:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c00176d1:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c00176d6:	74 37                	je     c001770f <Vm::faultHandler(regs*)+0x597>
c00176d8:	81 fe ff ff 00 00    	cmp    esi,0xffff
c00176de:	76 2f                	jbe    c001770f <Vm::faultHandler(regs*)+0x597>
c00176e0:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c00176e4:	50                   	push   eax
c00176e5:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c00176e9:	50                   	push   eax
c00176ea:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c00176ee:	50                   	push   eax
c00176ef:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c00176f3:	50                   	push   eax
c00176f4:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00176f8:	50                   	push   eax
c00176f9:	6a 6f                	push   0x6f
c00176fb:	6a 6f                	push   0x6f
c00176fd:	68 70 2a 02 c0       	push   0xc0022a70
c0017702:	e8 3e 32 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0017707:	83 c4 20             	add    esp,0x20
c001770a:	e9 83 01 00 00       	jmp    c0017892 <Vm::faultHandler(regs*)+0x71a>
c001770f:	0f b7 d7             	movzx  edx,di
c0017712:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c0017715:	0f b7 c6             	movzx  eax,si
c0017718:	81 e1 00 04 00 00    	and    ecx,0x400
c001771e:	8b 7b 24             	mov    edi,DWORD PTR [ebx+0x24]
c0017721:	83 e5 01             	and    ebp,0x1
c0017724:	74 1d                	je     c0017743 <Vm::faultHandler(regs*)+0x5cb>
c0017726:	55                   	push   ebp
c0017727:	55                   	push   ebp
c0017728:	50                   	push   eax
c0017729:	52                   	push   edx
c001772a:	e8 f8 f9 ff ff       	call   c0017127 <Vm::readDwordFromReal(unsigned short, unsigned short)>
c001772f:	83 c4 10             	add    esp,0x10
c0017732:	89 fa                	mov    edx,edi
c0017734:	ef                   	out    dx,eax
c0017735:	85 c9                	test   ecx,ecx
c0017737:	74 05                	je     c001773e <Vm::faultHandler(regs*)+0x5c6>
c0017739:	83 ee 04             	sub    esi,0x4
c001773c:	eb 21                	jmp    c001775f <Vm::faultHandler(regs*)+0x5e7>
c001773e:	83 c6 04             	add    esi,0x4
c0017741:	eb 1c                	jmp    c001775f <Vm::faultHandler(regs*)+0x5e7>
c0017743:	55                   	push   ebp
c0017744:	55                   	push   ebp
c0017745:	50                   	push   eax
c0017746:	52                   	push   edx
c0017747:	e8 c9 f9 ff ff       	call   c0017115 <Vm::readWordFromReal(unsigned short, unsigned short)>
c001774c:	83 c4 10             	add    esp,0x10
c001774f:	89 fa                	mov    edx,edi
c0017751:	66 ef                	out    dx,ax
c0017753:	85 c9                	test   ecx,ecx
c0017755:	74 05                	je     c001775c <Vm::faultHandler(regs*)+0x5e4>
c0017757:	83 ee 02             	sub    esi,0x2
c001775a:	eb 03                	jmp    c001775f <Vm::faultHandler(regs*)+0x5e7>
c001775c:	83 c6 02             	add    esi,0x2
c001775f:	81 e6 ff ff 00 00    	and    esi,0xffff
c0017765:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0017768:	e9 c0 00 00 00       	jmp    c001782d <Vm::faultHandler(regs*)+0x6b5>
c001776d:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c0017774:	83 ec 0c             	sub    esp,0xc
c0017777:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001777b:	50                   	push   eax
c001777c:	e8 f4 f4 ff ff       	call   c0016c75 <Vm::inbv(unsigned short)>
c0017781:	0f b6 c0             	movzx  eax,al
c0017784:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c0017787:	eb 3a                	jmp    c00177c3 <Vm::faultHandler(regs*)+0x64b>
c0017789:	83 e5 01             	and    ebp,0x1
c001778c:	74 07                	je     c0017795 <Vm::faultHandler(regs*)+0x61d>
c001778e:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0017792:	ed                   	in     eax,dx
c0017793:	eb 14                	jmp    c00177a9 <Vm::faultHandler(regs*)+0x631>
c0017795:	8b 73 2c             	mov    esi,DWORD PTR [ebx+0x2c]
c0017798:	66 31 f6             	xor    si,si
c001779b:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c001779e:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c00177a2:	66 ed                	in     ax,dx
c00177a4:	0f b7 c0             	movzx  eax,ax
c00177a7:	09 f0                	or     eax,esi
c00177a9:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00177ac:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c00177b0:	eb 7e                	jmp    c0017830 <Vm::faultHandler(regs*)+0x6b8>
c00177b2:	52                   	push   edx
c00177b3:	52                   	push   edx
c00177b4:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c00177b8:	50                   	push   eax
c00177b9:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00177bd:	50                   	push   eax
c00177be:	e8 c5 f4 ff ff       	call   c0016c88 <Vm::outbv(unsigned short, unsigned char)>
c00177c3:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c00177c7:	eb 4f                	jmp    c0017818 <Vm::faultHandler(regs*)+0x6a0>
c00177c9:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00177cc:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c00177d0:	83 e5 01             	and    ebp,0x1
c00177d3:	74 03                	je     c00177d8 <Vm::faultHandler(regs*)+0x660>
c00177d5:	ef                   	out    dx,eax
c00177d6:	eb d4                	jmp    c00177ac <Vm::faultHandler(regs*)+0x634>
c00177d8:	66 ef                	out    dx,ax
c00177da:	eb d0                	jmp    c00177ac <Vm::faultHandler(regs*)+0x634>
c00177dc:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c00177e3:	83 ec 0c             	sub    esp,0xc
c00177e6:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c00177ea:	50                   	push   eax
c00177eb:	e8 85 f4 ff ff       	call   c0016c75 <Vm::inbv(unsigned short)>
c00177f0:	0f b6 c0             	movzx  eax,al
c00177f3:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c00177f6:	eb 1d                	jmp    c0017815 <Vm::faultHandler(regs*)+0x69d>
c00177f8:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c00177fb:	83 e5 01             	and    ebp,0x1
c00177fe:	74 03                	je     c0017803 <Vm::faultHandler(regs*)+0x68b>
c0017800:	ed                   	in     eax,dx
c0017801:	eb 0d                	jmp    c0017810 <Vm::faultHandler(regs*)+0x698>
c0017803:	66 ed                	in     ax,dx
c0017805:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0017808:	0f b7 c0             	movzx  eax,ax
c001780b:	66 31 d2             	xor    dx,dx
c001780e:	09 d0                	or     eax,edx
c0017810:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0017813:	eb 18                	jmp    c001782d <Vm::faultHandler(regs*)+0x6b5>
c0017815:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0017818:	83 c4 10             	add    esp,0x10
c001781b:	eb 13                	jmp    c0017830 <Vm::faultHandler(regs*)+0x6b8>
c001781d:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0017820:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0017823:	83 e5 01             	and    ebp,0x1
c0017826:	74 03                	je     c001782b <Vm::faultHandler(regs*)+0x6b3>
c0017828:	ef                   	out    dx,eax
c0017829:	eb 02                	jmp    c001782d <Vm::faultHandler(regs*)+0x6b5>
c001782b:	66 ef                	out    dx,ax
c001782d:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0017830:	b0 01                	mov    al,0x1
c0017832:	eb 60                	jmp    c0017894 <Vm::faultHandler(regs*)+0x71c>
c0017834:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0017838:	50                   	push   eax
c0017839:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001783d:	50                   	push   eax
c001783e:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0017842:	50                   	push   eax
c0017843:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0017847:	50                   	push   eax
c0017848:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001784c:	50                   	push   eax
c001784d:	52                   	push   edx
c001784e:	52                   	push   edx
c001784f:	68 9d 2a 02 c0       	push   0xc0022a9d
c0017854:	e8 ec 30 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0017859:	83 c4 20             	add    esp,0x20
c001785c:	83 ec 0c             	sub    esp,0xc
c001785f:	6a 60                	push   0x60
c0017861:	e8 0f f4 ff ff       	call   c0016c75 <Vm::inbv(unsigned short)>
c0017866:	83 c4 10             	add    esp,0x10
c0017869:	0f b6 d0             	movzx  edx,al
c001786c:	83 fa 1c             	cmp    edx,0x1c
c001786f:	74 05                	je     c0017876 <Vm::faultHandler(regs*)+0x6fe>
c0017871:	83 fa 5a             	cmp    edx,0x5a
c0017874:	75 e6                	jne    c001785c <Vm::faultHandler(regs*)+0x6e4>
c0017876:	0f b6 c0             	movzx  eax,al
c0017879:	83 f8 1c             	cmp    eax,0x1c
c001787c:	74 05                	je     c0017883 <Vm::faultHandler(regs*)+0x70b>
c001787e:	83 f8 5a             	cmp    eax,0x5a
c0017881:	75 0f                	jne    c0017892 <Vm::faultHandler(regs*)+0x71a>
c0017883:	83 ec 0c             	sub    esp,0xc
c0017886:	6a 60                	push   0x60
c0017888:	e8 e8 f3 ff ff       	call   c0016c75 <Vm::inbv(unsigned short)>
c001788d:	83 c4 10             	add    esp,0x10
c0017890:	eb e4                	jmp    c0017876 <Vm::faultHandler(regs*)+0x6fe>
c0017892:	31 c0                	xor    eax,eax
c0017894:	83 c4 2c             	add    esp,0x2c
c0017897:	5b                   	pop    ebx
c0017898:	5e                   	pop    esi
c0017899:	5f                   	pop    edi
c001789a:	5d                   	pop    ebp
c001789b:	c3                   	ret    

c001789c <noCopro(unsigned long)>:
c001789c:	c3                   	ret    

c001789d <nmiHandler(regs*, void*)>:
c001789d:	83 ec 0c             	sub    esp,0xc
c00178a0:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c00178a5:	83 ec 0c             	sub    esp,0xc
c00178a8:	50                   	push   eax
c00178a9:	e8 08 fa fe ff       	call   c00072b6 <Computer::handleNMI()>
c00178ae:	83 c4 10             	add    esp,0x10
c00178b1:	90                   	nop
c00178b2:	83 c4 0c             	add    esp,0xc
c00178b5:	c3                   	ret    

c00178b6 <doubleFault(regs*, void*)>:
c00178b6:	55                   	push   ebp
c00178b7:	89 e5                	mov    ebp,esp
c00178b9:	83 ec 08             	sub    esp,0x8
c00178bc:	83 ec 0c             	sub    esp,0xc
c00178bf:	68 fc 2a 02 c0       	push   0xc0022afc
c00178c4:	e8 62 9d ff ff       	call   c001162b <KePanic(char const*)>
c00178c9:	83 c4 10             	add    esp,0x10
c00178cc:	90                   	nop
c00178cd:	c9                   	leave  
c00178ce:	c3                   	ret    

c00178cf <displayDebugInfo(regs*)>:
c00178cf:	83 ec 1c             	sub    esp,0x1c
c00178d2:	0f 20 c0             	mov    eax,cr0
c00178d5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00178d9:	0f 20 d0             	mov    eax,cr2
c00178dc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00178e0:	0f 20 d8             	mov    eax,cr3
c00178e3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00178e7:	0f 20 e0             	mov    eax,cr4
c00178ea:	89 04 24             	mov    DWORD PTR [esp],eax
c00178ed:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00178f1:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c00178f4:	83 ec 08             	sub    esp,0x8
c00178f7:	50                   	push   eax
c00178f8:	68 18 2b 02 c0       	push   0xc0022b18
c00178fd:	e8 43 30 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0017902:	83 c4 10             	add    esp,0x10
c0017905:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017909:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c001790c:	83 ec 08             	sub    esp,0x8
c001790f:	50                   	push   eax
c0017910:	68 09 2b 02 c0       	push   0xc0022b09
c0017915:	e8 2b 30 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001791a:	83 c4 10             	add    esp,0x10
c001791d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017921:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0017924:	83 ec 08             	sub    esp,0x8
c0017927:	50                   	push   eax
c0017928:	68 14 2b 02 c0       	push   0xc0022b14
c001792d:	e8 13 30 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0017932:	83 c4 10             	add    esp,0x10
c0017935:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017939:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001793c:	83 ec 08             	sub    esp,0x8
c001793f:	50                   	push   eax
c0017940:	68 23 2b 02 c0       	push   0xc0022b23
c0017945:	e8 fb 2f ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001794a:	83 c4 10             	add    esp,0x10
c001794d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017951:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c0017954:	83 ec 08             	sub    esp,0x8
c0017957:	50                   	push   eax
c0017958:	68 2e 2b 02 c0       	push   0xc0022b2e
c001795d:	e8 e3 2f ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0017962:	83 c4 10             	add    esp,0x10
c0017965:	83 ec 08             	sub    esp,0x8
c0017968:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001796c:	68 39 2b 02 c0       	push   0xc0022b39
c0017971:	e8 cf 2f ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0017976:	83 c4 10             	add    esp,0x10
c0017979:	83 ec 08             	sub    esp,0x8
c001797c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0017980:	68 44 2b 02 c0       	push   0xc0022b44
c0017985:	e8 bb 2f ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001798a:	83 c4 10             	add    esp,0x10
c001798d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017991:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c0017994:	c1 e0 05             	shl    eax,0x5
c0017997:	8d 90 c0 3e 02 c0    	lea    edx,[eax-0x3ffdc140]
c001799d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00179a1:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c00179a4:	83 ec 04             	sub    esp,0x4
c00179a7:	52                   	push   edx
c00179a8:	50                   	push   eax
c00179a9:	68 4f 2b 02 c0       	push   0xc0022b4f
c00179ae:	e8 92 2f ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c00179b3:	83 c4 10             	add    esp,0x10
c00179b6:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c00179bb:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00179c1:	83 ec 0c             	sub    esp,0xc
c00179c4:	50                   	push   eax
c00179c5:	e8 8f 0d ff ff       	call   c0008759 <setActiveTerminal(VgaText*)>
c00179ca:	83 c4 10             	add    esp,0x10
c00179cd:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c00179d2:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00179d8:	83 ec 08             	sub    esp,0x8
c00179db:	68 5e 2b 02 c0       	push   0xc0022b5e
c00179e0:	50                   	push   eax
c00179e1:	e8 c0 10 ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c00179e6:	83 c4 10             	add    esp,0x10
c00179e9:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c00179ee:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00179f4:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00179f8:	8b 52 30             	mov    edx,DWORD PTR [edx+0x30]
c00179fb:	83 ec 08             	sub    esp,0x8
c00179fe:	52                   	push   edx
c00179ff:	50                   	push   eax
c0017a00:	e8 5b 10 ff ff       	call   c0008a60 <VgaText::putx(unsigned int)>
c0017a05:	83 c4 10             	add    esp,0x10
c0017a08:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017a0d:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017a13:	83 ec 08             	sub    esp,0x8
c0017a16:	68 6c 2b 02 c0       	push   0xc0022b6c
c0017a1b:	50                   	push   eax
c0017a1c:	e8 85 10 ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c0017a21:	83 c4 10             	add    esp,0x10
c0017a24:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017a29:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017a2f:	ba 00 20 00 c2       	mov    edx,0xc2002000
c0017a34:	8b 12                	mov    edx,DWORD PTR [edx]
c0017a36:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c0017a39:	83 c2 0c             	add    edx,0xc
c0017a3c:	83 ec 08             	sub    esp,0x8
c0017a3f:	52                   	push   edx
c0017a40:	50                   	push   eax
c0017a41:	e8 60 10 ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c0017a46:	83 c4 10             	add    esp,0x10
c0017a49:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017a4e:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017a54:	83 ec 08             	sub    esp,0x8
c0017a57:	68 75 2b 02 c0       	push   0xc0022b75
c0017a5c:	50                   	push   eax
c0017a5d:	e8 44 10 ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c0017a62:	83 c4 10             	add    esp,0x10
c0017a65:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017a6a:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017a70:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017a74:	8b 52 38             	mov    edx,DWORD PTR [edx+0x38]
c0017a77:	83 ec 08             	sub    esp,0x8
c0017a7a:	52                   	push   edx
c0017a7b:	50                   	push   eax
c0017a7c:	e8 df 0f ff ff       	call   c0008a60 <VgaText::putx(unsigned int)>
c0017a81:	83 c4 10             	add    esp,0x10
c0017a84:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017a89:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017a8f:	83 ec 08             	sub    esp,0x8
c0017a92:	68 7d 2b 02 c0       	push   0xc0022b7d
c0017a97:	50                   	push   eax
c0017a98:	e8 09 10 ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c0017a9d:	83 c4 10             	add    esp,0x10
c0017aa0:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017aa5:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017aab:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017aaf:	8b 52 1c             	mov    edx,DWORD PTR [edx+0x1c]
c0017ab2:	83 ec 08             	sub    esp,0x8
c0017ab5:	52                   	push   edx
c0017ab6:	50                   	push   eax
c0017ab7:	e8 a4 0f ff ff       	call   c0008a60 <VgaText::putx(unsigned int)>
c0017abc:	83 c4 10             	add    esp,0x10
c0017abf:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017ac4:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017aca:	83 ec 08             	sub    esp,0x8
c0017acd:	68 85 2b 02 c0       	push   0xc0022b85
c0017ad2:	50                   	push   eax
c0017ad3:	e8 ce 0f ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c0017ad8:	83 c4 10             	add    esp,0x10
c0017adb:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017ae0:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017ae6:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017aea:	8b 52 44             	mov    edx,DWORD PTR [edx+0x44]
c0017aed:	83 ec 08             	sub    esp,0x8
c0017af0:	52                   	push   edx
c0017af1:	50                   	push   eax
c0017af2:	e8 69 0f ff ff       	call   c0008a60 <VgaText::putx(unsigned int)>
c0017af7:	83 c4 10             	add    esp,0x10
c0017afa:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017aff:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017b05:	83 ec 08             	sub    esp,0x8
c0017b08:	68 8d 2b 02 c0       	push   0xc0022b8d
c0017b0d:	50                   	push   eax
c0017b0e:	e8 93 0f ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c0017b13:	83 c4 10             	add    esp,0x10
c0017b16:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017b1b:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017b21:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017b25:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c0017b28:	83 ec 08             	sub    esp,0x8
c0017b2b:	52                   	push   edx
c0017b2c:	50                   	push   eax
c0017b2d:	e8 2e 0f ff ff       	call   c0008a60 <VgaText::putx(unsigned int)>
c0017b32:	83 c4 10             	add    esp,0x10
c0017b35:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017b3a:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017b40:	83 ec 08             	sub    esp,0x8
c0017b43:	68 95 2b 02 c0       	push   0xc0022b95
c0017b48:	50                   	push   eax
c0017b49:	e8 58 0f ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c0017b4e:	83 c4 10             	add    esp,0x10
c0017b51:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017b56:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017b5c:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017b60:	8b 52 34             	mov    edx,DWORD PTR [edx+0x34]
c0017b63:	83 ec 08             	sub    esp,0x8
c0017b66:	52                   	push   edx
c0017b67:	50                   	push   eax
c0017b68:	e8 f3 0e ff ff       	call   c0008a60 <VgaText::putx(unsigned int)>
c0017b6d:	83 c4 10             	add    esp,0x10
c0017b70:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017b75:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017b7b:	83 ec 08             	sub    esp,0x8
c0017b7e:	68 9d 2b 02 c0       	push   0xc0022b9d
c0017b83:	50                   	push   eax
c0017b84:	e8 1d 0f ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c0017b89:	83 c4 10             	add    esp,0x10
c0017b8c:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017b91:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017b97:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017b9b:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c0017b9e:	83 ec 08             	sub    esp,0x8
c0017ba1:	52                   	push   edx
c0017ba2:	50                   	push   eax
c0017ba3:	e8 b8 0e ff ff       	call   c0008a60 <VgaText::putx(unsigned int)>
c0017ba8:	83 c4 10             	add    esp,0x10
c0017bab:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017bb0:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017bb6:	83 ec 08             	sub    esp,0x8
c0017bb9:	68 a5 2b 02 c0       	push   0xc0022ba5
c0017bbe:	50                   	push   eax
c0017bbf:	e8 e2 0e ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c0017bc4:	83 c4 10             	add    esp,0x10
c0017bc7:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017bcc:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017bd2:	83 ec 08             	sub    esp,0x8
c0017bd5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0017bd9:	50                   	push   eax
c0017bda:	e8 81 0e ff ff       	call   c0008a60 <VgaText::putx(unsigned int)>
c0017bdf:	83 c4 10             	add    esp,0x10
c0017be2:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017be7:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017bed:	83 ec 08             	sub    esp,0x8
c0017bf0:	68 ae 2b 02 c0       	push   0xc0022bae
c0017bf5:	50                   	push   eax
c0017bf6:	e8 ab 0e ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c0017bfb:	83 c4 10             	add    esp,0x10
c0017bfe:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017c03:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017c09:	83 ec 08             	sub    esp,0x8
c0017c0c:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0017c10:	50                   	push   eax
c0017c11:	e8 4a 0e ff ff       	call   c0008a60 <VgaText::putx(unsigned int)>
c0017c16:	83 c4 10             	add    esp,0x10
c0017c19:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017c1e:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017c24:	83 ec 08             	sub    esp,0x8
c0017c27:	68 b6 2b 02 c0       	push   0xc0022bb6
c0017c2c:	50                   	push   eax
c0017c2d:	e8 74 0e ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c0017c32:	83 c4 10             	add    esp,0x10
c0017c35:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0017c3a:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017c40:	83 ec 08             	sub    esp,0x8
c0017c43:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0017c47:	50                   	push   eax
c0017c48:	e8 13 0e ff ff       	call   c0008a60 <VgaText::putx(unsigned int)>
c0017c4d:	83 c4 10             	add    esp,0x10
c0017c50:	fa                   	cli    
c0017c51:	f4                   	hlt    
c0017c52:	eb fe                	jmp    c0017c52 <displayDebugInfo(regs*)+0x383>

c0017c54 <HalSystemIdle()>:
c0017c54:	56                   	push   esi
c0017c55:	53                   	push   ebx
c0017c56:	83 ec 14             	sub    esp,0x14
c0017c59:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0017c5e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0017c64:	8a 80 8e 11 00 00    	mov    al,BYTE PTR [eax+0x118e]
c0017c6a:	83 e0 04             	and    eax,0x4
c0017c6d:	0f b6 c0             	movzx  eax,al
c0017c70:	85 c0                	test   eax,eax
c0017c72:	0f 95 c0             	setne  al
c0017c75:	0f b6 c0             	movzx  eax,al
c0017c78:	85 c0                	test   eax,eax
c0017c7a:	74 4c                	je     c0017cc8 <HalSystemIdle()+0x74>
c0017c7c:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0017c81:	83 ec 08             	sub    esp,0x8
c0017c84:	68 e1 00 00 00       	push   0xe1
c0017c89:	50                   	push   eax
c0017c8a:	e8 31 f4 fe ff       	call   c00070c0 <Computer::rdmsr(unsigned int)>
c0017c8f:	83 c4 10             	add    esp,0x10
c0017c92:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017c96:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0017c9a:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0017c9f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0017ca3:	83 e2 02             	and    edx,0x2
c0017ca6:	89 d3                	mov    ebx,edx
c0017ca8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017cac:	83 e2 00             	and    edx,0x0
c0017caf:	89 d6                	mov    esi,edx
c0017cb1:	56                   	push   esi
c0017cb2:	53                   	push   ebx
c0017cb3:	68 e1 00 00 00       	push   0xe1
c0017cb8:	50                   	push   eax
c0017cb9:	e8 2e f4 fe ff       	call   c00070ec <Computer::wrmsr(unsigned int, unsigned long long)>
c0017cbe:	83 c4 10             	add    esp,0x10
c0017cc1:	e8 ce 84 fe ff       	call   c0000194 <doTPAUSE>
c0017cc6:	eb 01                	jmp    c0017cc9 <HalSystemIdle()+0x75>
c0017cc8:	f4                   	hlt    
c0017cc9:	90                   	nop
c0017cca:	83 c4 14             	add    esp,0x14
c0017ccd:	5b                   	pop    ebx
c0017cce:	5e                   	pop    esi
c0017ccf:	c3                   	ret    

c0017cd0 <displayProgramFault(char const*)>:
c0017cd0:	83 ec 0c             	sub    esp,0xc
c0017cd3:	83 ec 0c             	sub    esp,0xc
c0017cd6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017cda:	e8 66 2c ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0017cdf:	83 c4 10             	add    esp,0x10
c0017ce2:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0017ce7:	8b 00                	mov    eax,DWORD PTR [eax]
c0017ce9:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0017cec:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017cf2:	85 c0                	test   eax,eax
c0017cf4:	74 21                	je     c0017d17 <displayProgramFault(char const*)+0x47>
c0017cf6:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0017cfb:	8b 00                	mov    eax,DWORD PTR [eax]
c0017cfd:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0017d00:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017d06:	6a 04                	push   0x4
c0017d08:	6a 0f                	push   0xf
c0017d0a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017d0e:	50                   	push   eax
c0017d0f:	e8 04 0e ff ff       	call   c0008b18 <VgaText::puts(char const*, VgaColour, VgaColour)>
c0017d14:	83 c4 10             	add    esp,0x10
c0017d17:	90                   	nop
c0017d18:	83 c4 0c             	add    esp,0xc
c0017d1b:	c3                   	ret    

c0017d1c <gpFault(regs*, void*)>:
c0017d1c:	83 ec 1c             	sub    esp,0x1c
c0017d1f:	c7 05 74 c7 02 c0 78 71 01 c0 	mov    DWORD PTR ds:0xc002c774,0xc0017178
c0017d29:	a1 74 c7 02 c0       	mov    eax,ds:0xc002c774
c0017d2e:	85 c0                	test   eax,eax
c0017d30:	74 1e                	je     c0017d50 <gpFault(regs*, void*)+0x34>
c0017d32:	a1 74 c7 02 c0       	mov    eax,ds:0xc002c774
c0017d37:	83 ec 0c             	sub    esp,0xc
c0017d3a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017d3e:	ff d0                	call   eax
c0017d40:	83 c4 10             	add    esp,0x10
c0017d43:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0017d47:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0017d4c:	85 c0                	test   eax,eax
c0017d4e:	75 2e                	jne    c0017d7e <gpFault(regs*, void*)+0x62>
c0017d50:	83 ec 0c             	sub    esp,0xc
c0017d53:	68 be 2b 02 c0       	push   0xc0022bbe
c0017d58:	e8 73 ff ff ff       	call   c0017cd0 <displayProgramFault(char const*)>
c0017d5d:	83 c4 10             	add    esp,0x10
c0017d60:	83 ec 0c             	sub    esp,0xc
c0017d63:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017d67:	e8 63 fb ff ff       	call   c00178cf <displayDebugInfo(regs*)>
c0017d6c:	83 c4 10             	add    esp,0x10
c0017d6f:	83 ec 0c             	sub    esp,0xc
c0017d72:	6a 00                	push   0x0
c0017d74:	e8 a3 ed ff ff       	call   c0016b1c <Thr::terminateFromIRQ(int)>
c0017d79:	83 c4 10             	add    esp,0x10
c0017d7c:	eb 01                	jmp    c0017d7f <gpFault(regs*, void*)+0x63>
c0017d7e:	90                   	nop
c0017d7f:	83 c4 1c             	add    esp,0x1c
c0017d82:	c3                   	ret    

c0017d83 <pgFault(regs*, void*)>:
c0017d83:	83 ec 1c             	sub    esp,0x1c
c0017d86:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017d8a:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0017d8d:	0f 20 d0             	mov    eax,cr2
c0017d90:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017d94:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017d98:	83 ec 04             	sub    esp,0x4
c0017d9b:	52                   	push   edx
c0017d9c:	50                   	push   eax
c0017d9d:	68 9c 2c 02 c0       	push   0xc0022c9c
c0017da2:	e8 9e 2b ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0017da7:	83 c4 10             	add    esp,0x10
c0017daa:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0017daf:	8b 00                	mov    eax,DWORD PTR [eax]
c0017db1:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0017db4:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0017dba:	0f 20 d2             	mov    edx,cr2
c0017dbd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0017dc1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017dc5:	83 ec 08             	sub    esp,0x8
c0017dc8:	52                   	push   edx
c0017dc9:	50                   	push   eax
c0017dca:	e8 c1 25 ff ff       	call   c000a390 <VAS::tryLoadBackOffDisk(unsigned long)>
c0017dcf:	83 c4 10             	add    esp,0x10
c0017dd2:	0f b6 c0             	movzx  eax,al
c0017dd5:	85 c0                	test   eax,eax
c0017dd7:	75 2e                	jne    c0017e07 <pgFault(regs*, void*)+0x84>
c0017dd9:	83 ec 0c             	sub    esp,0xc
c0017ddc:	68 d7 2b 02 c0       	push   0xc0022bd7
c0017de1:	e8 ea fe ff ff       	call   c0017cd0 <displayProgramFault(char const*)>
c0017de6:	83 c4 10             	add    esp,0x10
c0017de9:	83 ec 0c             	sub    esp,0xc
c0017dec:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017df0:	e8 da fa ff ff       	call   c00178cf <displayDebugInfo(regs*)>
c0017df5:	83 c4 10             	add    esp,0x10
c0017df8:	83 ec 0c             	sub    esp,0xc
c0017dfb:	6a 00                	push   0x0
c0017dfd:	e8 1a ed ff ff       	call   c0016b1c <Thr::terminateFromIRQ(int)>
c0017e02:	83 c4 10             	add    esp,0x10
c0017e05:	eb 01                	jmp    c0017e08 <pgFault(regs*, void*)+0x85>
c0017e07:	90                   	nop
c0017e08:	83 c4 1c             	add    esp,0x1c
c0017e0b:	c3                   	ret    

c0017e0c <otherISRHandler(regs*, void*)>:
c0017e0c:	83 ec 0c             	sub    esp,0xc
c0017e0f:	83 ec 0c             	sub    esp,0xc
c0017e12:	68 c4 2c 02 c0       	push   0xc0022cc4
c0017e17:	e8 b4 fe ff ff       	call   c0017cd0 <displayProgramFault(char const*)>
c0017e1c:	83 c4 10             	add    esp,0x10
c0017e1f:	83 ec 0c             	sub    esp,0xc
c0017e22:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017e26:	e8 a4 fa ff ff       	call   c00178cf <displayDebugInfo(regs*)>
c0017e2b:	83 c4 10             	add    esp,0x10
c0017e2e:	83 ec 0c             	sub    esp,0xc
c0017e31:	6a 00                	push   0x0
c0017e33:	e8 e4 ec ff ff       	call   c0016b1c <Thr::terminateFromIRQ(int)>
c0017e38:	83 c4 10             	add    esp,0x10
c0017e3b:	90                   	nop
c0017e3c:	83 c4 0c             	add    esp,0xc
c0017e3f:	c3                   	ret    

c0017e40 <opcodeFault(regs*, void*)>:
c0017e40:	55                   	push   ebp
c0017e41:	89 e5                	mov    ebp,esp
c0017e43:	83 ec 08             	sub    esp,0x8
c0017e46:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017e49:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0017e4c:	83 ec 08             	sub    esp,0x8
c0017e4f:	50                   	push   eax
c0017e50:	68 e2 2b 02 c0       	push   0xc0022be2
c0017e55:	e8 eb 2a ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0017e5a:	83 c4 10             	add    esp,0x10
c0017e5d:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0017e62:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0017e68:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c0017e6e:	0f b6 c0             	movzx  eax,al
c0017e71:	85 c0                	test   eax,eax
c0017e73:	74 21                	je     c0017e96 <opcodeFault(regs*, void*)+0x56>
c0017e75:	83 ec 0c             	sub    esp,0xc
c0017e78:	68 ec 2c 02 c0       	push   0xc0022cec
c0017e7d:	e8 c3 2a ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0017e82:	83 c4 10             	add    esp,0x10
c0017e85:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017e88:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0017e8b:	8d 50 19             	lea    edx,[eax+0x19]
c0017e8e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017e91:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0017e94:	eb 2b                	jmp    c0017ec1 <opcodeFault(regs*, void*)+0x81>
c0017e96:	83 ec 0c             	sub    esp,0xc
c0017e99:	68 f0 2b 02 c0       	push   0xc0022bf0
c0017e9e:	e8 2d fe ff ff       	call   c0017cd0 <displayProgramFault(char const*)>
c0017ea3:	83 c4 10             	add    esp,0x10
c0017ea6:	83 ec 0c             	sub    esp,0xc
c0017ea9:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0017eac:	e8 1e fa ff ff       	call   c00178cf <displayDebugInfo(regs*)>
c0017eb1:	83 c4 10             	add    esp,0x10
c0017eb4:	83 ec 0c             	sub    esp,0xc
c0017eb7:	6a 00                	push   0x0
c0017eb9:	e8 5e ec ff ff       	call   c0016b1c <Thr::terminateFromIRQ(int)>
c0017ebe:	83 c4 10             	add    esp,0x10
c0017ec1:	c9                   	leave  
c0017ec2:	c3                   	ret    

c0017ec3 <i386SaveCoprocessor(void*)>:
c0017ec3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017ec7:	83 c0 3f             	add    eax,0x3f
c0017eca:	83 e0 c0             	and    eax,0xffffffc0
c0017ecd:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017ed1:	ff 25 70 c7 02 c0    	jmp    DWORD PTR ds:0xc002c770

c0017ed7 <i386LoadCoprocessor(void*)>:
c0017ed7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017edb:	83 c0 3f             	add    eax,0x3f
c0017ede:	83 e0 c0             	and    eax,0xffffffc0
c0017ee1:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017ee5:	ff 25 6c c7 02 c0    	jmp    DWORD PTR ds:0xc002c76c

c0017eeb <x87EmulHandler(regs*, void*)>:
c0017eeb:	53                   	push   ebx
c0017eec:	83 ec 08             	sub    esp,0x8
c0017eef:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017ef4:	80 78 5e 00          	cmp    BYTE PTR [eax+0x5e],0x0
c0017ef8:	74 10                	je     c0017f0a <x87EmulHandler(regs*, void*)+0x1f>
c0017efa:	83 ec 0c             	sub    esp,0xc
c0017efd:	68 fd 2b 02 c0       	push   0xc0022bfd
c0017f02:	e8 24 97 ff ff       	call   c001162b <KePanic(char const*)>
c0017f07:	83 c4 10             	add    esp,0x10
c0017f0a:	0f 20 c0             	mov    eax,cr0
c0017f0d:	a8 08                	test   al,0x8
c0017f0f:	74 59                	je     c0017f6a <x87EmulHandler(regs*, void*)+0x7f>
c0017f11:	0f 06                	clts   
c0017f13:	a1 68 c7 02 c0       	mov    eax,ds:0xc002c768
c0017f18:	85 c0                	test   eax,eax
c0017f1a:	74 0e                	je     c0017f2a <x87EmulHandler(regs*, void*)+0x3f>
c0017f1c:	83 ec 0c             	sub    esp,0xc
c0017f1f:	ff 70 55             	push   DWORD PTR [eax+0x55]
c0017f22:	e8 9c ff ff ff       	call   c0017ec3 <i386SaveCoprocessor(void*)>
c0017f27:	83 c4 10             	add    esp,0x10
c0017f2a:	8b 1d 00 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002000
c0017f30:	83 7b 55 00          	cmp    DWORD PTR [ebx+0x55],0x0
c0017f34:	75 12                	jne    c0017f48 <x87EmulHandler(regs*, void*)+0x5d>
c0017f36:	83 ec 0c             	sub    esp,0xc
c0017f39:	68 40 02 00 00       	push   0x240
c0017f3e:	e8 73 fb fe ff       	call   c0007ab6 <malloc>
c0017f43:	89 43 55             	mov    DWORD PTR [ebx+0x55],eax
c0017f46:	eb 10                	jmp    c0017f58 <x87EmulHandler(regs*, void*)+0x6d>
c0017f48:	83 ec 0c             	sub    esp,0xc
c0017f4b:	a1 68 c7 02 c0       	mov    eax,ds:0xc002c768
c0017f50:	ff 70 55             	push   DWORD PTR [eax+0x55]
c0017f53:	e8 7f ff ff ff       	call   c0017ed7 <i386LoadCoprocessor(void*)>
c0017f58:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017f5d:	83 c4 10             	add    esp,0x10
c0017f60:	a3 68 c7 02 c0       	mov    ds:0xc002c768,eax
c0017f65:	83 c4 08             	add    esp,0x8
c0017f68:	5b                   	pop    ebx
c0017f69:	c3                   	ret    
c0017f6a:	83 ec 0c             	sub    esp,0xc
c0017f6d:	68 11 2c 02 c0       	push   0xc0022c11
c0017f72:	e8 ce 29 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0017f77:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0017f7f:	83 c4 18             	add    esp,0x18
c0017f82:	5b                   	pop    ebx
c0017f83:	e9 94 eb ff ff       	jmp    c0016b1c <Thr::terminateFromIRQ(int)>

c0017f88 <HalInitialiseCoprocessor()>:
c0017f88:	83 ec 10             	sub    esp,0x10
c0017f8b:	c7 05 68 c7 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c768,0x0
c0017f95:	6a 00                	push   0x0
c0017f97:	68 eb 7e 01 c0       	push   0xc0017eeb
c0017f9c:	6a 07                	push   0x7
c0017f9e:	e8 63 4f ff ff       	call   c000cf06 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017fa3:	e8 48 70 00 00       	call   c001eff0 <avxDetect>
c0017fa8:	83 c4 10             	add    esp,0x10
c0017fab:	85 c0                	test   eax,eax
c0017fad:	74 1c                	je     c0017fcb <HalInitialiseCoprocessor()+0x43>
c0017faf:	c7 05 70 c7 02 c0 1a f0 01 c0 	mov    DWORD PTR ds:0xc002c770,0xc001f01a
c0017fb9:	c7 05 6c c7 02 c0 2b f0 01 c0 	mov    DWORD PTR ds:0xc002c76c,0xc001f02b
c0017fc3:	83 c4 0c             	add    esp,0xc
c0017fc6:	e9 71 70 00 00       	jmp    c001f03c <avxInit>
c0017fcb:	e8 b0 73 00 00       	call   c001f380 <absolutelyNoChanceInHell>
c0017fd0:	85 c0                	test   eax,eax
c0017fd2:	74 1c                	je     c0017ff0 <HalInitialiseCoprocessor()+0x68>
c0017fd4:	c7 05 70 c7 02 c0 98 f3 01 c0 	mov    DWORD PTR ds:0xc002c770,0xc001f398
c0017fde:	c7 05 6c c7 02 c0 a0 f3 01 c0 	mov    DWORD PTR ds:0xc002c76c,0xc001f3a0
c0017fe8:	83 c4 0c             	add    esp,0xc
c0017feb:	e9 b8 73 00 00       	jmp    c001f3a8 <sseInit>
c0017ff0:	e8 d1 73 00 00       	call   c001f3c6 <x87Detect>
c0017ff5:	85 c0                	test   eax,eax
c0017ff7:	74 1c                	je     c0018015 <HalInitialiseCoprocessor()+0x8d>
c0017ff9:	c7 05 70 c7 02 c0 e1 f3 01 c0 	mov    DWORD PTR ds:0xc002c770,0xc001f3e1
c0018003:	c7 05 6c c7 02 c0 e8 f3 01 c0 	mov    DWORD PTR ds:0xc002c76c,0xc001f3e8
c001800d:	83 c4 0c             	add    esp,0xc
c0018010:	e9 da 73 00 00       	jmp    c001f3ef <x87Init>
c0018015:	c7 05 70 c7 02 c0 9c 78 01 c0 	mov    DWORD PTR ds:0xc002c770,0xc001789c
c001801f:	c7 05 6c c7 02 c0 9c 78 01 c0 	mov    DWORD PTR ds:0xc002c76c,0xc001789c
c0018029:	0f 20 c0             	mov    eax,cr0
c001802c:	83 c8 04             	or     eax,0x4
c001802f:	0f 22 c0             	mov    cr0,eax
c0018032:	83 c4 0c             	add    esp,0xc
c0018035:	c3                   	ret    

c0018036 <HalPanic(char const*)>:
c0018036:	53                   	push   ebx
c0018037:	83 ec 10             	sub    esp,0x10
c001803a:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001803e:	fa                   	cli    
c001803f:	53                   	push   ebx
c0018040:	68 27 2c 02 c0       	push   0xc0022c27
c0018045:	e8 fb 28 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001804a:	a1 64 c7 02 c0       	mov    eax,ds:0xc002c764
c001804f:	83 c4 10             	add    esp,0x10
c0018052:	85 c0                	test   eax,eax
c0018054:	74 09                	je     c001805f <HalPanic(char const*)+0x29>
c0018056:	83 ec 0c             	sub    esp,0xc
c0018059:	53                   	push   ebx
c001805a:	ff d0                	call   eax
c001805c:	83 c4 10             	add    esp,0x10
c001805f:	a1 04 6f 02 c0       	mov    eax,ds:0xc0026f04
c0018064:	85 c0                	test   eax,eax
c0018066:	0f 84 dc 00 00 00    	je     c0018148 <HalPanic(char const*)+0x112>
c001806c:	52                   	push   edx
c001806d:	6a 01                	push   0x1
c001806f:	6a 0f                	push   0xf
c0018071:	50                   	push   eax
c0018072:	e8 3d 05 ff ff       	call   c00085b4 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0018077:	59                   	pop    ecx
c0018078:	ff 35 04 6f 02 c0    	push   DWORD PTR ds:0xc0026f04
c001807e:	e8 21 07 ff ff       	call   c00087a4 <VgaText::clearScreen()>
c0018083:	58                   	pop    eax
c0018084:	5a                   	pop    edx
c0018085:	68 44 0e 02 c0       	push   0xc0020e44
c001808a:	ff 35 04 6f 02 c0    	push   DWORD PTR ds:0xc0026f04
c0018090:	e8 57 05 ff ff       	call   c00085ec <VgaText::setTitle(char*)>
c0018095:	83 c4 0c             	add    esp,0xc
c0018098:	6a 01                	push   0x1
c001809a:	6a 0f                	push   0xf
c001809c:	ff 35 04 6f 02 c0    	push   DWORD PTR ds:0xc0026f04
c00180a2:	e8 0d 05 ff ff       	call   c00085b4 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c00180a7:	59                   	pop    ecx
c00180a8:	58                   	pop    eax
c00180a9:	68 40 2c 02 c0       	push   0xc0022c40
c00180ae:	ff 35 04 6f 02 c0    	push   DWORD PTR ds:0xc0026f04
c00180b4:	e8 ed 09 ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c00180b9:	83 c4 0c             	add    esp,0xc
c00180bc:	6a 0f                	push   0xf
c00180be:	6a 01                	push   0x1
c00180c0:	ff 35 04 6f 02 c0    	push   DWORD PTR ds:0xc0026f04
c00180c6:	e8 e9 04 ff ff       	call   c00085b4 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c00180cb:	58                   	pop    eax
c00180cc:	5a                   	pop    edx
c00180cd:	68 49 2c 02 c0       	push   0xc0022c49
c00180d2:	ff 35 04 6f 02 c0    	push   DWORD PTR ds:0xc0026f04
c00180d8:	e8 c9 09 ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c00180dd:	83 c4 0c             	add    esp,0xc
c00180e0:	6a 01                	push   0x1
c00180e2:	6a 0f                	push   0xf
c00180e4:	ff 35 04 6f 02 c0    	push   DWORD PTR ds:0xc0026f04
c00180ea:	e8 c5 04 ff ff       	call   c00085b4 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c00180ef:	59                   	pop    ecx
c00180f0:	58                   	pop    eax
c00180f1:	68 8d 2c 02 c0       	push   0xc0022c8d
c00180f6:	ff 35 04 6f 02 c0    	push   DWORD PTR ds:0xc0026f04
c00180fc:	e8 a5 09 ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c0018101:	58                   	pop    eax
c0018102:	5a                   	pop    edx
c0018103:	68 56 2c 02 c0       	push   0xc0022c56
c0018108:	ff 35 04 6f 02 c0    	push   DWORD PTR ds:0xc0026f04
c001810e:	e8 93 09 ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c0018113:	59                   	pop    ecx
c0018114:	58                   	pop    eax
c0018115:	68 90 2c 02 c0       	push   0xc0022c90
c001811a:	ff 35 04 6f 02 c0    	push   DWORD PTR ds:0xc0026f04
c0018120:	e8 81 09 ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c0018125:	58                   	pop    eax
c0018126:	5a                   	pop    edx
c0018127:	53                   	push   ebx
c0018128:	ff 35 04 6f 02 c0    	push   DWORD PTR ds:0xc0026f04
c001812e:	e8 73 09 ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c0018133:	59                   	pop    ecx
c0018134:	5b                   	pop    ebx
c0018135:	68 8d 2c 02 c0       	push   0xc0022c8d
c001813a:	ff 35 04 6f 02 c0    	push   DWORD PTR ds:0xc0026f04
c0018140:	e8 61 09 ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c0018145:	83 c4 10             	add    esp,0x10
c0018148:	eb fe                	jmp    c0018148 <HalPanic(char const*)+0x112>

c001814a <HalQueryPerformanceCounter()>:
c001814a:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c001814f:	31 d2                	xor    edx,edx
c0018151:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c0018157:	31 c0                	xor    eax,eax
c0018159:	f6 81 8c 11 00 00 02 	test   BYTE PTR [ecx+0x118c],0x2
c0018160:	74 02                	je     c0018164 <HalQueryPerformanceCounter()+0x1a>
c0018162:	0f 31                	rdtsc  
c0018164:	c3                   	ret    

c0018165 <HalInitialise()>:
c0018165:	53                   	push   ebx
c0018166:	83 ec 08             	sub    esp,0x8
c0018169:	e8 c8 4f ff ff       	call   c000d136 <setupINTS()>
c001816e:	80 3d e0 bb 02 c0 00 	cmp    BYTE PTR ds:0xc002bbe0,0x0
c0018175:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c001817a:	75 0f                	jne    c001818b <HalInitialise()+0x26>
c001817c:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c0018182:	83 e2 fe             	and    edx,0xfffffffe
c0018185:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c001818b:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c0018191:	c6 05 60 c7 02 c0 00 	mov    BYTE PTR ds:0xc002c760,0x0
c0018198:	83 e2 fe             	and    edx,0xfffffffe
c001819b:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c00181a1:	e8 9e 02 00 00       	call   c0018444 <picOpen()>
c00181a6:	80 3d 60 c7 02 c0 00 	cmp    BYTE PTR ds:0xc002c760,0x0
c00181ad:	74 0a                	je     c00181b9 <HalInitialise()+0x54>
c00181af:	e8 e0 01 00 00       	call   c0018394 <picDisable()>
c00181b4:	e8 ad 67 00 00       	call   c001e966 <apicOpen()>
c00181b9:	bb 0f 00 00 00       	mov    ebx,0xf
c00181be:	50                   	push   eax
c00181bf:	6a 00                	push   0x0
c00181c1:	68 0c 7e 01 c0       	push   0xc0017e0c
c00181c6:	6a 00                	push   0x0
c00181c8:	e8 39 4d ff ff       	call   c000cf06 <installISRHandler(int, void (*)(regs*, void*), void*)>
c00181cd:	83 c4 0c             	add    esp,0xc
c00181d0:	6a 00                	push   0x0
c00181d2:	68 0c 7e 01 c0       	push   0xc0017e0c
c00181d7:	6a 01                	push   0x1
c00181d9:	e8 28 4d ff ff       	call   c000cf06 <installISRHandler(int, void (*)(regs*, void*), void*)>
c00181de:	83 c4 0c             	add    esp,0xc
c00181e1:	6a 00                	push   0x0
c00181e3:	68 9d 78 01 c0       	push   0xc001789d
c00181e8:	6a 02                	push   0x2
c00181ea:	e8 17 4d ff ff       	call   c000cf06 <installISRHandler(int, void (*)(regs*, void*), void*)>
c00181ef:	83 c4 0c             	add    esp,0xc
c00181f2:	6a 00                	push   0x0
c00181f4:	68 0c 7e 01 c0       	push   0xc0017e0c
c00181f9:	6a 03                	push   0x3
c00181fb:	e8 06 4d ff ff       	call   c000cf06 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0018200:	83 c4 0c             	add    esp,0xc
c0018203:	6a 00                	push   0x0
c0018205:	68 0c 7e 01 c0       	push   0xc0017e0c
c001820a:	6a 04                	push   0x4
c001820c:	e8 f5 4c ff ff       	call   c000cf06 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0018211:	83 c4 0c             	add    esp,0xc
c0018214:	6a 00                	push   0x0
c0018216:	68 0c 7e 01 c0       	push   0xc0017e0c
c001821b:	6a 05                	push   0x5
c001821d:	e8 e4 4c ff ff       	call   c000cf06 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0018222:	83 c4 0c             	add    esp,0xc
c0018225:	6a 00                	push   0x0
c0018227:	68 40 7e 01 c0       	push   0xc0017e40
c001822c:	6a 06                	push   0x6
c001822e:	e8 d3 4c ff ff       	call   c000cf06 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0018233:	83 c4 0c             	add    esp,0xc
c0018236:	6a 00                	push   0x0
c0018238:	68 b6 78 01 c0       	push   0xc00178b6
c001823d:	6a 08                	push   0x8
c001823f:	e8 c2 4c ff ff       	call   c000cf06 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0018244:	83 c4 0c             	add    esp,0xc
c0018247:	6a 00                	push   0x0
c0018249:	68 0c 7e 01 c0       	push   0xc0017e0c
c001824e:	6a 09                	push   0x9
c0018250:	e8 b1 4c ff ff       	call   c000cf06 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0018255:	83 c4 0c             	add    esp,0xc
c0018258:	6a 00                	push   0x0
c001825a:	68 0c 7e 01 c0       	push   0xc0017e0c
c001825f:	6a 0a                	push   0xa
c0018261:	e8 a0 4c ff ff       	call   c000cf06 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0018266:	83 c4 0c             	add    esp,0xc
c0018269:	6a 00                	push   0x0
c001826b:	68 0c 7e 01 c0       	push   0xc0017e0c
c0018270:	6a 0b                	push   0xb
c0018272:	e8 8f 4c ff ff       	call   c000cf06 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0018277:	83 c4 0c             	add    esp,0xc
c001827a:	6a 00                	push   0x0
c001827c:	68 1c 7d 01 c0       	push   0xc0017d1c
c0018281:	6a 0d                	push   0xd
c0018283:	e8 7e 4c ff ff       	call   c000cf06 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0018288:	83 c4 0c             	add    esp,0xc
c001828b:	6a 00                	push   0x0
c001828d:	68 83 7d 01 c0       	push   0xc0017d83
c0018292:	6a 0e                	push   0xe
c0018294:	e8 6d 4c ff ff       	call   c000cf06 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0018299:	83 c4 10             	add    esp,0x10
c001829c:	50                   	push   eax
c001829d:	6a 00                	push   0x0
c001829f:	68 0c 7e 01 c0       	push   0xc0017e0c
c00182a4:	53                   	push   ebx
c00182a5:	43                   	inc    ebx
c00182a6:	e8 5b 4c ff ff       	call   c000cf06 <installISRHandler(int, void (*)(regs*, void*), void*)>
c00182ab:	83 c4 10             	add    esp,0x10
c00182ae:	83 fb 1e             	cmp    ebx,0x1e
c00182b1:	75 e9                	jne    c001829c <HalInitialise()+0x137>
c00182b3:	50                   	push   eax
c00182b4:	6a 00                	push   0x0
c00182b6:	68 8a 2a 01 c0       	push   0xc0012a8a
c00182bb:	6a 60                	push   0x60
c00182bd:	e8 44 4c ff ff       	call   c000cf06 <installISRHandler(int, void (*)(regs*, void*), void*)>
c00182c2:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c00182c7:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c00182d1:	c7 04 24 60 01 00 00 	mov    DWORD PTR [esp],0x160
c00182d8:	e8 d9 f7 fe ff       	call   c0007ab6 <malloc>
c00182dd:	89 04 24             	mov    DWORD PTR [esp],eax
c00182e0:	89 c3                	mov    ebx,eax
c00182e2:	e8 3b 09 00 00       	call   c0018c22 <RTC::RTC()>
c00182e7:	c7 83 14 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x114],0x1
c00182f1:	5a                   	pop    edx
c00182f2:	59                   	pop    ecx
c00182f3:	53                   	push   ebx
c00182f4:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c00182fa:	e8 d3 46 ff ff       	call   c000c9d2 <Device::addChild(Device*)>
c00182ff:	8b 03                	mov    eax,DWORD PTR [ebx]
c0018301:	6a 00                	push   0x0
c0018303:	6a 00                	push   0x0
c0018305:	6a 00                	push   0x0
c0018307:	53                   	push   ebx
c0018308:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001830b:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0018310:	89 98 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],ebx
c0018316:	83 c4 28             	add    esp,0x28
c0018319:	5b                   	pop    ebx
c001831a:	c3                   	ret    

c001831b <HalMakeBeep(int)>:
c001831b:	53                   	push   ebx
c001831c:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0018320:	85 db                	test   ebx,ebx
c0018322:	75 07                	jne    c001832b <HalMakeBeep(int)+0x10>
c0018324:	e4 61                	in     al,0x61
c0018326:	83 e0 fc             	and    eax,0xfffffffc
c0018329:	eb 26                	jmp    c0018351 <HalMakeBeep(int)+0x36>
c001832b:	b8 dc 34 12 00       	mov    eax,0x1234dc
c0018330:	99                   	cdq    
c0018331:	f7 fb                	idiv   ebx
c0018333:	89 c1                	mov    ecx,eax
c0018335:	b0 b6                	mov    al,0xb6
c0018337:	e6 43                	out    0x43,al
c0018339:	88 c8                	mov    al,cl
c001833b:	e6 42                	out    0x42,al
c001833d:	89 c8                	mov    eax,ecx
c001833f:	c1 e8 08             	shr    eax,0x8
c0018342:	e6 42                	out    0x42,al
c0018344:	e4 61                	in     al,0x61
c0018346:	89 c2                	mov    edx,eax
c0018348:	83 ca 03             	or     edx,0x3
c001834b:	38 d0                	cmp    al,dl
c001834d:	74 04                	je     c0018353 <HalMakeBeep(int)+0x38>
c001834f:	88 d0                	mov    al,dl
c0018351:	e6 61                	out    0x61,al
c0018353:	5b                   	pop    ebx
c0018354:	c3                   	ret    

c0018355 <HalGetRand()>:
c0018355:	31 c0                	xor    eax,eax
c0018357:	c3                   	ret    

c0018358 <HalEndOfInterrupt(int)>:
c0018358:	80 3d 60 c7 02 c0 00 	cmp    BYTE PTR ds:0xc002c760,0x0
c001835f:	74 23                	je     c0018384 <HalEndOfInterrupt(int)+0x2c>
c0018361:	83 ec 14             	sub    esp,0x14
c0018364:	6a 1b                	push   0x1b
c0018366:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c001836c:	e8 4f ed fe ff       	call   c00070c0 <Computer::rdmsr(unsigned int)>
c0018371:	25 00 f0 ff ff       	and    eax,0xfffff000
c0018376:	c7 80 b0 00 00 00 01 00 00 00 	mov    DWORD PTR [eax+0xb0],0x1
c0018380:	83 c4 1c             	add    esp,0x1c
c0018383:	c3                   	ret    
c0018384:	e9 3f 02 00 00       	jmp    c00185c8 <picEOI(int)>

c0018389 <HalRestart()>:
c0018389:	c3                   	ret    

c001838a <HalShutdown()>:
c001838a:	c3                   	ret    

c001838b <HalSleep()>:
c001838b:	c3                   	ret    

c001838c <picIoWait()>:
c001838c:	eb 00                	jmp    c001838e <picIoWait()+0x2>
c001838e:	eb 00                	jmp    c0018390 <picIoWait()+0x4>
c0018390:	90                   	nop
c0018391:	c3                   	ret    
c0018392:	66 90                	xchg   ax,ax

c0018394 <picDisable()>:
c0018394:	83 ec 10             	sub    esp,0x10
c0018397:	66 c7 44 24 0a a1 00 	mov    WORD PTR [esp+0xa],0xa1
c001839e:	c6 44 24 09 ff       	mov    BYTE PTR [esp+0x9],0xff
c00183a3:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c00183a7:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c00183ac:	ee                   	out    dx,al
c00183ad:	66 c7 44 24 0e 21 00 	mov    WORD PTR [esp+0xe],0x21
c00183b4:	c6 44 24 0d ff       	mov    BYTE PTR [esp+0xd],0xff
c00183b9:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c00183bd:	66 8b 54 24 0e       	mov    dx,WORD PTR [esp+0xe]
c00183c2:	ee                   	out    dx,al
c00183c3:	90                   	nop
c00183c4:	83 c4 10             	add    esp,0x10
c00183c7:	c3                   	ret    

c00183c8 <picGetIRQReg(int)>:
c00183c8:	83 ec 10             	sub    esp,0x10
c00183cb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00183cf:	0f b6 c0             	movzx  eax,al
c00183d2:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c00183d9:	88 44 24 01          	mov    BYTE PTR [esp+0x1],al
c00183dd:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c00183e1:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c00183e6:	ee                   	out    dx,al
c00183e7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00183eb:	0f b6 c0             	movzx  eax,al
c00183ee:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c00183f5:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c00183f9:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c00183fd:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c0018402:	ee                   	out    dx,al
c0018403:	66 c7 44 24 0a a0 00 	mov    WORD PTR [esp+0xa],0xa0
c001840a:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c001840f:	89 c2                	mov    edx,eax
c0018411:	ec                   	in     al,dx
c0018412:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0018416:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001841a:	0f b6 c0             	movzx  eax,al
c001841d:	c1 e0 08             	shl    eax,0x8
c0018420:	89 c1                	mov    ecx,eax
c0018422:	66 c7 44 24 0e 20 00 	mov    WORD PTR [esp+0xe],0x20
c0018429:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c001842e:	89 c2                	mov    edx,eax
c0018430:	ec                   	in     al,dx
c0018431:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0018435:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c0018439:	0f b6 c0             	movzx  eax,al
c001843c:	09 c8                	or     eax,ecx
c001843e:	83 c4 10             	add    esp,0x10
c0018441:	c3                   	ret    
c0018442:	66 90                	xchg   ax,ax

c0018444 <picOpen()>:
c0018444:	83 ec 50             	sub    esp,0x50
c0018447:	66 c7 44 24 10 21 00 	mov    WORD PTR [esp+0x10],0x21
c001844e:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0018453:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0018457:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001845b:	ee                   	out    dx,al
c001845c:	66 c7 44 24 14 a1 00 	mov    WORD PTR [esp+0x14],0xa1
c0018463:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c0018468:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c001846c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0018470:	ee                   	out    dx,al
c0018471:	c7 44 24 4c 20 00 00 00 	mov    DWORD PTR [esp+0x4c],0x20
c0018479:	c7 44 24 48 28 00 00 00 	mov    DWORD PTR [esp+0x48],0x28
c0018481:	66 c7 44 24 18 21 00 	mov    WORD PTR [esp+0x18],0x21
c0018488:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001848c:	89 c2                	mov    edx,eax
c001848e:	ec                   	in     al,dx
c001848f:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c0018493:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c0018497:	88 44 24 47          	mov    BYTE PTR [esp+0x47],al
c001849b:	66 c7 44 24 1c a1 00 	mov    WORD PTR [esp+0x1c],0xa1
c00184a2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00184a6:	89 c2                	mov    edx,eax
c00184a8:	ec                   	in     al,dx
c00184a9:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c00184ad:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c00184b1:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c00184b5:	66 c7 44 24 20 20 00 	mov    WORD PTR [esp+0x20],0x20
c00184bc:	c6 44 24 1f 11       	mov    BYTE PTR [esp+0x1f],0x11
c00184c1:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c00184c5:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00184c9:	ee                   	out    dx,al
c00184ca:	e8 bd fe ff ff       	call   c001838c <picIoWait()>
c00184cf:	66 c7 44 24 24 a0 00 	mov    WORD PTR [esp+0x24],0xa0
c00184d6:	c6 44 24 23 11       	mov    BYTE PTR [esp+0x23],0x11
c00184db:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c00184df:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00184e3:	ee                   	out    dx,al
c00184e4:	e8 a3 fe ff ff       	call   c001838c <picIoWait()>
c00184e9:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00184ed:	0f b6 c0             	movzx  eax,al
c00184f0:	66 c7 44 24 28 21 00 	mov    WORD PTR [esp+0x28],0x21
c00184f7:	88 44 24 27          	mov    BYTE PTR [esp+0x27],al
c00184fb:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c00184ff:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018503:	ee                   	out    dx,al
c0018504:	e8 83 fe ff ff       	call   c001838c <picIoWait()>
c0018509:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001850d:	0f b6 c0             	movzx  eax,al
c0018510:	66 c7 44 24 2c a1 00 	mov    WORD PTR [esp+0x2c],0xa1
c0018517:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c001851b:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c001851f:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0018523:	ee                   	out    dx,al
c0018524:	e8 63 fe ff ff       	call   c001838c <picIoWait()>
c0018529:	66 c7 44 24 30 21 00 	mov    WORD PTR [esp+0x30],0x21
c0018530:	c6 44 24 2f 04       	mov    BYTE PTR [esp+0x2f],0x4
c0018535:	8a 44 24 2f          	mov    al,BYTE PTR [esp+0x2f]
c0018539:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001853d:	ee                   	out    dx,al
c001853e:	e8 49 fe ff ff       	call   c001838c <picIoWait()>
c0018543:	66 c7 44 24 34 a1 00 	mov    WORD PTR [esp+0x34],0xa1
c001854a:	c6 44 24 33 02       	mov    BYTE PTR [esp+0x33],0x2
c001854f:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c0018553:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0018557:	ee                   	out    dx,al
c0018558:	e8 2f fe ff ff       	call   c001838c <picIoWait()>
c001855d:	66 c7 44 24 38 21 00 	mov    WORD PTR [esp+0x38],0x21
c0018564:	c6 44 24 37 01       	mov    BYTE PTR [esp+0x37],0x1
c0018569:	8a 44 24 37          	mov    al,BYTE PTR [esp+0x37]
c001856d:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0018571:	ee                   	out    dx,al
c0018572:	e8 15 fe ff ff       	call   c001838c <picIoWait()>
c0018577:	66 c7 44 24 3c a1 00 	mov    WORD PTR [esp+0x3c],0xa1
c001857e:	c6 44 24 3b 01       	mov    BYTE PTR [esp+0x3b],0x1
c0018583:	8a 44 24 3b          	mov    al,BYTE PTR [esp+0x3b]
c0018587:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001858b:	ee                   	out    dx,al
c001858c:	e8 fb fd ff ff       	call   c001838c <picIoWait()>
c0018591:	0f b6 44 24 47       	movzx  eax,BYTE PTR [esp+0x47]
c0018596:	66 c7 44 24 40 21 00 	mov    WORD PTR [esp+0x40],0x21
c001859d:	88 44 24 3f          	mov    BYTE PTR [esp+0x3f],al
c00185a1:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c00185a5:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00185a9:	ee                   	out    dx,al
c00185aa:	0f b6 44 24 46       	movzx  eax,BYTE PTR [esp+0x46]
c00185af:	66 c7 44 24 44 a1 00 	mov    WORD PTR [esp+0x44],0xa1
c00185b6:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c00185ba:	8a 44 24 43          	mov    al,BYTE PTR [esp+0x43]
c00185be:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00185c2:	ee                   	out    dx,al
c00185c3:	90                   	nop
c00185c4:	83 c4 50             	add    esp,0x50
c00185c7:	c3                   	ret    

c00185c8 <picEOI(int)>:
c00185c8:	83 ec 10             	sub    esp,0x10
c00185cb:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c00185d0:	75 1e                	jne    c00185f0 <picEOI(int)+0x28>
c00185d2:	6a 0b                	push   0xb
c00185d4:	e8 ef fd ff ff       	call   c00183c8 <picGetIRQReg(int)>
c00185d9:	83 c4 04             	add    esp,0x4
c00185dc:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c00185e1:	0f b7 44 24 0e       	movzx  eax,WORD PTR [esp+0xe]
c00185e6:	25 80 00 00 00       	and    eax,0x80
c00185eb:	74 73                	je     c0018660 <picEOI(int)+0x98>
c00185ed:	8d 76 00             	lea    esi,[esi+0x0]
c00185f0:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c00185f5:	75 31                	jne    c0018628 <picEOI(int)+0x60>
c00185f7:	6a 0b                	push   0xb
c00185f9:	e8 ca fd ff ff       	call   c00183c8 <picGetIRQReg(int)>
c00185fe:	83 c4 04             	add    esp,0x4
c0018601:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0018606:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001860a:	98                   	cwde   
c001860b:	85 c0                	test   eax,eax
c001860d:	78 19                	js     c0018628 <picEOI(int)+0x60>
c001860f:	66 c7 44 24 0a 20 00 	mov    WORD PTR [esp+0xa],0x20
c0018616:	c6 44 24 09 20       	mov    BYTE PTR [esp+0x9],0x20
c001861b:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001861f:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0018624:	ee                   	out    dx,al
c0018625:	eb 3d                	jmp    c0018664 <picEOI(int)+0x9c>
c0018627:	90                   	nop
c0018628:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c001862d:	7e 19                	jle    c0018648 <picEOI(int)+0x80>
c001862f:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c0018636:	c6 44 24 05 20       	mov    BYTE PTR [esp+0x5],0x20
c001863b:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c001863f:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c0018644:	ee                   	out    dx,al
c0018645:	8d 76 00             	lea    esi,[esi+0x0]
c0018648:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c001864f:	c6 44 24 01 20       	mov    BYTE PTR [esp+0x1],0x20
c0018654:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c0018658:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c001865d:	ee                   	out    dx,al
c001865e:	eb 04                	jmp    c0018664 <picEOI(int)+0x9c>
c0018660:	90                   	nop
c0018661:	8d 76 00             	lea    esi,[esi+0x0]
c0018664:	83 c4 10             	add    esp,0x10
c0018667:	c3                   	ret    

c0018668 <RTC::open(int, int, void*)>:
c0018668:	31 c0                	xor    eax,eax
c001866a:	c3                   	ret    
c001866b:	90                   	nop

c001866c <RTC::close(int, int, void*)>:
c001866c:	31 c0                	xor    eax,eax
c001866e:	c3                   	ret    
c001866f:	90                   	nop

c0018670 <RTC::timeInSecondsUTC()>:
c0018670:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018674:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c001867a:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0018680:	c3                   	ret    
c0018681:	90                   	nop

c0018682 <RTC::timeInDatetimeUTC()>:
c0018682:	53                   	push   ebx
c0018683:	83 ec 14             	sub    esp,0x14
c0018686:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001868a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001868e:	8b 10                	mov    edx,DWORD PTR [eax]
c0018690:	50                   	push   eax
c0018691:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0018694:	83 c4 0c             	add    esp,0xc
c0018697:	52                   	push   edx
c0018698:	50                   	push   eax
c0018699:	53                   	push   ebx
c001869a:	e8 a7 40 ff ff       	call   c000c746 <secondsToDatetime(unsigned long long)>
c001869f:	89 d8                	mov    eax,ebx
c00186a1:	83 c4 14             	add    esp,0x14
c00186a4:	5b                   	pop    ebx
c00186a5:	c2 04 00             	ret    0x4

c00186a8 <RTC::setTimeInSecondsUTC(unsigned long long)>:
c00186a8:	56                   	push   esi
c00186a9:	53                   	push   ebx
c00186aa:	83 ec 14             	sub    esp,0x14
c00186ad:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00186b1:	8b 03                	mov    eax,DWORD PTR [ebx]
c00186b3:	8b 70 30             	mov    esi,DWORD PTR [eax+0x30]
c00186b6:	8d 44 24 08          	lea    eax,[esp+0x8]
c00186ba:	52                   	push   edx
c00186bb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00186bf:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00186c3:	50                   	push   eax
c00186c4:	e8 7d 40 ff ff       	call   c000c746 <secondsToDatetime(unsigned long long)>
c00186c9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00186cd:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00186d1:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00186d5:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c00186d9:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00186dd:	89 f0                	mov    eax,esi
c00186df:	83 c4 20             	add    esp,0x20
c00186e2:	5b                   	pop    ebx
c00186e3:	5e                   	pop    esi
c00186e4:	ff e0                	jmp    eax

c00186e6 <RTC::~RTC()>:
c00186e6:	83 ec 0c             	sub    esp,0xc
c00186e9:	ba 2c 2d 02 c0       	mov    edx,0xc0022d2c
c00186ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00186f2:	89 10                	mov    DWORD PTR [eax],edx
c00186f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00186f8:	83 ec 0c             	sub    esp,0xc
c00186fb:	50                   	push   eax
c00186fc:	e8 d7 3d ff ff       	call   c000c4d8 <Clock::~Clock()>
c0018701:	83 c4 10             	add    esp,0x10
c0018704:	90                   	nop
c0018705:	83 c4 0c             	add    esp,0xc
c0018708:	c3                   	ret    
c0018709:	90                   	nop

c001870a <RTC::~RTC()>:
c001870a:	83 ec 0c             	sub    esp,0xc
c001870d:	83 ec 0c             	sub    esp,0xc
c0018710:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018714:	e8 cd ff ff ff       	call   c00186e6 <RTC::~RTC()>
c0018719:	83 c4 10             	add    esp,0x10
c001871c:	83 ec 08             	sub    esp,0x8
c001871f:	68 60 01 00 00       	push   0x160
c0018724:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018728:	e8 eb 20 ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c001872d:	83 c4 10             	add    esp,0x10
c0018730:	83 c4 0c             	add    esp,0xc
c0018733:	c3                   	ret    

c0018734 <RTC::get_update_in_progress_flag()>:
c0018734:	83 ec 14             	sub    esp,0x14
c0018737:	6a 0a                	push   0xa
c0018739:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c001873f:	e8 34 ea fe ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c0018744:	83 c4 1c             	add    esp,0x1c
c0018747:	0f b6 c0             	movzx  eax,al
c001874a:	c1 e8 07             	shr    eax,0x7
c001874d:	c3                   	ret    

c001874e <RTC::completeRTCRefresh()>:
c001874e:	55                   	push   ebp
c001874f:	57                   	push   edi
c0018750:	56                   	push   esi
c0018751:	53                   	push   ebx
c0018752:	83 ec 3c             	sub    esp,0x3c
c0018755:	8b 1d ec b8 02 c0    	mov    ebx,DWORD PTR ds:0xc002b8ec
c001875b:	83 ec 0c             	sub    esp,0xc
c001875e:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0018762:	e8 cd ff ff ff       	call   c0018734 <RTC::get_update_in_progress_flag()>
c0018767:	83 c4 10             	add    esp,0x10
c001876a:	84 c0                	test   al,al
c001876c:	74 0e                	je     c001877c <RTC::completeRTCRefresh()+0x2e>
c001876e:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c0018774:	3b 05 ec b8 02 c0    	cmp    eax,DWORD PTR ds:0xc002b8ec
c001877a:	73 df                	jae    c001875b <RTC::completeRTCRefresh()+0xd>
c001877c:	51                   	push   ecx
c001877d:	51                   	push   ecx
c001877e:	6a 00                	push   0x0
c0018780:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018786:	e8 ed e9 fe ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c001878b:	5b                   	pop    ebx
c001878c:	89 c7                	mov    edi,eax
c001878e:	5e                   	pop    esi
c001878f:	6a 02                	push   0x2
c0018791:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018797:	e8 dc e9 fe ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c001879c:	88 44 24 28          	mov    BYTE PTR [esp+0x28],al
c00187a0:	5d                   	pop    ebp
c00187a1:	58                   	pop    eax
c00187a2:	6a 04                	push   0x4
c00187a4:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c00187aa:	e8 c9 e9 fe ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c00187af:	88 44 24 2c          	mov    BYTE PTR [esp+0x2c],al
c00187b3:	58                   	pop    eax
c00187b4:	5a                   	pop    edx
c00187b5:	6a 07                	push   0x7
c00187b7:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c00187bd:	e8 b6 e9 fe ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c00187c2:	88 44 24 32          	mov    BYTE PTR [esp+0x32],al
c00187c6:	59                   	pop    ecx
c00187c7:	5b                   	pop    ebx
c00187c8:	6a 08                	push   0x8
c00187ca:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c00187d0:	e8 a3 e9 fe ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c00187d5:	88 44 24 33          	mov    BYTE PTR [esp+0x33],al
c00187d9:	5e                   	pop    esi
c00187da:	5d                   	pop    ebp
c00187db:	6a 09                	push   0x9
c00187dd:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c00187e3:	e8 90 e9 fe ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c00187e8:	0f b6 c0             	movzx  eax,al
c00187eb:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00187ef:	83 c4 10             	add    esp,0x10
c00187f2:	8b 1d ec b8 02 c0    	mov    ebx,DWORD PTR ds:0xc002b8ec
c00187f8:	83 ec 0c             	sub    esp,0xc
c00187fb:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00187ff:	e8 30 ff ff ff       	call   c0018734 <RTC::get_update_in_progress_flag()>
c0018804:	83 c4 10             	add    esp,0x10
c0018807:	84 c0                	test   al,al
c0018809:	74 0e                	je     c0018819 <RTC::completeRTCRefresh()+0xcb>
c001880b:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c0018811:	3b 05 ec b8 02 c0    	cmp    eax,DWORD PTR ds:0xc002b8ec
c0018817:	73 df                	jae    c00187f8 <RTC::completeRTCRefresh()+0xaa>
c0018819:	51                   	push   ecx
c001881a:	51                   	push   ecx
c001881b:	6a 00                	push   0x0
c001881d:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018823:	e8 50 e9 fe ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c0018828:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c001882c:	5b                   	pop    ebx
c001882d:	5e                   	pop    esi
c001882e:	6a 02                	push   0x2
c0018830:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018836:	e8 3d e9 fe ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c001883b:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001883f:	5d                   	pop    ebp
c0018840:	58                   	pop    eax
c0018841:	6a 04                	push   0x4
c0018843:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018849:	e8 2a e9 fe ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c001884e:	88 c3                	mov    bl,al
c0018850:	58                   	pop    eax
c0018851:	5a                   	pop    edx
c0018852:	6a 07                	push   0x7
c0018854:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c001885a:	e8 19 e9 fe ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c001885f:	59                   	pop    ecx
c0018860:	89 c6                	mov    esi,eax
c0018862:	5d                   	pop    ebp
c0018863:	6a 08                	push   0x8
c0018865:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c001886b:	e8 08 e9 fe ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c0018870:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c0018874:	58                   	pop    eax
c0018875:	5a                   	pop    edx
c0018876:	6a 09                	push   0x9
c0018878:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c001887e:	e8 f5 e8 fe ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c0018883:	89 f9                	mov    ecx,edi
c0018885:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c0018889:	0f b6 e8             	movzx  ebp,al
c001888c:	83 c4 10             	add    esp,0x10
c001888f:	38 4c 24 08          	cmp    BYTE PTR [esp+0x8],cl
c0018893:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0018898:	0f b6 7c 24 0c       	movzx  edi,BYTE PTR [esp+0xc]
c001889d:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c00188a1:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00188a5:	89 7c 24 2c          	mov    DWORD PTR [esp+0x2c],edi
c00188a9:	0f 94 c0             	sete   al
c00188ac:	0f b6 fb             	movzx  edi,bl
c00188af:	3a 4c 24 18          	cmp    cl,BYTE PTR [esp+0x18]
c00188b3:	0f b6 4c 24 10       	movzx  ecx,BYTE PTR [esp+0x10]
c00188b8:	0f 94 c2             	sete   dl
c00188bb:	21 d0                	and    eax,edx
c00188bd:	3a 5c 24 1c          	cmp    bl,BYTE PTR [esp+0x1c]
c00188c1:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c00188c5:	0f 94 c2             	sete   dl
c00188c8:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c00188cc:	21 c2                	and    edx,eax
c00188ce:	89 f0                	mov    eax,esi
c00188d0:	0f b6 c0             	movzx  eax,al
c00188d3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00188d7:	89 f0                	mov    eax,esi
c00188d9:	3a 44 24 22          	cmp    al,BYTE PTR [esp+0x22]
c00188dd:	0f 94 c0             	sete   al
c00188e0:	21 d0                	and    eax,edx
c00188e2:	31 d2                	xor    edx,edx
c00188e4:	3a 4c 24 23          	cmp    cl,BYTE PTR [esp+0x23]
c00188e8:	0f 94 c2             	sete   dl
c00188eb:	85 c2                	test   edx,eax
c00188ed:	75 27                	jne    c0018916 <RTC::completeRTCRefresh()+0x1c8>
c00188ef:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c00188f3:	89 6c 24 24          	mov    DWORD PTR [esp+0x24],ebp
c00188f7:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c00188fb:	88 5c 24 1c          	mov    BYTE PTR [esp+0x1c],bl
c00188ff:	89 f0                	mov    eax,esi
c0018901:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0018905:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c0018909:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001890d:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c0018911:	e9 dc fe ff ff       	jmp    c00187f2 <RTC::completeRTCRefresh()+0xa4>
c0018916:	39 6c 24 24          	cmp    DWORD PTR [esp+0x24],ebp
c001891a:	75 d3                	jne    c00188ef <RTC::completeRTCRefresh()+0x1a1>
c001891c:	52                   	push   edx
c001891d:	52                   	push   edx
c001891e:	6a 0b                	push   0xb
c0018920:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018926:	e8 4d e8 fe ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c001892b:	83 c4 10             	add    esp,0x10
c001892e:	a8 04                	test   al,0x4
c0018930:	75 7a                	jne    c00189ac <RTC::completeRTCRefresh()+0x25e>
c0018932:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0018936:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001893a:	83 e1 0f             	and    ecx,0xf
c001893d:	c1 ea 04             	shr    edx,0x4
c0018940:	c1 ef 04             	shr    edi,0x4
c0018943:	6b d2 0a             	imul   edx,edx,0xa
c0018946:	83 e6 0f             	and    esi,0xf
c0018949:	01 d1                	add    ecx,edx
c001894b:	c1 ed 04             	shr    ebp,0x4
c001894e:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0018952:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0018956:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001895a:	c1 ea 04             	shr    edx,0x4
c001895d:	83 e1 0f             	and    ecx,0xf
c0018960:	6b d2 0a             	imul   edx,edx,0xa
c0018963:	6b ed 0a             	imul   ebp,ebp,0xa
c0018966:	01 d1                	add    ecx,edx
c0018968:	89 fa                	mov    edx,edi
c001896a:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c001896e:	83 e2 07             	and    edx,0x7
c0018971:	89 d9                	mov    ecx,ebx
c0018973:	6b d2 0a             	imul   edx,edx,0xa
c0018976:	83 e1 0f             	and    ecx,0xf
c0018979:	83 e3 80             	and    ebx,0xffffff80
c001897c:	01 d1                	add    ecx,edx
c001897e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018982:	09 cb                	or     ebx,ecx
c0018984:	c1 ea 04             	shr    edx,0x4
c0018987:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001898b:	6b d2 0a             	imul   edx,edx,0xa
c001898e:	83 e1 0f             	and    ecx,0xf
c0018991:	01 d6                	add    esi,edx
c0018993:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0018997:	c1 ea 04             	shr    edx,0x4
c001899a:	6b d2 0a             	imul   edx,edx,0xa
c001899d:	01 d1                	add    ecx,edx
c001899f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00189a3:	88 4c 24 10          	mov    BYTE PTR [esp+0x10],cl
c00189a7:	83 e2 0f             	and    edx,0xf
c00189aa:	01 d5                	add    ebp,edx
c00189ac:	a8 02                	test   al,0x2
c00189ae:	75 15                	jne    c00189c5 <RTC::completeRTCRefresh()+0x277>
c00189b0:	f6 c3 80             	test   bl,0x80
c00189b3:	74 10                	je     c00189c5 <RTC::completeRTCRefresh()+0x277>
c00189b5:	83 e3 7f             	and    ebx,0x7f
c00189b8:	b9 18 00 00 00       	mov    ecx,0x18
c00189bd:	8d 43 0c             	lea    eax,[ebx+0xc]
c00189c0:	99                   	cdq    
c00189c1:	f7 f9                	idiv   ecx
c00189c3:	88 d3                	mov    bl,dl
c00189c5:	8d bd d0 07 00 00    	lea    edi,[ebp+0x7d0]
c00189cb:	81 ff e3 07 00 00    	cmp    edi,0x7e3
c00189d1:	77 06                	ja     c00189d9 <RTC::completeRTCRefresh()+0x28b>
c00189d3:	8d bd 34 08 00 00    	lea    edi,[ebp+0x834]
c00189d9:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00189de:	31 c9                	xor    ecx,ecx
c00189e0:	c1 e0 10             	shl    eax,0x10
c00189e3:	89 cd                	mov    ebp,ecx
c00189e5:	c1 e7 10             	shl    edi,0x10
c00189e8:	31 d2                	xor    edx,edx
c00189ea:	81 e5 ff ff 00 ff    	and    ebp,0xff00ffff
c00189f0:	09 c5                	or     ebp,eax
c00189f2:	89 f0                	mov    eax,esi
c00189f4:	89 e9                	mov    ecx,ebp
c00189f6:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c00189fa:	8a 6c 24 0c          	mov    ch,BYTE PTR [esp+0xc]
c00189fe:	88 c2                	mov    dl,al
c0018a00:	88 d9                	mov    cl,bl
c0018a02:	8a 74 24 10          	mov    dh,BYTE PTR [esp+0x10]
c0018a06:	0f b7 c2             	movzx  eax,dx
c0018a09:	09 f8                	or     eax,edi
c0018a0b:	89 c2                	mov    edx,eax
c0018a0d:	50                   	push   eax
c0018a0e:	50                   	push   eax
c0018a0f:	51                   	push   ecx
c0018a10:	52                   	push   edx
c0018a11:	e8 b1 3b ff ff       	call   c000c5c7 <datetimeToSeconds(datetime_t)>
c0018a16:	8b 74 24 60          	mov    esi,DWORD PTR [esp+0x60]
c0018a1a:	89 86 58 01 00 00    	mov    DWORD PTR [esi+0x158],eax
c0018a20:	89 96 5c 01 00 00    	mov    DWORD PTR [esi+0x15c],edx
c0018a26:	83 c4 4c             	add    esp,0x4c
c0018a29:	5b                   	pop    ebx
c0018a2a:	5e                   	pop    esi
c0018a2b:	5f                   	pop    edi
c0018a2c:	5d                   	pop    ebp
c0018a2d:	c3                   	ret    

c0018a2e <RTC::setTimeInDatetimeUTC(datetime_t)>:
c0018a2e:	55                   	push   ebp
c0018a2f:	57                   	push   edi
c0018a30:	56                   	push   esi
c0018a31:	53                   	push   ebx
c0018a32:	83 ec 30             	sub    esp,0x30
c0018a35:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0018a39:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c0018a3d:	6a 00                	push   0x0
c0018a3f:	6a 00                	push   0x0
c0018a41:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018a47:	e8 46 e8 fe ff       	call   c0007292 <Computer::writeCMOS(unsigned char, unsigned char)>
c0018a4c:	83 c4 0c             	add    esp,0xc
c0018a4f:	6a 00                	push   0x0
c0018a51:	6a 02                	push   0x2
c0018a53:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018a59:	e8 34 e8 fe ff       	call   c0007292 <Computer::writeCMOS(unsigned char, unsigned char)>
c0018a5e:	31 d2                	xor    edx,edx
c0018a60:	89 f9                	mov    ecx,edi
c0018a62:	89 f8                	mov    eax,edi
c0018a64:	c1 e9 10             	shr    ecx,0x10
c0018a67:	0f b6 c4             	movzx  eax,ah
c0018a6a:	88 4c 24 1c          	mov    BYTE PTR [esp+0x1c],cl
c0018a6e:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c0018a72:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0018a76:	b9 64 00 00 00       	mov    ecx,0x64
c0018a7b:	89 f0                	mov    eax,esi
c0018a7d:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c0018a81:	89 f0                	mov    eax,esi
c0018a83:	0f b6 c4             	movzx  eax,ah
c0018a86:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0018a8a:	89 f0                	mov    eax,esi
c0018a8c:	c1 e8 10             	shr    eax,0x10
c0018a8f:	f7 f1                	div    ecx
c0018a91:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0018a95:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c0018a99:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c0018a9d:	59                   	pop    ecx
c0018a9e:	5b                   	pop    ebx
c0018a9f:	89 fb                	mov    ebx,edi
c0018aa1:	6a 0b                	push   0xb
c0018aa3:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018aa9:	e8 ca e6 fe ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c0018aae:	83 c4 10             	add    esp,0x10
c0018ab1:	89 c5                	mov    ebp,eax
c0018ab3:	a8 04                	test   al,0x4
c0018ab5:	75 6e                	jne    c0018b25 <RTC::setTimeInDatetimeUTC(datetime_t)+0xf7>
c0018ab7:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0018abb:	31 d2                	xor    edx,edx
c0018abd:	0f b6 c1             	movzx  eax,cl
c0018ac0:	b9 0a 00 00 00       	mov    ecx,0xa
c0018ac5:	f7 f1                	div    ecx
c0018ac7:	c1 e0 04             	shl    eax,0x4
c0018aca:	09 d0                	or     eax,edx
c0018acc:	31 d2                	xor    edx,edx
c0018ace:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018ad2:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0018ad7:	f7 f1                	div    ecx
c0018ad9:	c1 e0 04             	shl    eax,0x4
c0018adc:	09 d0                	or     eax,edx
c0018ade:	31 d2                	xor    edx,edx
c0018ae0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0018ae4:	0f b6 c3             	movzx  eax,bl
c0018ae7:	f7 f1                	div    ecx
c0018ae9:	c1 e0 04             	shl    eax,0x4
c0018aec:	09 d0                	or     eax,edx
c0018aee:	31 d2                	xor    edx,edx
c0018af0:	89 c3                	mov    ebx,eax
c0018af2:	89 f0                	mov    eax,esi
c0018af4:	0f b6 c0             	movzx  eax,al
c0018af7:	f7 f1                	div    ecx
c0018af9:	c1 e0 04             	shl    eax,0x4
c0018afc:	09 d0                	or     eax,edx
c0018afe:	31 d2                	xor    edx,edx
c0018b00:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0018b04:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0018b09:	f7 f1                	div    ecx
c0018b0b:	c1 e0 04             	shl    eax,0x4
c0018b0e:	09 d0                	or     eax,edx
c0018b10:	31 d2                	xor    edx,edx
c0018b12:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0018b16:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018b1a:	f7 f1                	div    ecx
c0018b1c:	c1 e0 04             	shl    eax,0x4
c0018b1f:	09 d0                	or     eax,edx
c0018b21:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0018b25:	83 e5 02             	and    ebp,0x2
c0018b28:	75 1e                	jne    c0018b48 <RTC::setTimeInDatetimeUTC(datetime_t)+0x11a>
c0018b2a:	0f b6 c3             	movzx  eax,bl
c0018b2d:	83 f8 0b             	cmp    eax,0xb
c0018b30:	76 10                	jbe    c0018b42 <RTC::setTimeInDatetimeUTC(datetime_t)+0x114>
c0018b32:	8d 53 f4             	lea    edx,[ebx-0xc]
c0018b35:	88 d3                	mov    bl,dl
c0018b37:	84 d2                	test   dl,dl
c0018b39:	75 02                	jne    c0018b3d <RTC::setTimeInDatetimeUTC(datetime_t)+0x10f>
c0018b3b:	b3 0c                	mov    bl,0xc
c0018b3d:	83 cb 80             	or     ebx,0xffffff80
c0018b40:	eb 06                	jmp    c0018b48 <RTC::setTimeInDatetimeUTC(datetime_t)+0x11a>
c0018b42:	85 c0                	test   eax,eax
c0018b44:	75 02                	jne    c0018b48 <RTC::setTimeInDatetimeUTC(datetime_t)+0x11a>
c0018b46:	b3 0c                	mov    bl,0xc
c0018b48:	0f b6 db             	movzx  ebx,bl
c0018b4b:	50                   	push   eax
c0018b4c:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c0018b51:	52                   	push   edx
c0018b52:	6a 00                	push   0x0
c0018b54:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018b5a:	e8 33 e7 fe ff       	call   c0007292 <Computer::writeCMOS(unsigned char, unsigned char)>
c0018b5f:	83 c4 0c             	add    esp,0xc
c0018b62:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0018b67:	50                   	push   eax
c0018b68:	6a 02                	push   0x2
c0018b6a:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018b70:	e8 1d e7 fe ff       	call   c0007292 <Computer::writeCMOS(unsigned char, unsigned char)>
c0018b75:	83 c4 0c             	add    esp,0xc
c0018b78:	53                   	push   ebx
c0018b79:	6a 04                	push   0x4
c0018b7b:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018b81:	e8 0c e7 fe ff       	call   c0007292 <Computer::writeCMOS(unsigned char, unsigned char)>
c0018b86:	83 c4 0c             	add    esp,0xc
c0018b89:	0f b6 54 24 14       	movzx  edx,BYTE PTR [esp+0x14]
c0018b8e:	52                   	push   edx
c0018b8f:	6a 07                	push   0x7
c0018b91:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018b97:	e8 f6 e6 fe ff       	call   c0007292 <Computer::writeCMOS(unsigned char, unsigned char)>
c0018b9c:	83 c4 0c             	add    esp,0xc
c0018b9f:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0018ba4:	50                   	push   eax
c0018ba5:	6a 08                	push   0x8
c0018ba7:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018bad:	e8 e0 e6 fe ff       	call   c0007292 <Computer::writeCMOS(unsigned char, unsigned char)>
c0018bb2:	83 c4 0c             	add    esp,0xc
c0018bb5:	0f b6 6c 24 18       	movzx  ebp,BYTE PTR [esp+0x18]
c0018bba:	55                   	push   ebp
c0018bbb:	6a 09                	push   0x9
c0018bbd:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018bc3:	e8 ca e6 fe ff       	call   c0007292 <Computer::writeCMOS(unsigned char, unsigned char)>
c0018bc8:	5a                   	pop    edx
c0018bc9:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0018bcd:	e8 7c fb ff ff       	call   c001874e <RTC::completeRTCRefresh()>
c0018bd2:	83 c4 3c             	add    esp,0x3c
c0018bd5:	b0 01                	mov    al,0x1
c0018bd7:	5b                   	pop    ebx
c0018bd8:	5e                   	pop    esi
c0018bd9:	5f                   	pop    edi
c0018bda:	5d                   	pop    ebp
c0018bdb:	c3                   	ret    

c0018bdc <rtcIRQHandler(regs*, void*)>:
c0018bdc:	53                   	push   ebx
c0018bdd:	83 ec 10             	sub    esp,0x10
c0018be0:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0018be4:	6a 0c                	push   0xc
c0018be6:	ff 35 b8 6e 02 c0    	push   DWORD PTR ds:0xc0026eb8
c0018bec:	e8 87 e5 fe ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c0018bf1:	83 c4 10             	add    esp,0x10
c0018bf4:	a8 80                	test   al,0x80
c0018bf6:	74 24                	je     c0018c1c <rtcIRQHandler(regs*, void*)+0x40>
c0018bf8:	83 83 58 01 00 00 01 	add    DWORD PTR [ebx+0x158],0x1
c0018bff:	83 93 5c 01 00 00 00 	adc    DWORD PTR [ebx+0x15c],0x0
c0018c06:	66 ff 05 78 c7 02 c0 	inc    WORD PTR ds:0xc002c778
c0018c0d:	75 0d                	jne    c0018c1c <rtcIRQHandler(regs*, void*)+0x40>
c0018c0f:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0018c13:	83 c4 08             	add    esp,0x8
c0018c16:	5b                   	pop    ebx
c0018c17:	e9 32 fb ff ff       	jmp    c001874e <RTC::completeRTCRefresh()>
c0018c1c:	83 c4 08             	add    esp,0x8
c0018c1f:	5b                   	pop    ebx
c0018c20:	c3                   	ret    
c0018c21:	90                   	nop

c0018c22 <RTC::RTC()>:
c0018c22:	83 ec 1c             	sub    esp,0x1c
c0018c25:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018c29:	83 ec 08             	sub    esp,0x8
c0018c2c:	68 0f 2d 02 c0       	push   0xc0022d0f
c0018c31:	50                   	push   eax
c0018c32:	e8 6b 38 ff ff       	call   c000c4a2 <Clock::Clock(char const*)>
c0018c37:	83 c4 10             	add    esp,0x10
c0018c3a:	ba 2c 2d 02 c0       	mov    edx,0xc0022d2c
c0018c3f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018c43:	89 10                	mov    DWORD PTR [eax],edx
c0018c45:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018c49:	83 ec 0c             	sub    esp,0xc
c0018c4c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018c50:	6a 01                	push   0x1
c0018c52:	68 dc 8b 01 c0       	push   0xc0018bdc
c0018c57:	6a 08                	push   0x8
c0018c59:	50                   	push   eax
c0018c5a:	e8 1f 3d ff ff       	call   c000c97e <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0018c5f:	83 c4 20             	add    esp,0x20
c0018c62:	89 c2                	mov    edx,eax
c0018c64:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018c68:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0018c6e:	fa                   	cli    
c0018c6f:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0018c74:	83 c0 01             	add    eax,0x1
c0018c77:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0018c7c:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0018c81:	83 ec 08             	sub    esp,0x8
c0018c84:	6a 0b                	push   0xb
c0018c86:	50                   	push   eax
c0018c87:	e8 ec e4 fe ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c0018c8c:	83 c4 10             	add    esp,0x10
c0018c8f:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0018c93:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c0018c98:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0018c9c:	83 ca 10             	or     edx,0x10
c0018c9f:	0f b6 d2             	movzx  edx,dl
c0018ca2:	83 ec 04             	sub    esp,0x4
c0018ca5:	52                   	push   edx
c0018ca6:	6a 0b                	push   0xb
c0018ca8:	50                   	push   eax
c0018ca9:	e8 e4 e5 fe ff       	call   c0007292 <Computer::writeCMOS(unsigned char, unsigned char)>
c0018cae:	83 c4 10             	add    esp,0x10
c0018cb1:	83 ec 0c             	sub    esp,0xc
c0018cb4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018cb8:	e8 91 fa ff ff       	call   c001874e <RTC::completeRTCRefresh()>
c0018cbd:	83 c4 10             	add    esp,0x10
c0018cc0:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0018cc5:	83 e8 01             	sub    eax,0x1
c0018cc8:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c0018ccd:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c0018cd2:	85 c0                	test   eax,eax
c0018cd4:	75 01                	jne    c0018cd7 <RTC::RTC()+0xb5>
c0018cd6:	fb                   	sti    
c0018cd7:	90                   	nop
c0018cd8:	83 c4 1c             	add    esp,0x1c
c0018cdb:	c3                   	ret    

c0018cdc <HalConsoleScroll(int, int)>:
c0018cdc:	83 ec 10             	sub    esp,0x10
c0018cdf:	c7 44 24 04 00 80 0b c2 	mov    DWORD PTR [esp+0x4],0xc20b8000
c0018ce7:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c0018cef:	90                   	nop
c0018cf0:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c0018cf5:	0f 8f e1 00 00 00    	jg     c0018ddc <HalConsoleScroll(int, int)+0x100>
c0018cfb:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0018d03:	90                   	nop
c0018d04:	81 7c 24 08 9f 00 00 00 	cmp    DWORD PTR [esp+0x8],0x9f
c0018d0c:	0f 8f be 00 00 00    	jg     c0018dd0 <HalConsoleScroll(int, int)+0xf4>
c0018d12:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018d16:	89 d0                	mov    eax,edx
c0018d18:	c1 e0 02             	shl    eax,0x2
c0018d1b:	01 d0                	add    eax,edx
c0018d1d:	c1 e0 05             	shl    eax,0x5
c0018d20:	89 c2                	mov    edx,eax
c0018d22:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018d26:	01 d0                	add    eax,edx
c0018d28:	89 c2                	mov    edx,eax
c0018d2a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018d2e:	8d 0c 02             	lea    ecx,[edx+eax*1]
c0018d31:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018d35:	89 d0                	mov    eax,edx
c0018d37:	c1 e0 02             	shl    eax,0x2
c0018d3a:	01 d0                	add    eax,edx
c0018d3c:	c1 e0 05             	shl    eax,0x5
c0018d3f:	89 c2                	mov    edx,eax
c0018d41:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018d45:	01 d0                	add    eax,edx
c0018d47:	8d 90 60 ff ff ff    	lea    edx,[eax-0xa0]
c0018d4d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018d51:	01 c2                	add    edx,eax
c0018d53:	8a 01                	mov    al,BYTE PTR [ecx]
c0018d55:	88 02                	mov    BYTE PTR [edx],al
c0018d57:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c0018d5c:	75 66                	jne    c0018dc4 <HalConsoleScroll(int, int)+0xe8>
c0018d5e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018d62:	83 e0 01             	and    eax,0x1
c0018d65:	74 39                	je     c0018da0 <HalConsoleScroll(int, int)+0xc4>
c0018d67:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018d6b:	83 e0 0f             	and    eax,0xf
c0018d6e:	88 c2                	mov    dl,al
c0018d70:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018d74:	c1 e0 04             	shl    eax,0x4
c0018d77:	09 d0                	or     eax,edx
c0018d79:	88 c1                	mov    cl,al
c0018d7b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018d7f:	89 d0                	mov    eax,edx
c0018d81:	c1 e0 02             	shl    eax,0x2
c0018d84:	01 d0                	add    eax,edx
c0018d86:	c1 e0 05             	shl    eax,0x5
c0018d89:	89 c2                	mov    edx,eax
c0018d8b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018d8f:	01 d0                	add    eax,edx
c0018d91:	89 c2                	mov    edx,eax
c0018d93:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018d97:	01 d0                	add    eax,edx
c0018d99:	88 ca                	mov    dl,cl
c0018d9b:	88 10                	mov    BYTE PTR [eax],dl
c0018d9d:	eb 25                	jmp    c0018dc4 <HalConsoleScroll(int, int)+0xe8>
c0018d9f:	90                   	nop
c0018da0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018da4:	89 d0                	mov    eax,edx
c0018da6:	c1 e0 02             	shl    eax,0x2
c0018da9:	01 d0                	add    eax,edx
c0018dab:	c1 e0 05             	shl    eax,0x5
c0018dae:	89 c2                	mov    edx,eax
c0018db0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018db4:	01 d0                	add    eax,edx
c0018db6:	89 c2                	mov    edx,eax
c0018db8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018dbc:	01 d0                	add    eax,edx
c0018dbe:	c6 00 20             	mov    BYTE PTR [eax],0x20
c0018dc1:	8d 76 00             	lea    esi,[esi+0x0]
c0018dc4:	83 44 24 08 01       	add    DWORD PTR [esp+0x8],0x1
c0018dc9:	e9 36 ff ff ff       	jmp    c0018d04 <HalConsoleScroll(int, int)+0x28>
c0018dce:	66 90                	xchg   ax,ax
c0018dd0:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c0018dd5:	e9 16 ff ff ff       	jmp    c0018cf0 <HalConsoleScroll(int, int)+0x14>
c0018dda:	66 90                	xchg   ax,ax
c0018ddc:	90                   	nop
c0018ddd:	83 c4 10             	add    esp,0x10
c0018de0:	c3                   	ret    
c0018de1:	8d 76 00             	lea    esi,[esi+0x0]

c0018de4 <HalConsoleWriteCharacter(char, int, int, int, int)>:
c0018de4:	83 ec 14             	sub    esp,0x14
c0018de7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018deb:	88 04 24             	mov    BYTE PTR [esp],al
c0018dee:	8a 04 24             	mov    al,BYTE PTR [esp]
c0018df1:	0f b6 c0             	movzx  eax,al
c0018df4:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0018df8:	89 d1                	mov    ecx,edx
c0018dfa:	83 e1 0f             	and    ecx,0xf
c0018dfd:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0018e01:	c1 e2 04             	shl    edx,0x4
c0018e04:	0f b6 d2             	movzx  edx,dl
c0018e07:	09 ca                	or     edx,ecx
c0018e09:	c1 e2 08             	shl    edx,0x8
c0018e0c:	09 d0                	or     eax,edx
c0018e0e:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0018e13:	c7 44 24 0c 00 80 0b c2 	mov    DWORD PTR [esp+0xc],0xc20b8000
c0018e1b:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018e1f:	89 d0                	mov    eax,edx
c0018e21:	c1 e0 02             	shl    eax,0x2
c0018e24:	01 d0                	add    eax,edx
c0018e26:	c1 e0 04             	shl    eax,0x4
c0018e29:	89 c2                	mov    edx,eax
c0018e2b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018e2f:	01 d0                	add    eax,edx
c0018e31:	01 c0                	add    eax,eax
c0018e33:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0018e37:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018e3b:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0018e40:	66 89 02             	mov    WORD PTR [edx],ax
c0018e43:	90                   	nop
c0018e44:	83 c4 14             	add    esp,0x14
c0018e47:	c3                   	ret    

c0018e48 <HalConsoleCursorUpdate(int, int)>:
c0018e48:	83 ec 20             	sub    esp,0x20
c0018e4b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018e4f:	89 c2                	mov    edx,eax
c0018e51:	c1 e2 02             	shl    edx,0x2
c0018e54:	01 d0                	add    eax,edx
c0018e56:	c1 e0 04             	shl    eax,0x4
c0018e59:	89 c2                	mov    edx,eax
c0018e5b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018e5f:	01 d0                	add    eax,edx
c0018e61:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c0018e66:	66 c7 44 24 10 d4 03 	mov    WORD PTR [esp+0x10],0x3d4
c0018e6d:	c6 44 24 0f 0f       	mov    BYTE PTR [esp+0xf],0xf
c0018e72:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0018e76:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0018e7a:	ee                   	out    dx,al
c0018e7b:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c0018e80:	0f b6 c0             	movzx  eax,al
c0018e83:	66 c7 44 24 14 d5 03 	mov    WORD PTR [esp+0x14],0x3d5
c0018e8a:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c0018e8e:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c0018e92:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0018e96:	ee                   	out    dx,al
c0018e97:	66 c7 44 24 18 d4 03 	mov    WORD PTR [esp+0x18],0x3d4
c0018e9e:	c6 44 24 17 0e       	mov    BYTE PTR [esp+0x17],0xe
c0018ea3:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c0018ea7:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018eab:	ee                   	out    dx,al
c0018eac:	0f b7 44 24 1e       	movzx  eax,WORD PTR [esp+0x1e]
c0018eb1:	c1 e8 08             	shr    eax,0x8
c0018eb4:	0f b6 c0             	movzx  eax,al
c0018eb7:	66 c7 44 24 1c d5 03 	mov    WORD PTR [esp+0x1c],0x3d5
c0018ebe:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c0018ec2:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c0018ec6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0018eca:	ee                   	out    dx,al
c0018ecb:	90                   	nop
c0018ecc:	83 c4 20             	add    esp,0x20
c0018ecf:	c3                   	ret    

c0018ed0 <FAT::getName()>:
c0018ed0:	b8 60 2d 02 c0       	mov    eax,0xc0022d60
c0018ed5:	c3                   	ret    
c0018ed6:	66 90                	xchg   ax,ax

c0018ed8 <FAT::tell(void*, unsigned long long*)>:
c0018ed8:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0018edd:	75 09                	jne    c0018ee8 <FAT::tell(void*, unsigned long long*)+0x10>
c0018edf:	b8 04 00 00 00       	mov    eax,0x4
c0018ee4:	c3                   	ret    
c0018ee5:	8d 76 00             	lea    esi,[esi+0x0]
c0018ee8:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0018eed:	75 09                	jne    c0018ef8 <FAT::tell(void*, unsigned long long*)+0x20>
c0018eef:	b8 04 00 00 00       	mov    eax,0x4
c0018ef4:	c3                   	ret    
c0018ef5:	8d 76 00             	lea    esi,[esi+0x0]
c0018ef8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018efc:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0018eff:	ba 00 00 00 00       	mov    edx,0x0
c0018f04:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0018f08:	89 01                	mov    DWORD PTR [ecx],eax
c0018f0a:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0018f0d:	b8 00 00 00 00       	mov    eax,0x0
c0018f12:	c3                   	ret    
c0018f13:	90                   	nop

c0018f14 <FAT::stat(void*, unsigned long long*)>:
c0018f14:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0018f19:	75 09                	jne    c0018f24 <FAT::stat(void*, unsigned long long*)+0x10>
c0018f1b:	b8 04 00 00 00       	mov    eax,0x4
c0018f20:	c3                   	ret    
c0018f21:	8d 76 00             	lea    esi,[esi+0x0]
c0018f24:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0018f29:	75 09                	jne    c0018f34 <FAT::stat(void*, unsigned long long*)+0x20>
c0018f2b:	b8 04 00 00 00       	mov    eax,0x4
c0018f30:	c3                   	ret    
c0018f31:	8d 76 00             	lea    esi,[esi+0x0]
c0018f34:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018f38:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0018f3b:	ba 00 00 00 00       	mov    edx,0x0
c0018f40:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0018f44:	89 01                	mov    DWORD PTR [ecx],eax
c0018f46:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0018f49:	b8 00 00 00 00       	mov    eax,0x0
c0018f4e:	c3                   	ret    
c0018f4f:	90                   	nop

c0018f50 <FAT::~FAT()>:
c0018f50:	83 ec 0c             	sub    esp,0xc
c0018f53:	ba ac 2d 02 c0       	mov    edx,0xc0022dac
c0018f58:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018f5c:	89 10                	mov    DWORD PTR [eax],edx
c0018f5e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018f62:	83 ec 0c             	sub    esp,0xc
c0018f65:	50                   	push   eax
c0018f66:	e8 7f 28 ff ff       	call   c000b7ea <Filesystem::~Filesystem()>
c0018f6b:	83 c4 10             	add    esp,0x10
c0018f6e:	90                   	nop
c0018f6f:	83 c4 0c             	add    esp,0xc
c0018f72:	c3                   	ret    
c0018f73:	90                   	nop

c0018f74 <FAT::~FAT()>:
c0018f74:	83 ec 0c             	sub    esp,0xc
c0018f77:	83 ec 0c             	sub    esp,0xc
c0018f7a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018f7e:	e8 cd ff ff ff       	call   c0018f50 <FAT::~FAT()>
c0018f83:	83 c4 10             	add    esp,0x10
c0018f86:	83 ec 08             	sub    esp,0x8
c0018f89:	6a 08                	push   0x8
c0018f8b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018f8f:	e8 84 18 ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c0018f94:	83 c4 10             	add    esp,0x10
c0018f97:	83 c4 0c             	add    esp,0xc
c0018f9a:	c3                   	ret    
c0018f9b:	90                   	nop

c0018f9c <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c0018f9c:	83 ec 1c             	sub    esp,0x1c
c0018f9f:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c0018fa6:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c0018fab:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018faf:	8b 04 85 a0 c7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3860]
c0018fb6:	83 f8 ff             	cmp    eax,0xffffffff
c0018fb9:	75 35                	jne    c0018ff0 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x54>
c0018fbb:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0018fbf:	88 c2                	mov    dl,al
c0018fc1:	a1 80 c7 02 c0       	mov    eax,ds:0xc002c780
c0018fc6:	01 d0                	add    eax,edx
c0018fc8:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0018fcc:	8b 15 80 c7 02 c0    	mov    edx,DWORD PTR ds:0xc002c780
c0018fd2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018fd6:	89 14 85 a0 c7 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3860],edx
c0018fdd:	a1 80 c7 02 c0       	mov    eax,ds:0xc002c780
c0018fe2:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018fe6:	89 14 85 20 c8 02 c0 	mov    DWORD PTR [eax*4-0x3ffd37e0],edx
c0018fed:	eb 19                	jmp    c0019008 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6c>
c0018fef:	90                   	nop
c0018ff0:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0018ff4:	88 c2                	mov    dl,al
c0018ff6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018ffa:	8b 04 85 a0 c7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3860]
c0019001:	01 d0                	add    eax,edx
c0019003:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0019007:	90                   	nop
c0019008:	83 ec 04             	sub    esp,0x4
c001900b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001900f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0019013:	8d 44 24 15          	lea    eax,[esp+0x15]
c0019017:	50                   	push   eax
c0019018:	e8 b2 bf fe ff       	call   c0004fcf <f_getlabel>
c001901d:	83 c4 10             	add    esp,0x10
c0019020:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019024:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0019029:	75 09                	jne    c0019034 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x98>
c001902b:	b8 00 00 00 00       	mov    eax,0x0
c0019030:	eb 0a                	jmp    c001903c <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0xa0>
c0019032:	66 90                	xchg   ax,ax
c0019034:	b8 01 00 00 00       	mov    eax,0x1
c0019039:	8d 76 00             	lea    esi,[esi+0x0]
c001903c:	83 c4 1c             	add    esp,0x1c
c001903f:	c3                   	ret    

c0019040 <FAT::setlabel(LogicalDisk*, int, char*)>:
c0019040:	57                   	push   edi
c0019041:	83 ec 58             	sub    esp,0x58
c0019044:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c001904c:	8d 54 24 10          	lea    edx,[esp+0x10]
c0019050:	b8 00 00 00 00       	mov    eax,0x0
c0019055:	b9 0f 00 00 00       	mov    ecx,0xf
c001905a:	fc                   	cld    
c001905b:	89 d7                	mov    edi,edx
c001905d:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001905f:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0019063:	8b 04 85 a0 c7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3860]
c001906a:	83 f8 ff             	cmp    eax,0xffffffff
c001906d:	75 35                	jne    c00190a4 <FAT::setlabel(LogicalDisk*, int, char*)+0x64>
c001906f:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0019073:	88 c2                	mov    dl,al
c0019075:	a1 80 c7 02 c0       	mov    eax,ds:0xc002c780
c001907a:	01 d0                	add    eax,edx
c001907c:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0019080:	8b 15 80 c7 02 c0    	mov    edx,DWORD PTR ds:0xc002c780
c0019086:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001908a:	89 14 85 a0 c7 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3860],edx
c0019091:	a1 80 c7 02 c0       	mov    eax,ds:0xc002c780
c0019096:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c001909a:	89 14 85 20 c8 02 c0 	mov    DWORD PTR [eax*4-0x3ffd37e0],edx
c00190a1:	eb 19                	jmp    c00190bc <FAT::setlabel(LogicalDisk*, int, char*)+0x7c>
c00190a3:	90                   	nop
c00190a4:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00190a8:	88 c2                	mov    dl,al
c00190aa:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00190ae:	8b 04 85 a0 c7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3860]
c00190b5:	01 d0                	add    eax,edx
c00190b7:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00190bb:	90                   	nop
c00190bc:	83 ec 08             	sub    esp,0x8
c00190bf:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c00190c3:	8d 44 24 18          	lea    eax,[esp+0x18]
c00190c7:	50                   	push   eax
c00190c8:	e8 73 77 fe ff       	call   c0000840 <strcat>
c00190cd:	83 c4 10             	add    esp,0x10
c00190d0:	83 ec 0c             	sub    esp,0xc
c00190d3:	8d 44 24 18          	lea    eax,[esp+0x18]
c00190d7:	50                   	push   eax
c00190d8:	e8 43 c0 fe ff       	call   c0005120 <f_setlabel>
c00190dd:	83 c4 10             	add    esp,0x10
c00190e0:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c00190e4:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c00190e9:	75 09                	jne    c00190f4 <FAT::setlabel(LogicalDisk*, int, char*)+0xb4>
c00190eb:	b8 00 00 00 00       	mov    eax,0x0
c00190f0:	eb 0a                	jmp    c00190fc <FAT::setlabel(LogicalDisk*, int, char*)+0xbc>
c00190f2:	66 90                	xchg   ax,ax
c00190f4:	b8 01 00 00 00       	mov    eax,0x1
c00190f9:	8d 76 00             	lea    esi,[esi+0x0]
c00190fc:	83 c4 58             	add    esp,0x58
c00190ff:	5f                   	pop    edi
c0019100:	c3                   	ret    
c0019101:	90                   	nop
c0019102:	66 90                	xchg   ax,ax

c0019104 <FAT::format(LogicalDisk*, int, char const*, int)>:
c0019104:	83 ec 2c             	sub    esp,0x2c
c0019107:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001910f:	83 ec 08             	sub    esp,0x8
c0019112:	68 84 2d 02 c0       	push   0xc0022d84
c0019117:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001911b:	e8 30 76 fe ff       	call   c0000750 <strcmp>
c0019120:	83 c4 10             	add    esp,0x10
c0019123:	85 c0                	test   eax,eax
c0019125:	0f 94 c0             	sete   al
c0019128:	0f b6 c0             	movzx  eax,al
c001912b:	85 c0                	test   eax,eax
c001912d:	74 0d                	je     c001913c <FAT::format(LogicalDisk*, int, char const*, int)+0x38>
c001912f:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0019137:	e9 c0 00 00 00       	jmp    c00191fc <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c001913c:	83 ec 08             	sub    esp,0x8
c001913f:	68 76 2d 02 c0       	push   0xc0022d76
c0019144:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0019148:	e8 03 76 fe ff       	call   c0000750 <strcmp>
c001914d:	83 c4 10             	add    esp,0x10
c0019150:	85 c0                	test   eax,eax
c0019152:	0f 94 c0             	sete   al
c0019155:	0f b6 c0             	movzx  eax,al
c0019158:	85 c0                	test   eax,eax
c001915a:	74 10                	je     c001916c <FAT::format(LogicalDisk*, int, char const*, int)+0x68>
c001915c:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0019164:	e9 93 00 00 00       	jmp    c00191fc <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c0019169:	8d 76 00             	lea    esi,[esi+0x0]
c001916c:	83 ec 08             	sub    esp,0x8
c001916f:	68 7c 2d 02 c0       	push   0xc0022d7c
c0019174:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0019178:	e8 d3 75 fe ff       	call   c0000750 <strcmp>
c001917d:	83 c4 10             	add    esp,0x10
c0019180:	85 c0                	test   eax,eax
c0019182:	0f 94 c0             	sete   al
c0019185:	0f b6 c0             	movzx  eax,al
c0019188:	85 c0                	test   eax,eax
c001918a:	74 0c                	je     c0019198 <FAT::format(LogicalDisk*, int, char const*, int)+0x94>
c001918c:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0019194:	eb 66                	jmp    c00191fc <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c0019196:	66 90                	xchg   ax,ax
c0019198:	83 ec 08             	sub    esp,0x8
c001919b:	68 fc 04 02 c0       	push   0xc00204fc
c00191a0:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00191a4:	e8 a7 75 fe ff       	call   c0000750 <strcmp>
c00191a9:	83 c4 10             	add    esp,0x10
c00191ac:	85 c0                	test   eax,eax
c00191ae:	0f 94 c0             	sete   al
c00191b1:	0f b6 c0             	movzx  eax,al
c00191b4:	85 c0                	test   eax,eax
c00191b6:	74 0c                	je     c00191c4 <FAT::format(LogicalDisk*, int, char const*, int)+0xc0>
c00191b8:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c00191c0:	eb 3a                	jmp    c00191fc <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c00191c2:	66 90                	xchg   ax,ax
c00191c4:	83 ec 08             	sub    esp,0x8
c00191c7:	68 82 2d 02 c0       	push   0xc0022d82
c00191cc:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00191d0:	e8 7b 75 fe ff       	call   c0000750 <strcmp>
c00191d5:	83 c4 10             	add    esp,0x10
c00191d8:	85 c0                	test   eax,eax
c00191da:	0f 94 c0             	sete   al
c00191dd:	0f b6 c0             	movzx  eax,al
c00191e0:	85 c0                	test   eax,eax
c00191e2:	74 0c                	je     c00191f0 <FAT::format(LogicalDisk*, int, char const*, int)+0xec>
c00191e4:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c00191ec:	eb 0e                	jmp    c00191fc <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c00191ee:	66 90                	xchg   ax,ax
c00191f0:	b8 08 00 00 00       	mov    eax,0x8
c00191f5:	e9 ea 00 00 00       	jmp    c00192e4 <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c00191fa:	66 90                	xchg   ax,ax
c00191fc:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c0019203:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c0019208:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001920c:	8b 04 85 a0 c7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3860]
c0019213:	83 f8 ff             	cmp    eax,0xffffffff
c0019216:	75 34                	jne    c001924c <FAT::format(LogicalDisk*, int, char const*, int)+0x148>
c0019218:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001921c:	88 c2                	mov    dl,al
c001921e:	a1 80 c7 02 c0       	mov    eax,ds:0xc002c780
c0019223:	01 d0                	add    eax,edx
c0019225:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0019229:	8b 15 80 c7 02 c0    	mov    edx,DWORD PTR ds:0xc002c780
c001922f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019233:	89 14 85 a0 c7 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3860],edx
c001923a:	a1 80 c7 02 c0       	mov    eax,ds:0xc002c780
c001923f:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0019243:	89 14 85 20 c8 02 c0 	mov    DWORD PTR [eax*4-0x3ffd37e0],edx
c001924a:	eb 18                	jmp    c0019264 <FAT::format(LogicalDisk*, int, char const*, int)+0x160>
c001924c:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0019250:	88 c2                	mov    dl,al
c0019252:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019256:	8b 04 85 a0 c7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3860]
c001925d:	01 d0                	add    eax,edx
c001925f:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0019263:	90                   	nop
c0019264:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019268:	88 04 24             	mov    BYTE PTR [esp],al
c001926b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001926f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019273:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001927b:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c0019280:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0019288:	83 ec 0c             	sub    esp,0xc
c001928b:	68 00 20 00 00       	push   0x2000
c0019290:	e8 21 e8 fe ff       	call   c0007ab6 <malloc>
c0019295:	83 c4 10             	add    esp,0x10
c0019298:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001929c:	68 00 20 00 00       	push   0x2000
c00192a1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00192a5:	8d 44 24 08          	lea    eax,[esp+0x8]
c00192a9:	50                   	push   eax
c00192aa:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c00192ae:	50                   	push   eax
c00192af:	e8 69 c1 fe ff       	call   c000541d <f_mkfs>
c00192b4:	83 c4 10             	add    esp,0x10
c00192b7:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00192bb:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00192c0:	75 0a                	jne    c00192cc <FAT::format(LogicalDisk*, int, char const*, int)+0x1c8>
c00192c2:	b8 00 00 00 00       	mov    eax,0x0
c00192c7:	eb 1b                	jmp    c00192e4 <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c00192c9:	8d 76 00             	lea    esi,[esi+0x0]
c00192cc:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c00192d1:	75 09                	jne    c00192dc <FAT::format(LogicalDisk*, int, char const*, int)+0x1d8>
c00192d3:	b8 09 00 00 00       	mov    eax,0x9
c00192d8:	eb 0a                	jmp    c00192e4 <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c00192da:	66 90                	xchg   ax,ax
c00192dc:	b8 01 00 00 00       	mov    eax,0x1
c00192e1:	8d 76 00             	lea    esi,[esi+0x0]
c00192e4:	83 c4 2c             	add    esp,0x2c
c00192e7:	c3                   	ret    

c00192e8 <FAT::tryMount(LogicalDisk*, int)>:
c00192e8:	81 ec 4c 03 00 00    	sub    esp,0x34c
c00192ee:	a1 80 c7 02 c0       	mov    eax,ds:0xc002c780
c00192f3:	83 f8 14             	cmp    eax,0x14
c00192f6:	75 18                	jne    c0019310 <FAT::tryMount(LogicalDisk*, int)+0x28>
c00192f8:	83 ec 0c             	sub    esp,0xc
c00192fb:	68 88 2d 02 c0       	push   0xc0022d88
c0019300:	e8 26 83 ff ff       	call   c001162b <KePanic(char const*)>
c0019305:	83 c4 10             	add    esp,0x10
c0019308:	b0 00                	mov    al,0x0
c001930a:	e9 ed 01 00 00       	jmp    c00194fc <FAT::tryMount(LogicalDisk*, int)+0x214>
c001930f:	90                   	nop
c0019310:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c0019317:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001931d:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0019323:	3d 00 02 00 00       	cmp    eax,0x200
c0019328:	74 0a                	je     c0019334 <FAT::tryMount(LogicalDisk*, int)+0x4c>
c001932a:	b0 00                	mov    al,0x0
c001932c:	e9 cb 01 00 00       	jmp    c00194fc <FAT::tryMount(LogicalDisk*, int)+0x214>
c0019331:	8d 76 00             	lea    esi,[esi+0x0]
c0019334:	c6 84 24 3f 03 00 00 00 	mov    BYTE PTR [esp+0x33f],0x0
c001933c:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c0019343:	8b 04 85 a0 c7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3860]
c001934a:	83 f8 ff             	cmp    eax,0xffffffff
c001934d:	74 09                	je     c0019358 <FAT::tryMount(LogicalDisk*, int)+0x70>
c001934f:	b0 01                	mov    al,0x1
c0019351:	e9 a6 01 00 00       	jmp    c00194fc <FAT::tryMount(LogicalDisk*, int)+0x214>
c0019356:	66 90                	xchg   ax,ax
c0019358:	66 c7 84 24 31 03 00 00 30 3a 	mov    WORD PTR [esp+0x331],0x3a30
c0019362:	c6 84 24 33 03 00 00 00 	mov    BYTE PTR [esp+0x333],0x0
c001936a:	8a 84 24 31 03 00 00 	mov    al,BYTE PTR [esp+0x331]
c0019371:	88 c2                	mov    dl,al
c0019373:	a1 80 c7 02 c0       	mov    eax,ds:0xc002c780
c0019378:	01 d0                	add    eax,edx
c001937a:	88 84 24 31 03 00 00 	mov    BYTE PTR [esp+0x331],al
c0019381:	8b 15 80 c7 02 c0    	mov    edx,DWORD PTR ds:0xc002c780
c0019387:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c001938e:	89 14 85 a0 c7 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3860],edx
c0019395:	a1 80 c7 02 c0       	mov    eax,ds:0xc002c780
c001939a:	8b 94 24 58 03 00 00 	mov    edx,DWORD PTR [esp+0x358]
c00193a1:	89 14 85 20 c8 02 c0 	mov    DWORD PTR [eax*4-0x3ffd37e0],edx
c00193a8:	83 ec 0c             	sub    esp,0xc
c00193ab:	68 34 02 00 00       	push   0x234
c00193b0:	e8 01 e7 fe ff       	call   c0007ab6 <malloc>
c00193b5:	83 c4 10             	add    esp,0x10
c00193b8:	89 84 24 38 03 00 00 	mov    DWORD PTR [esp+0x338],eax
c00193bf:	83 ec 04             	sub    esp,0x4
c00193c2:	6a 00                	push   0x0
c00193c4:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c00193cb:	50                   	push   eax
c00193cc:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c00193d3:	e8 20 a8 fe ff       	call   c0003bf8 <f_mount>
c00193d8:	83 c4 10             	add    esp,0x10
c00193db:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c00193e2:	83 bc 24 34 03 00 00 00 	cmp    DWORD PTR [esp+0x334],0x0
c00193ea:	74 1c                	je     c0019408 <FAT::tryMount(LogicalDisk*, int)+0x120>
c00193ec:	83 ec 0c             	sub    esp,0xc
c00193ef:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c00193f6:	e8 db e6 fe ff       	call   c0007ad6 <rfree>
c00193fb:	83 c4 10             	add    esp,0x10
c00193fe:	b0 00                	mov    al,0x0
c0019400:	e9 f7 00 00 00       	jmp    c00194fc <FAT::tryMount(LogicalDisk*, int)+0x214>
c0019405:	8d 76 00             	lea    esi,[esi+0x0]
c0019408:	83 ec 04             	sub    esp,0x4
c001940b:	68 00 01 00 00       	push   0x100
c0019410:	6a 00                	push   0x0
c0019412:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c0019419:	50                   	push   eax
c001941a:	e8 d1 70 fe ff       	call   c00004f0 <memset>
c001941f:	83 c4 10             	add    esp,0x10
c0019422:	83 ec 08             	sub    esp,0x8
c0019425:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c001942c:	50                   	push   eax
c001942d:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c0019434:	50                   	push   eax
c0019435:	e8 06 74 fe ff       	call   c0000840 <strcat>
c001943a:	83 c4 10             	add    esp,0x10
c001943d:	83 ec 08             	sub    esp,0x8
c0019440:	68 96 2d 02 c0       	push   0xc0022d96
c0019445:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c001944c:	50                   	push   eax
c001944d:	e8 ee 73 fe ff       	call   c0000840 <strcat>
c0019452:	83 c4 10             	add    esp,0x10
c0019455:	83 ec 04             	sub    esp,0x4
c0019458:	6a 01                	push   0x1
c001945a:	8d 84 24 39 02 00 00 	lea    eax,[esp+0x239]
c0019461:	50                   	push   eax
c0019462:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019466:	50                   	push   eax
c0019467:	e8 ee a7 fe ff       	call   c0003c5a <f_open>
c001946c:	83 c4 10             	add    esp,0x10
c001946f:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c0019476:	8b 84 24 34 03 00 00 	mov    eax,DWORD PTR [esp+0x334]
c001947d:	85 c0                	test   eax,eax
c001947f:	74 0b                	je     c001948c <FAT::tryMount(LogicalDisk*, int)+0x1a4>
c0019481:	78 31                	js     c00194b4 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c0019483:	83 e8 04             	sub    eax,0x4
c0019486:	83 f8 01             	cmp    eax,0x1
c0019489:	77 29                	ja     c00194b4 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c001948b:	90                   	nop
c001948c:	c6 84 24 3f 03 00 00 01 	mov    BYTE PTR [esp+0x33f],0x1
c0019494:	83 ec 0c             	sub    esp,0xc
c0019497:	8d 44 24 14          	lea    eax,[esp+0x14]
c001949b:	50                   	push   eax
c001949c:	e8 88 af fe ff       	call   c0004429 <f_close>
c00194a1:	83 c4 10             	add    esp,0x10
c00194a4:	90                   	nop
c00194a5:	0f b6 84 24 3f 03 00 00 	movzx  eax,BYTE PTR [esp+0x33f]
c00194ad:	85 c0                	test   eax,eax
c00194af:	74 43                	je     c00194f4 <FAT::tryMount(LogicalDisk*, int)+0x20c>
c00194b1:	eb 31                	jmp    c00194e4 <FAT::tryMount(LogicalDisk*, int)+0x1fc>
c00194b3:	90                   	nop
c00194b4:	83 ec 0c             	sub    esp,0xc
c00194b7:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c00194be:	e8 13 e6 fe ff       	call   c0007ad6 <rfree>
c00194c3:	83 c4 10             	add    esp,0x10
c00194c6:	83 ec 04             	sub    esp,0x4
c00194c9:	6a 00                	push   0x0
c00194cb:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c00194d2:	50                   	push   eax
c00194d3:	6a 00                	push   0x0
c00194d5:	e8 1e a7 fe ff       	call   c0003bf8 <f_mount>
c00194da:	83 c4 10             	add    esp,0x10
c00194dd:	b0 00                	mov    al,0x0
c00194df:	eb 1b                	jmp    c00194fc <FAT::tryMount(LogicalDisk*, int)+0x214>
c00194e1:	8d 76 00             	lea    esi,[esi+0x0]
c00194e4:	a1 80 c7 02 c0       	mov    eax,ds:0xc002c780
c00194e9:	83 c0 01             	add    eax,0x1
c00194ec:	a3 80 c7 02 c0       	mov    ds:0xc002c780,eax
c00194f1:	8d 76 00             	lea    esi,[esi+0x0]
c00194f4:	8a 84 24 3f 03 00 00 	mov    al,BYTE PTR [esp+0x33f]
c00194fb:	90                   	nop
c00194fc:	81 c4 4c 03 00 00    	add    esp,0x34c
c0019502:	c3                   	ret    
c0019503:	90                   	nop

c0019504 <FAT::allocateSwapfile(char const*, int)>:
c0019504:	55                   	push   ebp
c0019505:	57                   	push   edi
c0019506:	56                   	push   esi
c0019507:	53                   	push   ebx
c0019508:	81 ec 3c 04 00 00    	sub    esp,0x43c
c001950e:	c7 84 24 20 04 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x420],0x114
c0019519:	83 ec 0c             	sub    esp,0xc
c001951c:	ff b4 24 2c 04 00 00 	push   DWORD PTR [esp+0x42c]
c0019523:	e8 8e e5 fe ff       	call   c0007ab6 <malloc>
c0019528:	83 c4 10             	add    esp,0x10
c001952b:	89 c7                	mov    edi,eax
c001952d:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c0019532:	83 ec 04             	sub    esp,0x4
c0019535:	50                   	push   eax
c0019536:	ff b4 24 5c 04 00 00 	push   DWORD PTR [esp+0x45c]
c001953d:	57                   	push   edi
c001953e:	e8 15 26 ff ff       	call   c000bb58 <File::File(char const*, Process*)>
c0019543:	83 c4 10             	add    esp,0x10
c0019546:	89 bc 24 2c 04 00 00 	mov    DWORD PTR [esp+0x42c],edi
c001954d:	83 ec 04             	sub    esp,0x4
c0019550:	8d 44 24 13          	lea    eax,[esp+0x13]
c0019554:	50                   	push   eax
c0019555:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019559:	50                   	push   eax
c001955a:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0019561:	e8 12 29 ff ff       	call   c000be78 <File::stat(unsigned long long*, bool*)>
c0019566:	83 c4 10             	add    esp,0x10
c0019569:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c0019570:	c1 e0 14             	shl    eax,0x14
c0019573:	89 c7                	mov    edi,eax
c0019575:	89 c5                	mov    ebp,eax
c0019577:	c1 fd 1f             	sar    ebp,0x1f
c001957a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001957e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0019582:	89 f9                	mov    ecx,edi
c0019584:	31 c1                	xor    ecx,eax
c0019586:	89 cb                	mov    ebx,ecx
c0019588:	89 e9                	mov    ecx,ebp
c001958a:	31 d1                	xor    ecx,edx
c001958c:	89 ce                	mov    esi,ecx
c001958e:	89 f0                	mov    eax,esi
c0019590:	09 d8                	or     eax,ebx
c0019592:	0f 84 9c 00 00 00    	je     c0019634 <FAT::allocateSwapfile(char const*, int)+0x130>
c0019598:	83 ec 0c             	sub    esp,0xc
c001959b:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c00195a2:	e8 9d 27 ff ff       	call   c000bd44 <File::unlink()>
c00195a7:	83 c4 10             	add    esp,0x10
c00195aa:	83 ec 08             	sub    esp,0x8
c00195ad:	6a 12                	push   0x12
c00195af:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c00195b6:	e8 bb 25 ff ff       	call   c000bb76 <File::open(FileOpenMode)>
c00195bb:	83 c4 10             	add    esp,0x10
c00195be:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c00195c5:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c00195cb:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c00195d2:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c00195d9:	c1 e0 14             	shl    eax,0x14
c00195dc:	83 ec 04             	sub    esp,0x4
c00195df:	6a 01                	push   0x1
c00195e1:	50                   	push   eax
c00195e2:	ff b4 24 34 04 00 00 	push   DWORD PTR [esp+0x434]
c00195e9:	e8 c2 bc fe ff       	call   c00052b0 <f_expand>
c00195ee:	83 c4 10             	add    esp,0x10
c00195f1:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c00195f8:	8b 00                	mov    eax,DWORD PTR [eax]
c00195fa:	83 c0 10             	add    eax,0x10
c00195fd:	8b 00                	mov    eax,DWORD PTR [eax]
c00195ff:	83 ec 0c             	sub    esp,0xc
c0019602:	8d 54 24 24          	lea    edx,[esp+0x24]
c0019606:	52                   	push   edx
c0019607:	8d 54 24 30          	lea    edx,[esp+0x30]
c001960b:	52                   	push   edx
c001960c:	6a 00                	push   0x0
c001960e:	68 00 04 00 00       	push   0x400
c0019613:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c001961a:	ff d0                	call   eax
c001961c:	83 c4 20             	add    esp,0x20
c001961f:	83 ec 0c             	sub    esp,0xc
c0019622:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0019629:	e8 a6 25 ff ff       	call   c000bbd4 <File::close()>
c001962e:	83 c4 10             	add    esp,0x10
c0019631:	8d 76 00             	lea    esi,[esi+0x0]
c0019634:	83 ec 08             	sub    esp,0x8
c0019637:	6a 01                	push   0x1
c0019639:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0019640:	e8 31 25 ff ff       	call   c000bb76 <File::open(FileOpenMode)>
c0019645:	83 c4 10             	add    esp,0x10
c0019648:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001964f:	8b 00                	mov    eax,DWORD PTR [eax]
c0019651:	83 c0 0c             	add    eax,0xc
c0019654:	8b 00                	mov    eax,DWORD PTR [eax]
c0019656:	83 ec 0c             	sub    esp,0xc
c0019659:	8d 54 24 24          	lea    edx,[esp+0x24]
c001965d:	52                   	push   edx
c001965e:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c0019662:	52                   	push   edx
c0019663:	6a 00                	push   0x0
c0019665:	6a 04                	push   0x4
c0019667:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c001966e:	ff d0                	call   eax
c0019670:	83 c4 20             	add    esp,0x20
c0019673:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001967a:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c0019680:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c0019687:	8b 84 24 28 04 00 00 	mov    eax,DWORD PTR [esp+0x428]
c001968e:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0019691:	89 84 24 24 04 00 00 	mov    DWORD PTR [esp+0x424],eax
c0019698:	83 ec 0c             	sub    esp,0xc
c001969b:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c00196a2:	e8 2d 25 ff ff       	call   c000bbd4 <File::close()>
c00196a7:	83 c4 10             	add    esp,0x10
c00196aa:	8b 84 24 24 04 00 00 	mov    eax,DWORD PTR [esp+0x424]
c00196b1:	ba 00 00 00 00       	mov    edx,0x0
c00196b6:	81 c4 3c 04 00 00    	add    esp,0x43c
c00196bc:	5b                   	pop    ebx
c00196bd:	5e                   	pop    esi
c00196be:	5f                   	pop    edi
c00196bf:	5d                   	pop    ebp
c00196c0:	c3                   	ret    
c00196c1:	90                   	nop
c00196c2:	66 90                	xchg   ax,ax

c00196c4 <FAT::readDir(void*, unsigned long, void*, int*)>:
c00196c4:	57                   	push   edi
c00196c5:	56                   	push   esi
c00196c6:	53                   	push   ebx
c00196c7:	81 ec 50 02 00 00    	sub    esp,0x250
c00196cd:	83 bc 24 64 02 00 00 00 	cmp    DWORD PTR [esp+0x264],0x0
c00196d5:	74 0d                	je     c00196e4 <FAT::readDir(void*, unsigned long, void*, int*)+0x20>
c00196d7:	83 bc 24 70 02 00 00 00 	cmp    DWORD PTR [esp+0x270],0x0
c00196df:	75 0f                	jne    c00196f0 <FAT::readDir(void*, unsigned long, void*, int*)+0x2c>
c00196e1:	8d 76 00             	lea    esi,[esi+0x0]
c00196e4:	b8 04 00 00 00       	mov    eax,0x4
c00196e9:	e9 3a 01 00 00       	jmp    c0019828 <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c00196ee:	66 90                	xchg   ax,ax
c00196f0:	83 ec 08             	sub    esp,0x8
c00196f3:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c00196fa:	50                   	push   eax
c00196fb:	ff b4 24 70 02 00 00 	push   DWORD PTR [esp+0x270]
c0019702:	e8 ef af fe ff       	call   c00046f6 <f_readdir>
c0019707:	83 c4 10             	add    esp,0x10
c001970a:	89 84 24 4c 02 00 00 	mov    DWORD PTR [esp+0x24c],eax
c0019711:	66 c7 44 24 08 00 00 	mov    WORD PTR [esp+0x8],0x0
c0019718:	83 ec 0c             	sub    esp,0xc
c001971b:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c0019722:	83 c0 16             	add    eax,0x16
c0019725:	50                   	push   eax
c0019726:	e8 45 6e fe ff       	call   c0000570 <strlen>
c001972b:	83 c4 10             	add    esp,0x10
c001972e:	ba 00 00 00 00       	mov    edx,0x0
c0019733:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019737:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001973b:	8a 84 24 20 01 00 00 	mov    al,BYTE PTR [esp+0x120]
c0019742:	0f b6 c0             	movzx  eax,al
c0019745:	83 e0 10             	and    eax,0x10
c0019748:	74 0a                	je     c0019754 <FAT::readDir(void*, unsigned long, void*, int*)+0x90>
c001974a:	b8 02 00 00 00       	mov    eax,0x2
c001974f:	eb 0b                	jmp    c001975c <FAT::readDir(void*, unsigned long, void*, int*)+0x98>
c0019751:	8d 76 00             	lea    esi,[esi+0x0]
c0019754:	b8 01 00 00 00       	mov    eax,0x1
c0019759:	8d 76 00             	lea    esi,[esi+0x0]
c001975c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0019760:	83 ec 08             	sub    esp,0x8
c0019763:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c001976a:	83 c0 16             	add    eax,0x16
c001976d:	50                   	push   eax
c001976e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019772:	83 c0 10             	add    eax,0x10
c0019775:	50                   	push   eax
c0019776:	e8 c5 6e fe ff       	call   c0000640 <strcpy>
c001977b:	83 c4 10             	add    esp,0x10
c001977e:	8b 84 24 6c 02 00 00 	mov    eax,DWORD PTR [esp+0x26c]
c0019785:	89 84 24 48 02 00 00 	mov    DWORD PTR [esp+0x248],eax
c001978c:	8d 44 24 08          	lea    eax,[esp+0x8]
c0019790:	89 84 24 44 02 00 00 	mov    DWORD PTR [esp+0x244],eax
c0019797:	8b 84 24 68 02 00 00 	mov    eax,DWORD PTR [esp+0x268]
c001979e:	89 84 24 40 02 00 00 	mov    DWORD PTR [esp+0x240],eax
c00197a5:	8b 84 24 48 02 00 00 	mov    eax,DWORD PTR [esp+0x248]
c00197ac:	89 84 24 3c 02 00 00 	mov    DWORD PTR [esp+0x23c],eax
c00197b3:	8b 84 24 44 02 00 00 	mov    eax,DWORD PTR [esp+0x244]
c00197ba:	8b 94 24 48 02 00 00 	mov    edx,DWORD PTR [esp+0x248]
c00197c1:	8b 8c 24 40 02 00 00 	mov    ecx,DWORD PTR [esp+0x240]
c00197c8:	89 c6                	mov    esi,eax
c00197ca:	89 d7                	mov    edi,edx
c00197cc:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00197ce:	89 c8                	mov    eax,ecx
c00197d0:	89 fa                	mov    edx,edi
c00197d2:	89 f3                	mov    ebx,esi
c00197d4:	89 9c 24 38 02 00 00 	mov    DWORD PTR [esp+0x238],ebx
c00197db:	89 94 24 34 02 00 00 	mov    DWORD PTR [esp+0x234],edx
c00197e2:	89 84 24 30 02 00 00 	mov    DWORD PTR [esp+0x230],eax
c00197e9:	8b 84 24 70 02 00 00 	mov    eax,DWORD PTR [esp+0x270]
c00197f0:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c00197f6:	8a 84 24 2e 01 00 00 	mov    al,BYTE PTR [esp+0x12e]
c00197fd:	0f be c0             	movsx  eax,al
c0019800:	85 c0                	test   eax,eax
c0019802:	75 08                	jne    c001980c <FAT::readDir(void*, unsigned long, void*, int*)+0x148>
c0019804:	b8 07 00 00 00       	mov    eax,0x7
c0019809:	eb 1d                	jmp    c0019828 <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c001980b:	90                   	nop
c001980c:	8b 84 24 4c 02 00 00 	mov    eax,DWORD PTR [esp+0x24c]
c0019813:	85 c0                	test   eax,eax
c0019815:	75 09                	jne    c0019820 <FAT::readDir(void*, unsigned long, void*, int*)+0x15c>
c0019817:	b8 00 00 00 00       	mov    eax,0x0
c001981c:	eb 0a                	jmp    c0019828 <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c001981e:	66 90                	xchg   ax,ax
c0019820:	b8 01 00 00 00       	mov    eax,0x1
c0019825:	8d 76 00             	lea    esi,[esi+0x0]
c0019828:	81 c4 50 02 00 00    	add    esp,0x250
c001982e:	5b                   	pop    ebx
c001982f:	5e                   	pop    esi
c0019830:	5f                   	pop    edi
c0019831:	c3                   	ret    
c0019832:	66 90                	xchg   ax,ax

c0019834 <FAT::read(void*, unsigned long, void*, int*)>:
c0019834:	83 ec 1c             	sub    esp,0x1c
c0019837:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001983c:	74 0a                	je     c0019848 <FAT::read(void*, unsigned long, void*, int*)+0x14>
c001983e:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0019843:	75 0b                	jne    c0019850 <FAT::read(void*, unsigned long, void*, int*)+0x1c>
c0019845:	8d 76 00             	lea    esi,[esi+0x0]
c0019848:	b8 04 00 00 00       	mov    eax,0x4
c001984d:	eb 41                	jmp    c0019890 <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c001984f:	90                   	nop
c0019850:	8d 44 24 08          	lea    eax,[esp+0x8]
c0019854:	50                   	push   eax
c0019855:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0019859:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001985d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019861:	e8 b7 a6 fe ff       	call   c0003f1d <f_read>
c0019866:	83 c4 10             	add    esp,0x10
c0019869:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001986d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019871:	89 c2                	mov    edx,eax
c0019873:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0019877:	89 10                	mov    DWORD PTR [eax],edx
c0019879:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001987d:	85 c0                	test   eax,eax
c001987f:	75 07                	jne    c0019888 <FAT::read(void*, unsigned long, void*, int*)+0x54>
c0019881:	b8 00 00 00 00       	mov    eax,0x0
c0019886:	eb 08                	jmp    c0019890 <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c0019888:	b8 01 00 00 00       	mov    eax,0x1
c001988d:	8d 76 00             	lea    esi,[esi+0x0]
c0019890:	83 c4 1c             	add    esp,0x1c
c0019893:	c3                   	ret    

c0019894 <FAT::write(void*, unsigned long, void*, int*)>:
c0019894:	83 ec 1c             	sub    esp,0x1c
c0019897:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001989c:	74 0a                	je     c00198a8 <FAT::write(void*, unsigned long, void*, int*)+0x14>
c001989e:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c00198a3:	75 0b                	jne    c00198b0 <FAT::write(void*, unsigned long, void*, int*)+0x1c>
c00198a5:	8d 76 00             	lea    esi,[esi+0x0]
c00198a8:	b8 04 00 00 00       	mov    eax,0x4
c00198ad:	eb 41                	jmp    c00198f0 <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c00198af:	90                   	nop
c00198b0:	8d 44 24 08          	lea    eax,[esp+0x8]
c00198b4:	50                   	push   eax
c00198b5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00198b9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00198bd:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00198c1:	e8 56 a8 fe ff       	call   c000411c <f_write>
c00198c6:	83 c4 10             	add    esp,0x10
c00198c9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00198cd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00198d1:	89 c2                	mov    edx,eax
c00198d3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00198d7:	89 10                	mov    DWORD PTR [eax],edx
c00198d9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00198dd:	85 c0                	test   eax,eax
c00198df:	75 07                	jne    c00198e8 <FAT::write(void*, unsigned long, void*, int*)+0x54>
c00198e1:	b8 00 00 00 00       	mov    eax,0x0
c00198e6:	eb 08                	jmp    c00198f0 <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c00198e8:	b8 01 00 00 00       	mov    eax,0x1
c00198ed:	8d 76 00             	lea    esi,[esi+0x0]
c00198f0:	83 c4 1c             	add    esp,0x1c
c00198f3:	c3                   	ret    

c00198f4 <FAT::close(void*)>:
c00198f4:	83 ec 1c             	sub    esp,0x1c
c00198f7:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c00198fc:	75 0a                	jne    c0019908 <FAT::close(void*)+0x14>
c00198fe:	b8 04 00 00 00       	mov    eax,0x4
c0019903:	eb 3f                	jmp    c0019944 <FAT::close(void*)+0x50>
c0019905:	8d 76 00             	lea    esi,[esi+0x0]
c0019908:	83 ec 0c             	sub    esp,0xc
c001990b:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001990f:	e8 15 ab fe ff       	call   c0004429 <f_close>
c0019914:	83 c4 10             	add    esp,0x10
c0019917:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001991b:	83 ec 0c             	sub    esp,0xc
c001991e:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019922:	e8 9f e1 fe ff       	call   c0007ac6 <free>
c0019927:	83 c4 10             	add    esp,0x10
c001992a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001992e:	85 c0                	test   eax,eax
c0019930:	75 0a                	jne    c001993c <FAT::close(void*)+0x48>
c0019932:	b8 00 00 00 00       	mov    eax,0x0
c0019937:	eb 0b                	jmp    c0019944 <FAT::close(void*)+0x50>
c0019939:	8d 76 00             	lea    esi,[esi+0x0]
c001993c:	b8 01 00 00 00       	mov    eax,0x1
c0019941:	8d 76 00             	lea    esi,[esi+0x0]
c0019944:	83 c4 1c             	add    esp,0x1c
c0019947:	c3                   	ret    

c0019948 <FAT::closeDir(void*)>:
c0019948:	83 ec 1c             	sub    esp,0x1c
c001994b:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0019950:	75 0a                	jne    c001995c <FAT::closeDir(void*)+0x14>
c0019952:	b8 04 00 00 00       	mov    eax,0x4
c0019957:	eb 3f                	jmp    c0019998 <FAT::closeDir(void*)+0x50>
c0019959:	8d 76 00             	lea    esi,[esi+0x0]
c001995c:	83 ec 0c             	sub    esp,0xc
c001995f:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019963:	e8 6c ad fe ff       	call   c00046d4 <f_closedir>
c0019968:	83 c4 10             	add    esp,0x10
c001996b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001996f:	83 ec 0c             	sub    esp,0xc
c0019972:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019976:	e8 4b e1 fe ff       	call   c0007ac6 <free>
c001997b:	83 c4 10             	add    esp,0x10
c001997e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019982:	85 c0                	test   eax,eax
c0019984:	75 0a                	jne    c0019990 <FAT::closeDir(void*)+0x48>
c0019986:	b8 00 00 00 00       	mov    eax,0x0
c001998b:	eb 0b                	jmp    c0019998 <FAT::closeDir(void*)+0x50>
c001998d:	8d 76 00             	lea    esi,[esi+0x0]
c0019990:	b8 01 00 00 00       	mov    eax,0x1
c0019995:	8d 76 00             	lea    esi,[esi+0x0]
c0019998:	83 c4 1c             	add    esp,0x1c
c001999b:	c3                   	ret    

c001999c <FAT::truncate(void*, unsigned long long)>:
c001999c:	83 ec 2c             	sub    esp,0x2c
c001999f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00199a3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00199a7:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00199ab:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00199af:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c00199b4:	75 0a                	jne    c00199c0 <FAT::truncate(void*, unsigned long long)+0x24>
c00199b6:	b8 04 00 00 00       	mov    eax,0x4
c00199bb:	eb 47                	jmp    c0019a04 <FAT::truncate(void*, unsigned long long)+0x68>
c00199bd:	8d 76 00             	lea    esi,[esi+0x0]
c00199c0:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00199c4:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c00199c7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00199cb:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00199d3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00199d7:	83 ec 08             	sub    esp,0x8
c00199da:	50                   	push   eax
c00199db:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00199df:	e8 74 aa fe ff       	call   c0004458 <f_lseek>
c00199e4:	83 c4 10             	add    esp,0x10
c00199e7:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00199eb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00199ef:	85 c0                	test   eax,eax
c00199f1:	75 09                	jne    c00199fc <FAT::truncate(void*, unsigned long long)+0x60>
c00199f3:	b8 00 00 00 00       	mov    eax,0x0
c00199f8:	eb 0a                	jmp    c0019a04 <FAT::truncate(void*, unsigned long long)+0x68>
c00199fa:	66 90                	xchg   ax,ax
c00199fc:	b8 01 00 00 00       	mov    eax,0x1
c0019a01:	8d 76 00             	lea    esi,[esi+0x0]
c0019a04:	83 c4 2c             	add    esp,0x2c
c0019a07:	c3                   	ret    

c0019a08 <FAT::seek(void*, unsigned long long)>:
c0019a08:	83 ec 2c             	sub    esp,0x2c
c0019a0b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019a0f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0019a13:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0019a17:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019a1b:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0019a20:	75 0a                	jne    c0019a2c <FAT::seek(void*, unsigned long long)+0x24>
c0019a22:	b8 04 00 00 00       	mov    eax,0x4
c0019a27:	eb 33                	jmp    c0019a5c <FAT::seek(void*, unsigned long long)+0x54>
c0019a29:	8d 76 00             	lea    esi,[esi+0x0]
c0019a2c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019a30:	83 ec 08             	sub    esp,0x8
c0019a33:	50                   	push   eax
c0019a34:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0019a38:	e8 1b aa fe ff       	call   c0004458 <f_lseek>
c0019a3d:	83 c4 10             	add    esp,0x10
c0019a40:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0019a44:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019a48:	85 c0                	test   eax,eax
c0019a4a:	75 08                	jne    c0019a54 <FAT::seek(void*, unsigned long long)+0x4c>
c0019a4c:	b8 00 00 00 00       	mov    eax,0x0
c0019a51:	eb 09                	jmp    c0019a5c <FAT::seek(void*, unsigned long long)+0x54>
c0019a53:	90                   	nop
c0019a54:	b8 01 00 00 00       	mov    eax,0x1
c0019a59:	8d 76 00             	lea    esi,[esi+0x0]
c0019a5c:	83 c4 2c             	add    esp,0x2c
c0019a5f:	c3                   	ret    

c0019a60 <fatWrapperReadDisk>:
c0019a60:	53                   	push   ebx
c0019a61:	83 ec 18             	sub    esp,0x18
c0019a64:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019a68:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0019a6c:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019a71:	8b 0c 85 80 b8 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd4780]
c0019a78:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0019a7c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0019a80:	ba 00 00 00 00       	mov    edx,0x0
c0019a85:	83 ec 0c             	sub    esp,0xc
c0019a88:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019a8c:	53                   	push   ebx
c0019a8d:	52                   	push   edx
c0019a8e:	50                   	push   eax
c0019a8f:	51                   	push   ecx
c0019a90:	e8 1f 43 ff ff       	call   c000ddb4 <LogicalDisk::read(unsigned long long, int, void*)>
c0019a95:	83 c4 20             	add    esp,0x20
c0019a98:	83 c4 18             	add    esp,0x18
c0019a9b:	5b                   	pop    ebx
c0019a9c:	c3                   	ret    
c0019a9d:	8d 76 00             	lea    esi,[esi+0x0]

c0019aa0 <fatWrapperWriteDisk>:
c0019aa0:	53                   	push   ebx
c0019aa1:	83 ec 18             	sub    esp,0x18
c0019aa4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019aa8:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0019aac:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019ab1:	8b 0c 85 80 b8 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd4780]
c0019ab8:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0019abc:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0019ac0:	ba 00 00 00 00       	mov    edx,0x0
c0019ac5:	83 ec 0c             	sub    esp,0xc
c0019ac8:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019acc:	53                   	push   ebx
c0019acd:	52                   	push   edx
c0019ace:	50                   	push   eax
c0019acf:	51                   	push   ecx
c0019ad0:	e8 4b 43 ff ff       	call   c000de20 <LogicalDisk::write(unsigned long long, int, void*)>
c0019ad5:	83 c4 20             	add    esp,0x20
c0019ad8:	83 c4 18             	add    esp,0x18
c0019adb:	5b                   	pop    ebx
c0019adc:	c3                   	ret    
c0019add:	8d 76 00             	lea    esi,[esi+0x0]

c0019ae0 <fatWrapperIoctl>:
c0019ae0:	53                   	push   ebx
c0019ae1:	83 ec 28             	sub    esp,0x28
c0019ae4:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0019ae8:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0019aec:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0019af0:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0019af4:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019af9:	83 f8 02             	cmp    eax,0x2
c0019afc:	75 32                	jne    c0019b30 <fatWrapperIoctl+0x50>
c0019afe:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019b02:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0019b06:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019b0b:	8b 04 85 80 b8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4780]
c0019b12:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0019b18:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0019b1e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0019b22:	66 89 02             	mov    WORD PTR [edx],ax
c0019b25:	b8 00 00 00 00       	mov    eax,0x0
c0019b2a:	e9 c5 00 00 00       	jmp    c0019bf4 <fatWrapperIoctl+0x114>
c0019b2f:	90                   	nop
c0019b30:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019b35:	83 f8 01             	cmp    eax,0x1
c0019b38:	75 6a                	jne    c0019ba4 <fatWrapperIoctl+0xc4>
c0019b3a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019b3e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0019b42:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019b47:	8b 04 85 80 b8 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4780]
c0019b4e:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0019b54:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c0019b5a:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c0019b60:	89 c8                	mov    eax,ecx
c0019b62:	89 da                	mov    edx,ebx
c0019b64:	0f a4 c2 0a          	shld   edx,eax,0xa
c0019b68:	c1 e0 0a             	shl    eax,0xa
c0019b6b:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c0019b70:	8b 0c 8d 80 b8 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4780]
c0019b77:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c0019b7d:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c0019b83:	89 cb                	mov    ebx,ecx
c0019b85:	c1 fb 1f             	sar    ebx,0x1f
c0019b88:	53                   	push   ebx
c0019b89:	51                   	push   ecx
c0019b8a:	52                   	push   edx
c0019b8b:	50                   	push   eax
c0019b8c:	e8 6f 5b 00 00       	call   c001f700 <__udivdi3>
c0019b91:	83 c4 10             	add    esp,0x10
c0019b94:	89 c2                	mov    edx,eax
c0019b96:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0019b9a:	89 10                	mov    DWORD PTR [eax],edx
c0019b9c:	b8 00 00 00 00       	mov    eax,0x0
c0019ba1:	eb 51                	jmp    c0019bf4 <fatWrapperIoctl+0x114>
c0019ba3:	90                   	nop
c0019ba4:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019ba9:	85 c0                	test   eax,eax
c0019bab:	75 07                	jne    c0019bb4 <fatWrapperIoctl+0xd4>
c0019bad:	b8 00 00 00 00       	mov    eax,0x0
c0019bb2:	eb 40                	jmp    c0019bf4 <fatWrapperIoctl+0x114>
c0019bb4:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019bb9:	83 f8 03             	cmp    eax,0x3
c0019bbc:	75 1a                	jne    c0019bd8 <fatWrapperIoctl+0xf8>
c0019bbe:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019bc2:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0019bc6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0019bca:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c0019bd0:	b8 00 00 00 00       	mov    eax,0x0
c0019bd5:	eb 1d                	jmp    c0019bf4 <fatWrapperIoctl+0x114>
c0019bd7:	90                   	nop
c0019bd8:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019bdd:	83 f8 04             	cmp    eax,0x4
c0019be0:	75 0a                	jne    c0019bec <fatWrapperIoctl+0x10c>
c0019be2:	b8 00 00 00 00       	mov    eax,0x0
c0019be7:	eb 0b                	jmp    c0019bf4 <fatWrapperIoctl+0x114>
c0019be9:	8d 76 00             	lea    esi,[esi+0x0]
c0019bec:	b8 04 00 00 00       	mov    eax,0x4
c0019bf1:	8d 76 00             	lea    esi,[esi+0x0]
c0019bf4:	83 c4 28             	add    esp,0x28
c0019bf7:	5b                   	pop    ebx
c0019bf8:	c3                   	ret    
c0019bf9:	90                   	nop
c0019bfa:	66 90                	xchg   ax,ax

c0019bfc <FAT::FAT()>:
c0019bfc:	83 ec 1c             	sub    esp,0x1c
c0019bff:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019c03:	83 ec 0c             	sub    esp,0xc
c0019c06:	50                   	push   eax
c0019c07:	e8 ba 1b ff ff       	call   c000b7c6 <Filesystem::Filesystem()>
c0019c0c:	83 c4 10             	add    esp,0x10
c0019c0f:	ba ac 2d 02 c0       	mov    edx,0xc0022dac
c0019c14:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019c18:	89 10                	mov    DWORD PTR [eax],edx
c0019c1a:	c7 05 80 c7 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c780,0x0
c0019c24:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0019c2c:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c0019c31:	7f 19                	jg     c0019c4c <FAT::FAT()+0x50>
c0019c33:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019c37:	c7 04 85 a0 c7 02 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffd3860],0xffffffff
c0019c42:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c0019c47:	eb e3                	jmp    c0019c2c <FAT::FAT()+0x30>
c0019c49:	8d 76 00             	lea    esi,[esi+0x0]
c0019c4c:	90                   	nop
c0019c4d:	83 c4 1c             	add    esp,0x1c
c0019c50:	c3                   	ret    
c0019c51:	90                   	nop
c0019c52:	66 90                	xchg   ax,ax

c0019c54 <FAT::fixFilepath(char*)>:
c0019c54:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019c58:	8a 00                	mov    al,BYTE PTR [eax]
c0019c5a:	0f be c0             	movsx  eax,al
c0019c5d:	83 f8 40             	cmp    eax,0x40
c0019c60:	7e 2e                	jle    c0019c90 <FAT::fixFilepath(char*)+0x3c>
c0019c62:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019c66:	8a 00                	mov    al,BYTE PTR [eax]
c0019c68:	83 e8 41             	sub    eax,0x41
c0019c6b:	88 c2                	mov    dl,al
c0019c6d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019c71:	88 10                	mov    BYTE PTR [eax],dl
c0019c73:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019c77:	8a 00                	mov    al,BYTE PTR [eax]
c0019c79:	0f be c0             	movsx  eax,al
c0019c7c:	8b 04 85 a0 c7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3860]
c0019c83:	83 c0 30             	add    eax,0x30
c0019c86:	88 c2                	mov    dl,al
c0019c88:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019c8c:	88 10                	mov    BYTE PTR [eax],dl
c0019c8e:	66 90                	xchg   ax,ax
c0019c90:	90                   	nop
c0019c91:	c3                   	ret    
c0019c92:	66 90                	xchg   ax,ax

c0019c94 <FAT::open(char const*, void**, FileOpenMode)>:
c0019c94:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0019c9a:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0019ca2:	74 0c                	je     c0019cb0 <FAT::open(char const*, void**, FileOpenMode)+0x1c>
c0019ca4:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0019cac:	75 0e                	jne    c0019cbc <FAT::open(char const*, void**, FileOpenMode)+0x28>
c0019cae:	66 90                	xchg   ax,ax
c0019cb0:	b8 04 00 00 00       	mov    eax,0x4
c0019cb5:	e9 46 01 00 00       	jmp    c0019e00 <FAT::open(char const*, void**, FileOpenMode)+0x16c>
c0019cba:	66 90                	xchg   ax,ax
c0019cbc:	83 ec 08             	sub    esp,0x8
c0019cbf:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019cc6:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019cca:	50                   	push   eax
c0019ccb:	e8 70 69 fe ff       	call   c0000640 <strcpy>
c0019cd0:	83 c4 10             	add    esp,0x10
c0019cd3:	83 ec 08             	sub    esp,0x8
c0019cd6:	8d 44 24 10          	lea    eax,[esp+0x10]
c0019cda:	50                   	push   eax
c0019cdb:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019ce2:	e8 6d ff ff ff       	call   c0019c54 <FAT::fixFilepath(char*)>
c0019ce7:	83 c4 10             	add    esp,0x10
c0019cea:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c0019cf2:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0019cf9:	83 e0 01             	and    eax,0x1
c0019cfc:	74 12                	je     c0019d10 <FAT::open(char const*, void**, FileOpenMode)+0x7c>
c0019cfe:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0019d05:	83 c8 01             	or     eax,0x1
c0019d08:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0019d0f:	90                   	nop
c0019d10:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0019d17:	83 e0 04             	and    eax,0x4
c0019d1a:	74 24                	je     c0019d40 <FAT::open(char const*, void**, FileOpenMode)+0xac>
c0019d1c:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0019d23:	83 c8 30             	or     eax,0x30
c0019d26:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0019d2d:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0019d34:	83 c8 02             	or     eax,0x2
c0019d37:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0019d3e:	66 90                	xchg   ax,ax
c0019d40:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0019d47:	83 e0 02             	and    eax,0x2
c0019d4a:	74 14                	je     c0019d60 <FAT::open(char const*, void**, FileOpenMode)+0xcc>
c0019d4c:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0019d53:	83 c8 02             	or     eax,0x2
c0019d56:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0019d5d:	8d 76 00             	lea    esi,[esi+0x0]
c0019d60:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0019d67:	83 e0 08             	and    eax,0x8
c0019d6a:	74 14                	je     c0019d80 <FAT::open(char const*, void**, FileOpenMode)+0xec>
c0019d6c:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0019d73:	83 c8 04             	or     eax,0x4
c0019d76:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0019d7d:	8d 76 00             	lea    esi,[esi+0x0]
c0019d80:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0019d87:	83 e0 10             	and    eax,0x10
c0019d8a:	74 14                	je     c0019da0 <FAT::open(char const*, void**, FileOpenMode)+0x10c>
c0019d8c:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0019d93:	83 c8 08             	or     eax,0x8
c0019d96:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0019d9d:	8d 76 00             	lea    esi,[esi+0x0]
c0019da0:	83 ec 0c             	sub    esp,0xc
c0019da3:	68 28 02 00 00       	push   0x228
c0019da8:	e8 09 dd fe ff       	call   c0007ab6 <malloc>
c0019dad:	83 c4 10             	add    esp,0x10
c0019db0:	89 c2                	mov    edx,eax
c0019db2:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0019db9:	89 10                	mov    DWORD PTR [eax],edx
c0019dbb:	0f b6 94 24 0f 01 00 00 	movzx  edx,BYTE PTR [esp+0x10f]
c0019dc3:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0019dca:	8b 00                	mov    eax,DWORD PTR [eax]
c0019dcc:	83 ec 04             	sub    esp,0x4
c0019dcf:	52                   	push   edx
c0019dd0:	8d 54 24 10          	lea    edx,[esp+0x10]
c0019dd4:	52                   	push   edx
c0019dd5:	50                   	push   eax
c0019dd6:	e8 7f 9e fe ff       	call   c0003c5a <f_open>
c0019ddb:	83 c4 10             	add    esp,0x10
c0019dde:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c0019de5:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c0019ded:	74 09                	je     c0019df8 <FAT::open(char const*, void**, FileOpenMode)+0x164>
c0019def:	b8 01 00 00 00       	mov    eax,0x1
c0019df4:	eb 0a                	jmp    c0019e00 <FAT::open(char const*, void**, FileOpenMode)+0x16c>
c0019df6:	66 90                	xchg   ax,ax
c0019df8:	b8 00 00 00 00       	mov    eax,0x0
c0019dfd:	8d 76 00             	lea    esi,[esi+0x0]
c0019e00:	81 c4 1c 01 00 00    	add    esp,0x11c
c0019e06:	c3                   	ret    
c0019e07:	90                   	nop

c0019e08 <FAT::openDir(char const*, void**)>:
c0019e08:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0019e0e:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0019e16:	74 0c                	je     c0019e24 <FAT::openDir(char const*, void**)+0x1c>
c0019e18:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0019e20:	75 0e                	jne    c0019e30 <FAT::openDir(char const*, void**)+0x28>
c0019e22:	66 90                	xchg   ax,ax
c0019e24:	b8 04 00 00 00       	mov    eax,0x4
c0019e29:	e9 82 00 00 00       	jmp    c0019eb0 <FAT::openDir(char const*, void**)+0xa8>
c0019e2e:	66 90                	xchg   ax,ax
c0019e30:	83 ec 08             	sub    esp,0x8
c0019e33:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019e3a:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019e3e:	50                   	push   eax
c0019e3f:	e8 fc 67 fe ff       	call   c0000640 <strcpy>
c0019e44:	83 c4 10             	add    esp,0x10
c0019e47:	83 ec 08             	sub    esp,0x8
c0019e4a:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019e4e:	50                   	push   eax
c0019e4f:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019e56:	e8 f9 fd ff ff       	call   c0019c54 <FAT::fixFilepath(char*)>
c0019e5b:	83 c4 10             	add    esp,0x10
c0019e5e:	83 ec 0c             	sub    esp,0xc
c0019e61:	6a 30                	push   0x30
c0019e63:	e8 4e dc fe ff       	call   c0007ab6 <malloc>
c0019e68:	83 c4 10             	add    esp,0x10
c0019e6b:	89 c2                	mov    edx,eax
c0019e6d:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0019e74:	89 10                	mov    DWORD PTR [eax],edx
c0019e76:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0019e7d:	8b 00                	mov    eax,DWORD PTR [eax]
c0019e7f:	83 ec 08             	sub    esp,0x8
c0019e82:	8d 54 24 14          	lea    edx,[esp+0x14]
c0019e86:	52                   	push   edx
c0019e87:	50                   	push   eax
c0019e88:	e8 7c a7 fe ff       	call   c0004609 <f_opendir>
c0019e8d:	83 c4 10             	add    esp,0x10
c0019e90:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0019e97:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c0019e9f:	74 07                	je     c0019ea8 <FAT::openDir(char const*, void**)+0xa0>
c0019ea1:	b8 01 00 00 00       	mov    eax,0x1
c0019ea6:	eb 08                	jmp    c0019eb0 <FAT::openDir(char const*, void**)+0xa8>
c0019ea8:	b8 00 00 00 00       	mov    eax,0x0
c0019ead:	8d 76 00             	lea    esi,[esi+0x0]
c0019eb0:	81 c4 1c 01 00 00    	add    esp,0x11c
c0019eb6:	c3                   	ret    
c0019eb7:	90                   	nop

c0019eb8 <FAT::stat(char const*, unsigned long long*, bool*)>:
c0019eb8:	81 ec 2c 02 00 00    	sub    esp,0x22c
c0019ebe:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c0019ec6:	75 0c                	jne    c0019ed4 <FAT::stat(char const*, unsigned long long*, bool*)+0x1c>
c0019ec8:	b8 04 00 00 00       	mov    eax,0x4
c0019ecd:	e9 d6 00 00 00       	jmp    c0019fa8 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0019ed2:	66 90                	xchg   ax,ax
c0019ed4:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c0019edc:	75 0a                	jne    c0019ee8 <FAT::stat(char const*, unsigned long long*, bool*)+0x30>
c0019ede:	b8 04 00 00 00       	mov    eax,0x4
c0019ee3:	e9 c0 00 00 00       	jmp    c0019fa8 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0019ee8:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c0019ef0:	75 0a                	jne    c0019efc <FAT::stat(char const*, unsigned long long*, bool*)+0x44>
c0019ef2:	b8 04 00 00 00       	mov    eax,0x4
c0019ef7:	e9 ac 00 00 00       	jmp    c0019fa8 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0019efc:	83 ec 08             	sub    esp,0x8
c0019eff:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0019f06:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0019f0d:	50                   	push   eax
c0019f0e:	e8 2d 67 fe ff       	call   c0000640 <strcpy>
c0019f13:	83 c4 10             	add    esp,0x10
c0019f16:	83 ec 08             	sub    esp,0x8
c0019f19:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c0019f20:	50                   	push   eax
c0019f21:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0019f28:	e8 27 fd ff ff       	call   c0019c54 <FAT::fixFilepath(char*)>
c0019f2d:	83 c4 10             	add    esp,0x10
c0019f30:	83 ec 08             	sub    esp,0x8
c0019f33:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0019f37:	50                   	push   eax
c0019f38:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0019f3f:	50                   	push   eax
c0019f40:	e8 43 a8 fe ff       	call   c0004788 <f_stat>
c0019f45:	83 c4 10             	add    esp,0x10
c0019f48:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c0019f4f:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c0019f56:	85 c0                	test   eax,eax
c0019f58:	74 0a                	je     c0019f64 <FAT::stat(char const*, unsigned long long*, bool*)+0xac>
c0019f5a:	83 f8 04             	cmp    eax,0x4
c0019f5d:	74 39                	je     c0019f98 <FAT::stat(char const*, unsigned long long*, bool*)+0xe0>
c0019f5f:	eb 3f                	jmp    c0019fa0 <FAT::stat(char const*, unsigned long long*, bool*)+0xe8>
c0019f61:	8d 76 00             	lea    esi,[esi+0x0]
c0019f64:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0019f68:	0f b6 c0             	movzx  eax,al
c0019f6b:	83 e0 10             	and    eax,0x10
c0019f6e:	0f 95 c2             	setne  dl
c0019f71:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c0019f78:	88 10                	mov    BYTE PTR [eax],dl
c0019f7a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019f7e:	ba 00 00 00 00       	mov    edx,0x0
c0019f83:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c0019f8a:	89 01                	mov    DWORD PTR [ecx],eax
c0019f8c:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0019f8f:	b8 00 00 00 00       	mov    eax,0x0
c0019f94:	eb 12                	jmp    c0019fa8 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0019f96:	66 90                	xchg   ax,ax
c0019f98:	b8 02 00 00 00       	mov    eax,0x2
c0019f9d:	eb 09                	jmp    c0019fa8 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0019f9f:	90                   	nop
c0019fa0:	b8 01 00 00 00       	mov    eax,0x1
c0019fa5:	8d 76 00             	lea    esi,[esi+0x0]
c0019fa8:	81 c4 2c 02 00 00    	add    esp,0x22c
c0019fae:	c3                   	ret    
c0019faf:	90                   	nop

c0019fb0 <FAT::unlink(char const*)>:
c0019fb0:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0019fb6:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0019fbe:	75 08                	jne    c0019fc8 <FAT::unlink(char const*)+0x18>
c0019fc0:	b8 04 00 00 00       	mov    eax,0x4
c0019fc5:	eb 61                	jmp    c001a028 <FAT::unlink(char const*)+0x78>
c0019fc7:	90                   	nop
c0019fc8:	83 ec 08             	sub    esp,0x8
c0019fcb:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019fd2:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019fd6:	50                   	push   eax
c0019fd7:	e8 64 66 fe ff       	call   c0000640 <strcpy>
c0019fdc:	83 c4 10             	add    esp,0x10
c0019fdf:	83 ec 08             	sub    esp,0x8
c0019fe2:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019fe6:	50                   	push   eax
c0019fe7:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019fee:	e8 61 fc ff ff       	call   c0019c54 <FAT::fixFilepath(char*)>
c0019ff3:	83 c4 10             	add    esp,0x10
c0019ff6:	83 ec 0c             	sub    esp,0xc
c0019ff9:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019ffd:	50                   	push   eax
c0019ffe:	e8 f7 a9 fe ff       	call   c00049fa <f_unlink>
c001a003:	83 c4 10             	add    esp,0x10
c001a006:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001a00d:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c001a014:	85 c0                	test   eax,eax
c001a016:	75 08                	jne    c001a020 <FAT::unlink(char const*)+0x70>
c001a018:	b8 00 00 00 00       	mov    eax,0x0
c001a01d:	eb 09                	jmp    c001a028 <FAT::unlink(char const*)+0x78>
c001a01f:	90                   	nop
c001a020:	b8 01 00 00 00       	mov    eax,0x1
c001a025:	8d 76 00             	lea    esi,[esi+0x0]
c001a028:	81 c4 1c 01 00 00    	add    esp,0x11c
c001a02e:	c3                   	ret    
c001a02f:	90                   	nop

c001a030 <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c001a030:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001a036:	8b 94 24 38 01 00 00 	mov    edx,DWORD PTR [esp+0x138]
c001a03d:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c001a044:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c001a048:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001a04c:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c001a054:	75 0a                	jne    c001a060 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x30>
c001a056:	b8 04 00 00 00       	mov    eax,0x4
c001a05b:	e9 7c 01 00 00       	jmp    c001a1dc <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1ac>
c001a060:	83 ec 08             	sub    esp,0x8
c001a063:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001a06a:	8d 44 24 24          	lea    eax,[esp+0x24]
c001a06e:	50                   	push   eax
c001a06f:	e8 cc 65 fe ff       	call   c0000640 <strcpy>
c001a074:	83 c4 10             	add    esp,0x10
c001a077:	83 ec 08             	sub    esp,0x8
c001a07a:	8d 44 24 20          	lea    eax,[esp+0x20]
c001a07e:	50                   	push   eax
c001a07f:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001a086:	e8 c9 fb ff ff       	call   c0019c54 <FAT::fixFilepath(char*)>
c001a08b:	83 c4 10             	add    esp,0x10
c001a08e:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c001a096:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c001a09e:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001a0a3:	83 e0 01             	and    eax,0x1
c001a0a6:	74 14                	je     c001a0bc <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x8c>
c001a0a8:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001a0af:	83 c8 01             	or     eax,0x1
c001a0b2:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c001a0b9:	8d 76 00             	lea    esi,[esi+0x0]
c001a0bc:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001a0c1:	83 e0 02             	and    eax,0x2
c001a0c4:	74 12                	je     c001a0d8 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xa8>
c001a0c6:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001a0cd:	83 c8 20             	or     eax,0x20
c001a0d0:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c001a0d7:	90                   	nop
c001a0d8:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001a0dd:	83 e0 04             	and    eax,0x4
c001a0e0:	74 12                	je     c001a0f4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xc4>
c001a0e2:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001a0e9:	83 c8 04             	or     eax,0x4
c001a0ec:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c001a0f3:	90                   	nop
c001a0f4:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001a0f9:	83 e0 08             	and    eax,0x8
c001a0fc:	74 12                	je     c001a110 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xe0>
c001a0fe:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001a105:	83 c8 02             	or     eax,0x2
c001a108:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c001a10f:	90                   	nop
c001a110:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001a115:	83 e0 01             	and    eax,0x1
c001a118:	74 12                	je     c001a12c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xfc>
c001a11a:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c001a121:	83 c8 01             	or     eax,0x1
c001a124:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001a12b:	90                   	nop
c001a12c:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001a131:	83 e0 02             	and    eax,0x2
c001a134:	74 12                	je     c001a148 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x118>
c001a136:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c001a13d:	83 c8 20             	or     eax,0x20
c001a140:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001a147:	90                   	nop
c001a148:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001a14d:	83 e0 04             	and    eax,0x4
c001a150:	74 12                	je     c001a164 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x134>
c001a152:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c001a159:	83 c8 04             	or     eax,0x4
c001a15c:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001a163:	90                   	nop
c001a164:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001a169:	83 e0 08             	and    eax,0x8
c001a16c:	74 12                	je     c001a180 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x150>
c001a16e:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c001a175:	83 c8 02             	or     eax,0x2
c001a178:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001a17f:	90                   	nop
c001a180:	8a 94 24 1e 01 00 00 	mov    dl,BYTE PTR [esp+0x11e]
c001a187:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001a18e:	09 d0                	or     eax,edx
c001a190:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001a197:	0f b6 94 24 1e 01 00 00 	movzx  edx,BYTE PTR [esp+0x11e]
c001a19f:	0f b6 84 24 1f 01 00 00 	movzx  eax,BYTE PTR [esp+0x11f]
c001a1a7:	83 ec 04             	sub    esp,0x4
c001a1aa:	52                   	push   edx
c001a1ab:	50                   	push   eax
c001a1ac:	8d 44 24 24          	lea    eax,[esp+0x24]
c001a1b0:	50                   	push   eax
c001a1b1:	e8 b9 ac fe ff       	call   c0004e6f <f_chmod>
c001a1b6:	83 c4 10             	add    esp,0x10
c001a1b9:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c001a1c0:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c001a1c7:	85 c0                	test   eax,eax
c001a1c9:	75 09                	jne    c001a1d4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1a4>
c001a1cb:	b8 00 00 00 00       	mov    eax,0x0
c001a1d0:	eb 0a                	jmp    c001a1dc <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1ac>
c001a1d2:	66 90                	xchg   ax,ax
c001a1d4:	b8 01 00 00 00       	mov    eax,0x1
c001a1d9:	8d 76 00             	lea    esi,[esi+0x0]
c001a1dc:	81 c4 2c 01 00 00    	add    esp,0x12c
c001a1e2:	c3                   	ret    
c001a1e3:	90                   	nop

c001a1e4 <FAT::rename(char const*, char const*)>:
c001a1e4:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001a1ea:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c001a1f2:	74 0c                	je     c001a200 <FAT::rename(char const*, char const*)+0x1c>
c001a1f4:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c001a1fc:	75 0e                	jne    c001a20c <FAT::rename(char const*, char const*)+0x28>
c001a1fe:	66 90                	xchg   ax,ax
c001a200:	b8 04 00 00 00       	mov    eax,0x4
c001a205:	e9 9e 00 00 00       	jmp    c001a2a8 <FAT::rename(char const*, char const*)+0xc4>
c001a20a:	66 90                	xchg   ax,ax
c001a20c:	83 ec 08             	sub    esp,0x8
c001a20f:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001a216:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001a21d:	50                   	push   eax
c001a21e:	e8 1d 64 fe ff       	call   c0000640 <strcpy>
c001a223:	83 c4 10             	add    esp,0x10
c001a226:	83 ec 08             	sub    esp,0x8
c001a229:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c001a230:	50                   	push   eax
c001a231:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001a238:	e8 17 fa ff ff       	call   c0019c54 <FAT::fixFilepath(char*)>
c001a23d:	83 c4 10             	add    esp,0x10
c001a240:	83 ec 08             	sub    esp,0x8
c001a243:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c001a24a:	8d 44 24 18          	lea    eax,[esp+0x18]
c001a24e:	50                   	push   eax
c001a24f:	e8 ec 63 fe ff       	call   c0000640 <strcpy>
c001a254:	83 c4 10             	add    esp,0x10
c001a257:	83 ec 08             	sub    esp,0x8
c001a25a:	8d 44 24 14          	lea    eax,[esp+0x14]
c001a25e:	50                   	push   eax
c001a25f:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001a266:	e8 e9 f9 ff ff       	call   c0019c54 <FAT::fixFilepath(char*)>
c001a26b:	83 c4 10             	add    esp,0x10
c001a26e:	83 ec 08             	sub    esp,0x8
c001a271:	8d 44 24 14          	lea    eax,[esp+0x14]
c001a275:	50                   	push   eax
c001a276:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001a27d:	50                   	push   eax
c001a27e:	e8 34 aa fe ff       	call   c0004cb7 <f_rename>
c001a283:	83 c4 10             	add    esp,0x10
c001a286:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c001a28d:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c001a294:	85 c0                	test   eax,eax
c001a296:	75 08                	jne    c001a2a0 <FAT::rename(char const*, char const*)+0xbc>
c001a298:	b8 00 00 00 00       	mov    eax,0x0
c001a29d:	eb 09                	jmp    c001a2a8 <FAT::rename(char const*, char const*)+0xc4>
c001a29f:	90                   	nop
c001a2a0:	b8 01 00 00 00       	mov    eax,0x1
c001a2a5:	8d 76 00             	lea    esi,[esi+0x0]
c001a2a8:	81 c4 1c 02 00 00    	add    esp,0x21c
c001a2ae:	c3                   	ret    
c001a2af:	90                   	nop

c001a2b0 <FAT::mkdir(char const*)>:
c001a2b0:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001a2b6:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001a2be:	75 08                	jne    c001a2c8 <FAT::mkdir(char const*)+0x18>
c001a2c0:	b8 04 00 00 00       	mov    eax,0x4
c001a2c5:	eb 61                	jmp    c001a328 <FAT::mkdir(char const*)+0x78>
c001a2c7:	90                   	nop
c001a2c8:	83 ec 08             	sub    esp,0x8
c001a2cb:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001a2d2:	8d 44 24 18          	lea    eax,[esp+0x18]
c001a2d6:	50                   	push   eax
c001a2d7:	e8 64 63 fe ff       	call   c0000640 <strcpy>
c001a2dc:	83 c4 10             	add    esp,0x10
c001a2df:	83 ec 08             	sub    esp,0x8
c001a2e2:	8d 44 24 14          	lea    eax,[esp+0x14]
c001a2e6:	50                   	push   eax
c001a2e7:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001a2ee:	e8 61 f9 ff ff       	call   c0019c54 <FAT::fixFilepath(char*)>
c001a2f3:	83 c4 10             	add    esp,0x10
c001a2f6:	83 ec 0c             	sub    esp,0xc
c001a2f9:	8d 44 24 18          	lea    eax,[esp+0x18]
c001a2fd:	50                   	push   eax
c001a2fe:	e8 19 a8 fe ff       	call   c0004b1c <f_mkdir>
c001a303:	83 c4 10             	add    esp,0x10
c001a306:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001a30d:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c001a314:	85 c0                	test   eax,eax
c001a316:	75 08                	jne    c001a320 <FAT::mkdir(char const*)+0x70>
c001a318:	b8 00 00 00 00       	mov    eax,0x0
c001a31d:	eb 09                	jmp    c001a328 <FAT::mkdir(char const*)+0x78>
c001a31f:	90                   	nop
c001a320:	b8 01 00 00 00       	mov    eax,0x1
c001a325:	8d 76 00             	lea    esi,[esi+0x0]
c001a328:	81 c4 1c 01 00 00    	add    esp,0x11c
c001a32e:	c3                   	ret    
c001a32f:	90                   	nop

c001a330 <FAT::exists(char const*)>:
c001a330:	81 ec 2c 02 00 00    	sub    esp,0x22c
c001a336:	83 ec 08             	sub    esp,0x8
c001a339:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001a340:	8d 44 24 10          	lea    eax,[esp+0x10]
c001a344:	50                   	push   eax
c001a345:	e8 f6 62 fe ff       	call   c0000640 <strcpy>
c001a34a:	83 c4 10             	add    esp,0x10
c001a34d:	83 ec 08             	sub    esp,0x8
c001a350:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001a354:	50                   	push   eax
c001a355:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001a35c:	e8 f3 f8 ff ff       	call   c0019c54 <FAT::fixFilepath(char*)>
c001a361:	83 c4 10             	add    esp,0x10
c001a364:	83 ec 08             	sub    esp,0x8
c001a367:	8d 84 24 0c 01 00 00 	lea    eax,[esp+0x10c]
c001a36e:	50                   	push   eax
c001a36f:	8d 44 24 10          	lea    eax,[esp+0x10]
c001a373:	50                   	push   eax
c001a374:	e8 0f a4 fe ff       	call   c0004788 <f_stat>
c001a379:	83 c4 10             	add    esp,0x10
c001a37c:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c001a383:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c001a38a:	85 c0                	test   eax,eax
c001a38c:	75 06                	jne    c001a394 <FAT::exists(char const*)+0x64>
c001a38e:	b0 01                	mov    al,0x1
c001a390:	eb 06                	jmp    c001a398 <FAT::exists(char const*)+0x68>
c001a392:	66 90                	xchg   ax,ax
c001a394:	b0 00                	mov    al,0x0
c001a396:	66 90                	xchg   ax,ax
c001a398:	81 c4 2c 02 00 00    	add    esp,0x22c
c001a39e:	c3                   	ret    
c001a39f:	90                   	nop

c001a3a0 <isoReadDiscSectorHelper>:
c001a3a0:	83 ec 2c             	sub    esp,0x2c
c001a3a3:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001a3a7:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001a3ab:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c001a3b0:	83 e8 41             	sub    eax,0x41
c001a3b3:	8b 0c 85 80 b8 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd4780]
c001a3ba:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001a3be:	ba 00 00 00 00       	mov    edx,0x0
c001a3c3:	83 ec 0c             	sub    esp,0xc
c001a3c6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001a3ca:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001a3ce:	52                   	push   edx
c001a3cf:	50                   	push   eax
c001a3d0:	51                   	push   ecx
c001a3d1:	e8 de 39 ff ff       	call   c000ddb4 <LogicalDisk::read(unsigned long long, int, void*)>
c001a3d6:	83 c4 20             	add    esp,0x20
c001a3d9:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a3dd:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001a3e2:	74 0c                	je     c001a3f0 <isoReadDiscSectorHelper+0x50>
c001a3e4:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a3e8:	c1 e0 0b             	shl    eax,0xb
c001a3eb:	eb 0b                	jmp    c001a3f8 <isoReadDiscSectorHelper+0x58>
c001a3ed:	8d 76 00             	lea    esi,[esi+0x0]
c001a3f0:	b8 00 00 00 00       	mov    eax,0x0
c001a3f5:	8d 76 00             	lea    esi,[esi+0x0]
c001a3f8:	83 c4 2c             	add    esp,0x2c
c001a3fb:	c3                   	ret    

c001a3fc <iso_kprintf>:
c001a3fc:	83 ec 0c             	sub    esp,0xc
c001a3ff:	83 ec 08             	sub    esp,0x8
c001a402:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a406:	68 5a 2b 02 c0       	push   0xc0022b5a
c001a40b:	e8 35 05 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001a410:	83 c4 10             	add    esp,0x10
c001a413:	90                   	nop
c001a414:	83 c4 0c             	add    esp,0xc
c001a417:	c3                   	ret    

c001a418 <iso_kprintfd>:
c001a418:	83 ec 0c             	sub    esp,0xc
c001a41b:	83 ec 08             	sub    esp,0x8
c001a41e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a422:	68 da 12 02 c0       	push   0xc00212da
c001a427:	e8 19 05 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001a42c:	83 c4 10             	add    esp,0x10
c001a42f:	90                   	nop
c001a430:	83 c4 0c             	add    esp,0xc
c001a433:	c3                   	ret    

c001a434 <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c001a434:	b8 08 00 00 00       	mov    eax,0x8
c001a439:	c3                   	ret    

c001a43a <ISO9660::truncate(void*, unsigned long long)>:
c001a43a:	b8 01 00 00 00       	mov    eax,0x1
c001a43f:	c3                   	ret    

c001a440 <ISO9660::getName()>:
c001a440:	b8 10 2e 02 c0       	mov    eax,0xc0022e10
c001a445:	c3                   	ret    

c001a446 <ISO9660::closeDir(void*)>:
c001a446:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a44a:	8b 00                	mov    eax,DWORD PTR [eax]
c001a44c:	ff 60 1c             	jmp    DWORD PTR [eax+0x1c]
c001a44f:	90                   	nop

c001a450 <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c001a450:	b8 01 00 00 00       	mov    eax,0x1
c001a455:	c3                   	ret    

c001a456 <ISO9660::unlink(char const*)>:
c001a456:	b8 01 00 00 00       	mov    eax,0x1
c001a45b:	c3                   	ret    

c001a45c <ISO9660::write(void*, unsigned long, void*, int*)>:
c001a45c:	b8 03 00 00 00       	mov    eax,0x3
c001a461:	c3                   	ret    

c001a462 <ISO9660::rename(char const*, char const*)>:
c001a462:	b8 01 00 00 00       	mov    eax,0x1
c001a467:	c3                   	ret    

c001a468 <ISO9660::mkdir(char const*)>:
c001a468:	b8 01 00 00 00       	mov    eax,0x1
c001a46d:	c3                   	ret    

c001a46e <ISO9660::~ISO9660()>:
c001a46e:	83 ec 0c             	sub    esp,0xc
c001a471:	ba 50 2f 02 c0       	mov    edx,0xc0022f50
c001a476:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a47a:	89 10                	mov    DWORD PTR [eax],edx
c001a47c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a480:	83 ec 0c             	sub    esp,0xc
c001a483:	50                   	push   eax
c001a484:	e8 61 13 ff ff       	call   c000b7ea <Filesystem::~Filesystem()>
c001a489:	83 c4 10             	add    esp,0x10
c001a48c:	90                   	nop
c001a48d:	83 c4 0c             	add    esp,0xc
c001a490:	c3                   	ret    
c001a491:	90                   	nop

c001a492 <ISO9660::~ISO9660()>:
c001a492:	83 ec 0c             	sub    esp,0xc
c001a495:	83 ec 0c             	sub    esp,0xc
c001a498:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a49c:	e8 cd ff ff ff       	call   c001a46e <ISO9660::~ISO9660()>
c001a4a1:	83 c4 10             	add    esp,0x10
c001a4a4:	83 ec 08             	sub    esp,0x8
c001a4a7:	6a 08                	push   0x8
c001a4a9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a4ad:	e8 66 03 ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c001a4b2:	83 c4 10             	add    esp,0x10
c001a4b5:	83 c4 0c             	add    esp,0xc
c001a4b8:	c3                   	ret    
c001a4b9:	90                   	nop

c001a4ba <ISO9660::exists(char const*)>:
c001a4ba:	83 ec 18             	sub    esp,0x18
c001a4bd:	68 2b 2e 02 c0       	push   0xc0022e2b
c001a4c2:	e8 64 71 ff ff       	call   c001162b <KePanic(char const*)>
c001a4c7:	31 c0                	xor    eax,eax
c001a4c9:	83 c4 1c             	add    esp,0x1c
c001a4cc:	c3                   	ret    
c001a4cd:	90                   	nop

c001a4ce <ISO9660::open(char const*, void**, FileOpenMode)>:
c001a4ce:	56                   	push   esi
c001a4cf:	53                   	push   ebx
c001a4d0:	53                   	push   ebx
c001a4d1:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001a4d5:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001a4d9:	85 db                	test   ebx,ebx
c001a4db:	0f 84 ca 00 00 00    	je     c001a5ab <ISO9660::open(char const*, void**, FileOpenMode)+0xdd>
c001a4e1:	85 f6                	test   esi,esi
c001a4e3:	0f 84 c2 00 00 00    	je     c001a5ab <ISO9660::open(char const*, void**, FileOpenMode)+0xdd>
c001a4e9:	b8 03 00 00 00       	mov    eax,0x3
c001a4ee:	83 7c 24 1c 01       	cmp    DWORD PTR [esp+0x1c],0x1
c001a4f3:	0f 85 b7 00 00 00    	jne    c001a5b0 <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c001a4f9:	8a 0b                	mov    cl,BYTE PTR [ebx]
c001a4fb:	0f be 05 80 c8 02 c0 	movsx  eax,BYTE PTR ds:0xc002c880
c001a502:	38 0d 80 c8 02 c0    	cmp    BYTE PTR ds:0xc002c880,cl
c001a508:	74 1b                	je     c001a525 <ISO9660::open(char const*, void**, FileOpenMode)+0x57>
c001a50a:	85 c0                	test   eax,eax
c001a50c:	74 10                	je     c001a51e <ISO9660::open(char const*, void**, FileOpenMode)+0x50>
c001a50e:	83 ec 0c             	sub    esp,0xc
c001a511:	68 49 2e 02 c0       	push   0xc0022e49
c001a516:	e8 10 71 ff ff       	call   c001162b <KePanic(char const*)>
c001a51b:	83 c4 10             	add    esp,0x10
c001a51e:	8a 03                	mov    al,BYTE PTR [ebx]
c001a520:	a2 80 c8 02 c0       	mov    ds:0xc002c880,al
c001a525:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001a528:	8b 04 85 7c b7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4884]
c001a52f:	85 c0                	test   eax,eax
c001a531:	74 09                	je     c001a53c <ISO9660::open(char const*, void**, FileOpenMode)+0x6e>
c001a533:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c001a53a:	74 48                	je     c001a584 <ISO9660::open(char const*, void**, FileOpenMode)+0xb6>
c001a53c:	83 ec 0c             	sub    esp,0xc
c001a53f:	68 59 2e 02 c0       	push   0xc0022e59
c001a544:	e8 fc 03 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001a549:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001a54c:	83 c4 10             	add    esp,0x10
c001a54f:	8b 04 85 7c b7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4884]
c001a556:	85 c0                	test   eax,eax
c001a558:	74 17                	je     c001a571 <ISO9660::open(char const*, void**, FileOpenMode)+0xa3>
c001a55a:	83 ec 0c             	sub    esp,0xc
c001a55d:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c001a564:	68 79 2e 02 c0       	push   0xc0022e79
c001a569:	e8 d7 03 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001a56e:	83 c4 10             	add    esp,0x10
c001a571:	83 ec 0c             	sub    esp,0xc
c001a574:	0f be 05 80 c8 02 c0 	movsx  eax,BYTE PTR ds:0xc002c880
c001a57b:	50                   	push   eax
c001a57c:	e8 c5 c4 fe ff       	call   c0006a46 <init_percd>
c001a581:	83 c4 10             	add    esp,0x10
c001a584:	83 c3 03             	add    ebx,0x3
c001a587:	51                   	push   ecx
c001a588:	51                   	push   ecx
c001a589:	6a 00                	push   0x0
c001a58b:	53                   	push   ebx
c001a58c:	e8 7c bf fe ff       	call   c000650d <iso_open>
c001a591:	83 c4 10             	add    esp,0x10
c001a594:	89 c2                	mov    edx,eax
c001a596:	b8 01 00 00 00       	mov    eax,0x1
c001a59b:	83 fa ff             	cmp    edx,0xffffffff
c001a59e:	74 10                	je     c001a5b0 <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c001a5a0:	83 c2 32             	add    edx,0x32
c001a5a3:	31 c0                	xor    eax,eax
c001a5a5:	01 d2                	add    edx,edx
c001a5a7:	89 16                	mov    DWORD PTR [esi],edx
c001a5a9:	eb 05                	jmp    c001a5b0 <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c001a5ab:	b8 04 00 00 00       	mov    eax,0x4
c001a5b0:	5a                   	pop    edx
c001a5b1:	5b                   	pop    ebx
c001a5b2:	5e                   	pop    esi
c001a5b3:	c3                   	ret    

c001a5b4 <ISO9660::read(void*, unsigned long, void*, int*)>:
c001a5b4:	53                   	push   ebx
c001a5b5:	83 ec 08             	sub    esp,0x8
c001a5b8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a5bc:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001a5c0:	85 c0                	test   eax,eax
c001a5c2:	74 2d                	je     c001a5f1 <ISO9660::read(void*, unsigned long, void*, int*)+0x3d>
c001a5c4:	85 db                	test   ebx,ebx
c001a5c6:	74 29                	je     c001a5f1 <ISO9660::read(void*, unsigned long, void*, int*)+0x3d>
c001a5c8:	b9 02 00 00 00       	mov    ecx,0x2
c001a5cd:	52                   	push   edx
c001a5ce:	99                   	cdq    
c001a5cf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a5d3:	f7 f9                	idiv   ecx
c001a5d5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001a5d9:	83 e8 32             	sub    eax,0x32
c001a5dc:	50                   	push   eax
c001a5dd:	e8 d3 bf fe ff       	call   c00065b5 <iso_read>
c001a5e2:	83 c4 10             	add    esp,0x10
c001a5e5:	89 03                	mov    DWORD PTR [ebx],eax
c001a5e7:	09 d0                	or     eax,edx
c001a5e9:	0f 94 c0             	sete   al
c001a5ec:	0f b6 c0             	movzx  eax,al
c001a5ef:	eb 05                	jmp    c001a5f6 <ISO9660::read(void*, unsigned long, void*, int*)+0x42>
c001a5f1:	b8 04 00 00 00       	mov    eax,0x4
c001a5f6:	83 c4 08             	add    esp,0x8
c001a5f9:	5b                   	pop    ebx
c001a5fa:	c3                   	ret    
c001a5fb:	90                   	nop

c001a5fc <ISO9660::seek(void*, unsigned long long)>:
c001a5fc:	57                   	push   edi
c001a5fd:	56                   	push   esi
c001a5fe:	b8 04 00 00 00       	mov    eax,0x4
c001a603:	51                   	push   ecx
c001a604:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001a608:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001a60c:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001a610:	85 d2                	test   edx,edx
c001a612:	74 26                	je     c001a63a <ISO9660::seek(void*, unsigned long long)+0x3e>
c001a614:	6a 00                	push   0x0
c001a616:	b9 02 00 00 00       	mov    ecx,0x2
c001a61b:	57                   	push   edi
c001a61c:	89 d0                	mov    eax,edx
c001a61e:	56                   	push   esi
c001a61f:	99                   	cdq    
c001a620:	f7 f9                	idiv   ecx
c001a622:	83 e8 32             	sub    eax,0x32
c001a625:	50                   	push   eax
c001a626:	e8 a0 c0 fe ff       	call   c00066cb <iso_seek>
c001a62b:	83 c4 10             	add    esp,0x10
c001a62e:	31 f0                	xor    eax,esi
c001a630:	31 fa                	xor    edx,edi
c001a632:	09 d0                	or     eax,edx
c001a634:	0f 95 c0             	setne  al
c001a637:	0f b6 c0             	movzx  eax,al
c001a63a:	5a                   	pop    edx
c001a63b:	5e                   	pop    esi
c001a63c:	5f                   	pop    edi
c001a63d:	c3                   	ret    

c001a63e <ISO9660::tell(void*, unsigned long long*)>:
c001a63e:	53                   	push   ebx
c001a63f:	83 ec 08             	sub    esp,0x8
c001a642:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a646:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001a64a:	85 c0                	test   eax,eax
c001a64c:	74 24                	je     c001a672 <ISO9660::tell(void*, unsigned long long*)+0x34>
c001a64e:	85 db                	test   ebx,ebx
c001a650:	74 20                	je     c001a672 <ISO9660::tell(void*, unsigned long long*)+0x34>
c001a652:	83 ec 0c             	sub    esp,0xc
c001a655:	b9 02 00 00 00       	mov    ecx,0x2
c001a65a:	99                   	cdq    
c001a65b:	f7 f9                	idiv   ecx
c001a65d:	83 e8 32             	sub    eax,0x32
c001a660:	50                   	push   eax
c001a661:	e8 e9 c0 fe ff       	call   c000674f <iso_tell>
c001a666:	83 c4 10             	add    esp,0x10
c001a669:	89 03                	mov    DWORD PTR [ebx],eax
c001a66b:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c001a66e:	31 c0                	xor    eax,eax
c001a670:	eb 05                	jmp    c001a677 <ISO9660::tell(void*, unsigned long long*)+0x39>
c001a672:	b8 04 00 00 00       	mov    eax,0x4
c001a677:	83 c4 08             	add    esp,0x8
c001a67a:	5b                   	pop    ebx
c001a67b:	c3                   	ret    

c001a67c <ISO9660::stat(void*, unsigned long long*)>:
c001a67c:	53                   	push   ebx
c001a67d:	83 ec 14             	sub    esp,0x14
c001a680:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001a684:	68 9d 2e 02 c0       	push   0xc0022e9d
c001a689:	e8 b7 02 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001a68e:	83 c4 10             	add    esp,0x10
c001a691:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001a696:	74 2c                	je     c001a6c4 <ISO9660::stat(void*, unsigned long long*)+0x48>
c001a698:	85 db                	test   ebx,ebx
c001a69a:	74 28                	je     c001a6c4 <ISO9660::stat(void*, unsigned long long*)+0x48>
c001a69c:	83 ec 0c             	sub    esp,0xc
c001a69f:	b9 02 00 00 00       	mov    ecx,0x2
c001a6a4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a6a8:	99                   	cdq    
c001a6a9:	f7 f9                	idiv   ecx
c001a6ab:	83 e8 32             	sub    eax,0x32
c001a6ae:	50                   	push   eax
c001a6af:	e8 cc c0 fe ff       	call   c0006780 <iso_total>
c001a6b4:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001a6bb:	89 03                	mov    DWORD PTR [ebx],eax
c001a6bd:	83 c4 10             	add    esp,0x10
c001a6c0:	31 c0                	xor    eax,eax
c001a6c2:	eb 05                	jmp    c001a6c9 <ISO9660::stat(void*, unsigned long long*)+0x4d>
c001a6c4:	b8 04 00 00 00       	mov    eax,0x4
c001a6c9:	83 c4 08             	add    esp,0x8
c001a6cc:	5b                   	pop    ebx
c001a6cd:	c3                   	ret    

c001a6ce <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c001a6ce:	55                   	push   ebp
c001a6cf:	57                   	push   edi
c001a6d0:	56                   	push   esi
c001a6d1:	53                   	push   ebx
c001a6d2:	83 ec 18             	sub    esp,0x18
c001a6d5:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001a6d9:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001a6dd:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001a6e1:	68 a5 2e 02 c0       	push   0xc0022ea5
c001a6e6:	e8 5a 02 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001a6eb:	83 c4 10             	add    esp,0x10
c001a6ee:	85 ff                	test   edi,edi
c001a6f0:	0f 94 c0             	sete   al
c001a6f3:	85 f6                	test   esi,esi
c001a6f5:	0f 94 c2             	sete   dl
c001a6f8:	09 d0                	or     eax,edx
c001a6fa:	a8 01                	test   al,0x1
c001a6fc:	0f 85 dd 00 00 00    	jne    c001a7df <ISO9660::stat(char const*, unsigned long long*, bool*)+0x111>
c001a702:	85 db                	test   ebx,ebx
c001a704:	0f 84 d5 00 00 00    	je     c001a7df <ISO9660::stat(char const*, unsigned long long*, bool*)+0x111>
c001a70a:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001a70d:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c001a713:	c7 47 04 00 00 00 00 	mov    DWORD PTR [edi+0x4],0x0
c001a71a:	0f be 05 80 c8 02 c0 	movsx  eax,BYTE PTR ds:0xc002c880
c001a721:	8a 0b                	mov    cl,BYTE PTR [ebx]
c001a723:	38 0d 80 c8 02 c0    	cmp    BYTE PTR ds:0xc002c880,cl
c001a729:	74 1b                	je     c001a746 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x78>
c001a72b:	85 c0                	test   eax,eax
c001a72d:	74 10                	je     c001a73f <ISO9660::stat(char const*, unsigned long long*, bool*)+0x71>
c001a72f:	83 ec 0c             	sub    esp,0xc
c001a732:	68 49 2e 02 c0       	push   0xc0022e49
c001a737:	e8 ef 6e ff ff       	call   c001162b <KePanic(char const*)>
c001a73c:	83 c4 10             	add    esp,0x10
c001a73f:	8a 03                	mov    al,BYTE PTR [ebx]
c001a741:	a2 80 c8 02 c0       	mov    ds:0xc002c880,al
c001a746:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001a749:	8b 04 85 7c b7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4884]
c001a750:	85 c0                	test   eax,eax
c001a752:	74 09                	je     c001a75d <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8f>
c001a754:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c001a75b:	74 51                	je     c001a7ae <ISO9660::stat(char const*, unsigned long long*, bool*)+0xe0>
c001a75d:	83 ec 0c             	sub    esp,0xc
c001a760:	68 ad 2e 02 c0       	push   0xc0022ead
c001a765:	e8 db 01 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001a76a:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001a76d:	83 c4 10             	add    esp,0x10
c001a770:	83 3c 85 7c b7 02 c0 00 	cmp    DWORD PTR [eax*4-0x3ffd4884],0x0
c001a778:	74 21                	je     c001a79b <ISO9660::stat(char const*, unsigned long long*, bool*)+0xcd>
c001a77a:	83 ec 0c             	sub    esp,0xc
c001a77d:	68 cd 2e 02 c0       	push   0xc0022ecd
c001a782:	e8 be 01 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001a787:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001a78a:	83 c4 10             	add    esp,0x10
c001a78d:	8b 04 85 7c b7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4884]
c001a794:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c001a79b:	83 ec 0c             	sub    esp,0xc
c001a79e:	0f be 05 80 c8 02 c0 	movsx  eax,BYTE PTR ds:0xc002c880
c001a7a5:	50                   	push   eax
c001a7a6:	e8 9b c2 fe ff       	call   c0006a46 <init_percd>
c001a7ab:	83 c4 10             	add    esp,0x10
c001a7ae:	83 c3 03             	add    ebx,0x3
c001a7b1:	52                   	push   edx
c001a7b2:	52                   	push   edx
c001a7b3:	6a 00                	push   0x0
c001a7b5:	53                   	push   ebx
c001a7b6:	e8 52 bd fe ff       	call   c000650d <iso_open>
c001a7bb:	83 c4 10             	add    esp,0x10
c001a7be:	89 c5                	mov    ebp,eax
c001a7c0:	83 f8 ff             	cmp    eax,0xffffffff
c001a7c3:	75 21                	jne    c001a7e6 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x118>
c001a7c5:	50                   	push   eax
c001a7c6:	50                   	push   eax
c001a7c7:	6a 01                	push   0x1
c001a7c9:	53                   	push   ebx
c001a7ca:	e8 3e bd fe ff       	call   c000650d <iso_open>
c001a7cf:	83 c4 10             	add    esp,0x10
c001a7d2:	ba 02 00 00 00       	mov    edx,0x2
c001a7d7:	40                   	inc    eax
c001a7d8:	74 2b                	je     c001a805 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x137>
c001a7da:	c6 06 01             	mov    BYTE PTR [esi],0x1
c001a7dd:	eb 24                	jmp    c001a803 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x135>
c001a7df:	ba 04 00 00 00       	mov    edx,0x4
c001a7e4:	eb 1f                	jmp    c001a805 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x137>
c001a7e6:	83 ec 0c             	sub    esp,0xc
c001a7e9:	50                   	push   eax
c001a7ea:	e8 91 bf fe ff       	call   c0006780 <iso_total>
c001a7ef:	c7 47 04 00 00 00 00 	mov    DWORD PTR [edi+0x4],0x0
c001a7f6:	89 07                	mov    DWORD PTR [edi],eax
c001a7f8:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001a7fb:	e8 97 bd fe ff       	call   c0006597 <iso_close>
c001a800:	83 c4 10             	add    esp,0x10
c001a803:	31 d2                	xor    edx,edx
c001a805:	83 c4 0c             	add    esp,0xc
c001a808:	89 d0                	mov    eax,edx
c001a80a:	5b                   	pop    ebx
c001a80b:	5e                   	pop    esi
c001a80c:	5f                   	pop    edi
c001a80d:	5d                   	pop    ebp
c001a80e:	c3                   	ret    
c001a80f:	90                   	nop

c001a810 <ISO9660::close(void*)>:
c001a810:	83 ec 0c             	sub    esp,0xc
c001a813:	b8 04 00 00 00       	mov    eax,0x4
c001a818:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001a81c:	85 d2                	test   edx,edx
c001a81e:	74 1b                	je     c001a83b <ISO9660::close(void*)+0x2b>
c001a820:	83 ec 0c             	sub    esp,0xc
c001a823:	b9 02 00 00 00       	mov    ecx,0x2
c001a828:	89 d0                	mov    eax,edx
c001a82a:	99                   	cdq    
c001a82b:	f7 f9                	idiv   ecx
c001a82d:	83 e8 32             	sub    eax,0x32
c001a830:	50                   	push   eax
c001a831:	e8 61 bd fe ff       	call   c0006597 <iso_close>
c001a836:	83 c4 10             	add    esp,0x10
c001a839:	31 c0                	xor    eax,eax
c001a83b:	83 c4 0c             	add    esp,0xc
c001a83e:	c3                   	ret    
c001a83f:	90                   	nop

c001a840 <ISO9660::openDir(char const*, void**)>:
c001a840:	56                   	push   esi
c001a841:	53                   	push   ebx
c001a842:	50                   	push   eax
c001a843:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001a847:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001a84b:	85 db                	test   ebx,ebx
c001a84d:	0f 84 bd 00 00 00    	je     c001a910 <ISO9660::openDir(char const*, void**)+0xd0>
c001a853:	85 f6                	test   esi,esi
c001a855:	0f 84 b5 00 00 00    	je     c001a910 <ISO9660::openDir(char const*, void**)+0xd0>
c001a85b:	8a 13                	mov    dl,BYTE PTR [ebx]
c001a85d:	0f be 05 80 c8 02 c0 	movsx  eax,BYTE PTR ds:0xc002c880
c001a864:	38 15 80 c8 02 c0    	cmp    BYTE PTR ds:0xc002c880,dl
c001a86a:	74 1b                	je     c001a887 <ISO9660::openDir(char const*, void**)+0x47>
c001a86c:	85 c0                	test   eax,eax
c001a86e:	74 10                	je     c001a880 <ISO9660::openDir(char const*, void**)+0x40>
c001a870:	83 ec 0c             	sub    esp,0xc
c001a873:	68 49 2e 02 c0       	push   0xc0022e49
c001a878:	e8 ae 6d ff ff       	call   c001162b <KePanic(char const*)>
c001a87d:	83 c4 10             	add    esp,0x10
c001a880:	8a 03                	mov    al,BYTE PTR [ebx]
c001a882:	a2 80 c8 02 c0       	mov    ds:0xc002c880,al
c001a887:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001a88a:	8b 04 85 7c b7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4884]
c001a891:	85 c0                	test   eax,eax
c001a893:	74 10                	je     c001a8a5 <ISO9660::openDir(char const*, void**)+0x65>
c001a895:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c001a89c:	74 1a                	je     c001a8b8 <ISO9660::openDir(char const*, void**)+0x78>
c001a89e:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c001a8a5:	83 ec 0c             	sub    esp,0xc
c001a8a8:	0f be 05 80 c8 02 c0 	movsx  eax,BYTE PTR ds:0xc002c880
c001a8af:	50                   	push   eax
c001a8b0:	e8 91 c1 fe ff       	call   c0006a46 <init_percd>
c001a8b5:	83 c4 10             	add    esp,0x10
c001a8b8:	83 c3 03             	add    ebx,0x3
c001a8bb:	50                   	push   eax
c001a8bc:	50                   	push   eax
c001a8bd:	6a 01                	push   0x1
c001a8bf:	53                   	push   ebx
c001a8c0:	e8 48 bc fe ff       	call   c000650d <iso_open>
c001a8c5:	83 c4 10             	add    esp,0x10
c001a8c8:	89 c3                	mov    ebx,eax
c001a8ca:	83 f8 ff             	cmp    eax,0xffffffff
c001a8cd:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c001a8d2:	75 1c                	jne    c001a8f0 <ISO9660::openDir(char const*, void**)+0xb0>
c001a8d4:	53                   	push   ebx
c001a8d5:	53                   	push   ebx
c001a8d6:	68 f1 2e 02 c0       	push   0xc0022ef1
c001a8db:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001a8e1:	e8 c0 e1 fe ff       	call   c0008aa6 <VgaText::puts(char const*)>
c001a8e6:	83 c4 10             	add    esp,0x10
c001a8e9:	b8 01 00 00 00       	mov    eax,0x1
c001a8ee:	eb 25                	jmp    c001a915 <ISO9660::openDir(char const*, void**)+0xd5>
c001a8f0:	01 db                	add    ebx,ebx
c001a8f2:	51                   	push   ecx
c001a8f3:	83 c3 65             	add    ebx,0x65
c001a8f6:	51                   	push   ecx
c001a8f7:	68 04 2f 02 c0       	push   0xc0022f04
c001a8fc:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001a902:	e8 9f e1 fe ff       	call   c0008aa6 <VgaText::puts(char const*)>
c001a907:	89 1e                	mov    DWORD PTR [esi],ebx
c001a909:	83 c4 10             	add    esp,0x10
c001a90c:	31 c0                	xor    eax,eax
c001a90e:	eb 05                	jmp    c001a915 <ISO9660::openDir(char const*, void**)+0xd5>
c001a910:	b8 04 00 00 00       	mov    eax,0x4
c001a915:	5a                   	pop    edx
c001a916:	5b                   	pop    ebx
c001a917:	5e                   	pop    esi
c001a918:	c3                   	ret    
c001a919:	90                   	nop

c001a91a <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c001a91a:	55                   	push   ebp
c001a91b:	57                   	push   edi
c001a91c:	56                   	push   esi
c001a91d:	53                   	push   ebx
c001a91e:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001a924:	8b bc 24 3c 01 00 00 	mov    edi,DWORD PTR [esp+0x13c]
c001a92b:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c001a932:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c001a93a:	0f 84 e7 00 00 00    	je     c001aa27 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x10d>
c001a940:	85 db                	test   ebx,ebx
c001a942:	0f 84 df 00 00 00    	je     c001aa27 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x10d>
c001a948:	83 ec 0c             	sub    esp,0xc
c001a94b:	68 17 2f 02 c0       	push   0xc0022f17
c001a950:	e8 f0 ff fe ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001a955:	8b 84 24 44 01 00 00 	mov    eax,DWORD PTR [esp+0x144]
c001a95c:	b9 02 00 00 00       	mov    ecx,0x2
c001a961:	99                   	cdq    
c001a962:	f7 f9                	idiv   ecx
c001a964:	83 e8 32             	sub    eax,0x32
c001a967:	89 04 24             	mov    DWORD PTR [esp],eax
c001a96a:	e8 63 be fe ff       	call   c00067d2 <iso_readdir>
c001a96f:	83 c4 10             	add    esp,0x10
c001a972:	89 c6                	mov    esi,eax
c001a974:	85 c0                	test   eax,eax
c001a976:	75 37                	jne    c001a9af <ISO9660::readDir(void*, unsigned long, void*, int*)+0x95>
c001a978:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c001a97d:	56                   	push   esi
c001a97e:	56                   	push   esi
c001a97f:	68 22 2f 02 c0       	push   0xc0022f22
c001a984:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001a98a:	e8 17 e1 fe ff       	call   c0008aa6 <VgaText::puts(char const*)>
c001a98f:	83 c4 0c             	add    esp,0xc
c001a992:	68 10 01 00 00       	push   0x110
c001a997:	6a 00                	push   0x0
c001a999:	57                   	push   edi
c001a99a:	e8 51 5b fe ff       	call   c00004f0 <memset>
c001a99f:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c001a9a5:	83 c4 10             	add    esp,0x10
c001a9a8:	b8 01 00 00 00       	mov    eax,0x1
c001a9ad:	eb 7d                	jmp    c001aa2c <ISO9660::readDir(void*, unsigned long, void*, int*)+0x112>
c001a9af:	66 c7 04 24 00 00    	mov    WORD PTR [esp],0x0
c001a9b5:	8d 68 08             	lea    ebp,[eax+0x8]
c001a9b8:	83 ec 0c             	sub    esp,0xc
c001a9bb:	55                   	push   ebp
c001a9bc:	e8 af 5b fe ff       	call   c0000570 <strlen>
c001a9c1:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001a9c9:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001a9cd:	83 c4 10             	add    esp,0x10
c001a9d0:	83 7e 04 ff          	cmp    DWORD PTR [esi+0x4],0xffffffff
c001a9d4:	75 0a                	jne    c001a9e0 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc6>
c001a9d6:	b8 02 00 00 00       	mov    eax,0x2
c001a9db:	83 3e ff             	cmp    DWORD PTR [esi],0xffffffff
c001a9de:	74 05                	je     c001a9e5 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xcb>
c001a9e0:	b8 01 00 00 00       	mov    eax,0x1
c001a9e5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a9e9:	50                   	push   eax
c001a9ea:	50                   	push   eax
c001a9eb:	55                   	push   ebp
c001a9ec:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001a9f0:	8d 74 24 0c          	lea    esi,[esp+0xc]
c001a9f4:	50                   	push   eax
c001a9f5:	e8 46 5c fe ff       	call   c0000640 <strcpy>
c001a9fa:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c001aa01:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001aa03:	c7 03 10 01 00 00    	mov    DWORD PTR [ebx],0x110
c001aa09:	5a                   	pop    edx
c001aa0a:	a1 f0 c6 02 c0       	mov    eax,ds:0xc002c6f0
c001aa0f:	59                   	pop    ecx
c001aa10:	68 35 2f 02 c0       	push   0xc0022f35
c001aa15:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001aa1b:	e8 86 e0 fe ff       	call   c0008aa6 <VgaText::puts(char const*)>
c001aa20:	83 c4 10             	add    esp,0x10
c001aa23:	31 c0                	xor    eax,eax
c001aa25:	eb 05                	jmp    c001aa2c <ISO9660::readDir(void*, unsigned long, void*, int*)+0x112>
c001aa27:	b8 04 00 00 00       	mov    eax,0x4
c001aa2c:	81 c4 1c 01 00 00    	add    esp,0x11c
c001aa32:	5b                   	pop    ebx
c001aa33:	5e                   	pop    esi
c001aa34:	5f                   	pop    edi
c001aa35:	5d                   	pop    ebp
c001aa36:	c3                   	ret    

c001aa37 <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c001aa37:	57                   	push   edi
c001aa38:	56                   	push   esi
c001aa39:	53                   	push   ebx
c001aa3a:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001aa3e:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001aa42:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001aa46:	39 35 84 c8 02 c0    	cmp    DWORD PTR ds:0xc002c884,esi
c001aa4c:	0f be cb             	movsx  ecx,bl
c001aa4f:	75 0b                	jne    c001aa5c <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x25>
c001aa51:	0f be 05 60 41 02 c0 	movsx  eax,BYTE PTR ds:0xc0024160
c001aa58:	39 c8                	cmp    eax,ecx
c001aa5a:	74 47                	je     c001aaa3 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x6c>
c001aa5c:	83 ec 0c             	sub    esp,0xc
c001aa5f:	31 d2                	xor    edx,edx
c001aa61:	68 a0 c8 02 c0       	push   0xc002c8a0
c001aa66:	6a 01                	push   0x1
c001aa68:	52                   	push   edx
c001aa69:	56                   	push   esi
c001aa6a:	ff 34 8d 7c b7 02 c0 	push   DWORD PTR [ecx*4-0x3ffd4884]
c001aa71:	e8 3e 33 ff ff       	call   c000ddb4 <LogicalDisk::read(unsigned long long, int, void*)>
c001aa76:	83 c4 20             	add    esp,0x20
c001aa79:	85 c0                	test   eax,eax
c001aa7b:	75 0e                	jne    c001aa8b <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x54>
c001aa7d:	89 35 84 c8 02 c0    	mov    DWORD PTR ds:0xc002c884,esi
c001aa83:	88 1d 60 41 02 c0    	mov    BYTE PTR ds:0xc0024160,bl
c001aa89:	eb 18                	jmp    c001aaa3 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x6c>
c001aa8b:	50                   	push   eax
c001aa8c:	68 00 08 00 00       	push   0x800
c001aa91:	6a 00                	push   0x0
c001aa93:	57                   	push   edi
c001aa94:	e8 57 5a fe ff       	call   c00004f0 <memset>
c001aa99:	83 c4 10             	add    esp,0x10
c001aa9c:	b8 01 00 00 00       	mov    eax,0x1
c001aaa1:	eb 0e                	jmp    c001aab1 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x7a>
c001aaa3:	be a0 c8 02 c0       	mov    esi,0xc002c8a0
c001aaa8:	b9 00 08 00 00       	mov    ecx,0x800
c001aaad:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001aaaf:	31 c0                	xor    eax,eax
c001aab1:	5b                   	pop    ebx
c001aab2:	5e                   	pop    esi
c001aab3:	5f                   	pop    edi
c001aab4:	c3                   	ret    
c001aab5:	90                   	nop

c001aab6 <ISO9660::tryMount(LogicalDisk*, int)>:
c001aab6:	53                   	push   ebx
c001aab7:	81 ec 0c 08 00 00    	sub    esp,0x80c
c001aabd:	c7 05 84 c8 02 c0 ef be ad de 	mov    DWORD PTR ds:0xc002c884,0xdeadbeef
c001aac7:	8b 84 24 1c 08 00 00 	mov    eax,DWORD PTR [esp+0x81c]
c001aace:	8d 58 41             	lea    ebx,[eax+0x41]
c001aad1:	0f be db             	movsx  ebx,bl
c001aad4:	53                   	push   ebx
c001aad5:	8d 44 24 08          	lea    eax,[esp+0x8]
c001aad9:	50                   	push   eax
c001aada:	6a 10                	push   0x10
c001aadc:	e8 56 ff ff ff       	call   c001aa37 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001aae1:	83 c4 10             	add    esp,0x10
c001aae4:	31 d2                	xor    edx,edx
c001aae6:	85 c0                	test   eax,eax
c001aae8:	75 33                	jne    c001ab1d <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001aaea:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c001aaef:	75 2c                	jne    c001ab1d <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001aaf1:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c001aaf6:	75 25                	jne    c001ab1d <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001aaf8:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c001aafd:	75 1e                	jne    c001ab1d <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001aaff:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c001ab04:	75 17                	jne    c001ab1d <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001ab06:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c001ab0b:	75 10                	jne    c001ab1d <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001ab0d:	83 ec 0c             	sub    esp,0xc
c001ab10:	53                   	push   ebx
c001ab11:	e8 30 bf fe ff       	call   c0006a46 <init_percd>
c001ab16:	83 c4 10             	add    esp,0x10
c001ab19:	40                   	inc    eax
c001ab1a:	0f 95 c2             	setne  dl
c001ab1d:	88 d0                	mov    al,dl
c001ab1f:	81 c4 08 08 00 00    	add    esp,0x808
c001ab25:	5b                   	pop    ebx
c001ab26:	c3                   	ret    
c001ab27:	90                   	nop

c001ab28 <ISO9660::ISO9660()>:
c001ab28:	83 ec 0c             	sub    esp,0xc
c001ab2b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ab2f:	83 ec 0c             	sub    esp,0xc
c001ab32:	50                   	push   eax
c001ab33:	e8 8e 0c ff ff       	call   c000b7c6 <Filesystem::Filesystem()>
c001ab38:	83 c4 10             	add    esp,0x10
c001ab3b:	ba 50 2f 02 c0       	mov    edx,0xc0022f50
c001ab40:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ab44:	89 10                	mov    DWORD PTR [eax],edx
c001ab46:	e8 0d c0 fe ff       	call   c0006b58 <fs_iso9660_init>
c001ab4b:	90                   	nop
c001ab4c:	83 c4 0c             	add    esp,0xc
c001ab4f:	c3                   	ret    

c001ab50 <SoundCard::beginPlayback()>:
c001ab50:	c7 44 24 04 b4 2f 02 c0 	mov    DWORD PTR [esp+0x4],0xc0022fb4
c001ab58:	e9 ce 6a ff ff       	jmp    c001162b <KePanic(char const*)>
c001ab5d:	90                   	nop

c001ab5e <SoundCard::stopPlayback()>:
c001ab5e:	c7 44 24 04 b4 2f 02 c0 	mov    DWORD PTR [esp+0x4],0xc0022fb4
c001ab66:	e9 c0 6a ff ff       	jmp    c001162b <KePanic(char const*)>
c001ab6b:	90                   	nop

c001ab6c <SoundCard::SoundCard(char const*)>:
c001ab6c:	83 ec 1c             	sub    esp,0x1c
c001ab6f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ab73:	83 ec 08             	sub    esp,0x8
c001ab76:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ab7a:	50                   	push   eax
c001ab7b:	e8 ea 1f ff ff       	call   c000cb6a <Device::Device(char const*)>
c001ab80:	83 c4 10             	add    esp,0x10
c001ab83:	ba 00 30 02 c0       	mov    edx,0xc0023000
c001ab88:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ab8c:	89 10                	mov    DWORD PTR [eax],edx
c001ab8e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ab92:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c001ab99:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ab9d:	c7 80 dc 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1dc],0x0
c001aba7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001abab:	c7 80 e0 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e0],0x0
c001abb5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001abb9:	c7 80 e4 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e4],0x0
c001abc3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001abc7:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c001abd1:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001abd9:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c001abde:	7f 1a                	jg     c001abfa <SoundCard::SoundCard(char const*)+0x8e>
c001abe0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001abe4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001abe8:	83 c2 54             	add    edx,0x54
c001abeb:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c001abf3:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c001abf8:	eb df                	jmp    c001abd9 <SoundCard::SoundCard(char const*)+0x6d>
c001abfa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001abfe:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c001ac05:	90                   	nop
c001ac06:	83 c4 1c             	add    esp,0x1c
c001ac09:	c3                   	ret    

c001ac0a <SoundCard::~SoundCard()>:
c001ac0a:	83 ec 0c             	sub    esp,0xc
c001ac0d:	ba 00 30 02 c0       	mov    edx,0xc0023000
c001ac12:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ac16:	89 10                	mov    DWORD PTR [eax],edx
c001ac18:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ac1c:	83 ec 0c             	sub    esp,0xc
c001ac1f:	50                   	push   eax
c001ac20:	e8 af 1c ff ff       	call   c000c8d4 <Device::~Device()>
c001ac25:	83 c4 10             	add    esp,0x10
c001ac28:	90                   	nop
c001ac29:	83 c4 0c             	add    esp,0xc
c001ac2c:	c3                   	ret    
c001ac2d:	90                   	nop

c001ac2e <SoundCard::~SoundCard()>:
c001ac2e:	83 ec 0c             	sub    esp,0xc
c001ac31:	83 ec 0c             	sub    esp,0xc
c001ac34:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ac38:	e8 cd ff ff ff       	call   c001ac0a <SoundCard::~SoundCard()>
c001ac3d:	83 c4 10             	add    esp,0x10
c001ac40:	83 ec 08             	sub    esp,0x8
c001ac43:	68 e8 01 00 00       	push   0x1e8
c001ac48:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ac4c:	e8 c7 fb fe ff       	call   c000a818 <operator delete(void*, unsigned long)>
c001ac51:	83 c4 10             	add    esp,0x10
c001ac54:	83 c4 0c             	add    esp,0xc
c001ac57:	c3                   	ret    

c001ac58 <SoundCard::configureRates(int, int, int)>:
c001ac58:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001ac5c:	31 c0                	xor    eax,eax
c001ac5e:	80 ba d8 01 00 00 00 	cmp    BYTE PTR [edx+0x1d8],0x0
c001ac65:	75 20                	jne    c001ac87 <SoundCard::configureRates(int, int, int)+0x2f>
c001ac67:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ac6b:	89 82 e0 01 00 00    	mov    DWORD PTR [edx+0x1e0],eax
c001ac71:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ac75:	89 82 dc 01 00 00    	mov    DWORD PTR [edx+0x1dc],eax
c001ac7b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ac7f:	89 82 e4 01 00 00    	mov    DWORD PTR [edx+0x1e4],eax
c001ac85:	b0 01                	mov    al,0x1
c001ac87:	c3                   	ret    

c001ac88 <SoundCard::getSamples16(int, short*)>:
c001ac88:	55                   	push   ebp
c001ac89:	57                   	push   edi
c001ac8a:	31 ff                	xor    edi,edi
c001ac8c:	56                   	push   esi
c001ac8d:	53                   	push   ebx
c001ac8e:	31 db                	xor    ebx,ebx
c001ac90:	83 ec 10             	sub    esp,0x10
c001ac93:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c001ac97:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001ac9b:	8d 04 36             	lea    eax,[esi+esi*1]
c001ac9e:	50                   	push   eax
c001ac9f:	6a 00                	push   0x0
c001aca1:	55                   	push   ebp
c001aca2:	e8 49 58 fe ff       	call   c00004f0 <memset>
c001aca7:	83 c4 10             	add    esp,0x10
c001acaa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001acae:	8b 84 98 58 01 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x158]
c001acb5:	85 c0                	test   eax,eax
c001acb7:	74 1b                	je     c001acd4 <SoundCard::getSamples16(int, short*)+0x4c>
c001acb9:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c001acbd:	75 15                	jne    c001acd4 <SoundCard::getSamples16(int, short*)+0x4c>
c001acbf:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001acc3:	55                   	push   ebp
c001acc4:	56                   	push   esi
c001acc5:	50                   	push   eax
c001acc6:	e8 f1 02 00 00       	call   c001afbc <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>
c001accb:	83 c4 10             	add    esp,0x10
c001acce:	39 c7                	cmp    edi,eax
c001acd0:	7d 02                	jge    c001acd4 <SoundCard::getSamples16(int, short*)+0x4c>
c001acd2:	89 c7                	mov    edi,eax
c001acd4:	43                   	inc    ebx
c001acd5:	83 fb 20             	cmp    ebx,0x20
c001acd8:	75 d0                	jne    c001acaa <SoundCard::getSamples16(int, short*)+0x22>
c001acda:	83 c4 0c             	add    esp,0xc
c001acdd:	89 f8                	mov    eax,edi
c001acdf:	5b                   	pop    ebx
c001ace0:	5e                   	pop    esi
c001ace1:	5f                   	pop    edi
c001ace2:	5d                   	pop    ebp
c001ace3:	c3                   	ret    

c001ace4 <SoundCard::getSamples32(int, int*)>:
c001ace4:	55                   	push   ebp
c001ace5:	57                   	push   edi
c001ace6:	31 ff                	xor    edi,edi
c001ace8:	56                   	push   esi
c001ace9:	31 f6                	xor    esi,esi
c001aceb:	53                   	push   ebx
c001acec:	83 ec 10             	sub    esp,0x10
c001acef:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001acf3:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001acf7:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001acfb:	c1 e0 02             	shl    eax,0x2
c001acfe:	50                   	push   eax
c001acff:	6a 00                	push   0x0
c001ad01:	55                   	push   ebp
c001ad02:	e8 e9 57 fe ff       	call   c00004f0 <memset>
c001ad07:	83 c4 10             	add    esp,0x10
c001ad0a:	8b 84 bb 58 01 00 00 	mov    eax,DWORD PTR [ebx+edi*4+0x158]
c001ad11:	85 c0                	test   eax,eax
c001ad13:	74 1b                	je     c001ad30 <SoundCard::getSamples32(int, int*)+0x4c>
c001ad15:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c001ad19:	75 15                	jne    c001ad30 <SoundCard::getSamples32(int, int*)+0x4c>
c001ad1b:	53                   	push   ebx
c001ad1c:	55                   	push   ebp
c001ad1d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ad21:	50                   	push   eax
c001ad22:	e8 61 03 00 00       	call   c001b088 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>
c001ad27:	83 c4 10             	add    esp,0x10
c001ad2a:	39 c6                	cmp    esi,eax
c001ad2c:	7d 02                	jge    c001ad30 <SoundCard::getSamples32(int, int*)+0x4c>
c001ad2e:	89 c6                	mov    esi,eax
c001ad30:	47                   	inc    edi
c001ad31:	83 ff 20             	cmp    edi,0x20
c001ad34:	75 d4                	jne    c001ad0a <SoundCard::getSamples32(int, int*)+0x26>
c001ad36:	85 f6                	test   esi,esi
c001ad38:	0f b6 83 d8 01 00 00 	movzx  eax,BYTE PTR [ebx+0x1d8]
c001ad3f:	75 0f                	jne    c001ad50 <SoundCard::getSamples32(int, int*)+0x6c>
c001ad41:	85 c0                	test   eax,eax
c001ad43:	74 1b                	je     c001ad60 <SoundCard::getSamples32(int, int*)+0x7c>
c001ad45:	83 ec 0c             	sub    esp,0xc
c001ad48:	8b 03                	mov    eax,DWORD PTR [ebx]
c001ad4a:	53                   	push   ebx
c001ad4b:	ff 50 28             	call   DWORD PTR [eax+0x28]
c001ad4e:	eb 0d                	jmp    c001ad5d <SoundCard::getSamples32(int, int*)+0x79>
c001ad50:	85 c0                	test   eax,eax
c001ad52:	75 0c                	jne    c001ad60 <SoundCard::getSamples32(int, int*)+0x7c>
c001ad54:	83 ec 0c             	sub    esp,0xc
c001ad57:	8b 03                	mov    eax,DWORD PTR [ebx]
c001ad59:	53                   	push   ebx
c001ad5a:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001ad5d:	83 c4 10             	add    esp,0x10
c001ad60:	83 c4 0c             	add    esp,0xc
c001ad63:	89 f0                	mov    eax,esi
c001ad65:	5b                   	pop    ebx
c001ad66:	5e                   	pop    esi
c001ad67:	5f                   	pop    edi
c001ad68:	5d                   	pop    ebp
c001ad69:	c3                   	ret    

c001ad6a <SoundCard::addChannel(SoundPort*)>:
c001ad6a:	83 ec 0c             	sub    esp,0xc
c001ad6d:	31 c0                	xor    eax,eax
c001ad6f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001ad73:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c001ad7b:	74 1b                	je     c001ad98 <SoundCard::addChannel(SoundPort*)+0x2e>
c001ad7d:	40                   	inc    eax
c001ad7e:	83 f8 20             	cmp    eax,0x20
c001ad81:	75 f0                	jne    c001ad73 <SoundCard::addChannel(SoundPort*)+0x9>
c001ad83:	83 ec 0c             	sub    esp,0xc
c001ad86:	68 d9 2f 02 c0       	push   0xc0022fd9
c001ad8b:	e8 9b 68 ff ff       	call   c001162b <KePanic(char const*)>
c001ad90:	83 c4 10             	add    esp,0x10
c001ad93:	83 c8 ff             	or     eax,0xffffffff
c001ad96:	eb 0b                	jmp    c001ada3 <SoundCard::addChannel(SoundPort*)+0x39>
c001ad98:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001ad9c:	89 8c 82 58 01 00 00 	mov    DWORD PTR [edx+eax*4+0x158],ecx
c001ada3:	83 c4 0c             	add    esp,0xc
c001ada6:	c3                   	ret    
c001ada7:	90                   	nop

c001ada8 <SoundCard::removeChannel(int)>:
c001ada8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001adac:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001adb0:	c7 84 90 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x158],0x0
c001adbb:	c3                   	ret    

c001adbc <SoundPort::SoundPort(int, int, int, int)>:
c001adbc:	83 ec 0c             	sub    esp,0xc
c001adbf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001adc3:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001adca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001adce:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c001add2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001add6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001adda:	89 10                	mov    DWORD PTR [eax],edx
c001addc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ade0:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001ade4:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001ade7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001adeb:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001adef:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001adf2:	83 7c 24 20 ff       	cmp    DWORD PTR [esp+0x20],0xffffffff
c001adf7:	75 13                	jne    c001ae0c <SoundPort::SoundPort(int, int, int, int)+0x50>
c001adf9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001adfd:	8b 00                	mov    eax,DWORD PTR [eax]
c001adff:	05 a0 0f 00 00       	add    eax,0xfa0
c001ae04:	01 c0                	add    eax,eax
c001ae06:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001ae0a:	66 90                	xchg   ax,ax
c001ae0c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ae10:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001ae14:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c001ae17:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ae1b:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c001ae22:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ae26:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001ae29:	c1 e0 02             	shl    eax,0x2
c001ae2c:	83 ec 0c             	sub    esp,0xc
c001ae2f:	50                   	push   eax
c001ae30:	e8 81 cc fe ff       	call   c0007ab6 <malloc>
c001ae35:	83 c4 10             	add    esp,0x10
c001ae38:	89 c2                	mov    edx,eax
c001ae3a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ae3e:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001ae41:	90                   	nop
c001ae42:	83 c4 0c             	add    esp,0xc
c001ae45:	c3                   	ret    
c001ae46:	66 90                	xchg   ax,ax

c001ae48 <SoundPort::~SoundPort()>:
c001ae48:	83 ec 0c             	sub    esp,0xc
c001ae4b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ae4f:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001ae52:	85 c0                	test   eax,eax
c001ae54:	74 1e                	je     c001ae74 <SoundPort::~SoundPort()+0x2c>
c001ae56:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ae5a:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001ae5d:	83 ec 0c             	sub    esp,0xc
c001ae60:	50                   	push   eax
c001ae61:	e8 60 cc fe ff       	call   c0007ac6 <free>
c001ae66:	83 c4 10             	add    esp,0x10
c001ae69:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ae6d:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001ae74:	90                   	nop
c001ae75:	83 c4 0c             	add    esp,0xc
c001ae78:	c3                   	ret    
c001ae79:	90                   	nop
c001ae7a:	66 90                	xchg   ax,ax

c001ae7c <SoundPort::unpause()>:
c001ae7c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ae80:	c6 40 18 00          	mov    BYTE PTR [eax+0x18],0x0
c001ae84:	c3                   	ret    
c001ae85:	90                   	nop
c001ae86:	66 90                	xchg   ax,ax

c001ae88 <SoundPort::pause()>:
c001ae88:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ae8c:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c001ae90:	c3                   	ret    
c001ae91:	90                   	nop
c001ae92:	66 90                	xchg   ax,ax

c001ae94 <SoundPort::getBufferUsed()>:
c001ae94:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ae98:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001ae9b:	c3                   	ret    

c001ae9c <SoundPort::getBufferSize()>:
c001ae9c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001aea0:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001aea3:	c3                   	ret    

c001aea4 <SoundPort::buffer16(short*, int)>:
c001aea4:	55                   	push   ebp
c001aea5:	57                   	push   edi
c001aea6:	56                   	push   esi
c001aea7:	53                   	push   ebx
c001aea8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001aeac:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c001aeb0:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c001aeb3:	3b 42 10             	cmp    eax,DWORD PTR [edx+0x10]
c001aeb6:	74 68                	je     c001af20 <SoundPort::buffer16(short*, int)+0x7c>
c001aeb8:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001aebc:	85 c9                	test   ecx,ecx
c001aebe:	7e 60                	jle    c001af20 <SoundPort::buffer16(short*, int)+0x7c>
c001aec0:	0f bf 4d 00          	movsx  ecx,WORD PTR [ebp+0x0]
c001aec4:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c001aec7:	c1 e1 0f             	shl    ecx,0xf
c001aeca:	8d 70 01             	lea    esi,[eax+0x1]
c001aecd:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c001aed0:	89 0c 83             	mov    DWORD PTR [ebx+eax*4],ecx
c001aed3:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001aed6:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001aed9:	74 4d                	je     c001af28 <SoundPort::buffer16(short*, int)+0x84>
c001aedb:	31 f6                	xor    esi,esi
c001aedd:	eb 21                	jmp    c001af00 <SoundPort::buffer16(short*, int)+0x5c>
c001aedf:	90                   	nop
c001aee0:	0f bf 5c 45 00       	movsx  ebx,WORD PTR [ebp+eax*2+0x0]
c001aee5:	8d 79 01             	lea    edi,[ecx+0x1]
c001aee8:	c1 e3 0f             	shl    ebx,0xf
c001aeeb:	89 7a 14             	mov    DWORD PTR [edx+0x14],edi
c001aeee:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c001aef1:	89 1c 8f             	mov    DWORD PTR [edi+ecx*4],ebx
c001aef4:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001aef7:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001aefa:	74 1c                	je     c001af18 <SoundPort::buffer16(short*, int)+0x74>
c001aefc:	89 c6                	mov    esi,eax
c001aefe:	66 90                	xchg   ax,ax
c001af00:	8d 46 01             	lea    eax,[esi+0x1]
c001af03:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c001af07:	75 d7                	jne    c001aee0 <SoundPort::buffer16(short*, int)+0x3c>
c001af09:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001af0d:	8d 76 00             	lea    esi,[esi+0x0]
c001af10:	5b                   	pop    ebx
c001af11:	5e                   	pop    esi
c001af12:	5f                   	pop    edi
c001af13:	5d                   	pop    ebp
c001af14:	c3                   	ret    
c001af15:	8d 76 00             	lea    esi,[esi+0x0]
c001af18:	5b                   	pop    ebx
c001af19:	8d 46 02             	lea    eax,[esi+0x2]
c001af1c:	5e                   	pop    esi
c001af1d:	5f                   	pop    edi
c001af1e:	5d                   	pop    ebp
c001af1f:	c3                   	ret    
c001af20:	5b                   	pop    ebx
c001af21:	31 c0                	xor    eax,eax
c001af23:	5e                   	pop    esi
c001af24:	5f                   	pop    edi
c001af25:	5d                   	pop    ebp
c001af26:	c3                   	ret    
c001af27:	90                   	nop
c001af28:	b8 01 00 00 00       	mov    eax,0x1
c001af2d:	eb e1                	jmp    c001af10 <SoundPort::buffer16(short*, int)+0x6c>
c001af2f:	90                   	nop

c001af30 <SoundPort::buffer32(int*, int)>:
c001af30:	55                   	push   ebp
c001af31:	57                   	push   edi
c001af32:	56                   	push   esi
c001af33:	53                   	push   ebx
c001af34:	83 ec 04             	sub    esp,0x4
c001af37:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001af3b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001af3f:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001af42:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001af46:	89 04 24             	mov    DWORD PTR [esp],eax
c001af49:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001af4c:	74 5a                	je     c001afa8 <SoundPort::buffer32(int*, int)+0x78>
c001af4e:	85 c0                	test   eax,eax
c001af50:	7e 56                	jle    c001afa8 <SoundPort::buffer32(int*, int)+0x78>
c001af52:	8d 71 01             	lea    esi,[ecx+0x1]
c001af55:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c001af58:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c001af5b:	8b 37                	mov    esi,DWORD PTR [edi]
c001af5d:	89 34 8b             	mov    DWORD PTR [ebx+ecx*4],esi
c001af60:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001af63:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001af66:	74 4c                	je     c001afb4 <SoundPort::buffer32(int*, int)+0x84>
c001af68:	31 f6                	xor    esi,esi
c001af6a:	eb 1c                	jmp    c001af88 <SoundPort::buffer32(int*, int)+0x58>
c001af6c:	8d 69 01             	lea    ebp,[ecx+0x1]
c001af6f:	89 6a 14             	mov    DWORD PTR [edx+0x14],ebp
c001af72:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c001af75:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c001af78:	89 44 8d 00          	mov    DWORD PTR [ebp+ecx*4+0x0],eax
c001af7c:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001af7f:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001af82:	74 18                	je     c001af9c <SoundPort::buffer32(int*, int)+0x6c>
c001af84:	89 de                	mov    esi,ebx
c001af86:	66 90                	xchg   ax,ax
c001af88:	8d 5e 01             	lea    ebx,[esi+0x1]
c001af8b:	39 1c 24             	cmp    DWORD PTR [esp],ebx
c001af8e:	75 dc                	jne    c001af6c <SoundPort::buffer32(int*, int)+0x3c>
c001af90:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001af93:	90                   	nop
c001af94:	83 c4 04             	add    esp,0x4
c001af97:	5b                   	pop    ebx
c001af98:	5e                   	pop    esi
c001af99:	5f                   	pop    edi
c001af9a:	5d                   	pop    ebp
c001af9b:	c3                   	ret    
c001af9c:	83 c4 04             	add    esp,0x4
c001af9f:	8d 46 02             	lea    eax,[esi+0x2]
c001afa2:	5b                   	pop    ebx
c001afa3:	5e                   	pop    esi
c001afa4:	5f                   	pop    edi
c001afa5:	5d                   	pop    ebp
c001afa6:	c3                   	ret    
c001afa7:	90                   	nop
c001afa8:	83 c4 04             	add    esp,0x4
c001afab:	31 c0                	xor    eax,eax
c001afad:	5b                   	pop    ebx
c001afae:	5e                   	pop    esi
c001afaf:	5f                   	pop    edi
c001afb0:	5d                   	pop    ebp
c001afb1:	c3                   	ret    
c001afb2:	66 90                	xchg   ax,ax
c001afb4:	b8 01 00 00 00       	mov    eax,0x1
c001afb9:	eb d9                	jmp    c001af94 <SoundPort::buffer32(int*, int)+0x64>
c001afbb:	90                   	nop

c001afbc <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>:
c001afbc:	57                   	push   edi
c001afbd:	56                   	push   esi
c001afbe:	53                   	push   ebx
c001afbf:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001afc3:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c001afc7:	8b 86 e0 01 00 00    	mov    eax,DWORD PTR [esi+0x1e0]
c001afcd:	39 03                	cmp    DWORD PTR [ebx],eax
c001afcf:	74 13                	je     c001afe4 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x28>
c001afd1:	83 ec 0c             	sub    esp,0xc
c001afd4:	68 2c 30 02 c0       	push   0xc002302c
c001afd9:	e8 4d 66 ff ff       	call   c001162b <KePanic(char const*)>
c001afde:	83 c4 10             	add    esp,0x10
c001afe1:	8d 76 00             	lea    esi,[esi+0x0]
c001afe4:	8b 86 dc 01 00 00    	mov    eax,DWORD PTR [esi+0x1dc]
c001afea:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c001afed:	74 11                	je     c001b000 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x44>
c001afef:	83 ec 0c             	sub    esp,0xc
c001aff2:	68 6b 30 02 c0       	push   0xc002306b
c001aff7:	e8 2f 66 ff ff       	call   c001162b <KePanic(char const*)>
c001affc:	83 c4 10             	add    esp,0x10
c001afff:	90                   	nop
c001b000:	8b 86 e4 01 00 00    	mov    eax,DWORD PTR [esi+0x1e4]
c001b006:	39 43 08             	cmp    DWORD PTR [ebx+0x8],eax
c001b009:	74 11                	je     c001b01c <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x60>
c001b00b:	83 ec 0c             	sub    esp,0xc
c001b00e:	68 6b 30 02 c0       	push   0xc002306b
c001b013:	e8 13 66 ff ff       	call   c001162b <KePanic(char const*)>
c001b018:	83 c4 10             	add    esp,0x10
c001b01b:	90                   	nop
c001b01c:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c001b01f:	3b 74 24 14          	cmp    esi,DWORD PTR [esp+0x14]
c001b023:	7e 07                	jle    c001b02c <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x70>
c001b025:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001b029:	8d 76 00             	lea    esi,[esi+0x0]
c001b02c:	85 f6                	test   esi,esi
c001b02e:	7e 2c                	jle    c001b05c <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0xa0>
c001b030:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001b034:	8d 3c 36             	lea    edi,[esi+esi*1]
c001b037:	31 c9                	xor    ecx,ecx
c001b039:	01 d7                	add    edi,edx
c001b03b:	90                   	nop
c001b03c:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c001b03f:	8b 04 08             	mov    eax,DWORD PTR [eax+ecx*1]
c001b042:	85 c0                	test   eax,eax
c001b044:	79 06                	jns    c001b04c <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x90>
c001b046:	05 ff 7f 00 00       	add    eax,0x7fff
c001b04b:	90                   	nop
c001b04c:	c1 f8 0f             	sar    eax,0xf
c001b04f:	83 c1 04             	add    ecx,0x4
c001b052:	66 01 02             	add    WORD PTR [edx],ax
c001b055:	83 c2 02             	add    edx,0x2
c001b058:	39 d7                	cmp    edi,edx
c001b05a:	75 e0                	jne    c001b03c <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x80>
c001b05c:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c001b05f:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001b062:	83 ec 04             	sub    esp,0x4
c001b065:	29 f0                	sub    eax,esi
c001b067:	c1 e0 02             	shl    eax,0x2
c001b06a:	50                   	push   eax
c001b06b:	8d 04 b2             	lea    eax,[edx+esi*4]
c001b06e:	50                   	push   eax
c001b06f:	52                   	push   edx
c001b070:	e8 5b 53 fe ff       	call   c00003d0 <memmove>
c001b075:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001b078:	83 c4 10             	add    esp,0x10
c001b07b:	29 f0                	sub    eax,esi
c001b07d:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c001b080:	89 f0                	mov    eax,esi
c001b082:	5b                   	pop    ebx
c001b083:	5e                   	pop    esi
c001b084:	5f                   	pop    edi
c001b085:	c3                   	ret    
c001b086:	66 90                	xchg   ax,ax

c001b088 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>:
c001b088:	57                   	push   edi
c001b089:	56                   	push   esi
c001b08a:	53                   	push   ebx
c001b08b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b08f:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001b093:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001b097:	8b 87 e0 01 00 00    	mov    eax,DWORD PTR [edi+0x1e0]
c001b09d:	39 06                	cmp    DWORD PTR [esi],eax
c001b09f:	74 13                	je     c001b0b4 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x2c>
c001b0a1:	83 ec 0c             	sub    esp,0xc
c001b0a4:	68 4c 30 02 c0       	push   0xc002304c
c001b0a9:	e8 7d 65 ff ff       	call   c001162b <KePanic(char const*)>
c001b0ae:	83 c4 10             	add    esp,0x10
c001b0b1:	8d 76 00             	lea    esi,[esi+0x0]
c001b0b4:	8b 87 dc 01 00 00    	mov    eax,DWORD PTR [edi+0x1dc]
c001b0ba:	39 46 04             	cmp    DWORD PTR [esi+0x4],eax
c001b0bd:	74 11                	je     c001b0d0 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x48>
c001b0bf:	83 ec 0c             	sub    esp,0xc
c001b0c2:	68 87 30 02 c0       	push   0xc0023087
c001b0c7:	e8 5f 65 ff ff       	call   c001162b <KePanic(char const*)>
c001b0cc:	83 c4 10             	add    esp,0x10
c001b0cf:	90                   	nop
c001b0d0:	8b 87 e4 01 00 00    	mov    eax,DWORD PTR [edi+0x1e4]
c001b0d6:	39 46 08             	cmp    DWORD PTR [esi+0x8],eax
c001b0d9:	74 11                	je     c001b0ec <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x64>
c001b0db:	83 ec 0c             	sub    esp,0xc
c001b0de:	68 87 30 02 c0       	push   0xc0023087
c001b0e3:	e8 43 65 ff ff       	call   c001162b <KePanic(char const*)>
c001b0e8:	83 c4 10             	add    esp,0x10
c001b0eb:	90                   	nop
c001b0ec:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c001b0ef:	3b 7c 24 14          	cmp    edi,DWORD PTR [esp+0x14]
c001b0f3:	7e 07                	jle    c001b0fc <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x74>
c001b0f5:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001b0f9:	8d 76 00             	lea    esi,[esi+0x0]
c001b0fc:	85 ff                	test   edi,edi
c001b0fe:	7e 1c                	jle    c001b11c <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x94>
c001b100:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c001b107:	31 c0                	xor    eax,eax
c001b109:	8d 76 00             	lea    esi,[esi+0x0]
c001b10c:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c001b10f:	8b 14 02             	mov    edx,DWORD PTR [edx+eax*1]
c001b112:	01 14 03             	add    DWORD PTR [ebx+eax*1],edx
c001b115:	83 c0 04             	add    eax,0x4
c001b118:	39 c1                	cmp    ecx,eax
c001b11a:	75 f0                	jne    c001b10c <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x84>
c001b11c:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c001b11f:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001b122:	83 ec 04             	sub    esp,0x4
c001b125:	29 f8                	sub    eax,edi
c001b127:	c1 e0 02             	shl    eax,0x2
c001b12a:	50                   	push   eax
c001b12b:	8d 04 ba             	lea    eax,[edx+edi*4]
c001b12e:	50                   	push   eax
c001b12f:	52                   	push   edx
c001b130:	e8 9b 52 fe ff       	call   c00003d0 <memmove>
c001b135:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001b138:	83 c4 10             	add    esp,0x10
c001b13b:	29 f8                	sub    eax,edi
c001b13d:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c001b140:	89 f8                	mov    eax,edi
c001b142:	5b                   	pop    ebx
c001b143:	5e                   	pop    esi
c001b144:	5f                   	pop    edi
c001b145:	c3                   	ret    

c001b146 <PCI::open(int, int, void*)>:
c001b146:	83 ec 18             	sub    esp,0x18
c001b149:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b14d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001b151:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001b157:	8b 10                	mov    edx,DWORD PTR [eax]
c001b159:	50                   	push   eax
c001b15a:	ff 52 18             	call   DWORD PTR [edx+0x18]
c001b15d:	31 c0                	xor    eax,eax
c001b15f:	83 c4 1c             	add    esp,0x1c
c001b162:	c3                   	ret    
c001b163:	90                   	nop

c001b164 <PCI::close(int, int, void*)>:
c001b164:	31 c0                	xor    eax,eax
c001b166:	c3                   	ret    
c001b167:	90                   	nop

c001b168 <PCI::PCI()>:
c001b168:	83 ec 0c             	sub    esp,0xc
c001b16b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b16f:	83 ec 08             	sub    esp,0x8
c001b172:	68 a3 30 02 c0       	push   0xc00230a3
c001b177:	50                   	push   eax
c001b178:	e8 b7 11 ff ff       	call   c000c334 <Bus::Bus(char const*)>
c001b17d:	83 c4 10             	add    esp,0x10
c001b180:	ba 4c 31 02 c0       	mov    edx,0xc002314c
c001b185:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b189:	89 10                	mov    DWORD PTR [eax],edx
c001b18b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b18f:	c7 80 58 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x158],0x1
c001b199:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b19d:	a3 a0 d0 02 c0       	mov    ds:0xc002d0a0,eax
c001b1a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b1a6:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001b1ac:	0f b6 d0             	movzx  edx,al
c001b1af:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b1b3:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c001b1ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b1be:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001b1c4:	0f b6 d0             	movzx  edx,al
c001b1c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b1cb:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c001b1d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b1d4:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001b1da:	8d 50 01             	lea    edx,[eax+0x1]
c001b1dd:	88 d1                	mov    cl,dl
c001b1df:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b1e3:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c001b1e9:	0f b6 d0             	movzx  edx,al
c001b1ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b1f0:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001b1f4:	83 c9 c0             	or     ecx,0xffffffc0
c001b1f7:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001b1fb:	90                   	nop
c001b1fc:	83 c4 0c             	add    esp,0xc
c001b1ff:	c3                   	ret    

c001b200 <PCI::readBAR8(unsigned int, int)>:
c001b200:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001b204:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b208:	f6 c2 01             	test   dl,0x1
c001b20b:	74 07                	je     c001b214 <PCI::readBAR8(unsigned int, int)+0x14>
c001b20d:	83 e2 fc             	and    edx,0xfffffffc
c001b210:	01 c2                	add    edx,eax
c001b212:	ec                   	in     al,dx
c001b213:	c3                   	ret    
c001b214:	83 e2 f0             	and    edx,0xfffffff0
c001b217:	8a 04 02             	mov    al,BYTE PTR [edx+eax*1]
c001b21a:	c3                   	ret    
c001b21b:	90                   	nop

c001b21c <PCI::readBAR16(unsigned int, int)>:
c001b21c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001b220:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b224:	f6 c2 01             	test   dl,0x1
c001b227:	74 08                	je     c001b231 <PCI::readBAR16(unsigned int, int)+0x15>
c001b229:	83 e2 fc             	and    edx,0xfffffffc
c001b22c:	01 c2                	add    edx,eax
c001b22e:	66 ed                	in     ax,dx
c001b230:	c3                   	ret    
c001b231:	83 e2 f0             	and    edx,0xfffffff0
c001b234:	66 8b 04 02          	mov    ax,WORD PTR [edx+eax*1]
c001b238:	c3                   	ret    
c001b239:	90                   	nop

c001b23a <PCI::readBAR32(unsigned int, int)>:
c001b23a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001b23e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b242:	f6 c2 01             	test   dl,0x1
c001b245:	74 07                	je     c001b24e <PCI::readBAR32(unsigned int, int)+0x14>
c001b247:	83 e2 fc             	and    edx,0xfffffffc
c001b24a:	01 c2                	add    edx,eax
c001b24c:	ed                   	in     eax,dx
c001b24d:	c3                   	ret    
c001b24e:	83 e2 f0             	and    edx,0xfffffff0
c001b251:	8b 04 02             	mov    eax,DWORD PTR [edx+eax*1]
c001b254:	c3                   	ret    
c001b255:	90                   	nop

c001b256 <PCI::writeBAR8(unsigned int, unsigned char, int)>:
c001b256:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001b25a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b25e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001b262:	f6 c2 01             	test   dl,0x1
c001b265:	74 07                	je     c001b26e <PCI::writeBAR8(unsigned int, unsigned char, int)+0x18>
c001b267:	83 e2 fc             	and    edx,0xfffffffc
c001b26a:	01 ca                	add    edx,ecx
c001b26c:	ee                   	out    dx,al
c001b26d:	c3                   	ret    
c001b26e:	83 e2 f0             	and    edx,0xfffffff0
c001b271:	88 04 0a             	mov    BYTE PTR [edx+ecx*1],al
c001b274:	c3                   	ret    
c001b275:	90                   	nop

c001b276 <PCI::writeBAR16(unsigned int, unsigned short, int)>:
c001b276:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001b27a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b27e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001b282:	f6 c2 01             	test   dl,0x1
c001b285:	74 08                	je     c001b28f <PCI::writeBAR16(unsigned int, unsigned short, int)+0x19>
c001b287:	83 e2 fc             	and    edx,0xfffffffc
c001b28a:	01 ca                	add    edx,ecx
c001b28c:	66 ef                	out    dx,ax
c001b28e:	c3                   	ret    
c001b28f:	83 e2 f0             	and    edx,0xfffffff0
c001b292:	66 89 04 0a          	mov    WORD PTR [edx+ecx*1],ax
c001b296:	c3                   	ret    
c001b297:	90                   	nop

c001b298 <PCI::writeBAR32(unsigned int, unsigned int, int)>:
c001b298:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001b29c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b2a0:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001b2a4:	f6 c2 01             	test   dl,0x1
c001b2a7:	74 07                	je     c001b2b0 <PCI::writeBAR32(unsigned int, unsigned int, int)+0x18>
c001b2a9:	83 e2 fc             	and    edx,0xfffffffc
c001b2ac:	01 ca                	add    edx,ecx
c001b2ae:	ef                   	out    dx,eax
c001b2af:	c3                   	ret    
c001b2b0:	83 e2 f0             	and    edx,0xfffffff0
c001b2b3:	89 04 0a             	mov    DWORD PTR [edx+ecx*1],eax
c001b2b6:	c3                   	ret    
c001b2b7:	90                   	nop

c001b2b8 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001b2b8:	55                   	push   ebp
c001b2b9:	57                   	push   edi
c001b2ba:	56                   	push   esi
c001b2bb:	53                   	push   ebx
c001b2bc:	83 ec 0c             	sub    esp,0xc
c001b2bf:	0f b6 74 24 2c       	movzx  esi,BYTE PTR [esp+0x2c]
c001b2c4:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c001b2c8:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c001b2cc:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001b2d0:	83 fe 07             	cmp    esi,0x7
c001b2d3:	76 10                	jbe    c001b2e5 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x2d>
c001b2d5:	83 ec 0c             	sub    esp,0xc
c001b2d8:	68 ab 30 02 c0       	push   0xc00230ab
c001b2dd:	e8 49 63 ff ff       	call   c001162b <KePanic(char const*)>
c001b2e2:	83 c4 10             	add    esp,0x10
c001b2e5:	0f b6 db             	movzx  ebx,bl
c001b2e8:	83 fb 0f             	cmp    ebx,0xf
c001b2eb:	76 10                	jbe    c001b2fd <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x45>
c001b2ed:	83 ec 0c             	sub    esp,0xc
c001b2f0:	68 db 30 02 c0       	push   0xc00230db
c001b2f5:	e8 31 63 ff ff       	call   c001162b <KePanic(char const*)>
c001b2fa:	83 c4 10             	add    esp,0x10
c001b2fd:	8d 04 36             	lea    eax,[esi+esi*1]
c001b300:	ba f8 0c 00 00       	mov    edx,0xcf8
c001b305:	83 c8 f0             	or     eax,0xfffffff0
c001b308:	ee                   	out    dx,al
c001b309:	ba fa 0c 00 00       	mov    edx,0xcfa
c001b30e:	89 e8                	mov    eax,ebp
c001b310:	ee                   	out    dx,al
c001b311:	83 c4 0c             	add    esp,0xc
c001b314:	89 d8                	mov    eax,ebx
c001b316:	89 f9                	mov    ecx,edi
c001b318:	c1 e0 08             	shl    eax,0x8
c001b31b:	0f b6 d9             	movzx  ebx,cl
c001b31e:	83 e3 fc             	and    ebx,0xfffffffc
c001b321:	09 d8                	or     eax,ebx
c001b323:	5b                   	pop    ebx
c001b324:	0d 00 c0 ff ff       	or     eax,0xffffc000
c001b329:	5e                   	pop    esi
c001b32a:	5f                   	pop    edi
c001b32b:	5d                   	pop    ebp
c001b32c:	c3                   	ret    
c001b32d:	90                   	nop

c001b32e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001b32e:	57                   	push   edi
c001b32f:	56                   	push   esi
c001b330:	53                   	push   ebx
c001b331:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b335:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b339:	8b be 58 01 00 00    	mov    edi,DWORD PTR [esi+0x158]
c001b33f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001b343:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001b347:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b34b:	83 ff 01             	cmp    edi,0x1
c001b34e:	75 3f                	jne    c001b38f <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x61>
c001b350:	89 de                	mov    esi,ebx
c001b352:	0f b6 c0             	movzx  eax,al
c001b355:	81 e6 fc 00 00 00    	and    esi,0xfc
c001b35b:	c1 e0 10             	shl    eax,0x10
c001b35e:	0f b6 c9             	movzx  ecx,cl
c001b361:	09 f0                	or     eax,esi
c001b363:	c1 e1 08             	shl    ecx,0x8
c001b366:	0f b6 d2             	movzx  edx,dl
c001b369:	09 c8                	or     eax,ecx
c001b36b:	c1 e2 0b             	shl    edx,0xb
c001b36e:	09 d0                	or     eax,edx
c001b370:	ba f8 0c 00 00       	mov    edx,0xcf8
c001b375:	0d 00 00 00 80       	or     eax,0x80000000
c001b37a:	ef                   	out    dx,eax
c001b37b:	ba fc 0c 00 00       	mov    edx,0xcfc
c001b380:	ed                   	in     eax,dx
c001b381:	83 e3 02             	and    ebx,0x2
c001b384:	8d 0c dd 00 00 00 00 	lea    ecx,[ebx*8+0x0]
c001b38b:	d3 e8                	shr    eax,cl
c001b38d:	eb 44                	jmp    c001b3d3 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa5>
c001b38f:	83 ff 02             	cmp    edi,0x2
c001b392:	75 2d                	jne    c001b3c1 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x93>
c001b394:	83 ec 0c             	sub    esp,0xc
c001b397:	0f b6 c9             	movzx  ecx,cl
c001b39a:	0f b6 d2             	movzx  edx,dl
c001b39d:	0f b6 fb             	movzx  edi,bl
c001b3a0:	0f b6 c0             	movzx  eax,al
c001b3a3:	57                   	push   edi
c001b3a4:	51                   	push   ecx
c001b3a5:	52                   	push   edx
c001b3a6:	50                   	push   eax
c001b3a7:	56                   	push   esi
c001b3a8:	e8 0b ff ff ff       	call   c001b2b8 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b3ad:	89 c2                	mov    edx,eax
c001b3af:	ed                   	in     eax,dx
c001b3b0:	83 e3 02             	and    ebx,0x2
c001b3b3:	83 c4 20             	add    esp,0x20
c001b3b6:	8d 0c dd 00 00 00 00 	lea    ecx,[ebx*8+0x0]
c001b3bd:	d3 e8                	shr    eax,cl
c001b3bf:	eb 12                	jmp    c001b3d3 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa5>
c001b3c1:	83 ec 0c             	sub    esp,0xc
c001b3c4:	68 0b 31 02 c0       	push   0xc002310b
c001b3c9:	e8 5d 62 ff ff       	call   c001162b <KePanic(char const*)>
c001b3ce:	83 c4 10             	add    esp,0x10
c001b3d1:	31 c0                	xor    eax,eax
c001b3d3:	5b                   	pop    ebx
c001b3d4:	5e                   	pop    esi
c001b3d5:	5f                   	pop    edi
c001b3d6:	c3                   	ret    
c001b3d7:	90                   	nop

c001b3d8 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c001b3d8:	83 ec 18             	sub    esp,0x18
c001b3db:	6a 00                	push   0x0
c001b3dd:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b3e2:	50                   	push   eax
c001b3e3:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b3e8:	50                   	push   eax
c001b3e9:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b3ee:	50                   	push   eax
c001b3ef:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b3f3:	e8 36 ff ff ff       	call   c001b32e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b3f8:	83 c4 2c             	add    esp,0x2c
c001b3fb:	c3                   	ret    

c001b3fc <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c001b3fc:	83 ec 18             	sub    esp,0x18
c001b3ff:	6a 0e                	push   0xe
c001b401:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b406:	50                   	push   eax
c001b407:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b40c:	50                   	push   eax
c001b40d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b412:	50                   	push   eax
c001b413:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b417:	e8 12 ff ff ff       	call   c001b32e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b41c:	83 c4 2c             	add    esp,0x2c
c001b41f:	0f b6 c0             	movzx  eax,al
c001b422:	c3                   	ret    
c001b423:	90                   	nop

c001b424 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c001b424:	55                   	push   ebp
c001b425:	57                   	push   edi
c001b426:	56                   	push   esi
c001b427:	53                   	push   ebx
c001b428:	83 ec 18             	sub    esp,0x18
c001b42b:	0f b6 74 24 38       	movzx  esi,BYTE PTR [esp+0x38]
c001b430:	0f b6 6c 24 34       	movzx  ebp,BYTE PTR [esp+0x34]
c001b435:	0f b6 7c 24 30       	movzx  edi,BYTE PTR [esp+0x30]
c001b43a:	6a 0a                	push   0xa
c001b43c:	56                   	push   esi
c001b43d:	55                   	push   ebp
c001b43e:	57                   	push   edi
c001b43f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001b443:	e8 e6 fe ff ff       	call   c001b32e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b448:	83 c4 14             	add    esp,0x14
c001b44b:	89 c3                	mov    ebx,eax
c001b44d:	6a 0a                	push   0xa
c001b44f:	0f b6 db             	movzx  ebx,bl
c001b452:	56                   	push   esi
c001b453:	55                   	push   ebp
c001b454:	57                   	push   edi
c001b455:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001b459:	e8 d0 fe ff ff       	call   c001b32e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b45e:	83 c4 2c             	add    esp,0x2c
c001b461:	25 00 ff 00 00       	and    eax,0xff00
c001b466:	09 d8                	or     eax,ebx
c001b468:	5b                   	pop    ebx
c001b469:	5e                   	pop    esi
c001b46a:	5f                   	pop    edi
c001b46b:	5d                   	pop    ebp
c001b46c:	c3                   	ret    
c001b46d:	90                   	nop

c001b46e <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c001b46e:	83 ec 18             	sub    esp,0x18
c001b471:	6a 08                	push   0x8
c001b473:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b478:	50                   	push   eax
c001b479:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b47e:	50                   	push   eax
c001b47f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b484:	50                   	push   eax
c001b485:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b489:	e8 a0 fe ff ff       	call   c001b32e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b48e:	83 c4 2c             	add    esp,0x2c
c001b491:	0f b6 c4             	movzx  eax,ah
c001b494:	c3                   	ret    
c001b495:	90                   	nop

c001b496 <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c001b496:	83 ec 18             	sub    esp,0x18
c001b499:	6a 08                	push   0x8
c001b49b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b4a0:	50                   	push   eax
c001b4a1:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b4a6:	50                   	push   eax
c001b4a7:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b4ac:	50                   	push   eax
c001b4ad:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b4b1:	e8 78 fe ff ff       	call   c001b32e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b4b6:	83 c4 2c             	add    esp,0x2c
c001b4b9:	c3                   	ret    

c001b4ba <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c001b4ba:	83 ec 18             	sub    esp,0x18
c001b4bd:	6a 3c                	push   0x3c
c001b4bf:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b4c4:	50                   	push   eax
c001b4c5:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b4ca:	50                   	push   eax
c001b4cb:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b4d0:	50                   	push   eax
c001b4d1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b4d5:	e8 54 fe ff ff       	call   c001b32e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b4da:	83 c4 2c             	add    esp,0x2c
c001b4dd:	c3                   	ret    

c001b4de <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c001b4de:	83 ec 18             	sub    esp,0x18
c001b4e1:	6a 18                	push   0x18
c001b4e3:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b4e8:	50                   	push   eax
c001b4e9:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b4ee:	50                   	push   eax
c001b4ef:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001b4f4:	50                   	push   eax
c001b4f5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b4f9:	e8 30 fe ff ff       	call   c001b32e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b4fe:	83 c4 2c             	add    esp,0x2c
c001b501:	0f b6 c4             	movzx  eax,ah
c001b504:	c3                   	ret    
c001b505:	90                   	nop

c001b506 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001b506:	55                   	push   ebp
c001b507:	57                   	push   edi
c001b508:	56                   	push   esi
c001b509:	53                   	push   ebx
c001b50a:	83 ec 28             	sub    esp,0x28
c001b50d:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001b511:	0f b6 7c 24 48       	movzx  edi,BYTE PTR [esp+0x48]
c001b516:	0f b6 6c 24 44       	movzx  ebp,BYTE PTR [esp+0x44]
c001b51b:	0f b6 4c 24 4c       	movzx  ecx,BYTE PTR [esp+0x4c]
c001b520:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c001b527:	8d 43 12             	lea    eax,[ebx+0x12]
c001b52a:	83 c3 10             	add    ebx,0x10
c001b52d:	0f b6 c0             	movzx  eax,al
c001b530:	0f b6 db             	movzx  ebx,bl
c001b533:	50                   	push   eax
c001b534:	51                   	push   ecx
c001b535:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c001b539:	57                   	push   edi
c001b53a:	55                   	push   ebp
c001b53b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001b53f:	e8 ea fd ff ff       	call   c001b32e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b544:	83 c4 14             	add    esp,0x14
c001b547:	89 c6                	mov    esi,eax
c001b549:	53                   	push   ebx
c001b54a:	c1 e6 10             	shl    esi,0x10
c001b54d:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001b551:	51                   	push   ecx
c001b552:	57                   	push   edi
c001b553:	55                   	push   ebp
c001b554:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001b558:	e8 d1 fd ff ff       	call   c001b32e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b55d:	83 c4 3c             	add    esp,0x3c
c001b560:	0f b7 c0             	movzx  eax,ax
c001b563:	5b                   	pop    ebx
c001b564:	09 f0                	or     eax,esi
c001b566:	5e                   	pop    esi
c001b567:	5f                   	pop    edi
c001b568:	5d                   	pop    ebp
c001b569:	c3                   	ret    

c001b56a <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c001b56a:	55                   	push   ebp
c001b56b:	57                   	push   edi
c001b56c:	56                   	push   esi
c001b56d:	53                   	push   ebx
c001b56e:	83 ec 0c             	sub    esp,0xc
c001b571:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001b575:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001b579:	89 f5                	mov    ebp,esi
c001b57b:	8b 8f 58 01 00 00    	mov    ecx,DWORD PTR [edi+0x158]
c001b581:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001b585:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001b589:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001b58d:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001b591:	83 f9 01             	cmp    ecx,0x1
c001b594:	75 5d                	jne    c001b5f3 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x89>
c001b596:	0f b6 c8             	movzx  ecx,al
c001b599:	0f b6 d2             	movzx  edx,dl
c001b59c:	c1 e1 10             	shl    ecx,0x10
c001b59f:	c1 e2 0b             	shl    edx,0xb
c001b5a2:	89 f0                	mov    eax,esi
c001b5a4:	25 fc 00 00 00       	and    eax,0xfc
c001b5a9:	09 c1                	or     ecx,eax
c001b5ab:	89 e8                	mov    eax,ebp
c001b5ad:	0f b6 c0             	movzx  eax,al
c001b5b0:	c1 e0 08             	shl    eax,0x8
c001b5b3:	09 c1                	or     ecx,eax
c001b5b5:	09 d1                	or     ecx,edx
c001b5b7:	ba f8 0c 00 00       	mov    edx,0xcf8
c001b5bc:	81 c9 00 00 00 80    	or     ecx,0x80000000
c001b5c2:	89 c8                	mov    eax,ecx
c001b5c4:	ef                   	out    dx,eax
c001b5c5:	ba fc 0c 00 00       	mov    edx,0xcfc
c001b5ca:	ed                   	in     eax,dx
c001b5cb:	0f b7 db             	movzx  ebx,bx
c001b5ce:	83 e6 02             	and    esi,0x2
c001b5d1:	74 0a                	je     c001b5dd <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x73>
c001b5d3:	0f b7 d0             	movzx  edx,ax
c001b5d6:	c1 e3 10             	shl    ebx,0x10
c001b5d9:	09 d3                	or     ebx,edx
c001b5db:	eb 05                	jmp    c001b5e2 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x78>
c001b5dd:	66 31 c0             	xor    ax,ax
c001b5e0:	09 c3                	or     ebx,eax
c001b5e2:	ba f8 0c 00 00       	mov    edx,0xcf8
c001b5e7:	89 c8                	mov    eax,ecx
c001b5e9:	ef                   	out    dx,eax
c001b5ea:	ba fc 0c 00 00       	mov    edx,0xcfc
c001b5ef:	89 d8                	mov    eax,ebx
c001b5f1:	eb 41                	jmp    c001b634 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c001b5f3:	83 f9 02             	cmp    ecx,0x2
c001b5f6:	75 45                	jne    c001b63d <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xd3>
c001b5f8:	83 ec 0c             	sub    esp,0xc
c001b5fb:	0f b6 d2             	movzx  edx,dl
c001b5fe:	89 f1                	mov    ecx,esi
c001b600:	0f b6 c0             	movzx  eax,al
c001b603:	0f b6 f1             	movzx  esi,cl
c001b606:	89 e9                	mov    ecx,ebp
c001b608:	56                   	push   esi
c001b609:	0f b6 c9             	movzx  ecx,cl
c001b60c:	51                   	push   ecx
c001b60d:	52                   	push   edx
c001b60e:	50                   	push   eax
c001b60f:	57                   	push   edi
c001b610:	e8 a3 fc ff ff       	call   c001b2b8 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b615:	89 c2                	mov    edx,eax
c001b617:	ed                   	in     eax,dx
c001b618:	83 c4 20             	add    esp,0x20
c001b61b:	0f b7 db             	movzx  ebx,bx
c001b61e:	f6 c2 02             	test   dl,0x2
c001b621:	74 0c                	je     c001b62f <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc5>
c001b623:	0f b7 c8             	movzx  ecx,ax
c001b626:	89 d8                	mov    eax,ebx
c001b628:	c1 e0 10             	shl    eax,0x10
c001b62b:	09 c8                	or     eax,ecx
c001b62d:	eb 05                	jmp    c001b634 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c001b62f:	66 31 c0             	xor    ax,ax
c001b632:	09 d8                	or     eax,ebx
c001b634:	ef                   	out    dx,eax
c001b635:	83 c4 0c             	add    esp,0xc
c001b638:	5b                   	pop    ebx
c001b639:	5e                   	pop    esi
c001b63a:	5f                   	pop    edi
c001b63b:	5d                   	pop    ebp
c001b63c:	c3                   	ret    
c001b63d:	c7 44 24 20 0b 31 02 c0 	mov    DWORD PTR [esp+0x20],0xc002310b
c001b645:	83 c4 0c             	add    esp,0xc
c001b648:	5b                   	pop    ebx
c001b649:	5e                   	pop    esi
c001b64a:	5f                   	pop    edi
c001b64b:	5d                   	pop    ebp
c001b64c:	e9 da 5f ff ff       	jmp    c001162b <KePanic(char const*)>
c001b651:	90                   	nop

c001b652 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>:
c001b652:	55                   	push   ebp
c001b653:	57                   	push   edi
c001b654:	56                   	push   esi
c001b655:	53                   	push   ebx
c001b656:	81 ec 4c 01 00 00    	sub    esp,0x14c
c001b65c:	8b ac 24 84 01 00 00 	mov    ebp,DWORD PTR [esp+0x184]
c001b663:	80 3d ac d0 02 c0 00 	cmp    BYTE PTR ds:0xc002d0ac,0x0
c001b66a:	0f 85 bd 00 00 00    	jne    c001b72d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdb>
c001b670:	83 ec 0c             	sub    esp,0xc
c001b673:	68 14 01 00 00       	push   0x114
c001b678:	e8 39 c4 fe ff       	call   c0007ab6 <malloc>
c001b67d:	83 c4 0c             	add    esp,0xc
c001b680:	89 c3                	mov    ebx,eax
c001b682:	ff 35 f0 c6 02 c0    	push   DWORD PTR ds:0xc002c6f0
c001b688:	68 11 31 02 c0       	push   0xc0023111
c001b68d:	50                   	push   eax
c001b68e:	e8 c5 04 ff ff       	call   c000bb58 <File::File(char const*, Process*)>
c001b693:	83 c4 10             	add    esp,0x10
c001b696:	85 db                	test   ebx,ebx
c001b698:	0f 84 67 02 00 00    	je     c001b905 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b3>
c001b69e:	56                   	push   esi
c001b69f:	56                   	push   esi
c001b6a0:	6a 01                	push   0x1
c001b6a2:	53                   	push   ebx
c001b6a3:	e8 ce 04 ff ff       	call   c000bb76 <File::open(FileOpenMode)>
c001b6a8:	83 c4 10             	add    esp,0x10
c001b6ab:	85 c0                	test   eax,eax
c001b6ad:	0f 85 52 02 00 00    	jne    c001b905 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b3>
c001b6b3:	52                   	push   edx
c001b6b4:	8d 44 24 3f          	lea    eax,[esp+0x3f]
c001b6b8:	50                   	push   eax
c001b6b9:	8d 44 24 48          	lea    eax,[esp+0x48]
c001b6bd:	50                   	push   eax
c001b6be:	53                   	push   ebx
c001b6bf:	e8 b4 07 ff ff       	call   c000be78 <File::stat(unsigned long long*, bool*)>
c001b6c4:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001b6c8:	40                   	inc    eax
c001b6c9:	89 04 24             	mov    DWORD PTR [esp],eax
c001b6cc:	e8 e5 c3 fe ff       	call   c0007ab6 <malloc>
c001b6d1:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c001b6d5:	a3 a8 d0 02 c0       	mov    ds:0xc002d0a8,eax
c001b6da:	c6 04 10 00          	mov    BYTE PTR [eax+edx*1],0x0
c001b6de:	59                   	pop    ecx
c001b6df:	8b 13                	mov    edx,DWORD PTR [ebx]
c001b6e1:	8d 4c 24 48          	lea    ecx,[esp+0x48]
c001b6e5:	51                   	push   ecx
c001b6e6:	50                   	push   eax
c001b6e7:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c001b6eb:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c001b6ef:	53                   	push   ebx
c001b6f0:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001b6f3:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
c001b6f7:	83 c4 20             	add    esp,0x20
c001b6fa:	89 c8                	mov    eax,ecx
c001b6fc:	99                   	cdq    
c001b6fd:	3b 54 24 44          	cmp    edx,DWORD PTR [esp+0x44]
c001b701:	0f 85 fe 01 00 00    	jne    c001b905 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b3>
c001b707:	3b 4c 24 40          	cmp    ecx,DWORD PTR [esp+0x40]
c001b70b:	0f 85 f4 01 00 00    	jne    c001b905 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b3>
c001b711:	83 ec 0c             	sub    esp,0xc
c001b714:	53                   	push   ebx
c001b715:	e8 ba 04 ff ff       	call   c000bbd4 <File::close()>
c001b71a:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001b71e:	c6 05 ac d0 02 c0 01 	mov    BYTE PTR ds:0xc002d0ac,0x1
c001b725:	a3 a4 d0 02 c0       	mov    ds:0xc002d0a4,eax
c001b72a:	83 c4 10             	add    esp,0x10
c001b72d:	a1 a4 d0 02 c0       	mov    eax,ds:0xc002d0a4
c001b732:	8b 1d a8 d0 02 c0    	mov    ebx,DWORD PTR ds:0xc002d0a8
c001b738:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001b73c:	31 f6                	xor    esi,esi
c001b73e:	66 8b 84 24 62 01 00 00 	mov    ax,WORD PTR [esp+0x162]
c001b746:	66 c7 44 24 0c 00 00 	mov    WORD PTR [esp+0xc],0x0
c001b74d:	66 89 44 24 14       	mov    WORD PTR [esp+0x14],ax
c001b752:	31 c9                	xor    ecx,ecx
c001b754:	66 8b 84 24 82 01 00 00 	mov    ax,WORD PTR [esp+0x182]
c001b75c:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c001b761:	0f b6 84 24 60 01 00 00 	movzx  eax,BYTE PTR [esp+0x160]
c001b769:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001b76d:	0f b6 84 24 61 01 00 00 	movzx  eax,BYTE PTR [esp+0x161]
c001b775:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001b779:	39 74 24 04          	cmp    DWORD PTR [esp+0x4],esi
c001b77d:	0f 8e 82 01 00 00    	jle    c001b905 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b3>
c001b783:	8a 04 33             	mov    al,BYTE PTR [ebx+esi*1]
c001b786:	d4 40                	aam    0x40
c001b788:	d5 39                	aad    0x39
c001b78a:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c001b78e:	8a 44 33 01          	mov    al,BYTE PTR [ebx+esi*1+0x1]
c001b792:	d4 40                	aam    0x40
c001b794:	d5 39                	aad    0x39
c001b796:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001b79a:	8a 44 33 03          	mov    al,BYTE PTR [ebx+esi*1+0x3]
c001b79e:	d4 40                	aam    0x40
c001b7a0:	d5 39                	aad    0x39
c001b7a2:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c001b7a6:	8a 44 33 04          	mov    al,BYTE PTR [ebx+esi*1+0x4]
c001b7aa:	d4 40                	aam    0x40
c001b7ac:	d5 39                	aad    0x39
c001b7ae:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001b7b2:	8a 44 33 06          	mov    al,BYTE PTR [ebx+esi*1+0x6]
c001b7b6:	88 44 24 0a          	mov    BYTE PTR [esp+0xa],al
c001b7ba:	3c 56                	cmp    al,0x56
c001b7bc:	74 43                	je     c001b801 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1af>
c001b7be:	d4 40                	aam    0x40
c001b7c0:	d5 39                	aad    0x39
c001b7c2:	8d 48 d0             	lea    ecx,[eax-0x30]
c001b7c5:	8a 44 33 07          	mov    al,BYTE PTR [ebx+esi*1+0x7]
c001b7c9:	0f b6 c9             	movzx  ecx,cl
c001b7cc:	c1 e1 04             	shl    ecx,0x4
c001b7cf:	d4 40                	aam    0x40
c001b7d1:	d5 39                	aad    0x39
c001b7d3:	83 e8 30             	sub    eax,0x30
c001b7d6:	0f b6 c0             	movzx  eax,al
c001b7d9:	09 c1                	or     ecx,eax
c001b7db:	8a 44 33 08          	mov    al,BYTE PTR [ebx+esi*1+0x8]
c001b7df:	c1 e1 04             	shl    ecx,0x4
c001b7e2:	d4 40                	aam    0x40
c001b7e4:	d5 39                	aad    0x39
c001b7e6:	83 e8 30             	sub    eax,0x30
c001b7e9:	0f b6 c0             	movzx  eax,al
c001b7ec:	09 c1                	or     ecx,eax
c001b7ee:	8a 44 33 09          	mov    al,BYTE PTR [ebx+esi*1+0x9]
c001b7f2:	c1 e1 04             	shl    ecx,0x4
c001b7f5:	d4 40                	aam    0x40
c001b7f7:	d5 39                	aad    0x39
c001b7f9:	83 e8 30             	sub    eax,0x30
c001b7fc:	0f b6 c0             	movzx  eax,al
c001b7ff:	09 c1                	or     ecx,eax
c001b801:	8a 44 33 0b          	mov    al,BYTE PTR [ebx+esi*1+0xb]
c001b805:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c001b809:	3c 58                	cmp    al,0x58
c001b80b:	74 47                	je     c001b854 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x202>
c001b80d:	d4 40                	aam    0x40
c001b80f:	d5 39                	aad    0x39
c001b811:	8d 50 d0             	lea    edx,[eax-0x30]
c001b814:	8a 44 33 0c          	mov    al,BYTE PTR [ebx+esi*1+0xc]
c001b818:	0f b6 d2             	movzx  edx,dl
c001b81b:	c1 e2 04             	shl    edx,0x4
c001b81e:	d4 40                	aam    0x40
c001b820:	d5 39                	aad    0x39
c001b822:	83 e8 30             	sub    eax,0x30
c001b825:	0f b6 c0             	movzx  eax,al
c001b828:	09 c2                	or     edx,eax
c001b82a:	8a 44 33 0d          	mov    al,BYTE PTR [ebx+esi*1+0xd]
c001b82e:	c1 e2 04             	shl    edx,0x4
c001b831:	d4 40                	aam    0x40
c001b833:	d5 39                	aad    0x39
c001b835:	83 e8 30             	sub    eax,0x30
c001b838:	0f b6 c0             	movzx  eax,al
c001b83b:	09 c2                	or     edx,eax
c001b83d:	8a 44 33 0e          	mov    al,BYTE PTR [ebx+esi*1+0xe]
c001b841:	c1 e2 04             	shl    edx,0x4
c001b844:	d4 40                	aam    0x40
c001b846:	d5 39                	aad    0x39
c001b848:	83 e8 30             	sub    eax,0x30
c001b84b:	0f b6 c0             	movzx  eax,al
c001b84e:	09 c2                	or     edx,eax
c001b850:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001b854:	83 c6 10             	add    esi,0x10
c001b857:	8d 7c 24 40          	lea    edi,[esp+0x40]
c001b85b:	0f be 14 33          	movsx  edx,BYTE PTR [ebx+esi*1]
c001b85f:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001b863:	83 fa 0a             	cmp    edx,0xa
c001b866:	74 0b                	je     c001b873 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x221>
c001b868:	47                   	inc    edi
c001b869:	39 74 24 04          	cmp    DWORD PTR [esp+0x4],esi
c001b86d:	75 19                	jne    c001b888 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x236>
c001b86f:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c001b873:	31 c0                	xor    eax,eax
c001b875:	83 7c 24 10 0a       	cmp    DWORD PTR [esp+0x10],0xa
c001b87a:	0f 94 c0             	sete   al
c001b87d:	01 c6                	add    esi,eax
c001b87f:	80 7c 24 0a 56       	cmp    BYTE PTR [esp+0xa],0x56
c001b884:	75 0b                	jne    c001b891 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x23f>
c001b886:	eb 14                	jmp    c001b89c <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x24a>
c001b888:	46                   	inc    esi
c001b889:	88 57 ff             	mov    BYTE PTR [edi-0x1],dl
c001b88c:	c6 07 00             	mov    BYTE PTR [edi],0x0
c001b88f:	eb ca                	jmp    c001b85b <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x209>
c001b891:	66 3b 4c 24 14       	cmp    cx,WORD PTR [esp+0x14]
c001b896:	0f 85 dd fe ff ff    	jne    c001b779 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x127>
c001b89c:	80 7c 24 0b 58       	cmp    BYTE PTR [esp+0xb],0x58
c001b8a1:	74 10                	je     c001b8b3 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x261>
c001b8a3:	66 8b 7c 24 16       	mov    di,WORD PTR [esp+0x16]
c001b8a8:	66 39 7c 24 0c       	cmp    WORD PTR [esp+0xc],di
c001b8ad:	0f 85 c6 fe ff ff    	jne    c001b779 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x127>
c001b8b3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b8b7:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001b8bb:	83 e8 30             	sub    eax,0x30
c001b8be:	83 ef 30             	sub    edi,0x30
c001b8c1:	c1 e0 04             	shl    eax,0x4
c001b8c4:	09 f8                	or     eax,edi
c001b8c6:	0f b6 c0             	movzx  eax,al
c001b8c9:	39 44 24 28          	cmp    DWORD PTR [esp+0x28],eax
c001b8cd:	0f 85 a6 fe ff ff    	jne    c001b779 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x127>
c001b8d3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b8d7:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c001b8db:	83 e8 30             	sub    eax,0x30
c001b8de:	83 ef 30             	sub    edi,0x30
c001b8e1:	c1 e0 04             	shl    eax,0x4
c001b8e4:	09 f8                	or     eax,edi
c001b8e6:	0f b6 c0             	movzx  eax,al
c001b8e9:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c001b8ed:	0f 85 86 fe ff ff    	jne    c001b779 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x127>
c001b8f3:	50                   	push   eax
c001b8f4:	50                   	push   eax
c001b8f5:	8d 44 24 48          	lea    eax,[esp+0x48]
c001b8f9:	50                   	push   eax
c001b8fa:	55                   	push   ebp
c001b8fb:	e8 40 4d fe ff       	call   c0000640 <strcpy>
c001b900:	83 c4 10             	add    esp,0x10
c001b903:	eb 06                	jmp    c001b90b <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b9>
c001b905:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c001b909:	31 ed                	xor    ebp,ebp
c001b90b:	81 c4 4c 01 00 00    	add    esp,0x14c
c001b911:	89 e8                	mov    eax,ebp
c001b913:	5b                   	pop    ebx
c001b914:	5e                   	pop    esi
c001b915:	5f                   	pop    edi
c001b916:	5d                   	pop    ebp
c001b917:	c3                   	ret    

c001b918 <PCI::checkBus(unsigned char)>:
c001b918:	56                   	push   esi
c001b919:	53                   	push   ebx
c001b91a:	31 db                	xor    ebx,ebx
c001b91c:	51                   	push   ecx
c001b91d:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001b922:	52                   	push   edx
c001b923:	53                   	push   ebx
c001b924:	43                   	inc    ebx
c001b925:	56                   	push   esi
c001b926:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b92a:	e8 03 03 00 00       	call   c001bc32 <PCI::checkDevice(unsigned char, unsigned char)>
c001b92f:	83 c4 10             	add    esp,0x10
c001b932:	83 fb 20             	cmp    ebx,0x20
c001b935:	75 eb                	jne    c001b922 <PCI::checkBus(unsigned char)+0xa>
c001b937:	58                   	pop    eax
c001b938:	5b                   	pop    ebx
c001b939:	5e                   	pop    esi
c001b93a:	c3                   	ret    
c001b93b:	90                   	nop

c001b93c <PCI::foundDevice(PCIDeviceInfo)>:
c001b93c:	55                   	push   ebp
c001b93d:	57                   	push   edi
c001b93e:	56                   	push   esi
c001b93f:	53                   	push   ebx
c001b940:	83 ec 1c             	sub    esp,0x1c
c001b943:	0f b7 44 24 36       	movzx  eax,WORD PTR [esp+0x36]
c001b948:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001b94c:	3d ff ff 00 00       	cmp    eax,0xffff
c001b951:	0f 84 57 01 00 00    	je     c001baae <PCI::foundDevice(PCIDeviceInfo)+0x172>
c001b957:	0f b7 44 24 34       	movzx  eax,WORD PTR [esp+0x34]
c001b95c:	66 3d 06 04          	cmp    ax,0x406
c001b960:	75 2c                	jne    c001b98e <PCI::foundDevice(PCIDeviceInfo)+0x52>
c001b962:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c001b967:	50                   	push   eax
c001b968:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c001b96d:	50                   	push   eax
c001b96e:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c001b973:	50                   	push   eax
c001b974:	53                   	push   ebx
c001b975:	e8 64 fb ff ff       	call   c001b4de <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c001b97a:	89 5c 24 40          	mov    DWORD PTR [esp+0x40],ebx
c001b97e:	0f b6 c0             	movzx  eax,al
c001b981:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001b985:	83 c4 2c             	add    esp,0x2c
c001b988:	5b                   	pop    ebx
c001b989:	5e                   	pop    esi
c001b98a:	5f                   	pop    edi
c001b98b:	5d                   	pop    ebp
c001b98c:	eb 8a                	jmp    c001b918 <PCI::checkBus(unsigned char)>
c001b98e:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c001b992:	8b 93 cc 00 00 00    	mov    edx,DWORD PTR [ebx+0xcc]
c001b998:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001b99c:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001b9a0:	0f b6 7c 24 54       	movzx  edi,BYTE PTR [esp+0x54]
c001b9a5:	85 d2                	test   edx,edx
c001b9a7:	74 36                	je     c001b9df <PCI::foundDevice(PCIDeviceInfo)+0xa3>
c001b9a9:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c001b9ac:	85 c9                	test   ecx,ecx
c001b9ae:	74 2b                	je     c001b9db <PCI::foundDevice(PCIDeviceInfo)+0x9f>
c001b9b0:	8b b1 18 01 00 00    	mov    esi,DWORD PTR [ecx+0x118]
c001b9b6:	31 ee                	xor    esi,ebp
c001b9b8:	81 e6 ff 00 ff ff    	and    esi,0xffff00ff
c001b9be:	75 1b                	jne    c001b9db <PCI::foundDevice(PCIDeviceInfo)+0x9f>
c001b9c0:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c001b9c4:	39 b1 20 01 00 00    	cmp    DWORD PTR [ecx+0x120],esi
c001b9ca:	75 0f                	jne    c001b9db <PCI::foundDevice(PCIDeviceInfo)+0x9f>
c001b9cc:	0f b6 89 38 01 00 00 	movzx  ecx,BYTE PTR [ecx+0x138]
c001b9d3:	39 f9                	cmp    ecx,edi
c001b9d5:	0f 84 d3 00 00 00    	je     c001baae <PCI::foundDevice(PCIDeviceInfo)+0x172>
c001b9db:	8b 12                	mov    edx,DWORD PTR [edx]
c001b9dd:	eb c6                	jmp    c001b9a5 <PCI::foundDevice(PCIDeviceInfo)+0x69>
c001b9df:	3d 01 06 00 00       	cmp    eax,0x601
c001b9e4:	75 19                	jne    c001b9ff <PCI::foundDevice(PCIDeviceInfo)+0xc3>
c001b9e6:	83 ec 0c             	sub    esp,0xc
c001b9e9:	68 64 01 00 00       	push   0x164
c001b9ee:	e8 c3 c0 fe ff       	call   c0007ab6 <malloc>
c001b9f3:	89 c5                	mov    ebp,eax
c001b9f5:	89 04 24             	mov    DWORD PTR [esp],eax
c001b9f8:	e8 a1 0e 00 00       	call   c001c89e <SATABus::SATABus()>
c001b9fd:	eb 1e                	jmp    c001ba1d <PCI::foundDevice(PCIDeviceInfo)+0xe1>
c001b9ff:	3d 01 01 00 00       	cmp    eax,0x101
c001ba04:	75 62                	jne    c001ba68 <PCI::foundDevice(PCIDeviceInfo)+0x12c>
c001ba06:	83 ec 0c             	sub    esp,0xc
c001ba09:	68 70 02 00 00       	push   0x270
c001ba0e:	e8 a3 c0 fe ff       	call   c0007ab6 <malloc>
c001ba13:	89 c5                	mov    ebp,eax
c001ba15:	89 04 24             	mov    DWORD PTR [esp],eax
c001ba18:	e8 e5 02 00 00       	call   c001bd02 <IDE::IDE()>
c001ba1d:	5f                   	pop    edi
c001ba1e:	58                   	pop    eax
c001ba1f:	55                   	push   ebp
c001ba20:	53                   	push   ebx
c001ba21:	e8 ac 0f ff ff       	call   c000c9d2 <Device::addChild(Device*)>
c001ba26:	83 ec 1c             	sub    esp,0x1c
c001ba29:	b9 09 00 00 00       	mov    ecx,0x9
c001ba2e:	fc                   	cld    
c001ba2f:	89 e7                	mov    edi,esp
c001ba31:	8d 74 24 60          	lea    esi,[esp+0x60]
c001ba35:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001ba37:	55                   	push   ebp
c001ba38:	e8 db 0e ff ff       	call   c000c918 <Device::preOpenPCI(PCIDeviceInfo)>
c001ba3d:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001ba40:	89 6c 24 60          	mov    DWORD PTR [esp+0x60],ebp
c001ba44:	c7 44 24 6c 00 00 00 00 	mov    DWORD PTR [esp+0x6c],0x0
c001ba4c:	c7 44 24 68 00 00 00 00 	mov    DWORD PTR [esp+0x68],0x0
c001ba54:	c7 44 24 64 00 00 00 00 	mov    DWORD PTR [esp+0x64],0x0
c001ba5c:	8b 42 08             	mov    eax,DWORD PTR [edx+0x8]
c001ba5f:	83 c4 4c             	add    esp,0x4c
c001ba62:	5b                   	pop    ebx
c001ba63:	5e                   	pop    esi
c001ba64:	5f                   	pop    edi
c001ba65:	5d                   	pop    ebp
c001ba66:	ff e0                	jmp    eax
c001ba68:	83 ec 0c             	sub    esp,0xc
c001ba6b:	68 58 01 00 00       	push   0x158
c001ba70:	e8 41 c0 fe ff       	call   c0007ab6 <malloc>
c001ba75:	89 c5                	mov    ebp,eax
c001ba77:	58                   	pop    eax
c001ba78:	5a                   	pop    edx
c001ba79:	68 2a 31 02 c0       	push   0xc002312a
c001ba7e:	55                   	push   ebp
c001ba7f:	e8 ec 11 ff ff       	call   c000cc70 <DriverlessDevice::DriverlessDevice(char const*)>
c001ba84:	59                   	pop    ecx
c001ba85:	5e                   	pop    esi
c001ba86:	55                   	push   ebp
c001ba87:	53                   	push   ebx
c001ba88:	e8 45 0f ff ff       	call   c000c9d2 <Device::addChild(Device*)>
c001ba8d:	83 c4 10             	add    esp,0x10
c001ba90:	b9 09 00 00 00       	mov    ecx,0x9
c001ba95:	fc                   	cld    
c001ba96:	8d 7c 24 34          	lea    edi,[esp+0x34]
c001ba9a:	89 fe                	mov    esi,edi
c001ba9c:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001ba9e:	89 6c 24 30          	mov    DWORD PTR [esp+0x30],ebp
c001baa2:	83 c4 1c             	add    esp,0x1c
c001baa5:	5b                   	pop    ebx
c001baa6:	5e                   	pop    esi
c001baa7:	5f                   	pop    edi
c001baa8:	5d                   	pop    ebp
c001baa9:	e9 6a 0e ff ff       	jmp    c000c918 <Device::preOpenPCI(PCIDeviceInfo)>
c001baae:	83 c4 1c             	add    esp,0x1c
c001bab1:	5b                   	pop    ebx
c001bab2:	5e                   	pop    esi
c001bab3:	5f                   	pop    edi
c001bab4:	5d                   	pop    ebp
c001bab5:	c3                   	ret    

c001bab6 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c001bab6:	55                   	push   ebp
c001bab7:	57                   	push   edi
c001bab8:	56                   	push   esi
c001bab9:	53                   	push   ebx
c001baba:	83 ec 68             	sub    esp,0x68
c001babd:	8b 6c 24 7c          	mov    ebp,DWORD PTR [esp+0x7c]
c001bac1:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001bac8:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001bacc:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001bad3:	0f b6 74 24 20       	movzx  esi,BYTE PTR [esp+0x20]
c001bad8:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001badc:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001bae3:	0f b6 5c 24 24       	movzx  ebx,BYTE PTR [esp+0x24]
c001bae8:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001baec:	0f b6 7c 24 28       	movzx  edi,BYTE PTR [esp+0x28]
c001baf1:	6a 0c                	push   0xc
c001baf3:	57                   	push   edi
c001baf4:	53                   	push   ebx
c001baf5:	56                   	push   esi
c001baf6:	55                   	push   ebp
c001baf7:	e8 32 f8 ff ff       	call   c001b32e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001bafc:	83 c4 20             	add    esp,0x20
c001baff:	57                   	push   edi
c001bb00:	53                   	push   ebx
c001bb01:	56                   	push   esi
c001bb02:	55                   	push   ebp
c001bb03:	e8 1c f9 ff ff       	call   c001b424 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c001bb08:	66 89 44 24 1c       	mov    WORD PTR [esp+0x1c],ax
c001bb0d:	57                   	push   edi
c001bb0e:	53                   	push   ebx
c001bb0f:	56                   	push   esi
c001bb10:	55                   	push   ebp
c001bb11:	e8 a4 f9 ff ff       	call   c001b4ba <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c001bb16:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c001bb1a:	83 c4 14             	add    esp,0x14
c001bb1d:	6a 3c                	push   0x3c
c001bb1f:	57                   	push   edi
c001bb20:	53                   	push   ebx
c001bb21:	56                   	push   esi
c001bb22:	55                   	push   ebp
c001bb23:	e8 06 f8 ff ff       	call   c001b32e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001bb28:	0f b6 c4             	movzx  eax,ah
c001bb2b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001bb2f:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c001bb33:	88 44 24 6d          	mov    BYTE PTR [esp+0x6d],al
c001bb37:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c001bb3c:	8b 90 68 01 00 00    	mov    edx,DWORD PTR [eax+0x168]
c001bb42:	8b 82 5c 11 00 00    	mov    eax,DWORD PTR [edx+0x115c]
c001bb48:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001bb4c:	83 c4 20             	add    esp,0x20
c001bb4f:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c001bb54:	74 30                	je     c001bb86 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c001bb56:	31 c0                	xor    eax,eax
c001bb58:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c001bb5c:	7e 28                	jle    c001bb86 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c001bb5e:	0f b7 8c c2 5c 01 00 00 	movzx  ecx,WORD PTR [edx+eax*8+0x15c]
c001bb66:	39 cb                	cmp    ebx,ecx
c001bb68:	75 19                	jne    c001bb83 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c001bb6a:	0f b6 8c c2 5e 01 00 00 	movzx  ecx,BYTE PTR [edx+eax*8+0x15e]
c001bb72:	3b 4c 24 10          	cmp    ecx,DWORD PTR [esp+0x10]
c001bb76:	75 0b                	jne    c001bb83 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c001bb78:	8a 8c c2 5f 01 00 00 	mov    cl,BYTE PTR [edx+eax*8+0x15f]
c001bb7f:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c001bb83:	40                   	inc    eax
c001bb84:	eb d2                	jmp    c001bb58 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xa2>
c001bb86:	31 d2                	xor    edx,edx
c001bb88:	83 ec 0c             	sub    esp,0xc
c001bb8b:	57                   	push   edi
c001bb8c:	53                   	push   ebx
c001bb8d:	56                   	push   esi
c001bb8e:	52                   	push   edx
c001bb8f:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c001bb93:	55                   	push   ebp
c001bb94:	e8 6d f9 ff ff       	call   c001b506 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c001bb99:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001bb9d:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c001bba1:	42                   	inc    edx
c001bba2:	83 c4 20             	add    esp,0x20
c001bba5:	83 fa 06             	cmp    edx,0x6
c001bba8:	75 de                	jne    c001bb88 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd2>
c001bbaa:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001bbae:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001bbb2:	c1 e2 08             	shl    edx,0x8
c001bbb5:	83 ec 0c             	sub    esp,0xc
c001bbb8:	0f b6 c4             	movzx  eax,ah
c001bbbb:	09 d0                	or     eax,edx
c001bbbd:	66 89 44 24 38       	mov    WORD PTR [esp+0x38],ax
c001bbc2:	6a 02                	push   0x2
c001bbc4:	57                   	push   edi
c001bbc5:	53                   	push   ebx
c001bbc6:	56                   	push   esi
c001bbc7:	55                   	push   ebp
c001bbc8:	e8 61 f7 ff ff       	call   c001b32e <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001bbcd:	66 89 44 24 6e       	mov    WORD PTR [esp+0x6e],ax
c001bbd2:	83 c4 20             	add    esp,0x20
c001bbd5:	57                   	push   edi
c001bbd6:	53                   	push   ebx
c001bbd7:	56                   	push   esi
c001bbd8:	55                   	push   ebp
c001bbd9:	e8 90 f8 ff ff       	call   c001b46e <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c001bbde:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c001bbe2:	57                   	push   edi
c001bbe3:	53                   	push   ebx
c001bbe4:	56                   	push   esi
c001bbe5:	55                   	push   ebp
c001bbe6:	e8 ed f7 ff ff       	call   c001b3d8 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001bbeb:	b9 09 00 00 00       	mov    ecx,0x9
c001bbf0:	66 89 44 24 4e       	mov    WORD PTR [esp+0x4e],ax
c001bbf5:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c001bbf9:	88 44 24 6c          	mov    BYTE PTR [esp+0x6c],al
c001bbfd:	8a 44 24 34          	mov    al,BYTE PTR [esp+0x34]
c001bc01:	88 44 24 50          	mov    BYTE PTR [esp+0x50],al
c001bc05:	8a 44 24 38          	mov    al,BYTE PTR [esp+0x38]
c001bc09:	88 44 24 51          	mov    BYTE PTR [esp+0x51],al
c001bc0d:	8a 44 24 3c          	mov    al,BYTE PTR [esp+0x3c]
c001bc11:	88 44 24 52          	mov    BYTE PTR [esp+0x52],al
c001bc15:	83 ec 0c             	sub    esp,0xc
c001bc18:	fc                   	cld    
c001bc19:	89 e7                	mov    edi,esp
c001bc1b:	8d 74 24 58          	lea    esi,[esp+0x58]
c001bc1f:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001bc21:	55                   	push   ebp
c001bc22:	e8 15 fd ff ff       	call   c001b93c <PCI::foundDevice(PCIDeviceInfo)>
c001bc27:	81 c4 8c 00 00 00    	add    esp,0x8c
c001bc2d:	5b                   	pop    ebx
c001bc2e:	5e                   	pop    esi
c001bc2f:	5f                   	pop    edi
c001bc30:	5d                   	pop    ebp
c001bc31:	c3                   	ret    

c001bc32 <PCI::checkDevice(unsigned char, unsigned char)>:
c001bc32:	55                   	push   ebp
c001bc33:	57                   	push   edi
c001bc34:	56                   	push   esi
c001bc35:	53                   	push   ebx
c001bc36:	83 ec 0c             	sub    esp,0xc
c001bc39:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c001bc3d:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c001bc42:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c001bc47:	6a 00                	push   0x0
c001bc49:	56                   	push   esi
c001bc4a:	57                   	push   edi
c001bc4b:	55                   	push   ebp
c001bc4c:	e8 87 f7 ff ff       	call   c001b3d8 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001bc51:	6a 00                	push   0x0
c001bc53:	56                   	push   esi
c001bc54:	57                   	push   edi
c001bc55:	55                   	push   ebp
c001bc56:	e8 5b fe ff ff       	call   c001bab6 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001bc5b:	83 c4 20             	add    esp,0x20
c001bc5e:	6a 00                	push   0x0
c001bc60:	56                   	push   esi
c001bc61:	57                   	push   edi
c001bc62:	55                   	push   ebp
c001bc63:	e8 94 f7 ff ff       	call   c001b3fc <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001bc68:	83 c4 10             	add    esp,0x10
c001bc6b:	a8 80                	test   al,0x80
c001bc6d:	74 2d                	je     c001bc9c <PCI::checkDevice(unsigned char, unsigned char)+0x6a>
c001bc6f:	bb 01 00 00 00       	mov    ebx,0x1
c001bc74:	53                   	push   ebx
c001bc75:	56                   	push   esi
c001bc76:	57                   	push   edi
c001bc77:	55                   	push   ebp
c001bc78:	e8 5b f7 ff ff       	call   c001b3d8 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001bc7d:	83 c4 10             	add    esp,0x10
c001bc80:	0f b7 c0             	movzx  eax,ax
c001bc83:	3d ff ff 00 00       	cmp    eax,0xffff
c001bc88:	74 0c                	je     c001bc96 <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c001bc8a:	53                   	push   ebx
c001bc8b:	56                   	push   esi
c001bc8c:	57                   	push   edi
c001bc8d:	55                   	push   ebp
c001bc8e:	e8 23 fe ff ff       	call   c001bab6 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001bc93:	83 c4 10             	add    esp,0x10
c001bc96:	43                   	inc    ebx
c001bc97:	83 fb 08             	cmp    ebx,0x8
c001bc9a:	75 d8                	jne    c001bc74 <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c001bc9c:	83 c4 0c             	add    esp,0xc
c001bc9f:	5b                   	pop    ebx
c001bca0:	5e                   	pop    esi
c001bca1:	5f                   	pop    edi
c001bca2:	5d                   	pop    ebp
c001bca3:	c3                   	ret    

c001bca4 <PCI::detect()>:
c001bca4:	56                   	push   esi
c001bca5:	53                   	push   ebx
c001bca6:	53                   	push   ebx
c001bca7:	31 db                	xor    ebx,ebx
c001bca9:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001bcad:	6a 00                	push   0x0
c001bcaf:	6a 00                	push   0x0
c001bcb1:	6a 00                	push   0x0
c001bcb3:	56                   	push   esi
c001bcb4:	e8 43 f7 ff ff       	call   c001b3fc <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001bcb9:	83 c4 10             	add    esp,0x10
c001bcbc:	a8 80                	test   al,0x80
c001bcbe:	75 21                	jne    c001bce1 <PCI::detect()+0x3d>
c001bcc0:	51                   	push   ecx
c001bcc1:	51                   	push   ecx
c001bcc2:	6a 00                	push   0x0
c001bcc4:	56                   	push   esi
c001bcc5:	e8 4e fc ff ff       	call   c001b918 <PCI::checkBus(unsigned char)>
c001bcca:	83 c4 10             	add    esp,0x10
c001bccd:	eb 2a                	jmp    c001bcf9 <PCI::detect()+0x55>
c001bccf:	52                   	push   edx
c001bcd0:	52                   	push   edx
c001bcd1:	53                   	push   ebx
c001bcd2:	43                   	inc    ebx
c001bcd3:	56                   	push   esi
c001bcd4:	e8 3f fc ff ff       	call   c001b918 <PCI::checkBus(unsigned char)>
c001bcd9:	83 c4 10             	add    esp,0x10
c001bcdc:	83 fb 08             	cmp    ebx,0x8
c001bcdf:	74 18                	je     c001bcf9 <PCI::detect()+0x55>
c001bce1:	53                   	push   ebx
c001bce2:	6a 00                	push   0x0
c001bce4:	6a 00                	push   0x0
c001bce6:	56                   	push   esi
c001bce7:	e8 ec f6 ff ff       	call   c001b3d8 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001bcec:	83 c4 10             	add    esp,0x10
c001bcef:	0f b7 c0             	movzx  eax,ax
c001bcf2:	3d ff ff 00 00       	cmp    eax,0xffff
c001bcf7:	74 d6                	je     c001bccf <PCI::detect()+0x2b>
c001bcf9:	58                   	pop    eax
c001bcfa:	5b                   	pop    ebx
c001bcfb:	5e                   	pop    esi
c001bcfc:	c3                   	ret    
c001bcfd:	90                   	nop

c001bcfe <IDE::close(int, int, void*)>:
c001bcfe:	83 c8 ff             	or     eax,0xffffffff
c001bd01:	c3                   	ret    

c001bd02 <IDE::IDE()>:
c001bd02:	83 ec 0c             	sub    esp,0xc
c001bd05:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bd09:	83 ec 08             	sub    esp,0x8
c001bd0c:	68 70 31 02 c0       	push   0xc0023170
c001bd11:	50                   	push   eax
c001bd12:	e8 fd 0f ff ff       	call   c000cd14 <HardDiskController::HardDiskController(char const*)>
c001bd17:	83 c4 10             	add    esp,0x10
c001bd1a:	ba 00 32 02 c0       	mov    edx,0xc0023200
c001bd1f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bd23:	89 10                	mov    DWORD PTR [eax],edx
c001bd25:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bd29:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c001bd30:	90                   	nop
c001bd31:	83 c4 0c             	add    esp,0xc
c001bd34:	c3                   	ret    
c001bd35:	90                   	nop

c001bd36 <IDE::prepareInterrupt(unsigned char)>:
c001bd36:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001bd3b:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001bd3f:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c001bd47:	c3                   	ret    

c001bd48 <selectDrive(unsigned char, unsigned char)>:
c001bd48:	c3                   	ret    
c001bd49:	90                   	nop

c001bd4a <IDE::getBase(unsigned char)>:
c001bd4a:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c001bd4f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bd53:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c001bd5b:	c3                   	ret    

c001bd5c <IDE::write(unsigned char, unsigned char, unsigned char)>:
c001bd5c:	55                   	push   ebp
c001bd5d:	57                   	push   edi
c001bd5e:	56                   	push   esi
c001bd5f:	53                   	push   ebx
c001bd60:	83 ec 1c             	sub    esp,0x1c
c001bd63:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001bd67:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001bd6b:	8d 4b f8             	lea    ecx,[ebx-0x8]
c001bd6e:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001bd72:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001bd76:	80 f9 03             	cmp    cl,0x3
c001bd79:	77 4f                	ja     c001bdca <IDE::write(unsigned char, unsigned char, unsigned char)+0x6e>
c001bd7b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001bd7f:	0f b6 fa             	movzx  edi,dl
c001bd82:	0f b6 db             	movzx  ebx,bl
c001bd85:	8d 6f 2a             	lea    ebp,[edi+0x2a]
c001bd88:	0f b6 54 ee 10       	movzx  edx,BYTE PTR [esi+ebp*8+0x10]
c001bd8d:	80 ca 80             	or     dl,0x80
c001bd90:	52                   	push   edx
c001bd91:	6a 0c                	push   0xc
c001bd93:	57                   	push   edi
c001bd94:	56                   	push   esi
c001bd95:	e8 c2 ff ff ff       	call   c001bd5c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bd9a:	66 8b 54 ee 0a       	mov    dx,WORD PTR [esi+ebp*8+0xa]
c001bd9f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001bda3:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c001bda7:	ee                   	out    dx,al
c001bda8:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001bdad:	89 7c 24 44          	mov    DWORD PTR [esp+0x44],edi
c001bdb1:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c001bdb5:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001bdb9:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001bdc1:	83 c4 2c             	add    esp,0x2c
c001bdc4:	5b                   	pop    ebx
c001bdc5:	5e                   	pop    esi
c001bdc6:	5f                   	pop    edi
c001bdc7:	5d                   	pop    ebp
c001bdc8:	eb 92                	jmp    c001bd5c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bdca:	0f b6 cb             	movzx  ecx,bl
c001bdcd:	83 f9 07             	cmp    ecx,0x7
c001bdd0:	77 12                	ja     c001bde4 <IDE::write(unsigned char, unsigned char, unsigned char)+0x88>
c001bdd2:	0f b6 d2             	movzx  edx,dl
c001bdd5:	0f b6 db             	movzx  ebx,bl
c001bdd8:	66 8b 94 d6 5a 01 00 00 	mov    dx,WORD PTR [esi+edx*8+0x15a]
c001bde0:	01 da                	add    edx,ebx
c001bde2:	eb 2f                	jmp    c001be13 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c001bde4:	83 f9 0d             	cmp    ecx,0xd
c001bde7:	77 13                	ja     c001bdfc <IDE::write(unsigned char, unsigned char, unsigned char)+0xa0>
c001bde9:	0f b6 d2             	movzx  edx,dl
c001bdec:	0f b6 db             	movzx  ebx,bl
c001bdef:	8b 94 d6 5c 01 00 00 	mov    edx,DWORD PTR [esi+edx*8+0x15c]
c001bdf6:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c001bdfa:	eb 17                	jmp    c001be13 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c001bdfc:	83 f9 15             	cmp    ecx,0x15
c001bdff:	77 13                	ja     c001be14 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb8>
c001be01:	0f b6 d2             	movzx  edx,dl
c001be04:	0f b6 db             	movzx  ebx,bl
c001be07:	66 8b 94 d6 5e 01 00 00 	mov    dx,WORD PTR [esi+edx*8+0x15e]
c001be0f:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c001be13:	ee                   	out    dx,al
c001be14:	83 c4 1c             	add    esp,0x1c
c001be17:	5b                   	pop    ebx
c001be18:	5e                   	pop    esi
c001be19:	5f                   	pop    edi
c001be1a:	5d                   	pop    ebp
c001be1b:	c3                   	ret    

c001be1c <IDE::read(unsigned char, unsigned char)>:
c001be1c:	55                   	push   ebp
c001be1d:	57                   	push   edi
c001be1e:	56                   	push   esi
c001be1f:	53                   	push   ebx
c001be20:	83 ec 1c             	sub    esp,0x1c
c001be23:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001be27:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001be2b:	8d 43 f8             	lea    eax,[ebx-0x8]
c001be2e:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c001be32:	3c 03                	cmp    al,0x3
c001be34:	77 40                	ja     c001be76 <IDE::read(unsigned char, unsigned char)+0x5a>
c001be36:	0f b6 f9             	movzx  edi,cl
c001be39:	8d 6f 2a             	lea    ebp,[edi+0x2a]
c001be3c:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001be41:	0c 80                	or     al,0x80
c001be43:	50                   	push   eax
c001be44:	6a 0c                	push   0xc
c001be46:	57                   	push   edi
c001be47:	56                   	push   esi
c001be48:	e8 0f ff ff ff       	call   c001bd5c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001be4d:	66 8b 44 ee 0a       	mov    ax,WORD PTR [esi+ebp*8+0xa]
c001be52:	0f b6 d3             	movzx  edx,bl
c001be55:	8d 54 10 fa          	lea    edx,[eax+edx*1-0x6]
c001be59:	ec                   	in     al,dx
c001be5a:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001be5e:	0f b6 54 ee 10       	movzx  edx,BYTE PTR [esi+ebp*8+0x10]
c001be63:	52                   	push   edx
c001be64:	6a 0c                	push   0xc
c001be66:	57                   	push   edi
c001be67:	56                   	push   esi
c001be68:	e8 ef fe ff ff       	call   c001bd5c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001be6d:	83 c4 20             	add    esp,0x20
c001be70:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001be74:	eb 4c                	jmp    c001bec2 <IDE::read(unsigned char, unsigned char)+0xa6>
c001be76:	0f b6 d3             	movzx  edx,bl
c001be79:	83 fa 07             	cmp    edx,0x7
c001be7c:	77 12                	ja     c001be90 <IDE::read(unsigned char, unsigned char)+0x74>
c001be7e:	0f b6 c9             	movzx  ecx,cl
c001be81:	0f b6 d3             	movzx  edx,bl
c001be84:	66 8b 84 ce 5a 01 00 00 	mov    ax,WORD PTR [esi+ecx*8+0x15a]
c001be8c:	01 c2                	add    edx,eax
c001be8e:	eb 31                	jmp    c001bec1 <IDE::read(unsigned char, unsigned char)+0xa5>
c001be90:	83 fa 0d             	cmp    edx,0xd
c001be93:	77 13                	ja     c001bea8 <IDE::read(unsigned char, unsigned char)+0x8c>
c001be95:	0f b6 c9             	movzx  ecx,cl
c001be98:	0f b6 d3             	movzx  edx,bl
c001be9b:	8b 84 ce 5c 01 00 00 	mov    eax,DWORD PTR [esi+ecx*8+0x15c]
c001bea2:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c001bea6:	eb 19                	jmp    c001bec1 <IDE::read(unsigned char, unsigned char)+0xa5>
c001bea8:	31 c0                	xor    eax,eax
c001beaa:	83 fa 15             	cmp    edx,0x15
c001bead:	77 13                	ja     c001bec2 <IDE::read(unsigned char, unsigned char)+0xa6>
c001beaf:	0f b6 c9             	movzx  ecx,cl
c001beb2:	0f b6 d3             	movzx  edx,bl
c001beb5:	66 8b 84 ce 5e 01 00 00 	mov    ax,WORD PTR [esi+ecx*8+0x15e]
c001bebd:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c001bec1:	ec                   	in     al,dx
c001bec2:	83 c4 1c             	add    esp,0x1c
c001bec5:	5b                   	pop    ebx
c001bec6:	5e                   	pop    esi
c001bec7:	5f                   	pop    edi
c001bec8:	5d                   	pop    ebp
c001bec9:	c3                   	ret    

c001beca <IDE::waitInterrupt(unsigned char)>:
c001beca:	55                   	push   ebp
c001becb:	57                   	push   edi
c001becc:	56                   	push   esi
c001becd:	53                   	push   ebx
c001bece:	31 db                	xor    ebx,ebx
c001bed0:	83 ec 0c             	sub    esp,0xc
c001bed3:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001bed7:	0f b6 74 24 24       	movzx  esi,BYTE PTR [esp+0x24]
c001bedc:	0f b6 ac 37 6c 02 00 00 	movzx  ebp,BYTE PTR [edi+esi*1+0x26c]
c001bee4:	89 e8                	mov    eax,ebp
c001bee6:	84 c0                	test   al,al
c001bee8:	75 30                	jne    c001bf1a <IDE::waitInterrupt(unsigned char)+0x50>
c001beea:	50                   	push   eax
c001beeb:	6a 0c                	push   0xc
c001beed:	56                   	push   esi
c001beee:	57                   	push   edi
c001beef:	e8 28 ff ff ff       	call   c001be1c <IDE::read(unsigned char, unsigned char)>
c001bef4:	83 c4 10             	add    esp,0x10
c001bef7:	a8 01                	test   al,0x1
c001bef9:	75 27                	jne    c001bf22 <IDE::waitInterrupt(unsigned char)+0x58>
c001befb:	f6 c3 04             	test   bl,0x4
c001befe:	75 12                	jne    c001bf12 <IDE::waitInterrupt(unsigned char)+0x48>
c001bf00:	83 fb 32             	cmp    ebx,0x32
c001bf03:	7e 0d                	jle    c001bf12 <IDE::waitInterrupt(unsigned char)+0x48>
c001bf05:	83 ec 0c             	sub    esp,0xc
c001bf08:	6a 64                	push   0x64
c001bf0a:	e8 b1 a4 ff ff       	call   c00163c0 <milliTenthSleep(unsigned int)>
c001bf0f:	83 c4 10             	add    esp,0x10
c001bf12:	83 fb 3c             	cmp    ebx,0x3c
c001bf15:	74 0b                	je     c001bf22 <IDE::waitInterrupt(unsigned char)+0x58>
c001bf17:	43                   	inc    ebx
c001bf18:	eb c2                	jmp    c001bedc <IDE::waitInterrupt(unsigned char)+0x12>
c001bf1a:	c6 84 37 6c 02 00 00 00 	mov    BYTE PTR [edi+esi*1+0x26c],0x0
c001bf22:	83 c4 0c             	add    esp,0xc
c001bf25:	89 e8                	mov    eax,ebp
c001bf27:	5b                   	pop    ebx
c001bf28:	5e                   	pop    esi
c001bf29:	5f                   	pop    edi
c001bf2a:	5d                   	pop    ebp
c001bf2b:	c3                   	ret    

c001bf2c <ideChannel0IRQHandler(regs*, void*)>:
c001bf2c:	83 ec 10             	sub    esp,0x10
c001bf2f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001bf33:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c001bf3a:	6a 07                	push   0x7
c001bf3c:	6a 00                	push   0x0
c001bf3e:	50                   	push   eax
c001bf3f:	e8 d8 fe ff ff       	call   c001be1c <IDE::read(unsigned char, unsigned char)>
c001bf44:	83 c4 1c             	add    esp,0x1c
c001bf47:	c3                   	ret    

c001bf48 <ideChannel1IRQHandler(regs*, void*)>:
c001bf48:	83 ec 10             	sub    esp,0x10
c001bf4b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001bf4f:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c001bf56:	6a 07                	push   0x7
c001bf58:	6a 01                	push   0x1
c001bf5a:	50                   	push   eax
c001bf5b:	e8 bc fe ff ff       	call   c001be1c <IDE::read(unsigned char, unsigned char)>
c001bf60:	83 c4 1c             	add    esp,0x1c
c001bf63:	c3                   	ret    

c001bf64 <IDE::enableIRQs(unsigned char, bool)>:
c001bf64:	57                   	push   edi
c001bf65:	b8 02 00 00 00       	mov    eax,0x2
c001bf6a:	56                   	push   esi
c001bf6b:	53                   	push   ebx
c001bf6c:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001bf70:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001bf74:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c001bf79:	74 02                	je     c001bf7d <IDE::enableIRQs(unsigned char, bool)+0x19>
c001bf7b:	31 c0                	xor    eax,eax
c001bf7d:	0f b6 db             	movzx  ebx,bl
c001bf80:	bf 04 00 00 00       	mov    edi,0x4
c001bf85:	88 84 de 60 01 00 00 	mov    BYTE PTR [esi+ebx*8+0x160],al
c001bf8c:	50                   	push   eax
c001bf8d:	6a 0c                	push   0xc
c001bf8f:	53                   	push   ebx
c001bf90:	56                   	push   esi
c001bf91:	e8 c6 fd ff ff       	call   c001bd5c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bf96:	83 c4 10             	add    esp,0x10
c001bf99:	50                   	push   eax
c001bf9a:	6a 0c                	push   0xc
c001bf9c:	53                   	push   ebx
c001bf9d:	56                   	push   esi
c001bf9e:	e8 79 fe ff ff       	call   c001be1c <IDE::read(unsigned char, unsigned char)>
c001bfa3:	83 c4 10             	add    esp,0x10
c001bfa6:	4f                   	dec    edi
c001bfa7:	75 f0                	jne    c001bf99 <IDE::enableIRQs(unsigned char, bool)+0x35>
c001bfa9:	5b                   	pop    ebx
c001bfaa:	5e                   	pop    esi
c001bfab:	5f                   	pop    edi
c001bfac:	c3                   	ret    
c001bfad:	90                   	nop

c001bfae <IDE::open(int, int, void*)>:
c001bfae:	55                   	push   ebp
c001bfaf:	57                   	push   edi
c001bfb0:	56                   	push   esi
c001bfb1:	53                   	push   ebx
c001bfb2:	83 ec 1c             	sub    esp,0x1c
c001bfb5:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001bfb9:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c001bfc2:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c001bfcb:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c001bfd2:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c001bfd9:	0f 85 de 02 00 00    	jne    c001c2bd <IDE::open(int, int, void*)+0x30f>
c001bfdf:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c001bfe5:	88 04 24             	mov    BYTE PTR [esp],al
c001bfe8:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001bfeb:	83 e0 7f             	and    eax,0x7f
c001bfee:	83 f8 05             	cmp    eax,0x5
c001bff1:	74 05                	je     c001bff8 <IDE::open(int, int, void*)+0x4a>
c001bff3:	83 f8 0f             	cmp    eax,0xf
c001bff6:	75 32                	jne    c001c02a <IDE::open(int, int, void*)+0x7c>
c001bff8:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c001bffe:	83 e0 fc             	and    eax,0xfffffffc
c001c001:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001c008:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c001c00e:	83 e0 fc             	and    eax,0xfffffffc
c001c011:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001c018:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c001c01e:	83 e0 fc             	and    eax,0xfffffffc
c001c021:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001c028:	eb 14                	jmp    c001c03e <IDE::open(int, int, void*)+0x90>
c001c02a:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c001c034:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c001c03e:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c001c045:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c001c04c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001c050:	89 c6                	mov    esi,eax
c001c052:	bf f8 0c 00 00       	mov    edi,0xcf8
c001c057:	c1 e6 10             	shl    esi,0x10
c001c05a:	89 e8                	mov    eax,ebp
c001c05c:	89 fa                	mov    edx,edi
c001c05e:	c1 e0 0b             	shl    eax,0xb
c001c061:	09 f0                	or     eax,esi
c001c063:	0f b6 b3 1e 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11e]
c001c06a:	c1 e6 08             	shl    esi,0x8
c001c06d:	09 c6                	or     esi,eax
c001c06f:	89 f0                	mov    eax,esi
c001c071:	0d 08 00 00 80       	or     eax,0x80000008
c001c076:	ef                   	out    dx,eax
c001c077:	b9 fc 0c 00 00       	mov    ecx,0xcfc
c001c07c:	89 ca                	mov    edx,ecx
c001c07e:	ed                   	in     eax,dx
c001c07f:	c1 e8 10             	shr    eax,0x10
c001c082:	3d ff ff 00 00       	cmp    eax,0xffff
c001c087:	0f 84 f9 00 00 00    	je     c001c186 <IDE::open(int, int, void*)+0x1d8>
c001c08d:	81 ce 3c 00 00 80    	or     esi,0x8000003c
c001c093:	89 fa                	mov    edx,edi
c001c095:	89 f0                	mov    eax,esi
c001c097:	ef                   	out    dx,eax
c001c098:	b0 fe                	mov    al,0xfe
c001c09a:	89 ca                	mov    edx,ecx
c001c09c:	ee                   	out    dx,al
c001c09d:	89 f0                	mov    eax,esi
c001c09f:	89 fa                	mov    edx,edi
c001c0a1:	ef                   	out    dx,eax
c001c0a2:	89 ca                	mov    edx,ecx
c001c0a4:	ed                   	in     eax,dx
c001c0a5:	3c fe                	cmp    al,0xfe
c001c0a7:	0f 85 a9 00 00 00    	jne    c001c156 <IDE::open(int, int, void*)+0x1a8>
c001c0ad:	8b 15 b8 6e 02 c0    	mov    edx,DWORD PTR ds:0xc0026eb8
c001c0b3:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c001c0ba:	74 33                	je     c001c0ef <IDE::open(int, int, void*)+0x141>
c001c0bc:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c001c0c2:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c001c0c6:	40                   	inc    eax
c001c0c7:	83 ec 0c             	sub    esp,0xc
c001c0ca:	0f b6 c0             	movzx  eax,al
c001c0cd:	50                   	push   eax
c001c0ce:	55                   	push   ebp
c001c0cf:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001c0d3:	ff b2 68 01 00 00    	push   DWORD PTR [edx+0x168]
c001c0d9:	51                   	push   ecx
c001c0da:	e8 65 38 ff ff       	call   c000f944 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c001c0df:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c001c0e4:	83 c4 1c             	add    esp,0x1c
c001c0e7:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001c0ed:	eb 0a                	jmp    c001c0f9 <IDE::open(int, int, void*)+0x14b>
c001c0ef:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c001c0f9:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c001c100:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001c107:	c1 e1 10             	shl    ecx,0x10
c001c10a:	c1 e0 08             	shl    eax,0x8
c001c10d:	bf f8 0c 00 00       	mov    edi,0xcf8
c001c112:	09 c1                	or     ecx,eax
c001c114:	89 fa                	mov    edx,edi
c001c116:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c001c11d:	c1 e0 0b             	shl    eax,0xb
c001c120:	09 c1                	or     ecx,eax
c001c122:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c001c128:	89 c8                	mov    eax,ecx
c001c12a:	ef                   	out    dx,eax
c001c12b:	be fc 0c 00 00       	mov    esi,0xcfc
c001c130:	8a 83 50 01 00 00    	mov    al,BYTE PTR [ebx+0x150]
c001c136:	89 f2                	mov    edx,esi
c001c138:	ee                   	out    dx,al
c001c139:	89 c8                	mov    eax,ecx
c001c13b:	89 fa                	mov    edx,edi
c001c13d:	ef                   	out    dx,eax
c001c13e:	89 f2                	mov    edx,esi
c001c140:	ed                   	in     eax,dx
c001c141:	0f b6 c0             	movzx  eax,al
c001c144:	3b 83 50 01 00 00    	cmp    eax,DWORD PTR [ebx+0x150]
c001c14a:	74 4a                	je     c001c196 <IDE::open(int, int, void*)+0x1e8>
c001c14c:	83 ec 0c             	sub    esp,0xc
c001c14f:	68 88 31 02 c0       	push   0xc0023188
c001c154:	eb 38                	jmp    c001c18e <IDE::open(int, int, void*)+0x1e0>
c001c156:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c001c15f:	75 1b                	jne    c001c17c <IDE::open(int, int, void*)+0x1ce>
c001c161:	0f b6 04 24          	movzx  eax,BYTE PTR [esp]
c001c165:	3d 80 00 00 00       	cmp    eax,0x80
c001c16a:	74 07                	je     c001c173 <IDE::open(int, int, void*)+0x1c5>
c001c16c:	3d 8a 00 00 00       	cmp    eax,0x8a
c001c171:	75 09                	jne    c001c17c <IDE::open(int, int, void*)+0x1ce>
c001c173:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001c17a:	eb 1a                	jmp    c001c196 <IDE::open(int, int, void*)+0x1e8>
c001c17c:	83 ec 0c             	sub    esp,0xc
c001c17f:	68 90 31 02 c0       	push   0xc0023190
c001c184:	eb 08                	jmp    c001c18e <IDE::open(int, int, void*)+0x1e0>
c001c186:	83 ec 0c             	sub    esp,0xc
c001c189:	68 c1 31 02 c0       	push   0xc00231c1
c001c18e:	e8 98 54 ff ff       	call   c001162b <KePanic(char const*)>
c001c193:	83 c4 10             	add    esp,0x10
c001c196:	f6 83 1f 01 00 00 80 	test   BYTE PTR [ebx+0x11f],0x80
c001c19d:	74 1a                	je     c001c1b9 <IDE::open(int, int, void*)+0x20b>
c001c19f:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c001c1a5:	83 e0 fc             	and    eax,0xfffffffc
c001c1a8:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c001c1af:	83 c0 08             	add    eax,0x8
c001c1b2:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c001c1b9:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001c1bf:	89 c2                	mov    edx,eax
c001c1c1:	83 e2 0f             	and    edx,0xf
c001c1c4:	83 fa 08             	cmp    edx,0x8
c001c1c7:	75 0a                	jne    c001c1d3 <IDE::open(int, int, void*)+0x225>
c001c1c9:	83 e8 02             	sub    eax,0x2
c001c1cc:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001c1d3:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c001c1d9:	89 c2                	mov    edx,eax
c001c1db:	83 e2 0f             	and    edx,0xf
c001c1de:	83 fa 08             	cmp    edx,0x8
c001c1e1:	75 0a                	jne    c001c1ed <IDE::open(int, int, void*)+0x23f>
c001c1e3:	83 e8 02             	sub    eax,0x2
c001c1e6:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001c1ed:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c001c1f4:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c001c1fb:	89 d0                	mov    eax,edx
c001c1fd:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001c200:	8d 7a 01             	lea    edi,[edx+0x1]
c001c203:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001c207:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c001c20b:	8a 4c 93 07          	mov    cl,BYTE PTR [ebx+edx*4+0x7]
c001c20f:	83 e1 3f             	and    ecx,0x3f
c001c212:	88 4c 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],cl
c001c216:	89 f9                	mov    ecx,edi
c001c218:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c001c21f:	0f b6 c9             	movzx  ecx,cl
c001c222:	8d 78 02             	lea    edi,[eax+0x2]
c001c225:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001c228:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001c22c:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c001c230:	8a 54 8b 07          	mov    dl,BYTE PTR [ebx+ecx*4+0x7]
c001c234:	83 e2 3f             	and    edx,0x3f
c001c237:	88 54 8b 07          	mov    BYTE PTR [ebx+ecx*4+0x7],dl
c001c23b:	89 f9                	mov    ecx,edi
c001c23d:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c001c243:	0f b6 d1             	movzx  edx,cl
c001c246:	8d 78 03             	lea    edi,[eax+0x3]
c001c249:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001c24c:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001c250:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c001c254:	8a 4c 93 07          	mov    cl,BYTE PTR [ebx+edx*4+0x7]
c001c258:	83 e1 3f             	and    ecx,0x3f
c001c25b:	88 4c 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],cl
c001c25f:	89 f9                	mov    ecx,edi
c001c261:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c001c267:	0f b6 c9             	movzx  ecx,cl
c001c26a:	8d 78 04             	lea    edi,[eax+0x4]
c001c26d:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001c270:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001c274:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c001c278:	89 fa                	mov    edx,edi
c001c27a:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c001c280:	8a 54 8b 07          	mov    dl,BYTE PTR [ebx+ecx*4+0x7]
c001c284:	83 e2 3f             	and    edx,0x3f
c001c287:	88 54 8b 07          	mov    BYTE PTR [ebx+ecx*4+0x7],dl
c001c28b:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c001c292:	66 85 f6             	test   si,si
c001c295:	74 65                	je     c001c2fc <IDE::open(int, int, void*)+0x34e>
c001c297:	89 f9                	mov    ecx,edi
c001c299:	83 c0 05             	add    eax,0x5
c001c29c:	0f b6 d1             	movzx  edx,cl
c001c29f:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001c2a2:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001c2a6:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c001c2aa:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c001c2b0:	8a 44 93 07          	mov    al,BYTE PTR [ebx+edx*4+0x7]
c001c2b4:	83 e0 3f             	and    eax,0x3f
c001c2b7:	88 44 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],al
c001c2bb:	eb 3f                	jmp    c001c2fc <IDE::open(int, int, void*)+0x34e>
c001c2bd:	8b 83 18 01 00 00    	mov    eax,DWORD PTR [ebx+0x118]
c001c2c3:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001c2ca:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001c2d1:	05 06 02 00 00       	add    eax,0x206
c001c2d6:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001c2dd:	66 8b 83 1a 01 00 00 	mov    ax,WORD PTR [ebx+0x11a]
c001c2e4:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001c2eb:	05 06 02 00 00       	add    eax,0x206
c001c2f0:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001c2f7:	e9 bd fe ff ff       	jmp    c001c1b9 <IDE::open(int, int, void*)+0x20b>
c001c2fc:	50                   	push   eax
c001c2fd:	50                   	push   eax
c001c2fe:	6a 00                	push   0x0
c001c300:	53                   	push   ebx
c001c301:	e8 30 fa ff ff       	call   c001bd36 <IDE::prepareInterrupt(unsigned char)>
c001c306:	5a                   	pop    edx
c001c307:	59                   	pop    ecx
c001c308:	6a 01                	push   0x1
c001c30a:	53                   	push   ebx
c001c30b:	e8 26 fa ff ff       	call   c001bd36 <IDE::prepareInterrupt(unsigned char)>
c001c310:	83 c4 0c             	add    esp,0xc
c001c313:	6a 00                	push   0x0
c001c315:	6a 00                	push   0x0
c001c317:	53                   	push   ebx
c001c318:	e8 47 fc ff ff       	call   c001bf64 <IDE::enableIRQs(unsigned char, bool)>
c001c31d:	83 c4 0c             	add    esp,0xc
c001c320:	6a 00                	push   0x0
c001c322:	6a 01                	push   0x1
c001c324:	53                   	push   ebx
c001c325:	e8 3a fc ff ff       	call   c001bf64 <IDE::enableIRQs(unsigned char, bool)>
c001c32a:	83 c4 10             	add    esp,0x10
c001c32d:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c001c334:	74 34                	je     c001c36a <IDE::open(int, int, void*)+0x3bc>
c001c336:	83 ec 0c             	sub    esp,0xc
c001c339:	53                   	push   ebx
c001c33a:	6a 01                	push   0x1
c001c33c:	68 2c bf 01 c0       	push   0xc001bf2c
c001c341:	6a 0e                	push   0xe
c001c343:	53                   	push   ebx
c001c344:	e8 35 06 ff ff       	call   c000c97e <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001c349:	83 c4 14             	add    esp,0x14
c001c34c:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001c352:	53                   	push   ebx
c001c353:	6a 01                	push   0x1
c001c355:	68 48 bf 01 c0       	push   0xc001bf48
c001c35a:	6a 0f                	push   0xf
c001c35c:	53                   	push   ebx
c001c35d:	e8 1c 06 ff ff       	call   c000c97e <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001c362:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c001c368:	eb 38                	jmp    c001c3a2 <IDE::open(int, int, void*)+0x3f4>
c001c36a:	83 ec 0c             	sub    esp,0xc
c001c36d:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c001c377:	53                   	push   ebx
c001c378:	6a 00                	push   0x0
c001c37a:	68 2c bf 01 c0       	push   0xc001bf2c
c001c37f:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c001c385:	53                   	push   ebx
c001c386:	e8 f3 05 ff ff       	call   c000c97e <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001c38b:	83 c4 14             	add    esp,0x14
c001c38e:	53                   	push   ebx
c001c38f:	6a 00                	push   0x0
c001c391:	68 48 bf 01 c0       	push   0xc001bf48
c001c396:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c001c39c:	53                   	push   ebx
c001c39d:	e8 dc 05 ff ff       	call   c000c97e <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001c3a2:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c3a4:	83 c4 20             	add    esp,0x20
c001c3a7:	83 ec 0c             	sub    esp,0xc
c001c3aa:	53                   	push   ebx
c001c3ab:	ff 50 18             	call   DWORD PTR [eax+0x18]
c001c3ae:	83 c4 0c             	add    esp,0xc
c001c3b1:	6a 07                	push   0x7
c001c3b3:	6a 00                	push   0x0
c001c3b5:	53                   	push   ebx
c001c3b6:	e8 61 fa ff ff       	call   c001be1c <IDE::read(unsigned char, unsigned char)>
c001c3bb:	83 c4 0c             	add    esp,0xc
c001c3be:	6a 07                	push   0x7
c001c3c0:	6a 01                	push   0x1
c001c3c2:	53                   	push   ebx
c001c3c3:	e8 54 fa ff ff       	call   c001be1c <IDE::read(unsigned char, unsigned char)>
c001c3c8:	83 c4 0c             	add    esp,0xc
c001c3cb:	6a 01                	push   0x1
c001c3cd:	6a 00                	push   0x0
c001c3cf:	53                   	push   ebx
c001c3d0:	e8 8f fb ff ff       	call   c001bf64 <IDE::enableIRQs(unsigned char, bool)>
c001c3d5:	83 c4 0c             	add    esp,0xc
c001c3d8:	6a 01                	push   0x1
c001c3da:	6a 01                	push   0x1
c001c3dc:	53                   	push   ebx
c001c3dd:	e8 82 fb ff ff       	call   c001bf64 <IDE::enableIRQs(unsigned char, bool)>
c001c3e2:	83 c4 2c             	add    esp,0x2c
c001c3e5:	31 c0                	xor    eax,eax
c001c3e7:	5b                   	pop    ebx
c001c3e8:	5e                   	pop    esi
c001c3e9:	5f                   	pop    edi
c001c3ea:	5d                   	pop    ebp
c001c3eb:	c3                   	ret    

c001c3ec <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c001c3ec:	55                   	push   ebp
c001c3ed:	57                   	push   edi
c001c3ee:	56                   	push   esi
c001c3ef:	53                   	push   ebx
c001c3f0:	83 ec 1c             	sub    esp,0x1c
c001c3f3:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001c3f7:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001c3fb:	8d 42 f8             	lea    eax,[edx-0x8]
c001c3fe:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001c402:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c001c406:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001c40a:	3c 03                	cmp    al,0x3
c001c40c:	77 5a                	ja     c001c468 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x7c>
c001c40e:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001c412:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001c416:	0f b6 db             	movzx  ebx,bl
c001c419:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c001c41c:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001c421:	0c 80                	or     al,0x80
c001c423:	50                   	push   eax
c001c424:	6a 0c                	push   0xc
c001c426:	53                   	push   ebx
c001c427:	56                   	push   esi
c001c428:	e8 2f f9 ff ff       	call   c001bd5c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c42d:	66 8b 44 ee 0a       	mov    ax,WORD PTR [esi+ebp*8+0xa]
c001c432:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001c436:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001c43a:	0f b6 d2             	movzx  edx,dl
c001c43d:	8d 54 10 fa          	lea    edx,[eax+edx*1-0x6]
c001c441:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001c443:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001c448:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c001c44c:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c001c450:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001c454:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001c45c:	83 c4 2c             	add    esp,0x2c
c001c45f:	5b                   	pop    ebx
c001c460:	5e                   	pop    esi
c001c461:	5f                   	pop    edi
c001c462:	5d                   	pop    ebp
c001c463:	e9 f4 f8 ff ff       	jmp    c001bd5c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c468:	0f b6 c2             	movzx  eax,dl
c001c46b:	83 f8 07             	cmp    eax,0x7
c001c46e:	77 12                	ja     c001c482 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x96>
c001c470:	0f b6 c2             	movzx  eax,dl
c001c473:	0f b6 db             	movzx  ebx,bl
c001c476:	66 8b 94 de 5a 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15a]
c001c47e:	01 c2                	add    edx,eax
c001c480:	eb 2f                	jmp    c001c4b1 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc5>
c001c482:	83 f8 0d             	cmp    eax,0xd
c001c485:	77 13                	ja     c001c49a <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xae>
c001c487:	0f b6 db             	movzx  ebx,bl
c001c48a:	0f b6 d2             	movzx  edx,dl
c001c48d:	8b 84 de 5c 01 00 00 	mov    eax,DWORD PTR [esi+ebx*8+0x15c]
c001c494:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c001c498:	eb 17                	jmp    c001c4b1 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc5>
c001c49a:	83 f8 15             	cmp    eax,0x15
c001c49d:	77 14                	ja     c001c4b3 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc7>
c001c49f:	0f b6 db             	movzx  ebx,bl
c001c4a2:	0f b6 d2             	movzx  edx,dl
c001c4a5:	66 8b 84 de 5e 01 00 00 	mov    ax,WORD PTR [esi+ebx*8+0x15e]
c001c4ad:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c001c4b1:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001c4b3:	83 c4 1c             	add    esp,0x1c
c001c4b6:	5b                   	pop    ebx
c001c4b7:	5e                   	pop    esi
c001c4b8:	5f                   	pop    edi
c001c4b9:	5d                   	pop    ebp
c001c4ba:	c3                   	ret    
c001c4bb:	90                   	nop

c001c4bc <IDE::detect()>:
c001c4bc:	55                   	push   ebp
c001c4bd:	57                   	push   edi
c001c4be:	56                   	push   esi
c001c4bf:	53                   	push   ebx
c001c4c0:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001c4c6:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c001c4cd:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c001c4d4:	0f 85 a4 02 00 00    	jne    c001c77e <IDE::detect()+0x2c2>
c001c4da:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c001c4e1:	31 f6                	xor    esi,esi
c001c4e3:	31 ed                	xor    ebp,ebp
c001c4e5:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001c4ed:	89 e8                	mov    eax,ebp
c001c4ef:	c1 e0 06             	shl    eax,0x6
c001c4f2:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c001c4fa:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001c4fe:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001c502:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c506:	c1 e0 04             	shl    eax,0x4
c001c509:	83 c8 a0             	or     eax,0xffffffa0
c001c50c:	0f b6 c0             	movzx  eax,al
c001c50f:	50                   	push   eax
c001c510:	6a 06                	push   0x6
c001c512:	56                   	push   esi
c001c513:	53                   	push   ebx
c001c514:	e8 43 f8 ff ff       	call   c001bd5c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c519:	83 c4 0c             	add    esp,0xc
c001c51c:	6a 0c                	push   0xc
c001c51e:	56                   	push   esi
c001c51f:	53                   	push   ebx
c001c520:	e8 f7 f8 ff ff       	call   c001be1c <IDE::read(unsigned char, unsigned char)>
c001c525:	83 c4 0c             	add    esp,0xc
c001c528:	6a 0c                	push   0xc
c001c52a:	56                   	push   esi
c001c52b:	53                   	push   ebx
c001c52c:	e8 eb f8 ff ff       	call   c001be1c <IDE::read(unsigned char, unsigned char)>
c001c531:	83 c4 0c             	add    esp,0xc
c001c534:	6a 0c                	push   0xc
c001c536:	56                   	push   esi
c001c537:	53                   	push   ebx
c001c538:	e8 df f8 ff ff       	call   c001be1c <IDE::read(unsigned char, unsigned char)>
c001c53d:	83 c4 0c             	add    esp,0xc
c001c540:	6a 0c                	push   0xc
c001c542:	56                   	push   esi
c001c543:	53                   	push   ebx
c001c544:	e8 d3 f8 ff ff       	call   c001be1c <IDE::read(unsigned char, unsigned char)>
c001c549:	68 ec 00 00 00       	push   0xec
c001c54e:	6a 07                	push   0x7
c001c550:	56                   	push   esi
c001c551:	53                   	push   ebx
c001c552:	e8 05 f8 ff ff       	call   c001bd5c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c557:	83 c4 1c             	add    esp,0x1c
c001c55a:	6a 0c                	push   0xc
c001c55c:	56                   	push   esi
c001c55d:	53                   	push   ebx
c001c55e:	e8 b9 f8 ff ff       	call   c001be1c <IDE::read(unsigned char, unsigned char)>
c001c563:	83 c4 0c             	add    esp,0xc
c001c566:	6a 0c                	push   0xc
c001c568:	56                   	push   esi
c001c569:	53                   	push   ebx
c001c56a:	e8 ad f8 ff ff       	call   c001be1c <IDE::read(unsigned char, unsigned char)>
c001c56f:	83 c4 0c             	add    esp,0xc
c001c572:	6a 0c                	push   0xc
c001c574:	56                   	push   esi
c001c575:	53                   	push   ebx
c001c576:	e8 a1 f8 ff ff       	call   c001be1c <IDE::read(unsigned char, unsigned char)>
c001c57b:	83 c4 0c             	add    esp,0xc
c001c57e:	6a 0c                	push   0xc
c001c580:	56                   	push   esi
c001c581:	53                   	push   ebx
c001c582:	e8 95 f8 ff ff       	call   c001be1c <IDE::read(unsigned char, unsigned char)>
c001c587:	83 c4 0c             	add    esp,0xc
c001c58a:	6a 0c                	push   0xc
c001c58c:	56                   	push   esi
c001c58d:	53                   	push   ebx
c001c58e:	e8 89 f8 ff ff       	call   c001be1c <IDE::read(unsigned char, unsigned char)>
c001c593:	83 c4 10             	add    esp,0x10
c001c596:	84 c0                	test   al,al
c001c598:	0f 84 60 01 00 00    	je     c001c6fe <IDE::detect()+0x242>
c001c59e:	31 ff                	xor    edi,edi
c001c5a0:	50                   	push   eax
c001c5a1:	6a 0c                	push   0xc
c001c5a3:	56                   	push   esi
c001c5a4:	53                   	push   ebx
c001c5a5:	e8 72 f8 ff ff       	call   c001be1c <IDE::read(unsigned char, unsigned char)>
c001c5aa:	83 c4 10             	add    esp,0x10
c001c5ad:	a8 01                	test   al,0x1
c001c5af:	0f 85 6a 01 00 00    	jne    c001c71f <IDE::detect()+0x263>
c001c5b5:	a8 80                	test   al,0x80
c001c5b7:	75 04                	jne    c001c5bd <IDE::detect()+0x101>
c001c5b9:	a8 08                	test   al,0x8
c001c5bb:	75 23                	jne    c001c5e0 <IDE::detect()+0x124>
c001c5bd:	47                   	inc    edi
c001c5be:	81 ff 17 01 00 00    	cmp    edi,0x117
c001c5c4:	7e da                	jle    c001c5a0 <IDE::detect()+0xe4>
c001c5c6:	83 ec 0c             	sub    esp,0xc
c001c5c9:	6a 32                	push   0x32
c001c5cb:	e8 f0 9d ff ff       	call   c00163c0 <milliTenthSleep(unsigned int)>
c001c5d0:	83 c4 10             	add    esp,0x10
c001c5d3:	81 ff 2c 01 00 00    	cmp    edi,0x12c
c001c5d9:	75 c5                	jne    c001c5a0 <IDE::detect()+0xe4>
c001c5db:	e9 3f 01 00 00       	jmp    c001c71f <IDE::detect()+0x263>
c001c5e0:	31 c9                	xor    ecx,ecx
c001c5e2:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c001c5e6:	8d 7c 24 10          	lea    edi,[esp+0x10]
c001c5ea:	83 ec 0c             	sub    esp,0xc
c001c5ed:	68 80 00 00 00       	push   0x80
c001c5f2:	57                   	push   edi
c001c5f3:	6a 00                	push   0x0
c001c5f5:	56                   	push   esi
c001c5f6:	53                   	push   ebx
c001c5f7:	e8 f0 fd ff ff       	call   c001c3ec <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c001c5fc:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c001c601:	89 e8                	mov    eax,ebp
c001c603:	89 d1                	mov    ecx,edx
c001c605:	c1 e0 06             	shl    eax,0x6
c001c608:	01 d8                	add    eax,ebx
c001c60a:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c001c611:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c001c618:	89 f2                	mov    edx,esi
c001c61a:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c001c620:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c001c624:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c001c62a:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001c62e:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c001c635:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c001c63d:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c001c644:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c001c64c:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c001c652:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c001c659:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c001c65f:	8d 54 24 58          	lea    edx,[esp+0x58]
c001c663:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c001c667:	83 c4 20             	add    esp,0x20
c001c66a:	8a 57 37             	mov    dl,BYTE PTR [edi+0x37]
c001c66d:	83 c0 02             	add    eax,0x2
c001c670:	88 90 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],dl
c001c676:	83 c7 02             	add    edi,0x2
c001c679:	8a 57 34             	mov    dl,BYTE PTR [edi+0x34]
c001c67c:	88 90 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],dl
c001c682:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c001c686:	75 e2                	jne    c001c66a <IDE::detect()+0x1ae>
c001c688:	89 e8                	mov    eax,ebp
c001c68a:	c1 e0 06             	shl    eax,0x6
c001c68d:	01 d8                	add    eax,ebx
c001c68f:	0f b7 90 74 01 00 00 	movzx  edx,WORD PTR [eax+0x174]
c001c696:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c001c69d:	c1 ea 09             	shr    edx,0x9
c001c6a0:	83 e2 01             	and    edx,0x1
c001c6a3:	80 e1 01             	and    cl,0x1
c001c6a6:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c001c6ac:	75 22                	jne    c001c6d0 <IDE::detect()+0x214>
c001c6ae:	83 b8 7c 01 00 00 00 	cmp    DWORD PTR [eax+0x17c],0x0
c001c6b5:	74 46                	je     c001c6fd <IDE::detect()+0x241>
c001c6b7:	83 ec 0c             	sub    esp,0xc
c001c6ba:	68 7c 01 00 00       	push   0x17c
c001c6bf:	e8 f2 b3 fe ff       	call   c0007ab6 <malloc>
c001c6c4:	89 c7                	mov    edi,eax
c001c6c6:	89 04 24             	mov    DWORD PTR [esp],eax
c001c6c9:	e8 1a 05 00 00       	call   c001cbe8 <ATA::ATA()>
c001c6ce:	eb 17                	jmp    c001c6e7 <IDE::detect()+0x22b>
c001c6d0:	83 ec 0c             	sub    esp,0xc
c001c6d3:	68 84 01 00 00       	push   0x184
c001c6d8:	e8 d9 b3 fe ff       	call   c0007ab6 <malloc>
c001c6dd:	89 c7                	mov    edi,eax
c001c6df:	89 04 24             	mov    DWORD PTR [esp],eax
c001c6e2:	e8 45 0e 00 00       	call   c001d52c <ATAPI::ATAPI()>
c001c6e7:	5a                   	pop    edx
c001c6e8:	59                   	pop    ecx
c001c6e9:	57                   	push   edi
c001c6ea:	53                   	push   ebx
c001c6eb:	e8 e2 02 ff ff       	call   c000c9d2 <Device::addChild(Device*)>
c001c6f0:	8b 07                	mov    eax,DWORD PTR [edi]
c001c6f2:	53                   	push   ebx
c001c6f3:	55                   	push   ebp
c001c6f4:	6a 00                	push   0x0
c001c6f6:	57                   	push   edi
c001c6f7:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001c6fa:	83 c4 20             	add    esp,0x20
c001c6fd:	45                   	inc    ebp
c001c6fe:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c001c703:	74 0d                	je     c001c712 <IDE::detect()+0x256>
c001c705:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c001c70d:	e9 db fd ff ff       	jmp    c001c4ed <IDE::detect()+0x31>
c001c712:	4e                   	dec    esi
c001c713:	74 69                	je     c001c77e <IDE::detect()+0x2c2>
c001c715:	be 01 00 00 00       	mov    esi,0x1
c001c71a:	e9 c6 fd ff ff       	jmp    c001c4e5 <IDE::detect()+0x29>
c001c71f:	50                   	push   eax
c001c720:	6a 04                	push   0x4
c001c722:	56                   	push   esi
c001c723:	53                   	push   ebx
c001c724:	e8 f3 f6 ff ff       	call   c001be1c <IDE::read(unsigned char, unsigned char)>
c001c729:	83 c4 0c             	add    esp,0xc
c001c72c:	89 c7                	mov    edi,eax
c001c72e:	6a 05                	push   0x5
c001c730:	56                   	push   esi
c001c731:	53                   	push   ebx
c001c732:	e8 e5 f6 ff ff       	call   c001be1c <IDE::read(unsigned char, unsigned char)>
c001c737:	83 c4 10             	add    esp,0x10
c001c73a:	89 f9                	mov    ecx,edi
c001c73c:	0f b6 c0             	movzx  eax,al
c001c73f:	0f b6 f9             	movzx  edi,cl
c001c742:	83 ff 14             	cmp    edi,0x14
c001c745:	75 07                	jne    c001c74e <IDE::detect()+0x292>
c001c747:	3d eb 00 00 00       	cmp    eax,0xeb
c001c74c:	eb 0a                	jmp    c001c758 <IDE::detect()+0x29c>
c001c74e:	3d 96 00 00 00       	cmp    eax,0x96
c001c753:	75 a9                	jne    c001c6fe <IDE::detect()+0x242>
c001c755:	83 ff 69             	cmp    edi,0x69
c001c758:	75 a4                	jne    c001c6fe <IDE::detect()+0x242>
c001c75a:	68 a1 00 00 00       	push   0xa1
c001c75f:	6a 07                	push   0x7
c001c761:	56                   	push   esi
c001c762:	53                   	push   ebx
c001c763:	e8 f4 f5 ff ff       	call   c001bd5c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c768:	c7 04 24 0a 00 00 00 	mov    DWORD PTR [esp],0xa
c001c76f:	e8 4c 9c ff ff       	call   c00163c0 <milliTenthSleep(unsigned int)>
c001c774:	83 c4 10             	add    esp,0x10
c001c777:	b1 01                	mov    cl,0x1
c001c779:	e9 64 fe ff ff       	jmp    c001c5e2 <IDE::detect()+0x126>
c001c77e:	81 c4 1c 02 00 00    	add    esp,0x21c
c001c784:	5b                   	pop    ebx
c001c785:	5e                   	pop    esi
c001c786:	5f                   	pop    edi
c001c787:	5d                   	pop    ebp
c001c788:	c3                   	ret    
c001c789:	90                   	nop

c001c78a <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c001c78a:	55                   	push   ebp
c001c78b:	57                   	push   edi
c001c78c:	56                   	push   esi
c001c78d:	53                   	push   ebx
c001c78e:	83 ec 1c             	sub    esp,0x1c
c001c791:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001c795:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001c799:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c79d:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001c7a1:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001c7a5:	88 c3                	mov    bl,al
c001c7a7:	25 ff 00 00 00       	and    eax,0xff
c001c7ac:	0f 84 88 00 00 00    	je     c001c83a <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001c7b2:	83 ec 0c             	sub    esp,0xc
c001c7b5:	89 c7                	mov    edi,eax
c001c7b7:	68 eb 31 02 c0       	push   0xc00231eb
c001c7bc:	e8 84 e1 fe ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001c7c1:	83 c4 10             	add    esp,0x10
c001c7c4:	83 ff 01             	cmp    edi,0x1
c001c7c7:	74 6b                	je     c001c834 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xaa>
c001c7c9:	83 ff 02             	cmp    edi,0x2
c001c7cc:	75 58                	jne    c001c826 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x9c>
c001c7ce:	0f b6 7c 24 0c       	movzx  edi,BYTE PTR [esp+0xc]
c001c7d3:	01 ff                	add    edi,edi
c001c7d5:	50                   	push   eax
c001c7d6:	09 fe                	or     esi,edi
c001c7d8:	6a 01                	push   0x1
c001c7da:	89 f0                	mov    eax,esi
c001c7dc:	0f b6 f0             	movzx  esi,al
c001c7df:	c1 e6 06             	shl    esi,0x6
c001c7e2:	0f b6 84 35 6d 01 00 00 	movzx  eax,BYTE PTR [ebp+esi*1+0x16d]
c001c7ea:	50                   	push   eax
c001c7eb:	55                   	push   ebp
c001c7ec:	e8 2b f6 ff ff       	call   c001be1c <IDE::read(unsigned char, unsigned char)>
c001c7f1:	83 c4 10             	add    esp,0x10
c001c7f4:	a8 01                	test   al,0x1
c001c7f6:	74 02                	je     c001c7fa <IDE::printError(unsigned char, unsigned char, unsigned char)+0x70>
c001c7f8:	b3 07                	mov    bl,0x7
c001c7fa:	a8 02                	test   al,0x2
c001c7fc:	74 02                	je     c001c800 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x76>
c001c7fe:	b3 03                	mov    bl,0x3
c001c800:	a8 04                	test   al,0x4
c001c802:	74 02                	je     c001c806 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x7c>
c001c804:	b3 14                	mov    bl,0x14
c001c806:	a8 08                	test   al,0x8
c001c808:	74 02                	je     c001c80c <IDE::printError(unsigned char, unsigned char, unsigned char)+0x82>
c001c80a:	b3 03                	mov    bl,0x3
c001c80c:	a8 10                	test   al,0x10
c001c80e:	74 02                	je     c001c812 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x88>
c001c810:	b3 15                	mov    bl,0x15
c001c812:	a8 20                	test   al,0x20
c001c814:	74 02                	je     c001c818 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x8e>
c001c816:	b3 03                	mov    bl,0x3
c001c818:	a8 40                	test   al,0x40
c001c81a:	74 02                	je     c001c81e <IDE::printError(unsigned char, unsigned char, unsigned char)+0x94>
c001c81c:	b3 16                	mov    bl,0x16
c001c81e:	a8 80                	test   al,0x80
c001c820:	74 18                	je     c001c83a <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001c822:	b3 0d                	mov    bl,0xd
c001c824:	eb 14                	jmp    c001c83a <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001c826:	83 ff 03             	cmp    edi,0x3
c001c829:	74 0d                	je     c001c838 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xae>
c001c82b:	83 ff 04             	cmp    edi,0x4
c001c82e:	75 0a                	jne    c001c83a <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001c830:	b3 08                	mov    bl,0x8
c001c832:	eb 06                	jmp    c001c83a <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001c834:	b3 13                	mov    bl,0x13
c001c836:	eb 02                	jmp    c001c83a <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001c838:	b3 17                	mov    bl,0x17
c001c83a:	83 c4 1c             	add    esp,0x1c
c001c83d:	88 d8                	mov    al,bl
c001c83f:	5b                   	pop    ebx
c001c840:	5e                   	pop    esi
c001c841:	5f                   	pop    edi
c001c842:	5d                   	pop    ebp
c001c843:	c3                   	ret    

c001c844 <IDE::polling(unsigned char, unsigned int)>:
c001c844:	57                   	push   edi
c001c845:	56                   	push   esi
c001c846:	53                   	push   ebx
c001c847:	bb 04 00 00 00       	mov    ebx,0x4
c001c84c:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c001c850:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001c855:	52                   	push   edx
c001c856:	6a 0c                	push   0xc
c001c858:	56                   	push   esi
c001c859:	57                   	push   edi
c001c85a:	e8 bd f5 ff ff       	call   c001be1c <IDE::read(unsigned char, unsigned char)>
c001c85f:	83 c4 10             	add    esp,0x10
c001c862:	4b                   	dec    ebx
c001c863:	75 f0                	jne    c001c855 <IDE::polling(unsigned char, unsigned int)+0x11>
c001c865:	bb a0 86 01 00       	mov    ebx,0x186a0
c001c86a:	50                   	push   eax
c001c86b:	6a 0c                	push   0xc
c001c86d:	56                   	push   esi
c001c86e:	57                   	push   edi
c001c86f:	e8 a8 f5 ff ff       	call   c001be1c <IDE::read(unsigned char, unsigned char)>
c001c874:	83 c4 10             	add    esp,0x10
c001c877:	a8 01                	test   al,0x1
c001c879:	75 17                	jne    c001c892 <IDE::polling(unsigned char, unsigned int)+0x4e>
c001c87b:	a8 20                	test   al,0x20
c001c87d:	75 0f                	jne    c001c88e <IDE::polling(unsigned char, unsigned int)+0x4a>
c001c87f:	4b                   	dec    ebx
c001c880:	74 10                	je     c001c892 <IDE::polling(unsigned char, unsigned int)+0x4e>
c001c882:	a8 80                	test   al,0x80
c001c884:	75 e4                	jne    c001c86a <IDE::polling(unsigned char, unsigned int)+0x26>
c001c886:	a8 08                	test   al,0x8
c001c888:	74 e0                	je     c001c86a <IDE::polling(unsigned char, unsigned int)+0x26>
c001c88a:	31 c0                	xor    eax,eax
c001c88c:	eb 06                	jmp    c001c894 <IDE::polling(unsigned char, unsigned int)+0x50>
c001c88e:	b0 01                	mov    al,0x1
c001c890:	eb 02                	jmp    c001c894 <IDE::polling(unsigned char, unsigned int)+0x50>
c001c892:	b0 02                	mov    al,0x2
c001c894:	5b                   	pop    ebx
c001c895:	5e                   	pop    esi
c001c896:	5f                   	pop    edi
c001c897:	c3                   	ret    

c001c898 <SATABus::close(int, int, void*)>:
c001c898:	31 c0                	xor    eax,eax
c001c89a:	c3                   	ret    
c001c89b:	90                   	nop

c001c89c <SATABus::detect()>:
c001c89c:	c3                   	ret    
c001c89d:	90                   	nop

c001c89e <SATABus::SATABus()>:
c001c89e:	83 ec 0c             	sub    esp,0xc
c001c8a1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c8a5:	83 ec 08             	sub    esp,0x8
c001c8a8:	68 24 32 02 c0       	push   0xc0023224
c001c8ad:	50                   	push   eax
c001c8ae:	e8 61 04 ff ff       	call   c000cd14 <HardDiskController::HardDiskController(char const*)>
c001c8b3:	83 c4 10             	add    esp,0x10
c001c8b6:	ba 50 32 02 c0       	mov    edx,0xc0023250
c001c8bb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c8bf:	89 10                	mov    DWORD PTR [eax],edx
c001c8c1:	83 ec 0c             	sub    esp,0xc
c001c8c4:	6a 50                	push   0x50
c001c8c6:	e8 c3 b5 fe ff       	call   c0007e8e <Phys::allocateContiguousPages(int)>
c001c8cb:	83 c4 10             	add    esp,0x10
c001c8ce:	89 c2                	mov    edx,eax
c001c8d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c8d4:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001c8da:	83 ec 0c             	sub    esp,0xc
c001c8dd:	6a 50                	push   0x50
c001c8df:	e8 29 cd fe ff       	call   c000960d <Virt::allocateKernelVirtualPages(int)>
c001c8e4:	83 c4 10             	add    esp,0x10
c001c8e7:	89 c2                	mov    edx,eax
c001c8e9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c8ed:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001c8f3:	a1 b0 6f 02 c0       	mov    eax,ds:0xc0026fb0
c001c8f8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001c8fc:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c001c902:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001c906:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c001c90c:	83 ec 0c             	sub    esp,0xc
c001c90f:	6a 03                	push   0x3
c001c911:	6a 50                	push   0x50
c001c913:	51                   	push   ecx
c001c914:	52                   	push   edx
c001c915:	50                   	push   eax
c001c916:	e8 ff d5 fe ff       	call   c0009f1a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001c91b:	83 c4 20             	add    esp,0x20
c001c91e:	90                   	nop
c001c91f:	83 c4 0c             	add    esp,0xc
c001c922:	c3                   	ret    
c001c923:	90                   	nop

c001c924 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c001c924:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c928:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c001c92b:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001c92e:	09 c2                	or     edx,eax
c001c930:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c934:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001c93a:	8b 08                	mov    ecx,DWORD PTR [eax]
c001c93c:	31 c0                	xor    eax,eax
c001c93e:	c1 e9 08             	shr    ecx,0x8
c001c941:	83 e1 0f             	and    ecx,0xf
c001c944:	39 c8                	cmp    eax,ecx
c001c946:	74 0a                	je     c001c952 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x2e>
c001c948:	f6 c2 01             	test   dl,0x1
c001c94b:	74 08                	je     c001c955 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c001c94d:	d1 ea                	shr    edx,1
c001c94f:	40                   	inc    eax
c001c950:	eb f2                	jmp    c001c944 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x20>
c001c952:	83 c8 ff             	or     eax,0xffffffff
c001c955:	c3                   	ret    

c001c956 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c001c956:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001c95a:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c001c95d:	89 c2                	mov    edx,eax
c001c95f:	c1 ea 08             	shr    edx,0x8
c001c962:	83 e2 0f             	and    edx,0xf
c001c965:	4a                   	dec    edx
c001c966:	75 32                	jne    c001c99a <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c001c968:	83 e0 0f             	and    eax,0xf
c001c96b:	83 f8 03             	cmp    eax,0x3
c001c96e:	75 2a                	jne    c001c99a <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c001c970:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c001c973:	b8 02 00 00 00       	mov    eax,0x2
c001c978:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c001c97e:	74 1c                	je     c001c99c <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c001c980:	b8 04 00 00 00       	mov    eax,0x4
c001c985:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c001c98b:	74 0f                	je     c001c99c <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c001c98d:	31 c0                	xor    eax,eax
c001c98f:	83 fa 03             	cmp    edx,0x3
c001c992:	0f 94 c0             	sete   al
c001c995:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c001c999:	c3                   	ret    
c001c99a:	31 c0                	xor    eax,eax
c001c99c:	c3                   	ret    
c001c99d:	90                   	nop

c001c99e <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c001c99e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c9a2:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001c9a5:	0f ba e2 0f          	bt     edx,0xf
c001c9a9:	72 f7                	jb     c001c9a2 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c001c9ab:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001c9ae:	83 ca 10             	or     edx,0x10
c001c9b1:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001c9b4:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001c9b7:	83 ca 01             	or     edx,0x1
c001c9ba:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001c9bd:	c3                   	ret    

c001c9be <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c001c9be:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c9c2:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001c9c5:	83 e2 fe             	and    edx,0xfffffffe
c001c9c8:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001c9cb:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001c9ce:	83 e2 ef             	and    edx,0xffffffef
c001c9d1:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001c9d4:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001c9d7:	0f ba e2 0e          	bt     edx,0xe
c001c9db:	72 f7                	jb     c001c9d4 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c001c9dd:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001c9e0:	0f ba e2 0f          	bt     edx,0xf
c001c9e4:	72 ee                	jb     c001c9d4 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c001c9e6:	c3                   	ret    
c001c9e7:	90                   	nop

c001c9e8 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c001c9e8:	55                   	push   ebp
c001c9e9:	57                   	push   edi
c001c9ea:	56                   	push   esi
c001c9eb:	53                   	push   ebx
c001c9ec:	83 ec 1c             	sub    esp,0x1c
c001c9ef:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001c9f3:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001c9f7:	53                   	push   ebx
c001c9f8:	56                   	push   esi
c001c9f9:	e8 c0 ff ff ff       	call   c001c9be <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c001c9fe:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c001ca02:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c001ca08:	83 ec 0c             	sub    esp,0xc
c001ca0b:	c1 e5 0a             	shl    ebp,0xa
c001ca0e:	01 e8                	add    eax,ebp
c001ca10:	89 03                	mov    DWORD PTR [ebx],eax
c001ca12:	8b 03                	mov    eax,DWORD PTR [ebx]
c001ca14:	68 00 04 00 00       	push   0x400
c001ca19:	6a 00                	push   0x0
c001ca1b:	50                   	push   eax
c001ca1c:	e8 cf 3a fe ff       	call   c00004f0 <memset>
c001ca21:	8b 86 5c 01 00 00    	mov    eax,DWORD PTR [esi+0x15c]
c001ca27:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c001ca2b:	01 e8                	add    eax,ebp
c001ca2d:	83 c4 1c             	add    esp,0x1c
c001ca30:	89 03                	mov    DWORD PTR [ebx],eax
c001ca32:	c1 e2 08             	shl    edx,0x8
c001ca35:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001ca3c:	8d ba 00 80 00 00    	lea    edi,[edx+0x8000]
c001ca42:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c001ca48:	01 f8                	add    eax,edi
c001ca4a:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001ca4d:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001ca50:	68 00 01 00 00       	push   0x100
c001ca55:	6a 00                	push   0x0
c001ca57:	50                   	push   eax
c001ca58:	e8 93 3a fe ff       	call   c00004f0 <memset>
c001ca5d:	8b 96 5c 01 00 00    	mov    edx,DWORD PTR [esi+0x15c]
c001ca63:	01 fa                	add    edx,edi
c001ca65:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c001ca69:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c001ca6c:	c1 e7 0d             	shl    edi,0xd
c001ca6f:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001ca76:	8d 87 00 a0 00 00    	lea    eax,[edi+0xa000]
c001ca7c:	03 ae 58 01 00 00    	add    ebp,DWORD PTR [esi+0x158]
c001ca82:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001ca86:	31 ff                	xor    edi,edi
c001ca88:	83 c4 10             	add    esp,0x10
c001ca8b:	66 c7 45 02 08 00    	mov    WORD PTR [ebp+0x2],0x8
c001ca91:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ca95:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c001ca9b:	83 c5 20             	add    ebp,0x20
c001ca9e:	01 f8                	add    eax,edi
c001caa0:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001caa3:	52                   	push   edx
c001caa4:	68 00 01 00 00       	push   0x100
c001caa9:	6a 00                	push   0x0
c001caab:	50                   	push   eax
c001caac:	e8 3f 3a fe ff       	call   c00004f0 <memset>
c001cab1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001cab5:	83 c4 10             	add    esp,0x10
c001cab8:	03 86 5c 01 00 00    	add    eax,DWORD PTR [esi+0x15c]
c001cabe:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c001cac5:	01 f8                	add    eax,edi
c001cac7:	81 c7 00 01 00 00    	add    edi,0x100
c001cacd:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001cad0:	81 ff 00 20 00 00    	cmp    edi,0x2000
c001cad6:	75 b3                	jne    c001ca8b <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa3>
c001cad8:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c001cadf:	50                   	push   eax
c001cae0:	50                   	push   eax
c001cae1:	53                   	push   ebx
c001cae2:	56                   	push   esi
c001cae3:	e8 b6 fe ff ff       	call   c001c99e <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>
c001cae8:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c001caef:	83 c4 2c             	add    esp,0x2c
c001caf2:	5b                   	pop    ebx
c001caf3:	5e                   	pop    esi
c001caf4:	5f                   	pop    edi
c001caf5:	5d                   	pop    ebp
c001caf6:	c3                   	ret    
c001caf7:	90                   	nop

c001caf8 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c001caf8:	55                   	push   ebp
c001caf9:	57                   	push   edi
c001cafa:	56                   	push   esi
c001cafb:	53                   	push   ebx
c001cafc:	31 db                	xor    ebx,ebx
c001cafe:	83 ec 0c             	sub    esp,0xc
c001cb01:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001cb05:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001cb09:	8b 78 0c             	mov    edi,DWORD PTR [eax+0xc]
c001cb0c:	f7 c7 01 00 00 00    	test   edi,0x1
c001cb12:	74 7a                	je     c001cb8e <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c001cb14:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001cb18:	89 d8                	mov    eax,ebx
c001cb1a:	c1 e0 07             	shl    eax,0x7
c001cb1d:	8d ac 01 00 01 00 00 	lea    ebp,[ecx+eax*1+0x100]
c001cb24:	55                   	push   ebp
c001cb25:	56                   	push   esi
c001cb26:	e8 2b fe ff ff       	call   c001c956 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c001cb2b:	5a                   	pop    edx
c001cb2c:	83 f8 01             	cmp    eax,0x1
c001cb2f:	59                   	pop    ecx
c001cb30:	75 21                	jne    c001cb53 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x5b>
c001cb32:	50                   	push   eax
c001cb33:	53                   	push   ebx
c001cb34:	55                   	push   ebp
c001cb35:	56                   	push   esi
c001cb36:	e8 ad fe ff ff       	call   c001c9e8 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001cb3b:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c001cb42:	e8 6f af fe ff       	call   c0007ab6 <malloc>
c001cb47:	89 c5                	mov    ebp,eax
c001cb49:	89 04 24             	mov    DWORD PTR [esp],eax
c001cb4c:	e8 99 10 00 00       	call   c001dbea <SATA::SATA()>
c001cb51:	eb 24                	jmp    c001cb77 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x7f>
c001cb53:	83 f8 04             	cmp    eax,0x4
c001cb56:	75 36                	jne    c001cb8e <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c001cb58:	51                   	push   ecx
c001cb59:	53                   	push   ebx
c001cb5a:	55                   	push   ebp
c001cb5b:	56                   	push   esi
c001cb5c:	e8 87 fe ff ff       	call   c001c9e8 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001cb61:	c7 04 24 84 01 00 00 	mov    DWORD PTR [esp],0x184
c001cb68:	e8 49 af fe ff       	call   c0007ab6 <malloc>
c001cb6d:	89 c5                	mov    ebp,eax
c001cb6f:	89 04 24             	mov    DWORD PTR [esp],eax
c001cb72:	e8 d5 17 00 00       	call   c001e34c <SATAPI::SATAPI()>
c001cb77:	58                   	pop    eax
c001cb78:	5a                   	pop    edx
c001cb79:	55                   	push   ebp
c001cb7a:	56                   	push   esi
c001cb7b:	e8 52 fe fe ff       	call   c000c9d2 <Device::addChild(Device*)>
c001cb80:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001cb83:	56                   	push   esi
c001cb84:	6a 00                	push   0x0
c001cb86:	53                   	push   ebx
c001cb87:	55                   	push   ebp
c001cb88:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001cb8b:	83 c4 20             	add    esp,0x20
c001cb8e:	d1 ef                	shr    edi,1
c001cb90:	43                   	inc    ebx
c001cb91:	83 fb 20             	cmp    ebx,0x20
c001cb94:	0f 85 72 ff ff ff    	jne    c001cb0c <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14>
c001cb9a:	83 c4 0c             	add    esp,0xc
c001cb9d:	5b                   	pop    ebx
c001cb9e:	5e                   	pop    esi
c001cb9f:	5f                   	pop    edi
c001cba0:	5d                   	pop    ebp
c001cba1:	c3                   	ret    

c001cba2 <SATABus::open(int, int, void*)>:
c001cba2:	83 ec 14             	sub    esp,0x14
c001cba5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001cba9:	8b 90 34 01 00 00    	mov    edx,DWORD PTR [eax+0x134]
c001cbaf:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c001cbb5:	52                   	push   edx
c001cbb6:	50                   	push   eax
c001cbb7:	e8 3c ff ff ff       	call   c001caf8 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c001cbbc:	31 c0                	xor    eax,eax
c001cbbe:	83 c4 1c             	add    esp,0x1c
c001cbc1:	c3                   	ret    

c001cbc2 <ATA::close(int, int, void*)>:
c001cbc2:	83 ec 0c             	sub    esp,0xc
c001cbc5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cbc9:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001cbcf:	85 c0                	test   eax,eax
c001cbd1:	74 0c                	je     c001cbdf <ATA::close(int, int, void*)+0x1d>
c001cbd3:	83 ec 0c             	sub    esp,0xc
c001cbd6:	8b 10                	mov    edx,DWORD PTR [eax]
c001cbd8:	50                   	push   eax
c001cbd9:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001cbdc:	83 c4 10             	add    esp,0x10
c001cbdf:	31 c0                	xor    eax,eax
c001cbe1:	83 c4 0c             	add    esp,0xc
c001cbe4:	c3                   	ret    
c001cbe5:	90                   	nop

c001cbe6 <ATA::powerSaving(PowerSavingLevel)>:
c001cbe6:	c3                   	ret    
c001cbe7:	90                   	nop

c001cbe8 <ATA::ATA()>:
c001cbe8:	83 ec 0c             	sub    esp,0xc
c001cbeb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cbef:	83 ec 04             	sub    esp,0x4
c001cbf2:	68 00 02 00 00       	push   0x200
c001cbf7:	68 1d 33 02 c0       	push   0xc002331d
c001cbfc:	50                   	push   eax
c001cbfd:	e8 9c 01 ff ff       	call   c000cd9e <PhysicalDisk::PhysicalDisk(char const*, int)>
c001cc02:	83 c4 10             	add    esp,0x10
c001cc05:	ba 90 32 02 c0       	mov    edx,0xc0023290
c001cc0a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cc0e:	89 10                	mov    DWORD PTR [eax],edx
c001cc10:	90                   	nop
c001cc11:	83 c4 0c             	add    esp,0xc
c001cc14:	c3                   	ret    
c001cc15:	90                   	nop

c001cc16 <ATA::flush(bool)>:
c001cc16:	53                   	push   ebx
c001cc17:	83 ec 08             	sub    esp,0x8
c001cc1a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001cc1e:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001cc23:	83 f8 01             	cmp    eax,0x1
c001cc26:	19 c0                	sbb    eax,eax
c001cc28:	83 e0 fd             	and    eax,0xfffffffd
c001cc2b:	05 ea 00 00 00       	add    eax,0xea
c001cc30:	50                   	push   eax
c001cc31:	6a 07                	push   0x7
c001cc33:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cc3a:	50                   	push   eax
c001cc3b:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cc41:	e8 16 f1 ff ff       	call   c001bd5c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cc46:	83 c4 0c             	add    esp,0xc
c001cc49:	6a 00                	push   0x0
c001cc4b:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cc52:	50                   	push   eax
c001cc53:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cc59:	e8 e6 fb ff ff       	call   c001c844 <IDE::polling(unsigned char, unsigned int)>
c001cc5e:	83 c4 18             	add    esp,0x18
c001cc61:	5b                   	pop    ebx
c001cc62:	c3                   	ret    
c001cc63:	90                   	nop

c001cc64 <ATA::readyForCommand()>:
c001cc64:	56                   	push   esi
c001cc65:	53                   	push   ebx
c001cc66:	53                   	push   ebx
c001cc67:	31 db                	xor    ebx,ebx
c001cc69:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001cc6d:	51                   	push   ecx
c001cc6e:	6a 0c                	push   0xc
c001cc70:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001cc77:	50                   	push   eax
c001cc78:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001cc7e:	e8 99 f1 ff ff       	call   c001be1c <IDE::read(unsigned char, unsigned char)>
c001cc83:	83 c4 10             	add    esp,0x10
c001cc86:	a8 88                	test   al,0x88
c001cc88:	74 1f                	je     c001cca9 <ATA::readyForCommand()+0x45>
c001cc8a:	43                   	inc    ebx
c001cc8b:	83 fb 63             	cmp    ebx,0x63
c001cc8e:	7e dd                	jle    c001cc6d <ATA::readyForCommand()+0x9>
c001cc90:	83 ec 0c             	sub    esp,0xc
c001cc93:	6a 0a                	push   0xa
c001cc95:	e8 26 97 ff ff       	call   c00163c0 <milliTenthSleep(unsigned int)>
c001cc9a:	83 c4 10             	add    esp,0x10
c001cc9d:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c001cca3:	75 c8                	jne    c001cc6d <ATA::readyForCommand()+0x9>
c001cca5:	31 c0                	xor    eax,eax
c001cca7:	eb 02                	jmp    c001ccab <ATA::readyForCommand()+0x47>
c001cca9:	b0 01                	mov    al,0x1
c001ccab:	5a                   	pop    edx
c001ccac:	5b                   	pop    ebx
c001ccad:	5e                   	pop    esi
c001ccae:	c3                   	ret    
c001ccaf:	90                   	nop

c001ccb0 <ATA::access(unsigned long long, int, void*, bool)>:
c001ccb0:	55                   	push   ebp
c001ccb1:	57                   	push   edi
c001ccb2:	56                   	push   esi
c001ccb3:	53                   	push   ebx
c001ccb4:	83 ec 2c             	sub    esp,0x2c
c001ccb7:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001ccbb:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001ccbf:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001ccc3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001ccc7:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c001cccb:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001cccf:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001ccd3:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001ccd9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001ccdd:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001cce3:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001cce7:	c1 e0 06             	shl    eax,0x6
c001ccea:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c001ccf2:	74 5d                	je     c001cd51 <ATA::access(unsigned long long, int, void*, bool)+0xa1>
c001ccf4:	89 fa                	mov    edx,edi
c001ccf6:	89 f0                	mov    eax,esi
c001ccf8:	0f ac d0 1c          	shrd   eax,edx,0x1c
c001ccfc:	c1 ea 1c             	shr    edx,0x1c
c001ccff:	89 d1                	mov    ecx,edx
c001cd01:	09 c1                	or     ecx,eax
c001cd03:	74 25                	je     c001cd2a <ATA::access(unsigned long long, int, void*, bool)+0x7a>
c001cd05:	31 ed                	xor    ebp,ebp
c001cd07:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c001cd0e:	89 fa                	mov    edx,edi
c001cd10:	89 f0                	mov    eax,esi
c001cd12:	0f ad d0             	shrd   eax,edx,cl
c001cd15:	d3 ea                	shr    edx,cl
c001cd17:	f6 c1 20             	test   cl,0x20
c001cd1a:	74 02                	je     c001cd1e <ATA::access(unsigned long long, int, void*, bool)+0x6e>
c001cd1c:	89 d0                	mov    eax,edx
c001cd1e:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c001cd22:	45                   	inc    ebp
c001cd23:	83 fd 06             	cmp    ebp,0x6
c001cd26:	75 df                	jne    c001cd07 <ATA::access(unsigned long long, int, void*, bool)+0x57>
c001cd28:	eb 76                	jmp    c001cda0 <ATA::access(unsigned long long, int, void*, bool)+0xf0>
c001cd2a:	89 f0                	mov    eax,esi
c001cd2c:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c001cd31:	89 fa                	mov    edx,edi
c001cd33:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001cd3a:	0f ac d0 10          	shrd   eax,edx,0x10
c001cd3e:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001cd43:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001cd47:	c1 ee 18             	shr    esi,0x18
c001cd4a:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c001cd4f:	eb 56                	jmp    c001cda7 <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c001cd51:	6a 00                	push   0x0
c001cd53:	6a 3f                	push   0x3f
c001cd55:	57                   	push   edi
c001cd56:	56                   	push   esi
c001cd57:	e8 a4 2a 00 00       	call   c001f800 <__umoddi3>
c001cd5c:	83 c4 10             	add    esp,0x10
c001cd5f:	40                   	inc    eax
c001cd60:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c001cd64:	6a 00                	push   0x0
c001cd66:	68 f0 03 00 00       	push   0x3f0
c001cd6b:	57                   	push   edi
c001cd6c:	56                   	push   esi
c001cd6d:	e8 8e 29 00 00       	call   c001f700 <__udivdi3>
c001cd72:	83 c4 10             	add    esp,0x10
c001cd75:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c001cd7a:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001cd81:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001cd86:	6a 00                	push   0x0
c001cd88:	6a 3f                	push   0x3f
c001cd8a:	57                   	push   edi
c001cd8b:	56                   	push   esi
c001cd8c:	e8 6f 29 00 00       	call   c001f700 <__udivdi3>
c001cd91:	83 c4 10             	add    esp,0x10
c001cd94:	83 e0 0f             	and    eax,0xf
c001cd97:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c001cd9c:	89 c6                	mov    esi,eax
c001cd9e:	eb 07                	jmp    c001cda7 <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c001cda0:	31 f6                	xor    esi,esi
c001cda2:	c6 44 24 0e 02       	mov    BYTE PTR [esp+0xe],0x2
c001cda7:	bf 01 00 00 00       	mov    edi,0x1
c001cdac:	50                   	push   eax
c001cdad:	6a 00                	push   0x0
c001cdaf:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cdb6:	50                   	push   eax
c001cdb7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001cdbb:	e8 a4 f1 ff ff       	call   c001bf64 <IDE::enableIRQs(unsigned char, bool)>
c001cdc0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001cdc3:	e8 9c fe ff ff       	call   c001cc64 <ATA::readyForCommand()>
c001cdc8:	83 c4 10             	add    esp,0x10
c001cdcb:	84 c0                	test   al,al
c001cdcd:	0f 84 69 02 00 00    	je     c001d03c <ATA::access(unsigned long long, int, void*, bool)+0x38c>
c001cdd3:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001cdd9:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001cddf:	c1 e0 04             	shl    eax,0x4
c001cde2:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c001cde9:	09 c6                	or     esi,eax
c001cdeb:	f6 44 24 0e 03       	test   BYTE PTR [esp+0xe],0x3
c001cdf0:	75 05                	jne    c001cdf7 <ATA::access(unsigned long long, int, void*, bool)+0x147>
c001cdf2:	83 ce a0             	or     esi,0xffffffa0
c001cdf5:	eb 03                	jmp    c001cdfa <ATA::access(unsigned long long, int, void*, bool)+0x14a>
c001cdf7:	83 ce e0             	or     esi,0xffffffe0
c001cdfa:	89 f0                	mov    eax,esi
c001cdfc:	0f b6 f0             	movzx  esi,al
c001cdff:	56                   	push   esi
c001ce00:	6a 06                	push   0x6
c001ce02:	51                   	push   ecx
c001ce03:	52                   	push   edx
c001ce04:	e8 53 ef ff ff       	call   c001bd5c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ce09:	83 c4 10             	add    esp,0x10
c001ce0c:	6a 00                	push   0x0
c001ce0e:	6a 01                	push   0x1
c001ce10:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ce17:	50                   	push   eax
c001ce18:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ce1e:	e8 39 ef ff ff       	call   c001bd5c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ce23:	83 c4 10             	add    esp,0x10
c001ce26:	0f b6 44 24 0e       	movzx  eax,BYTE PTR [esp+0xe]
c001ce2b:	83 f8 02             	cmp    eax,0x2
c001ce2e:	75 6e                	jne    c001ce9e <ATA::access(unsigned long long, int, void*, bool)+0x1ee>
c001ce30:	6a 00                	push   0x0
c001ce32:	6a 08                	push   0x8
c001ce34:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ce3b:	50                   	push   eax
c001ce3c:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ce42:	e8 15 ef ff ff       	call   c001bd5c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ce47:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c001ce4c:	50                   	push   eax
c001ce4d:	6a 09                	push   0x9
c001ce4f:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ce56:	50                   	push   eax
c001ce57:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ce5d:	e8 fa ee ff ff       	call   c001bd5c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ce62:	83 c4 20             	add    esp,0x20
c001ce65:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c001ce6a:	50                   	push   eax
c001ce6b:	6a 0a                	push   0xa
c001ce6d:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ce74:	50                   	push   eax
c001ce75:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ce7b:	e8 dc ee ff ff       	call   c001bd5c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ce80:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c001ce85:	50                   	push   eax
c001ce86:	6a 0b                	push   0xb
c001ce88:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ce8f:	50                   	push   eax
c001ce90:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ce96:	e8 c1 ee ff ff       	call   c001bd5c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ce9b:	83 c4 20             	add    esp,0x20
c001ce9e:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c001cea3:	50                   	push   eax
c001cea4:	6a 02                	push   0x2
c001cea6:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cead:	50                   	push   eax
c001ceae:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ceb4:	e8 a3 ee ff ff       	call   c001bd5c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ceb9:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c001cebe:	50                   	push   eax
c001cebf:	6a 03                	push   0x3
c001cec1:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cec8:	50                   	push   eax
c001cec9:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cecf:	e8 88 ee ff ff       	call   c001bd5c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ced4:	83 c4 20             	add    esp,0x20
c001ced7:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c001cedc:	50                   	push   eax
c001cedd:	6a 04                	push   0x4
c001cedf:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cee6:	50                   	push   eax
c001cee7:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ceed:	e8 6a ee ff ff       	call   c001bd5c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cef2:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001cef7:	50                   	push   eax
c001cef8:	6a 05                	push   0x5
c001cefa:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cf01:	50                   	push   eax
c001cf02:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cf08:	e8 4f ee ff ff       	call   c001bd5c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cf0d:	83 c4 20             	add    esp,0x20
c001cf10:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001cf15:	0f b6 54 24 0e       	movzx  edx,BYTE PTR [esp+0xe]
c001cf1a:	74 11                	je     c001cf2d <ATA::access(unsigned long long, int, void*, bool)+0x27d>
c001cf1c:	b8 30 00 00 00       	mov    eax,0x30
c001cf21:	83 fa 02             	cmp    edx,0x2
c001cf24:	75 16                	jne    c001cf3c <ATA::access(unsigned long long, int, void*, bool)+0x28c>
c001cf26:	b8 34 00 00 00       	mov    eax,0x34
c001cf2b:	eb 0f                	jmp    c001cf3c <ATA::access(unsigned long long, int, void*, bool)+0x28c>
c001cf2d:	b8 20 00 00 00       	mov    eax,0x20
c001cf32:	83 fa 02             	cmp    edx,0x2
c001cf35:	75 05                	jne    c001cf3c <ATA::access(unsigned long long, int, void*, bool)+0x28c>
c001cf37:	b8 24 00 00 00       	mov    eax,0x24
c001cf3c:	50                   	push   eax
c001cf3d:	6a 07                	push   0x7
c001cf3f:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cf46:	50                   	push   eax
c001cf47:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cf4d:	e8 0a ee ff ff       	call   c001bd5c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cf52:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c001cf56:	83 c4 10             	add    esp,0x10
c001cf59:	0f b6 6c 24 0f       	movzx  ebp,BYTE PTR [esp+0xf]
c001cf5e:	85 f6                	test   esi,esi
c001cf60:	0f 84 b3 00 00 00    	je     c001d019 <ATA::access(unsigned long long, int, void*, bool)+0x369>
c001cf66:	50                   	push   eax
c001cf67:	6a 01                	push   0x1
c001cf69:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cf70:	50                   	push   eax
c001cf71:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cf77:	e8 c8 f8 ff ff       	call   c001c844 <IDE::polling(unsigned char, unsigned int)>
c001cf7c:	83 c4 10             	add    esp,0x10
c001cf7f:	0f b6 f8             	movzx  edi,al
c001cf82:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c001cf88:	85 ff                	test   edi,edi
c001cf8a:	74 1d                	je     c001cfa9 <ATA::access(unsigned long long, int, void*, bool)+0x2f9>
c001cf8c:	57                   	push   edi
c001cf8d:	0f b6 d2             	movzx  edx,dl
c001cf90:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c001cf97:	50                   	push   eax
c001cf98:	52                   	push   edx
c001cf99:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cf9f:	e8 e6 f7 ff ff       	call   c001c78a <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001cfa4:	e9 90 00 00 00       	jmp    c001d039 <ATA::access(unsigned long long, int, void*, bool)+0x389>
c001cfa9:	85 ed                	test   ebp,ebp
c001cfab:	74 3b                	je     c001cfe8 <ATA::access(unsigned long long, int, void*, bool)+0x338>
c001cfad:	31 c9                	xor    ecx,ecx
c001cfaf:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001cfb3:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001cfb7:	66 8b 3c 48          	mov    di,WORD PTR [eax+ecx*2]
c001cfbb:	50                   	push   eax
c001cfbc:	50                   	push   eax
c001cfbd:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cfc4:	50                   	push   eax
c001cfc5:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cfcb:	e8 7a ed ff ff       	call   c001bd4a <IDE::getBase(unsigned char)>
c001cfd0:	89 c2                	mov    edx,eax
c001cfd2:	89 f8                	mov    eax,edi
c001cfd4:	66 ef                	out    dx,ax
c001cfd6:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001cfda:	83 c4 10             	add    esp,0x10
c001cfdd:	41                   	inc    ecx
c001cfde:	81 f9 00 01 00 00    	cmp    ecx,0x100
c001cfe4:	75 c9                	jne    c001cfaf <ATA::access(unsigned long long, int, void*, bool)+0x2ff>
c001cfe6:	eb 23                	jmp    c001d00b <ATA::access(unsigned long long, int, void*, bool)+0x35b>
c001cfe8:	0f b6 d2             	movzx  edx,dl
c001cfeb:	51                   	push   ecx
c001cfec:	51                   	push   ecx
c001cfed:	52                   	push   edx
c001cfee:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cff4:	e8 51 ed ff ff       	call   c001bd4a <IDE::getBase(unsigned char)>
c001cff9:	b9 00 01 00 00       	mov    ecx,0x100
c001cffe:	89 c2                	mov    edx,eax
c001d000:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c001d004:	fc                   	cld    
c001d005:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c001d008:	83 c4 10             	add    esp,0x10
c001d00b:	81 44 24 50 00 02 00 00 	add    DWORD PTR [esp+0x50],0x200
c001d013:	4e                   	dec    esi
c001d014:	e9 45 ff ff ff       	jmp    c001cf5e <ATA::access(unsigned long long, int, void*, bool)+0x2ae>
c001d019:	31 ff                	xor    edi,edi
c001d01b:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001d020:	74 1a                	je     c001d03c <ATA::access(unsigned long long, int, void*, bool)+0x38c>
c001d022:	50                   	push   eax
c001d023:	50                   	push   eax
c001d024:	0f b6 44 24 16       	movzx  eax,BYTE PTR [esp+0x16]
c001d029:	83 f8 02             	cmp    eax,0x2
c001d02c:	0f 94 c0             	sete   al
c001d02f:	0f b6 c0             	movzx  eax,al
c001d032:	50                   	push   eax
c001d033:	53                   	push   ebx
c001d034:	e8 dd fb ff ff       	call   c001cc16 <ATA::flush(bool)>
c001d039:	83 c4 10             	add    esp,0x10
c001d03c:	83 c4 2c             	add    esp,0x2c
c001d03f:	89 f8                	mov    eax,edi
c001d041:	5b                   	pop    ebx
c001d042:	5e                   	pop    esi
c001d043:	5f                   	pop    edi
c001d044:	5d                   	pop    ebp
c001d045:	c3                   	ret    

c001d046 <ATA::detectCHS()>:
c001d046:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001d04a:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c001d050:	c1 e0 06             	shl    eax,0x6
c001d053:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c001d059:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c001d063:	c7 44 24 04 74 32 02 c0 	mov    DWORD PTR [esp+0x4],0xc0023274
c001d06b:	e9 bb 45 ff ff       	jmp    c001162b <KePanic(char const*)>

c001d070 <ATA::open(int, int, void*)>:
c001d070:	53                   	push   ebx
c001d071:	83 ec 08             	sub    esp,0x8
c001d074:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001d078:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001d07c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d080:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001d086:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001d08c:	c1 e0 06             	shl    eax,0x6
c001d08f:	01 d0                	add    eax,edx
c001d091:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c001d098:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c001d09e:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c001d0a5:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001d0af:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c001d0b5:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c001d0bc:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c001d0c3:	75 0c                	jne    c001d0d1 <ATA::open(int, int, void*)+0x61>
c001d0c5:	83 ec 0c             	sub    esp,0xc
c001d0c8:	53                   	push   ebx
c001d0c9:	e8 78 ff ff ff       	call   c001d046 <ATA::detectCHS()>
c001d0ce:	83 c4 10             	add    esp,0x10
c001d0d1:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001d0d7:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001d0dd:	c1 e0 06             	shl    eax,0x6
c001d0e0:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c001d0e7:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001d0f1:	d1 e8                	shr    eax,1
c001d0f3:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c001d0f9:	6a 04                	push   0x4
c001d0fb:	6a 0c                	push   0xc
c001d0fd:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d104:	50                   	push   eax
c001d105:	52                   	push   edx
c001d106:	e8 51 ec ff ff       	call   c001bd5c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d10b:	90                   	nop
c001d10c:	90                   	nop
c001d10d:	6a 00                	push   0x0
c001d10f:	6a 0c                	push   0xc
c001d111:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d118:	50                   	push   eax
c001d119:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d11f:	e8 38 ec ff ff       	call   c001bd5c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d124:	83 c4 14             	add    esp,0x14
c001d127:	53                   	push   ebx
c001d128:	e8 d9 fc fe ff       	call   c000ce06 <PhysicalDisk::startCache()>
c001d12d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d130:	e8 15 0f ff ff       	call   c000e04a <createPartitionsForDisk(PhysicalDisk*)>
c001d135:	31 c0                	xor    eax,eax
c001d137:	83 c4 18             	add    esp,0x18
c001d13a:	5b                   	pop    ebx
c001d13b:	c3                   	ret    

c001d13c <combineCharAndColour(char, unsigned char)>:
c001d13c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001d141:	66 0f be 54 24 04    	movsx  dx,BYTE PTR [esp+0x4]
c001d147:	c1 e0 08             	shl    eax,0x8
c001d14a:	09 d0                	or     eax,edx
c001d14c:	c3                   	ret    

c001d14d <combineColours(unsigned char, unsigned char)>:
c001d14d:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001d152:	c1 e0 04             	shl    eax,0x4
c001d155:	0b 44 24 04          	or     eax,DWORD PTR [esp+0x4]
c001d159:	c3                   	ret    

c001d15a <ATA::read(unsigned long long, int, void*)>:
c001d15a:	55                   	push   ebp
c001d15b:	57                   	push   edi
c001d15c:	56                   	push   esi
c001d15d:	be 04 00 00 00       	mov    esi,0x4
c001d162:	53                   	push   ebx
c001d163:	83 ec 0c             	sub    esp,0xc
c001d166:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001d16a:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d16e:	8d 7b ff             	lea    edi,[ebx-0x1]
c001d171:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001d175:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001d179:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001d17f:	0f 87 a1 01 00 00    	ja     c001d326 <ATA::read(unsigned long long, int, void*)+0x1cc>
c001d185:	be 06 00 00 00       	mov    esi,0x6
c001d18a:	85 c9                	test   ecx,ecx
c001d18c:	0f 84 94 01 00 00    	je     c001d326 <ATA::read(unsigned long long, int, void*)+0x1cc>
c001d192:	55                   	push   ebp
c001d193:	55                   	push   ebp
c001d194:	6a 00                	push   0x0
c001d196:	51                   	push   ecx
c001d197:	53                   	push   ebx
c001d198:	52                   	push   edx
c001d199:	50                   	push   eax
c001d19a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001d19e:	e8 0d fb ff ff       	call   c001ccb0 <ATA::access(unsigned long long, int, void*, bool)>
c001d1a3:	83 c4 20             	add    esp,0x20
c001d1a6:	89 c6                	mov    esi,eax
c001d1a8:	85 c0                	test   eax,eax
c001d1aa:	0f 85 71 01 00 00    	jne    c001d321 <ATA::read(unsigned long long, int, void*)+0x1c7>
c001d1b0:	03 1d b4 d0 02 c0    	add    ebx,DWORD PTR ds:0xc002d0b4
c001d1b6:	89 da                	mov    edx,ebx
c001d1b8:	50                   	push   eax
c001d1b9:	bd 10 27 00 00       	mov    ebp,0x2710
c001d1be:	50                   	push   eax
c001d1bf:	89 1d b4 d0 02 c0    	mov    DWORD PTR ds:0xc002d0b4,ebx
c001d1c5:	6a 0f                	push   0xf
c001d1c7:	6a 00                	push   0x0
c001d1c9:	e8 7f ff ff ff       	call   c001d14d <combineColours(unsigned char, unsigned char)>
c001d1ce:	59                   	pop    ecx
c001d1cf:	b9 0a 00 00 00       	mov    ecx,0xa
c001d1d4:	5b                   	pop    ebx
c001d1d5:	0f b6 d8             	movzx  ebx,al
c001d1d8:	89 d0                	mov    eax,edx
c001d1da:	53                   	push   ebx
c001d1db:	99                   	cdq    
c001d1dc:	f7 fd                	idiv   ebp
c001d1de:	99                   	cdq    
c001d1df:	f7 f9                	idiv   ecx
c001d1e1:	83 c2 30             	add    edx,0x30
c001d1e4:	0f b6 d2             	movzx  edx,dl
c001d1e7:	52                   	push   edx
c001d1e8:	e8 4f ff ff ff       	call   c001d13c <combineCharAndColour(char, unsigned char)>
c001d1ed:	5f                   	pop    edi
c001d1ee:	bf e8 03 00 00       	mov    edi,0x3e8
c001d1f3:	5a                   	pop    edx
c001d1f4:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c001d1fa:	53                   	push   ebx
c001d1fb:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001d200:	99                   	cdq    
c001d201:	f7 ff                	idiv   edi
c001d203:	99                   	cdq    
c001d204:	f7 f9                	idiv   ecx
c001d206:	8d 42 30             	lea    eax,[edx+0x30]
c001d209:	0f b6 c0             	movzx  eax,al
c001d20c:	50                   	push   eax
c001d20d:	e8 2a ff ff ff       	call   c001d13c <combineCharAndColour(char, unsigned char)>
c001d212:	5f                   	pop    edi
c001d213:	bf 64 00 00 00       	mov    edi,0x64
c001d218:	5a                   	pop    edx
c001d219:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001d21f:	53                   	push   ebx
c001d220:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001d225:	99                   	cdq    
c001d226:	f7 ff                	idiv   edi
c001d228:	99                   	cdq    
c001d229:	f7 f9                	idiv   ecx
c001d22b:	8d 42 30             	lea    eax,[edx+0x30]
c001d22e:	0f b6 c0             	movzx  eax,al
c001d231:	50                   	push   eax
c001d232:	e8 05 ff ff ff       	call   c001d13c <combineCharAndColour(char, unsigned char)>
c001d237:	5a                   	pop    edx
c001d238:	5a                   	pop    edx
c001d239:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c001d23f:	53                   	push   ebx
c001d240:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001d245:	99                   	cdq    
c001d246:	f7 f9                	idiv   ecx
c001d248:	99                   	cdq    
c001d249:	f7 f9                	idiv   ecx
c001d24b:	8d 42 30             	lea    eax,[edx+0x30]
c001d24e:	0f b6 c0             	movzx  eax,al
c001d251:	50                   	push   eax
c001d252:	e8 e5 fe ff ff       	call   c001d13c <combineCharAndColour(char, unsigned char)>
c001d257:	5a                   	pop    edx
c001d258:	5a                   	pop    edx
c001d259:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c001d25f:	53                   	push   ebx
c001d260:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001d265:	99                   	cdq    
c001d266:	f7 f9                	idiv   ecx
c001d268:	83 c2 30             	add    edx,0x30
c001d26b:	0f b6 d2             	movzx  edx,dl
c001d26e:	52                   	push   edx
c001d26f:	e8 c8 fe ff ff       	call   c001d13c <combineCharAndColour(char, unsigned char)>
c001d274:	5a                   	pop    edx
c001d275:	5a                   	pop    edx
c001d276:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c001d27c:	53                   	push   ebx
c001d27d:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001d282:	99                   	cdq    
c001d283:	f7 fd                	idiv   ebp
c001d285:	99                   	cdq    
c001d286:	f7 f9                	idiv   ecx
c001d288:	8d 42 30             	lea    eax,[edx+0x30]
c001d28b:	0f b6 c0             	movzx  eax,al
c001d28e:	50                   	push   eax
c001d28f:	e8 a8 fe ff ff       	call   c001d13c <combineCharAndColour(char, unsigned char)>
c001d294:	5d                   	pop    ebp
c001d295:	bd e8 03 00 00       	mov    ebp,0x3e8
c001d29a:	5a                   	pop    edx
c001d29b:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c001d2a1:	53                   	push   ebx
c001d2a2:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001d2a7:	99                   	cdq    
c001d2a8:	f7 fd                	idiv   ebp
c001d2aa:	99                   	cdq    
c001d2ab:	f7 f9                	idiv   ecx
c001d2ad:	8d 42 30             	lea    eax,[edx+0x30]
c001d2b0:	0f b6 c0             	movzx  eax,al
c001d2b3:	50                   	push   eax
c001d2b4:	e8 83 fe ff ff       	call   c001d13c <combineCharAndColour(char, unsigned char)>
c001d2b9:	5d                   	pop    ebp
c001d2ba:	5a                   	pop    edx
c001d2bb:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001d2c1:	53                   	push   ebx
c001d2c2:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001d2c7:	99                   	cdq    
c001d2c8:	f7 ff                	idiv   edi
c001d2ca:	99                   	cdq    
c001d2cb:	f7 f9                	idiv   ecx
c001d2cd:	8d 42 30             	lea    eax,[edx+0x30]
c001d2d0:	0f b6 c0             	movzx  eax,al
c001d2d3:	50                   	push   eax
c001d2d4:	e8 63 fe ff ff       	call   c001d13c <combineCharAndColour(char, unsigned char)>
c001d2d9:	5f                   	pop    edi
c001d2da:	5d                   	pop    ebp
c001d2db:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001d2e1:	53                   	push   ebx
c001d2e2:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001d2e7:	99                   	cdq    
c001d2e8:	f7 f9                	idiv   ecx
c001d2ea:	99                   	cdq    
c001d2eb:	f7 f9                	idiv   ecx
c001d2ed:	8d 42 30             	lea    eax,[edx+0x30]
c001d2f0:	0f b6 c0             	movzx  eax,al
c001d2f3:	50                   	push   eax
c001d2f4:	e8 43 fe ff ff       	call   c001d13c <combineCharAndColour(char, unsigned char)>
c001d2f9:	5a                   	pop    edx
c001d2fa:	5f                   	pop    edi
c001d2fb:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001d301:	53                   	push   ebx
c001d302:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001d307:	99                   	cdq    
c001d308:	f7 f9                	idiv   ecx
c001d30a:	83 c2 30             	add    edx,0x30
c001d30d:	0f b6 d2             	movzx  edx,dl
c001d310:	52                   	push   edx
c001d311:	e8 26 fe ff ff       	call   c001d13c <combineCharAndColour(char, unsigned char)>
c001d316:	83 c4 10             	add    esp,0x10
c001d319:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001d31f:	eb 05                	jmp    c001d326 <ATA::read(unsigned long long, int, void*)+0x1cc>
c001d321:	be 01 00 00 00       	mov    esi,0x1
c001d326:	83 c4 0c             	add    esp,0xc
c001d329:	89 f0                	mov    eax,esi
c001d32b:	5b                   	pop    ebx
c001d32c:	5e                   	pop    esi
c001d32d:	5f                   	pop    edi
c001d32e:	5d                   	pop    ebp
c001d32f:	c3                   	ret    

c001d330 <ATA::write(unsigned long long, int, void*)>:
c001d330:	55                   	push   ebp
c001d331:	57                   	push   edi
c001d332:	56                   	push   esi
c001d333:	be 04 00 00 00       	mov    esi,0x4
c001d338:	53                   	push   ebx
c001d339:	83 ec 0c             	sub    esp,0xc
c001d33c:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001d340:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d344:	8d 7b ff             	lea    edi,[ebx-0x1]
c001d347:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001d34b:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001d34f:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001d355:	0f 87 9c 01 00 00    	ja     c001d4f7 <ATA::write(unsigned long long, int, void*)+0x1c7>
c001d35b:	be 06 00 00 00       	mov    esi,0x6
c001d360:	85 c9                	test   ecx,ecx
c001d362:	0f 84 8f 01 00 00    	je     c001d4f7 <ATA::write(unsigned long long, int, void*)+0x1c7>
c001d368:	55                   	push   ebp
c001d369:	55                   	push   ebp
c001d36a:	6a 01                	push   0x1
c001d36c:	51                   	push   ecx
c001d36d:	53                   	push   ebx
c001d36e:	52                   	push   edx
c001d36f:	50                   	push   eax
c001d370:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001d374:	e8 37 f9 ff ff       	call   c001ccb0 <ATA::access(unsigned long long, int, void*, bool)>
c001d379:	83 c4 20             	add    esp,0x20
c001d37c:	89 c6                	mov    esi,eax
c001d37e:	85 c0                	test   eax,eax
c001d380:	0f 85 6c 01 00 00    	jne    c001d4f2 <ATA::write(unsigned long long, int, void*)+0x1c2>
c001d386:	01 1d b0 d0 02 c0    	add    DWORD PTR ds:0xc002d0b0,ebx
c001d38c:	bd 10 27 00 00       	mov    ebp,0x2710
c001d391:	50                   	push   eax
c001d392:	50                   	push   eax
c001d393:	6a 0f                	push   0xf
c001d395:	6a 00                	push   0x0
c001d397:	e8 b1 fd ff ff       	call   c001d14d <combineColours(unsigned char, unsigned char)>
c001d39c:	5a                   	pop    edx
c001d39d:	0f b6 d8             	movzx  ebx,al
c001d3a0:	59                   	pop    ecx
c001d3a1:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001d3a6:	53                   	push   ebx
c001d3a7:	b9 0a 00 00 00       	mov    ecx,0xa
c001d3ac:	99                   	cdq    
c001d3ad:	f7 fd                	idiv   ebp
c001d3af:	99                   	cdq    
c001d3b0:	f7 f9                	idiv   ecx
c001d3b2:	8d 42 30             	lea    eax,[edx+0x30]
c001d3b5:	0f b6 c0             	movzx  eax,al
c001d3b8:	50                   	push   eax
c001d3b9:	e8 7e fd ff ff       	call   c001d13c <combineCharAndColour(char, unsigned char)>
c001d3be:	5f                   	pop    edi
c001d3bf:	bf e8 03 00 00       	mov    edi,0x3e8
c001d3c4:	5a                   	pop    edx
c001d3c5:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c001d3cb:	53                   	push   ebx
c001d3cc:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001d3d1:	99                   	cdq    
c001d3d2:	f7 ff                	idiv   edi
c001d3d4:	99                   	cdq    
c001d3d5:	f7 f9                	idiv   ecx
c001d3d7:	8d 42 30             	lea    eax,[edx+0x30]
c001d3da:	0f b6 c0             	movzx  eax,al
c001d3dd:	50                   	push   eax
c001d3de:	e8 59 fd ff ff       	call   c001d13c <combineCharAndColour(char, unsigned char)>
c001d3e3:	5f                   	pop    edi
c001d3e4:	bf 64 00 00 00       	mov    edi,0x64
c001d3e9:	5a                   	pop    edx
c001d3ea:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001d3f0:	53                   	push   ebx
c001d3f1:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001d3f6:	99                   	cdq    
c001d3f7:	f7 ff                	idiv   edi
c001d3f9:	99                   	cdq    
c001d3fa:	f7 f9                	idiv   ecx
c001d3fc:	8d 42 30             	lea    eax,[edx+0x30]
c001d3ff:	0f b6 c0             	movzx  eax,al
c001d402:	50                   	push   eax
c001d403:	e8 34 fd ff ff       	call   c001d13c <combineCharAndColour(char, unsigned char)>
c001d408:	5a                   	pop    edx
c001d409:	5a                   	pop    edx
c001d40a:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c001d410:	53                   	push   ebx
c001d411:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001d416:	99                   	cdq    
c001d417:	f7 f9                	idiv   ecx
c001d419:	99                   	cdq    
c001d41a:	f7 f9                	idiv   ecx
c001d41c:	8d 42 30             	lea    eax,[edx+0x30]
c001d41f:	0f b6 c0             	movzx  eax,al
c001d422:	50                   	push   eax
c001d423:	e8 14 fd ff ff       	call   c001d13c <combineCharAndColour(char, unsigned char)>
c001d428:	5a                   	pop    edx
c001d429:	5a                   	pop    edx
c001d42a:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c001d430:	53                   	push   ebx
c001d431:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001d436:	99                   	cdq    
c001d437:	f7 f9                	idiv   ecx
c001d439:	8d 42 30             	lea    eax,[edx+0x30]
c001d43c:	0f b6 c0             	movzx  eax,al
c001d43f:	50                   	push   eax
c001d440:	e8 f7 fc ff ff       	call   c001d13c <combineCharAndColour(char, unsigned char)>
c001d445:	5a                   	pop    edx
c001d446:	5a                   	pop    edx
c001d447:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c001d44d:	53                   	push   ebx
c001d44e:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001d453:	99                   	cdq    
c001d454:	f7 fd                	idiv   ebp
c001d456:	99                   	cdq    
c001d457:	f7 f9                	idiv   ecx
c001d459:	8d 42 30             	lea    eax,[edx+0x30]
c001d45c:	0f b6 c0             	movzx  eax,al
c001d45f:	50                   	push   eax
c001d460:	e8 d7 fc ff ff       	call   c001d13c <combineCharAndColour(char, unsigned char)>
c001d465:	5d                   	pop    ebp
c001d466:	bd e8 03 00 00       	mov    ebp,0x3e8
c001d46b:	5a                   	pop    edx
c001d46c:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c001d472:	53                   	push   ebx
c001d473:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001d478:	99                   	cdq    
c001d479:	f7 fd                	idiv   ebp
c001d47b:	99                   	cdq    
c001d47c:	f7 f9                	idiv   ecx
c001d47e:	8d 42 30             	lea    eax,[edx+0x30]
c001d481:	0f b6 c0             	movzx  eax,al
c001d484:	50                   	push   eax
c001d485:	e8 b2 fc ff ff       	call   c001d13c <combineCharAndColour(char, unsigned char)>
c001d48a:	5d                   	pop    ebp
c001d48b:	5a                   	pop    edx
c001d48c:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001d492:	53                   	push   ebx
c001d493:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001d498:	99                   	cdq    
c001d499:	f7 ff                	idiv   edi
c001d49b:	99                   	cdq    
c001d49c:	f7 f9                	idiv   ecx
c001d49e:	8d 42 30             	lea    eax,[edx+0x30]
c001d4a1:	0f b6 c0             	movzx  eax,al
c001d4a4:	50                   	push   eax
c001d4a5:	e8 92 fc ff ff       	call   c001d13c <combineCharAndColour(char, unsigned char)>
c001d4aa:	5f                   	pop    edi
c001d4ab:	5d                   	pop    ebp
c001d4ac:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001d4b2:	53                   	push   ebx
c001d4b3:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001d4b8:	99                   	cdq    
c001d4b9:	f7 f9                	idiv   ecx
c001d4bb:	99                   	cdq    
c001d4bc:	f7 f9                	idiv   ecx
c001d4be:	8d 42 30             	lea    eax,[edx+0x30]
c001d4c1:	0f b6 c0             	movzx  eax,al
c001d4c4:	50                   	push   eax
c001d4c5:	e8 72 fc ff ff       	call   c001d13c <combineCharAndColour(char, unsigned char)>
c001d4ca:	5a                   	pop    edx
c001d4cb:	5f                   	pop    edi
c001d4cc:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001d4d2:	53                   	push   ebx
c001d4d3:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001d4d8:	99                   	cdq    
c001d4d9:	f7 f9                	idiv   ecx
c001d4db:	83 c2 30             	add    edx,0x30
c001d4de:	0f b6 d2             	movzx  edx,dl
c001d4e1:	52                   	push   edx
c001d4e2:	e8 55 fc ff ff       	call   c001d13c <combineCharAndColour(char, unsigned char)>
c001d4e7:	83 c4 10             	add    esp,0x10
c001d4ea:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001d4f0:	eb 05                	jmp    c001d4f7 <ATA::write(unsigned long long, int, void*)+0x1c7>
c001d4f2:	be 01 00 00 00       	mov    esi,0x1
c001d4f7:	83 c4 0c             	add    esp,0xc
c001d4fa:	89 f0                	mov    eax,esi
c001d4fc:	5b                   	pop    ebx
c001d4fd:	5e                   	pop    esi
c001d4fe:	5f                   	pop    edi
c001d4ff:	5d                   	pop    ebp
c001d500:	c3                   	ret    
c001d501:	90                   	nop

c001d502 <ATAPI::write(unsigned long long, int, void*)>:
c001d502:	b8 03 00 00 00       	mov    eax,0x3
c001d507:	c3                   	ret    

c001d508 <ATAPI::close(int, int, void*)>:
c001d508:	83 ec 0c             	sub    esp,0xc
c001d50b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d50f:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001d515:	85 c0                	test   eax,eax
c001d517:	74 0c                	je     c001d525 <ATAPI::close(int, int, void*)+0x1d>
c001d519:	83 ec 0c             	sub    esp,0xc
c001d51c:	8b 10                	mov    edx,DWORD PTR [eax]
c001d51e:	50                   	push   eax
c001d51f:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001d522:	83 c4 10             	add    esp,0x10
c001d525:	31 c0                	xor    eax,eax
c001d527:	83 c4 0c             	add    esp,0xc
c001d52a:	c3                   	ret    
c001d52b:	90                   	nop

c001d52c <ATAPI::ATAPI()>:
c001d52c:	83 ec 0c             	sub    esp,0xc
c001d52f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d533:	83 ec 04             	sub    esp,0x4
c001d536:	68 00 08 00 00       	push   0x800
c001d53b:	68 bd 33 02 c0       	push   0xc00233bd
c001d540:	50                   	push   eax
c001d541:	e8 58 f8 fe ff       	call   c000cd9e <PhysicalDisk::PhysicalDisk(char const*, int)>
c001d546:	83 c4 10             	add    esp,0x10
c001d549:	ba d8 32 02 c0       	mov    edx,0xc00232d8
c001d54e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d552:	89 10                	mov    DWORD PTR [eax],edx
c001d554:	90                   	nop
c001d555:	83 c4 0c             	add    esp,0xc
c001d558:	c3                   	ret    
c001d559:	90                   	nop

c001d55a <ATAPI::readyForCommand()>:
c001d55a:	56                   	push   esi
c001d55b:	53                   	push   ebx
c001d55c:	53                   	push   ebx
c001d55d:	31 db                	xor    ebx,ebx
c001d55f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001d563:	51                   	push   ecx
c001d564:	6a 0c                	push   0xc
c001d566:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001d56d:	50                   	push   eax
c001d56e:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001d574:	e8 a3 e8 ff ff       	call   c001be1c <IDE::read(unsigned char, unsigned char)>
c001d579:	83 c4 10             	add    esp,0x10
c001d57c:	a8 88                	test   al,0x88
c001d57e:	74 25                	je     c001d5a5 <ATAPI::readyForCommand()+0x4b>
c001d580:	43                   	inc    ebx
c001d581:	81 fb 9f 05 00 00    	cmp    ebx,0x59f
c001d587:	7e da                	jle    c001d563 <ATAPI::readyForCommand()+0x9>
c001d589:	83 ec 0c             	sub    esp,0xc
c001d58c:	68 5e 01 00 00       	push   0x15e
c001d591:	e8 2a 8e ff ff       	call   c00163c0 <milliTenthSleep(unsigned int)>
c001d596:	83 c4 10             	add    esp,0x10
c001d599:	81 fb dc 05 00 00    	cmp    ebx,0x5dc
c001d59f:	75 c2                	jne    c001d563 <ATAPI::readyForCommand()+0x9>
c001d5a1:	31 c0                	xor    eax,eax
c001d5a3:	eb 02                	jmp    c001d5a7 <ATAPI::readyForCommand()+0x4d>
c001d5a5:	b0 01                	mov    al,0x1
c001d5a7:	5a                   	pop    edx
c001d5a8:	5b                   	pop    ebx
c001d5a9:	5e                   	pop    esi
c001d5aa:	c3                   	ret    
c001d5ab:	90                   	nop

c001d5ac <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c001d5ac:	55                   	push   ebp
c001d5ad:	57                   	push   edi
c001d5ae:	56                   	push   esi
c001d5af:	53                   	push   ebx
c001d5b0:	83 ec 20             	sub    esp,0x20
c001d5b3:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001d5b7:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c001d5bb:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001d5bf:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001d5c3:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001d5c7:	6a 01                	push   0x1
c001d5c9:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d5d0:	50                   	push   eax
c001d5d1:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d5d7:	e8 88 e9 ff ff       	call   c001bf64 <IDE::enableIRQs(unsigned char, bool)>
c001d5dc:	5e                   	pop    esi
c001d5dd:	58                   	pop    eax
c001d5de:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d5e5:	50                   	push   eax
c001d5e6:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d5ec:	e8 45 e7 ff ff       	call   c001bd36 <IDE::prepareInterrupt(unsigned char)>
c001d5f1:	89 3c 24             	mov    DWORD PTR [esp],edi
c001d5f4:	e8 61 ff ff ff       	call   c001d55a <ATAPI::readyForCommand()>
c001d5f9:	83 c4 10             	add    esp,0x10
c001d5fc:	84 c0                	test   al,al
c001d5fe:	75 0a                	jne    c001d60a <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c001d600:	bb 01 00 00 00       	mov    ebx,0x1
c001d605:	e9 60 02 00 00       	jmp    c001d86a <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2be>
c001d60a:	8b 87 74 01 00 00    	mov    eax,DWORD PTR [edi+0x174]
c001d610:	c1 e0 04             	shl    eax,0x4
c001d613:	0f b6 c0             	movzx  eax,al
c001d616:	50                   	push   eax
c001d617:	6a 06                	push   0x6
c001d619:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d620:	50                   	push   eax
c001d621:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d627:	e8 30 e7 ff ff       	call   c001bd5c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d62c:	6a 00                	push   0x0
c001d62e:	6a 01                	push   0x1
c001d630:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d637:	50                   	push   eax
c001d638:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d63e:	e8 19 e7 ff ff       	call   c001bd5c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d643:	83 c4 20             	add    esp,0x20
c001d646:	0f b6 c3             	movzx  eax,bl
c001d649:	0f b6 df             	movzx  ebx,bh
c001d64c:	50                   	push   eax
c001d64d:	6a 04                	push   0x4
c001d64f:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d656:	50                   	push   eax
c001d657:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d65d:	e8 fa e6 ff ff       	call   c001bd5c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d662:	53                   	push   ebx
c001d663:	6a 05                	push   0x5
c001d665:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d66c:	50                   	push   eax
c001d66d:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d673:	e8 e4 e6 ff ff       	call   c001bd5c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d678:	83 c4 20             	add    esp,0x20
c001d67b:	68 a0 00 00 00       	push   0xa0
c001d680:	6a 07                	push   0x7
c001d682:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d689:	50                   	push   eax
c001d68a:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d690:	e8 c7 e6 ff ff       	call   c001bd5c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d695:	83 c4 0c             	add    esp,0xc
c001d698:	6a 01                	push   0x1
c001d69a:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d6a1:	50                   	push   eax
c001d6a2:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d6a8:	e8 97 f1 ff ff       	call   c001c844 <IDE::polling(unsigned char, unsigned int)>
c001d6ad:	83 c4 10             	add    esp,0x10
c001d6b0:	0f b6 d8             	movzx  ebx,al
c001d6b3:	8b 87 70 01 00 00    	mov    eax,DWORD PTR [edi+0x170]
c001d6b9:	85 db                	test   ebx,ebx
c001d6bb:	74 20                	je     c001d6dd <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c001d6bd:	53                   	push   ebx
c001d6be:	0f b6 c0             	movzx  eax,al
c001d6c1:	0f b6 97 74 01 00 00 	movzx  edx,BYTE PTR [edi+0x174]
c001d6c8:	52                   	push   edx
c001d6c9:	50                   	push   eax
c001d6ca:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d6d0:	e8 b5 f0 ff ff       	call   c001c78a <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001d6d5:	83 c4 10             	add    esp,0x10
c001d6d8:	e9 8d 01 00 00       	jmp    c001d86a <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2be>
c001d6dd:	0f b6 c0             	movzx  eax,al
c001d6e0:	53                   	push   ebx
c001d6e1:	53                   	push   ebx
c001d6e2:	50                   	push   eax
c001d6e3:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d6e9:	e8 5c e6 ff ff       	call   c001bd4a <IDE::getBase(unsigned char)>
c001d6ee:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001d6f2:	b9 06 00 00 00       	mov    ecx,0x6
c001d6f7:	89 c2                	mov    edx,eax
c001d6f9:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c001d6fc:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c001d700:	83 c4 10             	add    esp,0x10
c001d703:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c001d708:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001d70c:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001d712:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001d719:	85 db                	test   ebx,ebx
c001d71b:	0f 84 ec 00 00 00    	je     c001d80d <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x261>
c001d721:	51                   	push   ecx
c001d722:	51                   	push   ecx
c001d723:	52                   	push   edx
c001d724:	50                   	push   eax
c001d725:	e8 a0 e7 ff ff       	call   c001beca <IDE::waitInterrupt(unsigned char)>
c001d72a:	83 c4 10             	add    esp,0x10
c001d72d:	84 c0                	test   al,al
c001d72f:	0f 84 cb fe ff ff    	je     c001d600 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c001d735:	56                   	push   esi
c001d736:	56                   	push   esi
c001d737:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d73e:	50                   	push   eax
c001d73f:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d745:	e8 ec e5 ff ff       	call   c001bd36 <IDE::prepareInterrupt(unsigned char)>
c001d74a:	83 c4 0c             	add    esp,0xc
c001d74d:	6a 04                	push   0x4
c001d74f:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d756:	50                   	push   eax
c001d757:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d75d:	e8 ba e6 ff ff       	call   c001be1c <IDE::read(unsigned char, unsigned char)>
c001d762:	83 c4 0c             	add    esp,0xc
c001d765:	89 c6                	mov    esi,eax
c001d767:	6a 05                	push   0x5
c001d769:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d770:	50                   	push   eax
c001d771:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d777:	e8 a0 e6 ff ff       	call   c001be1c <IDE::read(unsigned char, unsigned char)>
c001d77c:	89 f1                	mov    ecx,esi
c001d77e:	0f b6 c0             	movzx  eax,al
c001d781:	0f b6 f1             	movzx  esi,cl
c001d784:	c1 e0 08             	shl    eax,0x8
c001d787:	09 c6                	or     esi,eax
c001d789:	d1 fe                	sar    esi,1
c001d78b:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c001d78f:	83 c4 10             	add    esp,0x10
c001d792:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001d797:	74 41                	je     c001d7da <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x22e>
c001d799:	31 c9                	xor    ecx,ecx
c001d79b:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001d7a1:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001d7a8:	3b 4c 24 04          	cmp    ecx,DWORD PTR [esp+0x4]
c001d7ac:	75 0a                	jne    c001d7b8 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x20c>
c001d7ae:	01 c9                	add    ecx,ecx
c001d7b0:	01 cd                	add    ebp,ecx
c001d7b2:	4b                   	dec    ebx
c001d7b3:	e9 54 ff ff ff       	jmp    c001d70c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x160>
c001d7b8:	66 8b 74 4d 00       	mov    si,WORD PTR [ebp+ecx*2+0x0]
c001d7bd:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001d7c1:	51                   	push   ecx
c001d7c2:	51                   	push   ecx
c001d7c3:	52                   	push   edx
c001d7c4:	50                   	push   eax
c001d7c5:	e8 80 e5 ff ff       	call   c001bd4a <IDE::getBase(unsigned char)>
c001d7ca:	89 c2                	mov    edx,eax
c001d7cc:	89 f0                	mov    eax,esi
c001d7ce:	66 ef                	out    dx,ax
c001d7d0:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001d7d4:	83 c4 10             	add    esp,0x10
c001d7d7:	41                   	inc    ecx
c001d7d8:	eb c1                	jmp    c001d79b <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1ef>
c001d7da:	31 f6                	xor    esi,esi
c001d7dc:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001d7e2:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001d7e9:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c001d7ed:	75 06                	jne    c001d7f5 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x249>
c001d7ef:	01 f6                	add    esi,esi
c001d7f1:	01 f5                	add    ebp,esi
c001d7f3:	eb bd                	jmp    c001d7b2 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x206>
c001d7f5:	51                   	push   ecx
c001d7f6:	51                   	push   ecx
c001d7f7:	52                   	push   edx
c001d7f8:	50                   	push   eax
c001d7f9:	e8 4c e5 ff ff       	call   c001bd4a <IDE::getBase(unsigned char)>
c001d7fe:	89 c2                	mov    edx,eax
c001d800:	66 ed                	in     ax,dx
c001d802:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c001d807:	83 c4 10             	add    esp,0x10
c001d80a:	46                   	inc    esi
c001d80b:	eb cf                	jmp    c001d7dc <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x230>
c001d80d:	51                   	push   ecx
c001d80e:	51                   	push   ecx
c001d80f:	52                   	push   edx
c001d810:	50                   	push   eax
c001d811:	e8 b4 e6 ff ff       	call   c001beca <IDE::waitInterrupt(unsigned char)>
c001d816:	83 c4 10             	add    esp,0x10
c001d819:	84 c0                	test   al,al
c001d81b:	0f 84 df fd ff ff    	je     c001d600 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c001d821:	bb a0 86 01 00       	mov    ebx,0x186a0
c001d826:	52                   	push   edx
c001d827:	52                   	push   edx
c001d828:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d82f:	50                   	push   eax
c001d830:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d836:	e8 fb e4 ff ff       	call   c001bd36 <IDE::prepareInterrupt(unsigned char)>
c001d83b:	83 c4 10             	add    esp,0x10
c001d83e:	50                   	push   eax
c001d83f:	50                   	push   eax
c001d840:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d847:	50                   	push   eax
c001d848:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d84e:	e8 f7 e4 ff ff       	call   c001bd4a <IDE::getBase(unsigned char)>
c001d853:	8d 50 07             	lea    edx,[eax+0x7]
c001d856:	ec                   	in     al,dx
c001d857:	83 c4 10             	add    esp,0x10
c001d85a:	a8 88                	test   al,0x88
c001d85c:	74 0a                	je     c001d868 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2bc>
c001d85e:	4b                   	dec    ebx
c001d85f:	75 dd                	jne    c001d83e <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x292>
c001d861:	bb 02 00 00 00       	mov    ebx,0x2
c001d866:	eb 02                	jmp    c001d86a <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2be>
c001d868:	31 db                	xor    ebx,ebx
c001d86a:	83 c4 1c             	add    esp,0x1c
c001d86d:	89 d8                	mov    eax,ebx
c001d86f:	5b                   	pop    ebx
c001d870:	5e                   	pop    esi
c001d871:	5f                   	pop    edi
c001d872:	5d                   	pop    ebp
c001d873:	c3                   	ret    

c001d874 <ATAPI::diskRemoved()>:
c001d874:	53                   	push   ebx
c001d875:	83 ec 14             	sub    esp,0x14
c001d878:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001d87c:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001d883:	ff b3 80 01 00 00    	push   DWORD PTR [ebx+0x180]
c001d889:	e8 ac 04 ff ff       	call   c000dd3a <LogicalDisk::unmount()>
c001d88e:	58                   	pop    eax
c001d88f:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001d895:	e8 82 0e ff ff       	call   c000e71c <VCache::writeWriteBuffer()>
c001d89a:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c001d8a0:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001d8a4:	83 c4 18             	add    esp,0x18
c001d8a7:	5b                   	pop    ebx
c001d8a8:	e9 5f 0e ff ff       	jmp    c000e70c <VCache::invalidateReadBuffer()>
c001d8ad:	90                   	nop

c001d8ae <ATAPI::eject()>:
c001d8ae:	57                   	push   edi
c001d8af:	b9 03 00 00 00       	mov    ecx,0x3
c001d8b4:	53                   	push   ebx
c001d8b5:	83 ec 14             	sub    esp,0x14
c001d8b8:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001d8bc:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001d8c0:	fc                   	cld    
c001d8c1:	31 c0                	xor    eax,eax
c001d8c3:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001d8c5:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001d8ca:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001d8cf:	50                   	push   eax
c001d8d0:	50                   	push   eax
c001d8d1:	6a 00                	push   0x0
c001d8d3:	6a 00                	push   0x0
c001d8d5:	6a 00                	push   0x0
c001d8d7:	6a 02                	push   0x2
c001d8d9:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001d8dd:	50                   	push   eax
c001d8de:	53                   	push   ebx
c001d8df:	e8 c8 fc ff ff       	call   c001d5ac <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001d8e4:	83 c4 14             	add    esp,0x14
c001d8e7:	53                   	push   ebx
c001d8e8:	e8 87 ff ff ff       	call   c001d874 <ATAPI::diskRemoved()>
c001d8ed:	83 c4 24             	add    esp,0x24
c001d8f0:	31 c0                	xor    eax,eax
c001d8f2:	5b                   	pop    ebx
c001d8f3:	5f                   	pop    edi
c001d8f4:	c3                   	ret    
c001d8f5:	90                   	nop

c001d8f6 <ATAPI::diskInserted()>:
c001d8f6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d8fa:	c6 80 7c 01 00 00 01 	mov    BYTE PTR [eax+0x17c],0x1
c001d901:	c3                   	ret    

c001d902 <ATAPI::detectMedia()>:
c001d902:	56                   	push   esi
c001d903:	53                   	push   ebx
c001d904:	83 ec 28             	sub    esp,0x28
c001d907:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001d90b:	6a 0c                	push   0xc
c001d90d:	6a 00                	push   0x0
c001d90f:	8d 74 24 0e          	lea    esi,[esp+0xe]
c001d913:	56                   	push   esi
c001d914:	e8 d7 2b fe ff       	call   c00004f0 <memset>
c001d919:	58                   	pop    eax
c001d91a:	5a                   	pop    edx
c001d91b:	6a 00                	push   0x0
c001d91d:	6a 00                	push   0x0
c001d91f:	6a 00                	push   0x0
c001d921:	6a 00                	push   0x0
c001d923:	56                   	push   esi
c001d924:	53                   	push   ebx
c001d925:	e8 82 fc ff ff       	call   c001d5ac <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001d92a:	83 c4 1c             	add    esp,0x1c
c001d92d:	6a 0c                	push   0xc
c001d92f:	6a 00                	push   0x0
c001d931:	56                   	push   esi
c001d932:	e8 b9 2b fe ff       	call   c00004f0 <memset>
c001d937:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c001d93c:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c001d941:	59                   	pop    ecx
c001d942:	58                   	pop    eax
c001d943:	6a 01                	push   0x1
c001d945:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c001d949:	50                   	push   eax
c001d94a:	6a 00                	push   0x0
c001d94c:	6a 12                	push   0x12
c001d94e:	56                   	push   esi
c001d94f:	53                   	push   ebx
c001d950:	e8 57 fc ff ff       	call   c001d5ac <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001d955:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c001d959:	83 c4 20             	add    esp,0x20
c001d95c:	83 e0 7f             	and    eax,0x7f
c001d95f:	83 f8 70             	cmp    eax,0x70
c001d962:	74 15                	je     c001d979 <ATAPI::detectMedia()+0x77>
c001d964:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001d96b:	75 0c                	jne    c001d979 <ATAPI::detectMedia()+0x77>
c001d96d:	83 ec 0c             	sub    esp,0xc
c001d970:	53                   	push   ebx
c001d971:	e8 80 ff ff ff       	call   c001d8f6 <ATAPI::diskInserted()>
c001d976:	83 c4 10             	add    esp,0x10
c001d979:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001d97d:	83 e0 0f             	and    eax,0xf
c001d980:	83 f8 02             	cmp    eax,0x2
c001d983:	75 1b                	jne    c001d9a0 <ATAPI::detectMedia()+0x9e>
c001d985:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c001d98a:	75 2d                	jne    c001d9b9 <ATAPI::detectMedia()+0xb7>
c001d98c:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001d993:	74 24                	je     c001d9b9 <ATAPI::detectMedia()+0xb7>
c001d995:	83 ec 0c             	sub    esp,0xc
c001d998:	53                   	push   ebx
c001d999:	e8 d6 fe ff ff       	call   c001d874 <ATAPI::diskRemoved()>
c001d99e:	eb 16                	jmp    c001d9b6 <ATAPI::detectMedia()+0xb4>
c001d9a0:	85 c0                	test   eax,eax
c001d9a2:	75 15                	jne    c001d9b9 <ATAPI::detectMedia()+0xb7>
c001d9a4:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001d9ab:	75 0c                	jne    c001d9b9 <ATAPI::detectMedia()+0xb7>
c001d9ad:	83 ec 0c             	sub    esp,0xc
c001d9b0:	53                   	push   ebx
c001d9b1:	e8 40 ff ff ff       	call   c001d8f6 <ATAPI::diskInserted()>
c001d9b6:	83 c4 10             	add    esp,0x10
c001d9b9:	83 c4 24             	add    esp,0x24
c001d9bc:	5b                   	pop    ebx
c001d9bd:	5e                   	pop    esi
c001d9be:	c3                   	ret    
c001d9bf:	90                   	nop

c001d9c0 <ATAPI::open(int, int, void*)>:
c001d9c0:	56                   	push   esi
c001d9c1:	53                   	push   ebx
c001d9c2:	50                   	push   eax
c001d9c3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001d9c7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d9cb:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001d9cf:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001d9d5:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001d9db:	c1 e0 06             	shl    eax,0x6
c001d9de:	01 d0                	add    eax,edx
c001d9e0:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c001d9e7:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c001d9ed:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c001d9f4:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001d9fe:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001da04:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c001da0b:	6a 04                	push   0x4
c001da0d:	6a 0c                	push   0xc
c001da0f:	51                   	push   ecx
c001da10:	52                   	push   edx
c001da11:	e8 46 e3 ff ff       	call   c001bd5c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001da16:	90                   	nop
c001da17:	90                   	nop
c001da18:	6a 00                	push   0x0
c001da1a:	6a 0c                	push   0xc
c001da1c:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001da23:	50                   	push   eax
c001da24:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001da2a:	e8 2d e3 ff ff       	call   c001bd5c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001da2f:	83 c4 14             	add    esp,0x14
c001da32:	68 78 01 00 00       	push   0x178
c001da37:	e8 7a a0 fe ff       	call   c0007ab6 <malloc>
c001da3c:	83 c4 0c             	add    esp,0xc
c001da3f:	89 c6                	mov    esi,eax
c001da41:	6a 00                	push   0x0
c001da43:	68 ff ff ff 7f       	push   0x7fffffff
c001da48:	6a 00                	push   0x0
c001da4a:	6a 00                	push   0x0
c001da4c:	53                   	push   ebx
c001da4d:	68 6f 34 02 c0       	push   0xc002346f
c001da52:	50                   	push   eax
c001da53:	e8 20 01 ff ff       	call   c000db78 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001da58:	83 c4 14             	add    esp,0x14
c001da5b:	56                   	push   esi
c001da5c:	e8 d7 01 ff ff       	call   c000dc38 <LogicalDisk::assignDriveLetter()>
c001da61:	5a                   	pop    edx
c001da62:	0f be c0             	movsx  eax,al
c001da65:	59                   	pop    ecx
c001da66:	50                   	push   eax
c001da67:	68 c0 32 02 c0       	push   0xc00232c0
c001da6c:	e8 d4 ce fe ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001da71:	58                   	pop    eax
c001da72:	5a                   	pop    edx
c001da73:	56                   	push   esi
c001da74:	53                   	push   ebx
c001da75:	e8 58 ef fe ff       	call   c000c9d2 <Device::addChild(Device*)>
c001da7a:	89 b3 80 01 00 00    	mov    DWORD PTR [ebx+0x180],esi
c001da80:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001da83:	e8 7e f3 fe ff       	call   c000ce06 <PhysicalDisk::startCache()>
c001da88:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001da8f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001da92:	e8 6b fe ff ff       	call   c001d902 <ATAPI::detectMedia()>
c001da97:	83 c4 14             	add    esp,0x14
c001da9a:	31 c0                	xor    eax,eax
c001da9c:	5b                   	pop    ebx
c001da9d:	5e                   	pop    esi
c001da9e:	c3                   	ret    
c001da9f:	90                   	nop

c001daa0 <ATAPI::read(unsigned long long, int, void*)>:
c001daa0:	55                   	push   ebp
c001daa1:	57                   	push   edi
c001daa2:	56                   	push   esi
c001daa3:	53                   	push   ebx
c001daa4:	83 ec 1c             	sub    esp,0x1c
c001daa7:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001daab:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001daaf:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c001dab3:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001daba:	74 3c                	je     c001daf8 <ATAPI::read(unsigned long long, int, void*)+0x58>
c001dabc:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001dac0:	b9 03 00 00 00       	mov    ecx,0x3
c001dac5:	fc                   	cld    
c001dac6:	31 c0                	xor    eax,eax
c001dac8:	0f ce                	bswap  esi
c001daca:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001dacc:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c001dad1:	89 74 24 06          	mov    DWORD PTR [esp+0x6],esi
c001dad5:	89 e8                	mov    eax,ebp
c001dad7:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c001dadb:	50                   	push   eax
c001dadc:	50                   	push   eax
c001dadd:	55                   	push   ebp
c001dade:	c1 e5 0b             	shl    ebp,0xb
c001dae1:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001dae5:	6a 00                	push   0x0
c001dae7:	55                   	push   ebp
c001dae8:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001daec:	50                   	push   eax
c001daed:	53                   	push   ebx
c001daee:	e8 b9 fa ff ff       	call   c001d5ac <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001daf3:	83 c4 20             	add    esp,0x20
c001daf6:	eb 1a                	jmp    c001db12 <ATAPI::read(unsigned long long, int, void*)+0x72>
c001daf8:	83 ec 0c             	sub    esp,0xc
c001dafb:	53                   	push   ebx
c001dafc:	e8 01 fe ff ff       	call   c001d902 <ATAPI::detectMedia()>
c001db01:	83 c4 10             	add    esp,0x10
c001db04:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001db0b:	75 af                	jne    c001dabc <ATAPI::read(unsigned long long, int, void*)+0x1c>
c001db0d:	b8 02 00 00 00       	mov    eax,0x2
c001db12:	83 c4 1c             	add    esp,0x1c
c001db15:	5b                   	pop    ebx
c001db16:	5e                   	pop    esi
c001db17:	5f                   	pop    edi
c001db18:	5d                   	pop    ebp
c001db19:	c3                   	ret    

c001db1a <SATA::close(int, int, void*)>:
c001db1a:	83 ec 0c             	sub    esp,0xc
c001db1d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001db21:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001db27:	85 c0                	test   eax,eax
c001db29:	74 0c                	je     c001db37 <SATA::close(int, int, void*)+0x1d>
c001db2b:	83 ec 0c             	sub    esp,0xc
c001db2e:	8b 10                	mov    edx,DWORD PTR [eax]
c001db30:	50                   	push   eax
c001db31:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001db34:	83 c4 10             	add    esp,0x10
c001db37:	31 c0                	xor    eax,eax
c001db39:	83 c4 0c             	add    esp,0xc
c001db3c:	c3                   	ret    
c001db3d:	90                   	nop

c001db3e <SATA::powerSaving(PowerSavingLevel)>:
c001db3e:	c3                   	ret    
c001db3f:	90                   	nop

c001db40 <SATA::open(int, int, void*)>:
c001db40:	56                   	push   esi
c001db41:	53                   	push   ebx
c001db42:	50                   	push   eax
c001db43:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001db47:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001db4b:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001db55:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c001db5b:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c001db65:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001db69:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001db73:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001db79:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c001db80:	e8 3a a2 fe ff       	call   c0007dbf <Phys::allocatePage()>
c001db85:	89 c6                	mov    esi,eax
c001db87:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001db8d:	81 c6 00 10 00 00    	add    esi,0x1000
c001db93:	e8 27 a2 fe ff       	call   c0007dbf <Phys::allocatePage()>
c001db98:	39 c6                	cmp    esi,eax
c001db9a:	74 10                	je     c001dbac <SATA::open(int, int, void*)+0x6c>
c001db9c:	83 ec 0c             	sub    esp,0xc
c001db9f:	68 08 33 02 c0       	push   0xc0023308
c001dba4:	e8 82 3a ff ff       	call   c001162b <KePanic(char const*)>
c001dba9:	83 c4 10             	add    esp,0x10
c001dbac:	83 ec 0c             	sub    esp,0xc
c001dbaf:	6a 02                	push   0x2
c001dbb1:	e8 57 ba fe ff       	call   c000960d <Virt::allocateKernelVirtualPages(int)>
c001dbb6:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001dbbc:	6a 03                	push   0x3
c001dbbe:	50                   	push   eax
c001dbbf:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c001dbc5:	ff 35 b0 6f 02 c0    	push   DWORD PTR ds:0xc0026fb0
c001dbcb:	e8 50 c1 fe ff       	call   c0009d20 <VAS::mapPage(unsigned long, unsigned long, int)>
c001dbd0:	83 c4 14             	add    esp,0x14
c001dbd3:	53                   	push   ebx
c001dbd4:	e8 2d f2 fe ff       	call   c000ce06 <PhysicalDisk::startCache()>
c001dbd9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001dbdc:	e8 69 04 ff ff       	call   c000e04a <createPartitionsForDisk(PhysicalDisk*)>
c001dbe1:	83 c4 14             	add    esp,0x14
c001dbe4:	31 c0                	xor    eax,eax
c001dbe6:	5b                   	pop    ebx
c001dbe7:	5e                   	pop    esi
c001dbe8:	c3                   	ret    
c001dbe9:	90                   	nop

c001dbea <SATA::SATA()>:
c001dbea:	83 ec 0c             	sub    esp,0xc
c001dbed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dbf1:	83 ec 04             	sub    esp,0x4
c001dbf4:	68 00 02 00 00       	push   0x200
c001dbf9:	68 1c 33 02 c0       	push   0xc002331c
c001dbfe:	50                   	push   eax
c001dbff:	e8 9a f1 fe ff       	call   c000cd9e <PhysicalDisk::PhysicalDisk(char const*, int)>
c001dc04:	83 c4 10             	add    esp,0x10
c001dc07:	ba 8c 33 02 c0       	mov    edx,0xc002338c
c001dc0c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dc10:	89 10                	mov    DWORD PTR [eax],edx
c001dc12:	90                   	nop
c001dc13:	83 c4 0c             	add    esp,0xc
c001dc16:	c3                   	ret    
c001dc17:	90                   	nop

c001dc18 <SATA::access(unsigned long long, int, void*, bool)>:
c001dc18:	55                   	push   ebp
c001dc19:	57                   	push   edi
c001dc1a:	56                   	push   esi
c001dc1b:	53                   	push   ebx
c001dc1c:	83 ec 2c             	sub    esp,0x2c
c001dc1f:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001dc23:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001dc27:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001dc2b:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001dc2f:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001dc33:	83 7c 24 4c 10       	cmp    DWORD PTR [esp+0x4c],0x10
c001dc38:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001dc3c:	7e 10                	jle    c001dc4e <SATA::access(unsigned long long, int, void*, bool)+0x36>
c001dc3e:	83 ec 0c             	sub    esp,0xc
c001dc41:	68 2c 33 02 c0       	push   0xc002332c
c001dc46:	e8 e0 39 ff ff       	call   c001162b <KePanic(char const*)>
c001dc4b:	83 c4 10             	add    esp,0x10
c001dc4e:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001dc54:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c001dc5a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001dc60:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001dc64:	89 d0                	mov    eax,edx
c001dc66:	c1 e0 07             	shl    eax,0x7
c001dc69:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001dc6d:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c001dc77:	51                   	push   ecx
c001dc78:	8d 42 02             	lea    eax,[edx+0x2]
c001dc7b:	51                   	push   ecx
c001dc7c:	c1 e0 07             	shl    eax,0x7
c001dc7f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001dc83:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001dc87:	50                   	push   eax
c001dc88:	ff b3 70 01 00 00    	push   DWORD PTR [ebx+0x170]
c001dc8e:	e8 91 ec ff ff       	call   c001c924 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c001dc93:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001dc97:	83 c4 10             	add    esp,0x10
c001dc9a:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c001dc9f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001dca3:	0f 84 57 01 00 00    	je     c001de00 <SATA::access(unsigned long long, int, void*, bool)+0x1e8>
c001dca9:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001dcad:	c1 e0 09             	shl    eax,0x9
c001dcb0:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c001dcb5:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001dcb9:	74 0e                	je     c001dcc9 <SATA::access(unsigned long long, int, void*, bool)+0xb1>
c001dcbb:	8b bb 78 01 00 00    	mov    edi,DWORD PTR [ebx+0x178]
c001dcc1:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c001dcc5:	89 c1                	mov    ecx,eax
c001dcc7:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001dcc9:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c001dccf:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001dcd3:	8d 42 02             	lea    eax,[edx+0x2]
c001dcd6:	c1 e0 07             	shl    eax,0x7
c001dcd9:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001dcdd:	8b 00                	mov    eax,DWORD PTR [eax]
c001dcdf:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c001dce5:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c001dceb:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001dcef:	c1 e1 05             	shl    ecx,0x5
c001dcf2:	01 c8                	add    eax,ecx
c001dcf4:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001dcf8:	83 e1 01             	and    ecx,0x1
c001dcfb:	89 ce                	mov    esi,ecx
c001dcfd:	8a 08                	mov    cl,BYTE PTR [eax]
c001dcff:	c1 e6 06             	shl    esi,0x6
c001dd02:	83 e1 bf             	and    ecx,0xffffffbf
c001dd05:	09 f1                	or     ecx,esi
c001dd07:	88 08                	mov    BYTE PTR [eax],cl
c001dd09:	8b 08                	mov    ecx,DWORD PTR [eax]
c001dd0b:	81 e1 e0 ff 00 00    	and    ecx,0xffe0
c001dd11:	81 c9 05 00 01 00    	or     ecx,0x10005
c001dd17:	89 08                	mov    DWORD PTR [eax],ecx
c001dd19:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c001dd1f:	8b b1 58 01 00 00    	mov    esi,DWORD PTR [ecx+0x158]
c001dd25:	2b b1 5c 01 00 00    	sub    esi,DWORD PTR [ecx+0x15c]
c001dd2b:	03 70 08             	add    esi,DWORD PTR [eax+0x8]
c001dd2e:	50                   	push   eax
c001dd2f:	68 90 00 00 00       	push   0x90
c001dd34:	6a 00                	push   0x0
c001dd36:	56                   	push   esi
c001dd37:	e8 b4 27 fe ff       	call   c00004f0 <memset>
c001dd3c:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001dd42:	89 86 80 00 00 00    	mov    DWORD PTR [esi+0x80],eax
c001dd48:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001dd4c:	83 c4 10             	add    esp,0x10
c001dd4f:	48                   	dec    eax
c001dd50:	25 ff ff 3f 00       	and    eax,0x3fffff
c001dd55:	89 c1                	mov    ecx,eax
c001dd57:	8b 86 8c 00 00 00    	mov    eax,DWORD PTR [esi+0x8c]
c001dd5d:	25 00 00 c0 ff       	and    eax,0xffc00000
c001dd62:	09 c8                	or     eax,ecx
c001dd64:	89 86 8c 00 00 00    	mov    DWORD PTR [esi+0x8c],eax
c001dd6a:	8a 86 8f 00 00 00    	mov    al,BYTE PTR [esi+0x8f]
c001dd70:	83 c8 80             	or     eax,0xffffff80
c001dd73:	88 86 8f 00 00 00    	mov    BYTE PTR [esi+0x8f],al
c001dd79:	66 8b 06             	mov    ax,WORD PTR [esi]
c001dd7c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001dd80:	25 00 7f 00 00       	and    eax,0x7f00
c001dd85:	0d 27 80 ff ff       	or     eax,0xffff8027
c001dd8a:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c001dd8f:	66 89 06             	mov    WORD PTR [esi],ax
c001dd92:	b0 35                	mov    al,0x35
c001dd94:	75 02                	jne    c001dd98 <SATA::access(unsigned long long, int, void*, bool)+0x180>
c001dd96:	b0 25                	mov    al,0x25
c001dd98:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c001dd9b:	66 89 6e 04          	mov    WORD PTR [esi+0x4],bp
c001dd9f:	89 e8                	mov    eax,ebp
c001dda1:	c6 46 07 40          	mov    BYTE PTR [esi+0x7],0x40
c001dda5:	c1 e8 10             	shr    eax,0x10
c001dda8:	88 46 06             	mov    BYTE PTR [esi+0x6],al
c001ddab:	89 e8                	mov    eax,ebp
c001ddad:	c1 e8 18             	shr    eax,0x18
c001ddb0:	88 46 08             	mov    BYTE PTR [esi+0x8],al
c001ddb3:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c001ddb7:	88 46 09             	mov    BYTE PTR [esi+0x9],al
c001ddba:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ddbe:	88 66 0a             	mov    BYTE PTR [esi+0xa],ah
c001ddc1:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001ddc5:	66 89 46 0c          	mov    WORD PTR [esi+0xc],ax
c001ddc9:	89 d6                	mov    esi,edx
c001ddcb:	31 c0                	xor    eax,eax
c001ddcd:	c1 e6 07             	shl    esi,0x7
c001ddd0:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001ddd4:	8b 8e 20 01 00 00    	mov    ecx,DWORD PTR [esi+0x120]
c001ddda:	80 e1 88             	and    cl,0x88
c001dddd:	74 0a                	je     c001dde9 <SATA::access(unsigned long long, int, void*, bool)+0x1d1>
c001dddf:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001dde4:	74 0a                	je     c001ddf0 <SATA::access(unsigned long long, int, void*, bool)+0x1d8>
c001dde6:	40                   	inc    eax
c001dde7:	eb eb                	jmp    c001ddd4 <SATA::access(unsigned long long, int, void*, bool)+0x1bc>
c001dde9:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001ddee:	75 17                	jne    c001de07 <SATA::access(unsigned long long, int, void*, bool)+0x1ef>
c001ddf0:	83 ec 0c             	sub    esp,0xc
c001ddf3:	68 65 33 02 c0       	push   0xc0023365
c001ddf8:	e8 48 cb fe ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001ddfd:	83 c4 10             	add    esp,0x10
c001de00:	b8 01 00 00 00       	mov    eax,0x1
c001de05:	eb 5d                	jmp    c001de64 <SATA::access(unsigned long long, int, void*, bool)+0x24c>
c001de07:	b8 01 00 00 00       	mov    eax,0x1
c001de0c:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c001de10:	c1 e2 07             	shl    edx,0x7
c001de13:	d3 e0                	shl    eax,cl
c001de15:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c001de19:	89 86 38 01 00 00    	mov    DWORD PTR [esi+0x138],eax
c001de1f:	8b 8a 38 01 00 00    	mov    ecx,DWORD PTR [edx+0x138]
c001de25:	85 c8                	test   eax,ecx
c001de27:	74 16                	je     c001de3f <SATA::access(unsigned long long, int, void*, bool)+0x227>
c001de29:	8b 8a 10 01 00 00    	mov    ecx,DWORD PTR [edx+0x110]
c001de2f:	0f ba e1 1e          	bt     ecx,0x1e
c001de33:	73 ea                	jae    c001de1f <SATA::access(unsigned long long, int, void*, bool)+0x207>
c001de35:	83 ec 0c             	sub    esp,0xc
c001de38:	68 73 33 02 c0       	push   0xc0023373
c001de3d:	eb b9                	jmp    c001ddf8 <SATA::access(unsigned long long, int, void*, bool)+0x1e0>
c001de3f:	8b 82 10 01 00 00    	mov    eax,DWORD PTR [edx+0x110]
c001de45:	0f ba e0 1e          	bt     eax,0x1e
c001de49:	72 b5                	jb     c001de00 <SATA::access(unsigned long long, int, void*, bool)+0x1e8>
c001de4b:	31 c0                	xor    eax,eax
c001de4d:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c001de52:	75 10                	jne    c001de64 <SATA::access(unsigned long long, int, void*, bool)+0x24c>
c001de54:	8b b3 78 01 00 00    	mov    esi,DWORD PTR [ebx+0x178]
c001de5a:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c001de5e:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001de62:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001de64:	83 c4 2c             	add    esp,0x2c
c001de67:	5b                   	pop    ebx
c001de68:	5e                   	pop    esi
c001de69:	5f                   	pop    edi
c001de6a:	5d                   	pop    ebp
c001de6b:	c3                   	ret    

c001de6c <SATA::read(unsigned long long, int, void*)>:
c001de6c:	55                   	push   ebp
c001de6d:	57                   	push   edi
c001de6e:	56                   	push   esi
c001de6f:	be 04 00 00 00       	mov    esi,0x4
c001de74:	53                   	push   ebx
c001de75:	83 ec 0c             	sub    esp,0xc
c001de78:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001de7c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001de80:	8d 7b ff             	lea    edi,[ebx-0x1]
c001de83:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001de87:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001de8b:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001de91:	0f 87 1a 02 00 00    	ja     c001e0b1 <SATA::read(unsigned long long, int, void*)+0x245>
c001de97:	be 06 00 00 00       	mov    esi,0x6
c001de9c:	85 c9                	test   ecx,ecx
c001de9e:	0f 84 0d 02 00 00    	je     c001e0b1 <SATA::read(unsigned long long, int, void*)+0x245>
c001dea4:	56                   	push   esi
c001dea5:	56                   	push   esi
c001dea6:	6a 00                	push   0x0
c001dea8:	51                   	push   ecx
c001dea9:	53                   	push   ebx
c001deaa:	52                   	push   edx
c001deab:	50                   	push   eax
c001deac:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001deb0:	e8 63 fd ff ff       	call   c001dc18 <SATA::access(unsigned long long, int, void*, bool)>
c001deb5:	83 c4 20             	add    esp,0x20
c001deb8:	89 c6                	mov    esi,eax
c001deba:	85 c0                	test   eax,eax
c001debc:	0f 85 ea 01 00 00    	jne    c001e0ac <SATA::read(unsigned long long, int, void*)+0x240>
c001dec2:	01 1d b4 d0 02 c0    	add    DWORD PTR ds:0xc002d0b4,ebx
c001dec8:	bb 0a 00 00 00       	mov    ebx,0xa
c001decd:	50                   	push   eax
c001dece:	50                   	push   eax
c001decf:	6a 0f                	push   0xf
c001ded1:	6a 00                	push   0x0
c001ded3:	e8 75 f2 ff ff       	call   c001d14d <combineColours(unsigned char, unsigned char)>
c001ded8:	5a                   	pop    edx
c001ded9:	0f b6 c0             	movzx  eax,al
c001dedc:	59                   	pop    ecx
c001dedd:	b9 10 27 00 00       	mov    ecx,0x2710
c001dee2:	50                   	push   eax
c001dee3:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001dee8:	99                   	cdq    
c001dee9:	f7 f9                	idiv   ecx
c001deeb:	99                   	cdq    
c001deec:	f7 fb                	idiv   ebx
c001deee:	8d 42 30             	lea    eax,[edx+0x30]
c001def1:	0f b6 c0             	movzx  eax,al
c001def4:	50                   	push   eax
c001def5:	e8 42 f2 ff ff       	call   c001d13c <combineCharAndColour(char, unsigned char)>
c001defa:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c001df00:	5f                   	pop    edi
c001df01:	5d                   	pop    ebp
c001df02:	bd e8 03 00 00       	mov    ebp,0x3e8
c001df07:	6a 0f                	push   0xf
c001df09:	6a 00                	push   0x0
c001df0b:	e8 3d f2 ff ff       	call   c001d14d <combineColours(unsigned char, unsigned char)>
c001df10:	5a                   	pop    edx
c001df11:	0f b6 c0             	movzx  eax,al
c001df14:	59                   	pop    ecx
c001df15:	50                   	push   eax
c001df16:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001df1b:	99                   	cdq    
c001df1c:	f7 fd                	idiv   ebp
c001df1e:	99                   	cdq    
c001df1f:	f7 fb                	idiv   ebx
c001df21:	8d 42 30             	lea    eax,[edx+0x30]
c001df24:	0f b6 c0             	movzx  eax,al
c001df27:	50                   	push   eax
c001df28:	e8 0f f2 ff ff       	call   c001d13c <combineCharAndColour(char, unsigned char)>
c001df2d:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001df33:	5f                   	pop    edi
c001df34:	bf 64 00 00 00       	mov    edi,0x64
c001df39:	58                   	pop    eax
c001df3a:	6a 0f                	push   0xf
c001df3c:	6a 00                	push   0x0
c001df3e:	e8 0a f2 ff ff       	call   c001d14d <combineColours(unsigned char, unsigned char)>
c001df43:	5a                   	pop    edx
c001df44:	0f b6 c0             	movzx  eax,al
c001df47:	59                   	pop    ecx
c001df48:	50                   	push   eax
c001df49:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001df4e:	99                   	cdq    
c001df4f:	f7 ff                	idiv   edi
c001df51:	99                   	cdq    
c001df52:	f7 fb                	idiv   ebx
c001df54:	8d 42 30             	lea    eax,[edx+0x30]
c001df57:	0f b6 c0             	movzx  eax,al
c001df5a:	50                   	push   eax
c001df5b:	e8 dc f1 ff ff       	call   c001d13c <combineCharAndColour(char, unsigned char)>
c001df60:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c001df66:	58                   	pop    eax
c001df67:	5a                   	pop    edx
c001df68:	6a 0f                	push   0xf
c001df6a:	6a 00                	push   0x0
c001df6c:	e8 dc f1 ff ff       	call   c001d14d <combineColours(unsigned char, unsigned char)>
c001df71:	59                   	pop    ecx
c001df72:	0f b6 c0             	movzx  eax,al
c001df75:	5a                   	pop    edx
c001df76:	50                   	push   eax
c001df77:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001df7c:	99                   	cdq    
c001df7d:	f7 fb                	idiv   ebx
c001df7f:	99                   	cdq    
c001df80:	f7 fb                	idiv   ebx
c001df82:	8d 42 30             	lea    eax,[edx+0x30]
c001df85:	0f b6 c0             	movzx  eax,al
c001df88:	50                   	push   eax
c001df89:	e8 ae f1 ff ff       	call   c001d13c <combineCharAndColour(char, unsigned char)>
c001df8e:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c001df94:	59                   	pop    ecx
c001df95:	58                   	pop    eax
c001df96:	6a 0f                	push   0xf
c001df98:	6a 00                	push   0x0
c001df9a:	e8 ae f1 ff ff       	call   c001d14d <combineColours(unsigned char, unsigned char)>
c001df9f:	5a                   	pop    edx
c001dfa0:	0f b6 c0             	movzx  eax,al
c001dfa3:	59                   	pop    ecx
c001dfa4:	50                   	push   eax
c001dfa5:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001dfaa:	99                   	cdq    
c001dfab:	f7 fb                	idiv   ebx
c001dfad:	8d 42 30             	lea    eax,[edx+0x30]
c001dfb0:	0f b6 c0             	movzx  eax,al
c001dfb3:	50                   	push   eax
c001dfb4:	e8 83 f1 ff ff       	call   c001d13c <combineCharAndColour(char, unsigned char)>
c001dfb9:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c001dfbf:	58                   	pop    eax
c001dfc0:	5a                   	pop    edx
c001dfc1:	6a 0f                	push   0xf
c001dfc3:	6a 00                	push   0x0
c001dfc5:	e8 83 f1 ff ff       	call   c001d14d <combineColours(unsigned char, unsigned char)>
c001dfca:	59                   	pop    ecx
c001dfcb:	0f b6 c0             	movzx  eax,al
c001dfce:	5a                   	pop    edx
c001dfcf:	b9 10 27 00 00       	mov    ecx,0x2710
c001dfd4:	50                   	push   eax
c001dfd5:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001dfda:	99                   	cdq    
c001dfdb:	f7 f9                	idiv   ecx
c001dfdd:	99                   	cdq    
c001dfde:	f7 fb                	idiv   ebx
c001dfe0:	8d 42 30             	lea    eax,[edx+0x30]
c001dfe3:	0f b6 c0             	movzx  eax,al
c001dfe6:	50                   	push   eax
c001dfe7:	e8 50 f1 ff ff       	call   c001d13c <combineCharAndColour(char, unsigned char)>
c001dfec:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c001dff2:	59                   	pop    ecx
c001dff3:	58                   	pop    eax
c001dff4:	6a 0f                	push   0xf
c001dff6:	6a 00                	push   0x0
c001dff8:	e8 50 f1 ff ff       	call   c001d14d <combineColours(unsigned char, unsigned char)>
c001dffd:	5a                   	pop    edx
c001dffe:	0f b6 c0             	movzx  eax,al
c001e001:	59                   	pop    ecx
c001e002:	50                   	push   eax
c001e003:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001e008:	99                   	cdq    
c001e009:	f7 fd                	idiv   ebp
c001e00b:	99                   	cdq    
c001e00c:	f7 fb                	idiv   ebx
c001e00e:	8d 42 30             	lea    eax,[edx+0x30]
c001e011:	0f b6 c0             	movzx  eax,al
c001e014:	50                   	push   eax
c001e015:	e8 22 f1 ff ff       	call   c001d13c <combineCharAndColour(char, unsigned char)>
c001e01a:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001e020:	5d                   	pop    ebp
c001e021:	58                   	pop    eax
c001e022:	6a 0f                	push   0xf
c001e024:	6a 00                	push   0x0
c001e026:	e8 22 f1 ff ff       	call   c001d14d <combineColours(unsigned char, unsigned char)>
c001e02b:	5a                   	pop    edx
c001e02c:	0f b6 c0             	movzx  eax,al
c001e02f:	59                   	pop    ecx
c001e030:	50                   	push   eax
c001e031:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001e036:	99                   	cdq    
c001e037:	f7 ff                	idiv   edi
c001e039:	99                   	cdq    
c001e03a:	f7 fb                	idiv   ebx
c001e03c:	8d 42 30             	lea    eax,[edx+0x30]
c001e03f:	0f b6 c0             	movzx  eax,al
c001e042:	50                   	push   eax
c001e043:	e8 f4 f0 ff ff       	call   c001d13c <combineCharAndColour(char, unsigned char)>
c001e048:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001e04e:	5f                   	pop    edi
c001e04f:	5d                   	pop    ebp
c001e050:	6a 0f                	push   0xf
c001e052:	6a 00                	push   0x0
c001e054:	e8 f4 f0 ff ff       	call   c001d14d <combineColours(unsigned char, unsigned char)>
c001e059:	5a                   	pop    edx
c001e05a:	0f b6 c0             	movzx  eax,al
c001e05d:	59                   	pop    ecx
c001e05e:	50                   	push   eax
c001e05f:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001e064:	99                   	cdq    
c001e065:	f7 fb                	idiv   ebx
c001e067:	99                   	cdq    
c001e068:	f7 fb                	idiv   ebx
c001e06a:	8d 42 30             	lea    eax,[edx+0x30]
c001e06d:	0f b6 c0             	movzx  eax,al
c001e070:	50                   	push   eax
c001e071:	e8 c6 f0 ff ff       	call   c001d13c <combineCharAndColour(char, unsigned char)>
c001e076:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001e07c:	5f                   	pop    edi
c001e07d:	5d                   	pop    ebp
c001e07e:	6a 0f                	push   0xf
c001e080:	6a 00                	push   0x0
c001e082:	e8 c6 f0 ff ff       	call   c001d14d <combineColours(unsigned char, unsigned char)>
c001e087:	5a                   	pop    edx
c001e088:	0f b6 c0             	movzx  eax,al
c001e08b:	59                   	pop    ecx
c001e08c:	50                   	push   eax
c001e08d:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001e092:	99                   	cdq    
c001e093:	f7 fb                	idiv   ebx
c001e095:	83 c2 30             	add    edx,0x30
c001e098:	0f b6 d2             	movzx  edx,dl
c001e09b:	52                   	push   edx
c001e09c:	e8 9b f0 ff ff       	call   c001d13c <combineCharAndColour(char, unsigned char)>
c001e0a1:	83 c4 10             	add    esp,0x10
c001e0a4:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001e0aa:	eb 05                	jmp    c001e0b1 <SATA::read(unsigned long long, int, void*)+0x245>
c001e0ac:	be 01 00 00 00       	mov    esi,0x1
c001e0b1:	83 c4 0c             	add    esp,0xc
c001e0b4:	89 f0                	mov    eax,esi
c001e0b6:	5b                   	pop    ebx
c001e0b7:	5e                   	pop    esi
c001e0b8:	5f                   	pop    edi
c001e0b9:	5d                   	pop    ebp
c001e0ba:	c3                   	ret    
c001e0bb:	90                   	nop

c001e0bc <SATA::write(unsigned long long, int, void*)>:
c001e0bc:	55                   	push   ebp
c001e0bd:	b8 04 00 00 00       	mov    eax,0x4
c001e0c2:	57                   	push   edi
c001e0c3:	56                   	push   esi
c001e0c4:	53                   	push   ebx
c001e0c5:	83 ec 1c             	sub    esp,0x1c
c001e0c8:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c001e0cc:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c001e0d0:	8d 75 ff             	lea    esi,[ebp-0x1]
c001e0d3:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001e0d7:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c001e0db:	81 fe fe 00 00 00    	cmp    esi,0xfe
c001e0e1:	0f 87 32 02 00 00    	ja     c001e319 <SATA::write(unsigned long long, int, void*)+0x25d>
c001e0e7:	b8 06 00 00 00       	mov    eax,0x6
c001e0ec:	85 ff                	test   edi,edi
c001e0ee:	0f 84 25 02 00 00    	je     c001e319 <SATA::write(unsigned long long, int, void*)+0x25d>
c001e0f4:	89 ee                	mov    esi,ebp
c001e0f6:	c1 e6 09             	shl    esi,0x9
c001e0f9:	01 fe                	add    esi,edi
c001e0fb:	89 c8                	mov    eax,ecx
c001e0fd:	89 da                	mov    edx,ebx
c001e0ff:	83 c0 01             	add    eax,0x1
c001e102:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001e106:	83 d2 00             	adc    edx,0x0
c001e109:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001e10d:	50                   	push   eax
c001e10e:	50                   	push   eax
c001e10f:	6a 01                	push   0x1
c001e111:	57                   	push   edi
c001e112:	81 c7 00 02 00 00    	add    edi,0x200
c001e118:	6a 01                	push   0x1
c001e11a:	53                   	push   ebx
c001e11b:	51                   	push   ecx
c001e11c:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001e120:	e8 f3 fa ff ff       	call   c001dc18 <SATA::access(unsigned long long, int, void*, bool)>
c001e125:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001e129:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001e12d:	83 c4 20             	add    esp,0x20
c001e130:	39 f7                	cmp    edi,esi
c001e132:	75 c7                	jne    c001e0fb <SATA::write(unsigned long long, int, void*)+0x3f>
c001e134:	bb 0a 00 00 00       	mov    ebx,0xa
c001e139:	01 2d b0 d0 02 c0    	add    DWORD PTR ds:0xc002d0b0,ebp
c001e13f:	bd 10 27 00 00       	mov    ebp,0x2710
c001e144:	50                   	push   eax
c001e145:	50                   	push   eax
c001e146:	6a 0f                	push   0xf
c001e148:	6a 00                	push   0x0
c001e14a:	e8 fe ef ff ff       	call   c001d14d <combineColours(unsigned char, unsigned char)>
c001e14f:	5a                   	pop    edx
c001e150:	0f b6 c0             	movzx  eax,al
c001e153:	59                   	pop    ecx
c001e154:	50                   	push   eax
c001e155:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001e15a:	99                   	cdq    
c001e15b:	f7 fd                	idiv   ebp
c001e15d:	99                   	cdq    
c001e15e:	f7 fb                	idiv   ebx
c001e160:	8d 42 30             	lea    eax,[edx+0x30]
c001e163:	0f b6 c0             	movzx  eax,al
c001e166:	50                   	push   eax
c001e167:	e8 d0 ef ff ff       	call   c001d13c <combineCharAndColour(char, unsigned char)>
c001e16c:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c001e172:	5e                   	pop    esi
c001e173:	5f                   	pop    edi
c001e174:	bf e8 03 00 00       	mov    edi,0x3e8
c001e179:	6a 0f                	push   0xf
c001e17b:	6a 00                	push   0x0
c001e17d:	e8 cb ef ff ff       	call   c001d14d <combineColours(unsigned char, unsigned char)>
c001e182:	5a                   	pop    edx
c001e183:	0f b6 c0             	movzx  eax,al
c001e186:	59                   	pop    ecx
c001e187:	50                   	push   eax
c001e188:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001e18d:	99                   	cdq    
c001e18e:	f7 ff                	idiv   edi
c001e190:	99                   	cdq    
c001e191:	f7 fb                	idiv   ebx
c001e193:	8d 42 30             	lea    eax,[edx+0x30]
c001e196:	0f b6 c0             	movzx  eax,al
c001e199:	50                   	push   eax
c001e19a:	e8 9d ef ff ff       	call   c001d13c <combineCharAndColour(char, unsigned char)>
c001e19f:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001e1a5:	5e                   	pop    esi
c001e1a6:	be 64 00 00 00       	mov    esi,0x64
c001e1ab:	58                   	pop    eax
c001e1ac:	6a 0f                	push   0xf
c001e1ae:	6a 00                	push   0x0
c001e1b0:	e8 98 ef ff ff       	call   c001d14d <combineColours(unsigned char, unsigned char)>
c001e1b5:	5a                   	pop    edx
c001e1b6:	0f b6 c0             	movzx  eax,al
c001e1b9:	59                   	pop    ecx
c001e1ba:	50                   	push   eax
c001e1bb:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001e1c0:	99                   	cdq    
c001e1c1:	f7 fe                	idiv   esi
c001e1c3:	99                   	cdq    
c001e1c4:	f7 fb                	idiv   ebx
c001e1c6:	8d 42 30             	lea    eax,[edx+0x30]
c001e1c9:	0f b6 c0             	movzx  eax,al
c001e1cc:	50                   	push   eax
c001e1cd:	e8 6a ef ff ff       	call   c001d13c <combineCharAndColour(char, unsigned char)>
c001e1d2:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c001e1d8:	58                   	pop    eax
c001e1d9:	5a                   	pop    edx
c001e1da:	6a 0f                	push   0xf
c001e1dc:	6a 00                	push   0x0
c001e1de:	e8 6a ef ff ff       	call   c001d14d <combineColours(unsigned char, unsigned char)>
c001e1e3:	59                   	pop    ecx
c001e1e4:	0f b6 c0             	movzx  eax,al
c001e1e7:	5a                   	pop    edx
c001e1e8:	50                   	push   eax
c001e1e9:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001e1ee:	99                   	cdq    
c001e1ef:	f7 fb                	idiv   ebx
c001e1f1:	99                   	cdq    
c001e1f2:	f7 fb                	idiv   ebx
c001e1f4:	8d 42 30             	lea    eax,[edx+0x30]
c001e1f7:	0f b6 c0             	movzx  eax,al
c001e1fa:	50                   	push   eax
c001e1fb:	e8 3c ef ff ff       	call   c001d13c <combineCharAndColour(char, unsigned char)>
c001e200:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c001e206:	59                   	pop    ecx
c001e207:	58                   	pop    eax
c001e208:	6a 0f                	push   0xf
c001e20a:	6a 00                	push   0x0
c001e20c:	e8 3c ef ff ff       	call   c001d14d <combineColours(unsigned char, unsigned char)>
c001e211:	5a                   	pop    edx
c001e212:	0f b6 c0             	movzx  eax,al
c001e215:	59                   	pop    ecx
c001e216:	50                   	push   eax
c001e217:	a1 b4 d0 02 c0       	mov    eax,ds:0xc002d0b4
c001e21c:	99                   	cdq    
c001e21d:	f7 fb                	idiv   ebx
c001e21f:	83 c2 30             	add    edx,0x30
c001e222:	0f b6 d2             	movzx  edx,dl
c001e225:	52                   	push   edx
c001e226:	e8 11 ef ff ff       	call   c001d13c <combineCharAndColour(char, unsigned char)>
c001e22b:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c001e231:	58                   	pop    eax
c001e232:	5a                   	pop    edx
c001e233:	6a 0f                	push   0xf
c001e235:	6a 00                	push   0x0
c001e237:	e8 11 ef ff ff       	call   c001d14d <combineColours(unsigned char, unsigned char)>
c001e23c:	59                   	pop    ecx
c001e23d:	0f b6 c0             	movzx  eax,al
c001e240:	5a                   	pop    edx
c001e241:	50                   	push   eax
c001e242:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001e247:	99                   	cdq    
c001e248:	f7 fd                	idiv   ebp
c001e24a:	99                   	cdq    
c001e24b:	f7 fb                	idiv   ebx
c001e24d:	8d 42 30             	lea    eax,[edx+0x30]
c001e250:	0f b6 c0             	movzx  eax,al
c001e253:	50                   	push   eax
c001e254:	e8 e3 ee ff ff       	call   c001d13c <combineCharAndColour(char, unsigned char)>
c001e259:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c001e25f:	59                   	pop    ecx
c001e260:	5d                   	pop    ebp
c001e261:	6a 0f                	push   0xf
c001e263:	6a 00                	push   0x0
c001e265:	e8 e3 ee ff ff       	call   c001d14d <combineColours(unsigned char, unsigned char)>
c001e26a:	5a                   	pop    edx
c001e26b:	0f b6 c0             	movzx  eax,al
c001e26e:	59                   	pop    ecx
c001e26f:	50                   	push   eax
c001e270:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001e275:	99                   	cdq    
c001e276:	f7 ff                	idiv   edi
c001e278:	99                   	cdq    
c001e279:	f7 fb                	idiv   ebx
c001e27b:	8d 42 30             	lea    eax,[edx+0x30]
c001e27e:	0f b6 c0             	movzx  eax,al
c001e281:	50                   	push   eax
c001e282:	e8 b5 ee ff ff       	call   c001d13c <combineCharAndColour(char, unsigned char)>
c001e287:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001e28d:	5f                   	pop    edi
c001e28e:	5d                   	pop    ebp
c001e28f:	6a 0f                	push   0xf
c001e291:	6a 00                	push   0x0
c001e293:	e8 b5 ee ff ff       	call   c001d14d <combineColours(unsigned char, unsigned char)>
c001e298:	5a                   	pop    edx
c001e299:	0f b6 c0             	movzx  eax,al
c001e29c:	59                   	pop    ecx
c001e29d:	50                   	push   eax
c001e29e:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001e2a3:	99                   	cdq    
c001e2a4:	f7 fe                	idiv   esi
c001e2a6:	99                   	cdq    
c001e2a7:	f7 fb                	idiv   ebx
c001e2a9:	8d 42 30             	lea    eax,[edx+0x30]
c001e2ac:	0f b6 c0             	movzx  eax,al
c001e2af:	50                   	push   eax
c001e2b0:	e8 87 ee ff ff       	call   c001d13c <combineCharAndColour(char, unsigned char)>
c001e2b5:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001e2bb:	5e                   	pop    esi
c001e2bc:	5f                   	pop    edi
c001e2bd:	6a 0f                	push   0xf
c001e2bf:	6a 00                	push   0x0
c001e2c1:	e8 87 ee ff ff       	call   c001d14d <combineColours(unsigned char, unsigned char)>
c001e2c6:	5d                   	pop    ebp
c001e2c7:	0f b6 c0             	movzx  eax,al
c001e2ca:	5a                   	pop    edx
c001e2cb:	50                   	push   eax
c001e2cc:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001e2d1:	99                   	cdq    
c001e2d2:	f7 fb                	idiv   ebx
c001e2d4:	99                   	cdq    
c001e2d5:	f7 fb                	idiv   ebx
c001e2d7:	8d 42 30             	lea    eax,[edx+0x30]
c001e2da:	0f b6 c0             	movzx  eax,al
c001e2dd:	50                   	push   eax
c001e2de:	e8 59 ee ff ff       	call   c001d13c <combineCharAndColour(char, unsigned char)>
c001e2e3:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001e2e9:	59                   	pop    ecx
c001e2ea:	5e                   	pop    esi
c001e2eb:	6a 0f                	push   0xf
c001e2ed:	6a 00                	push   0x0
c001e2ef:	e8 59 ee ff ff       	call   c001d14d <combineColours(unsigned char, unsigned char)>
c001e2f4:	5f                   	pop    edi
c001e2f5:	0f b6 c0             	movzx  eax,al
c001e2f8:	5d                   	pop    ebp
c001e2f9:	50                   	push   eax
c001e2fa:	a1 b0 d0 02 c0       	mov    eax,ds:0xc002d0b0
c001e2ff:	99                   	cdq    
c001e300:	f7 fb                	idiv   ebx
c001e302:	83 c2 30             	add    edx,0x30
c001e305:	0f b6 d2             	movzx  edx,dl
c001e308:	52                   	push   edx
c001e309:	e8 2e ee ff ff       	call   c001d13c <combineCharAndColour(char, unsigned char)>
c001e30e:	83 c4 10             	add    esp,0x10
c001e311:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001e317:	31 c0                	xor    eax,eax
c001e319:	83 c4 1c             	add    esp,0x1c
c001e31c:	5b                   	pop    ebx
c001e31d:	5e                   	pop    esi
c001e31e:	5f                   	pop    edi
c001e31f:	5d                   	pop    ebp
c001e320:	c3                   	ret    
c001e321:	90                   	nop

c001e322 <SATAPI::write(unsigned long long, int, void*)>:
c001e322:	b8 03 00 00 00       	mov    eax,0x3
c001e327:	c3                   	ret    

c001e328 <SATAPI::close(int, int, void*)>:
c001e328:	83 ec 0c             	sub    esp,0xc
c001e32b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e32f:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001e335:	85 c0                	test   eax,eax
c001e337:	74 0c                	je     c001e345 <SATAPI::close(int, int, void*)+0x1d>
c001e339:	83 ec 0c             	sub    esp,0xc
c001e33c:	8b 10                	mov    edx,DWORD PTR [eax]
c001e33e:	50                   	push   eax
c001e33f:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001e342:	83 c4 10             	add    esp,0x10
c001e345:	31 c0                	xor    eax,eax
c001e347:	83 c4 0c             	add    esp,0xc
c001e34a:	c3                   	ret    
c001e34b:	90                   	nop

c001e34c <SATAPI::SATAPI()>:
c001e34c:	83 ec 0c             	sub    esp,0xc
c001e34f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e353:	83 ec 04             	sub    esp,0x4
c001e356:	68 00 08 00 00       	push   0x800
c001e35b:	68 bc 33 02 c0       	push   0xc00233bc
c001e360:	50                   	push   eax
c001e361:	e8 38 ea fe ff       	call   c000cd9e <PhysicalDisk::PhysicalDisk(char const*, int)>
c001e366:	83 c4 10             	add    esp,0x10
c001e369:	ba b0 34 02 c0       	mov    edx,0xc00234b0
c001e36e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e372:	89 10                	mov    DWORD PTR [eax],edx
c001e374:	90                   	nop
c001e375:	83 c4 0c             	add    esp,0xc
c001e378:	c3                   	ret    
c001e379:	90                   	nop

c001e37a <SATAPI::diskRemoved()>:
c001e37a:	c3                   	ret    
c001e37b:	90                   	nop

c001e37c <SATAPI::diskInserted()>:
c001e37c:	83 ec 18             	sub    esp,0x18
c001e37f:	68 c8 33 02 c0       	push   0xc00233c8
c001e384:	e8 bc c5 fe ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001e389:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e38d:	c6 80 74 01 00 00 01 	mov    BYTE PTR [eax+0x174],0x1
c001e394:	83 c4 1c             	add    esp,0x1c
c001e397:	c3                   	ret    

c001e398 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>:
c001e398:	55                   	push   ebp
c001e399:	57                   	push   edi
c001e39a:	56                   	push   esi
c001e39b:	53                   	push   ebx
c001e39c:	83 ec 34             	sub    esp,0x34
c001e39f:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c001e3a3:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001e3a7:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c001e3ab:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001e3af:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c001e3b3:	8b 85 70 01 00 00    	mov    eax,DWORD PTR [ebp+0x170]
c001e3b9:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001e3bf:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001e3c3:	8b 85 6c 01 00 00    	mov    eax,DWORD PTR [ebp+0x16c]
c001e3c9:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001e3cd:	83 c0 02             	add    eax,0x2
c001e3d0:	c1 e0 07             	shl    eax,0x7
c001e3d3:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001e3d7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e3db:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e3df:	c1 e0 07             	shl    eax,0x7
c001e3e2:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001e3e6:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001e3ea:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c001e3f4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001e3f8:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001e3fe:	e8 21 e5 ff ff       	call   c001c924 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c001e403:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001e407:	83 c4 10             	add    esp,0x10
c001e40a:	b8 01 00 00 00       	mov    eax,0x1
c001e40f:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c001e414:	0f 84 53 02 00 00    	je     c001e66d <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d5>
c001e41a:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c001e420:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e424:	8b 00                	mov    eax,DWORD PTR [eax]
c001e426:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c001e42c:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c001e432:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001e436:	c1 e1 05             	shl    ecx,0x5
c001e439:	01 c8                	add    eax,ecx
c001e43b:	8b 08                	mov    ecx,DWORD PTR [eax]
c001e43d:	81 e1 80 ff 00 00    	and    ecx,0xff80
c001e443:	81 c9 25 00 01 00    	or     ecx,0x10025
c001e449:	89 08                	mov    DWORD PTR [eax],ecx
c001e44b:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c001e451:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c001e457:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c001e45d:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c001e460:	8d 7b 40             	lea    edi,[ebx+0x40]
c001e463:	50                   	push   eax
c001e464:	68 90 00 00 00       	push   0x90
c001e469:	6a 00                	push   0x0
c001e46b:	53                   	push   ebx
c001e46c:	e8 7f 20 fe ff       	call   c00004f0 <memset>
c001e471:	b9 0c 00 00 00       	mov    ecx,0xc
c001e476:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c001e47a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001e47c:	8b 85 7c 01 00 00    	mov    eax,DWORD PTR [ebp+0x17c]
c001e482:	c6 43 02 a0          	mov    BYTE PTR [ebx+0x2],0xa0
c001e486:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c001e48c:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c001e490:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001e494:	48                   	dec    eax
c001e495:	25 ff ff 3f 00       	and    eax,0x3fffff
c001e49a:	89 c1                	mov    ecx,eax
c001e49c:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c001e4a2:	25 00 00 c0 ff       	and    eax,0xffc00000
c001e4a7:	09 c8                	or     eax,ecx
c001e4a9:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c001e4af:	8a 83 8f 00 00 00    	mov    al,BYTE PTR [ebx+0x8f]
c001e4b5:	83 c8 80             	or     eax,0xffffff80
c001e4b8:	88 83 8f 00 00 00    	mov    BYTE PTR [ebx+0x8f],al
c001e4be:	66 8b 03             	mov    ax,WORD PTR [ebx]
c001e4c1:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001e4c5:	25 00 7f 00 00       	and    eax,0x7f00
c001e4ca:	66 89 53 04          	mov    WORD PTR [ebx+0x4],dx
c001e4ce:	0d 27 80 ff ff       	or     eax,0xffff8027
c001e4d3:	66 89 03             	mov    WORD PTR [ebx],ax
c001e4d6:	89 d0                	mov    eax,edx
c001e4d8:	c1 ea 18             	shr    edx,0x18
c001e4db:	c1 e8 10             	shr    eax,0x10
c001e4de:	88 53 08             	mov    BYTE PTR [ebx+0x8],dl
c001e4e1:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c001e4e4:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c001e4e8:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c001e4eb:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001e4ef:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c001e4f2:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001e4f6:	83 c4 10             	add    esp,0x10
c001e4f9:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c001e4fd:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e501:	31 c0                	xor    eax,eax
c001e503:	8b 8a 20 01 00 00    	mov    ecx,DWORD PTR [edx+0x120]
c001e509:	80 e1 88             	and    cl,0x88
c001e50c:	74 0a                	je     c001e518 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x180>
c001e50e:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001e513:	74 0a                	je     c001e51f <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x187>
c001e515:	40                   	inc    eax
c001e516:	eb eb                	jmp    c001e503 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x16b>
c001e518:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001e51d:	75 43                	jne    c001e562 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1ca>
c001e51f:	83 ec 0c             	sub    esp,0xc
c001e522:	68 e0 33 02 c0       	push   0xc00233e0
c001e527:	e8 19 c4 fe ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001e52c:	58                   	pop    eax
c001e52d:	5a                   	pop    edx
c001e52e:	68 f5 33 02 c0       	push   0xc00233f5
c001e533:	ff 35 04 6f 02 c0    	push   DWORD PTR ds:0xc0026f04
c001e539:	e8 68 a5 fe ff       	call   c0008aa6 <VgaText::puts(char const*)>
c001e53e:	59                   	pop    ecx
c001e53f:	5b                   	pop    ebx
c001e540:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001e544:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001e54a:	e8 6f e4 ff ff       	call   c001c9be <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c001e54f:	5e                   	pop    esi
c001e550:	5f                   	pop    edi
c001e551:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001e555:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001e55b:	e8 3e e4 ff ff       	call   c001c99e <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>
c001e560:	eb 48                	jmp    c001e5aa <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x212>
c001e562:	be 01 00 00 00       	mov    esi,0x1
c001e567:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c001e56b:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001e56f:	d3 e6                	shl    esi,cl
c001e571:	c1 e7 07             	shl    edi,0x7
c001e574:	89 b2 38 01 00 00    	mov    DWORD PTR [edx+0x138],esi
c001e57a:	bb a8 e4 ff ff       	mov    ebx,0xffffe4a8
c001e57f:	03 7c 24 08          	add    edi,DWORD PTR [esp+0x8]
c001e583:	8b 87 38 01 00 00    	mov    eax,DWORD PTR [edi+0x138]
c001e589:	85 c6                	test   esi,eax
c001e58b:	8b 87 10 01 00 00    	mov    eax,DWORD PTR [edi+0x110]
c001e591:	0f 84 a3 00 00 00    	je     c001e63a <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2a2>
c001e597:	0f ba e0 1e          	bt     eax,0x1e
c001e59b:	73 1a                	jae    c001e5b7 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x21f>
c001e59d:	83 ec 0c             	sub    esp,0xc
c001e5a0:	68 07 34 02 c0       	push   0xc0023407
c001e5a5:	e8 9b c3 fe ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001e5aa:	83 c4 10             	add    esp,0x10
c001e5ad:	b8 01 00 00 00       	mov    eax,0x1
c001e5b2:	e9 b6 00 00 00       	jmp    c001e66d <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d5>
c001e5b7:	8d 83 70 17 00 00    	lea    eax,[ebx+0x1770]
c001e5bd:	83 f8 0d             	cmp    eax,0xd
c001e5c0:	77 0a                	ja     c001e5cc <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x234>
c001e5c2:	83 ec 0c             	sub    esp,0xc
c001e5c5:	68 c8 00 00 00       	push   0xc8
c001e5ca:	eb 28                	jmp    c001e5f4 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x25c>
c001e5cc:	8d 83 88 13 00 00    	lea    eax,[ebx+0x1388]
c001e5d2:	83 f8 0d             	cmp    eax,0xd
c001e5d5:	77 0a                	ja     c001e5e1 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x249>
c001e5d7:	83 ec 0c             	sub    esp,0xc
c001e5da:	68 58 02 00 00       	push   0x258
c001e5df:	eb 13                	jmp    c001e5f4 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x25c>
c001e5e1:	8d 83 a0 0f 00 00    	lea    eax,[ebx+0xfa0]
c001e5e7:	83 f8 06             	cmp    eax,0x6
c001e5ea:	77 10                	ja     c001e5fc <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x264>
c001e5ec:	83 ec 0c             	sub    esp,0xc
c001e5ef:	68 dc 05 00 00       	push   0x5dc
c001e5f4:	e8 c7 7d ff ff       	call   c00163c0 <milliTenthSleep(unsigned int)>
c001e5f9:	83 c4 10             	add    esp,0x10
c001e5fc:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001e600:	80 38 1b             	cmp    BYTE PTR [eax],0x1b
c001e603:	75 06                	jne    c001e60b <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x273>
c001e605:	80 78 04 01          	cmp    BYTE PTR [eax+0x4],0x1
c001e609:	74 15                	je     c001e620 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x288>
c001e60b:	83 fb 06             	cmp    ebx,0x6
c001e60e:	77 10                	ja     c001e620 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x288>
c001e610:	83 ec 0c             	sub    esp,0xc
c001e613:	68 c4 09 00 00       	push   0x9c4
c001e618:	e8 a3 7d ff ff       	call   c00163c0 <milliTenthSleep(unsigned int)>
c001e61d:	83 c4 10             	add    esp,0x10
c001e620:	43                   	inc    ebx
c001e621:	81 fb b9 0b 00 00    	cmp    ebx,0xbb9
c001e627:	0f 85 56 ff ff ff    	jne    c001e583 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1eb>
c001e62d:	83 ec 0c             	sub    esp,0xc
c001e630:	68 1a 34 02 c0       	push   0xc002341a
c001e635:	e9 6b ff ff ff       	jmp    c001e5a5 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x20d>
c001e63a:	0f ba e0 1e          	bt     eax,0x1e
c001e63e:	73 0d                	jae    c001e64d <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2b5>
c001e640:	83 ec 0c             	sub    esp,0xc
c001e643:	68 2e 34 02 c0       	push   0xc002342e
c001e648:	e9 58 ff ff ff       	jmp    c001e5a5 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x20d>
c001e64d:	83 7c 24 54 00       	cmp    DWORD PTR [esp+0x54],0x0
c001e652:	74 17                	je     c001e66b <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d3>
c001e654:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c001e659:	74 10                	je     c001e66b <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d3>
c001e65b:	8b b5 80 01 00 00    	mov    esi,DWORD PTR [ebp+0x180]
c001e661:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c001e665:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c001e669:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001e66b:	31 c0                	xor    eax,eax
c001e66d:	83 c4 2c             	add    esp,0x2c
c001e670:	5b                   	pop    ebx
c001e671:	5e                   	pop    esi
c001e672:	5f                   	pop    edi
c001e673:	5d                   	pop    ebp
c001e674:	c3                   	ret    
c001e675:	90                   	nop

c001e676 <SATAPI::eject()>:
c001e676:	57                   	push   edi
c001e677:	b9 03 00 00 00       	mov    ecx,0x3
c001e67c:	83 ec 18             	sub    esp,0x18
c001e67f:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001e683:	fc                   	cld    
c001e684:	31 c0                	xor    eax,eax
c001e686:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001e688:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001e68d:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001e692:	50                   	push   eax
c001e693:	6a 00                	push   0x0
c001e695:	6a 00                	push   0x0
c001e697:	6a 00                	push   0x0
c001e699:	6a 00                	push   0x0
c001e69b:	6a 02                	push   0x2
c001e69d:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001e6a1:	50                   	push   eax
c001e6a2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001e6a6:	e8 ed fc ff ff       	call   c001e398 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001e6ab:	31 c0                	xor    eax,eax
c001e6ad:	83 c4 38             	add    esp,0x38
c001e6b0:	5f                   	pop    edi
c001e6b1:	c3                   	ret    

c001e6b2 <SATAPI::detectMedia()>:
c001e6b2:	53                   	push   ebx
c001e6b3:	83 ec 14             	sub    esp,0x14
c001e6b6:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001e6ba:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001e6c0:	e8 57 00 ff ff       	call   c000e71c <VCache::writeWriteBuffer()>
c001e6c5:	59                   	pop    ecx
c001e6c6:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001e6cc:	e8 3b 00 ff ff       	call   c000e70c <VCache::invalidateReadBuffer()>
c001e6d1:	c7 04 24 43 34 02 c0 	mov    DWORD PTR [esp],0xc0023443
c001e6d8:	e8 68 c2 fe ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001e6dd:	83 c4 10             	add    esp,0x10
c001e6e0:	31 c0                	xor    eax,eax
c001e6e2:	8b 14 85 80 b8 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd4780]
c001e6e9:	85 d2                	test   edx,edx
c001e6eb:	74 0f                	je     c001e6fc <SATAPI::detectMedia()+0x4a>
c001e6ed:	39 9a 6c 01 00 00    	cmp    DWORD PTR [edx+0x16c],ebx
c001e6f3:	75 07                	jne    c001e6fc <SATAPI::detectMedia()+0x4a>
c001e6f5:	c6 82 70 01 00 00 01 	mov    BYTE PTR [edx+0x170],0x1
c001e6fc:	40                   	inc    eax
c001e6fd:	83 f8 1a             	cmp    eax,0x1a
c001e700:	75 e0                	jne    c001e6e2 <SATAPI::detectMedia()+0x30>
c001e702:	83 c4 08             	add    esp,0x8
c001e705:	5b                   	pop    ebx
c001e706:	c3                   	ret    
c001e707:	90                   	nop

c001e708 <SATAPI::open(int, int, void*)>:
c001e708:	56                   	push   esi
c001e709:	53                   	push   ebx
c001e70a:	51                   	push   ecx
c001e70b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001e70f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001e713:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c001e71d:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c001e723:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001e72d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e731:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001e73b:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001e741:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c001e748:	e8 72 96 fe ff       	call   c0007dbf <Phys::allocatePage()>
c001e74d:	89 c6                	mov    esi,eax
c001e74f:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c001e755:	81 c6 00 10 00 00    	add    esi,0x1000
c001e75b:	e8 5f 96 fe ff       	call   c0007dbf <Phys::allocatePage()>
c001e760:	39 c6                	cmp    esi,eax
c001e762:	74 10                	je     c001e774 <SATAPI::open(int, int, void*)+0x6c>
c001e764:	83 ec 0c             	sub    esp,0xc
c001e767:	68 58 34 02 c0       	push   0xc0023458
c001e76c:	e8 ba 2e ff ff       	call   c001162b <KePanic(char const*)>
c001e771:	83 c4 10             	add    esp,0x10
c001e774:	83 ec 0c             	sub    esp,0xc
c001e777:	6a 02                	push   0x2
c001e779:	e8 8f ae fe ff       	call   c000960d <Virt::allocateKernelVirtualPages(int)>
c001e77e:	89 83 80 01 00 00    	mov    DWORD PTR [ebx+0x180],eax
c001e784:	6a 03                	push   0x3
c001e786:	50                   	push   eax
c001e787:	ff b3 7c 01 00 00    	push   DWORD PTR [ebx+0x17c]
c001e78d:	ff 35 b0 6f 02 c0    	push   DWORD PTR ds:0xc0026fb0
c001e793:	e8 88 b5 fe ff       	call   c0009d20 <VAS::mapPage(unsigned long, unsigned long, int)>
c001e798:	83 c4 14             	add    esp,0x14
c001e79b:	68 78 01 00 00       	push   0x178
c001e7a0:	e8 11 93 fe ff       	call   c0007ab6 <malloc>
c001e7a5:	83 c4 0c             	add    esp,0xc
c001e7a8:	89 c6                	mov    esi,eax
c001e7aa:	6a 00                	push   0x0
c001e7ac:	68 ff ff ff 7f       	push   0x7fffffff
c001e7b1:	6a 00                	push   0x0
c001e7b3:	6a 00                	push   0x0
c001e7b5:	53                   	push   ebx
c001e7b6:	68 6e 34 02 c0       	push   0xc002346e
c001e7bb:	50                   	push   eax
c001e7bc:	e8 b7 f3 fe ff       	call   c000db78 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001e7c1:	83 c4 14             	add    esp,0x14
c001e7c4:	56                   	push   esi
c001e7c5:	e8 6e f4 fe ff       	call   c000dc38 <LogicalDisk::assignDriveLetter()>
c001e7ca:	5a                   	pop    edx
c001e7cb:	0f be c0             	movsx  eax,al
c001e7ce:	59                   	pop    ecx
c001e7cf:	50                   	push   eax
c001e7d0:	68 c0 32 02 c0       	push   0xc00232c0
c001e7d5:	e8 6b c1 fe ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001e7da:	58                   	pop    eax
c001e7db:	5a                   	pop    edx
c001e7dc:	56                   	push   esi
c001e7dd:	53                   	push   ebx
c001e7de:	e8 ef e1 fe ff       	call   c000c9d2 <Device::addChild(Device*)>
c001e7e3:	89 b3 78 01 00 00    	mov    DWORD PTR [ebx+0x178],esi
c001e7e9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001e7ec:	e8 15 e6 fe ff       	call   c000ce06 <PhysicalDisk::startCache()>
c001e7f1:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c001e7f8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001e7fb:	e8 b2 fe ff ff       	call   c001e6b2 <SATAPI::detectMedia()>
c001e800:	83 c4 14             	add    esp,0x14
c001e803:	31 c0                	xor    eax,eax
c001e805:	5b                   	pop    ebx
c001e806:	5e                   	pop    esi
c001e807:	c3                   	ret    

c001e808 <SATAPI::read(unsigned long long, int, void*)>:
c001e808:	57                   	push   edi
c001e809:	56                   	push   esi
c001e80a:	53                   	push   ebx
c001e80b:	83 ec 30             	sub    esp,0x30
c001e80e:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001e812:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c001e816:	8b 74 24 4c          	mov    esi,DWORD PTR [esp+0x4c]
c001e81a:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001e81e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001e822:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001e826:	83 fe 04             	cmp    esi,0x4
c001e829:	7e 10                	jle    c001e83b <SATAPI::read(unsigned long long, int, void*)+0x33>
c001e82b:	83 ec 0c             	sub    esp,0xc
c001e82e:	68 7c 34 02 c0       	push   0xc002347c
c001e833:	e8 f3 2d ff ff       	call   c001162b <KePanic(char const*)>
c001e838:	83 c4 10             	add    esp,0x10
c001e83b:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c001e841:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001e847:	51                   	push   ecx
c001e848:	50                   	push   eax
c001e849:	83 c0 02             	add    eax,0x2
c001e84c:	c1 e0 07             	shl    eax,0x7
c001e84f:	03 82 60 01 00 00    	add    eax,DWORD PTR [edx+0x160]
c001e855:	50                   	push   eax
c001e856:	52                   	push   edx
c001e857:	e8 8c e1 ff ff       	call   c001c9e8 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001e85c:	8d 7c 24 28          	lea    edi,[esp+0x28]
c001e860:	b9 03 00 00 00       	mov    ecx,0x3
c001e865:	fc                   	cld    
c001e866:	31 c0                	xor    eax,eax
c001e868:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001e86a:	c6 44 24 28 1b       	mov    BYTE PTR [esp+0x28],0x1b
c001e86f:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c001e874:	83 c4 0c             	add    esp,0xc
c001e877:	6a 00                	push   0x0
c001e879:	6a 00                	push   0x0
c001e87b:	6a 00                	push   0x0
c001e87d:	6a 00                	push   0x0
c001e87f:	6a 02                	push   0x2
c001e881:	8d 44 24 30          	lea    eax,[esp+0x30]
c001e885:	50                   	push   eax
c001e886:	53                   	push   ebx
c001e887:	e8 0c fb ff ff       	call   c001e398 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001e88c:	83 c4 20             	add    esp,0x20
c001e88f:	85 c0                	test   eax,eax
c001e891:	75 44                	jne    c001e8d7 <SATAPI::read(unsigned long long, int, void*)+0xcf>
c001e893:	8d 7c 24 24          	lea    edi,[esp+0x24]
c001e897:	b9 03 00 00 00       	mov    ecx,0x3
c001e89c:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001e89e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e8a2:	c6 44 24 24 a8       	mov    BYTE PTR [esp+0x24],0xa8
c001e8a7:	0f c8                	bswap  eax
c001e8a9:	89 44 24 26          	mov    DWORD PTR [esp+0x26],eax
c001e8ad:	89 f0                	mov    eax,esi
c001e8af:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c001e8b3:	50                   	push   eax
c001e8b4:	56                   	push   esi
c001e8b5:	c1 e6 0b             	shl    esi,0xb
c001e8b8:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c001e8bc:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001e8c0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001e8c4:	56                   	push   esi
c001e8c5:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001e8c9:	50                   	push   eax
c001e8ca:	53                   	push   ebx
c001e8cb:	e8 c8 fa ff ff       	call   c001e398 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001e8d0:	83 c4 20             	add    esp,0x20
c001e8d3:	85 c0                	test   eax,eax
c001e8d5:	74 14                	je     c001e8eb <SATAPI::read(unsigned long long, int, void*)+0xe3>
c001e8d7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001e8db:	83 ec 0c             	sub    esp,0xc
c001e8de:	53                   	push   ebx
c001e8df:	e8 ce fd ff ff       	call   c001e6b2 <SATAPI::detectMedia()>
c001e8e4:	83 c4 10             	add    esp,0x10
c001e8e7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e8eb:	83 c4 30             	add    esp,0x30
c001e8ee:	5b                   	pop    ebx
c001e8ef:	5e                   	pop    esi
c001e8f0:	5f                   	pop    edi
c001e8f1:	c3                   	ret    

c001e8f2 <IOAPIC::close(int, int, void*)>:
c001e8f2:	b8 00 00 00 00       	mov    eax,0x0
c001e8f7:	c3                   	ret    

c001e8f8 <apicGetBase()>:
c001e8f8:	55                   	push   ebp
c001e8f9:	89 e5                	mov    ebp,esp
c001e8fb:	83 ec 18             	sub    esp,0x18
c001e8fe:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c001e903:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c001e909:	83 e0 08             	and    eax,0x8
c001e90c:	0f b6 c0             	movzx  eax,al
c001e90f:	85 c0                	test   eax,eax
c001e911:	75 07                	jne    c001e91a <apicGetBase()+0x22>
c001e913:	b8 00 00 00 00       	mov    eax,0x0
c001e918:	eb 21                	jmp    c001e93b <apicGetBase()+0x43>
c001e91a:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c001e91f:	83 ec 08             	sub    esp,0x8
c001e922:	6a 1b                	push   0x1b
c001e924:	50                   	push   eax
c001e925:	e8 96 87 fe ff       	call   c00070c0 <Computer::rdmsr(unsigned int)>
c001e92a:	83 c4 10             	add    esp,0x10
c001e92d:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001e930:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c001e933:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001e936:	25 00 00 ff ff       	and    eax,0xffff0000
c001e93b:	c9                   	leave  
c001e93c:	c3                   	ret    
c001e93d:	90                   	nop

c001e93e <IOAPIC::IOAPIC()>:
c001e93e:	83 ec 0c             	sub    esp,0xc
c001e941:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e945:	83 ec 08             	sub    esp,0x8
c001e948:	68 e0 34 02 c0       	push   0xc00234e0
c001e94d:	50                   	push   eax
c001e94e:	e8 17 e2 fe ff       	call   c000cb6a <Device::Device(char const*)>
c001e953:	83 c4 10             	add    esp,0x10
c001e956:	ba f0 34 02 c0       	mov    edx,0xc00234f0
c001e95b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e95f:	89 10                	mov    DWORD PTR [eax],edx
c001e961:	90                   	nop
c001e962:	83 c4 0c             	add    esp,0xc
c001e965:	c3                   	ret    

c001e966 <apicOpen()>:
c001e966:	55                   	push   ebp
c001e967:	89 e5                	mov    ebp,esp
c001e969:	53                   	push   ebx
c001e96a:	83 ec 34             	sub    esp,0x34
c001e96d:	a0 00 d1 02 c0       	mov    al,ds:0xc002d100
c001e972:	83 f0 01             	xor    eax,0x1
c001e975:	0f b6 c0             	movzx  eax,al
c001e978:	85 c0                	test   eax,eax
c001e97a:	0f 84 a3 00 00 00    	je     c001ea23 <apicOpen()+0xbd>
c001e980:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c001e984:	a0 e0 bb 02 c0       	mov    al,ds:0xc002bbe0
c001e989:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
c001e98d:	0f b6 c0             	movzx  eax,al
c001e990:	39 c2                	cmp    edx,eax
c001e992:	0f 83 84 00 00 00    	jae    c001ea1c <apicOpen()+0xb6>
c001e998:	c7 45 d0 68 01 00 00 	mov    DWORD PTR [ebp-0x30],0x168
c001e99f:	83 ec 0c             	sub    esp,0xc
c001e9a2:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c001e9a5:	e8 0c 91 fe ff       	call   c0007ab6 <malloc>
c001e9aa:	83 c4 10             	add    esp,0x10
c001e9ad:	89 c3                	mov    ebx,eax
c001e9af:	83 ec 0c             	sub    esp,0xc
c001e9b2:	53                   	push   ebx
c001e9b3:	e8 86 ff ff ff       	call   c001e93e <IOAPIC::IOAPIC()>
c001e9b8:	83 c4 10             	add    esp,0x10
c001e9bb:	89 5d ec             	mov    DWORD PTR [ebp-0x14],ebx
c001e9be:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
c001e9c2:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001e9c5:	89 14 85 e0 d0 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2f20],edx
c001e9cc:	a1 c0 d0 02 c0       	mov    eax,ds:0xc002d0c0
c001e9d1:	83 c0 01             	add    eax,0x1
c001e9d4:	a3 c0 d0 02 c0       	mov    ds:0xc002d0c0,eax
c001e9d9:	a1 b8 6e 02 c0       	mov    eax,ds:0xc0026eb8
c001e9de:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c001e9e4:	83 ec 08             	sub    esp,0x8
c001e9e7:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c001e9ea:	50                   	push   eax
c001e9eb:	e8 e2 df fe ff       	call   c000c9d2 <Device::addChild(Device*)>
c001e9f0:	83 c4 10             	add    esp,0x10
c001e9f3:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001e9f6:	8b 00                	mov    eax,DWORD PTR [eax]
c001e9f8:	83 c0 08             	add    eax,0x8
c001e9fb:	8b 00                	mov    eax,DWORD PTR [eax]
c001e9fd:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
c001ea01:	6a 00                	push   0x0
c001ea03:	6a 00                	push   0x0
c001ea05:	52                   	push   edx
c001ea06:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c001ea09:	ff d0                	call   eax
c001ea0b:	83 c4 10             	add    esp,0x10
c001ea0e:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
c001ea11:	83 c0 01             	add    eax,0x1
c001ea14:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
c001ea17:	e9 68 ff ff ff       	jmp    c001e984 <apicOpen()+0x1e>
c001ea1c:	c6 05 00 d1 02 c0 01 	mov    BYTE PTR ds:0xc002d100,0x1
c001ea23:	e8 d0 fe ff ff       	call   c001e8f8 <apicGetBase()>
c001ea28:	05 f0 00 00 00       	add    eax,0xf0
c001ea2d:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001ea30:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c001ea33:	8b 00                	mov    eax,DWORD PTR [eax]
c001ea35:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c001ea38:	81 4d e4 00 01 00 00 	or     DWORD PTR [ebp-0x1c],0x100
c001ea3f:	81 4d e4 ff 00 00 00 	or     DWORD PTR [ebp-0x1c],0xff
c001ea46:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c001ea49:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c001ea4c:	89 10                	mov    DWORD PTR [eax],edx
c001ea4e:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
c001ea55:	a1 30 bb 02 c0       	mov    eax,ds:0xc002bb30
c001ea5a:	39 45 f0             	cmp    DWORD PTR [ebp-0x10],eax
c001ea5d:	7d 7c                	jge    c001eadb <apicOpen()+0x175>
c001ea5f:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001ea62:	8b 04 85 40 bb 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd44c0]
c001ea69:	88 45 e3             	mov    BYTE PTR [ebp-0x1d],al
c001ea6c:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001ea6f:	8b 04 85 40 bb 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd44c0]
c001ea76:	c1 e8 08             	shr    eax,0x8
c001ea79:	66 89 45 e0          	mov    WORD PTR [ebp-0x20],ax
c001ea7d:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001ea80:	8b 04 85 40 bb 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd44c0]
c001ea87:	c1 e8 18             	shr    eax,0x18
c001ea8a:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c001ea8d:	0f b6 45 e3          	movzx  eax,BYTE PTR [ebp-0x1d]
c001ea91:	3d ff 00 00 00       	cmp    eax,0xff
c001ea96:	75 3a                	jne    c001ead2 <apicOpen()+0x16c>
c001ea98:	e8 5b fe ff ff       	call   c001e8f8 <apicGetBase()>
c001ea9d:	0f b6 55 df          	movzx  edx,BYTE PTR [ebp-0x21]
c001eaa1:	83 fa 01             	cmp    edx,0x1
c001eaa4:	75 07                	jne    c001eaad <apicOpen()+0x147>
c001eaa6:	ba 60 03 00 00       	mov    edx,0x360
c001eaab:	eb 05                	jmp    c001eab2 <apicOpen()+0x14c>
c001eaad:	ba 50 03 00 00       	mov    edx,0x350
c001eab2:	01 d0                	add    eax,edx
c001eab4:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c001eab7:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001eaba:	8b 00                	mov    eax,DWORD PTR [eax]
c001eabc:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c001eabf:	81 65 d4 00 ff ff ff 	and    DWORD PTR [ebp-0x2c],0xffffff00
c001eac6:	83 4d d4 02          	or     DWORD PTR [ebp-0x2c],0x2
c001eaca:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001eacd:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c001ead0:	89 10                	mov    DWORD PTR [eax],edx
c001ead2:	83 45 f0 01          	add    DWORD PTR [ebp-0x10],0x1
c001ead6:	e9 7a ff ff ff       	jmp    c001ea55 <apicOpen()+0xef>
c001eadb:	90                   	nop
c001eadc:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001eadf:	c9                   	leave  
c001eae0:	c3                   	ret    
c001eae1:	90                   	nop

c001eae2 <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c001eae2:	55                   	push   ebp
c001eae3:	89 e5                	mov    ebp,esp
c001eae5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001eae8:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001eaee:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001eaf1:	72 1d                	jb     c001eb10 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001eaf3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001eaf6:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c001eafc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001eaff:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c001eb05:	01 d0                	add    eax,edx
c001eb07:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001eb0a:	73 04                	jae    c001eb10 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001eb0c:	b0 01                	mov    al,0x1
c001eb0e:	eb 02                	jmp    c001eb12 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c001eb10:	b0 00                	mov    al,0x0
c001eb12:	5d                   	pop    ebp
c001eb13:	c3                   	ret    

c001eb14 <IOAPIC::read(int)>:
c001eb14:	55                   	push   ebp
c001eb15:	89 e5                	mov    ebp,esp
c001eb17:	83 ec 10             	sub    esp,0x10
c001eb1a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001eb1d:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001eb23:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001eb26:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001eb29:	0f b6 d0             	movzx  edx,al
c001eb2c:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001eb2f:	89 10                	mov    DWORD PTR [eax],edx
c001eb31:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001eb34:	83 c0 10             	add    eax,0x10
c001eb37:	8b 00                	mov    eax,DWORD PTR [eax]
c001eb39:	c9                   	leave  
c001eb3a:	c3                   	ret    
c001eb3b:	90                   	nop

c001eb3c <IOAPIC::open(int, int, void*)>:
c001eb3c:	55                   	push   ebp
c001eb3d:	89 e5                	mov    ebp,esp
c001eb3f:	57                   	push   edi
c001eb40:	56                   	push   esi
c001eb41:	53                   	push   ebx
c001eb42:	83 ec 04             	sub    esp,0x4
c001eb45:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001eb48:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001eb4b:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001eb51:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001eb54:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001eb5a:	8b 14 85 20 bc 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd43e0]
c001eb61:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001eb64:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001eb6a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001eb6d:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001eb73:	8b 14 85 a0 bc 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd4360]
c001eb7a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001eb7d:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c001eb83:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001eb86:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c001eb8c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001eb8f:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001eb95:	0f b6 f0             	movzx  esi,al
c001eb98:	89 d0                	mov    eax,edx
c001eb9a:	ba 00 00 00 00       	mov    edx,0x0
c001eb9f:	89 c7                	mov    edi,eax
c001eba1:	83 e7 ff             	and    edi,0xffffffff
c001eba4:	89 f9                	mov    ecx,edi
c001eba6:	0f b6 da             	movzx  ebx,dl
c001eba9:	89 c8                	mov    eax,ecx
c001ebab:	89 da                	mov    edx,ebx
c001ebad:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001ebb0:	8d 5e 08             	lea    ebx,[esi+0x8]
c001ebb3:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c001ebb7:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c001ebbb:	83 e0 00             	and    eax,0x0
c001ebbe:	09 d0                	or     eax,edx
c001ebc0:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c001ebc4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ebc7:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001ebcd:	8d 50 01             	lea    edx,[eax+0x1]
c001ebd0:	88 d1                	mov    cl,dl
c001ebd2:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c001ebd5:	88 8a c5 00 00 00    	mov    BYTE PTR [edx+0xc5],cl
c001ebdb:	0f b6 d0             	movzx  edx,al
c001ebde:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ebe1:	83 c2 08             	add    edx,0x8
c001ebe4:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c001ebe8:	0f b6 c9             	movzx  ecx,cl
c001ebeb:	81 c9 00 ad de 00    	or     ecx,0xdead00
c001ebf1:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c001ebf5:	6a 01                	push   0x1
c001ebf7:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001ebfa:	e8 15 ff ff ff       	call   c001eb14 <IOAPIC::read(int)>
c001ebff:	83 c4 08             	add    esp,0x8
c001ec02:	c1 f8 10             	sar    eax,0x10
c001ec05:	0f b6 c0             	movzx  eax,al
c001ec08:	8d 50 01             	lea    edx,[eax+0x1]
c001ec0b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ec0e:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c001ec14:	b8 00 00 00 00       	mov    eax,0x0
c001ec19:	8d 65 f4             	lea    esp,[ebp-0xc]
c001ec1c:	5b                   	pop    ebx
c001ec1d:	5e                   	pop    esi
c001ec1e:	5f                   	pop    edi
c001ec1f:	5d                   	pop    ebp
c001ec20:	c3                   	ret    
c001ec21:	90                   	nop

c001ec22 <IOAPIC::write(int, int)>:
c001ec22:	55                   	push   ebp
c001ec23:	89 e5                	mov    ebp,esp
c001ec25:	83 ec 10             	sub    esp,0x10
c001ec28:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ec2b:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001ec31:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001ec34:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001ec37:	0f b6 d0             	movzx  edx,al
c001ec3a:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001ec3d:	89 10                	mov    DWORD PTR [eax],edx
c001ec3f:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001ec42:	8d 50 10             	lea    edx,[eax+0x10]
c001ec45:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001ec48:	89 02                	mov    DWORD PTR [edx],eax
c001ec4a:	90                   	nop
c001ec4b:	c9                   	leave  
c001ec4c:	c3                   	ret    
c001ec4d:	90                   	nop

c001ec4e <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c001ec4e:	55                   	push   ebp
c001ec4f:	89 e5                	mov    ebp,esp
c001ec51:	53                   	push   ebx
c001ec52:	83 ec 2c             	sub    esp,0x2c
c001ec55:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001ec58:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c001ec5b:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c001ec5e:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c001ec61:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c001ec64:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001ec67:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c001ec6a:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c001ec6d:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c001ec70:	88 d8                	mov    al,bl
c001ec72:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c001ec75:	88 c8                	mov    al,cl
c001ec77:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c001ec7a:	88 d0                	mov    al,dl
c001ec7c:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c001ec7f:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c001ec83:	83 c0 08             	add    eax,0x8
c001ec86:	01 c0                	add    eax,eax
c001ec88:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001ec8b:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c001ec8f:	83 c0 08             	add    eax,0x8
c001ec92:	01 c0                	add    eax,eax
c001ec94:	83 c0 01             	add    eax,0x1
c001ec97:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c001ec9a:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001ec9d:	50                   	push   eax
c001ec9e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001eca1:	e8 6e fe ff ff       	call   c001eb14 <IOAPIC::read(int)>
c001eca6:	83 c4 08             	add    esp,0x8
c001eca9:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001ecac:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c001ecb3:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001ecb6:	c1 e0 18             	shl    eax,0x18
c001ecb9:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c001ecbc:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c001ecbf:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001ecc2:	52                   	push   edx
c001ecc3:	50                   	push   eax
c001ecc4:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001ecc7:	e8 56 ff ff ff       	call   c001ec22 <IOAPIC::write(int, int)>
c001eccc:	83 c4 0c             	add    esp,0xc
c001eccf:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001ecd2:	50                   	push   eax
c001ecd3:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001ecd6:	e8 39 fe ff ff       	call   c001eb14 <IOAPIC::read(int)>
c001ecdb:	83 c4 08             	add    esp,0x8
c001ecde:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c001ece1:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c001ece8:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c001ecef:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c001ecf6:	0f b6 45 d4          	movzx  eax,BYTE PTR [ebp-0x2c]
c001ecfa:	85 c0                	test   eax,eax
c001ecfc:	74 09                	je     c001ed07 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xb9>
c001ecfe:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c001ed05:	eb 07                	jmp    c001ed0e <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xc0>
c001ed07:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c001ed0e:	0f b6 45 d0          	movzx  eax,BYTE PTR [ebp-0x30]
c001ed12:	85 c0                	test   eax,eax
c001ed14:	74 09                	je     c001ed1f <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd1>
c001ed16:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c001ed1d:	eb 07                	jmp    c001ed26 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd8>
c001ed1f:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c001ed26:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c001ed2d:	0f b6 45 e0          	movzx  eax,BYTE PTR [ebp-0x20]
c001ed31:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c001ed34:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c001ed37:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001ed3a:	52                   	push   edx
c001ed3b:	50                   	push   eax
c001ed3c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001ed3f:	e8 de fe ff ff       	call   c001ec22 <IOAPIC::write(int, int)>
c001ed44:	83 c4 0c             	add    esp,0xc
c001ed47:	90                   	nop
c001ed48:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001ed4b:	c9                   	leave  
c001ed4c:	c3                   	ret    
c001ed4d:	66 90                	xchg   ax,ax
c001ed4f:	90                   	nop

c001ed50 <APICTimer::close(int, int, void*)>:
c001ed50:	b8 00 00 00 00       	mov    eax,0x0
c001ed55:	c3                   	ret    
c001ed56:	66 90                	xchg   ax,ax

c001ed58 <apicTimerHandler(regs*, void*)>:
c001ed58:	83 ec 0c             	sub    esp,0xc
c001ed5b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ed5f:	8b 08                	mov    ecx,DWORD PTR [eax]
c001ed61:	b8 10 27 00 00       	mov    eax,0x2710
c001ed66:	ba 00 00 00 00       	mov    edx,0x0
c001ed6b:	f7 f1                	div    ecx
c001ed6d:	83 ec 0c             	sub    esp,0xc
c001ed70:	50                   	push   eax
c001ed71:	e8 be f6 fe ff       	call   c000e434 <timerHandler(unsigned int)>
c001ed76:	83 c4 10             	add    esp,0x10
c001ed79:	90                   	nop
c001ed7a:	83 c4 0c             	add    esp,0xc
c001ed7d:	c3                   	ret    
c001ed7e:	66 90                	xchg   ax,ax

c001ed80 <APICTimer::open(int, int, void*)>:
c001ed80:	83 ec 0c             	sub    esp,0xc
c001ed83:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed87:	8b 00                	mov    eax,DWORD PTR [eax]
c001ed89:	83 c0 24             	add    eax,0x24
c001ed8c:	8b 00                	mov    eax,DWORD PTR [eax]
c001ed8e:	83 ec 08             	sub    esp,0x8
c001ed91:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ed95:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ed99:	ff d0                	call   eax
c001ed9b:	83 c4 10             	add    esp,0x10
c001ed9e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eda2:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001eda6:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001edac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001edb0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001edb4:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c001edba:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001edbe:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c001edc4:	83 ec 0c             	sub    esp,0xc
c001edc7:	51                   	push   ecx
c001edc8:	6a 01                	push   0x1
c001edca:	68 58 ed 01 c0       	push   0xc001ed58
c001edcf:	52                   	push   edx
c001edd0:	50                   	push   eax
c001edd1:	e8 a8 db fe ff       	call   c000c97e <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001edd6:	83 c4 20             	add    esp,0x20
c001edd9:	89 c2                	mov    edx,eax
c001eddb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eddf:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001ede5:	b8 00 00 00 00       	mov    eax,0x0
c001edea:	83 c4 0c             	add    esp,0xc
c001eded:	c3                   	ret    
c001edee:	66 90                	xchg   ax,ax

c001edf0 <APICTimer::write(int)>:
c001edf0:	83 ec 0c             	sub    esp,0xc
c001edf3:	83 ec 0c             	sub    esp,0xc
c001edf6:	68 14 35 02 c0       	push   0xc0023514
c001edfb:	e8 2b 28 ff ff       	call   c001162b <KePanic(char const*)>
c001ee00:	83 c4 10             	add    esp,0x10
c001ee03:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ee07:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ee0b:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001ee11:	90                   	nop
c001ee12:	83 c4 0c             	add    esp,0xc
c001ee15:	c3                   	ret    
c001ee16:	66 90                	xchg   ax,ax

c001ee18 <APICTimer::APICTimer()>:
c001ee18:	83 ec 0c             	sub    esp,0xc
c001ee1b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ee1f:	83 ec 08             	sub    esp,0x8
c001ee22:	68 24 35 02 c0       	push   0xc0023524
c001ee27:	50                   	push   eax
c001ee28:	e8 3b f5 fe ff       	call   c000e368 <Timer::Timer(char const*)>
c001ee2d:	83 c4 10             	add    esp,0x10
c001ee30:	ba 38 35 02 c0       	mov    edx,0xc0023538
c001ee35:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ee39:	89 10                	mov    DWORD PTR [eax],edx
c001ee3b:	90                   	nop
c001ee3c:	83 c4 0c             	add    esp,0xc
c001ee3f:	c3                   	ret    

c001ee40 <PIT::write(int)>:
c001ee40:	83 ec 10             	sub    esp,0x10
c001ee43:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ee47:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001ee4b:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001ee51:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ee55:	a3 04 d1 02 c0       	mov    ds:0xc002d104,eax
c001ee5a:	b8 dc 34 12 00       	mov    eax,0x1234dc
c001ee5f:	89 c2                	mov    edx,eax
c001ee61:	c1 fa 1f             	sar    edx,0x1f
c001ee64:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c001ee68:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ee6c:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c001ee73:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c001ee78:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c001ee7c:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c001ee81:	ee                   	out    dx,al
c001ee82:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ee86:	0f b6 c0             	movzx  eax,al
c001ee89:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c001ee90:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c001ee94:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c001ee98:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c001ee9d:	ee                   	out    dx,al
c001ee9e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001eea2:	c1 f8 08             	sar    eax,0x8
c001eea5:	0f b6 c0             	movzx  eax,al
c001eea8:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c001eeaf:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001eeb3:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001eeb7:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c001eebc:	ee                   	out    dx,al
c001eebd:	90                   	nop
c001eebe:	83 c4 10             	add    esp,0x10
c001eec1:	c3                   	ret    
c001eec2:	66 90                	xchg   ax,ax

c001eec4 <pitHandler(regs*, void*)>:
c001eec4:	83 ec 0c             	sub    esp,0xc
c001eec7:	8b 0d 04 d1 02 c0    	mov    ecx,DWORD PTR ds:0xc002d104
c001eecd:	b8 10 27 00 00       	mov    eax,0x2710
c001eed2:	89 c2                	mov    edx,eax
c001eed4:	c1 fa 1f             	sar    edx,0x1f
c001eed7:	f7 f9                	idiv   ecx
c001eed9:	83 ec 0c             	sub    esp,0xc
c001eedc:	50                   	push   eax
c001eedd:	e8 52 f5 fe ff       	call   c000e434 <timerHandler(unsigned int)>
c001eee2:	83 c4 10             	add    esp,0x10
c001eee5:	90                   	nop
c001eee6:	83 c4 0c             	add    esp,0xc
c001eee9:	c3                   	ret    
c001eeea:	66 90                	xchg   ax,ax

c001eeec <PIT::open(int, int, void*)>:
c001eeec:	83 ec 0c             	sub    esp,0xc
c001eeef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eef3:	8b 00                	mov    eax,DWORD PTR [eax]
c001eef5:	83 c0 24             	add    eax,0x24
c001eef8:	8b 00                	mov    eax,DWORD PTR [eax]
c001eefa:	83 ec 08             	sub    esp,0x8
c001eefd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ef01:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ef05:	ff d0                	call   eax
c001ef07:	83 c4 10             	add    esp,0x10
c001ef0a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef0e:	83 ec 0c             	sub    esp,0xc
c001ef11:	6a 00                	push   0x0
c001ef13:	6a 01                	push   0x1
c001ef15:	68 c4 ee 01 c0       	push   0xc001eec4
c001ef1a:	6a 00                	push   0x0
c001ef1c:	50                   	push   eax
c001ef1d:	e8 5c da fe ff       	call   c000c97e <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001ef22:	83 c4 20             	add    esp,0x20
c001ef25:	89 c2                	mov    edx,eax
c001ef27:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef2b:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001ef31:	b8 00 00 00 00       	mov    eax,0x0
c001ef36:	83 c4 0c             	add    esp,0xc
c001ef39:	c3                   	ret    
c001ef3a:	66 90                	xchg   ax,ax

c001ef3c <PIT::close(int, int, void*)>:
c001ef3c:	83 ec 0c             	sub    esp,0xc
c001ef3f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef43:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c001ef4d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef51:	6a 01                	push   0x1
c001ef53:	68 c4 ee 01 c0       	push   0xc001eec4
c001ef58:	6a 00                	push   0x0
c001ef5a:	50                   	push   eax
c001ef5b:	e8 54 da fe ff       	call   c000c9b4 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c001ef60:	83 c4 10             	add    esp,0x10
c001ef63:	b8 00 00 00 00       	mov    eax,0x0
c001ef68:	83 c4 0c             	add    esp,0xc
c001ef6b:	c3                   	ret    

c001ef6c <PIT::PIT()>:
c001ef6c:	83 ec 0c             	sub    esp,0xc
c001ef6f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef73:	83 ec 08             	sub    esp,0x8
c001ef76:	68 60 35 02 c0       	push   0xc0023560
c001ef7b:	50                   	push   eax
c001ef7c:	e8 e7 f3 fe ff       	call   c000e368 <Timer::Timer(char const*)>
c001ef81:	83 c4 10             	add    esp,0x10
c001ef84:	ba 88 35 02 c0       	mov    edx,0xc0023588
c001ef89:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef8d:	89 10                	mov    DWORD PTR [eax],edx
c001ef8f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef93:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001ef99:	0f b6 d0             	movzx  edx,al
c001ef9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001efa0:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c001efa7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001efab:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001efb1:	0f b6 d0             	movzx  edx,al
c001efb4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001efb8:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c001efbd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001efc1:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001efc7:	8d 50 01             	lea    edx,[eax+0x1]
c001efca:	88 d1                	mov    cl,dl
c001efcc:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001efd0:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c001efd6:	0f b6 d0             	movzx  edx,al
c001efd9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001efdd:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001efe1:	83 e1 3f             	and    ecx,0x3f
c001efe4:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001efe8:	90                   	nop
c001efe9:	83 c4 0c             	add    esp,0xc
c001efec:	c3                   	ret    
c001efed:	66 90                	xchg   ax,ax
c001efef:	90                   	nop

c001eff0 <avxDetect>:
c001eff0:	b8 01 00 00 00       	mov    eax,0x1
c001eff5:	0f a2                	cpuid  
c001eff7:	f7 c1 00 00 00 10    	test   ecx,0x10000000
c001effd:	74 15                	je     c001f014 <avxDetect.noAVX>
c001efff:	b8 01 00 00 00       	mov    eax,0x1
c001f004:	0f a2                	cpuid  
c001f006:	f7 c1 00 00 00 04    	test   ecx,0x4000000
c001f00c:	74 06                	je     c001f014 <avxDetect.noAVX>
c001f00e:	b8 01 00 00 00       	mov    eax,0x1
c001f013:	c3                   	ret    

c001f014 <avxDetect.noAVX>:
c001f014:	b8 00 00 00 00       	mov    eax,0x0
c001f019:	c3                   	ret    

c001f01a <avxSave>:
c001f01a:	53                   	push   ebx
c001f01b:	52                   	push   edx
c001f01c:	31 c0                	xor    eax,eax
c001f01e:	48                   	dec    eax
c001f01f:	89 c2                	mov    edx,eax
c001f021:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001f025:	0f ae 23             	xsave  [ebx]
c001f028:	5a                   	pop    edx
c001f029:	5b                   	pop    ebx
c001f02a:	c3                   	ret    

c001f02b <avxLoad>:
c001f02b:	53                   	push   ebx
c001f02c:	52                   	push   edx
c001f02d:	31 c0                	xor    eax,eax
c001f02f:	48                   	dec    eax
c001f030:	89 c2                	mov    edx,eax
c001f032:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001f036:	0f ae 2b             	xrstor [ebx]
c001f039:	5a                   	pop    edx
c001f03a:	5b                   	pop    ebx
c001f03b:	c3                   	ret    

c001f03c <avxInit>:
c001f03c:	e8 67 03 00 00       	call   c001f3a8 <sseInit>
c001f041:	50                   	push   eax
c001f042:	51                   	push   ecx
c001f043:	0f 20 e0             	mov    eax,cr4
c001f046:	0d 00 00 04 00       	or     eax,0x40000
c001f04b:	0f 22 e0             	mov    cr4,eax
c001f04e:	31 c9                	xor    ecx,ecx
c001f050:	0f 01 d0             	xgetbv 
c001f053:	0d 07 00 00 00       	or     eax,0x7
c001f058:	0f 01 d1             	xsetbv 
c001f05b:	59                   	pop    ecx
c001f05c:	58                   	pop    eax
c001f05d:	c3                   	ret    

c001f05e <avxClose>:
c001f05e:	c3                   	ret    

c001f05f <wouldSheSayYes>:
c001f05f:	c3                   	ret    
c001f060:	49                   	dec    ecx
c001f061:	20 6c 6f 76          	and    BYTE PTR [edi+ebp*2+0x76],ch
c001f065:	65 20 79 6f          	and    BYTE PTR gs:[ecx+0x6f],bh
c001f069:	75 20                	jne    c001f08b <isr0+0xb>
c001f06b:	4e                   	dec    esi
c001f06c:	79 61                	jns    c001f0cf <isr7+0x3>
c001f06e:	68 2e 2e 2e 00       	push   0x2e2e2e
c001f073:	66 90                	xchg   ax,ax
c001f075:	66 90                	xchg   ax,ax
c001f077:	66 90                	xchg   ax,ax
c001f079:	66 90                	xchg   ax,ax
c001f07b:	66 90                	xchg   ax,ax
c001f07d:	66 90                	xchg   ax,ax
c001f07f:	90                   	nop

c001f080 <isr0>:
c001f080:	fa                   	cli    
c001f081:	68 00 00 00 00       	push   0x0
c001f086:	68 00 00 00 00       	push   0x0
c001f08b:	e9 56 01 00 00       	jmp    c001f1e6 <int_common_stub>

c001f090 <isr1>:
c001f090:	fa                   	cli    
c001f091:	6a 00                	push   0x0
c001f093:	6a 01                	push   0x1
c001f095:	e9 4c 01 00 00       	jmp    c001f1e6 <int_common_stub>

c001f09a <isr2>:
c001f09a:	fa                   	cli    
c001f09b:	6a 00                	push   0x0
c001f09d:	6a 02                	push   0x2
c001f09f:	e9 42 01 00 00       	jmp    c001f1e6 <int_common_stub>

c001f0a4 <isr3>:
c001f0a4:	fa                   	cli    
c001f0a5:	6a 00                	push   0x0
c001f0a7:	6a 03                	push   0x3
c001f0a9:	e9 38 01 00 00       	jmp    c001f1e6 <int_common_stub>

c001f0ae <isr4>:
c001f0ae:	fa                   	cli    
c001f0af:	6a 00                	push   0x0
c001f0b1:	6a 04                	push   0x4
c001f0b3:	e9 2e 01 00 00       	jmp    c001f1e6 <int_common_stub>

c001f0b8 <isr5>:
c001f0b8:	fa                   	cli    
c001f0b9:	6a 00                	push   0x0
c001f0bb:	6a 05                	push   0x5
c001f0bd:	e9 24 01 00 00       	jmp    c001f1e6 <int_common_stub>

c001f0c2 <isr6>:
c001f0c2:	fa                   	cli    
c001f0c3:	6a 00                	push   0x0
c001f0c5:	6a 06                	push   0x6
c001f0c7:	e9 1a 01 00 00       	jmp    c001f1e6 <int_common_stub>

c001f0cc <isr7>:
c001f0cc:	fa                   	cli    
c001f0cd:	6a 00                	push   0x0
c001f0cf:	6a 07                	push   0x7
c001f0d1:	e9 10 01 00 00       	jmp    c001f1e6 <int_common_stub>

c001f0d6 <isr8>:
c001f0d6:	fa                   	cli    
c001f0d7:	6a 08                	push   0x8
c001f0d9:	e9 08 01 00 00       	jmp    c001f1e6 <int_common_stub>

c001f0de <isr9>:
c001f0de:	fa                   	cli    
c001f0df:	6a 00                	push   0x0
c001f0e1:	6a 09                	push   0x9
c001f0e3:	e9 fe 00 00 00       	jmp    c001f1e6 <int_common_stub>

c001f0e8 <isr10>:
c001f0e8:	fa                   	cli    
c001f0e9:	6a 0a                	push   0xa
c001f0eb:	e9 f6 00 00 00       	jmp    c001f1e6 <int_common_stub>

c001f0f0 <isr11>:
c001f0f0:	fa                   	cli    
c001f0f1:	6a 0b                	push   0xb
c001f0f3:	e9 ee 00 00 00       	jmp    c001f1e6 <int_common_stub>

c001f0f8 <isr12>:
c001f0f8:	fa                   	cli    
c001f0f9:	6a 0c                	push   0xc
c001f0fb:	e9 e6 00 00 00       	jmp    c001f1e6 <int_common_stub>

c001f100 <isr13>:
c001f100:	fa                   	cli    
c001f101:	6a 0d                	push   0xd
c001f103:	53                   	push   ebx
c001f104:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001f108:	81 fb d6 f2 01 c0    	cmp    ebx,0xc001f2d6
c001f10e:	5b                   	pop    ebx
c001f10f:	0f 84 c3 01 00 00    	je     c001f2d8 <finishSignal2>
c001f115:	e9 cc 00 00 00       	jmp    c001f1e6 <int_common_stub>

c001f11a <isr14>:
c001f11a:	fa                   	cli    
c001f11b:	6a 0e                	push   0xe
c001f11d:	e9 c4 00 00 00       	jmp    c001f1e6 <int_common_stub>

c001f122 <isr15>:
c001f122:	fa                   	cli    
c001f123:	6a 00                	push   0x0
c001f125:	6a 0f                	push   0xf
c001f127:	e9 ba 00 00 00       	jmp    c001f1e6 <int_common_stub>

c001f12c <isr16>:
c001f12c:	fa                   	cli    
c001f12d:	6a 00                	push   0x0
c001f12f:	6a 10                	push   0x10
c001f131:	e9 b0 00 00 00       	jmp    c001f1e6 <int_common_stub>

c001f136 <isr17>:
c001f136:	fa                   	cli    
c001f137:	6a 00                	push   0x0
c001f139:	6a 11                	push   0x11
c001f13b:	e9 a6 00 00 00       	jmp    c001f1e6 <int_common_stub>

c001f140 <isr18>:
c001f140:	fa                   	cli    
c001f141:	6a 00                	push   0x0
c001f143:	6a 12                	push   0x12
c001f145:	e9 9c 00 00 00       	jmp    c001f1e6 <int_common_stub>

c001f14a <irq3>:
c001f14a:	fa                   	cli    
c001f14b:	6a 00                	push   0x0
c001f14d:	6a 23                	push   0x23
c001f14f:	e9 92 00 00 00       	jmp    c001f1e6 <int_common_stub>

c001f154 <irq4>:
c001f154:	fa                   	cli    
c001f155:	6a 00                	push   0x0
c001f157:	6a 24                	push   0x24
c001f159:	e9 88 00 00 00       	jmp    c001f1e6 <int_common_stub>

c001f15e <irq5>:
c001f15e:	fa                   	cli    
c001f15f:	6a 00                	push   0x0
c001f161:	6a 25                	push   0x25
c001f163:	e9 7e 00 00 00       	jmp    c001f1e6 <int_common_stub>

c001f168 <irq6>:
c001f168:	fa                   	cli    
c001f169:	6a 00                	push   0x0
c001f16b:	6a 26                	push   0x26
c001f16d:	e9 74 00 00 00       	jmp    c001f1e6 <int_common_stub>

c001f172 <irq7>:
c001f172:	fa                   	cli    
c001f173:	6a 00                	push   0x0
c001f175:	6a 27                	push   0x27
c001f177:	e9 6a 00 00 00       	jmp    c001f1e6 <int_common_stub>

c001f17c <irq8>:
c001f17c:	fa                   	cli    
c001f17d:	6a 00                	push   0x0
c001f17f:	6a 28                	push   0x28
c001f181:	e9 60 00 00 00       	jmp    c001f1e6 <int_common_stub>

c001f186 <irq9>:
c001f186:	fa                   	cli    
c001f187:	6a 00                	push   0x0
c001f189:	6a 29                	push   0x29
c001f18b:	e9 56 00 00 00       	jmp    c001f1e6 <int_common_stub>

c001f190 <irq10>:
c001f190:	fa                   	cli    
c001f191:	6a 00                	push   0x0
c001f193:	6a 2a                	push   0x2a
c001f195:	e9 4c 00 00 00       	jmp    c001f1e6 <int_common_stub>

c001f19a <irq11>:
c001f19a:	fa                   	cli    
c001f19b:	6a 00                	push   0x0
c001f19d:	6a 2b                	push   0x2b
c001f19f:	e9 42 00 00 00       	jmp    c001f1e6 <int_common_stub>

c001f1a4 <irq12>:
c001f1a4:	fa                   	cli    
c001f1a5:	6a 00                	push   0x0
c001f1a7:	6a 2c                	push   0x2c
c001f1a9:	e9 38 00 00 00       	jmp    c001f1e6 <int_common_stub>

c001f1ae <irq13>:
c001f1ae:	fa                   	cli    
c001f1af:	6a 00                	push   0x0
c001f1b1:	6a 2d                	push   0x2d
c001f1b3:	e9 2e 00 00 00       	jmp    c001f1e6 <int_common_stub>

c001f1b8 <irq14>:
c001f1b8:	fa                   	cli    
c001f1b9:	6a 00                	push   0x0
c001f1bb:	6a 2e                	push   0x2e
c001f1bd:	e9 24 00 00 00       	jmp    c001f1e6 <int_common_stub>

c001f1c2 <irq15>:
c001f1c2:	fa                   	cli    
c001f1c3:	6a 00                	push   0x0
c001f1c5:	6a 2f                	push   0x2f
c001f1c7:	e9 1a 00 00 00       	jmp    c001f1e6 <int_common_stub>

c001f1cc <irq1>:
c001f1cc:	fa                   	cli    
c001f1cd:	6a 00                	push   0x0
c001f1cf:	6a 21                	push   0x21
c001f1d1:	eb 13                	jmp    c001f1e6 <int_common_stub>

c001f1d3 <irq2>:
c001f1d3:	fa                   	cli    
c001f1d4:	6a 00                	push   0x0
c001f1d6:	6a 22                	push   0x22
c001f1d8:	eb 0c                	jmp    c001f1e6 <int_common_stub>

c001f1da <isr96>:
c001f1da:	6a 00                	push   0x0
c001f1dc:	6a 60                	push   0x60
c001f1de:	fb                   	sti    
c001f1df:	eb 37                	jmp    c001f218 <syscall_common_stub>

c001f1e1 <irq0>:
c001f1e1:	fa                   	cli    
c001f1e2:	6a 00                	push   0x0
c001f1e4:	6a 20                	push   0x20

c001f1e6 <int_common_stub>:
c001f1e6:	60                   	pusha  
c001f1e7:	1e                   	push   ds
c001f1e8:	06                   	push   es
c001f1e9:	0f a0                	push   fs
c001f1eb:	0f a8                	push   gs
c001f1ed:	66 b8 10 00          	mov    ax,0x10
c001f1f1:	66 8e d8             	mov    ds,ax
c001f1f4:	66 8e c0             	mov    es,ax
c001f1f7:	66 8e e0             	mov    fs,ax
c001f1fa:	66 8e e8             	mov    gs,ax
c001f1fd:	54                   	push   esp
c001f1fe:	fc                   	cld    
c001f1ff:	e8 78 dc fe ff       	call   c000ce7c <int_handler>
c001f204:	81 c4 04 00 00 00    	add    esp,0x4
c001f20a:	0f a9                	pop    gs
c001f20c:	0f a1                	pop    fs
c001f20e:	07                   	pop    es
c001f20f:	1f                   	pop    ds
c001f210:	61                   	popa   
c001f211:	81 c4 08 00 00 00    	add    esp,0x8
c001f217:	cf                   	iret   

c001f218 <syscall_common_stub>:
c001f218:	60                   	pusha  
c001f219:	1e                   	push   ds
c001f21a:	06                   	push   es
c001f21b:	0f a0                	push   fs
c001f21d:	0f a8                	push   gs
c001f21f:	66 b8 10 00          	mov    ax,0x10
c001f223:	66 8e d8             	mov    ds,ax
c001f226:	66 8e c0             	mov    es,ax
c001f229:	66 8e e0             	mov    fs,ax
c001f22c:	66 8e e8             	mov    gs,ax
c001f22f:	54                   	push   esp
c001f230:	fc                   	cld    
c001f231:	e8 46 dc fe ff       	call   c000ce7c <int_handler>
c001f236:	81 c4 04 00 00 00    	add    esp,0x4
c001f23c:	0f a9                	pop    gs
c001f23e:	0f a1                	pop    fs
c001f240:	07                   	pop    es
c001f241:	1f                   	pop    ds
c001f242:	e8 fb 29 ff ff       	call   c0011c42 <KiCheckSignalZ>
c001f247:	3d 00 00 00 00       	cmp    eax,0x0
c001f24c:	0f 84 c0 00 00 00    	je     c001f312 <skipSignals>
c001f252:	a3 08 20 00 c2       	mov    ds:0xc2002008,eax
c001f257:	61                   	popa   
c001f258:	53                   	push   ebx
c001f259:	8b 1d 08 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002008
c001f25f:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c001f262:	5b                   	pop    ebx
c001f263:	a1 08 20 00 c2       	mov    eax,ds:0xc2002008
c001f268:	89 58 10             	mov    DWORD PTR [eax+0x10],ebx
c001f26b:	89 48 14             	mov    DWORD PTR [eax+0x14],ecx
c001f26e:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001f271:	89 70 1c             	mov    DWORD PTR [eax+0x1c],esi
c001f274:	89 78 20             	mov    DWORD PTR [eax+0x20],edi
c001f277:	89 68 24             	mov    DWORD PTR [eax+0x24],ebp
c001f27a:	81 c4 08 00 00 00    	add    esp,0x8
c001f280:	5e                   	pop    esi
c001f281:	5b                   	pop    ebx
c001f282:	59                   	pop    ecx
c001f283:	5a                   	pop    edx
c001f284:	89 70 2c             	mov    DWORD PTR [eax+0x2c],esi
c001f287:	89 48 30             	mov    DWORD PTR [eax+0x30],ecx
c001f28a:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c001f28d:	52                   	push   edx
c001f28e:	51                   	push   ecx
c001f28f:	53                   	push   ebx
c001f290:	56                   	push   esi
c001f291:	81 ec 08 00 00 00    	sub    esp,0x8
c001f297:	8b 70 1c             	mov    esi,DWORD PTR [eax+0x1c]
c001f29a:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c001f29d:	8b 48 14             	mov    ecx,DWORD PTR [eax+0x14]
c001f2a0:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001f2a3:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001f2a6:	60                   	pusha  
c001f2a7:	8b 35 08 20 00 c2    	mov    esi,DWORD PTR ds:0xc2002008
c001f2ad:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c001f2b0:	89 e3                	mov    ebx,esp
c001f2b2:	8b 63 34             	mov    esp,DWORD PTR [ebx+0x34]
c001f2b5:	52                   	push   edx
c001f2b6:	68 d6 f2 01 c0       	push   0xc001f2d6
c001f2bb:	89 63 34             	mov    DWORD PTR [ebx+0x34],esp
c001f2be:	89 dc                	mov    esp,ebx
c001f2c0:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c001f2c3:	68 23 00 00 00       	push   0x23
c001f2c8:	51                   	push   ecx
c001f2c9:	68 02 02 00 00       	push   0x202
c001f2ce:	68 1b 00 00 00       	push   0x1b
c001f2d3:	ff 36                	push   DWORD PTR [esi]
c001f2d5:	cf                   	iret   

c001f2d6 <finishSignal>:
c001f2d6:	cd 0f                	int    0xf

c001f2d8 <finishSignal2>:
c001f2d8:	ff 35 08 20 00 c2    	push   DWORD PTR ds:0xc2002008
c001f2de:	e8 dc 29 ff ff       	call   c0011cbf <KiFinishSignalZ>
c001f2e3:	8b 2d 08 20 00 c2    	mov    ebp,DWORD PTR ds:0xc2002008
c001f2e9:	68 23 00 00 00       	push   0x23
c001f2ee:	ff 75 28             	push   DWORD PTR [ebp+0x28]
c001f2f1:	ff 75 30             	push   DWORD PTR [ebp+0x30]
c001f2f4:	68 1b 00 00 00       	push   0x1b
c001f2f9:	ff 75 2c             	push   DWORD PTR [ebp+0x2c]
c001f2fc:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001f2ff:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c001f302:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c001f305:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c001f308:	8b 75 1c             	mov    esi,DWORD PTR [ebp+0x1c]
c001f30b:	8b 7d 20             	mov    edi,DWORD PTR [ebp+0x20]
c001f30e:	8b 6d 24             	mov    ebp,DWORD PTR [ebp+0x24]
c001f311:	cf                   	iret   

c001f312 <skipSignals>:
c001f312:	61                   	popa   
c001f313:	81 c4 08 00 00 00    	add    esp,0x8
c001f319:	cf                   	iret   
c001f31a:	90                   	nop
c001f31b:	90                   	nop

c001f31c <irq16>:
c001f31c:	fa                   	cli    
c001f31d:	6a 00                	push   0x0
c001f31f:	6a 30                	push   0x30
c001f321:	e9 c0 fe ff ff       	jmp    c001f1e6 <int_common_stub>

c001f326 <irq17>:
c001f326:	fa                   	cli    
c001f327:	6a 00                	push   0x0
c001f329:	6a 31                	push   0x31
c001f32b:	e9 b6 fe ff ff       	jmp    c001f1e6 <int_common_stub>

c001f330 <irq18>:
c001f330:	fa                   	cli    
c001f331:	6a 00                	push   0x0
c001f333:	6a 32                	push   0x32
c001f335:	e9 ac fe ff ff       	jmp    c001f1e6 <int_common_stub>

c001f33a <irq19>:
c001f33a:	fa                   	cli    
c001f33b:	6a 00                	push   0x0
c001f33d:	6a 33                	push   0x33
c001f33f:	e9 a2 fe ff ff       	jmp    c001f1e6 <int_common_stub>

c001f344 <irq20>:
c001f344:	fa                   	cli    
c001f345:	6a 00                	push   0x0
c001f347:	6a 34                	push   0x34
c001f349:	e9 98 fe ff ff       	jmp    c001f1e6 <int_common_stub>

c001f34e <irq21>:
c001f34e:	fa                   	cli    
c001f34f:	6a 00                	push   0x0
c001f351:	6a 35                	push   0x35
c001f353:	e9 8e fe ff ff       	jmp    c001f1e6 <int_common_stub>

c001f358 <irq22>:
c001f358:	fa                   	cli    
c001f359:	6a 00                	push   0x0
c001f35b:	6a 36                	push   0x36
c001f35d:	e9 84 fe ff ff       	jmp    c001f1e6 <int_common_stub>

c001f362 <irq23>:
c001f362:	fa                   	cli    
c001f363:	6a 00                	push   0x0
c001f365:	6a 37                	push   0x37
c001f367:	e9 7a fe ff ff       	jmp    c001f1e6 <int_common_stub>
c001f36c:	66 90                	xchg   ax,ax
c001f36e:	66 90                	xchg   ax,ax

c001f370 <i386GetRDRAND>:
c001f370:	b9 64 00 00 00       	mov    ecx,0x64

c001f375 <retry>:
c001f375:	0f c7 f0             	rdrand eax
c001f378:	72 05                	jb     c001f37f <retry.done>
c001f37a:	e2 f9                	loop   c001f375 <retry>

c001f37c <retry.fail>:
c001f37c:	31 c0                	xor    eax,eax
c001f37e:	c3                   	ret    

c001f37f <retry.done>:
c001f37f:	c3                   	ret    

c001f380 <absolutelyNoChanceInHell>:
c001f380:	b8 01 00 00 00       	mov    eax,0x1
c001f385:	0f a2                	cpuid  
c001f387:	f7 c2 00 00 00 02    	test   edx,0x2000000
c001f38d:	74 06                	je     c001f395 <sseDetect.noSSE>
c001f38f:	b8 01 00 00 00       	mov    eax,0x1
c001f394:	c3                   	ret    

c001f395 <sseDetect.noSSE>:
c001f395:	31 c0                	xor    eax,eax
c001f397:	c3                   	ret    

c001f398 <sseSave>:
c001f398:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f39c:	0f ae 00             	fxsave [eax]
c001f39f:	c3                   	ret    

c001f3a0 <sseLoad>:
c001f3a0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f3a4:	0f ae 08             	fxrstor [eax]
c001f3a7:	c3                   	ret    

c001f3a8 <sseInit>:
c001f3a8:	e8 42 00 00 00       	call   c001f3ef <x87Init>
c001f3ad:	0f 20 e0             	mov    eax,cr4
c001f3b0:	66 0d 00 06          	or     ax,0x600
c001f3b4:	0f 22 e0             	mov    cr4,eax
c001f3b7:	c3                   	ret    

c001f3b8 <sseClose>:
c001f3b8:	c3                   	ret    
c001f3b9:	66 90                	xchg   ax,ax
c001f3bb:	66 90                	xchg   ax,ax
c001f3bd:	66 90                	xchg   ax,ax
c001f3bf:	90                   	nop

c001f3c0 <value_37F>:
c001f3c0:	7f 03                	jg     c001f3c5 <value_37A+0x1>

c001f3c2 <value_37E>:
c001f3c2:	7e 03                	jle    c001f3c7 <x87Detect+0x1>

c001f3c4 <value_37A>:
c001f3c4:	7a 03                	jp     c001f3c9 <x87Detect+0x3>

c001f3c6 <x87Detect>:
c001f3c6:	b8 01 00 00 00       	mov    eax,0x1
c001f3cb:	0f a2                	cpuid  
c001f3cd:	f7 c2 01 00 00 00    	test   edx,0x1
c001f3d3:	74 06                	je     c001f3db <x87Detect.nox87>
c001f3d5:	b8 01 00 00 00       	mov    eax,0x1
c001f3da:	c3                   	ret    

c001f3db <x87Detect.nox87>:
c001f3db:	b8 00 00 00 00       	mov    eax,0x0
c001f3e0:	c3                   	ret    

c001f3e1 <x87Save>:
c001f3e1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f3e5:	dd 30                	fnsave [eax]
c001f3e7:	c3                   	ret    

c001f3e8 <x87Load>:
c001f3e8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f3ec:	dd 20                	frstor [eax]
c001f3ee:	c3                   	ret    

c001f3ef <x87Init>:
c001f3ef:	0f 20 c0             	mov    eax,cr0
c001f3f2:	66 25 fb ff          	and    ax,0xfffb
c001f3f6:	66 0d 22 00          	or     ax,0x22
c001f3fa:	0f 22 c0             	mov    cr0,eax
c001f3fd:	db e3                	fninit 
c001f3ff:	0f 06                	clts   
c001f401:	d9 2d c4 f3 01 c0    	fldcw  WORD PTR ds:0xc001f3c4
c001f407:	c3                   	ret    

c001f408 <x87Close>:
c001f408:	c3                   	ret    
c001f409:	66 90                	xchg   ax,ax
c001f40b:	90                   	nop

c001f40c <__do_global_ctors_aux>:
c001f40c:	a1 c0 03 02 c0       	mov    eax,ds:0xc00203c0
c001f411:	83 f8 ff             	cmp    eax,0xffffffff
c001f414:	74 1a                	je     c001f430 <__do_global_ctors_aux+0x24>
c001f416:	55                   	push   ebp
c001f417:	89 e5                	mov    ebp,esp
c001f419:	53                   	push   ebx
c001f41a:	52                   	push   edx
c001f41b:	bb c0 03 02 c0       	mov    ebx,0xc00203c0
c001f420:	ff d0                	call   eax
c001f422:	83 eb 04             	sub    ebx,0x4
c001f425:	8b 03                	mov    eax,DWORD PTR [ebx]
c001f427:	83 f8 ff             	cmp    eax,0xffffffff
c001f42a:	75 f4                	jne    c001f420 <__do_global_ctors_aux+0x14>
c001f42c:	58                   	pop    eax
c001f42d:	5b                   	pop    ebx
c001f42e:	5d                   	pop    ebp
c001f42f:	c3                   	ret    
c001f430:	c3                   	ret    
c001f431:	66 90                	xchg   ax,ax
c001f433:	90                   	nop

c001f434 <__divdi3>:
c001f434:	55                   	push   ebp
c001f435:	57                   	push   edi
c001f436:	56                   	push   esi
c001f437:	53                   	push   ebx
c001f438:	83 ec 1c             	sub    esp,0x1c
c001f43b:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001f43f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001f443:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001f446:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001f44a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001f44e:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001f452:	85 db                	test   ebx,ebx
c001f454:	0f 88 8e 00 00 00    	js     c001f4e8 <__divdi3+0xb4>
c001f45a:	89 dd                	mov    ebp,ebx
c001f45c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001f464:	89 d3                	mov    ebx,edx
c001f466:	85 d2                	test   edx,edx
c001f468:	79 0d                	jns    c001f477 <__divdi3+0x43>
c001f46a:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c001f46e:	f7 d8                	neg    eax
c001f470:	83 d2 00             	adc    edx,0x0
c001f473:	f7 da                	neg    edx
c001f475:	89 d3                	mov    ebx,edx
c001f477:	89 c7                	mov    edi,eax
c001f479:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001f47c:	85 db                	test   ebx,ebx
c001f47e:	75 48                	jne    c001f4c8 <__divdi3+0x94>
c001f480:	39 ef                	cmp    edi,ebp
c001f482:	76 24                	jbe    c001f4a8 <__divdi3+0x74>
c001f484:	89 ea                	mov    edx,ebp
c001f486:	f7 f7                	div    edi
c001f488:	89 c1                	mov    ecx,eax
c001f48a:	31 f6                	xor    esi,esi
c001f48c:	89 c8                	mov    eax,ecx
c001f48e:	89 f2                	mov    edx,esi
c001f490:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001f494:	85 c9                	test   ecx,ecx
c001f496:	74 07                	je     c001f49f <__divdi3+0x6b>
c001f498:	f7 d8                	neg    eax
c001f49a:	83 d2 00             	adc    edx,0x0
c001f49d:	f7 da                	neg    edx
c001f49f:	83 c4 1c             	add    esp,0x1c
c001f4a2:	5b                   	pop    ebx
c001f4a3:	5e                   	pop    esi
c001f4a4:	5f                   	pop    edi
c001f4a5:	5d                   	pop    ebp
c001f4a6:	c3                   	ret    
c001f4a7:	90                   	nop
c001f4a8:	85 ff                	test   edi,edi
c001f4aa:	75 0b                	jne    c001f4b7 <__divdi3+0x83>
c001f4ac:	b8 01 00 00 00       	mov    eax,0x1
c001f4b1:	31 d2                	xor    edx,edx
c001f4b3:	f7 f3                	div    ebx
c001f4b5:	89 c7                	mov    edi,eax
c001f4b7:	31 d2                	xor    edx,edx
c001f4b9:	89 e8                	mov    eax,ebp
c001f4bb:	f7 f7                	div    edi
c001f4bd:	89 c6                	mov    esi,eax
c001f4bf:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001f4c2:	f7 f7                	div    edi
c001f4c4:	89 c1                	mov    ecx,eax
c001f4c6:	eb c4                	jmp    c001f48c <__divdi3+0x58>
c001f4c8:	39 eb                	cmp    ebx,ebp
c001f4ca:	77 3c                	ja     c001f508 <__divdi3+0xd4>
c001f4cc:	0f bd f3             	bsr    esi,ebx
c001f4cf:	83 f6 1f             	xor    esi,0x1f
c001f4d2:	75 40                	jne    c001f514 <__divdi3+0xe0>
c001f4d4:	39 eb                	cmp    ebx,ebp
c001f4d6:	72 09                	jb     c001f4e1 <__divdi3+0xad>
c001f4d8:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c001f4db:	0f 87 97 00 00 00    	ja     c001f578 <__divdi3+0x144>
c001f4e1:	b9 01 00 00 00       	mov    ecx,0x1
c001f4e6:	eb a4                	jmp    c001f48c <__divdi3+0x58>
c001f4e8:	f7 d9                	neg    ecx
c001f4ea:	83 d3 00             	adc    ebx,0x0
c001f4ed:	f7 db                	neg    ebx
c001f4ef:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001f4f2:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001f4f6:	89 dd                	mov    ebp,ebx
c001f4f8:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c001f500:	e9 5f ff ff ff       	jmp    c001f464 <__divdi3+0x30>
c001f505:	8d 76 00             	lea    esi,[esi+0x0]
c001f508:	31 f6                	xor    esi,esi
c001f50a:	31 c9                	xor    ecx,ecx
c001f50c:	e9 7b ff ff ff       	jmp    c001f48c <__divdi3+0x58>
c001f511:	8d 76 00             	lea    esi,[esi+0x0]
c001f514:	b8 20 00 00 00       	mov    eax,0x20
c001f519:	29 f0                	sub    eax,esi
c001f51b:	89 f1                	mov    ecx,esi
c001f51d:	d3 e3                	shl    ebx,cl
c001f51f:	89 fa                	mov    edx,edi
c001f521:	88 c1                	mov    cl,al
c001f523:	d3 ea                	shr    edx,cl
c001f525:	09 da                	or     edx,ebx
c001f527:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001f52b:	89 f1                	mov    ecx,esi
c001f52d:	d3 e7                	shl    edi,cl
c001f52f:	89 eb                	mov    ebx,ebp
c001f531:	88 c1                	mov    cl,al
c001f533:	d3 eb                	shr    ebx,cl
c001f535:	89 f1                	mov    ecx,esi
c001f537:	d3 e5                	shl    ebp,cl
c001f539:	8b 14 24             	mov    edx,DWORD PTR [esp]
c001f53c:	88 c1                	mov    cl,al
c001f53e:	d3 ea                	shr    edx,cl
c001f540:	09 d5                	or     ebp,edx
c001f542:	89 e8                	mov    eax,ebp
c001f544:	89 da                	mov    edx,ebx
c001f546:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c001f54a:	89 d3                	mov    ebx,edx
c001f54c:	89 c5                	mov    ebp,eax
c001f54e:	f7 e7                	mul    edi
c001f550:	39 d3                	cmp    ebx,edx
c001f552:	72 18                	jb     c001f56c <__divdi3+0x138>
c001f554:	74 0a                	je     c001f560 <__divdi3+0x12c>
c001f556:	89 e9                	mov    ecx,ebp
c001f558:	31 f6                	xor    esi,esi
c001f55a:	e9 2d ff ff ff       	jmp    c001f48c <__divdi3+0x58>
c001f55f:	90                   	nop
c001f560:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c001f563:	89 f1                	mov    ecx,esi
c001f565:	d3 e7                	shl    edi,cl
c001f567:	39 c7                	cmp    edi,eax
c001f569:	73 eb                	jae    c001f556 <__divdi3+0x122>
c001f56b:	90                   	nop
c001f56c:	8d 4d ff             	lea    ecx,[ebp-0x1]
c001f56f:	31 f6                	xor    esi,esi
c001f571:	e9 16 ff ff ff       	jmp    c001f48c <__divdi3+0x58>
c001f576:	66 90                	xchg   ax,ax
c001f578:	31 c9                	xor    ecx,ecx
c001f57a:	e9 0d ff ff ff       	jmp    c001f48c <__divdi3+0x58>
c001f57f:	90                   	nop

c001f580 <__moddi3>:
c001f580:	55                   	push   ebp
c001f581:	57                   	push   edi
c001f582:	56                   	push   esi
c001f583:	53                   	push   ebx
c001f584:	83 ec 2c             	sub    esp,0x2c
c001f587:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001f58b:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c001f58f:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001f593:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c001f597:	85 db                	test   ebx,ebx
c001f599:	0f 88 85 00 00 00    	js     c001f624 <__moddi3+0xa4>
c001f59f:	89 de                	mov    esi,ebx
c001f5a1:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001f5a9:	89 d7                	mov    edi,edx
c001f5ab:	85 d2                	test   edx,edx
c001f5ad:	79 09                	jns    c001f5b8 <__moddi3+0x38>
c001f5af:	f7 d8                	neg    eax
c001f5b1:	83 d2 00             	adc    edx,0x0
c001f5b4:	f7 da                	neg    edx
c001f5b6:	89 d7                	mov    edi,edx
c001f5b8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f5bc:	89 cd                	mov    ebp,ecx
c001f5be:	85 ff                	test   edi,edi
c001f5c0:	75 52                	jne    c001f614 <__moddi3+0x94>
c001f5c2:	89 c3                	mov    ebx,eax
c001f5c4:	39 f0                	cmp    eax,esi
c001f5c6:	76 24                	jbe    c001f5ec <__moddi3+0x6c>
c001f5c8:	89 c8                	mov    eax,ecx
c001f5ca:	89 f2                	mov    edx,esi
c001f5cc:	f7 f3                	div    ebx
c001f5ce:	89 d6                	mov    esi,edx
c001f5d0:	89 f0                	mov    eax,esi
c001f5d2:	31 d2                	xor    edx,edx
c001f5d4:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001f5d8:	85 c9                	test   ecx,ecx
c001f5da:	74 07                	je     c001f5e3 <__moddi3+0x63>
c001f5dc:	f7 d8                	neg    eax
c001f5de:	83 d2 00             	adc    edx,0x0
c001f5e1:	f7 da                	neg    edx
c001f5e3:	83 c4 2c             	add    esp,0x2c
c001f5e6:	5b                   	pop    ebx
c001f5e7:	5e                   	pop    esi
c001f5e8:	5f                   	pop    edi
c001f5e9:	5d                   	pop    ebp
c001f5ea:	c3                   	ret    
c001f5eb:	90                   	nop
c001f5ec:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001f5f0:	85 db                	test   ebx,ebx
c001f5f2:	75 0d                	jne    c001f601 <__moddi3+0x81>
c001f5f4:	b8 01 00 00 00       	mov    eax,0x1
c001f5f9:	31 d2                	xor    edx,edx
c001f5fb:	f7 f7                	div    edi
c001f5fd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f601:	89 f0                	mov    eax,esi
c001f603:	31 d2                	xor    edx,edx
c001f605:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001f609:	f7 f7                	div    edi
c001f60b:	89 e8                	mov    eax,ebp
c001f60d:	f7 f7                	div    edi
c001f60f:	89 d6                	mov    esi,edx
c001f611:	eb bd                	jmp    c001f5d0 <__moddi3+0x50>
c001f613:	90                   	nop
c001f614:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001f618:	39 f7                	cmp    edi,esi
c001f61a:	76 20                	jbe    c001f63c <__moddi3+0xbc>
c001f61c:	89 c8                	mov    eax,ecx
c001f61e:	89 f2                	mov    edx,esi
c001f620:	eb b2                	jmp    c001f5d4 <__moddi3+0x54>
c001f622:	66 90                	xchg   ax,ax
c001f624:	f7 d9                	neg    ecx
c001f626:	83 d3 00             	adc    ebx,0x0
c001f629:	f7 db                	neg    ebx
c001f62b:	89 de                	mov    esi,ebx
c001f62d:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c001f635:	e9 6f ff ff ff       	jmp    c001f5a9 <__moddi3+0x29>
c001f63a:	66 90                	xchg   ax,ax
c001f63c:	0f bd c7             	bsr    eax,edi
c001f63f:	83 f0 1f             	xor    eax,0x1f
c001f642:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001f646:	75 24                	jne    c001f66c <__moddi3+0xec>
c001f648:	39 f7                	cmp    edi,esi
c001f64a:	72 06                	jb     c001f652 <__moddi3+0xd2>
c001f64c:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c001f650:	77 0c                	ja     c001f65e <__moddi3+0xde>
c001f652:	89 e9                	mov    ecx,ebp
c001f654:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c001f658:	19 fe                	sbb    esi,edi
c001f65a:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001f65e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001f662:	89 f2                	mov    edx,esi
c001f664:	e9 6b ff ff ff       	jmp    c001f5d4 <__moddi3+0x54>
c001f669:	8d 76 00             	lea    esi,[esi+0x0]
c001f66c:	b8 20 00 00 00       	mov    eax,0x20
c001f671:	89 c2                	mov    edx,eax
c001f673:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001f677:	29 da                	sub    edx,ebx
c001f679:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001f67d:	88 d9                	mov    cl,bl
c001f67f:	d3 e7                	shl    edi,cl
c001f681:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f685:	88 d1                	mov    cl,dl
c001f687:	d3 e8                	shr    eax,cl
c001f689:	09 c7                	or     edi,eax
c001f68b:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c001f68f:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001f693:	89 d8                	mov    eax,ebx
c001f695:	88 d9                	mov    cl,bl
c001f697:	d3 e7                	shl    edi,cl
c001f699:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001f69d:	89 f3                	mov    ebx,esi
c001f69f:	88 d1                	mov    cl,dl
c001f6a1:	d3 eb                	shr    ebx,cl
c001f6a3:	89 c7                	mov    edi,eax
c001f6a5:	88 c1                	mov    cl,al
c001f6a7:	d3 e6                	shl    esi,cl
c001f6a9:	89 e8                	mov    eax,ebp
c001f6ab:	88 d1                	mov    cl,dl
c001f6ad:	d3 e8                	shr    eax,cl
c001f6af:	09 f0                	or     eax,esi
c001f6b1:	89 f9                	mov    ecx,edi
c001f6b3:	d3 e5                	shl    ebp,cl
c001f6b5:	89 da                	mov    edx,ebx
c001f6b7:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c001f6bb:	89 d3                	mov    ebx,edx
c001f6bd:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001f6c1:	89 c6                	mov    esi,eax
c001f6c3:	89 d1                	mov    ecx,edx
c001f6c5:	39 d3                	cmp    ebx,edx
c001f6c7:	72 27                	jb     c001f6f0 <__moddi3+0x170>
c001f6c9:	74 21                	je     c001f6ec <__moddi3+0x16c>
c001f6cb:	29 f5                	sub    ebp,esi
c001f6cd:	19 cb                	sbb    ebx,ecx
c001f6cf:	89 de                	mov    esi,ebx
c001f6d1:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c001f6d5:	d3 e6                	shl    esi,cl
c001f6d7:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001f6db:	89 f9                	mov    ecx,edi
c001f6dd:	d3 ed                	shr    ebp,cl
c001f6df:	09 ee                	or     esi,ebp
c001f6e1:	89 f0                	mov    eax,esi
c001f6e3:	d3 eb                	shr    ebx,cl
c001f6e5:	89 da                	mov    edx,ebx
c001f6e7:	e9 e8 fe ff ff       	jmp    c001f5d4 <__moddi3+0x54>
c001f6ec:	39 c5                	cmp    ebp,eax
c001f6ee:	73 db                	jae    c001f6cb <__moddi3+0x14b>
c001f6f0:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001f6f4:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c001f6f8:	89 d1                	mov    ecx,edx
c001f6fa:	89 c6                	mov    esi,eax
c001f6fc:	eb cd                	jmp    c001f6cb <__moddi3+0x14b>
c001f6fe:	66 90                	xchg   ax,ax

c001f700 <__udivdi3>:
c001f700:	55                   	push   ebp
c001f701:	57                   	push   edi
c001f702:	56                   	push   esi
c001f703:	53                   	push   ebx
c001f704:	83 ec 1c             	sub    esp,0x1c
c001f707:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001f70b:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001f70f:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001f713:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001f717:	85 d2                	test   edx,edx
c001f719:	75 41                	jne    c001f75c <__udivdi3+0x5c>
c001f71b:	39 f7                	cmp    edi,esi
c001f71d:	76 15                	jbe    c001f734 <__udivdi3+0x34>
c001f71f:	89 e8                	mov    eax,ebp
c001f721:	89 f2                	mov    edx,esi
c001f723:	f7 f7                	div    edi
c001f725:	31 db                	xor    ebx,ebx
c001f727:	89 da                	mov    edx,ebx
c001f729:	83 c4 1c             	add    esp,0x1c
c001f72c:	5b                   	pop    ebx
c001f72d:	5e                   	pop    esi
c001f72e:	5f                   	pop    edi
c001f72f:	5d                   	pop    ebp
c001f730:	c3                   	ret    
c001f731:	8d 76 00             	lea    esi,[esi+0x0]
c001f734:	89 f9                	mov    ecx,edi
c001f736:	85 ff                	test   edi,edi
c001f738:	75 0b                	jne    c001f745 <__udivdi3+0x45>
c001f73a:	b8 01 00 00 00       	mov    eax,0x1
c001f73f:	31 d2                	xor    edx,edx
c001f741:	f7 f7                	div    edi
c001f743:	89 c1                	mov    ecx,eax
c001f745:	31 d2                	xor    edx,edx
c001f747:	89 f0                	mov    eax,esi
c001f749:	f7 f1                	div    ecx
c001f74b:	89 c3                	mov    ebx,eax
c001f74d:	89 e8                	mov    eax,ebp
c001f74f:	f7 f1                	div    ecx
c001f751:	89 da                	mov    edx,ebx
c001f753:	83 c4 1c             	add    esp,0x1c
c001f756:	5b                   	pop    ebx
c001f757:	5e                   	pop    esi
c001f758:	5f                   	pop    edi
c001f759:	5d                   	pop    ebp
c001f75a:	c3                   	ret    
c001f75b:	90                   	nop
c001f75c:	39 f2                	cmp    edx,esi
c001f75e:	77 1c                	ja     c001f77c <__udivdi3+0x7c>
c001f760:	0f bd da             	bsr    ebx,edx
c001f763:	83 f3 1f             	xor    ebx,0x1f
c001f766:	75 24                	jne    c001f78c <__udivdi3+0x8c>
c001f768:	39 f2                	cmp    edx,esi
c001f76a:	72 08                	jb     c001f774 <__udivdi3+0x74>
c001f76c:	39 ef                	cmp    edi,ebp
c001f76e:	0f 87 84 00 00 00    	ja     c001f7f8 <__udivdi3+0xf8>
c001f774:	b8 01 00 00 00       	mov    eax,0x1
c001f779:	eb ac                	jmp    c001f727 <__udivdi3+0x27>
c001f77b:	90                   	nop
c001f77c:	31 db                	xor    ebx,ebx
c001f77e:	31 c0                	xor    eax,eax
c001f780:	89 da                	mov    edx,ebx
c001f782:	83 c4 1c             	add    esp,0x1c
c001f785:	5b                   	pop    ebx
c001f786:	5e                   	pop    esi
c001f787:	5f                   	pop    edi
c001f788:	5d                   	pop    ebp
c001f789:	c3                   	ret    
c001f78a:	66 90                	xchg   ax,ax
c001f78c:	b8 20 00 00 00       	mov    eax,0x20
c001f791:	29 d8                	sub    eax,ebx
c001f793:	88 d9                	mov    cl,bl
c001f795:	d3 e2                	shl    edx,cl
c001f797:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001f79b:	89 fa                	mov    edx,edi
c001f79d:	88 c1                	mov    cl,al
c001f79f:	d3 ea                	shr    edx,cl
c001f7a1:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001f7a5:	09 d1                	or     ecx,edx
c001f7a7:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001f7ab:	88 d9                	mov    cl,bl
c001f7ad:	d3 e7                	shl    edi,cl
c001f7af:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001f7b3:	89 f7                	mov    edi,esi
c001f7b5:	88 c1                	mov    cl,al
c001f7b7:	d3 ef                	shr    edi,cl
c001f7b9:	88 d9                	mov    cl,bl
c001f7bb:	d3 e6                	shl    esi,cl
c001f7bd:	89 ea                	mov    edx,ebp
c001f7bf:	88 c1                	mov    cl,al
c001f7c1:	d3 ea                	shr    edx,cl
c001f7c3:	09 d6                	or     esi,edx
c001f7c5:	89 f0                	mov    eax,esi
c001f7c7:	89 fa                	mov    edx,edi
c001f7c9:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001f7cd:	89 d7                	mov    edi,edx
c001f7cf:	89 c6                	mov    esi,eax
c001f7d1:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001f7d5:	39 d7                	cmp    edi,edx
c001f7d7:	72 13                	jb     c001f7ec <__udivdi3+0xec>
c001f7d9:	74 09                	je     c001f7e4 <__udivdi3+0xe4>
c001f7db:	89 f0                	mov    eax,esi
c001f7dd:	31 db                	xor    ebx,ebx
c001f7df:	e9 43 ff ff ff       	jmp    c001f727 <__udivdi3+0x27>
c001f7e4:	88 d9                	mov    cl,bl
c001f7e6:	d3 e5                	shl    ebp,cl
c001f7e8:	39 c5                	cmp    ebp,eax
c001f7ea:	73 ef                	jae    c001f7db <__udivdi3+0xdb>
c001f7ec:	8d 46 ff             	lea    eax,[esi-0x1]
c001f7ef:	31 db                	xor    ebx,ebx
c001f7f1:	e9 31 ff ff ff       	jmp    c001f727 <__udivdi3+0x27>
c001f7f6:	66 90                	xchg   ax,ax
c001f7f8:	31 c0                	xor    eax,eax
c001f7fa:	e9 28 ff ff ff       	jmp    c001f727 <__udivdi3+0x27>
c001f7ff:	90                   	nop

c001f800 <__umoddi3>:
c001f800:	55                   	push   ebp
c001f801:	57                   	push   edi
c001f802:	56                   	push   esi
c001f803:	53                   	push   ebx
c001f804:	83 ec 1c             	sub    esp,0x1c
c001f807:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001f80b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001f80f:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001f813:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001f817:	89 da                	mov    edx,ebx
c001f819:	85 c0                	test   eax,eax
c001f81b:	75 37                	jne    c001f854 <__umoddi3+0x54>
c001f81d:	39 df                	cmp    edi,ebx
c001f81f:	76 13                	jbe    c001f834 <__umoddi3+0x34>
c001f821:	89 f0                	mov    eax,esi
c001f823:	f7 f7                	div    edi
c001f825:	89 d0                	mov    eax,edx
c001f827:	31 d2                	xor    edx,edx
c001f829:	83 c4 1c             	add    esp,0x1c
c001f82c:	5b                   	pop    ebx
c001f82d:	5e                   	pop    esi
c001f82e:	5f                   	pop    edi
c001f82f:	5d                   	pop    ebp
c001f830:	c3                   	ret    
c001f831:	8d 76 00             	lea    esi,[esi+0x0]
c001f834:	89 fd                	mov    ebp,edi
c001f836:	85 ff                	test   edi,edi
c001f838:	75 0b                	jne    c001f845 <__umoddi3+0x45>
c001f83a:	b8 01 00 00 00       	mov    eax,0x1
c001f83f:	31 d2                	xor    edx,edx
c001f841:	f7 f7                	div    edi
c001f843:	89 c5                	mov    ebp,eax
c001f845:	89 d8                	mov    eax,ebx
c001f847:	31 d2                	xor    edx,edx
c001f849:	f7 f5                	div    ebp
c001f84b:	89 f0                	mov    eax,esi
c001f84d:	f7 f5                	div    ebp
c001f84f:	89 d0                	mov    eax,edx
c001f851:	eb d4                	jmp    c001f827 <__umoddi3+0x27>
c001f853:	90                   	nop
c001f854:	89 f1                	mov    ecx,esi
c001f856:	39 d8                	cmp    eax,ebx
c001f858:	76 0a                	jbe    c001f864 <__umoddi3+0x64>
c001f85a:	89 f0                	mov    eax,esi
c001f85c:	83 c4 1c             	add    esp,0x1c
c001f85f:	5b                   	pop    ebx
c001f860:	5e                   	pop    esi
c001f861:	5f                   	pop    edi
c001f862:	5d                   	pop    ebp
c001f863:	c3                   	ret    
c001f864:	0f bd e8             	bsr    ebp,eax
c001f867:	83 f5 1f             	xor    ebp,0x1f
c001f86a:	75 1c                	jne    c001f888 <__umoddi3+0x88>
c001f86c:	39 d8                	cmp    eax,ebx
c001f86e:	72 04                	jb     c001f874 <__umoddi3+0x74>
c001f870:	39 f7                	cmp    edi,esi
c001f872:	77 08                	ja     c001f87c <__umoddi3+0x7c>
c001f874:	89 da                	mov    edx,ebx
c001f876:	29 fe                	sub    esi,edi
c001f878:	19 c2                	sbb    edx,eax
c001f87a:	89 f1                	mov    ecx,esi
c001f87c:	89 c8                	mov    eax,ecx
c001f87e:	83 c4 1c             	add    esp,0x1c
c001f881:	5b                   	pop    ebx
c001f882:	5e                   	pop    esi
c001f883:	5f                   	pop    edi
c001f884:	5d                   	pop    ebp
c001f885:	c3                   	ret    
c001f886:	66 90                	xchg   ax,ax
c001f888:	ba 20 00 00 00       	mov    edx,0x20
c001f88d:	29 ea                	sub    edx,ebp
c001f88f:	89 e9                	mov    ecx,ebp
c001f891:	d3 e0                	shl    eax,cl
c001f893:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001f897:	89 f8                	mov    eax,edi
c001f899:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001f89d:	88 d1                	mov    cl,dl
c001f89f:	d3 e8                	shr    eax,cl
c001f8a1:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001f8a5:	09 c1                	or     ecx,eax
c001f8a7:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001f8ab:	89 e9                	mov    ecx,ebp
c001f8ad:	d3 e7                	shl    edi,cl
c001f8af:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001f8b3:	89 d8                	mov    eax,ebx
c001f8b5:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001f8b9:	88 d1                	mov    cl,dl
c001f8bb:	d3 e8                	shr    eax,cl
c001f8bd:	89 c7                	mov    edi,eax
c001f8bf:	89 e9                	mov    ecx,ebp
c001f8c1:	d3 e3                	shl    ebx,cl
c001f8c3:	89 f0                	mov    eax,esi
c001f8c5:	88 d1                	mov    cl,dl
c001f8c7:	d3 e8                	shr    eax,cl
c001f8c9:	09 d8                	or     eax,ebx
c001f8cb:	89 e9                	mov    ecx,ebp
c001f8cd:	d3 e6                	shl    esi,cl
c001f8cf:	89 f3                	mov    ebx,esi
c001f8d1:	89 fa                	mov    edx,edi
c001f8d3:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001f8d7:	89 d1                	mov    ecx,edx
c001f8d9:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001f8dd:	89 c6                	mov    esi,eax
c001f8df:	89 d7                	mov    edi,edx
c001f8e1:	39 d1                	cmp    ecx,edx
c001f8e3:	72 27                	jb     c001f90c <__umoddi3+0x10c>
c001f8e5:	74 21                	je     c001f908 <__umoddi3+0x108>
c001f8e7:	89 ca                	mov    edx,ecx
c001f8e9:	29 f3                	sub    ebx,esi
c001f8eb:	19 fa                	sbb    edx,edi
c001f8ed:	89 d0                	mov    eax,edx
c001f8ef:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c001f8f3:	d3 e0                	shl    eax,cl
c001f8f5:	89 e9                	mov    ecx,ebp
c001f8f7:	d3 eb                	shr    ebx,cl
c001f8f9:	09 d8                	or     eax,ebx
c001f8fb:	d3 ea                	shr    edx,cl
c001f8fd:	83 c4 1c             	add    esp,0x1c
c001f900:	5b                   	pop    ebx
c001f901:	5e                   	pop    esi
c001f902:	5f                   	pop    edi
c001f903:	5d                   	pop    ebp
c001f904:	c3                   	ret    
c001f905:	8d 76 00             	lea    esi,[esi+0x0]
c001f908:	39 c3                	cmp    ebx,eax
c001f90a:	73 db                	jae    c001f8e7 <__umoddi3+0xe7>
c001f90c:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001f910:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c001f914:	89 d7                	mov    edi,edx
c001f916:	89 c6                	mov    esi,eax
c001f918:	eb cd                	jmp    c001f8e7 <__umoddi3+0xe7>

Disassembly of section .init:

c001f91a <_init>:
c001f91a:	55                   	push   ebp
c001f91b:	89 e5                	mov    ebp,esp
c001f91d:	e8 d2 07 fe ff       	call   c00000f4 <frame_dummy>
c001f922:	e8 e5 fa ff ff       	call   c001f40c <__do_global_ctors_aux>
c001f927:	5d                   	pop    ebp
c001f928:	c3                   	ret    

Disassembly of section .fini:

c001f929 <_fini>:
c001f929:	55                   	push   ebp
c001f92a:	89 e5                	mov    ebp,esp
c001f92c:	e8 53 07 fe ff       	call   c0000084 <__do_global_dtors_aux>
c001f931:	5d                   	pop    ebp
c001f932:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c001f934 <Computer::~Computer()>:
c001f934:	83 ec 0c             	sub    esp,0xc
c001f937:	ba 54 0c 02 c0       	mov    edx,0xc0020c54
c001f93c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f940:	89 10                	mov    DWORD PTR [eax],edx
c001f942:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f946:	83 ec 0c             	sub    esp,0xc
c001f949:	50                   	push   eax
c001f94a:	e8 85 cf fe ff       	call   c000c8d4 <Device::~Device()>
c001f94f:	83 c4 10             	add    esp,0x10
c001f952:	90                   	nop
c001f953:	83 c4 0c             	add    esp,0xc
c001f956:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c001f958 <Computer::~Computer()>:
c001f958:	83 ec 0c             	sub    esp,0xc
c001f95b:	83 ec 0c             	sub    esp,0xc
c001f95e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f962:	e8 cd ff ff ff       	call   c001f934 <Computer::~Computer()>
c001f967:	83 c4 10             	add    esp,0x10
c001f96a:	83 ec 08             	sub    esp,0x8
c001f96d:	68 70 01 00 00       	push   0x170
c001f972:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f976:	e8 9d ae fe ff       	call   c000a818 <operator delete(void*, unsigned long)>
c001f97b:	83 c4 10             	add    esp,0x10
c001f97e:	83 c4 0c             	add    esp,0xc
c001f981:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c001f982 <idleCommon()>:
c001f982:	83 ec 0c             	sub    esp,0xc
c001f985:	fa                   	cli    
c001f986:	ff 05 c8 c6 02 c0    	inc    DWORD PTR ds:0xc002c6c8
c001f98c:	e8 ff 66 ff ff       	call   c0016090 <schedule()>
c001f991:	a1 c8 c6 02 c0       	mov    eax,ds:0xc002c6c8
c001f996:	48                   	dec    eax
c001f997:	a3 c8 c6 02 c0       	mov    ds:0xc002c6c8,eax
c001f99c:	75 01                	jne    c001f99f <idleCommon()+0x1d>
c001f99e:	fb                   	sti    
c001f99f:	83 c4 0c             	add    esp,0xc
c001f9a2:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c001f9a4 <LinkedList<UnixFile>::~LinkedList()>:
c001f9a4:	90                   	nop
c001f9a5:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c001f9a6 <LinkedList<UnixFile>::LinkedList()>:
c001f9a6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f9aa:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001f9b0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f9b4:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001f9bb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f9bf:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001f9c6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f9ca:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001f9d0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f9d4:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001f9db:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f9df:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001f9e6:	90                   	nop
c001f9e7:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c001f9e8 <LinkedList<UnixFile>::addElement(UnixFile*)>:
c001f9e8:	83 ec 0c             	sub    esp,0xc
c001f9eb:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001f9f0:	75 10                	jne    c001fa02 <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c001f9f2:	83 ec 0c             	sub    esp,0xc
c001f9f5:	68 68 0e 02 c0       	push   0xc0020e68
c001f9fa:	e8 2c 1c ff ff       	call   c001162b <KePanic(char const*)>
c001f9ff:	83 c4 10             	add    esp,0x10
c001fa02:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa06:	8b 00                	mov    eax,DWORD PTR [eax]
c001fa08:	85 c0                	test   eax,eax
c001fa0a:	74 34                	je     c001fa40 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c001fa0c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa10:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fa13:	85 c0                	test   eax,eax
c001fa15:	74 29                	je     c001fa40 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c001fa17:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa1b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fa1e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fa22:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001fa25:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa29:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fa2d:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001fa30:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa34:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fa37:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001fa3e:	eb 65                	jmp    c001faa5 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001fa40:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa44:	8b 00                	mov    eax,DWORD PTR [eax]
c001fa46:	85 c0                	test   eax,eax
c001fa48:	75 4b                	jne    c001fa95 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c001fa4a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa4e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fa51:	85 c0                	test   eax,eax
c001fa53:	75 40                	jne    c001fa95 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c001fa55:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa59:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fa5d:	89 10                	mov    DWORD PTR [eax],edx
c001fa5f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa63:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fa67:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001fa6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa6e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fa71:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001fa78:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa7c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fa7f:	85 c0                	test   eax,eax
c001fa81:	74 22                	je     c001faa5 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001fa83:	83 ec 0c             	sub    esp,0xc
c001fa86:	68 8a 0e 02 c0       	push   0xc0020e8a
c001fa8b:	e8 9b 1b ff ff       	call   c001162b <KePanic(char const*)>
c001fa90:	83 c4 10             	add    esp,0x10
c001fa93:	eb 10                	jmp    c001faa5 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001fa95:	83 ec 0c             	sub    esp,0xc
c001fa98:	68 94 0e 02 c0       	push   0xc0020e94
c001fa9d:	e8 89 1b ff ff       	call   c001162b <KePanic(char const*)>
c001faa2:	83 c4 10             	add    esp,0x10
c001faa5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001faa9:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001faac:	8d 50 01             	lea    edx,[eax+0x1]
c001faaf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fab3:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001fab6:	90                   	nop
c001fab7:	83 c4 0c             	add    esp,0xc
c001faba:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c001fabc <LinkedList<UnixFile>::getFirstElement()>:
c001fabc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fac0:	8b 00                	mov    eax,DWORD PTR [eax]
c001fac2:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c001fac4 <LinkedList<UnixFile>::removeFirst()>:
c001fac4:	83 ec 0c             	sub    esp,0xc
c001fac7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001facb:	8b 00                	mov    eax,DWORD PTR [eax]
c001facd:	85 c0                	test   eax,eax
c001facf:	75 12                	jne    c001fae3 <LinkedList<UnixFile>::removeFirst()+0x1f>
c001fad1:	83 ec 0c             	sub    esp,0xc
c001fad4:	68 a0 0e 02 c0       	push   0xc0020ea0
c001fad9:	e8 4d 1b ff ff       	call   c001162b <KePanic(char const*)>
c001fade:	83 c4 10             	add    esp,0x10
c001fae1:	eb 7e                	jmp    c001fb61 <LinkedList<UnixFile>::removeFirst()+0x9d>
c001fae3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fae7:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001faea:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001faed:	85 c0                	test   eax,eax
c001faef:	74 10                	je     c001fb01 <LinkedList<UnixFile>::removeFirst()+0x3d>
c001faf1:	83 ec 0c             	sub    esp,0xc
c001faf4:	68 eb 0e 02 c0       	push   0xc0020eeb
c001faf9:	e8 2d 1b ff ff       	call   c001162b <KePanic(char const*)>
c001fafe:	83 c4 10             	add    esp,0x10
c001fb01:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb05:	8b 00                	mov    eax,DWORD PTR [eax]
c001fb07:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fb0a:	85 c0                	test   eax,eax
c001fb0c:	75 33                	jne    c001fb41 <LinkedList<UnixFile>::removeFirst()+0x7d>
c001fb0e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb12:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001fb18:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb1c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001fb23:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb27:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fb2a:	83 f8 01             	cmp    eax,0x1
c001fb2d:	74 21                	je     c001fb50 <LinkedList<UnixFile>::removeFirst()+0x8c>
c001fb2f:	83 ec 0c             	sub    esp,0xc
c001fb32:	68 c4 0e 02 c0       	push   0xc0020ec4
c001fb37:	e8 ef 1a ff ff       	call   c001162b <KePanic(char const*)>
c001fb3c:	83 c4 10             	add    esp,0x10
c001fb3f:	eb 0f                	jmp    c001fb50 <LinkedList<UnixFile>::removeFirst()+0x8c>
c001fb41:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb45:	8b 00                	mov    eax,DWORD PTR [eax]
c001fb47:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c001fb4a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb4e:	89 10                	mov    DWORD PTR [eax],edx
c001fb50:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb54:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fb57:	8d 50 ff             	lea    edx,[eax-0x1]
c001fb5a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb5e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001fb61:	83 c4 0c             	add    esp,0xc
c001fb64:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c001fb66 <LinkedList<UnixFile>::getNext(UnixFile*)>:
c001fb66:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001fb6a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fb6d:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c001fb6e <DriverlessDevice::~DriverlessDevice()>:
c001fb6e:	ba dc 1a 02 c0       	mov    edx,0xc0021adc
c001fb73:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fb77:	89 10                	mov    DWORD PTR [eax],edx
c001fb79:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fb7d:	50                   	push   eax
c001fb7e:	e8 51 cd fe ff       	call   c000c8d4 <Device::~Device()>
c001fb83:	83 c4 04             	add    esp,0x4
c001fb86:	90                   	nop
c001fb87:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c001fb88 <DriverlessDevice::~DriverlessDevice()>:
c001fb88:	83 ec 0c             	sub    esp,0xc
c001fb8b:	83 ec 0c             	sub    esp,0xc
c001fb8e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fb92:	e8 d7 ff ff ff       	call   c001fb6e <DriverlessDevice::~DriverlessDevice()>
c001fb97:	83 c4 10             	add    esp,0x10
c001fb9a:	83 ec 08             	sub    esp,0x8
c001fb9d:	68 58 01 00 00       	push   0x158
c001fba2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fba6:	e8 6d ac fe ff       	call   c000a818 <operator delete(void*, unsigned long)>
c001fbab:	83 c4 10             	add    esp,0x10
c001fbae:	83 c4 0c             	add    esp,0xc
c001fbb1:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c001fbb2 <LinkedList<Device>::addElement(Device*)>:
c001fbb2:	83 ec 0c             	sub    esp,0xc
c001fbb5:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001fbba:	75 10                	jne    c001fbcc <LinkedList<Device>::addElement(Device*)+0x1a>
c001fbbc:	83 ec 0c             	sub    esp,0xc
c001fbbf:	68 68 0e 02 c0       	push   0xc0020e68
c001fbc4:	e8 62 1a ff ff       	call   c001162b <KePanic(char const*)>
c001fbc9:	83 c4 10             	add    esp,0x10
c001fbcc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fbd0:	8b 00                	mov    eax,DWORD PTR [eax]
c001fbd2:	85 c0                	test   eax,eax
c001fbd4:	74 3a                	je     c001fc10 <LinkedList<Device>::addElement(Device*)+0x5e>
c001fbd6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fbda:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fbdd:	85 c0                	test   eax,eax
c001fbdf:	74 2f                	je     c001fc10 <LinkedList<Device>::addElement(Device*)+0x5e>
c001fbe1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fbe5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fbe8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fbec:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c001fbf2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fbf6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fbfa:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001fbfd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc01:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fc04:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001fc0e:	eb 68                	jmp    c001fc78 <LinkedList<Device>::addElement(Device*)+0xc6>
c001fc10:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc14:	8b 00                	mov    eax,DWORD PTR [eax]
c001fc16:	85 c0                	test   eax,eax
c001fc18:	75 4e                	jne    c001fc68 <LinkedList<Device>::addElement(Device*)+0xb6>
c001fc1a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc1e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fc21:	85 c0                	test   eax,eax
c001fc23:	75 43                	jne    c001fc68 <LinkedList<Device>::addElement(Device*)+0xb6>
c001fc25:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc29:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fc2d:	89 10                	mov    DWORD PTR [eax],edx
c001fc2f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc33:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fc37:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001fc3a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc3e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fc41:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001fc4b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc4f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fc52:	85 c0                	test   eax,eax
c001fc54:	74 22                	je     c001fc78 <LinkedList<Device>::addElement(Device*)+0xc6>
c001fc56:	83 ec 0c             	sub    esp,0xc
c001fc59:	68 8a 0e 02 c0       	push   0xc0020e8a
c001fc5e:	e8 c8 19 ff ff       	call   c001162b <KePanic(char const*)>
c001fc63:	83 c4 10             	add    esp,0x10
c001fc66:	eb 10                	jmp    c001fc78 <LinkedList<Device>::addElement(Device*)+0xc6>
c001fc68:	83 ec 0c             	sub    esp,0xc
c001fc6b:	68 94 0e 02 c0       	push   0xc0020e94
c001fc70:	e8 b6 19 ff ff       	call   c001162b <KePanic(char const*)>
c001fc75:	83 c4 10             	add    esp,0x10
c001fc78:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc7c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fc7f:	8d 50 01             	lea    edx,[eax+0x1]
c001fc82:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc86:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001fc89:	90                   	nop
c001fc8a:	83 c4 0c             	add    esp,0xc
c001fc8d:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c001fc8e <LinkedList<Device>::LinkedList()>:
c001fc8e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fc92:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001fc98:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fc9c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001fca3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fca7:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001fcae:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fcb2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001fcb8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fcbc:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001fcc3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fcc7:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001fcce:	90                   	nop
c001fccf:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c001fcd0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c001fcd0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fcd4:	8b 00                	mov    eax,DWORD PTR [eax]
c001fcd6:	85 c0                	test   eax,eax
c001fcd8:	75 0e                	jne    c001fce8 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c001fcda:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fcde:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fce1:	85 c0                	test   eax,eax
c001fce3:	75 03                	jne    c001fce8 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c001fce5:	b0 01                	mov    al,0x1
c001fce7:	c3                   	ret    
c001fce8:	b0 00                	mov    al,0x0
c001fcea:	90                   	nop
c001fceb:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c001fcec <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c001fcec:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fcf0:	8b 00                	mov    eax,DWORD PTR [eax]
c001fcf2:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c001fcf4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c001fcf4:	83 ec 0c             	sub    esp,0xc
c001fcf7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fcfb:	8b 00                	mov    eax,DWORD PTR [eax]
c001fcfd:	85 c0                	test   eax,eax
c001fcff:	75 17                	jne    c001fd18 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x24>
c001fd01:	83 ec 0c             	sub    esp,0xc
c001fd04:	68 a0 0e 02 c0       	push   0xc0020ea0
c001fd09:	e8 1d 19 ff ff       	call   c001162b <KePanic(char const*)>
c001fd0e:	83 c4 10             	add    esp,0x10
c001fd11:	e9 96 00 00 00       	jmp    c001fdac <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xb8>
c001fd16:	66 90                	xchg   ax,ax
c001fd18:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd1c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fd1f:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001fd22:	85 c0                	test   eax,eax
c001fd24:	0f 95 c0             	setne  al
c001fd27:	0f b6 c0             	movzx  eax,al
c001fd2a:	85 c0                	test   eax,eax
c001fd2c:	74 12                	je     c001fd40 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x4c>
c001fd2e:	83 ec 0c             	sub    esp,0xc
c001fd31:	68 eb 0e 02 c0       	push   0xc0020eeb
c001fd36:	e8 f0 18 ff ff       	call   c001162b <KePanic(char const*)>
c001fd3b:	83 c4 10             	add    esp,0x10
c001fd3e:	66 90                	xchg   ax,ax
c001fd40:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd44:	8b 00                	mov    eax,DWORD PTR [eax]
c001fd46:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001fd49:	85 c0                	test   eax,eax
c001fd4b:	0f 94 c0             	sete   al
c001fd4e:	0f b6 c0             	movzx  eax,al
c001fd51:	85 c0                	test   eax,eax
c001fd53:	74 33                	je     c001fd88 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x94>
c001fd55:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd59:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001fd5f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd63:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001fd6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd6e:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fd71:	83 f8 01             	cmp    eax,0x1
c001fd74:	74 22                	je     c001fd98 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa4>
c001fd76:	83 ec 0c             	sub    esp,0xc
c001fd79:	68 c4 0e 02 c0       	push   0xc0020ec4
c001fd7e:	e8 a8 18 ff ff       	call   c001162b <KePanic(char const*)>
c001fd83:	83 c4 10             	add    esp,0x10
c001fd86:	eb 10                	jmp    c001fd98 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa4>
c001fd88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd8c:	8b 00                	mov    eax,DWORD PTR [eax]
c001fd8e:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001fd91:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd95:	89 10                	mov    DWORD PTR [eax],edx
c001fd97:	90                   	nop
c001fd98:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd9c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fd9f:	8d 50 ff             	lea    edx,[eax-0x1]
c001fda2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fda6:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001fda9:	8d 76 00             	lea    esi,[esi+0x0]
c001fdac:	83 c4 0c             	add    esp,0xc
c001fdaf:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c001fdb0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c001fdb0:	83 ec 0c             	sub    esp,0xc
c001fdb3:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001fdb8:	75 12                	jne    c001fdcc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1c>
c001fdba:	83 ec 0c             	sub    esp,0xc
c001fdbd:	68 68 0e 02 c0       	push   0xc0020e68
c001fdc2:	e8 64 18 ff ff       	call   c001162b <KePanic(char const*)>
c001fdc7:	83 c4 10             	add    esp,0x10
c001fdca:	66 90                	xchg   ax,ax
c001fdcc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fdd0:	8b 00                	mov    eax,DWORD PTR [eax]
c001fdd2:	85 c0                	test   eax,eax
c001fdd4:	74 36                	je     c001fe0c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c001fdd6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fdda:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fddd:	85 c0                	test   eax,eax
c001fddf:	74 2b                	je     c001fe0c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c001fde1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fde5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fde8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fdec:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c001fdef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fdf3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fdf7:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001fdfa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fdfe:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fe01:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001fe08:	eb 6a                	jmp    c001fe74 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001fe0a:	66 90                	xchg   ax,ax
c001fe0c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe10:	8b 00                	mov    eax,DWORD PTR [eax]
c001fe12:	85 c0                	test   eax,eax
c001fe14:	75 4e                	jne    c001fe64 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c001fe16:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe1a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fe1d:	85 c0                	test   eax,eax
c001fe1f:	75 43                	jne    c001fe64 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c001fe21:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe25:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fe29:	89 10                	mov    DWORD PTR [eax],edx
c001fe2b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe2f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fe33:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001fe36:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe3a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fe3d:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001fe44:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe48:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fe4b:	85 c0                	test   eax,eax
c001fe4d:	74 25                	je     c001fe74 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001fe4f:	83 ec 0c             	sub    esp,0xc
c001fe52:	68 8a 0e 02 c0       	push   0xc0020e8a
c001fe57:	e8 cf 17 ff ff       	call   c001162b <KePanic(char const*)>
c001fe5c:	83 c4 10             	add    esp,0x10
c001fe5f:	eb 13                	jmp    c001fe74 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001fe61:	8d 76 00             	lea    esi,[esi+0x0]
c001fe64:	83 ec 0c             	sub    esp,0xc
c001fe67:	68 94 0e 02 c0       	push   0xc0020e94
c001fe6c:	e8 ba 17 ff ff       	call   c001162b <KePanic(char const*)>
c001fe71:	83 c4 10             	add    esp,0x10
c001fe74:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe78:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fe7b:	8d 50 01             	lea    edx,[eax+0x1]
c001fe7e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe82:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001fe85:	90                   	nop
c001fe86:	83 c4 0c             	add    esp,0xc
c001fe89:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c001fe8c <ACPI::~ACPI()>:
c001fe8c:	83 ec 0c             	sub    esp,0xc
c001fe8f:	ba c4 20 02 c0       	mov    edx,0xc00220c4
c001fe94:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe98:	89 10                	mov    DWORD PTR [eax],edx
c001fe9a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe9e:	83 ec 0c             	sub    esp,0xc
c001fea1:	50                   	push   eax
c001fea2:	e8 2d ca fe ff       	call   c000c8d4 <Device::~Device()>
c001fea7:	83 c4 10             	add    esp,0x10
c001feaa:	90                   	nop
c001feab:	83 c4 0c             	add    esp,0xc
c001feae:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c001feb0 <ACPI::~ACPI()>:
c001feb0:	83 ec 0c             	sub    esp,0xc
c001feb3:	83 ec 0c             	sub    esp,0xc
c001feb6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001feba:	e8 cd ff ff ff       	call   c001fe8c <ACPI::~ACPI()>
c001febf:	83 c4 10             	add    esp,0x10
c001fec2:	83 ec 08             	sub    esp,0x8
c001fec5:	68 64 12 00 00       	push   0x1264
c001feca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fece:	e8 45 a9 fe ff       	call   c000a818 <operator delete(void*, unsigned long)>
c001fed3:	83 c4 10             	add    esp,0x10
c001fed6:	83 c4 0c             	add    esp,0xc
c001fed9:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceED2Ev:

c001fedc <LinkedList<Device>::~LinkedList()>:
c001fedc:	90                   	nop
c001fedd:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE7isEmptyEv:

c001fee0 <LinkedList<Device>::isEmpty()>:
c001fee0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fee4:	8b 00                	mov    eax,DWORD PTR [eax]
c001fee6:	85 c0                	test   eax,eax
c001fee8:	75 0e                	jne    c001fef8 <LinkedList<Device>::isEmpty()+0x18>
c001feea:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001feee:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fef1:	85 c0                	test   eax,eax
c001fef3:	75 03                	jne    c001fef8 <LinkedList<Device>::isEmpty()+0x18>
c001fef5:	b0 01                	mov    al,0x1
c001fef7:	c3                   	ret    
c001fef8:	b0 00                	mov    al,0x0
c001fefa:	90                   	nop
c001fefb:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE15getFirstElementEv:

c001fefc <LinkedList<Device>::getFirstElement()>:
c001fefc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ff00:	8b 00                	mov    eax,DWORD PTR [eax]
c001ff02:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE11removeFirstEv:

c001ff04 <LinkedList<Device>::removeFirst()>:
c001ff04:	83 ec 0c             	sub    esp,0xc
c001ff07:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff0b:	8b 00                	mov    eax,DWORD PTR [eax]
c001ff0d:	85 c0                	test   eax,eax
c001ff0f:	75 17                	jne    c001ff28 <LinkedList<Device>::removeFirst()+0x24>
c001ff11:	83 ec 0c             	sub    esp,0xc
c001ff14:	68 a0 0e 02 c0       	push   0xc0020ea0
c001ff19:	e8 0d 17 ff ff       	call   c001162b <KePanic(char const*)>
c001ff1e:	83 c4 10             	add    esp,0x10
c001ff21:	e9 92 00 00 00       	jmp    c001ffb8 <LinkedList<Device>::removeFirst()+0xb4>
c001ff26:	66 90                	xchg   ax,ax
c001ff28:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff2c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ff2f:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c001ff35:	85 c0                	test   eax,eax
c001ff37:	74 13                	je     c001ff4c <LinkedList<Device>::removeFirst()+0x48>
c001ff39:	83 ec 0c             	sub    esp,0xc
c001ff3c:	68 eb 0e 02 c0       	push   0xc0020eeb
c001ff41:	e8 e5 16 ff ff       	call   c001162b <KePanic(char const*)>
c001ff46:	83 c4 10             	add    esp,0x10
c001ff49:	8d 76 00             	lea    esi,[esi+0x0]
c001ff4c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff50:	8b 00                	mov    eax,DWORD PTR [eax]
c001ff52:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c001ff58:	85 c0                	test   eax,eax
c001ff5a:	75 34                	jne    c001ff90 <LinkedList<Device>::removeFirst()+0x8c>
c001ff5c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff60:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001ff66:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff6a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001ff71:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff75:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ff78:	83 f8 01             	cmp    eax,0x1
c001ff7b:	74 27                	je     c001ffa4 <LinkedList<Device>::removeFirst()+0xa0>
c001ff7d:	83 ec 0c             	sub    esp,0xc
c001ff80:	68 c4 0e 02 c0       	push   0xc0020ec4
c001ff85:	e8 a1 16 ff ff       	call   c001162b <KePanic(char const*)>
c001ff8a:	83 c4 10             	add    esp,0x10
c001ff8d:	eb 15                	jmp    c001ffa4 <LinkedList<Device>::removeFirst()+0xa0>
c001ff8f:	90                   	nop
c001ff90:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff94:	8b 00                	mov    eax,DWORD PTR [eax]
c001ff96:	8b 90 48 01 00 00    	mov    edx,DWORD PTR [eax+0x148]
c001ff9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ffa0:	89 10                	mov    DWORD PTR [eax],edx
c001ffa2:	66 90                	xchg   ax,ax
c001ffa4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ffa8:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ffab:	8d 50 ff             	lea    edx,[eax-0x1]
c001ffae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ffb2:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001ffb5:	8d 76 00             	lea    esi,[esi+0x0]
c001ffb8:	83 c4 0c             	add    esp,0xc
c001ffbb:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c001ffbc <CPU::~CPU()>:
c001ffbc:	83 ec 0c             	sub    esp,0xc
c001ffbf:	ba 6c 22 02 c0       	mov    edx,0xc002226c
c001ffc4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ffc8:	89 10                	mov    DWORD PTR [eax],edx
c001ffca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ffce:	83 ec 0c             	sub    esp,0xc
c001ffd1:	50                   	push   eax
c001ffd2:	e8 fd c8 fe ff       	call   c000c8d4 <Device::~Device()>
c001ffd7:	83 c4 10             	add    esp,0x10
c001ffda:	90                   	nop
c001ffdb:	83 c4 0c             	add    esp,0xc
c001ffde:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c001ffe0 <CPU::~CPU()>:
c001ffe0:	83 ec 0c             	sub    esp,0xc
c001ffe3:	83 ec 0c             	sub    esp,0xc
c001ffe6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ffea:	e8 cd ff ff ff       	call   c001ffbc <CPU::~CPU()>
c001ffef:	83 c4 10             	add    esp,0x10
c001fff2:	83 ec 08             	sub    esp,0x8
c001fff5:	68 94 11 00 00       	push   0x1194
c001fffa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fffe:	e8 15 a8 fe ff       	call   c000a818 <operator delete(void*, unsigned long)>
c0020003:	83 c4 10             	add    esp,0x10
c0020006:	83 c4 0c             	add    esp,0xc
c0020009:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c002000c <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c002000c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020010:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0020013:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c0020014 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c0020014:	90                   	nop
c0020015:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c0020018 <ThreadControlBlock::ThreadControlBlock()>:
c0020018:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002001c:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0020023:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020027:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c002002e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020032:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c0020039:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002003d:	c7 40 3c 00 00 00 00 	mov    DWORD PTR [eax+0x3c],0x0
c0020044:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020048:	c7 40 55 00 00 00 00 	mov    DWORD PTR [eax+0x55],0x0
c002004f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020053:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c0020057:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002005b:	c6 40 5e 00          	mov    BYTE PTR [eax+0x5e],0x0
c002005f:	90                   	nop
c0020060:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c0020064 <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c0020064:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020068:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002006e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020072:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0020079:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002007d:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0020084:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020088:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002008e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020092:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0020099:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002009d:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00200a4:	90                   	nop
c00200a5:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c00200a6 <PCI::~PCI()>:
c00200a6:	83 ec 0c             	sub    esp,0xc
c00200a9:	ba 4c 31 02 c0       	mov    edx,0xc002314c
c00200ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00200b2:	89 10                	mov    DWORD PTR [eax],edx
c00200b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00200b8:	83 ec 0c             	sub    esp,0xc
c00200bb:	50                   	push   eax
c00200bc:	e8 ab c2 fe ff       	call   c000c36c <Bus::~Bus()>
c00200c1:	83 c4 10             	add    esp,0x10
c00200c4:	90                   	nop
c00200c5:	83 c4 0c             	add    esp,0xc
c00200c8:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c00200ca <PCI::~PCI()>:
c00200ca:	83 ec 0c             	sub    esp,0xc
c00200cd:	83 ec 0c             	sub    esp,0xc
c00200d0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00200d4:	e8 cd ff ff ff       	call   c00200a6 <PCI::~PCI()>
c00200d9:	83 c4 10             	add    esp,0x10
c00200dc:	83 ec 08             	sub    esp,0x8
c00200df:	68 5c 01 00 00       	push   0x15c
c00200e4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00200e8:	e8 2b a7 fe ff       	call   c000a818 <operator delete(void*, unsigned long)>
c00200ed:	83 c4 10             	add    esp,0x10
c00200f0:	83 c4 0c             	add    esp,0xc
c00200f3:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c00200f4 <IDE::~IDE()>:
c00200f4:	83 ec 0c             	sub    esp,0xc
c00200f7:	ba 00 32 02 c0       	mov    edx,0xc0023200
c00200fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020100:	89 10                	mov    DWORD PTR [eax],edx
c0020102:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020106:	83 ec 0c             	sub    esp,0xc
c0020109:	50                   	push   eax
c002010a:	e8 3d cc fe ff       	call   c000cd4c <HardDiskController::~HardDiskController()>
c002010f:	83 c4 10             	add    esp,0x10
c0020112:	90                   	nop
c0020113:	83 c4 0c             	add    esp,0xc
c0020116:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c0020118 <IDE::~IDE()>:
c0020118:	83 ec 0c             	sub    esp,0xc
c002011b:	83 ec 0c             	sub    esp,0xc
c002011e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020122:	e8 cd ff ff ff       	call   c00200f4 <IDE::~IDE()>
c0020127:	83 c4 10             	add    esp,0x10
c002012a:	83 ec 08             	sub    esp,0x8
c002012d:	68 70 02 00 00       	push   0x270
c0020132:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020136:	e8 dd a6 fe ff       	call   c000a818 <operator delete(void*, unsigned long)>
c002013b:	83 c4 10             	add    esp,0x10
c002013e:	83 c4 0c             	add    esp,0xc
c0020141:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c0020142 <SATABus::~SATABus()>:
c0020142:	83 ec 0c             	sub    esp,0xc
c0020145:	ba 50 32 02 c0       	mov    edx,0xc0023250
c002014a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002014e:	89 10                	mov    DWORD PTR [eax],edx
c0020150:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020154:	83 ec 0c             	sub    esp,0xc
c0020157:	50                   	push   eax
c0020158:	e8 ef cb fe ff       	call   c000cd4c <HardDiskController::~HardDiskController()>
c002015d:	83 c4 10             	add    esp,0x10
c0020160:	90                   	nop
c0020161:	83 c4 0c             	add    esp,0xc
c0020164:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c0020166 <SATABus::~SATABus()>:
c0020166:	83 ec 0c             	sub    esp,0xc
c0020169:	83 ec 0c             	sub    esp,0xc
c002016c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020170:	e8 cd ff ff ff       	call   c0020142 <SATABus::~SATABus()>
c0020175:	83 c4 10             	add    esp,0x10
c0020178:	83 ec 08             	sub    esp,0x8
c002017b:	68 64 01 00 00       	push   0x164
c0020180:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020184:	e8 8f a6 fe ff       	call   c000a818 <operator delete(void*, unsigned long)>
c0020189:	83 c4 10             	add    esp,0x10
c002018c:	83 c4 0c             	add    esp,0xc
c002018f:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c0020190 <ATA::~ATA()>:
c0020190:	83 ec 0c             	sub    esp,0xc
c0020193:	ba 90 32 02 c0       	mov    edx,0xc0023290
c0020198:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002019c:	89 10                	mov    DWORD PTR [eax],edx
c002019e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00201a2:	83 ec 0c             	sub    esp,0xc
c00201a5:	50                   	push   eax
c00201a6:	e8 83 cc fe ff       	call   c000ce2e <PhysicalDisk::~PhysicalDisk()>
c00201ab:	83 c4 10             	add    esp,0x10
c00201ae:	90                   	nop
c00201af:	83 c4 0c             	add    esp,0xc
c00201b2:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c00201b4 <ATA::~ATA()>:
c00201b4:	83 ec 0c             	sub    esp,0xc
c00201b7:	83 ec 0c             	sub    esp,0xc
c00201ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00201be:	e8 cd ff ff ff       	call   c0020190 <ATA::~ATA()>
c00201c3:	83 c4 10             	add    esp,0x10
c00201c6:	83 ec 08             	sub    esp,0x8
c00201c9:	68 7c 01 00 00       	push   0x17c
c00201ce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00201d2:	e8 41 a6 fe ff       	call   c000a818 <operator delete(void*, unsigned long)>
c00201d7:	83 c4 10             	add    esp,0x10
c00201da:	83 c4 0c             	add    esp,0xc
c00201dd:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c00201de <ATAPI::~ATAPI()>:
c00201de:	83 ec 0c             	sub    esp,0xc
c00201e1:	ba d8 32 02 c0       	mov    edx,0xc00232d8
c00201e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00201ea:	89 10                	mov    DWORD PTR [eax],edx
c00201ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00201f0:	83 ec 0c             	sub    esp,0xc
c00201f3:	50                   	push   eax
c00201f4:	e8 35 cc fe ff       	call   c000ce2e <PhysicalDisk::~PhysicalDisk()>
c00201f9:	83 c4 10             	add    esp,0x10
c00201fc:	90                   	nop
c00201fd:	83 c4 0c             	add    esp,0xc
c0020200:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c0020202 <ATAPI::~ATAPI()>:
c0020202:	83 ec 0c             	sub    esp,0xc
c0020205:	83 ec 0c             	sub    esp,0xc
c0020208:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002020c:	e8 cd ff ff ff       	call   c00201de <ATAPI::~ATAPI()>
c0020211:	83 c4 10             	add    esp,0x10
c0020214:	83 ec 08             	sub    esp,0x8
c0020217:	68 84 01 00 00       	push   0x184
c002021c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020220:	e8 f3 a5 fe ff       	call   c000a818 <operator delete(void*, unsigned long)>
c0020225:	83 c4 10             	add    esp,0x10
c0020228:	83 c4 0c             	add    esp,0xc
c002022b:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c002022c <SATA::~SATA()>:
c002022c:	83 ec 0c             	sub    esp,0xc
c002022f:	ba 8c 33 02 c0       	mov    edx,0xc002338c
c0020234:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020238:	89 10                	mov    DWORD PTR [eax],edx
c002023a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002023e:	83 ec 0c             	sub    esp,0xc
c0020241:	50                   	push   eax
c0020242:	e8 e7 cb fe ff       	call   c000ce2e <PhysicalDisk::~PhysicalDisk()>
c0020247:	83 c4 10             	add    esp,0x10
c002024a:	90                   	nop
c002024b:	83 c4 0c             	add    esp,0xc
c002024e:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c0020250 <SATA::~SATA()>:
c0020250:	83 ec 0c             	sub    esp,0xc
c0020253:	83 ec 0c             	sub    esp,0xc
c0020256:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002025a:	e8 cd ff ff ff       	call   c002022c <SATA::~SATA()>
c002025f:	83 c4 10             	add    esp,0x10
c0020262:	83 ec 08             	sub    esp,0x8
c0020265:	68 7c 01 00 00       	push   0x17c
c002026a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002026e:	e8 a5 a5 fe ff       	call   c000a818 <operator delete(void*, unsigned long)>
c0020273:	83 c4 10             	add    esp,0x10
c0020276:	83 c4 0c             	add    esp,0xc
c0020279:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID2Ev:

c002027a <SATAPI::~SATAPI()>:
c002027a:	83 ec 0c             	sub    esp,0xc
c002027d:	ba b0 34 02 c0       	mov    edx,0xc00234b0
c0020282:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020286:	89 10                	mov    DWORD PTR [eax],edx
c0020288:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002028c:	83 ec 0c             	sub    esp,0xc
c002028f:	50                   	push   eax
c0020290:	e8 99 cb fe ff       	call   c000ce2e <PhysicalDisk::~PhysicalDisk()>
c0020295:	83 c4 10             	add    esp,0x10
c0020298:	90                   	nop
c0020299:	83 c4 0c             	add    esp,0xc
c002029c:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID0Ev:

c002029e <SATAPI::~SATAPI()>:
c002029e:	83 ec 0c             	sub    esp,0xc
c00202a1:	83 ec 0c             	sub    esp,0xc
c00202a4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00202a8:	e8 cd ff ff ff       	call   c002027a <SATAPI::~SATAPI()>
c00202ad:	83 c4 10             	add    esp,0x10
c00202b0:	83 ec 08             	sub    esp,0x8
c00202b3:	68 84 01 00 00       	push   0x184
c00202b8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00202bc:	e8 57 a5 fe ff       	call   c000a818 <operator delete(void*, unsigned long)>
c00202c1:	83 c4 10             	add    esp,0x10
c00202c4:	83 c4 0c             	add    esp,0xc
c00202c7:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c00202c8 <IOAPIC::~IOAPIC()>:
c00202c8:	83 ec 0c             	sub    esp,0xc
c00202cb:	ba f0 34 02 c0       	mov    edx,0xc00234f0
c00202d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00202d4:	89 10                	mov    DWORD PTR [eax],edx
c00202d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00202da:	83 ec 0c             	sub    esp,0xc
c00202dd:	50                   	push   eax
c00202de:	e8 f1 c5 fe ff       	call   c000c8d4 <Device::~Device()>
c00202e3:	83 c4 10             	add    esp,0x10
c00202e6:	90                   	nop
c00202e7:	83 c4 0c             	add    esp,0xc
c00202ea:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c00202ec <IOAPIC::~IOAPIC()>:
c00202ec:	83 ec 0c             	sub    esp,0xc
c00202ef:	83 ec 0c             	sub    esp,0xc
c00202f2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00202f6:	e8 cd ff ff ff       	call   c00202c8 <IOAPIC::~IOAPIC()>
c00202fb:	83 c4 10             	add    esp,0x10
c00202fe:	83 ec 08             	sub    esp,0x8
c0020301:	68 68 01 00 00       	push   0x168
c0020306:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002030a:	e8 09 a5 fe ff       	call   c000a818 <operator delete(void*, unsigned long)>
c002030f:	83 c4 10             	add    esp,0x10
c0020312:	83 c4 0c             	add    esp,0xc
c0020315:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c0020318 <APICTimer::~APICTimer()>:
c0020318:	83 ec 0c             	sub    esp,0xc
c002031b:	ba 38 35 02 c0       	mov    edx,0xc0023538
c0020320:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020324:	89 10                	mov    DWORD PTR [eax],edx
c0020326:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002032a:	83 ec 0c             	sub    esp,0xc
c002032d:	50                   	push   eax
c002032e:	e8 6d e0 fe ff       	call   c000e3a0 <Timer::~Timer()>
c0020333:	83 c4 10             	add    esp,0x10
c0020336:	90                   	nop
c0020337:	83 c4 0c             	add    esp,0xc
c002033a:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c002033c <APICTimer::~APICTimer()>:
c002033c:	83 ec 0c             	sub    esp,0xc
c002033f:	83 ec 0c             	sub    esp,0xc
c0020342:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020346:	e8 cd ff ff ff       	call   c0020318 <APICTimer::~APICTimer()>
c002034b:	83 c4 10             	add    esp,0x10
c002034e:	83 ec 08             	sub    esp,0x8
c0020351:	68 60 01 00 00       	push   0x160
c0020356:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002035a:	e8 b9 a4 fe ff       	call   c000a818 <operator delete(void*, unsigned long)>
c002035f:	83 c4 10             	add    esp,0x10
c0020362:	83 c4 0c             	add    esp,0xc
c0020365:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c0020368 <PIT::~PIT()>:
c0020368:	83 ec 0c             	sub    esp,0xc
c002036b:	ba 88 35 02 c0       	mov    edx,0xc0023588
c0020370:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020374:	89 10                	mov    DWORD PTR [eax],edx
c0020376:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002037a:	83 ec 0c             	sub    esp,0xc
c002037d:	50                   	push   eax
c002037e:	e8 1d e0 fe ff       	call   c000e3a0 <Timer::~Timer()>
c0020383:	83 c4 10             	add    esp,0x10
c0020386:	90                   	nop
c0020387:	83 c4 0c             	add    esp,0xc
c002038a:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c002038c <PIT::~PIT()>:
c002038c:	83 ec 0c             	sub    esp,0xc
c002038f:	83 ec 0c             	sub    esp,0xc
c0020392:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020396:	e8 cd ff ff ff       	call   c0020368 <PIT::~PIT()>
c002039b:	83 c4 10             	add    esp,0x10
c002039e:	83 ec 08             	sub    esp,0x8
c00203a1:	68 5c 01 00 00       	push   0x15c
c00203a6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00203aa:	e8 69 a4 fe ff       	call   c000a818 <operator delete(void*, unsigned long)>
c00203af:	83 c4 10             	add    esp,0x10
c00203b2:	83 c4 0c             	add    esp,0xc
c00203b5:	c3                   	ret    

Disassembly of section userkernel:

c0025000 <KiDefaultSignalHandlerAbort(int)>:
c0025000:	57                   	push   edi
c0025001:	b9 07 00 00 00       	mov    ecx,0x7
c0025006:	56                   	push   esi
c0025007:	be 9d 23 02 c0       	mov    esi,0xc002239d
c002500c:	83 ec 24             	sub    esp,0x24
c002500f:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0025013:	fc                   	cld    
c0025014:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0025016:	8d 44 24 04          	lea    eax,[esp+0x4]
c002501a:	50                   	push   eax
c002501b:	6a 00                	push   0x0
c002501d:	6a 38                	push   0x38
c002501f:	6a 01                	push   0x1
c0025021:	e8 2c 00 00 00       	call   c0025052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0025026:	83 c4 34             	add    esp,0x34
c0025029:	5e                   	pop    esi
c002502a:	5f                   	pop    edi
c002502b:	c3                   	ret    

c002502c <KiDefaultSignalHandlerTerminate(int)>:
c002502c:	57                   	push   edi
c002502d:	b9 08 00 00 00       	mov    ecx,0x8
c0025032:	56                   	push   esi
c0025033:	be b9 23 02 c0       	mov    esi,0xc00223b9
c0025038:	83 ec 24             	sub    esp,0x24
c002503b:	89 e7                	mov    edi,esp
c002503d:	fc                   	cld    
c002503e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0025040:	54                   	push   esp
c0025041:	6a 00                	push   0x0
c0025043:	6a 37                	push   0x37
c0025045:	6a 01                	push   0x1
c0025047:	e8 06 00 00 00       	call   c0025052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c002504c:	83 c4 34             	add    esp,0x34
c002504f:	5e                   	pop    esi
c0025050:	5f                   	pop    edi
c0025051:	c3                   	ret    

c0025052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>:
c0025052:	53                   	push   ebx
c0025053:	83 ec 10             	sub    esp,0x10
c0025056:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002505a:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c002505e:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0025062:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0025066:	cd 60                	int    0x60
c0025068:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002506c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0025070:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0025074:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0025078:	83 c4 10             	add    esp,0x10
c002507b:	5b                   	pop    ebx
c002507c:	c3                   	ret    

Disassembly of section align_previous:

c0026000 <DO_NOT_DELETE()>:
c0026000:	c3                   	ret    
