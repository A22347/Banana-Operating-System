
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 69 9a 00 00       	call   c0009a89 <kernel_main>

c0000020 <callGlobalConstructors>:
c0000020:	e8 79 11 02 00       	call   c002119e <_init>
c0000025:	c3                   	ret    
c0000026:	bb 22 1e 02 c0       	mov    ebx,0xc0021e22
c000002b:	e9 08 00 00 00       	jmp    c0000038 <callGlobalConstructors.ctors_until_end>

c0000030 <callGlobalConstructors.call_constructor>:
c0000030:	ff 13                	call   DWORD PTR [ebx]
c0000032:	81 c3 04 00 00 00    	add    ebx,0x4

c0000038 <callGlobalConstructors.ctors_until_end>:
c0000038:	81 fb 30 1e 02 c0    	cmp    ebx,0xc0021e30
c000003e:	72 f0                	jb     c0000030 <callGlobalConstructors.call_constructor>
c0000040:	c3                   	ret    
c0000041:	66 90                	xchg   ax,ax
c0000043:	90                   	nop

c0000044 <deregister_tm_clones>:
c0000044:	b8 98 5e 02 c0       	mov    eax,0xc0025e98
c0000049:	3d 98 5e 02 c0       	cmp    eax,0xc0025e98
c000004e:	74 1c                	je     c000006c <deregister_tm_clones+0x28>
c0000050:	b8 00 00 00 00       	mov    eax,0x0
c0000055:	85 c0                	test   eax,eax
c0000057:	74 13                	je     c000006c <deregister_tm_clones+0x28>
c0000059:	55                   	push   ebp
c000005a:	89 e5                	mov    ebp,esp
c000005c:	83 ec 14             	sub    esp,0x14
c000005f:	68 98 5e 02 c0       	push   0xc0025e98
c0000064:	ff d0                	call   eax
c0000066:	83 c4 10             	add    esp,0x10
c0000069:	c9                   	leave  
c000006a:	c3                   	ret    
c000006b:	90                   	nop
c000006c:	c3                   	ret    
c000006d:	8d 76 00             	lea    esi,[esi+0x0]

c0000070 <register_tm_clones>:
c0000070:	b8 98 5e 02 c0       	mov    eax,0xc0025e98
c0000075:	2d 98 5e 02 c0       	sub    eax,0xc0025e98
c000007a:	c1 f8 02             	sar    eax,0x2
c000007d:	89 c2                	mov    edx,eax
c000007f:	c1 ea 1f             	shr    edx,0x1f
c0000082:	01 d0                	add    eax,edx
c0000084:	d1 f8                	sar    eax,1
c0000086:	74 1c                	je     c00000a4 <register_tm_clones+0x34>
c0000088:	ba 00 00 00 00       	mov    edx,0x0
c000008d:	85 d2                	test   edx,edx
c000008f:	74 13                	je     c00000a4 <register_tm_clones+0x34>
c0000091:	55                   	push   ebp
c0000092:	89 e5                	mov    ebp,esp
c0000094:	83 ec 10             	sub    esp,0x10
c0000097:	50                   	push   eax
c0000098:	68 98 5e 02 c0       	push   0xc0025e98
c000009d:	ff d2                	call   edx
c000009f:	83 c4 10             	add    esp,0x10
c00000a2:	c9                   	leave  
c00000a3:	c3                   	ret    
c00000a4:	c3                   	ret    
c00000a5:	8d 76 00             	lea    esi,[esi+0x0]

c00000a8 <__do_global_dtors_aux>:
c00000a8:	80 3d 20 60 02 c0 00 	cmp    BYTE PTR ds:0xc0026020,0x0
c00000af:	75 63                	jne    c0000114 <__do_global_dtors_aux+0x6c>
c00000b1:	55                   	push   ebp
c00000b2:	89 e5                	mov    ebp,esp
c00000b4:	56                   	push   esi
c00000b5:	53                   	push   ebx
c00000b6:	bb 38 1e 02 c0       	mov    ebx,0xc0021e38
c00000bb:	81 eb 34 1e 02 c0    	sub    ebx,0xc0021e34
c00000c1:	c1 fb 02             	sar    ebx,0x2
c00000c4:	4b                   	dec    ebx
c00000c5:	be 34 1e 02 c0       	mov    esi,0xc0021e34
c00000ca:	a1 24 60 02 c0       	mov    eax,ds:0xc0026024
c00000cf:	39 d8                	cmp    eax,ebx
c00000d1:	73 13                	jae    c00000e6 <__do_global_dtors_aux+0x3e>
c00000d3:	90                   	nop
c00000d4:	40                   	inc    eax
c00000d5:	a3 24 60 02 c0       	mov    ds:0xc0026024,eax
c00000da:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000dd:	a1 24 60 02 c0       	mov    eax,ds:0xc0026024
c00000e2:	39 d8                	cmp    eax,ebx
c00000e4:	72 ee                	jb     c00000d4 <__do_global_dtors_aux+0x2c>
c00000e6:	e8 59 ff ff ff       	call   c0000044 <deregister_tm_clones>
c00000eb:	b8 00 00 00 00       	mov    eax,0x0
c00000f0:	85 c0                	test   eax,eax
c00000f2:	74 10                	je     c0000104 <__do_global_dtors_aux+0x5c>
c00000f4:	83 ec 0c             	sub    esp,0xc
c00000f7:	68 98 5e 02 c0       	push   0xc0025e98
c00000fc:	e8 ff fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000101:	83 c4 10             	add    esp,0x10
c0000104:	c6 05 20 60 02 c0 01 	mov    BYTE PTR ds:0xc0026020,0x1
c000010b:	8d 65 f8             	lea    esp,[ebp-0x8]
c000010e:	5b                   	pop    ebx
c000010f:	5e                   	pop    esi
c0000110:	5d                   	pop    ebp
c0000111:	c3                   	ret    
c0000112:	66 90                	xchg   ax,ax
c0000114:	c3                   	ret    
c0000115:	8d 76 00             	lea    esi,[esi+0x0]

c0000118 <frame_dummy>:
c0000118:	b8 00 00 00 00       	mov    eax,0x0
c000011d:	85 c0                	test   eax,eax
c000011f:	74 1f                	je     c0000140 <frame_dummy+0x28>
c0000121:	55                   	push   ebp
c0000122:	89 e5                	mov    ebp,esp
c0000124:	83 ec 10             	sub    esp,0x10
c0000127:	68 28 60 02 c0       	push   0xc0026028
c000012c:	68 98 5e 02 c0       	push   0xc0025e98
c0000131:	e8 ca fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000136:	83 c4 10             	add    esp,0x10
c0000139:	c9                   	leave  
c000013a:	e9 31 ff ff ff       	jmp    c0000070 <register_tm_clones>
c000013f:	90                   	nop
c0000140:	e9 2b ff ff ff       	jmp    c0000070 <register_tm_clones>
c0000145:	66 90                	xchg   ax,ax
c0000147:	66 90                	xchg   ax,ax
c0000149:	66 90                	xchg   ax,ax
c000014b:	66 90                	xchg   ax,ax
c000014d:	66 90                	xchg   ax,ax
c000014f:	90                   	nop

c0000150 <manualPCIProbe>:
c0000150:	31 c0                	xor    eax,eax
c0000152:	66 ba f8 0c          	mov    dx,0xcf8
c0000156:	ed                   	in     eax,dx
c0000157:	89 c3                	mov    ebx,eax
c0000159:	b8 00 00 00 80       	mov    eax,0x80000000
c000015e:	ef                   	out    dx,eax
c000015f:	ed                   	in     eax,dx
c0000160:	3d 00 00 00 80       	cmp    eax,0x80000000
c0000165:	75 0a                	jne    c0000171 <manualPCIProbe.noMech1>
c0000167:	b8 01 00 00 00       	mov    eax,0x1
c000016c:	e9 26 00 00 00       	jmp    c0000197 <manualPCIProbe.gotPCI>

c0000171 <manualPCIProbe.noMech1>:
c0000171:	89 d8                	mov    eax,ebx
c0000173:	ef                   	out    dx,eax
c0000174:	66 ba f8 0c          	mov    dx,0xcf8
c0000178:	ec                   	in     al,dx
c0000179:	88 c3                	mov    bl,al
c000017b:	30 c0                	xor    al,al
c000017d:	ee                   	out    dx,al
c000017e:	ec                   	in     al,dx
c000017f:	84 c0                	test   al,al
c0000181:	75 15                	jne    c0000198 <manualPCIProbe.noPCI>
c0000183:	66 ba fa 0c          	mov    dx,0xcfa
c0000187:	ec                   	in     al,dx
c0000188:	88 c7                	mov    bh,al
c000018a:	30 c0                	xor    al,al
c000018c:	ee                   	out    dx,al
c000018d:	ec                   	in     al,dx
c000018e:	84 c0                	test   al,al
c0000190:	75 06                	jne    c0000198 <manualPCIProbe.noPCI>
c0000192:	b8 02 00 00 00       	mov    eax,0x2

c0000197 <manualPCIProbe.gotPCI>:
c0000197:	c3                   	ret    

c0000198 <manualPCIProbe.noPCI>:
c0000198:	31 c0                	xor    eax,eax
c000019a:	c3                   	ret    

c000019b <prepareTramp>:
c000019b:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c00001a2:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c00001a9:	50                   	push   eax
c00001aa:	0f 20 d8             	mov    eax,cr3
c00001ad:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c00001b2:	58                   	pop    eax
c00001b3:	c3                   	ret    

c00001b4 <doTPAUSE>:
c00001b4:	fb                   	sti    
c00001b5:	31 c0                	xor    eax,eax
c00001b7:	31 d2                	xor    edx,edx
c00001b9:	66 0f ae f0          	tpause eax
c00001bd:	c3                   	ret    

c00001be <hasLegacyFPU>:
c00001be:	0f 20 c2             	mov    edx,cr0
c00001c1:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c00001c7:	0f 22 c2             	mov    cr0,edx
c00001ca:	db e3                	fninit 
c00001cc:	dd 3d e1 01 00 c0    	fnstsw WORD PTR ds:0xc00001e1
c00001d2:	31 c0                	xor    eax,eax
c00001d4:	66 81 3d e1 01 00 c0 00 00 	cmp    WORD PTR ds:0xc00001e1,0x0
c00001dd:	75 01                	jne    c00001e0 <hasLegacyFPU.nofpu>

c00001df <hasLegacyFPU.hasfpu>:
c00001df:	40                   	inc    eax

c00001e0 <hasLegacyFPU.nofpu>:
c00001e0:	c3                   	ret    

c00001e1 <testword>:
c00001e1:	aa                   	stos   BYTE PTR es:[edi],al
c00001e2:	55                   	push   ebp

c00001e3 <is486>:
c00001e3:	0f 09                	wbinvd 
c00001e5:	31 c0                	xor    eax,eax
c00001e7:	40                   	inc    eax
c00001e8:	c3                   	ret    
c00001e9:	90                   	nop
c00001ea:	90                   	nop
c00001eb:	90                   	nop
c00001ec:	90                   	nop
c00001ed:	90                   	nop
c00001ee:	90                   	nop
c00001ef:	90                   	nop
c00001f0:	90                   	nop
c00001f1:	90                   	nop
c00001f2:	90                   	nop
c00001f3:	90                   	nop
c00001f4:	90                   	nop
c00001f5:	90                   	nop
c00001f6:	90                   	nop
c00001f7:	90                   	nop
c00001f8:	90                   	nop
c00001f9:	90                   	nop
c00001fa:	90                   	nop
c00001fb:	90                   	nop
c00001fc:	90                   	nop
c00001fd:	90                   	nop
c00001fe:	90                   	nop
c00001ff:	90                   	nop
c0000200:	90                   	nop
c0000201:	90                   	nop
c0000202:	90                   	nop
c0000203:	90                   	nop
c0000204:	90                   	nop
c0000205:	90                   	nop
c0000206:	90                   	nop
c0000207:	90                   	nop
c0000208:	90                   	nop
c0000209:	90                   	nop
c000020a:	90                   	nop
c000020b:	90                   	nop
c000020c:	90                   	nop
c000020d:	90                   	nop
c000020e:	90                   	nop
c000020f:	90                   	nop
c0000210:	90                   	nop
c0000211:	90                   	nop
c0000212:	90                   	nop
c0000213:	90                   	nop
c0000214:	90                   	nop
c0000215:	90                   	nop
c0000216:	31 c0                	xor    eax,eax
c0000218:	c3                   	ret    

c0000219 <detectCPUID>:
c0000219:	9c                   	pushf  
c000021a:	9c                   	pushf  
c000021b:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c0000222:	9d                   	popf   
c0000223:	9c                   	pushf  
c0000224:	58                   	pop    eax
c0000225:	33 04 24             	xor    eax,DWORD PTR [esp]
c0000228:	9d                   	popf   
c0000229:	25 00 00 20 00       	and    eax,0x200000
c000022e:	c3                   	ret    

c000022f <goToVM86>:
c000022f:	55                   	push   ebp
c0000230:	89 e5                	mov    ebp,esp
c0000232:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000235:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000238:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c000023b:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c000023e:	25 ff ff 00 00       	and    eax,0xffff
c0000243:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000249:	81 e1 ff ff 00 00    	and    ecx,0xffff
c000024f:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000255:	52                   	push   edx
c0000256:	51                   	push   ecx
c0000257:	68 02 02 02 00       	push   0x20202
c000025c:	53                   	push   ebx
c000025d:	50                   	push   eax
c000025e:	cf                   	iret   

c000025f <goToUsermode>:
c000025f:	55                   	push   ebp
c0000260:	89 e5                	mov    ebp,esp
c0000262:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000265:	66 b8 23 00          	mov    ax,0x23
c0000269:	66 8e d8             	mov    ds,ax
c000026c:	66 8e c0             	mov    es,ax
c000026f:	66 8e e0             	mov    fs,ax
c0000272:	66 8e e8             	mov    gs,ax
c0000275:	89 e0                	mov    eax,esp
c0000277:	68 23 00 00 00       	push   0x23
c000027c:	50                   	push   eax
c000027d:	68 02 02 00 00       	push   0x202
c0000282:	68 1b 00 00 00       	push   0x1b
c0000287:	53                   	push   ebx
c0000288:	cf                   	iret   

c0000289 <switchToThreadASMFirstTime>:
c0000289:	9c                   	pushf  
c000028a:	fa                   	cli    
c000028b:	50                   	push   eax
c000028c:	53                   	push   ebx
c000028d:	51                   	push   ecx
c000028e:	52                   	push   edx
c000028f:	56                   	push   esi
c0000290:	57                   	push   edi
c0000291:	55                   	push   ebp
c0000292:	e9 11 00 00 00       	jmp    c00002a8 <commonThreadSwitch>

c0000297 <switchToThreadASM>:
c0000297:	9c                   	pushf  
c0000298:	50                   	push   eax
c0000299:	53                   	push   ebx
c000029a:	51                   	push   ecx
c000029b:	52                   	push   edx
c000029c:	56                   	push   esi
c000029d:	57                   	push   edi
c000029e:	55                   	push   ebp
c000029f:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c00002a5:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c00002a8 <commonThreadSwitch>:
c00002a8:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00002ac:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c00002b2:	8b 06                	mov    eax,DWORD PTR [esi]
c00002b4:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c00002b7:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c00002ba:	0f 20 d9             	mov    ecx,cr3
c00002bd:	39 c8                	cmp    eax,ecx
c00002bf:	74 03                	je     c00002c4 <commonThreadSwitch.doneVAS>
c00002c1:	0f 22 d8             	mov    cr3,eax

c00002c4 <commonThreadSwitch.doneVAS>:
c00002c4:	0f 20 c0             	mov    eax,cr0
c00002c7:	0c 08                	or     al,0x8
c00002c9:	0f 22 c0             	mov    cr0,eax
c00002cc:	85 d2                	test   edx,edx
c00002ce:	75 11                	jne    c00002e1 <commonThreadSwitch.firstTime>
c00002d0:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c00002d3:	e8 28 75 01 00       	call   c0017800 <changeTSS>
c00002d8:	5d                   	pop    ebp
c00002d9:	5f                   	pop    edi
c00002da:	5e                   	pop    esi
c00002db:	5a                   	pop    edx
c00002dc:	59                   	pop    ecx
c00002dd:	5b                   	pop    ebx
c00002de:	58                   	pop    eax
c00002df:	9d                   	popf   
c00002e0:	c3                   	ret    

c00002e1 <commonThreadSwitch.firstTime>:
c00002e1:	fa                   	cli    
c00002e2:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00002e5:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c00002ea:	60                   	pusha  
c00002eb:	e8 3c c5 00 00       	call   c000c82c <mapVASFirstTime>
c00002f0:	61                   	popa   
c00002f1:	89 c4                	mov    esp,eax
c00002f3:	56                   	push   esi
c00002f4:	52                   	push   edx
c00002f5:	e8 06 75 01 00       	call   c0017800 <changeTSS>
c00002fa:	5a                   	pop    edx
c00002fb:	5e                   	pop    esi
c00002fc:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c0000303:	5d                   	pop    ebp
c0000304:	5f                   	pop    edi
c0000305:	5e                   	pop    esi
c0000306:	59                   	pop    ecx
c0000307:	59                   	pop    ecx
c0000308:	5b                   	pop    ebx
c0000309:	58                   	pop    eax
c000030a:	81 c4 04 00 00 00    	add    esp,0x4
c0000310:	6a 02                	push   0x2
c0000312:	9d                   	popf   
c0000313:	52                   	push   edx
c0000314:	e8 cf 79 01 00       	call   c0017ce8 <taskStartupFunction>
c0000319:	5a                   	pop    edx
c000031a:	50                   	push   eax
c000031b:	ff d2                	call   edx
c000031d:	e8 12 80 01 00       	call   c0018334 <taskReturned>
c0000322:	e9 fb ff ff ff       	jmp    c0000322 <commonThreadSwitch.firstTime+0x41>

c0000327 <asmQuickAcquireLock>:
c0000327:	55                   	push   ebp
c0000328:	89 e5                	mov    ebp,esp
c000032a:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c000032d <asmQuickAcquireLock.retry>:
c000032d:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000332:	72 02                	jb     c0000336 <asmQuickAcquireLock.spin_with_pause>
c0000334:	fa                   	cli    
c0000335:	c3                   	ret    

c0000336 <asmQuickAcquireLock.spin_with_pause>:
c0000336:	f3 90                	pause  
c0000338:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c000033e:	75 f6                	jne    c0000336 <asmQuickAcquireLock.spin_with_pause>
c0000340:	e9 e8 ff ff ff       	jmp    c000032d <asmQuickAcquireLock.retry>

c0000345 <asmQuickReleaseLock>:
c0000345:	55                   	push   ebp
c0000346:	89 e5                	mov    ebp,esp
c0000348:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c000034f:	5d                   	pop    ebp
c0000350:	c3                   	ret    

c0000351 <asmAcquireLock>:
c0000351:	55                   	push   ebp
c0000352:	89 e5                	mov    ebp,esp
c0000354:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c0000357 <asmAcquireLock.retry>:
c0000357:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c000035c:	72 05                	jb     c0000363 <asmAcquireLock.spin_with_pause>
c000035e:	9c                   	pushf  
c000035f:	58                   	pop    eax
c0000360:	fa                   	cli    
c0000361:	5d                   	pop    ebp
c0000362:	c3                   	ret    

c0000363 <asmAcquireLock.spin_with_pause>:
c0000363:	f3 90                	pause  
c0000365:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c000036b:	75 f6                	jne    c0000363 <asmAcquireLock.spin_with_pause>
c000036d:	e9 e5 ff ff ff       	jmp    c0000357 <asmAcquireLock.retry>

c0000372 <asmReleaseLock>:
c0000372:	55                   	push   ebp
c0000373:	89 e5                	mov    ebp,esp
c0000375:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000378:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000037b:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0000381:	52                   	push   edx
c0000382:	9d                   	popf   
c0000383:	5d                   	pop    ebp
c0000384:	c3                   	ret    

c0000385 <loadGDT>:
c0000385:	0f 01 15 70 64 02 c0 	lgdtd  ds:0xc0026470
c000038c:	66 b8 10 00          	mov    ax,0x10
c0000390:	66 8e d8             	mov    ds,ax
c0000393:	66 8e c0             	mov    es,ax
c0000396:	66 8e e0             	mov    fs,ax
c0000399:	66 8e e8             	mov    gs,ax
c000039c:	66 8e d0             	mov    ss,ax
c000039f:	e9 00 00 00 00       	jmp    c00003a4 <flush2>

c00003a4 <flush2>:
c00003a4:	c3                   	ret    

c00003a5 <isr0>:
c00003a5:	fa                   	cli    
c00003a6:	68 00 00 00 00       	push   0x0
c00003ab:	68 00 00 00 00       	push   0x0
c00003b0:	e9 44 01 00 00       	jmp    c00004f9 <int_common_stub>

c00003b5 <isr1>:
c00003b5:	fa                   	cli    
c00003b6:	6a 00                	push   0x0
c00003b8:	6a 01                	push   0x1
c00003ba:	e9 3a 01 00 00       	jmp    c00004f9 <int_common_stub>

c00003bf <isr2>:
c00003bf:	fa                   	cli    
c00003c0:	6a 00                	push   0x0
c00003c2:	6a 02                	push   0x2
c00003c4:	e9 30 01 00 00       	jmp    c00004f9 <int_common_stub>

c00003c9 <isr3>:
c00003c9:	fa                   	cli    
c00003ca:	6a 00                	push   0x0
c00003cc:	6a 03                	push   0x3
c00003ce:	e9 26 01 00 00       	jmp    c00004f9 <int_common_stub>

c00003d3 <isr4>:
c00003d3:	fa                   	cli    
c00003d4:	6a 00                	push   0x0
c00003d6:	6a 04                	push   0x4
c00003d8:	e9 1c 01 00 00       	jmp    c00004f9 <int_common_stub>

c00003dd <isr5>:
c00003dd:	fa                   	cli    
c00003de:	6a 00                	push   0x0
c00003e0:	6a 05                	push   0x5
c00003e2:	e9 12 01 00 00       	jmp    c00004f9 <int_common_stub>

c00003e7 <isr6>:
c00003e7:	fa                   	cli    
c00003e8:	6a 00                	push   0x0
c00003ea:	6a 06                	push   0x6
c00003ec:	e9 08 01 00 00       	jmp    c00004f9 <int_common_stub>

c00003f1 <isr7>:
c00003f1:	fa                   	cli    
c00003f2:	6a 00                	push   0x0
c00003f4:	6a 07                	push   0x7
c00003f6:	e9 fe 00 00 00       	jmp    c00004f9 <int_common_stub>

c00003fb <isr8>:
c00003fb:	fa                   	cli    
c00003fc:	6a 08                	push   0x8
c00003fe:	e9 f6 00 00 00       	jmp    c00004f9 <int_common_stub>

c0000403 <isr9>:
c0000403:	fa                   	cli    
c0000404:	6a 00                	push   0x0
c0000406:	6a 09                	push   0x9
c0000408:	e9 ec 00 00 00       	jmp    c00004f9 <int_common_stub>

c000040d <isr10>:
c000040d:	fa                   	cli    
c000040e:	6a 0a                	push   0xa
c0000410:	e9 e4 00 00 00       	jmp    c00004f9 <int_common_stub>

c0000415 <isr11>:
c0000415:	fa                   	cli    
c0000416:	6a 0b                	push   0xb
c0000418:	e9 dc 00 00 00       	jmp    c00004f9 <int_common_stub>

c000041d <isr12>:
c000041d:	fa                   	cli    
c000041e:	6a 0c                	push   0xc
c0000420:	e9 d4 00 00 00       	jmp    c00004f9 <int_common_stub>

c0000425 <isr13>:
c0000425:	fa                   	cli    
c0000426:	6a 0d                	push   0xd
c0000428:	e9 cc 00 00 00       	jmp    c00004f9 <int_common_stub>

c000042d <isr14>:
c000042d:	fa                   	cli    
c000042e:	6a 0e                	push   0xe
c0000430:	e9 c4 00 00 00       	jmp    c00004f9 <int_common_stub>

c0000435 <isr15>:
c0000435:	fa                   	cli    
c0000436:	6a 00                	push   0x0
c0000438:	6a 0f                	push   0xf
c000043a:	e9 ba 00 00 00       	jmp    c00004f9 <int_common_stub>

c000043f <isr16>:
c000043f:	fa                   	cli    
c0000440:	6a 00                	push   0x0
c0000442:	6a 10                	push   0x10
c0000444:	e9 b0 00 00 00       	jmp    c00004f9 <int_common_stub>

c0000449 <isr17>:
c0000449:	fa                   	cli    
c000044a:	6a 00                	push   0x0
c000044c:	6a 11                	push   0x11
c000044e:	e9 a6 00 00 00       	jmp    c00004f9 <int_common_stub>

c0000453 <isr18>:
c0000453:	fa                   	cli    
c0000454:	6a 00                	push   0x0
c0000456:	6a 12                	push   0x12
c0000458:	e9 9c 00 00 00       	jmp    c00004f9 <int_common_stub>

c000045d <irq3>:
c000045d:	fa                   	cli    
c000045e:	6a 00                	push   0x0
c0000460:	6a 23                	push   0x23
c0000462:	e9 92 00 00 00       	jmp    c00004f9 <int_common_stub>

c0000467 <irq4>:
c0000467:	fa                   	cli    
c0000468:	6a 00                	push   0x0
c000046a:	6a 24                	push   0x24
c000046c:	e9 88 00 00 00       	jmp    c00004f9 <int_common_stub>

c0000471 <irq5>:
c0000471:	fa                   	cli    
c0000472:	6a 00                	push   0x0
c0000474:	6a 25                	push   0x25
c0000476:	e9 7e 00 00 00       	jmp    c00004f9 <int_common_stub>

c000047b <irq6>:
c000047b:	fa                   	cli    
c000047c:	6a 00                	push   0x0
c000047e:	6a 26                	push   0x26
c0000480:	e9 74 00 00 00       	jmp    c00004f9 <int_common_stub>

c0000485 <irq7>:
c0000485:	fa                   	cli    
c0000486:	6a 00                	push   0x0
c0000488:	6a 27                	push   0x27
c000048a:	e9 6a 00 00 00       	jmp    c00004f9 <int_common_stub>

c000048f <irq8>:
c000048f:	fa                   	cli    
c0000490:	6a 00                	push   0x0
c0000492:	6a 28                	push   0x28
c0000494:	e9 60 00 00 00       	jmp    c00004f9 <int_common_stub>

c0000499 <irq9>:
c0000499:	fa                   	cli    
c000049a:	6a 00                	push   0x0
c000049c:	6a 29                	push   0x29
c000049e:	e9 56 00 00 00       	jmp    c00004f9 <int_common_stub>

c00004a3 <irq10>:
c00004a3:	fa                   	cli    
c00004a4:	6a 00                	push   0x0
c00004a6:	6a 2a                	push   0x2a
c00004a8:	e9 4c 00 00 00       	jmp    c00004f9 <int_common_stub>

c00004ad <irq11>:
c00004ad:	fa                   	cli    
c00004ae:	6a 00                	push   0x0
c00004b0:	6a 2b                	push   0x2b
c00004b2:	e9 42 00 00 00       	jmp    c00004f9 <int_common_stub>

c00004b7 <irq12>:
c00004b7:	fa                   	cli    
c00004b8:	6a 00                	push   0x0
c00004ba:	6a 2c                	push   0x2c
c00004bc:	e9 38 00 00 00       	jmp    c00004f9 <int_common_stub>

c00004c1 <irq13>:
c00004c1:	fa                   	cli    
c00004c2:	6a 00                	push   0x0
c00004c4:	6a 2d                	push   0x2d
c00004c6:	e9 2e 00 00 00       	jmp    c00004f9 <int_common_stub>

c00004cb <irq14>:
c00004cb:	fa                   	cli    
c00004cc:	6a 00                	push   0x0
c00004ce:	6a 2e                	push   0x2e
c00004d0:	e9 24 00 00 00       	jmp    c00004f9 <int_common_stub>

c00004d5 <irq15>:
c00004d5:	fa                   	cli    
c00004d6:	6a 00                	push   0x0
c00004d8:	6a 2f                	push   0x2f
c00004da:	e9 1a 00 00 00       	jmp    c00004f9 <int_common_stub>

c00004df <irq1>:
c00004df:	fa                   	cli    
c00004e0:	6a 00                	push   0x0
c00004e2:	6a 21                	push   0x21
c00004e4:	eb 13                	jmp    c00004f9 <int_common_stub>

c00004e6 <irq2>:
c00004e6:	fa                   	cli    
c00004e7:	6a 00                	push   0x0
c00004e9:	6a 22                	push   0x22
c00004eb:	eb 0c                	jmp    c00004f9 <int_common_stub>

c00004ed <isr96>:
c00004ed:	6a 00                	push   0x0
c00004ef:	6a 60                	push   0x60
c00004f1:	fb                   	sti    
c00004f2:	eb 05                	jmp    c00004f9 <int_common_stub>

c00004f4 <irq0>:
c00004f4:	fa                   	cli    
c00004f5:	6a 00                	push   0x0
c00004f7:	6a 20                	push   0x20

c00004f9 <int_common_stub>:
c00004f9:	60                   	pusha  
c00004fa:	1e                   	push   ds
c00004fb:	06                   	push   es
c00004fc:	0f a0                	push   fs
c00004fe:	0f a8                	push   gs
c0000500:	66 b8 10 00          	mov    ax,0x10
c0000504:	66 8e d8             	mov    ds,ax
c0000507:	66 8e c0             	mov    es,ax
c000050a:	66 8e e0             	mov    fs,ax
c000050d:	66 8e e8             	mov    gs,ax
c0000510:	54                   	push   esp
c0000511:	fc                   	cld    
c0000512:	e8 ca e2 00 00       	call   c000e7e1 <int_handler>
c0000517:	81 c4 04 00 00 00    	add    esp,0x4
c000051d:	0f a9                	pop    gs
c000051f:	0f a1                	pop    fs
c0000521:	07                   	pop    es
c0000522:	1f                   	pop    ds
c0000523:	61                   	popa   
c0000524:	81 c4 08 00 00 00    	add    esp,0x8
c000052a:	cf                   	iret   

c000052b <irq16>:
c000052b:	fa                   	cli    
c000052c:	6a 00                	push   0x0
c000052e:	6a 30                	push   0x30
c0000530:	e9 c4 ff ff ff       	jmp    c00004f9 <int_common_stub>

c0000535 <irq17>:
c0000535:	fa                   	cli    
c0000536:	6a 00                	push   0x0
c0000538:	6a 31                	push   0x31
c000053a:	e9 ba ff ff ff       	jmp    c00004f9 <int_common_stub>

c000053f <irq18>:
c000053f:	fa                   	cli    
c0000540:	6a 00                	push   0x0
c0000542:	6a 32                	push   0x32
c0000544:	e9 b0 ff ff ff       	jmp    c00004f9 <int_common_stub>

c0000549 <irq19>:
c0000549:	fa                   	cli    
c000054a:	6a 00                	push   0x0
c000054c:	6a 33                	push   0x33
c000054e:	e9 a6 ff ff ff       	jmp    c00004f9 <int_common_stub>

c0000553 <irq20>:
c0000553:	fa                   	cli    
c0000554:	6a 00                	push   0x0
c0000556:	6a 34                	push   0x34
c0000558:	e9 9c ff ff ff       	jmp    c00004f9 <int_common_stub>

c000055d <irq21>:
c000055d:	fa                   	cli    
c000055e:	6a 00                	push   0x0
c0000560:	6a 35                	push   0x35
c0000562:	e9 92 ff ff ff       	jmp    c00004f9 <int_common_stub>

c0000567 <irq22>:
c0000567:	fa                   	cli    
c0000568:	6a 00                	push   0x0
c000056a:	6a 36                	push   0x36
c000056c:	e9 88 ff ff ff       	jmp    c00004f9 <int_common_stub>

c0000571 <irq23>:
c0000571:	fa                   	cli    
c0000572:	6a 00                	push   0x0
c0000574:	6a 37                	push   0x37
c0000576:	e9 7e ff ff ff       	jmp    c00004f9 <int_common_stub>

c000057b <memcpy>:
c000057b:	e9 7a 83 00 00       	jmp    c00088fa <__not_memcpy>

c0000580 <memcmp>:
c0000580:	56                   	push   esi
c0000581:	53                   	push   ebx
c0000582:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000586:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000058a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000058e:	85 f6                	test   esi,esi
c0000590:	74 1d                	je     c00005af <memcmp+0x2f>
c0000592:	8a 08                	mov    cl,BYTE PTR [eax]
c0000594:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c0000597:	38 cb                	cmp    bl,cl
c0000599:	75 19                	jne    c00005b4 <memcmp+0x34>
c000059b:	01 c6                	add    esi,eax
c000059d:	eb 0a                	jmp    c00005a9 <memcmp+0x29>
c000059f:	90                   	nop
c00005a0:	8a 08                	mov    cl,BYTE PTR [eax]
c00005a2:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c00005a5:	38 d9                	cmp    cl,bl
c00005a7:	75 0b                	jne    c00005b4 <memcmp+0x34>
c00005a9:	40                   	inc    eax
c00005aa:	42                   	inc    edx
c00005ab:	39 f0                	cmp    eax,esi
c00005ad:	75 f1                	jne    c00005a0 <memcmp+0x20>
c00005af:	31 c0                	xor    eax,eax
c00005b1:	5b                   	pop    ebx
c00005b2:	5e                   	pop    esi
c00005b3:	c3                   	ret    
c00005b4:	0f b6 c1             	movzx  eax,cl
c00005b7:	29 d8                	sub    eax,ebx
c00005b9:	5b                   	pop    ebx
c00005ba:	5e                   	pop    esi
c00005bb:	c3                   	ret    

c00005bc <memmove>:
c00005bc:	55                   	push   ebp
c00005bd:	57                   	push   edi
c00005be:	56                   	push   esi
c00005bf:	53                   	push   ebx
c00005c0:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c00005c4:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00005c8:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00005cc:	39 dd                	cmp    ebp,ebx
c00005ce:	0f 83 80 00 00 00    	jae    c0000654 <memmove+0x98>
c00005d4:	85 d2                	test   edx,edx
c00005d6:	74 74                	je     c000064c <memmove+0x90>
c00005d8:	8d 4b 04             	lea    ecx,[ebx+0x4]
c00005db:	8d 75 04             	lea    esi,[ebp+0x4]
c00005de:	39 cd                	cmp    ebp,ecx
c00005e0:	0f 93 c1             	setae  cl
c00005e3:	39 f3                	cmp    ebx,esi
c00005e5:	0f 93 c0             	setae  al
c00005e8:	89 c6                	mov    esi,eax
c00005ea:	09 ce                	or     esi,ecx
c00005ec:	8d 4a ff             	lea    ecx,[edx-0x1]
c00005ef:	89 f0                	mov    eax,esi
c00005f1:	83 f9 0c             	cmp    ecx,0xc
c00005f4:	0f 97 c1             	seta   cl
c00005f7:	84 c8                	test   al,cl
c00005f9:	74 75                	je     c0000670 <memmove+0xb4>
c00005fb:	89 e9                	mov    ecx,ebp
c00005fd:	09 d9                	or     ecx,ebx
c00005ff:	83 e1 03             	and    ecx,0x3
c0000602:	75 6c                	jne    c0000670 <memmove+0xb4>
c0000604:	89 d7                	mov    edi,edx
c0000606:	89 d9                	mov    ecx,ebx
c0000608:	83 e7 fc             	and    edi,0xfffffffc
c000060b:	89 ee                	mov    esi,ebp
c000060d:	01 df                	add    edi,ebx
c000060f:	90                   	nop
c0000610:	8b 01                	mov    eax,DWORD PTR [ecx]
c0000612:	83 c6 04             	add    esi,0x4
c0000615:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c0000618:	83 c1 04             	add    ecx,0x4
c000061b:	39 f9                	cmp    ecx,edi
c000061d:	75 f1                	jne    c0000610 <memmove+0x54>
c000061f:	89 d1                	mov    ecx,edx
c0000621:	89 d7                	mov    edi,edx
c0000623:	83 e1 fc             	and    ecx,0xfffffffc
c0000626:	29 cf                	sub    edi,ecx
c0000628:	01 cb                	add    ebx,ecx
c000062a:	8d 74 0d 00          	lea    esi,[ebp+ecx*1+0x0]
c000062e:	39 ca                	cmp    edx,ecx
c0000630:	74 1a                	je     c000064c <memmove+0x90>
c0000632:	8a 03                	mov    al,BYTE PTR [ebx]
c0000634:	83 ff 01             	cmp    edi,0x1
c0000637:	88 06                	mov    BYTE PTR [esi],al
c0000639:	74 11                	je     c000064c <memmove+0x90>
c000063b:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c000063e:	83 ff 02             	cmp    edi,0x2
c0000641:	88 46 01             	mov    BYTE PTR [esi+0x1],al
c0000644:	74 06                	je     c000064c <memmove+0x90>
c0000646:	8a 43 02             	mov    al,BYTE PTR [ebx+0x2]
c0000649:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c000064c:	5b                   	pop    ebx
c000064d:	89 e8                	mov    eax,ebp
c000064f:	5e                   	pop    esi
c0000650:	5f                   	pop    edi
c0000651:	5d                   	pop    ebp
c0000652:	c3                   	ret    
c0000653:	90                   	nop
c0000654:	76 f6                	jbe    c000064c <memmove+0x90>
c0000656:	85 d2                	test   edx,edx
c0000658:	74 f2                	je     c000064c <memmove+0x90>
c000065a:	4b                   	dec    ebx
c000065b:	8d 4d ff             	lea    ecx,[ebp-0x1]
c000065e:	66 90                	xchg   ax,ax
c0000660:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c0000663:	88 04 11             	mov    BYTE PTR [ecx+edx*1],al
c0000666:	4a                   	dec    edx
c0000667:	75 f7                	jne    c0000660 <memmove+0xa4>
c0000669:	5b                   	pop    ebx
c000066a:	89 e8                	mov    eax,ebp
c000066c:	5e                   	pop    esi
c000066d:	5f                   	pop    edi
c000066e:	5d                   	pop    ebp
c000066f:	c3                   	ret    
c0000670:	01 ea                	add    edx,ebp
c0000672:	89 e9                	mov    ecx,ebp
c0000674:	8a 03                	mov    al,BYTE PTR [ebx]
c0000676:	41                   	inc    ecx
c0000677:	88 41 ff             	mov    BYTE PTR [ecx-0x1],al
c000067a:	43                   	inc    ebx
c000067b:	39 d1                	cmp    ecx,edx
c000067d:	75 f5                	jne    c0000674 <memmove+0xb8>
c000067f:	eb cb                	jmp    c000064c <memmove+0x90>
c0000681:	8d 76 00             	lea    esi,[esi+0x0]

c0000684 <memset>:
c0000684:	57                   	push   edi
c0000685:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0000689:	85 c9                	test   ecx,ecx
c000068b:	74 0b                	je     c0000698 <memset+0x14>
c000068d:	fc                   	cld    
c000068e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000692:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0000696:	f3 aa                	rep stos BYTE PTR es:[edi],al
c0000698:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000069c:	5f                   	pop    edi
c000069d:	c3                   	ret    
c000069e:	66 90                	xchg   ax,ax

c00006a0 <strlen>:
c00006a0:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00006a4:	31 c0                	xor    eax,eax
c00006a6:	80 3a 00             	cmp    BYTE PTR [edx],0x0
c00006a9:	74 09                	je     c00006b4 <strlen+0x14>
c00006ab:	90                   	nop
c00006ac:	40                   	inc    eax
c00006ad:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c00006b1:	75 f9                	jne    c00006ac <strlen+0xc>
c00006b3:	c3                   	ret    
c00006b4:	c3                   	ret    
c00006b5:	8d 76 00             	lea    esi,[esi+0x0]

c00006b8 <strpbrk>:
c00006b8:	57                   	push   edi
c00006b9:	56                   	push   esi
c00006ba:	53                   	push   ebx
c00006bb:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00006bf:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00006c3:	8a 1e                	mov    bl,BYTE PTR [esi]
c00006c5:	84 db                	test   bl,bl
c00006c7:	74 21                	je     c00006ea <strpbrk+0x32>
c00006c9:	8a 07                	mov    al,BYTE PTR [edi]
c00006cb:	84 c0                	test   al,al
c00006cd:	74 14                	je     c00006e3 <strpbrk+0x2b>
c00006cf:	38 d8                	cmp    al,bl
c00006d1:	74 19                	je     c00006ec <strpbrk+0x34>
c00006d3:	89 fa                	mov    edx,edi
c00006d5:	eb 05                	jmp    c00006dc <strpbrk+0x24>
c00006d7:	90                   	nop
c00006d8:	38 d9                	cmp    cl,bl
c00006da:	74 10                	je     c00006ec <strpbrk+0x34>
c00006dc:	42                   	inc    edx
c00006dd:	8a 0a                	mov    cl,BYTE PTR [edx]
c00006df:	84 c9                	test   cl,cl
c00006e1:	75 f5                	jne    c00006d8 <strpbrk+0x20>
c00006e3:	46                   	inc    esi
c00006e4:	8a 1e                	mov    bl,BYTE PTR [esi]
c00006e6:	84 db                	test   bl,bl
c00006e8:	75 e1                	jne    c00006cb <strpbrk+0x13>
c00006ea:	31 f6                	xor    esi,esi
c00006ec:	89 f0                	mov    eax,esi
c00006ee:	5b                   	pop    ebx
c00006ef:	5e                   	pop    esi
c00006f0:	5f                   	pop    edi
c00006f1:	c3                   	ret    
c00006f2:	66 90                	xchg   ax,ax

c00006f4 <strtok>:
c00006f4:	56                   	push   esi
c00006f5:	53                   	push   ebx
c00006f6:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00006fa:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00006fe:	85 db                	test   ebx,ebx
c0000700:	75 07                	jne    c0000709 <strtok+0x15>
c0000702:	eb 2c                	jmp    c0000730 <strtok+0x3c>
c0000704:	43                   	inc    ebx
c0000705:	c6 43 ff 00          	mov    BYTE PTR [ebx-0x1],0x0
c0000709:	56                   	push   esi
c000070a:	53                   	push   ebx
c000070b:	e8 a8 ff ff ff       	call   c00006b8 <strpbrk>
c0000710:	5a                   	pop    edx
c0000711:	a3 40 60 02 c0       	mov    ds:0xc0026040,eax
c0000716:	59                   	pop    ecx
c0000717:	39 d8                	cmp    eax,ebx
c0000719:	74 e9                	je     c0000704 <strtok+0x10>
c000071b:	85 c0                	test   eax,eax
c000071d:	74 1b                	je     c000073a <strtok+0x46>
c000071f:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0000722:	8d 50 01             	lea    edx,[eax+0x1]
c0000725:	89 d8                	mov    eax,ebx
c0000727:	89 15 40 60 02 c0    	mov    DWORD PTR ds:0xc0026040,edx
c000072d:	5b                   	pop    ebx
c000072e:	5e                   	pop    esi
c000072f:	c3                   	ret    
c0000730:	8b 1d 40 60 02 c0    	mov    ebx,DWORD PTR ds:0xc0026040
c0000736:	85 db                	test   ebx,ebx
c0000738:	75 cf                	jne    c0000709 <strtok+0x15>
c000073a:	31 c0                	xor    eax,eax
c000073c:	5b                   	pop    ebx
c000073d:	5e                   	pop    esi
c000073e:	c3                   	ret    
c000073f:	90                   	nop

c0000740 <strcpy>:
c0000740:	53                   	push   ebx
c0000741:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000745:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0000749:	89 c3                	mov    ebx,eax
c000074b:	8a 11                	mov    dl,BYTE PTR [ecx]
c000074d:	84 d2                	test   dl,dl
c000074f:	74 0d                	je     c000075e <strcpy+0x1e>
c0000751:	8d 76 00             	lea    esi,[esi+0x0]
c0000754:	88 13                	mov    BYTE PTR [ebx],dl
c0000756:	41                   	inc    ecx
c0000757:	43                   	inc    ebx
c0000758:	8a 11                	mov    dl,BYTE PTR [ecx]
c000075a:	84 d2                	test   dl,dl
c000075c:	75 f6                	jne    c0000754 <strcpy+0x14>
c000075e:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0000761:	5b                   	pop    ebx
c0000762:	c3                   	ret    
c0000763:	90                   	nop

c0000764 <strncpy>:
c0000764:	55                   	push   ebp
c0000765:	57                   	push   edi
c0000766:	56                   	push   esi
c0000767:	53                   	push   ebx
c0000768:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000076c:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0000770:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0000774:	85 c0                	test   eax,eax
c0000776:	74 39                	je     c00007b1 <strncpy+0x4d>
c0000778:	8a 1e                	mov    bl,BYTE PTR [esi]
c000077a:	8d 48 ff             	lea    ecx,[eax-0x1]
c000077d:	8d 55 01             	lea    edx,[ebp+0x1]
c0000780:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c0000783:	84 db                	test   bl,bl
c0000785:	74 31                	je     c00007b8 <strncpy+0x54>
c0000787:	85 c9                	test   ecx,ecx
c0000789:	74 26                	je     c00007b1 <strncpy+0x4d>
c000078b:	8a 5e 01             	mov    bl,BYTE PTR [esi+0x1]
c000078e:	8d 48 fe             	lea    ecx,[eax-0x2]
c0000791:	8d 55 02             	lea    edx,[ebp+0x2]
c0000794:	8d 46 02             	lea    eax,[esi+0x2]
c0000797:	88 5d 01             	mov    BYTE PTR [ebp+0x1],bl
c000079a:	84 db                	test   bl,bl
c000079c:	75 0f                	jne    c00007ad <strncpy+0x49>
c000079e:	eb 18                	jmp    c00007b8 <strncpy+0x54>
c00007a0:	40                   	inc    eax
c00007a1:	42                   	inc    edx
c00007a2:	8a 58 ff             	mov    bl,BYTE PTR [eax-0x1]
c00007a5:	49                   	dec    ecx
c00007a6:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00007a9:	84 db                	test   bl,bl
c00007ab:	74 0b                	je     c00007b8 <strncpy+0x54>
c00007ad:	85 c9                	test   ecx,ecx
c00007af:	75 ef                	jne    c00007a0 <strncpy+0x3c>
c00007b1:	5b                   	pop    ebx
c00007b2:	89 e8                	mov    eax,ebp
c00007b4:	5e                   	pop    esi
c00007b5:	5f                   	pop    edi
c00007b6:	5d                   	pop    ebp
c00007b7:	c3                   	ret    
c00007b8:	85 c9                	test   ecx,ecx
c00007ba:	74 f5                	je     c00007b1 <strncpy+0x4d>
c00007bc:	fc                   	cld    
c00007bd:	31 c0                	xor    eax,eax
c00007bf:	89 d7                	mov    edi,edx
c00007c1:	f3 aa                	rep stos BYTE PTR es:[edi],al
c00007c3:	89 e8                	mov    eax,ebp
c00007c5:	5b                   	pop    ebx
c00007c6:	5e                   	pop    esi
c00007c7:	5f                   	pop    edi
c00007c8:	5d                   	pop    ebp
c00007c9:	c3                   	ret    
c00007ca:	66 90                	xchg   ax,ax

c00007cc <strcmp>:
c00007cc:	56                   	push   esi
c00007cd:	53                   	push   ebx
c00007ce:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00007d2:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00007d6:	8a 16                	mov    dl,BYTE PTR [esi]
c00007d8:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c00007db:	38 d1                	cmp    cl,dl
c00007dd:	75 1d                	jne    c00007fc <strcmp+0x30>
c00007df:	84 c9                	test   cl,cl
c00007e1:	74 21                	je     c0000804 <strcmp+0x38>
c00007e3:	b8 01 00 00 00       	mov    eax,0x1
c00007e8:	eb 07                	jmp    c00007f1 <strcmp+0x25>
c00007ea:	66 90                	xchg   ax,ax
c00007ec:	40                   	inc    eax
c00007ed:	84 d2                	test   dl,dl
c00007ef:	74 13                	je     c0000804 <strcmp+0x38>
c00007f1:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c00007f4:	0f b6 0c 03          	movzx  ecx,BYTE PTR [ebx+eax*1]
c00007f8:	38 ca                	cmp    dl,cl
c00007fa:	74 f0                	je     c00007ec <strcmp+0x20>
c00007fc:	0f b6 c2             	movzx  eax,dl
c00007ff:	5b                   	pop    ebx
c0000800:	29 c8                	sub    eax,ecx
c0000802:	5e                   	pop    esi
c0000803:	c3                   	ret    
c0000804:	31 c0                	xor    eax,eax
c0000806:	5b                   	pop    ebx
c0000807:	5e                   	pop    esi
c0000808:	c3                   	ret    
c0000809:	8d 76 00             	lea    esi,[esi+0x0]

c000080c <strchr>:
c000080c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000810:	8a 10                	mov    dl,BYTE PTR [eax]
c0000812:	84 d2                	test   dl,dl
c0000814:	74 15                	je     c000082b <strchr+0x1f>
c0000816:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c000081a:	38 ca                	cmp    dl,cl
c000081c:	75 06                	jne    c0000824 <strchr+0x18>
c000081e:	eb 0e                	jmp    c000082e <strchr+0x22>
c0000820:	38 ca                	cmp    dl,cl
c0000822:	74 09                	je     c000082d <strchr+0x21>
c0000824:	40                   	inc    eax
c0000825:	8a 10                	mov    dl,BYTE PTR [eax]
c0000827:	84 d2                	test   dl,dl
c0000829:	75 f5                	jne    c0000820 <strchr+0x14>
c000082b:	31 c0                	xor    eax,eax
c000082d:	c3                   	ret    
c000082e:	c3                   	ret    
c000082f:	90                   	nop

c0000830 <strncmp>:
c0000830:	57                   	push   edi
c0000831:	56                   	push   esi
c0000832:	53                   	push   ebx
c0000833:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0000837:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000083b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000083f:	85 ff                	test   edi,edi
c0000841:	74 28                	je     c000086b <strncmp+0x3b>
c0000843:	8a 16                	mov    dl,BYTE PTR [esi]
c0000845:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0000848:	38 d1                	cmp    cl,dl
c000084a:	75 28                	jne    c0000874 <strncmp+0x44>
c000084c:	8d 46 01             	lea    eax,[esi+0x1]
c000084f:	84 c9                	test   cl,cl
c0000851:	74 18                	je     c000086b <strncmp+0x3b>
c0000853:	01 fe                	add    esi,edi
c0000855:	eb 0f                	jmp    c0000866 <strncmp+0x36>
c0000857:	90                   	nop
c0000858:	8a 10                	mov    dl,BYTE PTR [eax]
c000085a:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c000085d:	38 ca                	cmp    dl,cl
c000085f:	75 13                	jne    c0000874 <strncmp+0x44>
c0000861:	40                   	inc    eax
c0000862:	84 d2                	test   dl,dl
c0000864:	74 05                	je     c000086b <strncmp+0x3b>
c0000866:	43                   	inc    ebx
c0000867:	39 c6                	cmp    esi,eax
c0000869:	75 ed                	jne    c0000858 <strncmp+0x28>
c000086b:	5b                   	pop    ebx
c000086c:	31 c0                	xor    eax,eax
c000086e:	5e                   	pop    esi
c000086f:	5f                   	pop    edi
c0000870:	c3                   	ret    
c0000871:	8d 76 00             	lea    esi,[esi+0x0]
c0000874:	5b                   	pop    ebx
c0000875:	0f b6 c2             	movzx  eax,dl
c0000878:	5e                   	pop    esi
c0000879:	29 c8                	sub    eax,ecx
c000087b:	5f                   	pop    edi
c000087c:	c3                   	ret    
c000087d:	8d 76 00             	lea    esi,[esi+0x0]

c0000880 <strcat>:
c0000880:	56                   	push   esi
c0000881:	53                   	push   ebx
c0000882:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000886:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000088a:	89 c3                	mov    ebx,eax
c000088c:	eb 04                	jmp    c0000892 <strcat+0x12>
c000088e:	66 90                	xchg   ax,ax
c0000890:	89 d3                	mov    ebx,edx
c0000892:	8d 53 01             	lea    edx,[ebx+0x1]
c0000895:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000899:	75 f5                	jne    c0000890 <strcat+0x10>
c000089b:	31 d2                	xor    edx,edx
c000089d:	8d 76 00             	lea    esi,[esi+0x0]
c00008a0:	8a 0c 16             	mov    cl,BYTE PTR [esi+edx*1]
c00008a3:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c00008a6:	42                   	inc    edx
c00008a7:	84 c9                	test   cl,cl
c00008a9:	75 f5                	jne    c00008a0 <strcat+0x20>
c00008ab:	5b                   	pop    ebx
c00008ac:	5e                   	pop    esi
c00008ad:	c3                   	ret    
c00008ae:	66 90                	xchg   ax,ax

c00008b0 <strncat>:
c00008b0:	56                   	push   esi
c00008b1:	53                   	push   ebx
c00008b2:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00008b6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00008ba:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00008be:	85 f6                	test   esi,esi
c00008c0:	74 1e                	je     c00008e0 <strncat+0x30>
c00008c2:	89 c2                	mov    edx,eax
c00008c4:	42                   	inc    edx
c00008c5:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c00008c9:	75 f9                	jne    c00008c4 <strncat+0x14>
c00008cb:	01 ce                	add    esi,ecx
c00008cd:	eb 06                	jmp    c00008d5 <strncat+0x25>
c00008cf:	90                   	nop
c00008d0:	39 f1                	cmp    ecx,esi
c00008d2:	74 10                	je     c00008e4 <strncat+0x34>
c00008d4:	42                   	inc    edx
c00008d5:	41                   	inc    ecx
c00008d6:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00008d9:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00008dc:	84 db                	test   bl,bl
c00008de:	75 f0                	jne    c00008d0 <strncat+0x20>
c00008e0:	5b                   	pop    ebx
c00008e1:	5e                   	pop    esi
c00008e2:	c3                   	ret    
c00008e3:	90                   	nop
c00008e4:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00008e7:	5b                   	pop    ebx
c00008e8:	5e                   	pop    esi
c00008e9:	c3                   	ret    
c00008ea:	66 90                	xchg   ax,ax

c00008ec <strstr>:
c00008ec:	57                   	push   edi
c00008ed:	56                   	push   esi
c00008ee:	53                   	push   ebx
c00008ef:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00008f3:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00008f7:	57                   	push   edi
c00008f8:	e8 a3 fd ff ff       	call   c00006a0 <strlen>
c00008fd:	59                   	pop    ecx
c00008fe:	85 c0                	test   eax,eax
c0000900:	74 2a                	je     c000092c <strstr+0x40>
c0000902:	89 c6                	mov    esi,eax
c0000904:	eb 12                	jmp    c0000918 <strstr+0x2c>
c0000906:	66 90                	xchg   ax,ax
c0000908:	56                   	push   esi
c0000909:	57                   	push   edi
c000090a:	53                   	push   ebx
c000090b:	e8 70 fc ff ff       	call   c0000580 <memcmp>
c0000910:	83 c4 0c             	add    esp,0xc
c0000913:	85 c0                	test   eax,eax
c0000915:	74 15                	je     c000092c <strstr+0x40>
c0000917:	43                   	inc    ebx
c0000918:	53                   	push   ebx
c0000919:	e8 82 fd ff ff       	call   c00006a0 <strlen>
c000091e:	5a                   	pop    edx
c000091f:	39 f0                	cmp    eax,esi
c0000921:	73 e5                	jae    c0000908 <strstr+0x1c>
c0000923:	5b                   	pop    ebx
c0000924:	31 c0                	xor    eax,eax
c0000926:	5e                   	pop    esi
c0000927:	5f                   	pop    edi
c0000928:	c3                   	ret    
c0000929:	8d 76 00             	lea    esi,[esi+0x0]
c000092c:	89 d8                	mov    eax,ebx
c000092e:	5b                   	pop    ebx
c000092f:	5e                   	pop    esi
c0000930:	5f                   	pop    edi
c0000931:	c3                   	ret    
c0000932:	66 90                	xchg   ax,ax

c0000934 <toupper>:
c0000934:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000938:	0f b6 d0             	movzx  edx,al
c000093b:	f6 82 40 1e 02 c0 02 	test   BYTE PTR [edx-0x3ffde1c0],0x2
c0000942:	74 03                	je     c0000947 <toupper+0x13>
c0000944:	83 e8 20             	sub    eax,0x20
c0000947:	c3                   	ret    

c0000948 <tolower>:
c0000948:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000094c:	0f b6 d0             	movzx  edx,al
c000094f:	f6 82 40 1e 02 c0 01 	test   BYTE PTR [edx-0x3ffde1c0],0x1
c0000956:	74 03                	je     c000095b <tolower+0x13>
c0000958:	83 c0 20             	add    eax,0x20
c000095b:	c3                   	ret    

c000095c <simple_strtoul>:
c000095c:	55                   	push   ebp
c000095d:	57                   	push   edi
c000095e:	56                   	push   esi
c000095f:	53                   	push   ebx
c0000960:	83 ec 08             	sub    esp,0x8
c0000963:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0000967:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000096b:	90                   	nop
c000096c:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c000096f:	f6 82 40 1e 02 c0 08 	test   BYTE PTR [edx-0x3ffde1c0],0x8
c0000976:	75 05                	jne    c000097d <simple_strtoul+0x21>
c0000978:	80 fa 09             	cmp    dl,0x9
c000097b:	75 03                	jne    c0000980 <simple_strtoul+0x24>
c000097d:	41                   	inc    ecx
c000097e:	eb ec                	jmp    c000096c <simple_strtoul+0x10>
c0000980:	80 fa 2d             	cmp    dl,0x2d
c0000983:	0f 84 1b 01 00 00    	je     c0000aa4 <simple_strtoul+0x148>
c0000989:	80 fa 2b             	cmp    dl,0x2b
c000098c:	0f 84 c2 00 00 00    	je     c0000a54 <simple_strtoul+0xf8>
c0000992:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c000099a:	85 f6                	test   esi,esi
c000099c:	0f 85 c3 00 00 00    	jne    c0000a65 <simple_strtoul+0x109>
c00009a2:	8a 11                	mov    dl,BYTE PTR [ecx]
c00009a4:	80 fa 30             	cmp    dl,0x30
c00009a7:	0f 84 47 01 00 00    	je     c0000af4 <simple_strtoul+0x198>
c00009ad:	be 0a 00 00 00       	mov    esi,0xa
c00009b2:	84 d2                	test   dl,dl
c00009b4:	0f 84 6f 01 00 00    	je     c0000b29 <simple_strtoul+0x1cd>
c00009ba:	31 ed                	xor    ebp,ebp
c00009bc:	31 ff                	xor    edi,edi
c00009be:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00009c5:	eb 2b                	jmp    c00009f2 <simple_strtoul+0x96>
c00009c7:	90                   	nop
c00009c8:	83 eb 30             	sub    ebx,0x30
c00009cb:	39 f3                	cmp    ebx,esi
c00009cd:	73 4d                	jae    c0000a1c <simple_strtoul+0xc0>
c00009cf:	31 d2                	xor    edx,edx
c00009d1:	89 d8                	mov    eax,ebx
c00009d3:	f7 d0                	not    eax
c00009d5:	f7 f6                	div    esi
c00009d7:	39 f8                	cmp    eax,edi
c00009d9:	0f 82 b1 00 00 00    	jb     c0000a90 <simple_strtoul+0x134>
c00009df:	0f af fe             	imul   edi,esi
c00009e2:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00009e9:	01 df                	add    edi,ebx
c00009eb:	41                   	inc    ecx
c00009ec:	8a 11                	mov    dl,BYTE PTR [ecx]
c00009ee:	84 d2                	test   dl,dl
c00009f0:	74 2a                	je     c0000a1c <simple_strtoul+0xc0>
c00009f2:	0f b6 da             	movzx  ebx,dl
c00009f5:	f6 83 40 1e 02 c0 04 	test   BYTE PTR [ebx-0x3ffde1c0],0x4
c00009fc:	75 ca                	jne    c00009c8 <simple_strtoul+0x6c>
c00009fe:	0f be d2             	movsx  edx,dl
c0000a01:	52                   	push   edx
c0000a02:	e8 2d ff ff ff       	call   c0000934 <toupper>
c0000a07:	5b                   	pop    ebx
c0000a08:	0f b6 d0             	movzx  edx,al
c0000a0b:	f6 82 40 1e 02 c0 01 	test   BYTE PTR [edx-0x3ffde1c0],0x1
c0000a12:	74 08                	je     c0000a1c <simple_strtoul+0xc0>
c0000a14:	8d 58 c9             	lea    ebx,[eax-0x37]
c0000a17:	39 f3                	cmp    ebx,esi
c0000a19:	72 b4                	jb     c00009cf <simple_strtoul+0x73>
c0000a1b:	90                   	nop
c0000a1c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000a20:	85 c0                	test   eax,eax
c0000a22:	74 14                	je     c0000a38 <simple_strtoul+0xdc>
c0000a24:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0000a27:	09 f8                	or     eax,edi
c0000a29:	75 71                	jne    c0000a9c <simple_strtoul+0x140>
c0000a2b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000a2f:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000a33:	31 ff                	xor    edi,edi
c0000a35:	89 30                	mov    DWORD PTR [eax],esi
c0000a37:	90                   	nop
c0000a38:	4d                   	dec    ebp
c0000a39:	75 05                	jne    c0000a40 <simple_strtoul+0xe4>
c0000a3b:	bf ff ff ff ff       	mov    edi,0xffffffff
c0000a40:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0000a45:	75 02                	jne    c0000a49 <simple_strtoul+0xed>
c0000a47:	f7 df                	neg    edi
c0000a49:	83 c4 08             	add    esp,0x8
c0000a4c:	89 f8                	mov    eax,edi
c0000a4e:	5b                   	pop    ebx
c0000a4f:	5e                   	pop    esi
c0000a50:	5f                   	pop    edi
c0000a51:	5d                   	pop    ebp
c0000a52:	c3                   	ret    
c0000a53:	90                   	nop
c0000a54:	41                   	inc    ecx
c0000a55:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000a5d:	85 f6                	test   esi,esi
c0000a5f:	0f 84 3d ff ff ff    	je     c00009a2 <simple_strtoul+0x46>
c0000a65:	8d 46 fe             	lea    eax,[esi-0x2]
c0000a68:	83 f8 22             	cmp    eax,0x22
c0000a6b:	77 6a                	ja     c0000ad7 <simple_strtoul+0x17b>
c0000a6d:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000a6f:	83 fe 08             	cmp    esi,0x8
c0000a72:	0f 84 a2 00 00 00    	je     c0000b1a <simple_strtoul+0x1be>
c0000a78:	83 fe 10             	cmp    esi,0x10
c0000a7b:	0f 85 31 ff ff ff    	jne    c00009b2 <simple_strtoul+0x56>
c0000a81:	80 fa 30             	cmp    dl,0x30
c0000a84:	74 2c                	je     c0000ab2 <simple_strtoul+0x156>
c0000a86:	be 10 00 00 00       	mov    esi,0x10
c0000a8b:	e9 22 ff ff ff       	jmp    c00009b2 <simple_strtoul+0x56>
c0000a90:	bd 01 00 00 00       	mov    ebp,0x1
c0000a95:	31 ff                	xor    edi,edi
c0000a97:	e9 4f ff ff ff       	jmp    c00009eb <simple_strtoul+0x8f>
c0000a9c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000aa0:	89 08                	mov    DWORD PTR [eax],ecx
c0000aa2:	eb 94                	jmp    c0000a38 <simple_strtoul+0xdc>
c0000aa4:	41                   	inc    ecx
c0000aa5:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000aad:	e9 e8 fe ff ff       	jmp    c000099a <simple_strtoul+0x3e>
c0000ab2:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000ab6:	88 04 24             	mov    BYTE PTR [esp],al
c0000ab9:	50                   	push   eax
c0000aba:	e8 89 fe ff ff       	call   c0000948 <tolower>
c0000abf:	5e                   	pop    esi
c0000ac0:	83 f8 78             	cmp    eax,0x78
c0000ac3:	0f 84 84 00 00 00    	je     c0000b4d <simple_strtoul+0x1f1>
c0000ac9:	41                   	inc    ecx
c0000aca:	be 10 00 00 00       	mov    esi,0x10
c0000acf:	8a 14 24             	mov    dl,BYTE PTR [esp]
c0000ad2:	e9 db fe ff ff       	jmp    c00009b2 <simple_strtoul+0x56>
c0000ad7:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0000adb:	85 ff                	test   edi,edi
c0000add:	74 5c                	je     c0000b3b <simple_strtoul+0x1df>
c0000adf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000ae3:	85 c9                	test   ecx,ecx
c0000ae5:	75 4e                	jne    c0000b35 <simple_strtoul+0x1d9>
c0000ae7:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000aed:	31 ff                	xor    edi,edi
c0000aef:	e9 4c ff ff ff       	jmp    c0000a40 <simple_strtoul+0xe4>
c0000af4:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000af8:	88 04 24             	mov    BYTE PTR [esp],al
c0000afb:	50                   	push   eax
c0000afc:	e8 47 fe ff ff       	call   c0000948 <tolower>
c0000b01:	5d                   	pop    ebp
c0000b02:	83 f8 78             	cmp    eax,0x78
c0000b05:	74 3b                	je     c0000b42 <simple_strtoul+0x1e6>
c0000b07:	41                   	inc    ecx
c0000b08:	8a 14 24             	mov    dl,BYTE PTR [esp]
c0000b0b:	80 fa 30             	cmp    dl,0x30
c0000b0e:	74 13                	je     c0000b23 <simple_strtoul+0x1c7>
c0000b10:	be 08 00 00 00       	mov    esi,0x8
c0000b15:	e9 98 fe ff ff       	jmp    c00009b2 <simple_strtoul+0x56>
c0000b1a:	80 fa 30             	cmp    dl,0x30
c0000b1d:	0f 85 8f fe ff ff    	jne    c00009b2 <simple_strtoul+0x56>
c0000b23:	8a 51 01             	mov    dl,BYTE PTR [ecx+0x1]
c0000b26:	41                   	inc    ecx
c0000b27:	eb e7                	jmp    c0000b10 <simple_strtoul+0x1b4>
c0000b29:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0000b2d:	85 d2                	test   edx,edx
c0000b2f:	74 0a                	je     c0000b3b <simple_strtoul+0x1df>
c0000b31:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b35:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000b39:	89 30                	mov    DWORD PTR [eax],esi
c0000b3b:	31 ff                	xor    edi,edi
c0000b3d:	e9 fe fe ff ff       	jmp    c0000a40 <simple_strtoul+0xe4>
c0000b42:	8a 51 02             	mov    dl,BYTE PTR [ecx+0x2]
c0000b45:	83 c1 02             	add    ecx,0x2
c0000b48:	e9 34 ff ff ff       	jmp    c0000a81 <simple_strtoul+0x125>
c0000b4d:	8a 51 02             	mov    dl,BYTE PTR [ecx+0x2]
c0000b50:	be 10 00 00 00       	mov    esi,0x10
c0000b55:	83 c1 02             	add    ecx,0x2
c0000b58:	e9 55 fe ff ff       	jmp    c00009b2 <simple_strtoul+0x56>

c0000b5d <largebin_index>:
c0000b5d:	89 c2                	mov    edx,eax
c0000b5f:	c1 ea 08             	shr    edx,0x8
c0000b62:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000b68:	77 10                	ja     c0000b7a <largebin_index+0x1d>
c0000b6a:	0f bd d2             	bsr    edx,edx
c0000b6d:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000b70:	d3 e8                	shr    eax,cl
c0000b72:	83 e0 03             	and    eax,0x3
c0000b75:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000b79:	c3                   	ret    
c0000b7a:	b8 5f 00 00 00       	mov    eax,0x5f
c0000b7f:	c3                   	ret    

c0000b80 <malloc_init_state>:
c0000b80:	53                   	push   ebx
c0000b81:	8d 50 34             	lea    edx,[eax+0x34]
c0000b84:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000b8a:	89 d1                	mov    ecx,edx
c0000b8c:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000b8f:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000b92:	83 c2 08             	add    edx,0x8
c0000b95:	39 da                	cmp    edx,ebx
c0000b97:	75 f3                	jne    c0000b8c <malloc_init_state+0xc>
c0000b99:	8b 10                	mov    edx,DWORD PTR [eax]
c0000b9b:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000ba5:	83 e2 03             	and    edx,0x3
c0000ba8:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c0000bb2:	83 ca 48             	or     edx,0x48
c0000bb5:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000bbf:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000bc9:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000bd0:	89 10                	mov    DWORD PTR [eax],edx
c0000bd2:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000bd5:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000bdf:	5b                   	pop    ebx
c0000be0:	c3                   	ret    

c0000be1 <malloc_consolidate>:
c0000be1:	8b 10                	mov    edx,DWORD PTR [eax]
c0000be3:	85 d2                	test   edx,edx
c0000be5:	0f 84 d8 00 00 00    	je     c0000cc3 <malloc_consolidate+0xe2>
c0000beb:	55                   	push   ebp
c0000bec:	83 e2 fd             	and    edx,0xfffffffd
c0000bef:	57                   	push   edi
c0000bf0:	89 c5                	mov    ebp,eax
c0000bf2:	56                   	push   esi
c0000bf3:	8d 78 34             	lea    edi,[eax+0x34]
c0000bf6:	53                   	push   ebx
c0000bf7:	83 ec 10             	sub    esp,0x10
c0000bfa:	89 10                	mov    DWORD PTR [eax],edx
c0000bfc:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000c00:	c1 ea 03             	shr    edx,0x3
c0000c03:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000c07:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000c0b:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000c0e:	85 d2                	test   edx,edx
c0000c10:	0f 84 98 00 00 00    	je     c0000cae <malloc_consolidate+0xcd>
c0000c16:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000c1d:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000c20:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000c23:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000c27:	89 f9                	mov    ecx,edi
c0000c29:	83 e1 fe             	and    ecx,0xfffffffe
c0000c2c:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000c2f:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000c32:	83 e3 fc             	and    ebx,0xfffffffc
c0000c35:	83 e7 01             	and    edi,0x1
c0000c38:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000c3b:	75 14                	jne    c0000c51 <malloc_consolidate+0x70>
c0000c3d:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000c3f:	29 fa                	sub    edx,edi
c0000c41:	01 f9                	add    ecx,edi
c0000c43:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000c46:	89 fb                	mov    ebx,edi
c0000c48:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000c4b:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000c4e:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000c51:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000c54:	74 40                	je     c0000c96 <malloc_consolidate+0xb5>
c0000c56:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000c59:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000c5c:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000c60:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000c63:	83 e7 01             	and    edi,0x1
c0000c66:	75 0e                	jne    c0000c76 <malloc_consolidate+0x95>
c0000c68:	01 d9                	add    ecx,ebx
c0000c6a:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000c6d:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000c70:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000c73:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000c76:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000c79:	89 ce                	mov    esi,ecx
c0000c7b:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000c7e:	83 ce 01             	or     esi,0x1
c0000c81:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000c84:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000c87:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000c8a:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000c8e:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000c91:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000c94:	eb 0c                	jmp    c0000ca2 <malloc_consolidate+0xc1>
c0000c96:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000c99:	83 c9 01             	or     ecx,0x1
c0000c9c:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000c9f:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000ca2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000ca6:	85 d2                	test   edx,edx
c0000ca8:	0f 85 6f ff ff ff    	jne    c0000c1d <malloc_consolidate+0x3c>
c0000cae:	83 c5 04             	add    ebp,0x4
c0000cb1:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000cb5:	0f 85 50 ff ff ff    	jne    c0000c0b <malloc_consolidate+0x2a>
c0000cbb:	83 c4 10             	add    esp,0x10
c0000cbe:	5b                   	pop    ebx
c0000cbf:	5e                   	pop    esi
c0000cc0:	5f                   	pop    edi
c0000cc1:	5d                   	pop    ebp
c0000cc2:	c3                   	ret    
c0000cc3:	e9 b8 fe ff ff       	jmp    c0000b80 <malloc_init_state>

c0000cc8 <dlfree>:
c0000cc8:	57                   	push   edi
c0000cc9:	56                   	push   esi
c0000cca:	53                   	push   ebx
c0000ccb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000ccf:	85 db                	test   ebx,ebx
c0000cd1:	0f 84 e2 00 00 00    	je     c0000db9 <dlfree+0xf1>
c0000cd7:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000cda:	8b 0d 60 60 02 c0    	mov    ecx,DWORD PTR ds:0xc0026060
c0000ce0:	89 f0                	mov    eax,esi
c0000ce2:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000ce5:	83 e0 fc             	and    eax,0xfffffffc
c0000ce8:	39 c1                	cmp    ecx,eax
c0000cea:	72 24                	jb     c0000d10 <dlfree+0x48>
c0000cec:	83 c9 03             	or     ecx,0x3
c0000cef:	c1 e8 03             	shr    eax,0x3
c0000cf2:	89 0d 60 60 02 c0    	mov    DWORD PTR ds:0xc0026060,ecx
c0000cf8:	83 e8 02             	sub    eax,0x2
c0000cfb:	8b 0c 85 64 60 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd9f9c]
c0000d02:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000d04:	89 14 85 64 60 02 c0 	mov    DWORD PTR [eax*4-0x3ffd9f9c],edx
c0000d0b:	e9 a9 00 00 00       	jmp    c0000db9 <dlfree+0xf1>
c0000d10:	83 e6 02             	and    esi,0x2
c0000d13:	0f 85 a0 00 00 00    	jne    c0000db9 <dlfree+0xf1>
c0000d19:	83 c9 01             	or     ecx,0x1
c0000d1c:	8d 34 02             	lea    esi,[edx+eax*1]
c0000d1f:	89 0d 60 60 02 c0    	mov    DWORD PTR ds:0xc0026060,ecx
c0000d25:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000d28:	83 e1 fc             	and    ecx,0xfffffffc
c0000d2b:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000d2f:	75 13                	jne    c0000d44 <dlfree+0x7c>
c0000d31:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000d34:	29 da                	sub    edx,ebx
c0000d36:	01 d8                	add    eax,ebx
c0000d38:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000d3b:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000d3e:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000d41:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000d44:	39 35 8c 60 02 c0    	cmp    DWORD PTR ds:0xc002608c,esi
c0000d4a:	74 40                	je     c0000d8c <dlfree+0xc4>
c0000d4c:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000d50:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000d53:	80 e3 01             	and    bl,0x1
c0000d56:	75 0e                	jne    c0000d66 <dlfree+0x9e>
c0000d58:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000d5b:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000d5e:	01 c8                	add    eax,ecx
c0000d60:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000d63:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000d66:	8b 0d 9c 60 02 c0    	mov    ecx,DWORD PTR ds:0xc002609c
c0000d6c:	c7 42 0c 94 60 02 c0 	mov    DWORD PTR [edx+0xc],0xc0026094
c0000d73:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000d76:	89 15 9c 60 02 c0    	mov    DWORD PTR ds:0xc002609c,edx
c0000d7c:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000d7f:	89 c1                	mov    ecx,eax
c0000d81:	83 c9 01             	or     ecx,0x1
c0000d84:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d87:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000d8a:	eb 10                	jmp    c0000d9c <dlfree+0xd4>
c0000d8c:	01 c8                	add    eax,ecx
c0000d8e:	89 c1                	mov    ecx,eax
c0000d90:	83 c9 01             	or     ecx,0x1
c0000d93:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d96:	89 15 8c 60 02 c0    	mov    DWORD PTR ds:0xc002608c,edx
c0000d9c:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000da1:	76 16                	jbe    c0000db9 <dlfree+0xf1>
c0000da3:	f6 05 60 60 02 c0 02 	test   BYTE PTR ds:0xc0026060,0x2
c0000daa:	74 0d                	je     c0000db9 <dlfree+0xf1>
c0000dac:	5b                   	pop    ebx
c0000dad:	b8 60 60 02 c0       	mov    eax,0xc0026060
c0000db2:	5e                   	pop    esi
c0000db3:	5f                   	pop    edi
c0000db4:	e9 28 fe ff ff       	jmp    c0000be1 <malloc_consolidate>
c0000db9:	5b                   	pop    ebx
c0000dba:	5e                   	pop    esi
c0000dbb:	5f                   	pop    edi
c0000dbc:	c3                   	ret    

c0000dbd <sYSMALLOc>:
c0000dbd:	55                   	push   ebp
c0000dbe:	57                   	push   edi
c0000dbf:	56                   	push   esi
c0000dc0:	53                   	push   ebx
c0000dc1:	89 d3                	mov    ebx,edx
c0000dc3:	83 ec 2c             	sub    esp,0x2c
c0000dc6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000dca:	8b 92 5c 03 00 00    	mov    edx,DWORD PTR [edx+0x35c]
c0000dd0:	f6 03 02             	test   BYTE PTR [ebx],0x2
c0000dd3:	8d 42 ff             	lea    eax,[edx-0x1]
c0000dd6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000dda:	74 1f                	je     c0000dfb <sYSMALLOc+0x3e>
c0000ddc:	89 d8                	mov    eax,ebx
c0000dde:	e8 fe fd ff ff       	call   c0000be1 <malloc_consolidate>
c0000de3:	83 ec 0c             	sub    esp,0xc
c0000de6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0000dea:	83 e8 07             	sub    eax,0x7
c0000ded:	50                   	push   eax
c0000dee:	e8 30 02 00 00       	call   c0001023 <dlmalloc>
c0000df3:	83 c4 10             	add    esp,0x10
c0000df6:	e9 20 02 00 00       	jmp    c000101b <sYSMALLOc+0x25e>
c0000dfb:	8b 7b 2c             	mov    edi,DWORD PTR [ebx+0x2c]
c0000dfe:	8b 8b 48 03 00 00    	mov    ecx,DWORD PTR [ebx+0x348]
c0000e04:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0000e07:	83 e0 fc             	and    eax,0xfffffffc
c0000e0a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000e0e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000e12:	83 c0 10             	add    eax,0x10
c0000e15:	01 c1                	add    ecx,eax
c0000e17:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000e1b:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000e22:	74 04                	je     c0000e28 <sYSMALLOc+0x6b>
c0000e24:	2b 4c 24 04          	sub    ecx,DWORD PTR [esp+0x4]
c0000e28:	f7 da                	neg    edx
c0000e2a:	03 4c 24 10          	add    ecx,DWORD PTR [esp+0x10]
c0000e2e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0000e32:	21 d1                	and    ecx,edx
c0000e34:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0000e38:	7f 07                	jg     c0000e41 <sYSMALLOc+0x84>
c0000e3a:	31 c0                	xor    eax,eax
c0000e3c:	e9 da 01 00 00       	jmp    c000101b <sYSMALLOc+0x25e>
c0000e41:	83 ec 0c             	sub    esp,0xc
c0000e44:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000e48:	e8 3f 8a 00 00       	call   c000988c <sbrk>
c0000e4d:	83 c4 10             	add    esp,0x10
c0000e50:	89 c6                	mov    esi,eax
c0000e52:	83 f8 ff             	cmp    eax,0xffffffff
c0000e55:	74 e3                	je     c0000e3a <sYSMALLOc+0x7d>
c0000e57:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000e5b:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0000e5f:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0000e62:	03 ab 68 03 00 00    	add    ebp,DWORD PTR [ebx+0x368]
c0000e68:	39 f1                	cmp    ecx,esi
c0000e6a:	89 ab 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ebp
c0000e70:	75 13                	jne    c0000e85 <sYSMALLOc+0xc8>
c0000e72:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000e76:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000e7a:	83 c8 01             	or     eax,0x1
c0000e7d:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000e80:	e9 3e 01 00 00       	jmp    c0000fc3 <sYSMALLOc+0x206>
c0000e85:	8b 93 60 03 00 00    	mov    edx,DWORD PTR [ebx+0x360]
c0000e8b:	88 d0                	mov    al,dl
c0000e8d:	83 e0 01             	and    eax,0x1
c0000e90:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000e95:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0000e99:	0f 95 c0             	setne  al
c0000e9c:	22 44 24 1f          	and    al,BYTE PTR [esp+0x1f]
c0000ea0:	39 f1                	cmp    ecx,esi
c0000ea2:	76 12                	jbe    c0000eb6 <sYSMALLOc+0xf9>
c0000ea4:	84 c0                	test   al,al
c0000ea6:	74 0e                	je     c0000eb6 <sYSMALLOc+0xf9>
c0000ea8:	83 e2 fe             	and    edx,0xfffffffe
c0000eab:	89 93 60 03 00 00    	mov    DWORD PTR [ebx+0x360],edx
c0000eb1:	e9 83 00 00 00       	jmp    c0000f39 <sYSMALLOc+0x17c>
c0000eb6:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0000ebb:	74 7c                	je     c0000f39 <sYSMALLOc+0x17c>
c0000ebd:	84 c0                	test   al,al
c0000ebf:	74 0c                	je     c0000ecd <sYSMALLOc+0x110>
c0000ec1:	89 f0                	mov    eax,esi
c0000ec3:	29 c8                	sub    eax,ecx
c0000ec5:	01 e8                	add    eax,ebp
c0000ec7:	89 83 68 03 00 00    	mov    DWORD PTR [ebx+0x368],eax
c0000ecd:	89 f2                	mov    edx,esi
c0000ecf:	83 e2 07             	and    edx,0x7
c0000ed2:	74 0c                	je     c0000ee0 <sYSMALLOc+0x123>
c0000ed4:	b8 08 00 00 00       	mov    eax,0x8
c0000ed9:	29 d0                	sub    eax,edx
c0000edb:	8d 2c 06             	lea    ebp,[esi+eax*1]
c0000ede:	eb 04                	jmp    c0000ee4 <sYSMALLOc+0x127>
c0000ee0:	89 f5                	mov    ebp,esi
c0000ee2:	31 c0                	xor    eax,eax
c0000ee4:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000ee8:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000eec:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000ef0:	01 c1                	add    ecx,eax
c0000ef2:	83 ec 0c             	sub    esp,0xc
c0000ef5:	01 f1                	add    ecx,esi
c0000ef7:	01 ca                	add    edx,ecx
c0000ef9:	29 c8                	sub    eax,ecx
c0000efb:	23 54 24 20          	and    edx,DWORD PTR [esp+0x20]
c0000eff:	01 c2                	add    edx,eax
c0000f01:	52                   	push   edx
c0000f02:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0000f06:	e8 81 89 00 00       	call   c000988c <sbrk>
c0000f0b:	83 c4 10             	add    esp,0x10
c0000f0e:	83 f8 ff             	cmp    eax,0xffffffff
c0000f11:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000f15:	75 0f                	jne    c0000f26 <sYSMALLOc+0x169>
c0000f17:	83 ec 0c             	sub    esp,0xc
c0000f1a:	6a 00                	push   0x0
c0000f1c:	e8 6b 89 00 00       	call   c000988c <sbrk>
c0000f21:	83 c4 10             	add    esp,0x10
c0000f24:	eb 30                	jmp    c0000f56 <sYSMALLOc+0x199>
c0000f26:	39 c6                	cmp    esi,eax
c0000f28:	76 33                	jbe    c0000f5d <sYSMALLOc+0x1a0>
c0000f2a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000f2e:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0000f35:	01 f0                	add    eax,esi
c0000f37:	eb 1d                	jmp    c0000f56 <sYSMALLOc+0x199>
c0000f39:	83 ec 0c             	sub    esp,0xc
c0000f3c:	89 f5                	mov    ebp,esi
c0000f3e:	6a 00                	push   0x0
c0000f40:	e8 47 89 00 00       	call   c000988c <sbrk>
c0000f45:	89 c2                	mov    edx,eax
c0000f47:	29 f2                	sub    edx,esi
c0000f49:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c0000f4d:	83 c4 10             	add    esp,0x10
c0000f50:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000f56:	31 d2                	xor    edx,edx
c0000f58:	83 f8 ff             	cmp    eax,0xffffffff
c0000f5b:	74 66                	je     c0000fc3 <sYSMALLOc+0x206>
c0000f5d:	29 e8                	sub    eax,ebp
c0000f5f:	89 6b 2c             	mov    DWORD PTR [ebx+0x2c],ebp
c0000f62:	01 d0                	add    eax,edx
c0000f64:	83 c8 01             	or     eax,0x1
c0000f67:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0000f6a:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000f70:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000f75:	74 4c                	je     c0000fc3 <sYSMALLOc+0x206>
c0000f77:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000f7b:	83 e8 0c             	sub    eax,0xc
c0000f7e:	83 e0 f8             	and    eax,0xfffffff8
c0000f81:	89 c2                	mov    edx,eax
c0000f83:	83 ca 01             	or     edx,0x1
c0000f86:	83 f8 0f             	cmp    eax,0xf
c0000f89:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c0000f8c:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c0000f94:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c0000f9c:	76 25                	jbe    c0000fc3 <sYSMALLOc+0x206>
c0000f9e:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c0000fa4:	83 ec 0c             	sub    esp,0xc
c0000fa7:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c0000fb1:	83 c7 08             	add    edi,0x8
c0000fb4:	57                   	push   edi
c0000fb5:	e8 0e fd ff ff       	call   c0000cc8 <dlfree>
c0000fba:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c0000fc0:	83 c4 10             	add    esp,0x10
c0000fc3:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c0000fc9:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c0000fcf:	73 06                	jae    c0000fd7 <sYSMALLOc+0x21a>
c0000fd1:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c0000fd7:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c0000fdd:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c0000fe3:	73 06                	jae    c0000feb <sYSMALLOc+0x22e>
c0000fe5:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c0000feb:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0000fee:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0000ff1:	83 e2 fc             	and    edx,0xfffffffc
c0000ff4:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c0000ff8:	0f 82 3c fe ff ff    	jb     c0000e3a <sYSMALLOc+0x7d>
c0000ffe:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0001002:	8d 0c 38             	lea    ecx,[eax+edi*1]
c0001005:	29 fa                	sub    edx,edi
c0001007:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c000100a:	83 ca 01             	or     edx,0x1
c000100d:	89 fb                	mov    ebx,edi
c000100f:	83 c0 08             	add    eax,0x8
c0001012:	83 cb 01             	or     ebx,0x1
c0001015:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c0001018:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000101b:	83 c4 2c             	add    esp,0x2c
c000101e:	5b                   	pop    ebx
c000101f:	5e                   	pop    esi
c0001020:	5f                   	pop    edi
c0001021:	5d                   	pop    ebp
c0001022:	c3                   	ret    

c0001023 <dlmalloc>:
c0001023:	55                   	push   ebp
c0001024:	57                   	push   edi
c0001025:	56                   	push   esi
c0001026:	53                   	push   ebx
c0001027:	83 ec 1c             	sub    esp,0x1c
c000102a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000102e:	83 f8 df             	cmp    eax,0xffffffdf
c0001031:	0f 87 70 03 00 00    	ja     c00013a7 <dlmalloc+0x384>
c0001037:	83 c0 0b             	add    eax,0xb
c000103a:	be 10 00 00 00       	mov    esi,0x10
c000103f:	83 f8 0f             	cmp    eax,0xf
c0001042:	76 05                	jbe    c0001049 <dlmalloc+0x26>
c0001044:	83 e0 f8             	and    eax,0xfffffff8
c0001047:	89 c6                	mov    esi,eax
c0001049:	8b 3d 60 60 02 c0    	mov    edi,DWORD PTR ds:0xc0026060
c000104f:	f7 c7 01 00 00 00    	test   edi,0x1
c0001055:	75 17                	jne    c000106e <dlmalloc+0x4b>
c0001057:	85 ff                	test   edi,edi
c0001059:	0f 85 05 03 00 00    	jne    c0001364 <dlmalloc+0x341>
c000105f:	b8 60 60 02 c0       	mov    eax,0xc0026060
c0001064:	e8 78 fb ff ff       	call   c0000be1 <malloc_consolidate>
c0001069:	e9 f6 02 00 00       	jmp    c0001364 <dlmalloc+0x341>
c000106e:	39 f7                	cmp    edi,esi
c0001070:	72 1f                	jb     c0001091 <dlmalloc+0x6e>
c0001072:	89 f2                	mov    edx,esi
c0001074:	c1 ea 03             	shr    edx,0x3
c0001077:	83 ea 02             	sub    edx,0x2
c000107a:	8b 04 95 64 60 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd9f9c]
c0001081:	85 c0                	test   eax,eax
c0001083:	74 0c                	je     c0001091 <dlmalloc+0x6e>
c0001085:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0001088:	89 0c 95 64 60 02 c0 	mov    DWORD PTR [edx*4-0x3ffd9f9c],ecx
c000108f:	eb 30                	jmp    c00010c1 <dlmalloc+0x9e>
c0001091:	89 f0                	mov    eax,esi
c0001093:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001099:	77 2e                	ja     c00010c9 <dlmalloc+0xa6>
c000109b:	c1 e8 03             	shr    eax,0x3
c000109e:	8d 14 c5 94 60 02 c0 	lea    edx,[eax*8-0x3ffd9f6c]
c00010a5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00010a9:	8d 5a f8             	lea    ebx,[edx-0x8]
c00010ac:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c00010af:	39 c3                	cmp    ebx,eax
c00010b1:	74 2e                	je     c00010e1 <dlmalloc+0xbe>
c00010b3:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c00010b6:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c00010bb:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c00010be:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c00010c1:	83 c0 08             	add    eax,0x8
c00010c4:	e9 e0 02 00 00       	jmp    c00013a9 <dlmalloc+0x386>
c00010c9:	e8 8f fa ff ff       	call   c0000b5d <largebin_index>
c00010ce:	83 e7 02             	and    edi,0x2
c00010d1:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00010d5:	74 0a                	je     c00010e1 <dlmalloc+0xbe>
c00010d7:	b8 60 60 02 c0       	mov    eax,0xc0026060
c00010dc:	e8 00 fb ff ff       	call   c0000be1 <malloc_consolidate>
c00010e1:	8d 46 10             	lea    eax,[esi+0x10]
c00010e4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00010e8:	8b 1d a0 60 02 c0    	mov    ebx,DWORD PTR ds:0xc00260a0
c00010ee:	81 fb 94 60 02 c0    	cmp    ebx,0xc0026094
c00010f4:	0f 84 13 01 00 00    	je     c000120d <dlmalloc+0x1ea>
c00010fa:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00010fd:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0001100:	83 e7 fc             	and    edi,0xfffffffc
c0001103:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001109:	77 4c                	ja     c0001157 <dlmalloc+0x134>
c000110b:	3d 94 60 02 c0       	cmp    eax,0xc0026094
c0001110:	75 45                	jne    c0001157 <dlmalloc+0x134>
c0001112:	39 1d 90 60 02 c0    	cmp    DWORD PTR ds:0xc0026090,ebx
c0001118:	75 3d                	jne    c0001157 <dlmalloc+0x134>
c000111a:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c000111e:	73 37                	jae    c0001157 <dlmalloc+0x134>
c0001120:	8d 04 33             	lea    eax,[ebx+esi*1]
c0001123:	89 fa                	mov    edx,edi
c0001125:	a3 9c 60 02 c0       	mov    ds:0xc002609c,eax
c000112a:	a3 a0 60 02 c0       	mov    ds:0xc00260a0,eax
c000112f:	a3 90 60 02 c0       	mov    ds:0xc0026090,eax
c0001134:	29 f2                	sub    edx,esi
c0001136:	c7 40 08 94 60 02 c0 	mov    DWORD PTR [eax+0x8],0xc0026094
c000113d:	c7 40 0c 94 60 02 c0 	mov    DWORD PTR [eax+0xc],0xc0026094
c0001144:	83 ce 01             	or     esi,0x1
c0001147:	89 d1                	mov    ecx,edx
c0001149:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c000114c:	83 c9 01             	or     ecx,0x1
c000114f:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001152:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c0001155:	eb 15                	jmp    c000116c <dlmalloc+0x149>
c0001157:	a3 a0 60 02 c0       	mov    ds:0xc00260a0,eax
c000115c:	39 fe                	cmp    esi,edi
c000115e:	c7 40 08 94 60 02 c0 	mov    DWORD PTR [eax+0x8],0xc0026094
c0001165:	75 0d                	jne    c0001174 <dlmalloc+0x151>
c0001167:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c000116c:	8d 43 08             	lea    eax,[ebx+0x8]
c000116f:	e9 35 02 00 00       	jmp    c00013a9 <dlmalloc+0x386>
c0001174:	89 f8                	mov    eax,edi
c0001176:	81 ff ff 00 00 00    	cmp    edi,0xff
c000117c:	77 19                	ja     c0001197 <dlmalloc+0x174>
c000117e:	c1 e8 03             	shr    eax,0x3
c0001181:	8d 14 00             	lea    edx,[eax+eax*1]
c0001184:	83 c2 0d             	add    edx,0xd
c0001187:	8d 2c 95 58 60 02 c0 	lea    ebp,[edx*4-0x3ffd9fa8]
c000118e:	8b 14 95 60 60 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd9fa0]
c0001195:	eb 46                	jmp    c00011dd <dlmalloc+0x1ba>
c0001197:	e8 c1 f9 ff ff       	call   c0000b5d <largebin_index>
c000119c:	8d 14 00             	lea    edx,[eax+eax*1]
c000119f:	83 c2 0d             	add    edx,0xd
c00011a2:	8d 0c 95 60 60 02 c0 	lea    ecx,[edx*4-0x3ffd9fa0]
c00011a9:	8b 14 95 60 60 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd9fa0]
c00011b0:	8d 69 f8             	lea    ebp,[ecx-0x8]
c00011b3:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c00011b7:	89 d5                	mov    ebp,edx
c00011b9:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c00011bd:	74 1e                	je     c00011dd <dlmalloc+0x1ba>
c00011bf:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c00011c2:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c00011c5:	77 12                	ja     c00011d9 <dlmalloc+0x1b6>
c00011c7:	83 cf 01             	or     edi,0x1
c00011ca:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c00011cd:	76 05                	jbe    c00011d4 <dlmalloc+0x1b1>
c00011cf:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00011d2:	eb f6                	jmp    c00011ca <dlmalloc+0x1a7>
c00011d4:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c00011d7:	eb 04                	jmp    c00011dd <dlmalloc+0x1ba>
c00011d9:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00011dd:	89 c7                	mov    edi,eax
c00011df:	88 c1                	mov    cl,al
c00011e1:	c1 ff 05             	sar    edi,0x5
c00011e4:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00011e8:	bf 01 00 00 00       	mov    edi,0x1
c00011ed:	d3 e7                	shl    edi,cl
c00011ef:	89 f8                	mov    eax,edi
c00011f1:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00011f5:	09 04 bd 94 63 02 c0 	or     DWORD PTR [edi*4-0x3ffd9c6c],eax
c00011fc:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c00011ff:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c0001202:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c0001205:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c0001208:	e9 db fe ff ff       	jmp    c00010e8 <dlmalloc+0xc5>
c000120d:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001213:	76 78                	jbe    c000128d <dlmalloc+0x26a>
c0001215:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001219:	8d 04 c5 94 60 02 c0 	lea    eax,[eax*8-0x3ffd9f6c]
c0001220:	8d 48 f8             	lea    ecx,[eax-0x8]
c0001223:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001226:	39 ca                	cmp    edx,ecx
c0001228:	74 63                	je     c000128d <dlmalloc+0x26a>
c000122a:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c000122d:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001230:	83 e3 fc             	and    ebx,0xfffffffc
c0001233:	39 de                	cmp    esi,ebx
c0001235:	77 52                	ja     c0001289 <dlmalloc+0x266>
c0001237:	89 df                	mov    edi,ebx
c0001239:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c000123c:	29 f7                	sub    edi,esi
c000123e:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c0001241:	01 d3                	add    ebx,edx
c0001243:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c0001246:	83 ff 0f             	cmp    edi,0xf
c0001249:	8d 42 08             	lea    eax,[edx+0x8]
c000124c:	77 09                	ja     c0001257 <dlmalloc+0x234>
c000124e:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c0001252:	e9 52 01 00 00       	jmp    c00013a9 <dlmalloc+0x386>
c0001257:	8d 0c 32             	lea    ecx,[edx+esi*1]
c000125a:	83 ce 01             	or     esi,0x1
c000125d:	89 0d 9c 60 02 c0    	mov    DWORD PTR ds:0xc002609c,ecx
c0001263:	89 0d a0 60 02 c0    	mov    DWORD PTR ds:0xc00260a0,ecx
c0001269:	c7 41 08 94 60 02 c0 	mov    DWORD PTR [ecx+0x8],0xc0026094
c0001270:	c7 41 0c 94 60 02 c0 	mov    DWORD PTR [ecx+0xc],0xc0026094
c0001277:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c000127a:	89 fa                	mov    edx,edi
c000127c:	83 ca 01             	or     edx,0x1
c000127f:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001282:	89 3b                	mov    DWORD PTR [ebx],edi
c0001284:	e9 20 01 00 00       	jmp    c00013a9 <dlmalloc+0x386>
c0001289:	89 c2                	mov    edx,eax
c000128b:	eb 99                	jmp    c0001226 <dlmalloc+0x203>
c000128d:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001291:	b8 01 00 00 00       	mov    eax,0x1
c0001296:	41                   	inc    ecx
c0001297:	89 cb                	mov    ebx,ecx
c0001299:	8d 14 cd 8c 60 02 c0 	lea    edx,[ecx*8-0x3ffd9f74]
c00012a0:	c1 eb 05             	shr    ebx,0x5
c00012a3:	d3 e0                	shl    eax,cl
c00012a5:	8b 3c 9d 94 63 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd9c6c]
c00012ac:	39 f8                	cmp    eax,edi
c00012ae:	77 04                	ja     c00012b4 <dlmalloc+0x291>
c00012b0:	85 c0                	test   eax,eax
c00012b2:	75 26                	jne    c00012da <dlmalloc+0x2b7>
c00012b4:	43                   	inc    ebx
c00012b5:	83 fb 02             	cmp    ebx,0x2
c00012b8:	0f 87 a6 00 00 00    	ja     c0001364 <dlmalloc+0x341>
c00012be:	8b 3c 9d 94 63 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd9c6c]
c00012c5:	85 ff                	test   edi,edi
c00012c7:	74 eb                	je     c00012b4 <dlmalloc+0x291>
c00012c9:	89 d8                	mov    eax,ebx
c00012cb:	c1 e0 06             	shl    eax,0x6
c00012ce:	8d 14 85 8c 60 02 c0 	lea    edx,[eax*4-0x3ffd9f74]
c00012d5:	b8 01 00 00 00       	mov    eax,0x1
c00012da:	85 f8                	test   eax,edi
c00012dc:	75 07                	jne    c00012e5 <dlmalloc+0x2c2>
c00012de:	83 c2 08             	add    edx,0x8
c00012e1:	01 c0                	add    eax,eax
c00012e3:	eb f5                	jmp    c00012da <dlmalloc+0x2b7>
c00012e5:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00012e8:	39 ca                	cmp    edx,ecx
c00012ea:	75 14                	jne    c0001300 <dlmalloc+0x2dd>
c00012ec:	89 c1                	mov    ecx,eax
c00012ee:	83 c2 08             	add    edx,0x8
c00012f1:	f7 d1                	not    ecx
c00012f3:	01 c0                	add    eax,eax
c00012f5:	21 cf                	and    edi,ecx
c00012f7:	89 3c 9d 94 63 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd9c6c],edi
c00012fe:	eb ac                	jmp    c00012ac <dlmalloc+0x289>
c0001300:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c0001303:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c0001306:	83 e0 fc             	and    eax,0xfffffffc
c0001309:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c000130c:	89 c3                	mov    ebx,eax
c000130e:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c0001311:	29 f3                	sub    ebx,esi
c0001313:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001316:	83 fb 0f             	cmp    ebx,0xf
c0001319:	8d 41 08             	lea    eax,[ecx+0x8]
c000131c:	77 09                	ja     c0001327 <dlmalloc+0x304>
c000131e:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c0001322:	e9 82 00 00 00       	jmp    c00013a9 <dlmalloc+0x386>
c0001327:	8d 3c 31             	lea    edi,[ecx+esi*1]
c000132a:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001330:	89 3d 9c 60 02 c0    	mov    DWORD PTR ds:0xc002609c,edi
c0001336:	89 3d a0 60 02 c0    	mov    DWORD PTR ds:0xc00260a0,edi
c000133c:	c7 47 08 94 60 02 c0 	mov    DWORD PTR [edi+0x8],0xc0026094
c0001343:	c7 47 0c 94 60 02 c0 	mov    DWORD PTR [edi+0xc],0xc0026094
c000134a:	77 06                	ja     c0001352 <dlmalloc+0x32f>
c000134c:	89 3d 90 60 02 c0    	mov    DWORD PTR ds:0xc0026090,edi
c0001352:	83 ce 01             	or     esi,0x1
c0001355:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c0001358:	89 d9                	mov    ecx,ebx
c000135a:	83 c9 01             	or     ecx,0x1
c000135d:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c0001360:	89 1a                	mov    DWORD PTR [edx],ebx
c0001362:	eb 45                	jmp    c00013a9 <dlmalloc+0x386>
c0001364:	a1 8c 60 02 c0       	mov    eax,ds:0xc002608c
c0001369:	8d 4e 10             	lea    ecx,[esi+0x10]
c000136c:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000136f:	83 e2 fc             	and    edx,0xfffffffc
c0001372:	39 d1                	cmp    ecx,edx
c0001374:	77 1e                	ja     c0001394 <dlmalloc+0x371>
c0001376:	8d 0c 30             	lea    ecx,[eax+esi*1]
c0001379:	89 f3                	mov    ebx,esi
c000137b:	89 0d 8c 60 02 c0    	mov    DWORD PTR ds:0xc002608c,ecx
c0001381:	83 cb 01             	or     ebx,0x1
c0001384:	29 f2                	sub    edx,esi
c0001386:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0001389:	83 ca 01             	or     edx,0x1
c000138c:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000138f:	e9 2d fd ff ff       	jmp    c00010c1 <dlmalloc+0x9e>
c0001394:	83 c4 1c             	add    esp,0x1c
c0001397:	89 f0                	mov    eax,esi
c0001399:	5b                   	pop    ebx
c000139a:	ba 60 60 02 c0       	mov    edx,0xc0026060
c000139f:	5e                   	pop    esi
c00013a0:	5f                   	pop    edi
c00013a1:	5d                   	pop    ebp
c00013a2:	e9 16 fa ff ff       	jmp    c0000dbd <sYSMALLOc>
c00013a7:	31 c0                	xor    eax,eax
c00013a9:	83 c4 1c             	add    esp,0x1c
c00013ac:	5b                   	pop    ebx
c00013ad:	5e                   	pop    esi
c00013ae:	5f                   	pop    edi
c00013af:	5d                   	pop    ebp
c00013b0:	c3                   	ret    

c00013b1 <iALLOc>:
c00013b1:	55                   	push   ebp
c00013b2:	89 c5                	mov    ebp,eax
c00013b4:	57                   	push   edi
c00013b5:	56                   	push   esi
c00013b6:	53                   	push   ebx
c00013b7:	83 ec 2c             	sub    esp,0x2c
c00013ba:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00013be:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00013c2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00013c6:	83 3d 60 60 02 c0 00 	cmp    DWORD PTR ds:0xc0026060,0x0
c00013cd:	75 12                	jne    c00013e1 <iALLOc+0x30>
c00013cf:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00013d3:	b8 60 60 02 c0       	mov    eax,0xc0026060
c00013d8:	e8 04 f8 ff ff       	call   c0000be1 <malloc_consolidate>
c00013dd:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00013e1:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00013e6:	74 12                	je     c00013fa <iALLOc+0x49>
c00013e8:	85 ed                	test   ebp,ebp
c00013ea:	0f 84 64 01 00 00    	je     c0001554 <iALLOc+0x1a3>
c00013f0:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00013f8:	eb 33                	jmp    c000142d <iALLOc+0x7c>
c00013fa:	85 ed                	test   ebp,ebp
c00013fc:	75 14                	jne    c0001412 <iALLOc+0x61>
c00013fe:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c0001406:	83 c4 2c             	add    esp,0x2c
c0001409:	5b                   	pop    ebx
c000140a:	5e                   	pop    esi
c000140b:	5f                   	pop    edi
c000140c:	5d                   	pop    ebp
c000140d:	e9 11 fc ff ff       	jmp    c0001023 <dlmalloc>
c0001412:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c0001419:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c0001421:	83 f8 0f             	cmp    eax,0xf
c0001424:	76 07                	jbe    c000142d <iALLOc+0x7c>
c0001426:	83 e0 f8             	and    eax,0xfffffff8
c0001429:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000142d:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c0001432:	75 09                	jne    c000143d <iALLOc+0x8c>
c0001434:	89 d0                	mov    eax,edx
c0001436:	8d 3c aa             	lea    edi,[edx+ebp*4]
c0001439:	31 f6                	xor    esi,esi
c000143b:	eb 3b                	jmp    c0001478 <iALLOc+0xc7>
c000143d:	8b 02                	mov    eax,DWORD PTR [edx]
c000143f:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c0001447:	83 c0 0b             	add    eax,0xb
c000144a:	83 f8 0f             	cmp    eax,0xf
c000144d:	76 07                	jbe    c0001456 <iALLOc+0xa5>
c000144f:	83 e0 f8             	and    eax,0xfffffff8
c0001452:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0001456:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000145a:	0f af f5             	imul   esi,ebp
c000145d:	eb 25                	jmp    c0001484 <iALLOc+0xd3>
c000145f:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001461:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c0001464:	bb 10 00 00 00       	mov    ebx,0x10
c0001469:	83 f9 0f             	cmp    ecx,0xf
c000146c:	76 05                	jbe    c0001473 <iALLOc+0xc2>
c000146e:	83 e1 f8             	and    ecx,0xfffffff8
c0001471:	89 cb                	mov    ebx,ecx
c0001473:	01 de                	add    esi,ebx
c0001475:	83 c0 04             	add    eax,0x4
c0001478:	39 c7                	cmp    edi,eax
c000147a:	75 e3                	jne    c000145f <iALLOc+0xae>
c000147c:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0001484:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0001488:	8b 1d b4 63 02 c0    	mov    ebx,DWORD PTR ds:0xc00263b4
c000148e:	83 ec 0c             	sub    esp,0xc
c0001491:	c7 05 b4 63 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00263b4,0x0
c000149b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000149f:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c00014a3:	50                   	push   eax
c00014a4:	e8 7a fb ff ff       	call   c0001023 <dlmalloc>
c00014a9:	83 c4 10             	add    esp,0x10
c00014ac:	89 1d b4 63 02 c0    	mov    DWORD PTR ds:0xc00263b4,ebx
c00014b2:	85 c0                	test   eax,eax
c00014b4:	0f 84 92 00 00 00    	je     c000154c <iALLOc+0x19b>
c00014ba:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c00014bd:	8d 78 f8             	lea    edi,[eax-0x8]
c00014c0:	83 e3 fc             	and    ebx,0xfffffffc
c00014c3:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00014c7:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c00014cc:	74 1e                	je     c00014ec <iALLOc+0x13b>
c00014ce:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00014d2:	89 d9                	mov    ecx,ebx
c00014d4:	52                   	push   edx
c00014d5:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c00014d9:	83 e9 04             	sub    ecx,0x4
c00014dc:	51                   	push   ecx
c00014dd:	6a 00                	push   0x0
c00014df:	50                   	push   eax
c00014e0:	e8 9f f1 ff ff       	call   c0000684 <memset>
c00014e5:	83 c4 10             	add    esp,0x10
c00014e8:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00014ec:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00014f1:	75 14                	jne    c0001507 <iALLOc+0x156>
c00014f3:	8d 04 37             	lea    eax,[edi+esi*1]
c00014f6:	29 f3                	sub    ebx,esi
c00014f8:	8d 48 08             	lea    ecx,[eax+0x8]
c00014fb:	83 cb 01             	or     ebx,0x1
c00014fe:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0001502:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0001505:	89 f3                	mov    ebx,esi
c0001507:	31 c0                	xor    eax,eax
c0001509:	4d                   	dec    ebp
c000150a:	8d 4f 08             	lea    ecx,[edi+0x8]
c000150d:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001511:	39 c5                	cmp    ebp,eax
c0001513:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c0001516:	74 2c                	je     c0001544 <iALLOc+0x193>
c0001518:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000151c:	85 c9                	test   ecx,ecx
c000151e:	75 15                	jne    c0001535 <iALLOc+0x184>
c0001520:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c0001523:	8d 71 0b             	lea    esi,[ecx+0xb]
c0001526:	b9 10 00 00 00       	mov    ecx,0x10
c000152b:	83 fe 0f             	cmp    esi,0xf
c000152e:	76 05                	jbe    c0001535 <iALLOc+0x184>
c0001530:	83 e6 f8             	and    esi,0xfffffff8
c0001533:	89 f1                	mov    ecx,esi
c0001535:	89 ce                	mov    esi,ecx
c0001537:	29 cb                	sub    ebx,ecx
c0001539:	83 ce 01             	or     esi,0x1
c000153c:	40                   	inc    eax
c000153d:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0001540:	01 cf                	add    edi,ecx
c0001542:	eb c6                	jmp    c000150a <iALLOc+0x159>
c0001544:	83 cb 01             	or     ebx,0x1
c0001547:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c000154a:	eb 08                	jmp    c0001554 <iALLOc+0x1a3>
c000154c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0001554:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001558:	83 c4 2c             	add    esp,0x2c
c000155b:	5b                   	pop    ebx
c000155c:	5e                   	pop    esi
c000155d:	5f                   	pop    edi
c000155e:	5d                   	pop    ebp
c000155f:	c3                   	ret    

c0001560 <dlrealloc>:
c0001560:	55                   	push   ebp
c0001561:	57                   	push   edi
c0001562:	56                   	push   esi
c0001563:	53                   	push   ebx
c0001564:	83 ec 1c             	sub    esp,0x1c
c0001567:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000156b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000156f:	85 db                	test   ebx,ebx
c0001571:	75 10                	jne    c0001583 <dlrealloc+0x23>
c0001573:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0001577:	83 c4 1c             	add    esp,0x1c
c000157a:	5b                   	pop    ebx
c000157b:	5e                   	pop    esi
c000157c:	5f                   	pop    edi
c000157d:	5d                   	pop    ebp
c000157e:	e9 a0 fa ff ff       	jmp    c0001023 <dlmalloc>
c0001583:	83 f8 df             	cmp    eax,0xffffffdf
c0001586:	76 07                	jbe    c000158f <dlrealloc+0x2f>
c0001588:	31 db                	xor    ebx,ebx
c000158a:	e9 6a 01 00 00       	jmp    c00016f9 <dlrealloc+0x199>
c000158f:	83 c0 0b             	add    eax,0xb
c0001592:	bd 10 00 00 00       	mov    ebp,0x10
c0001597:	83 f8 0f             	cmp    eax,0xf
c000159a:	76 05                	jbe    c00015a1 <dlrealloc+0x41>
c000159c:	83 e0 f8             	and    eax,0xfffffff8
c000159f:	89 c5                	mov    ebp,eax
c00015a1:	8b 43 fc             	mov    eax,DWORD PTR [ebx-0x4]
c00015a4:	8d 7b f8             	lea    edi,[ebx-0x8]
c00015a7:	89 c6                	mov    esi,eax
c00015a9:	83 e6 fc             	and    esi,0xfffffffc
c00015ac:	a8 02                	test   al,0x2
c00015ae:	75 d8                	jne    c0001588 <dlrealloc+0x28>
c00015b0:	39 f5                	cmp    ebp,esi
c00015b2:	0f 86 04 01 00 00    	jbe    c00016bc <dlrealloc+0x15c>
c00015b8:	8d 14 37             	lea    edx,[edi+esi*1]
c00015bb:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c00015be:	39 15 8c 60 02 c0    	cmp    DWORD PTR ds:0xc002608c,edx
c00015c4:	75 33                	jne    c00015f9 <dlrealloc+0x99>
c00015c6:	83 e1 fc             	and    ecx,0xfffffffc
c00015c9:	01 f1                	add    ecx,esi
c00015cb:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00015cf:	8d 4d 10             	lea    ecx,[ebp+0x10]
c00015d2:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c00015d6:	77 49                	ja     c0001621 <dlrealloc+0xc1>
c00015d8:	01 ef                	add    edi,ebp
c00015da:	83 e0 01             	and    eax,0x1
c00015dd:	09 e8                	or     eax,ebp
c00015df:	89 43 fc             	mov    DWORD PTR [ebx-0x4],eax
c00015e2:	89 3d 8c 60 02 c0    	mov    DWORD PTR ds:0xc002608c,edi
c00015e8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00015ec:	29 e8                	sub    eax,ebp
c00015ee:	83 c8 01             	or     eax,0x1
c00015f1:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c00015f4:	e9 00 01 00 00       	jmp    c00016f9 <dlrealloc+0x199>
c00015f9:	89 c8                	mov    eax,ecx
c00015fb:	83 e0 fe             	and    eax,0xfffffffe
c00015fe:	f6 44 02 04 01       	test   BYTE PTR [edx+eax*1+0x4],0x1
c0001603:	75 1c                	jne    c0001621 <dlrealloc+0xc1>
c0001605:	83 e1 fc             	and    ecx,0xfffffffc
c0001608:	01 f1                	add    ecx,esi
c000160a:	39 cd                	cmp    ebp,ecx
c000160c:	77 13                	ja     c0001621 <dlrealloc+0xc1>
c000160e:	8b 72 08             	mov    esi,DWORD PTR [edx+0x8]
c0001611:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001614:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
c0001617:	89 70 08             	mov    DWORD PTR [eax+0x8],esi
c000161a:	89 ce                	mov    esi,ecx
c000161c:	e9 9b 00 00 00       	jmp    c00016bc <dlrealloc+0x15c>
c0001621:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0001625:	8d 45 f9             	lea    eax,[ebp-0x7]
c0001628:	83 ec 0c             	sub    esp,0xc
c000162b:	50                   	push   eax
c000162c:	e8 f2 f9 ff ff       	call   c0001023 <dlmalloc>
c0001631:	83 c4 10             	add    esp,0x10
c0001634:	85 c0                	test   eax,eax
c0001636:	0f 84 4c ff ff ff    	je     c0001588 <dlrealloc+0x28>
c000163c:	8d 48 f8             	lea    ecx,[eax-0x8]
c000163f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0001643:	39 ca                	cmp    edx,ecx
c0001645:	75 0a                	jne    c0001651 <dlrealloc+0xf1>
c0001647:	8b 40 fc             	mov    eax,DWORD PTR [eax-0x4]
c000164a:	83 e0 fc             	and    eax,0xfffffffc
c000164d:	01 c6                	add    esi,eax
c000164f:	eb 6b                	jmp    c00016bc <dlrealloc+0x15c>
c0001651:	8d 4e fc             	lea    ecx,[esi-0x4]
c0001654:	83 f9 27             	cmp    ecx,0x27
c0001657:	76 08                	jbe    c0001661 <dlrealloc+0x101>
c0001659:	89 de                	mov    esi,ebx
c000165b:	89 c7                	mov    edi,eax
c000165d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000165f:	eb 43                	jmp    c00016a4 <dlrealloc+0x144>
c0001661:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001663:	83 f9 13             	cmp    ecx,0x13
c0001666:	89 10                	mov    DWORD PTR [eax],edx
c0001668:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c000166b:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000166e:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0001671:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0001674:	76 2e                	jbe    c00016a4 <dlrealloc+0x144>
c0001676:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0001679:	83 f9 1b             	cmp    ecx,0x1b
c000167c:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000167f:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0001682:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0001685:	76 1d                	jbe    c00016a4 <dlrealloc+0x144>
c0001687:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000168a:	83 f9 23             	cmp    ecx,0x23
c000168d:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0001690:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0001693:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0001696:	76 0c                	jbe    c00016a4 <dlrealloc+0x144>
c0001698:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000169b:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c000169e:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00016a1:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c00016a4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00016a8:	83 ec 0c             	sub    esp,0xc
c00016ab:	53                   	push   ebx
c00016ac:	e8 17 f6 ff ff       	call   c0000cc8 <dlfree>
c00016b1:	83 c4 10             	add    esp,0x10
c00016b4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00016b8:	89 c3                	mov    ebx,eax
c00016ba:	eb 3d                	jmp    c00016f9 <dlrealloc+0x199>
c00016bc:	89 f2                	mov    edx,esi
c00016be:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c00016c1:	29 ea                	sub    edx,ebp
c00016c3:	83 e1 01             	and    ecx,0x1
c00016c6:	8d 04 37             	lea    eax,[edi+esi*1]
c00016c9:	83 fa 0f             	cmp    edx,0xf
c00016cc:	77 0b                	ja     c00016d9 <dlrealloc+0x179>
c00016ce:	09 ce                	or     esi,ecx
c00016d0:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c00016d3:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00016d7:	eb 20                	jmp    c00016f9 <dlrealloc+0x199>
c00016d9:	01 ef                	add    edi,ebp
c00016db:	83 ec 0c             	sub    esp,0xc
c00016de:	09 cd                	or     ebp,ecx
c00016e0:	83 ca 01             	or     edx,0x1
c00016e3:	89 6b fc             	mov    DWORD PTR [ebx-0x4],ebp
c00016e6:	83 c7 08             	add    edi,0x8
c00016e9:	89 57 fc             	mov    DWORD PTR [edi-0x4],edx
c00016ec:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00016f0:	57                   	push   edi
c00016f1:	e8 d2 f5 ff ff       	call   c0000cc8 <dlfree>
c00016f6:	83 c4 10             	add    esp,0x10
c00016f9:	83 c4 1c             	add    esp,0x1c
c00016fc:	89 d8                	mov    eax,ebx
c00016fe:	5b                   	pop    ebx
c00016ff:	5e                   	pop    esi
c0001700:	5f                   	pop    edi
c0001701:	5d                   	pop    ebp
c0001702:	c3                   	ret    

c0001703 <dlmemalign>:
c0001703:	55                   	push   ebp
c0001704:	57                   	push   edi
c0001705:	56                   	push   esi
c0001706:	53                   	push   ebx
c0001707:	83 ec 0c             	sub    esp,0xc
c000170a:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000170e:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0001712:	83 fa 08             	cmp    edx,0x8
c0001715:	77 10                	ja     c0001727 <dlmemalign+0x24>
c0001717:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000171b:	83 c4 0c             	add    esp,0xc
c000171e:	5b                   	pop    ebx
c000171f:	5e                   	pop    esi
c0001720:	5f                   	pop    edi
c0001721:	5d                   	pop    ebp
c0001722:	e9 fc f8 ff ff       	jmp    c0001023 <dlmalloc>
c0001727:	bf 10 00 00 00       	mov    edi,0x10
c000172c:	83 fa 0f             	cmp    edx,0xf
c000172f:	76 13                	jbe    c0001744 <dlmemalign+0x41>
c0001731:	8d 4a ff             	lea    ecx,[edx-0x1]
c0001734:	85 d1                	test   ecx,edx
c0001736:	75 04                	jne    c000173c <dlmemalign+0x39>
c0001738:	89 d7                	mov    edi,edx
c000173a:	eb 08                	jmp    c0001744 <dlmemalign+0x41>
c000173c:	39 d7                	cmp    edi,edx
c000173e:	73 04                	jae    c0001744 <dlmemalign+0x41>
c0001740:	01 ff                	add    edi,edi
c0001742:	eb f8                	jmp    c000173c <dlmemalign+0x39>
c0001744:	83 f8 df             	cmp    eax,0xffffffdf
c0001747:	76 07                	jbe    c0001750 <dlmemalign+0x4d>
c0001749:	31 c0                	xor    eax,eax
c000174b:	e9 ce 00 00 00       	jmp    c000181e <dlmemalign+0x11b>
c0001750:	83 c0 0b             	add    eax,0xb
c0001753:	bd 10 00 00 00       	mov    ebp,0x10
c0001758:	83 f8 0f             	cmp    eax,0xf
c000175b:	76 05                	jbe    c0001762 <dlmemalign+0x5f>
c000175d:	83 e0 f8             	and    eax,0xfffffff8
c0001760:	89 c5                	mov    ebp,eax
c0001762:	83 ec 0c             	sub    esp,0xc
c0001765:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c0001769:	50                   	push   eax
c000176a:	e8 b4 f8 ff ff       	call   c0001023 <dlmalloc>
c000176f:	83 c4 10             	add    esp,0x10
c0001772:	89 c1                	mov    ecx,eax
c0001774:	85 c0                	test   eax,eax
c0001776:	74 d1                	je     c0001749 <dlmemalign+0x46>
c0001778:	31 d2                	xor    edx,edx
c000177a:	8d 70 f8             	lea    esi,[eax-0x8]
c000177d:	f7 f7                	div    edi
c000177f:	85 d2                	test   edx,edx
c0001781:	74 62                	je     c00017e5 <dlmemalign+0xe2>
c0001783:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c0001787:	89 f8                	mov    eax,edi
c0001789:	f7 d8                	neg    eax
c000178b:	21 c3                	and    ebx,eax
c000178d:	83 eb 08             	sub    ebx,0x8
c0001790:	89 d8                	mov    eax,ebx
c0001792:	29 f0                	sub    eax,esi
c0001794:	83 f8 0f             	cmp    eax,0xf
c0001797:	77 02                	ja     c000179b <dlmemalign+0x98>
c0001799:	01 fb                	add    ebx,edi
c000179b:	89 d8                	mov    eax,ebx
c000179d:	29 f0                	sub    eax,esi
c000179f:	89 c6                	mov    esi,eax
c00017a1:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00017a4:	89 c2                	mov    edx,eax
c00017a6:	83 e2 fc             	and    edx,0xfffffffc
c00017a9:	29 f2                	sub    edx,esi
c00017ab:	a8 02                	test   al,0x2
c00017ad:	74 10                	je     c00017bf <dlmemalign+0xbc>
c00017af:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c00017b2:	83 ca 02             	or     edx,0x2
c00017b5:	8d 43 08             	lea    eax,[ebx+0x8]
c00017b8:	89 33                	mov    DWORD PTR [ebx],esi
c00017ba:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c00017bd:	eb 5f                	jmp    c000181e <dlmemalign+0x11b>
c00017bf:	83 ec 0c             	sub    esp,0xc
c00017c2:	89 d0                	mov    eax,edx
c00017c4:	83 c8 01             	or     eax,0x1
c00017c7:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c00017ca:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c00017cf:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00017d2:	83 e0 01             	and    eax,0x1
c00017d5:	09 f0                	or     eax,esi
c00017d7:	89 de                	mov    esi,ebx
c00017d9:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c00017dc:	51                   	push   ecx
c00017dd:	e8 e6 f4 ff ff       	call   c0000cc8 <dlfree>
c00017e2:	83 c4 10             	add    esp,0x10
c00017e5:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00017e8:	a8 02                	test   al,0x2
c00017ea:	75 2f                	jne    c000181b <dlmemalign+0x118>
c00017ec:	83 e0 fc             	and    eax,0xfffffffc
c00017ef:	8d 55 10             	lea    edx,[ebp+0x10]
c00017f2:	39 c2                	cmp    edx,eax
c00017f4:	73 25                	jae    c000181b <dlmemalign+0x118>
c00017f6:	8d 14 2e             	lea    edx,[esi+ebp*1]
c00017f9:	83 ec 0c             	sub    esp,0xc
c00017fc:	29 e8                	sub    eax,ebp
c00017fe:	83 c2 08             	add    edx,0x8
c0001801:	83 c8 01             	or     eax,0x1
c0001804:	89 42 fc             	mov    DWORD PTR [edx-0x4],eax
c0001807:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000180a:	83 e0 01             	and    eax,0x1
c000180d:	09 c5                	or     ebp,eax
c000180f:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c0001812:	52                   	push   edx
c0001813:	e8 b0 f4 ff ff       	call   c0000cc8 <dlfree>
c0001818:	83 c4 10             	add    esp,0x10
c000181b:	8d 46 08             	lea    eax,[esi+0x8]
c000181e:	83 c4 0c             	add    esp,0xc
c0001821:	5b                   	pop    ebx
c0001822:	5e                   	pop    esi
c0001823:	5f                   	pop    edi
c0001824:	5d                   	pop    ebp
c0001825:	c3                   	ret    

c0001826 <dlcalloc>:
c0001826:	53                   	push   ebx
c0001827:	83 ec 14             	sub    esp,0x14
c000182a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000182e:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c0001833:	50                   	push   eax
c0001834:	e8 ea f7 ff ff       	call   c0001023 <dlmalloc>
c0001839:	83 c4 10             	add    esp,0x10
c000183c:	89 c3                	mov    ebx,eax
c000183e:	85 c0                	test   eax,eax
c0001840:	74 77                	je     c00018b9 <dlcalloc+0x93>
c0001842:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c0001845:	89 d0                	mov    eax,edx
c0001847:	83 e0 fc             	and    eax,0xfffffffc
c000184a:	80 e2 02             	and    dl,0x2
c000184d:	75 5a                	jne    c00018a9 <dlcalloc+0x83>
c000184f:	83 e8 04             	sub    eax,0x4
c0001852:	83 f8 27             	cmp    eax,0x27
c0001855:	76 03                	jbe    c000185a <dlcalloc+0x34>
c0001857:	51                   	push   ecx
c0001858:	eb 53                	jmp    c00018ad <dlcalloc+0x87>
c000185a:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0001860:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0001867:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000186e:	83 f8 13             	cmp    eax,0x13
c0001871:	76 46                	jbe    c00018b9 <dlcalloc+0x93>
c0001873:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000187a:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0001881:	83 f8 1b             	cmp    eax,0x1b
c0001884:	76 33                	jbe    c00018b9 <dlcalloc+0x93>
c0001886:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000188d:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0001894:	83 f8 23             	cmp    eax,0x23
c0001897:	76 20                	jbe    c00018b9 <dlcalloc+0x93>
c0001899:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c00018a0:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c00018a7:	eb 10                	jmp    c00018b9 <dlcalloc+0x93>
c00018a9:	83 e8 08             	sub    eax,0x8
c00018ac:	52                   	push   edx
c00018ad:	50                   	push   eax
c00018ae:	6a 00                	push   0x0
c00018b0:	53                   	push   ebx
c00018b1:	e8 ce ed ff ff       	call   c0000684 <memset>
c00018b6:	83 c4 10             	add    esp,0x10
c00018b9:	89 d8                	mov    eax,ebx
c00018bb:	83 c4 08             	add    esp,0x8
c00018be:	5b                   	pop    ebx
c00018bf:	c3                   	ret    

c00018c0 <dlcfree>:
c00018c0:	e9 03 f4 ff ff       	jmp    c0000cc8 <dlfree>

c00018c5 <dlindependent_calloc>:
c00018c5:	83 ec 28             	sub    esp,0x28
c00018c8:	b9 03 00 00 00       	mov    ecx,0x3
c00018cd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00018d1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00018d5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00018d9:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00018dd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00018e1:	e8 cb fa ff ff       	call   c00013b1 <iALLOc>
c00018e6:	83 c4 2c             	add    esp,0x2c
c00018e9:	c3                   	ret    

c00018ea <dlindependent_comalloc>:
c00018ea:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00018ee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00018f2:	31 c9                	xor    ecx,ecx
c00018f4:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00018f8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00018fc:	e9 b0 fa ff ff       	jmp    c00013b1 <iALLOc>

c0001901 <dlvalloc>:
c0001901:	83 ec 0c             	sub    esp,0xc
c0001904:	83 3d 60 60 02 c0 00 	cmp    DWORD PTR ds:0xc0026060,0x0
c000190b:	75 0a                	jne    c0001917 <dlvalloc+0x16>
c000190d:	b8 60 60 02 c0       	mov    eax,0xc0026060
c0001912:	e8 ca f2 ff ff       	call   c0000be1 <malloc_consolidate>
c0001917:	50                   	push   eax
c0001918:	50                   	push   eax
c0001919:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000191d:	ff 35 bc 63 02 c0    	push   DWORD PTR ds:0xc00263bc
c0001923:	e8 db fd ff ff       	call   c0001703 <dlmemalign>
c0001928:	83 c4 1c             	add    esp,0x1c
c000192b:	c3                   	ret    

c000192c <dlpvalloc>:
c000192c:	83 ec 0c             	sub    esp,0xc
c000192f:	83 3d 60 60 02 c0 00 	cmp    DWORD PTR ds:0xc0026060,0x0
c0001936:	75 0a                	jne    c0001942 <dlpvalloc+0x16>
c0001938:	b8 60 60 02 c0       	mov    eax,0xc0026060
c000193d:	e8 9f f2 ff ff       	call   c0000be1 <malloc_consolidate>
c0001942:	a1 bc 63 02 c0       	mov    eax,ds:0xc00263bc
c0001947:	89 c1                	mov    ecx,eax
c0001949:	52                   	push   edx
c000194a:	f7 d9                	neg    ecx
c000194c:	52                   	push   edx
c000194d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001951:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c0001955:	21 ca                	and    edx,ecx
c0001957:	52                   	push   edx
c0001958:	50                   	push   eax
c0001959:	e8 a5 fd ff ff       	call   c0001703 <dlmemalign>
c000195e:	83 c4 1c             	add    esp,0x1c
c0001961:	c3                   	ret    

c0001962 <dlmalloc_trim>:
c0001962:	b8 60 60 02 c0       	mov    eax,0xc0026060
c0001967:	e8 75 f2 ff ff       	call   c0000be1 <malloc_consolidate>
c000196c:	31 c0                	xor    eax,eax
c000196e:	c3                   	ret    

c000196f <dlmalloc_usable_size>:
c000196f:	53                   	push   ebx
c0001970:	31 c0                	xor    eax,eax
c0001972:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0001976:	85 c9                	test   ecx,ecx
c0001978:	74 24                	je     c000199e <dlmalloc_usable_size+0x2f>
c000197a:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c000197d:	f6 c2 02             	test   dl,0x2
c0001980:	74 08                	je     c000198a <dlmalloc_usable_size+0x1b>
c0001982:	83 e2 fc             	and    edx,0xfffffffc
c0001985:	8d 42 f8             	lea    eax,[edx-0x8]
c0001988:	eb 14                	jmp    c000199e <dlmalloc_usable_size+0x2f>
c000198a:	89 d3                	mov    ebx,edx
c000198c:	31 c0                	xor    eax,eax
c000198e:	83 e3 fe             	and    ebx,0xfffffffe
c0001991:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c0001996:	74 06                	je     c000199e <dlmalloc_usable_size+0x2f>
c0001998:	83 e2 fc             	and    edx,0xfffffffc
c000199b:	8d 42 fc             	lea    eax,[edx-0x4]
c000199e:	5b                   	pop    ebx
c000199f:	c3                   	ret    

c00019a0 <dlmallinfo>:
c00019a0:	55                   	push   ebp
c00019a1:	57                   	push   edi
c00019a2:	56                   	push   esi
c00019a3:	53                   	push   ebx
c00019a4:	83 ec 08             	sub    esp,0x8
c00019a7:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00019ab:	83 3d 8c 60 02 c0 00 	cmp    DWORD PTR ds:0xc002608c,0x0
c00019b2:	75 0a                	jne    c00019be <dlmallinfo+0x1e>
c00019b4:	b8 60 60 02 c0       	mov    eax,0xc0026060
c00019b9:	e8 23 f2 ff ff       	call   c0000be1 <malloc_consolidate>
c00019be:	a1 8c 60 02 c0       	mov    eax,ds:0xc002608c
c00019c3:	31 ed                	xor    ebp,ebp
c00019c5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00019c8:	31 c9                	xor    ecx,ecx
c00019ca:	83 e0 fc             	and    eax,0xfffffffc
c00019cd:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00019d1:	31 c0                	xor    eax,eax
c00019d3:	8b 14 85 64 60 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd9f9c]
c00019da:	85 d2                	test   edx,edx
c00019dc:	74 0e                	je     c00019ec <dlmallinfo+0x4c>
c00019de:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c00019e1:	45                   	inc    ebp
c00019e2:	83 e6 fc             	and    esi,0xfffffffc
c00019e5:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00019e8:	01 f1                	add    ecx,esi
c00019ea:	eb ee                	jmp    c00019da <dlmallinfo+0x3a>
c00019ec:	40                   	inc    eax
c00019ed:	83 f8 0a             	cmp    eax,0xa
c00019f0:	75 e1                	jne    c00019d3 <dlmallinfo+0x33>
c00019f2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00019f6:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00019fd:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001a00:	b8 94 60 02 c0       	mov    eax,0xc0026094
c0001a05:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c0001a08:	39 f0                	cmp    eax,esi
c0001a0a:	74 10                	je     c0001a1c <dlmallinfo+0x7c>
c0001a0c:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0001a0f:	ff 04 24             	inc    DWORD PTR [esp]
c0001a12:	83 e7 fc             	and    edi,0xfffffffc
c0001a15:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0001a18:	01 fa                	add    edx,edi
c0001a1a:	eb ec                	jmp    c0001a08 <dlmallinfo+0x68>
c0001a1c:	83 c0 08             	add    eax,0x8
c0001a1f:	3d 8c 63 02 c0       	cmp    eax,0xc002638c
c0001a24:	75 df                	jne    c0001a05 <dlmallinfo+0x65>
c0001a26:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c0001a29:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0001a2c:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001a2f:	a1 c8 63 02 c0       	mov    eax,ds:0xc00263c8
c0001a34:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001a37:	89 03                	mov    DWORD PTR [ebx],eax
c0001a39:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0001a3c:	8b 35 b0 63 02 c0    	mov    esi,DWORD PTR ds:0xc00263b0
c0001a42:	29 d0                	sub    eax,edx
c0001a44:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001a47:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001a4a:	8b 35 c4 63 02 c0    	mov    esi,DWORD PTR ds:0xc00263c4
c0001a50:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001a54:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001a57:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001a5a:	8b 35 d4 63 02 c0    	mov    esi,DWORD PTR ds:0xc00263d4
c0001a60:	89 d8                	mov    eax,ebx
c0001a62:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001a65:	83 c4 08             	add    esp,0x8
c0001a68:	5b                   	pop    ebx
c0001a69:	5e                   	pop    esi
c0001a6a:	5f                   	pop    edi
c0001a6b:	5d                   	pop    ebp
c0001a6c:	c2 04 00             	ret    0x4

c0001a6f <dlmalloc_stats>:
c0001a6f:	83 ec 30             	sub    esp,0x30
c0001a72:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001a76:	50                   	push   eax
c0001a77:	e8 24 ff ff ff       	call   c00019a0 <dlmallinfo>
c0001a7c:	83 c4 30             	add    esp,0x30
c0001a7f:	c3                   	ret    

c0001a80 <dlmallopt>:
c0001a80:	56                   	push   esi
c0001a81:	b8 60 60 02 c0       	mov    eax,0xc0026060
c0001a86:	53                   	push   ebx
c0001a87:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001a8b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001a8f:	e8 4d f1 ff ff       	call   c0000be1 <malloc_consolidate>
c0001a94:	8d 46 04             	lea    eax,[esi+0x4]
c0001a97:	83 f8 05             	cmp    eax,0x5
c0001a9a:	77 67                	ja     c0001b03 <dlmallopt+0x83>
c0001a9c:	ff 24 85 44 1f 02 c0 	jmp    DWORD PTR [eax*4-0x3ffde0bc]
c0001aa3:	83 fb 50             	cmp    ebx,0x50
c0001aa6:	77 5b                	ja     c0001b03 <dlmallopt+0x83>
c0001aa8:	ba 08 00 00 00       	mov    edx,0x8
c0001aad:	85 db                	test   ebx,ebx
c0001aaf:	74 12                	je     c0001ac3 <dlmallopt+0x43>
c0001ab1:	83 c3 0b             	add    ebx,0xb
c0001ab4:	ba 10 00 00 00       	mov    edx,0x10
c0001ab9:	83 fb 0f             	cmp    ebx,0xf
c0001abc:	76 05                	jbe    c0001ac3 <dlmallopt+0x43>
c0001abe:	89 da                	mov    edx,ebx
c0001ac0:	83 e2 f8             	and    edx,0xfffffff8
c0001ac3:	a1 60 60 02 c0       	mov    eax,ds:0xc0026060
c0001ac8:	83 e0 03             	and    eax,0x3
c0001acb:	09 d0                	or     eax,edx
c0001acd:	a3 60 60 02 c0       	mov    ds:0xc0026060,eax
c0001ad2:	eb 31                	jmp    c0001b05 <dlmallopt+0x85>
c0001ad4:	89 1d a4 63 02 c0    	mov    DWORD PTR ds:0xc00263a4,ebx
c0001ada:	eb 06                	jmp    c0001ae2 <dlmallopt+0x62>
c0001adc:	89 1d a8 63 02 c0    	mov    DWORD PTR ds:0xc00263a8,ebx
c0001ae2:	be 01 00 00 00       	mov    esi,0x1
c0001ae7:	eb 1c                	jmp    c0001b05 <dlmallopt+0x85>
c0001ae9:	89 1d ac 63 02 c0    	mov    DWORD PTR ds:0xc00263ac,ebx
c0001aef:	eb f1                	jmp    c0001ae2 <dlmallopt+0x62>
c0001af1:	31 f6                	xor    esi,esi
c0001af3:	85 db                	test   ebx,ebx
c0001af5:	75 0e                	jne    c0001b05 <dlmallopt+0x85>
c0001af7:	c7 05 b4 63 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00263b4,0x0
c0001b01:	eb df                	jmp    c0001ae2 <dlmallopt+0x62>
c0001b03:	31 f6                	xor    esi,esi
c0001b05:	89 f0                	mov    eax,esi
c0001b07:	5b                   	pop    ebx
c0001b08:	5e                   	pop    esi
c0001b09:	c3                   	ret    

c0001b0a <disk_status>:
c0001b0a:	31 c0                	xor    eax,eax
c0001b0c:	c3                   	ret    

c0001b0d <disk_initialize>:
c0001b0d:	31 c0                	xor    eax,eax
c0001b0f:	c3                   	ret    

c0001b10 <disk_read>:
c0001b10:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001b15:	0f b6 04 85 c0 7a 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd8540]
c0001b1d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001b21:	e9 12 95 01 00       	jmp    c001b038 <fatWrapperReadDisk>

c0001b26 <disk_write>:
c0001b26:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001b2b:	0f b6 04 85 c0 7a 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd8540]
c0001b33:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001b37:	e9 44 95 01 00       	jmp    c001b080 <fatWrapperWriteDisk>

c0001b3c <disk_ioctl>:
c0001b3c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001b41:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001b45:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001b4a:	0f b6 04 85 c0 7a 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd8540]
c0001b52:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001b56:	e9 6d 95 01 00       	jmp    c001b0c8 <fatWrapperIoctl>

c0001b5b <ld_word>:
c0001b5b:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001b5f:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001b62:	c1 e2 08             	shl    edx,0x8
c0001b65:	09 d0                	or     eax,edx
c0001b67:	c3                   	ret    

c0001b68 <ld_dword>:
c0001b68:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001b6c:	89 d1                	mov    ecx,edx
c0001b6e:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001b72:	c1 e1 08             	shl    ecx,0x8
c0001b75:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001b78:	09 ca                	or     edx,ecx
c0001b7a:	c1 e2 08             	shl    edx,0x8
c0001b7d:	09 d0                	or     eax,edx
c0001b7f:	c3                   	ret    

c0001b80 <ld_qword>:
c0001b80:	57                   	push   edi
c0001b81:	56                   	push   esi
c0001b82:	53                   	push   ebx
c0001b83:	31 db                	xor    ebx,ebx
c0001b85:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c0001b88:	89 df                	mov    edi,ebx
c0001b8a:	89 ce                	mov    esi,ecx
c0001b8c:	0f b6 50 03          	movzx  edx,BYTE PTR [eax+0x3]
c0001b90:	0f a4 f7 08          	shld   edi,esi,0x8
c0001b94:	c1 e6 08             	shl    esi,0x8
c0001b97:	09 f2                	or     edx,esi
c0001b99:	89 d6                	mov    esi,edx
c0001b9b:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
c0001b9f:	0f a4 f7 08          	shld   edi,esi,0x8
c0001ba3:	c1 e6 08             	shl    esi,0x8
c0001ba6:	09 f2                	or     edx,esi
c0001ba8:	89 d6                	mov    esi,edx
c0001baa:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001bae:	0f a4 f7 08          	shld   edi,esi,0x8
c0001bb2:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001bb5:	c1 e6 08             	shl    esi,0x8
c0001bb8:	89 fb                	mov    ebx,edi
c0001bba:	09 f2                	or     edx,esi
c0001bbc:	89 d1                	mov    ecx,edx
c0001bbe:	0f a4 cb 08          	shld   ebx,ecx,0x8
c0001bc2:	c1 e1 08             	shl    ecx,0x8
c0001bc5:	89 da                	mov    edx,ebx
c0001bc7:	09 c8                	or     eax,ecx
c0001bc9:	5b                   	pop    ebx
c0001bca:	5e                   	pop    esi
c0001bcb:	5f                   	pop    edi
c0001bcc:	c3                   	ret    

c0001bcd <st_word>:
c0001bcd:	66 89 10             	mov    WORD PTR [eax],dx
c0001bd0:	c3                   	ret    

c0001bd1 <st_dword>:
c0001bd1:	89 10                	mov    DWORD PTR [eax],edx
c0001bd3:	c3                   	ret    

c0001bd4 <st_qword>:
c0001bd4:	89 10                	mov    DWORD PTR [eax],edx
c0001bd6:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001bd9:	c3                   	ret    

c0001bda <mem_cpy>:
c0001bda:	85 c9                	test   ecx,ecx
c0001bdc:	74 10                	je     c0001bee <mem_cpy+0x14>
c0001bde:	57                   	push   edi
c0001bdf:	01 c1                	add    ecx,eax
c0001be1:	56                   	push   esi
c0001be2:	89 c7                	mov    edi,eax
c0001be4:	89 d6                	mov    esi,edx
c0001be6:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001be7:	39 f9                	cmp    ecx,edi
c0001be9:	75 fb                	jne    c0001be6 <mem_cpy+0xc>
c0001beb:	5e                   	pop    esi
c0001bec:	5f                   	pop    edi
c0001bed:	c3                   	ret    
c0001bee:	c3                   	ret    

c0001bef <mem_set>:
c0001bef:	01 c1                	add    ecx,eax
c0001bf1:	40                   	inc    eax
c0001bf2:	88 50 ff             	mov    BYTE PTR [eax-0x1],dl
c0001bf5:	39 c8                	cmp    eax,ecx
c0001bf7:	75 f8                	jne    c0001bf1 <mem_set+0x2>
c0001bf9:	c3                   	ret    

c0001bfa <mem_cmp>:
c0001bfa:	57                   	push   edi
c0001bfb:	56                   	push   esi
c0001bfc:	89 c6                	mov    esi,eax
c0001bfe:	53                   	push   ebx
c0001bff:	46                   	inc    esi
c0001c00:	42                   	inc    edx
c0001c01:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001c05:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001c09:	29 fb                	sub    ebx,edi
c0001c0b:	89 cf                	mov    edi,ecx
c0001c0d:	29 f7                	sub    edi,esi
c0001c0f:	01 c7                	add    edi,eax
c0001c11:	74 04                	je     c0001c17 <mem_cmp+0x1d>
c0001c13:	85 db                	test   ebx,ebx
c0001c15:	74 e8                	je     c0001bff <mem_cmp+0x5>
c0001c17:	89 d8                	mov    eax,ebx
c0001c19:	5b                   	pop    ebx
c0001c1a:	5e                   	pop    esi
c0001c1b:	5f                   	pop    edi
c0001c1c:	c3                   	ret    

c0001c1d <chk_chr>:
c0001c1d:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0001c20:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001c23:	74 07                	je     c0001c2c <chk_chr+0xf>
c0001c25:	39 d1                	cmp    ecx,edx
c0001c27:	74 03                	je     c0001c2c <chk_chr+0xf>
c0001c29:	40                   	inc    eax
c0001c2a:	eb f1                	jmp    c0001c1d <chk_chr>
c0001c2c:	89 c8                	mov    eax,ecx
c0001c2e:	c3                   	ret    

c0001c2f <dbc_1st>:
c0001c2f:	31 c0                	xor    eax,eax
c0001c31:	c3                   	ret    

c0001c32 <dbc_2nd>:
c0001c32:	31 c0                	xor    eax,eax
c0001c34:	c3                   	ret    

c0001c35 <tchar2uni>:
c0001c35:	57                   	push   edi
c0001c36:	89 c7                	mov    edi,eax
c0001c38:	56                   	push   esi
c0001c39:	53                   	push   ebx
c0001c3a:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001c3c:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001c3e:	8d 73 01             	lea    esi,[ebx+0x1]
c0001c41:	84 c9                	test   cl,cl
c0001c43:	78 0a                	js     c0001c4f <tchar2uni+0x1a>
c0001c45:	0f b6 d1             	movzx  edx,cl
c0001c48:	89 f3                	mov    ebx,esi
c0001c4a:	e9 9f 00 00 00       	jmp    c0001cee <tchar2uni+0xb9>
c0001c4f:	88 ca                	mov    dl,cl
c0001c51:	83 e2 e0             	and    edx,0xffffffe0
c0001c54:	80 fa c0             	cmp    dl,0xc0
c0001c57:	75 0c                	jne    c0001c65 <tchar2uni+0x30>
c0001c59:	89 ca                	mov    edx,ecx
c0001c5b:	b9 01 00 00 00       	mov    ecx,0x1
c0001c60:	83 e2 1f             	and    edx,0x1f
c0001c63:	eb 2e                	jmp    c0001c93 <tchar2uni+0x5e>
c0001c65:	88 ca                	mov    dl,cl
c0001c67:	83 e2 f0             	and    edx,0xfffffff0
c0001c6a:	80 fa e0             	cmp    dl,0xe0
c0001c6d:	75 0c                	jne    c0001c7b <tchar2uni+0x46>
c0001c6f:	89 ca                	mov    edx,ecx
c0001c71:	b9 02 00 00 00       	mov    ecx,0x2
c0001c76:	83 e2 0f             	and    edx,0xf
c0001c79:	eb 18                	jmp    c0001c93 <tchar2uni+0x5e>
c0001c7b:	88 ca                	mov    dl,cl
c0001c7d:	83 e2 f8             	and    edx,0xfffffff8
c0001c80:	88 d0                	mov    al,dl
c0001c82:	83 ca ff             	or     edx,0xffffffff
c0001c85:	3c f0                	cmp    al,0xf0
c0001c87:	75 6c                	jne    c0001cf5 <tchar2uni+0xc0>
c0001c89:	89 ca                	mov    edx,ecx
c0001c8b:	b9 03 00 00 00       	mov    ecx,0x3
c0001c90:	83 e2 07             	and    edx,0x7
c0001c93:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0001c97:	46                   	inc    esi
c0001c98:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0001c9b:	88 c8                	mov    al,cl
c0001c9d:	83 e0 c0             	and    eax,0xffffffc0
c0001ca0:	3c 80                	cmp    al,0x80
c0001ca2:	75 4e                	jne    c0001cf2 <tchar2uni+0xbd>
c0001ca4:	c1 e2 06             	shl    edx,0x6
c0001ca7:	83 e1 3f             	and    ecx,0x3f
c0001caa:	09 ca                	or     edx,ecx
c0001cac:	39 de                	cmp    esi,ebx
c0001cae:	75 e7                	jne    c0001c97 <tchar2uni+0x62>
c0001cb0:	8d 4a 80             	lea    ecx,[edx-0x80]
c0001cb3:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0001cb9:	77 37                	ja     c0001cf2 <tchar2uni+0xbd>
c0001cbb:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0001cc1:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001cc7:	76 29                	jbe    c0001cf2 <tchar2uni+0xbd>
c0001cc9:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0001ccf:	76 1d                	jbe    c0001cee <tchar2uni+0xb9>
c0001cd1:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0001cd7:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0001cdd:	c1 e1 06             	shl    ecx,0x6
c0001ce0:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0001ce6:	09 ca                	or     edx,ecx
c0001ce8:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0001cee:	89 1f                	mov    DWORD PTR [edi],ebx
c0001cf0:	eb 03                	jmp    c0001cf5 <tchar2uni+0xc0>
c0001cf2:	83 ca ff             	or     edx,0xffffffff
c0001cf5:	5b                   	pop    ebx
c0001cf6:	89 d0                	mov    eax,edx
c0001cf8:	5e                   	pop    esi
c0001cf9:	5f                   	pop    edi
c0001cfa:	c3                   	ret    

c0001cfb <put_utf>:
c0001cfb:	53                   	push   ebx
c0001cfc:	83 f8 7f             	cmp    eax,0x7f
c0001cff:	89 c3                	mov    ebx,eax
c0001d01:	b0 00                	mov    al,0x0
c0001d03:	77 11                	ja     c0001d16 <put_utf+0x1b>
c0001d05:	85 c9                	test   ecx,ecx
c0001d07:	0f 84 e5 00 00 00    	je     c0001df2 <put_utf+0xf7>
c0001d0d:	88 1a                	mov    BYTE PTR [edx],bl
c0001d0f:	b0 01                	mov    al,0x1
c0001d11:	e9 dc 00 00 00       	jmp    c0001df2 <put_utf+0xf7>
c0001d16:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0001d1c:	77 23                	ja     c0001d41 <put_utf+0x46>
c0001d1e:	83 f9 01             	cmp    ecx,0x1
c0001d21:	0f 86 cb 00 00 00    	jbe    c0001df2 <put_utf+0xf7>
c0001d27:	89 d8                	mov    eax,ebx
c0001d29:	83 e3 3f             	and    ebx,0x3f
c0001d2c:	c1 e8 06             	shr    eax,0x6
c0001d2f:	83 cb 80             	or     ebx,0xffffff80
c0001d32:	83 c8 c0             	or     eax,0xffffffc0
c0001d35:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0001d38:	88 02                	mov    BYTE PTR [edx],al
c0001d3a:	b0 02                	mov    al,0x2
c0001d3c:	e9 b1 00 00 00       	jmp    c0001df2 <put_utf+0xf7>
c0001d41:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0001d47:	77 40                	ja     c0001d89 <put_utf+0x8e>
c0001d49:	83 f9 02             	cmp    ecx,0x2
c0001d4c:	0f 86 a0 00 00 00    	jbe    c0001df2 <put_utf+0xf7>
c0001d52:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0001d58:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001d5e:	0f 86 8e 00 00 00    	jbe    c0001df2 <put_utf+0xf7>
c0001d64:	89 d8                	mov    eax,ebx
c0001d66:	c1 e8 0c             	shr    eax,0xc
c0001d69:	83 c8 e0             	or     eax,0xffffffe0
c0001d6c:	88 02                	mov    BYTE PTR [edx],al
c0001d6e:	89 d8                	mov    eax,ebx
c0001d70:	83 e3 3f             	and    ebx,0x3f
c0001d73:	c1 e8 06             	shr    eax,0x6
c0001d76:	83 cb 80             	or     ebx,0xffffff80
c0001d79:	83 e0 3f             	and    eax,0x3f
c0001d7c:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0001d7f:	83 c8 80             	or     eax,0xffffff80
c0001d82:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001d85:	b0 03                	mov    al,0x3
c0001d87:	eb 69                	jmp    c0001df2 <put_utf+0xf7>
c0001d89:	83 f9 03             	cmp    ecx,0x3
c0001d8c:	76 64                	jbe    c0001df2 <put_utf+0xf7>
c0001d8e:	89 d9                	mov    ecx,ebx
c0001d90:	0f b7 c3             	movzx  eax,bx
c0001d93:	66 31 c9             	xor    cx,cx
c0001d96:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c0001d9c:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0001da2:	c1 e9 06             	shr    ecx,0x6
c0001da5:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0001dab:	77 43                	ja     c0001df0 <put_utf+0xf5>
c0001dad:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c0001db3:	77 3b                	ja     c0001df0 <put_utf+0xf5>
c0001db5:	09 cb                	or     ebx,ecx
c0001db7:	81 c3 00 00 01 00    	add    ebx,0x10000
c0001dbd:	89 d8                	mov    eax,ebx
c0001dbf:	c1 e8 12             	shr    eax,0x12
c0001dc2:	83 c8 f0             	or     eax,0xfffffff0
c0001dc5:	88 02                	mov    BYTE PTR [edx],al
c0001dc7:	89 d8                	mov    eax,ebx
c0001dc9:	c1 e8 0c             	shr    eax,0xc
c0001dcc:	83 e0 3f             	and    eax,0x3f
c0001dcf:	83 c8 80             	or     eax,0xffffff80
c0001dd2:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001dd5:	89 d8                	mov    eax,ebx
c0001dd7:	83 e3 3f             	and    ebx,0x3f
c0001dda:	c1 e8 06             	shr    eax,0x6
c0001ddd:	83 cb 80             	or     ebx,0xffffff80
c0001de0:	83 e0 3f             	and    eax,0x3f
c0001de3:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0001de6:	83 c8 80             	or     eax,0xffffff80
c0001de9:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c0001dec:	b0 04                	mov    al,0x4
c0001dee:	eb 02                	jmp    c0001df2 <put_utf+0xf7>
c0001df0:	31 c0                	xor    eax,eax
c0001df2:	5b                   	pop    ebx
c0001df3:	c3                   	ret    

c0001df4 <clst2sect>:
c0001df4:	89 c1                	mov    ecx,eax
c0001df6:	83 ea 02             	sub    edx,0x2
c0001df9:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0001dfc:	83 e8 02             	sub    eax,0x2
c0001dff:	39 d0                	cmp    eax,edx
c0001e01:	76 0d                	jbe    c0001e10 <clst2sect+0x1c>
c0001e03:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0001e07:	f7 e2                	mul    edx
c0001e09:	03 41 3c             	add    eax,DWORD PTR [ecx+0x3c]
c0001e0c:	13 51 40             	adc    edx,DWORD PTR [ecx+0x40]
c0001e0f:	c3                   	ret    
c0001e10:	31 c0                	xor    eax,eax
c0001e12:	31 d2                	xor    edx,edx
c0001e14:	c3                   	ret    

c0001e15 <clmt_clust>:
c0001e15:	57                   	push   edi
c0001e16:	89 cf                	mov    edi,ecx
c0001e18:	56                   	push   esi
c0001e19:	89 d6                	mov    esi,edx
c0001e1b:	53                   	push   ebx
c0001e1c:	0f ac fe 09          	shrd   esi,edi,0x9
c0001e20:	8b 48 4c             	mov    ecx,DWORD PTR [eax+0x4c]
c0001e23:	89 f2                	mov    edx,esi
c0001e25:	8b 00                	mov    eax,DWORD PTR [eax]
c0001e27:	c1 ef 09             	shr    edi,0x9
c0001e2a:	0f b7 70 0a          	movzx  esi,WORD PTR [eax+0xa]
c0001e2e:	8d 59 04             	lea    ebx,[ecx+0x4]
c0001e31:	89 f9                	mov    ecx,edi
c0001e33:	31 ff                	xor    edi,edi
c0001e35:	57                   	push   edi
c0001e36:	56                   	push   esi
c0001e37:	51                   	push   ecx
c0001e38:	52                   	push   edx
c0001e39:	e8 46 f1 01 00       	call   c0020f84 <__udivdi3>
c0001e3e:	83 c4 10             	add    esp,0x10
c0001e41:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001e43:	85 d2                	test   edx,edx
c0001e45:	74 10                	je     c0001e57 <clmt_clust+0x42>
c0001e47:	39 d0                	cmp    eax,edx
c0001e49:	72 07                	jb     c0001e52 <clmt_clust+0x3d>
c0001e4b:	29 d0                	sub    eax,edx
c0001e4d:	83 c3 08             	add    ebx,0x8
c0001e50:	eb ef                	jmp    c0001e41 <clmt_clust+0x2c>
c0001e52:	03 43 04             	add    eax,DWORD PTR [ebx+0x4]
c0001e55:	89 c2                	mov    edx,eax
c0001e57:	5b                   	pop    ebx
c0001e58:	89 d0                	mov    eax,edx
c0001e5a:	5e                   	pop    esi
c0001e5b:	5f                   	pop    edi
c0001e5c:	c3                   	ret    

c0001e5d <pick_lfn>:
c0001e5d:	55                   	push   ebp
c0001e5e:	57                   	push   edi
c0001e5f:	56                   	push   esi
c0001e60:	89 d6                	mov    esi,edx
c0001e62:	53                   	push   ebx
c0001e63:	89 c3                	mov    ebx,eax
c0001e65:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001e68:	e8 ee fc ff ff       	call   c0001b5b <ld_word>
c0001e6d:	66 85 c0             	test   ax,ax
c0001e70:	74 04                	je     c0001e76 <pick_lfn+0x19>
c0001e72:	31 c0                	xor    eax,eax
c0001e74:	eb 5c                	jmp    c0001ed2 <pick_lfn+0x75>
c0001e76:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0001e79:	bd 01 00 00 00       	mov    ebp,0x1
c0001e7e:	83 e1 bf             	and    ecx,0xffffffbf
c0001e81:	31 ff                	xor    edi,edi
c0001e83:	49                   	dec    ecx
c0001e84:	6b c9 0d             	imul   ecx,ecx,0xd
c0001e87:	0f b6 87 60 20 02 c0 	movzx  eax,BYTE PTR [edi-0x3ffddfa0]
c0001e8e:	01 f0                	add    eax,esi
c0001e90:	e8 c6 fc ff ff       	call   c0001b5b <ld_word>
c0001e95:	66 85 ed             	test   bp,bp
c0001e98:	74 11                	je     c0001eab <pick_lfn+0x4e>
c0001e9a:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001ea0:	77 d0                	ja     c0001e72 <pick_lfn+0x15>
c0001ea2:	66 89 04 4b          	mov    WORD PTR [ebx+ecx*2],ax
c0001ea6:	89 c5                	mov    ebp,eax
c0001ea8:	41                   	inc    ecx
c0001ea9:	eb 04                	jmp    c0001eaf <pick_lfn+0x52>
c0001eab:	66 40                	inc    ax
c0001ead:	75 c3                	jne    c0001e72 <pick_lfn+0x15>
c0001eaf:	47                   	inc    edi
c0001eb0:	83 ff 0d             	cmp    edi,0xd
c0001eb3:	75 d2                	jne    c0001e87 <pick_lfn+0x2a>
c0001eb5:	f6 06 40             	test   BYTE PTR [esi],0x40
c0001eb8:	74 13                	je     c0001ecd <pick_lfn+0x70>
c0001eba:	66 85 ed             	test   bp,bp
c0001ebd:	74 0e                	je     c0001ecd <pick_lfn+0x70>
c0001ebf:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001ec5:	77 ab                	ja     c0001e72 <pick_lfn+0x15>
c0001ec7:	66 c7 04 4b 00 00    	mov    WORD PTR [ebx+ecx*2],0x0
c0001ecd:	b8 01 00 00 00       	mov    eax,0x1
c0001ed2:	5b                   	pop    ebx
c0001ed3:	5e                   	pop    esi
c0001ed4:	5f                   	pop    edi
c0001ed5:	5d                   	pop    ebp
c0001ed6:	c3                   	ret    

c0001ed7 <put_lfn>:
c0001ed7:	55                   	push   ebp
c0001ed8:	31 ed                	xor    ebp,ebp
c0001eda:	57                   	push   edi
c0001edb:	89 d7                	mov    edi,edx
c0001edd:	56                   	push   esi
c0001ede:	31 f6                	xor    esi,esi
c0001ee0:	53                   	push   ebx
c0001ee1:	83 ec 08             	sub    esp,0x8
c0001ee4:	89 04 24             	mov    DWORD PTR [esp],eax
c0001ee7:	88 4c 24 07          	mov    BYTE PTR [esp+0x7],cl
c0001eeb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0001eef:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c0001ef5:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c0001ef8:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001efb:	31 d2                	xor    edx,edx
c0001efd:	e8 cb fc ff ff       	call   c0001bcd <st_word>
c0001f02:	0f b6 d9             	movzx  ebx,cl
c0001f05:	4b                   	dec    ebx
c0001f06:	6b db 0d             	imul   ebx,ebx,0xd
c0001f09:	66 83 fe ff          	cmp    si,0xffff
c0001f0d:	74 08                	je     c0001f17 <put_lfn+0x40>
c0001f0f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0001f12:	66 8b 34 58          	mov    si,WORD PTR [eax+ebx*2]
c0001f16:	43                   	inc    ebx
c0001f17:	0f b6 85 60 20 02 c0 	movzx  eax,BYTE PTR [ebp-0x3ffddfa0]
c0001f1e:	0f b7 d6             	movzx  edx,si
c0001f21:	01 f8                	add    eax,edi
c0001f23:	e8 a5 fc ff ff       	call   c0001bcd <st_word>
c0001f28:	66 85 f6             	test   si,si
c0001f2b:	75 03                	jne    c0001f30 <put_lfn+0x59>
c0001f2d:	83 ce ff             	or     esi,0xffffffff
c0001f30:	45                   	inc    ebp
c0001f31:	83 fd 0d             	cmp    ebp,0xd
c0001f34:	75 d3                	jne    c0001f09 <put_lfn+0x32>
c0001f36:	66 46                	inc    si
c0001f38:	74 0a                	je     c0001f44 <put_lfn+0x6d>
c0001f3a:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0001f3d:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0001f42:	75 09                	jne    c0001f4d <put_lfn+0x76>
c0001f44:	88 c8                	mov    al,cl
c0001f46:	83 c8 40             	or     eax,0x40
c0001f49:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0001f4d:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0001f51:	88 07                	mov    BYTE PTR [edi],al
c0001f53:	83 c4 08             	add    esp,0x8
c0001f56:	5b                   	pop    ebx
c0001f57:	5e                   	pop    esi
c0001f58:	5f                   	pop    edi
c0001f59:	5d                   	pop    ebp
c0001f5a:	c3                   	ret    

c0001f5b <gen_numname>:
c0001f5b:	57                   	push   edi
c0001f5c:	89 cf                	mov    edi,ecx
c0001f5e:	56                   	push   esi
c0001f5f:	b9 0b 00 00 00       	mov    ecx,0xb
c0001f64:	53                   	push   ebx
c0001f65:	89 c6                	mov    esi,eax
c0001f67:	83 ec 10             	sub    esp,0x10
c0001f6a:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0001f6e:	e8 67 fc ff ff       	call   c0001bda <mem_cpy>
c0001f73:	83 fb 05             	cmp    ebx,0x5
c0001f76:	76 2d                	jbe    c0001fa5 <gen_numname+0x4a>
c0001f78:	66 8b 07             	mov    ax,WORD PTR [edi]
c0001f7b:	66 85 c0             	test   ax,ax
c0001f7e:	74 25                	je     c0001fa5 <gen_numname+0x4a>
c0001f80:	83 c7 02             	add    edi,0x2
c0001f83:	ba 10 00 00 00       	mov    edx,0x10
c0001f88:	01 db                	add    ebx,ebx
c0001f8a:	89 c1                	mov    ecx,eax
c0001f8c:	66 d1 e8             	shr    ax,1
c0001f8f:	83 e1 01             	and    ecx,0x1
c0001f92:	01 cb                	add    ebx,ecx
c0001f94:	0f ba e3 10          	bt     ebx,0x10
c0001f98:	73 06                	jae    c0001fa0 <gen_numname+0x45>
c0001f9a:	81 f3 21 10 01 00    	xor    ebx,0x11021
c0001fa0:	4a                   	dec    edx
c0001fa1:	75 e5                	jne    c0001f88 <gen_numname+0x2d>
c0001fa3:	eb d3                	jmp    c0001f78 <gen_numname+0x1d>
c0001fa5:	b8 07 00 00 00       	mov    eax,0x7
c0001faa:	88 d9                	mov    cl,bl
c0001fac:	83 e1 0f             	and    ecx,0xf
c0001faf:	8d 51 30             	lea    edx,[ecx+0x30]
c0001fb2:	80 fa 39             	cmp    dl,0x39
c0001fb5:	76 03                	jbe    c0001fba <gen_numname+0x5f>
c0001fb7:	8d 51 37             	lea    edx,[ecx+0x37]
c0001fba:	8d 48 ff             	lea    ecx,[eax-0x1]
c0001fbd:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c0001fc1:	89 da                	mov    edx,ebx
c0001fc3:	c1 ea 04             	shr    edx,0x4
c0001fc6:	83 fb 0f             	cmp    ebx,0xf
c0001fc9:	76 06                	jbe    c0001fd1 <gen_numname+0x76>
c0001fcb:	89 c8                	mov    eax,ecx
c0001fcd:	89 d3                	mov    ebx,edx
c0001fcf:	eb d9                	jmp    c0001faa <gen_numname+0x4f>
c0001fd1:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c0001fd6:	31 d2                	xor    edx,edx
c0001fd8:	8d 58 fe             	lea    ebx,[eax-0x2]
c0001fdb:	8d 04 16             	lea    eax,[esi+edx*1]
c0001fde:	39 ca                	cmp    edx,ecx
c0001fe0:	73 18                	jae    c0001ffa <gen_numname+0x9f>
c0001fe2:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001fe5:	3c 20                	cmp    al,0x20
c0001fe7:	74 11                	je     c0001ffa <gen_numname+0x9f>
c0001fe9:	e8 41 fc ff ff       	call   c0001c2f <dbc_1st>
c0001fee:	85 c0                	test   eax,eax
c0001ff0:	74 05                	je     c0001ff7 <gen_numname+0x9c>
c0001ff2:	39 d3                	cmp    ebx,edx
c0001ff4:	74 04                	je     c0001ffa <gen_numname+0x9f>
c0001ff6:	42                   	inc    edx
c0001ff7:	42                   	inc    edx
c0001ff8:	eb e1                	jmp    c0001fdb <gen_numname+0x80>
c0001ffa:	b0 20                	mov    al,0x20
c0001ffc:	83 f9 07             	cmp    ecx,0x7
c0001fff:	77 05                	ja     c0002006 <gen_numname+0xab>
c0002001:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c0002005:	41                   	inc    ecx
c0002006:	42                   	inc    edx
c0002007:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c000200b:	83 fa 07             	cmp    edx,0x7
c000200e:	76 ea                	jbe    c0001ffa <gen_numname+0x9f>
c0002010:	83 c4 10             	add    esp,0x10
c0002013:	5b                   	pop    ebx
c0002014:	5e                   	pop    esi
c0002015:	5f                   	pop    edi
c0002016:	c3                   	ret    

c0002017 <sum_sfn>:
c0002017:	31 c9                	xor    ecx,ecx
c0002019:	31 d2                	xor    edx,edx
c000201b:	d0 ca                	ror    dl,1
c000201d:	02 14 08             	add    dl,BYTE PTR [eax+ecx*1]
c0002020:	41                   	inc    ecx
c0002021:	83 f9 0b             	cmp    ecx,0xb
c0002024:	75 f5                	jne    c000201b <sum_sfn+0x4>
c0002026:	88 d0                	mov    al,dl
c0002028:	c3                   	ret    

c0002029 <xdir_sum>:
c0002029:	56                   	push   esi
c000202a:	31 c9                	xor    ecx,ecx
c000202c:	53                   	push   ebx
c000202d:	31 d2                	xor    edx,edx
c000202f:	0f b6 58 01          	movzx  ebx,BYTE PTR [eax+0x1]
c0002033:	43                   	inc    ebx
c0002034:	c1 e3 05             	shl    ebx,0x5
c0002037:	83 fa 02             	cmp    edx,0x2
c000203a:	74 0b                	je     c0002047 <xdir_sum+0x1e>
c000203c:	0f b6 34 10          	movzx  esi,BYTE PTR [eax+edx*1]
c0002040:	66 d1 c9             	ror    cx,1
c0002043:	01 f1                	add    ecx,esi
c0002045:	eb 05                	jmp    c000204c <xdir_sum+0x23>
c0002047:	ba 03 00 00 00       	mov    edx,0x3
c000204c:	42                   	inc    edx
c000204d:	39 d3                	cmp    ebx,edx
c000204f:	77 e6                	ja     c0002037 <xdir_sum+0xe>
c0002051:	89 c8                	mov    eax,ecx
c0002053:	5b                   	pop    ebx
c0002054:	5e                   	pop    esi
c0002055:	c3                   	ret    

c0002056 <xsum32>:
c0002056:	d1 ca                	ror    edx,1
c0002058:	0f b6 c0             	movzx  eax,al
c000205b:	01 d0                	add    eax,edx
c000205d:	c3                   	ret    

c000205e <get_xfileinfo>:
c000205e:	55                   	push   ebp
c000205f:	31 c9                	xor    ecx,ecx
c0002061:	57                   	push   edi
c0002062:	bd 40 00 00 00       	mov    ebp,0x40
c0002067:	56                   	push   esi
c0002068:	31 ff                	xor    edi,edi
c000206a:	53                   	push   ebx
c000206b:	89 c6                	mov    esi,eax
c000206d:	83 ec 0c             	sub    esp,0xc
c0002070:	89 d3                	mov    ebx,edx
c0002072:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0002079:	0f b6 46 23          	movzx  eax,BYTE PTR [esi+0x23]
c000207d:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0002080:	76 6d                	jbe    c00020ef <get_xfileinfo+0x91>
c0002082:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c0002088:	76 0b                	jbe    c0002095 <get_xfileinfo+0x37>
c000208a:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c000208e:	bf 01 00 00 00       	mov    edi,0x1
c0002093:	eb 63                	jmp    c00020f8 <get_xfileinfo+0x9a>
c0002095:	f7 c5 1f 00 00 00    	test   ebp,0x1f
c000209b:	75 03                	jne    c00020a0 <get_xfileinfo+0x42>
c000209d:	83 c5 02             	add    ebp,0x2
c00020a0:	8d 04 2e             	lea    eax,[esi+ebp*1]
c00020a3:	83 c5 02             	add    ebp,0x2
c00020a6:	e8 b0 fa ff ff       	call   c0001b5b <ld_word>
c00020ab:	ff 04 24             	inc    DWORD PTR [esp]
c00020ae:	66 85 c9             	test   cx,cx
c00020b1:	75 0d                	jne    c00020c0 <get_xfileinfo+0x62>
c00020b3:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c00020b9:	66 81 fa ff 07       	cmp    dx,0x7ff
c00020be:	76 2b                	jbe    c00020eb <get_xfileinfo+0x8d>
c00020c0:	c1 e1 10             	shl    ecx,0x10
c00020c3:	ba ff 00 00 00       	mov    edx,0xff
c00020c8:	0f b7 c0             	movzx  eax,ax
c00020cb:	29 fa                	sub    edx,edi
c00020cd:	09 c8                	or     eax,ecx
c00020cf:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00020d3:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c00020d7:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00020db:	e8 1b fc ff ff       	call   c0001cfb <put_utf>
c00020e0:	84 c0                	test   al,al
c00020e2:	74 a6                	je     c000208a <get_xfileinfo+0x2c>
c00020e4:	0f b6 c0             	movzx  eax,al
c00020e7:	01 c7                	add    edi,eax
c00020e9:	31 c0                	xor    eax,eax
c00020eb:	89 c1                	mov    ecx,eax
c00020ed:	eb 8a                	jmp    c0002079 <get_xfileinfo+0x1b>
c00020ef:	85 ff                	test   edi,edi
c00020f1:	74 97                	je     c000208a <get_xfileinfo+0x2c>
c00020f3:	66 85 c9             	test   cx,cx
c00020f6:	75 92                	jne    c000208a <get_xfileinfo+0x2c>
c00020f8:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c00020fd:	31 c0                	xor    eax,eax
c00020ff:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0002103:	31 d2                	xor    edx,edx
c0002105:	8a 4e 04             	mov    cl,BYTE PTR [esi+0x4]
c0002108:	88 4b 0c             	mov    BYTE PTR [ebx+0xc],cl
c000210b:	80 e1 10             	and    cl,0x10
c000210e:	75 08                	jne    c0002118 <get_xfileinfo+0xba>
c0002110:	8d 46 38             	lea    eax,[esi+0x38]
c0002113:	e8 68 fa ff ff       	call   c0001b80 <ld_qword>
c0002118:	89 03                	mov    DWORD PTR [ebx],eax
c000211a:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c000211d:	8d 46 0c             	lea    eax,[esi+0xc]
c0002120:	e8 36 fa ff ff       	call   c0001b5b <ld_word>
c0002125:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c0002129:	8d 46 0e             	lea    eax,[esi+0xe]
c000212c:	e8 2a fa ff ff       	call   c0001b5b <ld_word>
c0002131:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0002135:	83 c4 0c             	add    esp,0xc
c0002138:	5b                   	pop    ebx
c0002139:	5e                   	pop    esi
c000213a:	5f                   	pop    edi
c000213b:	5d                   	pop    ebp
c000213c:	c3                   	ret    

c000213d <get_ldnumber>:
c000213d:	8b 10                	mov    edx,DWORD PTR [eax]
c000213f:	85 d2                	test   edx,edx
c0002141:	74 14                	je     c0002157 <get_ldnumber+0x1a>
c0002143:	56                   	push   esi
c0002144:	53                   	push   ebx
c0002145:	89 d3                	mov    ebx,edx
c0002147:	43                   	inc    ebx
c0002148:	8a 4b ff             	mov    cl,BYTE PTR [ebx-0x1]
c000214b:	80 f9 1f             	cmp    cl,0x1f
c000214e:	76 0d                	jbe    c000215d <get_ldnumber+0x20>
c0002150:	80 f9 3a             	cmp    cl,0x3a
c0002153:	75 f2                	jne    c0002147 <get_ldnumber+0xa>
c0002155:	eb 0a                	jmp    c0002161 <get_ldnumber+0x24>
c0002157:	83 c9 ff             	or     ecx,0xffffffff
c000215a:	89 c8                	mov    eax,ecx
c000215c:	c3                   	ret    
c000215d:	31 c9                	xor    ecx,ecx
c000215f:	eb 24                	jmp    c0002185 <get_ldnumber+0x48>
c0002161:	0f b6 32             	movzx  esi,BYTE PTR [edx]
c0002164:	8d 4e d0             	lea    ecx,[esi-0x30]
c0002167:	80 f9 09             	cmp    cl,0x9
c000216a:	77 16                	ja     c0002182 <get_ldnumber+0x45>
c000216c:	83 c2 02             	add    edx,0x2
c000216f:	83 c9 ff             	or     ecx,0xffffffff
c0002172:	39 d3                	cmp    ebx,edx
c0002174:	75 0f                	jne    c0002185 <get_ldnumber+0x48>
c0002176:	89 f2                	mov    edx,esi
c0002178:	89 18                	mov    DWORD PTR [eax],ebx
c000217a:	0f be ca             	movsx  ecx,dl
c000217d:	83 e9 30             	sub    ecx,0x30
c0002180:	eb 03                	jmp    c0002185 <get_ldnumber+0x48>
c0002182:	83 c9 ff             	or     ecx,0xffffffff
c0002185:	89 c8                	mov    eax,ecx
c0002187:	5b                   	pop    ebx
c0002188:	5e                   	pop    esi
c0002189:	c3                   	ret    

c000218a <crc32>:
c000218a:	56                   	push   esi
c000218b:	89 d6                	mov    esi,edx
c000218d:	53                   	push   ebx
c000218e:	b2 01                	mov    dl,0x1
c0002190:	bb 08 00 00 00       	mov    ebx,0x8
c0002195:	89 f1                	mov    ecx,esi
c0002197:	84 d1                	test   cl,dl
c0002199:	0f 95 c1             	setne  cl
c000219c:	0f b6 c9             	movzx  ecx,cl
c000219f:	31 c1                	xor    ecx,eax
c00021a1:	89 c8                	mov    eax,ecx
c00021a3:	d1 e8                	shr    eax,1
c00021a5:	80 e1 01             	and    cl,0x1
c00021a8:	74 05                	je     c00021af <crc32+0x25>
c00021aa:	35 20 83 b8 ed       	xor    eax,0xedb88320
c00021af:	d1 e2                	shl    edx,1
c00021b1:	4b                   	dec    ebx
c00021b2:	75 e1                	jne    c0002195 <crc32+0xb>
c00021b4:	5b                   	pop    ebx
c00021b5:	5e                   	pop    esi
c00021b6:	c3                   	ret    

c00021b7 <test_gpt_header>:
c00021b7:	55                   	push   ebp
c00021b8:	b9 10 00 00 00       	mov    ecx,0x10
c00021bd:	57                   	push   edi
c00021be:	ba 60 1f 02 c0       	mov    edx,0xc0021f60
c00021c3:	56                   	push   esi
c00021c4:	31 ff                	xor    edi,edi
c00021c6:	53                   	push   ebx
c00021c7:	89 c3                	mov    ebx,eax
c00021c9:	e8 2c fa ff ff       	call   c0001bfa <mem_cmp>
c00021ce:	85 c0                	test   eax,eax
c00021d0:	75 55                	jne    c0002227 <test_gpt_header+0x70>
c00021d2:	89 c7                	mov    edi,eax
c00021d4:	bd f0 ff ff ff       	mov    ebp,0xfffffff0
c00021d9:	83 ce ff             	or     esi,0xffffffff
c00021dc:	31 d2                	xor    edx,edx
c00021de:	83 fd 03             	cmp    ebp,0x3
c00021e1:	76 05                	jbe    c00021e8 <test_gpt_header+0x31>
c00021e3:	0f b6 54 2b 10       	movzx  edx,BYTE PTR [ebx+ebp*1+0x10]
c00021e8:	89 f0                	mov    eax,esi
c00021ea:	45                   	inc    ebp
c00021eb:	e8 9a ff ff ff       	call   c000218a <crc32>
c00021f0:	83 fd 4c             	cmp    ebp,0x4c
c00021f3:	89 c6                	mov    esi,eax
c00021f5:	75 e5                	jne    c00021dc <test_gpt_header+0x25>
c00021f7:	8d 43 10             	lea    eax,[ebx+0x10]
c00021fa:	f7 d6                	not    esi
c00021fc:	e8 67 f9 ff ff       	call   c0001b68 <ld_dword>
c0002201:	39 c6                	cmp    esi,eax
c0002203:	75 22                	jne    c0002227 <test_gpt_header+0x70>
c0002205:	8d 43 54             	lea    eax,[ebx+0x54]
c0002208:	e8 5b f9 ff ff       	call   c0001b68 <ld_dword>
c000220d:	83 c0 80             	add    eax,0xffffff80
c0002210:	75 15                	jne    c0002227 <test_gpt_header+0x70>
c0002212:	8d 43 50             	lea    eax,[ebx+0x50]
c0002215:	e8 4e f9 ff ff       	call   c0001b68 <ld_dword>
c000221a:	3d 80 00 00 00       	cmp    eax,0x80
c000221f:	0f 96 c0             	setbe  al
c0002222:	0f b6 c0             	movzx  eax,al
c0002225:	89 c7                	mov    edi,eax
c0002227:	5b                   	pop    ebx
c0002228:	89 f8                	mov    eax,edi
c000222a:	5e                   	pop    esi
c000222b:	5f                   	pop    edi
c000222c:	5d                   	pop    ebp
c000222d:	c3                   	ret    

c000222e <make_rand>:
c000222e:	56                   	push   esi
c000222f:	85 c0                	test   eax,eax
c0002231:	53                   	push   ebx
c0002232:	75 05                	jne    c0002239 <make_rand+0xb>
c0002234:	b8 01 00 00 00       	mov    eax,0x1
c0002239:	01 d1                	add    ecx,edx
c000223b:	bb 08 00 00 00       	mov    ebx,0x8
c0002240:	89 c6                	mov    esi,eax
c0002242:	d1 e8                	shr    eax,1
c0002244:	83 e6 01             	and    esi,0x1
c0002247:	85 f6                	test   esi,esi
c0002249:	74 05                	je     c0002250 <make_rand+0x22>
c000224b:	35 00 00 00 a3       	xor    eax,0xa3000000
c0002250:	4b                   	dec    ebx
c0002251:	75 ed                	jne    c0002240 <make_rand+0x12>
c0002253:	42                   	inc    edx
c0002254:	88 42 ff             	mov    BYTE PTR [edx-0x1],al
c0002257:	39 ca                	cmp    edx,ecx
c0002259:	75 e0                	jne    c000223b <make_rand+0xd>
c000225b:	5b                   	pop    ebx
c000225c:	5e                   	pop    esi
c000225d:	c3                   	ret    

c000225e <validate>:
c000225e:	56                   	push   esi
c000225f:	53                   	push   ebx
c0002260:	89 d6                	mov    esi,edx
c0002262:	51                   	push   ecx
c0002263:	85 c0                	test   eax,eax
c0002265:	75 09                	jne    c0002270 <validate+0x12>
c0002267:	b8 09 00 00 00       	mov    eax,0x9
c000226c:	31 c9                	xor    ecx,ecx
c000226e:	eb 2f                	jmp    c000229f <validate+0x41>
c0002270:	89 c3                	mov    ebx,eax
c0002272:	8b 00                	mov    eax,DWORD PTR [eax]
c0002274:	85 c0                	test   eax,eax
c0002276:	74 ef                	je     c0002267 <validate+0x9>
c0002278:	80 38 00             	cmp    BYTE PTR [eax],0x0
c000227b:	74 ea                	je     c0002267 <validate+0x9>
c000227d:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c0002281:	66 39 53 04          	cmp    WORD PTR [ebx+0x4],dx
c0002285:	75 e0                	jne    c0002267 <validate+0x9>
c0002287:	83 ec 0c             	sub    esp,0xc
c000228a:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000228e:	50                   	push   eax
c000228f:	e8 76 f8 ff ff       	call   c0001b0a <disk_status>
c0002294:	83 c4 10             	add    esp,0x10
c0002297:	a8 01                	test   al,0x1
c0002299:	75 cc                	jne    c0002267 <validate+0x9>
c000229b:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c000229d:	31 c0                	xor    eax,eax
c000229f:	89 0e                	mov    DWORD PTR [esi],ecx
c00022a1:	5a                   	pop    edx
c00022a2:	5b                   	pop    ebx
c00022a3:	5e                   	pop    esi
c00022a4:	c3                   	ret    

c00022a5 <sync_window>:
c00022a5:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c00022a9:	0f 84 85 00 00 00    	je     c0002334 <sync_window+0x8f>
c00022af:	55                   	push   ebp
c00022b0:	8d 68 54             	lea    ebp,[eax+0x54]
c00022b3:	57                   	push   edi
c00022b4:	56                   	push   esi
c00022b5:	53                   	push   ebx
c00022b6:	89 c3                	mov    ebx,eax
c00022b8:	83 ec 28             	sub    esp,0x28
c00022bb:	6a 01                	push   0x1
c00022bd:	ff 70 50             	push   DWORD PTR [eax+0x50]
c00022c0:	ff 70 4c             	push   DWORD PTR [eax+0x4c]
c00022c3:	55                   	push   ebp
c00022c4:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00022c8:	50                   	push   eax
c00022c9:	e8 58 f8 ff ff       	call   c0001b26 <disk_write>
c00022ce:	83 c4 20             	add    esp,0x20
c00022d1:	ba 01 00 00 00       	mov    edx,0x1
c00022d6:	85 c0                	test   eax,eax
c00022d8:	75 50                	jne    c000232a <sync_window+0x85>
c00022da:	31 ff                	xor    edi,edi
c00022dc:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c00022df:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00022e3:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c00022e7:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c00022ea:	8b 53 50             	mov    edx,DWORD PTR [ebx+0x50]
c00022ed:	89 c6                	mov    esi,eax
c00022ef:	89 d7                	mov    edi,edx
c00022f1:	2b 73 2c             	sub    esi,DWORD PTR [ebx+0x2c]
c00022f4:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c00022f8:	1b 7b 30             	sbb    edi,DWORD PTR [ebx+0x30]
c00022fb:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c00022ff:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c0002303:	73 23                	jae    c0002328 <sync_window+0x83>
c0002305:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c0002309:	75 1d                	jne    c0002328 <sync_window+0x83>
c000230b:	83 ec 0c             	sub    esp,0xc
c000230e:	6a 01                	push   0x1
c0002310:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0002314:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c0002318:	52                   	push   edx
c0002319:	50                   	push   eax
c000231a:	55                   	push   ebp
c000231b:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000231f:	50                   	push   eax
c0002320:	e8 01 f8 ff ff       	call   c0001b26 <disk_write>
c0002325:	83 c4 20             	add    esp,0x20
c0002328:	31 d2                	xor    edx,edx
c000232a:	83 c4 1c             	add    esp,0x1c
c000232d:	89 d0                	mov    eax,edx
c000232f:	5b                   	pop    ebx
c0002330:	5e                   	pop    esi
c0002331:	5f                   	pop    edi
c0002332:	5d                   	pop    ebp
c0002333:	c3                   	ret    
c0002334:	31 d2                	xor    edx,edx
c0002336:	89 d0                	mov    eax,edx
c0002338:	c3                   	ret    

c0002339 <move_window>:
c0002339:	56                   	push   esi
c000233a:	53                   	push   ebx
c000233b:	89 c3                	mov    ebx,eax
c000233d:	83 ec 14             	sub    esp,0x14
c0002340:	39 48 50             	cmp    DWORD PTR [eax+0x50],ecx
c0002343:	75 07                	jne    c000234c <move_window+0x13>
c0002345:	31 f6                	xor    esi,esi
c0002347:	39 50 4c             	cmp    DWORD PTR [eax+0x4c],edx
c000234a:	74 59                	je     c00023a5 <move_window+0x6c>
c000234c:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0002350:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002354:	89 d8                	mov    eax,ebx
c0002356:	e8 4a ff ff ff       	call   c00022a5 <sync_window>
c000235b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000235f:	89 c6                	mov    esi,eax
c0002361:	85 c0                	test   eax,eax
c0002363:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002367:	75 3c                	jne    c00023a5 <move_window+0x6c>
c0002369:	83 ec 0c             	sub    esp,0xc
c000236c:	8d 43 54             	lea    eax,[ebx+0x54]
c000236f:	6a 01                	push   0x1
c0002371:	51                   	push   ecx
c0002372:	52                   	push   edx
c0002373:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0002377:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000237b:	50                   	push   eax
c000237c:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002380:	50                   	push   eax
c0002381:	e8 8a f7 ff ff       	call   c0001b10 <disk_read>
c0002386:	83 c4 20             	add    esp,0x20
c0002389:	85 c0                	test   eax,eax
c000238b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000238f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002393:	74 0a                	je     c000239f <move_window+0x66>
c0002395:	83 ca ff             	or     edx,0xffffffff
c0002398:	be 01 00 00 00       	mov    esi,0x1
c000239d:	89 d1                	mov    ecx,edx
c000239f:	89 53 4c             	mov    DWORD PTR [ebx+0x4c],edx
c00023a2:	89 4b 50             	mov    DWORD PTR [ebx+0x50],ecx
c00023a5:	89 f0                	mov    eax,esi
c00023a7:	83 c4 14             	add    esp,0x14
c00023aa:	5b                   	pop    ebx
c00023ab:	5e                   	pop    esi
c00023ac:	c3                   	ret    

c00023ad <check_fs>:
c00023ad:	53                   	push   ebx
c00023ae:	89 c3                	mov    ebx,eax
c00023b0:	83 ec 08             	sub    esp,0x8
c00023b3:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c00023b7:	c7 40 4c ff ff ff ff 	mov    DWORD PTR [eax+0x4c],0xffffffff
c00023be:	c7 40 50 ff ff ff ff 	mov    DWORD PTR [eax+0x50],0xffffffff
c00023c5:	e8 6f ff ff ff       	call   c0002339 <move_window>
c00023ca:	ba 04 00 00 00       	mov    edx,0x4
c00023cf:	85 c0                	test   eax,eax
c00023d1:	0f 85 89 00 00 00    	jne    c0002460 <check_fs+0xb3>
c00023d7:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c00023dd:	e8 79 f7 ff ff       	call   c0001b5b <ld_word>
c00023e2:	ba 03 00 00 00       	mov    edx,0x3
c00023e7:	66 3d 55 aa          	cmp    ax,0xaa55
c00023eb:	75 73                	jne    c0002460 <check_fs+0xb3>
c00023ed:	ba 80 20 02 c0       	mov    edx,0xc0022080
c00023f2:	8d 43 54             	lea    eax,[ebx+0x54]
c00023f5:	b9 0b 00 00 00       	mov    ecx,0xb
c00023fa:	e8 fb f7 ff ff       	call   c0001bfa <mem_cmp>
c00023ff:	ba 01 00 00 00       	mov    edx,0x1
c0002404:	85 c0                	test   eax,eax
c0002406:	74 58                	je     c0002460 <check_fs+0xb3>
c0002408:	8a 43 54             	mov    al,BYTE PTR [ebx+0x54]
c000240b:	8d 50 18             	lea    edx,[eax+0x18]
c000240e:	80 fa 01             	cmp    dl,0x1
c0002411:	76 09                	jbe    c000241c <check_fs+0x6f>
c0002413:	ba 02 00 00 00       	mov    edx,0x2
c0002418:	3c eb                	cmp    al,0xeb
c000241a:	75 44                	jne    c0002460 <check_fs+0xb3>
c000241c:	ba 84 4b 02 c0       	mov    edx,0xc0024b84
c0002421:	8d 83 8a 00 00 00    	lea    eax,[ebx+0x8a]
c0002427:	b9 03 00 00 00       	mov    ecx,0x3
c000242c:	e8 c9 f7 ff ff       	call   c0001bfa <mem_cmp>
c0002431:	31 d2                	xor    edx,edx
c0002433:	85 c0                	test   eax,eax
c0002435:	74 29                	je     c0002460 <check_fs+0xb3>
c0002437:	ba 8c 20 02 c0       	mov    edx,0xc002208c
c000243c:	8d 83 a6 00 00 00    	lea    eax,[ebx+0xa6]
c0002442:	b9 05 00 00 00       	mov    ecx,0x5
c0002447:	e8 ae f7 ff ff       	call   c0001bfa <mem_cmp>
c000244c:	31 d2                	xor    edx,edx
c000244e:	85 c0                	test   eax,eax
c0002450:	74 0e                	je     c0002460 <check_fs+0xb3>
c0002452:	31 d2                	xor    edx,edx
c0002454:	80 bb 96 00 00 00 28 	cmp    BYTE PTR [ebx+0x96],0x28
c000245b:	0f 95 c2             	setne  dl
c000245e:	01 d2                	add    edx,edx
c0002460:	89 d0                	mov    eax,edx
c0002462:	83 c4 08             	add    esp,0x8
c0002465:	5b                   	pop    ebx
c0002466:	c3                   	ret    

c0002467 <find_volume>:
c0002467:	55                   	push   ebp
c0002468:	31 c9                	xor    ecx,ecx
c000246a:	57                   	push   edi
c000246b:	56                   	push   esi
c000246c:	89 d6                	mov    esi,edx
c000246e:	53                   	push   ebx
c000246f:	31 d2                	xor    edx,edx
c0002471:	83 ec 3c             	sub    esp,0x3c
c0002474:	89 c3                	mov    ebx,eax
c0002476:	e8 32 ff ff ff       	call   c00023ad <check_fs>
c000247b:	83 f8 02             	cmp    eax,0x2
c000247e:	74 0e                	je     c000248e <find_volume+0x27>
c0002480:	0f 87 5d 01 00 00    	ja     c00025e3 <find_volume+0x17c>
c0002486:	85 f6                	test   esi,esi
c0002488:	0f 84 55 01 00 00    	je     c00025e3 <find_volume+0x17c>
c000248e:	80 bb 16 02 00 00 ee 	cmp    BYTE PTR [ebx+0x216],0xee
c0002495:	0f 85 dd 00 00 00    	jne    c0002578 <find_volume+0x111>
c000249b:	31 c9                	xor    ecx,ecx
c000249d:	ba 01 00 00 00       	mov    edx,0x1
c00024a2:	89 d8                	mov    eax,ebx
c00024a4:	e8 90 fe ff ff       	call   c0002339 <move_window>
c00024a9:	85 c0                	test   eax,eax
c00024ab:	74 0a                	je     c00024b7 <find_volume+0x50>
c00024ad:	b8 04 00 00 00       	mov    eax,0x4
c00024b2:	e9 2c 01 00 00       	jmp    c00025e3 <find_volume+0x17c>
c00024b7:	8d 6b 54             	lea    ebp,[ebx+0x54]
c00024ba:	89 e8                	mov    eax,ebp
c00024bc:	e8 f6 fc ff ff       	call   c00021b7 <test_gpt_header>
c00024c1:	85 c0                	test   eax,eax
c00024c3:	75 0a                	jne    c00024cf <find_volume+0x68>
c00024c5:	b8 03 00 00 00       	mov    eax,0x3
c00024ca:	e9 14 01 00 00       	jmp    c00025e3 <find_volume+0x17c>
c00024cf:	8d 83 a4 00 00 00    	lea    eax,[ebx+0xa4]
c00024d5:	e8 8e f6 ff ff       	call   c0001b68 <ld_dword>
c00024da:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00024de:	8d 83 9c 00 00 00    	lea    eax,[ebx+0x9c]
c00024e4:	e8 97 f6 ff ff       	call   c0001b80 <ld_qword>
c00024e9:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00024f1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00024f5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00024f9:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0002501:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0002505:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c0002509:	74 ba                	je     c00024c5 <find_volume+0x5e>
c000250b:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000250f:	31 c9                	xor    ecx,ecx
c0002511:	c1 e7 07             	shl    edi,0x7
c0002514:	89 d8                	mov    eax,ebx
c0002516:	89 fa                	mov    edx,edi
c0002518:	c1 ea 09             	shr    edx,0x9
c000251b:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c000251f:	13 4c 24 1c          	adc    ecx,DWORD PTR [esp+0x1c]
c0002523:	e8 11 fe ff ff       	call   c0002339 <move_window>
c0002528:	85 c0                	test   eax,eax
c000252a:	75 81                	jne    c00024ad <find_volume+0x46>
c000252c:	81 e7 80 01 00 00    	and    edi,0x180
c0002532:	b9 10 00 00 00       	mov    ecx,0x10
c0002537:	8d 44 3d 00          	lea    eax,[ebp+edi*1+0x0]
c000253b:	ba 70 20 02 c0       	mov    edx,0xc0022070
c0002540:	e8 b5 f6 ff ff       	call   c0001bfa <mem_cmp>
c0002545:	85 c0                	test   eax,eax
c0002547:	75 29                	jne    c0002572 <find_volume+0x10b>
c0002549:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c000254d:	8d 44 3d 20          	lea    eax,[ebp+edi*1+0x20]
c0002551:	e8 2a f6 ff ff       	call   c0001b80 <ld_qword>
c0002556:	89 d1                	mov    ecx,edx
c0002558:	89 c2                	mov    edx,eax
c000255a:	89 d8                	mov    eax,ebx
c000255c:	e8 4c fe ff ff       	call   c00023ad <check_fs>
c0002561:	85 f6                	test   esi,esi
c0002563:	75 07                	jne    c000256c <find_volume+0x105>
c0002565:	83 f8 01             	cmp    eax,0x1
c0002568:	77 08                	ja     c0002572 <find_volume+0x10b>
c000256a:	eb 77                	jmp    c00025e3 <find_volume+0x17c>
c000256c:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0002570:	74 71                	je     c00025e3 <find_volume+0x17c>
c0002572:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0002576:	eb 89                	jmp    c0002501 <find_volume+0x9a>
c0002578:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c000257c:	8d 83 5a 02 00 00    	lea    eax,[ebx+0x25a]
c0002582:	8d bb 1a 02 00 00    	lea    edi,[ebx+0x21a]
c0002588:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000258c:	89 cd                	mov    ebp,ecx
c000258e:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0002592:	89 f8                	mov    eax,edi
c0002594:	83 c7 10             	add    edi,0x10
c0002597:	e8 cc f5 ff ff       	call   c0001b68 <ld_dword>
c000259c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00025a0:	89 01                	mov    DWORD PTR [ecx],eax
c00025a2:	83 c1 04             	add    ecx,0x4
c00025a5:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c00025a9:	75 e3                	jne    c000258e <find_volume+0x127>
c00025ab:	31 ff                	xor    edi,edi
c00025ad:	85 f6                	test   esi,esi
c00025af:	74 03                	je     c00025b4 <find_volume+0x14d>
c00025b1:	8d 7e ff             	lea    edi,[esi-0x1]
c00025b4:	8b 54 bd 00          	mov    edx,DWORD PTR [ebp+edi*4+0x0]
c00025b8:	85 d2                	test   edx,edx
c00025ba:	74 14                	je     c00025d0 <find_volume+0x169>
c00025bc:	31 c9                	xor    ecx,ecx
c00025be:	89 d8                	mov    eax,ebx
c00025c0:	e8 e8 fd ff ff       	call   c00023ad <check_fs>
c00025c5:	83 f8 01             	cmp    eax,0x1
c00025c8:	76 19                	jbe    c00025e3 <find_volume+0x17c>
c00025ca:	85 f6                	test   esi,esi
c00025cc:	74 0f                	je     c00025dd <find_volume+0x176>
c00025ce:	eb 13                	jmp    c00025e3 <find_volume+0x17c>
c00025d0:	85 f6                	test   esi,esi
c00025d2:	0f 85 ed fe ff ff    	jne    c00024c5 <find_volume+0x5e>
c00025d8:	b8 03 00 00 00       	mov    eax,0x3
c00025dd:	47                   	inc    edi
c00025de:	83 ff 03             	cmp    edi,0x3
c00025e1:	76 d1                	jbe    c00025b4 <find_volume+0x14d>
c00025e3:	83 c4 3c             	add    esp,0x3c
c00025e6:	5b                   	pop    ebx
c00025e7:	5e                   	pop    esi
c00025e8:	5f                   	pop    edi
c00025e9:	5d                   	pop    ebp
c00025ea:	c3                   	ret    

c00025eb <mount_volume>:
c00025eb:	55                   	push   ebp
c00025ec:	57                   	push   edi
c00025ed:	89 cf                	mov    edi,ecx
c00025ef:	56                   	push   esi
c00025f0:	53                   	push   ebx
c00025f1:	bb 0b 00 00 00       	mov    ebx,0xb
c00025f6:	83 ec 3c             	sub    esp,0x3c
c00025f9:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00025ff:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0002603:	e8 35 fb ff ff       	call   c000213d <get_ldnumber>
c0002608:	85 c0                	test   eax,eax
c000260a:	0f 88 3a 05 00 00    	js     c0002b4a <mount_volume+0x55f>
c0002610:	8b 2c 85 00 64 02 c0 	mov    ebp,DWORD PTR [eax*4-0x3ffd9c00]
c0002617:	89 c6                	mov    esi,eax
c0002619:	bb 0c 00 00 00       	mov    ebx,0xc
c000261e:	85 ed                	test   ebp,ebp
c0002620:	0f 84 24 05 00 00    	je     c0002b4a <mount_volume+0x55f>
c0002626:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000262a:	83 e7 fe             	and    edi,0xfffffffe
c000262d:	89 2a                	mov    DWORD PTR [edx],ebp
c000262f:	80 7d 00 00          	cmp    BYTE PTR [ebp+0x0],0x0
c0002633:	74 32                	je     c0002667 <mount_volume+0x7c>
c0002635:	83 ec 0c             	sub    esp,0xc
c0002638:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c000263c:	50                   	push   eax
c000263d:	e8 c8 f4 ff ff       	call   c0001b0a <disk_status>
c0002642:	83 c4 10             	add    esp,0x10
c0002645:	a8 01                	test   al,0x1
c0002647:	75 1e                	jne    c0002667 <mount_volume+0x7c>
c0002649:	31 db                	xor    ebx,ebx
c000264b:	89 f9                	mov    ecx,edi
c000264d:	84 c9                	test   cl,cl
c000264f:	0f 84 f5 04 00 00    	je     c0002b4a <mount_volume+0x55f>
c0002655:	a8 04                	test   al,0x4
c0002657:	0f 84 ed 04 00 00    	je     c0002b4a <mount_volume+0x55f>
c000265d:	bb 0a 00 00 00       	mov    ebx,0xa
c0002662:	e9 e3 04 00 00       	jmp    c0002b4a <mount_volume+0x55f>
c0002667:	83 ec 0c             	sub    esp,0xc
c000266a:	89 f0                	mov    eax,esi
c000266c:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c0002670:	88 45 01             	mov    BYTE PTR [ebp+0x1],al
c0002673:	0f b6 f0             	movzx  esi,al
c0002676:	bb 03 00 00 00       	mov    ebx,0x3
c000267b:	56                   	push   esi
c000267c:	e8 8c f4 ff ff       	call   c0001b0d <disk_initialize>
c0002681:	83 c4 10             	add    esp,0x10
c0002684:	a8 01                	test   al,0x1
c0002686:	0f 85 be 04 00 00    	jne    c0002b4a <mount_volume+0x55f>
c000268c:	89 f9                	mov    ecx,edi
c000268e:	84 c9                	test   cl,cl
c0002690:	74 04                	je     c0002696 <mount_volume+0xab>
c0002692:	a8 04                	test   al,0x4
c0002694:	75 c7                	jne    c000265d <mount_volume+0x72>
c0002696:	31 d2                	xor    edx,edx
c0002698:	89 e8                	mov    eax,ebp
c000269a:	e8 c8 fd ff ff       	call   c0002467 <find_volume>
c000269f:	83 f8 04             	cmp    eax,0x4
c00026a2:	75 0a                	jne    c00026ae <mount_volume+0xc3>
c00026a4:	bb 01 00 00 00       	mov    ebx,0x1
c00026a9:	e9 9c 04 00 00       	jmp    c0002b4a <mount_volume+0x55f>
c00026ae:	83 f8 01             	cmp    eax,0x1
c00026b1:	76 0a                	jbe    c00026bd <mount_volume+0xd2>
c00026b3:	bb 0d 00 00 00       	mov    ebx,0xd
c00026b8:	e9 8d 04 00 00       	jmp    c0002b4a <mount_volume+0x55f>
c00026bd:	8b 45 4c             	mov    eax,DWORD PTR [ebp+0x4c]
c00026c0:	8b 55 50             	mov    edx,DWORD PTR [ebp+0x50]
c00026c3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00026c7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00026cb:	75 17                	jne    c00026e4 <mount_volume+0xf9>
c00026cd:	b8 0b 00 00 00       	mov    eax,0xb
c00026d2:	80 7c 05 54 00       	cmp    BYTE PTR [ebp+eax*1+0x54],0x0
c00026d7:	75 da                	jne    c00026b3 <mount_volume+0xc8>
c00026d9:	40                   	inc    eax
c00026da:	83 f8 40             	cmp    eax,0x40
c00026dd:	75 f3                	jne    c00026d2 <mount_volume+0xe7>
c00026df:	e9 5a 02 00 00       	jmp    c000293e <mount_volume+0x353>
c00026e4:	8d 45 5f             	lea    eax,[ebp+0x5f]
c00026e7:	e8 6f f4 ff ff       	call   c0001b5b <ld_word>
c00026ec:	66 3d 00 02          	cmp    ax,0x200
c00026f0:	75 c1                	jne    c00026b3 <mount_volume+0xc8>
c00026f2:	8d 45 6a             	lea    eax,[ebp+0x6a]
c00026f5:	e8 61 f4 ff ff       	call   c0001b5b <ld_word>
c00026fa:	0f b7 c0             	movzx  eax,ax
c00026fd:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002701:	85 c0                	test   eax,eax
c0002703:	75 0c                	jne    c0002711 <mount_volume+0x126>
c0002705:	8d 45 78             	lea    eax,[ebp+0x78]
c0002708:	e8 5b f4 ff ff       	call   c0001b68 <ld_dword>
c000270d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002711:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002715:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c0002718:	8a 45 64             	mov    al,BYTE PTR [ebp+0x64]
c000271b:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c000271f:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c0002722:	48                   	dec    eax
c0002723:	3c 01                	cmp    al,0x1
c0002725:	77 8c                	ja     c00026b3 <mount_volume+0xc8>
c0002727:	0f b6 45 61          	movzx  eax,BYTE PTR [ebp+0x61]
c000272b:	89 c3                	mov    ebx,eax
c000272d:	66 89 45 0a          	mov    WORD PTR [ebp+0xa],ax
c0002731:	66 85 c0             	test   ax,ax
c0002734:	0f 84 79 ff ff ff    	je     c00026b3 <mount_volume+0xc8>
c000273a:	8d 40 ff             	lea    eax,[eax-0x1]
c000273d:	85 d8                	test   eax,ebx
c000273f:	0f 85 6e ff ff ff    	jne    c00026b3 <mount_volume+0xc8>
c0002745:	8d 45 65             	lea    eax,[ebp+0x65]
c0002748:	e8 0e f4 ff ff       	call   c0001b5b <ld_word>
c000274d:	89 c7                	mov    edi,eax
c000274f:	66 89 45 08          	mov    WORD PTR [ebp+0x8],ax
c0002753:	a8 0f                	test   al,0xf
c0002755:	0f 85 58 ff ff ff    	jne    c00026b3 <mount_volume+0xc8>
c000275b:	8d 45 67             	lea    eax,[ebp+0x67]
c000275e:	e8 f8 f3 ff ff       	call   c0001b5b <ld_word>
c0002763:	0f b7 f0             	movzx  esi,ax
c0002766:	85 f6                	test   esi,esi
c0002768:	75 0a                	jne    c0002774 <mount_volume+0x189>
c000276a:	8d 45 74             	lea    eax,[ebp+0x74]
c000276d:	e8 f6 f3 ff ff       	call   c0001b68 <ld_dword>
c0002772:	89 c6                	mov    esi,eax
c0002774:	8d 45 62             	lea    eax,[ebp+0x62]
c0002777:	e8 df f3 ff ff       	call   c0001b5b <ld_word>
c000277c:	66 85 c0             	test   ax,ax
c000277f:	0f 84 2e ff ff ff    	je     c00026b3 <mount_volume+0xc8>
c0002785:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c000278a:	0f b7 c8             	movzx  ecx,ax
c000278d:	0f af 54 24 10       	imul   edx,DWORD PTR [esp+0x10]
c0002792:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0002796:	89 fa                	mov    edx,edi
c0002798:	66 c1 ea 04          	shr    dx,0x4
c000279c:	0f b7 d2             	movzx  edx,dx
c000279f:	03 54 24 2c          	add    edx,DWORD PTR [esp+0x2c]
c00027a3:	8d 04 0a             	lea    eax,[edx+ecx*1]
c00027a6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00027aa:	39 c6                	cmp    esi,eax
c00027ac:	0f 82 01 ff ff ff    	jb     c00026b3 <mount_volume+0xc8>
c00027b2:	29 c6                	sub    esi,eax
c00027b4:	31 d2                	xor    edx,edx
c00027b6:	89 f0                	mov    eax,esi
c00027b8:	f7 f3                	div    ebx
c00027ba:	39 de                	cmp    esi,ebx
c00027bc:	0f 82 f1 fe ff ff    	jb     c00026b3 <mount_volume+0xc8>
c00027c2:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c00027c7:	0f 87 e6 fe ff ff    	ja     c00026b3 <mount_volume+0xc8>
c00027cd:	3d f5 ff 00 00       	cmp    eax,0xfff5
c00027d2:	0f 86 63 03 00 00    	jbe    c0002b3b <mount_volume+0x550>
c00027d8:	bb 03 00 00 00       	mov    ebx,0x3
c00027dd:	8d 70 02             	lea    esi,[eax+0x2]
c00027e0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00027e4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00027e8:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c00027eb:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c00027ee:	31 d2                	xor    edx,edx
c00027f0:	89 c8                	mov    eax,ecx
c00027f2:	89 75 1c             	mov    DWORD PTR [ebp+0x1c],esi
c00027f5:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00027f9:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00027fd:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0002801:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0002805:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c0002808:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c000280b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000280f:	31 d2                	xor    edx,edx
c0002811:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002815:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002819:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c000281c:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c000281f:	83 fb 03             	cmp    ebx,0x3
c0002822:	75 2b                	jne    c000284f <mount_volume+0x264>
c0002824:	8d 45 7e             	lea    eax,[ebp+0x7e]
c0002827:	e8 2f f3 ff ff       	call   c0001b5b <ld_word>
c000282c:	66 09 c7             	or     di,ax
c000282f:	0f 85 7e fe ff ff    	jne    c00026b3 <mount_volume+0xc8>
c0002835:	8d 85 80 00 00 00    	lea    eax,[ebp+0x80]
c000283b:	c1 e6 02             	shl    esi,0x2
c000283e:	e8 25 f3 ff ff       	call   c0001b68 <ld_dword>
c0002843:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c000284a:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c000284d:	eb 30                	jmp    c000287f <mount_volume+0x294>
c000284f:	66 85 ff             	test   di,di
c0002852:	0f 84 5b fe ff ff    	je     c00026b3 <mount_volume+0xc8>
c0002858:	31 d2                	xor    edx,edx
c000285a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000285e:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c0002862:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c0002866:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002869:	89 55 38             	mov    DWORD PTR [ebp+0x38],edx
c000286c:	83 fb 02             	cmp    ebx,0x2
c000286f:	75 04                	jne    c0002875 <mount_volume+0x28a>
c0002871:	01 f6                	add    esi,esi
c0002873:	eb 0a                	jmp    c000287f <mount_volume+0x294>
c0002875:	8d 04 76             	lea    eax,[esi+esi*2]
c0002878:	83 e6 01             	and    esi,0x1
c000287b:	d1 e8                	shr    eax,1
c000287d:	01 c6                	add    esi,eax
c000287f:	81 c6 ff 01 00 00    	add    esi,0x1ff
c0002885:	c1 ee 09             	shr    esi,0x9
c0002888:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c000288c:	0f 87 21 fe ff ff    	ja     c00026b3 <mount_volume+0xc8>
c0002892:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c0002899:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c00028a0:	c6 45 04 80          	mov    BYTE PTR [ebp+0x4],0x80
c00028a4:	83 fb 03             	cmp    ebx,0x3
c00028a7:	75 7a                	jne    c0002923 <mount_volume+0x338>
c00028a9:	8d 85 84 00 00 00    	lea    eax,[ebp+0x84]
c00028af:	e8 a7 f2 ff ff       	call   c0001b5b <ld_word>
c00028b4:	66 48                	dec    ax
c00028b6:	75 6b                	jne    c0002923 <mount_volume+0x338>
c00028b8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00028bc:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00028c0:	83 c2 01             	add    edx,0x1
c00028c3:	89 e8                	mov    eax,ebp
c00028c5:	83 d1 00             	adc    ecx,0x0
c00028c8:	e8 6c fa ff ff       	call   c0002339 <move_window>
c00028cd:	85 c0                	test   eax,eax
c00028cf:	75 52                	jne    c0002923 <mount_volume+0x338>
c00028d1:	c6 45 04 00          	mov    BYTE PTR [ebp+0x4],0x0
c00028d5:	8d 85 52 02 00 00    	lea    eax,[ebp+0x252]
c00028db:	e8 7b f2 ff ff       	call   c0001b5b <ld_word>
c00028e0:	66 3d 55 aa          	cmp    ax,0xaa55
c00028e4:	75 3d                	jne    c0002923 <mount_volume+0x338>
c00028e6:	8d 45 54             	lea    eax,[ebp+0x54]
c00028e9:	e8 7a f2 ff ff       	call   c0001b68 <ld_dword>
c00028ee:	3d 52 52 61 41       	cmp    eax,0x41615252
c00028f3:	75 2e                	jne    c0002923 <mount_volume+0x338>
c00028f5:	8d 85 38 02 00 00    	lea    eax,[ebp+0x238]
c00028fb:	e8 68 f2 ff ff       	call   c0001b68 <ld_dword>
c0002900:	3d 72 72 41 61       	cmp    eax,0x61417272
c0002905:	75 1c                	jne    c0002923 <mount_volume+0x338>
c0002907:	8d 85 3c 02 00 00    	lea    eax,[ebp+0x23c]
c000290d:	e8 56 f2 ff ff       	call   c0001b68 <ld_dword>
c0002912:	89 45 18             	mov    DWORD PTR [ebp+0x18],eax
c0002915:	8d 85 40 02 00 00    	lea    eax,[ebp+0x240]
c000291b:	e8 48 f2 ff ff       	call   c0001b68 <ld_dword>
c0002920:	89 45 14             	mov    DWORD PTR [ebp+0x14],eax
c0002923:	66 a1 e0 63 02 c0    	mov    ax,ds:0xc00263e0
c0002929:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c000292c:	40                   	inc    eax
c000292d:	31 db                	xor    ebx,ebx
c000292f:	66 a3 e0 63 02 c0    	mov    ds:0xc00263e0,ax
c0002935:	66 89 45 06          	mov    WORD PTR [ebp+0x6],ax
c0002939:	e9 0c 02 00 00       	jmp    c0002b4a <mount_volume+0x55f>
c000293e:	8d 85 bc 00 00 00    	lea    eax,[ebp+0xbc]
c0002944:	e8 12 f2 ff ff       	call   c0001b5b <ld_word>
c0002949:	66 3d 00 01          	cmp    ax,0x100
c000294d:	0f 85 60 fd ff ff    	jne    c00026b3 <mount_volume+0xc8>
c0002953:	80 bd c0 00 00 00 09 	cmp    BYTE PTR [ebp+0xc0],0x9
c000295a:	0f 85 53 fd ff ff    	jne    c00026b3 <mount_volume+0xc8>
c0002960:	8d 85 9c 00 00 00    	lea    eax,[ebp+0x9c]
c0002966:	e8 15 f2 ff ff       	call   c0001b80 <ld_qword>
c000296b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000296f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0002973:	8d 85 a8 00 00 00    	lea    eax,[ebp+0xa8]
c0002979:	e8 ea f1 ff ff       	call   c0001b68 <ld_dword>
c000297e:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c0002981:	8a 85 c2 00 00 00    	mov    al,BYTE PTR [ebp+0xc2]
c0002987:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c000298a:	fe c8                	dec    al
c000298c:	0f 85 21 fd ff ff    	jne    c00026b3 <mount_volume+0xc8>
c0002992:	0f b6 8d c1 00 00 00 	movzx  ecx,BYTE PTR [ebp+0xc1]
c0002999:	bb 01 00 00 00       	mov    ebx,0x1
c000299e:	d3 e3                	shl    ebx,cl
c00029a0:	66 89 5d 0a          	mov    WORD PTR [ebp+0xa],bx
c00029a4:	66 85 db             	test   bx,bx
c00029a7:	0f 84 06 fd ff ff    	je     c00026b3 <mount_volume+0xc8>
c00029ad:	8d 85 b0 00 00 00    	lea    eax,[ebp+0xb0]
c00029b3:	e8 b0 f1 ff ff       	call   c0001b68 <ld_dword>
c00029b8:	89 c6                	mov    esi,eax
c00029ba:	3d fd ff ff 7f       	cmp    eax,0x7ffffffd
c00029bf:	0f 87 ee fc ff ff    	ja     c00026b3 <mount_volume+0xc8>
c00029c5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00029c9:	8d 40 02             	lea    eax,[eax+0x2]
c00029cc:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c00029cf:	89 45 1c             	mov    DWORD PTR [ebp+0x1c],eax
c00029d2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00029d6:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c00029d9:	8d 85 ac 00 00 00    	lea    eax,[ebp+0xac]
c00029df:	e8 84 f1 ff ff       	call   c0001b68 <ld_dword>
c00029e4:	31 d2                	xor    edx,edx
c00029e6:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00029ea:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00029ee:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00029f2:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00029f6:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c00029f9:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c00029fc:	8d 85 a4 00 00 00    	lea    eax,[ebp+0xa4]
c0002a02:	e8 61 f1 ff ff       	call   c0001b68 <ld_dword>
c0002a07:	31 d2                	xor    edx,edx
c0002a09:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0002a0d:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002a11:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002a15:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c0002a18:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c0002a1b:	0f b7 c3             	movzx  eax,bx
c0002a1e:	31 d2                	xor    edx,edx
c0002a20:	0f af f0             	imul   esi,eax
c0002a23:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0002a27:	89 f0                	mov    eax,esi
c0002a29:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0002a2d:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0002a31:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c0002a35:	13 5c 24 0c          	adc    ebx,DWORD PTR [esp+0xc]
c0002a39:	39 c1                	cmp    ecx,eax
c0002a3b:	89 df                	mov    edi,ebx
c0002a3d:	19 d7                	sbb    edi,edx
c0002a3f:	0f 82 6e fc ff ff    	jb     c00026b3 <mount_volume+0xc8>
c0002a45:	8d 85 b4 00 00 00    	lea    eax,[ebp+0xb4]
c0002a4b:	31 db                	xor    ebx,ebx
c0002a4d:	e8 16 f1 ff ff       	call   c0001b68 <ld_dword>
c0002a52:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c0002a59:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002a5c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0002a64:	85 db                	test   ebx,ebx
c0002a66:	75 39                	jne    c0002aa1 <mount_volume+0x4b6>
c0002a68:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002a6c:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0002a70:	0f 86 3d fc ff ff    	jbe    c00026b3 <mount_volume+0xc8>
c0002a76:	8b 55 34             	mov    edx,DWORD PTR [ebp+0x34]
c0002a79:	31 ff                	xor    edi,edi
c0002a7b:	89 e8                	mov    eax,ebp
c0002a7d:	e8 72 f3 ff ff       	call   c0001df4 <clst2sect>
c0002a82:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0002a86:	01 c6                	add    esi,eax
c0002a88:	89 e8                	mov    eax,ebp
c0002a8a:	11 d7                	adc    edi,edx
c0002a8c:	89 f2                	mov    edx,esi
c0002a8e:	89 f9                	mov    ecx,edi
c0002a90:	e8 a4 f8 ff ff       	call   c0002339 <move_window>
c0002a95:	85 c0                	test   eax,eax
c0002a97:	0f 85 07 fc ff ff    	jne    c00026a4 <mount_volume+0xb9>
c0002a9d:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0002aa1:	80 7c 1d 54 81       	cmp    BYTE PTR [ebp+ebx*1+0x54],0x81
c0002aa6:	74 0b                	je     c0002ab3 <mount_volume+0x4c8>
c0002aa8:	83 c3 20             	add    ebx,0x20
c0002aab:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0002ab1:	eb b1                	jmp    c0002a64 <mount_volume+0x479>
c0002ab3:	8d 75 54             	lea    esi,[ebp+0x54]
c0002ab6:	8d 44 1e 14          	lea    eax,[esi+ebx*1+0x14]
c0002aba:	e8 a9 f0 ff ff       	call   c0001b68 <ld_dword>
c0002abf:	89 c3                	mov    ebx,eax
c0002ac1:	83 f8 01             	cmp    eax,0x1
c0002ac4:	0f 86 e9 fb ff ff    	jbe    c00026b3 <mount_volume+0xc8>
c0002aca:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c0002acd:	0f 86 e0 fb ff ff    	jbe    c00026b3 <mount_volume+0xc8>
c0002ad3:	8d 53 fe             	lea    edx,[ebx-0x2]
c0002ad6:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002ada:	0f af c2             	imul   eax,edx
c0002add:	31 d2                	xor    edx,edx
c0002adf:	03 45 3c             	add    eax,DWORD PTR [ebp+0x3c]
c0002ae2:	13 55 40             	adc    edx,DWORD PTR [ebp+0x40]
c0002ae5:	89 45 44             	mov    DWORD PTR [ebp+0x44],eax
c0002ae8:	89 55 48             	mov    DWORD PTR [ebp+0x48],edx
c0002aeb:	31 c9                	xor    ecx,ecx
c0002aed:	89 da                	mov    edx,ebx
c0002aef:	89 e8                	mov    eax,ebp
c0002af1:	c1 ea 07             	shr    edx,0x7
c0002af4:	03 55 2c             	add    edx,DWORD PTR [ebp+0x2c]
c0002af7:	13 4d 30             	adc    ecx,DWORD PTR [ebp+0x30]
c0002afa:	e8 3a f8 ff ff       	call   c0002339 <move_window>
c0002aff:	85 c0                	test   eax,eax
c0002b01:	0f 85 9d fb ff ff    	jne    c00026a4 <mount_volume+0xb9>
c0002b07:	89 d8                	mov    eax,ebx
c0002b09:	83 e0 7f             	and    eax,0x7f
c0002b0c:	8d 04 86             	lea    eax,[esi+eax*4]
c0002b0f:	e8 54 f0 ff ff       	call   c0001b68 <ld_dword>
c0002b14:	83 f8 ff             	cmp    eax,0xffffffff
c0002b17:	74 0a                	je     c0002b23 <mount_volume+0x538>
c0002b19:	43                   	inc    ebx
c0002b1a:	39 d8                	cmp    eax,ebx
c0002b1c:	74 cd                	je     c0002aeb <mount_volume+0x500>
c0002b1e:	e9 90 fb ff ff       	jmp    c00026b3 <mount_volume+0xc8>
c0002b23:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c0002b2a:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c0002b31:	bb 04 00 00 00       	mov    ebx,0x4
c0002b36:	e9 e8 fd ff ff       	jmp    c0002923 <mount_volume+0x338>
c0002b3b:	3d f6 0f 00 00       	cmp    eax,0xff6
c0002b40:	19 db                	sbb    ebx,ebx
c0002b42:	83 c3 02             	add    ebx,0x2
c0002b45:	e9 93 fc ff ff       	jmp    c00027dd <mount_volume+0x1f2>
c0002b4a:	83 c4 3c             	add    esp,0x3c
c0002b4d:	89 d8                	mov    eax,ebx
c0002b4f:	5b                   	pop    ebx
c0002b50:	5e                   	pop    esi
c0002b51:	5f                   	pop    edi
c0002b52:	5d                   	pop    ebp
c0002b53:	c3                   	ret    

c0002b54 <find_bitmap>:
c0002b54:	55                   	push   ebp
c0002b55:	57                   	push   edi
c0002b56:	89 c7                	mov    edi,eax
c0002b58:	56                   	push   esi
c0002b59:	8d 72 fe             	lea    esi,[edx-0x2]
c0002b5c:	53                   	push   ebx
c0002b5d:	83 ec 1c             	sub    esp,0x1c
c0002b60:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0002b63:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002b67:	83 e8 02             	sub    eax,0x2
c0002b6a:	39 f0                	cmp    eax,esi
c0002b6c:	77 02                	ja     c0002b70 <find_bitmap+0x1c>
c0002b6e:	31 f6                	xor    esi,esi
c0002b70:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0002b74:	89 f3                	mov    ebx,esi
c0002b76:	31 ed                	xor    ebp,ebp
c0002b78:	31 c9                	xor    ecx,ecx
c0002b7a:	89 da                	mov    edx,ebx
c0002b7c:	89 f8                	mov    eax,edi
c0002b7e:	c1 ea 0c             	shr    edx,0xc
c0002b81:	03 57 44             	add    edx,DWORD PTR [edi+0x44]
c0002b84:	13 4f 48             	adc    ecx,DWORD PTR [edi+0x48]
c0002b87:	e8 ad f7 ff ff       	call   c0002339 <move_window>
c0002b8c:	85 c0                	test   eax,eax
c0002b8e:	75 68                	jne    c0002bf8 <find_bitmap+0xa4>
c0002b90:	89 da                	mov    edx,ebx
c0002b92:	89 d9                	mov    ecx,ebx
c0002b94:	c1 ea 03             	shr    edx,0x3
c0002b97:	83 e1 07             	and    ecx,0x7
c0002b9a:	b8 01 00 00 00       	mov    eax,0x1
c0002b9f:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0002ba5:	d3 e0                	shl    eax,cl
c0002ba7:	8b 4f 1c             	mov    ecx,DWORD PTR [edi+0x1c]
c0002baa:	83 e9 02             	sub    ecx,0x2
c0002bad:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002bb1:	8a 4c 17 54          	mov    cl,BYTE PTR [edi+edx*1+0x54]
c0002bb5:	43                   	inc    ebx
c0002bb6:	21 c1                	and    ecx,eax
c0002bb8:	d1 e0                	shl    eax,1
c0002bba:	39 5c 24 08          	cmp    DWORD PTR [esp+0x8],ebx
c0002bbe:	77 09                	ja     c0002bc9 <find_bitmap+0x75>
c0002bc0:	31 db                	xor    ebx,ebx
c0002bc2:	ba 00 02 00 00       	mov    edx,0x200
c0002bc7:	31 c0                	xor    eax,eax
c0002bc9:	84 c9                	test   cl,cl
c0002bcb:	75 10                	jne    c0002bdd <find_bitmap+0x89>
c0002bcd:	45                   	inc    ebp
c0002bce:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0002bd2:	75 0f                	jne    c0002be3 <find_bitmap+0x8f>
c0002bd4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002bd8:	83 c0 02             	add    eax,0x2
c0002bdb:	eb 22                	jmp    c0002bff <find_bitmap+0xab>
c0002bdd:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0002be1:	31 ed                	xor    ebp,ebp
c0002be3:	39 de                	cmp    esi,ebx
c0002be5:	74 16                	je     c0002bfd <find_bitmap+0xa9>
c0002be7:	84 c0                	test   al,al
c0002be9:	75 c6                	jne    c0002bb1 <find_bitmap+0x5d>
c0002beb:	42                   	inc    edx
c0002bec:	81 fa ff 01 00 00    	cmp    edx,0x1ff
c0002bf2:	77 84                	ja     c0002b78 <find_bitmap+0x24>
c0002bf4:	b0 01                	mov    al,0x1
c0002bf6:	eb b9                	jmp    c0002bb1 <find_bitmap+0x5d>
c0002bf8:	83 c8 ff             	or     eax,0xffffffff
c0002bfb:	eb 02                	jmp    c0002bff <find_bitmap+0xab>
c0002bfd:	31 c0                	xor    eax,eax
c0002bff:	83 c4 1c             	add    esp,0x1c
c0002c02:	5b                   	pop    ebx
c0002c03:	5e                   	pop    esi
c0002c04:	5f                   	pop    edi
c0002c05:	5d                   	pop    ebp
c0002c06:	c3                   	ret    

c0002c07 <change_bitmap>:
c0002c07:	55                   	push   ebp
c0002c08:	89 cd                	mov    ebp,ecx
c0002c0a:	57                   	push   edi
c0002c0b:	8d 4a fe             	lea    ecx,[edx-0x2]
c0002c0e:	56                   	push   esi
c0002c0f:	89 c7                	mov    edi,eax
c0002c11:	53                   	push   ebx
c0002c12:	89 c8                	mov    eax,ecx
c0002c14:	83 ec 1c             	sub    esp,0x1c
c0002c17:	31 d2                	xor    edx,edx
c0002c19:	89 ce                	mov    esi,ecx
c0002c1b:	c1 e8 0c             	shr    eax,0xc
c0002c1e:	bb 01 00 00 00       	mov    ebx,0x1
c0002c23:	03 47 44             	add    eax,DWORD PTR [edi+0x44]
c0002c26:	13 57 48             	adc    edx,DWORD PTR [edi+0x48]
c0002c29:	c1 ee 03             	shr    esi,0x3
c0002c2c:	83 e1 07             	and    ecx,0x7
c0002c2f:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0002c35:	d3 e3                	shl    ebx,cl
c0002c37:	88 5c 24 07          	mov    BYTE PTR [esp+0x7],bl
c0002c3b:	89 c1                	mov    ecx,eax
c0002c3d:	89 d3                	mov    ebx,edx
c0002c3f:	83 c1 01             	add    ecx,0x1
c0002c42:	83 d3 00             	adc    ebx,0x0
c0002c45:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002c49:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0002c4d:	89 d1                	mov    ecx,edx
c0002c4f:	89 c2                	mov    edx,eax
c0002c51:	89 f8                	mov    eax,edi
c0002c53:	e8 e1 f6 ff ff       	call   c0002339 <move_window>
c0002c58:	89 c1                	mov    ecx,eax
c0002c5a:	85 c0                	test   eax,eax
c0002c5c:	75 48                	jne    c0002ca6 <change_bitmap+0x9f>
c0002c5e:	31 d2                	xor    edx,edx
c0002c60:	8a 44 37 54          	mov    al,BYTE PTR [edi+esi*1+0x54]
c0002c64:	84 44 24 07          	test   BYTE PTR [esp+0x7],al
c0002c68:	0f 95 c2             	setne  dl
c0002c6b:	3b 54 24 30          	cmp    edx,DWORD PTR [esp+0x30]
c0002c6f:	74 3c                	je     c0002cad <change_bitmap+0xa6>
c0002c71:	32 44 24 07          	xor    al,BYTE PTR [esp+0x7]
c0002c75:	4d                   	dec    ebp
c0002c76:	88 44 37 54          	mov    BYTE PTR [edi+esi*1+0x54],al
c0002c7a:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0002c7e:	74 32                	je     c0002cb2 <change_bitmap+0xab>
c0002c80:	d0 64 24 07          	shl    BYTE PTR [esp+0x7],1
c0002c84:	75 d8                	jne    c0002c5e <change_bitmap+0x57>
c0002c86:	8d 46 01             	lea    eax,[esi+0x1]
c0002c89:	c6 44 24 07 01       	mov    BYTE PTR [esp+0x7],0x1
c0002c8e:	89 c3                	mov    ebx,eax
c0002c90:	31 f6                	xor    esi,esi
c0002c92:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002c96:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002c9a:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002ca0:	74 99                	je     c0002c3b <change_bitmap+0x34>
c0002ca2:	89 de                	mov    esi,ebx
c0002ca4:	eb b8                	jmp    c0002c5e <change_bitmap+0x57>
c0002ca6:	b9 01 00 00 00       	mov    ecx,0x1
c0002cab:	eb 05                	jmp    c0002cb2 <change_bitmap+0xab>
c0002cad:	b9 02 00 00 00       	mov    ecx,0x2
c0002cb2:	83 c4 1c             	add    esp,0x1c
c0002cb5:	89 c8                	mov    eax,ecx
c0002cb7:	5b                   	pop    ebx
c0002cb8:	5e                   	pop    esi
c0002cb9:	5f                   	pop    edi
c0002cba:	5d                   	pop    ebp
c0002cbb:	c3                   	ret    

c0002cbc <put_fat>:
c0002cbc:	83 fa 01             	cmp    edx,0x1
c0002cbf:	0f 86 7b 01 00 00    	jbe    c0002e40 <put_fat+0x184>
c0002cc5:	55                   	push   ebp
c0002cc6:	57                   	push   edi
c0002cc7:	89 cf                	mov    edi,ecx
c0002cc9:	56                   	push   esi
c0002cca:	b9 02 00 00 00       	mov    ecx,0x2
c0002ccf:	53                   	push   ebx
c0002cd0:	89 c6                	mov    esi,eax
c0002cd2:	83 ec 1c             	sub    esp,0x1c
c0002cd5:	89 d3                	mov    ebx,edx
c0002cd7:	39 50 1c             	cmp    DWORD PTR [eax+0x1c],edx
c0002cda:	0f 86 68 01 00 00    	jbe    c0002e48 <put_fat+0x18c>
c0002ce0:	8a 00                	mov    al,BYTE PTR [eax]
c0002ce2:	3c 02                	cmp    al,0x2
c0002ce4:	0f 84 c7 00 00 00    	je     c0002db1 <put_fat+0xf5>
c0002cea:	77 09                	ja     c0002cf5 <put_fat+0x39>
c0002cec:	fe c8                	dec    al
c0002cee:	74 17                	je     c0002d07 <put_fat+0x4b>
c0002cf0:	e9 53 01 00 00       	jmp    c0002e48 <put_fat+0x18c>
c0002cf5:	b9 02 00 00 00       	mov    ecx,0x2
c0002cfa:	3c 04                	cmp    al,0x4
c0002cfc:	0f 86 e1 00 00 00    	jbe    c0002de3 <put_fat+0x127>
c0002d02:	e9 41 01 00 00       	jmp    c0002e48 <put_fat+0x18c>
c0002d07:	89 d5                	mov    ebp,edx
c0002d09:	31 c9                	xor    ecx,ecx
c0002d0b:	d1 ed                	shr    ebp,1
c0002d0d:	89 f0                	mov    eax,esi
c0002d0f:	01 d5                	add    ebp,edx
c0002d11:	89 ea                	mov    edx,ebp
c0002d13:	c1 ea 09             	shr    edx,0x9
c0002d16:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002d19:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002d1c:	e8 18 f6 ff ff       	call   c0002339 <move_window>
c0002d21:	89 c1                	mov    ecx,eax
c0002d23:	85 c0                	test   eax,eax
c0002d25:	0f 85 1d 01 00 00    	jne    c0002e48 <put_fat+0x18c>
c0002d2b:	8d 46 54             	lea    eax,[esi+0x54]
c0002d2e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002d32:	8d 45 01             	lea    eax,[ebp+0x1]
c0002d35:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002d3b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002d3f:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002d43:	89 f8                	mov    eax,edi
c0002d45:	83 e3 01             	and    ebx,0x1
c0002d48:	74 0d                	je     c0002d57 <put_fat+0x9b>
c0002d4a:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0002d4d:	89 fa                	mov    edx,edi
c0002d4f:	83 e0 0f             	and    eax,0xf
c0002d52:	c1 e2 04             	shl    edx,0x4
c0002d55:	09 d0                	or     eax,edx
c0002d57:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c0002d5a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002d5e:	31 c9                	xor    ecx,ecx
c0002d60:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002d64:	c1 ea 09             	shr    edx,0x9
c0002d67:	89 f0                	mov    eax,esi
c0002d69:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002d6c:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002d6f:	e8 c5 f5 ff ff       	call   c0002339 <move_window>
c0002d74:	89 c1                	mov    ecx,eax
c0002d76:	85 c0                	test   eax,eax
c0002d78:	0f 85 ca 00 00 00    	jne    c0002e48 <put_fat+0x18c>
c0002d7e:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0002d82:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002d88:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002d8c:	85 db                	test   ebx,ebx
c0002d8e:	74 07                	je     c0002d97 <put_fat+0xdb>
c0002d90:	c1 ef 04             	shr    edi,0x4
c0002d93:	89 fa                	mov    edx,edi
c0002d95:	eb 0e                	jmp    c0002da5 <put_fat+0xe9>
c0002d97:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c0002d9a:	c1 ef 08             	shr    edi,0x8
c0002d9d:	83 e2 f0             	and    edx,0xfffffff0
c0002da0:	83 e7 0f             	and    edi,0xf
c0002da3:	09 fa                	or     edx,edi
c0002da5:	88 55 00             	mov    BYTE PTR [ebp+0x0],dl
c0002da8:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002dac:	e9 97 00 00 00       	jmp    c0002e48 <put_fat+0x18c>
c0002db1:	31 c9                	xor    ecx,ecx
c0002db3:	c1 ea 08             	shr    edx,0x8
c0002db6:	89 f0                	mov    eax,esi
c0002db8:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002dbb:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002dbe:	e8 76 f5 ff ff       	call   c0002339 <move_window>
c0002dc3:	89 c1                	mov    ecx,eax
c0002dc5:	85 c0                	test   eax,eax
c0002dc7:	75 7f                	jne    c0002e48 <put_fat+0x18c>
c0002dc9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002dcd:	01 db                	add    ebx,ebx
c0002dcf:	0f b7 d7             	movzx  edx,di
c0002dd2:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0002dd8:	8d 44 1e 54          	lea    eax,[esi+ebx*1+0x54]
c0002ddc:	e8 ec ed ff ff       	call   c0001bcd <st_word>
c0002de1:	eb 53                	jmp    c0002e36 <put_fat+0x17a>
c0002de3:	31 c9                	xor    ecx,ecx
c0002de5:	c1 ea 07             	shr    edx,0x7
c0002de8:	89 f0                	mov    eax,esi
c0002dea:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002ded:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002df0:	e8 44 f5 ff ff       	call   c0002339 <move_window>
c0002df5:	89 c1                	mov    ecx,eax
c0002df7:	85 c0                	test   eax,eax
c0002df9:	75 4d                	jne    c0002e48 <put_fat+0x18c>
c0002dfb:	c1 e3 02             	shl    ebx,0x2
c0002dfe:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c0002e04:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0002e07:	8d 5c 1e 54          	lea    ebx,[esi+ebx*1+0x54]
c0002e0b:	74 1c                	je     c0002e29 <put_fat+0x16d>
c0002e0d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002e11:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c0002e17:	89 d8                	mov    eax,ebx
c0002e19:	e8 4a ed ff ff       	call   c0001b68 <ld_dword>
c0002e1e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002e22:	25 00 00 00 f0       	and    eax,0xf0000000
c0002e27:	09 c7                	or     edi,eax
c0002e29:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002e2d:	89 fa                	mov    edx,edi
c0002e2f:	89 d8                	mov    eax,ebx
c0002e31:	e8 9b ed ff ff       	call   c0001bd1 <st_dword>
c0002e36:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002e3a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002e3e:	eb 08                	jmp    c0002e48 <put_fat+0x18c>
c0002e40:	b9 02 00 00 00       	mov    ecx,0x2
c0002e45:	89 c8                	mov    eax,ecx
c0002e47:	c3                   	ret    
c0002e48:	83 c4 1c             	add    esp,0x1c
c0002e4b:	89 c8                	mov    eax,ecx
c0002e4d:	5b                   	pop    ebx
c0002e4e:	5e                   	pop    esi
c0002e4f:	5f                   	pop    edi
c0002e50:	5d                   	pop    ebp
c0002e51:	c3                   	ret    

c0002e52 <fill_last_frag>:
c0002e52:	57                   	push   edi
c0002e53:	89 cf                	mov    edi,ecx
c0002e55:	56                   	push   esi
c0002e56:	89 d6                	mov    esi,edx
c0002e58:	53                   	push   ebx
c0002e59:	89 c3                	mov    ebx,eax
c0002e5b:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0002e5e:	85 c0                	test   eax,eax
c0002e60:	74 21                	je     c0002e83 <fill_last_frag+0x31>
c0002e62:	89 f9                	mov    ecx,edi
c0002e64:	83 f8 01             	cmp    eax,0x1
c0002e67:	76 05                	jbe    c0002e6e <fill_last_frag+0x1c>
c0002e69:	8d 4e 02             	lea    ecx,[esi+0x2]
c0002e6c:	29 c1                	sub    ecx,eax
c0002e6e:	8d 56 01             	lea    edx,[esi+0x1]
c0002e71:	29 c2                	sub    edx,eax
c0002e73:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002e75:	e8 42 fe ff ff       	call   c0002cbc <put_fat>
c0002e7a:	85 c0                	test   eax,eax
c0002e7c:	75 05                	jne    c0002e83 <fill_last_frag+0x31>
c0002e7e:	ff 4b 18             	dec    DWORD PTR [ebx+0x18]
c0002e81:	eb d8                	jmp    c0002e5b <fill_last_frag+0x9>
c0002e83:	5b                   	pop    ebx
c0002e84:	5e                   	pop    esi
c0002e85:	5f                   	pop    edi
c0002e86:	c3                   	ret    

c0002e87 <fill_first_frag>:
c0002e87:	80 78 07 03          	cmp    BYTE PTR [eax+0x7],0x3
c0002e8b:	75 2d                	jne    c0002eba <fill_first_frag+0x33>
c0002e8d:	57                   	push   edi
c0002e8e:	56                   	push   esi
c0002e8f:	53                   	push   ebx
c0002e90:	89 c3                	mov    ebx,eax
c0002e92:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0002e95:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c0002e98:	01 d7                	add    edi,edx
c0002e9a:	39 fa                	cmp    edx,edi
c0002e9c:	74 14                	je     c0002eb2 <fill_first_frag+0x2b>
c0002e9e:	8d 72 01             	lea    esi,[edx+0x1]
c0002ea1:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002ea3:	89 f1                	mov    ecx,esi
c0002ea5:	e8 12 fe ff ff       	call   c0002cbc <put_fat>
c0002eaa:	89 f2                	mov    edx,esi
c0002eac:	85 c0                	test   eax,eax
c0002eae:	74 ea                	je     c0002e9a <fill_first_frag+0x13>
c0002eb0:	eb 0b                	jmp    c0002ebd <fill_first_frag+0x36>
c0002eb2:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0002eb6:	31 c0                	xor    eax,eax
c0002eb8:	eb 03                	jmp    c0002ebd <fill_first_frag+0x36>
c0002eba:	31 c0                	xor    eax,eax
c0002ebc:	c3                   	ret    
c0002ebd:	5b                   	pop    ebx
c0002ebe:	5e                   	pop    esi
c0002ebf:	5f                   	pop    edi
c0002ec0:	c3                   	ret    

c0002ec1 <get_fat>:
c0002ec1:	83 fa 01             	cmp    edx,0x1
c0002ec4:	0f 86 db 01 00 00    	jbe    c00030a5 <get_fat+0x1e4>
c0002eca:	55                   	push   ebp
c0002ecb:	b9 01 00 00 00       	mov    ecx,0x1
c0002ed0:	57                   	push   edi
c0002ed1:	56                   	push   esi
c0002ed2:	53                   	push   ebx
c0002ed3:	83 ec 1c             	sub    esp,0x1c
c0002ed6:	8b 38                	mov    edi,DWORD PTR [eax]
c0002ed8:	39 57 1c             	cmp    DWORD PTR [edi+0x1c],edx
c0002edb:	0f 86 cc 01 00 00    	jbe    c00030ad <get_fat+0x1ec>
c0002ee1:	89 c3                	mov    ebx,eax
c0002ee3:	89 d6                	mov    esi,edx
c0002ee5:	8a 07                	mov    al,BYTE PTR [edi]
c0002ee7:	3c 02                	cmp    al,0x2
c0002ee9:	0f 84 99 00 00 00    	je     c0002f88 <get_fat+0xc7>
c0002eef:	77 09                	ja     c0002efa <get_fat+0x39>
c0002ef1:	fe c8                	dec    al
c0002ef3:	74 1a                	je     c0002f0f <get_fat+0x4e>
c0002ef5:	e9 b3 01 00 00       	jmp    c00030ad <get_fat+0x1ec>
c0002efa:	3c 03                	cmp    al,0x3
c0002efc:	0f 84 b5 00 00 00    	je     c0002fb7 <get_fat+0xf6>
c0002f02:	3c 04                	cmp    al,0x4
c0002f04:	0f 84 e3 00 00 00    	je     c0002fed <get_fat+0x12c>
c0002f0a:	e9 9e 01 00 00       	jmp    c00030ad <get_fat+0x1ec>
c0002f0f:	89 d3                	mov    ebx,edx
c0002f11:	31 c9                	xor    ecx,ecx
c0002f13:	d1 eb                	shr    ebx,1
c0002f15:	89 f8                	mov    eax,edi
c0002f17:	01 d3                	add    ebx,edx
c0002f19:	89 da                	mov    edx,ebx
c0002f1b:	c1 ea 09             	shr    edx,0x9
c0002f1e:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002f21:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002f24:	e8 10 f4 ff ff       	call   c0002339 <move_window>
c0002f29:	85 c0                	test   eax,eax
c0002f2b:	74 08                	je     c0002f35 <get_fat+0x74>
c0002f2d:	83 c9 ff             	or     ecx,0xffffffff
c0002f30:	e9 78 01 00 00       	jmp    c00030ad <get_fat+0x1ec>
c0002f35:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0002f38:	31 c9                	xor    ecx,ecx
c0002f3a:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0002f40:	89 ea                	mov    edx,ebp
c0002f42:	8a 5c 1f 54          	mov    bl,BYTE PTR [edi+ebx*1+0x54]
c0002f46:	c1 ea 09             	shr    edx,0x9
c0002f49:	89 f8                	mov    eax,edi
c0002f4b:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002f4e:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002f51:	e8 e3 f3 ff ff       	call   c0002339 <move_window>
c0002f56:	85 c0                	test   eax,eax
c0002f58:	75 d3                	jne    c0002f2d <get_fat+0x6c>
c0002f5a:	0f b6 c3             	movzx  eax,bl
c0002f5d:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002f63:	0f b6 5c 2f 54       	movzx  ebx,BYTE PTR [edi+ebp*1+0x54]
c0002f68:	c1 e3 08             	shl    ebx,0x8
c0002f6b:	09 c3                	or     ebx,eax
c0002f6d:	89 d9                	mov    ecx,ebx
c0002f6f:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c0002f75:	83 e6 01             	and    esi,0x1
c0002f78:	0f 84 2f 01 00 00    	je     c00030ad <get_fat+0x1ec>
c0002f7e:	89 d9                	mov    ecx,ebx
c0002f80:	c1 e9 04             	shr    ecx,0x4
c0002f83:	e9 25 01 00 00       	jmp    c00030ad <get_fat+0x1ec>
c0002f88:	31 c9                	xor    ecx,ecx
c0002f8a:	c1 ea 08             	shr    edx,0x8
c0002f8d:	89 f8                	mov    eax,edi
c0002f8f:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002f92:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002f95:	e8 9f f3 ff ff       	call   c0002339 <move_window>
c0002f9a:	85 c0                	test   eax,eax
c0002f9c:	75 8f                	jne    c0002f2d <get_fat+0x6c>
c0002f9e:	01 f6                	add    esi,esi
c0002fa0:	81 e6 fe 01 00 00    	and    esi,0x1fe
c0002fa6:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0002faa:	e8 ac eb ff ff       	call   c0001b5b <ld_word>
c0002faf:	0f b7 c8             	movzx  ecx,ax
c0002fb2:	e9 f6 00 00 00       	jmp    c00030ad <get_fat+0x1ec>
c0002fb7:	31 c9                	xor    ecx,ecx
c0002fb9:	c1 ea 07             	shr    edx,0x7
c0002fbc:	89 f8                	mov    eax,edi
c0002fbe:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002fc1:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002fc4:	e8 70 f3 ff ff       	call   c0002339 <move_window>
c0002fc9:	85 c0                	test   eax,eax
c0002fcb:	0f 85 5c ff ff ff    	jne    c0002f2d <get_fat+0x6c>
c0002fd1:	c1 e6 02             	shl    esi,0x2
c0002fd4:	81 e6 fc 01 00 00    	and    esi,0x1fc
c0002fda:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0002fde:	e8 85 eb ff ff       	call   c0001b68 <ld_dword>
c0002fe3:	25 ff ff ff 0f       	and    eax,0xfffffff
c0002fe8:	e9 b4 00 00 00       	jmp    c00030a1 <get_fat+0x1e0>
c0002fed:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0002ff0:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0002ff3:	89 d1                	mov    ecx,edx
c0002ff5:	09 c1                	or     ecx,eax
c0002ff7:	74 06                	je     c0002fff <get_fat+0x13e>
c0002ff9:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0002ffd:	75 0f                	jne    c000300e <get_fat+0x14d>
c0002fff:	b9 01 00 00 00       	mov    ecx,0x1
c0003004:	80 7b 07 00          	cmp    BYTE PTR [ebx+0x7],0x0
c0003008:	0f 85 9f 00 00 00    	jne    c00030ad <get_fat+0x1ec>
c000300e:	66 8b 4f 0a          	mov    cx,WORD PTR [edi+0xa]
c0003012:	89 f5                	mov    ebp,esi
c0003014:	66 89 4c 24 0e       	mov    WORD PTR [esp+0xe],cx
c0003019:	2b 6b 08             	sub    ebp,DWORD PTR [ebx+0x8]
c000301c:	8a 4b 07             	mov    cl,BYTE PTR [ebx+0x7]
c000301f:	80 f9 02             	cmp    cl,0x2
c0003022:	75 35                	jne    c0003059 <get_fat+0x198>
c0003024:	83 c0 ff             	add    eax,0xffffffff
c0003027:	0f b7 4c 24 0e       	movzx  ecx,WORD PTR [esp+0xe]
c000302c:	83 d2 ff             	adc    edx,0xffffffff
c000302f:	31 db                	xor    ebx,ebx
c0003031:	0f ac d0 09          	shrd   eax,edx,0x9
c0003035:	53                   	push   ebx
c0003036:	c1 ea 09             	shr    edx,0x9
c0003039:	51                   	push   ecx
c000303a:	52                   	push   edx
c000303b:	50                   	push   eax
c000303c:	e8 43 df 01 00       	call   c0020f84 <__udivdi3>
c0003041:	83 c4 10             	add    esp,0x10
c0003044:	b9 01 00 00 00       	mov    ecx,0x1
c0003049:	39 c5                	cmp    ebp,eax
c000304b:	77 60                	ja     c00030ad <get_fat+0x1ec>
c000304d:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c0003052:	74 59                	je     c00030ad <get_fat+0x1ec>
c0003054:	8d 4e 01             	lea    ecx,[esi+0x1]
c0003057:	eb 54                	jmp    c00030ad <get_fat+0x1ec>
c0003059:	80 f9 03             	cmp    cl,0x3
c000305c:	75 05                	jne    c0003063 <get_fat+0x1a2>
c000305e:	39 6b 14             	cmp    DWORD PTR [ebx+0x14],ebp
c0003061:	77 f1                	ja     c0003054 <get_fat+0x193>
c0003063:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c0003068:	83 7b 18 00          	cmp    DWORD PTR [ebx+0x18],0x0
c000306c:	75 3f                	jne    c00030ad <get_fat+0x1ec>
c000306e:	31 c9                	xor    ecx,ecx
c0003070:	89 f2                	mov    edx,esi
c0003072:	89 f8                	mov    eax,edi
c0003074:	c1 ea 07             	shr    edx,0x7
c0003077:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c000307a:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c000307d:	e8 b7 f2 ff ff       	call   c0002339 <move_window>
c0003082:	85 c0                	test   eax,eax
c0003084:	0f 85 a3 fe ff ff    	jne    c0002f2d <get_fat+0x6c>
c000308a:	c1 e6 02             	shl    esi,0x2
c000308d:	81 e6 fc 01 00 00    	and    esi,0x1fc
c0003093:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0003097:	e8 cc ea ff ff       	call   c0001b68 <ld_dword>
c000309c:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00030a1:	89 c1                	mov    ecx,eax
c00030a3:	eb 08                	jmp    c00030ad <get_fat+0x1ec>
c00030a5:	b9 01 00 00 00       	mov    ecx,0x1
c00030aa:	89 c8                	mov    eax,ecx
c00030ac:	c3                   	ret    
c00030ad:	83 c4 1c             	add    esp,0x1c
c00030b0:	89 c8                	mov    eax,ecx
c00030b2:	5b                   	pop    ebx
c00030b3:	5e                   	pop    esi
c00030b4:	5f                   	pop    edi
c00030b5:	5d                   	pop    ebp
c00030b6:	c3                   	ret    

c00030b7 <dir_sdi>:
c00030b7:	55                   	push   ebp
c00030b8:	57                   	push   edi
c00030b9:	56                   	push   esi
c00030ba:	53                   	push   ebx
c00030bb:	89 c3                	mov    ebx,eax
c00030bd:	83 ec 1c             	sub    esp,0x1c
c00030c0:	8b 38                	mov    edi,DWORD PTR [eax]
c00030c2:	31 c0                	xor    eax,eax
c00030c4:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c00030c7:	0f 94 c0             	sete   al
c00030ca:	48                   	dec    eax
c00030cb:	25 00 00 20 f0       	and    eax,0xf0200000
c00030d0:	05 00 00 00 10       	add    eax,0x10000000
c00030d5:	39 d0                	cmp    eax,edx
c00030d7:	77 0a                	ja     c00030e3 <dir_sdi+0x2c>
c00030d9:	b8 02 00 00 00       	mov    eax,0x2
c00030de:	e9 c4 00 00 00       	jmp    c00031a7 <dir_sdi+0xf0>
c00030e3:	89 d6                	mov    esi,edx
c00030e5:	f6 c2 1f             	test   dl,0x1f
c00030e8:	75 ef                	jne    c00030d9 <dir_sdi+0x22>
c00030ea:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c00030ed:	89 53 28             	mov    DWORD PTR [ebx+0x28],edx
c00030f0:	85 c9                	test   ecx,ecx
c00030f2:	75 2d                	jne    c0003121 <dir_sdi+0x6a>
c00030f4:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c00030f7:	77 1b                	ja     c0003114 <dir_sdi+0x5d>
c00030f9:	89 f2                	mov    edx,esi
c00030fb:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c00030ff:	c1 ea 05             	shr    edx,0x5
c0003102:	39 c2                	cmp    edx,eax
c0003104:	73 d3                	jae    c00030d9 <dir_sdi+0x22>
c0003106:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c0003109:	8b 57 38             	mov    edx,DWORD PTR [edi+0x38]
c000310c:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000310f:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003112:	eb 4b                	jmp    c000315f <dir_sdi+0xa8>
c0003114:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c0003117:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c000311b:	85 c0                	test   eax,eax
c000311d:	74 da                	je     c00030f9 <dir_sdi+0x42>
c000311f:	89 c1                	mov    ecx,eax
c0003121:	0f b7 6f 0a          	movzx  ebp,WORD PTR [edi+0xa]
c0003125:	c1 e5 09             	shl    ebp,0x9
c0003128:	89 ca                	mov    edx,ecx
c000312a:	39 ee                	cmp    esi,ebp
c000312c:	72 1c                	jb     c000314a <dir_sdi+0x93>
c000312e:	89 d8                	mov    eax,ebx
c0003130:	e8 8c fd ff ff       	call   c0002ec1 <get_fat>
c0003135:	89 c1                	mov    ecx,eax
c0003137:	83 f8 ff             	cmp    eax,0xffffffff
c000313a:	74 66                	je     c00031a2 <dir_sdi+0xeb>
c000313c:	83 f8 01             	cmp    eax,0x1
c000313f:	76 98                	jbe    c00030d9 <dir_sdi+0x22>
c0003141:	39 47 1c             	cmp    DWORD PTR [edi+0x1c],eax
c0003144:	76 93                	jbe    c00030d9 <dir_sdi+0x22>
c0003146:	29 ee                	sub    esi,ebp
c0003148:	eb de                	jmp    c0003128 <dir_sdi+0x71>
c000314a:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000314e:	89 f8                	mov    eax,edi
c0003150:	e8 9f ec ff ff       	call   c0001df4 <clst2sect>
c0003155:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003159:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000315c:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000315f:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0003162:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0003165:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0003168:	89 d1                	mov    ecx,edx
c000316a:	09 c1                	or     ecx,eax
c000316c:	0f 84 67 ff ff ff    	je     c00030d9 <dir_sdi+0x22>
c0003172:	89 f1                	mov    ecx,esi
c0003174:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000317c:	c1 e9 09             	shr    ecx,0x9
c000317f:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0003183:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0003187:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000318b:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000318e:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0003194:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003197:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c000319b:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c000319e:	31 c0                	xor    eax,eax
c00031a0:	eb 05                	jmp    c00031a7 <dir_sdi+0xf0>
c00031a2:	b8 01 00 00 00       	mov    eax,0x1
c00031a7:	83 c4 1c             	add    esp,0x1c
c00031aa:	5b                   	pop    ebx
c00031ab:	5e                   	pop    esi
c00031ac:	5f                   	pop    edi
c00031ad:	5d                   	pop    ebp
c00031ae:	c3                   	ret    

c00031af <create_chain>:
c00031af:	55                   	push   ebp
c00031b0:	89 c5                	mov    ebp,eax
c00031b2:	57                   	push   edi
c00031b3:	56                   	push   esi
c00031b4:	53                   	push   ebx
c00031b5:	83 ec 1c             	sub    esp,0x1c
c00031b8:	85 d2                	test   edx,edx
c00031ba:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00031be:	8b 30                	mov    esi,DWORD PTR [eax]
c00031c0:	75 0e                	jne    c00031d0 <create_chain+0x21>
c00031c2:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c00031c5:	85 ff                	test   edi,edi
c00031c7:	74 39                	je     c0003202 <create_chain+0x53>
c00031c9:	39 7e 1c             	cmp    DWORD PTR [esi+0x1c],edi
c00031cc:	77 39                	ja     c0003207 <create_chain+0x58>
c00031ce:	eb 32                	jmp    c0003202 <create_chain+0x53>
c00031d0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00031d4:	e8 e8 fc ff ff       	call   c0002ec1 <get_fat>
c00031d9:	89 c3                	mov    ebx,eax
c00031db:	83 f8 01             	cmp    eax,0x1
c00031de:	77 0a                	ja     c00031ea <create_chain+0x3b>
c00031e0:	bb 01 00 00 00       	mov    ebx,0x1
c00031e5:	e9 ba 01 00 00       	jmp    c00033a4 <create_chain+0x1f5>
c00031ea:	83 f8 ff             	cmp    eax,0xffffffff
c00031ed:	0f 84 62 01 00 00    	je     c0003355 <create_chain+0x1a6>
c00031f3:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c00031f6:	0f 87 a8 01 00 00    	ja     c00033a4 <create_chain+0x1f5>
c00031fc:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0003200:	eb 05                	jmp    c0003207 <create_chain+0x58>
c0003202:	bf 01 00 00 00       	mov    edi,0x1
c0003207:	83 7e 18 00          	cmp    DWORD PTR [esi+0x18],0x0
c000320b:	75 07                	jne    c0003214 <create_chain+0x65>
c000320d:	31 db                	xor    ebx,ebx
c000320f:	e9 90 01 00 00       	jmp    c00033a4 <create_chain+0x1f5>
c0003214:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0003217:	75 74                	jne    c000328d <create_chain+0xde>
c0003219:	b9 01 00 00 00       	mov    ecx,0x1
c000321e:	89 fa                	mov    edx,edi
c0003220:	89 f0                	mov    eax,esi
c0003222:	e8 2d f9 ff ff       	call   c0002b54 <find_bitmap>
c0003227:	89 c3                	mov    ebx,eax
c0003229:	8d 40 ff             	lea    eax,[eax-0x1]
c000322c:	83 f8 fd             	cmp    eax,0xfffffffd
c000322f:	0f 87 6f 01 00 00    	ja     c00033a4 <create_chain+0x1f5>
c0003235:	83 ec 0c             	sub    esp,0xc
c0003238:	b9 01 00 00 00       	mov    ecx,0x1
c000323d:	6a 01                	push   0x1
c000323f:	89 da                	mov    edx,ebx
c0003241:	89 f0                	mov    eax,esi
c0003243:	e8 bf f9 ff ff       	call   c0002c07 <change_bitmap>
c0003248:	83 c4 10             	add    esp,0x10
c000324b:	83 f8 02             	cmp    eax,0x2
c000324e:	74 90                	je     c00031e0 <create_chain+0x31>
c0003250:	83 f8 01             	cmp    eax,0x1
c0003253:	0f 84 fc 00 00 00    	je     c0003355 <create_chain+0x1a6>
c0003259:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000325e:	75 09                	jne    c0003269 <create_chain+0xba>
c0003260:	c6 45 07 02          	mov    BYTE PTR [ebp+0x7],0x2
c0003264:	e9 0c 01 00 00       	jmp    c0003375 <create_chain+0x1c6>
c0003269:	80 7d 07 02          	cmp    BYTE PTR [ebp+0x7],0x2
c000326d:	0f 85 e7 00 00 00    	jne    c000335a <create_chain+0x1ab>
c0003273:	8d 57 01             	lea    edx,[edi+0x1]
c0003276:	39 da                	cmp    edx,ebx
c0003278:	0f 84 f7 00 00 00    	je     c0003375 <create_chain+0x1c6>
c000327e:	2b 7d 08             	sub    edi,DWORD PTR [ebp+0x8]
c0003281:	c6 45 07 03          	mov    BYTE PTR [ebp+0x7],0x3
c0003285:	89 7d 14             	mov    DWORD PTR [ebp+0x14],edi
c0003288:	e9 cd 00 00 00       	jmp    c000335a <create_chain+0x1ab>
c000328d:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c0003291:	75 41                	jne    c00032d4 <create_chain+0x125>
c0003293:	8d 5f 01             	lea    ebx,[edi+0x1]
c0003296:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c0003299:	77 05                	ja     c00032a0 <create_chain+0xf1>
c000329b:	bb 02 00 00 00       	mov    ebx,0x2
c00032a0:	89 da                	mov    edx,ebx
c00032a2:	89 e8                	mov    eax,ebp
c00032a4:	e8 18 fc ff ff       	call   c0002ec1 <get_fat>
c00032a9:	83 f8 01             	cmp    eax,0x1
c00032ac:	0f 84 2e ff ff ff    	je     c00031e0 <create_chain+0x31>
c00032b2:	83 f8 ff             	cmp    eax,0xffffffff
c00032b5:	0f 84 9a 00 00 00    	je     c0003355 <create_chain+0x1a6>
c00032bb:	85 c0                	test   eax,eax
c00032bd:	74 11                	je     c00032d0 <create_chain+0x121>
c00032bf:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00032c2:	83 f8 01             	cmp    eax,0x1
c00032c5:	76 0d                	jbe    c00032d4 <create_chain+0x125>
c00032c7:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c00032ca:	76 08                	jbe    c00032d4 <create_chain+0x125>
c00032cc:	89 c7                	mov    edi,eax
c00032ce:	eb 04                	jmp    c00032d4 <create_chain+0x125>
c00032d0:	85 db                	test   ebx,ebx
c00032d2:	75 38                	jne    c000330c <create_chain+0x15d>
c00032d4:	89 fb                	mov    ebx,edi
c00032d6:	43                   	inc    ebx
c00032d7:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c00032da:	77 0e                	ja     c00032ea <create_chain+0x13b>
c00032dc:	83 ff 01             	cmp    edi,0x1
c00032df:	0f 86 28 ff ff ff    	jbe    c000320d <create_chain+0x5e>
c00032e5:	bb 02 00 00 00       	mov    ebx,0x2
c00032ea:	89 da                	mov    edx,ebx
c00032ec:	89 e8                	mov    eax,ebp
c00032ee:	e8 ce fb ff ff       	call   c0002ec1 <get_fat>
c00032f3:	85 c0                	test   eax,eax
c00032f5:	74 15                	je     c000330c <create_chain+0x15d>
c00032f7:	83 f8 01             	cmp    eax,0x1
c00032fa:	0f 84 e0 fe ff ff    	je     c00031e0 <create_chain+0x31>
c0003300:	40                   	inc    eax
c0003301:	74 52                	je     c0003355 <create_chain+0x1a6>
c0003303:	39 fb                	cmp    ebx,edi
c0003305:	75 cf                	jne    c00032d6 <create_chain+0x127>
c0003307:	e9 01 ff ff ff       	jmp    c000320d <create_chain+0x5e>
c000330c:	83 c9 ff             	or     ecx,0xffffffff
c000330f:	89 da                	mov    edx,ebx
c0003311:	89 f0                	mov    eax,esi
c0003313:	e8 a4 f9 ff ff       	call   c0002cbc <put_fat>
c0003318:	85 c0                	test   eax,eax
c000331a:	75 32                	jne    c000334e <create_chain+0x19f>
c000331c:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003321:	74 11                	je     c0003334 <create_chain+0x185>
c0003323:	89 d9                	mov    ecx,ebx
c0003325:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0003329:	89 f0                	mov    eax,esi
c000332b:	e8 8c f9 ff ff       	call   c0002cbc <put_fat>
c0003330:	85 c0                	test   eax,eax
c0003332:	75 1a                	jne    c000334e <create_chain+0x19f>
c0003334:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0003337:	8b 4e 1c             	mov    ecx,DWORD PTR [esi+0x1c]
c000333a:	89 5e 14             	mov    DWORD PTR [esi+0x14],ebx
c000333d:	8d 51 fe             	lea    edx,[ecx-0x2]
c0003340:	39 d0                	cmp    eax,edx
c0003342:	77 04                	ja     c0003348 <create_chain+0x199>
c0003344:	48                   	dec    eax
c0003345:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c0003348:	80 4e 04 01          	or     BYTE PTR [esi+0x4],0x1
c000334c:	eb 56                	jmp    c00033a4 <create_chain+0x1f5>
c000334e:	48                   	dec    eax
c000334f:	0f 85 8b fe ff ff    	jne    c00031e0 <create_chain+0x31>
c0003355:	83 cb ff             	or     ebx,0xffffffff
c0003358:	eb 4a                	jmp    c00033a4 <create_chain+0x1f5>
c000335a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000335e:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0003361:	41                   	inc    ecx
c0003362:	39 d9                	cmp    ecx,ebx
c0003364:	75 19                	jne    c000337f <create_chain+0x1d0>
c0003366:	b9 02 00 00 00       	mov    ecx,0x2
c000336b:	85 d2                	test   edx,edx
c000336d:	74 03                	je     c0003372 <create_chain+0x1c3>
c000336f:	8d 4a 01             	lea    ecx,[edx+0x1]
c0003372:	89 4d 18             	mov    DWORD PTR [ebp+0x18],ecx
c0003375:	85 c0                	test   eax,eax
c0003377:	0f 85 63 fe ff ff    	jne    c00031e0 <create_chain+0x31>
c000337d:	eb b5                	jmp    c0003334 <create_chain+0x185>
c000337f:	85 d2                	test   edx,edx
c0003381:	75 07                	jne    c000338a <create_chain+0x1db>
c0003383:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c000338a:	89 d9                	mov    ecx,ebx
c000338c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0003390:	89 e8                	mov    eax,ebp
c0003392:	e8 bb fa ff ff       	call   c0002e52 <fill_last_frag>
c0003397:	85 c0                	test   eax,eax
c0003399:	75 b3                	jne    c000334e <create_chain+0x19f>
c000339b:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c00033a2:	eb 90                	jmp    c0003334 <create_chain+0x185>
c00033a4:	83 c4 1c             	add    esp,0x1c
c00033a7:	89 d8                	mov    eax,ebx
c00033a9:	5b                   	pop    ebx
c00033aa:	5e                   	pop    esi
c00033ab:	5f                   	pop    edi
c00033ac:	5d                   	pop    ebp
c00033ad:	c3                   	ret    

c00033ae <remove_chain>:
c00033ae:	55                   	push   ebp
c00033af:	57                   	push   edi
c00033b0:	56                   	push   esi
c00033b1:	53                   	push   ebx
c00033b2:	83 ec 1c             	sub    esp,0x1c
c00033b5:	83 fa 01             	cmp    edx,0x1
c00033b8:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00033bc:	8b 18                	mov    ebx,DWORD PTR [eax]
c00033be:	77 0a                	ja     c00033ca <remove_chain+0x1c>
c00033c0:	b8 02 00 00 00       	mov    eax,0x2
c00033c5:	e9 24 01 00 00       	jmp    c00034ee <remove_chain+0x140>
c00033ca:	89 d6                	mov    esi,edx
c00033cc:	39 53 1c             	cmp    DWORD PTR [ebx+0x1c],edx
c00033cf:	76 ef                	jbe    c00033c0 <remove_chain+0x12>
c00033d1:	89 c7                	mov    edi,eax
c00033d3:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00033d8:	75 06                	jne    c00033e0 <remove_chain+0x32>
c00033da:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00033de:	eb 54                	jmp    c0003434 <remove_chain+0x86>
c00033e0:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c00033e3:	75 06                	jne    c00033eb <remove_chain+0x3d>
c00033e5:	80 78 07 02          	cmp    BYTE PTR [eax+0x7],0x2
c00033e9:	74 ef                	je     c00033da <remove_chain+0x2c>
c00033eb:	83 c9 ff             	or     ecx,0xffffffff
c00033ee:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00033f2:	89 d8                	mov    eax,ebx
c00033f4:	e8 c3 f8 ff ff       	call   c0002cbc <put_fat>
c00033f9:	85 c0                	test   eax,eax
c00033fb:	74 dd                	je     c00033da <remove_chain+0x2c>
c00033fd:	e9 ec 00 00 00       	jmp    c00034ee <remove_chain+0x140>
c0003402:	83 f8 01             	cmp    eax,0x1
c0003405:	74 b9                	je     c00033c0 <remove_chain+0x12>
c0003407:	83 f8 ff             	cmp    eax,0xffffffff
c000340a:	74 6d                	je     c0003479 <remove_chain+0xcb>
c000340c:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c000340f:	75 6f                	jne    c0003480 <remove_chain+0xd2>
c0003411:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0003414:	8b 4b 1c             	mov    ecx,DWORD PTR [ebx+0x1c]
c0003417:	8d 51 fe             	lea    edx,[ecx-0x2]
c000341a:	39 d0                	cmp    eax,edx
c000341c:	73 08                	jae    c0003426 <remove_chain+0x78>
c000341e:	40                   	inc    eax
c000341f:	80 4b 04 01          	or     BYTE PTR [ebx+0x4],0x1
c0003423:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0003426:	8d 4e 01             	lea    ecx,[esi+0x1]
c0003429:	39 e9                	cmp    ecx,ebp
c000342b:	75 64                	jne    c0003491 <remove_chain+0xe3>
c000342d:	89 ee                	mov    esi,ebp
c000342f:	39 6b 1c             	cmp    DWORD PTR [ebx+0x1c],ebp
c0003432:	76 0f                	jbe    c0003443 <remove_chain+0x95>
c0003434:	89 f2                	mov    edx,esi
c0003436:	89 f8                	mov    eax,edi
c0003438:	e8 84 fa ff ff       	call   c0002ec1 <get_fat>
c000343d:	89 c5                	mov    ebp,eax
c000343f:	85 c0                	test   eax,eax
c0003441:	75 bf                	jne    c0003402 <remove_chain+0x54>
c0003443:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c0003446:	0f 85 a0 00 00 00    	jne    c00034ec <remove_chain+0x13e>
c000344c:	eb 6c                	jmp    c00034ba <remove_chain+0x10c>
c000344e:	8a 47 07             	mov    al,BYTE PTR [edi+0x7]
c0003451:	84 c0                	test   al,al
c0003453:	75 7d                	jne    c00034d2 <remove_chain+0x124>
c0003455:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c0003458:	3b 5c 24 08          	cmp    ebx,DWORD PTR [esp+0x8]
c000345c:	0f 84 86 00 00 00    	je     c00034e8 <remove_chain+0x13a>
c0003462:	89 da                	mov    edx,ebx
c0003464:	89 f8                	mov    eax,edi
c0003466:	e8 56 fa ff ff       	call   c0002ec1 <get_fat>
c000346b:	83 f8 01             	cmp    eax,0x1
c000346e:	0f 86 4c ff ff ff    	jbe    c00033c0 <remove_chain+0x12>
c0003474:	83 f8 ff             	cmp    eax,0xffffffff
c0003477:	75 4e                	jne    c00034c7 <remove_chain+0x119>
c0003479:	b8 01 00 00 00       	mov    eax,0x1
c000347e:	eb 6e                	jmp    c00034ee <remove_chain+0x140>
c0003480:	31 c9                	xor    ecx,ecx
c0003482:	89 f2                	mov    edx,esi
c0003484:	89 d8                	mov    eax,ebx
c0003486:	e8 31 f8 ff ff       	call   c0002cbc <put_fat>
c000348b:	85 c0                	test   eax,eax
c000348d:	74 82                	je     c0003411 <remove_chain+0x63>
c000348f:	eb 5d                	jmp    c00034ee <remove_chain+0x140>
c0003491:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c0003494:	75 1b                	jne    c00034b1 <remove_chain+0x103>
c0003496:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c000349a:	89 d8                	mov    eax,ebx
c000349c:	83 ec 0c             	sub    esp,0xc
c000349f:	6a 00                	push   0x0
c00034a1:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00034a5:	e8 5d f7 ff ff       	call   c0002c07 <change_bitmap>
c00034aa:	83 c4 10             	add    esp,0x10
c00034ad:	85 c0                	test   eax,eax
c00034af:	75 3d                	jne    c00034ee <remove_chain+0x140>
c00034b1:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c00034b5:	e9 73 ff ff ff       	jmp    c000342d <remove_chain+0x7f>
c00034ba:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00034bf:	75 8d                	jne    c000344e <remove_chain+0xa0>
c00034c1:	c6 47 07 00          	mov    BYTE PTR [edi+0x7],0x0
c00034c5:	eb 25                	jmp    c00034ec <remove_chain+0x13e>
c00034c7:	8d 53 01             	lea    edx,[ebx+0x1]
c00034ca:	89 c3                	mov    ebx,eax
c00034cc:	39 c2                	cmp    edx,eax
c00034ce:	74 88                	je     c0003458 <remove_chain+0xaa>
c00034d0:	eb 1a                	jmp    c00034ec <remove_chain+0x13e>
c00034d2:	3c 03                	cmp    al,0x3
c00034d4:	75 16                	jne    c00034ec <remove_chain+0x13e>
c00034d6:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c00034d9:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00034dd:	77 0d                	ja     c00034ec <remove_chain+0x13e>
c00034df:	03 47 14             	add    eax,DWORD PTR [edi+0x14]
c00034e2:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00034e6:	72 04                	jb     c00034ec <remove_chain+0x13e>
c00034e8:	c6 47 07 02          	mov    BYTE PTR [edi+0x7],0x2
c00034ec:	31 c0                	xor    eax,eax
c00034ee:	83 c4 1c             	add    esp,0x1c
c00034f1:	5b                   	pop    ebx
c00034f2:	5e                   	pop    esi
c00034f3:	5f                   	pop    edi
c00034f4:	5d                   	pop    ebp
c00034f5:	c3                   	ret    

c00034f6 <dir_clear>:
c00034f6:	55                   	push   ebp
c00034f7:	57                   	push   edi
c00034f8:	56                   	push   esi
c00034f9:	89 c6                	mov    esi,eax
c00034fb:	53                   	push   ebx
c00034fc:	83 ec 1c             	sub    esp,0x1c
c00034ff:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0003503:	e8 9d ed ff ff       	call   c00022a5 <sync_window>
c0003508:	85 c0                	test   eax,eax
c000350a:	0f 85 de 00 00 00    	jne    c00035ee <dir_clear+0xf8>
c0003510:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003514:	89 f0                	mov    eax,esi
c0003516:	8d 6e 54             	lea    ebp,[esi+0x54]
c0003519:	e8 d6 e8 ff ff       	call   c0001df4 <clst2sect>
c000351e:	b9 00 02 00 00       	mov    ecx,0x200
c0003523:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003527:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000352b:	89 46 4c             	mov    DWORD PTR [esi+0x4c],eax
c000352e:	89 56 50             	mov    DWORD PTR [esi+0x50],edx
c0003531:	89 e8                	mov    eax,ebp
c0003533:	31 d2                	xor    edx,edx
c0003535:	e8 b5 e6 ff ff       	call   c0001bef <mem_set>
c000353a:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c000353e:	c1 e3 09             	shl    ebx,0x9
c0003541:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c0003547:	76 1f                	jbe    c0003568 <dir_clear+0x72>
c0003549:	bb 00 80 00 00       	mov    ebx,0x8000
c000354e:	eb 18                	jmp    c0003568 <dir_clear+0x72>
c0003550:	83 ec 0c             	sub    esp,0xc
c0003553:	53                   	push   ebx
c0003554:	e8 6b 50 00 00       	call   c00085c4 <ff_memalloc>
c0003559:	83 c4 10             	add    esp,0x10
c000355c:	89 c7                	mov    edi,eax
c000355e:	85 c0                	test   eax,eax
c0003560:	0f 85 8f 00 00 00    	jne    c00035f5 <dir_clear+0xff>
c0003566:	d1 eb                	shr    ebx,1
c0003568:	81 fb 00 02 00 00    	cmp    ebx,0x200
c000356e:	77 e0                	ja     c0003550 <dir_clear+0x5a>
c0003570:	31 db                	xor    ebx,ebx
c0003572:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0003576:	39 d8                	cmp    eax,ebx
c0003578:	76 66                	jbe    c00035e0 <dir_clear+0xea>
c000357a:	83 ec 0c             	sub    esp,0xc
c000357d:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0003581:	6a 01                	push   0x1
c0003583:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0003587:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000358b:	55                   	push   ebp
c000358c:	50                   	push   eax
c000358d:	e8 94 e5 ff ff       	call   c0001b26 <disk_write>
c0003592:	83 44 24 28 01       	add    DWORD PTR [esp+0x28],0x1
c0003597:	83 54 24 2c 00       	adc    DWORD PTR [esp+0x2c],0x0
c000359c:	83 c4 20             	add    esp,0x20
c000359f:	85 c0                	test   eax,eax
c00035a1:	75 3d                	jne    c00035e0 <dir_clear+0xea>
c00035a3:	43                   	inc    ebx
c00035a4:	eb cc                	jmp    c0003572 <dir_clear+0x7c>
c00035a6:	83 ec 0c             	sub    esp,0xc
c00035a9:	31 d2                	xor    edx,edx
c00035ab:	55                   	push   ebp
c00035ac:	89 d8                	mov    eax,ebx
c00035ae:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00035b2:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c00035b6:	52                   	push   edx
c00035b7:	50                   	push   eax
c00035b8:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00035bc:	57                   	push   edi
c00035bd:	50                   	push   eax
c00035be:	e8 63 e5 ff ff       	call   c0001b26 <disk_write>
c00035c3:	83 c4 20             	add    esp,0x20
c00035c6:	85 c0                	test   eax,eax
c00035c8:	75 0a                	jne    c00035d4 <dir_clear+0xde>
c00035ca:	01 eb                	add    ebx,ebp
c00035cc:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00035d0:	39 d8                	cmp    eax,ebx
c00035d2:	77 d2                	ja     c00035a6 <dir_clear+0xb0>
c00035d4:	83 ec 0c             	sub    esp,0xc
c00035d7:	57                   	push   edi
c00035d8:	e8 ff 4f 00 00       	call   c00085dc <ff_memfree>
c00035dd:	83 c4 10             	add    esp,0x10
c00035e0:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00035e4:	39 d8                	cmp    eax,ebx
c00035e6:	0f 95 c0             	setne  al
c00035e9:	0f b6 c0             	movzx  eax,al
c00035ec:	eb 19                	jmp    c0003607 <dir_clear+0x111>
c00035ee:	b8 01 00 00 00       	mov    eax,0x1
c00035f3:	eb 12                	jmp    c0003607 <dir_clear+0x111>
c00035f5:	89 d9                	mov    ecx,ebx
c00035f7:	31 d2                	xor    edx,edx
c00035f9:	c1 eb 09             	shr    ebx,0x9
c00035fc:	e8 ee e5 ff ff       	call   c0001bef <mem_set>
c0003601:	89 dd                	mov    ebp,ebx
c0003603:	31 db                	xor    ebx,ebx
c0003605:	eb c5                	jmp    c00035cc <dir_clear+0xd6>
c0003607:	83 c4 1c             	add    esp,0x1c
c000360a:	5b                   	pop    ebx
c000360b:	5e                   	pop    esi
c000360c:	5f                   	pop    edi
c000360d:	5d                   	pop    ebp
c000360e:	c3                   	ret    

c000360f <dir_next>:
c000360f:	55                   	push   ebp
c0003610:	57                   	push   edi
c0003611:	56                   	push   esi
c0003612:	53                   	push   ebx
c0003613:	89 c3                	mov    ebx,eax
c0003615:	83 ec 1c             	sub    esp,0x1c
c0003618:	8b 28                	mov    ebp,DWORD PTR [eax]
c000361a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000361e:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0003621:	8d 78 20             	lea    edi,[eax+0x20]
c0003624:	31 c0                	xor    eax,eax
c0003626:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c000362a:	0f 94 c0             	sete   al
c000362d:	48                   	dec    eax
c000362e:	25 00 00 20 f0       	and    eax,0xf0200000
c0003633:	05 00 00 00 10       	add    eax,0x10000000
c0003638:	39 f8                	cmp    eax,edi
c000363a:	77 0e                	ja     c000364a <dir_next+0x3b>
c000363c:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003643:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c000364a:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000364d:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003650:	b8 04 00 00 00       	mov    eax,0x4
c0003655:	89 ce                	mov    esi,ecx
c0003657:	09 d6                	or     esi,edx
c0003659:	0f 84 da 00 00 00    	je     c0003739 <dir_next+0x12a>
c000365f:	89 f8                	mov    eax,edi
c0003661:	25 ff 01 00 00       	and    eax,0x1ff
c0003666:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000366a:	0f 85 b9 00 00 00    	jne    c0003729 <dir_next+0x11a>
c0003670:	83 c2 01             	add    edx,0x1
c0003673:	83 d1 00             	adc    ecx,0x0
c0003676:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0003679:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c000367c:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c000367f:	85 d2                	test   edx,edx
c0003681:	75 29                	jne    c00036ac <dir_next+0x9d>
c0003683:	89 fa                	mov    edx,edi
c0003685:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c0003689:	c1 ea 05             	shr    edx,0x5
c000368c:	39 c2                	cmp    edx,eax
c000368e:	0f 82 95 00 00 00    	jb     c0003729 <dir_next+0x11a>
c0003694:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c000369b:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c00036a2:	b8 04 00 00 00       	mov    eax,0x4
c00036a7:	e9 8d 00 00 00       	jmp    c0003739 <dir_next+0x12a>
c00036ac:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c00036b0:	89 f9                	mov    ecx,edi
c00036b2:	48                   	dec    eax
c00036b3:	c1 e9 09             	shr    ecx,0x9
c00036b6:	85 c8                	test   eax,ecx
c00036b8:	75 6f                	jne    c0003729 <dir_next+0x11a>
c00036ba:	89 d8                	mov    eax,ebx
c00036bc:	e8 00 f8 ff ff       	call   c0002ec1 <get_fat>
c00036c1:	89 c6                	mov    esi,eax
c00036c3:	83 f8 01             	cmp    eax,0x1
c00036c6:	77 07                	ja     c00036cf <dir_next+0xc0>
c00036c8:	b8 02 00 00 00       	mov    eax,0x2
c00036cd:	eb 6a                	jmp    c0003739 <dir_next+0x12a>
c00036cf:	83 f8 ff             	cmp    eax,0xffffffff
c00036d2:	75 07                	jne    c00036db <dir_next+0xcc>
c00036d4:	b8 01 00 00 00       	mov    eax,0x1
c00036d9:	eb 5e                	jmp    c0003739 <dir_next+0x12a>
c00036db:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c00036de:	77 37                	ja     c0003717 <dir_next+0x108>
c00036e0:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00036e5:	74 ad                	je     c0003694 <dir_next+0x85>
c00036e7:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00036ea:	89 d8                	mov    eax,ebx
c00036ec:	e8 be fa ff ff       	call   c00031af <create_chain>
c00036f1:	89 c6                	mov    esi,eax
c00036f3:	b8 07 00 00 00       	mov    eax,0x7
c00036f8:	85 f6                	test   esi,esi
c00036fa:	74 3d                	je     c0003739 <dir_next+0x12a>
c00036fc:	83 fe 01             	cmp    esi,0x1
c00036ff:	74 c7                	je     c00036c8 <dir_next+0xb9>
c0003701:	83 fe ff             	cmp    esi,0xffffffff
c0003704:	74 ce                	je     c00036d4 <dir_next+0xc5>
c0003706:	89 f2                	mov    edx,esi
c0003708:	89 e8                	mov    eax,ebp
c000370a:	e8 e7 fd ff ff       	call   c00034f6 <dir_clear>
c000370f:	85 c0                	test   eax,eax
c0003711:	75 c1                	jne    c00036d4 <dir_next+0xc5>
c0003713:	80 4b 07 04          	or     BYTE PTR [ebx+0x7],0x4
c0003717:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c000371a:	89 f2                	mov    edx,esi
c000371c:	89 e8                	mov    eax,ebp
c000371e:	e8 d1 e6 ff ff       	call   c0001df4 <clst2sect>
c0003723:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003726:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003729:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000372d:	89 7b 28             	mov    DWORD PTR [ebx+0x28],edi
c0003730:	8d 44 05 54          	lea    eax,[ebp+eax*1+0x54]
c0003734:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0003737:	31 c0                	xor    eax,eax
c0003739:	83 c4 1c             	add    esp,0x1c
c000373c:	5b                   	pop    ebx
c000373d:	5e                   	pop    esi
c000373e:	5f                   	pop    edi
c000373f:	5d                   	pop    ebp
c0003740:	c3                   	ret    

c0003741 <load_xdir>:
c0003741:	55                   	push   ebp
c0003742:	57                   	push   edi
c0003743:	56                   	push   esi
c0003744:	89 c6                	mov    esi,eax
c0003746:	53                   	push   ebx
c0003747:	83 ec 1c             	sub    esp,0x1c
c000374a:	8b 00                	mov    eax,DWORD PTR [eax]
c000374c:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000374f:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0003752:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0003755:	e8 df eb ff ff       	call   c0002339 <move_window>
c000375a:	89 c3                	mov    ebx,eax
c000375c:	85 c0                	test   eax,eax
c000375e:	0f 85 0c 01 00 00    	jne    c0003870 <load_xdir+0x12f>
c0003764:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c0003767:	80 3a 85             	cmp    BYTE PTR [edx],0x85
c000376a:	0f 85 fb 00 00 00    	jne    c000386b <load_xdir+0x12a>
c0003770:	89 f8                	mov    eax,edi
c0003772:	b9 20 00 00 00       	mov    ecx,0x20
c0003777:	e8 5e e4 ff ff       	call   c0001bda <mem_cpy>
c000377c:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c0003780:	40                   	inc    eax
c0003781:	c1 e0 05             	shl    eax,0x5
c0003784:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003788:	83 e8 60             	sub    eax,0x60
c000378b:	3d 00 02 00 00       	cmp    eax,0x200
c0003790:	0f 87 d5 00 00 00    	ja     c000386b <load_xdir+0x12a>
c0003796:	31 d2                	xor    edx,edx
c0003798:	89 f0                	mov    eax,esi
c000379a:	e8 70 fe ff ff       	call   c000360f <dir_next>
c000379f:	89 c3                	mov    ebx,eax
c00037a1:	83 f8 04             	cmp    eax,0x4
c00037a4:	0f 84 c1 00 00 00    	je     c000386b <load_xdir+0x12a>
c00037aa:	85 c0                	test   eax,eax
c00037ac:	0f 85 be 00 00 00    	jne    c0003870 <load_xdir+0x12f>
c00037b2:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c00037b5:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c00037b8:	8b 06                	mov    eax,DWORD PTR [esi]
c00037ba:	e8 7a eb ff ff       	call   c0002339 <move_window>
c00037bf:	89 c3                	mov    ebx,eax
c00037c1:	85 c0                	test   eax,eax
c00037c3:	0f 85 a7 00 00 00    	jne    c0003870 <load_xdir+0x12f>
c00037c9:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c00037cc:	80 3a c0             	cmp    BYTE PTR [edx],0xc0
c00037cf:	0f 85 96 00 00 00    	jne    c000386b <load_xdir+0x12a>
c00037d5:	8d 47 20             	lea    eax,[edi+0x20]
c00037d8:	b9 20 00 00 00       	mov    ecx,0x20
c00037dd:	e8 f8 e3 ff ff       	call   c0001bda <mem_cpy>
c00037e2:	31 d2                	xor    edx,edx
c00037e4:	0f b6 47 23          	movzx  eax,BYTE PTR [edi+0x23]
c00037e8:	b9 0f 00 00 00       	mov    ecx,0xf
c00037ed:	83 c0 2c             	add    eax,0x2c
c00037f0:	f7 f1                	div    ecx
c00037f2:	c1 e0 05             	shl    eax,0x5
c00037f5:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00037f9:	77 70                	ja     c000386b <load_xdir+0x12a>
c00037fb:	bd 40 00 00 00       	mov    ebp,0x40
c0003800:	31 d2                	xor    edx,edx
c0003802:	89 f0                	mov    eax,esi
c0003804:	e8 06 fe ff ff       	call   c000360f <dir_next>
c0003809:	89 c3                	mov    ebx,eax
c000380b:	83 f8 04             	cmp    eax,0x4
c000380e:	74 5b                	je     c000386b <load_xdir+0x12a>
c0003810:	85 c0                	test   eax,eax
c0003812:	75 5c                	jne    c0003870 <load_xdir+0x12f>
c0003814:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c0003817:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c000381a:	8b 06                	mov    eax,DWORD PTR [esi]
c000381c:	e8 18 eb ff ff       	call   c0002339 <move_window>
c0003821:	89 c3                	mov    ebx,eax
c0003823:	85 c0                	test   eax,eax
c0003825:	75 49                	jne    c0003870 <load_xdir+0x12f>
c0003827:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c000382a:	80 3a c1             	cmp    BYTE PTR [edx],0xc1
c000382d:	75 3c                	jne    c000386b <load_xdir+0x12a>
c000382f:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c0003835:	77 0d                	ja     c0003844 <load_xdir+0x103>
c0003837:	8d 04 2f             	lea    eax,[edi+ebp*1]
c000383a:	b9 20 00 00 00       	mov    ecx,0x20
c000383f:	e8 96 e3 ff ff       	call   c0001bda <mem_cpy>
c0003844:	83 c5 20             	add    ebp,0x20
c0003847:	39 6c 24 0c          	cmp    DWORD PTR [esp+0xc],ebp
c000384b:	77 b3                	ja     c0003800 <load_xdir+0xbf>
c000384d:	81 fd 60 02 00 00    	cmp    ebp,0x260
c0003853:	77 1b                	ja     c0003870 <load_xdir+0x12f>
c0003855:	89 f8                	mov    eax,edi
c0003857:	e8 cd e7 ff ff       	call   c0002029 <xdir_sum>
c000385c:	89 c1                	mov    ecx,eax
c000385e:	8d 47 02             	lea    eax,[edi+0x2]
c0003861:	e8 f5 e2 ff ff       	call   c0001b5b <ld_word>
c0003866:	66 39 c1             	cmp    cx,ax
c0003869:	74 05                	je     c0003870 <load_xdir+0x12f>
c000386b:	bb 02 00 00 00       	mov    ebx,0x2
c0003870:	83 c4 1c             	add    esp,0x1c
c0003873:	89 d8                	mov    eax,ebx
c0003875:	5b                   	pop    ebx
c0003876:	5e                   	pop    esi
c0003877:	5f                   	pop    edi
c0003878:	5d                   	pop    ebp
c0003879:	c3                   	ret    

c000387a <load_obj_xdir>:
c000387a:	53                   	push   ebx
c000387b:	89 c3                	mov    ebx,eax
c000387d:	83 ec 08             	sub    esp,0x8
c0003880:	8b 02                	mov    eax,DWORD PTR [edx]
c0003882:	89 03                	mov    DWORD PTR [ebx],eax
c0003884:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c0003887:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000388a:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c000388d:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0003890:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0003893:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000389a:	30 c0                	xor    al,al
c000389c:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c00038a3:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c00038a6:	89 d8                	mov    eax,ebx
c00038a8:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c00038ab:	89 53 48             	mov    DWORD PTR [ebx+0x48],edx
c00038ae:	e8 04 f8 ff ff       	call   c00030b7 <dir_sdi>
c00038b3:	85 c0                	test   eax,eax
c00038b5:	75 0b                	jne    c00038c2 <load_obj_xdir+0x48>
c00038b7:	89 d8                	mov    eax,ebx
c00038b9:	83 c4 08             	add    esp,0x8
c00038bc:	5b                   	pop    ebx
c00038bd:	e9 7f fe ff ff       	jmp    c0003741 <load_xdir>
c00038c2:	83 c4 08             	add    esp,0x8
c00038c5:	5b                   	pop    ebx
c00038c6:	c3                   	ret    

c00038c7 <dir_read>:
c00038c7:	55                   	push   ebp
c00038c8:	bd 04 00 00 00       	mov    ebp,0x4
c00038cd:	57                   	push   edi
c00038ce:	56                   	push   esi
c00038cf:	be ff ff ff ff       	mov    esi,0xffffffff
c00038d4:	53                   	push   ebx
c00038d5:	89 c3                	mov    ebx,eax
c00038d7:	83 ec 1c             	sub    esp,0x1c
c00038da:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00038de:	8b 38                	mov    edi,DWORD PTR [eax]
c00038e0:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c00038e5:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00038e8:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00038eb:	89 c8                	mov    eax,ecx
c00038ed:	09 d0                	or     eax,edx
c00038ef:	0f 84 25 01 00 00    	je     c0003a1a <dir_read+0x153>
c00038f5:	89 f8                	mov    eax,edi
c00038f7:	e8 3d ea ff ff       	call   c0002339 <move_window>
c00038fc:	89 c5                	mov    ebp,eax
c00038fe:	85 c0                	test   eax,eax
c0003900:	0f 85 23 01 00 00    	jne    c0003a29 <dir_read+0x162>
c0003906:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003909:	8a 0a                	mov    cl,BYTE PTR [edx]
c000390b:	84 c9                	test   cl,cl
c000390d:	0f 84 11 01 00 00    	je     c0003a24 <dir_read+0x15d>
c0003913:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003916:	75 48                	jne    c0003960 <dir_read+0x99>
c0003918:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000391d:	74 10                	je     c000392f <dir_read+0x68>
c000391f:	80 f9 83             	cmp    cl,0x83
c0003922:	0f 85 dd 00 00 00    	jne    c0003a05 <dir_read+0x13e>
c0003928:	31 ed                	xor    ebp,ebp
c000392a:	e9 08 01 00 00       	jmp    c0003a37 <dir_read+0x170>
c000392f:	80 f9 85             	cmp    cl,0x85
c0003932:	0f 85 cd 00 00 00    	jne    c0003a05 <dir_read+0x13e>
c0003938:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c000393b:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c000393e:	89 d8                	mov    eax,ebx
c0003940:	e8 fc fd ff ff       	call   c0003741 <load_xdir>
c0003945:	89 c5                	mov    ebp,eax
c0003947:	85 c0                	test   eax,eax
c0003949:	0f 85 da 00 00 00    	jne    c0003a29 <dir_read+0x162>
c000394f:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0003952:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c0003955:	83 e0 3f             	and    eax,0x3f
c0003958:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c000395b:	e9 d7 00 00 00       	jmp    c0003a37 <dir_read+0x170>
c0003960:	8a 42 0b             	mov    al,BYTE PTR [edx+0xb]
c0003963:	83 e0 3f             	and    eax,0x3f
c0003966:	80 f9 2e             	cmp    cl,0x2e
c0003969:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c000396d:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003970:	0f 84 8a 00 00 00    	je     c0003a00 <dir_read+0x139>
c0003976:	80 f9 e5             	cmp    cl,0xe5
c0003979:	0f 84 81 00 00 00    	je     c0003a00 <dir_read+0x139>
c000397f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003983:	83 e0 1f             	and    eax,0x1f
c0003986:	83 f8 08             	cmp    eax,0x8
c0003989:	0f 94 c0             	sete   al
c000398c:	0f b6 c0             	movzx  eax,al
c000398f:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0003993:	75 6b                	jne    c0003a00 <dir_read+0x139>
c0003995:	80 7c 24 08 0f       	cmp    BYTE PTR [esp+0x8],0xf
c000399a:	75 44                	jne    c00039e0 <dir_read+0x119>
c000399c:	f6 c1 40             	test   cl,0x40
c000399f:	74 12                	je     c00039b3 <dir_read+0xec>
c00039a1:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c00039a4:	83 e1 bf             	and    ecx,0xffffffbf
c00039a7:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c00039ab:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00039ae:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c00039b1:	eb 06                	jmp    c00039b9 <dir_read+0xf2>
c00039b3:	89 f0                	mov    eax,esi
c00039b5:	38 c8                	cmp    al,cl
c00039b7:	75 47                	jne    c0003a00 <dir_read+0x139>
c00039b9:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c00039bd:	be ff ff ff ff       	mov    esi,0xffffffff
c00039c2:	38 42 0d             	cmp    BYTE PTR [edx+0xd],al
c00039c5:	75 3e                	jne    c0003a05 <dir_read+0x13e>
c00039c7:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c00039cb:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c00039ce:	e8 8a e4 ff ff       	call   c0001e5d <pick_lfn>
c00039d3:	85 c0                	test   eax,eax
c00039d5:	74 2e                	je     c0003a05 <dir_read+0x13e>
c00039d7:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c00039db:	8d 71 ff             	lea    esi,[ecx-0x1]
c00039de:	eb 25                	jmp    c0003a05 <dir_read+0x13e>
c00039e0:	89 f0                	mov    eax,esi
c00039e2:	84 c0                	test   al,al
c00039e4:	75 11                	jne    c00039f7 <dir_read+0x130>
c00039e6:	89 d0                	mov    eax,edx
c00039e8:	e8 2a e6 ff ff       	call   c0002017 <sum_sfn>
c00039ed:	3a 44 24 07          	cmp    al,BYTE PTR [esp+0x7]
c00039f1:	0f 84 31 ff ff ff    	je     c0003928 <dir_read+0x61>
c00039f7:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c00039fe:	eb 37                	jmp    c0003a37 <dir_read+0x170>
c0003a00:	be ff ff ff ff       	mov    esi,0xffffffff
c0003a05:	31 d2                	xor    edx,edx
c0003a07:	89 d8                	mov    eax,ebx
c0003a09:	e8 01 fc ff ff       	call   c000360f <dir_next>
c0003a0e:	89 c5                	mov    ebp,eax
c0003a10:	85 c0                	test   eax,eax
c0003a12:	0f 84 cd fe ff ff    	je     c00038e5 <dir_read+0x1e>
c0003a18:	eb 0f                	jmp    c0003a29 <dir_read+0x162>
c0003a1a:	85 ed                	test   ebp,ebp
c0003a1c:	0f 84 06 ff ff ff    	je     c0003928 <dir_read+0x61>
c0003a22:	eb 05                	jmp    c0003a29 <dir_read+0x162>
c0003a24:	bd 04 00 00 00       	mov    ebp,0x4
c0003a29:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003a30:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003a37:	83 c4 1c             	add    esp,0x1c
c0003a3a:	89 e8                	mov    eax,ebp
c0003a3c:	5b                   	pop    ebx
c0003a3d:	5e                   	pop    esi
c0003a3e:	5f                   	pop    edi
c0003a3f:	5d                   	pop    ebp
c0003a40:	c3                   	ret    

c0003a41 <dir_alloc>:
c0003a41:	55                   	push   ebp
c0003a42:	89 d5                	mov    ebp,edx
c0003a44:	57                   	push   edi
c0003a45:	31 d2                	xor    edx,edx
c0003a47:	56                   	push   esi
c0003a48:	53                   	push   ebx
c0003a49:	89 c3                	mov    ebx,eax
c0003a4b:	83 ec 0c             	sub    esp,0xc
c0003a4e:	8b 38                	mov    edi,DWORD PTR [eax]
c0003a50:	e8 62 f6 ff ff       	call   c00030b7 <dir_sdi>
c0003a55:	85 c0                	test   eax,eax
c0003a57:	75 4e                	jne    c0003aa7 <dir_alloc+0x66>
c0003a59:	31 f6                	xor    esi,esi
c0003a5b:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003a5e:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003a61:	89 f8                	mov    eax,edi
c0003a63:	e8 d1 e8 ff ff       	call   c0002339 <move_window>
c0003a68:	85 c0                	test   eax,eax
c0003a6a:	75 3b                	jne    c0003aa7 <dir_alloc+0x66>
c0003a6c:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003a6f:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003a72:	8a 12                	mov    dl,BYTE PTR [edx]
c0003a74:	75 07                	jne    c0003a7d <dir_alloc+0x3c>
c0003a76:	f7 d2                	not    edx
c0003a78:	c0 ea 07             	shr    dl,0x7
c0003a7b:	eb 0d                	jmp    c0003a8a <dir_alloc+0x49>
c0003a7d:	84 d2                	test   dl,dl
c0003a7f:	0f 94 c1             	sete   cl
c0003a82:	80 fa e5             	cmp    dl,0xe5
c0003a85:	0f 94 c2             	sete   dl
c0003a88:	09 ca                	or     edx,ecx
c0003a8a:	84 d2                	test   dl,dl
c0003a8c:	74 07                	je     c0003a95 <dir_alloc+0x54>
c0003a8e:	46                   	inc    esi
c0003a8f:	39 ee                	cmp    esi,ebp
c0003a91:	75 04                	jne    c0003a97 <dir_alloc+0x56>
c0003a93:	eb 1c                	jmp    c0003ab1 <dir_alloc+0x70>
c0003a95:	31 f6                	xor    esi,esi
c0003a97:	ba 01 00 00 00       	mov    edx,0x1
c0003a9c:	89 d8                	mov    eax,ebx
c0003a9e:	e8 6c fb ff ff       	call   c000360f <dir_next>
c0003aa3:	85 c0                	test   eax,eax
c0003aa5:	74 b4                	je     c0003a5b <dir_alloc+0x1a>
c0003aa7:	83 f8 04             	cmp    eax,0x4
c0003aaa:	75 05                	jne    c0003ab1 <dir_alloc+0x70>
c0003aac:	b8 07 00 00 00       	mov    eax,0x7
c0003ab1:	83 c4 0c             	add    esp,0xc
c0003ab4:	5b                   	pop    ebx
c0003ab5:	5e                   	pop    esi
c0003ab6:	5f                   	pop    edi
c0003ab7:	5d                   	pop    ebp
c0003ab8:	c3                   	ret    

c0003ab9 <store_xdir>:
c0003ab9:	55                   	push   ebp
c0003aba:	57                   	push   edi
c0003abb:	89 c7                	mov    edi,eax
c0003abd:	56                   	push   esi
c0003abe:	53                   	push   ebx
c0003abf:	83 ec 0c             	sub    esp,0xc
c0003ac2:	8b 00                	mov    eax,DWORD PTR [eax]
c0003ac4:	8b 68 10             	mov    ebp,DWORD PTR [eax+0x10]
c0003ac7:	89 e8                	mov    eax,ebp
c0003ac9:	e8 5b e5 ff ff       	call   c0002029 <xdir_sum>
c0003ace:	0f b7 d0             	movzx  edx,ax
c0003ad1:	8d 45 02             	lea    eax,[ebp+0x2]
c0003ad4:	e8 f4 e0 ff ff       	call   c0001bcd <st_word>
c0003ad9:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c0003add:	8b 57 48             	mov    edx,DWORD PTR [edi+0x48]
c0003ae0:	89 f8                	mov    eax,edi
c0003ae2:	e8 d0 f5 ff ff       	call   c00030b7 <dir_sdi>
c0003ae7:	89 c6                	mov    esi,eax
c0003ae9:	85 f6                	test   esi,esi
c0003aeb:	75 3d                	jne    c0003b2a <store_xdir+0x71>
c0003aed:	8b 57 30             	mov    edx,DWORD PTR [edi+0x30]
c0003af0:	8b 4f 34             	mov    ecx,DWORD PTR [edi+0x34]
c0003af3:	8b 07                	mov    eax,DWORD PTR [edi]
c0003af5:	e8 3f e8 ff ff       	call   c0002339 <move_window>
c0003afa:	89 c6                	mov    esi,eax
c0003afc:	85 c0                	test   eax,eax
c0003afe:	75 2a                	jne    c0003b2a <store_xdir+0x71>
c0003b00:	8b 47 38             	mov    eax,DWORD PTR [edi+0x38]
c0003b03:	b9 20 00 00 00       	mov    ecx,0x20
c0003b08:	89 ea                	mov    edx,ebp
c0003b0a:	e8 cb e0 ff ff       	call   c0001bda <mem_cpy>
c0003b0f:	8b 07                	mov    eax,DWORD PTR [edi]
c0003b11:	85 db                	test   ebx,ebx
c0003b13:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003b17:	74 11                	je     c0003b2a <store_xdir+0x71>
c0003b19:	31 d2                	xor    edx,edx
c0003b1b:	89 f8                	mov    eax,edi
c0003b1d:	83 c5 20             	add    ebp,0x20
c0003b20:	e8 ea fa ff ff       	call   c000360f <dir_next>
c0003b25:	4b                   	dec    ebx
c0003b26:	89 c6                	mov    esi,eax
c0003b28:	eb bf                	jmp    c0003ae9 <store_xdir+0x30>
c0003b2a:	89 f0                	mov    eax,esi
c0003b2c:	83 fe 02             	cmp    esi,0x2
c0003b2f:	76 05                	jbe    c0003b36 <store_xdir+0x7d>
c0003b31:	b8 02 00 00 00       	mov    eax,0x2
c0003b36:	83 c4 0c             	add    esp,0xc
c0003b39:	5b                   	pop    ebx
c0003b3a:	5e                   	pop    esi
c0003b3b:	5f                   	pop    edi
c0003b3c:	5d                   	pop    ebp
c0003b3d:	c3                   	ret    

c0003b3e <dir_remove>:
c0003b3e:	57                   	push   edi
c0003b3f:	56                   	push   esi
c0003b40:	53                   	push   ebx
c0003b41:	89 c3                	mov    ebx,eax
c0003b43:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c0003b46:	8b 30                	mov    esi,DWORD PTR [eax]
c0003b48:	8b 78 28             	mov    edi,DWORD PTR [eax+0x28]
c0003b4b:	83 fa ff             	cmp    edx,0xffffffff
c0003b4e:	74 09                	je     c0003b59 <dir_remove+0x1b>
c0003b50:	e8 62 f5 ff ff       	call   c00030b7 <dir_sdi>
c0003b55:	85 c0                	test   eax,eax
c0003b57:	75 41                	jne    c0003b9a <dir_remove+0x5c>
c0003b59:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003b5c:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003b5f:	89 f0                	mov    eax,esi
c0003b61:	e8 d3 e7 ff ff       	call   c0002339 <move_window>
c0003b66:	85 c0                	test   eax,eax
c0003b68:	75 26                	jne    c0003b90 <dir_remove+0x52>
c0003b6a:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003b6d:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0003b70:	75 05                	jne    c0003b77 <dir_remove+0x39>
c0003b72:	80 22 7f             	and    BYTE PTR [edx],0x7f
c0003b75:	eb 03                	jmp    c0003b7a <dir_remove+0x3c>
c0003b77:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c0003b7a:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0003b7e:	39 7b 28             	cmp    DWORD PTR [ebx+0x28],edi
c0003b81:	73 17                	jae    c0003b9a <dir_remove+0x5c>
c0003b83:	31 d2                	xor    edx,edx
c0003b85:	89 d8                	mov    eax,ebx
c0003b87:	e8 83 fa ff ff       	call   c000360f <dir_next>
c0003b8c:	85 c0                	test   eax,eax
c0003b8e:	74 c9                	je     c0003b59 <dir_remove+0x1b>
c0003b90:	83 f8 04             	cmp    eax,0x4
c0003b93:	75 05                	jne    c0003b9a <dir_remove+0x5c>
c0003b95:	b8 02 00 00 00       	mov    eax,0x2
c0003b9a:	5b                   	pop    ebx
c0003b9b:	5e                   	pop    esi
c0003b9c:	5f                   	pop    edi
c0003b9d:	c3                   	ret    

c0003b9e <create_name>:
c0003b9e:	55                   	push   ebp
c0003b9f:	89 d5                	mov    ebp,edx
c0003ba1:	57                   	push   edi
c0003ba2:	89 c7                	mov    edi,eax
c0003ba4:	56                   	push   esi
c0003ba5:	31 f6                	xor    esi,esi
c0003ba7:	53                   	push   ebx
c0003ba8:	83 ec 3c             	sub    esp,0x3c
c0003bab:	8b 02                	mov    eax,DWORD PTR [edx]
c0003bad:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003bb1:	8b 07                	mov    eax,DWORD PTR [edi]
c0003bb3:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003bb6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0003bba:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0003bbe:	e8 72 e0 ff ff       	call   c0001c35 <tchar2uni>
c0003bc3:	89 c3                	mov    ebx,eax
c0003bc5:	83 f8 ff             	cmp    eax,0xffffffff
c0003bc8:	75 0a                	jne    c0003bd4 <create_name+0x36>
c0003bca:	b8 06 00 00 00       	mov    eax,0x6
c0003bcf:	e9 9e 02 00 00       	jmp    c0003e72 <create_name+0x2d4>
c0003bd4:	3d ff ff 00 00       	cmp    eax,0xffff
c0003bd9:	76 0c                	jbe    c0003be7 <create_name+0x49>
c0003bdb:	c1 e8 10             	shr    eax,0x10
c0003bde:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0003be2:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c0003be6:	46                   	inc    esi
c0003be7:	66 83 fb 1f          	cmp    bx,0x1f
c0003beb:	76 4f                	jbe    c0003c3c <create_name+0x9e>
c0003bed:	66 83 fb 5c          	cmp    bx,0x5c
c0003bf1:	74 35                	je     c0003c28 <create_name+0x8a>
c0003bf3:	66 83 fb 2f          	cmp    bx,0x2f
c0003bf7:	74 2f                	je     c0003c28 <create_name+0x8a>
c0003bf9:	66 83 fb 7f          	cmp    bx,0x7f
c0003bfd:	77 11                	ja     c0003c10 <create_name+0x72>
c0003bff:	0f b7 d3             	movzx  edx,bx
c0003c02:	b8 92 20 02 c0       	mov    eax,0xc0022092
c0003c07:	e8 11 e0 ff ff       	call   c0001c1d <chk_chr>
c0003c0c:	85 c0                	test   eax,eax
c0003c0e:	75 ba                	jne    c0003bca <create_name+0x2c>
c0003c10:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0003c16:	77 b2                	ja     c0003bca <create_name+0x2c>
c0003c18:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003c1c:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0003c20:	46                   	inc    esi
c0003c21:	eb 97                	jmp    c0003bba <create_name+0x1c>
c0003c23:	40                   	inc    eax
c0003c24:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003c28:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003c2c:	8a 10                	mov    dl,BYTE PTR [eax]
c0003c2e:	80 fa 2f             	cmp    dl,0x2f
c0003c31:	74 f0                	je     c0003c23 <create_name+0x85>
c0003c33:	80 fa 5c             	cmp    dl,0x5c
c0003c36:	74 eb                	je     c0003c23 <create_name+0x85>
c0003c38:	31 db                	xor    ebx,ebx
c0003c3a:	eb 02                	jmp    c0003c3e <create_name+0xa0>
c0003c3c:	b3 04                	mov    bl,0x4
c0003c3e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003c42:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0003c45:	85 f6                	test   esi,esi
c0003c47:	74 18                	je     c0003c61 <create_name+0xc3>
c0003c49:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003c4d:	66 8b 44 70 fe       	mov    ax,WORD PTR [eax+esi*2-0x2]
c0003c52:	66 83 f8 20          	cmp    ax,0x20
c0003c56:	74 06                	je     c0003c5e <create_name+0xc0>
c0003c58:	66 83 f8 2e          	cmp    ax,0x2e
c0003c5c:	75 03                	jne    c0003c61 <create_name+0xc3>
c0003c5e:	4e                   	dec    esi
c0003c5f:	eb e4                	jmp    c0003c45 <create_name+0xa7>
c0003c61:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003c65:	31 ed                	xor    ebp,ebp
c0003c67:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0003c6d:	85 f6                	test   esi,esi
c0003c6f:	0f 84 55 ff ff ff    	je     c0003bca <create_name+0x2c>
c0003c75:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003c79:	8d 55 01             	lea    edx,[ebp+0x1]
c0003c7c:	66 8b 04 68          	mov    ax,WORD PTR [eax+ebp*2]
c0003c80:	66 83 f8 20          	cmp    ax,0x20
c0003c84:	75 04                	jne    c0003c8a <create_name+0xec>
c0003c86:	89 d5                	mov    ebp,edx
c0003c88:	eb eb                	jmp    c0003c75 <create_name+0xd7>
c0003c8a:	85 ed                	test   ebp,ebp
c0003c8c:	75 06                	jne    c0003c94 <create_name+0xf6>
c0003c8e:	66 83 f8 2e          	cmp    ax,0x2e
c0003c92:	75 08                	jne    c0003c9c <create_name+0xfe>
c0003c94:	83 cb 03             	or     ebx,0x3
c0003c97:	eb 03                	jmp    c0003c9c <create_name+0xfe>
c0003c99:	4e                   	dec    esi
c0003c9a:	74 0c                	je     c0003ca8 <create_name+0x10a>
c0003c9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003ca0:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0003ca6:	75 f1                	jne    c0003c99 <create_name+0xfb>
c0003ca8:	b9 0b 00 00 00       	mov    ecx,0xb
c0003cad:	8d 47 3c             	lea    eax,[edi+0x3c]
c0003cb0:	ba 20 00 00 00       	mov    edx,0x20
c0003cb5:	e8 35 df ff ff       	call   c0001bef <mem_set>
c0003cba:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0003cc2:	31 c9                	xor    ecx,ecx
c0003cc4:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0003cc9:	8d 45 01             	lea    eax,[ebp+0x1]
c0003ccc:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0003cd0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003cd4:	0f b7 2c 68          	movzx  ebp,WORD PTR [eax+ebp*2]
c0003cd8:	66 85 ed             	test   bp,bp
c0003cdb:	0f 84 30 01 00 00    	je     c0003e11 <create_name+0x273>
c0003ce1:	66 83 fd 20          	cmp    bp,0x20
c0003ce5:	74 10                	je     c0003cf7 <create_name+0x159>
c0003ce7:	66 83 fd 2e          	cmp    bp,0x2e
c0003ceb:	75 13                	jne    c0003d00 <create_name+0x162>
c0003ced:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003cf1:	0f 84 6b 01 00 00    	je     c0003e62 <create_name+0x2c4>
c0003cf7:	83 cb 03             	or     ebx,0x3
c0003cfa:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0003cfe:	eb c9                	jmp    c0003cc9 <create_name+0x12b>
c0003d00:	3b 4c 24 08          	cmp    ecx,DWORD PTR [esp+0x8]
c0003d04:	73 0b                	jae    c0003d11 <create_name+0x173>
c0003d06:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003d0a:	75 47                	jne    c0003d53 <create_name+0x1b5>
c0003d0c:	e9 51 01 00 00       	jmp    c0003e62 <create_name+0x2c4>
c0003d11:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003d16:	75 10                	jne    c0003d28 <create_name+0x18a>
c0003d18:	83 cb 03             	or     ebx,0x3
c0003d1b:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003d23:	e9 e9 00 00 00       	jmp    c0003e11 <create_name+0x273>
c0003d28:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003d2c:	74 0d                	je     c0003d3b <create_name+0x19d>
c0003d2e:	83 cb 03             	or     ebx,0x3
c0003d31:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003d35:	0f 87 d6 00 00 00    	ja     c0003e11 <create_name+0x273>
c0003d3b:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003d40:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0003d44:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003d4c:	b9 08 00 00 00       	mov    ecx,0x8
c0003d51:	eb a7                	jmp    c0003cfa <create_name+0x15c>
c0003d53:	66 83 fd 7f          	cmp    bp,0x7f
c0003d57:	76 68                	jbe    c0003dc1 <create_name+0x223>
c0003d59:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0003d5d:	88 da                	mov    dl,bl
c0003d5f:	83 ca 02             	or     edx,0x2
c0003d62:	88 54 24 18          	mov    BYTE PTR [esp+0x18],dl
c0003d66:	50                   	push   eax
c0003d67:	50                   	push   eax
c0003d68:	68 b5 01 00 00       	push   0x1b5
c0003d6d:	55                   	push   ebp
c0003d6e:	e8 81 48 00 00       	call   c00085f4 <ff_uni2oem>
c0003d73:	83 c4 10             	add    esp,0x10
c0003d76:	89 c5                	mov    ebp,eax
c0003d78:	a8 80                	test   al,0x80
c0003d7a:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0003d7e:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003d82:	74 0c                	je     c0003d90 <create_name+0x1f2>
c0003d84:	83 e5 7f             	and    ebp,0x7f
c0003d87:	0f b6 ad e0 1f 02 c0 	movzx  ebp,BYTE PTR [ebp-0x3ffde020]
c0003d8e:	eb 2a                	jmp    c0003dba <create_name+0x21c>
c0003d90:	66 3d ff 00          	cmp    ax,0xff
c0003d94:	76 24                	jbe    c0003dba <create_name+0x21c>
c0003d96:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003d9a:	48                   	dec    eax
c0003d9b:	39 c8                	cmp    eax,ecx
c0003d9d:	77 0c                	ja     c0003dab <create_name+0x20d>
c0003d9f:	83 cb 03             	or     ebx,0x3
c0003da2:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003da6:	e9 4f ff ff ff       	jmp    c0003cfa <create_name+0x15c>
c0003dab:	89 e8                	mov    eax,ebp
c0003dad:	88 d3                	mov    bl,dl
c0003daf:	66 c1 e8 08          	shr    ax,0x8
c0003db3:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003db7:	41                   	inc    ecx
c0003db8:	eb 4b                	jmp    c0003e05 <create_name+0x267>
c0003dba:	88 d3                	mov    bl,dl
c0003dbc:	66 85 ed             	test   bp,bp
c0003dbf:	74 19                	je     c0003dda <create_name+0x23c>
c0003dc1:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0003dc5:	0f b7 d5             	movzx  edx,bp
c0003dc8:	b8 9b 20 02 c0       	mov    eax,0xc002209b
c0003dcd:	e8 4b de ff ff       	call   c0001c1d <chk_chr>
c0003dd2:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0003dd6:	85 c0                	test   eax,eax
c0003dd8:	74 0a                	je     c0003de4 <create_name+0x246>
c0003dda:	83 cb 03             	or     ebx,0x3
c0003ddd:	bd 5f 00 00 00       	mov    ebp,0x5f
c0003de2:	eb 21                	jmp    c0003e05 <create_name+0x267>
c0003de4:	8d 45 bf             	lea    eax,[ebp-0x41]
c0003de7:	66 83 f8 19          	cmp    ax,0x19
c0003deb:	77 07                	ja     c0003df4 <create_name+0x256>
c0003ded:	80 4c 24 0f 02       	or     BYTE PTR [esp+0xf],0x2
c0003df2:	eb 11                	jmp    c0003e05 <create_name+0x267>
c0003df4:	8d 45 9f             	lea    eax,[ebp-0x61]
c0003df7:	66 83 f8 19          	cmp    ax,0x19
c0003dfb:	77 08                	ja     c0003e05 <create_name+0x267>
c0003dfd:	80 4c 24 0f 01       	or     BYTE PTR [esp+0xf],0x1
c0003e02:	83 ed 20             	sub    ebp,0x20
c0003e05:	89 e8                	mov    eax,ebp
c0003e07:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003e0b:	41                   	inc    ecx
c0003e0c:	e9 e9 fe ff ff       	jmp    c0003cfa <create_name+0x15c>
c0003e11:	80 7f 3c e5          	cmp    BYTE PTR [edi+0x3c],0xe5
c0003e15:	75 04                	jne    c0003e1b <create_name+0x27d>
c0003e17:	c6 47 3c 05          	mov    BYTE PTR [edi+0x3c],0x5
c0003e1b:	83 7c 24 08 08       	cmp    DWORD PTR [esp+0x8],0x8
c0003e20:	75 05                	jne    c0003e27 <create_name+0x289>
c0003e22:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003e27:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003e2b:	83 e0 0c             	and    eax,0xc
c0003e2e:	3c 0c                	cmp    al,0xc
c0003e30:	74 0b                	je     c0003e3d <create_name+0x29f>
c0003e32:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003e36:	83 e0 03             	and    eax,0x3
c0003e39:	3c 03                	cmp    al,0x3
c0003e3b:	75 05                	jne    c0003e42 <create_name+0x2a4>
c0003e3d:	83 cb 02             	or     ebx,0x2
c0003e40:	eb 19                	jmp    c0003e5b <create_name+0x2bd>
c0003e42:	f6 c3 02             	test   bl,0x2
c0003e45:	75 14                	jne    c0003e5b <create_name+0x2bd>
c0003e47:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0003e4c:	74 03                	je     c0003e51 <create_name+0x2b3>
c0003e4e:	83 cb 10             	or     ebx,0x10
c0003e51:	f6 44 24 0f 04       	test   BYTE PTR [esp+0xf],0x4
c0003e56:	74 03                	je     c0003e5b <create_name+0x2bd>
c0003e58:	83 cb 08             	or     ebx,0x8
c0003e5b:	88 5f 47             	mov    BYTE PTR [edi+0x47],bl
c0003e5e:	31 c0                	xor    eax,eax
c0003e60:	eb 10                	jmp    c0003e72 <create_name+0x2d4>
c0003e62:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003e67:	0f 85 ce fe ff ff    	jne    c0003d3b <create_name+0x19d>
c0003e6d:	e9 a6 fe ff ff       	jmp    c0003d18 <create_name+0x17a>
c0003e72:	83 c4 3c             	add    esp,0x3c
c0003e75:	5b                   	pop    ebx
c0003e76:	5e                   	pop    esi
c0003e77:	5f                   	pop    edi
c0003e78:	5d                   	pop    ebp
c0003e79:	c3                   	ret    

c0003e7a <xname_sum>:
c0003e7a:	56                   	push   esi
c0003e7b:	53                   	push   ebx
c0003e7c:	89 c6                	mov    esi,eax
c0003e7e:	51                   	push   ecx
c0003e7f:	31 db                	xor    ebx,ebx
c0003e81:	83 c6 02             	add    esi,0x2
c0003e84:	0f b7 46 fe          	movzx  eax,WORD PTR [esi-0x2]
c0003e88:	66 85 c0             	test   ax,ax
c0003e8b:	74 1f                	je     c0003eac <xname_sum+0x32>
c0003e8d:	83 ec 0c             	sub    esp,0xc
c0003e90:	66 d1 cb             	ror    bx,1
c0003e93:	50                   	push   eax
c0003e94:	e8 67 48 00 00       	call   c0008700 <ff_wtoupper>
c0003e99:	83 c4 10             	add    esp,0x10
c0003e9c:	0f b6 d0             	movzx  edx,al
c0003e9f:	66 c1 e8 08          	shr    ax,0x8
c0003ea3:	01 d3                	add    ebx,edx
c0003ea5:	66 d1 cb             	ror    bx,1
c0003ea8:	01 c3                	add    ebx,eax
c0003eaa:	eb d5                	jmp    c0003e81 <xname_sum+0x7>
c0003eac:	89 d8                	mov    eax,ebx
c0003eae:	5a                   	pop    edx
c0003eaf:	5b                   	pop    ebx
c0003eb0:	5e                   	pop    esi
c0003eb1:	c3                   	ret    

c0003eb2 <create_xdir>:
c0003eb2:	55                   	push   ebp
c0003eb3:	b9 40 00 00 00       	mov    ecx,0x40
c0003eb8:	57                   	push   edi
c0003eb9:	bd 01 00 00 00       	mov    ebp,0x1
c0003ebe:	56                   	push   esi
c0003ebf:	31 ff                	xor    edi,edi
c0003ec1:	53                   	push   ebx
c0003ec2:	be 40 00 00 00       	mov    esi,0x40
c0003ec7:	89 c3                	mov    ebx,eax
c0003ec9:	83 ec 1c             	sub    esp,0x1c
c0003ecc:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0003ed0:	31 d2                	xor    edx,edx
c0003ed2:	e8 18 dd ff ff       	call   c0001bef <mem_set>
c0003ed7:	c6 03 85             	mov    BYTE PTR [ebx],0x85
c0003eda:	c6 43 20 c0          	mov    BYTE PTR [ebx+0x20],0xc0
c0003ede:	31 c9                	xor    ecx,ecx
c0003ee0:	8d 46 01             	lea    eax,[esi+0x1]
c0003ee3:	c6 04 33 c1          	mov    BYTE PTR [ebx+esi*1],0xc1
c0003ee7:	83 c6 02             	add    esi,0x2
c0003eea:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0003eee:	66 85 ed             	test   bp,bp
c0003ef1:	74 12                	je     c0003f05 <create_xdir+0x53>
c0003ef3:	0f b6 c1             	movzx  eax,cl
c0003ef6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003efa:	66 8b 2c 42          	mov    bp,WORD PTR [edx+eax*2]
c0003efe:	66 83 fd 01          	cmp    bp,0x1
c0003f02:	80 d9 ff             	sbb    cl,0xff
c0003f05:	8d 04 33             	lea    eax,[ebx+esi*1]
c0003f08:	0f b7 d5             	movzx  edx,bp
c0003f0b:	83 c6 02             	add    esi,0x2
c0003f0e:	e8 ba dc ff ff       	call   c0001bcd <st_word>
c0003f13:	f7 c6 1f 00 00 00    	test   esi,0x1f
c0003f19:	75 d3                	jne    c0003eee <create_xdir+0x3c>
c0003f1b:	8d 47 01             	lea    eax,[edi+0x1]
c0003f1e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003f22:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0003f26:	0f b6 c1             	movzx  eax,cl
c0003f29:	66 83 3c 42 00       	cmp    WORD PTR [edx+eax*2],0x0
c0003f2e:	74 07                	je     c0003f37 <create_xdir+0x85>
c0003f30:	0f b6 7c 24 0f       	movzx  edi,BYTE PTR [esp+0xf]
c0003f35:	eb a9                	jmp    c0003ee0 <create_xdir+0x2e>
c0003f37:	8d 47 02             	lea    eax,[edi+0x2]
c0003f3a:	88 4b 23             	mov    BYTE PTR [ebx+0x23],cl
c0003f3d:	88 43 01             	mov    BYTE PTR [ebx+0x1],al
c0003f40:	89 d0                	mov    eax,edx
c0003f42:	e8 33 ff ff ff       	call   c0003e7a <xname_sum>
c0003f47:	83 c4 1c             	add    esp,0x1c
c0003f4a:	0f b7 d0             	movzx  edx,ax
c0003f4d:	8d 43 24             	lea    eax,[ebx+0x24]
c0003f50:	5b                   	pop    ebx
c0003f51:	5e                   	pop    esi
c0003f52:	5f                   	pop    edi
c0003f53:	5d                   	pop    ebp
c0003f54:	e9 74 dc ff ff       	jmp    c0001bcd <st_word>

c0003f59 <cmp_lfn>:
c0003f59:	55                   	push   ebp
c0003f5a:	57                   	push   edi
c0003f5b:	89 d7                	mov    edi,edx
c0003f5d:	56                   	push   esi
c0003f5e:	53                   	push   ebx
c0003f5f:	83 ec 1c             	sub    esp,0x1c
c0003f62:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003f66:	8d 42 1a             	lea    eax,[edx+0x1a]
c0003f69:	e8 ed db ff ff       	call   c0001b5b <ld_word>
c0003f6e:	66 85 c0             	test   ax,ax
c0003f71:	74 07                	je     c0003f7a <cmp_lfn+0x21>
c0003f73:	31 c0                	xor    eax,eax
c0003f75:	e9 9a 00 00 00       	jmp    c0004014 <cmp_lfn+0xbb>
c0003f7a:	8a 1f                	mov    bl,BYTE PTR [edi]
c0003f7c:	bd 01 00 00 00       	mov    ebp,0x1
c0003f81:	83 e3 3f             	and    ebx,0x3f
c0003f84:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0003f8c:	4b                   	dec    ebx
c0003f8d:	6b db 0d             	imul   ebx,ebx,0xd
c0003f90:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0003f94:	0f b6 80 60 20 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffddfa0]
c0003f9b:	01 f8                	add    eax,edi
c0003f9d:	e8 b9 db ff ff       	call   c0001b5b <ld_word>
c0003fa2:	66 85 ed             	test   bp,bp
c0003fa5:	89 c6                	mov    esi,eax
c0003fa7:	74 3c                	je     c0003fe5 <cmp_lfn+0x8c>
c0003fa9:	81 fb ff 00 00 00    	cmp    ebx,0xff
c0003faf:	77 c2                	ja     c0003f73 <cmp_lfn+0x1a>
c0003fb1:	83 ec 0c             	sub    esp,0xc
c0003fb4:	0f b7 c0             	movzx  eax,ax
c0003fb7:	50                   	push   eax
c0003fb8:	e8 43 47 00 00       	call   c0008700 <ff_wtoupper>
c0003fbd:	89 c5                	mov    ebp,eax
c0003fbf:	8d 43 01             	lea    eax,[ebx+0x1]
c0003fc2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0003fc6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0003fca:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c0003fce:	89 04 24             	mov    DWORD PTR [esp],eax
c0003fd1:	e8 2a 47 00 00       	call   c0008700 <ff_wtoupper>
c0003fd6:	83 c4 10             	add    esp,0x10
c0003fd9:	39 c5                	cmp    ebp,eax
c0003fdb:	75 96                	jne    c0003f73 <cmp_lfn+0x1a>
c0003fdd:	89 f5                	mov    ebp,esi
c0003fdf:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0003fe3:	eb 04                	jmp    c0003fe9 <cmp_lfn+0x90>
c0003fe5:	66 46                	inc    si
c0003fe7:	75 8a                	jne    c0003f73 <cmp_lfn+0x1a>
c0003fe9:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c0003fed:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0003ff2:	75 9c                	jne    c0003f90 <cmp_lfn+0x37>
c0003ff4:	f6 07 40             	test   BYTE PTR [edi],0x40
c0003ff7:	74 16                	je     c000400f <cmp_lfn+0xb6>
c0003ff9:	66 85 ed             	test   bp,bp
c0003ffc:	74 11                	je     c000400f <cmp_lfn+0xb6>
c0003ffe:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0004002:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0004007:	0f 94 c0             	sete   al
c000400a:	0f b6 c0             	movzx  eax,al
c000400d:	eb 05                	jmp    c0004014 <cmp_lfn+0xbb>
c000400f:	b8 01 00 00 00       	mov    eax,0x1
c0004014:	83 c4 1c             	add    esp,0x1c
c0004017:	5b                   	pop    ebx
c0004018:	5e                   	pop    esi
c0004019:	5f                   	pop    edi
c000401a:	5d                   	pop    ebp
c000401b:	c3                   	ret    

c000401c <dir_find>:
c000401c:	55                   	push   ebp
c000401d:	31 d2                	xor    edx,edx
c000401f:	57                   	push   edi
c0004020:	56                   	push   esi
c0004021:	53                   	push   ebx
c0004022:	89 c3                	mov    ebx,eax
c0004024:	83 ec 1c             	sub    esp,0x1c
c0004027:	8b 30                	mov    esi,DWORD PTR [eax]
c0004029:	e8 89 f0 ff ff       	call   c00030b7 <dir_sdi>
c000402e:	89 04 24             	mov    DWORD PTR [esp],eax
c0004031:	85 c0                	test   eax,eax
c0004033:	0f 85 9e 01 00 00    	jne    c00041d7 <dir_find+0x1bb>
c0004039:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c000403c:	0f 85 8d 00 00 00    	jne    c00040cf <dir_find+0xb3>
c0004042:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0004045:	e8 30 fe ff ff       	call   c0003e7a <xname_sum>
c000404a:	89 c7                	mov    edi,eax
c000404c:	31 d2                	xor    edx,edx
c000404e:	89 d8                	mov    eax,ebx
c0004050:	e8 72 f8 ff ff       	call   c00038c7 <dir_read>
c0004055:	85 c0                	test   eax,eax
c0004057:	0f 85 5e 01 00 00    	jne    c00041bb <dir_find+0x19f>
c000405d:	8b 4e 10             	mov    ecx,DWORD PTR [esi+0x10]
c0004060:	8d 41 24             	lea    eax,[ecx+0x24]
c0004063:	e8 f3 da ff ff       	call   c0001b5b <ld_word>
c0004068:	66 39 f8             	cmp    ax,di
c000406b:	75 df                	jne    c000404c <dir_find+0x30>
c000406d:	8a 41 23             	mov    al,BYTE PTR [ecx+0x23]
c0004070:	31 ed                	xor    ebp,ebp
c0004072:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0004076:	ba 40 00 00 00       	mov    edx,0x40
c000407b:	89 e9                	mov    ecx,ebp
c000407d:	38 4c 24 0b          	cmp    BYTE PTR [esp+0xb],cl
c0004081:	0f 84 42 01 00 00    	je     c00041c9 <dir_find+0x1ad>
c0004087:	f6 c2 1f             	test   dl,0x1f
c000408a:	75 03                	jne    c000408f <dir_find+0x73>
c000408c:	83 c2 02             	add    edx,0x2
c000408f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004093:	89 d0                	mov    eax,edx
c0004095:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c0004098:	e8 be da ff ff       	call   c0001b5b <ld_word>
c000409d:	83 ec 0c             	sub    esp,0xc
c00040a0:	0f b7 c0             	movzx  eax,ax
c00040a3:	50                   	push   eax
c00040a4:	e8 57 46 00 00       	call   c0008700 <ff_wtoupper>
c00040a9:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00040ad:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c00040b0:	0f b7 04 68          	movzx  eax,WORD PTR [eax+ebp*2]
c00040b4:	89 04 24             	mov    DWORD PTR [esp],eax
c00040b7:	e8 44 46 00 00       	call   c0008700 <ff_wtoupper>
c00040bc:	83 c4 10             	add    esp,0x10
c00040bf:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c00040c3:	75 87                	jne    c000404c <dir_find+0x30>
c00040c5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00040c9:	45                   	inc    ebp
c00040ca:	83 c2 02             	add    edx,0x2
c00040cd:	eb ac                	jmp    c000407b <dir_find+0x5f>
c00040cf:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c00040d6:	c6 44 24 04 ff       	mov    BYTE PTR [esp+0x4],0xff
c00040db:	bf ff ff ff ff       	mov    edi,0xffffffff
c00040e0:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00040e3:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00040e6:	89 f0                	mov    eax,esi
c00040e8:	e8 4c e2 ff ff       	call   c0002339 <move_window>
c00040ed:	85 c0                	test   eax,eax
c00040ef:	0f 85 c6 00 00 00    	jne    c00041bb <dir_find+0x19f>
c00040f5:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c00040f8:	8a 4d 00             	mov    cl,BYTE PTR [ebp+0x0]
c00040fb:	84 c9                	test   cl,cl
c00040fd:	0f 84 bd 00 00 00    	je     c00041c0 <dir_find+0x1a4>
c0004103:	8a 55 0b             	mov    dl,BYTE PTR [ebp+0xb]
c0004106:	88 d0                	mov    al,dl
c0004108:	83 e0 3f             	and    eax,0x3f
c000410b:	80 f9 e5             	cmp    cl,0xe5
c000410e:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0004111:	0f 84 87 00 00 00    	je     c000419e <dir_find+0x182>
c0004117:	80 e2 08             	and    dl,0x8
c000411a:	74 06                	je     c0004122 <dir_find+0x106>
c000411c:	3c 0f                	cmp    al,0xf
c000411e:	75 7e                	jne    c000419e <dir_find+0x182>
c0004120:	eb 04                	jmp    c0004126 <dir_find+0x10a>
c0004122:	3c 0f                	cmp    al,0xf
c0004124:	75 4c                	jne    c0004172 <dir_find+0x156>
c0004126:	f6 43 47 40          	test   BYTE PTR [ebx+0x47],0x40
c000412a:	75 7e                	jne    c00041aa <dir_find+0x18e>
c000412c:	f6 c1 40             	test   cl,0x40
c000412f:	74 12                	je     c0004143 <dir_find+0x127>
c0004131:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c0004134:	83 e1 bf             	and    ecx,0xffffffbf
c0004137:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000413b:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c000413e:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0004141:	eb 06                	jmp    c0004149 <dir_find+0x12d>
c0004143:	89 f8                	mov    eax,edi
c0004145:	38 c8                	cmp    al,cl
c0004147:	75 5c                	jne    c00041a5 <dir_find+0x189>
c0004149:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c000414d:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004152:	38 45 0d             	cmp    BYTE PTR [ebp+0xd],al
c0004155:	75 53                	jne    c00041aa <dir_find+0x18e>
c0004157:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c000415b:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000415e:	89 ea                	mov    edx,ebp
c0004160:	e8 f4 fd ff ff       	call   c0003f59 <cmp_lfn>
c0004165:	85 c0                	test   eax,eax
c0004167:	74 41                	je     c00041aa <dir_find+0x18e>
c0004169:	8a 4c 24 0b          	mov    cl,BYTE PTR [esp+0xb]
c000416d:	8d 79 ff             	lea    edi,[ecx-0x1]
c0004170:	eb 38                	jmp    c00041aa <dir_find+0x18e>
c0004172:	89 f8                	mov    eax,edi
c0004174:	84 c0                	test   al,al
c0004176:	75 0d                	jne    c0004185 <dir_find+0x169>
c0004178:	89 e8                	mov    eax,ebp
c000417a:	e8 98 de ff ff       	call   c0002017 <sum_sfn>
c000417f:	3a 44 24 04          	cmp    al,BYTE PTR [esp+0x4]
c0004183:	74 52                	je     c00041d7 <dir_find+0x1bb>
c0004185:	f6 43 47 01          	test   BYTE PTR [ebx+0x47],0x1
c0004189:	75 13                	jne    c000419e <dir_find+0x182>
c000418b:	8d 53 3c             	lea    edx,[ebx+0x3c]
c000418e:	b9 0b 00 00 00       	mov    ecx,0xb
c0004193:	89 e8                	mov    eax,ebp
c0004195:	e8 60 da ff ff       	call   c0001bfa <mem_cmp>
c000419a:	85 c0                	test   eax,eax
c000419c:	74 39                	je     c00041d7 <dir_find+0x1bb>
c000419e:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c00041a5:	bf ff ff ff ff       	mov    edi,0xffffffff
c00041aa:	31 d2                	xor    edx,edx
c00041ac:	89 d8                	mov    eax,ebx
c00041ae:	e8 5c f4 ff ff       	call   c000360f <dir_next>
c00041b3:	85 c0                	test   eax,eax
c00041b5:	0f 84 25 ff ff ff    	je     c00040e0 <dir_find+0xc4>
c00041bb:	89 04 24             	mov    DWORD PTR [esp],eax
c00041be:	eb 17                	jmp    c00041d7 <dir_find+0x1bb>
c00041c0:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c00041c7:	eb 0e                	jmp    c00041d7 <dir_find+0x1bb>
c00041c9:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c00041cc:	66 83 3c 68 00       	cmp    WORD PTR [eax+ebp*2],0x0
c00041d1:	0f 85 75 fe ff ff    	jne    c000404c <dir_find+0x30>
c00041d7:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00041da:	83 c4 1c             	add    esp,0x1c
c00041dd:	5b                   	pop    ebx
c00041de:	5e                   	pop    esi
c00041df:	5f                   	pop    edi
c00041e0:	5d                   	pop    ebp
c00041e1:	c3                   	ret    

c00041e2 <dir_register>:
c00041e2:	55                   	push   ebp
c00041e3:	57                   	push   edi
c00041e4:	56                   	push   esi
c00041e5:	be 06 00 00 00       	mov    esi,0x6
c00041ea:	53                   	push   ebx
c00041eb:	83 ec 6c             	sub    esp,0x6c
c00041ee:	f6 40 47 a0          	test   BYTE PTR [eax+0x47],0xa0
c00041f2:	0f 85 62 02 00 00    	jne    c000445a <dir_register+0x278>
c00041f8:	8b 28                	mov    ebp,DWORD PTR [eax]
c00041fa:	31 ff                	xor    edi,edi
c00041fc:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00041ff:	66 83 3c 7a 00       	cmp    WORD PTR [edx+edi*2],0x0
c0004204:	74 03                	je     c0004209 <dir_register+0x27>
c0004206:	47                   	inc    edi
c0004207:	eb f6                	jmp    c00041ff <dir_register+0x1d>
c0004209:	89 c3                	mov    ebx,eax
c000420b:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c000420f:	0f 85 e1 00 00 00    	jne    c00042f6 <dir_register+0x114>
c0004215:	83 c7 0e             	add    edi,0xe
c0004218:	b9 0f 00 00 00       	mov    ecx,0xf
c000421d:	89 f8                	mov    eax,edi
c000421f:	31 d2                	xor    edx,edx
c0004221:	f7 f1                	div    ecx
c0004223:	8d 50 02             	lea    edx,[eax+0x2]
c0004226:	89 c7                	mov    edi,eax
c0004228:	89 d8                	mov    eax,ebx
c000422a:	e8 12 f8 ff ff       	call   c0003a41 <dir_alloc>
c000422f:	89 c6                	mov    esi,eax
c0004231:	85 c0                	test   eax,eax
c0004233:	0f 85 21 02 00 00    	jne    c000445a <dir_register+0x278>
c0004239:	81 c7 01 00 00 08    	add    edi,0x8000001
c000423f:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0004242:	c1 e7 05             	shl    edi,0x5
c0004245:	29 f8                	sub    eax,edi
c0004247:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c000424a:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c000424d:	a8 04                	test   al,0x4
c000424f:	0f 84 91 00 00 00    	je     c00042e6 <dir_register+0x104>
c0004255:	83 e0 fb             	and    eax,0xfffffffb
c0004258:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c000425b:	89 d8                	mov    eax,ebx
c000425d:	e8 25 ec ff ff       	call   c0002e87 <fill_first_frag>
c0004262:	85 c0                	test   eax,eax
c0004264:	0f 85 ee 01 00 00    	jne    c0004458 <dir_register+0x276>
c000426a:	83 c9 ff             	or     ecx,0xffffffff
c000426d:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0004270:	89 d8                	mov    eax,ebx
c0004272:	e8 db eb ff ff       	call   c0002e52 <fill_last_frag>
c0004277:	85 c0                	test   eax,eax
c0004279:	0f 85 d9 01 00 00    	jne    c0004458 <dir_register+0x276>
c000427f:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0004283:	74 61                	je     c00042e6 <dir_register+0x104>
c0004285:	89 da                	mov    edx,ebx
c0004287:	8d 44 24 14          	lea    eax,[esp+0x14]
c000428b:	e8 ea f5 ff ff       	call   c000387a <load_obj_xdir>
c0004290:	85 c0                	test   eax,eax
c0004292:	0f 85 c0 01 00 00    	jne    c0004458 <dir_register+0x276>
c0004298:	0f b7 55 0a          	movzx  edx,WORD PTR [ebp+0xa]
c000429c:	31 c9                	xor    ecx,ecx
c000429e:	c1 e2 09             	shl    edx,0x9
c00042a1:	03 53 0c             	add    edx,DWORD PTR [ebx+0xc]
c00042a4:	13 4b 10             	adc    ecx,DWORD PTR [ebx+0x10]
c00042a7:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00042aa:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c00042ad:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00042b0:	83 c0 38             	add    eax,0x38
c00042b3:	e8 1c d9 ff ff       	call   c0001bd4 <st_qword>
c00042b8:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00042bb:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00042be:	83 c0 28             	add    eax,0x28
c00042c1:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00042c4:	e8 0b d9 ff ff       	call   c0001bd4 <st_qword>
c00042c9:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c00042cc:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c00042cf:	83 c8 01             	or     eax,0x1
c00042d2:	88 42 21             	mov    BYTE PTR [edx+0x21],al
c00042d5:	8d 44 24 14          	lea    eax,[esp+0x14]
c00042d9:	e8 db f7 ff ff       	call   c0003ab9 <store_xdir>
c00042de:	85 c0                	test   eax,eax
c00042e0:	0f 85 72 01 00 00    	jne    c0004458 <dir_register+0x276>
c00042e6:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00042e9:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00042ec:	e8 c1 fb ff ff       	call   c0003eb2 <create_xdir>
c00042f1:	e9 64 01 00 00       	jmp    c000445a <dir_register+0x278>
c00042f6:	8d 40 3c             	lea    eax,[eax+0x3c]
c00042f9:	b9 0c 00 00 00       	mov    ecx,0xc
c00042fe:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004302:	89 c2                	mov    edx,eax
c0004304:	8d 44 24 14          	lea    eax,[esp+0x14]
c0004308:	e8 cd d8 ff ff       	call   c0001bda <mem_cpy>
c000430d:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c0004312:	74 58                	je     c000436c <dir_register+0x18a>
c0004314:	c6 43 47 40          	mov    BYTE PTR [ebx+0x47],0x40
c0004318:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c0004320:	83 ec 0c             	sub    esp,0xc
c0004323:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0004326:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000432a:	8d 54 24 24          	lea    edx,[esp+0x24]
c000432e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004332:	e8 24 dc ff ff       	call   c0001f5b <gen_numname>
c0004337:	89 d8                	mov    eax,ebx
c0004339:	e8 de fc ff ff       	call   c000401c <dir_find>
c000433e:	83 c4 10             	add    esp,0x10
c0004341:	89 c6                	mov    esi,eax
c0004343:	85 c0                	test   eax,eax
c0004345:	75 15                	jne    c000435c <dir_register+0x17a>
c0004347:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000434b:	83 7c 24 0c 64       	cmp    DWORD PTR [esp+0xc],0x64
c0004350:	75 ce                	jne    c0004320 <dir_register+0x13e>
c0004352:	be 07 00 00 00       	mov    esi,0x7
c0004357:	e9 fe 00 00 00       	jmp    c000445a <dir_register+0x278>
c000435c:	83 f8 04             	cmp    eax,0x4
c000435f:	0f 85 f5 00 00 00    	jne    c000445a <dir_register+0x278>
c0004365:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0004369:	88 43 47             	mov    BYTE PTR [ebx+0x47],al
c000436c:	b9 01 00 00 00       	mov    ecx,0x1
c0004371:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c0004376:	74 0f                	je     c0004387 <dir_register+0x1a5>
c0004378:	b9 0d 00 00 00       	mov    ecx,0xd
c000437d:	8d 47 0c             	lea    eax,[edi+0xc]
c0004380:	31 d2                	xor    edx,edx
c0004382:	f7 f1                	div    ecx
c0004384:	8d 48 01             	lea    ecx,[eax+0x1]
c0004387:	89 ca                	mov    edx,ecx
c0004389:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000438d:	89 d8                	mov    eax,ebx
c000438f:	e8 ad f6 ff ff       	call   c0003a41 <dir_alloc>
c0004394:	89 c6                	mov    esi,eax
c0004396:	85 c0                	test   eax,eax
c0004398:	0f 85 bc 00 00 00    	jne    c000445a <dir_register+0x278>
c000439e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00043a2:	49                   	dec    ecx
c00043a3:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00043a7:	74 6a                	je     c0004413 <dir_register+0x231>
c00043a9:	89 c8                	mov    eax,ecx
c00043ab:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00043ae:	c1 e0 05             	shl    eax,0x5
c00043b1:	29 c2                	sub    edx,eax
c00043b3:	89 d8                	mov    eax,ebx
c00043b5:	e8 fd ec ff ff       	call   c00030b7 <dir_sdi>
c00043ba:	89 c6                	mov    esi,eax
c00043bc:	85 c0                	test   eax,eax
c00043be:	0f 85 96 00 00 00    	jne    c000445a <dir_register+0x278>
c00043c4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00043c8:	e8 4a dc ff ff       	call   c0002017 <sum_sfn>
c00043cd:	0f b6 f8             	movzx  edi,al
c00043d0:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00043d3:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00043d6:	89 e8                	mov    eax,ebp
c00043d8:	e8 5c df ff ff       	call   c0002339 <move_window>
c00043dd:	89 c6                	mov    esi,eax
c00043df:	85 c0                	test   eax,eax
c00043e1:	75 77                	jne    c000445a <dir_register+0x278>
c00043e3:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c00043e8:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c00043eb:	83 ec 0c             	sub    esp,0xc
c00043ee:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00043f1:	57                   	push   edi
c00043f2:	e8 e0 da ff ff       	call   c0001ed7 <put_lfn>
c00043f7:	31 d2                	xor    edx,edx
c00043f9:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c00043fd:	89 d8                	mov    eax,ebx
c00043ff:	e8 0b f2 ff ff       	call   c000360f <dir_next>
c0004404:	83 c4 10             	add    esp,0x10
c0004407:	89 c6                	mov    esi,eax
c0004409:	85 c0                	test   eax,eax
c000440b:	75 4d                	jne    c000445a <dir_register+0x278>
c000440d:	ff 4c 24 0c          	dec    DWORD PTR [esp+0xc]
c0004411:	75 bd                	jne    c00043d0 <dir_register+0x1ee>
c0004413:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0004416:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0004419:	89 e8                	mov    eax,ebp
c000441b:	e8 19 df ff ff       	call   c0002339 <move_window>
c0004420:	89 c6                	mov    esi,eax
c0004422:	85 c0                	test   eax,eax
c0004424:	75 34                	jne    c000445a <dir_register+0x278>
c0004426:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0004429:	b9 20 00 00 00       	mov    ecx,0x20
c000442e:	31 d2                	xor    edx,edx
c0004430:	e8 ba d7 ff ff       	call   c0001bef <mem_set>
c0004435:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0004438:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000443c:	b9 0b 00 00 00       	mov    ecx,0xb
c0004441:	e8 94 d7 ff ff       	call   c0001bda <mem_cpy>
c0004446:	8a 43 47             	mov    al,BYTE PTR [ebx+0x47]
c0004449:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c000444c:	83 e0 18             	and    eax,0x18
c000444f:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c0004452:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c0004456:	eb 02                	jmp    c000445a <dir_register+0x278>
c0004458:	89 c6                	mov    esi,eax
c000445a:	83 c4 6c             	add    esp,0x6c
c000445d:	89 f0                	mov    eax,esi
c000445f:	5b                   	pop    ebx
c0004460:	5e                   	pop    esi
c0004461:	5f                   	pop    edi
c0004462:	5d                   	pop    ebp
c0004463:	c3                   	ret    

c0004464 <sync_fs>:
c0004464:	56                   	push   esi
c0004465:	53                   	push   ebx
c0004466:	53                   	push   ebx
c0004467:	89 c3                	mov    ebx,eax
c0004469:	e8 37 de ff ff       	call   c00022a5 <sync_window>
c000446e:	85 c0                	test   eax,eax
c0004470:	0f 85 b1 00 00 00    	jne    c0004527 <sync_fs+0xc3>
c0004476:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c0004479:	0f 85 8e 00 00 00    	jne    c000450d <sync_fs+0xa9>
c000447f:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c0004483:	0f 85 84 00 00 00    	jne    c000450d <sync_fs+0xa9>
c0004489:	b9 00 02 00 00       	mov    ecx,0x200
c000448e:	8d 73 54             	lea    esi,[ebx+0x54]
c0004491:	31 d2                	xor    edx,edx
c0004493:	89 f0                	mov    eax,esi
c0004495:	e8 55 d7 ff ff       	call   c0001bef <mem_set>
c000449a:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c00044a0:	ba 55 aa 00 00       	mov    edx,0xaa55
c00044a5:	e8 23 d7 ff ff       	call   c0001bcd <st_word>
c00044aa:	ba 52 52 61 41       	mov    edx,0x41615252
c00044af:	89 f0                	mov    eax,esi
c00044b1:	e8 1b d7 ff ff       	call   c0001bd1 <st_dword>
c00044b6:	8d 83 38 02 00 00    	lea    eax,[ebx+0x238]
c00044bc:	ba 72 72 41 61       	mov    edx,0x61417272
c00044c1:	e8 0b d7 ff ff       	call   c0001bd1 <st_dword>
c00044c6:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00044c9:	8d 83 3c 02 00 00    	lea    eax,[ebx+0x23c]
c00044cf:	e8 fd d6 ff ff       	call   c0001bd1 <st_dword>
c00044d4:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00044d7:	8d 83 40 02 00 00    	lea    eax,[ebx+0x240]
c00044dd:	e8 ef d6 ff ff       	call   c0001bd1 <st_dword>
c00044e2:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00044e5:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00044e8:	83 c0 01             	add    eax,0x1
c00044eb:	83 d2 00             	adc    edx,0x0
c00044ee:	89 43 4c             	mov    DWORD PTR [ebx+0x4c],eax
c00044f1:	83 ec 0c             	sub    esp,0xc
c00044f4:	89 53 50             	mov    DWORD PTR [ebx+0x50],edx
c00044f7:	6a 01                	push   0x1
c00044f9:	52                   	push   edx
c00044fa:	50                   	push   eax
c00044fb:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c00044ff:	56                   	push   esi
c0004500:	50                   	push   eax
c0004501:	e8 20 d6 ff ff       	call   c0001b26 <disk_write>
c0004506:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c000450a:	83 c4 20             	add    esp,0x20
c000450d:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0004511:	51                   	push   ecx
c0004512:	6a 00                	push   0x0
c0004514:	6a 00                	push   0x0
c0004516:	50                   	push   eax
c0004517:	e8 20 d6 ff ff       	call   c0001b3c <disk_ioctl>
c000451c:	83 c4 10             	add    esp,0x10
c000451f:	85 c0                	test   eax,eax
c0004521:	0f 95 c0             	setne  al
c0004524:	0f b6 c0             	movzx  eax,al
c0004527:	5a                   	pop    edx
c0004528:	5b                   	pop    ebx
c0004529:	5e                   	pop    esi
c000452a:	c3                   	ret    

c000452b <create_partition>:
c000452b:	55                   	push   ebp
c000452c:	0f b6 c0             	movzx  eax,al
c000452f:	57                   	push   edi
c0004530:	56                   	push   esi
c0004531:	53                   	push   ebx
c0004532:	83 ec 60             	sub    esp,0x60
c0004535:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004539:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c000453d:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0004541:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0004545:	8d 44 24 4c          	lea    eax,[esp+0x4c]
c0004549:	50                   	push   eax
c000454a:	6a 01                	push   0x1
c000454c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0004550:	e8 e7 d5 ff ff       	call   c0001b3c <disk_ioctl>
c0004555:	83 c4 10             	add    esp,0x10
c0004558:	85 c0                	test   eax,eax
c000455a:	74 0a                	je     c0004566 <create_partition+0x3b>
c000455c:	b8 01 00 00 00       	mov    eax,0x1
c0004561:	e9 67 05 00 00       	jmp    c0004acd <create_partition+0x5a2>
c0004566:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000456a:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c000456e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0004572:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0004576:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c000457b:	0f 86 ed 03 00 00    	jbe    c000496e <create_partition+0x443>
c0004581:	83 c0 df             	add    eax,0xffffffdf
c0004584:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c000458c:	83 d2 ff             	adc    edx,0xffffffff
c000458f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004593:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0004597:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000459b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000459f:	83 c0 bd             	add    eax,0xffffffbd
c00045a2:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00045a9:	83 d2 ff             	adc    edx,0xffffffff
c00045ac:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00045b0:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00045b4:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00045bc:	be 22 00 00 00       	mov    esi,0x22
c00045c1:	31 ff                	xor    edi,edi
c00045c3:	c7 44 24 2c 00 00 21 50 	mov    DWORD PTR [esp+0x2c],0x50210000
c00045cb:	c7 44 24 28 ff ff ff ff 	mov    DWORD PTR [esp+0x28],0xffffffff
c00045d3:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c00045db:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c00045df:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00045e5:	75 0e                	jne    c00045f5 <create_partition+0xca>
c00045e7:	b9 00 02 00 00       	mov    ecx,0x200
c00045ec:	31 d2                	xor    edx,edx
c00045ee:	89 d8                	mov    eax,ebx
c00045f0:	e8 fa d5 ff ff       	call   c0001bef <mem_set>
c00045f5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00045f9:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00045fd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0004601:	0b 04 24             	or     eax,DWORD PTR [esp]
c0004604:	0f 84 23 01 00 00    	je     c000472d <create_partition+0x202>
c000460a:	89 f0                	mov    eax,esi
c000460c:	89 fa                	mov    edx,edi
c000460e:	05 ff 07 00 00       	add    eax,0x7ff
c0004613:	83 d2 00             	adc    edx,0x0
c0004616:	89 c1                	mov    ecx,eax
c0004618:	89 d7                	mov    edi,edx
c000461a:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c0004620:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004624:	89 ce                	mov    esi,ecx
c0004626:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c000462a:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c000462e:	8b 54 c8 04          	mov    edx,DWORD PTR [eax+ecx*8+0x4]
c0004632:	8b 04 c8             	mov    eax,DWORD PTR [eax+ecx*8]
c0004635:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0004639:	89 04 24             	mov    DWORD PTR [esp],eax
c000463c:	b8 64 00 00 00       	mov    eax,0x64
c0004641:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0004644:	b8 00 00 00 00       	mov    eax,0x0
c0004649:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c000464d:	72 41                	jb     c0004690 <create_partition+0x165>
c000464f:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0004653:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0004657:	0f af 0c 24          	imul   ecx,DWORD PTR [esp]
c000465b:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0004660:	01 c1                	add    ecx,eax
c0004662:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0004666:	f7 24 24             	mul    DWORD PTR [esp]
c0004669:	6a 00                	push   0x0
c000466b:	01 ca                	add    edx,ecx
c000466d:	6a 64                	push   0x64
c000466f:	52                   	push   edx
c0004670:	50                   	push   eax
c0004671:	e8 0e c9 01 00       	call   c0020f84 <__udivdi3>
c0004676:	83 c4 10             	add    esp,0x10
c0004679:	05 ff 07 00 00       	add    eax,0x7ff
c000467e:	83 d2 00             	adc    edx,0x0
c0004681:	89 c1                	mov    ecx,eax
c0004683:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0004687:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c000468d:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0004690:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004693:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0004697:	01 f0                	add    eax,esi
c0004699:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000469d:	11 fa                	adc    edx,edi
c000469f:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c00046a3:	19 d1                	sbb    ecx,edx
c00046a5:	73 2e                	jae    c00046d5 <create_partition+0x1aa>
c00046a7:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c00046ab:	89 f8                	mov    eax,edi
c00046ad:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00046b4:	1b 44 24 14          	sbb    eax,DWORD PTR [esp+0x14]
c00046b8:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00046c0:	73 6b                	jae    c000472d <create_partition+0x202>
c00046c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00046c6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00046ca:	29 f0                	sub    eax,esi
c00046cc:	19 fa                	sbb    edx,edi
c00046ce:	89 04 24             	mov    DWORD PTR [esp],eax
c00046d1:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00046d5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00046d9:	0b 04 24             	or     eax,DWORD PTR [esp]
c00046dc:	74 4f                	je     c000472d <create_partition+0x202>
c00046de:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c00046e1:	b9 10 00 00 00       	mov    ecx,0x10
c00046e6:	ba 70 20 02 c0       	mov    edx,0xc0022070
c00046eb:	e8 ea d4 ff ff       	call   c0001bda <mem_cpy>
c00046f0:	8d 54 2b 10          	lea    edx,[ebx+ebp*1+0x10]
c00046f4:	b9 10 00 00 00       	mov    ecx,0x10
c00046f9:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00046fd:	e8 2c db ff ff       	call   c000222e <make_rand>
c0004702:	89 f2                	mov    edx,esi
c0004704:	89 f9                	mov    ecx,edi
c0004706:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000470a:	8d 44 2b 20          	lea    eax,[ebx+ebp*1+0x20]
c000470e:	e8 c1 d4 ff ff       	call   c0001bd4 <st_qword>
c0004713:	03 34 24             	add    esi,DWORD PTR [esp]
c0004716:	8d 44 2b 28          	lea    eax,[ebx+ebp*1+0x28]
c000471a:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c000471e:	89 f2                	mov    edx,esi
c0004720:	89 f9                	mov    ecx,edi
c0004722:	83 c2 ff             	add    edx,0xffffffff
c0004725:	83 d1 ff             	adc    ecx,0xffffffff
c0004728:	e8 a7 d4 ff ff       	call   c0001bd4 <st_qword>
c000472d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004731:	83 e8 80             	sub    eax,0xffffff80
c0004734:	89 c5                	mov    ebp,eax
c0004736:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000473a:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0004740:	75 6b                	jne    c00047ad <create_partition+0x282>
c0004742:	45                   	inc    ebp
c0004743:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0004747:	0f b6 54 2b ff       	movzx  edx,BYTE PTR [ebx+ebp*1-0x1]
c000474c:	e8 39 da ff ff       	call   c000218a <crc32>
c0004751:	81 fd 00 02 00 00    	cmp    ebp,0x200
c0004757:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000475b:	75 e5                	jne    c0004742 <create_partition+0x217>
c000475d:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0004761:	31 d2                	xor    edx,edx
c0004763:	83 ec 0c             	sub    esp,0xc
c0004766:	c1 ed 09             	shr    ebp,0x9
c0004769:	6a 01                	push   0x1
c000476b:	8d 45 02             	lea    eax,[ebp+0x2]
c000476e:	52                   	push   edx
c000476f:	50                   	push   eax
c0004770:	53                   	push   ebx
c0004771:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004775:	e8 ac d3 ff ff       	call   c0001b26 <disk_write>
c000477a:	83 c4 20             	add    esp,0x20
c000477d:	85 c0                	test   eax,eax
c000477f:	0f 85 d7 fd ff ff    	jne    c000455c <create_partition+0x31>
c0004785:	83 ec 0c             	sub    esp,0xc
c0004788:	31 d2                	xor    edx,edx
c000478a:	6a 01                	push   0x1
c000478c:	89 e8                	mov    eax,ebp
c000478e:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c0004792:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c0004796:	52                   	push   edx
c0004797:	50                   	push   eax
c0004798:	53                   	push   ebx
c0004799:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000479d:	e8 84 d3 ff ff       	call   c0001b26 <disk_write>
c00047a2:	83 c4 20             	add    esp,0x20
c00047a5:	85 c0                	test   eax,eax
c00047a7:	0f 85 af fd ff ff    	jne    c000455c <create_partition+0x31>
c00047ad:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00047b1:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00047b5:	3d 00 40 00 00       	cmp    eax,0x4000
c00047ba:	74 0d                	je     c00047c9 <create_partition+0x29e>
c00047bc:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00047c0:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00047c4:	e9 12 fe ff ff       	jmp    c00045db <create_partition+0xb0>
c00047c9:	31 d2                	xor    edx,edx
c00047cb:	b9 00 02 00 00       	mov    ecx,0x200
c00047d0:	89 d8                	mov    eax,ebx
c00047d2:	8d 6b 20             	lea    ebp,[ebx+0x20]
c00047d5:	e8 15 d4 ff ff       	call   c0001bef <mem_set>
c00047da:	8d 7b 48             	lea    edi,[ebx+0x48]
c00047dd:	b9 10 00 00 00       	mov    ecx,0x10
c00047e2:	ba 60 1f 02 c0       	mov    edx,0xc0021f60
c00047e7:	89 d8                	mov    eax,ebx
c00047e9:	e8 ec d3 ff ff       	call   c0001bda <mem_cpy>
c00047ee:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00047f2:	8d 43 58             	lea    eax,[ebx+0x58]
c00047f5:	f7 d2                	not    edx
c00047f7:	e8 d5 d3 ff ff       	call   c0001bd1 <st_dword>
c00047fc:	8d 43 18             	lea    eax,[ebx+0x18]
c00047ff:	31 c9                	xor    ecx,ecx
c0004801:	89 04 24             	mov    DWORD PTR [esp],eax
c0004804:	ba 01 00 00 00       	mov    edx,0x1
c0004809:	e8 c6 d3 ff ff       	call   c0001bd4 <st_qword>
c000480e:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c0004812:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c0004816:	83 c2 ff             	add    edx,0xffffffff
c0004819:	89 e8                	mov    eax,ebp
c000481b:	83 d1 ff             	adc    ecx,0xffffffff
c000481e:	e8 b1 d3 ff ff       	call   c0001bd4 <st_qword>
c0004823:	31 c9                	xor    ecx,ecx
c0004825:	8d 43 28             	lea    eax,[ebx+0x28]
c0004828:	ba 22 00 00 00       	mov    edx,0x22
c000482d:	e8 a2 d3 ff ff       	call   c0001bd4 <st_qword>
c0004832:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0004836:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000483a:	83 c2 de             	add    edx,0xffffffde
c000483d:	8d 43 30             	lea    eax,[ebx+0x30]
c0004840:	83 d1 ff             	adc    ecx,0xffffffff
c0004843:	31 f6                	xor    esi,esi
c0004845:	e8 8a d3 ff ff       	call   c0001bd4 <st_qword>
c000484a:	8d 43 54             	lea    eax,[ebx+0x54]
c000484d:	ba 80 00 00 00       	mov    edx,0x80
c0004852:	e8 7a d3 ff ff       	call   c0001bd1 <st_dword>
c0004857:	8d 43 50             	lea    eax,[ebx+0x50]
c000485a:	ba 80 00 00 00       	mov    edx,0x80
c000485f:	e8 6d d3 ff ff       	call   c0001bd1 <st_dword>
c0004864:	ba 02 00 00 00       	mov    edx,0x2
c0004869:	89 f8                	mov    eax,edi
c000486b:	e8 61 d3 ff ff       	call   c0001bd1 <st_dword>
c0004870:	8d 53 38             	lea    edx,[ebx+0x38]
c0004873:	b9 10 00 00 00       	mov    ecx,0x10
c0004878:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000487c:	e8 ad d9 ff ff       	call   c000222e <make_rand>
c0004881:	83 c8 ff             	or     eax,0xffffffff
c0004884:	46                   	inc    esi
c0004885:	0f b6 54 33 ff       	movzx  edx,BYTE PTR [ebx+esi*1-0x1]
c000488a:	e8 fb d8 ff ff       	call   c000218a <crc32>
c000488f:	83 fe 5c             	cmp    esi,0x5c
c0004892:	75 f0                	jne    c0004884 <create_partition+0x359>
c0004894:	f7 d0                	not    eax
c0004896:	8d 73 10             	lea    esi,[ebx+0x10]
c0004899:	89 c2                	mov    edx,eax
c000489b:	89 f0                	mov    eax,esi
c000489d:	e8 2f d3 ff ff       	call   c0001bd1 <st_dword>
c00048a2:	83 ec 0c             	sub    esp,0xc
c00048a5:	6a 01                	push   0x1
c00048a7:	6a 00                	push   0x0
c00048a9:	6a 01                	push   0x1
c00048ab:	53                   	push   ebx
c00048ac:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00048b0:	e8 71 d2 ff ff       	call   c0001b26 <disk_write>
c00048b5:	83 c4 20             	add    esp,0x20
c00048b8:	85 c0                	test   eax,eax
c00048ba:	0f 85 9c fc ff ff    	jne    c000455c <create_partition+0x31>
c00048c0:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c00048c4:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c00048c8:	83 c2 ff             	add    edx,0xffffffff
c00048cb:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00048ce:	83 d1 ff             	adc    ecx,0xffffffff
c00048d1:	e8 fe d2 ff ff       	call   c0001bd4 <st_qword>
c00048d6:	ba 01 00 00 00       	mov    edx,0x1
c00048db:	31 c9                	xor    ecx,ecx
c00048dd:	89 e8                	mov    eax,ebp
c00048df:	e8 f0 d2 ff ff       	call   c0001bd4 <st_qword>
c00048e4:	89 f8                	mov    eax,edi
c00048e6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00048ea:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00048ee:	31 ff                	xor    edi,edi
c00048f0:	e8 df d2 ff ff       	call   c0001bd4 <st_qword>
c00048f5:	89 f0                	mov    eax,esi
c00048f7:	31 d2                	xor    edx,edx
c00048f9:	e8 d3 d2 ff ff       	call   c0001bd1 <st_dword>
c00048fe:	83 c8 ff             	or     eax,0xffffffff
c0004901:	47                   	inc    edi
c0004902:	0f b6 54 3b ff       	movzx  edx,BYTE PTR [ebx+edi*1-0x1]
c0004907:	e8 7e d8 ff ff       	call   c000218a <crc32>
c000490c:	83 ff 5c             	cmp    edi,0x5c
c000490f:	75 f0                	jne    c0004901 <create_partition+0x3d6>
c0004911:	f7 d0                	not    eax
c0004913:	89 c2                	mov    edx,eax
c0004915:	89 f0                	mov    eax,esi
c0004917:	e8 b5 d2 ff ff       	call   c0001bd1 <st_dword>
c000491c:	83 ec 0c             	sub    esp,0xc
c000491f:	6a 01                	push   0x1
c0004921:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0004925:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004929:	83 c0 ff             	add    eax,0xffffffff
c000492c:	83 d2 ff             	adc    edx,0xffffffff
c000492f:	52                   	push   edx
c0004930:	50                   	push   eax
c0004931:	53                   	push   ebx
c0004932:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004936:	e8 eb d1 ff ff       	call   c0001b26 <disk_write>
c000493b:	83 c4 20             	add    esp,0x20
c000493e:	85 c0                	test   eax,eax
c0004940:	0f 85 16 fc ff ff    	jne    c000455c <create_partition+0x31>
c0004946:	31 d2                	xor    edx,edx
c0004948:	89 d8                	mov    eax,ebx
c000494a:	b9 00 02 00 00       	mov    ecx,0x200
c000494f:	e8 9b d2 ff ff       	call   c0001bef <mem_set>
c0004954:	8d 83 be 01 00 00    	lea    eax,[ebx+0x1be]
c000495a:	b9 10 00 00 00       	mov    ecx,0x10
c000495f:	ba 70 1f 02 c0       	mov    edx,0xc0021f70
c0004964:	e8 71 d2 ff ff       	call   c0001bda <mem_cpy>
c0004969:	e9 21 01 00 00       	jmp    c0004a8f <create_partition+0x564>
c000496e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004972:	b9 05 00 00 00       	mov    ecx,0x5
c0004977:	89 04 24             	mov    DWORD PTR [esp],eax
c000497a:	bf 08 00 00 00       	mov    edi,0x8
c000497f:	89 f8                	mov    eax,edi
c0004981:	31 d2                	xor    edx,edx
c0004983:	0f b6 f0             	movzx  esi,al
c0004986:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004989:	f7 f6                	div    esi
c000498b:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0004990:	76 0a                	jbe    c000499c <create_partition+0x471>
c0004992:	d1 e7                	shl    edi,1
c0004994:	49                   	dec    ecx
c0004995:	75 e8                	jne    c000497f <create_partition+0x454>
c0004997:	bf ff ff ff ff       	mov    edi,0xffffffff
c000499c:	b9 00 02 00 00       	mov    ecx,0x200
c00049a1:	31 d2                	xor    edx,edx
c00049a3:	89 d8                	mov    eax,ebx
c00049a5:	8d b3 c6 01 00 00    	lea    esi,[ebx+0x1c6]
c00049ab:	e8 3f d2 ff ff       	call   c0001bef <mem_set>
c00049b0:	b9 64 00 00 00       	mov    ecx,0x64
c00049b5:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00049b8:	31 d2                	xor    edx,edx
c00049ba:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00049c2:	f7 f1                	div    ecx
c00049c4:	b9 3f 00 00 00       	mov    ecx,0x3f
c00049c9:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00049cd:	89 f8                	mov    eax,edi
c00049cf:	0f b6 c0             	movzx  eax,al
c00049d2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00049d6:	e9 80 00 00 00       	jmp    c0004a5b <create_partition+0x530>
c00049db:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00049de:	29 cf                	sub    edi,ecx
c00049e0:	89 ca                	mov    edx,ecx
c00049e2:	89 f0                	mov    eax,esi
c00049e4:	bd 3f 00 00 00       	mov    ebp,0x3f
c00049e9:	e8 e3 d1 ff ff       	call   c0001bd1 <st_dword>
c00049ee:	8d 46 04             	lea    eax,[esi+0x4]
c00049f1:	89 fa                	mov    edx,edi
c00049f3:	83 c6 10             	add    esi,0x10
c00049f6:	e8 d6 d1 ff ff       	call   c0001bd1 <st_dword>
c00049fb:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c00049ff:	31 d2                	xor    edx,edx
c0004a01:	88 46 ec             	mov    BYTE PTR [esi-0x14],al
c0004a04:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c0004a08:	89 c8                	mov    eax,ecx
c0004a0a:	01 f9                	add    ecx,edi
c0004a0c:	f7 f5                	div    ebp
c0004a0e:	89 d5                	mov    ebp,edx
c0004a10:	31 d2                	xor    edx,edx
c0004a12:	45                   	inc    ebp
c0004a13:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c0004a17:	88 56 e9             	mov    BYTE PTR [esi-0x17],dl
c0004a1a:	88 46 eb             	mov    BYTE PTR [esi-0x15],al
c0004a1d:	89 c2                	mov    edx,eax
c0004a1f:	8d 41 ff             	lea    eax,[ecx-0x1]
c0004a22:	c1 ea 02             	shr    edx,0x2
c0004a25:	83 e2 c0             	and    edx,0xffffffc0
c0004a28:	09 ea                	or     edx,ebp
c0004a2a:	bd 3f 00 00 00       	mov    ebp,0x3f
c0004a2f:	88 56 ea             	mov    BYTE PTR [esi-0x16],dl
c0004a32:	31 d2                	xor    edx,edx
c0004a34:	f7 f5                	div    ebp
c0004a36:	89 d7                	mov    edi,edx
c0004a38:	31 d2                	xor    edx,edx
c0004a3a:	47                   	inc    edi
c0004a3b:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c0004a3f:	88 56 ed             	mov    BYTE PTR [esi-0x13],dl
c0004a42:	88 46 ef             	mov    BYTE PTR [esi-0x11],al
c0004a45:	89 c5                	mov    ebp,eax
c0004a47:	c1 ed 02             	shr    ebp,0x2
c0004a4a:	83 e5 c0             	and    ebp,0xffffffc0
c0004a4d:	09 ef                	or     edi,ebp
c0004a4f:	89 fa                	mov    edx,edi
c0004a51:	88 56 ee             	mov    BYTE PTR [esi-0x12],dl
c0004a54:	83 7c 24 10 04       	cmp    DWORD PTR [esp+0x10],0x4
c0004a59:	74 34                	je     c0004a8f <create_partition+0x564>
c0004a5b:	85 c9                	test   ecx,ecx
c0004a5d:	74 30                	je     c0004a8f <create_partition+0x564>
c0004a5f:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0004a62:	76 2b                	jbe    c0004a8f <create_partition+0x564>
c0004a64:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004a68:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0004a6c:	8b 3c f8             	mov    edi,DWORD PTR [eax+edi*8]
c0004a6f:	83 ff 64             	cmp    edi,0x64
c0004a72:	76 4b                	jbe    c0004abf <create_partition+0x594>
c0004a74:	89 f8                	mov    eax,edi
c0004a76:	01 c8                	add    eax,ecx
c0004a78:	0f 82 5d ff ff ff    	jb     c00049db <create_partition+0x4b0>
c0004a7e:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0004a81:	0f 87 54 ff ff ff    	ja     c00049db <create_partition+0x4b0>
c0004a87:	85 ff                	test   edi,edi
c0004a89:	0f 85 51 ff ff ff    	jne    c00049e0 <create_partition+0x4b5>
c0004a8f:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c0004a95:	ba 55 aa 00 00       	mov    edx,0xaa55
c0004a9a:	e8 2e d1 ff ff       	call   c0001bcd <st_word>
c0004a9f:	83 ec 0c             	sub    esp,0xc
c0004aa2:	6a 01                	push   0x1
c0004aa4:	6a 00                	push   0x0
c0004aa6:	6a 00                	push   0x0
c0004aa8:	53                   	push   ebx
c0004aa9:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004aad:	e8 74 d0 ff ff       	call   c0001b26 <disk_write>
c0004ab2:	83 c4 20             	add    esp,0x20
c0004ab5:	85 c0                	test   eax,eax
c0004ab7:	0f 95 c0             	setne  al
c0004aba:	0f b6 c0             	movzx  eax,al
c0004abd:	eb 0e                	jmp    c0004acd <create_partition+0x5a2>
c0004abf:	74 07                	je     c0004ac8 <create_partition+0x59d>
c0004ac1:	0f af 7c 24 24       	imul   edi,DWORD PTR [esp+0x24]
c0004ac6:	eb ac                	jmp    c0004a74 <create_partition+0x549>
c0004ac8:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0004acb:	eb a7                	jmp    c0004a74 <create_partition+0x549>
c0004acd:	83 c4 5c             	add    esp,0x5c
c0004ad0:	5b                   	pop    ebx
c0004ad1:	5e                   	pop    esi
c0004ad2:	5f                   	pop    edi
c0004ad3:	5d                   	pop    ebp
c0004ad4:	c3                   	ret    

c0004ad5 <get_fileinfo>:
c0004ad5:	55                   	push   ebp
c0004ad6:	57                   	push   edi
c0004ad7:	56                   	push   esi
c0004ad8:	53                   	push   ebx
c0004ad9:	83 ec 1c             	sub    esp,0x1c
c0004adc:	8b 30                	mov    esi,DWORD PTR [eax]
c0004ade:	c6 42 1a 00          	mov    BYTE PTR [edx+0x1a],0x0
c0004ae2:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0004ae6:	8b 48 34             	mov    ecx,DWORD PTR [eax+0x34]
c0004ae9:	0b 48 30             	or     ecx,DWORD PTR [eax+0x30]
c0004aec:	0f 84 dc 01 00 00    	je     c0004cce <get_fileinfo+0x1f9>
c0004af2:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0004af5:	75 0f                	jne    c0004b06 <get_fileinfo+0x31>
c0004af7:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0004afa:	83 c4 1c             	add    esp,0x1c
c0004afd:	5b                   	pop    ebx
c0004afe:	5e                   	pop    esi
c0004aff:	5f                   	pop    edi
c0004b00:	5d                   	pop    ebp
c0004b01:	e9 58 d5 ff ff       	jmp    c000205e <get_xfileinfo>
c0004b06:	89 d3                	mov    ebx,edx
c0004b08:	89 c6                	mov    esi,eax
c0004b0a:	83 78 48 ff          	cmp    DWORD PTR [eax+0x48],0xffffffff
c0004b0e:	74 6a                	je     c0004b7a <get_fileinfo+0xa5>
c0004b10:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0004b18:	31 ed                	xor    ebp,ebp
c0004b1a:	31 ff                	xor    edi,edi
c0004b1c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0004b20:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004b24:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0004b27:	0f b7 14 08          	movzx  edx,WORD PTR [eax+ecx*1]
c0004b2b:	66 85 d2             	test   dx,dx
c0004b2e:	74 3e                	je     c0004b6e <get_fileinfo+0x99>
c0004b30:	66 85 ed             	test   bp,bp
c0004b33:	75 0c                	jne    c0004b41 <get_fileinfo+0x6c>
c0004b35:	8d 82 00 28 00 00    	lea    eax,[edx+0x2800]
c0004b3b:	66 3d ff 07          	cmp    ax,0x7ff
c0004b3f:	76 22                	jbe    c0004b63 <get_fileinfo+0x8e>
c0004b41:	b9 ff 00 00 00       	mov    ecx,0xff
c0004b46:	89 e8                	mov    eax,ebp
c0004b48:	29 f9                	sub    ecx,edi
c0004b4a:	c1 e0 10             	shl    eax,0x10
c0004b4d:	09 d0                	or     eax,edx
c0004b4f:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c0004b53:	e8 a3 d1 ff ff       	call   c0001cfb <put_utf>
c0004b58:	84 c0                	test   al,al
c0004b5a:	74 10                	je     c0004b6c <get_fileinfo+0x97>
c0004b5c:	0f b6 c0             	movzx  eax,al
c0004b5f:	31 d2                	xor    edx,edx
c0004b61:	01 c7                	add    edi,eax
c0004b63:	83 44 24 0c 02       	add    DWORD PTR [esp+0xc],0x2
c0004b68:	89 d5                	mov    ebp,edx
c0004b6a:	eb b0                	jmp    c0004b1c <get_fileinfo+0x47>
c0004b6c:	31 ff                	xor    edi,edi
c0004b6e:	66 85 ed             	test   bp,bp
c0004b71:	74 02                	je     c0004b75 <get_fileinfo+0xa0>
c0004b73:	31 ff                	xor    edi,edi
c0004b75:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c0004b7a:	31 ff                	xor    edi,edi
c0004b7c:	31 c9                	xor    ecx,ecx
c0004b7e:	83 f9 0a             	cmp    ecx,0xa
c0004b81:	0f 87 ad 00 00 00    	ja     c0004c34 <get_fileinfo+0x15f>
c0004b87:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004b8a:	8d 69 01             	lea    ebp,[ecx+0x1]
c0004b8d:	0f b6 14 08          	movzx  edx,BYTE PTR [eax+ecx*1]
c0004b91:	66 83 fa 20          	cmp    dx,0x20
c0004b95:	0f 84 92 00 00 00    	je     c0004c2d <get_fileinfo+0x158>
c0004b9b:	66 83 fa 05          	cmp    dx,0x5
c0004b9f:	75 05                	jne    c0004ba6 <get_fileinfo+0xd1>
c0004ba1:	ba e5 00 00 00       	mov    edx,0xe5
c0004ba6:	83 ff 0b             	cmp    edi,0xb
c0004ba9:	77 0b                	ja     c0004bb6 <get_fileinfo+0xe1>
c0004bab:	83 fd 09             	cmp    ebp,0x9
c0004bae:	75 06                	jne    c0004bb6 <get_fileinfo+0xe1>
c0004bb0:	c6 44 3b 0d 2e       	mov    BYTE PTR [ebx+edi*1+0xd],0x2e
c0004bb5:	47                   	inc    edi
c0004bb6:	0f b7 c2             	movzx  eax,dx
c0004bb9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004bbd:	e8 6d d0 ff ff       	call   c0001c2f <dbc_1st>
c0004bc2:	85 c0                	test   eax,eax
c0004bc4:	74 2f                	je     c0004bf5 <get_fileinfo+0x120>
c0004bc6:	83 fd 08             	cmp    ebp,0x8
c0004bc9:	74 2a                	je     c0004bf5 <get_fileinfo+0x120>
c0004bcb:	83 fd 0b             	cmp    ebp,0xb
c0004bce:	74 25                	je     c0004bf5 <get_fileinfo+0x120>
c0004bd0:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004bd3:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c0004bd7:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0004bdb:	e8 52 d0 ff ff       	call   c0001c32 <dbc_2nd>
c0004be0:	85 c0                	test   eax,eax
c0004be2:	74 11                	je     c0004bf5 <get_fileinfo+0x120>
c0004be4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004be8:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0004bed:	c1 e2 08             	shl    edx,0x8
c0004bf0:	8d 69 02             	lea    ebp,[ecx+0x2]
c0004bf3:	09 c2                	or     edx,eax
c0004bf5:	0f b7 d2             	movzx  edx,dx
c0004bf8:	50                   	push   eax
c0004bf9:	50                   	push   eax
c0004bfa:	68 b5 01 00 00       	push   0x1b5
c0004bff:	52                   	push   edx
c0004c00:	e8 87 3a 00 00       	call   c000868c <ff_oem2uni>
c0004c05:	83 c4 10             	add    esp,0x10
c0004c08:	66 85 c0             	test   ax,ax
c0004c0b:	75 04                	jne    c0004c11 <get_fileinfo+0x13c>
c0004c0d:	31 ff                	xor    edi,edi
c0004c0f:	eb 23                	jmp    c0004c34 <get_fileinfo+0x15f>
c0004c11:	b9 0c 00 00 00       	mov    ecx,0xc
c0004c16:	8d 54 3b 0d          	lea    edx,[ebx+edi*1+0xd]
c0004c1a:	29 f9                	sub    ecx,edi
c0004c1c:	0f b7 c0             	movzx  eax,ax
c0004c1f:	e8 d7 d0 ff ff       	call   c0001cfb <put_utf>
c0004c24:	84 c0                	test   al,al
c0004c26:	74 e5                	je     c0004c0d <get_fileinfo+0x138>
c0004c28:	0f b6 c0             	movzx  eax,al
c0004c2b:	01 c7                	add    edi,eax
c0004c2d:	89 e9                	mov    ecx,ebp
c0004c2f:	e9 4a ff ff ff       	jmp    c0004b7e <get_fileinfo+0xa9>
c0004c34:	c6 44 3b 0d 00       	mov    BYTE PTR [ebx+edi*1+0xd],0x0
c0004c39:	80 7b 1a 00          	cmp    BYTE PTR [ebx+0x1a],0x0
c0004c3d:	75 54                	jne    c0004c93 <get_fileinfo+0x1be>
c0004c3f:	85 ff                	test   edi,edi
c0004c41:	75 0b                	jne    c0004c4e <get_fileinfo+0x179>
c0004c43:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0004c47:	ba 01 00 00 00       	mov    edx,0x1
c0004c4c:	eb 33                	jmp    c0004c81 <get_fileinfo+0x1ac>
c0004c4e:	b1 08                	mov    cl,0x8
c0004c50:	31 d2                	xor    edx,edx
c0004c52:	66 0f be 44 13 0d    	movsx  ax,BYTE PTR [ebx+edx*1+0xd]
c0004c58:	84 c0                	test   al,al
c0004c5a:	74 25                	je     c0004c81 <get_fileinfo+0x1ac>
c0004c5c:	66 83 f8 2e          	cmp    ax,0x2e
c0004c60:	74 16                	je     c0004c78 <get_fileinfo+0x1a3>
c0004c62:	8d 78 bf             	lea    edi,[eax-0x41]
c0004c65:	66 83 ff 19          	cmp    di,0x19
c0004c69:	77 0f                	ja     c0004c7a <get_fileinfo+0x1a5>
c0004c6b:	8b 7e 38             	mov    edi,DWORD PTR [esi+0x38]
c0004c6e:	84 4f 0c             	test   BYTE PTR [edi+0xc],cl
c0004c71:	74 07                	je     c0004c7a <get_fileinfo+0x1a5>
c0004c73:	83 c0 20             	add    eax,0x20
c0004c76:	eb 02                	jmp    c0004c7a <get_fileinfo+0x1a5>
c0004c78:	b1 10                	mov    cl,0x10
c0004c7a:	88 44 13 1a          	mov    BYTE PTR [ebx+edx*1+0x1a],al
c0004c7e:	42                   	inc    edx
c0004c7f:	eb d1                	jmp    c0004c52 <get_fileinfo+0x17d>
c0004c81:	c6 44 13 1a 00       	mov    BYTE PTR [ebx+edx*1+0x1a],0x0
c0004c86:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004c89:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c0004c8d:	75 04                	jne    c0004c93 <get_fileinfo+0x1be>
c0004c8f:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0004c93:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004c96:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c0004c99:	88 43 0c             	mov    BYTE PTR [ebx+0xc],al
c0004c9c:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004c9f:	83 c0 1c             	add    eax,0x1c
c0004ca2:	e8 c1 ce ff ff       	call   c0001b68 <ld_dword>
c0004ca7:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0004cae:	89 03                	mov    DWORD PTR [ebx],eax
c0004cb0:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004cb3:	83 c0 16             	add    eax,0x16
c0004cb6:	e8 a0 ce ff ff       	call   c0001b5b <ld_word>
c0004cbb:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c0004cbf:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004cc2:	83 c0 18             	add    eax,0x18
c0004cc5:	e8 91 ce ff ff       	call   c0001b5b <ld_word>
c0004cca:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0004cce:	83 c4 1c             	add    esp,0x1c
c0004cd1:	5b                   	pop    ebx
c0004cd2:	5e                   	pop    esi
c0004cd3:	5f                   	pop    edi
c0004cd4:	5d                   	pop    ebp
c0004cd5:	c3                   	ret    

c0004cd6 <ld_clust.isra.0>:
c0004cd6:	56                   	push   esi
c0004cd7:	89 c6                	mov    esi,eax
c0004cd9:	53                   	push   ebx
c0004cda:	8d 42 1a             	lea    eax,[edx+0x1a]
c0004cdd:	89 d3                	mov    ebx,edx
c0004cdf:	e8 77 ce ff ff       	call   c0001b5b <ld_word>
c0004ce4:	0f b7 c8             	movzx  ecx,ax
c0004ce7:	89 f0                	mov    eax,esi
c0004ce9:	3c 03                	cmp    al,0x3
c0004ceb:	75 0d                	jne    c0004cfa <ld_clust.isra.0+0x24>
c0004ced:	8d 43 14             	lea    eax,[ebx+0x14]
c0004cf0:	e8 66 ce ff ff       	call   c0001b5b <ld_word>
c0004cf5:	c1 e0 10             	shl    eax,0x10
c0004cf8:	09 c1                	or     ecx,eax
c0004cfa:	89 c8                	mov    eax,ecx
c0004cfc:	5b                   	pop    ebx
c0004cfd:	5e                   	pop    esi
c0004cfe:	c3                   	ret    

c0004cff <st_clust.isra.1>:
c0004cff:	56                   	push   esi
c0004d00:	89 c6                	mov    esi,eax
c0004d02:	53                   	push   ebx
c0004d03:	89 d3                	mov    ebx,edx
c0004d05:	0f b7 d1             	movzx  edx,cx
c0004d08:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0004d0b:	e8 bd ce ff ff       	call   c0001bcd <st_word>
c0004d10:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c0004d13:	75 0f                	jne    c0004d24 <st_clust.isra.1+0x25>
c0004d15:	c1 e9 10             	shr    ecx,0x10
c0004d18:	8d 43 14             	lea    eax,[ebx+0x14]
c0004d1b:	89 ca                	mov    edx,ecx
c0004d1d:	5b                   	pop    ebx
c0004d1e:	5e                   	pop    esi
c0004d1f:	e9 a9 ce ff ff       	jmp    c0001bcd <st_word>
c0004d24:	5b                   	pop    ebx
c0004d25:	5e                   	pop    esi
c0004d26:	c3                   	ret    

c0004d27 <init_alloc_info.isra.2>:
c0004d27:	56                   	push   esi
c0004d28:	53                   	push   ebx
c0004d29:	89 c6                	mov    esi,eax
c0004d2b:	89 d3                	mov    ebx,edx
c0004d2d:	51                   	push   ecx
c0004d2e:	8b 00                	mov    eax,DWORD PTR [eax]
c0004d30:	83 c0 34             	add    eax,0x34
c0004d33:	e8 30 ce ff ff       	call   c0001b68 <ld_dword>
c0004d38:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004d3b:	8b 06                	mov    eax,DWORD PTR [esi]
c0004d3d:	83 c0 38             	add    eax,0x38
c0004d40:	e8 3b ce ff ff       	call   c0001b80 <ld_qword>
c0004d45:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004d48:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0004d4b:	8b 06                	mov    eax,DWORD PTR [esi]
c0004d4d:	8a 40 21             	mov    al,BYTE PTR [eax+0x21]
c0004d50:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004d57:	83 e0 02             	and    eax,0x2
c0004d5a:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004d5d:	5b                   	pop    ebx
c0004d5e:	5b                   	pop    ebx
c0004d5f:	5e                   	pop    esi
c0004d60:	c3                   	ret    

c0004d61 <follow_path>:
c0004d61:	56                   	push   esi
c0004d62:	53                   	push   ebx
c0004d63:	89 c3                	mov    ebx,eax
c0004d65:	83 ec 14             	sub    esp,0x14
c0004d68:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004d6c:	8b 30                	mov    esi,DWORD PTR [eax]
c0004d6e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004d72:	8a 10                	mov    dl,BYTE PTR [eax]
c0004d74:	80 fa 5c             	cmp    dl,0x5c
c0004d77:	75 07                	jne    c0004d80 <follow_path+0x1f>
c0004d79:	40                   	inc    eax
c0004d7a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004d7e:	eb ee                	jmp    c0004d6e <follow_path+0xd>
c0004d80:	80 fa 2f             	cmp    dl,0x2f
c0004d83:	74 f4                	je     c0004d79 <follow_path+0x18>
c0004d85:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0004d8c:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004d93:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0004d96:	77 52                	ja     c0004dea <follow_path+0x89>
c0004d98:	c6 43 47 80          	mov    BYTE PTR [ebx+0x47],0x80
c0004d9c:	31 d2                	xor    edx,edx
c0004d9e:	89 d8                	mov    eax,ebx
c0004da0:	e8 12 e3 ff ff       	call   c00030b7 <dir_sdi>
c0004da5:	eb 7c                	jmp    c0004e23 <follow_path+0xc2>
c0004da7:	89 d8                	mov    eax,ebx
c0004da9:	e8 6e f2 ff ff       	call   c000401c <dir_find>
c0004dae:	8a 53 47             	mov    dl,BYTE PTR [ebx+0x47]
c0004db1:	85 c0                	test   eax,eax
c0004db3:	75 46                	jne    c0004dfb <follow_path+0x9a>
c0004db5:	80 e2 04             	and    dl,0x4
c0004db8:	75 69                	jne    c0004e23 <follow_path+0xc2>
c0004dba:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0004dbe:	74 5e                	je     c0004e1e <follow_path+0xbd>
c0004dc0:	8a 06                	mov    al,BYTE PTR [esi]
c0004dc2:	3c 04                	cmp    al,0x4
c0004dc4:	75 41                	jne    c0004e07 <follow_path+0xa6>
c0004dc6:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004dc9:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c0004dcd:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0004dd0:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004dd3:	30 c0                	xor    al,al
c0004dd5:	09 d0                	or     eax,edx
c0004dd7:	89 da                	mov    edx,ebx
c0004dd9:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0004ddc:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0004ddf:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0004de2:	8d 46 10             	lea    eax,[esi+0x10]
c0004de5:	e8 3d ff ff ff       	call   c0004d27 <init_alloc_info.isra.2>
c0004dea:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004dee:	89 d8                	mov    eax,ebx
c0004df0:	e8 a9 ed ff ff       	call   c0003b9e <create_name>
c0004df5:	85 c0                	test   eax,eax
c0004df7:	74 ae                	je     c0004da7 <follow_path+0x46>
c0004df9:	eb 28                	jmp    c0004e23 <follow_path+0xc2>
c0004dfb:	83 f8 04             	cmp    eax,0x4
c0004dfe:	75 23                	jne    c0004e23 <follow_path+0xc2>
c0004e00:	80 e2 04             	and    dl,0x4
c0004e03:	74 19                	je     c0004e1e <follow_path+0xbd>
c0004e05:	eb 1c                	jmp    c0004e23 <follow_path+0xc2>
c0004e07:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0004e0a:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0004e10:	8d 54 16 54          	lea    edx,[esi+edx*1+0x54]
c0004e14:	e8 bd fe ff ff       	call   c0004cd6 <ld_clust.isra.0>
c0004e19:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004e1c:	eb cc                	jmp    c0004dea <follow_path+0x89>
c0004e1e:	b8 05 00 00 00       	mov    eax,0x5
c0004e23:	83 c4 14             	add    esp,0x14
c0004e26:	5b                   	pop    ebx
c0004e27:	5e                   	pop    esi
c0004e28:	c3                   	ret    

c0004e29 <f_mount>:
c0004e29:	53                   	push   ebx
c0004e2a:	83 ec 18             	sub    esp,0x18
c0004e2d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0004e31:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0004e35:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004e39:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0004e3d:	e8 fb d2 ff ff       	call   c000213d <get_ldnumber>
c0004e42:	89 c2                	mov    edx,eax
c0004e44:	b8 0b 00 00 00       	mov    eax,0xb
c0004e49:	85 d2                	test   edx,edx
c0004e4b:	78 39                	js     c0004e86 <f_mount+0x5d>
c0004e4d:	8b 04 95 00 64 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd9c00]
c0004e54:	85 c0                	test   eax,eax
c0004e56:	74 03                	je     c0004e5b <f_mount+0x32>
c0004e58:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004e5b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004e5f:	85 c0                	test   eax,eax
c0004e61:	74 03                	je     c0004e66 <f_mount+0x3d>
c0004e63:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004e66:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004e6a:	89 04 95 00 64 02 c0 	mov    DWORD PTR [edx*4-0x3ffd9c00],eax
c0004e71:	31 c0                	xor    eax,eax
c0004e73:	84 db                	test   bl,bl
c0004e75:	74 0f                	je     c0004e86 <f_mount+0x5d>
c0004e77:	31 c9                	xor    ecx,ecx
c0004e79:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004e7d:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004e81:	e8 65 d7 ff ff       	call   c00025eb <mount_volume>
c0004e86:	83 c4 18             	add    esp,0x18
c0004e89:	5b                   	pop    ebx
c0004e8a:	c3                   	ret    

c0004e8b <f_open>:
c0004e8b:	55                   	push   ebp
c0004e8c:	bd 09 00 00 00       	mov    ebp,0x9
c0004e91:	57                   	push   edi
c0004e92:	56                   	push   esi
c0004e93:	53                   	push   ebx
c0004e94:	83 ec 7c             	sub    esp,0x7c
c0004e97:	8b 9c 24 90 00 00 00 	mov    ebx,DWORD PTR [esp+0x90]
c0004e9e:	8b bc 24 98 00 00 00 	mov    edi,DWORD PTR [esp+0x98]
c0004ea5:	85 db                	test   ebx,ebx
c0004ea7:	0f 84 10 04 00 00    	je     c00052bd <f_open+0x432>
c0004ead:	89 fe                	mov    esi,edi
c0004eaf:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004eb3:	83 e6 3f             	and    esi,0x3f
c0004eb6:	89 f0                	mov    eax,esi
c0004eb8:	0f b6 c8             	movzx  ecx,al
c0004ebb:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c0004ec2:	e8 24 d7 ff ff       	call   c00025eb <mount_volume>
c0004ec7:	89 c5                	mov    ebp,eax
c0004ec9:	85 c0                	test   eax,eax
c0004ecb:	0f 85 e6 03 00 00    	jne    c00052b7 <f_open+0x42c>
c0004ed1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004ed5:	bd 11 00 00 00       	mov    ebp,0x11
c0004eda:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004ede:	83 ec 0c             	sub    esp,0xc
c0004ee1:	68 60 04 00 00       	push   0x460
c0004ee6:	e8 d9 36 00 00       	call   c00085c4 <ff_memalloc>
c0004eeb:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004eef:	83 c4 10             	add    esp,0x10
c0004ef2:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0004ef7:	0f 84 c0 03 00 00    	je     c00052bd <f_open+0x432>
c0004efd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f01:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0004f05:	8d 91 00 02 00 00    	lea    edx,[ecx+0x200]
c0004f0b:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
c0004f0e:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0004f11:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c0004f18:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004f1c:	e8 40 fe ff ff       	call   c0004d61 <follow_path>
c0004f21:	89 c5                	mov    ebp,eax
c0004f23:	85 c0                	test   eax,eax
c0004f25:	75 0c                	jne    c0004f33 <f_open+0xa8>
c0004f27:	80 7c 24 6b 00       	cmp    BYTE PTR [esp+0x6b],0x0
c0004f2c:	79 05                	jns    c0004f33 <f_open+0xa8>
c0004f2e:	bd 06 00 00 00       	mov    ebp,0x6
c0004f33:	f7 c7 1c 00 00 00    	test   edi,0x1c
c0004f39:	0f 84 84 01 00 00    	je     c00050c3 <f_open+0x238>
c0004f3f:	85 ed                	test   ebp,ebp
c0004f41:	74 20                	je     c0004f63 <f_open+0xd8>
c0004f43:	83 fd 04             	cmp    ebp,0x4
c0004f46:	0f 85 58 03 00 00    	jne    c00052a4 <f_open+0x419>
c0004f4c:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004f50:	83 ce 08             	or     esi,0x8
c0004f53:	e8 8a f2 ff ff       	call   c00041e2 <dir_register>
c0004f58:	89 c5                	mov    ebp,eax
c0004f5a:	85 c0                	test   eax,eax
c0004f5c:	74 2f                	je     c0004f8d <f_open+0x102>
c0004f5e:	e9 41 03 00 00       	jmp    c00052a4 <f_open+0x419>
c0004f63:	bd 07 00 00 00       	mov    ebp,0x7
c0004f68:	f6 44 24 2a 11       	test   BYTE PTR [esp+0x2a],0x11
c0004f6d:	0f 85 31 03 00 00    	jne    c00052a4 <f_open+0x419>
c0004f73:	bd 08 00 00 00       	mov    ebp,0x8
c0004f78:	f7 c7 04 00 00 00    	test   edi,0x4
c0004f7e:	0f 85 20 03 00 00    	jne    c00052a4 <f_open+0x419>
c0004f84:	83 e7 08             	and    edi,0x8
c0004f87:	0f 84 65 01 00 00    	je     c00050f2 <f_open+0x267>
c0004f8d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0004f91:	8a 02                	mov    al,BYTE PTR [edx]
c0004f93:	3c 04                	cmp    al,0x4
c0004f95:	0f 85 97 00 00 00    	jne    c0005032 <f_open+0x1a7>
c0004f9b:	8d 42 10             	lea    eax,[edx+0x10]
c0004f9e:	89 13                	mov    DWORD PTR [ebx],edx
c0004fa0:	89 da                	mov    edx,ebx
c0004fa2:	e8 80 fd ff ff       	call   c0004d27 <init_alloc_info.isra.2>
c0004fa7:	31 d2                	xor    edx,edx
c0004fa9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004fad:	b9 1e 00 00 00       	mov    ecx,0x1e
c0004fb2:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004fb5:	83 c0 02             	add    eax,0x2
c0004fb8:	e8 32 cc ff ff       	call   c0001bef <mem_set>
c0004fbd:	b9 1a 00 00 00       	mov    ecx,0x1a
c0004fc2:	31 d2                	xor    edx,edx
c0004fc4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004fc8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004fcb:	83 c0 26             	add    eax,0x26
c0004fce:	e8 1c cc ff ff       	call   c0001bef <mem_set>
c0004fd3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004fd7:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0004fda:	c6 42 04 20          	mov    BYTE PTR [edx+0x4],0x20
c0004fde:	ba 00 00 21 50       	mov    edx,0x50210000
c0004fe3:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004fe6:	83 c0 08             	add    eax,0x8
c0004fe9:	e8 e3 cb ff ff       	call   c0001bd1 <st_dword>
c0004fee:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004ff2:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004ff5:	c6 40 21 01          	mov    BYTE PTR [eax+0x21],0x1
c0004ff9:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004ffd:	e8 b7 ea ff ff       	call   c0003ab9 <store_xdir>
c0005002:	89 c5                	mov    ebp,eax
c0005004:	85 c0                	test   eax,eax
c0005006:	0f 85 98 02 00 00    	jne    c00052a4 <f_open+0x419>
c000500c:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c000500f:	85 d2                	test   edx,edx
c0005011:	0f 84 db 00 00 00    	je     c00050f2 <f_open+0x267>
c0005017:	31 c9                	xor    ecx,ecx
c0005019:	89 d8                	mov    eax,ebx
c000501b:	e8 8e e3 ff ff       	call   c00033ae <remove_chain>
c0005020:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0005024:	89 c5                	mov    ebp,eax
c0005026:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005029:	48                   	dec    eax
c000502a:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c000502d:	e9 b8 00 00 00       	jmp    c00050ea <f_open+0x25f>
c0005032:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c0005036:	89 ea                	mov    edx,ebp
c0005038:	e8 99 fc ff ff       	call   c0004cd6 <ld_clust.isra.0>
c000503d:	ba 00 00 21 50       	mov    edx,0x50210000
c0005042:	89 c7                	mov    edi,eax
c0005044:	8d 45 0e             	lea    eax,[ebp+0xe]
c0005047:	e8 85 cb ff ff       	call   c0001bd1 <st_dword>
c000504c:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0005050:	31 c9                	xor    ecx,ecx
c0005052:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c0005056:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000505a:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c000505e:	e8 9c fc ff ff       	call   c0004cff <st_clust.isra.1>
c0005063:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0005067:	31 d2                	xor    edx,edx
c0005069:	83 c0 1c             	add    eax,0x1c
c000506c:	e8 60 cb ff ff       	call   c0001bd1 <st_dword>
c0005071:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005075:	85 ff                	test   edi,edi
c0005077:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c000507b:	74 75                	je     c00050f2 <f_open+0x267>
c000507d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005081:	31 c9                	xor    ecx,ecx
c0005083:	8b 50 50             	mov    edx,DWORD PTR [eax+0x50]
c0005086:	8b 40 4c             	mov    eax,DWORD PTR [eax+0x4c]
c0005089:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000508d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005091:	89 fa                	mov    edx,edi
c0005093:	8d 44 24 24          	lea    eax,[esp+0x24]
c0005097:	e8 12 e3 ff ff       	call   c00033ae <remove_chain>
c000509c:	89 c5                	mov    ebp,eax
c000509e:	85 c0                	test   eax,eax
c00050a0:	0f 85 fe 01 00 00    	jne    c00052a4 <f_open+0x419>
c00050a6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00050aa:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00050ae:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050b2:	4f                   	dec    edi
c00050b3:	e8 81 d2 ff ff       	call   c0002339 <move_window>
c00050b8:	89 c5                	mov    ebp,eax
c00050ba:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050be:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c00050c1:	eb 27                	jmp    c00050ea <f_open+0x25f>
c00050c3:	85 ed                	test   ebp,ebp
c00050c5:	0f 85 d9 01 00 00    	jne    c00052a4 <f_open+0x419>
c00050cb:	8a 44 24 2a          	mov    al,BYTE PTR [esp+0x2a]
c00050cf:	bd 04 00 00 00       	mov    ebp,0x4
c00050d4:	a8 10                	test   al,0x10
c00050d6:	0f 85 c8 01 00 00    	jne    c00052a4 <f_open+0x419>
c00050dc:	83 e7 02             	and    edi,0x2
c00050df:	74 11                	je     c00050f2 <f_open+0x267>
c00050e1:	bd 07 00 00 00       	mov    ebp,0x7
c00050e6:	a8 01                	test   al,0x1
c00050e8:	eb 02                	jmp    c00050ec <f_open+0x261>
c00050ea:	85 ed                	test   ebp,ebp
c00050ec:	0f 85 b2 01 00 00    	jne    c00052a4 <f_open+0x419>
c00050f2:	f7 c6 08 00 00 00    	test   esi,0x8
c00050f8:	74 03                	je     c00050fd <f_open+0x272>
c00050fa:	83 ce 40             	or     esi,0x40
c00050fd:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0005101:	8b 7a 4c             	mov    edi,DWORD PTR [edx+0x4c]
c0005104:	8b 6a 50             	mov    ebp,DWORD PTR [edx+0x50]
c0005107:	89 7b 40             	mov    DWORD PTR [ebx+0x40],edi
c000510a:	89 6b 44             	mov    DWORD PTR [ebx+0x44],ebp
c000510d:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c0005111:	89 7b 48             	mov    DWORD PTR [ebx+0x48],edi
c0005114:	8a 02                	mov    al,BYTE PTR [edx]
c0005116:	3c 04                	cmp    al,0x4
c0005118:	75 2a                	jne    c0005144 <f_open+0x2b9>
c000511a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000511e:	0f b6 4c 24 2b       	movzx  ecx,BYTE PTR [esp+0x2b]
c0005123:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0005126:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000512a:	30 c0                	xor    al,al
c000512c:	09 c8                	or     eax,ecx
c000512e:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0005131:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0005135:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0005138:	8d 42 10             	lea    eax,[edx+0x10]
c000513b:	89 da                	mov    edx,ebx
c000513d:	e8 e5 fb ff ff       	call   c0004d27 <init_alloc_info.isra.2>
c0005142:	eb 1c                	jmp    c0005160 <f_open+0x2d5>
c0005144:	89 fa                	mov    edx,edi
c0005146:	e8 8b fb ff ff       	call   c0004cd6 <ld_clust.isra.0>
c000514b:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000514e:	8d 47 1c             	lea    eax,[edi+0x1c]
c0005151:	e8 12 ca ff ff       	call   c0001b68 <ld_dword>
c0005156:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000515d:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005160:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005164:	c7 43 4c 00 00 00 00 	mov    DWORD PTR [ebx+0x4c],0x0
c000516b:	89 03                	mov    DWORD PTR [ebx],eax
c000516d:	31 d2                	xor    edx,edx
c000516f:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0005173:	b9 00 02 00 00       	mov    ecx,0x200
c0005178:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c000517c:	c6 43 29 00          	mov    BYTE PTR [ebx+0x29],0x0
c0005180:	89 f0                	mov    eax,esi
c0005182:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c0005189:	88 43 28             	mov    BYTE PTR [ebx+0x28],al
c000518c:	c7 43 3c 00 00 00 00 	mov    DWORD PTR [ebx+0x3c],0x0
c0005193:	8d 43 50             	lea    eax,[ebx+0x50]
c0005196:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c000519d:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c00051a4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00051a8:	e8 42 ca ff ff       	call   c0001bef <mem_set>
c00051ad:	83 e6 20             	and    esi,0x20
c00051b0:	75 07                	jne    c00051b9 <f_open+0x32e>
c00051b2:	31 ed                	xor    ebp,ebp
c00051b4:	e9 eb 00 00 00       	jmp    c00052a4 <f_open+0x419>
c00051b9:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00051bc:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00051bf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00051c3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00051c7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00051cb:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c00051cf:	74 e1                	je     c00051b2 <f_open+0x327>
c00051d1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00051d5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00051d9:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00051dc:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c00051df:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00051e3:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00051e6:	0f b7 68 0a          	movzx  ebp,WORD PTR [eax+0xa]
c00051ea:	31 ff                	xor    edi,edi
c00051ec:	c1 e5 09             	shl    ebp,0x9
c00051ef:	89 ee                	mov    esi,ebp
c00051f1:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c00051f5:	89 f8                	mov    eax,edi
c00051f7:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c00051fb:	73 22                	jae    c000521f <f_open+0x394>
c00051fd:	89 d8                	mov    eax,ebx
c00051ff:	e8 bd dc ff ff       	call   c0002ec1 <get_fat>
c0005204:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c0005208:	89 c2                	mov    edx,eax
c000520a:	19 7c 24 0c          	sbb    DWORD PTR [esp+0xc],edi
c000520e:	83 f8 01             	cmp    eax,0x1
c0005211:	76 10                	jbe    c0005223 <f_open+0x398>
c0005213:	83 f8 ff             	cmp    eax,0xffffffff
c0005216:	75 d9                	jne    c00051f1 <f_open+0x366>
c0005218:	bd 01 00 00 00       	mov    ebp,0x1
c000521d:	eb 09                	jmp    c0005228 <f_open+0x39d>
c000521f:	31 ed                	xor    ebp,ebp
c0005221:	eb 05                	jmp    c0005228 <f_open+0x39d>
c0005223:	bd 02 00 00 00       	mov    ebp,0x2
c0005228:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000522b:	85 ed                	test   ebp,ebp
c000522d:	75 75                	jne    c00052a4 <f_open+0x419>
c000522f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005233:	25 ff 01 00 00       	and    eax,0x1ff
c0005238:	0f 84 74 ff ff ff    	je     c00051b2 <f_open+0x327>
c000523e:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0005242:	bd 02 00 00 00       	mov    ebp,0x2
c0005247:	89 c8                	mov    eax,ecx
c0005249:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c000524d:	e8 a2 cb ff ff       	call   c0001df4 <clst2sect>
c0005252:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005256:	89 d7                	mov    edi,edx
c0005258:	09 c7                	or     edi,eax
c000525a:	74 48                	je     c00052a4 <f_open+0x419>
c000525c:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005260:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005264:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000526c:	0f ac fe 09          	shrd   esi,edi,0x9
c0005270:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0005274:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0005278:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c000527b:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000527f:	83 ec 0c             	sub    esp,0xc
c0005282:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c0005285:	6a 01                	push   0x1
c0005287:	52                   	push   edx
c0005288:	50                   	push   eax
c0005289:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000528d:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005291:	50                   	push   eax
c0005292:	e8 79 c8 ff ff       	call   c0001b10 <disk_read>
c0005297:	83 c4 20             	add    esp,0x20
c000529a:	85 c0                	test   eax,eax
c000529c:	0f 95 c0             	setne  al
c000529f:	0f b6 c0             	movzx  eax,al
c00052a2:	89 c5                	mov    ebp,eax
c00052a4:	83 ec 0c             	sub    esp,0xc
c00052a7:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00052ab:	e8 2c 33 00 00       	call   c00085dc <ff_memfree>
c00052b0:	83 c4 10             	add    esp,0x10
c00052b3:	85 ed                	test   ebp,ebp
c00052b5:	74 06                	je     c00052bd <f_open+0x432>
c00052b7:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00052bd:	83 c4 7c             	add    esp,0x7c
c00052c0:	89 e8                	mov    eax,ebp
c00052c2:	5b                   	pop    ebx
c00052c3:	5e                   	pop    esi
c00052c4:	5f                   	pop    edi
c00052c5:	5d                   	pop    ebp
c00052c6:	c3                   	ret    

c00052c7 <f_read>:
c00052c7:	55                   	push   ebp
c00052c8:	57                   	push   edi
c00052c9:	56                   	push   esi
c00052ca:	53                   	push   ebx
c00052cb:	83 ec 2c             	sub    esp,0x2c
c00052ce:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00052d2:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00052d6:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00052dc:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00052e0:	89 d8                	mov    eax,ebx
c00052e2:	e8 77 cf ff ff       	call   c000225e <validate>
c00052e7:	89 c5                	mov    ebp,eax
c00052e9:	85 c0                	test   eax,eax
c00052eb:	0f 85 4c 02 00 00    	jne    c000553d <f_read+0x276>
c00052f1:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c00052f5:	85 ed                	test   ebp,ebp
c00052f7:	0f 85 40 02 00 00    	jne    c000553d <f_read+0x276>
c00052fd:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c0005301:	0f 84 31 02 00 00    	je     c0005538 <f_read+0x271>
c0005307:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000530a:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c000530d:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c0005310:	bf 00 00 00 00       	mov    edi,0x0
c0005315:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c0005318:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c000531c:	89 d1                	mov    ecx,edx
c000531e:	19 f9                	sbb    ecx,edi
c0005320:	0f 83 cf 00 00 00    	jae    c00053f5 <f_read+0x12e>
c0005326:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000532a:	e9 c6 00 00 00       	jmp    c00053f5 <f_read+0x12e>
c000532f:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005332:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005335:	89 d0                	mov    eax,edx
c0005337:	25 ff 01 00 00       	and    eax,0x1ff
c000533c:	0f 85 c9 01 00 00    	jne    c000550b <f_read+0x244>
c0005342:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005346:	89 d6                	mov    esi,edx
c0005348:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c000534c:	89 cf                	mov    edi,ecx
c000534e:	48                   	dec    eax
c000534f:	0f ac fe 09          	shrd   esi,edi,0x9
c0005353:	21 f0                	and    eax,esi
c0005355:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005359:	0f 84 a6 00 00 00    	je     c0005405 <f_read+0x13e>
c000535f:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005363:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005366:	89 c8                	mov    eax,ecx
c0005368:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000536b:	e8 84 ca ff ff       	call   c0001df4 <clst2sect>
c0005370:	89 d7                	mov    edi,edx
c0005372:	09 c7                	or     edi,eax
c0005374:	0f 84 b4 00 00 00    	je     c000542e <f_read+0x167>
c000537a:	31 ff                	xor    edi,edi
c000537c:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0005380:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0005383:	01 c6                	add    esi,eax
c0005385:	11 d7                	adc    edi,edx
c0005387:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c000538f:	0f 86 fd 00 00 00    	jbe    c0005492 <f_read+0x1cb>
c0005395:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005399:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000539d:	c1 e8 09             	shr    eax,0x9
c00053a0:	89 04 24             	mov    DWORD PTR [esp],eax
c00053a3:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c00053a7:	03 14 24             	add    edx,DWORD PTR [esp]
c00053aa:	39 c2                	cmp    edx,eax
c00053ac:	76 07                	jbe    c00053b5 <f_read+0xee>
c00053ae:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c00053b2:	89 04 24             	mov    DWORD PTR [esp],eax
c00053b5:	83 ec 0c             	sub    esp,0xc
c00053b8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00053bc:	57                   	push   edi
c00053bd:	56                   	push   esi
c00053be:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00053c2:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00053c6:	50                   	push   eax
c00053c7:	e8 44 c7 ff ff       	call   c0001b10 <disk_read>
c00053cc:	83 c4 20             	add    esp,0x20
c00053cf:	85 c0                	test   eax,eax
c00053d1:	75 6e                	jne    c0005441 <f_read+0x17a>
c00053d3:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00053d7:	78 7e                	js     c0005457 <f_read+0x190>
c00053d9:	8b 34 24             	mov    esi,DWORD PTR [esp]
c00053dc:	c1 e6 09             	shl    esi,0x9
c00053df:	31 ff                	xor    edi,edi
c00053e1:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c00053e5:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00053e9:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c00053ed:	01 30                	add    DWORD PTR [eax],esi
c00053ef:	01 73 2c             	add    DWORD PTR [ebx+0x2c],esi
c00053f2:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c00053f5:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00053fa:	0f 85 2f ff ff ff    	jne    c000532f <f_read+0x68>
c0005400:	e9 38 01 00 00       	jmp    c000553d <f_read+0x276>
c0005405:	89 c8                	mov    eax,ecx
c0005407:	09 d0                	or     eax,edx
c0005409:	75 05                	jne    c0005410 <f_read+0x149>
c000540b:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000540e:	eb 19                	jmp    c0005429 <f_read+0x162>
c0005410:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c0005414:	74 09                	je     c000541f <f_read+0x158>
c0005416:	89 d8                	mov    eax,ebx
c0005418:	e8 f8 c9 ff ff       	call   c0001e15 <clmt_clust>
c000541d:	eb 0a                	jmp    c0005429 <f_read+0x162>
c000541f:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005422:	89 d8                	mov    eax,ebx
c0005424:	e8 98 da ff ff       	call   c0002ec1 <get_fat>
c0005429:	83 f8 01             	cmp    eax,0x1
c000542c:	77 0e                	ja     c000543c <f_read+0x175>
c000542e:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005432:	bd 02 00 00 00       	mov    ebp,0x2
c0005437:	e9 01 01 00 00       	jmp    c000553d <f_read+0x276>
c000543c:	83 f8 ff             	cmp    eax,0xffffffff
c000543f:	75 0e                	jne    c000544f <f_read+0x188>
c0005441:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005445:	bd 01 00 00 00       	mov    ebp,0x1
c000544a:	e9 ee 00 00 00       	jmp    c000553d <f_read+0x276>
c000544f:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005452:	e9 08 ff ff ff       	jmp    c000535f <f_read+0x98>
c0005457:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000545a:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c000545d:	29 f0                	sub    eax,esi
c000545f:	19 fa                	sbb    edx,edi
c0005461:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0005464:	89 d7                	mov    edi,edx
c0005466:	ba 00 00 00 00       	mov    edx,0x0
c000546b:	89 f9                	mov    ecx,edi
c000546d:	19 d1                	sbb    ecx,edx
c000546f:	0f 83 64 ff ff ff    	jae    c00053d9 <f_read+0x112>
c0005475:	89 c7                	mov    edi,eax
c0005477:	8d 53 50             	lea    edx,[ebx+0x50]
c000547a:	c1 e7 09             	shl    edi,0x9
c000547d:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005481:	b9 00 02 00 00       	mov    ecx,0x200
c0005486:	01 f8                	add    eax,edi
c0005488:	e8 4d c7 ff ff       	call   c0001bda <mem_cpy>
c000548d:	e9 47 ff ff ff       	jmp    c00053d9 <f_read+0x112>
c0005492:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005495:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005498:	89 04 24             	mov    DWORD PTR [esp],eax
c000549b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000549f:	39 7c 24 04          	cmp    DWORD PTR [esp+0x4],edi
c00054a3:	75 05                	jne    c00054aa <f_read+0x1e3>
c00054a5:	39 34 24             	cmp    DWORD PTR [esp],esi
c00054a8:	74 5b                	je     c0005505 <f_read+0x23e>
c00054aa:	8d 43 50             	lea    eax,[ebx+0x50]
c00054ad:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00054b1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00054b5:	79 2a                	jns    c00054e1 <f_read+0x21a>
c00054b7:	83 ec 0c             	sub    esp,0xc
c00054ba:	6a 01                	push   0x1
c00054bc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00054c0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00054c4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00054c8:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00054cc:	50                   	push   eax
c00054cd:	e8 54 c6 ff ff       	call   c0001b26 <disk_write>
c00054d2:	83 c4 20             	add    esp,0x20
c00054d5:	85 c0                	test   eax,eax
c00054d7:	0f 85 64 ff ff ff    	jne    c0005441 <f_read+0x17a>
c00054dd:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00054e1:	83 ec 0c             	sub    esp,0xc
c00054e4:	6a 01                	push   0x1
c00054e6:	57                   	push   edi
c00054e7:	56                   	push   esi
c00054e8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00054ec:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00054f0:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00054f4:	50                   	push   eax
c00054f5:	e8 16 c6 ff ff       	call   c0001b10 <disk_read>
c00054fa:	83 c4 20             	add    esp,0x20
c00054fd:	85 c0                	test   eax,eax
c00054ff:	0f 85 3c ff ff ff    	jne    c0005441 <f_read+0x17a>
c0005505:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0005508:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c000550b:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000550e:	ba 00 02 00 00       	mov    edx,0x200
c0005513:	25 ff 01 00 00       	and    eax,0x1ff
c0005518:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c000551c:	29 c2                	sub    edx,eax
c000551e:	39 d6                	cmp    esi,edx
c0005520:	76 02                	jbe    c0005524 <f_read+0x25d>
c0005522:	89 d6                	mov    esi,edx
c0005524:	8d 54 03 50          	lea    edx,[ebx+eax*1+0x50]
c0005528:	89 f1                	mov    ecx,esi
c000552a:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000552e:	e8 a7 c6 ff ff       	call   c0001bda <mem_cpy>
c0005533:	e9 a7 fe ff ff       	jmp    c00053df <f_read+0x118>
c0005538:	bd 07 00 00 00       	mov    ebp,0x7
c000553d:	83 c4 2c             	add    esp,0x2c
c0005540:	89 e8                	mov    eax,ebp
c0005542:	5b                   	pop    ebx
c0005543:	5e                   	pop    esi
c0005544:	5f                   	pop    edi
c0005545:	5d                   	pop    ebp
c0005546:	c3                   	ret    

c0005547 <f_write>:
c0005547:	55                   	push   ebp
c0005548:	57                   	push   edi
c0005549:	56                   	push   esi
c000554a:	53                   	push   ebx
c000554b:	83 ec 2c             	sub    esp,0x2c
c000554e:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0005552:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0005556:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000555c:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005560:	89 d8                	mov    eax,ebx
c0005562:	e8 f7 cc ff ff       	call   c000225e <validate>
c0005567:	89 c5                	mov    ebp,eax
c0005569:	85 c0                	test   eax,eax
c000556b:	0f 85 86 02 00 00    	jne    c00057f7 <f_write+0x2b0>
c0005571:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c0005575:	85 ed                	test   ebp,ebp
c0005577:	0f 85 7a 02 00 00    	jne    c00057f7 <f_write+0x2b0>
c000557d:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005581:	0f 84 6b 02 00 00    	je     c00057f2 <f_write+0x2ab>
c0005587:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000558b:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000558e:	0f 84 43 01 00 00    	je     c00056d7 <f_write+0x190>
c0005594:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005597:	89 c1                	mov    ecx,eax
c0005599:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c000559d:	0f 83 34 01 00 00    	jae    c00056d7 <f_write+0x190>
c00055a3:	f7 d0                	not    eax
c00055a5:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00055a9:	e9 29 01 00 00       	jmp    c00056d7 <f_write+0x190>
c00055ae:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00055b1:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c00055b4:	89 d0                	mov    eax,edx
c00055b6:	25 ff 01 00 00       	and    eax,0x1ff
c00055bb:	0f 85 00 02 00 00    	jne    c00057c1 <f_write+0x27a>
c00055c1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00055c5:	89 d6                	mov    esi,edx
c00055c7:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c00055cb:	89 cf                	mov    edi,ecx
c00055cd:	48                   	dec    eax
c00055ce:	0f ac fe 09          	shrd   esi,edi,0x9
c00055d2:	21 f0                	and    eax,esi
c00055d4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00055d8:	0f 84 06 01 00 00    	je     c00056e4 <f_write+0x19d>
c00055de:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00055e2:	0f 88 6e 01 00 00    	js     c0005756 <f_write+0x20f>
c00055e8:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00055ec:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00055ef:	89 c8                	mov    eax,ecx
c00055f1:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00055f5:	e8 fa c7 ff ff       	call   c0001df4 <clst2sect>
c00055fa:	89 d1                	mov    ecx,edx
c00055fc:	09 c1                	or     ecx,eax
c00055fe:	0f 84 1c 01 00 00    	je     c0005720 <f_write+0x1d9>
c0005604:	31 ff                	xor    edi,edi
c0005606:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000560a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000560e:	01 c6                	add    esi,eax
c0005610:	11 d7                	adc    edi,edx
c0005612:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c000561a:	0f 86 63 01 00 00    	jbe    c0005783 <f_write+0x23c>
c0005620:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005624:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005628:	c1 e8 09             	shr    eax,0x9
c000562b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000562f:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0005633:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c0005637:	39 c2                	cmp    edx,eax
c0005639:	76 08                	jbe    c0005643 <f_write+0xfc>
c000563b:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c000563f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005643:	83 ec 0c             	sub    esp,0xc
c0005646:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000564a:	57                   	push   edi
c000564b:	56                   	push   esi
c000564c:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0005650:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005654:	50                   	push   eax
c0005655:	e8 cc c4 ff ff       	call   c0001b26 <disk_write>
c000565a:	83 c4 20             	add    esp,0x20
c000565d:	85 c0                	test   eax,eax
c000565f:	0f 85 ce 00 00 00    	jne    c0005733 <f_write+0x1ec>
c0005665:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005668:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c000566b:	29 f0                	sub    eax,esi
c000566d:	19 fa                	sbb    edx,edi
c000566f:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0005673:	89 d7                	mov    edi,edx
c0005675:	ba 00 00 00 00       	mov    edx,0x0
c000567a:	89 f9                	mov    ecx,edi
c000567c:	19 d1                	sbb    ecx,edx
c000567e:	73 1c                	jae    c000569c <f_write+0x155>
c0005680:	89 c7                	mov    edi,eax
c0005682:	b9 00 02 00 00       	mov    ecx,0x200
c0005687:	c1 e7 09             	shl    edi,0x9
c000568a:	8d 43 50             	lea    eax,[ebx+0x50]
c000568d:	03 7c 24 44          	add    edi,DWORD PTR [esp+0x44]
c0005691:	89 fa                	mov    edx,edi
c0005693:	e8 42 c5 ff ff       	call   c0001bda <mem_cpy>
c0005698:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c000569c:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00056a0:	c1 e6 09             	shl    esi,0x9
c00056a3:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00056a7:	31 ff                	xor    edi,edi
c00056a9:	01 30                	add    DWORD PTR [eax],esi
c00056ab:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c00056af:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c00056b3:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00056b6:	03 73 2c             	add    esi,DWORD PTR [ebx+0x2c]
c00056b9:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00056bc:	13 7b 30             	adc    edi,DWORD PTR [ebx+0x30]
c00056bf:	89 c1                	mov    ecx,eax
c00056c1:	39 f2                	cmp    edx,esi
c00056c3:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c00056c6:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c00056c9:	19 f9                	sbb    ecx,edi
c00056cb:	73 04                	jae    c00056d1 <f_write+0x18a>
c00056cd:	89 f2                	mov    edx,esi
c00056cf:	89 f8                	mov    eax,edi
c00056d1:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00056d4:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c00056d7:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00056dc:	0f 85 cc fe ff ff    	jne    c00055ae <f_write+0x67>
c00056e2:	eb 2e                	jmp    c0005712 <f_write+0x1cb>
c00056e4:	89 c8                	mov    eax,ecx
c00056e6:	09 d0                	or     eax,edx
c00056e8:	75 0b                	jne    c00056f5 <f_write+0x1ae>
c00056ea:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00056ed:	31 d2                	xor    edx,edx
c00056ef:	85 c0                	test   eax,eax
c00056f1:	75 28                	jne    c000571b <f_write+0x1d4>
c00056f3:	eb 12                	jmp    c0005707 <f_write+0x1c0>
c00056f5:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c00056f9:	74 09                	je     c0005704 <f_write+0x1bd>
c00056fb:	89 d8                	mov    eax,ebx
c00056fd:	e8 13 c7 ff ff       	call   c0001e15 <clmt_clust>
c0005702:	eb 0a                	jmp    c000570e <f_write+0x1c7>
c0005704:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005707:	89 d8                	mov    eax,ebx
c0005709:	e8 a1 da ff ff       	call   c00031af <create_chain>
c000570e:	85 c0                	test   eax,eax
c0005710:	75 09                	jne    c000571b <f_write+0x1d4>
c0005712:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c0005716:	e9 dc 00 00 00       	jmp    c00057f7 <f_write+0x2b0>
c000571b:	83 f8 01             	cmp    eax,0x1
c000571e:	75 0e                	jne    c000572e <f_write+0x1e7>
c0005720:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005724:	bd 02 00 00 00       	mov    ebp,0x2
c0005729:	e9 c9 00 00 00       	jmp    c00057f7 <f_write+0x2b0>
c000572e:	83 f8 ff             	cmp    eax,0xffffffff
c0005731:	75 0e                	jne    c0005741 <f_write+0x1fa>
c0005733:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005737:	bd 01 00 00 00       	mov    ebp,0x1
c000573c:	e9 b6 00 00 00       	jmp    c00057f7 <f_write+0x2b0>
c0005741:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005744:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0005748:	0f 85 90 fe ff ff    	jne    c00055de <f_write+0x97>
c000574e:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005751:	e9 88 fe ff ff       	jmp    c00055de <f_write+0x97>
c0005756:	83 ec 0c             	sub    esp,0xc
c0005759:	8d 43 50             	lea    eax,[ebx+0x50]
c000575c:	6a 01                	push   0x1
c000575e:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0005761:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0005764:	50                   	push   eax
c0005765:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0005769:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000576d:	50                   	push   eax
c000576e:	e8 b3 c3 ff ff       	call   c0001b26 <disk_write>
c0005773:	83 c4 20             	add    esp,0x20
c0005776:	85 c0                	test   eax,eax
c0005778:	75 b9                	jne    c0005733 <f_write+0x1ec>
c000577a:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c000577e:	e9 65 fe ff ff       	jmp    c00055e8 <f_write+0xa1>
c0005783:	39 7b 3c             	cmp    DWORD PTR [ebx+0x3c],edi
c0005786:	75 05                	jne    c000578d <f_write+0x246>
c0005788:	39 73 38             	cmp    DWORD PTR [ebx+0x38],esi
c000578b:	74 2e                	je     c00057bb <f_write+0x274>
c000578d:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0005790:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005793:	39 53 2c             	cmp    DWORD PTR [ebx+0x2c],edx
c0005796:	1b 43 10             	sbb    eax,DWORD PTR [ebx+0x10]
c0005799:	73 20                	jae    c00057bb <f_write+0x274>
c000579b:	83 ec 0c             	sub    esp,0xc
c000579e:	8d 43 50             	lea    eax,[ebx+0x50]
c00057a1:	6a 01                	push   0x1
c00057a3:	57                   	push   edi
c00057a4:	56                   	push   esi
c00057a5:	50                   	push   eax
c00057a6:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00057aa:	50                   	push   eax
c00057ab:	e8 60 c3 ff ff       	call   c0001b10 <disk_read>
c00057b0:	83 c4 20             	add    esp,0x20
c00057b3:	85 c0                	test   eax,eax
c00057b5:	0f 85 78 ff ff ff    	jne    c0005733 <f_write+0x1ec>
c00057bb:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c00057be:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c00057c1:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00057c4:	ba 00 02 00 00       	mov    edx,0x200
c00057c9:	25 ff 01 00 00       	and    eax,0x1ff
c00057ce:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00057d2:	29 c2                	sub    edx,eax
c00057d4:	39 d6                	cmp    esi,edx
c00057d6:	76 02                	jbe    c00057da <f_write+0x293>
c00057d8:	89 d6                	mov    esi,edx
c00057da:	8d 44 03 50          	lea    eax,[ebx+eax*1+0x50]
c00057de:	89 f1                	mov    ecx,esi
c00057e0:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00057e4:	e8 f1 c3 ff ff       	call   c0001bda <mem_cpy>
c00057e9:	80 4b 28 80          	or     BYTE PTR [ebx+0x28],0x80
c00057ed:	e9 b1 fe ff ff       	jmp    c00056a3 <f_write+0x15c>
c00057f2:	bd 07 00 00 00       	mov    ebp,0x7
c00057f7:	83 c4 2c             	add    esp,0x2c
c00057fa:	89 e8                	mov    eax,ebp
c00057fc:	5b                   	pop    ebx
c00057fd:	5e                   	pop    esi
c00057fe:	5f                   	pop    edi
c00057ff:	5d                   	pop    ebp
c0005800:	c3                   	ret    

c0005801 <f_sync>:
c0005801:	56                   	push   esi
c0005802:	53                   	push   ebx
c0005803:	83 ec 64             	sub    esp,0x64
c0005806:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c000580a:	8d 54 24 10          	lea    edx,[esp+0x10]
c000580e:	89 d8                	mov    eax,ebx
c0005810:	e8 49 ca ff ff       	call   c000225e <validate>
c0005815:	85 c0                	test   eax,eax
c0005817:	0f 85 ba 01 00 00    	jne    c00059d7 <f_sync+0x1d6>
c000581d:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c0005820:	f6 c2 40             	test   dl,0x40
c0005823:	0f 84 ae 01 00 00    	je     c00059d7 <f_sync+0x1d6>
c0005829:	84 d2                	test   dl,dl
c000582b:	79 33                	jns    c0005860 <f_sync+0x5f>
c000582d:	83 ec 0c             	sub    esp,0xc
c0005830:	8d 43 50             	lea    eax,[ebx+0x50]
c0005833:	6a 01                	push   0x1
c0005835:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0005838:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000583b:	50                   	push   eax
c000583c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005840:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005844:	50                   	push   eax
c0005845:	e8 dc c2 ff ff       	call   c0001b26 <disk_write>
c000584a:	83 c4 20             	add    esp,0x20
c000584d:	89 c2                	mov    edx,eax
c000584f:	b8 01 00 00 00       	mov    eax,0x1
c0005854:	85 d2                	test   edx,edx
c0005856:	0f 85 7b 01 00 00    	jne    c00059d7 <f_sync+0x1d6>
c000585c:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005860:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005864:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005867:	0f 85 11 01 00 00    	jne    c000597e <f_sync+0x17d>
c000586d:	89 d8                	mov    eax,ebx
c000586f:	e8 13 d6 ff ff       	call   c0002e87 <fill_first_frag>
c0005874:	85 c0                	test   eax,eax
c0005876:	0f 85 5b 01 00 00    	jne    c00059d7 <f_sync+0x1d6>
c000587c:	83 c9 ff             	or     ecx,0xffffffff
c000587f:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005882:	89 d8                	mov    eax,ebx
c0005884:	e8 c9 d5 ff ff       	call   c0002e52 <fill_last_frag>
c0005889:	85 c0                	test   eax,eax
c000588b:	0f 85 46 01 00 00    	jne    c00059d7 <f_sync+0x1d6>
c0005891:	83 ec 0c             	sub    esp,0xc
c0005894:	68 60 04 00 00       	push   0x460
c0005899:	e8 26 2d 00 00       	call   c00085c4 <ff_memalloc>
c000589e:	83 c4 10             	add    esp,0x10
c00058a1:	89 c6                	mov    esi,eax
c00058a3:	b8 11 00 00 00       	mov    eax,0x11
c00058a8:	85 f6                	test   esi,esi
c00058aa:	0f 84 27 01 00 00    	je     c00059d7 <f_sync+0x1d6>
c00058b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00058b4:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c00058ba:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00058bd:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00058c0:	89 da                	mov    edx,ebx
c00058c2:	8d 44 24 14          	lea    eax,[esp+0x14]
c00058c6:	e8 af df ff ff       	call   c000387a <load_obj_xdir>
c00058cb:	85 c0                	test   eax,eax
c00058cd:	0f 85 95 00 00 00    	jne    c0005968 <f_sync+0x167>
c00058d3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00058d7:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00058da:	80 4a 04 20          	or     BYTE PTR [edx+0x4],0x20
c00058de:	8b 48 10             	mov    ecx,DWORD PTR [eax+0x10]
c00058e1:	8a 53 07             	mov    dl,BYTE PTR [ebx+0x7]
c00058e4:	83 ca 01             	or     edx,0x1
c00058e7:	88 51 21             	mov    BYTE PTR [ecx+0x21],dl
c00058ea:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00058ed:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00058f0:	83 c0 34             	add    eax,0x34
c00058f3:	e8 d9 c2 ff ff       	call   c0001bd1 <st_dword>
c00058f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00058fc:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00058ff:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005902:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005905:	83 c0 38             	add    eax,0x38
c0005908:	e8 c7 c2 ff ff       	call   c0001bd4 <st_qword>
c000590d:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005910:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005914:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005917:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000591a:	83 c0 28             	add    eax,0x28
c000591d:	e8 b2 c2 ff ff       	call   c0001bd4 <st_qword>
c0005922:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005926:	ba 00 00 21 50       	mov    edx,0x50210000
c000592b:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000592e:	83 c0 0c             	add    eax,0xc
c0005931:	e8 9b c2 ff ff       	call   c0001bd1 <st_dword>
c0005936:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000593a:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000593d:	c6 42 15 00          	mov    BYTE PTR [edx+0x15],0x0
c0005941:	31 d2                	xor    edx,edx
c0005943:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005946:	83 c0 10             	add    eax,0x10
c0005949:	e8 83 c2 ff ff       	call   c0001bd1 <st_dword>
c000594e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0005952:	e8 62 e1 ff ff       	call   c0003ab9 <store_xdir>
c0005957:	85 c0                	test   eax,eax
c0005959:	75 0d                	jne    c0005968 <f_sync+0x167>
c000595b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000595f:	e8 00 eb ff ff       	call   c0004464 <sync_fs>
c0005964:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c0005968:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000596c:	83 ec 0c             	sub    esp,0xc
c000596f:	56                   	push   esi
c0005970:	e8 67 2c 00 00       	call   c00085dc <ff_memfree>
c0005975:	83 c4 10             	add    esp,0x10
c0005978:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000597c:	eb 59                	jmp    c00059d7 <f_sync+0x1d6>
c000597e:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0005981:	8b 4b 44             	mov    ecx,DWORD PTR [ebx+0x44]
c0005984:	e8 b0 c9 ff ff       	call   c0002339 <move_window>
c0005989:	85 c0                	test   eax,eax
c000598b:	75 4a                	jne    c00059d7 <f_sync+0x1d6>
c000598d:	8b 73 48             	mov    esi,DWORD PTR [ebx+0x48]
c0005990:	80 4e 0b 20          	or     BYTE PTR [esi+0xb],0x20
c0005994:	89 f2                	mov    edx,esi
c0005996:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c0005999:	8b 03                	mov    eax,DWORD PTR [ebx]
c000599b:	e8 5f f3 ff ff       	call   c0004cff <st_clust.isra.1>
c00059a0:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00059a3:	8d 46 1c             	lea    eax,[esi+0x1c]
c00059a6:	e8 26 c2 ff ff       	call   c0001bd1 <st_dword>
c00059ab:	8d 46 16             	lea    eax,[esi+0x16]
c00059ae:	ba 00 00 21 50       	mov    edx,0x50210000
c00059b3:	e8 19 c2 ff ff       	call   c0001bd1 <st_dword>
c00059b8:	8d 46 12             	lea    eax,[esi+0x12]
c00059bb:	31 d2                	xor    edx,edx
c00059bd:	e8 0b c2 ff ff       	call   c0001bcd <st_word>
c00059c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059c6:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00059ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059ce:	e8 91 ea ff ff       	call   c0004464 <sync_fs>
c00059d3:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c00059d7:	83 c4 64             	add    esp,0x64
c00059da:	5b                   	pop    ebx
c00059db:	5e                   	pop    esi
c00059dc:	c3                   	ret    

c00059dd <f_close>:
c00059dd:	53                   	push   ebx
c00059de:	83 ec 24             	sub    esp,0x24
c00059e1:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00059e5:	53                   	push   ebx
c00059e6:	e8 16 fe ff ff       	call   c0005801 <f_sync>
c00059eb:	83 c4 10             	add    esp,0x10
c00059ee:	85 c0                	test   eax,eax
c00059f0:	75 15                	jne    c0005a07 <f_close+0x2a>
c00059f2:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00059f6:	89 d8                	mov    eax,ebx
c00059f8:	e8 61 c8 ff ff       	call   c000225e <validate>
c00059fd:	85 c0                	test   eax,eax
c00059ff:	75 06                	jne    c0005a07 <f_close+0x2a>
c0005a01:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005a07:	83 c4 18             	add    esp,0x18
c0005a0a:	5b                   	pop    ebx
c0005a0b:	c3                   	ret    

c0005a0c <f_lseek>:
c0005a0c:	55                   	push   ebp
c0005a0d:	57                   	push   edi
c0005a0e:	56                   	push   esi
c0005a0f:	53                   	push   ebx
c0005a10:	83 ec 3c             	sub    esp,0x3c
c0005a13:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0005a17:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0005a1b:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0005a1f:	89 04 24             	mov    DWORD PTR [esp],eax
c0005a22:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0005a26:	89 d8                	mov    eax,ebx
c0005a28:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c0005a2c:	e8 2d c8 ff ff       	call   c000225e <validate>
c0005a31:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005a35:	85 c0                	test   eax,eax
c0005a37:	0f 85 7a 04 00 00    	jne    c0005eb7 <f_lseek+0x4ab>
c0005a3d:	0f b6 43 29          	movzx  eax,BYTE PTR [ebx+0x29]
c0005a41:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005a45:	85 c0                	test   eax,eax
c0005a47:	0f 85 6a 04 00 00    	jne    c0005eb7 <f_lseek+0x4ab>
c0005a4d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005a51:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005a54:	74 0c                	je     c0005a62 <f_lseek+0x56>
c0005a56:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005a59:	85 c0                	test   eax,eax
c0005a5b:	75 1f                	jne    c0005a7c <f_lseek+0x70>
c0005a5d:	e9 b5 01 00 00       	jmp    c0005c17 <f_lseek+0x20b>
c0005a62:	83 c9 ff             	or     ecx,0xffffffff
c0005a65:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005a68:	89 d8                	mov    eax,ebx
c0005a6a:	e8 e3 d3 ff ff       	call   c0002e52 <fill_last_frag>
c0005a6f:	85 c0                	test   eax,eax
c0005a71:	74 e3                	je     c0005a56 <f_lseek+0x4a>
c0005a73:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005a77:	e9 3b 04 00 00       	jmp    c0005eb7 <f_lseek+0x4ab>
c0005a7c:	83 7c 24 04 ff       	cmp    DWORD PTR [esp+0x4],0xffffffff
c0005a81:	0f 85 ac 00 00 00    	jne    c0005b33 <f_lseek+0x127>
c0005a87:	83 3c 24 ff          	cmp    DWORD PTR [esp],0xffffffff
c0005a8b:	0f 85 a2 00 00 00    	jne    c0005b33 <f_lseek+0x127>
c0005a91:	8d 78 04             	lea    edi,[eax+0x4]
c0005a94:	8b 6b 08             	mov    ebp,DWORD PTR [ebx+0x8]
c0005a97:	8b 00                	mov    eax,DWORD PTR [eax]
c0005a99:	be 02 00 00 00       	mov    esi,0x2
c0005a9e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005aa2:	85 ed                	test   ebp,ebp
c0005aa4:	74 73                	je     c0005b19 <f_lseek+0x10d>
c0005aa6:	89 e9                	mov    ecx,ebp
c0005aa8:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005aaf:	ff 04 24             	inc    DWORD PTR [esp]
c0005ab2:	89 ca                	mov    edx,ecx
c0005ab4:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005ab8:	89 d8                	mov    eax,ebx
c0005aba:	e8 02 d4 ff ff       	call   c0002ec1 <get_fat>
c0005abf:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005ac3:	83 f8 01             	cmp    eax,0x1
c0005ac6:	77 11                	ja     c0005ad9 <f_lseek+0xcd>
c0005ac8:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005acc:	c7 44 24 18 02 00 00 00 	mov    DWORD PTR [esp+0x18],0x2
c0005ad4:	e9 de 03 00 00       	jmp    c0005eb7 <f_lseek+0x4ab>
c0005ad9:	83 f8 ff             	cmp    eax,0xffffffff
c0005adc:	75 11                	jne    c0005aef <f_lseek+0xe3>
c0005ade:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005ae2:	c7 44 24 18 01 00 00 00 	mov    DWORD PTR [esp+0x18],0x1
c0005aea:	e9 c8 03 00 00       	jmp    c0005eb7 <f_lseek+0x4ab>
c0005aef:	8d 51 01             	lea    edx,[ecx+0x1]
c0005af2:	89 c1                	mov    ecx,eax
c0005af4:	39 c2                	cmp    edx,eax
c0005af6:	74 b7                	je     c0005aaf <f_lseek+0xa3>
c0005af8:	83 c6 02             	add    esi,0x2
c0005afb:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c0005aff:	72 0b                	jb     c0005b0c <f_lseek+0x100>
c0005b01:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0005b04:	89 6f 04             	mov    DWORD PTR [edi+0x4],ebp
c0005b07:	89 0f                	mov    DWORD PTR [edi],ecx
c0005b09:	83 c7 08             	add    edi,0x8
c0005b0c:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005b10:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005b13:	76 04                	jbe    c0005b19 <f_lseek+0x10d>
c0005b15:	89 c5                	mov    ebp,eax
c0005b17:	eb 8d                	jmp    c0005aa6 <f_lseek+0x9a>
c0005b19:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005b1c:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c0005b20:	89 30                	mov    DWORD PTR [eax],esi
c0005b22:	0f 87 87 03 00 00    	ja     c0005eaf <f_lseek+0x4a3>
c0005b28:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c0005b2e:	e9 84 03 00 00       	jmp    c0005eb7 <f_lseek+0x4ab>
c0005b33:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0005b36:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0005b39:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005b3d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005b41:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005b45:	39 04 24             	cmp    DWORD PTR [esp],eax
c0005b48:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005b4c:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c0005b50:	73 0f                	jae    c0005b61 <f_lseek+0x155>
c0005b52:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005b55:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005b59:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005b5d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005b61:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005b65:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005b69:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0005b6c:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005b6f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005b73:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0005b77:	0f 84 3a 03 00 00    	je     c0005eb7 <f_lseek+0x4ab>
c0005b7d:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005b81:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005b85:	83 c6 ff             	add    esi,0xffffffff
c0005b88:	89 d8                	mov    eax,ebx
c0005b8a:	83 d7 ff             	adc    edi,0xffffffff
c0005b8d:	89 f2                	mov    edx,esi
c0005b8f:	89 f9                	mov    ecx,edi
c0005b91:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0005b95:	89 34 24             	mov    DWORD PTR [esp],esi
c0005b98:	e8 78 c2 ff ff       	call   c0001e15 <clmt_clust>
c0005b9d:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005ba1:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005ba4:	89 c2                	mov    edx,eax
c0005ba6:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005baa:	89 c8                	mov    eax,ecx
c0005bac:	e8 43 c2 ff ff       	call   c0001df4 <clst2sect>
c0005bb1:	89 d7                	mov    edi,edx
c0005bb3:	09 c7                	or     edi,eax
c0005bb5:	0f 84 0d ff ff ff    	je     c0005ac8 <f_lseek+0xbc>
c0005bbb:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0005bbf:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0005bc5:	0f 84 ec 02 00 00    	je     c0005eb7 <f_lseek+0x4ab>
c0005bcb:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005bcf:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005bd3:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005bd6:	0f b7 69 0a          	movzx  ebp,WORD PTR [ecx+0xa]
c0005bda:	0f ac fe 09          	shrd   esi,edi,0x9
c0005bde:	4d                   	dec    ebp
c0005bdf:	31 ff                	xor    edi,edi
c0005be1:	21 ee                	and    esi,ebp
c0005be3:	01 c6                	add    esi,eax
c0005be5:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005be8:	11 d7                	adc    edi,edx
c0005bea:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005bed:	39 fa                	cmp    edx,edi
c0005bef:	75 08                	jne    c0005bf9 <f_lseek+0x1ed>
c0005bf1:	39 f0                	cmp    eax,esi
c0005bf3:	0f 84 be 02 00 00    	je     c0005eb7 <f_lseek+0x4ab>
c0005bf9:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005bfc:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005c00:	0f 89 80 02 00 00    	jns    c0005e86 <f_lseek+0x47a>
c0005c06:	83 ec 0c             	sub    esp,0xc
c0005c09:	6a 01                	push   0x1
c0005c0b:	52                   	push   edx
c0005c0c:	50                   	push   eax
c0005c0d:	55                   	push   ebp
c0005c0e:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005c12:	e9 5a 02 00 00       	jmp    c0005e71 <f_lseek+0x465>
c0005c17:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005c1b:	80 39 04             	cmp    BYTE PTR [ecx],0x4
c0005c1e:	74 16                	je     c0005c36 <f_lseek+0x22a>
c0005c20:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0005c25:	76 0f                	jbe    c0005c36 <f_lseek+0x22a>
c0005c27:	c7 04 24 ff ff ff ff 	mov    DWORD PTR [esp],0xffffffff
c0005c2e:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005c36:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005c39:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0005c3c:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0005c3f:	89 c7                	mov    edi,eax
c0005c41:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005c45:	73 0d                	jae    c0005c54 <f_lseek+0x248>
c0005c47:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005c4b:	75 07                	jne    c0005c54 <f_lseek+0x248>
c0005c4d:	89 14 24             	mov    DWORD PTR [esp],edx
c0005c50:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0005c54:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005c57:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005c5a:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005c5e:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c0005c65:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0005c6c:	0b 3c 24             	or     edi,DWORD PTR [esp]
c0005c6f:	75 09                	jne    c0005c7a <f_lseek+0x26e>
c0005c71:	31 f6                	xor    esi,esi
c0005c73:	31 ff                	xor    edi,edi
c0005c75:	e9 af 01 00 00       	jmp    c0005e29 <f_lseek+0x41d>
c0005c7a:	0f b7 49 0a          	movzx  ecx,WORD PTR [ecx+0xa]
c0005c7e:	89 d7                	mov    edi,edx
c0005c80:	c1 e1 09             	shl    ecx,0x9
c0005c83:	09 c7                	or     edi,eax
c0005c85:	89 cd                	mov    ebp,ecx
c0005c87:	74 6d                	je     c0005cf6 <f_lseek+0x2ea>
c0005c89:	83 c0 ff             	add    eax,0xffffffff
c0005c8c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005c90:	83 d2 ff             	adc    edx,0xffffffff
c0005c93:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005c96:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005c9a:	83 c0 ff             	add    eax,0xffffffff
c0005c9d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005ca1:	83 d2 ff             	adc    edx,0xffffffff
c0005ca4:	31 ff                	xor    edi,edi
c0005ca6:	57                   	push   edi
c0005ca7:	51                   	push   ecx
c0005ca8:	52                   	push   edx
c0005ca9:	50                   	push   eax
c0005caa:	e8 d5 b2 01 00       	call   c0020f84 <__udivdi3>
c0005caf:	83 c4 10             	add    esp,0x10
c0005cb2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005cb6:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0005cba:	57                   	push   edi
c0005cbb:	55                   	push   ebp
c0005cbc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005cc0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005cc4:	e8 bb b2 01 00       	call   c0020f84 <__udivdi3>
c0005cc9:	83 c4 10             	add    esp,0x10
c0005ccc:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c0005cd0:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005cd4:	19 d1                	sbb    ecx,edx
c0005cd6:	72 1e                	jb     c0005cf6 <f_lseek+0x2ea>
c0005cd8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005cdc:	89 e9                	mov    ecx,ebp
c0005cde:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005ce1:	f7 d9                	neg    ecx
c0005ce3:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c0005ce6:	23 4c 24 08          	and    ecx,DWORD PTR [esp+0x8]
c0005cea:	29 0c 24             	sub    DWORD PTR [esp],ecx
c0005ced:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0005cf0:	19 54 24 04          	sbb    DWORD PTR [esp+0x4],edx
c0005cf4:	eb 28                	jmp    c0005d1e <f_lseek+0x312>
c0005cf6:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005cf9:	85 c0                	test   eax,eax
c0005cfb:	75 1e                	jne    c0005d1b <f_lseek+0x30f>
c0005cfd:	31 d2                	xor    edx,edx
c0005cff:	89 d8                	mov    eax,ebx
c0005d01:	e8 a9 d4 ff ff       	call   c00031af <create_chain>
c0005d06:	83 f8 01             	cmp    eax,0x1
c0005d09:	0f 84 b9 fd ff ff    	je     c0005ac8 <f_lseek+0xbc>
c0005d0f:	83 f8 ff             	cmp    eax,0xffffffff
c0005d12:	0f 84 c6 fd ff ff    	je     c0005ade <f_lseek+0xd2>
c0005d18:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005d1b:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005d1e:	85 c0                	test   eax,eax
c0005d20:	0f 84 4b ff ff ff    	je     c0005c71 <f_lseek+0x265>
c0005d26:	89 6c 24 10          	mov    DWORD PTR [esp+0x10],ebp
c0005d2a:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0005d32:	3b 2c 24             	cmp    ebp,DWORD PTR [esp]
c0005d35:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005d39:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005d3c:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005d3f:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005d43:	0f 83 9d 00 00 00    	jae    c0005de6 <f_lseek+0x3da>
c0005d49:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0005d4d:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005d51:	29 34 24             	sub    DWORD PTR [esp],esi
c0005d54:	19 7c 24 04          	sbb    DWORD PTR [esp+0x4],edi
c0005d58:	01 f2                	add    edx,esi
c0005d5a:	11 f9                	adc    ecx,edi
c0005d5c:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0005d60:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005d64:	89 4b 30             	mov    DWORD PTR [ebx+0x30],ecx
c0005d67:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c0005d6a:	8a 4b 28             	mov    cl,BYTE PTR [ebx+0x28]
c0005d6d:	f6 c1 02             	test   cl,0x2
c0005d70:	74 35                	je     c0005da7 <f_lseek+0x39b>
c0005d72:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0005d76:	39 7b 0c             	cmp    DWORD PTR [ebx+0xc],edi
c0005d79:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0005d7c:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c0005d80:	73 16                	jae    c0005d98 <f_lseek+0x38c>
c0005d82:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005d86:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005d8a:	88 ca                	mov    dl,cl
c0005d8c:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0005d8f:	83 ca 40             	or     edx,0x40
c0005d92:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c0005d95:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c0005d98:	89 c2                	mov    edx,eax
c0005d9a:	89 d8                	mov    eax,ebx
c0005d9c:	e8 0e d4 ff ff       	call   c00031af <create_chain>
c0005da1:	85 c0                	test   eax,eax
c0005da3:	75 0b                	jne    c0005db0 <f_lseek+0x3a4>
c0005da5:	eb 30                	jmp    c0005dd7 <f_lseek+0x3cb>
c0005da7:	89 c2                	mov    edx,eax
c0005da9:	89 d8                	mov    eax,ebx
c0005dab:	e8 11 d1 ff ff       	call   c0002ec1 <get_fat>
c0005db0:	83 f8 ff             	cmp    eax,0xffffffff
c0005db3:	0f 84 25 fd ff ff    	je     c0005ade <f_lseek+0xd2>
c0005db9:	83 f8 01             	cmp    eax,0x1
c0005dbc:	0f 86 06 fd ff ff    	jbe    c0005ac8 <f_lseek+0xbc>
c0005dc2:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005dc6:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005dc9:	0f 86 f9 fc ff ff    	jbe    c0005ac8 <f_lseek+0xbc>
c0005dcf:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005dd2:	e9 5b ff ff ff       	jmp    c0005d32 <f_lseek+0x326>
c0005dd7:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005dde:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005de6:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0005de9:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c0005ded:	01 7b 2c             	add    DWORD PTR [ebx+0x2c],edi
c0005df0:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0005df3:	11 6b 30             	adc    DWORD PTR [ebx+0x30],ebp
c0005df6:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0005dfc:	0f 84 6f fe ff ff    	je     c0005c71 <f_lseek+0x265>
c0005e02:	89 c2                	mov    edx,eax
c0005e04:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005e08:	e8 e7 bf ff ff       	call   c0001df4 <clst2sect>
c0005e0d:	89 d7                	mov    edi,edx
c0005e0f:	09 c7                	or     edi,eax
c0005e11:	0f 84 b1 fc ff ff    	je     c0005ac8 <f_lseek+0xbc>
c0005e17:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005e1b:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005e1e:	0f ac fe 09          	shrd   esi,edi,0x9
c0005e22:	c1 ef 09             	shr    edi,0x9
c0005e25:	01 c6                	add    esi,eax
c0005e27:	11 d7                	adc    edi,edx
c0005e29:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005e2c:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005e2f:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005e32:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c0005e35:	19 d1                	sbb    ecx,edx
c0005e37:	73 0a                	jae    c0005e43 <f_lseek+0x437>
c0005e39:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005e3c:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0005e3f:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c0005e43:	a9 ff 01 00 00       	test   eax,0x1ff
c0005e48:	74 6d                	je     c0005eb7 <f_lseek+0x4ab>
c0005e4a:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005e4d:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005e50:	39 fa                	cmp    edx,edi
c0005e52:	75 04                	jne    c0005e58 <f_lseek+0x44c>
c0005e54:	39 f0                	cmp    eax,esi
c0005e56:	74 5f                	je     c0005eb7 <f_lseek+0x4ab>
c0005e58:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005e5b:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005e5f:	79 25                	jns    c0005e86 <f_lseek+0x47a>
c0005e61:	83 ec 0c             	sub    esp,0xc
c0005e64:	6a 01                	push   0x1
c0005e66:	52                   	push   edx
c0005e67:	50                   	push   eax
c0005e68:	55                   	push   ebp
c0005e69:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005e6d:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005e71:	50                   	push   eax
c0005e72:	e8 af bc ff ff       	call   c0001b26 <disk_write>
c0005e77:	83 c4 20             	add    esp,0x20
c0005e7a:	85 c0                	test   eax,eax
c0005e7c:	0f 85 5c fc ff ff    	jne    c0005ade <f_lseek+0xd2>
c0005e82:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005e86:	83 ec 0c             	sub    esp,0xc
c0005e89:	6a 01                	push   0x1
c0005e8b:	57                   	push   edi
c0005e8c:	56                   	push   esi
c0005e8d:	55                   	push   ebp
c0005e8e:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005e92:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005e96:	50                   	push   eax
c0005e97:	e8 74 bc ff ff       	call   c0001b10 <disk_read>
c0005e9c:	83 c4 20             	add    esp,0x20
c0005e9f:	85 c0                	test   eax,eax
c0005ea1:	0f 85 37 fc ff ff    	jne    c0005ade <f_lseek+0xd2>
c0005ea7:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0005eaa:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0005ead:	eb 08                	jmp    c0005eb7 <f_lseek+0x4ab>
c0005eaf:	c7 44 24 18 11 00 00 00 	mov    DWORD PTR [esp+0x18],0x11
c0005eb7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005ebb:	83 c4 3c             	add    esp,0x3c
c0005ebe:	5b                   	pop    ebx
c0005ebf:	5e                   	pop    esi
c0005ec0:	5f                   	pop    edi
c0005ec1:	5d                   	pop    ebp
c0005ec2:	c3                   	ret    

c0005ec3 <f_opendir>:
c0005ec3:	56                   	push   esi
c0005ec4:	b8 09 00 00 00       	mov    eax,0x9
c0005ec9:	53                   	push   ebx
c0005eca:	83 ec 24             	sub    esp,0x24
c0005ecd:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0005ed1:	85 db                	test   ebx,ebx
c0005ed3:	0f 84 e6 00 00 00    	je     c0005fbf <f_opendir+0xfc>
c0005ed9:	31 c9                	xor    ecx,ecx
c0005edb:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005edf:	8d 44 24 34          	lea    eax,[esp+0x34]
c0005ee3:	e8 03 c7 ff ff       	call   c00025eb <mount_volume>
c0005ee8:	85 c0                	test   eax,eax
c0005eea:	0f 85 c9 00 00 00    	jne    c0005fb9 <f_opendir+0xf6>
c0005ef0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005ef4:	83 ec 0c             	sub    esp,0xc
c0005ef7:	89 03                	mov    DWORD PTR [ebx],eax
c0005ef9:	68 60 04 00 00       	push   0x460
c0005efe:	e8 c1 26 00 00       	call   c00085c4 <ff_memalloc>
c0005f03:	83 c4 10             	add    esp,0x10
c0005f06:	89 c6                	mov    esi,eax
c0005f08:	b8 11 00 00 00       	mov    eax,0x11
c0005f0d:	85 f6                	test   esi,esi
c0005f0f:	0f 84 aa 00 00 00    	je     c0005fbf <f_opendir+0xfc>
c0005f15:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005f19:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005f1f:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005f22:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005f25:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0005f29:	89 d8                	mov    eax,ebx
c0005f2b:	e8 31 ee ff ff       	call   c0004d61 <follow_path>
c0005f30:	85 c0                	test   eax,eax
c0005f32:	75 61                	jne    c0005f95 <f_opendir+0xd2>
c0005f34:	80 7b 47 00          	cmp    BYTE PTR [ebx+0x47],0x0
c0005f38:	78 46                	js     c0005f80 <f_opendir+0xbd>
c0005f3a:	b8 05 00 00 00       	mov    eax,0x5
c0005f3f:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0005f43:	74 50                	je     c0005f95 <f_opendir+0xd2>
c0005f45:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005f49:	8a 01                	mov    al,BYTE PTR [ecx]
c0005f4b:	3c 04                	cmp    al,0x4
c0005f4d:	75 26                	jne    c0005f75 <f_opendir+0xb2>
c0005f4f:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005f52:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005f55:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0005f58:	30 d2                	xor    dl,dl
c0005f5a:	0f b6 43 07          	movzx  eax,BYTE PTR [ebx+0x7]
c0005f5e:	09 c2                	or     edx,eax
c0005f60:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0005f63:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0005f66:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0005f69:	89 da                	mov    edx,ebx
c0005f6b:	8d 41 10             	lea    eax,[ecx+0x10]
c0005f6e:	e8 b4 ed ff ff       	call   c0004d27 <init_alloc_info.isra.2>
c0005f73:	eb 0b                	jmp    c0005f80 <f_opendir+0xbd>
c0005f75:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0005f78:	e8 59 ed ff ff       	call   c0004cd6 <ld_clust.isra.0>
c0005f7d:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005f80:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005f84:	31 d2                	xor    edx,edx
c0005f86:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0005f8a:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0005f8e:	89 d8                	mov    eax,ebx
c0005f90:	e8 22 d1 ff ff       	call   c00030b7 <dir_sdi>
c0005f95:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005f99:	83 ec 0c             	sub    esp,0xc
c0005f9c:	56                   	push   esi
c0005f9d:	e8 3a 26 00 00       	call   c00085dc <ff_memfree>
c0005fa2:	83 c4 10             	add    esp,0x10
c0005fa5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005fa9:	83 f8 04             	cmp    eax,0x4
c0005fac:	74 06                	je     c0005fb4 <f_opendir+0xf1>
c0005fae:	85 c0                	test   eax,eax
c0005fb0:	74 0d                	je     c0005fbf <f_opendir+0xfc>
c0005fb2:	eb 05                	jmp    c0005fb9 <f_opendir+0xf6>
c0005fb4:	b8 05 00 00 00       	mov    eax,0x5
c0005fb9:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005fbf:	83 c4 24             	add    esp,0x24
c0005fc2:	5b                   	pop    ebx
c0005fc3:	5e                   	pop    esi
c0005fc4:	c3                   	ret    

c0005fc5 <f_closedir>:
c0005fc5:	53                   	push   ebx
c0005fc6:	83 ec 18             	sub    esp,0x18
c0005fc9:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0005fcd:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0005fd1:	89 d8                	mov    eax,ebx
c0005fd3:	e8 86 c2 ff ff       	call   c000225e <validate>
c0005fd8:	85 c0                	test   eax,eax
c0005fda:	75 06                	jne    c0005fe2 <f_closedir+0x1d>
c0005fdc:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005fe2:	83 c4 18             	add    esp,0x18
c0005fe5:	5b                   	pop    ebx
c0005fe6:	c3                   	ret    

c0005fe7 <f_readdir>:
c0005fe7:	57                   	push   edi
c0005fe8:	56                   	push   esi
c0005fe9:	53                   	push   ebx
c0005fea:	83 ec 20             	sub    esp,0x20
c0005fed:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0005ff1:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0005ff5:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005ff9:	89 d8                	mov    eax,ebx
c0005ffb:	e8 5e c2 ff ff       	call   c000225e <validate>
c0006000:	85 c0                	test   eax,eax
c0006002:	75 77                	jne    c000607b <f_readdir+0x94>
c0006004:	85 ff                	test   edi,edi
c0006006:	75 0b                	jne    c0006013 <f_readdir+0x2c>
c0006008:	31 d2                	xor    edx,edx
c000600a:	89 d8                	mov    eax,ebx
c000600c:	e8 a6 d0 ff ff       	call   c00030b7 <dir_sdi>
c0006011:	eb 68                	jmp    c000607b <f_readdir+0x94>
c0006013:	83 ec 0c             	sub    esp,0xc
c0006016:	68 60 04 00 00       	push   0x460
c000601b:	e8 a4 25 00 00       	call   c00085c4 <ff_memalloc>
c0006020:	83 c4 10             	add    esp,0x10
c0006023:	89 c6                	mov    esi,eax
c0006025:	b8 11 00 00 00       	mov    eax,0x11
c000602a:	85 f6                	test   esi,esi
c000602c:	74 4d                	je     c000607b <f_readdir+0x94>
c000602e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006032:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006038:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c000603b:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000603e:	31 d2                	xor    edx,edx
c0006040:	89 d8                	mov    eax,ebx
c0006042:	e8 80 d8 ff ff       	call   c00038c7 <dir_read>
c0006047:	a9 fb ff ff ff       	test   eax,0xfffffffb
c000604c:	75 19                	jne    c0006067 <f_readdir+0x80>
c000604e:	89 fa                	mov    edx,edi
c0006050:	89 d8                	mov    eax,ebx
c0006052:	e8 7e ea ff ff       	call   c0004ad5 <get_fileinfo>
c0006057:	31 d2                	xor    edx,edx
c0006059:	89 d8                	mov    eax,ebx
c000605b:	e8 af d5 ff ff       	call   c000360f <dir_next>
c0006060:	83 f8 04             	cmp    eax,0x4
c0006063:	75 02                	jne    c0006067 <f_readdir+0x80>
c0006065:	31 c0                	xor    eax,eax
c0006067:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000606b:	83 ec 0c             	sub    esp,0xc
c000606e:	56                   	push   esi
c000606f:	e8 68 25 00 00       	call   c00085dc <ff_memfree>
c0006074:	83 c4 10             	add    esp,0x10
c0006077:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000607b:	83 c4 20             	add    esp,0x20
c000607e:	5b                   	pop    ebx
c000607f:	5e                   	pop    esi
c0006080:	5f                   	pop    edi
c0006081:	c3                   	ret    

c0006082 <f_stat>:
c0006082:	57                   	push   edi
c0006083:	31 c9                	xor    ecx,ecx
c0006085:	56                   	push   esi
c0006086:	53                   	push   ebx
c0006087:	83 ec 50             	sub    esp,0x50
c000608a:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c000608e:	8d 54 24 04          	lea    edx,[esp+0x4]
c0006092:	8d 44 24 60          	lea    eax,[esp+0x60]
c0006096:	e8 50 c5 ff ff       	call   c00025eb <mount_volume>
c000609b:	89 c3                	mov    ebx,eax
c000609d:	85 c0                	test   eax,eax
c000609f:	75 67                	jne    c0006108 <f_stat+0x86>
c00060a1:	83 ec 0c             	sub    esp,0xc
c00060a4:	bb 11 00 00 00       	mov    ebx,0x11
c00060a9:	68 60 04 00 00       	push   0x460
c00060ae:	e8 11 25 00 00       	call   c00085c4 <ff_memalloc>
c00060b3:	83 c4 10             	add    esp,0x10
c00060b6:	89 c6                	mov    esi,eax
c00060b8:	85 c0                	test   eax,eax
c00060ba:	74 4c                	je     c0006108 <f_stat+0x86>
c00060bc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00060c0:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c00060c6:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00060c9:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00060cc:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c00060d0:	8d 44 24 04          	lea    eax,[esp+0x4]
c00060d4:	e8 88 ec ff ff       	call   c0004d61 <follow_path>
c00060d9:	89 c3                	mov    ebx,eax
c00060db:	85 c0                	test   eax,eax
c00060dd:	75 1d                	jne    c00060fc <f_stat+0x7a>
c00060df:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c00060e4:	78 11                	js     c00060f7 <f_stat+0x75>
c00060e6:	85 ff                	test   edi,edi
c00060e8:	74 12                	je     c00060fc <f_stat+0x7a>
c00060ea:	89 fa                	mov    edx,edi
c00060ec:	8d 44 24 04          	lea    eax,[esp+0x4]
c00060f0:	e8 e0 e9 ff ff       	call   c0004ad5 <get_fileinfo>
c00060f5:	eb 05                	jmp    c00060fc <f_stat+0x7a>
c00060f7:	bb 06 00 00 00       	mov    ebx,0x6
c00060fc:	83 ec 0c             	sub    esp,0xc
c00060ff:	56                   	push   esi
c0006100:	e8 d7 24 00 00       	call   c00085dc <ff_memfree>
c0006105:	83 c4 10             	add    esp,0x10
c0006108:	83 c4 50             	add    esp,0x50
c000610b:	89 d8                	mov    eax,ebx
c000610d:	5b                   	pop    ebx
c000610e:	5e                   	pop    esi
c000610f:	5f                   	pop    edi
c0006110:	c3                   	ret    

c0006111 <f_getfree>:
c0006111:	55                   	push   ebp
c0006112:	31 c9                	xor    ecx,ecx
c0006114:	57                   	push   edi
c0006115:	56                   	push   esi
c0006116:	53                   	push   ebx
c0006117:	83 ec 5c             	sub    esp,0x5c
c000611a:	8d 54 24 24          	lea    edx,[esp+0x24]
c000611e:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006122:	e8 c4 c4 ff ff       	call   c00025eb <mount_volume>
c0006127:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000612b:	85 c0                	test   eax,eax
c000612d:	0f 85 9d 01 00 00    	jne    c00062d0 <f_getfree+0x1bf>
c0006133:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006137:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c000613b:	89 02                	mov    DWORD PTR [edx],eax
c000613d:	8b 48 1c             	mov    ecx,DWORD PTR [eax+0x1c]
c0006140:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0006143:	8d 71 fe             	lea    esi,[ecx-0x2]
c0006146:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c000614a:	39 f2                	cmp    edx,esi
c000614c:	77 0b                	ja     c0006159 <f_getfree+0x48>
c000614e:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0006152:	89 10                	mov    DWORD PTR [eax],edx
c0006154:	e9 77 01 00 00       	jmp    c00062d0 <f_getfree+0x1bf>
c0006159:	8a 10                	mov    dl,BYTE PTR [eax]
c000615b:	80 fa 01             	cmp    dl,0x1
c000615e:	75 3a                	jne    c000619a <f_getfree+0x89>
c0006160:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0006164:	be 02 00 00 00       	mov    esi,0x2
c0006169:	31 db                	xor    ebx,ebx
c000616b:	89 f2                	mov    edx,esi
c000616d:	8d 44 24 28          	lea    eax,[esp+0x28]
c0006171:	e8 4b cd ff ff       	call   c0002ec1 <get_fat>
c0006176:	83 f8 ff             	cmp    eax,0xffffffff
c0006179:	0f 84 28 01 00 00    	je     c00062a7 <f_getfree+0x196>
c000617f:	83 f8 01             	cmp    eax,0x1
c0006182:	0f 84 29 01 00 00    	je     c00062b1 <f_getfree+0x1a0>
c0006188:	83 d3 00             	adc    ebx,0x0
c000618b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000618f:	46                   	inc    esi
c0006190:	39 70 1c             	cmp    DWORD PTR [eax+0x1c],esi
c0006193:	77 d6                	ja     c000616b <f_getfree+0x5a>
c0006195:	e9 25 01 00 00       	jmp    c00062bf <f_getfree+0x1ae>
c000619a:	80 fa 04             	cmp    dl,0x4
c000619d:	0f 85 88 00 00 00    	jne    c000622b <f_getfree+0x11a>
c00061a3:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c00061a6:	31 ed                	xor    ebp,ebp
c00061a8:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c00061ab:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00061af:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00061b3:	31 db                	xor    ebx,ebx
c00061b5:	85 ed                	test   ebp,ebp
c00061b7:	75 3f                	jne    c00061f8 <f_getfree+0xe7>
c00061b9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00061bd:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00061c1:	83 c0 01             	add    eax,0x1
c00061c4:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00061c8:	83 d2 00             	adc    edx,0x0
c00061cb:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00061cf:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00061d3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00061d7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00061db:	e8 59 c1 ff ff       	call   c0002339 <move_window>
c00061e0:	85 c0                	test   eax,eax
c00061e2:	0f 85 d3 00 00 00    	jne    c00062bb <f_getfree+0x1aa>
c00061e8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00061ec:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00061f0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00061f4:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00061f8:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00061fc:	8d 4e f8             	lea    ecx,[esi-0x8]
c00061ff:	8a 44 28 54          	mov    al,BYTE PTR [eax+ebp*1+0x54]
c0006203:	89 cf                	mov    edi,ecx
c0006205:	85 f6                	test   esi,esi
c0006207:	74 12                	je     c000621b <f_getfree+0x10a>
c0006209:	88 c1                	mov    cl,al
c000620b:	83 e1 01             	and    ecx,0x1
c000620e:	80 f9 01             	cmp    cl,0x1
c0006211:	83 d3 00             	adc    ebx,0x0
c0006214:	d0 e8                	shr    al,1
c0006216:	4e                   	dec    esi
c0006217:	39 fe                	cmp    esi,edi
c0006219:	75 ea                	jne    c0006205 <f_getfree+0xf4>
c000621b:	45                   	inc    ebp
c000621c:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0006222:	85 f6                	test   esi,esi
c0006224:	75 8f                	jne    c00061b5 <f_getfree+0xa4>
c0006226:	e9 94 00 00 00       	jmp    c00062bf <f_getfree+0x1ae>
c000622b:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c000622e:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c0006231:	31 f6                	xor    esi,esi
c0006233:	31 db                	xor    ebx,ebx
c0006235:	85 f6                	test   esi,esi
c0006237:	75 1b                	jne    c0006254 <f_getfree+0x143>
c0006239:	89 d7                	mov    edi,edx
c000623b:	89 cd                	mov    ebp,ecx
c000623d:	83 c7 01             	add    edi,0x1
c0006240:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006244:	83 d5 00             	adc    ebp,0x0
c0006247:	e8 ed c0 ff ff       	call   c0002339 <move_window>
c000624c:	85 c0                	test   eax,eax
c000624e:	75 6b                	jne    c00062bb <f_getfree+0x1aa>
c0006250:	89 fa                	mov    edx,edi
c0006252:	89 e9                	mov    ecx,ebp
c0006254:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006258:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c000625c:	8d 44 30 54          	lea    eax,[eax+esi*1+0x54]
c0006260:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c0006263:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0006267:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c000626b:	75 11                	jne    c000627e <f_getfree+0x16d>
c000626d:	e8 e9 b8 ff ff       	call   c0001b5b <ld_word>
c0006272:	66 83 f8 01          	cmp    ax,0x1
c0006276:	83 d3 00             	adc    ebx,0x0
c0006279:	83 c6 02             	add    esi,0x2
c000627c:	eb 13                	jmp    c0006291 <f_getfree+0x180>
c000627e:	e8 e5 b8 ff ff       	call   c0001b68 <ld_dword>
c0006283:	25 ff ff ff 0f       	and    eax,0xfffffff
c0006288:	83 f8 01             	cmp    eax,0x1
c000628b:	83 d3 00             	adc    ebx,0x0
c000628e:	83 c6 04             	add    esi,0x4
c0006291:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0006297:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000629b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000629f:	ff 4c 24 10          	dec    DWORD PTR [esp+0x10]
c00062a3:	75 90                	jne    c0006235 <f_getfree+0x124>
c00062a5:	eb 18                	jmp    c00062bf <f_getfree+0x1ae>
c00062a7:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c00062af:	eb 0e                	jmp    c00062bf <f_getfree+0x1ae>
c00062b1:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c00062b9:	eb 04                	jmp    c00062bf <f_getfree+0x1ae>
c00062bb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00062bf:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c00062c3:	89 18                	mov    DWORD PTR [eax],ebx
c00062c5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00062c9:	89 58 18             	mov    DWORD PTR [eax+0x18],ebx
c00062cc:	80 48 04 01          	or     BYTE PTR [eax+0x4],0x1
c00062d0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00062d4:	83 c4 5c             	add    esp,0x5c
c00062d7:	5b                   	pop    ebx
c00062d8:	5e                   	pop    esi
c00062d9:	5f                   	pop    edi
c00062da:	5d                   	pop    ebp
c00062db:	c3                   	ret    

c00062dc <f_truncate>:
c00062dc:	56                   	push   esi
c00062dd:	53                   	push   ebx
c00062de:	83 ec 14             	sub    esp,0x14
c00062e1:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00062e5:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00062e9:	89 d8                	mov    eax,ebx
c00062eb:	e8 6e bf ff ff       	call   c000225e <validate>
c00062f0:	89 c6                	mov    esi,eax
c00062f2:	85 c0                	test   eax,eax
c00062f4:	0f 85 d2 00 00 00    	jne    c00063cc <f_truncate+0xf0>
c00062fa:	0f b6 73 29          	movzx  esi,BYTE PTR [ebx+0x29]
c00062fe:	85 f6                	test   esi,esi
c0006300:	0f 85 c6 00 00 00    	jne    c00063cc <f_truncate+0xf0>
c0006306:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c000630a:	0f 84 b7 00 00 00    	je     c00063c7 <f_truncate+0xeb>
c0006310:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0006313:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0006316:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c0006319:	89 d1                	mov    ecx,edx
c000631b:	1b 4b 10             	sbb    ecx,DWORD PTR [ebx+0x10]
c000631e:	0f 83 a8 00 00 00    	jae    c00063cc <f_truncate+0xf0>
c0006324:	09 c2                	or     edx,eax
c0006326:	75 15                	jne    c000633d <f_truncate+0x61>
c0006328:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c000632b:	31 c9                	xor    ecx,ecx
c000632d:	89 d8                	mov    eax,ebx
c000632f:	e8 7a d0 ff ff       	call   c00033ae <remove_chain>
c0006334:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000633b:	eb 35                	jmp    c0006372 <f_truncate+0x96>
c000633d:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0006340:	89 d8                	mov    eax,ebx
c0006342:	e8 7a cb ff ff       	call   c0002ec1 <get_fat>
c0006347:	89 c2                	mov    edx,eax
c0006349:	b8 01 00 00 00       	mov    eax,0x1
c000634e:	83 fa ff             	cmp    edx,0xffffffff
c0006351:	74 1f                	je     c0006372 <f_truncate+0x96>
c0006353:	b8 02 00 00 00       	mov    eax,0x2
c0006358:	83 fa 01             	cmp    edx,0x1
c000635b:	74 15                	je     c0006372 <f_truncate+0x96>
c000635d:	31 c0                	xor    eax,eax
c000635f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0006363:	39 51 1c             	cmp    DWORD PTR [ecx+0x1c],edx
c0006366:	76 0a                	jbe    c0006372 <f_truncate+0x96>
c0006368:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000636b:	89 d8                	mov    eax,ebx
c000636d:	e8 3c d0 ff ff       	call   c00033ae <remove_chain>
c0006372:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0006375:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0006378:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000637b:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c000637e:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c0006381:	83 ca 40             	or     edx,0x40
c0006384:	85 c0                	test   eax,eax
c0006386:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c0006389:	75 35                	jne    c00063c0 <f_truncate+0xe4>
c000638b:	84 d2                	test   dl,dl
c000638d:	79 3d                	jns    c00063cc <f_truncate+0xf0>
c000638f:	83 ec 0c             	sub    esp,0xc
c0006392:	8d 43 50             	lea    eax,[ebx+0x50]
c0006395:	6a 01                	push   0x1
c0006397:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c000639a:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000639d:	50                   	push   eax
c000639e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00063a2:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00063a6:	50                   	push   eax
c00063a7:	e8 7a b7 ff ff       	call   c0001b26 <disk_write>
c00063ac:	83 c4 20             	add    esp,0x20
c00063af:	85 c0                	test   eax,eax
c00063b1:	75 08                	jne    c00063bb <f_truncate+0xdf>
c00063b3:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00063b7:	31 f6                	xor    esi,esi
c00063b9:	eb 11                	jmp    c00063cc <f_truncate+0xf0>
c00063bb:	b8 01 00 00 00       	mov    eax,0x1
c00063c0:	88 43 29             	mov    BYTE PTR [ebx+0x29],al
c00063c3:	89 c6                	mov    esi,eax
c00063c5:	eb 05                	jmp    c00063cc <f_truncate+0xf0>
c00063c7:	be 07 00 00 00       	mov    esi,0x7
c00063cc:	89 f0                	mov    eax,esi
c00063ce:	83 c4 14             	add    esp,0x14
c00063d1:	5b                   	pop    ebx
c00063d2:	5e                   	pop    esi
c00063d3:	c3                   	ret    

c00063d4 <f_unlink>:
c00063d4:	56                   	push   esi
c00063d5:	b9 02 00 00 00       	mov    ecx,0x2
c00063da:	53                   	push   ebx
c00063db:	81 ec e4 00 00 00    	sub    esp,0xe4
c00063e1:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00063e5:	8d 84 24 f0 00 00 00 	lea    eax,[esp+0xf0]
c00063ec:	e8 fa c1 ff ff       	call   c00025eb <mount_volume>
c00063f1:	85 c0                	test   eax,eax
c00063f3:	0f 85 55 01 00 00    	jne    c000654e <f_unlink+0x17a>
c00063f9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00063fd:	83 ec 0c             	sub    esp,0xc
c0006400:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0006404:	68 60 04 00 00       	push   0x460
c0006409:	e8 b6 21 00 00       	call   c00085c4 <ff_memalloc>
c000640e:	83 c4 10             	add    esp,0x10
c0006411:	89 c3                	mov    ebx,eax
c0006413:	b8 11 00 00 00       	mov    eax,0x11
c0006418:	85 db                	test   ebx,ebx
c000641a:	0f 84 2e 01 00 00    	je     c000654e <f_unlink+0x17a>
c0006420:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006424:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c000642a:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c000642d:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006430:	8b 94 24 f0 00 00 00 	mov    edx,DWORD PTR [esp+0xf0]
c0006437:	8d 44 24 48          	lea    eax,[esp+0x48]
c000643b:	e8 21 e9 ff ff       	call   c0004d61 <follow_path>
c0006440:	85 c0                	test   eax,eax
c0006442:	0f 85 f2 00 00 00    	jne    c000653a <f_unlink+0x166>
c0006448:	b8 06 00 00 00       	mov    eax,0x6
c000644d:	80 bc 24 8f 00 00 00 00 	cmp    BYTE PTR [esp+0x8f],0x0
c0006455:	0f 88 df 00 00 00    	js     c000653a <f_unlink+0x166>
c000645b:	f6 44 24 4e 01       	test   BYTE PTR [esp+0x4e],0x1
c0006460:	74 0a                	je     c000646c <f_unlink+0x98>
c0006462:	b8 07 00 00 00       	mov    eax,0x7
c0006467:	e9 ce 00 00 00       	jmp    c000653a <f_unlink+0x166>
c000646c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0006470:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0006474:	8a 02                	mov    al,BYTE PTR [edx]
c0006476:	3c 04                	cmp    al,0x4
c0006478:	75 12                	jne    c000648c <f_unlink+0xb8>
c000647a:	8d 42 10             	lea    eax,[edx+0x10]
c000647d:	8d 54 24 20          	lea    edx,[esp+0x20]
c0006481:	e8 a1 e8 ff ff       	call   c0004d27 <init_alloc_info.isra.2>
c0006486:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c000648a:	eb 0e                	jmp    c000649a <f_unlink+0xc6>
c000648c:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c0006493:	e8 3e e8 ff ff       	call   c0004cd6 <ld_clust.isra.0>
c0006498:	89 c6                	mov    esi,eax
c000649a:	f6 44 24 4e 10       	test   BYTE PTR [esp+0x4e],0x10
c000649f:	75 12                	jne    c00064b3 <f_unlink+0xdf>
c00064a1:	8d 44 24 48          	lea    eax,[esp+0x48]
c00064a5:	e8 94 d6 ff ff       	call   c0003b3e <dir_remove>
c00064aa:	85 c0                	test   eax,eax
c00064ac:	74 6c                	je     c000651a <f_unlink+0x146>
c00064ae:	e9 87 00 00 00       	jmp    c000653a <f_unlink+0x166>
c00064b3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00064b7:	89 b4 24 9c 00 00 00 	mov    DWORD PTR [esp+0x9c],esi
c00064be:	89 84 24 94 00 00 00 	mov    DWORD PTR [esp+0x94],eax
c00064c5:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00064c8:	75 21                	jne    c00064eb <f_unlink+0x117>
c00064ca:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00064ce:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00064d2:	89 84 24 a0 00 00 00 	mov    DWORD PTR [esp+0xa0],eax
c00064d9:	89 94 24 a4 00 00 00 	mov    DWORD PTR [esp+0xa4],edx
c00064e0:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c00064e4:	88 84 24 9b 00 00 00 	mov    BYTE PTR [esp+0x9b],al
c00064eb:	31 d2                	xor    edx,edx
c00064ed:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c00064f4:	e8 be cb ff ff       	call   c00030b7 <dir_sdi>
c00064f9:	85 c0                	test   eax,eax
c00064fb:	75 3d                	jne    c000653a <f_unlink+0x166>
c00064fd:	31 d2                	xor    edx,edx
c00064ff:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c0006506:	e8 bc d3 ff ff       	call   c00038c7 <dir_read>
c000650b:	85 c0                	test   eax,eax
c000650d:	0f 84 4f ff ff ff    	je     c0006462 <f_unlink+0x8e>
c0006513:	83 f8 04             	cmp    eax,0x4
c0006516:	75 22                	jne    c000653a <f_unlink+0x166>
c0006518:	eb 87                	jmp    c00064a1 <f_unlink+0xcd>
c000651a:	85 f6                	test   esi,esi
c000651c:	75 0b                	jne    c0006529 <f_unlink+0x155>
c000651e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006522:	e8 3d df ff ff       	call   c0004464 <sync_fs>
c0006527:	eb 11                	jmp    c000653a <f_unlink+0x166>
c0006529:	31 c9                	xor    ecx,ecx
c000652b:	89 f2                	mov    edx,esi
c000652d:	8d 44 24 20          	lea    eax,[esp+0x20]
c0006531:	e8 78 ce ff ff       	call   c00033ae <remove_chain>
c0006536:	85 c0                	test   eax,eax
c0006538:	74 e4                	je     c000651e <f_unlink+0x14a>
c000653a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000653e:	83 ec 0c             	sub    esp,0xc
c0006541:	53                   	push   ebx
c0006542:	e8 95 20 00 00       	call   c00085dc <ff_memfree>
c0006547:	83 c4 10             	add    esp,0x10
c000654a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000654e:	81 c4 e4 00 00 00    	add    esp,0xe4
c0006554:	5b                   	pop    ebx
c0006555:	5e                   	pop    esi
c0006556:	c3                   	ret    

c0006557 <f_mkdir>:
c0006557:	57                   	push   edi
c0006558:	b9 02 00 00 00       	mov    ecx,0x2
c000655d:	56                   	push   esi
c000655e:	53                   	push   ebx
c000655f:	83 c4 80             	add    esp,0xffffff80
c0006562:	8d 54 24 08          	lea    edx,[esp+0x8]
c0006566:	8d 84 24 90 00 00 00 	lea    eax,[esp+0x90]
c000656d:	e8 79 c0 ff ff       	call   c00025eb <mount_volume>
c0006572:	89 c3                	mov    ebx,eax
c0006574:	85 c0                	test   eax,eax
c0006576:	0f 85 fe 01 00 00    	jne    c000677a <f_mkdir+0x223>
c000657c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006580:	bb 11 00 00 00       	mov    ebx,0x11
c0006585:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0006589:	83 ec 0c             	sub    esp,0xc
c000658c:	68 60 04 00 00       	push   0x460
c0006591:	e8 2e 20 00 00       	call   c00085c4 <ff_memalloc>
c0006596:	83 c4 10             	add    esp,0x10
c0006599:	89 c7                	mov    edi,eax
c000659b:	85 c0                	test   eax,eax
c000659d:	0f 84 d7 01 00 00    	je     c000677a <f_mkdir+0x223>
c00065a3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00065a7:	8d 97 00 02 00 00    	lea    edx,[edi+0x200]
c00065ad:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c00065b0:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00065b3:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c00065ba:	8d 44 24 34          	lea    eax,[esp+0x34]
c00065be:	e8 9e e7 ff ff       	call   c0004d61 <follow_path>
c00065c3:	89 c3                	mov    ebx,eax
c00065c5:	85 c0                	test   eax,eax
c00065c7:	74 3e                	je     c0006607 <f_mkdir+0xb0>
c00065c9:	83 f8 04             	cmp    eax,0x4
c00065cc:	75 3e                	jne    c000660c <f_mkdir+0xb5>
c00065ce:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00065d2:	31 d2                	xor    edx,edx
c00065d4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00065d8:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00065dc:	e8 ce cb ff ff       	call   c00031af <create_chain>
c00065e1:	89 c6                	mov    esi,eax
c00065e3:	85 c0                	test   eax,eax
c00065e5:	74 0c                	je     c00065f3 <f_mkdir+0x9c>
c00065e7:	bb 02 00 00 00       	mov    ebx,0x2
c00065ec:	83 f8 01             	cmp    eax,0x1
c00065ef:	74 07                	je     c00065f8 <f_mkdir+0xa1>
c00065f1:	eb 2a                	jmp    c000661d <f_mkdir+0xc6>
c00065f3:	bb 07 00 00 00       	mov    ebx,0x7
c00065f8:	31 c9                	xor    ecx,ecx
c00065fa:	89 f2                	mov    edx,esi
c00065fc:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0006600:	e8 a9 cd ff ff       	call   c00033ae <remove_chain>
c0006605:	eb 05                	jmp    c000660c <f_mkdir+0xb5>
c0006607:	bb 08 00 00 00       	mov    ebx,0x8
c000660c:	83 ec 0c             	sub    esp,0xc
c000660f:	57                   	push   edi
c0006610:	e8 c7 1f 00 00       	call   c00085dc <ff_memfree>
c0006615:	83 c4 10             	add    esp,0x10
c0006618:	e9 5d 01 00 00       	jmp    c000677a <f_mkdir+0x223>
c000661d:	bb 01 00 00 00       	mov    ebx,0x1
c0006622:	83 f8 ff             	cmp    eax,0xffffffff
c0006625:	74 d1                	je     c00065f8 <f_mkdir+0xa1>
c0006627:	89 f2                	mov    edx,esi
c0006629:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000662d:	e8 c4 ce ff ff       	call   c00034f6 <dir_clear>
c0006632:	89 c3                	mov    ebx,eax
c0006634:	85 c0                	test   eax,eax
c0006636:	75 c0                	jne    c00065f8 <f_mkdir+0xa1>
c0006638:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000663c:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000663f:	74 69                	je     c00066aa <f_mkdir+0x153>
c0006641:	b9 0b 00 00 00       	mov    ecx,0xb
c0006646:	83 c0 54             	add    eax,0x54
c0006649:	ba 20 00 00 00       	mov    edx,0x20
c000664e:	e8 9c b5 ff ff       	call   c0001bef <mem_set>
c0006653:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006657:	ba 00 00 21 50       	mov    edx,0x50210000
c000665c:	c6 40 54 2e          	mov    BYTE PTR [eax+0x54],0x2e
c0006660:	c6 40 5f 10          	mov    BYTE PTR [eax+0x5f],0x10
c0006664:	83 c0 6a             	add    eax,0x6a
c0006667:	e8 65 b5 ff ff       	call   c0001bd1 <st_dword>
c000666c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006670:	89 f1                	mov    ecx,esi
c0006672:	8d 50 54             	lea    edx,[eax+0x54]
c0006675:	e8 85 e6 ff ff       	call   c0004cff <st_clust.isra.1>
c000667a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000667e:	b9 20 00 00 00       	mov    ecx,0x20
c0006683:	8d 50 54             	lea    edx,[eax+0x54]
c0006686:	83 c0 74             	add    eax,0x74
c0006689:	e8 4c b5 ff ff       	call   c0001bda <mem_cpy>
c000668e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006692:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c0006696:	c6 40 75 2e          	mov    BYTE PTR [eax+0x75],0x2e
c000669a:	8d 50 74             	lea    edx,[eax+0x74]
c000669d:	e8 5d e6 ff ff       	call   c0004cff <st_clust.isra.1>
c00066a2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00066a6:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00066aa:	8d 44 24 34          	lea    eax,[esp+0x34]
c00066ae:	e8 2f db ff ff       	call   c00041e2 <dir_register>
c00066b3:	89 c3                	mov    ebx,eax
c00066b5:	85 c0                	test   eax,eax
c00066b7:	0f 85 3b ff ff ff    	jne    c00065f8 <f_mkdir+0xa1>
c00066bd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00066c1:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00066c4:	75 74                	jne    c000673a <f_mkdir+0x1e3>
c00066c6:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00066c9:	ba 00 00 21 50       	mov    edx,0x50210000
c00066ce:	83 c0 0c             	add    eax,0xc
c00066d1:	e8 fb b4 ff ff       	call   c0001bd1 <st_dword>
c00066d6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00066da:	89 f2                	mov    edx,esi
c00066dc:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00066df:	83 c0 34             	add    eax,0x34
c00066e2:	e8 ea b4 ff ff       	call   c0001bd1 <st_dword>
c00066e7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00066eb:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c00066ef:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00066f2:	c1 e2 09             	shl    edx,0x9
c00066f5:	83 c0 38             	add    eax,0x38
c00066f8:	e8 d4 b4 ff ff       	call   c0001bd1 <st_dword>
c00066fd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006701:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c0006705:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006708:	c1 e2 09             	shl    edx,0x9
c000670b:	83 c0 28             	add    eax,0x28
c000670e:	e8 be b4 ff ff       	call   c0001bd1 <st_dword>
c0006713:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006717:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000671a:	c6 42 21 03          	mov    BYTE PTR [edx+0x21],0x3
c000671e:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006721:	c6 40 04 10          	mov    BYTE PTR [eax+0x4],0x10
c0006725:	8d 44 24 34          	lea    eax,[esp+0x34]
c0006729:	e8 8b d3 ff ff       	call   c0003ab9 <store_xdir>
c000672e:	89 c3                	mov    ebx,eax
c0006730:	85 c0                	test   eax,eax
c0006732:	0f 85 d4 fe ff ff    	jne    c000660c <f_mkdir+0xb5>
c0006738:	eb 30                	jmp    c000676a <f_mkdir+0x213>
c000673a:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000673e:	ba 00 00 21 50       	mov    edx,0x50210000
c0006743:	83 c0 16             	add    eax,0x16
c0006746:	e8 86 b4 ff ff       	call   c0001bd1 <st_dword>
c000674b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000674f:	89 f1                	mov    ecx,esi
c0006751:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c0006755:	e8 a5 e5 ff ff       	call   c0004cff <st_clust.isra.1>
c000675a:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000675e:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c0006762:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006766:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c000676a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000676e:	e8 f1 dc ff ff       	call   c0004464 <sync_fs>
c0006773:	89 c3                	mov    ebx,eax
c0006775:	e9 92 fe ff ff       	jmp    c000660c <f_mkdir+0xb5>
c000677a:	83 ec 80             	sub    esp,0xffffff80
c000677d:	89 d8                	mov    eax,ebx
c000677f:	5b                   	pop    ebx
c0006780:	5e                   	pop    esi
c0006781:	5f                   	pop    edi
c0006782:	c3                   	ret    

c0006783 <f_rename>:
c0006783:	55                   	push   ebp
c0006784:	57                   	push   edi
c0006785:	56                   	push   esi
c0006786:	53                   	push   ebx
c0006787:	81 ec fc 00 00 00    	sub    esp,0xfc
c000678d:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c0006794:	e8 a4 b9 ff ff       	call   c000213d <get_ldnumber>
c0006799:	b9 02 00 00 00       	mov    ecx,0x2
c000679e:	8d 54 24 14          	lea    edx,[esp+0x14]
c00067a2:	8d 84 24 10 01 00 00 	lea    eax,[esp+0x110]
c00067a9:	e8 3d be ff ff       	call   c00025eb <mount_volume>
c00067ae:	85 c0                	test   eax,eax
c00067b0:	0f 85 b5 02 00 00    	jne    c0006a6b <f_rename+0x2e8>
c00067b6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00067ba:	83 ec 0c             	sub    esp,0xc
c00067bd:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c00067c1:	68 60 04 00 00       	push   0x460
c00067c6:	e8 f9 1d 00 00       	call   c00085c4 <ff_memalloc>
c00067cb:	83 c4 10             	add    esp,0x10
c00067ce:	89 c3                	mov    ebx,eax
c00067d0:	b8 11 00 00 00       	mov    eax,0x11
c00067d5:	85 db                	test   ebx,ebx
c00067d7:	0f 84 8e 02 00 00    	je     c0006a6b <f_rename+0x2e8>
c00067dd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00067e1:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c00067e7:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c00067ea:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00067ed:	8b 94 24 10 01 00 00 	mov    edx,DWORD PTR [esp+0x110]
c00067f4:	8d 44 24 58          	lea    eax,[esp+0x58]
c00067f8:	e8 64 e5 ff ff       	call   c0004d61 <follow_path>
c00067fd:	85 c0                	test   eax,eax
c00067ff:	0f 85 52 02 00 00    	jne    c0006a57 <f_rename+0x2d4>
c0006805:	b8 06 00 00 00       	mov    eax,0x6
c000680a:	f6 84 24 9f 00 00 00 a0 	test   BYTE PTR [esp+0x9f],0xa0
c0006812:	0f 85 3f 02 00 00    	jne    c0006a57 <f_rename+0x2d4>
c0006818:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000681c:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000681f:	0f 85 05 01 00 00    	jne    c000692a <f_rename+0x1a7>
c0006825:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0006828:	b9 40 00 00 00       	mov    ecx,0x40
c000682d:	8d 44 24 18          	lea    eax,[esp+0x18]
c0006831:	e8 a4 b3 ff ff       	call   c0001bda <mem_cpy>
c0006836:	b9 4c 00 00 00       	mov    ecx,0x4c
c000683b:	8d 54 24 58          	lea    edx,[esp+0x58]
c000683f:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006846:	e8 8f b3 ff ff       	call   c0001bda <mem_cpy>
c000684b:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c0006852:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006859:	e8 03 e5 ff ff       	call   c0004d61 <follow_path>
c000685e:	85 c0                	test   eax,eax
c0006860:	75 29                	jne    c000688b <f_rename+0x108>
c0006862:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0006866:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c000686d:	74 0a                	je     c0006879 <f_rename+0xf6>
c000686f:	b8 08 00 00 00       	mov    eax,0x8
c0006874:	e9 de 01 00 00       	jmp    c0006a57 <f_rename+0x2d4>
c0006879:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006880:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c0006887:	75 e6                	jne    c000686f <f_rename+0xec>
c0006889:	eb 09                	jmp    c0006894 <f_rename+0x111>
c000688b:	83 f8 04             	cmp    eax,0x4
c000688e:	0f 85 c3 01 00 00    	jne    c0006a57 <f_rename+0x2d4>
c0006894:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c000689b:	e8 42 d9 ff ff       	call   c00041e2 <dir_register>
c00068a0:	85 c0                	test   eax,eax
c00068a2:	0f 85 af 01 00 00    	jne    c0006a57 <f_rename+0x2d4>
c00068a8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068ac:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
c00068af:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c00068b2:	89 c5                	mov    ebp,eax
c00068b4:	8a 46 23             	mov    al,BYTE PTR [esi+0x23]
c00068b7:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00068bb:	8d 46 24             	lea    eax,[esi+0x24]
c00068be:	e8 98 b2 ff ff       	call   c0001b5b <ld_word>
c00068c3:	b9 40 00 00 00       	mov    ecx,0x40
c00068c8:	89 c7                	mov    edi,eax
c00068ca:	8d 54 24 18          	lea    edx,[esp+0x18]
c00068ce:	89 f0                	mov    eax,esi
c00068d0:	e8 05 b3 ff ff       	call   c0001bda <mem_cpy>
c00068d5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068d9:	89 e9                	mov    ecx,ebp
c00068db:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00068de:	88 48 01             	mov    BYTE PTR [eax+0x1],cl
c00068e1:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c00068e5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068e9:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00068ec:	88 4a 23             	mov    BYTE PTR [edx+0x23],cl
c00068ef:	0f b7 d7             	movzx  edx,di
c00068f2:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00068f5:	83 c0 24             	add    eax,0x24
c00068f8:	e8 d0 b2 ff ff       	call   c0001bcd <st_word>
c00068fd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006901:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0006904:	8a 42 04             	mov    al,BYTE PTR [edx+0x4]
c0006907:	a8 10                	test   al,0x10
c0006909:	75 06                	jne    c0006911 <f_rename+0x18e>
c000690b:	83 c8 20             	or     eax,0x20
c000690e:	88 42 04             	mov    BYTE PTR [edx+0x4],al
c0006911:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006918:	e8 9c d1 ff ff       	call   c0003ab9 <store_xdir>
c000691d:	85 c0                	test   eax,eax
c000691f:	0f 84 1c 01 00 00    	je     c0006a41 <f_rename+0x2be>
c0006925:	e9 2d 01 00 00       	jmp    c0006a57 <f_rename+0x2d4>
c000692a:	b9 20 00 00 00       	mov    ecx,0x20
c000692f:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c0006936:	8d 44 24 18          	lea    eax,[esp+0x18]
c000693a:	e8 9b b2 ff ff       	call   c0001bda <mem_cpy>
c000693f:	b9 4c 00 00 00       	mov    ecx,0x4c
c0006944:	8d 54 24 58          	lea    edx,[esp+0x58]
c0006948:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c000694f:	e8 86 b2 ff ff       	call   c0001bda <mem_cpy>
c0006954:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c000695b:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006962:	e8 fa e3 ff ff       	call   c0004d61 <follow_path>
c0006967:	85 c0                	test   eax,eax
c0006969:	75 27                	jne    c0006992 <f_rename+0x20f>
c000696b:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000696f:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c0006976:	0f 85 f3 fe ff ff    	jne    c000686f <f_rename+0xec>
c000697c:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006983:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c000698a:	0f 85 df fe ff ff    	jne    c000686f <f_rename+0xec>
c0006990:	eb 09                	jmp    c000699b <f_rename+0x218>
c0006992:	83 f8 04             	cmp    eax,0x4
c0006995:	0f 85 bc 00 00 00    	jne    c0006a57 <f_rename+0x2d4>
c000699b:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c00069a2:	e8 3b d8 ff ff       	call   c00041e2 <dir_register>
c00069a7:	85 c0                	test   eax,eax
c00069a9:	0f 85 a8 00 00 00    	jne    c0006a57 <f_rename+0x2d4>
c00069af:	8b b4 24 dc 00 00 00 	mov    esi,DWORD PTR [esp+0xdc]
c00069b6:	b9 13 00 00 00       	mov    ecx,0x13
c00069bb:	8d 46 0d             	lea    eax,[esi+0xd]
c00069be:	8d 54 24 25          	lea    edx,[esp+0x25]
c00069c2:	e8 13 b2 ff ff       	call   c0001bda <mem_cpy>
c00069c7:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c00069cb:	a8 10                	test   al,0x10
c00069cd:	75 03                	jne    c00069d2 <f_rename+0x24f>
c00069cf:	83 c8 20             	or     eax,0x20
c00069d2:	88 46 0b             	mov    BYTE PTR [esi+0xb],al
c00069d5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069d9:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00069dd:	f6 46 0b 10          	test   BYTE PTR [esi+0xb],0x10
c00069e1:	74 5e                	je     c0006a41 <f_rename+0x2be>
c00069e3:	8b 84 24 ac 00 00 00 	mov    eax,DWORD PTR [esp+0xac]
c00069ea:	39 44 24 60          	cmp    DWORD PTR [esp+0x60],eax
c00069ee:	74 51                	je     c0006a41 <f_rename+0x2be>
c00069f0:	89 f2                	mov    edx,esi
c00069f2:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00069f6:	8a 07                	mov    al,BYTE PTR [edi]
c00069f8:	e8 d9 e2 ff ff       	call   c0004cd6 <ld_clust.isra.0>
c00069fd:	89 c2                	mov    edx,eax
c00069ff:	89 f8                	mov    eax,edi
c0006a01:	e8 ee b3 ff ff       	call   c0001df4 <clst2sect>
c0006a06:	89 c6                	mov    esi,eax
c0006a08:	89 d1                	mov    ecx,edx
c0006a0a:	b8 02 00 00 00       	mov    eax,0x2
c0006a0f:	09 f2                	or     edx,esi
c0006a11:	74 44                	je     c0006a57 <f_rename+0x2d4>
c0006a13:	89 f2                	mov    edx,esi
c0006a15:	89 f8                	mov    eax,edi
c0006a17:	e8 1d b9 ff ff       	call   c0002339 <move_window>
c0006a1c:	85 c0                	test   eax,eax
c0006a1e:	75 37                	jne    c0006a57 <f_rename+0x2d4>
c0006a20:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006a24:	80 78 75 2e          	cmp    BYTE PTR [eax+0x75],0x2e
c0006a28:	75 17                	jne    c0006a41 <f_rename+0x2be>
c0006a2a:	8d 50 74             	lea    edx,[eax+0x74]
c0006a2d:	8b 8c 24 ac 00 00 00 	mov    ecx,DWORD PTR [esp+0xac]
c0006a34:	e8 c6 e2 ff ff       	call   c0004cff <st_clust.isra.1>
c0006a39:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006a3d:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006a41:	8d 44 24 58          	lea    eax,[esp+0x58]
c0006a45:	e8 f4 d0 ff ff       	call   c0003b3e <dir_remove>
c0006a4a:	85 c0                	test   eax,eax
c0006a4c:	75 09                	jne    c0006a57 <f_rename+0x2d4>
c0006a4e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006a52:	e8 0d da ff ff       	call   c0004464 <sync_fs>
c0006a57:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006a5b:	83 ec 0c             	sub    esp,0xc
c0006a5e:	53                   	push   ebx
c0006a5f:	e8 78 1b 00 00       	call   c00085dc <ff_memfree>
c0006a64:	83 c4 10             	add    esp,0x10
c0006a67:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006a6b:	81 c4 fc 00 00 00    	add    esp,0xfc
c0006a71:	5b                   	pop    ebx
c0006a72:	5e                   	pop    esi
c0006a73:	5f                   	pop    edi
c0006a74:	5d                   	pop    ebp
c0006a75:	c3                   	ret    

c0006a76 <f_chmod>:
c0006a76:	57                   	push   edi
c0006a77:	b9 02 00 00 00       	mov    ecx,0x2
c0006a7c:	56                   	push   esi
c0006a7d:	53                   	push   ebx
c0006a7e:	83 ec 60             	sub    esp,0x60
c0006a81:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0006a85:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0006a89:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006a8d:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006a91:	e8 55 bb ff ff       	call   c00025eb <mount_volume>
c0006a96:	85 c0                	test   eax,eax
c0006a98:	0f 85 af 00 00 00    	jne    c0006b4d <f_chmod+0xd7>
c0006a9e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006aa2:	83 ec 0c             	sub    esp,0xc
c0006aa5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006aa9:	68 60 04 00 00       	push   0x460
c0006aae:	e8 11 1b 00 00       	call   c00085c4 <ff_memalloc>
c0006ab3:	83 c4 10             	add    esp,0x10
c0006ab6:	89 c6                	mov    esi,eax
c0006ab8:	b8 11 00 00 00       	mov    eax,0x11
c0006abd:	85 f6                	test   esi,esi
c0006abf:	0f 84 88 00 00 00    	je     c0006b4d <f_chmod+0xd7>
c0006ac5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ac9:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006acf:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006ad2:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006ad5:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006ad9:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006add:	e8 7f e2 ff ff       	call   c0004d61 <follow_path>
c0006ae2:	85 c0                	test   eax,eax
c0006ae4:	75 53                	jne    c0006b39 <f_chmod+0xc3>
c0006ae6:	b8 06 00 00 00       	mov    eax,0x6
c0006aeb:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006af0:	75 47                	jne    c0006b39 <f_chmod+0xc3>
c0006af2:	89 f9                	mov    ecx,edi
c0006af4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006af8:	83 e1 27             	and    ecx,0x27
c0006afb:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006afe:	75 1d                	jne    c0006b1d <f_chmod+0xa7>
c0006b00:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006b03:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c0006b06:	21 cb                	and    ebx,ecx
c0006b08:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c0006b0b:	88 58 04             	mov    BYTE PTR [eax+0x4],bl
c0006b0e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006b12:	e8 a2 cf ff ff       	call   c0003ab9 <store_xdir>
c0006b17:	85 c0                	test   eax,eax
c0006b19:	75 1e                	jne    c0006b39 <f_chmod+0xc3>
c0006b1b:	eb 13                	jmp    c0006b30 <f_chmod+0xba>
c0006b1d:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0006b21:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006b24:	21 cb                	and    ebx,ecx
c0006b26:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006b29:	88 5a 0b             	mov    BYTE PTR [edx+0xb],bl
c0006b2c:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006b30:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b34:	e8 2b d9 ff ff       	call   c0004464 <sync_fs>
c0006b39:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006b3d:	83 ec 0c             	sub    esp,0xc
c0006b40:	56                   	push   esi
c0006b41:	e8 96 1a 00 00       	call   c00085dc <ff_memfree>
c0006b46:	83 c4 10             	add    esp,0x10
c0006b49:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006b4d:	83 c4 60             	add    esp,0x60
c0006b50:	5b                   	pop    ebx
c0006b51:	5e                   	pop    esi
c0006b52:	5f                   	pop    edi
c0006b53:	c3                   	ret    

c0006b54 <f_utime>:
c0006b54:	56                   	push   esi
c0006b55:	b9 02 00 00 00       	mov    ecx,0x2
c0006b5a:	53                   	push   ebx
c0006b5b:	83 ec 64             	sub    esp,0x64
c0006b5e:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c0006b62:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006b66:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006b6a:	e8 7c ba ff ff       	call   c00025eb <mount_volume>
c0006b6f:	85 c0                	test   eax,eax
c0006b71:	0f 85 b5 00 00 00    	jne    c0006c2c <f_utime+0xd8>
c0006b77:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b7b:	83 ec 0c             	sub    esp,0xc
c0006b7e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006b82:	68 60 04 00 00       	push   0x460
c0006b87:	e8 38 1a 00 00       	call   c00085c4 <ff_memalloc>
c0006b8c:	83 c4 10             	add    esp,0x10
c0006b8f:	89 c3                	mov    ebx,eax
c0006b91:	b8 11 00 00 00       	mov    eax,0x11
c0006b96:	85 db                	test   ebx,ebx
c0006b98:	0f 84 8e 00 00 00    	je     c0006c2c <f_utime+0xd8>
c0006b9e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ba2:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c0006ba8:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0006bab:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006bae:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006bb2:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006bb6:	e8 a6 e1 ff ff       	call   c0004d61 <follow_path>
c0006bbb:	85 c0                	test   eax,eax
c0006bbd:	75 59                	jne    c0006c18 <f_utime+0xc4>
c0006bbf:	b8 06 00 00 00       	mov    eax,0x6
c0006bc4:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006bc9:	75 4d                	jne    c0006c18 <f_utime+0xc4>
c0006bcb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006bcf:	0f b7 56 08          	movzx  edx,WORD PTR [esi+0x8]
c0006bd3:	0f b7 4e 0a          	movzx  ecx,WORD PTR [esi+0xa]
c0006bd7:	c1 e2 10             	shl    edx,0x10
c0006bda:	09 ca                	or     edx,ecx
c0006bdc:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006bdf:	75 1a                	jne    c0006bfb <f_utime+0xa7>
c0006be1:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006be4:	83 c0 0c             	add    eax,0xc
c0006be7:	e8 e5 af ff ff       	call   c0001bd1 <st_dword>
c0006bec:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006bf0:	e8 c4 ce ff ff       	call   c0003ab9 <store_xdir>
c0006bf5:	85 c0                	test   eax,eax
c0006bf7:	75 1f                	jne    c0006c18 <f_utime+0xc4>
c0006bf9:	eb 14                	jmp    c0006c0f <f_utime+0xbb>
c0006bfb:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006bff:	83 c0 16             	add    eax,0x16
c0006c02:	e8 ca af ff ff       	call   c0001bd1 <st_dword>
c0006c07:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c0b:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006c0f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c13:	e8 4c d8 ff ff       	call   c0004464 <sync_fs>
c0006c18:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006c1c:	83 ec 0c             	sub    esp,0xc
c0006c1f:	53                   	push   ebx
c0006c20:	e8 b7 19 00 00       	call   c00085dc <ff_memfree>
c0006c25:	83 c4 10             	add    esp,0x10
c0006c28:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006c2c:	83 c4 64             	add    esp,0x64
c0006c2f:	5b                   	pop    ebx
c0006c30:	5e                   	pop    esi
c0006c31:	c3                   	ret    

c0006c32 <f_getlabel>:
c0006c32:	55                   	push   ebp
c0006c33:	31 c9                	xor    ecx,ecx
c0006c35:	57                   	push   edi
c0006c36:	56                   	push   esi
c0006c37:	53                   	push   ebx
c0006c38:	83 ec 6c             	sub    esp,0x6c
c0006c3b:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006c3f:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006c46:	e8 a0 b9 ff ff       	call   c00025eb <mount_volume>
c0006c4b:	89 c6                	mov    esi,eax
c0006c4d:	85 c0                	test   eax,eax
c0006c4f:	0f 85 c1 01 00 00    	jne    c0006e16 <f_getlabel+0x1e4>
c0006c55:	83 bc 24 84 00 00 00 00 	cmp    DWORD PTR [esp+0x84],0x0
c0006c5d:	0f 84 5f 01 00 00    	je     c0006dc2 <f_getlabel+0x190>
c0006c63:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c67:	31 d2                	xor    edx,edx
c0006c69:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0006c6d:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0006c75:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006c79:	e8 39 c4 ff ff       	call   c00030b7 <dir_sdi>
c0006c7e:	85 c0                	test   eax,eax
c0006c80:	0f 85 2d 01 00 00    	jne    c0006db3 <f_getlabel+0x181>
c0006c86:	ba 01 00 00 00       	mov    edx,0x1
c0006c8b:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006c8f:	e8 33 cc ff ff       	call   c00038c7 <dir_read>
c0006c94:	85 c0                	test   eax,eax
c0006c96:	0f 85 17 01 00 00    	jne    c0006db3 <f_getlabel+0x181>
c0006c9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ca0:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006ca3:	74 09                	je     c0006cae <f_getlabel+0x7c>
c0006ca5:	31 db                	xor    ebx,ebx
c0006ca7:	31 c9                	xor    ecx,ecx
c0006ca9:	e9 c8 00 00 00       	jmp    c0006d76 <f_getlabel+0x144>
c0006cae:	31 ed                	xor    ebp,ebp
c0006cb0:	31 db                	xor    ebx,ebx
c0006cb2:	31 ff                	xor    edi,edi
c0006cb4:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006cb8:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0006cbc:	39 fa                	cmp    edx,edi
c0006cbe:	76 4b                	jbe    c0006d0b <f_getlabel+0xd9>
c0006cc0:	47                   	inc    edi
c0006cc1:	8d 14 3f             	lea    edx,[edi+edi*1]
c0006cc4:	01 d0                	add    eax,edx
c0006cc6:	e8 90 ae ff ff       	call   c0001b5b <ld_word>
c0006ccb:	66 85 ed             	test   bp,bp
c0006cce:	75 0d                	jne    c0006cdd <f_getlabel+0xab>
c0006cd0:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c0006cd6:	66 81 fa ff 07       	cmp    dx,0x7ff
c0006cdb:	76 28                	jbe    c0006d05 <f_getlabel+0xd3>
c0006cdd:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006ce4:	89 e9                	mov    ecx,ebp
c0006ce6:	01 da                	add    edx,ebx
c0006ce8:	c1 e1 10             	shl    ecx,0x10
c0006ceb:	0f b7 c0             	movzx  eax,ax
c0006cee:	09 c8                	or     eax,ecx
c0006cf0:	b9 04 00 00 00       	mov    ecx,0x4
c0006cf5:	e8 01 b0 ff ff       	call   c0001cfb <put_utf>
c0006cfa:	84 c0                	test   al,al
c0006cfc:	74 0b                	je     c0006d09 <f_getlabel+0xd7>
c0006cfe:	0f b6 c0             	movzx  eax,al
c0006d01:	01 c3                	add    ebx,eax
c0006d03:	31 c0                	xor    eax,eax
c0006d05:	89 c5                	mov    ebp,eax
c0006d07:	eb ab                	jmp    c0006cb4 <f_getlabel+0x82>
c0006d09:	31 db                	xor    ebx,ebx
c0006d0b:	66 85 ed             	test   bp,bp
c0006d0e:	74 02                	je     c0006d12 <f_getlabel+0xe0>
c0006d10:	31 db                	xor    ebx,ebx
c0006d12:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006d19:	c6 04 18 00          	mov    BYTE PTR [eax+ebx*1],0x0
c0006d1d:	e9 a0 00 00 00       	jmp    c0006dc2 <f_getlabel+0x190>
c0006d22:	83 ff 0b             	cmp    edi,0xb
c0006d25:	74 11                	je     c0006d38 <f_getlabel+0x106>
c0006d27:	0f b6 54 3d 00       	movzx  edx,BYTE PTR [ebp+edi*1+0x0]
c0006d2c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006d30:	8d 79 02             	lea    edi,[ecx+0x2]
c0006d33:	c1 e0 08             	shl    eax,0x8
c0006d36:	09 c2                	or     edx,eax
c0006d38:	0f b7 d2             	movzx  edx,dx
c0006d3b:	50                   	push   eax
c0006d3c:	50                   	push   eax
c0006d3d:	68 b5 01 00 00       	push   0x1b5
c0006d42:	52                   	push   edx
c0006d43:	e8 44 19 00 00       	call   c000868c <ff_oem2uni>
c0006d48:	83 c4 10             	add    esp,0x10
c0006d4b:	66 85 c0             	test   ax,ax
c0006d4e:	74 46                	je     c0006d96 <f_getlabel+0x164>
c0006d50:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006d57:	0f b7 c0             	movzx  eax,ax
c0006d5a:	01 da                	add    edx,ebx
c0006d5c:	b9 04 00 00 00       	mov    ecx,0x4
c0006d61:	e8 95 af ff ff       	call   c0001cfb <put_utf>
c0006d66:	84 c0                	test   al,al
c0006d68:	74 2c                	je     c0006d96 <f_getlabel+0x164>
c0006d6a:	0f b6 c0             	movzx  eax,al
c0006d6d:	01 c3                	add    ebx,eax
c0006d6f:	83 ff 0b             	cmp    edi,0xb
c0006d72:	74 24                	je     c0006d98 <f_getlabel+0x166>
c0006d74:	89 f9                	mov    ecx,edi
c0006d76:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c0006d7a:	8d 79 01             	lea    edi,[ecx+0x1]
c0006d7d:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0006d82:	0f b6 54 0d 00       	movzx  edx,BYTE PTR [ebp+ecx*1+0x0]
c0006d87:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006d8b:	e8 9f ae ff ff       	call   c0001c2f <dbc_1st>
c0006d90:	85 c0                	test   eax,eax
c0006d92:	74 a4                	je     c0006d38 <f_getlabel+0x106>
c0006d94:	eb 8c                	jmp    c0006d22 <f_getlabel+0xf0>
c0006d96:	31 db                	xor    ebx,ebx
c0006d98:	03 9c 24 84 00 00 00 	add    ebx,DWORD PTR [esp+0x84]
c0006d9f:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0006da2:	39 9c 24 84 00 00 00 	cmp    DWORD PTR [esp+0x84],ebx
c0006da9:	74 17                	je     c0006dc2 <f_getlabel+0x190>
c0006dab:	4b                   	dec    ebx
c0006dac:	80 3b 20             	cmp    BYTE PTR [ebx],0x20
c0006daf:	74 ee                	je     c0006d9f <f_getlabel+0x16d>
c0006db1:	eb 0f                	jmp    c0006dc2 <f_getlabel+0x190>
c0006db3:	83 f8 04             	cmp    eax,0x4
c0006db6:	75 5c                	jne    c0006e14 <f_getlabel+0x1e2>
c0006db8:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006dbf:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0006dc2:	83 bc 24 88 00 00 00 00 	cmp    DWORD PTR [esp+0x88],0x0
c0006dca:	74 4a                	je     c0006e16 <f_getlabel+0x1e4>
c0006dcc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006dd0:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c0006dd3:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c0006dd6:	e8 5e b5 ff ff       	call   c0002339 <move_window>
c0006ddb:	89 c6                	mov    esi,eax
c0006ddd:	85 c0                	test   eax,eax
c0006ddf:	75 35                	jne    c0006e16 <f_getlabel+0x1e4>
c0006de1:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0006de5:	b8 43 00 00 00       	mov    eax,0x43
c0006dea:	8a 0a                	mov    cl,BYTE PTR [edx]
c0006dec:	80 f9 03             	cmp    cl,0x3
c0006def:	74 0f                	je     c0006e00 <f_getlabel+0x1ce>
c0006df1:	31 c0                	xor    eax,eax
c0006df3:	80 f9 04             	cmp    cl,0x4
c0006df6:	0f 94 c0             	sete   al
c0006df9:	48                   	dec    eax
c0006dfa:	83 e0 c3             	and    eax,0xffffffc3
c0006dfd:	83 c0 64             	add    eax,0x64
c0006e00:	8d 44 02 54          	lea    eax,[edx+eax*1+0x54]
c0006e04:	e8 5f ad ff ff       	call   c0001b68 <ld_dword>
c0006e09:	8b bc 24 88 00 00 00 	mov    edi,DWORD PTR [esp+0x88]
c0006e10:	89 07                	mov    DWORD PTR [edi],eax
c0006e12:	eb 02                	jmp    c0006e16 <f_getlabel+0x1e4>
c0006e14:	89 c6                	mov    esi,eax
c0006e16:	83 c4 6c             	add    esp,0x6c
c0006e19:	89 f0                	mov    eax,esi
c0006e1b:	5b                   	pop    ebx
c0006e1c:	5e                   	pop    esi
c0006e1d:	5f                   	pop    edi
c0006e1e:	5d                   	pop    ebp
c0006e1f:	c3                   	ret    

c0006e20 <f_setlabel>:
c0006e20:	56                   	push   esi
c0006e21:	b9 02 00 00 00       	mov    ecx,0x2
c0006e26:	53                   	push   ebx
c0006e27:	83 ec 74             	sub    esp,0x74
c0006e2a:	8d 54 24 08          	lea    edx,[esp+0x8]
c0006e2e:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006e35:	e8 b1 b7 ff ff       	call   c00025eb <mount_volume>
c0006e3a:	89 c6                	mov    esi,eax
c0006e3c:	85 c0                	test   eax,eax
c0006e3e:	0f 85 41 02 00 00    	jne    c0007085 <f_setlabel+0x265>
c0006e44:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006e48:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006e4b:	0f 85 8e 00 00 00    	jne    c0006edf <f_setlabel+0xbf>
c0006e51:	b9 16 00 00 00       	mov    ecx,0x16
c0006e56:	31 d2                	xor    edx,edx
c0006e58:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006e5c:	31 db                	xor    ebx,ebx
c0006e5e:	e8 8c ad ff ff       	call   c0001bef <mem_set>
c0006e63:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006e6a:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006e6d:	0f 86 0a 01 00 00    	jbe    c0006f7d <f_setlabel+0x15d>
c0006e73:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006e7a:	e8 b6 ad ff ff       	call   c0001c35 <tchar2uni>
c0006e7f:	89 c6                	mov    esi,eax
c0006e81:	3d ff ff 00 00       	cmp    eax,0xffff
c0006e86:	76 2a                	jbe    c0006eb2 <f_setlabel+0x92>
c0006e88:	83 f8 ff             	cmp    eax,0xffffffff
c0006e8b:	74 05                	je     c0006e92 <f_setlabel+0x72>
c0006e8d:	83 fb 09             	cmp    ebx,0x9
c0006e90:	76 0a                	jbe    c0006e9c <f_setlabel+0x7c>
c0006e92:	be 06 00 00 00       	mov    esi,0x6
c0006e97:	e9 e9 01 00 00       	jmp    c0007085 <f_setlabel+0x265>
c0006e9c:	89 c2                	mov    edx,eax
c0006e9e:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006ea2:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006ea5:	c1 ea 10             	shr    edx,0x10
c0006ea8:	01 c8                	add    eax,ecx
c0006eaa:	43                   	inc    ebx
c0006eab:	e8 1d ad ff ff       	call   c0001bcd <st_word>
c0006eb0:	eb 04                	jmp    c0006eb6 <f_setlabel+0x96>
c0006eb2:	85 c0                	test   eax,eax
c0006eb4:	74 dc                	je     c0006e92 <f_setlabel+0x72>
c0006eb6:	89 f2                	mov    edx,esi
c0006eb8:	b8 b7 1f 02 c0       	mov    eax,0xc0021fb7
c0006ebd:	e8 5b ad ff ff       	call   c0001c1d <chk_chr>
c0006ec2:	85 c0                	test   eax,eax
c0006ec4:	75 cc                	jne    c0006e92 <f_setlabel+0x72>
c0006ec6:	83 fb 0a             	cmp    ebx,0xa
c0006ec9:	77 c7                	ja     c0006e92 <f_setlabel+0x72>
c0006ecb:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006ece:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006ed2:	0f b7 d6             	movzx  edx,si
c0006ed5:	01 c8                	add    eax,ecx
c0006ed7:	43                   	inc    ebx
c0006ed8:	e8 f0 ac ff ff       	call   c0001bcd <st_word>
c0006edd:	eb 84                	jmp    c0006e63 <f_setlabel+0x43>
c0006edf:	b9 0b 00 00 00       	mov    ecx,0xb
c0006ee4:	ba 20 00 00 00       	mov    edx,0x20
c0006ee9:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006eed:	31 db                	xor    ebx,ebx
c0006eef:	e8 fb ac ff ff       	call   c0001bef <mem_set>
c0006ef4:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006efb:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006efe:	76 60                	jbe    c0006f60 <f_setlabel+0x140>
c0006f00:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006f07:	e8 29 ad ff ff       	call   c0001c35 <tchar2uni>
c0006f0c:	3d ff ff 00 00       	cmp    eax,0xffff
c0006f11:	0f 87 7b ff ff ff    	ja     c0006e92 <f_setlabel+0x72>
c0006f17:	83 ec 0c             	sub    esp,0xc
c0006f1a:	50                   	push   eax
c0006f1b:	e8 e0 17 00 00       	call   c0008700 <ff_wtoupper>
c0006f20:	5a                   	pop    edx
c0006f21:	59                   	pop    ecx
c0006f22:	68 b5 01 00 00       	push   0x1b5
c0006f27:	50                   	push   eax
c0006f28:	e8 c7 16 00 00       	call   c00085f4 <ff_uni2oem>
c0006f2d:	83 c4 10             	add    esp,0x10
c0006f30:	89 c6                	mov    esi,eax
c0006f32:	66 85 c0             	test   ax,ax
c0006f35:	0f 84 57 ff ff ff    	je     c0006e92 <f_setlabel+0x72>
c0006f3b:	0f b7 d0             	movzx  edx,ax
c0006f3e:	b8 b0 1f 02 c0       	mov    eax,0xc0021fb0
c0006f43:	e8 d5 ac ff ff       	call   c0001c1d <chk_chr>
c0006f48:	85 c0                	test   eax,eax
c0006f4a:	0f 85 42 ff ff ff    	jne    c0006e92 <f_setlabel+0x72>
c0006f50:	66 81 fe ff 00       	cmp    si,0xff
c0006f55:	0f 87 14 01 00 00    	ja     c000706f <f_setlabel+0x24f>
c0006f5b:	e9 fa 00 00 00       	jmp    c000705a <f_setlabel+0x23a>
c0006f60:	80 7c 24 0e e5       	cmp    BYTE PTR [esp+0xe],0xe5
c0006f65:	0f 84 27 ff ff ff    	je     c0006e92 <f_setlabel+0x72>
c0006f6b:	85 db                	test   ebx,ebx
c0006f6d:	74 0e                	je     c0006f7d <f_setlabel+0x15d>
c0006f6f:	8d 43 ff             	lea    eax,[ebx-0x1]
c0006f72:	80 7c 1c 0d 20       	cmp    BYTE PTR [esp+ebx*1+0xd],0x20
c0006f77:	75 04                	jne    c0006f7d <f_setlabel+0x15d>
c0006f79:	89 c3                	mov    ebx,eax
c0006f7b:	eb ee                	jmp    c0006f6b <f_setlabel+0x14b>
c0006f7d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006f81:	31 d2                	xor    edx,edx
c0006f83:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0006f87:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0006f8f:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006f93:	e8 1f c1 ff ff       	call   c00030b7 <dir_sdi>
c0006f98:	89 c6                	mov    esi,eax
c0006f9a:	85 c0                	test   eax,eax
c0006f9c:	0f 85 e3 00 00 00    	jne    c0007085 <f_setlabel+0x265>
c0006fa2:	ba 01 00 00 00       	mov    edx,0x1
c0006fa7:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006fab:	e8 17 c9 ff ff       	call   c00038c7 <dir_read>
c0006fb0:	85 c0                	test   eax,eax
c0006fb2:	75 21                	jne    c0006fd5 <f_setlabel+0x1b5>
c0006fb4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0006fb8:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006fbc:	80 3a 04             	cmp    BYTE PTR [edx],0x4
c0006fbf:	74 5d                	je     c000701e <f_setlabel+0x1fe>
c0006fc1:	85 db                	test   ebx,ebx
c0006fc3:	74 0b                	je     c0006fd0 <f_setlabel+0x1b0>
c0006fc5:	b9 0b 00 00 00       	mov    ecx,0xb
c0006fca:	8d 54 24 0e          	lea    edx,[esp+0xe]
c0006fce:	eb 70                	jmp    c0007040 <f_setlabel+0x220>
c0006fd0:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c0006fd3:	eb 70                	jmp    c0007045 <f_setlabel+0x225>
c0006fd5:	83 f8 04             	cmp    eax,0x4
c0006fd8:	75 7c                	jne    c0007056 <f_setlabel+0x236>
c0006fda:	85 db                	test   ebx,ebx
c0006fdc:	0f 84 a3 00 00 00    	je     c0007085 <f_setlabel+0x265>
c0006fe2:	ba 01 00 00 00       	mov    edx,0x1
c0006fe7:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006feb:	e8 51 ca ff ff       	call   c0003a41 <dir_alloc>
c0006ff0:	89 c6                	mov    esi,eax
c0006ff2:	85 c0                	test   eax,eax
c0006ff4:	0f 85 8b 00 00 00    	jne    c0007085 <f_setlabel+0x265>
c0006ffa:	31 d2                	xor    edx,edx
c0006ffc:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007000:	b9 20 00 00 00       	mov    ecx,0x20
c0007005:	e8 e5 ab ff ff       	call   c0001bef <mem_set>
c000700a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000700e:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0007011:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007015:	75 18                	jne    c000702f <f_setlabel+0x20f>
c0007017:	c6 00 83             	mov    BYTE PTR [eax],0x83
c000701a:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000701e:	88 58 01             	mov    BYTE PTR [eax+0x1],bl
c0007021:	b9 16 00 00 00       	mov    ecx,0x16
c0007026:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000702a:	83 c0 02             	add    eax,0x2
c000702d:	eb 9b                	jmp    c0006fca <f_setlabel+0x1aa>
c000702f:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c0007033:	b9 0b 00 00 00       	mov    ecx,0xb
c0007038:	8d 54 24 0e          	lea    edx,[esp+0xe]
c000703c:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007040:	e8 95 ab ff ff       	call   c0001bda <mem_cpy>
c0007045:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007049:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c000704d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007051:	e8 0e d4 ff ff       	call   c0004464 <sync_fs>
c0007056:	89 c6                	mov    esi,eax
c0007058:	eb 2b                	jmp    c0007085 <f_setlabel+0x265>
c000705a:	83 fb 0a             	cmp    ebx,0xa
c000705d:	0f 87 2f fe ff ff    	ja     c0006e92 <f_setlabel+0x72>
c0007063:	89 f0                	mov    eax,esi
c0007065:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c0007069:	43                   	inc    ebx
c000706a:	e9 85 fe ff ff       	jmp    c0006ef4 <f_setlabel+0xd4>
c000706f:	83 fb 09             	cmp    ebx,0x9
c0007072:	0f 87 1a fe ff ff    	ja     c0006e92 <f_setlabel+0x72>
c0007078:	89 f0                	mov    eax,esi
c000707a:	66 c1 e8 08          	shr    ax,0x8
c000707e:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c0007082:	43                   	inc    ebx
c0007083:	eb de                	jmp    c0007063 <f_setlabel+0x243>
c0007085:	89 f0                	mov    eax,esi
c0007087:	83 c4 74             	add    esp,0x74
c000708a:	5b                   	pop    ebx
c000708b:	5e                   	pop    esi
c000708c:	c3                   	ret    

c000708d <f_expand>:
c000708d:	55                   	push   ebp
c000708e:	57                   	push   edi
c000708f:	56                   	push   esi
c0007090:	53                   	push   ebx
c0007091:	83 ec 3c             	sub    esp,0x3c
c0007094:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0007098:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c000709c:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c00070a0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00070a4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00070a8:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00070ac:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c00070b0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00070b4:	89 d8                	mov    eax,ebx
c00070b6:	e8 a3 b1 ff ff       	call   c000225e <validate>
c00070bb:	89 c5                	mov    ebp,eax
c00070bd:	85 c0                	test   eax,eax
c00070bf:	0f 85 f4 01 00 00    	jne    c00072b9 <f_expand+0x22c>
c00070c5:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c00070c9:	85 ed                	test   ebp,ebp
c00070cb:	0f 85 e8 01 00 00    	jne    c00072b9 <f_expand+0x22c>
c00070d1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00070d5:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c00070d9:	75 0a                	jne    c00070e5 <f_expand+0x58>
c00070db:	bd 07 00 00 00       	mov    ebp,0x7
c00070e0:	e9 d4 01 00 00       	jmp    c00072b9 <f_expand+0x22c>
c00070e5:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00070e8:	0b 43 0c             	or     eax,DWORD PTR [ebx+0xc]
c00070eb:	75 ee                	jne    c00070db <f_expand+0x4e>
c00070ed:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c00070f1:	74 e8                	je     c00070db <f_expand+0x4e>
c00070f3:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c00070f7:	8a 0e                	mov    cl,BYTE PTR [esi]
c00070f9:	80 f9 04             	cmp    cl,0x4
c00070fc:	74 07                	je     c0007105 <f_expand+0x78>
c00070fe:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0007103:	77 d6                	ja     c00070db <f_expand+0x4e>
c0007105:	88 4c 24 04          	mov    BYTE PTR [esp+0x4],cl
c0007109:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c000710d:	c1 e0 09             	shl    eax,0x9
c0007110:	8d 50 ff             	lea    edx,[eax-0x1]
c0007113:	85 54 24 08          	test   DWORD PTR [esp+0x8],edx
c0007117:	0f 95 c2             	setne  dl
c000711a:	0f b6 d2             	movzx  edx,dl
c000711d:	89 d7                	mov    edi,edx
c000711f:	31 d2                	xor    edx,edx
c0007121:	52                   	push   edx
c0007122:	50                   	push   eax
c0007123:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007127:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000712b:	e8 54 9e 01 00       	call   c0020f84 <__udivdi3>
c0007130:	83 c4 10             	add    esp,0x10
c0007133:	01 f8                	add    eax,edi
c0007135:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0007139:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c000713c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0007140:	83 ff 01             	cmp    edi,0x1
c0007143:	76 05                	jbe    c000714a <f_expand+0xbd>
c0007145:	39 7e 1c             	cmp    DWORD PTR [esi+0x1c],edi
c0007148:	77 05                	ja     c000714f <f_expand+0xc2>
c000714a:	bf 02 00 00 00       	mov    edi,0x2
c000714f:	80 f9 04             	cmp    cl,0x4
c0007152:	75 19                	jne    c000716d <f_expand+0xe0>
c0007154:	89 f0                	mov    eax,esi
c0007156:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000715a:	89 fa                	mov    edx,edi
c000715c:	e8 f3 b9 ff ff       	call   c0002b54 <find_bitmap>
c0007161:	89 c6                	mov    esi,eax
c0007163:	85 c0                	test   eax,eax
c0007165:	0f 84 70 ff ff ff    	je     c00070db <f_expand+0x4e>
c000716b:	eb 7f                	jmp    c00071ec <f_expand+0x15f>
c000716d:	89 fe                	mov    esi,edi
c000716f:	89 f9                	mov    ecx,edi
c0007171:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0007179:	89 ca                	mov    edx,ecx
c000717b:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c000717f:	89 d8                	mov    eax,ebx
c0007181:	e8 3b bd ff ff       	call   c0002ec1 <get_fat>
c0007186:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000718a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000718e:	41                   	inc    ecx
c000718f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0007193:	39 48 1c             	cmp    DWORD PTR [eax+0x1c],ecx
c0007196:	77 05                	ja     c000719d <f_expand+0x110>
c0007198:	b9 02 00 00 00       	mov    ecx,0x2
c000719d:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c00071a2:	74 3e                	je     c00071e2 <f_expand+0x155>
c00071a4:	83 7c 24 04 ff       	cmp    DWORD PTR [esp+0x4],0xffffffff
c00071a9:	75 0a                	jne    c00071b5 <f_expand+0x128>
c00071ab:	bd 01 00 00 00       	mov    ebp,0x1
c00071b0:	e9 04 01 00 00       	jmp    c00072b9 <f_expand+0x22c>
c00071b5:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c00071ba:	75 13                	jne    c00071cf <f_expand+0x142>
c00071bc:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c00071c0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00071c4:	39 54 24 10          	cmp    DWORD PTR [esp+0x10],edx
c00071c8:	75 0f                	jne    c00071d9 <f_expand+0x14c>
c00071ca:	e9 ce 00 00 00       	jmp    c000729d <f_expand+0x210>
c00071cf:	89 ce                	mov    esi,ecx
c00071d1:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00071d9:	39 f9                	cmp    ecx,edi
c00071db:	75 9c                	jne    c0007179 <f_expand+0xec>
c00071dd:	e9 f9 fe ff ff       	jmp    c00070db <f_expand+0x4e>
c00071e2:	bd 02 00 00 00       	mov    ebp,0x2
c00071e7:	e9 cd 00 00 00       	jmp    c00072b9 <f_expand+0x22c>
c00071ec:	83 f8 ff             	cmp    eax,0xffffffff
c00071ef:	74 ba                	je     c00071ab <f_expand+0x11e>
c00071f1:	8d 7e ff             	lea    edi,[esi-0x1]
c00071f4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00071f8:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c00071fc:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0007201:	74 51                	je     c0007254 <f_expand+0x1c7>
c0007203:	83 ec 0c             	sub    esp,0xc
c0007206:	89 f2                	mov    edx,esi
c0007208:	6a 01                	push   0x1
c000720a:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000720e:	e8 f4 b9 ff ff       	call   c0002c07 <change_bitmap>
c0007213:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0007217:	8d 54 3e ff          	lea    edx,[esi+edi*1-0x1]
c000721b:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000721f:	83 c4 10             	add    esp,0x10
c0007222:	85 c0                	test   eax,eax
c0007224:	74 2e                	je     c0007254 <f_expand+0x1c7>
c0007226:	eb 71                	jmp    c0007299 <f_expand+0x20c>
c0007228:	83 c9 ff             	or     ecx,0xffffffff
c000722b:	83 7c 24 14 01       	cmp    DWORD PTR [esp+0x14],0x1
c0007230:	74 03                	je     c0007235 <f_expand+0x1a8>
c0007232:	8d 4f 01             	lea    ecx,[edi+0x1]
c0007235:	89 fa                	mov    edx,edi
c0007237:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000723b:	e8 7c ba ff ff       	call   c0002cbc <put_fat>
c0007240:	85 c0                	test   eax,eax
c0007242:	75 55                	jne    c0007299 <f_expand+0x20c>
c0007244:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0007248:	ff 4c 24 14          	dec    DWORD PTR [esp+0x14]
c000724c:	47                   	inc    edi
c000724d:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0007252:	75 d4                	jne    c0007228 <f_expand+0x19b>
c0007254:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0007258:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000725c:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0007261:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0007264:	74 53                	je     c00072b9 <f_expand+0x22c>
c0007266:	89 73 08             	mov    DWORD PTR [ebx+0x8],esi
c0007269:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c000726d:	c6 43 07 02          	mov    BYTE PTR [ebx+0x7],0x2
c0007271:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0007275:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0007279:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c000727c:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c000727f:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0007282:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c0007285:	8d 4b fe             	lea    ecx,[ebx-0x2]
c0007288:	39 ca                	cmp    edx,ecx
c000728a:	77 2d                	ja     c00072b9 <f_expand+0x22c>
c000728c:	2b 54 24 10          	sub    edx,DWORD PTR [esp+0x10]
c0007290:	80 48 04 01          	or     BYTE PTR [eax+0x4],0x1
c0007294:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0007297:	eb 20                	jmp    c00072b9 <f_expand+0x22c>
c0007299:	89 c5                	mov    ebp,eax
c000729b:	eb 1c                	jmp    c00072b9 <f_expand+0x22c>
c000729d:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c00072a2:	74 0c                	je     c00072b0 <f_expand+0x223>
c00072a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00072a8:	89 f7                	mov    edi,esi
c00072aa:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00072ae:	eb 9d                	jmp    c000724d <f_expand+0x1c0>
c00072b0:	8d 46 ff             	lea    eax,[esi-0x1]
c00072b3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00072b7:	eb 9b                	jmp    c0007254 <f_expand+0x1c7>
c00072b9:	83 c4 3c             	add    esp,0x3c
c00072bc:	89 e8                	mov    eax,ebp
c00072be:	5b                   	pop    ebx
c00072bf:	5e                   	pop    esi
c00072c0:	5f                   	pop    edi
c00072c1:	5d                   	pop    ebp
c00072c2:	c3                   	ret    

c00072c3 <f_forward>:
c00072c3:	55                   	push   ebp
c00072c4:	57                   	push   edi
c00072c5:	56                   	push   esi
c00072c6:	53                   	push   ebx
c00072c7:	83 ec 2c             	sub    esp,0x2c
c00072ca:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00072ce:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00072d2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00072d8:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00072dc:	89 d8                	mov    eax,ebx
c00072de:	e8 7b af ff ff       	call   c000225e <validate>
c00072e3:	89 c5                	mov    ebp,eax
c00072e5:	85 c0                	test   eax,eax
c00072e7:	0f 85 aa 01 00 00    	jne    c0007497 <f_forward+0x1d4>
c00072ed:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c00072f1:	85 ed                	test   ebp,ebp
c00072f3:	0f 85 9e 01 00 00    	jne    c0007497 <f_forward+0x1d4>
c00072f9:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c00072fd:	0f 84 8f 01 00 00    	je     c0007492 <f_forward+0x1cf>
c0007303:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0007306:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0007309:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c000730c:	bf 00 00 00 00       	mov    edi,0x0
c0007311:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c0007314:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c0007318:	89 d1                	mov    ecx,edx
c000731a:	19 f9                	sbb    ecx,edi
c000731c:	0f 83 cf 00 00 00    	jae    c00073f1 <f_forward+0x12e>
c0007322:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0007326:	e9 c6 00 00 00       	jmp    c00073f1 <f_forward+0x12e>
c000732b:	50                   	push   eax
c000732c:	50                   	push   eax
c000732d:	6a 00                	push   0x0
c000732f:	6a 00                	push   0x0
c0007331:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c0007335:	83 c4 10             	add    esp,0x10
c0007338:	85 c0                	test   eax,eax
c000733a:	0f 84 57 01 00 00    	je     c0007497 <f_forward+0x1d4>
c0007340:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0007343:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0007347:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000734a:	0f b7 71 0a          	movzx  esi,WORD PTR [ecx+0xa]
c000734e:	89 d7                	mov    edi,edx
c0007350:	8d 4e ff             	lea    ecx,[esi-0x1]
c0007353:	89 c6                	mov    esi,eax
c0007355:	0f ac fe 09          	shrd   esi,edi,0x9
c0007359:	21 ce                	and    esi,ecx
c000735b:	89 c1                	mov    ecx,eax
c000735d:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c0007363:	0f 84 98 00 00 00    	je     c0007401 <f_forward+0x13e>
c0007369:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000736d:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0007370:	89 c8                	mov    eax,ecx
c0007372:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0007376:	e8 79 aa ff ff       	call   c0001df4 <clst2sect>
c000737b:	89 d7                	mov    edi,edx
c000737d:	09 c7                	or     edi,eax
c000737f:	0f 84 9e 00 00 00    	je     c0007423 <f_forward+0x160>
c0007385:	31 ff                	xor    edi,edi
c0007387:	8d 4b 50             	lea    ecx,[ebx+0x50]
c000738a:	01 c6                	add    esi,eax
c000738c:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0007390:	11 d7                	adc    edi,edx
c0007392:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0007395:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0007398:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000739c:	39 fa                	cmp    edx,edi
c000739e:	0f 85 a2 00 00 00    	jne    c0007446 <f_forward+0x183>
c00073a4:	39 f0                	cmp    eax,esi
c00073a6:	0f 85 9a 00 00 00    	jne    c0007446 <f_forward+0x183>
c00073ac:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00073af:	ba 00 02 00 00       	mov    edx,0x200
c00073b4:	25 ff 01 00 00       	and    eax,0x1ff
c00073b9:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c00073bd:	29 c2                	sub    edx,eax
c00073bf:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c00073c2:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c00073c5:	39 d1                	cmp    ecx,edx
c00073c7:	76 02                	jbe    c00073cb <f_forward+0x108>
c00073c9:	89 d1                	mov    ecx,edx
c00073cb:	8d 73 50             	lea    esi,[ebx+0x50]
c00073ce:	52                   	push   edx
c00073cf:	01 c6                	add    esi,eax
c00073d1:	52                   	push   edx
c00073d2:	51                   	push   ecx
c00073d3:	56                   	push   esi
c00073d4:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c00073d8:	83 c4 10             	add    esp,0x10
c00073db:	85 c0                	test   eax,eax
c00073dd:	74 44                	je     c0007423 <f_forward+0x160>
c00073df:	31 ff                	xor    edi,edi
c00073e1:	01 43 2c             	add    DWORD PTR [ebx+0x2c],eax
c00073e4:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c00073e7:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c00073eb:	29 44 24 48          	sub    DWORD PTR [esp+0x48],eax
c00073ef:	01 07                	add    DWORD PTR [edi],eax
c00073f1:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00073f6:	0f 85 2f ff ff ff    	jne    c000732b <f_forward+0x68>
c00073fc:	e9 96 00 00 00       	jmp    c0007497 <f_forward+0x1d4>
c0007401:	85 f6                	test   esi,esi
c0007403:	0f 85 60 ff ff ff    	jne    c0007369 <f_forward+0xa6>
c0007409:	89 d7                	mov    edi,edx
c000740b:	09 c7                	or     edi,eax
c000740d:	75 05                	jne    c0007414 <f_forward+0x151>
c000740f:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0007412:	eb 0a                	jmp    c000741e <f_forward+0x15b>
c0007414:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0007417:	89 d8                	mov    eax,ebx
c0007419:	e8 a3 ba ff ff       	call   c0002ec1 <get_fat>
c000741e:	83 f8 01             	cmp    eax,0x1
c0007421:	77 0b                	ja     c000742e <f_forward+0x16b>
c0007423:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0007427:	bd 02 00 00 00       	mov    ebp,0x2
c000742c:	eb 69                	jmp    c0007497 <f_forward+0x1d4>
c000742e:	83 f8 ff             	cmp    eax,0xffffffff
c0007431:	75 0b                	jne    c000743e <f_forward+0x17b>
c0007433:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0007437:	bd 01 00 00 00       	mov    ebp,0x1
c000743c:	eb 59                	jmp    c0007497 <f_forward+0x1d4>
c000743e:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0007441:	e9 23 ff ff ff       	jmp    c0007369 <f_forward+0xa6>
c0007446:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c000744a:	79 20                	jns    c000746c <f_forward+0x1a9>
c000744c:	83 ec 0c             	sub    esp,0xc
c000744f:	6a 01                	push   0x1
c0007451:	52                   	push   edx
c0007452:	50                   	push   eax
c0007453:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007457:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c000745b:	50                   	push   eax
c000745c:	e8 c5 a6 ff ff       	call   c0001b26 <disk_write>
c0007461:	83 c4 20             	add    esp,0x20
c0007464:	85 c0                	test   eax,eax
c0007466:	75 cb                	jne    c0007433 <f_forward+0x170>
c0007468:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c000746c:	83 ec 0c             	sub    esp,0xc
c000746f:	6a 01                	push   0x1
c0007471:	57                   	push   edi
c0007472:	56                   	push   esi
c0007473:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007477:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000747b:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000747f:	50                   	push   eax
c0007480:	e8 8b a6 ff ff       	call   c0001b10 <disk_read>
c0007485:	83 c4 20             	add    esp,0x20
c0007488:	85 c0                	test   eax,eax
c000748a:	0f 84 1c ff ff ff    	je     c00073ac <f_forward+0xe9>
c0007490:	eb a1                	jmp    c0007433 <f_forward+0x170>
c0007492:	bd 07 00 00 00       	mov    ebp,0x7
c0007497:	83 c4 2c             	add    esp,0x2c
c000749a:	89 e8                	mov    eax,ebp
c000749c:	5b                   	pop    ebx
c000749d:	5e                   	pop    esi
c000749e:	5f                   	pop    edi
c000749f:	5d                   	pop    ebp
c00074a0:	c3                   	ret    

c00074a1 <f_mkfs>:
c00074a1:	55                   	push   ebp
c00074a2:	57                   	push   edi
c00074a3:	56                   	push   esi
c00074a4:	53                   	push   ebx
c00074a5:	bb 0b 00 00 00       	mov    ebx,0xb
c00074aa:	81 ec 9c 00 00 00    	sub    esp,0x9c
c00074b0:	8b b4 24 b4 00 00 00 	mov    esi,DWORD PTR [esp+0xb4]
c00074b7:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c00074be:	e8 7a ac ff ff       	call   c000213d <get_ldnumber>
c00074c3:	85 c0                	test   eax,eax
c00074c5:	0f 88 ec 10 00 00    	js     c00085b7 <f_mkfs+0x1116>
c00074cb:	8b 14 85 00 64 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd9c00]
c00074d2:	85 d2                	test   edx,edx
c00074d4:	74 03                	je     c00074d9 <f_mkfs+0x38>
c00074d6:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00074d9:	85 f6                	test   esi,esi
c00074db:	75 05                	jne    c00074e2 <f_mkfs+0x41>
c00074dd:	be a0 1f 02 c0       	mov    esi,0xc0021fa0
c00074e2:	83 ec 0c             	sub    esp,0xc
c00074e5:	0f b6 c0             	movzx  eax,al
c00074e8:	bb 03 00 00 00       	mov    ebx,0x3
c00074ed:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00074f1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00074f5:	e8 13 a6 ff ff       	call   c0001b0d <disk_initialize>
c00074fa:	83 c4 10             	add    esp,0x10
c00074fd:	a8 01                	test   al,0x1
c00074ff:	0f 85 b2 10 00 00    	jne    c00085b7 <f_mkfs+0x1116>
c0007505:	bb 0a 00 00 00       	mov    ebx,0xa
c000750a:	a8 04                	test   al,0x4
c000750c:	0f 85 a5 10 00 00    	jne    c00085b7 <f_mkfs+0x1116>
c0007512:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0007515:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c0007519:	85 c0                	test   eax,eax
c000751b:	75 20                	jne    c000753d <f_mkfs+0x9c>
c000751d:	51                   	push   ecx
c000751e:	8d 44 24 78          	lea    eax,[esp+0x78]
c0007522:	50                   	push   eax
c0007523:	6a 03                	push   0x3
c0007525:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007529:	e8 0e a6 ff ff       	call   c0001b3c <disk_ioctl>
c000752e:	83 c4 10             	add    esp,0x10
c0007531:	85 c0                	test   eax,eax
c0007533:	74 08                	je     c000753d <f_mkfs+0x9c>
c0007535:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c000753d:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0007541:	8d 42 ff             	lea    eax,[edx-0x1]
c0007544:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0007549:	77 04                	ja     c000754f <f_mkfs+0xae>
c000754b:	85 c2                	test   edx,eax
c000754d:	74 08                	je     c0007557 <f_mkfs+0xb6>
c000754f:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c0007557:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c000755a:	88 44 24 48          	mov    BYTE PTR [esp+0x48],al
c000755e:	48                   	dec    eax
c000755f:	3c 01                	cmp    al,0x1
c0007561:	76 05                	jbe    c0007568 <f_mkfs+0xc7>
c0007563:	c6 44 24 48 01       	mov    BYTE PTR [esp+0x48],0x1
c0007568:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000756b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000756f:	48                   	dec    eax
c0007570:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0007575:	77 07                	ja     c000757e <f_mkfs+0xdd>
c0007577:	f6 44 24 28 0f       	test   BYTE PTR [esp+0x28],0xf
c000757c:	74 08                	je     c0007586 <f_mkfs+0xe5>
c000757e:	c7 44 24 28 00 02 00 00 	mov    DWORD PTR [esp+0x28],0x200
c0007586:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0007589:	81 fb 00 00 00 01    	cmp    ebx,0x1000000
c000758f:	77 07                	ja     c0007598 <f_mkfs+0xf7>
c0007591:	8d 43 ff             	lea    eax,[ebx-0x1]
c0007594:	85 d8                	test   eax,ebx
c0007596:	74 02                	je     c000759a <f_mkfs+0xf9>
c0007598:	31 db                	xor    ebx,ebx
c000759a:	81 bc 24 bc 00 00 00 ff 01 00 00 	cmp    DWORD PTR [esp+0xbc],0x1ff
c00075a5:	77 0a                	ja     c00075b1 <f_mkfs+0x110>
c00075a7:	bb 11 00 00 00       	mov    ebx,0x11
c00075ac:	e9 06 10 00 00       	jmp    c00085b7 <f_mkfs+0x1116>
c00075b1:	8b ac 24 b8 00 00 00 	mov    ebp,DWORD PTR [esp+0xb8]
c00075b8:	8b 36                	mov    esi,DWORD PTR [esi]
c00075ba:	85 ed                	test   ebp,ebp
c00075bc:	75 1e                	jne    c00075dc <f_mkfs+0x13b>
c00075be:	83 ec 0c             	sub    esp,0xc
c00075c1:	8b 84 24 c8 00 00 00 	mov    eax,DWORD PTR [esp+0xc8]
c00075c8:	25 00 fe ff ff       	and    eax,0xfffffe00
c00075cd:	50                   	push   eax
c00075ce:	e8 f1 0f 00 00       	call   c00085c4 <ff_memalloc>
c00075d3:	83 c4 10             	add    esp,0x10
c00075d6:	89 c5                	mov    ebp,eax
c00075d8:	85 c0                	test   eax,eax
c00075da:	74 cb                	je     c00075a7 <f_mkfs+0x106>
c00075dc:	c7 44 24 78 00 00 00 00 	mov    DWORD PTR [esp+0x78],0x0
c00075e4:	c7 44 24 7c 00 00 00 00 	mov    DWORD PTR [esp+0x7c],0x0
c00075ec:	52                   	push   edx
c00075ed:	8d 44 24 7c          	lea    eax,[esp+0x7c]
c00075f1:	50                   	push   eax
c00075f2:	6a 01                	push   0x1
c00075f4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00075f8:	e8 3f a5 ff ff       	call   c0001b3c <disk_ioctl>
c00075fd:	83 c4 10             	add    esp,0x10
c0007600:	85 c0                	test   eax,eax
c0007602:	0f 85 4a 0f 00 00    	jne    c0008552 <f_mkfs+0x10b1>
c0007608:	89 f1                	mov    ecx,esi
c000760a:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0007612:	83 e1 0f             	and    ecx,0xf
c0007615:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000761d:	88 4c 24 3f          	mov    BYTE PTR [esp+0x3f],cl
c0007621:	83 e6 08             	and    esi,0x8
c0007624:	75 56                	jne    c000767c <f_mkfs+0x1db>
c0007626:	8b 7c 24 7c          	mov    edi,DWORD PTR [esp+0x7c]
c000762a:	8b 74 24 78          	mov    esi,DWORD PTR [esp+0x78]
c000762e:	83 ff 00             	cmp    edi,0x0
c0007631:	76 20                	jbe    c0007653 <f_mkfs+0x1b2>
c0007633:	80 4c 24 3f 80       	or     BYTE PTR [esp+0x3f],0x80
c0007638:	c7 44 24 10 00 08 00 00 	mov    DWORD PTR [esp+0x10],0x800
c0007640:	81 c6 df f7 ff ff    	add    esi,0xfffff7df
c0007646:	83 d7 ff             	adc    edi,0xffffffff
c0007649:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c000764d:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c0007651:	eb 21                	jmp    c0007674 <f_mkfs+0x1d3>
c0007653:	ba 3f 00 00 00       	mov    edx,0x3f
c0007658:	39 f2                	cmp    edx,esi
c000765a:	19 f8                	sbb    eax,edi
c000765c:	73 1e                	jae    c000767c <f_mkfs+0x1db>
c000765e:	83 c6 c1             	add    esi,0xffffffc1
c0007661:	c7 44 24 10 3f 00 00 00 	mov    DWORD PTR [esp+0x10],0x3f
c0007669:	83 d7 ff             	adc    edi,0xffffffff
c000766c:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c0007670:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c0007674:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000767c:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0007680:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c0007684:	89 04 24             	mov    DWORD PTR [esp],eax
c0007687:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000768b:	31 c0                	xor    eax,eax
c000768d:	ba 7f 00 00 00       	mov    edx,0x7f
c0007692:	89 c7                	mov    edi,eax
c0007694:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0007697:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c000769b:	0f 83 c5 0a 00 00    	jae    c0008166 <f_mkfs+0xcc5>
c00076a1:	89 df                	mov    edi,ebx
c00076a3:	c1 ef 09             	shr    edi,0x9
c00076a6:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00076aa:	8b bc 24 bc 00 00 00 	mov    edi,DWORD PTR [esp+0xbc]
c00076b1:	c1 ef 09             	shr    edi,0x9
c00076b4:	f6 44 24 3f 04       	test   BYTE PTR [esp+0x3f],0x4
c00076b9:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c00076bd:	74 29                	je     c00076e8 <f_mkfs+0x247>
c00076bf:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c00076c5:	b9 ff ff ff 03       	mov    ecx,0x3ffffff
c00076ca:	0f 97 c2             	seta   dl
c00076cd:	3b 0c 24             	cmp    ecx,DWORD PTR [esp]
c00076d0:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c00076d4:	0f 92 c0             	setb   al
c00076d7:	08 c2                	or     dl,al
c00076d9:	75 5b                	jne    c0007736 <f_mkfs+0x295>
c00076db:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c00076df:	83 e0 07             	and    eax,0x7
c00076e2:	3c 04                	cmp    al,0x4
c00076e4:	74 50                	je     c0007736 <f_mkfs+0x295>
c00076e6:	eb 1b                	jmp    c0007703 <f_mkfs+0x262>
c00076e8:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c00076ed:	0f 87 73 0a 00 00    	ja     c0008166 <f_mkfs+0xcc5>
c00076f3:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c00076f9:	76 08                	jbe    c0007703 <f_mkfs+0x262>
c00076fb:	c7 44 24 08 80 00 00 00 	mov    DWORD PTR [esp+0x8],0x80
c0007703:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c0007707:	8a 4c 24 3f          	mov    cl,BYTE PTR [esp+0x3f]
c000770b:	83 e0 01             	and    eax,0x1
c000770e:	80 e1 02             	and    cl,0x2
c0007711:	88 4c 24 54          	mov    BYTE PTR [esp+0x54],cl
c0007715:	74 0d                	je     c0007724 <f_mkfs+0x283>
c0007717:	84 c0                	test   al,al
c0007719:	0f 84 53 09 00 00    	je     c0008072 <f_mkfs+0xbd1>
c000771f:	e9 12 08 00 00       	jmp    c0007f36 <f_mkfs+0xa95>
c0007724:	bb 13 00 00 00       	mov    ebx,0x13
c0007729:	84 c0                	test   al,al
c000772b:	0f 85 05 08 00 00    	jne    c0007f36 <f_mkfs+0xa95>
c0007731:	e9 39 0e 00 00       	jmp    c000856f <f_mkfs+0x10ce>
c0007736:	31 c0                	xor    eax,eax
c0007738:	ba ff 0f 00 00       	mov    edx,0xfff
c000773d:	89 c7                	mov    edi,eax
c000773f:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0007742:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0007746:	0f 83 1a 0a 00 00    	jae    c0008166 <f_mkfs+0xcc5>
c000774c:	81 fb ff 01 00 00    	cmp    ebx,0x1ff
c0007752:	77 39                	ja     c000778d <f_mkfs+0x2ec>
c0007754:	ba ff ff 07 00       	mov    edx,0x7ffff
c0007759:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0007761:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0007764:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0007768:	73 08                	jae    c0007772 <f_mkfs+0x2d1>
c000776a:	c7 44 24 08 40 00 00 00 	mov    DWORD PTR [esp+0x8],0x40
c0007772:	b8 ff ff ff 03       	mov    eax,0x3ffffff
c0007777:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c000777a:	b8 00 00 00 00       	mov    eax,0x0
c000777f:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0007783:	73 08                	jae    c000778d <f_mkfs+0x2ec>
c0007785:	c7 44 24 08 00 01 00 00 	mov    DWORD PTR [esp+0x8],0x100
c000778d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007791:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0007795:	83 c0 20             	add    eax,0x20
c0007798:	83 d2 00             	adc    edx,0x0
c000779b:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000779f:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c00077a3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00077a7:	31 d2                	xor    edx,edx
c00077a9:	31 ff                	xor    edi,edi
c00077ab:	52                   	push   edx
c00077ac:	89 fb                	mov    ebx,edi
c00077ae:	50                   	push   eax
c00077af:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00077b3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00077b7:	e8 c8 97 01 00       	call   c0020f84 <__udivdi3>
c00077bc:	83 c4 10             	add    esp,0x10
c00077bf:	c1 e0 02             	shl    eax,0x2
c00077c2:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c00077c6:	05 07 02 00 00       	add    eax,0x207
c00077cb:	89 f1                	mov    ecx,esi
c00077cd:	c1 e8 09             	shr    eax,0x9
c00077d0:	83 c1 ff             	add    ecx,0xffffffff
c00077d3:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c00077d7:	83 d3 ff             	adc    ebx,0xffffffff
c00077da:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c00077de:	13 5c 24 4c          	adc    ebx,DWORD PTR [esp+0x4c]
c00077e2:	31 d2                	xor    edx,edx
c00077e4:	01 c8                	add    eax,ecx
c00077e6:	11 da                	adc    edx,ebx
c00077e8:	89 c1                	mov    ecx,eax
c00077ea:	f7 de                	neg    esi
c00077ec:	89 d0                	mov    eax,edx
c00077ee:	83 d7 00             	adc    edi,0x0
c00077f1:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00077f5:	f7 df                	neg    edi
c00077f7:	21 f1                	and    ecx,esi
c00077f9:	21 f8                	and    eax,edi
c00077fb:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00077ff:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0007803:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0007807:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000780b:	2b 4c 24 10          	sub    ecx,DWORD PTR [esp+0x10]
c000780f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007812:	1b 5c 24 14          	sbb    ebx,DWORD PTR [esp+0x14]
c0007816:	0f ac d0 01          	shrd   eax,edx,0x1
c000781a:	89 df                	mov    edi,ebx
c000781c:	d1 ea                	shr    edx,1
c000781e:	39 c1                	cmp    ecx,eax
c0007820:	19 d7                	sbb    edi,edx
c0007822:	0f 83 3e 09 00 00    	jae    c0008166 <f_mkfs+0xcc5>
c0007828:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000782c:	31 d2                	xor    edx,edx
c000782e:	89 44 24 68          	mov    DWORD PTR [esp+0x68],eax
c0007832:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007836:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c000783a:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000783d:	03 44 24 68          	add    eax,DWORD PTR [esp+0x68]
c0007841:	2b 44 24 6c          	sub    eax,DWORD PTR [esp+0x6c]
c0007845:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0007849:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000784d:	83 f8 0f             	cmp    eax,0xf
c0007850:	0f 86 10 09 00 00    	jbe    c0008166 <f_mkfs+0xcc5>
c0007856:	81 7c 24 38 fd ff ff 7f 	cmp    DWORD PTR [esp+0x38],0x7ffffffd
c000785e:	0f 87 02 09 00 00    	ja     c0008166 <f_mkfs+0xcc5>
c0007864:	31 d2                	xor    edx,edx
c0007866:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000786a:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c0007872:	83 c0 07             	add    eax,0x7
c0007875:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000787d:	c1 e8 03             	shr    eax,0x3
c0007880:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0007887:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000788b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000788f:	c1 e0 09             	shl    eax,0x9
c0007892:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007896:	48                   	dec    eax
c0007897:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000789b:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000789f:	03 44 24 50          	add    eax,DWORD PTR [esp+0x50]
c00078a3:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c00078a7:	31 d2                	xor    edx,edx
c00078a9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00078ad:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c00078b4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00078b8:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c00078bd:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00078c1:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c00078c5:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c00078c9:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c00078cd:	31 ff                	xor    edi,edi
c00078cf:	31 f6                	xor    esi,esi
c00078d1:	31 db                	xor    ebx,ebx
c00078d3:	85 ff                	test   edi,edi
c00078d5:	74 05                	je     c00078dc <f_mkfs+0x43b>
c00078d7:	4f                   	dec    edi
c00078d8:	74 44                	je     c000791e <f_mkfs+0x47d>
c00078da:	eb 4f                	jmp    c000792b <f_mkfs+0x48a>
c00078dc:	83 ec 0c             	sub    esp,0xc
c00078df:	0f b7 c3             	movzx  eax,bx
c00078e2:	50                   	push   eax
c00078e3:	e8 18 0e 00 00       	call   c0008700 <ff_wtoupper>
c00078e8:	83 c4 10             	add    esp,0x10
c00078eb:	89 c1                	mov    ecx,eax
c00078ed:	8d 53 01             	lea    edx,[ebx+0x1]
c00078f0:	66 39 c3             	cmp    bx,ax
c00078f3:	75 3e                	jne    c0007933 <f_mkfs+0x492>
c00078f5:	be 01 00 00 00       	mov    esi,0x1
c00078fa:	89 df                	mov    edi,ebx
c00078fc:	66 01 f7             	add    di,si
c00078ff:	75 07                	jne    c0007908 <f_mkfs+0x467>
c0007901:	83 fe 7f             	cmp    esi,0x7f
c0007904:	77 31                	ja     c0007937 <f_mkfs+0x496>
c0007906:	eb 16                	jmp    c000791e <f_mkfs+0x47d>
c0007908:	83 ec 0c             	sub    esp,0xc
c000790b:	0f b7 ff             	movzx  edi,di
c000790e:	57                   	push   edi
c000790f:	e8 ec 0d 00 00       	call   c0008700 <ff_wtoupper>
c0007914:	83 c4 10             	add    esp,0x10
c0007917:	39 c7                	cmp    edi,eax
c0007919:	75 e6                	jne    c0007901 <f_mkfs+0x460>
c000791b:	46                   	inc    esi
c000791c:	eb dc                	jmp    c00078fa <f_mkfs+0x459>
c000791e:	31 c0                	xor    eax,eax
c0007920:	89 d9                	mov    ecx,ebx
c0007922:	4e                   	dec    esi
c0007923:	0f 95 c0             	setne  al
c0007926:	43                   	inc    ebx
c0007927:	89 c7                	mov    edi,eax
c0007929:	eb 14                	jmp    c000793f <f_mkfs+0x49e>
c000792b:	89 f1                	mov    ecx,esi
c000792d:	01 f3                	add    ebx,esi
c000792f:	31 ff                	xor    edi,edi
c0007931:	eb 0c                	jmp    c000793f <f_mkfs+0x49e>
c0007933:	89 d3                	mov    ebx,edx
c0007935:	eb 08                	jmp    c000793f <f_mkfs+0x49e>
c0007937:	bf 02 00 00 00       	mov    edi,0x2
c000793c:	83 c9 ff             	or     ecx,0xffffffff
c000793f:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0007943:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007946:	88 4c 05 00          	mov    BYTE PTR [ebp+eax*1+0x0],cl
c000794a:	0f b6 c1             	movzx  eax,cl
c000794d:	e8 04 a7 ff ff       	call   c0002056 <xsum32>
c0007952:	66 c1 e9 08          	shr    cx,0x8
c0007956:	89 c2                	mov    edx,eax
c0007958:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000795b:	88 4c 05 01          	mov    BYTE PTR [ebp+eax*1+0x1],cl
c000795f:	0f b7 c1             	movzx  eax,cx
c0007962:	e8 ef a6 ff ff       	call   c0002056 <xsum32>
c0007967:	83 44 24 54 02       	add    DWORD PTR [esp+0x54],0x2
c000796c:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007970:	66 85 db             	test   bx,bx
c0007973:	74 1f                	je     c0007994 <f_mkfs+0x4f3>
c0007975:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007978:	8b 94 24 bc 00 00 00 	mov    edx,DWORD PTR [esp+0xbc]
c000797f:	83 c0 02             	add    eax,0x2
c0007982:	81 e2 00 fe ff ff    	and    edx,0xfffffe00
c0007988:	39 c2                	cmp    edx,eax
c000798a:	74 08                	je     c0007994 <f_mkfs+0x4f3>
c000798c:	89 04 24             	mov    DWORD PTR [esp],eax
c000798f:	e9 3f ff ff ff       	jmp    c00078d3 <f_mkfs+0x432>
c0007994:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007997:	83 ec 0c             	sub    esp,0xc
c000799a:	05 01 02 00 00       	add    eax,0x201
c000799f:	c1 e8 09             	shr    eax,0x9
c00079a2:	50                   	push   eax
c00079a3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00079a7:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00079ab:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00079af:	55                   	push   ebp
c00079b0:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00079b4:	e8 6d a1 ff ff       	call   c0001b26 <disk_write>
c00079b9:	83 c4 20             	add    esp,0x20
c00079bc:	85 c0                	test   eax,eax
c00079be:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00079c1:	0f 85 8b 0b 00 00    	jne    c0008552 <f_mkfs+0x10b1>
c00079c7:	89 d0                	mov    eax,edx
c00079c9:	31 d2                	xor    edx,edx
c00079cb:	01 44 24 40          	add    DWORD PTR [esp+0x40],eax
c00079cf:	11 54 24 44          	adc    DWORD PTR [esp+0x44],edx
c00079d3:	66 85 db             	test   bx,bx
c00079d6:	74 04                	je     c00079dc <f_mkfs+0x53b>
c00079d8:	31 c0                	xor    eax,eax
c00079da:	eb b0                	jmp    c000798c <f_mkfs+0x4eb>
c00079dc:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00079e0:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c00079e4:	03 44 24 54          	add    eax,DWORD PTR [esp+0x54]
c00079e8:	8d 9e ff 01 00 00    	lea    ebx,[esi+0x1ff]
c00079ee:	31 d2                	xor    edx,edx
c00079f0:	c7 84 24 88 00 00 00 01 00 00 00 	mov    DWORD PTR [esp+0x88],0x1
c00079fb:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c00079ff:	c1 eb 09             	shr    ebx,0x9
c0007a02:	89 84 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],eax
c0007a09:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0007a0d:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c0007a11:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0007a15:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007a19:	8d 70 01             	lea    esi,[eax+0x1]
c0007a1c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007a20:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007a24:	8b 84 24 bc 00 00 00 	mov    eax,DWORD PTR [esp+0xbc]
c0007a2b:	31 d2                	xor    edx,edx
c0007a2d:	25 00 fe ff ff       	and    eax,0xfffffe00
c0007a32:	89 04 24             	mov    DWORD PTR [esp],eax
c0007a35:	89 c1                	mov    ecx,eax
c0007a37:	89 e8                	mov    eax,ebp
c0007a39:	e8 b1 a1 ff ff       	call   c0001bef <mem_set>
c0007a3e:	31 c0                	xor    eax,eax
c0007a40:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007a43:	76 10                	jbe    c0007a55 <f_mkfs+0x5b4>
c0007a45:	83 fe 07             	cmp    esi,0x7
c0007a48:	76 0b                	jbe    c0007a55 <f_mkfs+0x5b4>
c0007a4a:	40                   	inc    eax
c0007a4b:	83 ee 08             	sub    esi,0x8
c0007a4e:	c6 44 05 ff ff       	mov    BYTE PTR [ebp+eax*1-0x1],0xff
c0007a53:	eb eb                	jmp    c0007a40 <f_mkfs+0x59f>
c0007a55:	b2 01                	mov    dl,0x1
c0007a57:	8d 4c 05 00          	lea    ecx,[ebp+eax*1+0x0]
c0007a5b:	85 f6                	test   esi,esi
c0007a5d:	74 0c                	je     c0007a6b <f_mkfs+0x5ca>
c0007a5f:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007a62:	76 07                	jbe    c0007a6b <f_mkfs+0x5ca>
c0007a64:	08 11                	or     BYTE PTR [ecx],dl
c0007a66:	4e                   	dec    esi
c0007a67:	d1 e2                	shl    edx,1
c0007a69:	eb f0                	jmp    c0007a5b <f_mkfs+0x5ba>
c0007a6b:	89 df                	mov    edi,ebx
c0007a6d:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c0007a71:	76 04                	jbe    c0007a77 <f_mkfs+0x5d6>
c0007a73:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0007a77:	83 ec 0c             	sub    esp,0xc
c0007a7a:	57                   	push   edi
c0007a7b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007a7f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007a83:	55                   	push   ebp
c0007a84:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007a88:	e8 99 a0 ff ff       	call   c0001b26 <disk_write>
c0007a8d:	83 c4 20             	add    esp,0x20
c0007a90:	85 c0                	test   eax,eax
c0007a92:	0f 85 ba 0a 00 00    	jne    c0008552 <f_mkfs+0x10b1>
c0007a98:	31 d2                	xor    edx,edx
c0007a9a:	01 7c 24 28          	add    DWORD PTR [esp+0x28],edi
c0007a9e:	11 54 24 2c          	adc    DWORD PTR [esp+0x2c],edx
c0007aa2:	29 fb                	sub    ebx,edi
c0007aa4:	0f 85 7a ff ff ff    	jne    c0007a24 <f_mkfs+0x583>
c0007aaa:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0007aae:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0007ab6:	31 f6                	xor    esi,esi
c0007ab8:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007abc:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007abf:	31 d2                	xor    edx,edx
c0007ac1:	89 e8                	mov    eax,ebp
c0007ac3:	e8 27 a1 ff ff       	call   c0001bef <mem_set>
c0007ac8:	31 c9                	xor    ecx,ecx
c0007aca:	85 db                	test   ebx,ebx
c0007acc:	75 40                	jne    c0007b0e <f_mkfs+0x66d>
c0007ace:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0007ad3:	89 e8                	mov    eax,ebp
c0007ad5:	bb 02 00 00 00       	mov    ebx,0x2
c0007ada:	e8 f2 a0 ff ff       	call   c0001bd1 <st_dword>
c0007adf:	8d 45 04             	lea    eax,[ebp+0x4]
c0007ae2:	83 ca ff             	or     edx,0xffffffff
c0007ae5:	e8 e7 a0 ff ff       	call   c0001bd1 <st_dword>
c0007aea:	b9 08 00 00 00       	mov    ecx,0x8
c0007aef:	eb 1d                	jmp    c0007b0e <f_mkfs+0x66d>
c0007af1:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0007af4:	76 3b                	jbe    c0007b31 <f_mkfs+0x690>
c0007af6:	43                   	inc    ebx
c0007af7:	83 fe 01             	cmp    esi,0x1
c0007afa:	89 da                	mov    edx,ebx
c0007afc:	77 03                	ja     c0007b01 <f_mkfs+0x660>
c0007afe:	83 ca ff             	or     edx,0xffffffff
c0007b01:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c0007b05:	4e                   	dec    esi
c0007b06:	e8 c6 a0 ff ff       	call   c0001bd1 <st_dword>
c0007b0b:	83 c1 04             	add    ecx,0x4
c0007b0e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007b12:	85 f6                	test   esi,esi
c0007b14:	75 db                	jne    c0007af1 <f_mkfs+0x650>
c0007b16:	83 7c 24 28 02       	cmp    DWORD PTR [esp+0x28],0x2
c0007b1b:	77 14                	ja     c0007b31 <f_mkfs+0x690>
c0007b1d:	ff 44 24 28          	inc    DWORD PTR [esp+0x28]
c0007b21:	8b b4 84 80 00 00 00 	mov    esi,DWORD PTR [esp+eax*4+0x80]
c0007b28:	85 f6                	test   esi,esi
c0007b2a:	74 05                	je     c0007b31 <f_mkfs+0x690>
c0007b2c:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0007b2f:	77 dd                	ja     c0007b0e <f_mkfs+0x66d>
c0007b31:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0007b35:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007b39:	39 cf                	cmp    edi,ecx
c0007b3b:	76 02                	jbe    c0007b3f <f_mkfs+0x69e>
c0007b3d:	89 cf                	mov    edi,ecx
c0007b3f:	83 ec 0c             	sub    esp,0xc
c0007b42:	57                   	push   edi
c0007b43:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0007b47:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0007b4b:	55                   	push   ebp
c0007b4c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007b50:	e8 d1 9f ff ff       	call   c0001b26 <disk_write>
c0007b55:	83 c4 20             	add    esp,0x20
c0007b58:	85 c0                	test   eax,eax
c0007b5a:	0f 85 f2 09 00 00    	jne    c0008552 <f_mkfs+0x10b1>
c0007b60:	31 d2                	xor    edx,edx
c0007b62:	01 7c 24 48          	add    DWORD PTR [esp+0x48],edi
c0007b66:	11 54 24 4c          	adc    DWORD PTR [esp+0x4c],edx
c0007b6a:	29 7c 24 40          	sub    DWORD PTR [esp+0x40],edi
c0007b6e:	0f 85 48 ff ff ff    	jne    c0007abc <f_mkfs+0x61b>
c0007b74:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007b77:	31 d2                	xor    edx,edx
c0007b79:	89 e8                	mov    eax,ebp
c0007b7b:	31 ff                	xor    edi,edi
c0007b7d:	e8 6d a0 ff ff       	call   c0001bef <mem_set>
c0007b82:	8d 45 34             	lea    eax,[ebp+0x34]
c0007b85:	ba 02 00 00 00       	mov    edx,0x2
c0007b8a:	c6 45 00 83          	mov    BYTE PTR [ebp+0x0],0x83
c0007b8e:	c6 45 20 81          	mov    BYTE PTR [ebp+0x20],0x81
c0007b92:	e8 3a a0 ff ff       	call   c0001bd1 <st_dword>
c0007b97:	8d 45 38             	lea    eax,[ebp+0x38]
c0007b9a:	8b 54 24 64          	mov    edx,DWORD PTR [esp+0x64]
c0007b9e:	e8 2e a0 ff ff       	call   c0001bd1 <st_dword>
c0007ba3:	8d 45 44             	lea    eax,[ebp+0x44]
c0007ba6:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0007baa:	c6 45 40 82          	mov    BYTE PTR [ebp+0x40],0x82
c0007bae:	e8 1e a0 ff ff       	call   c0001bd1 <st_dword>
c0007bb3:	8d 45 54             	lea    eax,[ebp+0x54]
c0007bb6:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0007bba:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007bbe:	83 c2 02             	add    edx,0x2
c0007bc1:	e8 0b a0 ff ff       	call   c0001bd1 <st_dword>
c0007bc6:	8d 45 58             	lea    eax,[ebp+0x58]
c0007bc9:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c0007bcd:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0007bd1:	e8 fb 9f ff ff       	call   c0001bd1 <st_dword>
c0007bd6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007bda:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c0007bdf:	89 c6                	mov    esi,eax
c0007be1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007be5:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c0007be9:	89 04 24             	mov    DWORD PTR [esp],eax
c0007bec:	13 7c 24 1c          	adc    edi,DWORD PTR [esp+0x1c]
c0007bf0:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0007bf3:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007bf7:	39 cb                	cmp    ebx,ecx
c0007bf9:	76 02                	jbe    c0007bfd <f_mkfs+0x75c>
c0007bfb:	89 cb                	mov    ebx,ecx
c0007bfd:	83 ec 0c             	sub    esp,0xc
c0007c00:	53                   	push   ebx
c0007c01:	57                   	push   edi
c0007c02:	56                   	push   esi
c0007c03:	55                   	push   ebp
c0007c04:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007c08:	e8 19 9f ff ff       	call   c0001b26 <disk_write>
c0007c0d:	83 c4 20             	add    esp,0x20
c0007c10:	85 c0                	test   eax,eax
c0007c12:	0f 85 3a 09 00 00    	jne    c0008552 <f_mkfs+0x10b1>
c0007c18:	31 d2                	xor    edx,edx
c0007c1a:	b9 00 02 00 00       	mov    ecx,0x200
c0007c1f:	89 e8                	mov    eax,ebp
c0007c21:	e8 c9 9f ff ff       	call   c0001bef <mem_set>
c0007c26:	31 d2                	xor    edx,edx
c0007c28:	01 de                	add    esi,ebx
c0007c2a:	11 d7                	adc    edi,edx
c0007c2c:	29 1c 24             	sub    DWORD PTR [esp],ebx
c0007c2f:	75 bf                	jne    c0007bf0 <f_mkfs+0x74f>
c0007c31:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0007c35:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0007c39:	c7 44 24 30 02 00 00 00 	mov    DWORD PTR [esp+0x30],0x2
c0007c41:	b9 00 02 00 00       	mov    ecx,0x200
c0007c46:	31 d2                	xor    edx,edx
c0007c48:	89 e8                	mov    eax,ebp
c0007c4a:	e8 a0 9f ff ff       	call   c0001bef <mem_set>
c0007c4f:	b9 0b 00 00 00       	mov    ecx,0xb
c0007c54:	ba 80 20 02 c0       	mov    edx,0xc0022080
c0007c59:	89 e8                	mov    eax,ebp
c0007c5b:	e8 7a 9f ff ff       	call   c0001bda <mem_cpy>
c0007c60:	8d 45 40             	lea    eax,[ebp+0x40]
c0007c63:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0007c67:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0007c6b:	e8 64 9f ff ff       	call   c0001bd4 <st_qword>
c0007c70:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0007c74:	8d 45 48             	lea    eax,[ebp+0x48]
c0007c77:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0007c7b:	e8 54 9f ff ff       	call   c0001bd4 <st_qword>
c0007c80:	8d 45 50             	lea    eax,[ebp+0x50]
c0007c83:	ba 20 00 00 00       	mov    edx,0x20
c0007c88:	e8 44 9f ff ff       	call   c0001bd1 <st_dword>
c0007c8d:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0007c91:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0007c95:	e8 37 9f ff ff       	call   c0001bd1 <st_dword>
c0007c9a:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c0007c9e:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0007ca2:	2b 54 24 68          	sub    edx,DWORD PTR [esp+0x68]
c0007ca6:	e8 26 9f ff ff       	call   c0001bd1 <st_dword>
c0007cab:	8d 45 5c             	lea    eax,[ebp+0x5c]
c0007cae:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007cb2:	e8 1a 9f ff ff       	call   c0001bd1 <st_dword>
c0007cb7:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0007cbb:	8d 50 02             	lea    edx,[eax+0x2]
c0007cbe:	8d 45 60             	lea    eax,[ebp+0x60]
c0007cc1:	e8 0b 9f ff ff       	call   c0001bd1 <st_dword>
c0007cc6:	8d 45 64             	lea    eax,[ebp+0x64]
c0007cc9:	ba 00 00 21 50       	mov    edx,0x50210000
c0007cce:	e8 fe 9e ff ff       	call   c0001bd1 <st_dword>
c0007cd3:	8d 45 68             	lea    eax,[ebp+0x68]
c0007cd6:	ba 00 01 00 00       	mov    edx,0x100
c0007cdb:	e8 ed 9e ff ff       	call   c0001bcd <st_word>
c0007ce0:	c6 45 6c 00          	mov    BYTE PTR [ebp+0x6c],0x0
c0007ce4:	b8 0a 00 00 00       	mov    eax,0xa
c0007ce9:	48                   	dec    eax
c0007cea:	74 05                	je     c0007cf1 <f_mkfs+0x850>
c0007cec:	fe 45 6c             	inc    BYTE PTR [ebp+0x6c]
c0007cef:	eb f8                	jmp    c0007ce9 <f_mkfs+0x848>
c0007cf1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007cf5:	c6 45 6d 00          	mov    BYTE PTR [ebp+0x6d],0x0
c0007cf9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007cfd:	d1 6c 24 18          	shr    DWORD PTR [esp+0x18],1
c0007d01:	74 05                	je     c0007d08 <f_mkfs+0x867>
c0007d03:	fe 45 6d             	inc    BYTE PTR [ebp+0x6d]
c0007d06:	eb f5                	jmp    c0007cfd <f_mkfs+0x85c>
c0007d08:	8d 45 78             	lea    eax,[ebp+0x78]
c0007d0b:	ba eb fe 00 00       	mov    edx,0xfeeb
c0007d10:	66 c7 45 6e 01 80    	mov    WORD PTR [ebp+0x6e],0x8001
c0007d16:	31 db                	xor    ebx,ebx
c0007d18:	e8 b0 9e ff ff       	call   c0001bcd <st_word>
c0007d1d:	8d 85 fe 01 00 00    	lea    eax,[ebp+0x1fe]
c0007d23:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007d28:	89 04 24             	mov    DWORD PTR [esp],eax
c0007d2b:	e8 9d 9e ff ff       	call   c0001bcd <st_word>
c0007d30:	31 c9                	xor    ecx,ecx
c0007d32:	8d 41 96             	lea    eax,[ecx-0x6a]
c0007d35:	83 f8 01             	cmp    eax,0x1
c0007d38:	76 13                	jbe    c0007d4d <f_mkfs+0x8ac>
c0007d3a:	83 f9 70             	cmp    ecx,0x70
c0007d3d:	74 0e                	je     c0007d4d <f_mkfs+0x8ac>
c0007d3f:	89 da                	mov    edx,ebx
c0007d41:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0007d46:	e8 0b a3 ff ff       	call   c0002056 <xsum32>
c0007d4b:	89 c3                	mov    ebx,eax
c0007d4d:	41                   	inc    ecx
c0007d4e:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007d54:	75 dc                	jne    c0007d32 <f_mkfs+0x891>
c0007d56:	89 f0                	mov    eax,esi
c0007d58:	89 fa                	mov    edx,edi
c0007d5a:	83 c0 01             	add    eax,0x1
c0007d5d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007d61:	83 d2 00             	adc    edx,0x0
c0007d64:	83 ec 0c             	sub    esp,0xc
c0007d67:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007d6b:	6a 01                	push   0x1
c0007d6d:	57                   	push   edi
c0007d6e:	56                   	push   esi
c0007d6f:	55                   	push   ebp
c0007d70:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007d74:	e8 ad 9d ff ff       	call   c0001b26 <disk_write>
c0007d79:	83 c4 20             	add    esp,0x20
c0007d7c:	85 c0                	test   eax,eax
c0007d7e:	0f 85 ce 07 00 00    	jne    c0008552 <f_mkfs+0x10b1>
c0007d84:	31 d2                	xor    edx,edx
c0007d86:	b9 00 02 00 00       	mov    ecx,0x200
c0007d8b:	89 e8                	mov    eax,ebp
c0007d8d:	e8 5d 9e ff ff       	call   c0001bef <mem_set>
c0007d92:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007d97:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007d9a:	e8 2e 9e ff ff       	call   c0001bcd <st_word>
c0007d9f:	89 f0                	mov    eax,esi
c0007da1:	89 fa                	mov    edx,edi
c0007da3:	83 c0 09             	add    eax,0x9
c0007da6:	83 d2 00             	adc    edx,0x0
c0007da9:	89 04 24             	mov    DWORD PTR [esp],eax
c0007dac:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007db0:	31 c9                	xor    ecx,ecx
c0007db2:	41                   	inc    ecx
c0007db3:	89 da                	mov    edx,ebx
c0007db5:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007dba:	e8 97 a2 ff ff       	call   c0002056 <xsum32>
c0007dbf:	89 c3                	mov    ebx,eax
c0007dc1:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007dc7:	75 e9                	jne    c0007db2 <f_mkfs+0x911>
c0007dc9:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007dcd:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0007dd1:	83 c0 01             	add    eax,0x1
c0007dd4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0007dd8:	83 d2 00             	adc    edx,0x0
c0007ddb:	83 ec 0c             	sub    esp,0xc
c0007dde:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c0007de2:	6a 01                	push   0x1
c0007de4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007de8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007dec:	55                   	push   ebp
c0007ded:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007df1:	e8 30 9d ff ff       	call   c0001b26 <disk_write>
c0007df6:	83 c4 20             	add    esp,0x20
c0007df9:	85 c0                	test   eax,eax
c0007dfb:	0f 85 51 07 00 00    	jne    c0008552 <f_mkfs+0x10b1>
c0007e01:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007e05:	39 44 24 24          	cmp    DWORD PTR [esp+0x24],eax
c0007e09:	75 09                	jne    c0007e14 <f_mkfs+0x973>
c0007e0b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007e0e:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0007e12:	74 12                	je     c0007e26 <f_mkfs+0x985>
c0007e14:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007e18:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007e1c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007e20:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0007e24:	eb 8a                	jmp    c0007db0 <f_mkfs+0x90f>
c0007e26:	31 d2                	xor    edx,edx
c0007e28:	b9 00 02 00 00       	mov    ecx,0x200
c0007e2d:	89 e8                	mov    eax,ebp
c0007e2f:	e8 bb 9d ff ff       	call   c0001bef <mem_set>
c0007e34:	83 c6 0b             	add    esi,0xb
c0007e37:	83 d7 00             	adc    edi,0x0
c0007e3a:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0007e3e:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c0007e42:	31 c9                	xor    ecx,ecx
c0007e44:	41                   	inc    ecx
c0007e45:	89 da                	mov    edx,ebx
c0007e47:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007e4c:	e8 05 a2 ff ff       	call   c0002056 <xsum32>
c0007e51:	89 c3                	mov    ebx,eax
c0007e53:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007e59:	75 e9                	jne    c0007e44 <f_mkfs+0x9a3>
c0007e5b:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007e5e:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007e62:	83 c6 01             	add    esi,0x1
c0007e65:	83 d7 00             	adc    edi,0x0
c0007e68:	83 ec 0c             	sub    esp,0xc
c0007e6b:	6a 01                	push   0x1
c0007e6d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007e71:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007e75:	55                   	push   ebp
c0007e76:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007e7a:	e8 a7 9c ff ff       	call   c0001b26 <disk_write>
c0007e7f:	83 c4 20             	add    esp,0x20
c0007e82:	85 c0                	test   eax,eax
c0007e84:	0f 85 c8 06 00 00    	jne    c0008552 <f_mkfs+0x10b1>
c0007e8a:	3b 7c 24 24          	cmp    edi,DWORD PTR [esp+0x24]
c0007e8e:	75 06                	jne    c0007e96 <f_mkfs+0x9f5>
c0007e90:	3b 74 24 20          	cmp    esi,DWORD PTR [esp+0x20]
c0007e94:	74 09                	je     c0007e9f <f_mkfs+0x9fe>
c0007e96:	89 34 24             	mov    DWORD PTR [esp],esi
c0007e99:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0007e9d:	eb a3                	jmp    c0007e42 <f_mkfs+0x9a1>
c0007e9f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007ea3:	89 da                	mov    edx,ebx
c0007ea5:	01 e8                	add    eax,ebp
c0007ea7:	e8 25 9d ff ff       	call   c0001bd1 <st_dword>
c0007eac:	83 44 24 18 04       	add    DWORD PTR [esp+0x18],0x4
c0007eb1:	81 7c 24 18 00 02 00 00 	cmp    DWORD PTR [esp+0x18],0x200
c0007eb9:	75 e4                	jne    c0007e9f <f_mkfs+0x9fe>
c0007ebb:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007ebe:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007ec2:	83 c6 02             	add    esi,0x2
c0007ec5:	83 d7 00             	adc    edi,0x0
c0007ec8:	83 ec 0c             	sub    esp,0xc
c0007ecb:	6a 01                	push   0x1
c0007ecd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007ed1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007ed5:	55                   	push   ebp
c0007ed6:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007eda:	e8 47 9c ff ff       	call   c0001b26 <disk_write>
c0007edf:	83 c4 20             	add    esp,0x20
c0007ee2:	85 c0                	test   eax,eax
c0007ee4:	0f 85 68 06 00 00    	jne    c0008552 <f_mkfs+0x10b1>
c0007eea:	83 7c 24 30 01       	cmp    DWORD PTR [esp+0x30],0x1
c0007eef:	74 0d                	je     c0007efe <f_mkfs+0xa5d>
c0007ef1:	c7 44 24 30 01 00 00 00 	mov    DWORD PTR [esp+0x30],0x1
c0007ef9:	e9 43 fd ff ff       	jmp    c0007c41 <f_mkfs+0x7a0>
c0007efe:	b1 07                	mov    cl,0x7
c0007f00:	e9 e3 05 00 00       	jmp    c00084e8 <f_mkfs+0x1047>
c0007f05:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c0007f0a:	0f 85 4f 02 00 00    	jne    c000815f <f_mkfs+0xcbe>
c0007f10:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007f15:	0f 86 22 02 00 00    	jbe    c000813d <f_mkfs+0xc9c>
c0007f1b:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007f20:	0f 85 81 06 00 00    	jne    c00085a7 <f_mkfs+0x1106>
c0007f26:	8d 04 3f             	lea    eax,[edi+edi*1]
c0007f29:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007f2d:	83 f8 40             	cmp    eax,0x40
c0007f30:	0f 87 51 06 00 00    	ja     c0008587 <f_mkfs+0x10e6>
c0007f36:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007f3a:	85 ff                	test   edi,edi
c0007f3c:	75 1c                	jne    c0007f5a <f_mkfs+0xab9>
c0007f3e:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007f41:	ba 80 1f 02 c0       	mov    edx,0xc0021f80
c0007f46:	c1 e9 0c             	shr    ecx,0xc
c0007f49:	bf 01 00 00 00       	mov    edi,0x1
c0007f4e:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007f51:	66 85 c0             	test   ax,ax
c0007f54:	0f 85 95 01 00 00    	jne    c00080ef <f_mkfs+0xc4e>
c0007f5a:	31 d2                	xor    edx,edx
c0007f5c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007f5f:	f7 f7                	div    edi
c0007f61:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007f66:	0f 86 95 01 00 00    	jbe    c0008101 <f_mkfs+0xc60>
c0007f6c:	83 c0 02             	add    eax,0x2
c0007f6f:	c6 44 24 18 02       	mov    BYTE PTR [esp+0x18],0x2
c0007f74:	01 c0                	add    eax,eax
c0007f76:	05 ff 01 00 00       	add    eax,0x1ff
c0007f7b:	be 01 00 00 00       	mov    esi,0x1
c0007f80:	c1 e8 09             	shr    eax,0x9
c0007f83:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0007f87:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007f8b:	c1 e0 05             	shl    eax,0x5
c0007f8e:	c1 e8 09             	shr    eax,0x9
c0007f91:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007f95:	0f b6 44 24 48       	movzx  eax,BYTE PTR [esp+0x48]
c0007f9a:	31 d2                	xor    edx,edx
c0007f9c:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007fa0:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0007fa4:	89 f0                	mov    eax,esi
c0007fa6:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0007faa:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0007fae:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0007fb2:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0007fb6:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007fba:	31 d2                	xor    edx,edx
c0007fbc:	0f af 44 24 40       	imul   eax,DWORD PTR [esp+0x40]
c0007fc1:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c0007fc5:	13 54 24 34          	adc    edx,DWORD PTR [esp+0x34]
c0007fc9:	31 db                	xor    ebx,ebx
c0007fcb:	01 c8                	add    eax,ecx
c0007fcd:	11 da                	adc    edx,ebx
c0007fcf:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007fd3:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0007fd7:	8b 5c 24 58          	mov    ebx,DWORD PTR [esp+0x58]
c0007fdb:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0007fdf:	8d 4c 13 ff          	lea    ecx,[ebx+edx*1-0x1]
c0007fe3:	f7 da                	neg    edx
c0007fe5:	21 d1                	and    ecx,edx
c0007fe7:	29 d9                	sub    ecx,ebx
c0007fe9:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007fee:	0f 85 20 01 00 00    	jne    c0008114 <f_mkfs+0xc73>
c0007ff4:	31 db                	xor    ebx,ebx
c0007ff6:	01 ce                	add    esi,ecx
c0007ff8:	01 4c 24 30          	add    DWORD PTR [esp+0x30],ecx
c0007ffc:	11 5c 24 34          	adc    DWORD PTR [esp+0x34],ebx
c0008000:	31 d2                	xor    edx,edx
c0008002:	89 f8                	mov    eax,edi
c0008004:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c0008008:	c1 e0 04             	shl    eax,0x4
c000800b:	2b 44 24 10          	sub    eax,DWORD PTR [esp+0x10]
c000800f:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c0008013:	03 44 24 58          	add    eax,DWORD PTR [esp+0x58]
c0008017:	13 54 24 5c          	adc    edx,DWORD PTR [esp+0x5c]
c000801b:	39 04 24             	cmp    DWORD PTR [esp],eax
c000801e:	19 d3                	sbb    ebx,edx
c0008020:	0f 82 40 01 00 00    	jb     c0008166 <f_mkfs+0xcc5>
c0008026:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0008029:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000802d:	89 c8                	mov    eax,ecx
c000802f:	0f af 54 24 40       	imul   edx,DWORD PTR [esp+0x40]
c0008034:	2b 44 24 50          	sub    eax,DWORD PTR [esp+0x50]
c0008038:	29 f0                	sub    eax,esi
c000803a:	29 d0                	sub    eax,edx
c000803c:	31 d2                	xor    edx,edx
c000803e:	f7 f7                	div    edi
c0008040:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008045:	89 c3                	mov    ebx,eax
c0008047:	0f 85 b8 fe ff ff    	jne    c0007f05 <f_mkfs+0xa64>
c000804d:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0008052:	0f 87 1d 01 00 00    	ja     c0008175 <f_mkfs+0xcd4>
c0008058:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000805d:	0f 85 03 01 00 00    	jne    c0008166 <f_mkfs+0xcc5>
c0008063:	83 ff 01             	cmp    edi,0x1
c0008066:	0f 86 fa 00 00 00    	jbe    c0008166 <f_mkfs+0xcc5>
c000806c:	d1 ef                	shr    edi,1
c000806e:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0008072:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0008076:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0008079:	85 db                	test   ebx,ebx
c000807b:	75 2d                	jne    c00080aa <f_mkfs+0xc09>
c000807d:	89 cb                	mov    ebx,ecx
c000807f:	ba 90 1f 02 c0       	mov    edx,0xc0021f90
c0008084:	c1 eb 11             	shr    ebx,0x11
c0008087:	c7 44 24 08 01 00 00 00 	mov    DWORD PTR [esp+0x8],0x1
c000808f:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0008092:	66 85 c0             	test   ax,ax
c0008095:	74 11                	je     c00080a8 <f_mkfs+0xc07>
c0008097:	83 c2 02             	add    edx,0x2
c000809a:	39 d8                	cmp    eax,ebx
c000809c:	77 0a                	ja     c00080a8 <f_mkfs+0xc07>
c000809e:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00080a2:	01 74 24 08          	add    DWORD PTR [esp+0x8],esi
c00080a6:	eb e7                	jmp    c000808f <f_mkfs+0xbee>
c00080a8:	31 db                	xor    ebx,ebx
c00080aa:	31 d2                	xor    edx,edx
c00080ac:	89 c8                	mov    eax,ecx
c00080ae:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c00080b2:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c00080b9:	2d f6 ff 00 00       	sub    eax,0xfff6
c00080be:	c1 ea 09             	shr    edx,0x9
c00080c1:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c00080c6:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c00080ca:	0f 87 96 00 00 00    	ja     c0008166 <f_mkfs+0xcc5>
c00080d0:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00080d4:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c00080dc:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c00080e0:	be 20 00 00 00       	mov    esi,0x20
c00080e5:	c6 44 24 18 03       	mov    BYTE PTR [esp+0x18],0x3
c00080ea:	e9 a6 fe ff ff       	jmp    c0007f95 <f_mkfs+0xaf4>
c00080ef:	83 c2 02             	add    edx,0x2
c00080f2:	39 c8                	cmp    eax,ecx
c00080f4:	0f 87 60 fe ff ff    	ja     c0007f5a <f_mkfs+0xab9>
c00080fa:	01 ff                	add    edi,edi
c00080fc:	e9 4d fe ff ff       	jmp    c0007f4e <f_mkfs+0xaad>
c0008101:	8d 04 40             	lea    eax,[eax+eax*2]
c0008104:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0008109:	40                   	inc    eax
c000810a:	d1 e8                	shr    eax,1
c000810c:	83 c0 03             	add    eax,0x3
c000810f:	e9 62 fe ff ff       	jmp    c0007f76 <f_mkfs+0xad5>
c0008114:	31 d2                	xor    edx,edx
c0008116:	89 c8                	mov    eax,ecx
c0008118:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c000811c:	85 d2                	test   edx,edx
c000811e:	74 0c                	je     c000812c <f_mkfs+0xc8b>
c0008120:	49                   	dec    ecx
c0008121:	46                   	inc    esi
c0008122:	83 44 24 30 01       	add    DWORD PTR [esp+0x30],0x1
c0008127:	83 54 24 34 00       	adc    DWORD PTR [esp+0x34],0x0
c000812c:	89 c8                	mov    eax,ecx
c000812e:	31 d2                	xor    edx,edx
c0008130:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0008134:	01 44 24 38          	add    DWORD PTR [esp+0x38],eax
c0008138:	e9 c3 fe ff ff       	jmp    c0008000 <f_mkfs+0xb5f>
c000813d:	3d f5 0f 00 00       	cmp    eax,0xff5
c0008142:	77 31                	ja     c0008175 <f_mkfs+0xcd4>
c0008144:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0008149:	75 1b                	jne    c0008166 <f_mkfs+0xcc5>
c000814b:	8d 04 3f             	lea    eax,[edi+edi*1]
c000814e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008152:	3d 80 00 00 00       	cmp    eax,0x80
c0008157:	0f 86 d9 fd ff ff    	jbe    c0007f36 <f_mkfs+0xa95>
c000815d:	eb 07                	jmp    c0008166 <f_mkfs+0xcc5>
c000815f:	3d f5 0f 00 00       	cmp    eax,0xff5
c0008164:	76 0a                	jbe    c0008170 <f_mkfs+0xccf>
c0008166:	bb 0e 00 00 00       	mov    ebx,0xe
c000816b:	e9 ff 03 00 00       	jmp    c000856f <f_mkfs+0x10ce>
c0008170:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0008175:	31 d2                	xor    edx,edx
c0008177:	b9 00 02 00 00       	mov    ecx,0x200
c000817c:	89 e8                	mov    eax,ebp
c000817e:	e8 6c 9a ff ff       	call   c0001bef <mem_set>
c0008183:	b9 0b 00 00 00       	mov    ecx,0xb
c0008188:	ba a2 20 02 c0       	mov    edx,0xc00220a2
c000818d:	89 e8                	mov    eax,ebp
c000818f:	e8 46 9a ff ff       	call   c0001bda <mem_cpy>
c0008194:	8d 45 0b             	lea    eax,[ebp+0xb]
c0008197:	ba 00 02 00 00       	mov    edx,0x200
c000819c:	e8 2c 9a ff ff       	call   c0001bcd <st_word>
c00081a1:	89 f8                	mov    eax,edi
c00081a3:	0f b7 d6             	movzx  edx,si
c00081a6:	88 45 0d             	mov    BYTE PTR [ebp+0xd],al
c00081a9:	8d 45 0e             	lea    eax,[ebp+0xe]
c00081ac:	e8 1c 9a ff ff       	call   c0001bcd <st_word>
c00081b1:	8a 44 24 48          	mov    al,BYTE PTR [esp+0x48]
c00081b5:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00081ba:	88 45 10             	mov    BYTE PTR [ebp+0x10],al
c00081bd:	75 08                	jne    c00081c7 <f_mkfs+0xd26>
c00081bf:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c00081c7:	8d 45 11             	lea    eax,[ebp+0x11]
c00081ca:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00081ce:	e8 fa 99 ff ff       	call   c0001bcd <st_word>
c00081d3:	b8 ff ff 00 00       	mov    eax,0xffff
c00081d8:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c00081dc:	39 d0                	cmp    eax,edx
c00081de:	b8 00 00 00 00       	mov    eax,0x0
c00081e3:	1b 44 24 7c          	sbb    eax,DWORD PTR [esp+0x7c]
c00081e7:	72 0a                	jb     c00081f3 <f_mkfs+0xd52>
c00081e9:	8d 45 13             	lea    eax,[ebp+0x13]
c00081ec:	e8 dc 99 ff ff       	call   c0001bcd <st_word>
c00081f1:	eb 08                	jmp    c00081fb <f_mkfs+0xd5a>
c00081f3:	8d 45 20             	lea    eax,[ebp+0x20]
c00081f6:	e8 d6 99 ff ff       	call   c0001bd1 <st_dword>
c00081fb:	8d 45 18             	lea    eax,[ebp+0x18]
c00081fe:	ba 3f 00 00 00       	mov    edx,0x3f
c0008203:	c6 45 15 f8          	mov    BYTE PTR [ebp+0x15],0xf8
c0008207:	e8 c1 99 ff ff       	call   c0001bcd <st_word>
c000820c:	8d 45 1a             	lea    eax,[ebp+0x1a]
c000820f:	ba ff 00 00 00       	mov    edx,0xff
c0008214:	e8 b4 99 ff ff       	call   c0001bcd <st_word>
c0008219:	8d 45 1c             	lea    eax,[ebp+0x1c]
c000821c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008220:	e8 ac 99 ff ff       	call   c0001bd1 <st_dword>
c0008225:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c000822a:	75 57                	jne    c0008283 <f_mkfs+0xde2>
c000822c:	8d 45 43             	lea    eax,[ebp+0x43]
c000822f:	ba 00 00 21 50       	mov    edx,0x50210000
c0008234:	e8 98 99 ff ff       	call   c0001bd1 <st_dword>
c0008239:	8d 45 24             	lea    eax,[ebp+0x24]
c000823c:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0008240:	e8 8c 99 ff ff       	call   c0001bd1 <st_dword>
c0008245:	8d 45 2c             	lea    eax,[ebp+0x2c]
c0008248:	ba 02 00 00 00       	mov    edx,0x2
c000824d:	e8 7f 99 ff ff       	call   c0001bd1 <st_dword>
c0008252:	8d 45 30             	lea    eax,[ebp+0x30]
c0008255:	ba 01 00 00 00       	mov    edx,0x1
c000825a:	e8 6e 99 ff ff       	call   c0001bcd <st_word>
c000825f:	8d 45 32             	lea    eax,[ebp+0x32]
c0008262:	ba 06 00 00 00       	mov    edx,0x6
c0008267:	e8 61 99 ff ff       	call   c0001bcd <st_word>
c000826c:	c6 45 40 80          	mov    BYTE PTR [ebp+0x40],0x80
c0008270:	c6 45 42 29          	mov    BYTE PTR [ebp+0x42],0x29
c0008274:	8d 45 47             	lea    eax,[ebp+0x47]
c0008277:	b9 13 00 00 00       	mov    ecx,0x13
c000827c:	ba ae 20 02 c0       	mov    edx,0xc00220ae
c0008281:	eb 2f                	jmp    c00082b2 <f_mkfs+0xe11>
c0008283:	8d 45 27             	lea    eax,[ebp+0x27]
c0008286:	ba 00 00 21 50       	mov    edx,0x50210000
c000828b:	e8 41 99 ff ff       	call   c0001bd1 <st_dword>
c0008290:	0f b7 54 24 38       	movzx  edx,WORD PTR [esp+0x38]
c0008295:	8d 45 16             	lea    eax,[ebp+0x16]
c0008298:	e8 30 99 ff ff       	call   c0001bcd <st_word>
c000829d:	c6 45 24 80          	mov    BYTE PTR [ebp+0x24],0x80
c00082a1:	c6 45 26 29          	mov    BYTE PTR [ebp+0x26],0x29
c00082a5:	8d 45 2b             	lea    eax,[ebp+0x2b]
c00082a8:	b9 13 00 00 00       	mov    ecx,0x13
c00082ad:	ba c2 20 02 c0       	mov    edx,0xc00220c2
c00082b2:	e8 23 99 ff ff       	call   c0001bda <mem_cpy>
c00082b7:	8d b5 fe 01 00 00    	lea    esi,[ebp+0x1fe]
c00082bd:	ba 55 aa 00 00       	mov    edx,0xaa55
c00082c2:	89 f0                	mov    eax,esi
c00082c4:	e8 04 99 ff ff       	call   c0001bcd <st_word>
c00082c9:	83 ec 0c             	sub    esp,0xc
c00082cc:	6a 01                	push   0x1
c00082ce:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00082d2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00082d6:	55                   	push   ebp
c00082d7:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00082db:	e8 46 98 ff ff       	call   c0001b26 <disk_write>
c00082e0:	83 c4 20             	add    esp,0x20
c00082e3:	85 c0                	test   eax,eax
c00082e5:	0f 85 67 02 00 00    	jne    c0008552 <f_mkfs+0x10b1>
c00082eb:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00082f0:	0f 85 b7 00 00 00    	jne    c00083ad <f_mkfs+0xf0c>
c00082f6:	83 ec 0c             	sub    esp,0xc
c00082f9:	6a 01                	push   0x1
c00082fb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00082ff:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008303:	83 c0 06             	add    eax,0x6
c0008306:	83 d2 00             	adc    edx,0x0
c0008309:	52                   	push   edx
c000830a:	50                   	push   eax
c000830b:	55                   	push   ebp
c000830c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008310:	e8 11 98 ff ff       	call   c0001b26 <disk_write>
c0008315:	83 c4 20             	add    esp,0x20
c0008318:	b9 00 02 00 00       	mov    ecx,0x200
c000831d:	31 d2                	xor    edx,edx
c000831f:	89 e8                	mov    eax,ebp
c0008321:	e8 c9 98 ff ff       	call   c0001bef <mem_set>
c0008326:	ba 52 52 61 41       	mov    edx,0x41615252
c000832b:	89 e8                	mov    eax,ebp
c000832d:	e8 9f 98 ff ff       	call   c0001bd1 <st_dword>
c0008332:	8d 85 e4 01 00 00    	lea    eax,[ebp+0x1e4]
c0008338:	ba 72 72 41 61       	mov    edx,0x61417272
c000833d:	e8 8f 98 ff ff       	call   c0001bd1 <st_dword>
c0008342:	8d 53 ff             	lea    edx,[ebx-0x1]
c0008345:	8d 85 e8 01 00 00    	lea    eax,[ebp+0x1e8]
c000834b:	e8 81 98 ff ff       	call   c0001bd1 <st_dword>
c0008350:	8d 85 ec 01 00 00    	lea    eax,[ebp+0x1ec]
c0008356:	ba 02 00 00 00       	mov    edx,0x2
c000835b:	e8 71 98 ff ff       	call   c0001bd1 <st_dword>
c0008360:	ba 55 aa 00 00       	mov    edx,0xaa55
c0008365:	89 f0                	mov    eax,esi
c0008367:	e8 61 98 ff ff       	call   c0001bcd <st_word>
c000836c:	83 ec 0c             	sub    esp,0xc
c000836f:	6a 01                	push   0x1
c0008371:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008375:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008379:	83 c0 07             	add    eax,0x7
c000837c:	83 d2 00             	adc    edx,0x0
c000837f:	52                   	push   edx
c0008380:	50                   	push   eax
c0008381:	55                   	push   ebp
c0008382:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008386:	e8 9b 97 ff ff       	call   c0001b26 <disk_write>
c000838b:	83 c4 14             	add    esp,0x14
c000838e:	6a 01                	push   0x1
c0008390:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008394:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008398:	83 c0 01             	add    eax,0x1
c000839b:	83 d2 00             	adc    edx,0x0
c000839e:	52                   	push   edx
c000839f:	50                   	push   eax
c00083a0:	55                   	push   ebp
c00083a1:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00083a5:	e8 7c 97 ff ff       	call   c0001b26 <disk_write>
c00083aa:	83 c4 20             	add    esp,0x20
c00083ad:	8b 8c 24 bc 00 00 00 	mov    ecx,DWORD PTR [esp+0xbc]
c00083b4:	31 d2                	xor    edx,edx
c00083b6:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c00083bc:	31 db                	xor    ebx,ebx
c00083be:	89 e8                	mov    eax,ebp
c00083c0:	e8 2a 98 ff ff       	call   c0001bef <mem_set>
c00083c5:	80 7c 24 18 01       	cmp    BYTE PTR [esp+0x18],0x1
c00083ca:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00083d1:	0f 94 c3             	sete   bl
c00083d4:	4b                   	dec    ebx
c00083d5:	81 e3 00 00 00 ff    	and    ebx,0xff000000
c00083db:	81 c3 f8 ff ff 00    	add    ebx,0xfffff8
c00083e1:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00083e6:	75 21                	jne    c0008409 <f_mkfs+0xf68>
c00083e8:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c00083ed:	89 e8                	mov    eax,ebp
c00083ef:	e8 dd 97 ff ff       	call   c0001bd1 <st_dword>
c00083f4:	8d 45 04             	lea    eax,[ebp+0x4]
c00083f7:	83 ca ff             	or     edx,0xffffffff
c00083fa:	e8 d2 97 ff ff       	call   c0001bd1 <st_dword>
c00083ff:	8d 45 08             	lea    eax,[ebp+0x8]
c0008402:	ba ff ff ff 0f       	mov    edx,0xfffffff
c0008407:	eb 04                	jmp    c000840d <f_mkfs+0xf6c>
c0008409:	89 da                	mov    edx,ebx
c000840b:	89 e8                	mov    eax,ebp
c000840d:	e8 bf 97 ff ff       	call   c0001bd1 <st_dword>
c0008412:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0008416:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000841a:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000841e:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0008422:	39 ce                	cmp    esi,ecx
c0008424:	76 02                	jbe    c0008428 <f_mkfs+0xf87>
c0008426:	89 ce                	mov    esi,ecx
c0008428:	83 ec 0c             	sub    esp,0xc
c000842b:	56                   	push   esi
c000842c:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008430:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008434:	55                   	push   ebp
c0008435:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008439:	e8 e8 96 ff ff       	call   c0001b26 <disk_write>
c000843e:	83 c4 20             	add    esp,0x20
c0008441:	85 c0                	test   eax,eax
c0008443:	0f 85 09 01 00 00    	jne    c0008552 <f_mkfs+0x10b1>
c0008449:	31 d2                	xor    edx,edx
c000844b:	b9 00 02 00 00       	mov    ecx,0x200
c0008450:	89 e8                	mov    eax,ebp
c0008452:	e8 98 97 ff ff       	call   c0001bef <mem_set>
c0008457:	31 d2                	xor    edx,edx
c0008459:	01 74 24 30          	add    DWORD PTR [esp+0x30],esi
c000845d:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c0008461:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c0008465:	75 b3                	jne    c000841a <f_mkfs+0xf79>
c0008467:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000846a:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0008471:	40                   	inc    eax
c0008472:	39 44 24 40          	cmp    DWORD PTR [esp+0x40],eax
c0008476:	0f 87 65 ff ff ff    	ja     c00083e1 <f_mkfs+0xf40>
c000847c:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008481:	74 04                	je     c0008487 <f_mkfs+0xfe6>
c0008483:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c0008487:	89 fb                	mov    ebx,edi
c0008489:	3b 7c 24 20          	cmp    edi,DWORD PTR [esp+0x20]
c000848d:	76 04                	jbe    c0008493 <f_mkfs+0xff2>
c000848f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008493:	83 ec 0c             	sub    esp,0xc
c0008496:	53                   	push   ebx
c0008497:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000849b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000849f:	55                   	push   ebp
c00084a0:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00084a4:	e8 7d 96 ff ff       	call   c0001b26 <disk_write>
c00084a9:	83 c4 20             	add    esp,0x20
c00084ac:	85 c0                	test   eax,eax
c00084ae:	0f 85 9e 00 00 00    	jne    c0008552 <f_mkfs+0x10b1>
c00084b4:	31 d2                	xor    edx,edx
c00084b6:	01 5c 24 30          	add    DWORD PTR [esp+0x30],ebx
c00084ba:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c00084be:	29 df                	sub    edi,ebx
c00084c0:	75 c5                	jne    c0008487 <f_mkfs+0xfe6>
c00084c2:	b1 0c                	mov    cl,0xc
c00084c4:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00084c9:	74 1d                	je     c00084e8 <f_mkfs+0x1047>
c00084cb:	b8 ff ff 00 00       	mov    eax,0xffff
c00084d0:	b1 06                	mov    cl,0x6
c00084d2:	3b 44 24 78          	cmp    eax,DWORD PTR [esp+0x78]
c00084d6:	1b 7c 24 7c          	sbb    edi,DWORD PTR [esp+0x7c]
c00084da:	72 0c                	jb     c00084e8 <f_mkfs+0x1047>
c00084dc:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c00084e1:	0f 94 c1             	sete   cl
c00084e4:	8d 4c 49 01          	lea    ecx,[ecx+ecx*2+0x1]
c00084e8:	f6 44 24 3f 08       	test   BYTE PTR [esp+0x3f],0x8
c00084ed:	75 4c                	jne    c000853b <f_mkfs+0x109a>
c00084ef:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c00084f3:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c00084f7:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c00084fe:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c0008505:	c7 84 24 88 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x88],0x0
c0008510:	c7 84 24 8c 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x8c],0x0
c000851b:	0f b6 c9             	movzx  ecx,cl
c000851e:	83 ec 0c             	sub    esp,0xc
c0008521:	55                   	push   ebp
c0008522:	8d 94 24 90 00 00 00 	lea    edx,[esp+0x90]
c0008529:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000852d:	e8 f9 bf ff ff       	call   c000452b <create_partition>
c0008532:	83 c4 10             	add    esp,0x10
c0008535:	89 c3                	mov    ebx,eax
c0008537:	85 c0                	test   eax,eax
c0008539:	75 34                	jne    c000856f <f_mkfs+0x10ce>
c000853b:	31 db                	xor    ebx,ebx
c000853d:	50                   	push   eax
c000853e:	6a 00                	push   0x0
c0008540:	6a 00                	push   0x0
c0008542:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0008546:	e8 f1 95 ff ff       	call   c0001b3c <disk_ioctl>
c000854b:	83 c4 10             	add    esp,0x10
c000854e:	85 c0                	test   eax,eax
c0008550:	74 1d                	je     c000856f <f_mkfs+0x10ce>
c0008552:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c000855a:	75 0c                	jne    c0008568 <f_mkfs+0x10c7>
c000855c:	83 ec 0c             	sub    esp,0xc
c000855f:	55                   	push   ebp
c0008560:	e8 77 00 00 00       	call   c00085dc <ff_memfree>
c0008565:	83 c4 10             	add    esp,0x10
c0008568:	bb 01 00 00 00       	mov    ebx,0x1
c000856d:	eb 48                	jmp    c00085b7 <f_mkfs+0x1116>
c000856f:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c0008577:	75 3e                	jne    c00085b7 <f_mkfs+0x1116>
c0008579:	83 ec 0c             	sub    esp,0xc
c000857c:	55                   	push   ebp
c000857d:	e8 5a 00 00 00       	call   c00085dc <ff_memfree>
c0008582:	83 c4 10             	add    esp,0x10
c0008585:	eb 30                	jmp    c00085b7 <f_mkfs+0x1116>
c0008587:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c000858c:	0f 85 eb fa ff ff    	jne    c000807d <f_mkfs+0xbdc>
c0008592:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0008596:	81 ff 80 00 00 00    	cmp    edi,0x80
c000859c:	0f 86 b8 f9 ff ff    	jbe    c0007f5a <f_mkfs+0xab9>
c00085a2:	e9 bf fb ff ff       	jmp    c0008166 <f_mkfs+0xcc5>
c00085a7:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c00085ac:	0f 85 c0 fa ff ff    	jne    c0008072 <f_mkfs+0xbd1>
c00085b2:	e9 af fb ff ff       	jmp    c0008166 <f_mkfs+0xcc5>
c00085b7:	81 c4 9c 00 00 00    	add    esp,0x9c
c00085bd:	89 d8                	mov    eax,ebx
c00085bf:	5b                   	pop    ebx
c00085c0:	5e                   	pop    esi
c00085c1:	5f                   	pop    edi
c00085c2:	5d                   	pop    ebp
c00085c3:	c3                   	ret    

c00085c4 <ff_memalloc>:
c00085c4:	83 ec 0c             	sub    esp,0xc
c00085c7:	83 ec 0c             	sub    esp,0xc
c00085ca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00085ce:	e8 f0 13 00 00       	call   c00099c3 <malloc>
c00085d3:	83 c4 10             	add    esp,0x10
c00085d6:	83 c4 0c             	add    esp,0xc
c00085d9:	c3                   	ret    
c00085da:	66 90                	xchg   ax,ax

c00085dc <ff_memfree>:
c00085dc:	83 ec 0c             	sub    esp,0xc
c00085df:	83 ec 0c             	sub    esp,0xc
c00085e2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00085e6:	e8 e8 13 00 00       	call   c00099d3 <free>
c00085eb:	83 c4 10             	add    esp,0x10
c00085ee:	90                   	nop
c00085ef:	83 c4 0c             	add    esp,0xc
c00085f2:	c3                   	ret    
c00085f3:	90                   	nop

c00085f4 <ff_uni2oem>:
c00085f4:	83 ec 14             	sub    esp,0x14
c00085f7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00085fb:	66 89 04 24          	mov    WORD PTR [esp],ax
c00085ff:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0008606:	c7 44 24 0c e0 23 02 c0 	mov    DWORD PTR [esp+0xc],0xc00223e0
c000860e:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c0008613:	77 0b                	ja     c0008620 <ff_uni2oem+0x2c>
c0008615:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0008619:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c000861e:	eb 60                	jmp    c0008680 <ff_uni2oem+0x8c>
c0008620:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c0008628:	77 56                	ja     c0008680 <ff_uni2oem+0x8c>
c000862a:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c0008630:	75 4e                	jne    c0008680 <ff_uni2oem+0x8c>
c0008632:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0008639:	eb 0d                	jmp    c0008648 <ff_uni2oem+0x54>
c000863b:	90                   	nop
c000863c:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0008641:	40                   	inc    eax
c0008642:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0008647:	90                   	nop
c0008648:	66 83 7c 24 12 7f    	cmp    WORD PTR [esp+0x12],0x7f
c000864e:	77 1c                	ja     c000866c <ff_uni2oem+0x78>
c0008650:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0008655:	01 c0                	add    eax,eax
c0008657:	89 c2                	mov    edx,eax
c0008659:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000865d:	01 d0                	add    eax,edx
c000865f:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008662:	0f b7 c0             	movzx  eax,ax
c0008665:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0008669:	75 d1                	jne    c000863c <ff_uni2oem+0x48>
c000866b:	90                   	nop
c000866c:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0008671:	83 e8 80             	sub    eax,0xffffff80
c0008674:	25 ff 00 00 00       	and    eax,0xff
c0008679:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c000867e:	66 90                	xchg   ax,ax
c0008680:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0008685:	83 c4 14             	add    esp,0x14
c0008688:	c3                   	ret    
c0008689:	8d 76 00             	lea    esi,[esi+0x0]

c000868c <ff_oem2uni>:
c000868c:	83 ec 18             	sub    esp,0x18
c000868f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0008693:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008697:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c000869c:	66 89 04 24          	mov    WORD PTR [esp],ax
c00086a0:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c00086a7:	c7 44 24 10 e0 23 02 c0 	mov    DWORD PTR [esp+0x10],0xc00223e0
c00086af:	66 83 7c 24 04 7f    	cmp    WORD PTR [esp+0x4],0x7f
c00086b5:	77 0d                	ja     c00086c4 <ff_oem2uni+0x38>
c00086b7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00086bb:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c00086c0:	eb 32                	jmp    c00086f4 <ff_oem2uni+0x68>
c00086c2:	66 90                	xchg   ax,ax
c00086c4:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c00086ca:	75 28                	jne    c00086f4 <ff_oem2uni+0x68>
c00086cc:	66 81 7c 24 04 ff 00 	cmp    WORD PTR [esp+0x4],0xff
c00086d3:	77 1f                	ja     c00086f4 <ff_oem2uni+0x68>
c00086d5:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00086da:	05 80 ff ff 7f       	add    eax,0x7fffff80
c00086df:	01 c0                	add    eax,eax
c00086e1:	89 c2                	mov    edx,eax
c00086e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00086e7:	01 d0                	add    eax,edx
c00086e9:	66 8b 00             	mov    ax,WORD PTR [eax]
c00086ec:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c00086f1:	8d 76 00             	lea    esi,[esi+0x0]
c00086f4:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c00086f9:	83 c4 18             	add    esp,0x18
c00086fc:	c3                   	ret    
c00086fd:	8d 76 00             	lea    esi,[esi+0x0]

c0008700 <ff_wtoupper>:
c0008700:	83 ec 10             	sub    esp,0x10
c0008703:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c000870b:	0f 87 4f 01 00 00    	ja     c0008860 <ff_wtoupper+0x160>
c0008711:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008715:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c000871a:	66 81 7c 24 0a ff 0f 	cmp    WORD PTR [esp+0xa],0xfff
c0008721:	77 09                	ja     c000872c <ff_wtoupper+0x2c>
c0008723:	b8 e0 21 02 c0       	mov    eax,0xc00221e0
c0008728:	eb 0a                	jmp    c0008734 <ff_wtoupper+0x34>
c000872a:	66 90                	xchg   ax,ax
c000872c:	b8 20 21 02 c0       	mov    eax,0xc0022120
c0008731:	8d 76 00             	lea    esi,[esi+0x0]
c0008734:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008738:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000873c:	8d 50 02             	lea    edx,[eax+0x2]
c000873f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008743:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008746:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c000874b:	66 83 7c 24 08 00    	cmp    WORD PTR [esp+0x8],0x0
c0008751:	0f 84 fd 00 00 00    	je     c0008854 <ff_wtoupper+0x154>
c0008757:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c000875c:	66 3b 44 24 08       	cmp    ax,WORD PTR [esp+0x8]
c0008761:	0f 82 ed 00 00 00    	jb     c0008854 <ff_wtoupper+0x154>
c0008767:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000876b:	8d 50 02             	lea    edx,[eax+0x2]
c000876e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008772:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008775:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c000877a:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c000877f:	66 c1 e8 08          	shr    ax,0x8
c0008783:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c0008788:	66 81 64 24 06 ff 00 	and    WORD PTR [esp+0x6],0xff
c000878f:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0008794:	0f b7 4c 24 08       	movzx  ecx,WORD PTR [esp+0x8]
c0008799:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c000879e:	01 ca                	add    edx,ecx
c00087a0:	39 d0                	cmp    eax,edx
c00087a2:	0f 8d 8c 00 00 00    	jge    c0008834 <ff_wtoupper+0x134>
c00087a8:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00087ad:	83 f8 08             	cmp    eax,0x8
c00087b0:	0f 87 9a 00 00 00    	ja     c0008850 <ff_wtoupper+0x150>
c00087b6:	8b 04 85 e0 20 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffddf20]
c00087bd:	ff e0                	jmp    eax
c00087bf:	90                   	nop
c00087c0:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c00087c5:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c00087ca:	29 c2                	sub    edx,eax
c00087cc:	89 d0                	mov    eax,edx
c00087ce:	01 c0                	add    eax,eax
c00087d0:	89 c2                	mov    edx,eax
c00087d2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00087d6:	01 d0                	add    eax,edx
c00087d8:	66 8b 00             	mov    ax,WORD PTR [eax]
c00087db:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00087e0:	eb 4e                	jmp    c0008830 <ff_wtoupper+0x130>
c00087e2:	66 90                	xchg   ax,ax
c00087e4:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00087e9:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c00087ed:	83 e0 01             	and    eax,0x1
c00087f0:	66 29 44 24 0a       	sub    WORD PTR [esp+0xa],ax
c00087f5:	eb 39                	jmp    c0008830 <ff_wtoupper+0x130>
c00087f7:	90                   	nop
c00087f8:	66 83 6c 24 0a 10    	sub    WORD PTR [esp+0xa],0x10
c00087fe:	eb 30                	jmp    c0008830 <ff_wtoupper+0x130>
c0008800:	66 83 6c 24 0a 20    	sub    WORD PTR [esp+0xa],0x20
c0008806:	eb 28                	jmp    c0008830 <ff_wtoupper+0x130>
c0008808:	66 83 6c 24 0a 30    	sub    WORD PTR [esp+0xa],0x30
c000880e:	eb 20                	jmp    c0008830 <ff_wtoupper+0x130>
c0008810:	66 83 6c 24 0a 1a    	sub    WORD PTR [esp+0xa],0x1a
c0008816:	eb 18                	jmp    c0008830 <ff_wtoupper+0x130>
c0008818:	66 83 44 24 0a 08    	add    WORD PTR [esp+0xa],0x8
c000881e:	eb 10                	jmp    c0008830 <ff_wtoupper+0x130>
c0008820:	66 83 6c 24 0a 50    	sub    WORD PTR [esp+0xa],0x50
c0008826:	eb 08                	jmp    c0008830 <ff_wtoupper+0x130>
c0008828:	66 81 6c 24 0a 60 1c 	sub    WORD PTR [esp+0xa],0x1c60
c000882f:	90                   	nop
c0008830:	eb 1e                	jmp    c0008850 <ff_wtoupper+0x150>
c0008832:	66 90                	xchg   ax,ax
c0008834:	66 83 7c 24 04 00    	cmp    WORD PTR [esp+0x4],0x0
c000883a:	0f 85 f8 fe ff ff    	jne    c0008738 <ff_wtoupper+0x38>
c0008840:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c0008845:	01 c0                	add    eax,eax
c0008847:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c000884b:	e9 e8 fe ff ff       	jmp    c0008738 <ff_wtoupper+0x38>
c0008850:	90                   	nop
c0008851:	8d 76 00             	lea    esi,[esi+0x0]
c0008854:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0008859:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000885d:	8d 76 00             	lea    esi,[esi+0x0]
c0008860:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008864:	83 c4 10             	add    esp,0x10
c0008867:	c3                   	ret    

c0008868 <CPU::current()>:
c0008868:	a1 68 64 02 c0       	mov    eax,ds:0xc0026468
c000886d:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0008873:	c3                   	ret    

c0008874 <operator new(unsigned long)>:
c0008874:	e9 4a 11 00 00       	jmp    c00099c3 <malloc>

c0008879 <operator delete(void*)>:
c0008879:	e9 65 11 00 00       	jmp    c00099e3 <rfree>

c000887e <disableIRQs()>:
c000887e:	fa                   	cli    
c000887f:	ff 05 28 79 02 c0    	inc    DWORD PTR ds:0xc0027928
c0008885:	c3                   	ret    

c0008886 <enableIRQs()>:
c0008886:	a1 28 79 02 c0       	mov    eax,ds:0xc0027928
c000888b:	48                   	dec    eax
c000888c:	a3 28 79 02 c0       	mov    ds:0xc0027928,eax
c0008891:	75 01                	jne    c0008894 <enableIRQs()+0xe>
c0008893:	fb                   	sti    
c0008894:	c3                   	ret    

c0008895 <lockScheduler()>:
c0008895:	fa                   	cli    
c0008896:	ff 05 28 79 02 c0    	inc    DWORD PTR ds:0xc0027928
c000889c:	c3                   	ret    

c000889d <unlockScheduler()>:
c000889d:	a1 28 79 02 c0       	mov    eax,ds:0xc0027928
c00088a2:	48                   	dec    eax
c00088a3:	a3 28 79 02 c0       	mov    ds:0xc0027928,eax
c00088a8:	75 01                	jne    c00088ab <unlockScheduler()+0xe>
c00088aa:	fb                   	sti    
c00088ab:	c3                   	ret    

c00088ac <lockStuff()>:
c00088ac:	fa                   	cli    
c00088ad:	ff 05 28 79 02 c0    	inc    DWORD PTR ds:0xc0027928
c00088b3:	ff 05 24 79 02 c0    	inc    DWORD PTR ds:0xc0027924
c00088b9:	c3                   	ret    

c00088ba <unlockStuff()>:
c00088ba:	83 ec 0c             	sub    esp,0xc
c00088bd:	a1 24 79 02 c0       	mov    eax,ds:0xc0027924
c00088c2:	48                   	dec    eax
c00088c3:	a3 24 79 02 c0       	mov    ds:0xc0027924,eax
c00088c8:	75 18                	jne    c00088e2 <unlockStuff()+0x28>
c00088ca:	83 3d 20 79 02 c0 00 	cmp    DWORD PTR ds:0xc0027920,0x0
c00088d1:	74 0f                	je     c00088e2 <unlockStuff()+0x28>
c00088d3:	c7 05 20 79 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027920,0x0
c00088dd:	e8 72 f6 00 00       	call   c0017f54 <schedule()>
c00088e2:	a1 28 79 02 c0       	mov    eax,ds:0xc0027928
c00088e7:	48                   	dec    eax
c00088e8:	a3 28 79 02 c0       	mov    ds:0xc0027928,eax
c00088ed:	75 01                	jne    c00088f0 <unlockStuff()+0x36>
c00088ef:	fb                   	sti    
c00088f0:	83 c4 0c             	add    esp,0xc
c00088f3:	c3                   	ret    

c00088f4 <Virt::getAKernelVAS()>:
c00088f4:	a1 90 65 02 c0       	mov    eax,ds:0xc0026590
c00088f9:	c3                   	ret    

c00088fa <__not_memcpy>:
c00088fa:	57                   	push   edi
c00088fb:	56                   	push   esi
c00088fc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008900:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0008904:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0008908:	89 c7                	mov    edi,eax
c000890a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000890c:	5e                   	pop    esi
c000890d:	5f                   	pop    edi
c000890e:	c3                   	ret    
c000890f:	90                   	nop

c0008910 <Krnl::resolveCompatibilitySymbol(char*)>:
c0008910:	83 ec 0c             	sub    esp,0xc
c0008913:	83 ec 08             	sub    esp,0x8
c0008916:	68 e0 24 02 c0       	push   0xc00224e0
c000891b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000891f:	e8 a8 7e ff ff       	call   c00007cc <strcmp>
c0008924:	83 c4 10             	add    esp,0x10
c0008927:	85 c0                	test   eax,eax
c0008929:	0f 94 c0             	sete   al
c000892c:	84 c0                	test   al,al
c000892e:	74 0c                	je     c000893c <Krnl::resolveCompatibilitySymbol(char*)+0x2c>
c0008930:	b8 68 64 02 c0       	mov    eax,0xc0026468
c0008935:	e9 ea 00 00 00       	jmp    c0008a24 <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c000893a:	66 90                	xchg   ax,ax
c000893c:	83 ec 08             	sub    esp,0x8
c000893f:	68 e9 24 02 c0       	push   0xc00224e9
c0008944:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008948:	e8 7f 7e ff ff       	call   c00007cc <strcmp>
c000894d:	83 c4 10             	add    esp,0x10
c0008950:	85 c0                	test   eax,eax
c0008952:	0f 94 c0             	sete   al
c0008955:	84 c0                	test   al,al
c0008957:	74 0b                	je     c0008964 <Krnl::resolveCompatibilitySymbol(char*)+0x54>
c0008959:	b8 84 0f 02 c0       	mov    eax,0xc0020f84
c000895e:	e9 c1 00 00 00       	jmp    c0008a24 <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c0008963:	90                   	nop
c0008964:	83 ec 08             	sub    esp,0x8
c0008967:	68 f3 24 02 c0       	push   0xc00224f3
c000896c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008970:	e8 57 7e ff ff       	call   c00007cc <strcmp>
c0008975:	83 c4 10             	add    esp,0x10
c0008978:	85 c0                	test   eax,eax
c000897a:	0f 94 c0             	sete   al
c000897d:	84 c0                	test   al,al
c000897f:	74 0b                	je     c000898c <Krnl::resolveCompatibilitySymbol(char*)+0x7c>
c0008981:	b8 b8 0c 02 c0       	mov    eax,0xc0020cb8
c0008986:	e9 99 00 00 00       	jmp    c0008a24 <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c000898b:	90                   	nop
c000898c:	83 ec 08             	sub    esp,0x8
c000898f:	68 fc 24 02 c0       	push   0xc00224fc
c0008994:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008998:	e8 2f 7e ff ff       	call   c00007cc <strcmp>
c000899d:	83 c4 10             	add    esp,0x10
c00089a0:	85 c0                	test   eax,eax
c00089a2:	0f 94 c0             	sete   al
c00089a5:	84 c0                	test   al,al
c00089a7:	74 07                	je     c00089b0 <Krnl::resolveCompatibilitySymbol(char*)+0xa0>
c00089a9:	b8 84 10 02 c0       	mov    eax,0xc0021084
c00089ae:	eb 74                	jmp    c0008a24 <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c00089b0:	83 ec 08             	sub    esp,0x8
c00089b3:	68 06 25 02 c0       	push   0xc0022506
c00089b8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00089bc:	e8 0b 7e ff ff       	call   c00007cc <strcmp>
c00089c1:	83 c4 10             	add    esp,0x10
c00089c4:	85 c0                	test   eax,eax
c00089c6:	0f 94 c0             	sete   al
c00089c9:	84 c0                	test   al,al
c00089cb:	74 07                	je     c00089d4 <Krnl::resolveCompatibilitySymbol(char*)+0xc4>
c00089cd:	b8 04 0e 02 c0       	mov    eax,0xc0020e04
c00089d2:	eb 50                	jmp    c0008a24 <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c00089d4:	83 ec 08             	sub    esp,0x8
c00089d7:	68 0f 25 02 c0       	push   0xc002250f
c00089dc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00089e0:	e8 e7 7d ff ff       	call   c00007cc <strcmp>
c00089e5:	83 c4 10             	add    esp,0x10
c00089e8:	85 c0                	test   eax,eax
c00089ea:	0f 94 c0             	sete   al
c00089ed:	84 c0                	test   al,al
c00089ef:	74 07                	je     c00089f8 <Krnl::resolveCompatibilitySymbol(char*)+0xe8>
c00089f1:	b8 6c 64 02 c0       	mov    eax,0xc002646c
c00089f6:	eb 2c                	jmp    c0008a24 <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c00089f8:	83 ec 08             	sub    esp,0x8
c00089fb:	68 1c 25 02 c0       	push   0xc002251c
c0008a00:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008a04:	e8 c3 7d ff ff       	call   c00007cc <strcmp>
c0008a09:	83 c4 10             	add    esp,0x10
c0008a0c:	85 c0                	test   eax,eax
c0008a0e:	0f 94 c0             	sete   al
c0008a11:	84 c0                	test   al,al
c0008a13:	74 07                	je     c0008a1c <Krnl::resolveCompatibilitySymbol(char*)+0x10c>
c0008a15:	b8 6d 64 02 c0       	mov    eax,0xc002646d
c0008a1a:	eb 08                	jmp    c0008a24 <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c0008a1c:	b8 00 00 00 00       	mov    eax,0x0
c0008a21:	8d 76 00             	lea    esi,[esi+0x0]
c0008a24:	83 c4 0c             	add    esp,0xc
c0008a27:	c3                   	ret    

c0008a28 <Computer::close(int, int, void*)>:
c0008a28:	57                   	push   edi
c0008a29:	56                   	push   esi
c0008a2a:	53                   	push   ebx
c0008a2b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008a2f:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008a33:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0008a37:	83 ec 0c             	sub    esp,0xc
c0008a3a:	ff b3 e4 01 00 00    	push   DWORD PTR [ebx+0x1e4]
c0008a40:	e8 4b 56 00 00       	call   c000e090 <Device::closeAll()>
c0008a45:	8b 83 e4 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e4]
c0008a4b:	83 c4 10             	add    esp,0x10
c0008a4e:	8b 10                	mov    edx,DWORD PTR [eax]
c0008a50:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c0008a54:	c7 44 24 18 0f 27 00 00 	mov    DWORD PTR [esp+0x18],0x270f
c0008a5c:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0008a60:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008a64:	5b                   	pop    ebx
c0008a65:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0008a68:	5e                   	pop    esi
c0008a69:	5f                   	pop    edi
c0008a6a:	ff e0                	jmp    eax

c0008a6c <Krnl::firstTask()>:
c0008a6c:	53                   	push   ebx
c0008a6d:	83 ec 14             	sub    esp,0x14
c0008a70:	68 29 25 02 c0       	push   0xc0022529
c0008a75:	e8 a3 0f 00 00       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0008a7a:	fb                   	sti    
c0008a7b:	c7 04 24 40 25 02 c0 	mov    DWORD PTR [esp],0xc0022540
c0008a82:	e8 96 0f 00 00       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0008a87:	c7 04 24 1f 07 00 00 	mov    DWORD PTR [esp],0x71f
c0008a8e:	e8 30 0f 00 00       	call   c00099c3 <malloc>
c0008a93:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0008a9a:	89 c3                	mov    ebx,eax
c0008a9c:	ff 35 50 79 02 c0    	push   DWORD PTR ds:0xc0027950
c0008aa2:	68 59 25 02 c0       	push   0xc0022559
c0008aa7:	6a 01                	push   0x1
c0008aa9:	50                   	push   eax
c0008aaa:	e8 81 f0 00 00       	call   c0017b30 <Process::Process(bool, char const*, Process*, char**)>
c0008aaf:	83 c4 20             	add    esp,0x20
c0008ab2:	68 ff 00 00 00       	push   0xff
c0008ab7:	6a 00                	push   0x0
c0008ab9:	68 bd 93 00 c0       	push   0xc00093bd
c0008abe:	53                   	push   ebx
c0008abf:	e8 74 f2 00 00       	call   c0017d38 <Process::createThread(void (*)(void*), void*, int)>
c0008ac4:	6a 7a                	push   0x7a
c0008ac6:	6a 00                	push   0x0
c0008ac8:	68 7c 87 01 c0       	push   0xc001877c
c0008acd:	ff 35 50 79 02 c0    	push   DWORD PTR ds:0xc0027950
c0008ad3:	e8 60 f2 00 00       	call   c0017d38 <Process::createThread(void (*)(void*), void*, int)>
c0008ad8:	83 c4 14             	add    esp,0x14
c0008adb:	a3 08 79 02 c0       	mov    ds:0xc0027908,eax
c0008ae0:	68 00 27 02 c0       	push   0xc0022700
c0008ae5:	c6 05 6d 64 02 c0 01 	mov    BYTE PTR ds:0xc002646d,0x1
c0008aec:	e8 2c 0f 00 00       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0008af1:	e8 61 00 01 00       	call   c0018b57 <Vm::initialise8086()>
c0008af6:	e8 5b 43 00 00       	call   c000ce56 <Fs::initVFS()>
c0008afb:	c7 04 24 66 25 02 c0 	mov    DWORD PTR [esp],0xc0022566
c0008b02:	e8 16 0f 00 00       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0008b07:	a1 68 64 02 c0       	mov    eax,ds:0xc0026468
c0008b0c:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c0008b12:	8b 10                	mov    edx,DWORD PTR [eax]
c0008b14:	6a 00                	push   0x0
c0008b16:	6a 00                	push   0x0
c0008b18:	6a 00                	push   0x0
c0008b1a:	50                   	push   eax
c0008b1b:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0008b1e:	83 c4 14             	add    esp,0x14
c0008b21:	68 00 27 02 c0       	push   0xc0022700
c0008b26:	e8 f2 0e 00 00       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0008b2b:	e8 6e d8 00 00       	call   c001639e <Sys::loadSyscalls()>
c0008b30:	e8 43 b7 00 00       	call   c0014278 <Krnl::loadSystemEnv()>
c0008b35:	83 c4 0c             	add    esp,0xc
c0008b38:	6a 3a                	push   0x3a
c0008b3a:	68 80 25 02 c0       	push   0xc0022580
c0008b3f:	68 89 25 02 c0       	push   0xc0022589
c0008b44:	e8 18 c6 00 00       	call   c0015161 <Reg::readIntWithDefault(char*, char*, int)>
c0008b49:	89 04 24             	mov    DWORD PTR [esp],eax
c0008b4c:	e8 f7 4d 00 00       	call   c000d948 <User::loadClockSettings(int)>
c0008b51:	c7 04 24 24 27 02 c0 	mov    DWORD PTR [esp],0xc0022724
c0008b58:	e8 c0 0e 00 00       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0008b5d:	58                   	pop    eax
c0008b5e:	a1 68 64 02 c0       	mov    eax,ds:0xc0026468
c0008b63:	ff b0 e4 01 00 00    	push   DWORD PTR [eax+0x1e4]
c0008b69:	e8 e2 54 00 00       	call   c000e050 <Device::loadDriversForAll()>
c0008b6e:	c7 04 24 91 25 02 c0 	mov    DWORD PTR [esp],0xc0022591
c0008b75:	e8 a3 0e 00 00       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0008b7a:	e8 61 b2 00 00       	call   c0013de0 <Krnl::startCPUs()>
c0008b7f:	c7 04 24 ab 25 02 c0 	mov    DWORD PTR [esp],0xc00225ab
c0008b86:	e8 92 0e 00 00       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0008b8b:	5a                   	pop    edx
c0008b8c:	8b 1d 68 64 02 c0    	mov    ebx,DWORD PTR ds:0xc0026468
c0008b92:	59                   	pop    ecx
c0008b93:	6a 01                	push   0x1
c0008b95:	68 bc 25 02 c0       	push   0xc00225bc
c0008b9a:	e8 cf e9 00 00       	call   c001756e <Thr::loadDLL(char const*, bool)>
c0008b9f:	5a                   	pop    edx
c0008ba0:	59                   	pop    ecx
c0008ba1:	53                   	push   ebx
c0008ba2:	50                   	push   eax
c0008ba3:	e8 f7 eb 00 00       	call   c001779f <Thr::executeDLL(unsigned long, void*)>
c0008ba8:	83 c4 10             	add    esp,0x10
c0008bab:	83 ec 0c             	sub    esp,0xc
c0008bae:	6a 02                	push   0x2
c0008bb0:	e8 97 f5 00 00       	call   c001814c <blockTask(TaskState)>
c0008bb5:	83 c4 10             	add    esp,0x10
c0008bb8:	eb f1                	jmp    c0008bab <Krnl::firstTask()+0x13f>

c0008bba <Computer::Computer()>:
c0008bba:	83 ec 0c             	sub    esp,0xc
c0008bbd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008bc1:	83 ec 08             	sub    esp,0x8
c0008bc4:	68 d8 25 02 c0       	push   0xc00225d8
c0008bc9:	50                   	push   eax
c0008bca:	e8 3b 55 00 00       	call   c000e10a <Device::Device(char const*)>
c0008bcf:	83 c4 10             	add    esp,0x10
c0008bd2:	ba d4 27 02 c0       	mov    edx,0xc00227d4
c0008bd7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008bdb:	89 10                	mov    DWORD PTR [eax],edx
c0008bdd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008be1:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c0008beb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008bef:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c0008bf9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008bfd:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0008c03:	83 ca 04             	or     edx,0x4
c0008c06:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0008c0c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c10:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008c16:	0f b6 d0             	movzx  edx,al
c0008c19:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c1d:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c0008c24:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c28:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008c2e:	0f b6 d0             	movzx  edx,al
c0008c31:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c35:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0008c3a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c3e:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008c44:	8d 50 01             	lea    edx,[eax+0x1]
c0008c47:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0008c4b:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0008c51:	0f b6 d0             	movzx  edx,al
c0008c54:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c58:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0008c5c:	83 e1 3f             	and    ecx,0x3f
c0008c5f:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0008c63:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c67:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008c6d:	0f b6 d0             	movzx  edx,al
c0008c70:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c74:	66 c7 44 90 04 92 00 	mov    WORD PTR [eax+edx*4+0x4],0x92
c0008c7b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c7f:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008c85:	0f b6 d0             	movzx  edx,al
c0008c88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c8c:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c0008c91:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c95:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008c9b:	8d 50 01             	lea    edx,[eax+0x1]
c0008c9e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0008ca2:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0008ca8:	0f b6 d0             	movzx  edx,al
c0008cab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008caf:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0008cb3:	83 e1 3f             	and    ecx,0x3f
c0008cb6:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0008cba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cbe:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008cc4:	0f b6 d0             	movzx  edx,al
c0008cc7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008ccb:	66 c7 44 90 04 61 00 	mov    WORD PTR [eax+edx*4+0x4],0x61
c0008cd2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cd6:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008cdc:	0f b6 d0             	movzx  edx,al
c0008cdf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008ce3:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c0008ce8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cec:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0008cf2:	8d 50 01             	lea    edx,[eax+0x1]
c0008cf5:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0008cf9:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0008cff:	0f b6 d0             	movzx  edx,al
c0008d02:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d06:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0008d0a:	83 e1 3f             	and    ecx,0x3f
c0008d0d:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0008d11:	90                   	nop
c0008d12:	83 c4 0c             	add    esp,0xc
c0008d15:	c3                   	ret    

c0008d16 <Computer::setBootMessage(char const*)>:
c0008d16:	c3                   	ret    
c0008d17:	90                   	nop

c0008d18 <Computer::detectFeatures()>:
c0008d18:	55                   	push   ebp
c0008d19:	57                   	push   edi
c0008d1a:	56                   	push   esi
c0008d1b:	53                   	push   ebx
c0008d1c:	83 ec 1c             	sub    esp,0x1c
c0008d1f:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0008d23:	81 a3 e8 01 00 00 04 00 fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffc0004
c0008d2d:	e8 e7 74 ff ff       	call   c0000219 <detectCPUID>
c0008d32:	85 c0                	test   eax,eax
c0008d34:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c0008d3a:	0f 95 c2             	setne  dl
c0008d3d:	83 e0 fd             	and    eax,0xfffffffd
c0008d40:	d1 e2                	shl    edx,1
c0008d42:	09 d0                	or     eax,edx
c0008d44:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0008d4a:	a8 02                	test   al,0x2
c0008d4c:	75 46                	jne    c0008d94 <Computer::detectFeatures()+0x7c>
c0008d4e:	f6 05 81 64 02 c0 04 	test   BYTE PTR ds:0xc0026481,0x4
c0008d55:	74 07                	je     c0008d5e <Computer::detectFeatures()+0x46>
c0008d57:	80 a3 e8 01 00 00 fb 	and    BYTE PTR [ebx+0x1e8],0xfb
c0008d5e:	e8 e3 7e 01 00       	call   c0020c46 <x87Detect>
c0008d63:	83 e0 01             	and    eax,0x1
c0008d66:	c1 e0 04             	shl    eax,0x4
c0008d69:	88 c2                	mov    dl,al
c0008d6b:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c0008d71:	83 e0 ef             	and    eax,0xffffffef
c0008d74:	09 d0                	or     eax,edx
c0008d76:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0008d7c:	a8 10                	test   al,0x10
c0008d7e:	0f 85 2a 01 00 00    	jne    c0008eae <Computer::detectFeatures()+0x196>
c0008d84:	84 c0                	test   al,al
c0008d86:	0f 88 45 01 00 00    	js     c0008ed1 <Computer::detectFeatures()+0x1b9>
c0008d8c:	83 c4 1c             	add    esp,0x1c
c0008d8f:	5b                   	pop    ebx
c0008d90:	5e                   	pop    esi
c0008d91:	5f                   	pop    edi
c0008d92:	5d                   	pop    ebp
c0008d93:	c3                   	ret    
c0008d94:	83 ec 0c             	sub    esp,0xc
c0008d97:	6a 20                	push   0x20
c0008d99:	e8 44 9f 00 00       	call   c0012ce2 <CPU::cpuidCheckEDX(unsigned int)>
c0008d9e:	83 e0 01             	and    eax,0x1
c0008da1:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0008da8:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c0008dae:	83 e0 f7             	and    eax,0xfffffff7
c0008db1:	09 d0                	or     eax,edx
c0008db3:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0008db9:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c0008dc0:	e8 1d 9f 00 00       	call   c0012ce2 <CPU::cpuidCheckEDX(unsigned int)>
c0008dc5:	83 e0 01             	and    eax,0x1
c0008dc8:	88 c2                	mov    dl,al
c0008dca:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c0008dd0:	83 e0 fe             	and    eax,0xfffffffe
c0008dd3:	09 d0                	or     eax,edx
c0008dd5:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c0008ddb:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c0008de2:	e8 fb 9e 00 00       	call   c0012ce2 <CPU::cpuidCheckEDX(unsigned int)>
c0008de7:	c1 e0 07             	shl    eax,0x7
c0008dea:	88 c2                	mov    dl,al
c0008dec:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c0008df2:	83 e0 7f             	and    eax,0x7f
c0008df5:	09 d0                	or     eax,edx
c0008df7:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c0008dfd:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c0008e04:	e8 d9 9e 00 00       	call   c0012ce2 <CPU::cpuidCheckEDX(unsigned int)>
c0008e09:	83 c4 10             	add    esp,0x10
c0008e0c:	83 e0 01             	and    eax,0x1
c0008e0f:	c1 e0 05             	shl    eax,0x5
c0008e12:	88 c2                	mov    dl,al
c0008e14:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c0008e1a:	83 e0 df             	and    eax,0xffffffdf
c0008e1d:	09 d0                	or     eax,edx
c0008e1f:	f7 05 80 64 02 c0 01 04 00 00 	test   DWORD PTR ds:0xc0026480,0x401
c0008e29:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0008e2f:	0f 84 c2 00 00 00    	je     c0008ef7 <Computer::detectFeatures()+0x1df>
c0008e35:	83 e0 fe             	and    eax,0xfffffffe
c0008e38:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0008e3e:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c0008e44:	88 c2                	mov    dl,al
c0008e46:	83 e2 09             	and    edx,0x9
c0008e49:	fe ca                	dec    dl
c0008e4b:	75 09                	jne    c0008e56 <Computer::detectFeatures()+0x13e>
c0008e4d:	83 e0 fe             	and    eax,0xfffffffe
c0008e50:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0008e56:	83 ec 0c             	sub    esp,0xc
c0008e59:	8d 44 24 18          	lea    eax,[esp+0x18]
c0008e5d:	50                   	push   eax
c0008e5e:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c0008e62:	55                   	push   ebp
c0008e63:	8d 7c 24 18          	lea    edi,[esp+0x18]
c0008e67:	57                   	push   edi
c0008e68:	8d 74 24 18          	lea    esi,[esp+0x18]
c0008e6c:	56                   	push   esi
c0008e6d:	68 00 00 00 80       	push   0x80000000
c0008e72:	e8 e7 9d 00 00       	call   c0012c5e <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0008e77:	83 c4 20             	add    esp,0x20
c0008e7a:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c0008e81:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0008e85:	0f 86 c3 fe ff ff    	jbe    c0008d4e <Computer::detectFeatures()+0x36>
c0008e8b:	83 ec 0c             	sub    esp,0xc
c0008e8e:	50                   	push   eax
c0008e8f:	55                   	push   ebp
c0008e90:	57                   	push   edi
c0008e91:	56                   	push   esi
c0008e92:	68 01 00 00 80       	push   0x80000001
c0008e97:	e8 c2 9d 00 00       	call   c0012c5e <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0008e9c:	81 a3 e8 01 00 00 bf ff fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffcffbf
c0008ea6:	83 c4 20             	add    esp,0x20
c0008ea9:	e9 a0 fe ff ff       	jmp    c0008d4e <Computer::detectFeatures()+0x36>
c0008eae:	e8 4d 7d 01 00       	call   c0020c00 <absolutelyNoChanceInHell>
c0008eb3:	88 c2                	mov    dl,al
c0008eb5:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c0008ebb:	c1 e2 07             	shl    edx,0x7
c0008ebe:	83 e0 7f             	and    eax,0x7f
c0008ec1:	09 d0                	or     eax,edx
c0008ec3:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0008ec9:	84 c0                	test   al,al
c0008ecb:	0f 89 bb fe ff ff    	jns    c0008d8c <Computer::detectFeatures()+0x74>
c0008ed1:	e8 0a 7d 01 00       	call   c0020be0 <avxDetect>
c0008ed6:	83 e0 01             	and    eax,0x1
c0008ed9:	c1 e0 05             	shl    eax,0x5
c0008edc:	88 c2                	mov    dl,al
c0008ede:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c0008ee4:	83 e0 df             	and    eax,0xffffffdf
c0008ee7:	09 d0                	or     eax,edx
c0008ee9:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c0008eef:	83 c4 1c             	add    esp,0x1c
c0008ef2:	5b                   	pop    ebx
c0008ef3:	5e                   	pop    esi
c0008ef4:	5f                   	pop    edi
c0008ef5:	5d                   	pop    ebp
c0008ef6:	c3                   	ret    
c0008ef7:	83 ec 0c             	sub    esp,0xc
c0008efa:	68 00 02 00 00       	push   0x200
c0008eff:	e8 de 9d 00 00       	call   c0012ce2 <CPU::cpuidCheckEDX(unsigned int)>
c0008f04:	83 c4 10             	add    esp,0x10
c0008f07:	83 e0 01             	and    eax,0x1
c0008f0a:	88 c2                	mov    dl,al
c0008f0c:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c0008f12:	83 e0 fe             	and    eax,0xfffffffe
c0008f15:	09 d0                	or     eax,edx
c0008f17:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c0008f1d:	e9 1c ff ff ff       	jmp    c0008e3e <Computer::detectFeatures()+0x126>

c0008f22 <Computer::displayFeatures()>:
c0008f22:	c3                   	ret    
c0008f23:	90                   	nop

c0008f24 <Computer::rdmsr(unsigned int)>:
c0008f24:	83 ec 0c             	sub    esp,0xc
c0008f27:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008f2b:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c0008f32:	74 0a                	je     c0008f3e <Computer::rdmsr(unsigned int)+0x1a>
c0008f34:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0008f38:	0f 32                	rdmsr  
c0008f3a:	83 c4 0c             	add    esp,0xc
c0008f3d:	c3                   	ret    
c0008f3e:	83 ec 0c             	sub    esp,0xc
c0008f41:	68 e1 25 02 c0       	push   0xc00225e1
c0008f46:	e8 36 b4 00 00       	call   c0014381 <Krnl::panic(char const*)>
c0008f4b:	83 c4 10             	add    esp,0x10
c0008f4e:	eb e4                	jmp    c0008f34 <Computer::rdmsr(unsigned int)+0x10>

c0008f50 <Computer::wrmsr(unsigned int, unsigned long long)>:
c0008f50:	57                   	push   edi
c0008f51:	56                   	push   esi
c0008f52:	52                   	push   edx
c0008f53:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008f57:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0008f5b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0008f5f:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c0008f66:	74 0e                	je     c0008f76 <Computer::wrmsr(unsigned int, unsigned long long)+0x26>
c0008f68:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0008f6c:	89 f0                	mov    eax,esi
c0008f6e:	89 fa                	mov    edx,edi
c0008f70:	0f 30                	wrmsr  
c0008f72:	58                   	pop    eax
c0008f73:	5e                   	pop    esi
c0008f74:	5f                   	pop    edi
c0008f75:	c3                   	ret    
c0008f76:	83 ec 0c             	sub    esp,0xc
c0008f79:	68 e7 25 02 c0       	push   0xc00225e7
c0008f7e:	e8 fe b3 00 00       	call   c0014381 <Krnl::panic(char const*)>
c0008f83:	83 c4 10             	add    esp,0x10
c0008f86:	eb e0                	jmp    c0008f68 <Computer::wrmsr(unsigned int, unsigned long long)+0x18>

c0008f88 <Computer::nmiEnabled()>:
c0008f88:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008f8c:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c0008f92:	c3                   	ret    
c0008f93:	90                   	nop

c0008f94 <Computer::readCMOS(unsigned char)>:
c0008f94:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008f98:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c0008f9f:	19 c0                	sbb    eax,eax
c0008fa1:	83 e0 80             	and    eax,0xffffff80
c0008fa4:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0008fa8:	e6 70                	out    0x70,al
c0008faa:	e4 71                	in     al,0x71
c0008fac:	c3                   	ret    
c0008fad:	90                   	nop

c0008fae <Computer::enableNMI(bool)>:
c0008fae:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0008fb2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008fb6:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c0008fbc:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c0008fc4:	eb ce                	jmp    c0008f94 <Computer::readCMOS(unsigned char)>

c0008fc6 <Computer::open(int, int, void*)>:
c0008fc6:	56                   	push   esi
c0008fc7:	53                   	push   ebx
c0008fc8:	83 ec 10             	sub    esp,0x10
c0008fcb:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008fcf:	68 44 27 02 c0       	push   0xc0022744
c0008fd4:	e8 44 0a 00 00       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0008fd9:	58                   	pop    eax
c0008fda:	f6 05 80 64 02 c0 04 	test   BYTE PTR ds:0xc0026480,0x4
c0008fe1:	5a                   	pop    edx
c0008fe2:	0f 94 05 40 58 02 c0 	sete   BYTE PTR ds:0xc0025840
c0008fe9:	68 58 01 00 00       	push   0x158
c0008fee:	68 ed 25 02 c0       	push   0xc00225ed
c0008ff3:	e8 c7 3a 00 00       	call   c000cabf <Dbg::kprintf(char const*, ...)>
c0008ff8:	59                   	pop    ecx
c0008ff9:	5e                   	pop    esi
c0008ffa:	68 14 01 00 00       	push   0x114
c0008fff:	68 03 26 02 c0       	push   0xc0022603
c0009004:	e8 b6 3a 00 00       	call   c000cabf <Dbg::kprintf(char const*, ...)>
c0009009:	58                   	pop    eax
c000900a:	5a                   	pop    edx
c000900b:	6a 14                	push   0x14
c000900d:	68 17 26 02 c0       	push   0xc0022617
c0009012:	e8 a8 3a 00 00       	call   c000cabf <Dbg::kprintf(char const*, ...)>
c0009017:	59                   	pop    ecx
c0009018:	5e                   	pop    esi
c0009019:	68 1f 07 00 00       	push   0x71f
c000901e:	68 2a 26 02 c0       	push   0xc002262a
c0009023:	e8 97 3a 00 00       	call   c000cabf <Dbg::kprintf(char const*, ...)>
c0009028:	58                   	pop    eax
c0009029:	5a                   	pop    edx
c000902a:	6a 5f                	push   0x5f
c000902c:	68 41 26 02 c0       	push   0xc0022641
c0009031:	e8 89 3a 00 00       	call   c000cabf <Dbg::kprintf(char const*, ...)>
c0009036:	c7 04 24 57 26 02 c0 	mov    DWORD PTR [esp],0xc0022657
c000903d:	e8 7d 3a 00 00       	call   c000cabf <Dbg::kprintf(char const*, ...)>
c0009042:	c7 04 24 69 26 02 c0 	mov    DWORD PTR [esp],0xc0022669
c0009049:	e8 cf 09 00 00       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c000904e:	c7 04 24 64 12 00 00 	mov    DWORD PTR [esp],0x1264
c0009055:	e8 69 09 00 00       	call   c00099c3 <malloc>
c000905a:	89 c6                	mov    esi,eax
c000905c:	89 04 24             	mov    DWORD PTR [esp],eax
c000905f:	e8 f0 8d 00 00       	call   c0011e54 <ACPI::ACPI()>
c0009064:	89 b3 e4 01 00 00    	mov    DWORD PTR [ebx+0x1e4],esi
c000906a:	c7 04 24 83 26 02 c0 	mov    DWORD PTR [esp],0xc0022683
c0009071:	e8 a7 09 00 00       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0009076:	59                   	pop    ecx
c0009077:	5e                   	pop    esi
c0009078:	ff b3 e4 01 00 00    	push   DWORD PTR [ebx+0x1e4]
c000907e:	53                   	push   ebx
c000907f:	e8 82 4e 00 00       	call   c000df06 <Device::addChild(Device*)>
c0009084:	c7 04 24 68 27 02 c0 	mov    DWORD PTR [esp],0xc0022768
c000908b:	e8 8d 09 00 00       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0009090:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0009093:	e8 80 fc ff ff       	call   c0008d18 <Computer::detectFeatures()>
c0009098:	c7 04 24 88 27 02 c0 	mov    DWORD PTR [esp],0xc0022788
c000909f:	e8 79 09 00 00       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c00090a4:	c7 04 24 9d 26 02 c0 	mov    DWORD PTR [esp],0xc002269d
c00090ab:	e8 6d 09 00 00       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c00090b0:	58                   	pop    eax
c00090b1:	5a                   	pop    edx
c00090b2:	6a 01                	push   0x1
c00090b4:	53                   	push   ebx
c00090b5:	e8 f4 fe ff ff       	call   c0008fae <Computer::enableNMI(bool)>
c00090ba:	c7 04 24 91 25 02 c0 	mov    DWORD PTR [esp],0xc0022591
c00090c1:	e8 57 09 00 00       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c00090c6:	c7 04 24 98 11 00 00 	mov    DWORD PTR [esp],0x1198
c00090cd:	e8 f1 08 00 00       	call   c00099c3 <malloc>
c00090d2:	89 04 24             	mov    DWORD PTR [esp],eax
c00090d5:	89 c6                	mov    esi,eax
c00090d7:	e8 be 9c 00 00       	call   c0012d9a <CPU::CPU()>
c00090dc:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c00090e2:	59                   	pop    ecx
c00090e3:	58                   	pop    eax
c00090e4:	56                   	push   esi
c00090e5:	53                   	push   ebx
c00090e6:	e8 1b 4e 00 00       	call   c000df06 <Device::addChild(Device*)>
c00090eb:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c00090f1:	8b 10                	mov    edx,DWORD PTR [eax]
c00090f3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00090f7:	6a 00                	push   0x0
c00090f9:	6a 00                	push   0x0
c00090fb:	50                   	push   eax
c00090fc:	ff 52 08             	call   DWORD PTR [edx+0x8]
c00090ff:	83 c4 14             	add    esp,0x14
c0009102:	68 a8 27 02 c0       	push   0xc00227a8
c0009107:	e8 11 09 00 00       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c000910c:	e8 91 53 00 00       	call   c000e4a2 <setupFPU()>
c0009111:	83 c4 10             	add    esp,0x10
c0009114:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c000911a:	85 c0                	test   eax,eax
c000911c:	74 1f                	je     c000913d <Computer::open(int, int, void*)+0x177>
c000911e:	83 ec 08             	sub    esp,0x8
c0009121:	50                   	push   eax
c0009122:	53                   	push   ebx
c0009123:	e8 de 4d 00 00       	call   c000df06 <Device::addChild(Device*)>
c0009128:	8b 83 e0 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e0]
c000912e:	8b 10                	mov    edx,DWORD PTR [eax]
c0009130:	6a 00                	push   0x0
c0009132:	6a 00                	push   0x0
c0009134:	6a 00                	push   0x0
c0009136:	50                   	push   eax
c0009137:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000913a:	83 c4 20             	add    esp,0x20
c000913d:	83 ec 0c             	sub    esp,0xc
c0009140:	68 ae 26 02 c0       	push   0xc00226ae
c0009145:	e8 d3 08 00 00       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c000914a:	c7 04 24 6c 8a 00 c0 	mov    DWORD PTR [esp],0xc0008a6c
c0009151:	e8 f6 ec 00 00       	call   c0017e4c <setupMultitasking(void (*)())>
c0009156:	83 c4 14             	add    esp,0x14
c0009159:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000915e:	5b                   	pop    ebx
c000915f:	5e                   	pop    esi
c0009160:	c3                   	ret    
c0009161:	90                   	nop

c0009162 <Computer::disableNMI()>:
c0009162:	6a 00                	push   0x0
c0009164:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0009168:	e8 41 fe ff ff       	call   c0008fae <Computer::enableNMI(bool)>
c000916d:	58                   	pop    eax
c000916e:	5a                   	pop    edx
c000916f:	c3                   	ret    

c0009170 <Computer::writeCMOS(unsigned char, unsigned char)>:
c0009170:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009174:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000917b:	19 c0                	sbb    eax,eax
c000917d:	83 e0 80             	and    eax,0xffffff80
c0009180:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0009184:	e6 70                	out    0x70,al
c0009186:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000918a:	e6 71                	out    0x71,al
c000918c:	c3                   	ret    
c000918d:	90                   	nop

c000918e <Computer::handleNMI()>:
c000918e:	56                   	push   esi
c000918f:	53                   	push   ebx
c0009190:	83 ec 10             	sub    esp,0x10
c0009193:	e4 92                	in     al,0x92
c0009195:	89 c6                	mov    esi,eax
c0009197:	e4 61                	in     al,0x61
c0009199:	68 c9 26 02 c0       	push   0xc00226c9
c000919e:	88 c3                	mov    bl,al
c00091a0:	e8 1a 39 00 00       	call   c000cabf <Dbg::kprintf(char const*, ...)>
c00091a5:	83 c4 10             	add    esp,0x10
c00091a8:	83 e6 10             	and    esi,0x10
c00091ab:	75 0d                	jne    c00091ba <Computer::handleNMI()+0x2c>
c00091ad:	f6 c3 40             	test   bl,0x40
c00091b0:	75 1d                	jne    c00091cf <Computer::handleNMI()+0x41>
c00091b2:	84 db                	test   bl,bl
c00091b4:	78 2d                	js     c00091e3 <Computer::handleNMI()+0x55>
c00091b6:	58                   	pop    eax
c00091b7:	5b                   	pop    ebx
c00091b8:	5e                   	pop    esi
c00091b9:	c3                   	ret    
c00091ba:	83 ec 0c             	sub    esp,0xc
c00091bd:	68 da 26 02 c0       	push   0xc00226da
c00091c2:	e8 ba b1 00 00       	call   c0014381 <Krnl::panic(char const*)>
c00091c7:	83 c4 10             	add    esp,0x10
c00091ca:	f6 c3 40             	test   bl,0x40
c00091cd:	74 e3                	je     c00091b2 <Computer::handleNMI()+0x24>
c00091cf:	83 ec 0c             	sub    esp,0xc
c00091d2:	68 e7 26 02 c0       	push   0xc00226e7
c00091d7:	e8 a5 b1 00 00       	call   c0014381 <Krnl::panic(char const*)>
c00091dc:	83 c4 10             	add    esp,0x10
c00091df:	84 db                	test   bl,bl
c00091e1:	79 d3                	jns    c00091b6 <Computer::handleNMI()+0x28>
c00091e3:	c7 44 24 10 f1 26 02 c0 	mov    DWORD PTR [esp+0x10],0xc00226f1
c00091eb:	5a                   	pop    edx
c00091ec:	5b                   	pop    ebx
c00091ed:	5e                   	pop    esi
c00091ee:	e9 8e b1 00 00       	jmp    c0014381 <Krnl::panic(char const*)>
c00091f3:	90                   	nop

c00091f4 <Computer::setDiskActivityLight(int, bool)>:
c00091f4:	56                   	push   esi
c00091f5:	53                   	push   ebx
c00091f6:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00091fa:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c00091ff:	77 1b                	ja     c000921c <Computer::setDiskActivityLight(int, bool)+0x28>
c0009201:	e4 92                	in     al,0x92
c0009203:	bb 40 00 00 00       	mov    ebx,0x40
c0009208:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c000920c:	89 da                	mov    edx,ebx
c000920e:	d3 e2                	shl    edx,cl
c0009210:	89 f1                	mov    ecx,esi
c0009212:	f7 d2                	not    edx
c0009214:	d3 e3                	shl    ebx,cl
c0009216:	21 d0                	and    eax,edx
c0009218:	09 d8                	or     eax,ebx
c000921a:	e6 92                	out    0x92,al
c000921c:	5b                   	pop    ebx
c000921d:	5e                   	pop    esi
c000921e:	c3                   	ret    
c000921f:	90                   	nop

c0009220 <GDTEntry::setBase(unsigned int)>:
c0009220:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009224:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0009228:	89 c1                	mov    ecx,eax
c000922a:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c000922e:	c1 e9 10             	shr    ecx,0x10
c0009231:	c1 e8 18             	shr    eax,0x18
c0009234:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c0009237:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c000923a:	c3                   	ret    
c000923b:	90                   	nop

c000923c <GDTEntry::setLimit(unsigned int)>:
c000923c:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0009240:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009244:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c0009247:	66 89 01             	mov    WORD PTR [ecx],ax
c000924a:	83 e2 f0             	and    edx,0xfffffff0
c000924d:	c1 e8 10             	shr    eax,0x10
c0009250:	83 e0 0f             	and    eax,0xf
c0009253:	09 d0                	or     eax,edx
c0009255:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c0009258:	c3                   	ret    
c0009259:	90                   	nop

c000925a <GDT::GDT()>:
c000925a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000925e:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0009264:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009268:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000926e:	90                   	nop
c000926f:	c3                   	ret    

c0009270 <GDT::addEntry(GDTEntry)>:
c0009270:	53                   	push   ebx
c0009271:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009275:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0009279:	8b 02                	mov    eax,DWORD PTR [edx]
c000927b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000927f:	89 4c c2 04          	mov    DWORD PTR [edx+eax*8+0x4],ecx
c0009283:	89 5c c2 08          	mov    DWORD PTR [edx+eax*8+0x8],ebx
c0009287:	8d 48 01             	lea    ecx,[eax+0x1]
c000928a:	c1 e0 03             	shl    eax,0x3
c000928d:	89 0a                	mov    DWORD PTR [edx],ecx
c000928f:	5b                   	pop    ebx
c0009290:	c3                   	ret    
c0009291:	90                   	nop

c0009292 <GDT::getNumberOfEntries()>:
c0009292:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009296:	8b 00                	mov    eax,DWORD PTR [eax]
c0009298:	c3                   	ret    
c0009299:	90                   	nop

c000929a <GDT::flush()>:
c000929a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000929e:	8b 10                	mov    edx,DWORD PTR [eax]
c00092a0:	83 c0 04             	add    eax,0x4
c00092a3:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c00092aa:	a3 72 64 02 c0       	mov    ds:0xc0026472,eax
c00092af:	66 89 15 70 64 02 c0 	mov    WORD PTR ds:0xc0026470,dx
c00092b6:	e9 ca 70 ff ff       	jmp    c0000385 <loadGDT>
c00092bb:	90                   	nop

c00092bc <GDT::setup()>:
c00092bc:	55                   	push   ebp
c00092bd:	57                   	push   edi
c00092be:	56                   	push   esi
c00092bf:	53                   	push   ebx
c00092c0:	83 ec 3c             	sub    esp,0x3c
c00092c3:	8b 6c 24 50          	mov    ebp,DWORD PTR [esp+0x50]
c00092c7:	6a 00                	push   0x0
c00092c9:	8d 5c 24 1c          	lea    ebx,[esp+0x1c]
c00092cd:	53                   	push   ebx
c00092ce:	e8 4d ff ff ff       	call   c0009220 <GDTEntry::setBase(unsigned int)>
c00092d3:	6a 00                	push   0x0
c00092d5:	53                   	push   ebx
c00092d6:	e8 61 ff ff ff       	call   c000923c <GDTEntry::setLimit(unsigned int)>
c00092db:	81 64 24 2c ff 00 0f ff 	and    DWORD PTR [esp+0x2c],0xff0f00ff
c00092e3:	6a 00                	push   0x0
c00092e5:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c00092e9:	53                   	push   ebx
c00092ea:	e8 31 ff ff ff       	call   c0009220 <GDTEntry::setBase(unsigned int)>
c00092ef:	68 ff ff ff 00       	push   0xffffff
c00092f4:	53                   	push   ebx
c00092f5:	e8 42 ff ff ff       	call   c000923c <GDTEntry::setLimit(unsigned int)>
c00092fa:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00092fe:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c0009303:	0d 00 9a c0 00       	or     eax,0xc09a00
c0009308:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000930c:	83 c4 20             	add    esp,0x20
c000930f:	6a 00                	push   0x0
c0009311:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c0009315:	53                   	push   ebx
c0009316:	e8 05 ff ff ff       	call   c0009220 <GDTEntry::setBase(unsigned int)>
c000931b:	68 ff ff ff 00       	push   0xffffff
c0009320:	53                   	push   ebx
c0009321:	e8 16 ff ff ff       	call   c000923c <GDTEntry::setLimit(unsigned int)>
c0009326:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000932a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000932e:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0009332:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0009336:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000933a:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000933f:	0d 00 92 c0 00       	or     eax,0xc09200
c0009344:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0009348:	89 d8                	mov    eax,ebx
c000934a:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000934e:	80 cc 60             	or     ah,0x60
c0009351:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009355:	83 c4 0c             	add    esp,0xc
c0009358:	89 f8                	mov    eax,edi
c000935a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000935e:	80 cc 60             	or     ah,0x60
c0009361:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0009365:	89 c7                	mov    edi,eax
c0009367:	55                   	push   ebp
c0009368:	e8 03 ff ff ff       	call   c0009270 <GDT::addEntry(GDTEntry)>
c000936d:	83 c4 0c             	add    esp,0xc
c0009370:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0009374:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0009378:	55                   	push   ebp
c0009379:	e8 f2 fe ff ff       	call   c0009270 <GDT::addEntry(GDTEntry)>
c000937e:	83 c4 0c             	add    esp,0xc
c0009381:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0009385:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0009389:	55                   	push   ebp
c000938a:	e8 e1 fe ff ff       	call   c0009270 <GDT::addEntry(GDTEntry)>
c000938f:	83 c4 0c             	add    esp,0xc
c0009392:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0009396:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000939a:	53                   	push   ebx
c000939b:	51                   	push   ecx
c000939c:	55                   	push   ebp
c000939d:	e8 ce fe ff ff       	call   c0009270 <GDT::addEntry(GDTEntry)>
c00093a2:	83 c4 0c             	add    esp,0xc
c00093a5:	57                   	push   edi
c00093a6:	56                   	push   esi
c00093a7:	55                   	push   ebp
c00093a8:	e8 c3 fe ff ff       	call   c0009270 <GDT::addEntry(GDTEntry)>
c00093ad:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00093b0:	e8 e5 fe ff ff       	call   c000929a <GDT::flush()>
c00093b5:	83 c4 4c             	add    esp,0x4c
c00093b8:	5b                   	pop    ebx
c00093b9:	5e                   	pop    esi
c00093ba:	5f                   	pop    edi
c00093bb:	5d                   	pop    ebp
c00093bc:	c3                   	ret    

c00093bd <idleFunction(void*)>:
c00093bd:	53                   	push   ebx
c00093be:	83 ec 08             	sub    esp,0x8
c00093c1:	a1 28 79 02 c0       	mov    eax,ds:0xc0027928
c00093c6:	48                   	dec    eax
c00093c7:	a3 28 79 02 c0       	mov    ds:0xc0027928,eax
c00093cc:	75 01                	jne    c00093cf <idleFunction(void*)+0x12>
c00093ce:	fb                   	sti    
c00093cf:	a1 68 64 02 c0       	mov    eax,ds:0xc0026468
c00093d4:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c00093da:	f6 82 92 11 00 00 04 	test   BYTE PTR [edx+0x1192],0x4
c00093e1:	74 3c                	je     c000941f <idleFunction(void*)+0x62>
c00093e3:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c00093ea:	74 33                	je     c000941f <idleFunction(void*)+0x62>
c00093ec:	31 db                	xor    ebx,ebx
c00093ee:	52                   	push   edx
c00093ef:	52                   	push   edx
c00093f0:	68 e1 00 00 00       	push   0xe1
c00093f5:	50                   	push   eax
c00093f6:	e8 29 fb ff ff       	call   c0008f24 <Computer::rdmsr(unsigned int)>
c00093fb:	53                   	push   ebx
c00093fc:	83 e0 02             	and    eax,0x2
c00093ff:	50                   	push   eax
c0009400:	68 e1 00 00 00       	push   0xe1
c0009405:	ff 35 68 64 02 c0    	push   DWORD PTR ds:0xc0026468
c000940b:	e8 40 fb ff ff       	call   c0008f50 <Computer::wrmsr(unsigned int, unsigned long long)>
c0009410:	83 c4 20             	add    esp,0x20
c0009413:	e8 9c 6d ff ff       	call   c00001b4 <doTPAUSE>
c0009418:	e8 e9 7d 01 00       	call   c0021206 <idleCommon()>
c000941d:	eb f4                	jmp    c0009413 <idleFunction(void*)+0x56>
c000941f:	fb                   	sti    
c0009420:	f4                   	hlt    
c0009421:	e8 e0 7d 01 00       	call   c0021206 <idleCommon()>
c0009426:	eb f7                	jmp    c000941f <idleFunction(void*)+0x62>

c0009428 <IDTEntry::IDTEntry(bool)>:
c0009428:	83 ec 04             	sub    esp,0x4
c000942b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000942f:	88 04 24             	mov    BYTE PTR [esp],al
c0009432:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009436:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c000943c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009440:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c0009444:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009448:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000944b:	83 e2 f0             	and    edx,0xfffffff0
c000944e:	83 ca 0e             	or     edx,0xe
c0009451:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0009454:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009458:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000945b:	83 e2 ef             	and    edx,0xffffffef
c000945e:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0009461:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c0009465:	74 05                	je     c000946c <IDTEntry::IDTEntry(bool)+0x44>
c0009467:	b2 03                	mov    dl,0x3
c0009469:	eb 05                	jmp    c0009470 <IDTEntry::IDTEntry(bool)+0x48>
c000946b:	90                   	nop
c000946c:	b2 00                	mov    dl,0x0
c000946e:	66 90                	xchg   ax,ax
c0009470:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009474:	83 e2 03             	and    edx,0x3
c0009477:	88 d1                	mov    cl,dl
c0009479:	c1 e1 05             	shl    ecx,0x5
c000947c:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000947f:	83 e2 9f             	and    edx,0xffffff9f
c0009482:	09 ca                	or     edx,ecx
c0009484:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0009487:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000948b:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000948e:	83 ca 80             	or     edx,0xffffff80
c0009491:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0009494:	90                   	nop
c0009495:	83 c4 04             	add    esp,0x4
c0009498:	c3                   	ret    
c0009499:	90                   	nop

c000949a <IDTEntry::setOffset(unsigned int)>:
c000949a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000949e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00094a2:	66 89 02             	mov    WORD PTR [edx],ax
c00094a5:	c1 e8 10             	shr    eax,0x10
c00094a8:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c00094ac:	c3                   	ret    
c00094ad:	90                   	nop
c00094ae:	66 90                	xchg   ax,ax

c00094b0 <IDT::IDT()>:
c00094b0:	90                   	nop
c00094b1:	c3                   	ret    

c00094b2 <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c00094b2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00094b6:	83 c0 30             	add    eax,0x30
c00094b9:	c3                   	ret    

c00094ba <IDT::addEntry(IDTEntry, int)>:
c00094ba:	53                   	push   ebx
c00094bb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00094bf:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00094c3:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00094c7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00094cb:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c00094ce:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c00094d2:	5b                   	pop    ebx
c00094d3:	c3                   	ret    

c00094d4 <IDT::addEntry(int, void (*)(), bool)>:
c00094d4:	53                   	push   ebx
c00094d5:	83 ec 10             	sub    esp,0x10
c00094d8:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c00094dd:	50                   	push   eax
c00094de:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c00094e2:	53                   	push   ebx
c00094e3:	e8 40 ff ff ff       	call   c0009428 <IDTEntry::IDTEntry(bool)>
c00094e8:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00094ec:	53                   	push   ebx
c00094ed:	e8 a8 ff ff ff       	call   c000949a <IDTEntry::setOffset(unsigned int)>
c00094f2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00094f6:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00094fa:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00094fe:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009502:	e8 b3 ff ff ff       	call   c00094ba <IDT::addEntry(IDTEntry, int)>
c0009507:	83 c4 30             	add    esp,0x30
c000950a:	5b                   	pop    ebx
c000950b:	c3                   	ret    

c000950c <IDT::flush()>:
c000950c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009510:	66 c7 05 78 64 02 c0 ff 07 	mov    WORD PTR ds:0xc0026478,0x7ff
c0009519:	a3 7a 64 02 c0       	mov    ds:0xc002647a,eax
c000951e:	0f 01 1d 78 64 02 c0 	lidtd  ds:0xc0026478
c0009525:	c3                   	ret    

c0009526 <IDT::setup()>:
c0009526:	57                   	push   edi
c0009527:	56                   	push   esi
c0009528:	53                   	push   ebx
c0009529:	83 ec 10             	sub    esp,0x10
c000952c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0009530:	6a 00                	push   0x0
c0009532:	68 a5 03 00 c0       	push   0xc00003a5
c0009537:	6a 00                	push   0x0
c0009539:	53                   	push   ebx
c000953a:	e8 95 ff ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c000953f:	6a 00                	push   0x0
c0009541:	68 b5 03 00 c0       	push   0xc00003b5
c0009546:	6a 01                	push   0x1
c0009548:	53                   	push   ebx
c0009549:	e8 86 ff ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c000954e:	83 c4 20             	add    esp,0x20
c0009551:	6a 00                	push   0x0
c0009553:	68 bf 03 00 c0       	push   0xc00003bf
c0009558:	6a 02                	push   0x2
c000955a:	53                   	push   ebx
c000955b:	e8 74 ff ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c0009560:	6a 00                	push   0x0
c0009562:	68 c9 03 00 c0       	push   0xc00003c9
c0009567:	6a 03                	push   0x3
c0009569:	53                   	push   ebx
c000956a:	e8 65 ff ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c000956f:	83 c4 20             	add    esp,0x20
c0009572:	6a 00                	push   0x0
c0009574:	68 d3 03 00 c0       	push   0xc00003d3
c0009579:	6a 04                	push   0x4
c000957b:	53                   	push   ebx
c000957c:	e8 53 ff ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c0009581:	6a 00                	push   0x0
c0009583:	68 dd 03 00 c0       	push   0xc00003dd
c0009588:	6a 05                	push   0x5
c000958a:	53                   	push   ebx
c000958b:	e8 44 ff ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c0009590:	83 c4 20             	add    esp,0x20
c0009593:	6a 00                	push   0x0
c0009595:	68 e7 03 00 c0       	push   0xc00003e7
c000959a:	6a 06                	push   0x6
c000959c:	53                   	push   ebx
c000959d:	e8 32 ff ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c00095a2:	6a 00                	push   0x0
c00095a4:	68 f1 03 00 c0       	push   0xc00003f1
c00095a9:	6a 07                	push   0x7
c00095ab:	53                   	push   ebx
c00095ac:	e8 23 ff ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c00095b1:	83 c4 20             	add    esp,0x20
c00095b4:	6a 00                	push   0x0
c00095b6:	68 fb 03 00 c0       	push   0xc00003fb
c00095bb:	6a 08                	push   0x8
c00095bd:	53                   	push   ebx
c00095be:	e8 11 ff ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c00095c3:	6a 00                	push   0x0
c00095c5:	68 03 04 00 c0       	push   0xc0000403
c00095ca:	6a 09                	push   0x9
c00095cc:	53                   	push   ebx
c00095cd:	e8 02 ff ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c00095d2:	83 c4 20             	add    esp,0x20
c00095d5:	6a 00                	push   0x0
c00095d7:	68 0d 04 00 c0       	push   0xc000040d
c00095dc:	6a 0a                	push   0xa
c00095de:	53                   	push   ebx
c00095df:	e8 f0 fe ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c00095e4:	6a 00                	push   0x0
c00095e6:	68 15 04 00 c0       	push   0xc0000415
c00095eb:	6a 0b                	push   0xb
c00095ed:	53                   	push   ebx
c00095ee:	e8 e1 fe ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c00095f3:	83 c4 20             	add    esp,0x20
c00095f6:	6a 00                	push   0x0
c00095f8:	68 1d 04 00 c0       	push   0xc000041d
c00095fd:	6a 0c                	push   0xc
c00095ff:	53                   	push   ebx
c0009600:	e8 cf fe ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c0009605:	6a 00                	push   0x0
c0009607:	68 25 04 00 c0       	push   0xc0000425
c000960c:	6a 0d                	push   0xd
c000960e:	53                   	push   ebx
c000960f:	e8 c0 fe ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c0009614:	83 c4 20             	add    esp,0x20
c0009617:	6a 00                	push   0x0
c0009619:	68 2d 04 00 c0       	push   0xc000042d
c000961e:	6a 0e                	push   0xe
c0009620:	53                   	push   ebx
c0009621:	e8 ae fe ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c0009626:	6a 00                	push   0x0
c0009628:	68 35 04 00 c0       	push   0xc0000435
c000962d:	6a 0f                	push   0xf
c000962f:	53                   	push   ebx
c0009630:	e8 9f fe ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c0009635:	83 c4 20             	add    esp,0x20
c0009638:	6a 00                	push   0x0
c000963a:	68 3f 04 00 c0       	push   0xc000043f
c000963f:	6a 10                	push   0x10
c0009641:	53                   	push   ebx
c0009642:	e8 8d fe ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c0009647:	6a 00                	push   0x0
c0009649:	68 49 04 00 c0       	push   0xc0000449
c000964e:	6a 11                	push   0x11
c0009650:	53                   	push   ebx
c0009651:	e8 7e fe ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c0009656:	83 c4 20             	add    esp,0x20
c0009659:	6a 00                	push   0x0
c000965b:	68 53 04 00 c0       	push   0xc0000453
c0009660:	6a 12                	push   0x12
c0009662:	53                   	push   ebx
c0009663:	e8 6c fe ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c0009668:	6a 01                	push   0x1
c000966a:	68 ed 04 00 c0       	push   0xc00004ed
c000966f:	6a 60                	push   0x60
c0009671:	53                   	push   ebx
c0009672:	e8 5d fe ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c0009677:	83 c4 20             	add    esp,0x20
c000967a:	6a 00                	push   0x0
c000967c:	68 f4 04 00 c0       	push   0xc00004f4
c0009681:	6a 20                	push   0x20
c0009683:	53                   	push   ebx
c0009684:	e8 4b fe ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c0009689:	6a 00                	push   0x0
c000968b:	68 df 04 00 c0       	push   0xc00004df
c0009690:	6a 21                	push   0x21
c0009692:	53                   	push   ebx
c0009693:	e8 3c fe ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c0009698:	83 c4 20             	add    esp,0x20
c000969b:	6a 00                	push   0x0
c000969d:	68 e6 04 00 c0       	push   0xc00004e6
c00096a2:	6a 22                	push   0x22
c00096a4:	53                   	push   ebx
c00096a5:	e8 2a fe ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c00096aa:	6a 00                	push   0x0
c00096ac:	68 5d 04 00 c0       	push   0xc000045d
c00096b1:	6a 23                	push   0x23
c00096b3:	53                   	push   ebx
c00096b4:	e8 1b fe ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c00096b9:	83 c4 20             	add    esp,0x20
c00096bc:	6a 00                	push   0x0
c00096be:	68 67 04 00 c0       	push   0xc0000467
c00096c3:	6a 24                	push   0x24
c00096c5:	53                   	push   ebx
c00096c6:	e8 09 fe ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c00096cb:	6a 00                	push   0x0
c00096cd:	68 71 04 00 c0       	push   0xc0000471
c00096d2:	6a 25                	push   0x25
c00096d4:	53                   	push   ebx
c00096d5:	e8 fa fd ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c00096da:	83 c4 20             	add    esp,0x20
c00096dd:	6a 00                	push   0x0
c00096df:	68 7b 04 00 c0       	push   0xc000047b
c00096e4:	6a 26                	push   0x26
c00096e6:	53                   	push   ebx
c00096e7:	e8 e8 fd ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c00096ec:	6a 00                	push   0x0
c00096ee:	68 85 04 00 c0       	push   0xc0000485
c00096f3:	6a 27                	push   0x27
c00096f5:	53                   	push   ebx
c00096f6:	e8 d9 fd ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c00096fb:	83 c4 20             	add    esp,0x20
c00096fe:	6a 00                	push   0x0
c0009700:	68 8f 04 00 c0       	push   0xc000048f
c0009705:	6a 28                	push   0x28
c0009707:	53                   	push   ebx
c0009708:	e8 c7 fd ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c000970d:	6a 00                	push   0x0
c000970f:	68 99 04 00 c0       	push   0xc0000499
c0009714:	6a 29                	push   0x29
c0009716:	53                   	push   ebx
c0009717:	e8 b8 fd ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c000971c:	83 c4 20             	add    esp,0x20
c000971f:	6a 00                	push   0x0
c0009721:	68 a3 04 00 c0       	push   0xc00004a3
c0009726:	6a 2a                	push   0x2a
c0009728:	53                   	push   ebx
c0009729:	e8 a6 fd ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c000972e:	6a 00                	push   0x0
c0009730:	68 ad 04 00 c0       	push   0xc00004ad
c0009735:	6a 2b                	push   0x2b
c0009737:	53                   	push   ebx
c0009738:	e8 97 fd ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c000973d:	83 c4 20             	add    esp,0x20
c0009740:	6a 00                	push   0x0
c0009742:	68 b7 04 00 c0       	push   0xc00004b7
c0009747:	6a 2c                	push   0x2c
c0009749:	53                   	push   ebx
c000974a:	e8 85 fd ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c000974f:	6a 00                	push   0x0
c0009751:	68 c1 04 00 c0       	push   0xc00004c1
c0009756:	6a 2d                	push   0x2d
c0009758:	53                   	push   ebx
c0009759:	e8 76 fd ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c000975e:	83 c4 20             	add    esp,0x20
c0009761:	6a 00                	push   0x0
c0009763:	68 cb 04 00 c0       	push   0xc00004cb
c0009768:	6a 2e                	push   0x2e
c000976a:	53                   	push   ebx
c000976b:	e8 64 fd ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c0009770:	6a 00                	push   0x0
c0009772:	68 d5 04 00 c0       	push   0xc00004d5
c0009777:	6a 2f                	push   0x2f
c0009779:	53                   	push   ebx
c000977a:	e8 55 fd ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c000977f:	83 c4 20             	add    esp,0x20
c0009782:	6a 00                	push   0x0
c0009784:	68 2b 05 00 c0       	push   0xc000052b
c0009789:	6a 30                	push   0x30
c000978b:	53                   	push   ebx
c000978c:	e8 43 fd ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c0009791:	6a 00                	push   0x0
c0009793:	68 35 05 00 c0       	push   0xc0000535
c0009798:	6a 31                	push   0x31
c000979a:	53                   	push   ebx
c000979b:	e8 34 fd ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c00097a0:	83 c4 20             	add    esp,0x20
c00097a3:	6a 00                	push   0x0
c00097a5:	68 3f 05 00 c0       	push   0xc000053f
c00097aa:	6a 32                	push   0x32
c00097ac:	53                   	push   ebx
c00097ad:	e8 22 fd ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c00097b2:	6a 00                	push   0x0
c00097b4:	68 49 05 00 c0       	push   0xc0000549
c00097b9:	6a 33                	push   0x33
c00097bb:	53                   	push   ebx
c00097bc:	e8 13 fd ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c00097c1:	83 c4 20             	add    esp,0x20
c00097c4:	6a 00                	push   0x0
c00097c6:	68 53 05 00 c0       	push   0xc0000553
c00097cb:	6a 34                	push   0x34
c00097cd:	53                   	push   ebx
c00097ce:	e8 01 fd ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c00097d3:	6a 00                	push   0x0
c00097d5:	68 5d 05 00 c0       	push   0xc000055d
c00097da:	6a 35                	push   0x35
c00097dc:	53                   	push   ebx
c00097dd:	e8 f2 fc ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c00097e2:	83 c4 20             	add    esp,0x20
c00097e5:	6a 00                	push   0x0
c00097e7:	68 67 05 00 c0       	push   0xc0000567
c00097ec:	6a 36                	push   0x36
c00097ee:	53                   	push   ebx
c00097ef:	e8 e0 fc ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c00097f4:	6a 00                	push   0x0
c00097f6:	68 71 05 00 c0       	push   0xc0000571
c00097fb:	6a 37                	push   0x37
c00097fd:	53                   	push   ebx
c00097fe:	e8 d1 fc ff ff       	call   c00094d4 <IDT::addEntry(int, void (*)(), bool)>
c0009803:	83 c4 1c             	add    esp,0x1c
c0009806:	6a 03                	push   0x3
c0009808:	6a 02                	push   0x2
c000980a:	ff 35 90 65 02 c0    	push   DWORD PTR ds:0xc0026590
c0009810:	e8 81 26 00 00       	call   c000be96 <VAS::allocatePages(int, int)>
c0009815:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000981c:	89 c6                	mov    esi,eax
c000981e:	e8 a0 01 00 00       	call   c00099c3 <malloc>
c0009823:	81 c6 00 20 00 00    	add    esi,0x2000
c0009829:	89 04 24             	mov    DWORD PTR [esp],eax
c000982c:	89 c7                	mov    edi,eax
c000982e:	e8 fd 17 00 00       	call   c000b030 <TSS::TSS()>
c0009833:	83 c4 0c             	add    esp,0xc
c0009836:	68 fb 03 00 c0       	push   0xc00003fb
c000983b:	56                   	push   esi
c000983c:	57                   	push   edi
c000983d:	e8 32 18 00 00       	call   c000b074 <TSS::setup(unsigned long, unsigned long)>
c0009842:	89 c6                	mov    esi,eax
c0009844:	58                   	pop    eax
c0009845:	5a                   	pop    edx
c0009846:	6a 00                	push   0x0
c0009848:	8d 44 24 14          	lea    eax,[esp+0x14]
c000984c:	50                   	push   eax
c000984d:	e8 d6 fb ff ff       	call   c0009428 <IDTEntry::IDTEntry(bool)>
c0009852:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0009856:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c000985b:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c0009862:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c0009868:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000986c:	80 ce 05             	or     dh,0x5
c000986f:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c0009872:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009876:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000987a:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c000987d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0009880:	e8 87 fc ff ff       	call   c000950c <IDT::flush()>
c0009885:	83 c4 20             	add    esp,0x20
c0009888:	5b                   	pop    ebx
c0009889:	5e                   	pop    esi
c000988a:	5f                   	pop    edi
c000988b:	c3                   	ret    

c000988c <sbrk>:
c000988c:	55                   	push   ebp
c000988d:	57                   	push   edi
c000988e:	56                   	push   esi
c000988f:	53                   	push   ebx
c0009890:	83 ec 24             	sub    esp,0x24
c0009893:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0009897:	53                   	push   ebx
c0009898:	68 f8 27 02 c0       	push   0xc00227f8
c000989d:	e8 1d 32 00 00       	call   c000cabf <Dbg::kprintf(char const*, ...)>
c00098a2:	83 c4 10             	add    esp,0x10
c00098a5:	85 db                	test   ebx,ebx
c00098a7:	74 5f                	je     c0009908 <sbrk+0x7c>
c00098a9:	78 64                	js     c000990f <sbrk+0x83>
c00098ab:	a1 cc 56 02 c0       	mov    eax,ds:0xc00256cc
c00098b0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00098b4:	81 c3 ff 0f 00 00    	add    ebx,0xfff
c00098ba:	89 dd                	mov    ebp,ebx
c00098bc:	78 69                	js     c0009927 <sbrk+0x9b>
c00098be:	c1 fd 0c             	sar    ebp,0xc
c00098c1:	bb 00 00 00 00       	mov    ebx,0x0
c00098c6:	8b 35 90 65 02 c0    	mov    esi,DWORD PTR ds:0xc0026590
c00098cc:	8b 3d cc 56 02 c0    	mov    edi,DWORD PTR ds:0xc00256cc
c00098d2:	e8 22 05 00 00       	call   c0009df9 <Phys::allocatePage()>
c00098d7:	68 01 04 00 00       	push   0x401
c00098dc:	57                   	push   edi
c00098dd:	50                   	push   eax
c00098de:	56                   	push   esi
c00098df:	e8 b0 24 00 00       	call   c000bd94 <VAS::mapPage(unsigned long, unsigned long, int)>
c00098e4:	81 05 cc 56 02 c0 00 10 00 00 	add    DWORD PTR ds:0xc00256cc,0x1000
c00098ee:	43                   	inc    ebx
c00098ef:	83 c4 10             	add    esp,0x10
c00098f2:	39 dd                	cmp    ebp,ebx
c00098f4:	75 d0                	jne    c00098c6 <sbrk+0x3a>
c00098f6:	0f 20 d8             	mov    eax,cr3
c00098f9:	0f 22 d8             	mov    cr3,eax
c00098fc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009900:	83 c4 1c             	add    esp,0x1c
c0009903:	5b                   	pop    ebx
c0009904:	5e                   	pop    esi
c0009905:	5f                   	pop    edi
c0009906:	5d                   	pop    ebp
c0009907:	c3                   	ret    
c0009908:	a1 cc 56 02 c0       	mov    eax,ds:0xc00256cc
c000990d:	eb f1                	jmp    c0009900 <sbrk+0x74>
c000990f:	83 ec 08             	sub    esp,0x8
c0009912:	53                   	push   ebx
c0009913:	68 24 28 02 c0       	push   0xc0022824
c0009918:	e8 a2 31 00 00       	call   c000cabf <Dbg::kprintf(char const*, ...)>
c000991d:	83 c4 10             	add    esp,0x10
c0009920:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0009925:	eb d9                	jmp    c0009900 <sbrk+0x74>
c0009927:	8d ab ff 0f 00 00    	lea    ebp,[ebx+0xfff]
c000992d:	eb 8f                	jmp    c00098be <sbrk+0x32>

c000992f <mmap>:
c000992f:	83 ec 18             	sub    esp,0x18
c0009932:	68 16 28 02 c0       	push   0xc0022816
c0009937:	e8 45 aa 00 00       	call   c0014381 <Krnl::panic(char const*)>
c000993c:	b8 00 00 00 00       	mov    eax,0x0
c0009941:	83 c4 1c             	add    esp,0x1c
c0009944:	c3                   	ret    

c0009945 <munmap>:
c0009945:	83 ec 18             	sub    esp,0x18
c0009948:	68 1b 28 02 c0       	push   0xc002281b
c000994d:	e8 2f aa 00 00       	call   c0014381 <Krnl::panic(char const*)>
c0009952:	b8 00 00 00 00       	mov    eax,0x0
c0009957:	83 c4 1c             	add    esp,0x1c
c000995a:	c3                   	ret    

c000995b <liballoc_lock()>:
c000995b:	fa                   	cli    
c000995c:	ff 05 28 79 02 c0    	inc    DWORD PTR ds:0xc0027928
c0009962:	b8 00 00 00 00       	mov    eax,0x0
c0009967:	c3                   	ret    

c0009968 <liballoc_unlock()>:
c0009968:	a1 28 79 02 c0       	mov    eax,ds:0xc0027928
c000996d:	48                   	dec    eax
c000996e:	a3 28 79 02 c0       	mov    ds:0xc0027928,eax
c0009973:	75 01                	jne    c0009976 <liballoc_unlock()+0xe>
c0009975:	fb                   	sti    
c0009976:	b8 00 00 00 00       	mov    eax,0x0
c000997b:	c3                   	ret    

c000997c <liballoc_alloc(int)>:
c000997c:	83 ec 10             	sub    esp,0x10
c000997f:	6a 01                	push   0x1
c0009981:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0009985:	ff 35 90 65 02 c0    	push   DWORD PTR ds:0xc0026590
c000998b:	e8 06 25 00 00       	call   c000be96 <VAS::allocatePages(int, int)>
c0009990:	83 c4 1c             	add    esp,0x1c
c0009993:	c3                   	ret    

c0009994 <liballoc_free(void*, int)>:
c0009994:	83 ec 14             	sub    esp,0x14
c0009997:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000999b:	ff 35 90 65 02 c0    	push   DWORD PTR ds:0xc0026590
c00099a1:	e8 9a 21 00 00       	call   c000bb40 <VAS::freeAllocatedPages(unsigned long)>
c00099a6:	b8 00 00 00 00       	mov    eax,0x0
c00099ab:	83 c4 1c             	add    esp,0x1c
c00099ae:	c3                   	ret    

c00099af <realloc>:
c00099af:	83 ec 14             	sub    esp,0x14
c00099b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00099b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00099ba:	e8 a1 7b ff ff       	call   c0001560 <dlrealloc>
c00099bf:	83 c4 1c             	add    esp,0x1c
c00099c2:	c3                   	ret    

c00099c3 <malloc>:
c00099c3:	83 ec 18             	sub    esp,0x18
c00099c6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00099ca:	e8 54 76 ff ff       	call   c0001023 <dlmalloc>
c00099cf:	83 c4 1c             	add    esp,0x1c
c00099d2:	c3                   	ret    

c00099d3 <free>:
c00099d3:	83 ec 18             	sub    esp,0x18
c00099d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00099da:	e8 e9 72 ff ff       	call   c0000cc8 <dlfree>
c00099df:	83 c4 1c             	add    esp,0x1c
c00099e2:	c3                   	ret    

c00099e3 <rfree>:
c00099e3:	83 ec 18             	sub    esp,0x18
c00099e6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00099ea:	e8 d9 72 ff ff       	call   c0000cc8 <dlfree>
c00099ef:	83 c4 1c             	add    esp,0x1c
c00099f2:	c3                   	ret    

c00099f3 <calloc>:
c00099f3:	56                   	push   esi
c00099f4:	53                   	push   ebx
c00099f5:	83 ec 10             	sub    esp,0x10
c00099f8:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00099fc:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c0009a01:	53                   	push   ebx
c0009a02:	e8 bc ff ff ff       	call   c00099c3 <malloc>
c0009a07:	89 c6                	mov    esi,eax
c0009a09:	83 c4 0c             	add    esp,0xc
c0009a0c:	53                   	push   ebx
c0009a0d:	6a 00                	push   0x0
c0009a0f:	50                   	push   eax
c0009a10:	e8 6f 6c ff ff       	call   c0000684 <memset>
c0009a15:	89 f0                	mov    eax,esi
c0009a17:	83 c4 14             	add    esp,0x14
c0009a1a:	5b                   	pop    ebx
c0009a1b:	5e                   	pop    esi
c0009a1c:	c3                   	ret    

c0009a1d <Krnl::setBootMessage(char const*)>:
c0009a1d:	57                   	push   edi
c0009a1e:	56                   	push   esi
c0009a1f:	53                   	push   ebx
c0009a20:	81 ec a4 00 00 00    	sub    esp,0xa4
c0009a26:	8b 9c 24 b4 00 00 00 	mov    ebx,DWORD PTR [esp+0xb4]
c0009a2d:	68 9e 00 00 00       	push   0x9e
c0009a32:	6a 00                	push   0x0
c0009a34:	8d 74 24 0e          	lea    esi,[esp+0xe]
c0009a38:	56                   	push   esi
c0009a39:	e8 46 6c ff ff       	call   c0000684 <memset>
c0009a3e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0009a41:	e8 5a 6c ff ff       	call   c00006a0 <strlen>
c0009a46:	ba 50 00 00 00       	mov    edx,0x50
c0009a4b:	83 c4 10             	add    esp,0x10
c0009a4e:	29 c2                	sub    edx,eax
c0009a50:	66 0f be 03          	movsx  ax,BYTE PTR [ebx]
c0009a54:	d1 ea                	shr    edx,1
c0009a56:	84 c0                	test   al,al
c0009a58:	74 19                	je     c0009a73 <Krnl::setBootMessage(char const*)+0x56>
c0009a5a:	01 d2                	add    edx,edx
c0009a5c:	43                   	inc    ebx
c0009a5d:	01 f2                	add    edx,esi
c0009a5f:	80 cc 0f             	or     ah,0xf
c0009a62:	83 c2 02             	add    edx,0x2
c0009a65:	66 89 42 fe          	mov    WORD PTR [edx-0x2],ax
c0009a69:	43                   	inc    ebx
c0009a6a:	66 0f be 43 ff       	movsx  ax,BYTE PTR [ebx-0x1]
c0009a6f:	84 c0                	test   al,al
c0009a71:	75 ec                	jne    c0009a5f <Krnl::setBootMessage(char const*)+0x42>
c0009a73:	bf 80 8c 0b c2       	mov    edi,0xc20b8c80
c0009a78:	b9 9e 00 00 00       	mov    ecx,0x9e
c0009a7d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0009a7f:	81 c4 a0 00 00 00    	add    esp,0xa0
c0009a85:	5b                   	pop    ebx
c0009a86:	5e                   	pop    esi
c0009a87:	5f                   	pop    edi
c0009a88:	c3                   	ret    

c0009a89 <kernel_main>:
c0009a89:	57                   	push   edi
c0009a8a:	bf f9 03 00 00       	mov    edi,0x3f9
c0009a8f:	56                   	push   esi
c0009a90:	89 fa                	mov    edx,edi
c0009a92:	53                   	push   ebx
c0009a93:	31 f6                	xor    esi,esi
c0009a95:	83 ec 2c             	sub    esp,0x2c
c0009a98:	89 f0                	mov    eax,esi
c0009a9a:	ee                   	out    dx,al
c0009a9b:	bb fb 03 00 00       	mov    ebx,0x3fb
c0009aa0:	b0 80                	mov    al,0x80
c0009aa2:	89 da                	mov    edx,ebx
c0009aa4:	ee                   	out    dx,al
c0009aa5:	b1 03                	mov    cl,0x3
c0009aa7:	ba f8 03 00 00       	mov    edx,0x3f8
c0009aac:	88 c8                	mov    al,cl
c0009aae:	ee                   	out    dx,al
c0009aaf:	89 f0                	mov    eax,esi
c0009ab1:	89 fa                	mov    edx,edi
c0009ab3:	ee                   	out    dx,al
c0009ab4:	88 c8                	mov    al,cl
c0009ab6:	89 da                	mov    edx,ebx
c0009ab8:	ee                   	out    dx,al
c0009ab9:	b0 c7                	mov    al,0xc7
c0009abb:	ba fa 03 00 00       	mov    edx,0x3fa
c0009ac0:	ee                   	out    dx,al
c0009ac1:	b0 0b                	mov    al,0xb
c0009ac3:	ba fc 03 00 00       	mov    edx,0x3fc
c0009ac8:	ee                   	out    dx,al
c0009ac9:	68 54 28 02 c0       	push   0xc0022854
c0009ace:	e8 ec 2f 00 00       	call   c000cabf <Dbg::kprintf(char const*, ...)>
c0009ad3:	e8 56 0a 00 00       	call   c000a52e <installVgaTextImplementation()>
c0009ad8:	0f b6 05 e0 56 02 c0 	movzx  eax,BYTE PTR ds:0xc00256e0
c0009adf:	83 c4 10             	add    esp,0x10
c0009ae2:	84 c0                	test   al,al
c0009ae4:	74 6c                	je     c0009b52 <kernel_main+0xc9>
c0009ae6:	31 db                	xor    ebx,ebx
c0009ae8:	bf 0a 00 00 00       	mov    edi,0xa
c0009aed:	be 05 00 00 00       	mov    esi,0x5
c0009af2:	31 c9                	xor    ecx,ecx
c0009af4:	eb 2a                	jmp    c0009b20 <kernel_main+0x97>
c0009af6:	3c 0d                	cmp    al,0xd
c0009af8:	74 1a                	je     c0009b14 <kernel_main+0x8b>
c0009afa:	3c 0a                	cmp    al,0xa
c0009afc:	74 40                	je     c0009b3e <kernel_main+0xb5>
c0009afe:	8d 14 b6             	lea    edx,[esi+esi*4]
c0009b01:	80 cc 0e             	or     ah,0xe
c0009b04:	c1 e2 04             	shl    edx,0x4
c0009b07:	01 ca                	add    edx,ecx
c0009b09:	41                   	inc    ecx
c0009b0a:	01 fa                	add    edx,edi
c0009b0c:	66 89 84 12 00 80 0b c2 	mov    WORD PTR [edx+edx*1-0x3df48000],ax
c0009b14:	43                   	inc    ebx
c0009b15:	0f b6 83 e0 56 02 c0 	movzx  eax,BYTE PTR [ebx-0x3ffda920]
c0009b1c:	84 c0                	test   al,al
c0009b1e:	74 32                	je     c0009b52 <kernel_main+0xc9>
c0009b20:	80 b9 16 57 02 c0 db 	cmp    BYTE PTR [ecx-0x3ffda8ea],0xdb
c0009b27:	75 cd                	jne    c0009af6 <kernel_main+0x6d>
c0009b29:	0f b6 91 15 57 02 c0 	movzx  edx,BYTE PTR [ecx-0x3ffda8eb]
c0009b30:	83 e2 fe             	and    edx,0xfffffffe
c0009b33:	81 fa ba 00 00 00    	cmp    edx,0xba
c0009b39:	75 bb                	jne    c0009af6 <kernel_main+0x6d>
c0009b3b:	47                   	inc    edi
c0009b3c:	eb b8                	jmp    c0009af6 <kernel_main+0x6d>
c0009b3e:	43                   	inc    ebx
c0009b3f:	46                   	inc    esi
c0009b40:	31 c9                	xor    ecx,ecx
c0009b42:	0f b6 83 e0 56 02 c0 	movzx  eax,BYTE PTR [ebx-0x3ffda920]
c0009b49:	bf 0a 00 00 00       	mov    edi,0xa
c0009b4e:	84 c0                	test   al,al
c0009b50:	75 ce                	jne    c0009b20 <kernel_main+0x97>
c0009b52:	83 ec 0c             	sub    esp,0xc
c0009b55:	68 6c 28 02 c0       	push   0xc002286c
c0009b5a:	e8 be fe ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0009b5f:	a1 00 05 00 00       	mov    eax,ds:0x500
c0009b64:	a3 80 64 02 c0       	mov    ds:0xc0026480,eax
c0009b69:	a1 24 05 00 00       	mov    eax,ds:0x524
c0009b6e:	05 ff 0f 00 00       	add    eax,0xfff
c0009b73:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009b78:	89 04 24             	mov    DWORD PTR [esp],eax
c0009b7b:	e8 f8 03 00 00       	call   c0009f78 <Phys::physicalMemorySetup(unsigned int)>
c0009b80:	e8 27 1d 00 00       	call   c000b8ac <Virt::virtualMemorySetup()>
c0009b85:	58                   	pop    eax
c0009b86:	8d 5c 24 18          	lea    ebx,[esp+0x18]
c0009b8a:	53                   	push   ebx
c0009b8b:	e8 d8 1d 00 00       	call   c000b968 <VAS::VAS()>
c0009b90:	89 1d 90 65 02 c0    	mov    DWORD PTR ds:0xc0026590,ebx
c0009b96:	e8 85 64 ff ff       	call   c0000020 <callGlobalConstructors>
c0009b9b:	c7 04 24 ec 01 00 00 	mov    DWORD PTR [esp],0x1ec
c0009ba2:	e8 1c fe ff ff       	call   c00099c3 <malloc>
c0009ba7:	89 04 24             	mov    DWORD PTR [esp],eax
c0009baa:	89 c6                	mov    esi,eax
c0009bac:	e8 09 f0 ff ff       	call   c0008bba <Computer::Computer()>
c0009bb1:	6a 00                	push   0x0
c0009bb3:	89 35 68 64 02 c0    	mov    DWORD PTR ds:0xc0026468,esi
c0009bb9:	6a 00                	push   0x0
c0009bbb:	6a 00                	push   0x0
c0009bbd:	56                   	push   esi
c0009bbe:	e8 03 f4 ff ff       	call   c0008fc6 <Computer::open(int, int, void*)>
c0009bc3:	83 c4 14             	add    esp,0x14
c0009bc6:	53                   	push   ebx
c0009bc7:	e8 4c 20 00 00       	call   c000bc18 <VAS::~VAS()>
c0009bcc:	83 c4 30             	add    esp,0x30
c0009bcf:	5b                   	pop    ebx
c0009bd0:	5e                   	pop    esi
c0009bd1:	5f                   	pop    edi
c0009bd2:	c3                   	ret    

c0009bd3 <Phys::allocateDMA(unsigned long)>:
c0009bd3:	55                   	push   ebp
c0009bd4:	31 ed                	xor    ebp,ebp
c0009bd6:	57                   	push   edi
c0009bd7:	56                   	push   esi
c0009bd8:	53                   	push   ebx
c0009bd9:	31 db                	xor    ebx,ebx
c0009bdb:	83 ec 28             	sub    esp,0x28
c0009bde:	68 8b 28 02 c0       	push   0xc002288b
c0009be3:	e8 d7 2e 00 00       	call   c000cabf <Dbg::kprintf(char const*, ...)>
c0009be8:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0009bec:	83 c4 10             	add    esp,0x10
c0009bef:	8d b8 ff 0f 00 00    	lea    edi,[eax+0xfff]
c0009bf5:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0009bfd:	c1 ef 0c             	shr    edi,0xc
c0009c00:	31 c0                	xor    eax,eax
c0009c02:	eb 19                	jmp    c0009c1d <Phys::allocateDMA(unsigned long)+0x4a>
c0009c04:	85 c0                	test   eax,eax
c0009c06:	75 06                	jne    c0009c0e <Phys::allocateDMA(unsigned long)+0x3b>
c0009c08:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0009c0c:	89 dd                	mov    ebp,ebx
c0009c0e:	8d 70 01             	lea    esi,[eax+0x1]
c0009c11:	39 f7                	cmp    edi,esi
c0009c13:	74 3f                	je     c0009c54 <Phys::allocateDMA(unsigned long)+0x81>
c0009c15:	89 f0                	mov    eax,esi
c0009c17:	43                   	inc    ebx
c0009c18:	83 fb 0f             	cmp    ebx,0xf
c0009c1b:	7f 11                	jg     c0009c2e <Phys::allocateDMA(unsigned long)+0x5b>
c0009c1d:	80 bb 9c 64 02 c0 00 	cmp    BYTE PTR [ebx-0x3ffd9b64],0x0
c0009c24:	74 de                	je     c0009c04 <Phys::allocateDMA(unsigned long)+0x31>
c0009c26:	31 c0                	xor    eax,eax
c0009c28:	43                   	inc    ebx
c0009c29:	83 fb 0f             	cmp    ebx,0xf
c0009c2c:	7e ef                	jle    c0009c1d <Phys::allocateDMA(unsigned long)+0x4a>
c0009c2e:	83 ec 0c             	sub    esp,0xc
c0009c31:	68 bf 28 02 c0       	push   0xc00228bf
c0009c36:	e8 84 2e 00 00       	call   c000cabf <Dbg::kprintf(char const*, ...)>
c0009c3b:	c7 04 24 7c 29 02 c0 	mov    DWORD PTR [esp],0xc002297c
c0009c42:	e8 3a a7 00 00       	call   c0014381 <Krnl::panic(char const*)>
c0009c47:	83 c4 10             	add    esp,0x10
c0009c4a:	31 c0                	xor    eax,eax
c0009c4c:	83 c4 1c             	add    esp,0x1c
c0009c4f:	5b                   	pop    ebx
c0009c50:	5e                   	pop    esi
c0009c51:	5f                   	pop    edi
c0009c52:	5d                   	pop    ebp
c0009c53:	c3                   	ret    
c0009c54:	89 e9                	mov    ecx,ebp
c0009c56:	c1 f9 04             	sar    ecx,0x4
c0009c59:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0009c5d:	8d 4c 3d 00          	lea    ecx,[ebp+edi*1+0x0]
c0009c61:	89 ca                	mov    edx,ecx
c0009c63:	4a                   	dec    edx
c0009c64:	79 03                	jns    c0009c69 <Phys::allocateDMA(unsigned long)+0x96>
c0009c66:	8d 51 0e             	lea    edx,[ecx+0xe]
c0009c69:	c1 fa 04             	sar    edx,0x4
c0009c6c:	39 54 24 0c          	cmp    DWORD PTR [esp+0xc],edx
c0009c70:	74 08                	je     c0009c7a <Phys::allocateDMA(unsigned long)+0xa7>
c0009c72:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0009c76:	31 c0                	xor    eax,eax
c0009c78:	eb ae                	jmp    c0009c28 <Phys::allocateDMA(unsigned long)+0x55>
c0009c7a:	85 f6                	test   esi,esi
c0009c7c:	74 15                	je     c0009c93 <Phys::allocateDMA(unsigned long)+0xc0>
c0009c7e:	8d 95 9c 64 02 c0    	lea    edx,[ebp-0x3ffd9b64]
c0009c84:	8d 84 05 9d 64 02 c0 	lea    eax,[ebp+eax*1-0x3ffd9b63]
c0009c8b:	c6 02 01             	mov    BYTE PTR [edx],0x1
c0009c8e:	42                   	inc    edx
c0009c8f:	39 d0                	cmp    eax,edx
c0009c91:	75 f8                	jne    c0009c8b <Phys::allocateDMA(unsigned long)+0xb8>
c0009c93:	83 ec 0c             	sub    esp,0xc
c0009c96:	01 3d 94 64 02 c0    	add    DWORD PTR ds:0xc0026494,edi
c0009c9c:	68 a4 28 02 c0       	push   0xc00228a4
c0009ca1:	e8 19 2e 00 00       	call   c000cabf <Dbg::kprintf(char const*, ...)>
c0009ca6:	83 c4 10             	add    esp,0x10
c0009ca9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009cad:	85 c0                	test   eax,eax
c0009caf:	74 23                	je     c0009cd4 <Phys::allocateDMA(unsigned long)+0x101>
c0009cb1:	83 ec 0c             	sub    esp,0xc
c0009cb4:	68 bb 28 02 c0       	push   0xc00228bb
c0009cb9:	e8 01 2e 00 00       	call   c000cabf <Dbg::kprintf(char const*, ...)>
c0009cbe:	c7 04 24 7c 29 02 c0 	mov    DWORD PTR [esp],0xc002297c
c0009cc5:	e8 b7 a6 00 00       	call   c0014381 <Krnl::panic(char const*)>
c0009cca:	83 c4 10             	add    esp,0x10
c0009ccd:	89 f0                	mov    eax,esi
c0009ccf:	e9 43 ff ff ff       	jmp    c0009c17 <Phys::allocateDMA(unsigned long)+0x44>
c0009cd4:	c1 e5 0c             	shl    ebp,0xc
c0009cd7:	8d 85 00 00 01 c2    	lea    eax,[ebp-0x3dff0000]
c0009cdd:	e9 6a ff ff ff       	jmp    c0009c4c <Phys::allocateDMA(unsigned long)+0x79>

c0009ce2 <Phys::freeDMA(unsigned long, unsigned long)>:
c0009ce2:	83 ec 18             	sub    esp,0x18
c0009ce5:	68 c3 28 02 c0       	push   0xc00228c3
c0009cea:	e8 d0 2d 00 00       	call   c000cabf <Dbg::kprintf(char const*, ...)>
c0009cef:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0009cf3:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c0009cf9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009cfd:	c1 ea 0c             	shr    edx,0xc
c0009d00:	05 00 00 ff 3d       	add    eax,0x3dff0000
c0009d05:	29 15 94 64 02 c0    	sub    DWORD PTR ds:0xc0026494,edx
c0009d0b:	c1 e8 0c             	shr    eax,0xc
c0009d0e:	83 c4 10             	add    esp,0x10
c0009d11:	85 d2                	test   edx,edx
c0009d13:	74 0f                	je     c0009d24 <Phys::freeDMA(unsigned long, unsigned long)+0x42>
c0009d15:	05 9c 64 02 c0       	add    eax,0xc002649c
c0009d1a:	01 c2                	add    edx,eax
c0009d1c:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0009d1f:	40                   	inc    eax
c0009d20:	39 d0                	cmp    eax,edx
c0009d22:	75 f8                	jne    c0009d1c <Phys::freeDMA(unsigned long, unsigned long)+0x3a>
c0009d24:	83 c4 0c             	add    esp,0xc
c0009d27:	c3                   	ret    

c0009d28 <Phys::setPageState(unsigned long, bool)>:
c0009d28:	56                   	push   esi
c0009d29:	ba 01 00 00 00       	mov    edx,0x1
c0009d2e:	53                   	push   ebx
c0009d2f:	8b 35 24 58 02 c0    	mov    esi,DWORD PTR ds:0xc0025824
c0009d35:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0009d39:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0009d3d:	89 c8                	mov    eax,ecx
c0009d3f:	83 e1 07             	and    ecx,0x7
c0009d42:	c1 e8 03             	shr    eax,0x3
c0009d45:	d3 e3                	shl    ebx,cl
c0009d47:	01 c6                	add    esi,eax
c0009d49:	d3 e2                	shl    edx,cl
c0009d4b:	f7 d2                	not    edx
c0009d4d:	20 16                	and    BYTE PTR [esi],dl
c0009d4f:	03 05 24 58 02 c0    	add    eax,DWORD PTR ds:0xc0025824
c0009d55:	08 18                	or     BYTE PTR [eax],bl
c0009d57:	5b                   	pop    ebx
c0009d58:	5e                   	pop    esi
c0009d59:	c3                   	ret    

c0009d5a <Phys::getPageState(unsigned long)>:
c0009d5a:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0009d5e:	8b 15 24 58 02 c0    	mov    edx,DWORD PTR ds:0xc0025824
c0009d64:	89 c8                	mov    eax,ecx
c0009d66:	83 e1 07             	and    ecx,0x7
c0009d69:	c1 e8 03             	shr    eax,0x3
c0009d6c:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
c0009d70:	d3 f8                	sar    eax,cl
c0009d72:	83 e0 01             	and    eax,0x1
c0009d75:	c3                   	ret    

c0009d76 <Phys::freePage(unsigned long)>:
c0009d76:	53                   	push   ebx
c0009d77:	83 ec 10             	sub    esp,0x10
c0009d7a:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0009d7e:	53                   	push   ebx
c0009d7f:	68 d9 28 02 c0       	push   0xc00228d9
c0009d84:	e8 36 2d 00 00       	call   c000cabf <Dbg::kprintf(char const*, ...)>
c0009d89:	8d 83 00 00 ff ff    	lea    eax,[ebx-0x10000]
c0009d8f:	83 c4 10             	add    esp,0x10
c0009d92:	3d ff ff 00 00       	cmp    eax,0xffff
c0009d97:	76 3d                	jbe    c0009dd6 <Phys::freePage(unsigned long)+0x60>
c0009d99:	83 ec 0c             	sub    esp,0xc
c0009d9c:	c1 eb 0c             	shr    ebx,0xc
c0009d9f:	53                   	push   ebx
c0009da0:	e8 b5 ff ff ff       	call   c0009d5a <Phys::getPageState(unsigned long)>
c0009da5:	83 c4 10             	add    esp,0x10
c0009da8:	84 c0                	test   al,al
c0009daa:	74 19                	je     c0009dc5 <Phys::freePage(unsigned long)+0x4f>
c0009dac:	83 ec 08             	sub    esp,0x8
c0009daf:	ff 0d 94 64 02 c0    	dec    DWORD PTR ds:0xc0026494
c0009db5:	6a 00                	push   0x0
c0009db7:	53                   	push   ebx
c0009db8:	e8 6b ff ff ff       	call   c0009d28 <Phys::setPageState(unsigned long, bool)>
c0009dbd:	83 c4 10             	add    esp,0x10
c0009dc0:	83 c4 08             	add    esp,0x8
c0009dc3:	5b                   	pop    ebx
c0009dc4:	c3                   	ret    
c0009dc5:	c7 44 24 10 03 29 02 c0 	mov    DWORD PTR [esp+0x10],0xc0022903
c0009dcd:	83 c4 08             	add    esp,0x8
c0009dd0:	5b                   	pop    ebx
c0009dd1:	e9 ab a5 00 00       	jmp    c0014381 <Krnl::panic(char const*)>
c0009dd6:	83 ec 08             	sub    esp,0x8
c0009dd9:	53                   	push   ebx
c0009dda:	68 ec 28 02 c0       	push   0xc00228ec
c0009ddf:	e8 db 2c 00 00       	call   c000cabf <Dbg::kprintf(char const*, ...)>
c0009de4:	58                   	pop    eax
c0009de5:	5a                   	pop    edx
c0009de6:	68 00 10 00 00       	push   0x1000
c0009deb:	53                   	push   ebx
c0009dec:	e8 f1 fe ff ff       	call   c0009ce2 <Phys::freeDMA(unsigned long, unsigned long)>
c0009df1:	83 c4 10             	add    esp,0x10
c0009df4:	83 c4 08             	add    esp,0x8
c0009df7:	5b                   	pop    ebx
c0009df8:	c3                   	ret    

c0009df9 <Phys::allocatePage()>:
c0009df9:	56                   	push   esi
c0009dfa:	53                   	push   ebx
c0009dfb:	83 ec 14             	sub    esp,0x14
c0009dfe:	8b 35 88 64 02 c0    	mov    esi,DWORD PTR ds:0xc0026488
c0009e04:	89 f3                	mov    ebx,esi
c0009e06:	eb 0a                	jmp    c0009e12 <Phys::allocatePage()+0x19>
c0009e08:	89 1d 88 64 02 c0    	mov    DWORD PTR ds:0xc0026488,ebx
c0009e0e:	39 de                	cmp    esi,ebx
c0009e10:	74 24                	je     c0009e36 <Phys::allocatePage()+0x3d>
c0009e12:	53                   	push   ebx
c0009e13:	e8 42 ff ff ff       	call   c0009d5a <Phys::getPageState(unsigned long)>
c0009e18:	5a                   	pop    edx
c0009e19:	84 c0                	test   al,al
c0009e1b:	74 69                	je     c0009e86 <Phys::allocatePage()+0x8d>
c0009e1d:	43                   	inc    ebx
c0009e1e:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c0009e24:	75 e2                	jne    c0009e08 <Phys::allocatePage()+0xf>
c0009e26:	31 db                	xor    ebx,ebx
c0009e28:	c7 05 88 64 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026488,0x0
c0009e32:	39 de                	cmp    esi,ebx
c0009e34:	75 dc                	jne    c0009e12 <Phys::allocatePage()+0x19>
c0009e36:	83 ec 0c             	sub    esp,0xc
c0009e39:	80 35 ac 64 02 c0 01 	xor    BYTE PTR ds:0xc00264ac,0x1
c0009e40:	68 a4 29 02 c0       	push   0xc00229a4
c0009e45:	e8 75 2c 00 00       	call   c000cabf <Dbg::kprintf(char const*, ...)>
c0009e4a:	58                   	pop    eax
c0009e4b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0009e50:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0009e53:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0009e59:	e8 f0 28 00 00       	call   c000c74e <VAS::scanForEviction()>
c0009e5e:	83 c4 10             	add    esp,0x10
c0009e61:	85 c0                	test   eax,eax
c0009e63:	75 62                	jne    c0009ec7 <Phys::allocatePage()+0xce>
c0009e65:	83 ec 0c             	sub    esp,0xc
c0009e68:	68 c8 29 02 c0       	push   0xc00229c8
c0009e6d:	e8 0f a5 00 00       	call   c0014381 <Krnl::panic(char const*)>
c0009e72:	83 c4 10             	add    esp,0x10
c0009e75:	8b 1d 88 64 02 c0    	mov    ebx,DWORD PTR ds:0xc0026488
c0009e7b:	53                   	push   ebx
c0009e7c:	e8 d9 fe ff ff       	call   c0009d5a <Phys::getPageState(unsigned long)>
c0009e81:	5a                   	pop    edx
c0009e82:	84 c0                	test   al,al
c0009e84:	75 97                	jne    c0009e1d <Phys::allocatePage()+0x24>
c0009e86:	6a 01                	push   0x1
c0009e88:	53                   	push   ebx
c0009e89:	e8 9a fe ff ff       	call   c0009d28 <Phys::setPageState(unsigned long, bool)>
c0009e8e:	5a                   	pop    edx
c0009e8f:	a1 94 64 02 c0       	mov    eax,ds:0xc0026494
c0009e94:	59                   	pop    ecx
c0009e95:	40                   	inc    eax
c0009e96:	8b 15 88 64 02 c0    	mov    edx,DWORD PTR ds:0xc0026488
c0009e9c:	a3 94 64 02 c0       	mov    ds:0xc0026494,eax
c0009ea1:	c1 e2 0c             	shl    edx,0xc
c0009ea4:	52                   	push   edx
c0009ea5:	ff 35 98 64 02 c0    	push   DWORD PTR ds:0xc0026498
c0009eab:	50                   	push   eax
c0009eac:	68 19 29 02 c0       	push   0xc0022919
c0009eb1:	e8 09 2c 00 00       	call   c000cabf <Dbg::kprintf(char const*, ...)>
c0009eb6:	a1 88 64 02 c0       	mov    eax,ds:0xc0026488
c0009ebb:	83 c4 10             	add    esp,0x10
c0009ebe:	c1 e0 0c             	shl    eax,0xc
c0009ec1:	83 c4 14             	add    esp,0x14
c0009ec4:	5b                   	pop    ebx
c0009ec5:	5e                   	pop    esi
c0009ec6:	c3                   	ret    
c0009ec7:	83 ec 08             	sub    esp,0x8
c0009eca:	89 c2                	mov    edx,eax
c0009ecc:	6a 01                	push   0x1
c0009ece:	c1 ea 0c             	shr    edx,0xc
c0009ed1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009ed5:	52                   	push   edx
c0009ed6:	e8 4d fe ff ff       	call   c0009d28 <Phys::setPageState(unsigned long, bool)>
c0009edb:	83 c4 10             	add    esp,0x10
c0009ede:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009ee2:	eb dd                	jmp    c0009ec1 <Phys::allocatePage()+0xc8>

c0009ee4 <Phys::allocateContiguousPages(int)>:
c0009ee4:	57                   	push   edi
c0009ee5:	56                   	push   esi
c0009ee6:	53                   	push   ebx
c0009ee7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0009eeb:	fa                   	cli    
c0009eec:	ff 05 28 79 02 c0    	inc    DWORD PTR ds:0xc0027928
c0009ef2:	31 db                	xor    ebx,ebx
c0009ef4:	85 db                	test   ebx,ebx
c0009ef6:	75 11                	jne    c0009f09 <Phys::allocateContiguousPages(int)+0x25>
c0009ef8:	e8 fc fe ff ff       	call   c0009df9 <Phys::allocatePage()>
c0009efd:	83 fe 01             	cmp    esi,0x1
c0009f00:	89 c7                	mov    edi,eax
c0009f02:	74 21                	je     c0009f25 <Phys::allocateContiguousPages(int)+0x41>
c0009f04:	bb 01 00 00 00       	mov    ebx,0x1
c0009f09:	e8 eb fe ff ff       	call   c0009df9 <Phys::allocatePage()>
c0009f0e:	89 da                	mov    edx,ebx
c0009f10:	c1 e2 0c             	shl    edx,0xc
c0009f13:	01 fa                	add    edx,edi
c0009f15:	39 c2                	cmp    edx,eax
c0009f17:	74 20                	je     c0009f39 <Phys::allocateContiguousPages(int)+0x55>
c0009f19:	bb 01 00 00 00       	mov    ebx,0x1
c0009f1e:	89 c7                	mov    edi,eax
c0009f20:	83 fe 01             	cmp    esi,0x1
c0009f23:	75 e4                	jne    c0009f09 <Phys::allocateContiguousPages(int)+0x25>
c0009f25:	a1 28 79 02 c0       	mov    eax,ds:0xc0027928
c0009f2a:	48                   	dec    eax
c0009f2b:	a3 28 79 02 c0       	mov    ds:0xc0027928,eax
c0009f30:	75 01                	jne    c0009f33 <Phys::allocateContiguousPages(int)+0x4f>
c0009f32:	fb                   	sti    
c0009f33:	89 f8                	mov    eax,edi
c0009f35:	5b                   	pop    ebx
c0009f36:	5e                   	pop    esi
c0009f37:	5f                   	pop    edi
c0009f38:	c3                   	ret    
c0009f39:	43                   	inc    ebx
c0009f3a:	39 f3                	cmp    ebx,esi
c0009f3c:	75 b6                	jne    c0009ef4 <Phys::allocateContiguousPages(int)+0x10>
c0009f3e:	eb e5                	jmp    c0009f25 <Phys::allocateContiguousPages(int)+0x41>

c0009f40 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c0009f40:	56                   	push   esi
c0009f41:	53                   	push   ebx
c0009f42:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0009f46:	39 1d 8c 64 02 c0    	cmp    DWORD PTR ds:0xc002648c,ebx
c0009f4c:	73 06                	jae    c0009f54 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c0009f4e:	89 1d 8c 64 02 c0    	mov    DWORD PTR ds:0xc002648c,ebx
c0009f54:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009f58:	c1 eb 0c             	shr    ebx,0xc
c0009f5b:	c1 e8 0c             	shr    eax,0xc
c0009f5e:	39 d8                	cmp    eax,ebx
c0009f60:	73 13                	jae    c0009f75 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c0009f62:	6a 00                	push   0x0
c0009f64:	8d 70 01             	lea    esi,[eax+0x1]
c0009f67:	50                   	push   eax
c0009f68:	e8 bb fd ff ff       	call   c0009d28 <Phys::setPageState(unsigned long, bool)>
c0009f6d:	5a                   	pop    edx
c0009f6e:	89 f0                	mov    eax,esi
c0009f70:	59                   	pop    ecx
c0009f71:	39 f3                	cmp    ebx,esi
c0009f73:	75 ed                	jne    c0009f62 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c0009f75:	5b                   	pop    ebx
c0009f76:	5e                   	pop    esi
c0009f77:	c3                   	ret    

c0009f78 <Phys::physicalMemorySetup(unsigned int)>:
c0009f78:	55                   	push   ebp
c0009f79:	57                   	push   edi
c0009f7a:	56                   	push   esi
c0009f7b:	53                   	push   ebx
c0009f7c:	31 db                	xor    ebx,ebx
c0009f7e:	83 ec 40             	sub    esp,0x40
c0009f81:	6a 10                	push   0x10
c0009f83:	6a 00                	push   0x0
c0009f85:	68 9c 64 02 c0       	push   0xc002649c
c0009f8a:	e8 f5 66 ff ff       	call   c0000684 <memset>
c0009f8f:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0009f93:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009f98:	05 00 10 00 00       	add    eax,0x1000
c0009f9d:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0009fa1:	5a                   	pop    edx
c0009fa2:	59                   	pop    ecx
c0009fa3:	50                   	push   eax
c0009fa4:	68 37 29 02 c0       	push   0xc0022937
c0009fa9:	e8 11 2b 00 00       	call   c000cabf <Dbg::kprintf(char const*, ...)>
c0009fae:	83 c4 10             	add    esp,0x10
c0009fb1:	83 ec 08             	sub    esp,0x8
c0009fb4:	6a 01                	push   0x1
c0009fb6:	53                   	push   ebx
c0009fb7:	43                   	inc    ebx
c0009fb8:	e8 6b fd ff ff       	call   c0009d28 <Phys::setPageState(unsigned long, bool)>
c0009fbd:	83 c4 10             	add    esp,0x10
c0009fc0:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c0009fc6:	75 e9                	jne    c0009fb1 <Phys::physicalMemorySetup(unsigned int)+0x39>
c0009fc8:	0f b7 05 13 05 00 c2 	movzx  eax,WORD PTR ds:0xc2000513
c0009fcf:	66 85 c0             	test   ax,ax
c0009fd2:	0f 84 8e 01 00 00    	je     c000a166 <Phys::physicalMemorySetup(unsigned int)+0x1ee>
c0009fd8:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009fdc:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0009fe4:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0009fe8:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c0009fed:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009ff1:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0009ff9:	eb 15                	jmp    c000a010 <Phys::physicalMemorySetup(unsigned int)+0x98>
c0009ffb:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c0009fff:	83 c3 18             	add    ebx,0x18
c000a002:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000a006:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c000a00a:	0f 84 66 01 00 00    	je     c000a176 <Phys::physicalMemorySetup(unsigned int)+0x1fe>
c000a010:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000a013:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000a016:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000a019:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a01d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a021:	8b 33                	mov    esi,DWORD PTR [ebx]
c000a023:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c000a026:	01 f0                	add    eax,esi
c000a028:	55                   	push   ebp
c000a029:	11 fa                	adc    edx,edi
c000a02b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a02f:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000a033:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000a037:	56                   	push   esi
c000a038:	68 f8 29 02 c0       	push   0xc00229f8
c000a03d:	e8 7d 2a 00 00       	call   c000cabf <Dbg::kprintf(char const*, ...)>
c000a042:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a046:	83 c4 10             	add    esp,0x10
c000a049:	09 f8                	or     eax,edi
c000a04b:	0f 85 25 01 00 00    	jne    c000a176 <Phys::physicalMemorySetup(unsigned int)+0x1fe>
c000a051:	4d                   	dec    ebp
c000a052:	75 a7                	jne    c0009ffb <Phys::physicalMemorySetup(unsigned int)+0x83>
c000a054:	ba 00 00 08 00       	mov    edx,0x80000
c000a059:	89 c1                	mov    ecx,eax
c000a05b:	39 f2                	cmp    edx,esi
c000a05d:	19 f9                	sbb    ecx,edi
c000a05f:	0f 82 a7 00 00 00    	jb     c000a10c <Phys::physicalMemorySetup(unsigned int)+0x194>
c000a065:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c000a069:	89 c1                	mov    ecx,eax
c000a06b:	1b 4c 24 0c          	sbb    ecx,DWORD PTR [esp+0xc]
c000a06f:	0f 83 97 00 00 00    	jae    c000a10c <Phys::physicalMemorySetup(unsigned int)+0x194>
c000a075:	ba 00 00 0a 00       	mov    edx,0xa0000
c000a07a:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000a07e:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000a082:	39 fa                	cmp    edx,edi
c000a084:	19 e8                	sbb    eax,ebp
c000a086:	0f 82 85 01 00 00    	jb     c000a211 <Phys::physicalMemorySetup(unsigned int)+0x299>
c000a08c:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000a090:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000a094:	81 c7 00 00 f8 ff    	add    edi,0xfff80000
c000a09a:	ba ff 1f 00 00       	mov    edx,0x1fff
c000a09f:	83 d5 ff             	adc    ebp,0xffffffff
c000a0a2:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c000a0a6:	31 c0                	xor    eax,eax
c000a0a8:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c000a0ac:	39 fa                	cmp    edx,edi
c000a0ae:	89 c1                	mov    ecx,eax
c000a0b0:	19 e9                	sbb    ecx,ebp
c000a0b2:	0f 83 43 ff ff ff    	jae    c0009ffb <Phys::physicalMemorySetup(unsigned int)+0x83>
c000a0b8:	be 00 00 08 00       	mov    esi,0x80000
c000a0bd:	57                   	push   edi
c000a0be:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000a0c2:	57                   	push   edi
c000a0c3:	56                   	push   esi
c000a0c4:	68 1c 2a 02 c0       	push   0xc0022a1c
c000a0c9:	e8 f1 29 00 00       	call   c000cabf <Dbg::kprintf(char const*, ...)>
c000a0ce:	5d                   	pop    ebp
c000a0cf:	58                   	pop    eax
c000a0d0:	57                   	push   edi
c000a0d1:	56                   	push   esi
c000a0d2:	e8 69 fe ff ff       	call   c0009f40 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c000a0d7:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000a0db:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000a0df:	83 c4 0c             	add    esp,0xc
c000a0e2:	0f ac d0 0c          	shrd   eax,edx,0xc
c000a0e6:	03 05 98 64 02 c0    	add    eax,DWORD PTR ds:0xc0026498
c000a0ec:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000a0f3:	a3 98 64 02 c0       	mov    ds:0xc0026498,eax
c000a0f8:	52                   	push   edx
c000a0f9:	50                   	push   eax
c000a0fa:	68 5d 29 02 c0       	push   0xc002295d
c000a0ff:	e8 bb 29 00 00       	call   c000cabf <Dbg::kprintf(char const*, ...)>
c000a104:	83 c4 10             	add    esp,0x10
c000a107:	e9 ef fe ff ff       	jmp    c0009ffb <Phys::physicalMemorySetup(unsigned int)+0x83>
c000a10c:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c000a110:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a114:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000a118:	39 ea                	cmp    edx,ebp
c000a11a:	1b 4c 24 2c          	sbb    ecx,DWORD PTR [esp+0x2c]
c000a11e:	0f 82 d7 fe ff ff    	jb     c0009ffb <Phys::physicalMemorySetup(unsigned int)+0x83>
c000a124:	ba ff 1f 00 00       	mov    edx,0x1fff
c000a129:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c000a12d:	1b 44 24 1c          	sbb    eax,DWORD PTR [esp+0x1c]
c000a131:	0f 83 c4 fe ff ff    	jae    c0009ffb <Phys::physicalMemorySetup(unsigned int)+0x83>
c000a137:	39 ee                	cmp    esi,ebp
c000a139:	89 f8                	mov    eax,edi
c000a13b:	1b 44 24 2c          	sbb    eax,DWORD PTR [esp+0x2c]
c000a13f:	0f 83 78 ff ff ff    	jae    c000a0bd <Phys::physicalMemorySetup(unsigned int)+0x145>
c000a145:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000a149:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000a14d:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c000a151:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000a155:	1b 54 24 2c          	sbb    edx,DWORD PTR [esp+0x2c]
c000a159:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a15d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a161:	e9 57 ff ff ff       	jmp    c000a0bd <Phys::physicalMemorySetup(unsigned int)+0x145>
c000a166:	83 ec 0c             	sub    esp,0xc
c000a169:	68 4f 29 02 c0       	push   0xc002294f
c000a16e:	e8 0e a2 00 00       	call   c0014381 <Krnl::panic(char const*)>
c000a173:	83 c4 10             	add    esp,0x10
c000a176:	bb 40 01 00 00       	mov    ebx,0x140
c000a17b:	83 ec 08             	sub    esp,0x8
c000a17e:	6a 00                	push   0x0
c000a180:	53                   	push   ebx
c000a181:	43                   	inc    ebx
c000a182:	e8 a1 fb ff ff       	call   c0009d28 <Phys::setPageState(unsigned long, bool)>
c000a187:	ff 05 98 64 02 c0    	inc    DWORD PTR ds:0xc0026498
c000a18d:	83 c4 10             	add    esp,0x10
c000a190:	81 fb c0 01 00 00    	cmp    ebx,0x1c0
c000a196:	75 e3                	jne    c000a17b <Phys::physicalMemorySetup(unsigned int)+0x203>
c000a198:	bb d0 01 00 00       	mov    ebx,0x1d0
c000a19d:	83 ec 08             	sub    esp,0x8
c000a1a0:	6a 00                	push   0x0
c000a1a2:	53                   	push   ebx
c000a1a3:	43                   	inc    ebx
c000a1a4:	e8 7f fb ff ff       	call   c0009d28 <Phys::setPageState(unsigned long, bool)>
c000a1a9:	ff 05 98 64 02 c0    	inc    DWORD PTR ds:0xc0026498
c000a1af:	83 c4 10             	add    esp,0x10
c000a1b2:	81 fb e0 01 00 00    	cmp    ebx,0x1e0
c000a1b8:	75 e3                	jne    c000a19d <Phys::physicalMemorySetup(unsigned int)+0x225>
c000a1ba:	83 ec 08             	sub    esp,0x8
c000a1bd:	6a 00                	push   0x0
c000a1bf:	6a 05                	push   0x5
c000a1c1:	e8 62 fb ff ff       	call   c0009d28 <Phys::setPageState(unsigned long, bool)>
c000a1c6:	58                   	pop    eax
c000a1c7:	5a                   	pop    edx
c000a1c8:	6a 00                	push   0x0
c000a1ca:	6a 06                	push   0x6
c000a1cc:	e8 57 fb ff ff       	call   c0009d28 <Phys::setPageState(unsigned long, bool)>
c000a1d1:	59                   	pop    ecx
c000a1d2:	5b                   	pop    ebx
c000a1d3:	bb 60 00 00 00       	mov    ebx,0x60
c000a1d8:	6a 00                	push   0x0
c000a1da:	6a 07                	push   0x7
c000a1dc:	e8 47 fb ff ff       	call   c0009d28 <Phys::setPageState(unsigned long, bool)>
c000a1e1:	83 05 98 64 02 c0 03 	add    DWORD PTR ds:0xc0026498,0x3
c000a1e8:	83 c4 10             	add    esp,0x10
c000a1eb:	83 ec 08             	sub    esp,0x8
c000a1ee:	6a 00                	push   0x0
c000a1f0:	53                   	push   ebx
c000a1f1:	43                   	inc    ebx
c000a1f2:	e8 31 fb ff ff       	call   c0009d28 <Phys::setPageState(unsigned long, bool)>
c000a1f7:	83 c4 10             	add    esp,0x10
c000a1fa:	81 fb 80 00 00 00    	cmp    ebx,0x80
c000a200:	75 e9                	jne    c000a1eb <Phys::physicalMemorySetup(unsigned int)+0x273>
c000a202:	83 05 98 64 02 c0 20 	add    DWORD PTR ds:0xc0026498,0x20
c000a209:	83 c4 3c             	add    esp,0x3c
c000a20c:	5b                   	pop    ebx
c000a20d:	5e                   	pop    esi
c000a20e:	5f                   	pop    edi
c000a20f:	5d                   	pop    ebp
c000a210:	c3                   	ret    
c000a211:	c7 44 24 08 00 00 0a 00 	mov    DWORD PTR [esp+0x8],0xa0000
c000a219:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000a221:	e9 66 fe ff ff       	jmp    c000a08c <Phys::physicalMemorySetup(unsigned int)+0x114>

c000a226 <Pipe::isAtty()>:
c000a226:	31 c0                	xor    eax,eax
c000a228:	c3                   	ret    
c000a229:	90                   	nop

c000a22a <Pipe::~Pipe()>:
c000a22a:	83 ec 0c             	sub    esp,0xc
c000a22d:	ba 88 2a 02 c0       	mov    edx,0xc0022a88
c000a232:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a236:	89 10                	mov    DWORD PTR [eax],edx
c000a238:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a23c:	83 ec 0c             	sub    esp,0xc
c000a23f:	50                   	push   eax
c000a240:	e8 47 12 00 00       	call   c000b48c <UnixFile::~UnixFile()>
c000a245:	83 c4 10             	add    esp,0x10
c000a248:	90                   	nop
c000a249:	83 c4 0c             	add    esp,0xc
c000a24c:	c3                   	ret    
c000a24d:	90                   	nop

c000a24e <Pipe::~Pipe()>:
c000a24e:	83 ec 0c             	sub    esp,0xc
c000a251:	83 ec 0c             	sub    esp,0xc
c000a254:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a258:	e8 cd ff ff ff       	call   c000a22a <Pipe::~Pipe()>
c000a25d:	83 c4 10             	add    esp,0x10
c000a260:	83 ec 08             	sub    esp,0x8
c000a263:	6a 20                	push   0x20
c000a265:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a269:	e8 70 27 00 00       	call   c000c9de <operator delete(void*, unsigned long)>
c000a26e:	83 c4 10             	add    esp,0x10
c000a271:	83 c4 0c             	add    esp,0xc
c000a274:	c3                   	ret    
c000a275:	90                   	nop

c000a276 <Pipe::read(unsigned long long, void*, int*)>:
c000a276:	55                   	push   ebp
c000a277:	57                   	push   edi
c000a278:	56                   	push   esi
c000a279:	53                   	push   ebx
c000a27a:	83 ec 1c             	sub    esp,0x1c
c000a27d:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000a281:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000a285:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000a289:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000a28c:	89 c8                	mov    eax,ecx
c000a28e:	99                   	cdq    
c000a28f:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c000a293:	74 24                	je     c000a2b9 <Pipe::read(unsigned long long, void*, int*)+0x43>
c000a295:	39 f9                	cmp    ecx,edi
c000a297:	89 d1                	mov    ecx,edx
c000a299:	19 f1                	sbb    ecx,esi
c000a29b:	73 1c                	jae    c000a2b9 <Pipe::read(unsigned long long, void*, int*)+0x43>
c000a29d:	fa                   	cli    
c000a29e:	ff 05 28 79 02 c0    	inc    DWORD PTR ds:0xc0027928
c000a2a4:	e8 ab dc 00 00       	call   c0017f54 <schedule()>
c000a2a9:	a1 28 79 02 c0       	mov    eax,ds:0xc0027928
c000a2ae:	48                   	dec    eax
c000a2af:	a3 28 79 02 c0       	mov    ds:0xc0027928,eax
c000a2b4:	75 d3                	jne    c000a289 <Pipe::read(unsigned long long, void*, int*)+0x13>
c000a2b6:	fb                   	sti    
c000a2b7:	eb d0                	jmp    c000a289 <Pipe::read(unsigned long long, void*, int*)+0x13>
c000a2b9:	39 f8                	cmp    eax,edi
c000a2bb:	89 d1                	mov    ecx,edx
c000a2bd:	89 3c 24             	mov    DWORD PTR [esp],edi
c000a2c0:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c000a2c4:	19 f1                	sbb    ecx,esi
c000a2c6:	73 07                	jae    c000a2cf <Pipe::read(unsigned long long, void*, int*)+0x59>
c000a2c8:	89 04 24             	mov    DWORD PTR [esp],eax
c000a2cb:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a2cf:	8b 73 10             	mov    esi,DWORD PTR [ebx+0x10]
c000a2d2:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c000a2d5:	29 f7                	sub    edi,esi
c000a2d7:	89 f8                	mov    eax,edi
c000a2d9:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c000a2dd:	99                   	cdq    
c000a2de:	39 3c 24             	cmp    DWORD PTR [esp],edi
c000a2e1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a2e5:	19 d0                	sbb    eax,edx
c000a2e7:	73 07                	jae    c000a2f0 <Pipe::read(unsigned long long, void*, int*)+0x7a>
c000a2e9:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000a2ec:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a2f0:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c000a2f3:	89 ea                	mov    edx,ebp
c000a2f5:	2b 54 24 0c          	sub    edx,DWORD PTR [esp+0xc]
c000a2f9:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000a2fe:	74 0d                	je     c000a30d <Pipe::read(unsigned long long, void*, int*)+0x97>
c000a300:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c000a303:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000a307:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000a30b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000a30d:	85 d2                	test   edx,edx
c000a30f:	74 11                	je     c000a322 <Pipe::read(unsigned long long, void*, int*)+0xac>
c000a311:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a315:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c000a318:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c000a31c:	89 d1                	mov    ecx,edx
c000a31e:	89 c7                	mov    edi,eax
c000a320:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000a322:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000a325:	29 6b 14             	sub    DWORD PTR [ebx+0x14],ebp
c000a328:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c000a32b:	99                   	cdq    
c000a32c:	89 f7                	mov    edi,esi
c000a32e:	03 04 24             	add    eax,DWORD PTR [esp]
c000a331:	13 54 24 04          	adc    edx,DWORD PTR [esp+0x4]
c000a335:	c1 ff 1f             	sar    edi,0x1f
c000a338:	57                   	push   edi
c000a339:	56                   	push   esi
c000a33a:	52                   	push   edx
c000a33b:	50                   	push   eax
c000a33c:	e8 43 6d 01 00       	call   c0021084 <__umoddi3>
c000a341:	83 c4 10             	add    esp,0x10
c000a344:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000a347:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c000a34c:	75 10                	jne    c000a35e <Pipe::read(unsigned long long, void*, int*)+0xe8>
c000a34e:	83 ec 0c             	sub    esp,0xc
c000a351:	68 45 2a 02 c0       	push   0xc0022a45
c000a356:	e8 26 a0 00 00       	call   c0014381 <Krnl::panic(char const*)>
c000a35b:	83 c4 10             	add    esp,0x10
c000a35e:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000a362:	8b 14 24             	mov    edx,DWORD PTR [esp]
c000a365:	89 10                	mov    DWORD PTR [eax],edx
c000a367:	83 c4 1c             	add    esp,0x1c
c000a36a:	31 c0                	xor    eax,eax
c000a36c:	5b                   	pop    ebx
c000a36d:	5e                   	pop    esi
c000a36e:	5f                   	pop    edi
c000a36f:	5d                   	pop    ebp
c000a370:	c3                   	ret    
c000a371:	90                   	nop

c000a372 <Pipe::write(unsigned long long, void*, int*)>:
c000a372:	55                   	push   ebp
c000a373:	57                   	push   edi
c000a374:	56                   	push   esi
c000a375:	53                   	push   ebx
c000a376:	83 ec 1c             	sub    esp,0x1c
c000a379:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000a37d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000a381:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c000a384:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000a388:	89 04 24             	mov    DWORD PTR [esp],eax
c000a38b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a38f:	89 d8                	mov    eax,ebx
c000a391:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c000a394:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000a398:	89 d6                	mov    esi,edx
c000a39a:	89 d7                	mov    edi,edx
c000a39c:	c1 ff 1f             	sar    edi,0x1f
c000a39f:	03 34 24             	add    esi,DWORD PTR [esp]
c000a3a2:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c000a3a6:	c1 f8 1f             	sar    eax,0x1f
c000a3a9:	39 f3                	cmp    ebx,esi
c000a3ab:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a3af:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a3b3:	19 f8                	sbb    eax,edi
c000a3b5:	b8 01 00 00 00       	mov    eax,0x1
c000a3ba:	72 6e                	jb     c000a42a <Pipe::write(unsigned long long, void*, int*)+0xb8>
c000a3bc:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c000a3bf:	01 d0                	add    eax,edx
c000a3c1:	99                   	cdq    
c000a3c2:	f7 fb                	idiv   ebx
c000a3c4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a3c8:	29 d3                	sub    ebx,edx
c000a3ca:	89 d7                	mov    edi,edx
c000a3cc:	89 de                	mov    esi,ebx
c000a3ce:	8b 14 24             	mov    edx,DWORD PTR [esp]
c000a3d1:	c1 fb 1f             	sar    ebx,0x1f
c000a3d4:	39 f2                	cmp    edx,esi
c000a3d6:	19 d8                	sbb    eax,ebx
c000a3d8:	b8 00 00 00 00       	mov    eax,0x0
c000a3dd:	72 04                	jb     c000a3e3 <Pipe::write(unsigned long long, void*, int*)+0x71>
c000a3df:	89 d0                	mov    eax,edx
c000a3e1:	29 f0                	sub    eax,esi
c000a3e3:	89 d3                	mov    ebx,edx
c000a3e5:	29 c3                	sub    ebx,eax
c000a3e7:	74 0b                	je     c000a3f4 <Pipe::write(unsigned long long, void*, int*)+0x82>
c000a3e9:	03 7d 0c             	add    edi,DWORD PTR [ebp+0xc]
c000a3ec:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c000a3f0:	89 d9                	mov    ecx,ebx
c000a3f2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000a3f4:	85 c0                	test   eax,eax
c000a3f6:	74 0d                	je     c000a405 <Pipe::write(unsigned long long, void*, int*)+0x93>
c000a3f8:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c000a3fc:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c000a3ff:	89 de                	mov    esi,ebx
c000a401:	89 c1                	mov    ecx,eax
c000a403:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000a405:	01 55 14             	add    DWORD PTR [ebp+0x14],edx
c000a408:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c000a40d:	75 10                	jne    c000a41f <Pipe::write(unsigned long long, void*, int*)+0xad>
c000a40f:	83 ec 0c             	sub    esp,0xc
c000a412:	68 61 2a 02 c0       	push   0xc0022a61
c000a417:	e8 65 9f 00 00       	call   c0014381 <Krnl::panic(char const*)>
c000a41c:	83 c4 10             	add    esp,0x10
c000a41f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000a423:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000a426:	89 08                	mov    DWORD PTR [eax],ecx
c000a428:	31 c0                	xor    eax,eax
c000a42a:	83 c4 1c             	add    esp,0x1c
c000a42d:	5b                   	pop    ebx
c000a42e:	5e                   	pop    esi
c000a42f:	5f                   	pop    edi
c000a430:	5d                   	pop    ebp
c000a431:	c3                   	ret    

c000a432 <Pipe::Pipe(int)>:
c000a432:	83 ec 0c             	sub    esp,0xc
c000a435:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a439:	83 ec 08             	sub    esp,0x8
c000a43c:	6a 00                	push   0x0
c000a43e:	50                   	push   eax
c000a43f:	e8 66 0e 00 00       	call   c000b2aa <UnixFile::UnixFile(int)>
c000a444:	83 c4 10             	add    esp,0x10
c000a447:	ba 88 2a 02 c0       	mov    edx,0xc0022a88
c000a44c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a450:	89 10                	mov    DWORD PTR [eax],edx
c000a452:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a456:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000a45a:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000a45d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a461:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c000a468:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a46c:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c000a473:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000a477:	83 ec 0c             	sub    esp,0xc
c000a47a:	50                   	push   eax
c000a47b:	e8 43 f5 ff ff       	call   c00099c3 <malloc>
c000a480:	83 c4 10             	add    esp,0x10
c000a483:	89 c2                	mov    edx,eax
c000a485:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a489:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000a48c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a490:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c000a494:	90                   	nop
c000a495:	83 c4 0c             	add    esp,0xc
c000a498:	c3                   	ret    
c000a499:	90                   	nop

c000a49a <VgaText::isAtty()>:
c000a49a:	b0 01                	mov    al,0x1
c000a49c:	c3                   	ret    
c000a49d:	90                   	nop

c000a49e <VgaText::~VgaText()>:
c000a49e:	83 ec 0c             	sub    esp,0xc
c000a4a1:	ba 10 2b 02 c0       	mov    edx,0xc0022b10
c000a4a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a4aa:	89 10                	mov    DWORD PTR [eax],edx
c000a4ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a4b0:	83 ec 0c             	sub    esp,0xc
c000a4b3:	50                   	push   eax
c000a4b4:	e8 d3 0f 00 00       	call   c000b48c <UnixFile::~UnixFile()>
c000a4b9:	83 c4 10             	add    esp,0x10
c000a4bc:	90                   	nop
c000a4bd:	83 c4 0c             	add    esp,0xc
c000a4c0:	c3                   	ret    
c000a4c1:	90                   	nop

c000a4c2 <VgaText::~VgaText()>:
c000a4c2:	83 ec 0c             	sub    esp,0xc
c000a4c5:	83 ec 0c             	sub    esp,0xc
c000a4c8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a4cc:	e8 cd ff ff ff       	call   c000a49e <VgaText::~VgaText()>
c000a4d1:	83 c4 10             	add    esp,0x10
c000a4d4:	83 ec 08             	sub    esp,0x8
c000a4d7:	68 c4 02 00 00       	push   0x2c4
c000a4dc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a4e0:	e8 f9 24 00 00       	call   c000c9de <operator delete(void*, unsigned long)>
c000a4e5:	83 c4 10             	add    esp,0x10
c000a4e8:	83 c4 0c             	add    esp,0xc
c000a4eb:	c3                   	ret    

c000a4ec <VgaText::read(unsigned long long, void*, int*)>:
c000a4ec:	83 ec 10             	sub    esp,0x10
c000a4ef:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000a4f3:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a4f7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a4fb:	e8 4e 58 00 00       	call   c000fd4e <readKeyboard(VgaText*, char*, unsigned long)>
c000a500:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000a504:	89 02                	mov    DWORD PTR [edx],eax
c000a506:	31 c0                	xor    eax,eax
c000a508:	83 c4 1c             	add    esp,0x1c
c000a50b:	c3                   	ret    

c000a50c <setTerminalScrollLock(bool)>:
c000a50c:	c3                   	ret    

c000a50d <addToTerminalCycle(VgaText*)>:
c000a50d:	8b 15 e0 64 02 c0    	mov    edx,DWORD PTR ds:0xc00264e0
c000a513:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a517:	85 d2                	test   edx,edx
c000a519:	75 09                	jne    c000a524 <addToTerminalCycle(VgaText*)+0x17>
c000a51b:	89 40 24             	mov    DWORD PTR [eax+0x24],eax
c000a51e:	a3 e0 64 02 c0       	mov    ds:0xc00264e0,eax
c000a523:	c3                   	ret    
c000a524:	8b 4a 24             	mov    ecx,DWORD PTR [edx+0x24]
c000a527:	89 42 24             	mov    DWORD PTR [edx+0x24],eax
c000a52a:	89 48 24             	mov    DWORD PTR [eax+0x24],ecx
c000a52d:	c3                   	ret    

c000a52e <installVgaTextImplementation()>:
c000a52e:	83 ec 10             	sub    esp,0x10
c000a531:	6a 20                	push   0x20
c000a533:	6a 00                	push   0x0
c000a535:	68 c0 64 02 c0       	push   0xc00264c0
c000a53a:	e8 45 61 ff ff       	call   c0000684 <memset>
c000a53f:	83 c4 1c             	add    esp,0x1c
c000a542:	c3                   	ret    

c000a543 <scrollTerminalScrollLock(int)>:
c000a543:	c3                   	ret    

c000a544 <VgaText::updateTitle()>:
c000a544:	53                   	push   ebx
c000a545:	31 c0                	xor    eax,eax
c000a547:	83 ec 58             	sub    esp,0x58
c000a54a:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c000a54e:	89 e1                	mov    ecx,esp
c000a550:	c6 04 08 20          	mov    BYTE PTR [eax+ecx*1],0x20
c000a554:	40                   	inc    eax
c000a555:	83 f8 50             	cmp    eax,0x50
c000a558:	75 f6                	jne    c000a550 <VgaText::updateTitle()+0xc>
c000a55a:	31 c0                	xor    eax,eax
c000a55c:	8a 9c 02 82 00 00 00 	mov    bl,BYTE PTR [edx+eax*1+0x82]
c000a563:	84 db                	test   bl,bl
c000a565:	74 06                	je     c000a56d <VgaText::updateTitle()+0x29>
c000a567:	88 1c 01             	mov    BYTE PTR [ecx+eax*1],bl
c000a56a:	40                   	inc    eax
c000a56b:	eb ef                	jmp    c000a55c <VgaText::updateTitle()+0x18>
c000a56d:	8b 42 60             	mov    eax,DWORD PTR [edx+0x60]
c000a570:	85 c0                	test   eax,eax
c000a572:	74 09                	je     c000a57d <VgaText::updateTitle()+0x39>
c000a574:	53                   	push   ebx
c000a575:	53                   	push   ebx
c000a576:	51                   	push   ecx
c000a577:	52                   	push   edx
c000a578:	ff d0                	call   eax
c000a57a:	83 c4 10             	add    esp,0x10
c000a57d:	83 c4 58             	add    esp,0x58
c000a580:	5b                   	pop    ebx
c000a581:	c3                   	ret    

c000a582 <VgaText::load()>:
c000a582:	53                   	push   ebx
c000a583:	31 c0                	xor    eax,eax
c000a585:	83 ec 58             	sub    esp,0x58
c000a588:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c000a58c:	89 e2                	mov    edx,esp
c000a58e:	c6 04 10 20          	mov    BYTE PTR [eax+edx*1],0x20
c000a592:	40                   	inc    eax
c000a593:	83 f8 50             	cmp    eax,0x50
c000a596:	75 f6                	jne    c000a58e <VgaText::load()+0xc>
c000a598:	31 c0                	xor    eax,eax
c000a59a:	8a 8c 03 82 00 00 00 	mov    cl,BYTE PTR [ebx+eax*1+0x82]
c000a5a1:	84 c9                	test   cl,cl
c000a5a3:	74 06                	je     c000a5ab <VgaText::load()+0x29>
c000a5a5:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c000a5a8:	40                   	inc    eax
c000a5a9:	eb ef                	jmp    c000a59a <VgaText::load()+0x18>
c000a5ab:	8b 43 60             	mov    eax,DWORD PTR [ebx+0x60]
c000a5ae:	85 c0                	test   eax,eax
c000a5b0:	74 09                	je     c000a5bb <VgaText::load()+0x39>
c000a5b2:	51                   	push   ecx
c000a5b3:	51                   	push   ecx
c000a5b4:	52                   	push   edx
c000a5b5:	53                   	push   ebx
c000a5b6:	ff d0                	call   eax
c000a5b8:	83 c4 10             	add    esp,0x10
c000a5bb:	8b 43 64             	mov    eax,DWORD PTR [ebx+0x64]
c000a5be:	85 c0                	test   eax,eax
c000a5c0:	74 09                	je     c000a5cb <VgaText::load()+0x49>
c000a5c2:	83 ec 0c             	sub    esp,0xc
c000a5c5:	53                   	push   ebx
c000a5c6:	ff d0                	call   eax
c000a5c8:	83 c4 10             	add    esp,0x10
c000a5cb:	83 c4 58             	add    esp,0x58
c000a5ce:	5b                   	pop    ebx
c000a5cf:	c3                   	ret    

c000a5d0 <VgaText::updateCursor()>:
c000a5d0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a5d4:	39 05 e4 64 02 c0    	cmp    DWORD PTR ds:0xc00264e4,eax
c000a5da:	75 09                	jne    c000a5e5 <VgaText::updateCursor()+0x15>
c000a5dc:	8b 40 70             	mov    eax,DWORD PTR [eax+0x70]
c000a5df:	85 c0                	test   eax,eax
c000a5e1:	74 02                	je     c000a5e5 <VgaText::updateCursor()+0x15>
c000a5e3:	ff e0                	jmp    eax
c000a5e5:	c3                   	ret    

c000a5e6 <VgaText::doANSI_SGR(int)>:
c000a5e6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a5ea:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a5ee:	85 d2                	test   edx,edx
c000a5f0:	75 0b                	jne    c000a5fd <VgaText::doANSI_SGR(int)+0x17>
c000a5f2:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c000a5f5:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c000a5f8:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c000a5fb:	eb 59                	jmp    c000a656 <VgaText::doANSI_SGR(int)+0x70>
c000a5fd:	83 fa 07             	cmp    edx,0x7
c000a600:	75 0b                	jne    c000a60d <VgaText::doANSI_SGR(int)+0x27>
c000a602:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c000a605:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c000a608:	89 48 34             	mov    DWORD PTR [eax+0x34],ecx
c000a60b:	eb 49                	jmp    c000a656 <VgaText::doANSI_SGR(int)+0x70>
c000a60d:	83 fa 1b             	cmp    edx,0x1b
c000a610:	74 e0                	je     c000a5f2 <VgaText::doANSI_SGR(int)+0xc>
c000a612:	8d 4a e2             	lea    ecx,[edx-0x1e]
c000a615:	83 f9 07             	cmp    ecx,0x7
c000a618:	77 09                	ja     c000a623 <VgaText::doANSI_SGR(int)+0x3d>
c000a61a:	8b 14 8d 60 58 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffda7a0]
c000a621:	eb 20                	jmp    c000a643 <VgaText::doANSI_SGR(int)+0x5d>
c000a623:	8d 4a d8             	lea    ecx,[edx-0x28]
c000a626:	83 f9 07             	cmp    ecx,0x7
c000a629:	77 09                	ja     c000a634 <VgaText::doANSI_SGR(int)+0x4e>
c000a62b:	8b 14 8d 60 58 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffda7a0]
c000a632:	eb 22                	jmp    c000a656 <VgaText::doANSI_SGR(int)+0x70>
c000a634:	8d 4a a6             	lea    ecx,[edx-0x5a]
c000a637:	83 f9 07             	cmp    ecx,0x7
c000a63a:	77 0b                	ja     c000a647 <VgaText::doANSI_SGR(int)+0x61>
c000a63c:	8b 14 95 18 57 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffda8e8]
c000a643:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c000a646:	c3                   	ret    
c000a647:	8d 4a 9c             	lea    ecx,[edx-0x64]
c000a64a:	83 f9 07             	cmp    ecx,0x7
c000a64d:	77 0a                	ja     c000a659 <VgaText::doANSI_SGR(int)+0x73>
c000a64f:	8b 14 95 f0 56 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffda910]
c000a656:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c000a659:	c3                   	ret    

c000a65a <VgaText::setDefaultBgColour(VgaColour)>:
c000a65a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a65e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a662:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c000a665:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c000a668:	c3                   	ret    
c000a669:	90                   	nop

c000a66a <VgaText::setDefaultFgColour(VgaColour)>:
c000a66a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a66e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a672:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c000a675:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c000a678:	c3                   	ret    
c000a679:	90                   	nop

c000a67a <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c000a67a:	53                   	push   ebx
c000a67b:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000a67f:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000a683:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000a687:	51                   	push   ecx
c000a688:	e8 cd ff ff ff       	call   c000a65a <VgaText::setDefaultBgColour(VgaColour)>
c000a68d:	58                   	pop    eax
c000a68e:	5a                   	pop    edx
c000a68f:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000a693:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000a697:	5b                   	pop    ebx
c000a698:	eb d0                	jmp    c000a66a <VgaText::setDefaultFgColour(VgaColour)>

c000a69a <VgaText::setTitleTextColour(VgaColour)>:
c000a69a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a69e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a6a2:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c000a6a5:	e9 9a fe ff ff       	jmp    c000a544 <VgaText::updateTitle()>

c000a6aa <VgaText::setTitleColour(VgaColour)>:
c000a6aa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a6ae:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a6b2:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000a6b5:	e9 8a fe ff ff       	jmp    c000a544 <VgaText::updateTitle()>

c000a6ba <VgaText::setTitle(char*)>:
c000a6ba:	53                   	push   ebx
c000a6bb:	83 ec 10             	sub    esp,0x10
c000a6be:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000a6c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a6c6:	8d 83 82 00 00 00    	lea    eax,[ebx+0x82]
c000a6cc:	50                   	push   eax
c000a6cd:	e8 6e 60 ff ff       	call   c0000740 <strcpy>
c000a6d2:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c000a6d6:	83 c4 18             	add    esp,0x18
c000a6d9:	5b                   	pop    ebx
c000a6da:	e9 65 fe ff ff       	jmp    c000a544 <VgaText::updateTitle()>
c000a6df:	90                   	nop

c000a6e0 <VgaText::combineColours(unsigned char, unsigned char)>:
c000a6e0:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c000a6e4:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c000a6e9:	83 e0 0f             	and    eax,0xf
c000a6ec:	c1 e2 04             	shl    edx,0x4
c000a6ef:	09 d0                	or     eax,edx
c000a6f1:	c3                   	ret    

c000a6f2 <VgaText::scrollScreen()>:
c000a6f2:	55                   	push   ebp
c000a6f3:	b9 01 00 00 00       	mov    ecx,0x1
c000a6f8:	57                   	push   edi
c000a6f9:	56                   	push   esi
c000a6fa:	53                   	push   ebx
c000a6fb:	83 ec 0c             	sub    esp,0xc
c000a6fe:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000a702:	69 f1 a0 00 00 00    	imul   esi,ecx,0xa0
c000a708:	31 ff                	xor    edi,edi
c000a70a:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000a70d:	83 f9 17             	cmp    ecx,0x17
c000a710:	8a 14 30             	mov    dl,BYTE PTR [eax+esi*1]
c000a713:	88 94 30 60 ff ff ff 	mov    BYTE PTR [eax+esi*1-0xa0],dl
c000a71a:	75 27                	jne    c000a743 <VgaText::scrollScreen()+0x51>
c000a71c:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000a71f:	01 f5                	add    ebp,esi
c000a721:	f7 c7 01 00 00 00    	test   edi,0x1
c000a727:	74 16                	je     c000a73f <VgaText::scrollScreen()+0x4d>
c000a729:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c000a72d:	50                   	push   eax
c000a72e:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c000a732:	50                   	push   eax
c000a733:	e8 a8 ff ff ff       	call   c000a6e0 <VgaText::combineColours(unsigned char, unsigned char)>
c000a738:	5a                   	pop    edx
c000a739:	5a                   	pop    edx
c000a73a:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c000a73d:	eb 04                	jmp    c000a743 <VgaText::scrollScreen()+0x51>
c000a73f:	c6 45 00 20          	mov    BYTE PTR [ebp+0x0],0x20
c000a743:	47                   	inc    edi
c000a744:	46                   	inc    esi
c000a745:	81 ff a0 00 00 00    	cmp    edi,0xa0
c000a74b:	75 bd                	jne    c000a70a <VgaText::scrollScreen()+0x18>
c000a74d:	41                   	inc    ecx
c000a74e:	83 f9 18             	cmp    ecx,0x18
c000a751:	75 af                	jne    c000a702 <VgaText::scrollScreen()+0x10>
c000a753:	39 1d e4 64 02 c0    	cmp    DWORD PTR ds:0xc00264e4,ebx
c000a759:	75 1b                	jne    c000a776 <VgaText::scrollScreen()+0x84>
c000a75b:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c000a75f:	74 05                	je     c000a766 <VgaText::scrollScreen()+0x74>
c000a761:	ff 4b 5c             	dec    DWORD PTR [ebx+0x5c]
c000a764:	eb 10                	jmp    c000a776 <VgaText::scrollScreen()+0x84>
c000a766:	8b 43 6c             	mov    eax,DWORD PTR [ebx+0x6c]
c000a769:	85 c0                	test   eax,eax
c000a76b:	74 09                	je     c000a776 <VgaText::scrollScreen()+0x84>
c000a76d:	83 ec 0c             	sub    esp,0xc
c000a770:	53                   	push   ebx
c000a771:	ff d0                	call   eax
c000a773:	83 c4 10             	add    esp,0x10
c000a776:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c000a77a:	83 c4 0c             	add    esp,0xc
c000a77d:	5b                   	pop    ebx
c000a77e:	5e                   	pop    esi
c000a77f:	5f                   	pop    edi
c000a780:	5d                   	pop    ebp
c000a781:	e9 4a fe ff ff       	jmp    c000a5d0 <VgaText::updateCursor()>

c000a786 <VgaText::combineCharAndColour(char, unsigned char)>:
c000a786:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c000a78b:	c1 e0 08             	shl    eax,0x8
c000a78e:	89 c2                	mov    edx,eax
c000a790:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c000a795:	09 d0                	or     eax,edx
c000a797:	c3                   	ret    

c000a798 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c000a798:	56                   	push   esi
c000a799:	53                   	push   ebx
c000a79a:	51                   	push   ecx
c000a79b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000a79f:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c000a7a4:	50                   	push   eax
c000a7a5:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c000a7aa:	50                   	push   eax
c000a7ab:	e8 30 ff ff ff       	call   c000a6e0 <VgaText::combineColours(unsigned char, unsigned char)>
c000a7b0:	5b                   	pop    ebx
c000a7b1:	0f b6 c0             	movzx  eax,al
c000a7b4:	5e                   	pop    esi
c000a7b5:	0f be 5c 24 14       	movsx  ebx,BYTE PTR [esp+0x14]
c000a7ba:	50                   	push   eax
c000a7bb:	53                   	push   ebx
c000a7bc:	e8 c5 ff ff ff       	call   c000a786 <VgaText::combineCharAndColour(char, unsigned char)>
c000a7c1:	5a                   	pop    edx
c000a7c2:	5e                   	pop    esi
c000a7c3:	8b 71 0c             	mov    esi,DWORD PTR [ecx+0xc]
c000a7c6:	66 6b 54 24 24 50    	imul   dx,WORD PTR [esp+0x24],0x50
c000a7cc:	03 54 24 20          	add    edx,DWORD PTR [esp+0x20]
c000a7d0:	0f b7 d2             	movzx  edx,dx
c000a7d3:	66 89 04 56          	mov    WORD PTR [esi+edx*2],ax
c000a7d7:	39 0d e4 64 02 c0    	cmp    DWORD PTR ds:0xc00264e4,ecx
c000a7dd:	75 10                	jne    c000a7ef <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x57>
c000a7df:	8b 41 7c             	mov    eax,DWORD PTR [ecx+0x7c]
c000a7e2:	85 c0                	test   eax,eax
c000a7e4:	74 09                	je     c000a7ef <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x57>
c000a7e6:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c000a7ea:	5a                   	pop    edx
c000a7eb:	5b                   	pop    ebx
c000a7ec:	5e                   	pop    esi
c000a7ed:	ff e0                	jmp    eax
c000a7ef:	58                   	pop    eax
c000a7f0:	5b                   	pop    ebx
c000a7f1:	5e                   	pop    esi
c000a7f2:	c3                   	ret    
c000a7f3:	90                   	nop

c000a7f4 <VgaText::getCursorX()>:
c000a7f4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a7f8:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c000a7fb:	c3                   	ret    

c000a7fc <VgaText::getCursorY()>:
c000a7fc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a800:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c000a803:	c3                   	ret    

c000a804 <VgaText::setCursor(int, int)>:
c000a804:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a808:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a80c:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c000a80f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000a813:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000a816:	e9 b5 fd ff ff       	jmp    c000a5d0 <VgaText::updateCursor()>

c000a81b <setActiveTerminal(VgaText*)>:
c000a81b:	53                   	push   ebx
c000a81c:	83 ec 08             	sub    esp,0x8
c000a81f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000a823:	85 db                	test   ebx,ebx
c000a825:	75 11                	jne    c000a838 <setActiveTerminal(VgaText*)+0x1d>
c000a827:	c7 44 24 10 9c 2a 02 c0 	mov    DWORD PTR [esp+0x10],0xc0022a9c
c000a82f:	83 c4 08             	add    esp,0x8
c000a832:	5b                   	pop    ebx
c000a833:	e9 49 9b 00 00       	jmp    c0014381 <Krnl::panic(char const*)>
c000a838:	a1 e4 64 02 c0       	mov    eax,ds:0xc00264e4
c000a83d:	85 c0                	test   eax,eax
c000a83f:	74 0c                	je     c000a84d <setActiveTerminal(VgaText*)+0x32>
c000a841:	83 ec 0c             	sub    esp,0xc
c000a844:	50                   	push   eax
c000a845:	e8 86 fd ff ff       	call   c000a5d0 <VgaText::updateCursor()>
c000a84a:	83 c4 10             	add    esp,0x10
c000a84d:	89 1d e4 64 02 c0    	mov    DWORD PTR ds:0xc00264e4,ebx
c000a853:	51                   	push   ecx
c000a854:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000a857:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000a85a:	53                   	push   ebx
c000a85b:	e8 a4 ff ff ff       	call   c000a804 <VgaText::setCursor(int, int)>
c000a860:	83 c4 10             	add    esp,0x10
c000a863:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c000a867:	75 07                	jne    c000a870 <setActiveTerminal(VgaText*)+0x55>
c000a869:	c7 43 5c 00 00 00 00 	mov    DWORD PTR [ebx+0x5c],0x0
c000a870:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000a874:	83 c4 08             	add    esp,0x8
c000a877:	5b                   	pop    ebx
c000a878:	e9 05 fd ff ff       	jmp    c000a582 <VgaText::load()>

c000a87d <doTerminalCycle()>:
c000a87d:	83 ec 18             	sub    esp,0x18
c000a880:	a1 e0 64 02 c0       	mov    eax,ds:0xc00264e0
c000a885:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c000a888:	50                   	push   eax
c000a889:	a3 e0 64 02 c0       	mov    ds:0xc00264e0,eax
c000a88e:	e8 88 ff ff ff       	call   c000a81b <setActiveTerminal(VgaText*)>
c000a893:	83 c4 1c             	add    esp,0x1c
c000a896:	c3                   	ret    
c000a897:	90                   	nop

c000a898 <VgaText::setCursorX(int)>:
c000a898:	83 ec 10             	sub    esp,0x10
c000a89b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000a89f:	ff 70 18             	push   DWORD PTR [eax+0x18]
c000a8a2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a8a6:	50                   	push   eax
c000a8a7:	e8 58 ff ff ff       	call   c000a804 <VgaText::setCursor(int, int)>
c000a8ac:	83 c4 1c             	add    esp,0x1c
c000a8af:	c3                   	ret    

c000a8b0 <VgaText::setCursorY(int)>:
c000a8b0:	83 ec 10             	sub    esp,0x10
c000a8b3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000a8b7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000a8bb:	ff 70 14             	push   DWORD PTR [eax+0x14]
c000a8be:	50                   	push   eax
c000a8bf:	e8 40 ff ff ff       	call   c000a804 <VgaText::setCursor(int, int)>
c000a8c4:	83 c4 1c             	add    esp,0x1c
c000a8c7:	c3                   	ret    

c000a8c8 <VgaText::incrementCursor(bool)>:
c000a8c8:	56                   	push   esi
c000a8c9:	53                   	push   ebx
c000a8ca:	51                   	push   ecx
c000a8cb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000a8cf:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000a8d3:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000a8d6:	40                   	inc    eax
c000a8d7:	83 f8 50             	cmp    eax,0x50
c000a8da:	74 05                	je     c000a8e1 <VgaText::incrementCursor(bool)+0x19>
c000a8dc:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c000a8df:	eb 24                	jmp    c000a905 <VgaText::incrementCursor(bool)+0x3d>
c000a8e1:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000a8e4:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000a8eb:	8d 50 01             	lea    edx,[eax+0x1]
c000a8ee:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c000a8f1:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c000a8f4:	75 0f                	jne    c000a905 <VgaText::incrementCursor(bool)+0x3d>
c000a8f6:	83 ec 0c             	sub    esp,0xc
c000a8f9:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000a8fc:	53                   	push   ebx
c000a8fd:	e8 f0 fd ff ff       	call   c000a6f2 <VgaText::scrollScreen()>
c000a902:	83 c4 10             	add    esp,0x10
c000a905:	89 f0                	mov    eax,esi
c000a907:	84 c0                	test   al,al
c000a909:	74 0c                	je     c000a917 <VgaText::incrementCursor(bool)+0x4f>
c000a90b:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000a90f:	5a                   	pop    edx
c000a910:	5b                   	pop    ebx
c000a911:	5e                   	pop    esi
c000a912:	e9 b9 fc ff ff       	jmp    c000a5d0 <VgaText::updateCursor()>
c000a917:	58                   	pop    eax
c000a918:	5b                   	pop    ebx
c000a919:	5e                   	pop    esi
c000a91a:	c3                   	ret    
c000a91b:	90                   	nop

c000a91c <VgaText::decrementCursor(bool)>:
c000a91c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000a920:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000a924:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c000a927:	85 c0                	test   eax,eax
c000a929:	74 04                	je     c000a92f <VgaText::decrementCursor(bool)+0x13>
c000a92b:	48                   	dec    eax
c000a92c:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c000a92f:	84 c9                	test   cl,cl
c000a931:	74 09                	je     c000a93c <VgaText::decrementCursor(bool)+0x20>
c000a933:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a937:	e9 94 fc ff ff       	jmp    c000a5d0 <VgaText::updateCursor()>
c000a93c:	c3                   	ret    
c000a93d:	90                   	nop

c000a93e <VgaText::putchar(char, VgaColour, VgaColour)>:
c000a93e:	53                   	push   ebx
c000a93f:	83 ec 08             	sub    esp,0x8
c000a942:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000a946:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000a94a:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000a94e:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000a952:	3c 07                	cmp    al,0x7
c000a954:	75 2a                	jne    c000a980 <VgaText::putchar(char, VgaColour, VgaColour)+0x42>
c000a956:	a1 98 65 02 c0       	mov    eax,ds:0xc0026598
c000a95b:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000a963:	c7 44 24 18 f4 01 00 00 	mov    DWORD PTR [esp+0x18],0x1f4
c000a96b:	c7 44 24 14 b8 01 00 00 	mov    DWORD PTR [esp+0x14],0x1b8
c000a973:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a977:	83 c4 08             	add    esp,0x8
c000a97a:	5b                   	pop    ebx
c000a97b:	e9 5a 2f 00 00       	jmp    c000d8da <Buzzer::beep(int, int, bool)>
c000a980:	3c 0d                	cmp    al,0xd
c000a982:	75 09                	jne    c000a98d <VgaText::putchar(char, VgaColour, VgaColour)+0x4f>
c000a984:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000a98b:	eb 2c                	jmp    c000a9b9 <VgaText::putchar(char, VgaColour, VgaColour)+0x7b>
c000a98d:	3c 0a                	cmp    al,0xa
c000a98f:	75 31                	jne    c000a9c2 <VgaText::putchar(char, VgaColour, VgaColour)+0x84>
c000a991:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000a994:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000a99b:	8d 50 01             	lea    edx,[eax+0x1]
c000a99e:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c000a9a1:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c000a9a4:	75 0f                	jne    c000a9b5 <VgaText::putchar(char, VgaColour, VgaColour)+0x77>
c000a9a6:	83 ec 0c             	sub    esp,0xc
c000a9a9:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000a9ac:	53                   	push   ebx
c000a9ad:	e8 40 fd ff ff       	call   c000a6f2 <VgaText::scrollScreen()>
c000a9b2:	83 c4 10             	add    esp,0x10
c000a9b5:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000a9b9:	83 c4 08             	add    esp,0x8
c000a9bc:	5b                   	pop    ebx
c000a9bd:	e9 0e fc ff ff       	jmp    c000a5d0 <VgaText::updateCursor()>
c000a9c2:	3c 08                	cmp    al,0x8
c000a9c4:	75 25                	jne    c000a9eb <VgaText::putchar(char, VgaColour, VgaColour)+0xad>
c000a9c6:	50                   	push   eax
c000a9c7:	50                   	push   eax
c000a9c8:	6a 01                	push   0x1
c000a9ca:	53                   	push   ebx
c000a9cb:	e8 4c ff ff ff       	call   c000a91c <VgaText::decrementCursor(bool)>
c000a9d0:	5a                   	pop    edx
c000a9d1:	59                   	pop    ecx
c000a9d2:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000a9d5:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000a9d8:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c000a9db:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000a9de:	6a 20                	push   0x20
c000a9e0:	53                   	push   ebx
c000a9e1:	e8 b2 fd ff ff       	call   c000a798 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000a9e6:	83 c4 28             	add    esp,0x28
c000a9e9:	5b                   	pop    ebx
c000a9ea:	c3                   	ret    
c000a9eb:	83 ec 08             	sub    esp,0x8
c000a9ee:	0f be c0             	movsx  eax,al
c000a9f1:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000a9f4:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000a9f7:	51                   	push   ecx
c000a9f8:	52                   	push   edx
c000a9f9:	50                   	push   eax
c000a9fa:	53                   	push   ebx
c000a9fb:	e8 98 fd ff ff       	call   c000a798 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000aa00:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c000aa04:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c000aa0c:	83 c4 28             	add    esp,0x28
c000aa0f:	5b                   	pop    ebx
c000aa10:	e9 b3 fe ff ff       	jmp    c000a8c8 <VgaText::incrementCursor(bool)>
c000aa15:	90                   	nop

c000aa16 <VgaText::doUpdate()>:
c000aa16:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000aa1a:	8b 40 68             	mov    eax,DWORD PTR [eax+0x68]
c000aa1d:	85 c0                	test   eax,eax
c000aa1f:	74 02                	je     c000aa23 <VgaText::doUpdate()+0xd>
c000aa21:	ff e0                	jmp    eax
c000aa23:	c3                   	ret    

c000aa24 <VgaText::puts(char const*, VgaColour, VgaColour)>:
c000aa24:	55                   	push   ebp
c000aa25:	31 ed                	xor    ebp,ebp
c000aa27:	57                   	push   edi
c000aa28:	56                   	push   esi
c000aa29:	53                   	push   ebx
c000aa2a:	83 ec 1c             	sub    esp,0x1c
c000aa2d:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000aa31:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c000aa36:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c000aa3d:	50                   	push   eax
c000aa3e:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c000aa43:	50                   	push   eax
c000aa44:	e8 97 fc ff ff       	call   c000a6e0 <VgaText::combineColours(unsigned char, unsigned char)>
c000aa49:	59                   	pop    ecx
c000aa4a:	0f b6 c0             	movzx  eax,al
c000aa4d:	5e                   	pop    esi
c000aa4e:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c000aa53:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000aa57:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c000aa5a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000aa5e:	0f b7 f6             	movzx  esi,si
c000aa61:	01 f6                	add    esi,esi
c000aa63:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c000aa66:	0f be 07             	movsx  eax,BYTE PTR [edi]
c000aa69:	84 c0                	test   al,al
c000aa6b:	0f 84 fd 00 00 00    	je     c000ab6e <VgaText::puts(char const*, VgaColour, VgaColour)+0x14a>
c000aa71:	3c 0d                	cmp    al,0xd
c000aa73:	75 0c                	jne    c000aa81 <VgaText::puts(char const*, VgaColour, VgaColour)+0x5d>
c000aa75:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000aa7c:	e9 e7 00 00 00       	jmp    c000ab68 <VgaText::puts(char const*, VgaColour, VgaColour)+0x144>
c000aa81:	3c 0a                	cmp    al,0xa
c000aa83:	75 47                	jne    c000aacc <VgaText::puts(char const*, VgaColour, VgaColour)+0xa8>
c000aa85:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000aa88:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000aa8f:	8d 48 01             	lea    ecx,[eax+0x1]
c000aa92:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c000aa95:	3b 4b 10             	cmp    ecx,DWORD PTR [ebx+0x10]
c000aa98:	75 0f                	jne    c000aaa9 <VgaText::puts(char const*, VgaColour, VgaColour)+0x85>
c000aa9a:	83 ec 0c             	sub    esp,0xc
c000aa9d:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000aaa0:	53                   	push   ebx
c000aaa1:	e8 4c fc ff ff       	call   c000a6f2 <VgaText::scrollScreen()>
c000aaa6:	83 c4 10             	add    esp,0x10
c000aaa9:	83 ec 0c             	sub    esp,0xc
c000aaac:	31 ed                	xor    ebp,ebp
c000aaae:	53                   	push   ebx
c000aaaf:	e8 1c fb ff ff       	call   c000a5d0 <VgaText::updateCursor()>
c000aab4:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c000aab9:	83 c4 10             	add    esp,0x10
c000aabc:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c000aabf:	0f b7 f6             	movzx  esi,si
c000aac2:	01 f6                	add    esi,esi
c000aac4:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c000aac7:	e9 9c 00 00 00       	jmp    c000ab68 <VgaText::puts(char const*, VgaColour, VgaColour)+0x144>
c000aacc:	3c 08                	cmp    al,0x8
c000aace:	75 35                	jne    c000ab05 <VgaText::puts(char const*, VgaColour, VgaColour)+0xe1>
c000aad0:	56                   	push   esi
c000aad1:	56                   	push   esi
c000aad2:	6a 01                	push   0x1
c000aad4:	53                   	push   ebx
c000aad5:	e8 42 fe ff ff       	call   c000a91c <VgaText::decrementCursor(bool)>
c000aada:	58                   	pop    eax
c000aadb:	5a                   	pop    edx
c000aadc:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000aadf:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000aae2:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c000aae5:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000aae8:	6a 20                	push   0x20
c000aaea:	53                   	push   ebx
c000aaeb:	e8 a8 fc ff ff       	call   c000a798 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000aaf0:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c000aaf5:	83 c4 20             	add    esp,0x20
c000aaf8:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c000aafb:	0f b7 f6             	movzx  esi,si
c000aafe:	01 f6                	add    esi,esi
c000ab00:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c000ab03:	eb 63                	jmp    c000ab68 <VgaText::puts(char const*, VgaColour, VgaColour)+0x144>
c000ab05:	51                   	push   ecx
c000ab06:	51                   	push   ecx
c000ab07:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ab0b:	50                   	push   eax
c000ab0c:	e8 75 fc ff ff       	call   c000a786 <VgaText::combineCharAndColour(char, unsigned char)>
c000ab11:	83 c4 10             	add    esp,0x10
c000ab14:	66 89 06             	mov    WORD PTR [esi],ax
c000ab17:	39 1d e4 64 02 c0    	cmp    DWORD PTR ds:0xc00264e4,ebx
c000ab1d:	75 21                	jne    c000ab40 <VgaText::puts(char const*, VgaColour, VgaColour)+0x11c>
c000ab1f:	8b 43 7c             	mov    eax,DWORD PTR [ebx+0x7c]
c000ab22:	85 c0                	test   eax,eax
c000ab24:	74 1a                	je     c000ab40 <VgaText::puts(char const*, VgaColour, VgaColour)+0x11c>
c000ab26:	52                   	push   edx
c000ab27:	52                   	push   edx
c000ab28:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000ab2b:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000ab2e:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ab32:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ab36:	0f be 0f             	movsx  ecx,BYTE PTR [edi]
c000ab39:	51                   	push   ecx
c000ab3a:	53                   	push   ebx
c000ab3b:	ff d0                	call   eax
c000ab3d:	83 c4 20             	add    esp,0x20
c000ab40:	83 c6 02             	add    esi,0x2
c000ab43:	50                   	push   eax
c000ab44:	50                   	push   eax
c000ab45:	6a 00                	push   0x0
c000ab47:	53                   	push   ebx
c000ab48:	e8 7b fd ff ff       	call   c000a8c8 <VgaText::incrementCursor(bool)>
c000ab4d:	83 c4 10             	add    esp,0x10
c000ab50:	83 7b 14 00          	cmp    DWORD PTR [ebx+0x14],0x0
c000ab54:	75 0d                	jne    c000ab63 <VgaText::puts(char const*, VgaColour, VgaColour)+0x13f>
c000ab56:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c000ab5b:	0f b7 f6             	movzx  esi,si
c000ab5e:	01 f6                	add    esi,esi
c000ab60:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c000ab63:	bd 01 00 00 00       	mov    ebp,0x1
c000ab68:	47                   	inc    edi
c000ab69:	e9 f8 fe ff ff       	jmp    c000aa66 <VgaText::puts(char const*, VgaColour, VgaColour)+0x42>
c000ab6e:	83 ec 0c             	sub    esp,0xc
c000ab71:	53                   	push   ebx
c000ab72:	e8 59 fa ff ff       	call   c000a5d0 <VgaText::updateCursor()>
c000ab77:	83 c4 10             	add    esp,0x10
c000ab7a:	89 e8                	mov    eax,ebp
c000ab7c:	84 c0                	test   al,al
c000ab7e:	74 0c                	je     c000ab8c <VgaText::puts(char const*, VgaColour, VgaColour)+0x168>
c000ab80:	83 ec 0c             	sub    esp,0xc
c000ab83:	53                   	push   ebx
c000ab84:	e8 8d fe ff ff       	call   c000aa16 <VgaText::doUpdate()>
c000ab89:	83 c4 10             	add    esp,0x10
c000ab8c:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c000ab93:	83 c4 1c             	add    esp,0x1c
c000ab96:	5b                   	pop    ebx
c000ab97:	5e                   	pop    esi
c000ab98:	5f                   	pop    edi
c000ab99:	5d                   	pop    ebp
c000ab9a:	c3                   	ret    
c000ab9b:	90                   	nop

c000ab9c <VgaText::clearScreen()>:
c000ab9c:	57                   	push   edi
c000ab9d:	56                   	push   esi
c000ab9e:	31 f6                	xor    esi,esi
c000aba0:	53                   	push   ebx
c000aba1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000aba5:	52                   	push   edx
c000aba6:	6a 00                	push   0x0
c000aba8:	6a 00                	push   0x0
c000abaa:	53                   	push   ebx
c000abab:	e8 54 fc ff ff       	call   c000a804 <VgaText::setCursor(int, int)>
c000abb0:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c000abb7:	83 c4 10             	add    esp,0x10
c000abba:	39 73 10             	cmp    DWORD PTR [ebx+0x10],esi
c000abbd:	7e 20                	jle    c000abdf <VgaText::clearScreen()+0x43>
c000abbf:	31 ff                	xor    edi,edi
c000abc1:	50                   	push   eax
c000abc2:	50                   	push   eax
c000abc3:	56                   	push   esi
c000abc4:	57                   	push   edi
c000abc5:	47                   	inc    edi
c000abc6:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c000abc9:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000abcc:	6a 20                	push   0x20
c000abce:	53                   	push   ebx
c000abcf:	e8 c4 fb ff ff       	call   c000a798 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000abd4:	83 c4 20             	add    esp,0x20
c000abd7:	83 ff 50             	cmp    edi,0x50
c000abda:	75 e5                	jne    c000abc1 <VgaText::clearScreen()+0x25>
c000abdc:	46                   	inc    esi
c000abdd:	eb db                	jmp    c000abba <VgaText::clearScreen()+0x1e>
c000abdf:	83 ec 0c             	sub    esp,0xc
c000abe2:	53                   	push   ebx
c000abe3:	e8 2e fe ff ff       	call   c000aa16 <VgaText::doUpdate()>
c000abe8:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c000abef:	83 c4 10             	add    esp,0x10
c000abf2:	5b                   	pop    ebx
c000abf3:	5e                   	pop    esi
c000abf4:	5f                   	pop    edi
c000abf5:	c3                   	ret    

c000abf6 <VgaText::putchar(char)>:
c000abf6:	56                   	push   esi
c000abf7:	53                   	push   ebx
c000abf8:	83 ec 14             	sub    esp,0x14
c000abfb:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000abff:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000ac03:	3c 5b                	cmp    al,0x5b
c000ac05:	75 18                	jne    c000ac1f <VgaText::putchar(char)+0x29>
c000ac07:	80 7b 40 00          	cmp    BYTE PTR [ebx+0x40],0x0
c000ac0b:	74 1f                	je     c000ac2c <VgaText::putchar(char)+0x36>
c000ac0d:	66 c7 43 40 00 01    	mov    WORD PTR [ebx+0x40],0x100
c000ac13:	c7 43 54 00 00 00 00 	mov    DWORD PTR [ebx+0x54],0x0
c000ac1a:	e9 bd 00 00 00       	jmp    c000acdc <VgaText::putchar(char)+0xe6>
c000ac1f:	3c 1b                	cmp    al,0x1b
c000ac21:	75 09                	jne    c000ac2c <VgaText::putchar(char)+0x36>
c000ac23:	c6 43 40 01          	mov    BYTE PTR [ebx+0x40],0x1
c000ac27:	e9 b0 00 00 00       	jmp    c000acdc <VgaText::putchar(char)+0xe6>
c000ac2c:	8a 4b 41             	mov    cl,BYTE PTR [ebx+0x41]
c000ac2f:	84 c9                	test   cl,cl
c000ac31:	0f 84 92 00 00 00    	je     c000acc9 <VgaText::putchar(char)+0xd3>
c000ac37:	8d 50 c0             	lea    edx,[eax-0x40]
c000ac3a:	80 fa 3e             	cmp    dl,0x3e
c000ac3d:	77 76                	ja     c000acb5 <VgaText::putchar(char)+0xbf>
c000ac3f:	3c 6d                	cmp    al,0x6d
c000ac41:	75 47                	jne    c000ac8a <VgaText::putchar(char)+0x94>
c000ac43:	31 f6                	xor    esi,esi
c000ac45:	31 d2                	xor    edx,edx
c000ac47:	31 c0                	xor    eax,eax
c000ac49:	39 73 54             	cmp    DWORD PTR [ebx+0x54],esi
c000ac4c:	7e 2d                	jle    c000ac7b <VgaText::putchar(char)+0x85>
c000ac4e:	0f be 54 33 42       	movsx  edx,BYTE PTR [ebx+esi*1+0x42]
c000ac53:	80 fa 3b             	cmp    dl,0x3b
c000ac56:	75 17                	jne    c000ac6f <VgaText::putchar(char)+0x79>
c000ac58:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c000ac5c:	50                   	push   eax
c000ac5d:	53                   	push   ebx
c000ac5e:	e8 83 f9 ff ff       	call   c000a5e6 <VgaText::doANSI_SGR(int)>
c000ac63:	59                   	pop    ecx
c000ac64:	31 d2                	xor    edx,edx
c000ac66:	58                   	pop    eax
c000ac67:	31 c0                	xor    eax,eax
c000ac69:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c000ac6d:	eb 09                	jmp    c000ac78 <VgaText::putchar(char)+0x82>
c000ac6f:	6b c0 0a             	imul   eax,eax,0xa
c000ac72:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c000ac76:	88 ca                	mov    dl,cl
c000ac78:	46                   	inc    esi
c000ac79:	eb ce                	jmp    c000ac49 <VgaText::putchar(char)+0x53>
c000ac7b:	84 d2                	test   dl,dl
c000ac7d:	74 2e                	je     c000acad <VgaText::putchar(char)+0xb7>
c000ac7f:	50                   	push   eax
c000ac80:	53                   	push   ebx
c000ac81:	e8 60 f9 ff ff       	call   c000a5e6 <VgaText::doANSI_SGR(int)>
c000ac86:	58                   	pop    eax
c000ac87:	5a                   	pop    edx
c000ac88:	eb 23                	jmp    c000acad <VgaText::putchar(char)+0xb7>
c000ac8a:	3c 4a                	cmp    al,0x4a
c000ac8c:	75 1f                	jne    c000acad <VgaText::putchar(char)+0xb7>
c000ac8e:	80 7b 42 32          	cmp    BYTE PTR [ebx+0x42],0x32
c000ac92:	75 19                	jne    c000acad <VgaText::putchar(char)+0xb7>
c000ac94:	83 ec 0c             	sub    esp,0xc
c000ac97:	53                   	push   ebx
c000ac98:	e8 ff fe ff ff       	call   c000ab9c <VgaText::clearScreen()>
c000ac9d:	83 c4 0c             	add    esp,0xc
c000aca0:	6a 00                	push   0x0
c000aca2:	6a 00                	push   0x0
c000aca4:	53                   	push   ebx
c000aca5:	e8 5a fb ff ff       	call   c000a804 <VgaText::setCursor(int, int)>
c000acaa:	83 c4 10             	add    esp,0x10
c000acad:	66 c7 43 40 00 00    	mov    WORD PTR [ebx+0x40],0x0
c000acb3:	eb 27                	jmp    c000acdc <VgaText::putchar(char)+0xe6>
c000acb5:	8b 53 54             	mov    edx,DWORD PTR [ebx+0x54]
c000acb8:	83 fa 0e             	cmp    edx,0xe
c000acbb:	7f 1f                	jg     c000acdc <VgaText::putchar(char)+0xe6>
c000acbd:	8d 4a 01             	lea    ecx,[edx+0x1]
c000acc0:	89 4b 54             	mov    DWORD PTR [ebx+0x54],ecx
c000acc3:	88 44 13 42          	mov    BYTE PTR [ebx+edx*1+0x42],al
c000acc7:	eb 13                	jmp    c000acdc <VgaText::putchar(char)+0xe6>
c000acc9:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c000accc:	0f be c0             	movsx  eax,al
c000accf:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000acd2:	50                   	push   eax
c000acd3:	53                   	push   ebx
c000acd4:	e8 65 fc ff ff       	call   c000a93e <VgaText::putchar(char, VgaColour, VgaColour)>
c000acd9:	83 c4 10             	add    esp,0x10
c000acdc:	83 c4 14             	add    esp,0x14
c000acdf:	5b                   	pop    ebx
c000ace0:	5e                   	pop    esi
c000ace1:	c3                   	ret    

c000ace2 <VgaText::putx(unsigned int)>:
c000ace2:	57                   	push   edi
c000ace3:	b9 11 00 00 00       	mov    ecx,0x11
c000ace8:	56                   	push   esi
c000ace9:	be aa 2a 02 c0       	mov    esi,0xc0022aaa
c000acee:	53                   	push   ebx
c000acef:	83 ec 20             	sub    esp,0x20
c000acf2:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000acf6:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c000acfa:	fc                   	cld    
c000acfb:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000acfd:	be 08 00 00 00       	mov    esi,0x8
c000ad02:	50                   	push   eax
c000ad03:	50                   	push   eax
c000ad04:	89 d8                	mov    eax,ebx
c000ad06:	c1 e3 04             	shl    ebx,0x4
c000ad09:	c1 e8 1c             	shr    eax,0x1c
c000ad0c:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c000ad11:	50                   	push   eax
c000ad12:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ad16:	e8 db fe ff ff       	call   c000abf6 <VgaText::putchar(char)>
c000ad1b:	83 c4 10             	add    esp,0x10
c000ad1e:	4e                   	dec    esi
c000ad1f:	75 e1                	jne    c000ad02 <VgaText::putx(unsigned int)+0x20>
c000ad21:	83 c4 20             	add    esp,0x20
c000ad24:	5b                   	pop    ebx
c000ad25:	5e                   	pop    esi
c000ad26:	5f                   	pop    edi
c000ad27:	c3                   	ret    

c000ad28 <VgaText::puts(char const*)>:
c000ad28:	53                   	push   ebx
c000ad29:	83 ec 08             	sub    esp,0x8
c000ad2c:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000ad30:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000ad33:	84 c0                	test   al,al
c000ad35:	74 12                	je     c000ad49 <VgaText::puts(char const*)+0x21>
c000ad37:	43                   	inc    ebx
c000ad38:	51                   	push   ecx
c000ad39:	51                   	push   ecx
c000ad3a:	50                   	push   eax
c000ad3b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ad3f:	e8 b2 fe ff ff       	call   c000abf6 <VgaText::putchar(char)>
c000ad44:	83 c4 10             	add    esp,0x10
c000ad47:	eb e7                	jmp    c000ad30 <VgaText::puts(char const*)+0x8>
c000ad49:	83 c4 08             	add    esp,0x8
c000ad4c:	5b                   	pop    ebx
c000ad4d:	c3                   	ret    

c000ad4e <VgaText::VgaText(char const*)>:
c000ad4e:	57                   	push   edi
c000ad4f:	56                   	push   esi
c000ad50:	53                   	push   ebx
c000ad51:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ad55:	83 ec 08             	sub    esp,0x8
c000ad58:	6a 00                	push   0x0
c000ad5a:	50                   	push   eax
c000ad5b:	e8 4a 05 00 00       	call   c000b2aa <UnixFile::UnixFile(int)>
c000ad60:	83 c4 10             	add    esp,0x10
c000ad63:	ba 10 2b 02 c0       	mov    edx,0xc0022b10
c000ad68:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ad6c:	89 10                	mov    DWORD PTR [eax],edx
c000ad6e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ad72:	c7 40 38 01 00 00 00 	mov    DWORD PTR [eax+0x38],0x1
c000ad79:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ad7d:	c7 40 3c 0f 00 00 00 	mov    DWORD PTR [eax+0x3c],0xf
c000ad84:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ad88:	c6 40 40 00          	mov    BYTE PTR [eax+0x40],0x0
c000ad8c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ad90:	c6 40 41 00          	mov    BYTE PTR [eax+0x41],0x0
c000ad94:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ad98:	c7 40 54 00 00 00 00 	mov    DWORD PTR [eax+0x54],0x0
c000ad9f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ada3:	c7 40 5c 00 00 00 00 	mov    DWORD PTR [eax+0x5c],0x0
c000adaa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000adae:	c6 80 80 00 00 00 00 	mov    BYTE PTR [eax+0x80],0x0
c000adb5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000adb9:	c6 80 81 00 00 00 00 	mov    BYTE PTR [eax+0x81],0x0
c000adc0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000adc4:	8d 50 60             	lea    edx,[eax+0x60]
c000adc7:	bb c0 64 02 c0       	mov    ebx,0xc00264c0
c000adcc:	b8 08 00 00 00       	mov    eax,0x8
c000add1:	fc                   	cld    
c000add2:	89 d7                	mov    edi,edx
c000add4:	89 de                	mov    esi,ebx
c000add6:	89 c1                	mov    ecx,eax
c000add8:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000adda:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000adde:	05 82 00 00 00       	add    eax,0x82
c000ade3:	83 ec 08             	sub    esp,0x8
c000ade6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000adea:	50                   	push   eax
c000adeb:	e8 50 59 ff ff       	call   c0000740 <strcpy>
c000adf0:	83 c4 10             	add    esp,0x10
c000adf3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000adf7:	c7 40 10 18 00 00 00 	mov    DWORD PTR [eax+0x10],0x18
c000adfe:	83 ec 0c             	sub    esp,0xc
c000ae01:	6a 01                	push   0x1
c000ae03:	e8 e5 08 00 00       	call   c000b6ed <Virt::allocateKernelVirtualPages(int)>
c000ae08:	83 c4 10             	add    esp,0x10
c000ae0b:	89 c2                	mov    edx,eax
c000ae0d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae11:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000ae14:	8b 1d 90 65 02 c0    	mov    ebx,DWORD PTR ds:0xc0026590
c000ae1a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae1e:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000ae21:	89 c6                	mov    esi,eax
c000ae23:	e8 d1 ef ff ff       	call   c0009df9 <Phys::allocatePage()>
c000ae28:	68 05 0c 00 00       	push   0xc05
c000ae2d:	56                   	push   esi
c000ae2e:	50                   	push   eax
c000ae2f:	53                   	push   ebx
c000ae30:	e8 5f 0f 00 00       	call   c000bd94 <VAS::mapPage(unsigned long, unsigned long, int)>
c000ae35:	83 c4 10             	add    esp,0x10
c000ae38:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae3c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000ae3f:	83 ec 04             	sub    esp,0x4
c000ae42:	68 00 0f 00 00       	push   0xf00
c000ae47:	6a 00                	push   0x0
c000ae49:	50                   	push   eax
c000ae4a:	e8 35 58 ff ff       	call   c0000684 <memset>
c000ae4f:	83 c4 10             	add    esp,0x10
c000ae52:	83 ec 04             	sub    esp,0x4
c000ae55:	6a 00                	push   0x0
c000ae57:	6a 07                	push   0x7
c000ae59:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ae5d:	e8 18 f8 ff ff       	call   c000a67a <VgaText::setDefaultColours(VgaColour, VgaColour)>
c000ae62:	83 c4 10             	add    esp,0x10
c000ae65:	83 ec 04             	sub    esp,0x4
c000ae68:	6a 00                	push   0x0
c000ae6a:	6a 00                	push   0x0
c000ae6c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ae70:	e8 8f f9 ff ff       	call   c000a804 <VgaText::setCursor(int, int)>
c000ae75:	83 c4 10             	add    esp,0x10
c000ae78:	83 ec 0c             	sub    esp,0xc
c000ae7b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ae7f:	e8 18 fd ff ff       	call   c000ab9c <VgaText::clearScreen()>
c000ae84:	83 c4 10             	add    esp,0x10
c000ae87:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae8b:	c6 40 58 00          	mov    BYTE PTR [eax+0x58],0x0
c000ae8f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae93:	05 02 01 00 00       	add    eax,0x102
c000ae98:	83 ec 04             	sub    esp,0x4
c000ae9b:	68 96 00 00 00       	push   0x96
c000aea0:	6a 00                	push   0x0
c000aea2:	50                   	push   eax
c000aea3:	e8 dc 57 ff ff       	call   c0000684 <memset>
c000aea8:	83 c4 10             	add    esp,0x10
c000aeab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aeaf:	05 98 01 00 00       	add    eax,0x198
c000aeb4:	83 ec 04             	sub    esp,0x4
c000aeb7:	68 2c 01 00 00       	push   0x12c
c000aebc:	6a 00                	push   0x0
c000aebe:	50                   	push   eax
c000aebf:	e8 c0 57 ff ff       	call   c0000684 <memset>
c000aec4:	83 c4 10             	add    esp,0x10
c000aec7:	90                   	nop
c000aec8:	5b                   	pop    ebx
c000aec9:	5e                   	pop    esi
c000aeca:	5f                   	pop    edi
c000aecb:	c3                   	ret    

c000aecc <VgaText::receiveKey(unsigned char)>:
c000aecc:	55                   	push   ebp
c000aecd:	57                   	push   edi
c000aece:	56                   	push   esi
c000aecf:	53                   	push   ebx
c000aed0:	83 ec 1c             	sub    esp,0x1c
c000aed3:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000aed7:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000aedb:	84 db                	test   bl,bl
c000aedd:	0f 84 c9 00 00 00    	je     c000afac <VgaText::receiveKey(unsigned char)+0xe0>
c000aee3:	8d be 02 01 00 00    	lea    edi,[esi+0x102]
c000aee9:	80 fb 08             	cmp    bl,0x8
c000aeec:	75 2c                	jne    c000af1a <VgaText::receiveKey(unsigned char)+0x4e>
c000aeee:	83 ec 0c             	sub    esp,0xc
c000aef1:	57                   	push   edi
c000aef2:	e8 a9 57 ff ff       	call   c00006a0 <strlen>
c000aef7:	83 c4 10             	add    esp,0x10
c000aefa:	85 c0                	test   eax,eax
c000aefc:	74 41                	je     c000af3f <VgaText::receiveKey(unsigned char)+0x73>
c000aefe:	50                   	push   eax
c000aeff:	50                   	push   eax
c000af00:	6a 08                	push   0x8
c000af02:	56                   	push   esi
c000af03:	e8 ee fc ff ff       	call   c000abf6 <VgaText::putchar(char)>
c000af08:	89 3c 24             	mov    DWORD PTR [esp],edi
c000af0b:	e8 90 57 ff ff       	call   c00006a0 <strlen>
c000af10:	c6 84 06 01 01 00 00 00 	mov    BYTE PTR [esi+eax*1+0x101],0x0
c000af18:	eb 22                	jmp    c000af3c <VgaText::receiveKey(unsigned char)+0x70>
c000af1a:	0f be c3             	movsx  eax,bl
c000af1d:	52                   	push   edx
c000af1e:	52                   	push   edx
c000af1f:	50                   	push   eax
c000af20:	56                   	push   esi
c000af21:	e8 d0 fc ff ff       	call   c000abf6 <VgaText::putchar(char)>
c000af26:	88 5c 24 1e          	mov    BYTE PTR [esp+0x1e],bl
c000af2a:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000af2f:	59                   	pop    ecx
c000af30:	5d                   	pop    ebp
c000af31:	8d 44 24 16          	lea    eax,[esp+0x16]
c000af35:	50                   	push   eax
c000af36:	57                   	push   edi
c000af37:	e8 44 59 ff ff       	call   c0000880 <strcat>
c000af3c:	83 c4 10             	add    esp,0x10
c000af3f:	80 be 80 00 00 00 00 	cmp    BYTE PTR [esi+0x80],0x0
c000af46:	75 05                	jne    c000af4d <VgaText::receiveKey(unsigned char)+0x81>
c000af48:	80 fb 0a             	cmp    bl,0xa
c000af4b:	75 53                	jne    c000afa0 <VgaText::receiveKey(unsigned char)+0xd4>
c000af4d:	83 ec 0c             	sub    esp,0xc
c000af50:	8d 9e 98 01 00 00    	lea    ebx,[esi+0x198]
c000af56:	53                   	push   ebx
c000af57:	e8 44 57 ff ff       	call   c00006a0 <strlen>
c000af5c:	89 3c 24             	mov    DWORD PTR [esp],edi
c000af5f:	89 c5                	mov    ebp,eax
c000af61:	e8 3a 57 ff ff       	call   c00006a0 <strlen>
c000af66:	83 c4 10             	add    esp,0x10
c000af69:	8d 44 05 04          	lea    eax,[ebp+eax*1+0x4]
c000af6d:	3d 2c 01 00 00       	cmp    eax,0x12c
c000af72:	76 10                	jbe    c000af84 <VgaText::receiveKey(unsigned char)+0xb8>
c000af74:	83 ec 0c             	sub    esp,0xc
c000af77:	68 bb 2a 02 c0       	push   0xc0022abb
c000af7c:	e8 00 94 00 00       	call   c0014381 <Krnl::panic(char const*)>
c000af81:	83 c4 10             	add    esp,0x10
c000af84:	50                   	push   eax
c000af85:	50                   	push   eax
c000af86:	57                   	push   edi
c000af87:	53                   	push   ebx
c000af88:	e8 f3 58 ff ff       	call   c0000880 <strcat>
c000af8d:	83 c4 0c             	add    esp,0xc
c000af90:	68 96 00 00 00       	push   0x96
c000af95:	6a 00                	push   0x0
c000af97:	57                   	push   edi
c000af98:	e8 e7 56 ff ff       	call   c0000684 <memset>
c000af9d:	83 c4 10             	add    esp,0x10
c000afa0:	83 ec 0c             	sub    esp,0xc
c000afa3:	56                   	push   esi
c000afa4:	e8 6d fa ff ff       	call   c000aa16 <VgaText::doUpdate()>
c000afa9:	83 c4 10             	add    esp,0x10
c000afac:	83 c4 1c             	add    esp,0x1c
c000afaf:	5b                   	pop    ebx
c000afb0:	5e                   	pop    esi
c000afb1:	5f                   	pop    edi
c000afb2:	5d                   	pop    ebp
c000afb3:	c3                   	ret    

c000afb4 <VgaText::write(unsigned long long, void*, int*)>:
c000afb4:	55                   	push   ebp
c000afb5:	57                   	push   edi
c000afb6:	56                   	push   esi
c000afb7:	53                   	push   ebx
c000afb8:	83 ec 0c             	sub    esp,0xc
c000afbb:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000afbf:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c000afc3:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c000afc7:	c6 86 81 00 00 00 01 	mov    BYTE PTR [esi+0x81],0x1
c000afce:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c000afd1:	39 eb                	cmp    ebx,ebp
c000afd3:	74 13                	je     c000afe8 <VgaText::write(unsigned long long, void*, int*)+0x34>
c000afd5:	43                   	inc    ebx
c000afd6:	50                   	push   eax
c000afd7:	50                   	push   eax
c000afd8:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c000afdc:	50                   	push   eax
c000afdd:	56                   	push   esi
c000afde:	e8 13 fc ff ff       	call   c000abf6 <VgaText::putchar(char)>
c000afe3:	83 c4 10             	add    esp,0x10
c000afe6:	eb e9                	jmp    c000afd1 <VgaText::write(unsigned long long, void*, int*)+0x1d>
c000afe8:	83 ec 0c             	sub    esp,0xc
c000afeb:	c6 86 81 00 00 00 00 	mov    BYTE PTR [esi+0x81],0x0
c000aff2:	56                   	push   esi
c000aff3:	e8 1e fa ff ff       	call   c000aa16 <VgaText::doUpdate()>
c000aff8:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000affc:	89 38                	mov    DWORD PTR [eax],edi
c000affe:	83 c4 1c             	add    esp,0x1c
c000b001:	31 c0                	xor    eax,eax
c000b003:	5b                   	pop    ebx
c000b004:	5e                   	pop    esi
c000b005:	5f                   	pop    edi
c000b006:	5d                   	pop    ebp
c000b007:	c3                   	ret    

c000b008 <newTerminal(char*)>:
c000b008:	83 ec 28             	sub    esp,0x28
c000b00b:	68 c4 02 00 00       	push   0x2c4
c000b010:	e8 ae e9 ff ff       	call   c00099c3 <malloc>
c000b015:	5a                   	pop    edx
c000b016:	59                   	pop    ecx
c000b017:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000b01b:	50                   	push   eax
c000b01c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000b020:	e8 29 fd ff ff       	call   c000ad4e <VgaText::VgaText(char const*)>
c000b025:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b029:	83 c4 2c             	add    esp,0x2c
c000b02c:	c3                   	ret    
c000b02d:	66 90                	xchg   ax,ax
c000b02f:	90                   	nop

c000b030 <TSS::TSS()>:
c000b030:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b034:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000b03b:	90                   	nop
c000b03c:	c3                   	ret    
c000b03d:	90                   	nop
c000b03e:	66 90                	xchg   ax,ax

c000b040 <TSS::setESP(unsigned long)>:
c000b040:	55                   	push   ebp
c000b041:	89 e5                	mov    ebp,esp
c000b043:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b046:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b049:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000b04c:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000b04f:	90                   	nop
c000b050:	5d                   	pop    ebp
c000b051:	c3                   	ret    
c000b052:	66 90                	xchg   ax,ax

c000b054 <TSS::flush()>:
c000b054:	55                   	push   ebp
c000b055:	89 e5                	mov    ebp,esp
c000b057:	83 ec 10             	sub    esp,0x10
c000b05a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b05d:	8b 00                	mov    eax,DWORD PTR [eax]
c000b05f:	83 c8 03             	or     eax,0x3
c000b062:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c000b066:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c000b06a:	66 89 d0             	mov    ax,dx
c000b06d:	0f 00 d8             	ltr    ax
c000b070:	90                   	nop
c000b071:	c9                   	leave  
c000b072:	c3                   	ret    
c000b073:	90                   	nop

c000b074 <TSS::setup(unsigned long, unsigned long)>:
c000b074:	55                   	push   ebp
c000b075:	89 e5                	mov    ebp,esp
c000b077:	83 ec 18             	sub    esp,0x18
c000b07a:	83 ec 0c             	sub    esp,0xc
c000b07d:	6a 68                	push   0x68
c000b07f:	e8 3f e9 ff ff       	call   c00099c3 <malloc>
c000b084:	83 c4 10             	add    esp,0x10
c000b087:	89 c2                	mov    edx,eax
c000b089:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b08c:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000b08f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b092:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b095:	83 ec 04             	sub    esp,0x4
c000b098:	6a 68                	push   0x68
c000b09a:	6a 00                	push   0x0
c000b09c:	50                   	push   eax
c000b09d:	e8 e2 55 ff ff       	call   c0000684 <memset>
c000b0a2:	83 c4 10             	add    esp,0x10
c000b0a5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b0a8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b0ab:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c000b0b1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b0b4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b0b7:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c000b0bd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b0c0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b0c3:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000b0c6:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000b0c9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b0cc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b0cf:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c000b0d5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b0d8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b0db:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c000b0e1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b0e4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b0e7:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c000b0ed:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b0f0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b0f3:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c000b0f9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b0fc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b0ff:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c000b105:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b108:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b10b:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c000b111:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b114:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b117:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c000b11a:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c000b11d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b120:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b123:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000b126:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000b129:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b12c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b12f:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c000b136:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b139:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b13c:	0f 20 da             	mov    edx,cr3
c000b13f:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c000b142:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c000b145:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c000b148:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b14b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b14e:	83 ec 08             	sub    esp,0x8
c000b151:	50                   	push   eax
c000b152:	8d 45 ec             	lea    eax,[ebp-0x14]
c000b155:	50                   	push   eax
c000b156:	e8 c5 e0 ff ff       	call   c0009220 <GDTEntry::setBase(unsigned int)>
c000b15b:	83 c4 10             	add    esp,0x10
c000b15e:	83 ec 08             	sub    esp,0x8
c000b161:	6a 68                	push   0x68
c000b163:	8d 45 ec             	lea    eax,[ebp-0x14]
c000b166:	50                   	push   eax
c000b167:	e8 d0 e0 ff ff       	call   c000923c <GDTEntry::setLimit(unsigned int)>
c000b16c:	83 c4 10             	add    esp,0x10
c000b16f:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c000b173:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c000b176:	83 e0 0f             	and    eax,0xf
c000b179:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c000b17c:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c000b17f:	83 c8 40             	or     eax,0x40
c000b182:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c000b185:	a1 68 64 02 c0       	mov    eax,ds:0xc0026468
c000b18a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000b190:	05 78 01 00 00       	add    eax,0x178
c000b195:	83 ec 04             	sub    esp,0x4
c000b198:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000b19b:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c000b19e:	50                   	push   eax
c000b19f:	e8 cc e0 ff ff       	call   c0009270 <GDT::addEntry(GDTEntry)>
c000b1a4:	83 c4 10             	add    esp,0x10
c000b1a7:	89 c2                	mov    edx,eax
c000b1a9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b1ac:	89 10                	mov    DWORD PTR [eax],edx
c000b1ae:	a1 68 64 02 c0       	mov    eax,ds:0xc0026468
c000b1b3:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000b1b9:	05 78 01 00 00       	add    eax,0x178
c000b1be:	83 ec 0c             	sub    esp,0xc
c000b1c1:	50                   	push   eax
c000b1c2:	e8 d3 e0 ff ff       	call   c000929a <GDT::flush()>
c000b1c7:	83 c4 10             	add    esp,0x10
c000b1ca:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b1cd:	8b 00                	mov    eax,DWORD PTR [eax]
c000b1cf:	c9                   	leave  
c000b1d0:	c3                   	ret    
c000b1d1:	90                   	nop

c000b1d2 <ReservedFilename::read(unsigned long long, void*, int*)>:
c000b1d2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b1d6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000b1da:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b1dd:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c000b1e2:	75 08                	jne    c000b1ec <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c000b1e4:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c000b1ea:	eb 38                	jmp    c000b224 <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c000b1ec:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c000b1f1:	75 17                	jne    c000b20a <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c000b1f3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000b1f8:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000b1fb:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c000b201:	8b 10                	mov    edx,DWORD PTR [eax]
c000b203:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000b207:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c000b20a:	89 c1                	mov    ecx,eax
c000b20c:	83 e1 fd             	and    ecx,0xfffffffd
c000b20f:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c000b215:	74 cd                	je     c000b1e4 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c000b217:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c000b21c:	83 e0 ef             	and    eax,0xffffffef
c000b21f:	83 f8 08             	cmp    eax,0x8
c000b222:	76 c0                	jbe    c000b1e4 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c000b224:	31 c0                	xor    eax,eax
c000b226:	c3                   	ret    
c000b227:	90                   	nop

c000b228 <ReservedFilename::isAtty()>:
c000b228:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b22c:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000b22f:	31 c0                	xor    eax,eax
c000b231:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c000b237:	74 09                	je     c000b242 <ReservedFilename::isAtty()+0x1a>
c000b239:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c000b23f:	0f 94 c0             	sete   al
c000b242:	c3                   	ret    
c000b243:	90                   	nop

c000b244 <ReservedFilename::write(unsigned long long, void*, int*)>:
c000b244:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b248:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000b24c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b24f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000b253:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c000b258:	75 08                	jne    c000b262 <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c000b25a:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c000b260:	eb 3d                	jmp    c000b29f <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c000b262:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c000b267:	75 17                	jne    c000b280 <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c000b269:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000b26e:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000b271:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c000b277:	8b 10                	mov    edx,DWORD PTR [eax]
c000b279:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000b27d:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c000b280:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c000b285:	75 04                	jne    c000b28b <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c000b287:	89 0a                	mov    DWORD PTR [edx],ecx
c000b289:	eb 14                	jmp    c000b29f <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c000b28b:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c000b290:	74 c8                	je     c000b25a <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c000b292:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c000b297:	83 e0 ef             	and    eax,0xffffffef
c000b29a:	83 f8 08             	cmp    eax,0x8
c000b29d:	76 bb                	jbe    c000b25a <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c000b29f:	31 c0                	xor    eax,eax
c000b2a1:	c3                   	ret    

c000b2a2 <UnixFile::getFileDescriptor()>:
c000b2a2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b2a6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b2a9:	c3                   	ret    

c000b2aa <UnixFile::UnixFile(int)>:
c000b2aa:	53                   	push   ebx
c000b2ab:	83 ec 28             	sub    esp,0x28
c000b2ae:	ba d8 2b 02 c0       	mov    edx,0xc0022bd8
c000b2b3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b2b7:	89 10                	mov    DWORD PTR [eax],edx
c000b2b9:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c000b2c1:	0f 8f 8c 01 00 00    	jg     c000b453 <UnixFile::UnixFile(int)+0x1a9>
c000b2c7:	a1 a0 58 02 c0       	mov    eax,ds:0xc00258a0
c000b2cc:	8d 50 01             	lea    edx,[eax+0x1]
c000b2cf:	89 15 a0 58 02 c0    	mov    DWORD PTR ds:0xc00258a0,edx
c000b2d5:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000b2d9:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c000b2dc:	83 ec 08             	sub    esp,0x8
c000b2df:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000b2e3:	68 78 65 02 c0       	push   0xc0026578
c000b2e8:	e8 7f 5f 01 00       	call   c002126c <LinkedList<UnixFile>::addElement(UnixFile*)>
c000b2ed:	83 c4 10             	add    esp,0x10
c000b2f0:	a0 74 65 02 c0       	mov    al,ds:0xc0026574
c000b2f5:	83 f0 01             	xor    eax,0x1
c000b2f8:	84 c0                	test   al,al
c000b2fa:	0f 84 54 01 00 00    	je     c000b454 <UnixFile::UnixFile(int)+0x1aa>
c000b300:	c6 05 74 65 02 c0 01 	mov    BYTE PTR ds:0xc0026574,0x1
c000b307:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c000b30f:	83 ec 0c             	sub    esp,0xc
c000b312:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000b316:	e8 a8 e6 ff ff       	call   c00099c3 <malloc>
c000b31b:	83 c4 10             	add    esp,0x10
c000b31e:	89 c3                	mov    ebx,eax
c000b320:	83 ec 08             	sub    esp,0x8
c000b323:	68 03 ff ff 0f       	push   0xfffff03
c000b328:	53                   	push   ebx
c000b329:	e8 2c 01 00 00       	call   c000b45a <ReservedFilename::ReservedFilename(int)>
c000b32e:	83 c4 10             	add    esp,0x10
c000b331:	89 1d 6c 65 02 c0    	mov    DWORD PTR ds:0xc002656c,ebx
c000b337:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c000b33f:	83 ec 0c             	sub    esp,0xc
c000b342:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b346:	e8 78 e6 ff ff       	call   c00099c3 <malloc>
c000b34b:	83 c4 10             	add    esp,0x10
c000b34e:	89 c3                	mov    ebx,eax
c000b350:	83 ec 08             	sub    esp,0x8
c000b353:	68 01 ff ff 0f       	push   0xfffff01
c000b358:	53                   	push   ebx
c000b359:	e8 fc 00 00 00       	call   c000b45a <ReservedFilename::ReservedFilename(int)>
c000b35e:	83 c4 10             	add    esp,0x10
c000b361:	89 1d 70 65 02 c0    	mov    DWORD PTR ds:0xc0026570,ebx
c000b367:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c000b36f:	83 ec 0c             	sub    esp,0xc
c000b372:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000b376:	e8 48 e6 ff ff       	call   c00099c3 <malloc>
c000b37b:	83 c4 10             	add    esp,0x10
c000b37e:	89 c3                	mov    ebx,eax
c000b380:	83 ec 08             	sub    esp,0x8
c000b383:	68 00 ff ff 0f       	push   0xfffff00
c000b388:	53                   	push   ebx
c000b389:	e8 cc 00 00 00       	call   c000b45a <ReservedFilename::ReservedFilename(int)>
c000b38e:	83 c4 10             	add    esp,0x10
c000b391:	89 1d 64 65 02 c0    	mov    DWORD PTR ds:0xc0026564,ebx
c000b397:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c000b39f:	83 ec 0c             	sub    esp,0xc
c000b3a2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000b3a6:	e8 18 e6 ff ff       	call   c00099c3 <malloc>
c000b3ab:	83 c4 10             	add    esp,0x10
c000b3ae:	89 c3                	mov    ebx,eax
c000b3b0:	83 ec 08             	sub    esp,0x8
c000b3b3:	68 02 ff ff 0f       	push   0xfffff02
c000b3b8:	53                   	push   ebx
c000b3b9:	e8 9c 00 00 00       	call   c000b45a <ReservedFilename::ReservedFilename(int)>
c000b3be:	83 c4 10             	add    esp,0x10
c000b3c1:	89 1d 68 65 02 c0    	mov    DWORD PTR ds:0xc0026568,ebx
c000b3c7:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000b3cf:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c000b3d4:	7f 7e                	jg     c000b454 <UnixFile::UnixFile(int)+0x1aa>
c000b3d6:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c000b3de:	83 ec 0c             	sub    esp,0xc
c000b3e1:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b3e5:	e8 d9 e5 ff ff       	call   c00099c3 <malloc>
c000b3ea:	83 c4 10             	add    esp,0x10
c000b3ed:	89 c3                	mov    ebx,eax
c000b3ef:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b3f3:	05 10 ff ff 0f       	add    eax,0xfffff10
c000b3f8:	83 ec 08             	sub    esp,0x8
c000b3fb:	50                   	push   eax
c000b3fc:	53                   	push   ebx
c000b3fd:	e8 58 00 00 00       	call   c000b45a <ReservedFilename::ReservedFilename(int)>
c000b402:	83 c4 10             	add    esp,0x10
c000b405:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b409:	89 1c 85 40 65 02 c0 	mov    DWORD PTR [eax*4-0x3ffd9ac0],ebx
c000b410:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c000b418:	83 ec 0c             	sub    esp,0xc
c000b41b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b41f:	e8 9f e5 ff ff       	call   c00099c3 <malloc>
c000b424:	83 c4 10             	add    esp,0x10
c000b427:	89 c3                	mov    ebx,eax
c000b429:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b42d:	05 20 ff ff 0f       	add    eax,0xfffff20
c000b432:	83 ec 08             	sub    esp,0x8
c000b435:	50                   	push   eax
c000b436:	53                   	push   ebx
c000b437:	e8 1e 00 00 00       	call   c000b45a <ReservedFilename::ReservedFilename(int)>
c000b43c:	83 c4 10             	add    esp,0x10
c000b43f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b443:	89 1c 85 00 65 02 c0 	mov    DWORD PTR [eax*4-0x3ffd9b00],ebx
c000b44a:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000b44e:	e9 7c ff ff ff       	jmp    c000b3cf <UnixFile::UnixFile(int)+0x125>
c000b453:	90                   	nop
c000b454:	83 c4 28             	add    esp,0x28
c000b457:	5b                   	pop    ebx
c000b458:	c3                   	ret    
c000b459:	90                   	nop

c000b45a <ReservedFilename::ReservedFilename(int)>:
c000b45a:	83 ec 0c             	sub    esp,0xc
c000b45d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b461:	83 ec 08             	sub    esp,0x8
c000b464:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b468:	50                   	push   eax
c000b469:	e8 3c fe ff ff       	call   c000b2aa <UnixFile::UnixFile(int)>
c000b46e:	83 c4 10             	add    esp,0x10
c000b471:	ba f4 2b 02 c0       	mov    edx,0xc0022bf4
c000b476:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b47a:	89 10                	mov    DWORD PTR [eax],edx
c000b47c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b480:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000b484:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000b487:	90                   	nop
c000b488:	83 c4 0c             	add    esp,0xc
c000b48b:	c3                   	ret    

c000b48c <UnixFile::~UnixFile()>:
c000b48c:	83 ec 1c             	sub    esp,0x1c
c000b48f:	ba d8 2b 02 c0       	mov    edx,0xc0022bd8
c000b494:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b498:	89 10                	mov    DWORD PTR [eax],edx
c000b49a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b49e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b4a1:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c000b4a6:	7f 73                	jg     c000b51b <UnixFile::~UnixFile()+0x8f>
c000b4a8:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000b4b0:	83 ec 0c             	sub    esp,0xc
c000b4b3:	68 78 65 02 c0       	push   0xc0026578
c000b4b8:	e8 83 5e 01 00       	call   c0021340 <LinkedList<UnixFile>::getFirstElement()>
c000b4bd:	83 c4 10             	add    esp,0x10
c000b4c0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b4c4:	83 ec 0c             	sub    esp,0xc
c000b4c7:	68 78 65 02 c0       	push   0xc0026578
c000b4cc:	e8 77 5e 01 00       	call   c0021348 <LinkedList<UnixFile>::removeFirst()>
c000b4d1:	83 c4 10             	add    esp,0x10
c000b4d4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b4d8:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c000b4dc:	74 40                	je     c000b51e <UnixFile::~UnixFile()+0x92>
c000b4de:	83 ec 08             	sub    esp,0x8
c000b4e1:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b4e5:	68 78 65 02 c0       	push   0xc0026578
c000b4ea:	e8 7d 5d 01 00       	call   c002126c <LinkedList<UnixFile>::addElement(UnixFile*)>
c000b4ef:	83 c4 10             	add    esp,0x10
c000b4f2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b4f6:	8d 50 01             	lea    edx,[eax+0x1]
c000b4f9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b4fd:	3d 88 13 00 00       	cmp    eax,0x1388
c000b502:	0f 94 c0             	sete   al
c000b505:	84 c0                	test   al,al
c000b507:	74 a7                	je     c000b4b0 <UnixFile::~UnixFile()+0x24>
c000b509:	83 ec 0c             	sub    esp,0xc
c000b50c:	68 b0 2b 02 c0       	push   0xc0022bb0
c000b511:	e8 6b 8e 00 00       	call   c0014381 <Krnl::panic(char const*)>
c000b516:	83 c4 10             	add    esp,0x10
c000b519:	eb 95                	jmp    c000b4b0 <UnixFile::~UnixFile()+0x24>
c000b51b:	90                   	nop
c000b51c:	eb 01                	jmp    c000b51f <UnixFile::~UnixFile()+0x93>
c000b51e:	90                   	nop
c000b51f:	90                   	nop
c000b520:	83 c4 1c             	add    esp,0x1c
c000b523:	c3                   	ret    

c000b524 <UnixFile::~UnixFile()>:
c000b524:	83 ec 0c             	sub    esp,0xc
c000b527:	83 ec 0c             	sub    esp,0xc
c000b52a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b52e:	e8 59 ff ff ff       	call   c000b48c <UnixFile::~UnixFile()>
c000b533:	83 c4 10             	add    esp,0x10
c000b536:	83 ec 08             	sub    esp,0x8
c000b539:	6a 0c                	push   0xc
c000b53b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b53f:	e8 9a 14 00 00       	call   c000c9de <operator delete(void*, unsigned long)>
c000b544:	83 c4 10             	add    esp,0x10
c000b547:	83 c4 0c             	add    esp,0xc
c000b54a:	c3                   	ret    
c000b54b:	90                   	nop

c000b54c <ReservedFilename::~ReservedFilename()>:
c000b54c:	83 ec 0c             	sub    esp,0xc
c000b54f:	ba f4 2b 02 c0       	mov    edx,0xc0022bf4
c000b554:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b558:	89 10                	mov    DWORD PTR [eax],edx
c000b55a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b55e:	83 ec 0c             	sub    esp,0xc
c000b561:	50                   	push   eax
c000b562:	e8 25 ff ff ff       	call   c000b48c <UnixFile::~UnixFile()>
c000b567:	83 c4 10             	add    esp,0x10
c000b56a:	90                   	nop
c000b56b:	83 c4 0c             	add    esp,0xc
c000b56e:	c3                   	ret    
c000b56f:	90                   	nop

c000b570 <ReservedFilename::~ReservedFilename()>:
c000b570:	83 ec 0c             	sub    esp,0xc
c000b573:	83 ec 0c             	sub    esp,0xc
c000b576:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b57a:	e8 cd ff ff ff       	call   c000b54c <ReservedFilename::~ReservedFilename()>
c000b57f:	83 c4 10             	add    esp,0x10
c000b582:	83 ec 08             	sub    esp,0x8
c000b585:	6a 0c                	push   0xc
c000b587:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b58b:	e8 4e 14 00 00       	call   c000c9de <operator delete(void*, unsigned long)>
c000b590:	83 c4 10             	add    esp,0x10
c000b593:	83 c4 0c             	add    esp,0xc
c000b596:	c3                   	ret    

c000b597 <getFromFileDescriptor(int)>:
c000b597:	53                   	push   ebx
c000b598:	83 ec 08             	sub    esp,0x8
c000b59b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000b59f:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c000b5a5:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c000b5ab:	7f 2c                	jg     c000b5d9 <getFromFileDescriptor(int)+0x42>
c000b5ad:	83 ec 0c             	sub    esp,0xc
c000b5b0:	68 78 65 02 c0       	push   0xc0026578
c000b5b5:	e8 86 5d 01 00       	call   c0021340 <LinkedList<UnixFile>::getFirstElement()>
c000b5ba:	83 c4 10             	add    esp,0x10
c000b5bd:	85 c0                	test   eax,eax
c000b5bf:	75 04                	jne    c000b5c5 <getFromFileDescriptor(int)+0x2e>
c000b5c1:	31 c0                	xor    eax,eax
c000b5c3:	eb 6e                	jmp    c000b633 <getFromFileDescriptor(int)+0x9c>
c000b5c5:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c000b5c8:	74 69                	je     c000b633 <getFromFileDescriptor(int)+0x9c>
c000b5ca:	52                   	push   edx
c000b5cb:	52                   	push   edx
c000b5cc:	50                   	push   eax
c000b5cd:	68 78 65 02 c0       	push   0xc0026578
c000b5d2:	e8 13 5e 01 00       	call   c00213ea <LinkedList<UnixFile>::getNext(UnixFile*)>
c000b5d7:	eb e1                	jmp    c000b5ba <getFromFileDescriptor(int)+0x23>
c000b5d9:	a1 6c 65 02 c0       	mov    eax,ds:0xc002656c
c000b5de:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c000b5e4:	74 4d                	je     c000b633 <getFromFileDescriptor(int)+0x9c>
c000b5e6:	a1 70 65 02 c0       	mov    eax,ds:0xc0026570
c000b5eb:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c000b5f1:	74 40                	je     c000b633 <getFromFileDescriptor(int)+0x9c>
c000b5f3:	a1 68 65 02 c0       	mov    eax,ds:0xc0026568
c000b5f8:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c000b5fe:	74 33                	je     c000b633 <getFromFileDescriptor(int)+0x9c>
c000b600:	a1 64 65 02 c0       	mov    eax,ds:0xc0026564
c000b605:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c000b60b:	74 26                	je     c000b633 <getFromFileDescriptor(int)+0x9c>
c000b60d:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c000b613:	83 f8 08             	cmp    eax,0x8
c000b616:	77 09                	ja     c000b621 <getFromFileDescriptor(int)+0x8a>
c000b618:	8b 04 85 40 65 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9ac0]
c000b61f:	eb 12                	jmp    c000b633 <getFromFileDescriptor(int)+0x9c>
c000b621:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c000b627:	83 fb 08             	cmp    ebx,0x8
c000b62a:	77 95                	ja     c000b5c1 <getFromFileDescriptor(int)+0x2a>
c000b62c:	8b 04 9d 00 65 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd9b00]
c000b633:	83 c4 08             	add    esp,0x8
c000b636:	5b                   	pop    ebx
c000b637:	c3                   	ret    

c000b638 <__static_initialization_and_destruction_0(int, int)>:
c000b638:	83 ec 0c             	sub    esp,0xc
c000b63b:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000b640:	75 34                	jne    c000b676 <__static_initialization_and_destruction_0(int, int)+0x3e>
c000b642:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c000b64a:	75 2a                	jne    c000b676 <__static_initialization_and_destruction_0(int, int)+0x3e>
c000b64c:	83 ec 0c             	sub    esp,0xc
c000b64f:	68 78 65 02 c0       	push   0xc0026578
c000b654:	e8 d1 5b 01 00       	call   c002122a <LinkedList<UnixFile>::LinkedList()>
c000b659:	83 c4 10             	add    esp,0x10
c000b65c:	83 ec 04             	sub    esp,0x4
c000b65f:	68 c8 56 02 c0       	push   0xc00256c8
c000b664:	68 78 65 02 c0       	push   0xc0026578
c000b669:	68 28 12 02 c0       	push   0xc0021228
c000b66e:	e8 e5 12 00 00       	call   c000c958 <__cxa_atexit>
c000b673:	83 c4 10             	add    esp,0x10
c000b676:	90                   	nop
c000b677:	83 c4 0c             	add    esp,0xc
c000b67a:	c3                   	ret    

c000b67b <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c000b67b:	83 ec 0c             	sub    esp,0xc
c000b67e:	83 ec 08             	sub    esp,0x8
c000b681:	68 ff ff 00 00       	push   0xffff
c000b686:	6a 01                	push   0x1
c000b688:	e8 ab ff ff ff       	call   c000b638 <__static_initialization_and_destruction_0(int, int)>
c000b68d:	83 c4 10             	add    esp,0x10
c000b690:	83 c4 0c             	add    esp,0xc
c000b693:	c3                   	ret    

c000b694 <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c000b694:	53                   	push   ebx
c000b695:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b699:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000b69d:	8d 88 00 80 f3 ff    	lea    ecx,[eax-0xc8000]
c000b6a3:	89 c8                	mov    eax,ecx
c000b6a5:	d1 e8                	shr    eax,1
c000b6a7:	03 05 a8 58 02 c0    	add    eax,DWORD PTR ds:0xc00258a8
c000b6ad:	83 e1 01             	and    ecx,0x1
c000b6b0:	8a 10                	mov    dl,BYTE PTR [eax]
c000b6b2:	75 09                	jne    c000b6bd <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x29>
c000b6b4:	83 e2 f0             	and    edx,0xfffffff0
c000b6b7:	09 da                	or     edx,ebx
c000b6b9:	88 10                	mov    BYTE PTR [eax],dl
c000b6bb:	5b                   	pop    ebx
c000b6bc:	c3                   	ret    
c000b6bd:	c1 e3 04             	shl    ebx,0x4
c000b6c0:	83 e2 0f             	and    edx,0xf
c000b6c3:	09 da                	or     edx,ebx
c000b6c5:	88 10                	mov    BYTE PTR [eax],dl
c000b6c7:	5b                   	pop    ebx
c000b6c8:	c3                   	ret    

c000b6c9 <Virt::getPageState(unsigned long)>:
c000b6c9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b6cd:	8b 0d a8 58 02 c0    	mov    ecx,DWORD PTR ds:0xc00258a8
c000b6d3:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c000b6d9:	89 d0                	mov    eax,edx
c000b6db:	d1 e8                	shr    eax,1
c000b6dd:	83 e2 01             	and    edx,0x1
c000b6e0:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c000b6e3:	75 04                	jne    c000b6e9 <Virt::getPageState(unsigned long)+0x20>
c000b6e5:	83 e0 0f             	and    eax,0xf
c000b6e8:	c3                   	ret    
c000b6e9:	c0 e8 04             	shr    al,0x4
c000b6ec:	c3                   	ret    

c000b6ed <Virt::allocateKernelVirtualPages(int)>:
c000b6ed:	55                   	push   ebp
c000b6ee:	31 ed                	xor    ebp,ebp
c000b6f0:	57                   	push   edi
c000b6f1:	56                   	push   esi
c000b6f2:	53                   	push   ebx
c000b6f3:	31 db                	xor    ebx,ebx
c000b6f5:	83 ec 1c             	sub    esp,0x1c
c000b6f8:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000b6fc:	8b 3d a4 58 02 c0    	mov    edi,DWORD PTR ds:0xc00258a4
c000b702:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c000b707:	57                   	push   edi
c000b708:	e8 bc ff ff ff       	call   c000b6c9 <Virt::getPageState(unsigned long)>
c000b70d:	5a                   	pop    edx
c000b70e:	84 c0                	test   al,al
c000b710:	75 3a                	jne    c000b74c <Virt::allocateKernelVirtualPages(int)+0x5f>
c000b712:	85 db                	test   ebx,ebx
c000b714:	75 02                	jne    c000b718 <Virt::allocateKernelVirtualPages(int)+0x2b>
c000b716:	89 fd                	mov    ebp,edi
c000b718:	43                   	inc    ebx
c000b719:	39 f3                	cmp    ebx,esi
c000b71b:	74 5a                	je     c000b777 <Virt::allocateKernelVirtualPages(int)+0x8a>
c000b71d:	47                   	inc    edi
c000b71e:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c000b724:	76 31                	jbe    c000b757 <Virt::allocateKernelVirtualPages(int)+0x6a>
c000b726:	c7 05 a4 58 02 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc00258a4,0xc8000
c000b730:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c000b735:	75 28                	jne    c000b75f <Virt::allocateKernelVirtualPages(int)+0x72>
c000b737:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c000b73c:	bf 00 80 0c 00       	mov    edi,0xc8000
c000b741:	57                   	push   edi
c000b742:	e8 82 ff ff ff       	call   c000b6c9 <Virt::getPageState(unsigned long)>
c000b747:	5a                   	pop    edx
c000b748:	84 c0                	test   al,al
c000b74a:	74 c6                	je     c000b712 <Virt::allocateKernelVirtualPages(int)+0x25>
c000b74c:	31 db                	xor    ebx,ebx
c000b74e:	47                   	inc    edi
c000b74f:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c000b755:	77 cf                	ja     c000b726 <Virt::allocateKernelVirtualPages(int)+0x39>
c000b757:	89 3d a4 58 02 c0    	mov    DWORD PTR ds:0xc00258a4,edi
c000b75d:	eb a8                	jmp    c000b707 <Virt::allocateKernelVirtualPages(int)+0x1a>
c000b75f:	83 ec 0c             	sub    esp,0xc
c000b762:	68 08 2c 02 c0       	push   0xc0022c08
c000b767:	e8 15 8c 00 00       	call   c0014381 <Krnl::panic(char const*)>
c000b76c:	8b 3d a4 58 02 c0    	mov    edi,DWORD PTR ds:0xc00258a4
c000b772:	83 c4 10             	add    esp,0x10
c000b775:	eb 90                	jmp    c000b707 <Virt::allocateKernelVirtualPages(int)+0x1a>
c000b777:	89 2d a4 58 02 c0    	mov    DWORD PTR ds:0xc00258a4,ebp
c000b77d:	4b                   	dec    ebx
c000b77e:	74 5f                	je     c000b7df <Virt::allocateKernelVirtualPages(int)+0xf2>
c000b780:	85 f6                	test   esi,esi
c000b782:	74 3d                	je     c000b7c1 <Virt::allocateKernelVirtualPages(int)+0xd4>
c000b784:	89 e8                	mov    eax,ebp
c000b786:	31 db                	xor    ebx,ebx
c000b788:	8d 7e ff             	lea    edi,[esi-0x1]
c000b78b:	eb 14                	jmp    c000b7a1 <Virt::allocateKernelVirtualPages(int)+0xb4>
c000b78d:	6a 01                	push   0x1
c000b78f:	43                   	inc    ebx
c000b790:	50                   	push   eax
c000b791:	e8 fe fe ff ff       	call   c000b694 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000b796:	58                   	pop    eax
c000b797:	39 f3                	cmp    ebx,esi
c000b799:	5a                   	pop    edx
c000b79a:	74 25                	je     c000b7c1 <Virt::allocateKernelVirtualPages(int)+0xd4>
c000b79c:	a1 a4 58 02 c0       	mov    eax,ds:0xc00258a4
c000b7a1:	8d 50 01             	lea    edx,[eax+0x1]
c000b7a4:	85 db                	test   ebx,ebx
c000b7a6:	89 15 a4 58 02 c0    	mov    DWORD PTR ds:0xc00258a4,edx
c000b7ac:	74 20                	je     c000b7ce <Virt::allocateKernelVirtualPages(int)+0xe1>
c000b7ae:	39 df                	cmp    edi,ebx
c000b7b0:	75 db                	jne    c000b78d <Virt::allocateKernelVirtualPages(int)+0xa0>
c000b7b2:	6a 03                	push   0x3
c000b7b4:	43                   	inc    ebx
c000b7b5:	50                   	push   eax
c000b7b6:	e8 d9 fe ff ff       	call   c000b694 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000b7bb:	59                   	pop    ecx
c000b7bc:	39 f3                	cmp    ebx,esi
c000b7be:	58                   	pop    eax
c000b7bf:	75 db                	jne    c000b79c <Virt::allocateKernelVirtualPages(int)+0xaf>
c000b7c1:	83 c4 1c             	add    esp,0x1c
c000b7c4:	89 e8                	mov    eax,ebp
c000b7c6:	5b                   	pop    ebx
c000b7c7:	c1 e0 0c             	shl    eax,0xc
c000b7ca:	5e                   	pop    esi
c000b7cb:	5f                   	pop    edi
c000b7cc:	5d                   	pop    ebp
c000b7cd:	c3                   	ret    
c000b7ce:	6a 02                	push   0x2
c000b7d0:	bb 01 00 00 00       	mov    ebx,0x1
c000b7d5:	50                   	push   eax
c000b7d6:	e8 b9 fe ff ff       	call   c000b694 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000b7db:	58                   	pop    eax
c000b7dc:	5a                   	pop    edx
c000b7dd:	eb bd                	jmp    c000b79c <Virt::allocateKernelVirtualPages(int)+0xaf>
c000b7df:	6a 04                	push   0x4
c000b7e1:	8d 45 01             	lea    eax,[ebp+0x1]
c000b7e4:	55                   	push   ebp
c000b7e5:	a3 a4 58 02 c0       	mov    ds:0xc00258a4,eax
c000b7ea:	e8 a5 fe ff ff       	call   c000b694 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000b7ef:	59                   	pop    ecx
c000b7f0:	89 e8                	mov    eax,ebp
c000b7f2:	5b                   	pop    ebx
c000b7f3:	c1 e0 0c             	shl    eax,0xc
c000b7f6:	83 c4 1c             	add    esp,0x1c
c000b7f9:	5b                   	pop    ebx
c000b7fa:	5e                   	pop    esi
c000b7fb:	5f                   	pop    edi
c000b7fc:	5d                   	pop    ebp
c000b7fd:	c3                   	ret    

c000b7fe <Virt::freeSwapfilePage(unsigned long)>:
c000b7fe:	53                   	push   ebx
c000b7ff:	8b 15 8c 65 02 c0    	mov    edx,DWORD PTR ds:0xc002658c
c000b805:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000b809:	b8 01 00 00 00       	mov    eax,0x1
c000b80e:	89 cb                	mov    ebx,ecx
c000b810:	d3 e0                	shl    eax,cl
c000b812:	c1 eb 05             	shr    ebx,0x5
c000b815:	f7 d0                	not    eax
c000b817:	21 04 9a             	and    DWORD PTR [edx+ebx*4],eax
c000b81a:	5b                   	pop    ebx
c000b81b:	c3                   	ret    

c000b81c <Virt::swapIDToSector(unsigned long)>:
c000b81c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b820:	0f af 05 ac 58 02 c0 	imul   eax,DWORD PTR ds:0xc00258ac
c000b827:	03 05 b4 58 02 c0    	add    eax,DWORD PTR ds:0xc00258b4
c000b82d:	c3                   	ret    

c000b82e <Virt::allocateSwapfilePage()>:
c000b82e:	55                   	push   ebp
c000b82f:	31 d2                	xor    edx,edx
c000b831:	57                   	push   edi
c000b832:	56                   	push   esi
c000b833:	53                   	push   ebx
c000b834:	83 ec 0c             	sub    esp,0xc
c000b837:	8b 0d ac 58 02 c0    	mov    ecx,DWORD PTR ds:0xc00258ac
c000b83d:	a1 b0 58 02 c0       	mov    eax,ds:0xc00258b0
c000b842:	f7 f1                	div    ecx
c000b844:	39 0d b0 58 02 c0    	cmp    DWORD PTR ds:0xc00258b0,ecx
c000b84a:	72 2d                	jb     c000b879 <Virt::allocateSwapfilePage()+0x4b>
c000b84c:	8b 35 8c 65 02 c0    	mov    esi,DWORD PTR ds:0xc002658c
c000b852:	8b 16                	mov    edx,DWORD PTR [esi]
c000b854:	f6 c2 01             	test   dl,0x1
c000b857:	74 3c                	je     c000b895 <Virt::allocateSwapfilePage()+0x67>
c000b859:	31 c9                	xor    ecx,ecx
c000b85b:	bf 01 00 00 00       	mov    edi,0x1
c000b860:	eb 12                	jmp    c000b874 <Virt::allocateSwapfilePage()+0x46>
c000b862:	89 fd                	mov    ebp,edi
c000b864:	89 ca                	mov    edx,ecx
c000b866:	d3 e5                	shl    ebp,cl
c000b868:	c1 ea 05             	shr    edx,0x5
c000b86b:	8d 1c 96             	lea    ebx,[esi+edx*4]
c000b86e:	8b 13                	mov    edx,DWORD PTR [ebx]
c000b870:	85 ea                	test   edx,ebp
c000b872:	74 2a                	je     c000b89e <Virt::allocateSwapfilePage()+0x70>
c000b874:	41                   	inc    ecx
c000b875:	39 c8                	cmp    eax,ecx
c000b877:	77 e9                	ja     c000b862 <Virt::allocateSwapfilePage()+0x34>
c000b879:	83 ec 0c             	sub    esp,0xc
c000b87c:	68 c0 2d 02 c0       	push   0xc0022dc0
c000b881:	e8 fb 8a 00 00       	call   c0014381 <Krnl::panic(char const*)>
c000b886:	83 c4 10             	add    esp,0x10
c000b889:	31 c9                	xor    ecx,ecx
c000b88b:	83 c4 0c             	add    esp,0xc
c000b88e:	89 c8                	mov    eax,ecx
c000b890:	5b                   	pop    ebx
c000b891:	5e                   	pop    esi
c000b892:	5f                   	pop    edi
c000b893:	5d                   	pop    ebp
c000b894:	c3                   	ret    
c000b895:	89 f3                	mov    ebx,esi
c000b897:	bd 01 00 00 00       	mov    ebp,0x1
c000b89c:	31 c9                	xor    ecx,ecx
c000b89e:	09 ea                	or     edx,ebp
c000b8a0:	89 c8                	mov    eax,ecx
c000b8a2:	89 13                	mov    DWORD PTR [ebx],edx
c000b8a4:	83 c4 0c             	add    esp,0xc
c000b8a7:	5b                   	pop    ebx
c000b8a8:	5e                   	pop    esi
c000b8a9:	5f                   	pop    edi
c000b8aa:	5d                   	pop    ebp
c000b8ab:	c3                   	ret    

c000b8ac <Virt::virtualMemorySetup()>:
c000b8ac:	53                   	push   ebx
c000b8ad:	bb 00 80 0c 00       	mov    ebx,0xc8000
c000b8b2:	6a 0f                	push   0xf
c000b8b4:	53                   	push   ebx
c000b8b5:	43                   	inc    ebx
c000b8b6:	e8 d9 fd ff ff       	call   c000b694 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000b8bb:	58                   	pop    eax
c000b8bc:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c000b8c2:	5a                   	pop    edx
c000b8c3:	75 ed                	jne    c000b8b2 <Virt::virtualMemorySetup()+0x6>
c000b8c5:	bb 00 80 0c 00       	mov    ebx,0xc8000
c000b8ca:	6a 00                	push   0x0
c000b8cc:	53                   	push   ebx
c000b8cd:	43                   	inc    ebx
c000b8ce:	e8 c1 fd ff ff       	call   c000b694 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000b8d3:	59                   	pop    ecx
c000b8d4:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c000b8da:	58                   	pop    eax
c000b8db:	75 ed                	jne    c000b8ca <Virt::virtualMemorySetup()+0x1e>
c000b8dd:	bb 00 00 0d 00       	mov    ebx,0xd0000
c000b8e2:	6a 0f                	push   0xf
c000b8e4:	53                   	push   ebx
c000b8e5:	43                   	inc    ebx
c000b8e6:	e8 a9 fd ff ff       	call   c000b694 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000b8eb:	58                   	pop    eax
c000b8ec:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c000b8f2:	5a                   	pop    edx
c000b8f3:	75 ed                	jne    c000b8e2 <Virt::virtualMemorySetup()+0x36>
c000b8f5:	5b                   	pop    ebx
c000b8f6:	c3                   	ret    

c000b8f7 <Virt::setupPageSwapping(int)>:
c000b8f7:	53                   	push   ebx
c000b8f8:	83 ec 0c             	sub    esp,0xc
c000b8fb:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000b8ff:	a1 28 6a 02 c0       	mov    eax,ds:0xc0026a28
c000b904:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000b90a:	8b 10                	mov    edx,DWORD PTR [eax]
c000b90c:	53                   	push   ebx
c000b90d:	c1 e3 0b             	shl    ebx,0xb
c000b910:	68 d7 2d 02 c0       	push   0xc0022dd7
c000b915:	50                   	push   eax
c000b916:	ff 52 5c             	call   DWORD PTR [edx+0x5c]
c000b919:	89 1d b0 58 02 c0    	mov    DWORD PTR ds:0xc00258b0,ebx
c000b91f:	c6 05 b8 58 02 c0 43 	mov    BYTE PTR ds:0xc00258b8,0x43
c000b926:	c1 eb 08             	shr    ebx,0x8
c000b929:	a3 b4 58 02 c0       	mov    ds:0xc00258b4,eax
c000b92e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b931:	c7 05 ac 58 02 c0 08 00 00 00 	mov    DWORD PTR ds:0xc00258ac,0x8
c000b93b:	e8 83 e0 ff ff       	call   c00099c3 <malloc>
c000b940:	83 c4 0c             	add    esp,0xc
c000b943:	89 c1                	mov    ecx,eax
c000b945:	a3 8c 65 02 c0       	mov    ds:0xc002658c,eax
c000b94a:	31 d2                	xor    edx,edx
c000b94c:	a1 b0 58 02 c0       	mov    eax,ds:0xc00258b0
c000b951:	f7 35 ac 58 02 c0    	div    DWORD PTR ds:0xc00258ac
c000b957:	c1 e8 05             	shr    eax,0x5
c000b95a:	50                   	push   eax
c000b95b:	6a 00                	push   0x0
c000b95d:	51                   	push   ecx
c000b95e:	e8 21 4d ff ff       	call   c0000684 <memset>
c000b963:	83 c4 18             	add    esp,0x18
c000b966:	5b                   	pop    ebx
c000b967:	c3                   	ret    

c000b968 <VAS::VAS()>:
c000b968:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b96c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000b973:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b977:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c000b97e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b982:	a3 90 65 02 c0       	mov    ds:0xc0026590,eax
c000b987:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b98b:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c000b98f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b993:	c6 00 01             	mov    BYTE PTR [eax],0x1
c000b996:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b99a:	c7 40 0c 00 10 00 c2 	mov    DWORD PTR [eax+0xc],0xc2001000
c000b9a1:	90                   	nop
c000b9a2:	c3                   	ret    
c000b9a3:	90                   	nop

c000b9a4 <VAS::VAS(VAS*)>:
c000b9a4:	83 ec 0c             	sub    esp,0xc
c000b9a7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b9ab:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000b9b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b9b6:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c000b9bd:	83 ec 0c             	sub    esp,0xc
c000b9c0:	68 28 2c 02 c0       	push   0xc0022c28
c000b9c5:	e8 b7 89 00 00       	call   c0014381 <Krnl::panic(char const*)>
c000b9ca:	83 c4 10             	add    esp,0x10
c000b9cd:	90                   	nop
c000b9ce:	83 c4 0c             	add    esp,0xc
c000b9d1:	c3                   	ret    

c000b9d2 <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c000b9d2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b9d6:	89 c2                	mov    edx,eax
c000b9d8:	c1 e8 0a             	shr    eax,0xa
c000b9db:	c1 ea 16             	shr    edx,0x16
c000b9de:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c000b9e3:	19 c9                	sbb    ecx,ecx
c000b9e5:	c1 e2 0c             	shl    edx,0xc
c000b9e8:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c000b9ee:	25 fc 0f 00 00       	and    eax,0xffc
c000b9f3:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c000b9fa:	01 d0                	add    eax,edx
c000b9fc:	c3                   	ret    
c000b9fd:	90                   	nop

c000b9fe <VAS::getPageTableEntry(unsigned long)>:
c000b9fe:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000ba02:	89 ca                	mov    edx,ecx
c000ba04:	c1 e9 0a             	shr    ecx,0xa
c000ba07:	c1 ea 16             	shr    edx,0x16
c000ba0a:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c000ba10:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c000ba16:	c1 e0 0c             	shl    eax,0xc
c000ba19:	8d 04 08             	lea    eax,[eax+ecx*1]
c000ba1c:	c3                   	ret    

c000ba1d <Virt::freeKernelVirtualPages(unsigned long)>:
c000ba1d:	57                   	push   edi
c000ba1e:	56                   	push   esi
c000ba1f:	be 01 00 00 00       	mov    esi,0x1
c000ba24:	53                   	push   ebx
c000ba25:	83 ec 10             	sub    esp,0x10
c000ba28:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000ba2c:	c1 eb 0c             	shr    ebx,0xc
c000ba2f:	eb 3f                	jmp    c000ba70 <Virt::freeKernelVirtualPages(unsigned long)+0x53>
c000ba31:	83 ec 08             	sub    esp,0x8
c000ba34:	57                   	push   edi
c000ba35:	ff 35 90 65 02 c0    	push   DWORD PTR ds:0xc0026590
c000ba3b:	e8 be ff ff ff       	call   c000b9fe <VAS::getPageTableEntry(unsigned long)>
c000ba40:	83 c4 10             	add    esp,0x10
c000ba43:	8b 00                	mov    eax,DWORD PTR [eax]
c000ba45:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c000ba49:	f6 c4 04             	test   ah,0x4
c000ba4c:	75 5f                	jne    c000baad <Virt::freeKernelVirtualPages(unsigned long)+0x90>
c000ba4e:	80 fa 04             	cmp    dl,0x4
c000ba51:	74 78                	je     c000bacb <Virt::freeKernelVirtualPages(unsigned long)+0xae>
c000ba53:	80 fa 02             	cmp    dl,0x2
c000ba56:	0f 84 88 00 00 00    	je     c000bae4 <Virt::freeKernelVirtualPages(unsigned long)+0xc7>
c000ba5c:	80 fa 03             	cmp    dl,0x3
c000ba5f:	0f 84 ad 00 00 00    	je     c000bb12 <Virt::freeKernelVirtualPages(unsigned long)+0xf5>
c000ba65:	fe ca                	dec    dl
c000ba67:	0f 84 92 00 00 00    	je     c000baff <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c000ba6d:	43                   	inc    ebx
c000ba6e:	31 f6                	xor    esi,esi
c000ba70:	53                   	push   ebx
c000ba71:	89 df                	mov    edi,ebx
c000ba73:	e8 51 fc ff ff       	call   c000b6c9 <Virt::getPageState(unsigned long)>
c000ba78:	c1 e7 0c             	shl    edi,0xc
c000ba7b:	59                   	pop    ecx
c000ba7c:	84 c0                	test   al,al
c000ba7e:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000ba82:	75 ad                	jne    c000ba31 <Virt::freeKernelVirtualPages(unsigned long)+0x14>
c000ba84:	83 ec 0c             	sub    esp,0xc
c000ba87:	68 ee 2d 02 c0       	push   0xc0022dee
c000ba8c:	e8 f0 88 00 00       	call   c0014381 <Krnl::panic(char const*)>
c000ba91:	58                   	pop    eax
c000ba92:	5a                   	pop    edx
c000ba93:	57                   	push   edi
c000ba94:	ff 35 90 65 02 c0    	push   DWORD PTR ds:0xc0026590
c000ba9a:	e8 5f ff ff ff       	call   c000b9fe <VAS::getPageTableEntry(unsigned long)>
c000ba9f:	83 c4 10             	add    esp,0x10
c000baa2:	8b 00                	mov    eax,DWORD PTR [eax]
c000baa4:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c000baa8:	f6 c4 04             	test   ah,0x4
c000baab:	74 c0                	je     c000ba6d <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c000baad:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c000bab1:	25 00 f0 ff ff       	and    eax,0xfffff000
c000bab6:	83 ec 0c             	sub    esp,0xc
c000bab9:	50                   	push   eax
c000baba:	e8 b7 e2 ff ff       	call   c0009d76 <Phys::freePage(unsigned long)>
c000babf:	83 c4 10             	add    esp,0x10
c000bac2:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c000bac6:	80 fa 04             	cmp    dl,0x4
c000bac9:	75 88                	jne    c000ba53 <Virt::freeKernelVirtualPages(unsigned long)+0x36>
c000bacb:	89 f0                	mov    eax,esi
c000bacd:	84 c0                	test   al,al
c000bacf:	75 47                	jne    c000bb18 <Virt::freeKernelVirtualPages(unsigned long)+0xfb>
c000bad1:	c7 44 24 20 4c 2c 02 c0 	mov    DWORD PTR [esp+0x20],0xc0022c4c
c000bad9:	83 c4 10             	add    esp,0x10
c000badc:	5b                   	pop    ebx
c000badd:	5e                   	pop    esi
c000bade:	5f                   	pop    edi
c000badf:	e9 9d 88 00 00       	jmp    c0014381 <Krnl::panic(char const*)>
c000bae4:	89 f0                	mov    eax,esi
c000bae6:	84 c0                	test   al,al
c000bae8:	75 15                	jne    c000baff <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c000baea:	83 ec 0c             	sub    esp,0xc
c000baed:	68 0a 2e 02 c0       	push   0xc0022e0a
c000baf2:	e8 8a 88 00 00       	call   c0014381 <Krnl::panic(char const*)>
c000baf7:	83 c4 10             	add    esp,0x10
c000bafa:	e9 6e ff ff ff       	jmp    c000ba6d <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c000baff:	83 ec 08             	sub    esp,0x8
c000bb02:	6a 00                	push   0x0
c000bb04:	53                   	push   ebx
c000bb05:	e8 8a fb ff ff       	call   c000b694 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000bb0a:	83 c4 10             	add    esp,0x10
c000bb0d:	e9 5b ff ff ff       	jmp    c000ba6d <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c000bb12:	89 f0                	mov    eax,esi
c000bb14:	84 c0                	test   al,al
c000bb16:	75 15                	jne    c000bb2d <Virt::freeKernelVirtualPages(unsigned long)+0x110>
c000bb18:	83 ec 08             	sub    esp,0x8
c000bb1b:	6a 00                	push   0x0
c000bb1d:	53                   	push   ebx
c000bb1e:	e8 71 fb ff ff       	call   c000b694 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000bb23:	83 c4 10             	add    esp,0x10
c000bb26:	83 c4 10             	add    esp,0x10
c000bb29:	5b                   	pop    ebx
c000bb2a:	5e                   	pop    esi
c000bb2b:	5f                   	pop    edi
c000bb2c:	c3                   	ret    
c000bb2d:	c7 44 24 20 26 2e 02 c0 	mov    DWORD PTR [esp+0x20],0xc0022e26
c000bb35:	83 c4 10             	add    esp,0x10
c000bb38:	5b                   	pop    ebx
c000bb39:	5e                   	pop    esi
c000bb3a:	5f                   	pop    edi
c000bb3b:	e9 41 88 00 00       	jmp    c0014381 <Krnl::panic(char const*)>

c000bb40 <VAS::freeAllocatedPages(unsigned long)>:
c000bb40:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000bb44:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000bb48:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c000bb4c:	74 09                	je     c000bb57 <VAS::freeAllocatedPages(unsigned long)+0x17>
c000bb4e:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000bb52:	e9 c6 fe ff ff       	jmp    c000ba1d <Virt::freeKernelVirtualPages(unsigned long)>
c000bb57:	c7 44 24 04 70 2c 02 c0 	mov    DWORD PTR [esp+0x4],0xc0022c70
c000bb5f:	e9 5b 0f 00 00       	jmp    c000cabf <Dbg::kprintf(char const*, ...)>

c000bb64 <VAS::virtualToPhysical(unsigned long)>:
c000bb64:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000bb68:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000bb6c:	e8 8d fe ff ff       	call   c000b9fe <VAS::getPageTableEntry(unsigned long)>
c000bb71:	5a                   	pop    edx
c000bb72:	8b 00                	mov    eax,DWORD PTR [eax]
c000bb74:	59                   	pop    ecx
c000bb75:	25 00 f0 ff ff       	and    eax,0xfffff000
c000bb7a:	c3                   	ret    
c000bb7b:	90                   	nop

c000bb7c <VAS::reflagRange(unsigned long, int, int, int)>:
c000bb7c:	55                   	push   ebp
c000bb7d:	57                   	push   edi
c000bb7e:	56                   	push   esi
c000bb7f:	53                   	push   ebx
c000bb80:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000bb84:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c000bb88:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000bb8c:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000bb90:	85 db                	test   ebx,ebx
c000bb92:	7e 22                	jle    c000bbb6 <VAS::reflagRange(unsigned long, int, int, int)+0x3a>
c000bb94:	c1 e3 0c             	shl    ebx,0xc
c000bb97:	01 f3                	add    ebx,esi
c000bb99:	56                   	push   esi
c000bb9a:	81 c6 00 10 00 00    	add    esi,0x1000
c000bba0:	55                   	push   ebp
c000bba1:	e8 58 fe ff ff       	call   c000b9fe <VAS::getPageTableEntry(unsigned long)>
c000bba6:	5a                   	pop    edx
c000bba7:	59                   	pop    ecx
c000bba8:	8b 08                	mov    ecx,DWORD PTR [eax]
c000bbaa:	21 f9                	and    ecx,edi
c000bbac:	0b 4c 24 24          	or     ecx,DWORD PTR [esp+0x24]
c000bbb0:	39 f3                	cmp    ebx,esi
c000bbb2:	89 08                	mov    DWORD PTR [eax],ecx
c000bbb4:	75 e3                	jne    c000bb99 <VAS::reflagRange(unsigned long, int, int, int)+0x1d>
c000bbb6:	5b                   	pop    ebx
c000bbb7:	5e                   	pop    esi
c000bbb8:	5f                   	pop    edi
c000bbb9:	5d                   	pop    ebp
c000bbba:	c3                   	ret    
c000bbbb:	90                   	nop

c000bbbc <VAS::setToWriteCombining(unsigned long, int)>:
c000bbbc:	a1 68 64 02 c0       	mov    eax,ds:0xc0026468
c000bbc1:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000bbc7:	f6 80 90 11 00 00 20 	test   BYTE PTR [eax+0x1190],0x20
c000bbce:	75 01                	jne    c000bbd1 <VAS::setToWriteCombining(unsigned long, int)+0x15>
c000bbd0:	c3                   	ret    
c000bbd1:	68 80 00 00 00       	push   0x80
c000bbd6:	6a ff                	push   0xffffffff
c000bbd8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bbdc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bbe0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bbe4:	e8 93 ff ff ff       	call   c000bb7c <VAS::reflagRange(unsigned long, int, int, int)>
c000bbe9:	83 c4 14             	add    esp,0x14
c000bbec:	c3                   	ret    
c000bbed:	90                   	nop

c000bbee <VAS::mapOtherVASIn(bool, VAS*)>:
c000bbee:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c000bbf3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000bbf7:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000bbfa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000bbfe:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c000bc01:	19 c0                	sbb    eax,eax
c000bc03:	83 ca 03             	or     edx,0x3
c000bc06:	83 e0 fc             	and    eax,0xfffffffc
c000bc09:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c000bc10:	0f 20 d8             	mov    eax,cr3
c000bc13:	0f 22 d8             	mov    cr3,eax
c000bc16:	c3                   	ret    
c000bc17:	90                   	nop

c000bc18 <VAS::~VAS()>:
c000bc18:	83 ec 2c             	sub    esp,0x2c
c000bc1b:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000bc23:	fa                   	cli    
c000bc24:	a1 28 79 02 c0       	mov    eax,ds:0xc0027928
c000bc29:	40                   	inc    eax
c000bc2a:	a3 28 79 02 c0       	mov    ds:0xc0027928,eax
c000bc2f:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000bc34:	8b 00                	mov    eax,DWORD PTR [eax]
c000bc36:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000bc39:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c000bc3f:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000bc43:	6a 01                	push   0x1
c000bc45:	50                   	push   eax
c000bc46:	e8 a3 ff ff ff       	call   c000bbee <VAS::mapOtherVASIn(bool, VAS*)>
c000bc4b:	83 c4 0c             	add    esp,0xc
c000bc4e:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000bc56:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c000bc5e:	0f 8f d4 00 00 00    	jg     c000bd38 <VAS::~VAS()+0x120>
c000bc64:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000bc68:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000bc6b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000bc6f:	c1 e2 02             	shl    edx,0x2
c000bc72:	01 d0                	add    eax,edx
c000bc74:	8b 00                	mov    eax,DWORD PTR [eax]
c000bc76:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000bc7a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bc7e:	83 e0 01             	and    eax,0x1
c000bc81:	0f 84 a8 00 00 00    	je     c000bd2f <VAS::~VAS()+0x117>
c000bc87:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000bc8f:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c000bc97:	7f 72                	jg     c000bd0b <VAS::~VAS()+0xf3>
c000bc99:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000bc9d:	c1 e0 0a             	shl    eax,0xa
c000bca0:	89 c2                	mov    edx,eax
c000bca2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000bca6:	01 d0                	add    eax,edx
c000bca8:	c1 e0 0c             	shl    eax,0xc
c000bcab:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000bcaf:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000bcb4:	8b 00                	mov    eax,DWORD PTR [eax]
c000bcb6:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000bcb9:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c000bcbf:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bcc3:	6a 01                	push   0x1
c000bcc5:	50                   	push   eax
c000bcc6:	e8 07 fd ff ff       	call   c000b9d2 <VAS::getForeignPageTableEntry(bool, unsigned long)>
c000bccb:	83 c4 0c             	add    esp,0xc
c000bcce:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bcd2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000bcd6:	8b 00                	mov    eax,DWORD PTR [eax]
c000bcd8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000bcdc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000bce0:	25 01 04 00 00       	and    eax,0x401
c000bce5:	3d 01 04 00 00       	cmp    eax,0x401
c000bcea:	75 19                	jne    c000bd05 <VAS::~VAS()+0xed>
c000bcec:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000bcf0:	25 00 f0 ff ff       	and    eax,0xfffff000
c000bcf5:	83 ec 0c             	sub    esp,0xc
c000bcf8:	50                   	push   eax
c000bcf9:	e8 78 e0 ff ff       	call   c0009d76 <Phys::freePage(unsigned long)>
c000bcfe:	83 c4 10             	add    esp,0x10
c000bd01:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000bd05:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c000bd09:	eb 84                	jmp    c000bc8f <VAS::~VAS()+0x77>
c000bd0b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bd0f:	25 00 04 00 00       	and    eax,0x400
c000bd14:	74 19                	je     c000bd2f <VAS::~VAS()+0x117>
c000bd16:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bd1a:	25 00 f0 ff ff       	and    eax,0xfffff000
c000bd1f:	83 ec 0c             	sub    esp,0xc
c000bd22:	50                   	push   eax
c000bd23:	e8 4e e0 ff ff       	call   c0009d76 <Phys::freePage(unsigned long)>
c000bd28:	83 c4 10             	add    esp,0x10
c000bd2b:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000bd2f:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c000bd33:	e9 1e ff ff ff       	jmp    c000bc56 <VAS::~VAS()+0x3e>
c000bd38:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000bd3c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000bd3f:	83 ec 0c             	sub    esp,0xc
c000bd42:	50                   	push   eax
c000bd43:	e8 d5 fc ff ff       	call   c000ba1d <Virt::freeKernelVirtualPages(unsigned long)>
c000bd48:	83 c4 10             	add    esp,0x10
c000bd4b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000bd4f:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000bd52:	83 ec 0c             	sub    esp,0xc
c000bd55:	50                   	push   eax
c000bd56:	e8 1b e0 ff ff       	call   c0009d76 <Phys::freePage(unsigned long)>
c000bd5b:	83 c4 10             	add    esp,0x10
c000bd5e:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000bd62:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000bd66:	c1 e0 02             	shl    eax,0x2
c000bd69:	83 ec 08             	sub    esp,0x8
c000bd6c:	50                   	push   eax
c000bd6d:	68 94 2c 02 c0       	push   0xc0022c94
c000bd72:	e8 48 0d 00 00       	call   c000cabf <Dbg::kprintf(char const*, ...)>
c000bd77:	83 c4 10             	add    esp,0x10
c000bd7a:	a1 28 79 02 c0       	mov    eax,ds:0xc0027928
c000bd7f:	48                   	dec    eax
c000bd80:	a3 28 79 02 c0       	mov    ds:0xc0027928,eax
c000bd85:	a1 28 79 02 c0       	mov    eax,ds:0xc0027928
c000bd8a:	85 c0                	test   eax,eax
c000bd8c:	75 01                	jne    c000bd8f <VAS::~VAS()+0x177>
c000bd8e:	fb                   	sti    
c000bd8f:	90                   	nop
c000bd90:	83 c4 2c             	add    esp,0x2c
c000bd93:	c3                   	ret    

c000bd94 <VAS::mapPage(unsigned long, unsigned long, int)>:
c000bd94:	55                   	push   ebp
c000bd95:	57                   	push   edi
c000bd96:	56                   	push   esi
c000bd97:	53                   	push   ebx
c000bd98:	83 ec 1c             	sub    esp,0x1c
c000bd9b:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000bd9f:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c000bda3:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c000bda9:	77 08                	ja     c000bdb3 <VAS::mapPage(unsigned long, unsigned long, int)+0x1f>
c000bdab:	0f 20 d8             	mov    eax,cr3
c000bdae:	39 47 10             	cmp    DWORD PTR [edi+0x10],eax
c000bdb1:	75 47                	jne    c000bdfa <VAS::mapPage(unsigned long, unsigned long, int)+0x66>
c000bdb3:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000bdb7:	09 d8                	or     eax,ebx
c000bdb9:	a9 ff 0f 00 00       	test   eax,0xfff
c000bdbe:	75 57                	jne    c000be17 <VAS::mapPage(unsigned long, unsigned long, int)+0x83>
c000bdc0:	89 de                	mov    esi,ebx
c000bdc2:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000bdc5:	c1 ee 16             	shr    esi,0x16
c000bdc8:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c000bdcf:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c000bdd3:	74 54                	je     c000be29 <VAS::mapPage(unsigned long, unsigned long, int)+0x95>
c000bdd5:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000bdd9:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c000bddf:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c000bde3:	c1 e6 0c             	shl    esi,0xc
c000bde6:	c1 eb 0a             	shr    ebx,0xa
c000bde9:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c000bdef:	89 04 33             	mov    DWORD PTR [ebx+esi*1],eax
c000bdf2:	83 c4 1c             	add    esp,0x1c
c000bdf5:	5b                   	pop    ebx
c000bdf6:	5e                   	pop    esi
c000bdf7:	5f                   	pop    edi
c000bdf8:	5d                   	pop    ebp
c000bdf9:	c3                   	ret    
c000bdfa:	83 ec 0c             	sub    esp,0xc
c000bdfd:	68 b4 2c 02 c0       	push   0xc0022cb4
c000be02:	e8 b8 0c 00 00       	call   c000cabf <Dbg::kprintf(char const*, ...)>
c000be07:	83 c4 10             	add    esp,0x10
c000be0a:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000be0e:	09 d8                	or     eax,ebx
c000be10:	a9 ff 0f 00 00       	test   eax,0xfff
c000be15:	74 a9                	je     c000bdc0 <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c000be17:	83 ec 0c             	sub    esp,0xc
c000be1a:	68 1c 2d 02 c0       	push   0xc0022d1c
c000be1f:	e8 5d 85 00 00       	call   c0014381 <Krnl::panic(char const*)>
c000be24:	83 c4 10             	add    esp,0x10
c000be27:	eb 97                	jmp    c000bdc0 <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c000be29:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000be2d:	e8 c7 df ff ff       	call   c0009df9 <Phys::allocatePage()>
c000be32:	83 ec 0c             	sub    esp,0xc
c000be35:	89 c5                	mov    ebp,eax
c000be37:	8b 0d 90 65 02 c0    	mov    ecx,DWORD PTR ds:0xc0026590
c000be3d:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000be41:	6a 01                	push   0x1
c000be43:	e8 a5 f8 ff ff       	call   c000b6ed <Virt::allocateKernelVirtualPages(int)>
c000be48:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c000be4f:	6a 01                	push   0x1
c000be51:	50                   	push   eax
c000be52:	55                   	push   ebp
c000be53:	81 cd 07 04 00 00    	or     ebp,0x407
c000be59:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c000be5d:	51                   	push   ecx
c000be5e:	e8 27 02 00 00       	call   c000c08a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000be63:	83 c4 1c             	add    esp,0x1c
c000be66:	68 00 10 00 00       	push   0x1000
c000be6b:	6a 00                	push   0x0
c000be6d:	50                   	push   eax
c000be6e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000be72:	e8 0d 48 ff ff       	call   c0000684 <memset>
c000be77:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000be7b:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000be7e:	e8 9a fb ff ff       	call   c000ba1d <Virt::freeKernelVirtualPages(unsigned long)>
c000be83:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000be87:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000be8a:	83 c4 10             	add    esp,0x10
c000be8d:	89 2c 10             	mov    DWORD PTR [eax+edx*1],ebp
c000be90:	e9 40 ff ff ff       	jmp    c000bdd5 <VAS::mapPage(unsigned long, unsigned long, int)+0x41>
c000be95:	90                   	nop

c000be96 <VAS::allocatePages(int, int)>:
c000be96:	55                   	push   ebp
c000be97:	57                   	push   edi
c000be98:	56                   	push   esi
c000be99:	53                   	push   ebx
c000be9a:	83 ec 1c             	sub    esp,0x1c
c000be9d:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c000bea1:	a1 68 64 02 c0       	mov    eax,ds:0xc0026468
c000bea6:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000beac:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c000beb2:	83 e0 01             	and    eax,0x1
c000beb5:	80 7f 01 00          	cmp    BYTE PTR [edi+0x1],0x0
c000beb9:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000bebd:	0f 85 cc 00 00 00    	jne    c000bf8f <VAS::allocatePages(int, int)+0xf9>
c000bec3:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c000bec6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000beca:	85 c0                	test   eax,eax
c000becc:	0f 84 a1 00 00 00    	je     c000bf73 <VAS::allocatePages(int, int)+0xdd>
c000bed2:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c000bed6:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000beda:	c1 e6 0c             	shl    esi,0xc
c000bedd:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c000bee1:	85 c0                	test   eax,eax
c000bee3:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c000bee6:	7e 33                	jle    c000bf1b <VAS::allocatePages(int, int)+0x85>
c000bee8:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000beec:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000bef0:	81 cd 00 04 00 00    	or     ebp,0x400
c000bef6:	e8 fe de ff ff       	call   c0009df9 <Phys::allocatePage()>
c000befb:	55                   	push   ebp
c000befc:	53                   	push   ebx
c000befd:	50                   	push   eax
c000befe:	57                   	push   edi
c000beff:	e8 90 fe ff ff       	call   c000bd94 <VAS::mapPage(unsigned long, unsigned long, int)>
c000bf04:	83 c4 10             	add    esp,0x10
c000bf07:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000bf0c:	74 03                	je     c000bf11 <VAS::allocatePages(int, int)+0x7b>
c000bf0e:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000bf11:	81 c3 00 10 00 00    	add    ebx,0x1000
c000bf17:	39 de                	cmp    esi,ebx
c000bf19:	75 db                	jne    c000bef6 <VAS::allocatePages(int, int)+0x60>
c000bf1b:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000bf20:	75 12                	jne    c000bf34 <VAS::allocatePages(int, int)+0x9e>
c000bf22:	0f 20 d8             	mov    eax,cr3
c000bf25:	0f 22 d8             	mov    cr3,eax
c000bf28:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000bf2c:	83 c4 1c             	add    esp,0x1c
c000bf2f:	5b                   	pop    ebx
c000bf30:	5e                   	pop    esi
c000bf31:	5f                   	pop    edi
c000bf32:	5d                   	pop    ebp
c000bf33:	c3                   	ret    
c000bf34:	c1 ee 0a             	shr    esi,0xa
c000bf37:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000bf3b:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c000bf41:	c1 eb 0a             	shr    ebx,0xa
c000bf44:	8d 86 00 00 c0 ff    	lea    eax,[esi-0x400000]
c000bf4a:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000bf50:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000bf56:	39 c3                	cmp    ebx,eax
c000bf58:	77 ce                	ja     c000bf28 <VAS::allocatePages(int, int)+0x92>
c000bf5a:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000bf5d:	81 c3 00 10 00 00    	add    ebx,0x1000
c000bf63:	39 d8                	cmp    eax,ebx
c000bf65:	73 f3                	jae    c000bf5a <VAS::allocatePages(int, int)+0xc4>
c000bf67:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000bf6b:	83 c4 1c             	add    esp,0x1c
c000bf6e:	5b                   	pop    ebx
c000bf6f:	5e                   	pop    esi
c000bf70:	5f                   	pop    edi
c000bf71:	5d                   	pop    ebp
c000bf72:	c3                   	ret    
c000bf73:	83 ec 0c             	sub    esp,0xc
c000bf76:	68 40 2d 02 c0       	push   0xc0022d40
c000bf7b:	e8 01 84 00 00       	call   c0014381 <Krnl::panic(char const*)>
c000bf80:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c000bf83:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000bf87:	83 c4 10             	add    esp,0x10
c000bf8a:	e9 43 ff ff ff       	jmp    c000bed2 <VAS::allocatePages(int, int)+0x3c>
c000bf8f:	83 ec 0c             	sub    esp,0xc
c000bf92:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000bf96:	e8 52 f7 ff ff       	call   c000b6ed <Virt::allocateKernelVirtualPages(int)>
c000bf9b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000bf9f:	83 c4 10             	add    esp,0x10
c000bfa2:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c000bfa7:	0f 87 9b 00 00 00    	ja     c000c048 <VAS::allocatePages(int, int)+0x1b2>
c000bfad:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000bfb1:	85 d2                	test   edx,edx
c000bfb3:	7e 3c                	jle    c000bff1 <VAS::allocatePages(int, int)+0x15b>
c000bfb5:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000bfb9:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000bfbd:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000bfc1:	c1 e5 0c             	shl    ebp,0xc
c000bfc4:	81 ce 00 04 00 00    	or     esi,0x400
c000bfca:	01 dd                	add    ebp,ebx
c000bfcc:	e8 28 de ff ff       	call   c0009df9 <Phys::allocatePage()>
c000bfd1:	56                   	push   esi
c000bfd2:	53                   	push   ebx
c000bfd3:	50                   	push   eax
c000bfd4:	57                   	push   edi
c000bfd5:	e8 ba fd ff ff       	call   c000bd94 <VAS::mapPage(unsigned long, unsigned long, int)>
c000bfda:	83 c4 10             	add    esp,0x10
c000bfdd:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000bfe2:	74 03                	je     c000bfe7 <VAS::allocatePages(int, int)+0x151>
c000bfe4:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000bfe7:	81 c3 00 10 00 00    	add    ebx,0x1000
c000bfed:	39 dd                	cmp    ebp,ebx
c000bfef:	75 db                	jne    c000bfcc <VAS::allocatePages(int, int)+0x136>
c000bff1:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000bff6:	0f 84 26 ff ff ff    	je     c000bf22 <VAS::allocatePages(int, int)+0x8c>
c000bffc:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c000:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000c004:	89 d3                	mov    ebx,edx
c000c006:	c1 e0 0c             	shl    eax,0xc
c000c009:	c1 eb 0a             	shr    ebx,0xa
c000c00c:	01 d0                	add    eax,edx
c000c00e:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000c014:	c1 e8 0a             	shr    eax,0xa
c000c017:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000c01d:	25 00 f0 ff ff       	and    eax,0xfffff000
c000c022:	2d 00 00 40 00       	sub    eax,0x400000
c000c027:	39 c3                	cmp    ebx,eax
c000c029:	0f 87 f9 fe ff ff    	ja     c000bf28 <VAS::allocatePages(int, int)+0x92>
c000c02f:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000c032:	81 c3 00 10 00 00    	add    ebx,0x1000
c000c038:	39 d8                	cmp    eax,ebx
c000c03a:	73 f3                	jae    c000c02f <VAS::allocatePages(int, int)+0x199>
c000c03c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c040:	83 c4 1c             	add    esp,0x1c
c000c043:	5b                   	pop    ebx
c000c044:	5e                   	pop    esi
c000c045:	5f                   	pop    edi
c000c046:	5d                   	pop    ebp
c000c047:	c3                   	ret    
c000c048:	a1 68 64 02 c0       	mov    eax,ds:0xc0026468
c000c04d:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c053:	f6 80 90 11 00 00 10 	test   BYTE PTR [eax+0x1190],0x10
c000c05a:	0f 84 4d ff ff ff    	je     c000bfad <VAS::allocatePages(int, int)+0x117>
c000c060:	81 4c 24 38 00 01 00 00 	or     DWORD PTR [esp+0x38],0x100
c000c068:	e9 40 ff ff ff       	jmp    c000bfad <VAS::allocatePages(int, int)+0x117>
c000c06d:	90                   	nop

c000c06e <VAS::setCPUSpecific(unsigned long)>:
c000c06e:	83 ec 0c             	sub    esp,0xc
c000c071:	6a 05                	push   0x5
c000c073:	68 00 00 40 c2       	push   0xc2400000
c000c078:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c07c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c080:	e8 0f fd ff ff       	call   c000bd94 <VAS::mapPage(unsigned long, unsigned long, int)>
c000c085:	83 c4 1c             	add    esp,0x1c
c000c088:	c3                   	ret    
c000c089:	90                   	nop

c000c08a <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c000c08a:	55                   	push   ebp
c000c08b:	57                   	push   edi
c000c08c:	56                   	push   esi
c000c08d:	53                   	push   ebx
c000c08e:	83 ec 1c             	sub    esp,0x1c
c000c091:	a1 68 64 02 c0       	mov    eax,ds:0xc0026468
c000c096:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c000c09a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c0a0:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000c0a4:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c000c0aa:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c000c0ae:	83 e0 01             	and    eax,0x1
c000c0b1:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000c0b5:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000c0b9:	85 c0                	test   eax,eax
c000c0bb:	7e 39                	jle    c000c0f6 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x6c>
c000c0bd:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000c0c1:	89 f3                	mov    ebx,esi
c000c0c3:	c1 e0 0c             	shl    eax,0xc
c000c0c6:	01 f0                	add    eax,esi
c000c0c8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000c0cc:	55                   	push   ebp
c000c0cd:	53                   	push   ebx
c000c0ce:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000c0d2:	29 f0                	sub    eax,esi
c000c0d4:	01 d8                	add    eax,ebx
c000c0d6:	50                   	push   eax
c000c0d7:	57                   	push   edi
c000c0d8:	e8 b7 fc ff ff       	call   c000bd94 <VAS::mapPage(unsigned long, unsigned long, int)>
c000c0dd:	83 c4 10             	add    esp,0x10
c000c0e0:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000c0e5:	74 03                	je     c000c0ea <VAS::mapRange(unsigned long, unsigned long, int, int)+0x60>
c000c0e7:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000c0ea:	81 c3 00 10 00 00    	add    ebx,0x1000
c000c0f0:	39 5c 24 0c          	cmp    DWORD PTR [esp+0xc],ebx
c000c0f4:	75 d6                	jne    c000c0cc <VAS::mapRange(unsigned long, unsigned long, int, int)+0x42>
c000c0f6:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000c0fb:	75 10                	jne    c000c10d <VAS::mapRange(unsigned long, unsigned long, int, int)+0x83>
c000c0fd:	0f 20 d8             	mov    eax,cr3
c000c100:	0f 22 d8             	mov    cr3,eax
c000c103:	83 c4 1c             	add    esp,0x1c
c000c106:	89 f0                	mov    eax,esi
c000c108:	5b                   	pop    ebx
c000c109:	5e                   	pop    esi
c000c10a:	5f                   	pop    edi
c000c10b:	5d                   	pop    ebp
c000c10c:	c3                   	ret    
c000c10d:	89 f3                	mov    ebx,esi
c000c10f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000c113:	c1 eb 0a             	shr    ebx,0xa
c000c116:	c1 e0 0c             	shl    eax,0xc
c000c119:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000c11f:	01 f0                	add    eax,esi
c000c121:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000c127:	c1 e8 0a             	shr    eax,0xa
c000c12a:	25 00 f0 ff ff       	and    eax,0xfffff000
c000c12f:	2d 00 00 40 00       	sub    eax,0x400000
c000c134:	39 c3                	cmp    ebx,eax
c000c136:	77 cb                	ja     c000c103 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x79>
c000c138:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000c13b:	81 c3 00 10 00 00    	add    ebx,0x1000
c000c141:	39 d8                	cmp    eax,ebx
c000c143:	73 f3                	jae    c000c138 <VAS::mapRange(unsigned long, unsigned long, int, int)+0xae>
c000c145:	83 c4 1c             	add    esp,0x1c
c000c148:	89 f0                	mov    eax,esi
c000c14a:	5b                   	pop    ebx
c000c14b:	5e                   	pop    esi
c000c14c:	5f                   	pop    edi
c000c14d:	5d                   	pop    ebp
c000c14e:	c3                   	ret    
c000c14f:	90                   	nop

c000c150 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c000c150:	55                   	push   ebp
c000c151:	57                   	push   edi
c000c152:	56                   	push   esi
c000c153:	53                   	push   ebx
c000c154:	83 ec 1c             	sub    esp,0x1c
c000c157:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c15b:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000c15f:	0b 44 24 3c          	or     eax,DWORD PTR [esp+0x3c]
c000c163:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c000c167:	a9 ff 0f 00 00       	test   eax,0xfff
c000c16c:	75 4a                	jne    c000c1b8 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x68>
c000c16e:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000c172:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000c175:	c1 eb 16             	shr    ebx,0x16
c000c178:	8d 34 9d 00 00 00 00 	lea    esi,[ebx*4+0x0]
c000c17f:	f6 04 30 01          	test   BYTE PTR [eax+esi*1],0x1
c000c183:	74 4d                	je     c000c1d2 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x82>
c000c185:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c189:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c000c18d:	c1 e8 0a             	shr    eax,0xa
c000c190:	80 fa 01             	cmp    dl,0x1
c000c193:	19 d2                	sbb    edx,edx
c000c195:	c1 e3 0c             	shl    ebx,0xc
c000c198:	0b 4c 24 3c          	or     ecx,DWORD PTR [esp+0x3c]
c000c19c:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
c000c1a2:	25 fc 0f 00 00       	and    eax,0xffc
c000c1a7:	01 d8                	add    eax,ebx
c000c1a9:	89 8c 02 00 00 c0 c2 	mov    DWORD PTR [edx+eax*1-0x3d400000],ecx
c000c1b0:	83 c4 1c             	add    esp,0x1c
c000c1b3:	5b                   	pop    ebx
c000c1b4:	5e                   	pop    esi
c000c1b5:	5f                   	pop    edi
c000c1b6:	5d                   	pop    ebp
c000c1b7:	c3                   	ret    
c000c1b8:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000c1bc:	83 ec 0c             	sub    esp,0xc
c000c1bf:	68 6c 2d 02 c0       	push   0xc0022d6c
c000c1c4:	e8 b8 81 00 00       	call   c0014381 <Krnl::panic(char const*)>
c000c1c9:	83 c4 10             	add    esp,0x10
c000c1cc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000c1d0:	eb 9c                	jmp    c000c16e <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x1e>
c000c1d2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c1d6:	e8 1e dc ff ff       	call   c0009df9 <Phys::allocatePage()>
c000c1db:	83 ec 0c             	sub    esp,0xc
c000c1de:	89 c5                	mov    ebp,eax
c000c1e0:	8b 0d 90 65 02 c0    	mov    ecx,DWORD PTR ds:0xc0026590
c000c1e6:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000c1ea:	6a 01                	push   0x1
c000c1ec:	e8 fc f4 ff ff       	call   c000b6ed <Virt::allocateKernelVirtualPages(int)>
c000c1f1:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c000c1f8:	6a 01                	push   0x1
c000c1fa:	50                   	push   eax
c000c1fb:	55                   	push   ebp
c000c1fc:	81 cd 07 04 00 00    	or     ebp,0x407
c000c202:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c000c206:	51                   	push   ecx
c000c207:	e8 7e fe ff ff       	call   c000c08a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000c20c:	83 c4 1c             	add    esp,0x1c
c000c20f:	68 00 10 00 00       	push   0x1000
c000c214:	6a 00                	push   0x0
c000c216:	50                   	push   eax
c000c217:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c21b:	e8 64 44 ff ff       	call   c0000684 <memset>
c000c220:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000c224:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000c227:	e8 f1 f7 ff ff       	call   c000ba1d <Virt::freeKernelVirtualPages(unsigned long)>
c000c22c:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000c22f:	83 c4 10             	add    esp,0x10
c000c232:	89 2c 30             	mov    DWORD PTR [eax+esi*1],ebp
c000c235:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c239:	e9 47 ff ff ff       	jmp    c000c185 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x35>

c000c23e <VAS::VAS(bool)>:
c000c23e:	53                   	push   ebx
c000c23f:	83 ec 28             	sub    esp,0x28
c000c242:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000c246:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c000c24a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c24e:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000c255:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c259:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c000c260:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c264:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c000c268:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c000c26b:	e8 89 db ff ff       	call   c0009df9 <Phys::allocatePage()>
c000c270:	89 c2                	mov    edx,eax
c000c272:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c276:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000c279:	8b 1d 90 65 02 c0    	mov    ebx,DWORD PTR ds:0xc0026590
c000c27f:	83 ec 0c             	sub    esp,0xc
c000c282:	6a 01                	push   0x1
c000c284:	e8 64 f4 ff ff       	call   c000b6ed <Virt::allocateKernelVirtualPages(int)>
c000c289:	83 c4 10             	add    esp,0x10
c000c28c:	89 c2                	mov    edx,eax
c000c28e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c292:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000c295:	83 ec 0c             	sub    esp,0xc
c000c298:	6a 03                	push   0x3
c000c29a:	6a 01                	push   0x1
c000c29c:	52                   	push   edx
c000c29d:	50                   	push   eax
c000c29e:	53                   	push   ebx
c000c29f:	e8 e6 fd ff ff       	call   c000c08a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000c2a4:	83 c4 20             	add    esp,0x20
c000c2a7:	89 c2                	mov    edx,eax
c000c2a9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c2ad:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000c2b0:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000c2b8:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c000c2c0:	7f 1c                	jg     c000c2de <VAS::VAS(bool)+0xa0>
c000c2c2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c2c6:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000c2c9:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000c2cd:	c1 e2 02             	shl    edx,0x2
c000c2d0:	01 d0                	add    eax,edx
c000c2d2:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c000c2d8:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000c2dc:	eb da                	jmp    c000c2b8 <VAS::VAS(bool)+0x7a>
c000c2de:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c000c2e6:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c000c2ee:	7f 7a                	jg     c000c36a <VAS::VAS(bool)+0x12c>
c000c2f0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c2f4:	2d 00 02 00 00       	sub    eax,0x200
c000c2f9:	c1 e0 0c             	shl    eax,0xc
c000c2fc:	83 c8 03             	or     eax,0x3
c000c2ff:	89 c2                	mov    edx,eax
c000c301:	a1 68 64 02 c0       	mov    eax,ds:0xc0026468
c000c306:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c30c:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c000c312:	83 e0 10             	and    eax,0x10
c000c315:	84 c0                	test   al,al
c000c317:	74 07                	je     c000c320 <VAS::VAS(bool)+0xe2>
c000c319:	b8 00 01 00 00       	mov    eax,0x100
c000c31e:	eb 05                	jmp    c000c325 <VAS::VAS(bool)+0xe7>
c000c320:	b8 00 00 00 00       	mov    eax,0x0
c000c325:	09 d0                	or     eax,edx
c000c327:	89 c1                	mov    ecx,eax
c000c329:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c32d:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000c330:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000c334:	c1 e2 02             	shl    edx,0x2
c000c337:	01 d0                	add    eax,edx
c000c339:	89 ca                	mov    edx,ecx
c000c33b:	89 10                	mov    DWORD PTR [eax],edx
c000c33d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c341:	2d 40 03 00 00       	sub    eax,0x340
c000c346:	83 f8 7f             	cmp    eax,0x7f
c000c349:	77 16                	ja     c000c361 <VAS::VAS(bool)+0x123>
c000c34b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c34f:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000c352:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000c356:	c1 e2 02             	shl    edx,0x2
c000c359:	01 d0                	add    eax,edx
c000c35b:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c000c361:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c000c365:	e9 7c ff ff ff       	jmp    c000c2e6 <VAS::VAS(bool)+0xa8>
c000c36a:	a1 68 64 02 c0       	mov    eax,ds:0xc0026468
c000c36f:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c375:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c000c37b:	83 e0 10             	and    eax,0x10
c000c37e:	84 c0                	test   al,al
c000c380:	74 07                	je     c000c389 <VAS::VAS(bool)+0x14b>
c000c382:	b8 03 41 00 00       	mov    eax,0x4103
c000c387:	eb 05                	jmp    c000c38e <VAS::VAS(bool)+0x150>
c000c389:	b8 03 40 00 00       	mov    eax,0x4003
c000c38e:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000c392:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c000c395:	81 c2 20 0c 00 00    	add    edx,0xc20
c000c39b:	89 02                	mov    DWORD PTR [edx],eax
c000c39d:	a1 68 64 02 c0       	mov    eax,ds:0xc0026468
c000c3a2:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c3a8:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c000c3ae:	83 ec 08             	sub    esp,0x8
c000c3b1:	50                   	push   eax
c000c3b2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c3b6:	e8 b3 fc ff ff       	call   c000c06e <VAS::setCPUSpecific(unsigned long)>
c000c3bb:	83 c4 10             	add    esp,0x10
c000c3be:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c3c2:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000c3c5:	a1 68 64 02 c0       	mov    eax,ds:0xc0026468
c000c3ca:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c3d0:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c000c3d6:	83 e0 10             	and    eax,0x10
c000c3d9:	84 c0                	test   al,al
c000c3db:	74 07                	je     c000c3e4 <VAS::VAS(bool)+0x1a6>
c000c3dd:	b8 00 01 00 00       	mov    eax,0x100
c000c3e2:	eb 05                	jmp    c000c3e9 <VAS::VAS(bool)+0x1ab>
c000c3e4:	b8 00 00 00 00       	mov    eax,0x0
c000c3e9:	09 c2                	or     edx,eax
c000c3eb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c3ef:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000c3f2:	05 fc 0f 00 00       	add    eax,0xffc
c000c3f7:	83 ca 03             	or     edx,0x3
c000c3fa:	89 10                	mov    DWORD PTR [eax],edx
c000c3fc:	a1 68 64 02 c0       	mov    eax,ds:0xc0026468
c000c401:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c407:	83 ec 0c             	sub    esp,0xc
c000c40a:	50                   	push   eax
c000c40b:	e8 f6 1d 00 00       	call   c000e206 <Device::getName()>
c000c410:	83 c4 10             	add    esp,0x10
c000c413:	83 ec 08             	sub    esp,0x8
c000c416:	68 40 2e 02 c0       	push   0xc0022e40
c000c41b:	50                   	push   eax
c000c41c:	e8 ab 43 ff ff       	call   c00007cc <strcmp>
c000c421:	83 c4 10             	add    esp,0x10
c000c424:	85 c0                	test   eax,eax
c000c426:	0f 94 c0             	sete   al
c000c429:	84 c0                	test   al,al
c000c42b:	0f 84 87 00 00 00    	je     c000c4b8 <VAS::VAS(bool)+0x27a>
c000c431:	fa                   	cli    
c000c432:	a1 28 79 02 c0       	mov    eax,ds:0xc0027928
c000c437:	40                   	inc    eax
c000c438:	a3 28 79 02 c0       	mov    ds:0xc0027928,eax
c000c43d:	a1 68 64 02 c0       	mov    eax,ds:0xc0026468
c000c442:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c448:	05 7c 09 00 00       	add    eax,0x97c
c000c44d:	83 ec 0c             	sub    esp,0xc
c000c450:	50                   	push   eax
c000c451:	e8 5c d0 ff ff       	call   c00094b2 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000c456:	83 c4 10             	add    esp,0x10
c000c459:	25 00 f0 ff ff       	and    eax,0xfffff000
c000c45e:	89 c3                	mov    ebx,eax
c000c460:	a1 68 64 02 c0       	mov    eax,ds:0xc0026468
c000c465:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000c46b:	05 7c 09 00 00       	add    eax,0x97c
c000c470:	83 ec 0c             	sub    esp,0xc
c000c473:	50                   	push   eax
c000c474:	e8 39 d0 ff ff       	call   c00094b2 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000c479:	83 c4 10             	add    esp,0x10
c000c47c:	83 ec 08             	sub    esp,0x8
c000c47f:	50                   	push   eax
c000c480:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c484:	e8 75 f5 ff ff       	call   c000b9fe <VAS::getPageTableEntry(unsigned long)>
c000c489:	83 c4 10             	add    esp,0x10
c000c48c:	8b 00                	mov    eax,DWORD PTR [eax]
c000c48e:	25 00 f0 ff ff       	and    eax,0xfffff000
c000c493:	6a 11                	push   0x11
c000c495:	53                   	push   ebx
c000c496:	50                   	push   eax
c000c497:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c49b:	e8 f4 f8 ff ff       	call   c000bd94 <VAS::mapPage(unsigned long, unsigned long, int)>
c000c4a0:	83 c4 10             	add    esp,0x10
c000c4a3:	a1 28 79 02 c0       	mov    eax,ds:0xc0027928
c000c4a8:	48                   	dec    eax
c000c4a9:	a3 28 79 02 c0       	mov    ds:0xc0027928,eax
c000c4ae:	a1 28 79 02 c0       	mov    eax,ds:0xc0027928
c000c4b3:	85 c0                	test   eax,eax
c000c4b5:	75 01                	jne    c000c4b8 <VAS::VAS(bool)+0x27a>
c000c4b7:	fb                   	sti    
c000c4b8:	90                   	nop
c000c4b9:	83 c4 28             	add    esp,0x28
c000c4bc:	5b                   	pop    ebx
c000c4bd:	c3                   	ret    

c000c4be <VAS::evict(unsigned long)>:
c000c4be:	55                   	push   ebp
c000c4bf:	57                   	push   edi
c000c4c0:	56                   	push   esi
c000c4c1:	53                   	push   ebx
c000c4c2:	83 ec 28             	sub    esp,0x28
c000c4c5:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000c4c9:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c000c4cd:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c4d1:	68 4e 2e 02 c0       	push   0xc0022e4e
c000c4d6:	e8 e4 05 00 00       	call   c000cabf <Dbg::kprintf(char const*, ...)>
c000c4db:	e8 4e f3 ff ff       	call   c000b82e <Virt::allocateSwapfilePage()>
c000c4e0:	5a                   	pop    edx
c000c4e1:	89 c7                	mov    edi,eax
c000c4e3:	59                   	pop    ecx
c000c4e4:	50                   	push   eax
c000c4e5:	68 6b 2e 02 c0       	push   0xc0022e6b
c000c4ea:	e8 d0 05 00 00       	call   c000cabf <Dbg::kprintf(char const*, ...)>
c000c4ef:	83 c4 10             	add    esp,0x10
c000c4f2:	8b 1d ac 58 02 c0    	mov    ebx,DWORD PTR ds:0xc00258ac
c000c4f8:	85 db                	test   ebx,ebx
c000c4fa:	7e 3d                	jle    c000c539 <VAS::evict(unsigned long)+0x7b>
c000c4fc:	89 ee                	mov    esi,ebp
c000c4fe:	31 db                	xor    ebx,ebx
c000c500:	83 ec 0c             	sub    esp,0xc
c000c503:	57                   	push   edi
c000c504:	e8 13 f3 ff ff       	call   c000b81c <Virt::swapIDToSector(unsigned long)>
c000c509:	89 34 24             	mov    DWORD PTR [esp],esi
c000c50c:	01 d8                	add    eax,ebx
c000c50e:	6a 01                	push   0x1
c000c510:	31 d2                	xor    edx,edx
c000c512:	43                   	inc    ebx
c000c513:	52                   	push   edx
c000c514:	81 c6 00 02 00 00    	add    esi,0x200
c000c51a:	50                   	push   eax
c000c51b:	0f be 05 b8 58 02 c0 	movsx  eax,BYTE PTR ds:0xc00258b8
c000c522:	ff 34 85 1c 69 02 c0 	push   DWORD PTR [eax*4-0x3ffd96e4]
c000c529:	e8 1a 3d 00 00       	call   c0010248 <LogicalDisk::write(unsigned long long, int, void*)>
c000c52e:	83 c4 20             	add    esp,0x20
c000c531:	39 1d ac 58 02 c0    	cmp    DWORD PTR ds:0xc00258ac,ebx
c000c537:	7f c7                	jg     c000c500 <VAS::evict(unsigned long)+0x42>
c000c539:	83 ec 08             	sub    esp,0x8
c000c53c:	c1 e7 0b             	shl    edi,0xb
c000c53f:	55                   	push   ebp
c000c540:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000c544:	e8 b5 f4 ff ff       	call   c000b9fe <VAS::getPageTableEntry(unsigned long)>
c000c549:	5a                   	pop    edx
c000c54a:	89 c6                	mov    esi,eax
c000c54c:	59                   	pop    ecx
c000c54d:	ff 30                	push   DWORD PTR [eax]
c000c54f:	68 7b 2e 02 c0       	push   0xc0022e7b
c000c554:	e8 66 05 00 00       	call   c000cabf <Dbg::kprintf(char const*, ...)>
c000c559:	8b 16                	mov    edx,DWORD PTR [esi]
c000c55b:	89 d3                	mov    ebx,edx
c000c55d:	81 e2 fe 07 00 00    	and    edx,0x7fe
c000c563:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000c569:	09 d7                	or     edi,edx
c000c56b:	89 3e                	mov    DWORD PTR [esi],edi
c000c56d:	5e                   	pop    esi
c000c56e:	58                   	pop    eax
c000c56f:	57                   	push   edi
c000c570:	68 94 2e 02 c0       	push   0xc0022e94
c000c575:	e8 45 05 00 00       	call   c000cabf <Dbg::kprintf(char const*, ...)>
c000c57a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000c57d:	ff 05 88 65 02 c0    	inc    DWORD PTR ds:0xc0026588
c000c583:	e8 ee d7 ff ff       	call   c0009d76 <Phys::freePage(unsigned long)>
c000c588:	0f 20 d8             	mov    eax,cr3
c000c58b:	0f 22 d8             	mov    cr3,eax
c000c58e:	ff 35 88 65 02 c0    	push   DWORD PTR ds:0xc0026588
c000c594:	55                   	push   ebp
c000c595:	53                   	push   ebx
c000c596:	68 90 2d 02 c0       	push   0xc0022d90
c000c59b:	e8 1f 05 00 00       	call   c000cabf <Dbg::kprintf(char const*, ...)>
c000c5a0:	a1 84 65 02 c0       	mov    eax,ds:0xc0026584
c000c5a5:	c7 44 24 50 ad 2e 02 c0 	mov    DWORD PTR [esp+0x50],0xc0022ead
c000c5ad:	8d 50 01             	lea    edx,[eax+0x1]
c000c5b0:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c000c5b4:	89 15 84 65 02 c0    	mov    DWORD PTR ds:0xc0026584,edx
c000c5ba:	83 c4 3c             	add    esp,0x3c
c000c5bd:	5b                   	pop    ebx
c000c5be:	5e                   	pop    esi
c000c5bf:	5f                   	pop    edi
c000c5c0:	5d                   	pop    ebp
c000c5c1:	e9 f9 04 00 00       	jmp    c000cabf <Dbg::kprintf(char const*, ...)>

c000c5c6 <VAS::tryLoadBackOffDisk(unsigned long)>:
c000c5c6:	55                   	push   ebp
c000c5c7:	57                   	push   edi
c000c5c8:	56                   	push   esi
c000c5c9:	53                   	push   ebx
c000c5ca:	83 ec 24             	sub    esp,0x24
c000c5cd:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000c5d1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c5d5:	68 be 2e 02 c0       	push   0xc0022ebe
c000c5da:	e8 e0 04 00 00       	call   c000cabf <Dbg::kprintf(char const*, ...)>
c000c5df:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c000c5e3:	58                   	pop    eax
c000c5e4:	81 e7 00 f0 ff ff    	and    edi,0xfffff000
c000c5ea:	5a                   	pop    edx
c000c5eb:	57                   	push   edi
c000c5ec:	53                   	push   ebx
c000c5ed:	e8 0c f4 ff ff       	call   c000b9fe <VAS::getPageTableEntry(unsigned long)>
c000c5f2:	59                   	pop    ecx
c000c5f3:	5e                   	pop    esi
c000c5f4:	89 c6                	mov    esi,eax
c000c5f6:	ff 30                	push   DWORD PTR [eax]
c000c5f8:	68 d1 2e 02 c0       	push   0xc0022ed1
c000c5fd:	e8 bd 04 00 00       	call   c000cabf <Dbg::kprintf(char const*, ...)>
c000c602:	83 c4 10             	add    esp,0x10
c000c605:	85 ff                	test   edi,edi
c000c607:	74 0a                	je     c000c613 <VAS::tryLoadBackOffDisk(unsigned long)+0x4d>
c000c609:	8b 2e                	mov    ebp,DWORD PTR [esi]
c000c60b:	f7 c5 01 00 00 00    	test   ebp,0x1
c000c611:	74 0a                	je     c000c61d <VAS::tryLoadBackOffDisk(unsigned long)+0x57>
c000c613:	83 c4 1c             	add    esp,0x1c
c000c616:	31 c0                	xor    eax,eax
c000c618:	5b                   	pop    ebx
c000c619:	5e                   	pop    esi
c000c61a:	5f                   	pop    edi
c000c61b:	5d                   	pop    ebp
c000c61c:	c3                   	ret    
c000c61d:	83 ec 08             	sub    esp,0x8
c000c620:	c1 ed 0b             	shr    ebp,0xb
c000c623:	55                   	push   ebp
c000c624:	68 df 2e 02 c0       	push   0xc0022edf
c000c629:	e8 91 04 00 00       	call   c000cabf <Dbg::kprintf(char const*, ...)>
c000c62e:	e8 c6 d7 ff ff       	call   c0009df9 <Phys::allocatePage()>
c000c633:	59                   	pop    ecx
c000c634:	5a                   	pop    edx
c000c635:	50                   	push   eax
c000c636:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c63a:	68 ea 2e 02 c0       	push   0xc0022eea
c000c63f:	e8 7b 04 00 00       	call   c000cabf <Dbg::kprintf(char const*, ...)>
c000c644:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000c648:	8b 16                	mov    edx,DWORD PTR [esi]
c000c64a:	81 e2 ff 0f 00 00    	and    edx,0xfff
c000c650:	09 d0                	or     eax,edx
c000c652:	0d 01 08 00 00       	or     eax,0x801
c000c657:	89 06                	mov    DWORD PTR [esi],eax
c000c659:	59                   	pop    ecx
c000c65a:	5e                   	pop    esi
c000c65b:	50                   	push   eax
c000c65c:	68 ff 2e 02 c0       	push   0xc0022eff
c000c661:	e8 59 04 00 00       	call   c000cabf <Dbg::kprintf(char const*, ...)>
c000c666:	0f 20 d8             	mov    eax,cr3
c000c669:	83 c4 0c             	add    esp,0xc
c000c66c:	53                   	push   ebx
c000c66d:	50                   	push   eax
c000c66e:	68 17 2f 02 c0       	push   0xc0022f17
c000c673:	e8 47 04 00 00       	call   c000cabf <Dbg::kprintf(char const*, ...)>
c000c678:	c7 04 24 2f 2f 02 c0 	mov    DWORD PTR [esp],0xc0022f2f
c000c67f:	e8 3b 04 00 00       	call   c000cabf <Dbg::kprintf(char const*, ...)>
c000c684:	83 c4 10             	add    esp,0x10
c000c687:	a1 ac 58 02 c0       	mov    eax,ds:0xc00258ac
c000c68c:	85 c0                	test   eax,eax
c000c68e:	7e 3d                	jle    c000c6cd <VAS::tryLoadBackOffDisk(unsigned long)+0x107>
c000c690:	89 fe                	mov    esi,edi
c000c692:	31 db                	xor    ebx,ebx
c000c694:	83 ec 0c             	sub    esp,0xc
c000c697:	55                   	push   ebp
c000c698:	e8 7f f1 ff ff       	call   c000b81c <Virt::swapIDToSector(unsigned long)>
c000c69d:	89 34 24             	mov    DWORD PTR [esp],esi
c000c6a0:	01 d8                	add    eax,ebx
c000c6a2:	6a 01                	push   0x1
c000c6a4:	31 d2                	xor    edx,edx
c000c6a6:	43                   	inc    ebx
c000c6a7:	52                   	push   edx
c000c6a8:	81 c6 00 02 00 00    	add    esi,0x200
c000c6ae:	50                   	push   eax
c000c6af:	0f be 05 b8 58 02 c0 	movsx  eax,BYTE PTR ds:0xc00258b8
c000c6b6:	ff 34 85 1c 69 02 c0 	push   DWORD PTR [eax*4-0x3ffd96e4]
c000c6bd:	e8 1a 3b 00 00       	call   c00101dc <LogicalDisk::read(unsigned long long, int, void*)>
c000c6c2:	83 c4 20             	add    esp,0x20
c000c6c5:	39 1d ac 58 02 c0    	cmp    DWORD PTR ds:0xc00258ac,ebx
c000c6cb:	7f c7                	jg     c000c694 <VAS::tryLoadBackOffDisk(unsigned long)+0xce>
c000c6cd:	a1 88 65 02 c0       	mov    eax,ds:0xc0026588
c000c6d2:	48                   	dec    eax
c000c6d3:	52                   	push   edx
c000c6d4:	a3 88 65 02 c0       	mov    ds:0xc0026588,eax
c000c6d9:	50                   	push   eax
c000c6da:	57                   	push   edi
c000c6db:	68 3f 2f 02 c0       	push   0xc0022f3f
c000c6e0:	e8 da 03 00 00       	call   c000cabf <Dbg::kprintf(char const*, ...)>
c000c6e5:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000c6e8:	e8 11 f1 ff ff       	call   c000b7fe <Virt::freeSwapfilePage(unsigned long)>
c000c6ed:	c7 04 24 54 2f 02 c0 	mov    DWORD PTR [esp],0xc0022f54
c000c6f4:	e8 c6 03 00 00       	call   c000cabf <Dbg::kprintf(char const*, ...)>
c000c6f9:	a1 28 79 02 c0       	mov    eax,ds:0xc0027928
c000c6fe:	83 c4 10             	add    esp,0x10
c000c701:	48                   	dec    eax
c000c702:	a3 28 79 02 c0       	mov    ds:0xc0027928,eax
c000c707:	85 c0                	test   eax,eax
c000c709:	75 01                	jne    c000c70c <VAS::tryLoadBackOffDisk(unsigned long)+0x146>
c000c70b:	fb                   	sti    
c000c70c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000c710:	25 ff 0f 00 00       	and    eax,0xfff
c000c715:	3d e0 0f 00 00       	cmp    eax,0xfe0
c000c71a:	77 20                	ja     c000c73c <VAS::tryLoadBackOffDisk(unsigned long)+0x176>
c000c71c:	0f 20 d8             	mov    eax,cr3
c000c71f:	0f 22 d8             	mov    cr3,eax
c000c722:	83 ec 0c             	sub    esp,0xc
c000c725:	68 7a 2f 02 c0       	push   0xc0022f7a
c000c72a:	e8 90 03 00 00       	call   c000cabf <Dbg::kprintf(char const*, ...)>
c000c72f:	83 c4 10             	add    esp,0x10
c000c732:	b0 01                	mov    al,0x1
c000c734:	83 c4 1c             	add    esp,0x1c
c000c737:	5b                   	pop    ebx
c000c738:	5e                   	pop    esi
c000c739:	5f                   	pop    edi
c000c73a:	5d                   	pop    ebp
c000c73b:	c3                   	ret    
c000c73c:	83 ec 0c             	sub    esp,0xc
c000c73f:	68 6a 2f 02 c0       	push   0xc0022f6a
c000c744:	e8 76 03 00 00       	call   c000cabf <Dbg::kprintf(char const*, ...)>
c000c749:	83 c4 10             	add    esp,0x10
c000c74c:	eb ce                	jmp    c000c71c <VAS::tryLoadBackOffDisk(unsigned long)+0x156>

c000c74e <VAS::scanForEviction()>:
c000c74e:	57                   	push   edi
c000c74f:	31 ff                	xor    edi,edi
c000c751:	56                   	push   esi
c000c752:	53                   	push   ebx
c000c753:	83 ec 10             	sub    esp,0x10
c000c756:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000c75a:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c000c75d:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c000c763:	75 0e                	jne    c000c773 <VAS::scanForEviction()+0x25>
c000c765:	89 da                	mov    edx,ebx
c000c767:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000c76a:	c1 ea 16             	shr    edx,0x16
c000c76d:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c000c771:	74 4e                	je     c000c7c1 <VAS::scanForEviction()+0x73>
c000c773:	53                   	push   ebx
c000c774:	56                   	push   esi
c000c775:	e8 84 f2 ff ff       	call   c000b9fe <VAS::getPageTableEntry(unsigned long)>
c000c77a:	5a                   	pop    edx
c000c77b:	8b 10                	mov    edx,DWORD PTR [eax]
c000c77d:	59                   	pop    ecx
c000c77e:	89 d1                	mov    ecx,edx
c000c780:	81 e1 01 08 00 00    	and    ecx,0x801
c000c786:	81 f9 01 08 00 00    	cmp    ecx,0x801
c000c78c:	74 3e                	je     c000c7cc <VAS::scanForEviction()+0x7e>
c000c78e:	81 c3 00 10 00 00    	add    ebx,0x1000
c000c794:	81 fb ff ff ff fe    	cmp    ebx,0xfeffffff
c000c79a:	76 2b                	jbe    c000c7c7 <VAS::scanForEviction()+0x79>
c000c79c:	47                   	inc    edi
c000c79d:	c7 46 08 00 00 00 00 	mov    DWORD PTR [esi+0x8],0x0
c000c7a4:	83 ff 03             	cmp    edi,0x3
c000c7a7:	74 32                	je     c000c7db <VAS::scanForEviction()+0x8d>
c000c7a9:	31 db                	xor    ebx,ebx
c000c7ab:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c000c7b1:	75 c0                	jne    c000c773 <VAS::scanForEviction()+0x25>
c000c7b3:	89 da                	mov    edx,ebx
c000c7b5:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000c7b8:	c1 ea 16             	shr    edx,0x16
c000c7bb:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c000c7bf:	75 b2                	jne    c000c773 <VAS::scanForEviction()+0x25>
c000c7c1:	81 c3 00 00 40 00    	add    ebx,0x400000
c000c7c7:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c000c7ca:	eb 91                	jmp    c000c75d <VAS::scanForEviction()+0xf>
c000c7cc:	f6 c2 20             	test   dl,0x20
c000c7cf:	74 13                	je     c000c7e4 <VAS::scanForEviction()+0x96>
c000c7d1:	83 e2 df             	and    edx,0xffffffdf
c000c7d4:	89 10                	mov    DWORD PTR [eax],edx
c000c7d6:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c000c7d9:	eb b3                	jmp    c000c78e <VAS::scanForEviction()+0x40>
c000c7db:	83 c4 10             	add    esp,0x10
c000c7de:	31 c0                	xor    eax,eax
c000c7e0:	5b                   	pop    ebx
c000c7e1:	5e                   	pop    esi
c000c7e2:	5f                   	pop    edi
c000c7e3:	c3                   	ret    
c000c7e4:	83 ec 08             	sub    esp,0x8
c000c7e7:	89 d0                	mov    eax,edx
c000c7e9:	25 00 f0 ff ff       	and    eax,0xfffff000
c000c7ee:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c7f2:	53                   	push   ebx
c000c7f3:	68 88 2f 02 c0       	push   0xc0022f88
c000c7f8:	e8 c2 02 00 00       	call   c000cabf <Dbg::kprintf(char const*, ...)>
c000c7fd:	58                   	pop    eax
c000c7fe:	5a                   	pop    edx
c000c7ff:	ff 76 08             	push   DWORD PTR [esi+0x8]
c000c802:	56                   	push   esi
c000c803:	e8 b6 fc ff ff       	call   c000c4be <VAS::evict(unsigned long)>
c000c808:	59                   	pop    ecx
c000c809:	5b                   	pop    ebx
c000c80a:	ff 76 08             	push   DWORD PTR [esi+0x8]
c000c80d:	68 9c 2f 02 c0       	push   0xc0022f9c
c000c812:	e8 a8 02 00 00       	call   c000cabf <Dbg::kprintf(char const*, ...)>
c000c817:	81 46 08 00 10 00 00 	add    DWORD PTR [esi+0x8],0x1000
c000c81e:	83 c4 10             	add    esp,0x10
c000c821:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c825:	83 c4 10             	add    esp,0x10
c000c828:	5b                   	pop    ebx
c000c829:	5e                   	pop    esi
c000c82a:	5f                   	pop    edi
c000c82b:	c3                   	ret    

c000c82c <mapVASFirstTime>:
c000c82c:	55                   	push   ebp
c000c82d:	57                   	push   edi
c000c82e:	56                   	push   esi
c000c82f:	53                   	push   ebx
c000c830:	83 ec 0c             	sub    esp,0xc
c000c833:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000c838:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000c83b:	4a                   	dec    edx
c000c83c:	0f 84 fe 00 00 00    	je     c000c940 <mapVASFirstTime+0x114>
c000c842:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c000c845:	8b 68 38             	mov    ebp,DWORD PTR [eax+0x38]
c000c848:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c000c84d:	c1 e5 15             	shl    ebp,0x15
c000c850:	bf 00 90 e7 01       	mov    edi,0x1e79000
c000c855:	8b b2 12 05 00 00    	mov    esi,DWORD PTR [edx+0x512]
c000c85b:	29 eb                	sub    ebx,ebp
c000c85d:	29 ef                	sub    edi,ebp
c000c85f:	83 ec 08             	sub    esp,0x8
c000c862:	53                   	push   ebx
c000c863:	68 c8 2f 02 c0       	push   0xc0022fc8
c000c868:	e8 52 02 00 00       	call   c000cabf <Dbg::kprintf(char const*, ...)>
c000c86d:	e8 87 d5 ff ff       	call   c0009df9 <Phys::allocatePage()>
c000c872:	c7 04 24 03 04 00 00 	mov    DWORD PTR [esp],0x403
c000c879:	6a 01                	push   0x1
c000c87b:	53                   	push   ebx
c000c87c:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000c882:	50                   	push   eax
c000c883:	56                   	push   esi
c000c884:	e8 01 f8 ff ff       	call   c000c08a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000c889:	83 c4 20             	add    esp,0x20
c000c88c:	39 fb                	cmp    ebx,edi
c000c88e:	75 cf                	jne    c000c85f <mapVASFirstTime+0x33>
c000c890:	bb 00 f0 ff 01       	mov    ebx,0x1fff000
c000c895:	bf 00 f0 fd 01       	mov    edi,0x1fdf000
c000c89a:	29 eb                	sub    ebx,ebp
c000c89c:	29 ef                	sub    edi,ebp
c000c89e:	83 ec 08             	sub    esp,0x8
c000c8a1:	53                   	push   ebx
c000c8a2:	68 e4 2f 02 c0       	push   0xc0022fe4
c000c8a7:	e8 13 02 00 00       	call   c000cabf <Dbg::kprintf(char const*, ...)>
c000c8ac:	58                   	pop    eax
c000c8ad:	80 7e 01 01          	cmp    BYTE PTR [esi+0x1],0x1
c000c8b1:	5a                   	pop    edx
c000c8b2:	19 c0                	sbb    eax,eax
c000c8b4:	83 e0 04             	and    eax,0x4
c000c8b7:	05 03 04 00 00       	add    eax,0x403
c000c8bc:	50                   	push   eax
c000c8bd:	68 09 2f 02 c0       	push   0xc0022f09
c000c8c2:	e8 f8 01 00 00       	call   c000cabf <Dbg::kprintf(char const*, ...)>
c000c8c7:	e8 2d d5 ff ff       	call   c0009df9 <Phys::allocatePage()>
c000c8cc:	59                   	pop    ecx
c000c8cd:	89 c5                	mov    ebp,eax
c000c8cf:	58                   	pop    eax
c000c8d0:	55                   	push   ebp
c000c8d1:	68 f8 2f 02 c0       	push   0xc0022ff8
c000c8d6:	e8 e4 01 00 00       	call   c000cabf <Dbg::kprintf(char const*, ...)>
c000c8db:	80 7e 01 01          	cmp    BYTE PTR [esi+0x1],0x1
c000c8df:	19 d2                	sbb    edx,edx
c000c8e1:	83 e2 04             	and    edx,0x4
c000c8e4:	81 c2 03 04 00 00    	add    edx,0x403
c000c8ea:	89 14 24             	mov    DWORD PTR [esp],edx
c000c8ed:	6a 01                	push   0x1
c000c8ef:	53                   	push   ebx
c000c8f0:	55                   	push   ebp
c000c8f1:	56                   	push   esi
c000c8f2:	e8 93 f7 ff ff       	call   c000c08a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000c8f7:	83 c4 18             	add    esp,0x18
c000c8fa:	53                   	push   ebx
c000c8fb:	56                   	push   esi
c000c8fc:	e8 fd f0 ff ff       	call   c000b9fe <VAS::getPageTableEntry(unsigned long)>
c000c901:	5a                   	pop    edx
c000c902:	59                   	pop    ecx
c000c903:	ff 30                	push   DWORD PTR [eax]
c000c905:	68 14 30 02 c0       	push   0xc0023014
c000c90a:	e8 b0 01 00 00       	call   c000cabf <Dbg::kprintf(char const*, ...)>
c000c90f:	0f 20 d8             	mov    eax,cr3
c000c912:	83 c4 0c             	add    esp,0xc
c000c915:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000c91b:	56                   	push   esi
c000c91c:	50                   	push   eax
c000c91d:	68 17 2f 02 c0       	push   0xc0022f17
c000c922:	e8 98 01 00 00       	call   c000cabf <Dbg::kprintf(char const*, ...)>
c000c927:	83 c4 10             	add    esp,0x10
c000c92a:	39 df                	cmp    edi,ebx
c000c92c:	0f 85 6c ff ff ff    	jne    c000c89e <mapVASFirstTime+0x72>
c000c932:	0f 20 d8             	mov    eax,cr3
c000c935:	0f 22 d8             	mov    cr3,eax
c000c938:	83 c4 0c             	add    esp,0xc
c000c93b:	5b                   	pop    ebx
c000c93c:	5e                   	pop    esi
c000c93d:	5f                   	pop    edi
c000c93e:	5d                   	pop    ebp
c000c93f:	c3                   	ret    
c000c940:	83 ec 0c             	sub    esp,0xc
c000c943:	68 af 2f 02 c0       	push   0xc0022faf
c000c948:	e8 72 01 00 00       	call   c000cabf <Dbg::kprintf(char const*, ...)>
c000c94d:	83 c4 10             	add    esp,0x10
c000c950:	83 c4 0c             	add    esp,0xc
c000c953:	5b                   	pop    ebx
c000c954:	5e                   	pop    esi
c000c955:	5f                   	pop    edi
c000c956:	5d                   	pop    ebp
c000c957:	c3                   	ret    

c000c958 <__cxa_atexit>:
c000c958:	31 c0                	xor    eax,eax
c000c95a:	c3                   	ret    

c000c95b <__cxa_finalize>:
c000c95b:	c3                   	ret    

c000c95c <__stack_chk_fail>:
c000c95c:	55                   	push   ebp
c000c95d:	89 e5                	mov    ebp,esp
c000c95f:	83 ec 14             	sub    esp,0x14
c000c962:	68 1f 30 02 c0       	push   0xc002301f
c000c967:	e8 53 01 00 00       	call   c000cabf <Dbg::kprintf(char const*, ...)>
c000c96c:	58                   	pop    eax
c000c96d:	5a                   	pop    edx
c000c96e:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000c971:	68 6f 30 02 c0       	push   0xc002306f
c000c976:	e8 44 01 00 00       	call   c000cabf <Dbg::kprintf(char const*, ...)>
c000c97b:	59                   	pop    ecx
c000c97c:	58                   	pop    eax
c000c97d:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c980:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000c983:	68 6f 30 02 c0       	push   0xc002306f
c000c988:	e8 32 01 00 00       	call   c000cabf <Dbg::kprintf(char const*, ...)>
c000c98d:	5a                   	pop    edx
c000c98e:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c991:	59                   	pop    ecx
c000c992:	8b 00                	mov    eax,DWORD PTR [eax]
c000c994:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000c997:	68 6f 30 02 c0       	push   0xc002306f
c000c99c:	e8 1e 01 00 00       	call   c000cabf <Dbg::kprintf(char const*, ...)>
c000c9a1:	5a                   	pop    edx
c000c9a2:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c9a5:	59                   	pop    ecx
c000c9a6:	8b 00                	mov    eax,DWORD PTR [eax]
c000c9a8:	8b 00                	mov    eax,DWORD PTR [eax]
c000c9aa:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000c9ad:	68 6f 30 02 c0       	push   0xc002306f
c000c9b2:	e8 08 01 00 00       	call   c000cabf <Dbg::kprintf(char const*, ...)>
c000c9b7:	c7 04 24 77 30 02 c0 	mov    DWORD PTR [esp],0xc0023077
c000c9be:	e8 be 79 00 00       	call   c0014381 <Krnl::panic(char const*)>
c000c9c3:	83 c4 10             	add    esp,0x10
c000c9c6:	c9                   	leave  
c000c9c7:	c3                   	ret    

c000c9c8 <__cxa_pure_virtual>:
c000c9c8:	83 ec 18             	sub    esp,0x18
c000c9cb:	68 8f 30 02 c0       	push   0xc002308f
c000c9d0:	e8 ac 79 00 00       	call   c0014381 <Krnl::panic(char const*)>
c000c9d5:	83 c4 1c             	add    esp,0x1c
c000c9d8:	c3                   	ret    

c000c9d9 <operator new[](unsigned long)>:
c000c9d9:	e9 e5 cf ff ff       	jmp    c00099c3 <malloc>

c000c9de <operator delete(void*, unsigned long)>:
c000c9de:	e9 00 d0 ff ff       	jmp    c00099e3 <rfree>

c000c9e3 <operator delete[](void*)>:
c000c9e3:	e9 fb cf ff ff       	jmp    c00099e3 <rfree>

c000c9e8 <operator delete[](void*, unsigned long)>:
c000c9e8:	e9 f6 cf ff ff       	jmp    c00099e3 <rfree>

c000c9ed <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c000c9ed:	55                   	push   ebp
c000c9ee:	b9 11 00 00 00       	mov    ecx,0x11
c000c9f3:	57                   	push   edi
c000c9f4:	56                   	push   esi
c000c9f5:	be aa 2a 02 c0       	mov    esi,0xc0022aaa
c000c9fa:	53                   	push   ebx
c000c9fb:	83 ec 20             	sub    esp,0x20
c000c9fe:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000ca02:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000ca06:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c000ca0a:	fc                   	cld    
c000ca0b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000ca0d:	89 ee                	mov    esi,ebp
c000ca0f:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000ca13:	eb 02                	jmp    c000ca17 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x2a>
c000ca15:	89 c6                	mov    esi,eax
c000ca17:	31 d2                	xor    edx,edx
c000ca19:	41                   	inc    ecx
c000ca1a:	89 f0                	mov    eax,esi
c000ca1c:	f7 f3                	div    ebx
c000ca1e:	39 de                	cmp    esi,ebx
c000ca20:	73 f3                	jae    c000ca15 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x28>
c000ca22:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c000ca25:	eb 02                	jmp    c000ca29 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x3c>
c000ca27:	89 c5                	mov    ebp,eax
c000ca29:	31 d2                	xor    edx,edx
c000ca2b:	49                   	dec    ecx
c000ca2c:	89 e8                	mov    eax,ebp
c000ca2e:	f7 f3                	div    ebx
c000ca30:	39 dd                	cmp    ebp,ebx
c000ca32:	8a 54 14 0f          	mov    dl,BYTE PTR [esp+edx*1+0xf]
c000ca36:	88 11                	mov    BYTE PTR [ecx],dl
c000ca38:	73 ed                	jae    c000ca27 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x3a>
c000ca3a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000ca3e:	83 c4 20             	add    esp,0x20
c000ca41:	5b                   	pop    ebx
c000ca42:	5e                   	pop    esi
c000ca43:	5f                   	pop    edi
c000ca44:	5d                   	pop    ebp
c000ca45:	c3                   	ret    

c000ca46 <Dbg::logc(char)>:
c000ca46:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000ca4a:	f6 05 80 64 02 c0 10 	test   BYTE PTR ds:0xc0026480,0x10
c000ca51:	75 12                	jne    c000ca65 <Dbg::logc(char)+0x1f>
c000ca53:	ba fd 03 00 00       	mov    edx,0x3fd
c000ca58:	ec                   	in     al,dx
c000ca59:	a8 20                	test   al,0x20
c000ca5b:	74 fb                	je     c000ca58 <Dbg::logc(char)+0x12>
c000ca5d:	ba f8 03 00 00       	mov    edx,0x3f8
c000ca62:	88 c8                	mov    al,cl
c000ca64:	ee                   	out    dx,al
c000ca65:	c3                   	ret    

c000ca66 <Dbg::logs(char*)>:
c000ca66:	53                   	push   ebx
c000ca67:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000ca6b:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000ca6e:	84 c0                	test   al,al
c000ca70:	74 0f                	je     c000ca81 <Dbg::logs(char*)+0x1b>
c000ca72:	50                   	push   eax
c000ca73:	43                   	inc    ebx
c000ca74:	e8 cd ff ff ff       	call   c000ca46 <Dbg::logc(char)>
c000ca79:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000ca7c:	5a                   	pop    edx
c000ca7d:	84 c0                	test   al,al
c000ca7f:	75 f1                	jne    c000ca72 <Dbg::logs(char*)+0xc>
c000ca81:	5b                   	pop    ebx
c000ca82:	c3                   	ret    

c000ca83 <Dbg::logWriteInt(unsigned int)>:
c000ca83:	83 ec 10             	sub    esp,0x10
c000ca86:	6a 0a                	push   0xa
c000ca88:	8d 44 24 08          	lea    eax,[esp+0x8]
c000ca8c:	50                   	push   eax
c000ca8d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca91:	e8 57 ff ff ff       	call   c000c9ed <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000ca96:	50                   	push   eax
c000ca97:	e8 ca ff ff ff       	call   c000ca66 <Dbg::logs(char*)>
c000ca9c:	83 c4 20             	add    esp,0x20
c000ca9f:	c3                   	ret    

c000caa0 <Dbg::logWriteIntBase(unsigned int, int)>:
c000caa0:	83 ec 10             	sub    esp,0x10
c000caa3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000caa7:	8d 44 24 08          	lea    eax,[esp+0x8]
c000caab:	50                   	push   eax
c000caac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cab0:	e8 38 ff ff ff       	call   c000c9ed <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000cab5:	50                   	push   eax
c000cab6:	e8 ab ff ff ff       	call   c000ca66 <Dbg::logs(char*)>
c000cabb:	83 c4 20             	add    esp,0x20
c000cabe:	c3                   	ret    

c000cabf <Dbg::kprintf(char const*, ...)>:
c000cabf:	55                   	push   ebp
c000cac0:	57                   	push   edi
c000cac1:	56                   	push   esi
c000cac2:	53                   	push   ebx
c000cac3:	83 ec 0c             	sub    esp,0xc
c000cac6:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000caca:	f6 05 80 64 02 c0 10 	test   BYTE PTR ds:0xc0026480,0x10
c000cad1:	74 08                	je     c000cadb <Dbg::kprintf(char const*, ...)+0x1c>
c000cad3:	83 c4 0c             	add    esp,0xc
c000cad6:	5b                   	pop    ebx
c000cad7:	5e                   	pop    esi
c000cad8:	5f                   	pop    edi
c000cad9:	5d                   	pop    ebp
c000cada:	c3                   	ret    
c000cadb:	8d 44 24 24          	lea    eax,[esp+0x24]
c000cadf:	31 db                	xor    ebx,ebx
c000cae1:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000cae5:	0f be 06             	movsx  eax,BYTE PTR [esi]
c000cae8:	84 c0                	test   al,al
c000caea:	74 e7                	je     c000cad3 <Dbg::kprintf(char const*, ...)+0x14>
c000caec:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000caef:	3c 25                	cmp    al,0x25
c000caf1:	8d 3c 2e             	lea    edi,[esi+ebp*1]
c000caf4:	75 44                	jne    c000cb3a <Dbg::kprintf(char const*, ...)+0x7b>
c000caf6:	83 c3 02             	add    ebx,0x2
c000caf9:	8a 07                	mov    al,BYTE PTR [edi]
c000cafb:	8d 2c 1e             	lea    ebp,[esi+ebx*1]
c000cafe:	83 e8 25             	sub    eax,0x25
c000cb01:	3c 53                	cmp    al,0x53
c000cb03:	0f 87 c9 00 00 00    	ja     c000cbd2 <Dbg::kprintf(char const*, ...)+0x113>
c000cb09:	0f b6 c0             	movzx  eax,al
c000cb0c:	ff 24 85 a4 30 02 c0 	jmp    DWORD PTR [eax*4-0x3ffdcf5c]
c000cb13:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000cb17:	89 c8                	mov    eax,ecx
c000cb19:	83 c1 04             	add    ecx,0x4
c000cb1c:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000cb20:	ff 30                	push   DWORD PTR [eax]
c000cb22:	e8 5c ff ff ff       	call   c000ca83 <Dbg::logWriteInt(unsigned int)>
c000cb27:	5f                   	pop    edi
c000cb28:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c000cb2c:	84 c0                	test   al,al
c000cb2e:	74 a3                	je     c000cad3 <Dbg::kprintf(char const*, ...)+0x14>
c000cb30:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000cb33:	3c 25                	cmp    al,0x25
c000cb35:	8d 3c 2e             	lea    edi,[esi+ebp*1]
c000cb38:	74 bc                	je     c000caf6 <Dbg::kprintf(char const*, ...)+0x37>
c000cb3a:	50                   	push   eax
c000cb3b:	89 eb                	mov    ebx,ebp
c000cb3d:	e8 04 ff ff ff       	call   c000ca46 <Dbg::logc(char)>
c000cb42:	89 fd                	mov    ebp,edi
c000cb44:	58                   	pop    eax
c000cb45:	eb e1                	jmp    c000cb28 <Dbg::kprintf(char const*, ...)+0x69>
c000cb47:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000cb4b:	89 c8                	mov    eax,ecx
c000cb4d:	83 c1 04             	add    ecx,0x4
c000cb50:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000cb54:	ff 30                	push   DWORD PTR [eax]
c000cb56:	e8 0b ff ff ff       	call   c000ca66 <Dbg::logs(char*)>
c000cb5b:	58                   	pop    eax
c000cb5c:	eb ca                	jmp    c000cb28 <Dbg::kprintf(char const*, ...)+0x69>
c000cb5e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000cb62:	89 d0                	mov    eax,edx
c000cb64:	83 c2 04             	add    edx,0x4
c000cb67:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000cb6b:	ff 30                	push   DWORD PTR [eax]
c000cb6d:	e8 11 ff ff ff       	call   c000ca83 <Dbg::logWriteInt(unsigned int)>
c000cb72:	58                   	pop    eax
c000cb73:	eb b3                	jmp    c000cb28 <Dbg::kprintf(char const*, ...)+0x69>
c000cb75:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000cb79:	89 d0                	mov    eax,edx
c000cb7b:	83 c2 04             	add    edx,0x4
c000cb7e:	0f be 00             	movsx  eax,BYTE PTR [eax]
c000cb81:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000cb85:	50                   	push   eax
c000cb86:	e8 bb fe ff ff       	call   c000ca46 <Dbg::logc(char)>
c000cb8b:	58                   	pop    eax
c000cb8c:	eb 9a                	jmp    c000cb28 <Dbg::kprintf(char const*, ...)+0x69>
c000cb8e:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000cb92:	89 c8                	mov    eax,ecx
c000cb94:	83 c1 04             	add    ecx,0x4
c000cb97:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000cb9b:	6a 10                	push   0x10
c000cb9d:	ff 30                	push   DWORD PTR [eax]
c000cb9f:	e8 fc fe ff ff       	call   c000caa0 <Dbg::logWriteIntBase(unsigned int, int)>
c000cba4:	59                   	pop    ecx
c000cba5:	5f                   	pop    edi
c000cba6:	eb 80                	jmp    c000cb28 <Dbg::kprintf(char const*, ...)+0x69>
c000cba8:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000cbac:	89 d0                	mov    eax,edx
c000cbae:	83 c2 08             	add    edx,0x8
c000cbb1:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000cbb5:	6a 10                	push   0x10
c000cbb7:	ff 30                	push   DWORD PTR [eax]
c000cbb9:	e8 e2 fe ff ff       	call   c000caa0 <Dbg::logWriteIntBase(unsigned int, int)>
c000cbbe:	58                   	pop    eax
c000cbbf:	5a                   	pop    edx
c000cbc0:	e9 63 ff ff ff       	jmp    c000cb28 <Dbg::kprintf(char const*, ...)+0x69>
c000cbc5:	6a 25                	push   0x25
c000cbc7:	e8 7a fe ff ff       	call   c000ca46 <Dbg::logc(char)>
c000cbcc:	58                   	pop    eax
c000cbcd:	e9 56 ff ff ff       	jmp    c000cb28 <Dbg::kprintf(char const*, ...)+0x69>
c000cbd2:	6a 25                	push   0x25
c000cbd4:	e8 6d fe ff ff       	call   c000ca46 <Dbg::logc(char)>
c000cbd9:	0f be 07             	movsx  eax,BYTE PTR [edi]
c000cbdc:	50                   	push   eax
c000cbdd:	e8 64 fe ff ff       	call   c000ca46 <Dbg::logc(char)>
c000cbe2:	5a                   	pop    edx
c000cbe3:	59                   	pop    ecx
c000cbe4:	e9 3f ff ff ff       	jmp    c000cb28 <Dbg::kprintf(char const*, ...)+0x69>
c000cbe9:	90                   	nop

c000cbea <File::read(unsigned long long, void*, int*)>:
c000cbea:	53                   	push   ebx
c000cbeb:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000cbef:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000cbf3:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000cbfa:	3c 19                	cmp    al,0x19
c000cbfc:	77 35                	ja     c000cc33 <File::read(unsigned long long, void*, int*)+0x49>
c000cbfe:	8b 04 85 20 6a 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd95e0]
c000cc05:	85 c0                	test   eax,eax
c000cc07:	74 2a                	je     c000cc33 <File::read(unsigned long long, void*, int*)+0x49>
c000cc09:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000cc0f:	85 c0                	test   eax,eax
c000cc11:	74 20                	je     c000cc33 <File::read(unsigned long long, void*, int*)+0x49>
c000cc13:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000cc17:	74 21                	je     c000cc3a <File::read(unsigned long long, void*, int*)+0x50>
c000cc19:	8b 08                	mov    ecx,DWORD PTR [eax]
c000cc1b:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000cc1f:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000cc25:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cc29:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cc2d:	5b                   	pop    ebx
c000cc2e:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c000cc31:	ff e0                	jmp    eax
c000cc33:	b8 0b 00 00 00       	mov    eax,0xb
c000cc38:	eb 05                	jmp    c000cc3f <File::read(unsigned long long, void*, int*)+0x55>
c000cc3a:	b8 05 00 00 00       	mov    eax,0x5
c000cc3f:	5b                   	pop    ebx
c000cc40:	c3                   	ret    
c000cc41:	90                   	nop

c000cc42 <File::write(unsigned long long, void*, int*)>:
c000cc42:	53                   	push   ebx
c000cc43:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000cc47:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000cc4b:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000cc52:	3c 19                	cmp    al,0x19
c000cc54:	77 35                	ja     c000cc8b <File::write(unsigned long long, void*, int*)+0x49>
c000cc56:	8b 04 85 20 6a 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd95e0]
c000cc5d:	85 c0                	test   eax,eax
c000cc5f:	74 2a                	je     c000cc8b <File::write(unsigned long long, void*, int*)+0x49>
c000cc61:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000cc67:	85 c0                	test   eax,eax
c000cc69:	74 20                	je     c000cc8b <File::write(unsigned long long, void*, int*)+0x49>
c000cc6b:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000cc6f:	74 21                	je     c000cc92 <File::write(unsigned long long, void*, int*)+0x50>
c000cc71:	8b 08                	mov    ecx,DWORD PTR [eax]
c000cc73:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000cc77:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000cc7d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cc81:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cc85:	5b                   	pop    ebx
c000cc86:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c000cc89:	ff e0                	jmp    eax
c000cc8b:	b8 0b 00 00 00       	mov    eax,0xb
c000cc90:	eb 05                	jmp    c000cc97 <File::write(unsigned long long, void*, int*)+0x55>
c000cc92:	b8 05 00 00 00       	mov    eax,0x5
c000cc97:	5b                   	pop    ebx
c000cc98:	c3                   	ret    
c000cc99:	90                   	nop

c000cc9a <Directory::read(unsigned long long, void*, int*)>:
c000cc9a:	53                   	push   ebx
c000cc9b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000cc9f:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000cca3:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000ccaa:	3c 19                	cmp    al,0x19
c000ccac:	77 35                	ja     c000cce3 <Directory::read(unsigned long long, void*, int*)+0x49>
c000ccae:	8b 04 85 20 6a 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd95e0]
c000ccb5:	85 c0                	test   eax,eax
c000ccb7:	74 2a                	je     c000cce3 <Directory::read(unsigned long long, void*, int*)+0x49>
c000ccb9:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000ccbf:	85 c0                	test   eax,eax
c000ccc1:	74 20                	je     c000cce3 <Directory::read(unsigned long long, void*, int*)+0x49>
c000ccc3:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000ccc7:	74 21                	je     c000ccea <Directory::read(unsigned long long, void*, int*)+0x50>
c000ccc9:	8b 08                	mov    ecx,DWORD PTR [eax]
c000cccb:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000cccf:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000ccd5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ccd9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ccdd:	5b                   	pop    ebx
c000ccde:	8b 41 50             	mov    eax,DWORD PTR [ecx+0x50]
c000cce1:	ff e0                	jmp    eax
c000cce3:	b8 0b 00 00 00       	mov    eax,0xb
c000cce8:	eb 05                	jmp    c000ccef <Directory::read(unsigned long long, void*, int*)+0x55>
c000ccea:	b8 05 00 00 00       	mov    eax,0x5
c000ccef:	5b                   	pop    ebx
c000ccf0:	c3                   	ret    
c000ccf1:	90                   	nop

c000ccf2 <Directory::write(unsigned long long, void*, int*)>:
c000ccf2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ccf6:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c000ccfd:	b8 0b 00 00 00       	mov    eax,0xb
c000cd02:	80 fa 19             	cmp    dl,0x19
c000cd05:	77 18                	ja     c000cd1f <Directory::write(unsigned long long, void*, int*)+0x2d>
c000cd07:	8b 14 95 20 6a 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd95e0]
c000cd0e:	85 d2                	test   edx,edx
c000cd10:	74 0d                	je     c000cd1f <Directory::write(unsigned long long, void*, int*)+0x2d>
c000cd12:	83 ba 70 01 00 00 01 	cmp    DWORD PTR [edx+0x170],0x1
c000cd19:	19 c0                	sbb    eax,eax
c000cd1b:	83 e0 0a             	and    eax,0xa
c000cd1e:	40                   	inc    eax
c000cd1f:	c3                   	ret    

c000cd20 <File::isAtty()>:
c000cd20:	31 c0                	xor    eax,eax
c000cd22:	c3                   	ret    
c000cd23:	90                   	nop

c000cd24 <Directory::isAtty()>:
c000cd24:	31 c0                	xor    eax,eax
c000cd26:	c3                   	ret    
c000cd27:	90                   	nop

c000cd28 <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c000cd28:	b8 0a 00 00 00       	mov    eax,0xa
c000cd2d:	c3                   	ret    

c000cd2e <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c000cd2e:	b8 0a 00 00 00       	mov    eax,0xa
c000cd33:	c3                   	ret    

c000cd34 <Filesystem::allocateSwapfile(char const*, int)>:
c000cd34:	31 c0                	xor    eax,eax
c000cd36:	31 d2                	xor    edx,edx
c000cd38:	c3                   	ret    
c000cd39:	90                   	nop

c000cd3a <File::~File()>:
c000cd3a:	83 ec 0c             	sub    esp,0xc
c000cd3d:	ba 64 32 02 c0       	mov    edx,0xc0023264
c000cd42:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cd46:	89 10                	mov    DWORD PTR [eax],edx
c000cd48:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cd4c:	83 ec 0c             	sub    esp,0xc
c000cd4f:	50                   	push   eax
c000cd50:	e8 37 e7 ff ff       	call   c000b48c <UnixFile::~UnixFile()>
c000cd55:	83 c4 10             	add    esp,0x10
c000cd58:	90                   	nop
c000cd59:	83 c4 0c             	add    esp,0xc
c000cd5c:	c3                   	ret    
c000cd5d:	90                   	nop

c000cd5e <File::~File()>:
c000cd5e:	83 ec 0c             	sub    esp,0xc
c000cd61:	83 ec 0c             	sub    esp,0xc
c000cd64:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cd68:	e8 cd ff ff ff       	call   c000cd3a <File::~File()>
c000cd6d:	83 c4 10             	add    esp,0x10
c000cd70:	83 ec 08             	sub    esp,0x8
c000cd73:	68 14 01 00 00       	push   0x114
c000cd78:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cd7c:	e8 5d fc ff ff       	call   c000c9de <operator delete(void*, unsigned long)>
c000cd81:	83 c4 10             	add    esp,0x10
c000cd84:	83 c4 0c             	add    esp,0xc
c000cd87:	c3                   	ret    

c000cd88 <Directory::~Directory()>:
c000cd88:	83 ec 0c             	sub    esp,0xc
c000cd8b:	ba 80 32 02 c0       	mov    edx,0xc0023280
c000cd90:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cd94:	89 10                	mov    DWORD PTR [eax],edx
c000cd96:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cd9a:	83 ec 0c             	sub    esp,0xc
c000cd9d:	50                   	push   eax
c000cd9e:	e8 e9 e6 ff ff       	call   c000b48c <UnixFile::~UnixFile()>
c000cda3:	83 c4 10             	add    esp,0x10
c000cda6:	90                   	nop
c000cda7:	83 c4 0c             	add    esp,0xc
c000cdaa:	c3                   	ret    
c000cdab:	90                   	nop

c000cdac <Directory::~Directory()>:
c000cdac:	83 ec 0c             	sub    esp,0xc
c000cdaf:	83 ec 0c             	sub    esp,0xc
c000cdb2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cdb6:	e8 cd ff ff ff       	call   c000cd88 <Directory::~Directory()>
c000cdbb:	83 c4 10             	add    esp,0x10
c000cdbe:	83 ec 08             	sub    esp,0x8
c000cdc1:	68 14 01 00 00       	push   0x114
c000cdc6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cdca:	e8 0f fc ff ff       	call   c000c9de <operator delete(void*, unsigned long)>
c000cdcf:	83 c4 10             	add    esp,0x10
c000cdd2:	83 c4 0c             	add    esp,0xc
c000cdd5:	c3                   	ret    

c000cdd6 <Filesystem::Filesystem()>:
c000cdd6:	ba fc 31 02 c0       	mov    edx,0xc00231fc
c000cddb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cddf:	89 10                	mov    DWORD PTR [eax],edx
c000cde1:	8b 15 94 65 02 c0    	mov    edx,DWORD PTR ds:0xc0026594
c000cde7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cdeb:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000cdee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cdf2:	a3 94 65 02 c0       	mov    ds:0xc0026594,eax
c000cdf7:	90                   	nop
c000cdf8:	c3                   	ret    
c000cdf9:	90                   	nop

c000cdfa <Filesystem::~Filesystem()>:
c000cdfa:	ba fc 31 02 c0       	mov    edx,0xc00231fc
c000cdff:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ce03:	89 10                	mov    DWORD PTR [eax],edx
c000ce05:	90                   	nop
c000ce06:	c3                   	ret    
c000ce07:	90                   	nop

c000ce08 <Filesystem::~Filesystem()>:
c000ce08:	83 ec 0c             	sub    esp,0xc
c000ce0b:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000ce0f:	e8 e6 ff ff ff       	call   c000cdfa <Filesystem::~Filesystem()>
c000ce14:	83 c4 04             	add    esp,0x4
c000ce17:	83 ec 08             	sub    esp,0x8
c000ce1a:	6a 08                	push   0x8
c000ce1c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce20:	e8 b9 fb ff ff       	call   c000c9de <operator delete(void*, unsigned long)>
c000ce25:	83 c4 10             	add    esp,0x10
c000ce28:	83 c4 0c             	add    esp,0xc
c000ce2b:	c3                   	ret    

c000ce2c <Fs::getcwd(Process*, char*, int)>:
c000ce2c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ce30:	31 c0                	xor    eax,eax
c000ce32:	8d 0c 02             	lea    ecx,[edx+eax*1]
c000ce35:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000ce39:	7d 15                	jge    c000ce50 <Fs::getcwd(Process*, char*, int)+0x24>
c000ce3b:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000ce3f:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c000ce46:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c000ce49:	84 c9                	test   cl,cl
c000ce4b:	74 06                	je     c000ce53 <Fs::getcwd(Process*, char*, int)+0x27>
c000ce4d:	40                   	inc    eax
c000ce4e:	eb e2                	jmp    c000ce32 <Fs::getcwd(Process*, char*, int)+0x6>
c000ce50:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c000ce53:	31 c0                	xor    eax,eax
c000ce55:	c3                   	ret    

c000ce56 <Fs::initVFS()>:
c000ce56:	83 ec 18             	sub    esp,0x18
c000ce59:	6a 08                	push   0x8
c000ce5b:	e8 63 cb ff ff       	call   c00099c3 <malloc>
c000ce60:	89 04 24             	mov    DWORD PTR [esp],eax
c000ce63:	e8 70 e3 00 00       	call   c001b1d8 <FAT::FAT()>
c000ce68:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000ce6f:	e8 4f cb ff ff       	call   c00099c3 <malloc>
c000ce74:	89 04 24             	mov    DWORD PTR [esp],eax
c000ce77:	e8 ba f5 00 00       	call   c001c436 <ISO9660::ISO9660()>
c000ce7c:	83 c4 1c             	add    esp,0x1c
c000ce7f:	c3                   	ret    

c000ce80 <Fs::standardiseFiles(char*, char const*, char const*)>:
c000ce80:	55                   	push   ebp
c000ce81:	57                   	push   edi
c000ce82:	56                   	push   esi
c000ce83:	53                   	push   ebx
c000ce84:	81 ec 10 04 00 00    	sub    esp,0x410
c000ce8a:	8b bc 24 28 04 00 00 	mov    edi,DWORD PTR [esp+0x428]
c000ce91:	8b 9c 24 24 04 00 00 	mov    ebx,DWORD PTR [esp+0x424]
c000ce98:	8b ac 24 2c 04 00 00 	mov    ebp,DWORD PTR [esp+0x42c]
c000ce9f:	68 00 04 00 00       	push   0x400
c000cea4:	6a 00                	push   0x0
c000cea6:	8d 74 24 0c          	lea    esi,[esp+0xc]
c000ceaa:	56                   	push   esi
c000ceab:	e8 d4 37 ff ff       	call   c0000684 <memset>
c000ceb0:	83 c4 10             	add    esp,0x10
c000ceb3:	80 7f 01 3a          	cmp    BYTE PTR [edi+0x1],0x3a
c000ceb7:	75 0b                	jne    c000cec4 <Fs::standardiseFiles(char*, char const*, char const*)+0x44>
c000ceb9:	50                   	push   eax
c000ceba:	50                   	push   eax
c000cebb:	57                   	push   edi
c000cebc:	56                   	push   esi
c000cebd:	e8 7e 38 ff ff       	call   c0000740 <strcpy>
c000cec2:	eb 41                	jmp    c000cf05 <Fs::standardiseFiles(char*, char const*, char const*)+0x85>
c000cec4:	8a 07                	mov    al,BYTE PTR [edi]
c000cec6:	3c 5c                	cmp    al,0x5c
c000cec8:	74 04                	je     c000cece <Fs::standardiseFiles(char*, char const*, char const*)+0x4e>
c000ceca:	3c 2f                	cmp    al,0x2f
c000cecc:	75 18                	jne    c000cee6 <Fs::standardiseFiles(char*, char const*, char const*)+0x66>
c000cece:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c000ced1:	3c 60                	cmp    al,0x60
c000ced3:	7e 03                	jle    c000ced8 <Fs::standardiseFiles(char*, char const*, char const*)+0x58>
c000ced5:	83 e8 20             	sub    eax,0x20
c000ced8:	88 04 24             	mov    BYTE PTR [esp],al
c000cedb:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c000cee2:	50                   	push   eax
c000cee3:	50                   	push   eax
c000cee4:	eb 18                	jmp    c000cefe <Fs::standardiseFiles(char*, char const*, char const*)+0x7e>
c000cee6:	50                   	push   eax
c000cee7:	50                   	push   eax
c000cee8:	55                   	push   ebp
c000cee9:	56                   	push   esi
c000ceea:	e8 51 38 ff ff       	call   c0000740 <strcpy>
c000ceef:	5a                   	pop    edx
c000cef0:	59                   	pop    ecx
c000cef1:	68 9a 48 02 c0       	push   0xc002489a
c000cef6:	56                   	push   esi
c000cef7:	e8 84 39 ff ff       	call   c0000880 <strcat>
c000cefc:	5d                   	pop    ebp
c000cefd:	58                   	pop    eax
c000cefe:	57                   	push   edi
c000ceff:	56                   	push   esi
c000cf00:	e8 7b 39 ff ff       	call   c0000880 <strcat>
c000cf05:	83 c4 10             	add    esp,0x10
c000cf08:	8a 04 24             	mov    al,BYTE PTR [esp]
c000cf0b:	3c 60                	cmp    al,0x60
c000cf0d:	7e 03                	jle    c000cf12 <Fs::standardiseFiles(char*, char const*, char const*)+0x92>
c000cf0f:	83 e8 20             	sub    eax,0x20
c000cf12:	88 04 24             	mov    BYTE PTR [esp],al
c000cf15:	88 03                	mov    BYTE PTR [ebx],al
c000cf17:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c000cf1e:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c000cf24:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c000cf28:	bf 03 00 00 00       	mov    edi,0x3
c000cf2d:	b8 03 00 00 00       	mov    eax,0x3
c000cf32:	8a 14 3c             	mov    dl,BYTE PTR [esp+edi*1]
c000cf35:	84 d2                	test   dl,dl
c000cf37:	0f 84 91 00 00 00    	je     c000cfce <Fs::standardiseFiles(char*, char const*, char const*)+0x14e>
c000cf3d:	8d 4f 01             	lea    ecx,[edi+0x1]
c000cf40:	80 fa 5c             	cmp    dl,0x5c
c000cf43:	74 05                	je     c000cf4a <Fs::standardiseFiles(char*, char const*, char const*)+0xca>
c000cf45:	80 fa 2f             	cmp    dl,0x2f
c000cf48:	75 12                	jne    c000cf5c <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c000cf4a:	89 c5                	mov    ebp,eax
c000cf4c:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c000cf51:	74 09                	je     c000cf5c <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c000cf53:	40                   	inc    eax
c000cf54:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c000cf58:	89 cf                	mov    edi,ecx
c000cf5a:	eb d6                	jmp    c000cf32 <Fs::standardiseFiles(char*, char const*, char const*)+0xb2>
c000cf5c:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c000cf61:	75 5b                	jne    c000cfbe <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c000cf63:	80 fa 2e             	cmp    dl,0x2e
c000cf66:	75 56                	jne    c000cfbe <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c000cf68:	80 3c 0c 2e          	cmp    BYTE PTR [esp+ecx*1],0x2e
c000cf6c:	74 19                	je     c000cf87 <Fs::standardiseFiles(char*, char const*, char const*)+0x107>
c000cf6e:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c000cf73:	74 53                	je     c000cfc8 <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c000cf75:	89 f9                	mov    ecx,edi
c000cf77:	41                   	inc    ecx
c000cf78:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c000cf7b:	80 fa 2f             	cmp    dl,0x2f
c000cf7e:	74 f7                	je     c000cf77 <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c000cf80:	80 fa 5c             	cmp    dl,0x5c
c000cf83:	74 f2                	je     c000cf77 <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c000cf85:	eb d1                	jmp    c000cf58 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000cf87:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c000cf8c:	74 3a                	je     c000cfc8 <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c000cf8e:	83 f8 03             	cmp    eax,0x3
c000cf91:	74 c5                	je     c000cf58 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000cf93:	41                   	inc    ecx
c000cf94:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c000cf97:	80 fa 2f             	cmp    dl,0x2f
c000cf9a:	74 f7                	je     c000cf93 <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c000cf9c:	80 fa 5c             	cmp    dl,0x5c
c000cf9f:	74 f2                	je     c000cf93 <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c000cfa1:	48                   	dec    eax
c000cfa2:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000cfa6:	75 06                	jne    c000cfae <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c000cfa8:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000cfac:	eb f3                	jmp    c000cfa1 <Fs::standardiseFiles(char*, char const*, char const*)+0x121>
c000cfae:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000cfb2:	74 07                	je     c000cfbb <Fs::standardiseFiles(char*, char const*, char const*)+0x13b>
c000cfb4:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000cfb8:	48                   	dec    eax
c000cfb9:	eb f3                	jmp    c000cfae <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c000cfbb:	40                   	inc    eax
c000cfbc:	eb 9a                	jmp    c000cf58 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000cfbe:	80 fa 2f             	cmp    dl,0x2f
c000cfc1:	74 95                	je     c000cf58 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000cfc3:	80 fa 5c             	cmp    dl,0x5c
c000cfc6:	74 90                	je     c000cf58 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000cfc8:	88 14 03             	mov    BYTE PTR [ebx+eax*1],dl
c000cfcb:	40                   	inc    eax
c000cfcc:	eb 8a                	jmp    c000cf58 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000cfce:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000cfd2:	83 ec 0c             	sub    esp,0xc
c000cfd5:	53                   	push   ebx
c000cfd6:	e8 c5 36 ff ff       	call   c00006a0 <strlen>
c000cfdb:	83 c4 10             	add    esp,0x10
c000cfde:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c000cfe3:	75 26                	jne    c000d00b <Fs::standardiseFiles(char*, char const*, char const*)+0x18b>
c000cfe5:	83 ec 0c             	sub    esp,0xc
c000cfe8:	53                   	push   ebx
c000cfe9:	e8 b2 36 ff ff       	call   c00006a0 <strlen>
c000cfee:	83 c4 10             	add    esp,0x10
c000cff1:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c000cff6:	74 26                	je     c000d01e <Fs::standardiseFiles(char*, char const*, char const*)+0x19e>
c000cff8:	83 ec 0c             	sub    esp,0xc
c000cffb:	53                   	push   ebx
c000cffc:	e8 9f 36 ff ff       	call   c00006a0 <strlen>
c000d001:	83 c4 10             	add    esp,0x10
c000d004:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c000d009:	eb c7                	jmp    c000cfd2 <Fs::standardiseFiles(char*, char const*, char const*)+0x152>
c000d00b:	83 ec 0c             	sub    esp,0xc
c000d00e:	53                   	push   ebx
c000d00f:	e8 8c 36 ff ff       	call   c00006a0 <strlen>
c000d014:	83 c4 10             	add    esp,0x10
c000d017:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c000d01c:	74 c7                	je     c000cfe5 <Fs::standardiseFiles(char*, char const*, char const*)+0x165>
c000d01e:	81 c4 0c 04 00 00    	add    esp,0x40c
c000d024:	5b                   	pop    ebx
c000d025:	5e                   	pop    esi
c000d026:	5f                   	pop    edi
c000d027:	5d                   	pop    ebp
c000d028:	c3                   	ret    
c000d029:	90                   	nop

c000d02a <File::File(char const*, Process*)>:
c000d02a:	83 ec 0c             	sub    esp,0xc
c000d02d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d031:	83 ec 08             	sub    esp,0x8
c000d034:	6a 00                	push   0x0
c000d036:	50                   	push   eax
c000d037:	e8 6e e2 ff ff       	call   c000b2aa <UnixFile::UnixFile(int)>
c000d03c:	83 c4 10             	add    esp,0x10
c000d03f:	ba 64 32 02 c0       	mov    edx,0xc0023264
c000d044:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d048:	89 10                	mov    DWORD PTR [eax],edx
c000d04a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000d04e:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c000d054:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d058:	83 c0 0d             	add    eax,0xd
c000d05b:	83 ec 04             	sub    esp,0x4
c000d05e:	52                   	push   edx
c000d05f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d063:	50                   	push   eax
c000d064:	e8 17 fe ff ff       	call   c000ce80 <Fs::standardiseFiles(char*, char const*, char const*)>
c000d069:	83 c4 10             	add    esp,0x10
c000d06c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d070:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000d073:	8d 50 bf             	lea    edx,[eax-0x41]
c000d076:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d07a:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000d080:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d084:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000d088:	90                   	nop
c000d089:	83 c4 0c             	add    esp,0xc
c000d08c:	c3                   	ret    
c000d08d:	90                   	nop

c000d08e <File::open(FileOpenMode)>:
c000d08e:	53                   	push   ebx
c000d08f:	b8 0b 00 00 00       	mov    eax,0xb
c000d094:	83 ec 08             	sub    esp,0x8
c000d097:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000d09b:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000d0a2:	80 fa 19             	cmp    dl,0x19
c000d0a5:	77 40                	ja     c000d0e7 <File::open(FileOpenMode)+0x59>
c000d0a7:	8b 14 95 20 6a 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd95e0]
c000d0ae:	85 d2                	test   edx,edx
c000d0b0:	74 35                	je     c000d0e7 <File::open(FileOpenMode)+0x59>
c000d0b2:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000d0b8:	85 d2                	test   edx,edx
c000d0ba:	74 2b                	je     c000d0e7 <File::open(FileOpenMode)+0x59>
c000d0bc:	b8 06 00 00 00       	mov    eax,0x6
c000d0c1:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000d0c5:	75 20                	jne    c000d0e7 <File::open(FileOpenMode)+0x59>
c000d0c7:	8b 02                	mov    eax,DWORD PTR [edx]
c000d0c9:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000d0cf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d0d3:	51                   	push   ecx
c000d0d4:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000d0d7:	51                   	push   ecx
c000d0d8:	52                   	push   edx
c000d0d9:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000d0dc:	83 c4 10             	add    esp,0x10
c000d0df:	85 c0                	test   eax,eax
c000d0e1:	75 04                	jne    c000d0e7 <File::open(FileOpenMode)+0x59>
c000d0e3:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000d0e7:	83 c4 08             	add    esp,0x8
c000d0ea:	5b                   	pop    ebx
c000d0eb:	c3                   	ret    

c000d0ec <File::close()>:
c000d0ec:	53                   	push   ebx
c000d0ed:	b8 0b 00 00 00       	mov    eax,0xb
c000d0f2:	83 ec 08             	sub    esp,0x8
c000d0f5:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000d0f9:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000d100:	80 fa 19             	cmp    dl,0x19
c000d103:	77 41                	ja     c000d146 <File::close()+0x5a>
c000d105:	8b 1c 95 20 6a 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd95e0]
c000d10c:	85 db                	test   ebx,ebx
c000d10e:	74 36                	je     c000d146 <File::close()+0x5a>
c000d110:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c000d117:	74 2d                	je     c000d146 <File::close()+0x5a>
c000d119:	b8 05 00 00 00       	mov    eax,0x5
c000d11e:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000d122:	74 22                	je     c000d146 <File::close()+0x5a>
c000d124:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c000d128:	8b 04 95 20 6a 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd95e0]
c000d12f:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000d135:	53                   	push   ebx
c000d136:	53                   	push   ebx
c000d137:	8b 10                	mov    edx,DWORD PTR [eax]
c000d139:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000d13f:	50                   	push   eax
c000d140:	ff 52 1c             	call   DWORD PTR [edx+0x1c]
c000d143:	83 c4 10             	add    esp,0x10
c000d146:	83 c4 08             	add    esp,0x8
c000d149:	5b                   	pop    ebx
c000d14a:	c3                   	ret    
c000d14b:	90                   	nop

c000d14c <File::seek(unsigned long long)>:
c000d14c:	56                   	push   esi
c000d14d:	53                   	push   ebx
c000d14e:	b8 0b 00 00 00       	mov    eax,0xb
c000d153:	51                   	push   ecx
c000d154:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000d158:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000d15c:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c000d163:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000d167:	80 fa 19             	cmp    dl,0x19
c000d16a:	77 31                	ja     c000d19d <File::seek(unsigned long long)+0x51>
c000d16c:	8b 14 95 20 6a 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd95e0]
c000d173:	85 d2                	test   edx,edx
c000d175:	74 26                	je     c000d19d <File::seek(unsigned long long)+0x51>
c000d177:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000d17d:	85 d2                	test   edx,edx
c000d17f:	74 1c                	je     c000d19d <File::seek(unsigned long long)+0x51>
c000d181:	b8 05 00 00 00       	mov    eax,0x5
c000d186:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c000d18a:	74 11                	je     c000d19d <File::seek(unsigned long long)+0x51>
c000d18c:	8b 02                	mov    eax,DWORD PTR [edx]
c000d18e:	53                   	push   ebx
c000d18f:	51                   	push   ecx
c000d190:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c000d196:	52                   	push   edx
c000d197:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000d19a:	83 c4 10             	add    esp,0x10
c000d19d:	5a                   	pop    edx
c000d19e:	5b                   	pop    ebx
c000d19f:	5e                   	pop    esi
c000d1a0:	c3                   	ret    
c000d1a1:	90                   	nop

c000d1a2 <File::tell(unsigned long long*)>:
c000d1a2:	83 ec 0c             	sub    esp,0xc
c000d1a5:	b8 0b 00 00 00       	mov    eax,0xb
c000d1aa:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000d1ae:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000d1b5:	80 fa 19             	cmp    dl,0x19
c000d1b8:	77 34                	ja     c000d1ee <File::tell(unsigned long long*)+0x4c>
c000d1ba:	8b 14 95 20 6a 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd95e0]
c000d1c1:	85 d2                	test   edx,edx
c000d1c3:	74 29                	je     c000d1ee <File::tell(unsigned long long*)+0x4c>
c000d1c5:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000d1cb:	85 d2                	test   edx,edx
c000d1cd:	74 1f                	je     c000d1ee <File::tell(unsigned long long*)+0x4c>
c000d1cf:	b8 05 00 00 00       	mov    eax,0x5
c000d1d4:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000d1d8:	74 14                	je     c000d1ee <File::tell(unsigned long long*)+0x4c>
c000d1da:	50                   	push   eax
c000d1db:	8b 02                	mov    eax,DWORD PTR [edx]
c000d1dd:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d1e1:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000d1e7:	52                   	push   edx
c000d1e8:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000d1eb:	83 c4 10             	add    esp,0x10
c000d1ee:	83 c4 0c             	add    esp,0xc
c000d1f1:	c3                   	ret    

c000d1f2 <File::rewind()>:
c000d1f2:	83 ec 10             	sub    esp,0x10
c000d1f5:	6a 00                	push   0x0
c000d1f7:	6a 00                	push   0x0
c000d1f9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d1fd:	e8 4a ff ff ff       	call   c000d14c <File::seek(unsigned long long)>
c000d202:	83 c4 1c             	add    esp,0x1c
c000d205:	c3                   	ret    

c000d206 <File::unlink()>:
c000d206:	83 ec 0c             	sub    esp,0xc
c000d209:	b8 0b 00 00 00       	mov    eax,0xb
c000d20e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d212:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000d219:	80 f9 19             	cmp    cl,0x19
c000d21c:	77 2f                	ja     c000d24d <File::unlink()+0x47>
c000d21e:	8b 0c 8d 20 6a 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd95e0]
c000d225:	85 c9                	test   ecx,ecx
c000d227:	74 24                	je     c000d24d <File::unlink()+0x47>
c000d229:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000d22f:	85 c9                	test   ecx,ecx
c000d231:	74 1a                	je     c000d24d <File::unlink()+0x47>
c000d233:	b8 06 00 00 00       	mov    eax,0x6
c000d238:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000d23c:	75 0f                	jne    c000d24d <File::unlink()+0x47>
c000d23e:	83 c2 0d             	add    edx,0xd
c000d241:	50                   	push   eax
c000d242:	50                   	push   eax
c000d243:	8b 01                	mov    eax,DWORD PTR [ecx]
c000d245:	52                   	push   edx
c000d246:	51                   	push   ecx
c000d247:	ff 50 38             	call   DWORD PTR [eax+0x38]
c000d24a:	83 c4 10             	add    esp,0x10
c000d24d:	83 c4 0c             	add    esp,0xc
c000d250:	c3                   	ret    
c000d251:	90                   	nop

c000d252 <File::rename(char const*)>:
c000d252:	83 ec 0c             	sub    esp,0xc
c000d255:	b8 0b 00 00 00       	mov    eax,0xb
c000d25a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d25e:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000d265:	80 f9 19             	cmp    cl,0x19
c000d268:	77 32                	ja     c000d29c <File::rename(char const*)+0x4a>
c000d26a:	8b 0c 8d 20 6a 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd95e0]
c000d271:	85 c9                	test   ecx,ecx
c000d273:	74 27                	je     c000d29c <File::rename(char const*)+0x4a>
c000d275:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000d27b:	85 c9                	test   ecx,ecx
c000d27d:	74 1d                	je     c000d29c <File::rename(char const*)+0x4a>
c000d27f:	b8 06 00 00 00       	mov    eax,0x6
c000d284:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000d288:	75 12                	jne    c000d29c <File::rename(char const*)+0x4a>
c000d28a:	83 c2 0d             	add    edx,0xd
c000d28d:	50                   	push   eax
c000d28e:	8b 01                	mov    eax,DWORD PTR [ecx]
c000d290:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d294:	52                   	push   edx
c000d295:	51                   	push   ecx
c000d296:	ff 50 40             	call   DWORD PTR [eax+0x40]
c000d299:	83 c4 10             	add    esp,0x10
c000d29c:	83 c4 0c             	add    esp,0xc
c000d29f:	c3                   	ret    

c000d2a0 <File::chfatattr(unsigned char, unsigned char)>:
c000d2a0:	57                   	push   edi
c000d2a1:	b8 0b 00 00 00       	mov    eax,0xb
c000d2a6:	56                   	push   esi
c000d2a7:	53                   	push   ebx
c000d2a8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d2ac:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000d2b0:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000d2b7:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000d2bb:	80 f9 19             	cmp    cl,0x19
c000d2be:	77 37                	ja     c000d2f7 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000d2c0:	8b 0c 8d 20 6a 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd95e0]
c000d2c7:	85 c9                	test   ecx,ecx
c000d2c9:	74 2c                	je     c000d2f7 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000d2cb:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000d2d1:	85 c9                	test   ecx,ecx
c000d2d3:	74 22                	je     c000d2f7 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000d2d5:	b8 06 00 00 00       	mov    eax,0x6
c000d2da:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000d2de:	75 17                	jne    c000d2f7 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000d2e0:	8b 39                	mov    edi,DWORD PTR [ecx]
c000d2e2:	89 f0                	mov    eax,esi
c000d2e4:	83 c2 0d             	add    edx,0xd
c000d2e7:	0f b6 f0             	movzx  esi,al
c000d2ea:	0f b6 db             	movzx  ebx,bl
c000d2ed:	56                   	push   esi
c000d2ee:	53                   	push   ebx
c000d2ef:	52                   	push   edx
c000d2f0:	51                   	push   ecx
c000d2f1:	ff 57 34             	call   DWORD PTR [edi+0x34]
c000d2f4:	83 c4 10             	add    esp,0x10
c000d2f7:	5b                   	pop    ebx
c000d2f8:	5e                   	pop    esi
c000d2f9:	5f                   	pop    edi
c000d2fa:	c3                   	ret    
c000d2fb:	90                   	nop

c000d2fc <File::exists()>:
c000d2fc:	83 ec 0c             	sub    esp,0xc
c000d2ff:	31 c0                	xor    eax,eax
c000d301:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d305:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000d30c:	80 f9 19             	cmp    cl,0x19
c000d30f:	77 24                	ja     c000d335 <File::exists()+0x39>
c000d311:	8b 0c 8d 20 6a 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd95e0]
c000d318:	85 c9                	test   ecx,ecx
c000d31a:	74 19                	je     c000d335 <File::exists()+0x39>
c000d31c:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000d322:	85 c9                	test   ecx,ecx
c000d324:	74 0f                	je     c000d335 <File::exists()+0x39>
c000d326:	83 c2 0d             	add    edx,0xd
c000d329:	50                   	push   eax
c000d32a:	50                   	push   eax
c000d32b:	8b 01                	mov    eax,DWORD PTR [ecx]
c000d32d:	52                   	push   edx
c000d32e:	51                   	push   ecx
c000d32f:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000d332:	83 c4 10             	add    esp,0x10
c000d335:	83 c4 0c             	add    esp,0xc
c000d338:	c3                   	ret    
c000d339:	90                   	nop

c000d33a <File::stat(unsigned long long*, bool*)>:
c000d33a:	56                   	push   esi
c000d33b:	53                   	push   ebx
c000d33c:	50                   	push   eax
c000d33d:	b8 0b 00 00 00       	mov    eax,0xb
c000d342:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d346:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000d34a:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000d351:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000d355:	80 f9 19             	cmp    cl,0x19
c000d358:	77 3d                	ja     c000d397 <File::stat(unsigned long long*, bool*)+0x5d>
c000d35a:	8b 0c 8d 20 6a 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd95e0]
c000d361:	85 c9                	test   ecx,ecx
c000d363:	74 32                	je     c000d397 <File::stat(unsigned long long*, bool*)+0x5d>
c000d365:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000d36b:	85 c9                	test   ecx,ecx
c000d36d:	74 28                	je     c000d397 <File::stat(unsigned long long*, bool*)+0x5d>
c000d36f:	8b 01                	mov    eax,DWORD PTR [ecx]
c000d371:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000d375:	74 13                	je     c000d38a <File::stat(unsigned long long*, bool*)+0x50>
c000d377:	83 ec 04             	sub    esp,0x4
c000d37a:	56                   	push   esi
c000d37b:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c000d381:	51                   	push   ecx
c000d382:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c000d385:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000d388:	eb 0a                	jmp    c000d394 <File::stat(unsigned long long*, bool*)+0x5a>
c000d38a:	53                   	push   ebx
c000d38b:	83 c2 0d             	add    edx,0xd
c000d38e:	56                   	push   esi
c000d38f:	52                   	push   edx
c000d390:	51                   	push   ecx
c000d391:	ff 50 30             	call   DWORD PTR [eax+0x30]
c000d394:	83 c4 10             	add    esp,0x10
c000d397:	5a                   	pop    edx
c000d398:	5b                   	pop    ebx
c000d399:	5e                   	pop    esi
c000d39a:	c3                   	ret    

c000d39b <Fs::setcwd(Process*, char*)>:
c000d39b:	55                   	push   ebp
c000d39c:	57                   	push   edi
c000d39d:	56                   	push   esi
c000d39e:	53                   	push   ebx
c000d39f:	81 ec 20 02 00 00    	sub    esp,0x220
c000d3a5:	8b ac 24 34 02 00 00 	mov    ebp,DWORD PTR [esp+0x234]
c000d3ac:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c000d3b2:	57                   	push   edi
c000d3b3:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c000d3ba:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c000d3be:	56                   	push   esi
c000d3bf:	e8 bc fa ff ff       	call   c000ce80 <Fs::standardiseFiles(char*, char const*, char const*)>
c000d3c4:	89 34 24             	mov    DWORD PTR [esp],esi
c000d3c7:	e8 d4 32 ff ff       	call   c00006a0 <strlen>
c000d3cc:	83 c4 10             	add    esp,0x10
c000d3cf:	83 f8 02             	cmp    eax,0x2
c000d3d2:	77 17                	ja     c000d3eb <Fs::setcwd(Process*, char*)+0x50>
c000d3d4:	0f be 44 24 10       	movsx  eax,BYTE PTR [esp+0x10]
c000d3d9:	83 e8 41             	sub    eax,0x41
c000d3dc:	83 f8 19             	cmp    eax,0x19
c000d3df:	76 24                	jbe    c000d405 <Fs::setcwd(Process*, char*)+0x6a>
c000d3e1:	b8 03 00 00 00       	mov    eax,0x3
c000d3e6:	e9 e0 00 00 00       	jmp    c000d4cb <Fs::setcwd(Process*, char*)+0x130>
c000d3eb:	83 ec 0c             	sub    esp,0xc
c000d3ee:	56                   	push   esi
c000d3ef:	e8 ac 32 ff ff       	call   c00006a0 <strlen>
c000d3f4:	83 c4 10             	add    esp,0x10
c000d3f7:	83 f8 03             	cmp    eax,0x3
c000d3fa:	75 34                	jne    c000d430 <Fs::setcwd(Process*, char*)+0x95>
c000d3fc:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c000d401:	75 2d                	jne    c000d430 <Fs::setcwd(Process*, char*)+0x95>
c000d403:	eb cf                	jmp    c000d3d4 <Fs::setcwd(Process*, char*)+0x39>
c000d405:	8b 14 85 20 6a 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd95e0]
c000d40c:	b8 05 00 00 00       	mov    eax,0x5
c000d411:	85 d2                	test   edx,edx
c000d413:	0f 84 b2 00 00 00    	je     c000d4cb <Fs::setcwd(Process*, char*)+0x130>
c000d419:	b8 06 00 00 00       	mov    eax,0x6
c000d41e:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c000d425:	0f 85 92 00 00 00    	jne    c000d4bd <Fs::setcwd(Process*, char*)+0x122>
c000d42b:	e9 9b 00 00 00       	jmp    c000d4cb <Fs::setcwd(Process*, char*)+0x130>
c000d430:	83 ec 0c             	sub    esp,0xc
c000d433:	68 14 01 00 00       	push   0x114
c000d438:	e8 86 c5 ff ff       	call   c00099c3 <malloc>
c000d43d:	83 c4 0c             	add    esp,0xc
c000d440:	89 c3                	mov    ebx,eax
c000d442:	55                   	push   ebp
c000d443:	56                   	push   esi
c000d444:	50                   	push   eax
c000d445:	e8 e0 fb ff ff       	call   c000d02a <File::File(char const*, Process*)>
c000d44a:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c000d44f:	83 c4 0c             	add    esp,0xc
c000d452:	8d 44 24 0b          	lea    eax,[esp+0xb]
c000d456:	50                   	push   eax
c000d457:	8d 44 24 10          	lea    eax,[esp+0x10]
c000d45b:	50                   	push   eax
c000d45c:	53                   	push   ebx
c000d45d:	e8 d8 fe ff ff       	call   c000d33a <File::stat(unsigned long long*, bool*)>
c000d462:	83 c4 10             	add    esp,0x10
c000d465:	83 f8 02             	cmp    eax,0x2
c000d468:	74 04                	je     c000d46e <Fs::setcwd(Process*, char*)+0xd3>
c000d46a:	85 c0                	test   eax,eax
c000d46c:	74 1c                	je     c000d48a <Fs::setcwd(Process*, char*)+0xef>
c000d46e:	b8 01 00 00 00       	mov    eax,0x1
c000d473:	85 db                	test   ebx,ebx
c000d475:	74 54                	je     c000d4cb <Fs::setcwd(Process*, char*)+0x130>
c000d477:	83 ec 0c             	sub    esp,0xc
c000d47a:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d47c:	53                   	push   ebx
c000d47d:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000d480:	83 c4 10             	add    esp,0x10
c000d483:	b8 01 00 00 00       	mov    eax,0x1
c000d488:	eb 41                	jmp    c000d4cb <Fs::setcwd(Process*, char*)+0x130>
c000d48a:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000d48f:	75 1c                	jne    c000d4ad <Fs::setcwd(Process*, char*)+0x112>
c000d491:	b8 02 00 00 00       	mov    eax,0x2
c000d496:	85 db                	test   ebx,ebx
c000d498:	74 31                	je     c000d4cb <Fs::setcwd(Process*, char*)+0x130>
c000d49a:	83 ec 0c             	sub    esp,0xc
c000d49d:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d49f:	53                   	push   ebx
c000d4a0:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000d4a3:	83 c4 10             	add    esp,0x10
c000d4a6:	b8 02 00 00 00       	mov    eax,0x2
c000d4ab:	eb 1e                	jmp    c000d4cb <Fs::setcwd(Process*, char*)+0x130>
c000d4ad:	85 db                	test   ebx,ebx
c000d4af:	74 0c                	je     c000d4bd <Fs::setcwd(Process*, char*)+0x122>
c000d4b1:	83 ec 0c             	sub    esp,0xc
c000d4b4:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d4b6:	53                   	push   ebx
c000d4b7:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000d4ba:	83 c4 10             	add    esp,0x10
c000d4bd:	50                   	push   eax
c000d4be:	50                   	push   eax
c000d4bf:	56                   	push   esi
c000d4c0:	57                   	push   edi
c000d4c1:	e8 7a 32 ff ff       	call   c0000740 <strcpy>
c000d4c6:	83 c4 10             	add    esp,0x10
c000d4c9:	31 c0                	xor    eax,eax
c000d4cb:	81 c4 1c 02 00 00    	add    esp,0x21c
c000d4d1:	5b                   	pop    ebx
c000d4d2:	5e                   	pop    esi
c000d4d3:	5f                   	pop    edi
c000d4d4:	5d                   	pop    ebp
c000d4d5:	c3                   	ret    

c000d4d6 <Directory::Directory(char const*, Process*)>:
c000d4d6:	83 ec 0c             	sub    esp,0xc
c000d4d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d4dd:	83 ec 08             	sub    esp,0x8
c000d4e0:	6a 00                	push   0x0
c000d4e2:	50                   	push   eax
c000d4e3:	e8 c2 dd ff ff       	call   c000b2aa <UnixFile::UnixFile(int)>
c000d4e8:	83 c4 10             	add    esp,0x10
c000d4eb:	ba 80 32 02 c0       	mov    edx,0xc0023280
c000d4f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d4f4:	89 10                	mov    DWORD PTR [eax],edx
c000d4f6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000d4fa:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c000d500:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d504:	83 c0 0d             	add    eax,0xd
c000d507:	83 ec 04             	sub    esp,0x4
c000d50a:	52                   	push   edx
c000d50b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d50f:	50                   	push   eax
c000d510:	e8 6b f9 ff ff       	call   c000ce80 <Fs::standardiseFiles(char*, char const*, char const*)>
c000d515:	83 c4 10             	add    esp,0x10
c000d518:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d51c:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000d51f:	8d 50 bf             	lea    edx,[eax-0x41]
c000d522:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d526:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000d52c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d530:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000d534:	90                   	nop
c000d535:	83 c4 0c             	add    esp,0xc
c000d538:	c3                   	ret    
c000d539:	90                   	nop

c000d53a <Directory::open()>:
c000d53a:	53                   	push   ebx
c000d53b:	b8 0b 00 00 00       	mov    eax,0xb
c000d540:	83 ec 08             	sub    esp,0x8
c000d543:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000d547:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000d54e:	80 fa 19             	cmp    dl,0x19
c000d551:	77 3d                	ja     c000d590 <Directory::open()+0x56>
c000d553:	8b 14 95 20 6a 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd95e0]
c000d55a:	85 d2                	test   edx,edx
c000d55c:	74 32                	je     c000d590 <Directory::open()+0x56>
c000d55e:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000d564:	85 d2                	test   edx,edx
c000d566:	74 28                	je     c000d590 <Directory::open()+0x56>
c000d568:	b8 06 00 00 00       	mov    eax,0x6
c000d56d:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000d571:	75 1d                	jne    c000d590 <Directory::open()+0x56>
c000d573:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000d579:	50                   	push   eax
c000d57a:	8b 02                	mov    eax,DWORD PTR [edx]
c000d57c:	51                   	push   ecx
c000d57d:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000d580:	51                   	push   ecx
c000d581:	52                   	push   edx
c000d582:	ff 50 4c             	call   DWORD PTR [eax+0x4c]
c000d585:	83 c4 10             	add    esp,0x10
c000d588:	85 c0                	test   eax,eax
c000d58a:	75 04                	jne    c000d590 <Directory::open()+0x56>
c000d58c:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000d590:	83 c4 08             	add    esp,0x8
c000d593:	5b                   	pop    ebx
c000d594:	c3                   	ret    
c000d595:	90                   	nop

c000d596 <Directory::close()>:
c000d596:	53                   	push   ebx
c000d597:	b8 0b 00 00 00       	mov    eax,0xb
c000d59c:	83 ec 08             	sub    esp,0x8
c000d59f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000d5a3:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000d5aa:	80 fa 19             	cmp    dl,0x19
c000d5ad:	77 41                	ja     c000d5f0 <Directory::close()+0x5a>
c000d5af:	8b 1c 95 20 6a 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd95e0]
c000d5b6:	85 db                	test   ebx,ebx
c000d5b8:	74 36                	je     c000d5f0 <Directory::close()+0x5a>
c000d5ba:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c000d5c1:	74 2d                	je     c000d5f0 <Directory::close()+0x5a>
c000d5c3:	b8 05 00 00 00       	mov    eax,0x5
c000d5c8:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000d5cc:	74 22                	je     c000d5f0 <Directory::close()+0x5a>
c000d5ce:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c000d5d2:	8b 04 95 20 6a 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd95e0]
c000d5d9:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000d5df:	53                   	push   ebx
c000d5e0:	53                   	push   ebx
c000d5e1:	8b 10                	mov    edx,DWORD PTR [eax]
c000d5e3:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000d5e9:	50                   	push   eax
c000d5ea:	ff 52 20             	call   DWORD PTR [edx+0x20]
c000d5ed:	83 c4 10             	add    esp,0x10
c000d5f0:	83 c4 08             	add    esp,0x8
c000d5f3:	5b                   	pop    ebx
c000d5f4:	c3                   	ret    
c000d5f5:	90                   	nop

c000d5f6 <Directory::unlink()>:
c000d5f6:	83 ec 0c             	sub    esp,0xc
c000d5f9:	b8 0b 00 00 00       	mov    eax,0xb
c000d5fe:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d602:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000d609:	80 f9 19             	cmp    cl,0x19
c000d60c:	77 2f                	ja     c000d63d <Directory::unlink()+0x47>
c000d60e:	8b 0c 8d 20 6a 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd95e0]
c000d615:	85 c9                	test   ecx,ecx
c000d617:	74 24                	je     c000d63d <Directory::unlink()+0x47>
c000d619:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000d61f:	85 c9                	test   ecx,ecx
c000d621:	74 1a                	je     c000d63d <Directory::unlink()+0x47>
c000d623:	b8 06 00 00 00       	mov    eax,0x6
c000d628:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000d62c:	75 0f                	jne    c000d63d <Directory::unlink()+0x47>
c000d62e:	83 c2 0d             	add    edx,0xd
c000d631:	50                   	push   eax
c000d632:	50                   	push   eax
c000d633:	8b 01                	mov    eax,DWORD PTR [ecx]
c000d635:	52                   	push   edx
c000d636:	51                   	push   ecx
c000d637:	ff 50 38             	call   DWORD PTR [eax+0x38]
c000d63a:	83 c4 10             	add    esp,0x10
c000d63d:	83 c4 0c             	add    esp,0xc
c000d640:	c3                   	ret    
c000d641:	90                   	nop

c000d642 <Directory::rename(char const*)>:
c000d642:	83 ec 0c             	sub    esp,0xc
c000d645:	b8 0b 00 00 00       	mov    eax,0xb
c000d64a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d64e:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000d655:	80 f9 19             	cmp    cl,0x19
c000d658:	77 32                	ja     c000d68c <Directory::rename(char const*)+0x4a>
c000d65a:	8b 0c 8d 20 6a 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd95e0]
c000d661:	85 c9                	test   ecx,ecx
c000d663:	74 27                	je     c000d68c <Directory::rename(char const*)+0x4a>
c000d665:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000d66b:	85 c9                	test   ecx,ecx
c000d66d:	74 1d                	je     c000d68c <Directory::rename(char const*)+0x4a>
c000d66f:	b8 06 00 00 00       	mov    eax,0x6
c000d674:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000d678:	75 12                	jne    c000d68c <Directory::rename(char const*)+0x4a>
c000d67a:	83 c2 0d             	add    edx,0xd
c000d67d:	50                   	push   eax
c000d67e:	8b 01                	mov    eax,DWORD PTR [ecx]
c000d680:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d684:	52                   	push   edx
c000d685:	51                   	push   ecx
c000d686:	ff 50 40             	call   DWORD PTR [eax+0x40]
c000d689:	83 c4 10             	add    esp,0x10
c000d68c:	83 c4 0c             	add    esp,0xc
c000d68f:	c3                   	ret    

c000d690 <Directory::exists()>:
c000d690:	83 ec 0c             	sub    esp,0xc
c000d693:	31 c0                	xor    eax,eax
c000d695:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d699:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000d6a0:	80 f9 19             	cmp    cl,0x19
c000d6a3:	77 24                	ja     c000d6c9 <Directory::exists()+0x39>
c000d6a5:	8b 0c 8d 20 6a 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd95e0]
c000d6ac:	85 c9                	test   ecx,ecx
c000d6ae:	74 19                	je     c000d6c9 <Directory::exists()+0x39>
c000d6b0:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000d6b6:	85 c9                	test   ecx,ecx
c000d6b8:	74 0f                	je     c000d6c9 <Directory::exists()+0x39>
c000d6ba:	83 c2 0d             	add    edx,0xd
c000d6bd:	50                   	push   eax
c000d6be:	50                   	push   eax
c000d6bf:	8b 01                	mov    eax,DWORD PTR [ecx]
c000d6c1:	52                   	push   edx
c000d6c2:	51                   	push   ecx
c000d6c3:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000d6c6:	83 c4 10             	add    esp,0x10
c000d6c9:	83 c4 0c             	add    esp,0xc
c000d6cc:	c3                   	ret    
c000d6cd:	90                   	nop

c000d6ce <Directory::read(dirent*)>:
c000d6ce:	83 ec 1c             	sub    esp,0x1c
c000d6d1:	b8 0b 00 00 00       	mov    eax,0xb
c000d6d6:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000d6da:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000d6e1:	80 fa 19             	cmp    dl,0x19
c000d6e4:	77 30                	ja     c000d716 <Directory::read(dirent*)+0x48>
c000d6e6:	8b 14 95 20 6a 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd95e0]
c000d6ed:	85 d2                	test   edx,edx
c000d6ef:	74 25                	je     c000d716 <Directory::read(dirent*)+0x48>
c000d6f1:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c000d6f8:	74 1c                	je     c000d716 <Directory::read(dirent*)+0x48>
c000d6fa:	83 ec 0c             	sub    esp,0xc
c000d6fd:	8b 01                	mov    eax,DWORD PTR [ecx]
c000d6ff:	8d 54 24 18          	lea    edx,[esp+0x18]
c000d703:	52                   	push   edx
c000d704:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d708:	6a 00                	push   0x0
c000d70a:	68 10 01 00 00       	push   0x110
c000d70f:	51                   	push   ecx
c000d710:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000d713:	83 c4 20             	add    esp,0x20
c000d716:	83 c4 1c             	add    esp,0x1c
c000d719:	c3                   	ret    

c000d71a <Directory::create()>:
c000d71a:	83 ec 0c             	sub    esp,0xc
c000d71d:	b8 0b 00 00 00       	mov    eax,0xb
c000d722:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d726:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000d72d:	80 f9 19             	cmp    cl,0x19
c000d730:	77 2f                	ja     c000d761 <Directory::create()+0x47>
c000d732:	8b 0c 8d 20 6a 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd95e0]
c000d739:	85 c9                	test   ecx,ecx
c000d73b:	74 24                	je     c000d761 <Directory::create()+0x47>
c000d73d:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000d743:	85 c9                	test   ecx,ecx
c000d745:	74 1a                	je     c000d761 <Directory::create()+0x47>
c000d747:	b8 06 00 00 00       	mov    eax,0x6
c000d74c:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000d750:	75 0f                	jne    c000d761 <Directory::create()+0x47>
c000d752:	83 c2 0d             	add    edx,0xd
c000d755:	50                   	push   eax
c000d756:	50                   	push   eax
c000d757:	8b 01                	mov    eax,DWORD PTR [ecx]
c000d759:	52                   	push   edx
c000d75a:	51                   	push   ecx
c000d75b:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c000d75e:	83 c4 10             	add    esp,0x10
c000d761:	83 c4 0c             	add    esp,0xc
c000d764:	c3                   	ret    
c000d765:	90                   	nop

c000d766 <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c000d766:	b8 0a 00 00 00       	mov    eax,0xa
c000d76b:	c3                   	ret    

c000d76c <Bus::Bus(char const*)>:
c000d76c:	83 ec 0c             	sub    esp,0xc
c000d76f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d773:	83 ec 08             	sub    esp,0x8
c000d776:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d77a:	50                   	push   eax
c000d77b:	e8 8a 09 00 00       	call   c000e10a <Device::Device(char const*)>
c000d780:	83 c4 10             	add    esp,0x10
c000d783:	ba 9c 32 02 c0       	mov    edx,0xc002329c
c000d788:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d78c:	89 10                	mov    DWORD PTR [eax],edx
c000d78e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d792:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000d79c:	90                   	nop
c000d79d:	83 c4 0c             	add    esp,0xc
c000d7a0:	c3                   	ret    
c000d7a1:	90                   	nop
c000d7a2:	66 90                	xchg   ax,ax

c000d7a4 <Bus::~Bus()>:
c000d7a4:	83 ec 0c             	sub    esp,0xc
c000d7a7:	ba 9c 32 02 c0       	mov    edx,0xc002329c
c000d7ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d7b0:	89 10                	mov    DWORD PTR [eax],edx
c000d7b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d7b6:	83 ec 0c             	sub    esp,0xc
c000d7b9:	50                   	push   eax
c000d7ba:	e8 15 06 00 00       	call   c000ddd4 <Device::~Device()>
c000d7bf:	83 c4 10             	add    esp,0x10
c000d7c2:	90                   	nop
c000d7c3:	83 c4 0c             	add    esp,0xc
c000d7c6:	c3                   	ret    
c000d7c7:	90                   	nop

c000d7c8 <Bus::~Bus()>:
c000d7c8:	83 ec 0c             	sub    esp,0xc
c000d7cb:	83 ec 0c             	sub    esp,0xc
c000d7ce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d7d2:	e8 cd ff ff ff       	call   c000d7a4 <Bus::~Bus()>
c000d7d7:	83 c4 10             	add    esp,0x10
c000d7da:	83 ec 08             	sub    esp,0x8
c000d7dd:	68 58 01 00 00       	push   0x158
c000d7e2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d7e6:	e8 f3 f1 ff ff       	call   c000c9de <operator delete(void*, unsigned long)>
c000d7eb:	83 c4 10             	add    esp,0x10
c000d7ee:	83 c4 0c             	add    esp,0xc
c000d7f1:	c3                   	ret    
c000d7f2:	66 90                	xchg   ax,ax

c000d7f4 <Buzzer::Buzzer(char const*)>:
c000d7f4:	83 ec 0c             	sub    esp,0xc
c000d7f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d7fb:	83 ec 08             	sub    esp,0x8
c000d7fe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d802:	50                   	push   eax
c000d803:	e8 02 09 00 00       	call   c000e10a <Device::Device(char const*)>
c000d808:	83 c4 10             	add    esp,0x10
c000d80b:	ba c8 32 02 c0       	mov    edx,0xc00232c8
c000d810:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d814:	89 10                	mov    DWORD PTR [eax],edx
c000d816:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d81a:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c000d824:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d828:	c7 80 10 01 00 00 0c 00 00 00 	mov    DWORD PTR [eax+0x110],0xc
c000d832:	90                   	nop
c000d833:	83 c4 0c             	add    esp,0xc
c000d836:	c3                   	ret    
c000d837:	90                   	nop

c000d838 <Buzzer::~Buzzer()>:
c000d838:	83 ec 0c             	sub    esp,0xc
c000d83b:	ba c8 32 02 c0       	mov    edx,0xc00232c8
c000d840:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d844:	89 10                	mov    DWORD PTR [eax],edx
c000d846:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d84a:	83 ec 0c             	sub    esp,0xc
c000d84d:	50                   	push   eax
c000d84e:	e8 81 05 00 00       	call   c000ddd4 <Device::~Device()>
c000d853:	83 c4 10             	add    esp,0x10
c000d856:	90                   	nop
c000d857:	83 c4 0c             	add    esp,0xc
c000d85a:	c3                   	ret    
c000d85b:	90                   	nop

c000d85c <Buzzer::~Buzzer()>:
c000d85c:	83 ec 0c             	sub    esp,0xc
c000d85f:	83 ec 0c             	sub    esp,0xc
c000d862:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d866:	e8 cd ff ff ff       	call   c000d838 <Buzzer::~Buzzer()>
c000d86b:	83 c4 10             	add    esp,0x10
c000d86e:	83 ec 08             	sub    esp,0x8
c000d871:	68 5c 01 00 00       	push   0x15c
c000d876:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d87a:	e8 5f f1 ff ff       	call   c000c9de <operator delete(void*, unsigned long)>
c000d87f:	83 c4 10             	add    esp,0x10
c000d882:	83 c4 0c             	add    esp,0xc
c000d885:	c3                   	ret    

c000d886 <Buzzer::stop()>:
c000d886:	83 ec 14             	sub    esp,0x14
c000d889:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000d88d:	8b 10                	mov    edx,DWORD PTR [eax]
c000d88f:	6a 00                	push   0x0
c000d891:	50                   	push   eax
c000d892:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000d895:	83 c4 1c             	add    esp,0x1c
c000d898:	c3                   	ret    

c000d899 <beepThread(void*)>:
c000d899:	53                   	push   ebx
c000d89a:	83 ec 08             	sub    esp,0x8
c000d89d:	a1 28 79 02 c0       	mov    eax,ds:0xc0027928
c000d8a2:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000d8a6:	48                   	dec    eax
c000d8a7:	a3 28 79 02 c0       	mov    ds:0xc0027928,eax
c000d8ac:	75 02                	jne    c000d8b0 <beepThread(void*)+0x17>
c000d8ae:	fb                   	sti    
c000d8af:	90                   	nop
c000d8b0:	83 ec 0c             	sub    esp,0xc
c000d8b3:	6b 83 58 01 00 00 0a 	imul   eax,DWORD PTR [ebx+0x158],0xa
c000d8ba:	50                   	push   eax
c000d8bb:	e8 8c a9 00 00       	call   c001824c <milliTenthSleep(unsigned int)>
c000d8c0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000d8c3:	e8 be ff ff ff       	call   c000d886 <Buzzer::stop()>
c000d8c8:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c000d8d0:	83 c4 18             	add    esp,0x18
c000d8d3:	5b                   	pop    ebx
c000d8d4:	e9 73 a8 00 00       	jmp    c001814c <blockTask(TaskState)>
c000d8d9:	90                   	nop

c000d8da <Buzzer::beep(int, int, bool)>:
c000d8da:	57                   	push   edi
c000d8db:	56                   	push   esi
c000d8dc:	53                   	push   ebx
c000d8dd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000d8e1:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000d8e5:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000d8e9:	50                   	push   eax
c000d8ea:	50                   	push   eax
c000d8eb:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d8ed:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d8f1:	53                   	push   ebx
c000d8f2:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000d8f5:	83 c4 10             	add    esp,0x10
c000d8f8:	89 f8                	mov    eax,edi
c000d8fa:	84 c0                	test   al,al
c000d8fc:	74 1e                	je     c000d91c <Buzzer::beep(int, int, bool)+0x42>
c000d8fe:	83 ec 0c             	sub    esp,0xc
c000d901:	6b f6 0a             	imul   esi,esi,0xa
c000d904:	56                   	push   esi
c000d905:	e8 42 a9 00 00       	call   c001824c <milliTenthSleep(unsigned int)>
c000d90a:	83 c4 10             	add    esp,0x10
c000d90d:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000d911:	5b                   	pop    ebx
c000d912:	5e                   	pop    esi
c000d913:	5f                   	pop    edi
c000d914:	e9 6d ff ff ff       	jmp    c000d886 <Buzzer::stop()>
c000d919:	8d 76 00             	lea    esi,[esi+0x0]
c000d91c:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c000d922:	a1 50 79 02 c0       	mov    eax,ds:0xc0027950
c000d927:	c7 44 24 1c e6 00 00 00 	mov    DWORD PTR [esp+0x1c],0xe6
c000d92f:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000d933:	c7 44 24 14 99 d8 00 c0 	mov    DWORD PTR [esp+0x14],0xc000d899
c000d93b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d93f:	5b                   	pop    ebx
c000d940:	5e                   	pop    esi
c000d941:	5f                   	pop    edi
c000d942:	e9 f1 a3 00 00       	jmp    c0017d38 <Process::createThread(void (*)(void*), void*, int)>
c000d947:	90                   	nop

c000d948 <User::loadClockSettings(int)>:
c000d948:	53                   	push   ebx
c000d949:	83 ec 14             	sub    esp,0x14
c000d94c:	68 14 01 00 00       	push   0x114
c000d951:	e8 6d c0 ff ff       	call   c00099c3 <malloc>
c000d956:	83 c4 0c             	add    esp,0xc
c000d959:	89 c3                	mov    ebx,eax
c000d95b:	ff 35 50 79 02 c0    	push   DWORD PTR ds:0xc0027950
c000d961:	68 f0 32 02 c0       	push   0xc00232f0
c000d966:	50                   	push   eax
c000d967:	e8 be f6 ff ff       	call   c000d02a <File::File(char const*, Process*)>
c000d96c:	58                   	pop    eax
c000d96d:	5a                   	pop    edx
c000d96e:	6a 01                	push   0x1
c000d970:	53                   	push   ebx
c000d971:	e8 18 f7 ff ff       	call   c000d08e <File::open(FileOpenMode)>
c000d976:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000d979:	e8 6e f7 ff ff       	call   c000d0ec <File::close()>
c000d97e:	83 c4 10             	add    esp,0x10
c000d981:	85 db                	test   ebx,ebx
c000d983:	74 0f                	je     c000d994 <User::loadClockSettings(int)+0x4c>
c000d985:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d987:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000d98b:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000d98e:	83 c4 08             	add    esp,0x8
c000d991:	5b                   	pop    ebx
c000d992:	ff e0                	jmp    eax
c000d994:	83 c4 08             	add    esp,0x8
c000d997:	5b                   	pop    ebx
c000d998:	c3                   	ret    
c000d999:	90                   	nop

c000d99a <Clock::Clock(char const*)>:
c000d99a:	83 ec 0c             	sub    esp,0xc
c000d99d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d9a1:	83 ec 08             	sub    esp,0x8
c000d9a4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d9a8:	50                   	push   eax
c000d9a9:	e8 5c 07 00 00       	call   c000e10a <Device::Device(char const*)>
c000d9ae:	83 c4 10             	add    esp,0x10
c000d9b1:	ba 18 33 02 c0       	mov    edx,0xc0023318
c000d9b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d9ba:	89 10                	mov    DWORD PTR [eax],edx
c000d9bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d9c0:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c000d9ca:	90                   	nop
c000d9cb:	83 c4 0c             	add    esp,0xc
c000d9ce:	c3                   	ret    
c000d9cf:	90                   	nop

c000d9d0 <Clock::~Clock()>:
c000d9d0:	83 ec 0c             	sub    esp,0xc
c000d9d3:	ba 18 33 02 c0       	mov    edx,0xc0023318
c000d9d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d9dc:	89 10                	mov    DWORD PTR [eax],edx
c000d9de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d9e2:	83 ec 0c             	sub    esp,0xc
c000d9e5:	50                   	push   eax
c000d9e6:	e8 e9 03 00 00       	call   c000ddd4 <Device::~Device()>
c000d9eb:	83 c4 10             	add    esp,0x10
c000d9ee:	90                   	nop
c000d9ef:	83 c4 0c             	add    esp,0xc
c000d9f2:	c3                   	ret    
c000d9f3:	90                   	nop

c000d9f4 <Clock::~Clock()>:
c000d9f4:	83 ec 0c             	sub    esp,0xc
c000d9f7:	83 ec 0c             	sub    esp,0xc
c000d9fa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d9fe:	e8 cd ff ff ff       	call   c000d9d0 <Clock::~Clock()>
c000da03:	83 c4 10             	add    esp,0x10
c000da06:	83 ec 08             	sub    esp,0x8
c000da09:	68 58 01 00 00       	push   0x158
c000da0e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da12:	e8 c7 ef ff ff       	call   c000c9de <operator delete(void*, unsigned long)>
c000da17:	83 c4 10             	add    esp,0x10
c000da1a:	83 c4 0c             	add    esp,0xc
c000da1d:	c3                   	ret    

c000da1e <Clock::timeInSecondsLocal()>:
c000da1e:	53                   	push   ebx
c000da1f:	83 ec 14             	sub    esp,0x14
c000da22:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000da26:	8b 10                	mov    edx,DWORD PTR [eax]
c000da28:	50                   	push   eax
c000da29:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000da2c:	0f b6 0d 9c 65 02 c0 	movzx  ecx,BYTE PTR ds:0xc002659c
c000da33:	03 0d a0 65 02 c0    	add    ecx,DWORD PTR ds:0xc00265a0
c000da39:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000da3f:	89 cb                	mov    ebx,ecx
c000da41:	c1 fb 1f             	sar    ebx,0x1f
c000da44:	01 c8                	add    eax,ecx
c000da46:	11 da                	adc    edx,ebx
c000da48:	83 c4 10             	add    esp,0x10
c000da4b:	31 c9                	xor    ecx,ecx
c000da4d:	80 3d 9d 65 02 c0 00 	cmp    BYTE PTR ds:0xc002659d,0x0
c000da54:	74 05                	je     c000da5b <Clock::timeInSecondsLocal()+0x3d>
c000da56:	b9 08 07 00 00       	mov    ecx,0x708
c000da5b:	31 db                	xor    ebx,ebx
c000da5d:	01 c8                	add    eax,ecx
c000da5f:	11 da                	adc    edx,ebx
c000da61:	83 c4 08             	add    esp,0x8
c000da64:	5b                   	pop    ebx
c000da65:	c3                   	ret    

c000da66 <Clock::setTimeInSecondsLocal(unsigned long long)>:
c000da66:	57                   	push   edi
c000da67:	56                   	push   esi
c000da68:	53                   	push   ebx
c000da69:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000da6d:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000da71:	8b 01                	mov    eax,DWORD PTR [ecx]
c000da73:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000da77:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c000da7a:	0f b6 05 9c 65 02 c0 	movzx  eax,BYTE PTR ds:0xc002659c
c000da81:	03 05 a0 65 02 c0    	add    eax,DWORD PTR ds:0xc00265a0
c000da87:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c000da8d:	99                   	cdq    
c000da8e:	29 c6                	sub    esi,eax
c000da90:	19 d7                	sbb    edi,edx
c000da92:	89 f0                	mov    eax,esi
c000da94:	89 fa                	mov    edx,edi
c000da96:	31 f6                	xor    esi,esi
c000da98:	80 3d 9d 65 02 c0 00 	cmp    BYTE PTR ds:0xc002659d,0x0
c000da9f:	74 05                	je     c000daa6 <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c000daa1:	be 08 07 00 00       	mov    esi,0x708
c000daa6:	31 ff                	xor    edi,edi
c000daa8:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c000daac:	29 f0                	sub    eax,esi
c000daae:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000dab2:	19 fa                	sbb    edx,edi
c000dab4:	89 d8                	mov    eax,ebx
c000dab6:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000daba:	5b                   	pop    ebx
c000dabb:	5e                   	pop    esi
c000dabc:	5f                   	pop    edi
c000dabd:	ff e0                	jmp    eax

c000dabf <datetimeToSeconds(datetime_t)>:
c000dabf:	55                   	push   ebp
c000dac0:	57                   	push   edi
c000dac1:	56                   	push   esi
c000dac2:	53                   	push   ebx
c000dac3:	83 ec 14             	sub    esp,0x14
c000dac6:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000daca:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000dace:	89 d3                	mov    ebx,edx
c000dad0:	0f b6 c6             	movzx  eax,dh
c000dad3:	c1 eb 10             	shr    ebx,0x10
c000dad6:	48                   	dec    eax
c000dad7:	66 81 eb 6c 07       	sub    bx,0x76c
c000dadc:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c000dae0:	0f b6 f5             	movzx  esi,ch
c000dae3:	89 cf                	mov    edi,ecx
c000dae5:	6b f6 3c             	imul   esi,esi,0x3c
c000dae8:	c1 ef 10             	shr    edi,0x10
c000daeb:	0f b6 c9             	movzx  ecx,cl
c000daee:	89 f8                	mov    eax,edi
c000daf0:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000daf6:	0f b6 f8             	movzx  edi,al
c000daf9:	0f b6 d2             	movzx  edx,dl
c000dafc:	01 fe                	add    esi,edi
c000dafe:	01 f1                	add    ecx,esi
c000db00:	0f b7 f3             	movzx  esi,bx
c000db03:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000db07:	c1 f9 1f             	sar    ecx,0x1f
c000db0a:	80 7c 24 07 01       	cmp    BYTE PTR [esp+0x7],0x1
c000db0f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000db13:	0f b6 4c 24 07       	movzx  ecx,BYTE PTR [esp+0x7]
c000db18:	8b 0c 8d 60 33 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdcca0]
c000db1f:	8d 4c 0a ff          	lea    ecx,[edx+ecx*1-0x1]
c000db23:	76 29                	jbe    c000db4e <datetimeToSeconds(datetime_t)+0x8f>
c000db25:	f6 c3 03             	test   bl,0x3
c000db28:	75 24                	jne    c000db4e <datetimeToSeconds(datetime_t)+0x8f>
c000db2a:	31 d2                	xor    edx,edx
c000db2c:	bf 64 00 00 00       	mov    edi,0x64
c000db31:	89 d8                	mov    eax,ebx
c000db33:	66 f7 f7             	div    di
c000db36:	66 85 d2             	test   dx,dx
c000db39:	75 12                	jne    c000db4d <datetimeToSeconds(datetime_t)+0x8e>
c000db3b:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c000db41:	bf 90 01 00 00       	mov    edi,0x190
c000db46:	99                   	cdq    
c000db47:	f7 ff                	idiv   edi
c000db49:	85 d2                	test   edx,edx
c000db4b:	75 01                	jne    c000db4e <datetimeToSeconds(datetime_t)+0x8f>
c000db4d:	41                   	inc    ecx
c000db4e:	66 83 fb 46          	cmp    bx,0x46
c000db52:	76 45                	jbe    c000db99 <datetimeToSeconds(datetime_t)+0xda>
c000db54:	bb 46 00 00 00       	mov    ebx,0x46
c000db59:	bf 64 00 00 00       	mov    edi,0x64
c000db5e:	bd 90 01 00 00       	mov    ebp,0x190
c000db63:	b8 6d 01 00 00       	mov    eax,0x16d
c000db68:	f6 c3 03             	test   bl,0x3
c000db6b:	75 23                	jne    c000db90 <datetimeToSeconds(datetime_t)+0xd1>
c000db6d:	89 d8                	mov    eax,ebx
c000db6f:	99                   	cdq    
c000db70:	f7 ff                	idiv   edi
c000db72:	b8 6e 01 00 00       	mov    eax,0x16e
c000db77:	85 d2                	test   edx,edx
c000db79:	75 15                	jne    c000db90 <datetimeToSeconds(datetime_t)+0xd1>
c000db7b:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c000db81:	99                   	cdq    
c000db82:	f7 fd                	idiv   ebp
c000db84:	83 fa 01             	cmp    edx,0x1
c000db87:	19 c0                	sbb    eax,eax
c000db89:	f7 d0                	not    eax
c000db8b:	05 6e 01 00 00       	add    eax,0x16e
c000db90:	01 c1                	add    ecx,eax
c000db92:	43                   	inc    ebx
c000db93:	39 f3                	cmp    ebx,esi
c000db95:	7c cc                	jl     c000db63 <datetimeToSeconds(datetime_t)+0xa4>
c000db97:	eb 35                	jmp    c000dbce <datetimeToSeconds(datetime_t)+0x10f>
c000db99:	74 33                	je     c000dbce <datetimeToSeconds(datetime_t)+0x10f>
c000db9b:	b8 45 00 00 00       	mov    eax,0x45
c000dba0:	89 c2                	mov    edx,eax
c000dba2:	83 e2 03             	and    edx,0x3
c000dba5:	39 f0                	cmp    eax,esi
c000dba7:	7e 0f                	jle    c000dbb8 <datetimeToSeconds(datetime_t)+0xf9>
c000dba9:	83 fa 01             	cmp    edx,0x1
c000dbac:	19 d2                	sbb    edx,edx
c000dbae:	48                   	dec    eax
c000dbaf:	8d 8c 11 93 fe ff ff 	lea    ecx,[ecx+edx*1-0x16d]
c000dbb6:	eb e8                	jmp    c000dba0 <datetimeToSeconds(datetime_t)+0xe1>
c000dbb8:	b8 6d 01 00 00       	mov    eax,0x16d
c000dbbd:	85 d2                	test   edx,edx
c000dbbf:	75 0b                	jne    c000dbcc <datetimeToSeconds(datetime_t)+0x10d>
c000dbc1:	66 83 fb 01          	cmp    bx,0x1
c000dbc5:	19 c0                	sbb    eax,eax
c000dbc7:	05 6e 01 00 00       	add    eax,0x16e
c000dbcc:	29 c1                	sub    ecx,eax
c000dbce:	b8 80 51 01 00       	mov    eax,0x15180
c000dbd3:	f7 e9                	imul   ecx
c000dbd5:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000dbd9:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000dbdd:	83 c4 14             	add    esp,0x14
c000dbe0:	5b                   	pop    ebx
c000dbe1:	5e                   	pop    esi
c000dbe2:	5f                   	pop    edi
c000dbe3:	5d                   	pop    ebp
c000dbe4:	c3                   	ret    
c000dbe5:	90                   	nop

c000dbe6 <Clock::setTimeInDatetimeLocal(datetime_t)>:
c000dbe6:	57                   	push   edi
c000dbe7:	56                   	push   esi
c000dbe8:	53                   	push   ebx
c000dbe9:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000dbed:	8b 06                	mov    eax,DWORD PTR [esi]
c000dbef:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c000dbf2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000dbf6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000dbfa:	e8 c0 fe ff ff       	call   c000dabf <datetimeToSeconds(datetime_t)>
c000dbff:	59                   	pop    ecx
c000dc00:	0f b6 0d 9c 65 02 c0 	movzx  ecx,BYTE PTR ds:0xc002659c
c000dc07:	5b                   	pop    ebx
c000dc08:	03 0d a0 65 02 c0    	add    ecx,DWORD PTR ds:0xc00265a0
c000dc0e:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000dc14:	89 cb                	mov    ebx,ecx
c000dc16:	c1 fb 1f             	sar    ebx,0x1f
c000dc19:	29 c8                	sub    eax,ecx
c000dc1b:	19 da                	sbb    edx,ebx
c000dc1d:	31 c9                	xor    ecx,ecx
c000dc1f:	80 3d 9d 65 02 c0 00 	cmp    BYTE PTR ds:0xc002659d,0x0
c000dc26:	74 05                	je     c000dc2d <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c000dc28:	b9 08 07 00 00       	mov    ecx,0x708
c000dc2d:	31 db                	xor    ebx,ebx
c000dc2f:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c000dc33:	29 c8                	sub    eax,ecx
c000dc35:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000dc39:	19 da                	sbb    edx,ebx
c000dc3b:	89 f8                	mov    eax,edi
c000dc3d:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000dc41:	5b                   	pop    ebx
c000dc42:	5e                   	pop    esi
c000dc43:	5f                   	pop    edi
c000dc44:	ff e0                	jmp    eax

c000dc46 <secondsToDatetime(unsigned long long)>:
c000dc46:	55                   	push   ebp
c000dc47:	57                   	push   edi
c000dc48:	56                   	push   esi
c000dc49:	53                   	push   ebx
c000dc4a:	83 ec 1c             	sub    esp,0x1c
c000dc4d:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000dc51:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000dc55:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000dc59:	6a 00                	push   0x0
c000dc5b:	68 80 51 01 00       	push   0x15180
c000dc60:	55                   	push   ebp
c000dc61:	57                   	push   edi
c000dc62:	e8 1d 33 01 00       	call   c0020f84 <__udivdi3>
c000dc67:	83 c4 10             	add    esp,0x10
c000dc6a:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c000dc70:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dc74:	6a 00                	push   0x0
c000dc76:	68 80 51 01 00       	push   0x15180
c000dc7b:	55                   	push   ebp
c000dc7c:	57                   	push   edi
c000dc7d:	bf 10 0e 00 00       	mov    edi,0xe10
c000dc82:	e8 fd 33 01 00       	call   c0021084 <__umoddi3>
c000dc87:	83 c4 10             	add    esp,0x10
c000dc8a:	99                   	cdq    
c000dc8b:	f7 ff                	idiv   edi
c000dc8d:	bf 3c 00 00 00       	mov    edi,0x3c
c000dc92:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c000dc95:	89 d0                	mov    eax,edx
c000dc97:	99                   	cdq    
c000dc98:	f7 ff                	idiv   edi
c000dc9a:	85 db                	test   ebx,ebx
c000dc9c:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c000dc9f:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c000dca2:	79 11                	jns    c000dcb5 <secondsToDatetime(unsigned long long)+0x6f>
c000dca4:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000dca8:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c000dcae:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c000dcb3:	eb 07                	jmp    c000dcbc <secondsToDatetime(unsigned long long)+0x76>
c000dcb5:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c000dcba:	89 d8                	mov    eax,ebx
c000dcbc:	bf b4 05 00 00       	mov    edi,0x5b4
c000dcc1:	99                   	cdq    
c000dcc2:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c000dcc7:	f7 f9                	idiv   ecx
c000dcc9:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c000dcce:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dcd2:	31 d2                	xor    edx,edx
c000dcd4:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c000dcdc:	01 c3                	add    ebx,eax
c000dcde:	89 d8                	mov    eax,ebx
c000dce0:	f7 f1                	div    ecx
c000dce2:	31 d2                	xor    edx,edx
c000dce4:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c000dce7:	89 d8                	mov    eax,ebx
c000dce9:	f7 f7                	div    edi
c000dceb:	31 d2                	xor    edx,edx
c000dced:	29 c1                	sub    ecx,eax
c000dcef:	89 d8                	mov    eax,ebx
c000dcf1:	f7 f5                	div    ebp
c000dcf3:	bd 6d 01 00 00       	mov    ebp,0x16d
c000dcf8:	29 c1                	sub    ecx,eax
c000dcfa:	31 d2                	xor    edx,edx
c000dcfc:	89 c8                	mov    eax,ecx
c000dcfe:	f7 f5                	div    ebp
c000dd00:	bd 94 8e 00 00       	mov    ebp,0x8e94
c000dd05:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000dd09:	31 d2                	xor    edx,edx
c000dd0b:	89 c8                	mov    eax,ecx
c000dd0d:	f7 f5                	div    ebp
c000dd0f:	31 d2                	xor    edx,edx
c000dd11:	01 c3                	add    ebx,eax
c000dd13:	89 c8                	mov    eax,ecx
c000dd15:	f7 f7                	div    edi
c000dd17:	bf 99 00 00 00       	mov    edi,0x99
c000dd1c:	29 c3                	sub    ebx,eax
c000dd1e:	31 d2                	xor    edx,edx
c000dd20:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c000dd28:	29 c3                	sub    ebx,eax
c000dd2a:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000dd2d:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c000dd30:	bb 05 00 00 00       	mov    ebx,0x5
c000dd35:	83 c1 02             	add    ecx,0x2
c000dd38:	89 c8                	mov    eax,ecx
c000dd3a:	f7 f7                	div    edi
c000dd3c:	31 d2                	xor    edx,edx
c000dd3e:	89 c7                	mov    edi,eax
c000dd40:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c000dd46:	83 c0 02             	add    eax,0x2
c000dd49:	f7 f3                	div    ebx
c000dd4b:	89 eb                	mov    ebx,ebp
c000dd4d:	29 c3                	sub    ebx,eax
c000dd4f:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c000dd55:	88 1e                	mov    BYTE PTR [esi],bl
c000dd57:	19 c0                	sbb    eax,eax
c000dd59:	31 d2                	xor    edx,edx
c000dd5b:	83 e0 0c             	and    eax,0xc
c000dd5e:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c000dd62:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c000dd6a:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000dd6e:	83 f9 01             	cmp    ecx,0x1
c000dd71:	0f 96 c2             	setbe  dl
c000dd74:	41                   	inc    ecx
c000dd75:	01 d0                	add    eax,edx
c000dd77:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c000dd7a:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c000dd7e:	83 c4 1c             	add    esp,0x1c
c000dd81:	89 f0                	mov    eax,esi
c000dd83:	5b                   	pop    ebx
c000dd84:	5e                   	pop    esi
c000dd85:	5f                   	pop    edi
c000dd86:	5d                   	pop    ebp
c000dd87:	c2 04 00             	ret    0x4

c000dd8a <Clock::timeInDatetimeLocal()>:
c000dd8a:	53                   	push   ebx
c000dd8b:	83 ec 14             	sub    esp,0x14
c000dd8e:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000dd92:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000dd96:	e8 83 fc ff ff       	call   c000da1e <Clock::timeInSecondsLocal()>
c000dd9b:	83 c4 0c             	add    esp,0xc
c000dd9e:	52                   	push   edx
c000dd9f:	50                   	push   eax
c000dda0:	53                   	push   ebx
c000dda1:	e8 a0 fe ff ff       	call   c000dc46 <secondsToDatetime(unsigned long long)>
c000dda6:	89 d8                	mov    eax,ebx
c000dda8:	83 c4 14             	add    esp,0x14
c000ddab:	5b                   	pop    ebx
c000ddac:	c2 04 00             	ret    0x4
c000ddaf:	90                   	nop

c000ddb0 <Device::hibernate()>:
c000ddb0:	c3                   	ret    
c000ddb1:	90                   	nop

c000ddb2 <Device::wake()>:
c000ddb2:	c3                   	ret    
c000ddb3:	90                   	nop

c000ddb4 <Device::detect()>:
c000ddb4:	c3                   	ret    
c000ddb5:	90                   	nop

c000ddb6 <Device::disableLegacy()>:
c000ddb6:	c3                   	ret    
c000ddb7:	90                   	nop

c000ddb8 <Device::powerSaving(PowerSavingLevel)>:
c000ddb8:	c3                   	ret    
c000ddb9:	90                   	nop

c000ddba <DriverlessDevice::close(int, int, void*)>:
c000ddba:	31 c0                	xor    eax,eax
c000ddbc:	c3                   	ret    
c000ddbd:	90                   	nop

c000ddbe <DriverlessDevice::detect()>:
c000ddbe:	c3                   	ret    
c000ddbf:	90                   	nop

c000ddc0 <DriverlessDevice::open(int, int, void*)>:
c000ddc0:	83 ec 18             	sub    esp,0x18
c000ddc3:	68 90 33 02 c0       	push   0xc0023390
c000ddc8:	e8 b4 65 00 00       	call   c0014381 <Krnl::panic(char const*)>
c000ddcd:	83 c8 ff             	or     eax,0xffffffff
c000ddd0:	83 c4 1c             	add    esp,0x1c
c000ddd3:	c3                   	ret    

c000ddd4 <Device::~Device()>:
c000ddd4:	ba f0 33 02 c0       	mov    edx,0xc00233f0
c000ddd9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000dddd:	89 10                	mov    DWORD PTR [eax],edx
c000dddf:	90                   	nop
c000dde0:	c3                   	ret    
c000dde1:	90                   	nop

c000dde2 <Device::~Device()>:
c000dde2:	83 ec 0c             	sub    esp,0xc
c000dde5:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000dde9:	e8 e6 ff ff ff       	call   c000ddd4 <Device::~Device()>
c000ddee:	83 c4 04             	add    esp,0x4
c000ddf1:	83 ec 08             	sub    esp,0x8
c000ddf4:	68 58 01 00 00       	push   0x158
c000ddf9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ddfd:	e8 dc eb ff ff       	call   c000c9de <operator delete(void*, unsigned long)>
c000de02:	83 c4 10             	add    esp,0x10
c000de05:	83 c4 0c             	add    esp,0xc
c000de08:	c3                   	ret    
c000de09:	90                   	nop

c000de0a <Device::findAndLoadDriver()>:
c000de0a:	c7 44 24 04 ae 33 02 c0 	mov    DWORD PTR [esp+0x4],0xc00233ae
c000de12:	e9 a8 ec ff ff       	jmp    c000cabf <Dbg::kprintf(char const*, ...)>
c000de17:	90                   	nop

c000de18 <Device::preOpenPCI(PCIDeviceInfo)>:
c000de18:	57                   	push   edi
c000de19:	b9 09 00 00 00       	mov    ecx,0x9
c000de1e:	56                   	push   esi
c000de1f:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000de23:	8d 74 24 10          	lea    esi,[esp+0x10]
c000de27:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c000de31:	81 c7 18 01 00 00    	add    edi,0x118
c000de37:	fc                   	cld    
c000de38:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000de3a:	5e                   	pop    esi
c000de3b:	5f                   	pop    edi
c000de3c:	c3                   	ret    
c000de3d:	90                   	nop

c000de3e <Device::preOpenACPI(void*, char*, char*)>:
c000de3e:	57                   	push   edi
c000de3f:	b9 1e 00 00 00       	mov    ecx,0x1e
c000de44:	56                   	push   esi
c000de45:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000de49:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000de4d:	c7 80 14 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x114],0x3
c000de57:	89 90 18 01 00 00    	mov    DWORD PTR [eax+0x118],edx
c000de5d:	8d b8 1c 01 00 00    	lea    edi,[eax+0x11c]
c000de63:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000de67:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000de69:	b9 0e 00 00 00       	mov    ecx,0xe
c000de6e:	8d b8 3a 01 00 00    	lea    edi,[eax+0x13a]
c000de74:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000de78:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000de7a:	5e                   	pop    esi
c000de7b:	5f                   	pop    edi
c000de7c:	c3                   	ret    
c000de7d:	90                   	nop

c000de7e <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000de7e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000de82:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c000de87:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c000de8e:	75 0b                	jne    c000de9b <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1d>
c000de90:	8b 00                	mov    eax,DWORD PTR [eax]
c000de92:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000de96:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000de99:	eb 1e                	jmp    c000deb9 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3b>
c000de9b:	a1 68 64 02 c0       	mov    eax,ds:0xc0026468
c000dea0:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000dea6:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c000deac:	8b 08                	mov    ecx,DWORD PTR [eax]
c000deae:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000deb2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000deb6:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c000deb9:	ff e0                	jmp    eax
c000debb:	90                   	nop

c000debc <Device::getParent()>:
c000debc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000dec0:	8b 80 c8 00 00 00    	mov    eax,DWORD PTR [eax+0xc8]
c000dec6:	c3                   	ret    
c000dec7:	90                   	nop

c000dec8 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c000dec8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000decc:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c000ded1:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c000ded8:	75 0b                	jne    c000dee5 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c000deda:	8b 00                	mov    eax,DWORD PTR [eax]
c000dedc:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000dee0:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c000dee3:	eb 1e                	jmp    c000df03 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x3b>
c000dee5:	a1 68 64 02 c0       	mov    eax,ds:0xc0026468
c000deea:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000def0:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c000def6:	8b 08                	mov    ecx,DWORD PTR [eax]
c000def8:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000defc:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000df00:	8b 41 30             	mov    eax,DWORD PTR [ecx+0x30]
c000df03:	ff e0                	jmp    eax
c000df05:	90                   	nop

c000df06 <Device::addChild(Device*)>:
c000df06:	53                   	push   ebx
c000df07:	83 ec 08             	sub    esp,0x8
c000df0a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000df0e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000df12:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c000df18:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c000df1e:	8b 13                	mov    edx,DWORD PTR [ebx]
c000df20:	85 d2                	test   edx,edx
c000df22:	74 04                	je     c000df28 <Device::addChild(Device*)+0x22>
c000df24:	89 d3                	mov    ebx,edx
c000df26:	eb f6                	jmp    c000df1e <Device::addChild(Device*)+0x18>
c000df28:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000df2b:	83 ec 0c             	sub    esp,0xc
c000df2e:	6a 08                	push   0x8
c000df30:	e8 8e ba ff ff       	call   c00099c3 <malloc>
c000df35:	89 03                	mov    DWORD PTR [ebx],eax
c000df37:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000df3d:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000df44:	83 c4 18             	add    esp,0x18
c000df47:	5b                   	pop    ebx
c000df48:	c3                   	ret    
c000df49:	90                   	nop

c000df4a <Device::removeAllChildren()>:
c000df4a:	56                   	push   esi
c000df4b:	53                   	push   ebx
c000df4c:	52                   	push   edx
c000df4d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000df51:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c000df57:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000df5a:	74 17                	je     c000df73 <Device::removeAllChildren()+0x29>
c000df5c:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000df5f:	85 c0                	test   eax,eax
c000df61:	74 0c                	je     c000df6f <Device::removeAllChildren()+0x25>
c000df63:	83 ec 0c             	sub    esp,0xc
c000df66:	8b 10                	mov    edx,DWORD PTR [eax]
c000df68:	50                   	push   eax
c000df69:	ff 52 04             	call   DWORD PTR [edx+0x4]
c000df6c:	83 c4 10             	add    esp,0x10
c000df6f:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000df71:	eb e4                	jmp    c000df57 <Device::removeAllChildren()+0xd>
c000df73:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000df79:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000df7f:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000df85:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000df8c:	58                   	pop    eax
c000df8d:	5b                   	pop    ebx
c000df8e:	5e                   	pop    esi
c000df8f:	c3                   	ret    

c000df90 <Device::hibernateAll()>:
c000df90:	53                   	push   ebx
c000df91:	83 ec 14             	sub    esp,0x14
c000df94:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000df98:	8b 03                	mov    eax,DWORD PTR [ebx]
c000df9a:	53                   	push   ebx
c000df9b:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000df9e:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000dfa4:	83 c4 10             	add    esp,0x10
c000dfa7:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000dfaa:	74 0f                	je     c000dfbb <Device::hibernateAll()+0x2b>
c000dfac:	83 ec 0c             	sub    esp,0xc
c000dfaf:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000dfb2:	e8 d9 ff ff ff       	call   c000df90 <Device::hibernateAll()>
c000dfb7:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000dfb9:	eb e9                	jmp    c000dfa4 <Device::hibernateAll()+0x14>
c000dfbb:	83 c4 08             	add    esp,0x8
c000dfbe:	5b                   	pop    ebx
c000dfbf:	c3                   	ret    

c000dfc0 <Device::wakeAll()>:
c000dfc0:	53                   	push   ebx
c000dfc1:	83 ec 14             	sub    esp,0x14
c000dfc4:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000dfc8:	8b 03                	mov    eax,DWORD PTR [ebx]
c000dfca:	53                   	push   ebx
c000dfcb:	ff 50 14             	call   DWORD PTR [eax+0x14]
c000dfce:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000dfd4:	83 c4 10             	add    esp,0x10
c000dfd7:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000dfda:	74 0f                	je     c000dfeb <Device::wakeAll()+0x2b>
c000dfdc:	83 ec 0c             	sub    esp,0xc
c000dfdf:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000dfe2:	e8 d9 ff ff ff       	call   c000dfc0 <Device::wakeAll()>
c000dfe7:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000dfe9:	eb e9                	jmp    c000dfd4 <Device::wakeAll()+0x14>
c000dfeb:	83 c4 08             	add    esp,0x8
c000dfee:	5b                   	pop    ebx
c000dfef:	c3                   	ret    

c000dff0 <Device::detectAll()>:
c000dff0:	53                   	push   ebx
c000dff1:	83 ec 14             	sub    esp,0x14
c000dff4:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000dff8:	8b 03                	mov    eax,DWORD PTR [ebx]
c000dffa:	53                   	push   ebx
c000dffb:	ff 50 18             	call   DWORD PTR [eax+0x18]
c000dffe:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000e004:	83 c4 10             	add    esp,0x10
c000e007:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000e00a:	74 0f                	je     c000e01b <Device::detectAll()+0x2b>
c000e00c:	83 ec 0c             	sub    esp,0xc
c000e00f:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e012:	e8 d9 ff ff ff       	call   c000dff0 <Device::detectAll()>
c000e017:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000e019:	eb e9                	jmp    c000e004 <Device::detectAll()+0x14>
c000e01b:	83 c4 08             	add    esp,0x8
c000e01e:	5b                   	pop    ebx
c000e01f:	c3                   	ret    

c000e020 <Device::disableLegacyAll()>:
c000e020:	53                   	push   ebx
c000e021:	83 ec 14             	sub    esp,0x14
c000e024:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000e028:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e02a:	53                   	push   ebx
c000e02b:	ff 50 1c             	call   DWORD PTR [eax+0x1c]
c000e02e:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000e034:	83 c4 10             	add    esp,0x10
c000e037:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000e03a:	74 0f                	je     c000e04b <Device::disableLegacyAll()+0x2b>
c000e03c:	83 ec 0c             	sub    esp,0xc
c000e03f:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e042:	e8 d9 ff ff ff       	call   c000e020 <Device::disableLegacyAll()>
c000e047:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000e049:	eb e9                	jmp    c000e034 <Device::disableLegacyAll()+0x14>
c000e04b:	83 c4 08             	add    esp,0x8
c000e04e:	5b                   	pop    ebx
c000e04f:	c3                   	ret    

c000e050 <Device::loadDriversForAll()>:
c000e050:	53                   	push   ebx
c000e051:	83 ec 08             	sub    esp,0x8
c000e054:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e058:	83 bb 10 01 00 00 13 	cmp    DWORD PTR [ebx+0x110],0x13
c000e05f:	75 0c                	jne    c000e06d <Device::loadDriversForAll()+0x1d>
c000e061:	83 ec 0c             	sub    esp,0xc
c000e064:	53                   	push   ebx
c000e065:	e8 a0 fd ff ff       	call   c000de0a <Device::findAndLoadDriver()>
c000e06a:	83 c4 10             	add    esp,0x10
c000e06d:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000e073:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000e076:	74 12                	je     c000e08a <Device::loadDriversForAll()+0x3a>
c000e078:	83 ec 0c             	sub    esp,0xc
c000e07b:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e07e:	e8 cd ff ff ff       	call   c000e050 <Device::loadDriversForAll()>
c000e083:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000e085:	83 c4 10             	add    esp,0x10
c000e088:	eb e9                	jmp    c000e073 <Device::loadDriversForAll()+0x23>
c000e08a:	83 c4 08             	add    esp,0x8
c000e08d:	5b                   	pop    ebx
c000e08e:	c3                   	ret    
c000e08f:	90                   	nop

c000e090 <Device::closeAll()>:
c000e090:	53                   	push   ebx
c000e091:	83 ec 08             	sub    esp,0x8
c000e094:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e098:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e09a:	6a 00                	push   0x0
c000e09c:	6a 00                	push   0x0
c000e09e:	6a 00                	push   0x0
c000e0a0:	53                   	push   ebx
c000e0a1:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000e0a4:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000e0aa:	83 c4 10             	add    esp,0x10
c000e0ad:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000e0b0:	74 0f                	je     c000e0c1 <Device::closeAll()+0x31>
c000e0b2:	83 ec 0c             	sub    esp,0xc
c000e0b5:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e0b8:	e8 d3 ff ff ff       	call   c000e090 <Device::closeAll()>
c000e0bd:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000e0bf:	eb e9                	jmp    c000e0aa <Device::closeAll()+0x1a>
c000e0c1:	83 c4 08             	add    esp,0x8
c000e0c4:	5b                   	pop    ebx
c000e0c5:	c3                   	ret    

c000e0c6 <Device::powerSavingAll(PowerSavingLevel)>:
c000e0c6:	56                   	push   esi
c000e0c7:	53                   	push   ebx
c000e0c8:	83 ec 0c             	sub    esp,0xc
c000e0cb:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000e0cf:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000e0d3:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e0d5:	56                   	push   esi
c000e0d6:	53                   	push   ebx
c000e0d7:	ff 50 20             	call   DWORD PTR [eax+0x20]
c000e0da:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000e0e0:	83 c4 10             	add    esp,0x10
c000e0e3:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000e0e6:	74 0f                	je     c000e0f7 <Device::powerSavingAll(PowerSavingLevel)+0x31>
c000e0e8:	52                   	push   edx
c000e0e9:	52                   	push   edx
c000e0ea:	56                   	push   esi
c000e0eb:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e0ee:	e8 d3 ff ff ff       	call   c000e0c6 <Device::powerSavingAll(PowerSavingLevel)>
c000e0f3:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000e0f5:	eb e9                	jmp    c000e0e0 <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c000e0f7:	58                   	pop    eax
c000e0f8:	5b                   	pop    ebx
c000e0f9:	5e                   	pop    esi
c000e0fa:	c3                   	ret    
c000e0fb:	90                   	nop

c000e0fc <Device::setName(char const*)>:
c000e0fc:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c000e104:	e9 37 26 ff ff       	jmp    c0000740 <strcpy>
c000e109:	90                   	nop

c000e10a <Device::Device(char const*)>:
c000e10a:	83 ec 1c             	sub    esp,0x1c
c000e10d:	ba f0 33 02 c0       	mov    edx,0xc00233f0
c000e112:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e116:	89 10                	mov    DWORD PTR [eax],edx
c000e118:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e11c:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c000e126:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e12a:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000e134:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e138:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000e142:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e146:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000e150:	83 ec 08             	sub    esp,0x8
c000e153:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e157:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e15b:	e8 9c ff ff ff       	call   c000e0fc <Device::setName(char const*)>
c000e160:	83 c4 10             	add    esp,0x10
c000e163:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c000e16b:	83 ec 0c             	sub    esp,0xc
c000e16e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e172:	e8 4c b8 ff ff       	call   c00099c3 <malloc>
c000e177:	83 c4 10             	add    esp,0x10
c000e17a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000e180:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000e187:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000e18b:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c000e191:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e195:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000e19b:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000e1a1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e1a5:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000e1ab:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000e1b2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e1b6:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c000e1bd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e1c1:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c000e1c8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e1cc:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000e1d6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e1da:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000e1e4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e1e8:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000e1f2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e1f6:	c7 80 10 01 00 00 13 00 00 00 	mov    DWORD PTR [eax+0x110],0x13
c000e200:	90                   	nop
c000e201:	83 c4 1c             	add    esp,0x1c
c000e204:	c3                   	ret    
c000e205:	90                   	nop

c000e206 <Device::getName()>:
c000e206:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e20a:	05 d0 00 00 00       	add    eax,0xd0
c000e20f:	c3                   	ret    

c000e210 <DriverlessDevice::DriverlessDevice(char const*)>:
c000e210:	83 ec 0c             	sub    esp,0xc
c000e213:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e217:	83 ec 08             	sub    esp,0x8
c000e21a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e21e:	50                   	push   eax
c000e21f:	e8 e6 fe ff ff       	call   c000e10a <Device::Device(char const*)>
c000e224:	83 c4 10             	add    esp,0x10
c000e227:	ba 1c 34 02 c0       	mov    edx,0xc002341c
c000e22c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e230:	89 10                	mov    DWORD PTR [eax],edx
c000e232:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e236:	c7 80 10 01 00 00 12 00 00 00 	mov    DWORD PTR [eax+0x110],0x12
c000e240:	90                   	nop
c000e241:	83 c4 0c             	add    esp,0xc
c000e244:	c3                   	ret    
c000e245:	90                   	nop

c000e246 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c000e246:	57                   	push   edi
c000e247:	56                   	push   esi
c000e248:	53                   	push   ebx
c000e249:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e24d:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000e251:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000e255:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c000e25b:	75 0c                	jne    c000e269 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c000e25d:	52                   	push   edx
c000e25e:	52                   	push   edx
c000e25f:	53                   	push   ebx
c000e260:	56                   	push   esi
c000e261:	e8 d0 31 01 00       	call   c0021436 <LinkedList<Device>::addElement(Device*)>
c000e266:	83 c4 10             	add    esp,0x10
c000e269:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000e26f:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000e272:	74 12                	je     c000e286 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c000e274:	50                   	push   eax
c000e275:	57                   	push   edi
c000e276:	56                   	push   esi
c000e277:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e27a:	e8 c7 ff ff ff       	call   c000e246 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000e27f:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000e281:	83 c4 10             	add    esp,0x10
c000e284:	eb e9                	jmp    c000e26f <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c000e286:	5b                   	pop    ebx
c000e287:	5e                   	pop    esi
c000e288:	5f                   	pop    edi
c000e289:	c3                   	ret    

c000e28a <getDevicesOfType(DeviceType)>:
c000e28a:	53                   	push   ebx
c000e28b:	83 ec 14             	sub    esp,0x14
c000e28e:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000e292:	53                   	push   ebx
c000e293:	e8 7a 32 01 00       	call   c0021512 <LinkedList<Device>::LinkedList()>
c000e298:	83 c4 0c             	add    esp,0xc
c000e29b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e29f:	53                   	push   ebx
c000e2a0:	ff 35 68 64 02 c0    	push   DWORD PTR ds:0xc0026468
c000e2a6:	e8 9b ff ff ff       	call   c000e246 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000e2ab:	89 d8                	mov    eax,ebx
c000e2ad:	83 c4 18             	add    esp,0x18
c000e2b0:	5b                   	pop    ebx
c000e2b1:	c2 04 00             	ret    0x4

c000e2b4 <HardDiskController::HardDiskController(char const*)>:
c000e2b4:	83 ec 0c             	sub    esp,0xc
c000e2b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e2bb:	83 ec 08             	sub    esp,0x8
c000e2be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e2c2:	50                   	push   eax
c000e2c3:	e8 42 fe ff ff       	call   c000e10a <Device::Device(char const*)>
c000e2c8:	83 c4 10             	add    esp,0x10
c000e2cb:	ba 48 34 02 c0       	mov    edx,0xc0023448
c000e2d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e2d4:	89 10                	mov    DWORD PTR [eax],edx
c000e2d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e2da:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c000e2e4:	90                   	nop
c000e2e5:	83 c4 0c             	add    esp,0xc
c000e2e8:	c3                   	ret    
c000e2e9:	90                   	nop
c000e2ea:	66 90                	xchg   ax,ax

c000e2ec <HardDiskController::~HardDiskController()>:
c000e2ec:	83 ec 0c             	sub    esp,0xc
c000e2ef:	ba 48 34 02 c0       	mov    edx,0xc0023448
c000e2f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e2f8:	89 10                	mov    DWORD PTR [eax],edx
c000e2fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e2fe:	83 ec 0c             	sub    esp,0xc
c000e301:	50                   	push   eax
c000e302:	e8 cd fa ff ff       	call   c000ddd4 <Device::~Device()>
c000e307:	83 c4 10             	add    esp,0x10
c000e30a:	90                   	nop
c000e30b:	83 c4 0c             	add    esp,0xc
c000e30e:	c3                   	ret    
c000e30f:	90                   	nop

c000e310 <HardDiskController::~HardDiskController()>:
c000e310:	83 ec 0c             	sub    esp,0xc
c000e313:	83 ec 0c             	sub    esp,0xc
c000e316:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e31a:	e8 cd ff ff ff       	call   c000e2ec <HardDiskController::~HardDiskController()>
c000e31f:	83 c4 10             	add    esp,0x10
c000e322:	83 ec 08             	sub    esp,0x8
c000e325:	68 58 01 00 00       	push   0x158
c000e32a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e32e:	e8 ab e6 ff ff       	call   c000c9de <operator delete(void*, unsigned long)>
c000e333:	83 c4 10             	add    esp,0x10
c000e336:	83 c4 0c             	add    esp,0xc
c000e339:	c3                   	ret    

c000e33a <PhysicalDisk::eject()>:
c000e33a:	83 c8 ff             	or     eax,0xffffffff
c000e33d:	c3                   	ret    

c000e33e <PhysicalDisk::PhysicalDisk(char const*, int)>:
c000e33e:	83 ec 0c             	sub    esp,0xc
c000e341:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e345:	83 ec 08             	sub    esp,0x8
c000e348:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e34c:	50                   	push   eax
c000e34d:	e8 b8 fd ff ff       	call   c000e10a <Device::Device(char const*)>
c000e352:	83 c4 10             	add    esp,0x10
c000e355:	ba 74 34 02 c0       	mov    edx,0xc0023474
c000e35a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e35e:	89 10                	mov    DWORD PTR [eax],edx
c000e360:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e364:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000e36b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e36f:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c000e376:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e37a:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c000e384:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e388:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000e38c:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c000e392:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e396:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c000e3a0:	90                   	nop
c000e3a1:	83 c4 0c             	add    esp,0xc
c000e3a4:	c3                   	ret    
c000e3a5:	90                   	nop

c000e3a6 <PhysicalDisk::startCache()>:
c000e3a6:	56                   	push   esi
c000e3a7:	53                   	push   ebx
c000e3a8:	83 ec 10             	sub    esp,0x10
c000e3ab:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000e3af:	6a 44                	push   0x44
c000e3b1:	e8 0d b6 ff ff       	call   c00099c3 <malloc>
c000e3b6:	89 c6                	mov    esi,eax
c000e3b8:	58                   	pop    eax
c000e3b9:	5a                   	pop    edx
c000e3ba:	53                   	push   ebx
c000e3bb:	56                   	push   esi
c000e3bc:	e8 2f 26 00 00       	call   c00109f0 <VCache::VCache(PhysicalDisk*)>
c000e3c1:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c000e3c7:	83 c4 14             	add    esp,0x14
c000e3ca:	5b                   	pop    ebx
c000e3cb:	5e                   	pop    esi
c000e3cc:	c3                   	ret    
c000e3cd:	90                   	nop

c000e3ce <PhysicalDisk::~PhysicalDisk()>:
c000e3ce:	83 ec 0c             	sub    esp,0xc
c000e3d1:	ba 74 34 02 c0       	mov    edx,0xc0023474
c000e3d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e3da:	89 10                	mov    DWORD PTR [eax],edx
c000e3dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e3e0:	83 ec 0c             	sub    esp,0xc
c000e3e3:	50                   	push   eax
c000e3e4:	e8 eb f9 ff ff       	call   c000ddd4 <Device::~Device()>
c000e3e9:	83 c4 10             	add    esp,0x10
c000e3ec:	90                   	nop
c000e3ed:	83 c4 0c             	add    esp,0xc
c000e3f0:	c3                   	ret    
c000e3f1:	90                   	nop

c000e3f2 <PhysicalDisk::~PhysicalDisk()>:
c000e3f2:	83 ec 0c             	sub    esp,0xc
c000e3f5:	83 ec 0c             	sub    esp,0xc
c000e3f8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e3fc:	e8 cd ff ff ff       	call   c000e3ce <PhysicalDisk::~PhysicalDisk()>
c000e401:	83 c4 10             	add    esp,0x10
c000e404:	83 ec 08             	sub    esp,0x8
c000e407:	68 6c 01 00 00       	push   0x16c
c000e40c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e410:	e8 c9 e5 ff ff       	call   c000c9de <operator delete(void*, unsigned long)>
c000e415:	83 c4 10             	add    esp,0x10
c000e418:	83 c4 0c             	add    esp,0xc
c000e41b:	c3                   	ret    

c000e41c <FPU::FPU(char const*)>:
c000e41c:	83 ec 0c             	sub    esp,0xc
c000e41f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e423:	83 ec 08             	sub    esp,0x8
c000e426:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e42a:	50                   	push   eax
c000e42b:	e8 da fc ff ff       	call   c000e10a <Device::Device(char const*)>
c000e430:	83 c4 10             	add    esp,0x10
c000e433:	ba b8 34 02 c0       	mov    edx,0xc00234b8
c000e438:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e43c:	89 10                	mov    DWORD PTR [eax],edx
c000e43e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e442:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c000e44c:	90                   	nop
c000e44d:	83 c4 0c             	add    esp,0xc
c000e450:	c3                   	ret    
c000e451:	90                   	nop
c000e452:	66 90                	xchg   ax,ax

c000e454 <FPU::~FPU()>:
c000e454:	83 ec 0c             	sub    esp,0xc
c000e457:	ba b8 34 02 c0       	mov    edx,0xc00234b8
c000e45c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e460:	89 10                	mov    DWORD PTR [eax],edx
c000e462:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e466:	83 ec 0c             	sub    esp,0xc
c000e469:	50                   	push   eax
c000e46a:	e8 65 f9 ff ff       	call   c000ddd4 <Device::~Device()>
c000e46f:	83 c4 10             	add    esp,0x10
c000e472:	90                   	nop
c000e473:	83 c4 0c             	add    esp,0xc
c000e476:	c3                   	ret    
c000e477:	90                   	nop

c000e478 <FPU::~FPU()>:
c000e478:	83 ec 0c             	sub    esp,0xc
c000e47b:	83 ec 0c             	sub    esp,0xc
c000e47e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e482:	e8 cd ff ff ff       	call   c000e454 <FPU::~FPU()>
c000e487:	83 c4 10             	add    esp,0x10
c000e48a:	83 ec 08             	sub    esp,0x8
c000e48d:	68 58 01 00 00       	push   0x158
c000e492:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e496:	e8 43 e5 ff ff       	call   c000c9de <operator delete(void*, unsigned long)>
c000e49b:	83 c4 10             	add    esp,0x10
c000e49e:	83 c4 0c             	add    esp,0xc
c000e4a1:	c3                   	ret    

c000e4a2 <setupFPU()>:
c000e4a2:	53                   	push   ebx
c000e4a3:	83 ec 08             	sub    esp,0x8
c000e4a6:	8b 15 68 64 02 c0    	mov    edx,DWORD PTR ds:0xc0026468
c000e4ac:	f6 82 e9 01 00 00 20 	test   BYTE PTR [edx+0x1e9],0x20
c000e4b3:	74 1b                	je     c000e4d0 <setupFPU()+0x2e>
c000e4b5:	83 ec 0c             	sub    esp,0xc
c000e4b8:	68 58 01 00 00       	push   0x158
c000e4bd:	e8 01 b5 ff ff       	call   c00099c3 <malloc>
c000e4c2:	89 c3                	mov    ebx,eax
c000e4c4:	89 04 24             	mov    DWORD PTR [esp],eax
c000e4c7:	e8 48 16 01 00       	call   c001fb14 <AVX::AVX()>
c000e4cc:	eb 62                	jmp    c000e530 <setupFPU()+0x8e>
c000e4ce:	66 90                	xchg   ax,ax
c000e4d0:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c000e4d6:	84 c0                	test   al,al
c000e4d8:	79 1a                	jns    c000e4f4 <setupFPU()+0x52>
c000e4da:	83 ec 0c             	sub    esp,0xc
c000e4dd:	68 58 01 00 00       	push   0x158
c000e4e2:	e8 dc b4 ff ff       	call   c00099c3 <malloc>
c000e4e7:	89 c3                	mov    ebx,eax
c000e4e9:	89 04 24             	mov    DWORD PTR [esp],eax
c000e4ec:	e8 53 17 01 00       	call   c001fc44 <SSE::SSE()>
c000e4f1:	eb 3d                	jmp    c000e530 <setupFPU()+0x8e>
c000e4f3:	90                   	nop
c000e4f4:	a8 20                	test   al,0x20
c000e4f6:	74 1c                	je     c000e514 <setupFPU()+0x72>
c000e4f8:	83 ec 0c             	sub    esp,0xc
c000e4fb:	68 58 01 00 00       	push   0x158
c000e500:	e8 be b4 ff ff       	call   c00099c3 <malloc>
c000e505:	89 c3                	mov    ebx,eax
c000e507:	89 04 24             	mov    DWORD PTR [esp],eax
c000e50a:	e8 99 16 01 00       	call   c001fba8 <MMX::MMX()>
c000e50f:	eb 1f                	jmp    c000e530 <setupFPU()+0x8e>
c000e511:	8d 76 00             	lea    esi,[esi+0x0]
c000e514:	a8 10                	test   al,0x10
c000e516:	74 20                	je     c000e538 <setupFPU()+0x96>
c000e518:	83 ec 0c             	sub    esp,0xc
c000e51b:	68 58 01 00 00       	push   0x158
c000e520:	e8 9e b4 ff ff       	call   c00099c3 <malloc>
c000e525:	89 c3                	mov    ebx,eax
c000e527:	89 04 24             	mov    DWORD PTR [esp],eax
c000e52a:	e8 a9 17 01 00       	call   c001fcd8 <x87::x87()>
c000e52f:	90                   	nop
c000e530:	83 c4 10             	add    esp,0x10
c000e533:	eb 27                	jmp    c000e55c <setupFPU()+0xba>
c000e535:	8d 76 00             	lea    esi,[esi+0x0]
c000e538:	83 e0 ef             	and    eax,0xffffffef
c000e53b:	83 ec 0c             	sub    esp,0xc
c000e53e:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c000e544:	68 a4 34 02 c0       	push   0xc00234a4
c000e549:	e8 71 e5 ff ff       	call   c000cabf <Dbg::kprintf(char const*, ...)>
c000e54e:	0f 20 c0             	mov    eax,cr0
c000e551:	83 c8 04             	or     eax,0x4
c000e554:	0f 22 c0             	mov    cr0,eax
c000e557:	31 db                	xor    ebx,ebx
c000e559:	83 c4 10             	add    esp,0x10
c000e55c:	89 d8                	mov    eax,ebx
c000e55e:	83 c4 08             	add    esp,0x8
c000e561:	5b                   	pop    ebx
c000e562:	c3                   	ret    
c000e563:	90                   	nop

c000e564 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))>:
c000e564:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e568:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000e56c:	c1 e0 04             	shl    eax,0x4
c000e56f:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c000e573:	8d 50 10             	lea    edx,[eax+0x10]
c000e576:	39 88 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ecx
c000e57c:	74 08                	je     c000e586 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x22>
c000e57e:	83 c0 04             	add    eax,0x4
c000e581:	39 d0                	cmp    eax,edx
c000e583:	75 f1                	jne    c000e576 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x12>
c000e585:	c3                   	ret    
c000e586:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c000e590:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c000e59a:	eb e2                	jmp    c000e57e <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x1a>

c000e59c <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)>:
c000e59c:	57                   	push   edi
c000e59d:	31 c0                	xor    eax,eax
c000e59f:	56                   	push   esi
c000e5a0:	53                   	push   ebx
c000e5a1:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e5a5:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000e5a9:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000e5ad:	89 da                	mov    edx,ebx
c000e5af:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000e5b3:	c1 e2 04             	shl    edx,0x4
c000e5b6:	01 ca                	add    edx,ecx
c000e5b8:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c000e5c0:	74 16                	je     c000e5d8 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x3c>
c000e5c2:	40                   	inc    eax
c000e5c3:	83 f8 04             	cmp    eax,0x4
c000e5c6:	75 f0                	jne    c000e5b8 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x1c>
c000e5c8:	c7 44 24 10 e8 34 02 c0 	mov    DWORD PTR [esp+0x10],0xc00234e8
c000e5d0:	5b                   	pop    ebx
c000e5d1:	5e                   	pop    esi
c000e5d2:	5f                   	pop    edi
c000e5d3:	e9 a9 5d 00 00       	jmp    c0014381 <Krnl::panic(char const*)>
c000e5d8:	8d 04 98             	lea    eax,[eax+ebx*4]
c000e5db:	8d 04 81             	lea    eax,[ecx+eax*4]
c000e5de:	89 b0 58 01 00 00    	mov    DWORD PTR [eax+0x158],esi
c000e5e4:	89 b8 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edi
c000e5ea:	5b                   	pop    ebx
c000e5eb:	5e                   	pop    esi
c000e5ec:	5f                   	pop    edi
c000e5ed:	c3                   	ret    

c000e5ee <doubleFault(regs*, void*)>:
c000e5ee:	55                   	push   ebp
c000e5ef:	89 e5                	mov    ebp,esp
c000e5f1:	83 ec 08             	sub    esp,0x8
c000e5f4:	83 ec 0c             	sub    esp,0xc
c000e5f7:	68 f5 34 02 c0       	push   0xc00234f5
c000e5fc:	e8 80 5d 00 00       	call   c0014381 <Krnl::panic(char const*)>
c000e601:	83 c4 10             	add    esp,0x10
c000e604:	90                   	nop
c000e605:	c9                   	leave  
c000e606:	c3                   	ret    
c000e607:	90                   	nop

c000e608 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000e608:	56                   	push   esi
c000e609:	53                   	push   ebx
c000e60a:	50                   	push   eax
c000e60b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000e60f:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000e613:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c000e618:	75 35                	jne    c000e64f <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x47>
c000e61a:	8d 43 20             	lea    eax,[ebx+0x20]
c000e61d:	31 d2                	xor    edx,edx
c000e61f:	89 c1                	mov    ecx,eax
c000e621:	c1 e1 04             	shl    ecx,0x4
c000e624:	01 f1                	add    ecx,esi
c000e626:	83 bc 91 58 01 00 00 00 	cmp    DWORD PTR [ecx+edx*4+0x158],0x0
c000e62e:	74 3e                	je     c000e66e <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x66>
c000e630:	42                   	inc    edx
c000e631:	83 fa 04             	cmp    edx,0x4
c000e634:	75 f0                	jne    c000e626 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1e>
c000e636:	83 ec 0c             	sub    esp,0xc
c000e639:	68 0f 35 02 c0       	push   0xc002350f
c000e63e:	e8 3e 5d 00 00       	call   c0014381 <Krnl::panic(char const*)>
c000e643:	83 c4 10             	add    esp,0x10
c000e646:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000e64b:	5a                   	pop    edx
c000e64c:	5b                   	pop    ebx
c000e64d:	5e                   	pop    esi
c000e64e:	c3                   	ret    
c000e64f:	83 ec 0c             	sub    esp,0xc
c000e652:	56                   	push   esi
c000e653:	e8 ae fb ff ff       	call   c000e206 <Device::getName()>
c000e658:	83 c4 10             	add    esp,0x10
c000e65b:	80 38 41             	cmp    BYTE PTR [eax],0x41
c000e65e:	75 ba                	jne    c000e61a <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c000e660:	83 fb 0f             	cmp    ebx,0xf
c000e663:	7f 29                	jg     c000e68e <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x86>
c000e665:	0f b6 9b 60 5b 02 c0 	movzx  ebx,BYTE PTR [ebx-0x3ffda4a0]
c000e66c:	eb ac                	jmp    c000e61a <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c000e66e:	8d 04 82             	lea    eax,[edx+eax*4]
c000e671:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000e675:	8d 04 86             	lea    eax,[esi+eax*4]
c000e678:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c000e67e:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000e682:	89 90 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edx
c000e688:	89 d8                	mov    eax,ebx
c000e68a:	5a                   	pop    edx
c000e68b:	5b                   	pop    ebx
c000e68c:	5e                   	pop    esi
c000e68d:	c3                   	ret    
c000e68e:	83 ec 0c             	sub    esp,0xc
c000e691:	68 02 35 02 c0       	push   0xc0023502
c000e696:	e8 e6 5c 00 00       	call   c0014381 <Krnl::panic(char const*)>
c000e69b:	83 c4 10             	add    esp,0x10
c000e69e:	e9 77 ff ff ff       	jmp    c000e61a <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c000e6a3:	90                   	nop

c000e6a4 <InterruptController::clearAllHandlers(int, bool)>:
c000e6a4:	56                   	push   esi
c000e6a5:	53                   	push   ebx
c000e6a6:	52                   	push   edx
c000e6a7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e6ab:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000e6af:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c000e6b4:	75 61                	jne    c000e717 <InterruptController::clearAllHandlers(int, bool)+0x73>
c000e6b6:	8d 46 20             	lea    eax,[esi+0x20]
c000e6b9:	c1 e6 04             	shl    esi,0x4
c000e6bc:	c1 e0 04             	shl    eax,0x4
c000e6bf:	01 de                	add    esi,ebx
c000e6c1:	01 d8                	add    eax,ebx
c000e6c3:	c7 86 58 03 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x358],0x0
c000e6cd:	c7 86 58 13 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x1358],0x0
c000e6d7:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c000e6e1:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c000e6eb:	c7 80 60 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x160],0x0
c000e6f5:	c7 80 60 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1160],0x0
c000e6ff:	c7 80 64 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x164],0x0
c000e709:	c7 80 64 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1164],0x0
c000e713:	58                   	pop    eax
c000e714:	5b                   	pop    ebx
c000e715:	5e                   	pop    esi
c000e716:	c3                   	ret    
c000e717:	83 ec 0c             	sub    esp,0xc
c000e71a:	53                   	push   ebx
c000e71b:	e8 e6 fa ff ff       	call   c000e206 <Device::getName()>
c000e720:	83 c4 10             	add    esp,0x10
c000e723:	80 38 41             	cmp    BYTE PTR [eax],0x41
c000e726:	75 8e                	jne    c000e6b6 <InterruptController::clearAllHandlers(int, bool)+0x12>
c000e728:	83 fe 0f             	cmp    esi,0xf
c000e72b:	7f 09                	jg     c000e736 <InterruptController::clearAllHandlers(int, bool)+0x92>
c000e72d:	0f b6 b6 60 5b 02 c0 	movzx  esi,BYTE PTR [esi-0x3ffda4a0]
c000e734:	eb 80                	jmp    c000e6b6 <InterruptController::clearAllHandlers(int, bool)+0x12>
c000e736:	83 ec 0c             	sub    esp,0xc
c000e739:	68 1c 35 02 c0       	push   0xc002351c
c000e73e:	e8 3e 5c 00 00       	call   c0014381 <Krnl::panic(char const*)>
c000e743:	83 c4 10             	add    esp,0x10
c000e746:	e9 6b ff ff ff       	jmp    c000e6b6 <InterruptController::clearAllHandlers(int, bool)+0x12>
c000e74b:	90                   	nop

c000e74c <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c000e74c:	56                   	push   esi
c000e74d:	53                   	push   ebx
c000e74e:	52                   	push   edx
c000e74f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000e753:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000e757:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c000e75c:	75 3a                	jne    c000e798 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x4c>
c000e75e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000e762:	8d 50 20             	lea    edx,[eax+0x20]
c000e765:	c1 e2 04             	shl    edx,0x4
c000e768:	8d 04 16             	lea    eax,[esi+edx*1]
c000e76b:	8d 54 16 10          	lea    edx,[esi+edx*1+0x10]
c000e76f:	39 98 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ebx
c000e775:	74 0b                	je     c000e782 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x36>
c000e777:	83 c0 04             	add    eax,0x4
c000e77a:	39 d0                	cmp    eax,edx
c000e77c:	75 f1                	jne    c000e76f <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x23>
c000e77e:	58                   	pop    eax
c000e77f:	5b                   	pop    ebx
c000e780:	5e                   	pop    esi
c000e781:	c3                   	ret    
c000e782:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c000e78c:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c000e796:	eb df                	jmp    c000e777 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2b>
c000e798:	83 ec 0c             	sub    esp,0xc
c000e79b:	56                   	push   esi
c000e79c:	e8 65 fa ff ff       	call   c000e206 <Device::getName()>
c000e7a1:	83 c4 10             	add    esp,0x10
c000e7a4:	80 38 41             	cmp    BYTE PTR [eax],0x41
c000e7a7:	75 b5                	jne    c000e75e <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c000e7a9:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c000e7ae:	7f 11                	jg     c000e7c1 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x75>
c000e7b0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000e7b4:	0f b6 80 60 5b 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffda4a0]
c000e7bb:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000e7bf:	eb 9d                	jmp    c000e75e <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c000e7c1:	83 ec 0c             	sub    esp,0xc
c000e7c4:	68 29 35 02 c0       	push   0xc0023529
c000e7c9:	e8 b3 5b 00 00       	call   c0014381 <Krnl::panic(char const*)>
c000e7ce:	83 c4 10             	add    esp,0x10
c000e7d1:	eb 8b                	jmp    c000e75e <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>

c000e7d3 <nmiHandler(regs*, void*)>:
c000e7d3:	a1 68 64 02 c0       	mov    eax,ds:0xc0026468
c000e7d8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000e7dc:	e9 ad a9 ff ff       	jmp    c000918e <Computer::handleNMI()>

c000e7e1 <int_handler>:
c000e7e1:	55                   	push   ebp
c000e7e2:	57                   	push   edi
c000e7e3:	56                   	push   esi
c000e7e4:	53                   	push   ebx
c000e7e5:	83 ec 0c             	sub    esp,0xc
c000e7e8:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000e7ec:	80 3d 44 6f 02 c0 00 	cmp    BYTE PTR ds:0xc0026f44,0x0
c000e7f3:	74 0b                	je     c000e800 <int_handler+0x1f>
c000e7f5:	fa                   	cli    
c000e7f6:	f4                   	hlt    
c000e7f7:	80 3d 44 6f 02 c0 00 	cmp    BYTE PTR ds:0xc0026f44,0x0
c000e7fe:	75 f5                	jne    c000e7f5 <int_handler+0x14>
c000e800:	a1 68 64 02 c0       	mov    eax,ds:0xc0026468
c000e805:	8b 5e 30             	mov    ebx,DWORD PTR [esi+0x30]
c000e808:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000e80e:	8b b8 88 11 00 00    	mov    edi,DWORD PTR [eax+0x1188]
c000e814:	8d 43 e0             	lea    eax,[ebx-0x20]
c000e817:	83 f8 17             	cmp    eax,0x17
c000e81a:	77 13                	ja     c000e82f <int_handler+0x4e>
c000e81c:	83 ec 08             	sub    esp,0x8
c000e81f:	8b 17                	mov    edx,DWORD PTR [edi]
c000e821:	8d 43 e0             	lea    eax,[ebx-0x20]
c000e824:	0f b6 c0             	movzx  eax,al
c000e827:	50                   	push   eax
c000e828:	57                   	push   edi
c000e829:	ff 52 38             	call   DWORD PTR [edx+0x38]
c000e82c:	83 c4 10             	add    esp,0x10
c000e82f:	83 c3 15             	add    ebx,0x15
c000e832:	c1 e3 04             	shl    ebx,0x4
c000e835:	8d 6c 1f 08          	lea    ebp,[edi+ebx*1+0x8]
c000e839:	8d bc 1f 08 10 00 00 	lea    edi,[edi+ebx*1+0x1008]
c000e840:	31 db                	xor    ebx,ebx
c000e842:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c000e846:	85 c0                	test   eax,eax
c000e848:	74 13                	je     c000e85d <int_handler+0x7c>
c000e84a:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c000e84d:	83 7e 30 60          	cmp    DWORD PTR [esi+0x30],0x60
c000e851:	74 1c                	je     c000e86f <int_handler+0x8e>
c000e853:	83 ec 08             	sub    esp,0x8
c000e856:	52                   	push   edx
c000e857:	56                   	push   esi
c000e858:	ff d0                	call   eax
c000e85a:	83 c4 10             	add    esp,0x10
c000e85d:	43                   	inc    ebx
c000e85e:	83 fb 04             	cmp    ebx,0x4
c000e861:	75 df                	jne    c000e842 <int_handler+0x61>
c000e863:	83 c4 0c             	add    esp,0xc
c000e866:	31 c0                	xor    eax,eax
c000e868:	5b                   	pop    ebx
c000e869:	31 d2                	xor    edx,edx
c000e86b:	5e                   	pop    esi
c000e86c:	5f                   	pop    edi
c000e86d:	5d                   	pop    ebp
c000e86e:	c3                   	ret    
c000e86f:	83 ec 08             	sub    esp,0x8
c000e872:	52                   	push   edx
c000e873:	56                   	push   esi
c000e874:	ff d0                	call   eax
c000e876:	83 c4 10             	add    esp,0x10
c000e879:	83 c4 0c             	add    esp,0xc
c000e87c:	5b                   	pop    ebx
c000e87d:	5e                   	pop    esi
c000e87e:	5f                   	pop    edi
c000e87f:	5d                   	pop    ebp
c000e880:	c3                   	ret    
c000e881:	90                   	nop

c000e882 <InterruptController::InterruptController(char const*)>:
c000e882:	83 ec 1c             	sub    esp,0x1c
c000e885:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e889:	83 ec 08             	sub    esp,0x8
c000e88c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e890:	50                   	push   eax
c000e891:	e8 74 f8 ff ff       	call   c000e10a <Device::Device(char const*)>
c000e896:	83 c4 10             	add    esp,0x10
c000e899:	ba e0 37 02 c0       	mov    edx,0xc00237e0
c000e89e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e8a2:	89 10                	mov    DWORD PTR [eax],edx
c000e8a4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e8a8:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c000e8b2:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000e8ba:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c000e8c2:	7f 5e                	jg     c000e922 <InterruptController::InterruptController(char const*)+0xa0>
c000e8c4:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000e8cc:	83 7c 24 08 03       	cmp    DWORD PTR [esp+0x8],0x3
c000e8d1:	7f 49                	jg     c000e91c <InterruptController::InterruptController(char const*)+0x9a>
c000e8d3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e8d7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000e8db:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c000e8e2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000e8e6:	01 ca                	add    edx,ecx
c000e8e8:	83 c2 54             	add    edx,0x54
c000e8eb:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c000e8f3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e8f7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000e8fb:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c000e902:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000e906:	01 ca                	add    edx,ecx
c000e908:	81 c2 54 04 00 00    	add    edx,0x454
c000e90e:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c000e916:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c000e91a:	eb b0                	jmp    c000e8cc <InterruptController::InterruptController(char const*)+0x4a>
c000e91c:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000e920:	eb 98                	jmp    c000e8ba <InterruptController::InterruptController(char const*)+0x38>
c000e922:	90                   	nop
c000e923:	83 c4 1c             	add    esp,0x1c
c000e926:	c3                   	ret    
c000e927:	90                   	nop

c000e928 <InterruptController::~InterruptController()>:
c000e928:	83 ec 0c             	sub    esp,0xc
c000e92b:	ba e0 37 02 c0       	mov    edx,0xc00237e0
c000e930:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e934:	89 10                	mov    DWORD PTR [eax],edx
c000e936:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e93a:	83 ec 0c             	sub    esp,0xc
c000e93d:	50                   	push   eax
c000e93e:	e8 91 f4 ff ff       	call   c000ddd4 <Device::~Device()>
c000e943:	83 c4 10             	add    esp,0x10
c000e946:	90                   	nop
c000e947:	83 c4 0c             	add    esp,0xc
c000e94a:	c3                   	ret    
c000e94b:	90                   	nop

c000e94c <InterruptController::~InterruptController()>:
c000e94c:	83 ec 0c             	sub    esp,0xc
c000e94f:	83 ec 0c             	sub    esp,0xc
c000e952:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e956:	e8 cd ff ff ff       	call   c000e928 <InterruptController::~InterruptController()>
c000e95b:	83 c4 10             	add    esp,0x10
c000e95e:	83 ec 08             	sub    esp,0x8
c000e961:	68 58 21 00 00       	push   0x2158
c000e966:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e96a:	e8 6f e0 ff ff       	call   c000c9de <operator delete(void*, unsigned long)>
c000e96f:	83 c4 10             	add    esp,0x10
c000e972:	83 c4 0c             	add    esp,0xc
c000e975:	c3                   	ret    

c000e976 <displayDebugInfo(regs*)>:
c000e976:	55                   	push   ebp
c000e977:	57                   	push   edi
c000e978:	56                   	push   esi
c000e979:	53                   	push   ebx
c000e97a:	83 ec 24             	sub    esp,0x24
c000e97d:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000e981:	0f 20 c2             	mov    edx,cr0
c000e984:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e988:	0f 20 d7             	mov    edi,cr2
c000e98b:	0f 20 de             	mov    esi,cr3
c000e98e:	0f 20 e5             	mov    ebp,cr4
c000e991:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c000e994:	68 36 35 02 c0       	push   0xc0023536
c000e999:	e8 21 e1 ff ff       	call   c000cabf <Dbg::kprintf(char const*, ...)>
c000e99e:	59                   	pop    ecx
c000e99f:	58                   	pop    eax
c000e9a0:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c000e9a3:	68 41 35 02 c0       	push   0xc0023541
c000e9a8:	e8 12 e1 ff ff       	call   c000cabf <Dbg::kprintf(char const*, ...)>
c000e9ad:	58                   	pop    eax
c000e9ae:	5a                   	pop    edx
c000e9af:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c000e9b2:	68 4c 35 02 c0       	push   0xc002354c
c000e9b7:	e8 03 e1 ff ff       	call   c000cabf <Dbg::kprintf(char const*, ...)>
c000e9bc:	59                   	pop    ecx
c000e9bd:	58                   	pop    eax
c000e9be:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c000e9c1:	68 57 35 02 c0       	push   0xc0023557
c000e9c6:	e8 f4 e0 ff ff       	call   c000cabf <Dbg::kprintf(char const*, ...)>
c000e9cb:	58                   	pop    eax
c000e9cc:	5a                   	pop    edx
c000e9cd:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000e9d0:	68 62 35 02 c0       	push   0xc0023562
c000e9d5:	e8 e5 e0 ff ff       	call   c000cabf <Dbg::kprintf(char const*, ...)>
c000e9da:	59                   	pop    ecx
c000e9db:	58                   	pop    eax
c000e9dc:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000e9df:	68 6d 35 02 c0       	push   0xc002356d
c000e9e4:	e8 d6 e0 ff ff       	call   c000cabf <Dbg::kprintf(char const*, ...)>
c000e9e9:	58                   	pop    eax
c000e9ea:	5a                   	pop    edx
c000e9eb:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000e9ee:	68 78 35 02 c0       	push   0xc0023578
c000e9f3:	e8 c7 e0 ff ff       	call   c000cabf <Dbg::kprintf(char const*, ...)>
c000e9f8:	59                   	pop    ecx
c000e9f9:	58                   	pop    eax
c000e9fa:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000e9fd:	68 83 35 02 c0       	push   0xc0023583
c000ea02:	e8 b8 e0 ff ff       	call   c000cabf <Dbg::kprintf(char const*, ...)>
c000ea07:	58                   	pop    eax
c000ea08:	5a                   	pop    edx
c000ea09:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c000ea0c:	68 8e 35 02 c0       	push   0xc002358e
c000ea11:	e8 a9 e0 ff ff       	call   c000cabf <Dbg::kprintf(char const*, ...)>
c000ea16:	59                   	pop    ecx
c000ea17:	58                   	pop    eax
c000ea18:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000ea1b:	68 9d 35 02 c0       	push   0xc002359d
c000ea20:	e8 9a e0 ff ff       	call   c000cabf <Dbg::kprintf(char const*, ...)>
c000ea25:	58                   	pop    eax
c000ea26:	5a                   	pop    edx
c000ea27:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000ea2a:	68 a8 35 02 c0       	push   0xc00235a8
c000ea2f:	e8 8b e0 ff ff       	call   c000cabf <Dbg::kprintf(char const*, ...)>
c000ea34:	59                   	pop    ecx
c000ea35:	58                   	pop    eax
c000ea36:	57                   	push   edi
c000ea37:	68 b3 35 02 c0       	push   0xc00235b3
c000ea3c:	e8 7e e0 ff ff       	call   c000cabf <Dbg::kprintf(char const*, ...)>
c000ea41:	58                   	pop    eax
c000ea42:	5a                   	pop    edx
c000ea43:	56                   	push   esi
c000ea44:	68 be 35 02 c0       	push   0xc00235be
c000ea49:	e8 71 e0 ff ff       	call   c000cabf <Dbg::kprintf(char const*, ...)>
c000ea4e:	59                   	pop    ecx
c000ea4f:	a1 50 79 02 c0       	mov    eax,ds:0xc0027950
c000ea54:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ea5a:	e8 bc bd ff ff       	call   c000a81b <setActiveTerminal(VgaText*)>
c000ea5f:	58                   	pop    eax
c000ea60:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c000ea63:	5a                   	pop    edx
c000ea64:	c1 e0 05             	shl    eax,0x5
c000ea67:	05 c0 58 02 c0       	add    eax,0xc00258c0
c000ea6c:	50                   	push   eax
c000ea6d:	a1 50 79 02 c0       	mov    eax,ds:0xc0027950
c000ea72:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ea78:	e8 ab c2 ff ff       	call   c000ad28 <VgaText::puts(char const*)>
c000ea7d:	59                   	pop    ecx
c000ea7e:	58                   	pop    eax
c000ea7f:	a1 50 79 02 c0       	mov    eax,ds:0xc0027950
c000ea84:	68 c9 35 02 c0       	push   0xc00235c9
c000ea89:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ea8f:	e8 94 c2 ff ff       	call   c000ad28 <VgaText::puts(char const*)>
c000ea94:	58                   	pop    eax
c000ea95:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000ea9a:	5a                   	pop    edx
c000ea9b:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000ea9e:	83 c0 0c             	add    eax,0xc
c000eaa1:	50                   	push   eax
c000eaa2:	a1 50 79 02 c0       	mov    eax,ds:0xc0027950
c000eaa7:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000eaad:	e8 76 c2 ff ff       	call   c000ad28 <VgaText::puts(char const*)>
c000eab2:	59                   	pop    ecx
c000eab3:	58                   	pop    eax
c000eab4:	a1 50 79 02 c0       	mov    eax,ds:0xc0027950
c000eab9:	68 d2 35 02 c0       	push   0xc00235d2
c000eabe:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000eac4:	e8 5f c2 ff ff       	call   c000ad28 <VgaText::puts(char const*)>
c000eac9:	58                   	pop    eax
c000eaca:	a1 50 79 02 c0       	mov    eax,ds:0xc0027950
c000eacf:	5a                   	pop    edx
c000ead0:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000ead3:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ead9:	e8 04 c2 ff ff       	call   c000ace2 <VgaText::putx(unsigned int)>
c000eade:	59                   	pop    ecx
c000eadf:	58                   	pop    eax
c000eae0:	a1 50 79 02 c0       	mov    eax,ds:0xc0027950
c000eae5:	68 da 35 02 c0       	push   0xc00235da
c000eaea:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000eaf0:	e8 33 c2 ff ff       	call   c000ad28 <VgaText::puts(char const*)>
c000eaf5:	58                   	pop    eax
c000eaf6:	a1 50 79 02 c0       	mov    eax,ds:0xc0027950
c000eafb:	5a                   	pop    edx
c000eafc:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000eaff:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000eb05:	e8 d8 c1 ff ff       	call   c000ace2 <VgaText::putx(unsigned int)>
c000eb0a:	59                   	pop    ecx
c000eb0b:	58                   	pop    eax
c000eb0c:	a1 50 79 02 c0       	mov    eax,ds:0xc0027950
c000eb11:	68 e2 35 02 c0       	push   0xc00235e2
c000eb16:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000eb1c:	e8 07 c2 ff ff       	call   c000ad28 <VgaText::puts(char const*)>
c000eb21:	58                   	pop    eax
c000eb22:	a1 50 79 02 c0       	mov    eax,ds:0xc0027950
c000eb27:	5a                   	pop    edx
c000eb28:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c000eb2b:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000eb31:	e8 ac c1 ff ff       	call   c000ace2 <VgaText::putx(unsigned int)>
c000eb36:	59                   	pop    ecx
c000eb37:	58                   	pop    eax
c000eb38:	a1 50 79 02 c0       	mov    eax,ds:0xc0027950
c000eb3d:	68 ea 35 02 c0       	push   0xc00235ea
c000eb42:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000eb48:	e8 db c1 ff ff       	call   c000ad28 <VgaText::puts(char const*)>
c000eb4d:	58                   	pop    eax
c000eb4e:	a1 50 79 02 c0       	mov    eax,ds:0xc0027950
c000eb53:	5a                   	pop    edx
c000eb54:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c000eb57:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000eb5d:	e8 80 c1 ff ff       	call   c000ace2 <VgaText::putx(unsigned int)>
c000eb62:	59                   	pop    ecx
c000eb63:	58                   	pop    eax
c000eb64:	a1 50 79 02 c0       	mov    eax,ds:0xc0027950
c000eb69:	68 f2 35 02 c0       	push   0xc00235f2
c000eb6e:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000eb74:	e8 af c1 ff ff       	call   c000ad28 <VgaText::puts(char const*)>
c000eb79:	58                   	pop    eax
c000eb7a:	a1 50 79 02 c0       	mov    eax,ds:0xc0027950
c000eb7f:	5a                   	pop    edx
c000eb80:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000eb83:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000eb89:	e8 54 c1 ff ff       	call   c000ace2 <VgaText::putx(unsigned int)>
c000eb8e:	59                   	pop    ecx
c000eb8f:	58                   	pop    eax
c000eb90:	a1 50 79 02 c0       	mov    eax,ds:0xc0027950
c000eb95:	68 fa 35 02 c0       	push   0xc00235fa
c000eb9a:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000eba0:	e8 83 c1 ff ff       	call   c000ad28 <VgaText::puts(char const*)>
c000eba5:	58                   	pop    eax
c000eba6:	a1 50 79 02 c0       	mov    eax,ds:0xc0027950
c000ebab:	5a                   	pop    edx
c000ebac:	ff 73 40             	push   DWORD PTR [ebx+0x40]
c000ebaf:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ebb5:	e8 28 c1 ff ff       	call   c000ace2 <VgaText::putx(unsigned int)>
c000ebba:	59                   	pop    ecx
c000ebbb:	58                   	pop    eax
c000ebbc:	a1 50 79 02 c0       	mov    eax,ds:0xc0027950
c000ebc1:	68 02 36 02 c0       	push   0xc0023602
c000ebc6:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ebcc:	e8 57 c1 ff ff       	call   c000ad28 <VgaText::puts(char const*)>
c000ebd1:	58                   	pop    eax
c000ebd2:	a1 50 79 02 c0       	mov    eax,ds:0xc0027950
c000ebd7:	5a                   	pop    edx
c000ebd8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000ebdc:	52                   	push   edx
c000ebdd:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ebe3:	e8 fa c0 ff ff       	call   c000ace2 <VgaText::putx(unsigned int)>
c000ebe8:	59                   	pop    ecx
c000ebe9:	58                   	pop    eax
c000ebea:	a1 50 79 02 c0       	mov    eax,ds:0xc0027950
c000ebef:	68 0b 36 02 c0       	push   0xc002360b
c000ebf4:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ebfa:	e8 29 c1 ff ff       	call   c000ad28 <VgaText::puts(char const*)>
c000ebff:	58                   	pop    eax
c000ec00:	a1 50 79 02 c0       	mov    eax,ds:0xc0027950
c000ec05:	5a                   	pop    edx
c000ec06:	57                   	push   edi
c000ec07:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ec0d:	e8 d0 c0 ff ff       	call   c000ace2 <VgaText::putx(unsigned int)>
c000ec12:	59                   	pop    ecx
c000ec13:	a1 50 79 02 c0       	mov    eax,ds:0xc0027950
c000ec18:	5f                   	pop    edi
c000ec19:	68 13 36 02 c0       	push   0xc0023613
c000ec1e:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ec24:	e8 ff c0 ff ff       	call   c000ad28 <VgaText::puts(char const*)>
c000ec29:	58                   	pop    eax
c000ec2a:	a1 50 79 02 c0       	mov    eax,ds:0xc0027950
c000ec2f:	5a                   	pop    edx
c000ec30:	56                   	push   esi
c000ec31:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ec37:	e8 a6 c0 ff ff       	call   c000ace2 <VgaText::putx(unsigned int)>
c000ec3c:	59                   	pop    ecx
c000ec3d:	a1 50 79 02 c0       	mov    eax,ds:0xc0027950
c000ec42:	5e                   	pop    esi
c000ec43:	68 1b 36 02 c0       	push   0xc002361b
c000ec48:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ec4e:	e8 d5 c0 ff ff       	call   c000ad28 <VgaText::puts(char const*)>
c000ec53:	5f                   	pop    edi
c000ec54:	58                   	pop    eax
c000ec55:	a1 50 79 02 c0       	mov    eax,ds:0xc0027950
c000ec5a:	55                   	push   ebp
c000ec5b:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ec61:	e8 7c c0 ff ff       	call   c000ace2 <VgaText::putx(unsigned int)>
c000ec66:	58                   	pop    eax
c000ec67:	a1 50 79 02 c0       	mov    eax,ds:0xc0027950
c000ec6c:	5a                   	pop    edx
c000ec6d:	68 23 36 02 c0       	push   0xc0023623
c000ec72:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ec78:	e8 ab c0 ff ff       	call   c000ad28 <VgaText::puts(char const*)>
c000ec7d:	0f 21 c0             	mov    eax,db0
c000ec80:	59                   	pop    ecx
c000ec81:	5e                   	pop    esi
c000ec82:	50                   	push   eax
c000ec83:	a1 50 79 02 c0       	mov    eax,ds:0xc0027950
c000ec88:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ec8e:	e8 4f c0 ff ff       	call   c000ace2 <VgaText::putx(unsigned int)>
c000ec93:	5f                   	pop    edi
c000ec94:	a1 50 79 02 c0       	mov    eax,ds:0xc0027950
c000ec99:	5d                   	pop    ebp
c000ec9a:	68 2c 36 02 c0       	push   0xc002362c
c000ec9f:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000eca5:	e8 7e c0 ff ff       	call   c000ad28 <VgaText::puts(char const*)>
c000ecaa:	0f 21 c8             	mov    eax,db1
c000ecad:	5a                   	pop    edx
c000ecae:	59                   	pop    ecx
c000ecaf:	50                   	push   eax
c000ecb0:	a1 50 79 02 c0       	mov    eax,ds:0xc0027950
c000ecb5:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ecbb:	e8 22 c0 ff ff       	call   c000ace2 <VgaText::putx(unsigned int)>
c000ecc0:	5e                   	pop    esi
c000ecc1:	a1 50 79 02 c0       	mov    eax,ds:0xc0027950
c000ecc6:	5f                   	pop    edi
c000ecc7:	68 34 36 02 c0       	push   0xc0023634
c000eccc:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ecd2:	e8 51 c0 ff ff       	call   c000ad28 <VgaText::puts(char const*)>
c000ecd7:	0f 21 d0             	mov    eax,db2
c000ecda:	5d                   	pop    ebp
c000ecdb:	5a                   	pop    edx
c000ecdc:	50                   	push   eax
c000ecdd:	a1 50 79 02 c0       	mov    eax,ds:0xc0027950
c000ece2:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ece8:	e8 f5 bf ff ff       	call   c000ace2 <VgaText::putx(unsigned int)>
c000eced:	59                   	pop    ecx
c000ecee:	a1 50 79 02 c0       	mov    eax,ds:0xc0027950
c000ecf3:	5e                   	pop    esi
c000ecf4:	68 3c 36 02 c0       	push   0xc002363c
c000ecf9:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ecff:	e8 24 c0 ff ff       	call   c000ad28 <VgaText::puts(char const*)>
c000ed04:	0f 21 d8             	mov    eax,db3
c000ed07:	5f                   	pop    edi
c000ed08:	5d                   	pop    ebp
c000ed09:	50                   	push   eax
c000ed0a:	a1 50 79 02 c0       	mov    eax,ds:0xc0027950
c000ed0f:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ed15:	e8 c8 bf ff ff       	call   c000ace2 <VgaText::putx(unsigned int)>
c000ed1a:	58                   	pop    eax
c000ed1b:	a1 50 79 02 c0       	mov    eax,ds:0xc0027950
c000ed20:	5a                   	pop    edx
c000ed21:	68 44 36 02 c0       	push   0xc0023644
c000ed26:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ed2c:	e8 f7 bf ff ff       	call   c000ad28 <VgaText::puts(char const*)>
c000ed31:	0f 21 f0             	mov    eax,db6
c000ed34:	59                   	pop    ecx
c000ed35:	5e                   	pop    esi
c000ed36:	50                   	push   eax
c000ed37:	a1 50 79 02 c0       	mov    eax,ds:0xc0027950
c000ed3c:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ed42:	e8 9b bf ff ff       	call   c000ace2 <VgaText::putx(unsigned int)>
c000ed47:	5f                   	pop    edi
c000ed48:	a1 50 79 02 c0       	mov    eax,ds:0xc0027950
c000ed4d:	5d                   	pop    ebp
c000ed4e:	68 4c 36 02 c0       	push   0xc002364c
c000ed53:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ed59:	e8 ca bf ff ff       	call   c000ad28 <VgaText::puts(char const*)>
c000ed5e:	0f 21 f8             	mov    eax,db7
c000ed61:	5a                   	pop    edx
c000ed62:	59                   	pop    ecx
c000ed63:	50                   	push   eax
c000ed64:	a1 50 79 02 c0       	mov    eax,ds:0xc0027950
c000ed69:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000ed6f:	e8 6e bf ff ff       	call   c000ace2 <VgaText::putx(unsigned int)>
c000ed74:	5e                   	pop    esi
c000ed75:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000ed78:	e8 a0 87 00 00       	call   c001751d <Thr::getDriverNameFromAddress(unsigned long)>
c000ed7d:	83 c4 10             	add    esp,0x10
c000ed80:	85 c0                	test   eax,eax
c000ed82:	74 7d                	je     c000ee01 <displayDebugInfo(regs*)+0x48b>
c000ed84:	89 c6                	mov    esi,eax
c000ed86:	50                   	push   eax
c000ed87:	50                   	push   eax
c000ed88:	56                   	push   esi
c000ed89:	68 54 36 02 c0       	push   0xc0023654
c000ed8e:	e8 2c dd ff ff       	call   c000cabf <Dbg::kprintf(char const*, ...)>
c000ed93:	5a                   	pop    edx
c000ed94:	a1 50 79 02 c0       	mov    eax,ds:0xc0027950
c000ed99:	59                   	pop    ecx
c000ed9a:	68 62 36 02 c0       	push   0xc0023662
c000ed9f:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000eda5:	e8 7e bf ff ff       	call   c000ad28 <VgaText::puts(char const*)>
c000edaa:	5f                   	pop    edi
c000edab:	a1 50 79 02 c0       	mov    eax,ds:0xc0027950
c000edb0:	5d                   	pop    ebp
c000edb1:	56                   	push   esi
c000edb2:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000edb8:	e8 6b bf ff ff       	call   c000ad28 <VgaText::puts(char const*)>
c000edbd:	58                   	pop    eax
c000edbe:	a1 50 79 02 c0       	mov    eax,ds:0xc0027950
c000edc3:	5a                   	pop    edx
c000edc4:	68 6e 36 02 c0       	push   0xc002366e
c000edc9:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c000edcf:	e8 54 bf ff ff       	call   c000ad28 <VgaText::puts(char const*)>
c000edd4:	59                   	pop    ecx
c000edd5:	a1 50 79 02 c0       	mov    eax,ds:0xc0027950
c000edda:	8b b8 06 05 00 00    	mov    edi,DWORD PTR [eax+0x506]
c000ede0:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000ede3:	e8 6c 87 00 00       	call   c0017554 <Thr::getDriverOffsetFromAddress(unsigned long)>
c000ede8:	5b                   	pop    ebx
c000ede9:	5d                   	pop    ebp
c000edea:	50                   	push   eax
c000edeb:	57                   	push   edi
c000edec:	e8 f1 be ff ff       	call   c000ace2 <VgaText::putx(unsigned int)>
c000edf1:	58                   	pop    eax
c000edf2:	5a                   	pop    edx
c000edf3:	56                   	push   esi
c000edf4:	68 7a 36 02 c0       	push   0xc002367a
c000edf9:	e8 c1 dc ff ff       	call   c000cabf <Dbg::kprintf(char const*, ...)>
c000edfe:	83 c4 10             	add    esp,0x10
c000ee01:	fa                   	cli    
c000ee02:	f4                   	hlt    
c000ee03:	eb fe                	jmp    c000ee03 <displayDebugInfo(regs*)+0x48d>

c000ee05 <x87EmulHandler(regs*, void*)>:
c000ee05:	83 ec 0c             	sub    esp,0xc
c000ee08:	0f 20 c2             	mov    edx,cr0
c000ee0b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000ee10:	80 78 5e 00          	cmp    BYTE PTR [eax+0x5e],0x0
c000ee14:	75 4b                	jne    c000ee61 <x87EmulHandler(regs*, void*)+0x5c>
c000ee16:	a1 68 64 02 c0       	mov    eax,ds:0xc0026468
c000ee1b:	8b 80 e0 01 00 00    	mov    eax,DWORD PTR [eax+0x1e0]
c000ee21:	85 c0                	test   eax,eax
c000ee23:	74 05                	je     c000ee2a <x87EmulHandler(regs*, void*)+0x25>
c000ee25:	83 e2 08             	and    edx,0x8
c000ee28:	75 17                	jne    c000ee41 <x87EmulHandler(regs*, void*)+0x3c>
c000ee2a:	83 ec 0c             	sub    esp,0xc
c000ee2d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ee31:	e8 94 ab 00 00       	call   c00199ca <Vm::x87Handler(regs*)>
c000ee36:	83 c4 10             	add    esp,0x10
c000ee39:	84 c0                	test   al,al
c000ee3b:	74 24                	je     c000ee61 <x87EmulHandler(regs*, void*)+0x5c>
c000ee3d:	83 c4 0c             	add    esp,0xc
c000ee40:	c3                   	ret    
c000ee41:	83 ec 0c             	sub    esp,0xc
c000ee44:	68 a0 36 02 c0       	push   0xc00236a0
c000ee49:	e8 71 dc ff ff       	call   c000cabf <Dbg::kprintf(char const*, ...)>
c000ee4e:	0f 06                	clts   
c000ee50:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000ee55:	83 c4 10             	add    esp,0x10
c000ee58:	a3 a8 65 02 c0       	mov    ds:0xc00265a8,eax
c000ee5d:	83 c4 0c             	add    esp,0xc
c000ee60:	c3                   	ret    
c000ee61:	83 ec 0c             	sub    esp,0xc
c000ee64:	68 8a 36 02 c0       	push   0xc002368a
c000ee69:	e8 51 dc ff ff       	call   c000cabf <Dbg::kprintf(char const*, ...)>
c000ee6e:	5a                   	pop    edx
c000ee6f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ee73:	e8 fe fa ff ff       	call   c000e976 <displayDebugInfo(regs*)>

c000ee78 <gpFault(regs*, void*)>:
c000ee78:	53                   	push   ebx
c000ee79:	83 ec 14             	sub    esp,0x14
c000ee7c:	c7 05 a4 65 02 c0 86 8e 01 c0 	mov    DWORD PTR ds:0xc00265a4,0xc0018e86
c000ee86:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000ee8a:	53                   	push   ebx
c000ee8b:	e8 f6 9f 00 00       	call   c0018e86 <Vm::faultHandler(regs*)>
c000ee90:	83 c4 10             	add    esp,0x10
c000ee93:	84 c0                	test   al,al
c000ee95:	74 05                	je     c000ee9c <gpFault(regs*, void*)+0x24>
c000ee97:	83 c4 08             	add    esp,0x8
c000ee9a:	5b                   	pop    ebx
c000ee9b:	c3                   	ret    
c000ee9c:	83 ec 0c             	sub    esp,0xc
c000ee9f:	68 ad 36 02 c0       	push   0xc00236ad
c000eea4:	e8 16 dc ff ff       	call   c000cabf <Dbg::kprintf(char const*, ...)>
c000eea9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000eeac:	e8 c5 fa ff ff       	call   c000e976 <displayDebugInfo(regs*)>

c000eeb1 <pgFault(regs*, void*)>:
c000eeb1:	53                   	push   ebx
c000eeb2:	83 ec 10             	sub    esp,0x10
c000eeb5:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000eeb9:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000eebc:	68 c8 36 02 c0       	push   0xc00236c8
c000eec1:	e8 f9 db ff ff       	call   c000cabf <Dbg::kprintf(char const*, ...)>
c000eec6:	0f 20 d0             	mov    eax,cr2
c000eec9:	5a                   	pop    edx
c000eeca:	59                   	pop    ecx
c000eecb:	50                   	push   eax
c000eecc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000eed1:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000eed4:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c000eeda:	e8 e7 d6 ff ff       	call   c000c5c6 <VAS::tryLoadBackOffDisk(unsigned long)>
c000eedf:	83 c4 10             	add    esp,0x10
c000eee2:	84 c0                	test   al,al
c000eee4:	74 05                	je     c000eeeb <pgFault(regs*, void*)+0x3a>
c000eee6:	83 c4 08             	add    esp,0x8
c000eee9:	5b                   	pop    ebx
c000eeea:	c3                   	ret    
c000eeeb:	83 ec 0c             	sub    esp,0xc
c000eeee:	68 dd 36 02 c0       	push   0xc00236dd
c000eef3:	e8 c7 db ff ff       	call   c000cabf <Dbg::kprintf(char const*, ...)>
c000eef8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000eefb:	e8 76 fa ff ff       	call   c000e976 <displayDebugInfo(regs*)>

c000ef00 <otherISRHandler(regs*, void*)>:
c000ef00:	53                   	push   ebx
c000ef01:	83 ec 0c             	sub    esp,0xc
c000ef04:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000ef08:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c000ef0b:	50                   	push   eax
c000ef0c:	50                   	push   eax
c000ef0d:	68 ea 36 02 c0       	push   0xc00236ea
c000ef12:	e8 a8 db ff ff       	call   c000cabf <Dbg::kprintf(char const*, ...)>
c000ef17:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000ef1a:	e8 57 fa ff ff       	call   c000e976 <displayDebugInfo(regs*)>

c000ef1f <opcodeFault(regs*, void*)>:
c000ef1f:	55                   	push   ebp
c000ef20:	89 e5                	mov    ebp,esp
c000ef22:	56                   	push   esi
c000ef23:	53                   	push   ebx
c000ef24:	83 ec 30             	sub    esp,0x30
c000ef27:	a1 68 64 02 c0       	mov    eax,ds:0xc0026468
c000ef2c:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000ef32:	8a 80 94 11 00 00    	mov    al,BYTE PTR [eax+0x1194]
c000ef38:	84 c0                	test   al,al
c000ef3a:	74 24                	je     c000ef60 <opcodeFault(regs*, void*)+0x41>
c000ef3c:	83 ec 0c             	sub    esp,0xc
c000ef3f:	68 08 37 02 c0       	push   0xc0023708
c000ef44:	e8 76 db ff ff       	call   c000cabf <Dbg::kprintf(char const*, ...)>
c000ef49:	83 c4 10             	add    esp,0x10
c000ef4c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ef4f:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000ef52:	8d 50 19             	lea    edx,[eax+0x19]
c000ef55:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ef58:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000ef5b:	e9 7b 03 00 00       	jmp    c000f2db <opcodeFault(regs*, void*)+0x3bc>
c000ef60:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ef63:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000ef66:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000ef69:	c6 45 f3 00          	mov    BYTE PTR [ebp-0xd],0x0
c000ef6d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ef70:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000ef73:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c000ef76:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000ef79:	8a 00                	mov    al,BYTE PTR [eax]
c000ef7b:	3c f0                	cmp    al,0xf0
c000ef7d:	75 17                	jne    c000ef96 <opcodeFault(regs*, void*)+0x77>
c000ef7f:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c000ef82:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ef85:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000ef88:	8d 50 01             	lea    edx,[eax+0x1]
c000ef8b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ef8e:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000ef91:	e9 d6 00 00 00       	jmp    c000f06c <opcodeFault(regs*, void*)+0x14d>
c000ef96:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000ef99:	8a 00                	mov    al,BYTE PTR [eax]
c000ef9b:	3c f2                	cmp    al,0xf2
c000ef9d:	74 09                	je     c000efa8 <opcodeFault(regs*, void*)+0x89>
c000ef9f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000efa2:	8a 00                	mov    al,BYTE PTR [eax]
c000efa4:	3c f3                	cmp    al,0xf3
c000efa6:	75 1b                	jne    c000efc3 <opcodeFault(regs*, void*)+0xa4>
c000efa8:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c000efac:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c000efaf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000efb2:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000efb5:	8d 50 01             	lea    edx,[eax+0x1]
c000efb8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000efbb:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000efbe:	e9 a9 00 00 00       	jmp    c000f06c <opcodeFault(regs*, void*)+0x14d>
c000efc3:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000efc6:	8a 00                	mov    al,BYTE PTR [eax]
c000efc8:	3c 66                	cmp    al,0x66
c000efca:	75 1b                	jne    c000efe7 <opcodeFault(regs*, void*)+0xc8>
c000efcc:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c000efd0:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c000efd3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000efd6:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000efd9:	8d 50 01             	lea    edx,[eax+0x1]
c000efdc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000efdf:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000efe2:	e9 85 00 00 00       	jmp    c000f06c <opcodeFault(regs*, void*)+0x14d>
c000efe7:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000efea:	8a 00                	mov    al,BYTE PTR [eax]
c000efec:	3c 67                	cmp    al,0x67
c000efee:	75 18                	jne    c000f008 <opcodeFault(regs*, void*)+0xe9>
c000eff0:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c000eff4:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c000eff7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000effa:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000effd:	8d 50 01             	lea    edx,[eax+0x1]
c000f000:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f003:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000f006:	eb 64                	jmp    c000f06c <opcodeFault(regs*, void*)+0x14d>
c000f008:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f00b:	8a 00                	mov    al,BYTE PTR [eax]
c000f00d:	3c 2e                	cmp    al,0x2e
c000f00f:	74 09                	je     c000f01a <opcodeFault(regs*, void*)+0xfb>
c000f011:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f014:	8a 00                	mov    al,BYTE PTR [eax]
c000f016:	3c 3e                	cmp    al,0x3e
c000f018:	75 18                	jne    c000f032 <opcodeFault(regs*, void*)+0x113>
c000f01a:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c000f01e:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c000f021:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f024:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f027:	8d 50 01             	lea    edx,[eax+0x1]
c000f02a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f02d:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000f030:	eb 3a                	jmp    c000f06c <opcodeFault(regs*, void*)+0x14d>
c000f032:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f035:	8a 00                	mov    al,BYTE PTR [eax]
c000f037:	3c 36                	cmp    al,0x36
c000f039:	74 1b                	je     c000f056 <opcodeFault(regs*, void*)+0x137>
c000f03b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f03e:	8a 00                	mov    al,BYTE PTR [eax]
c000f040:	3c 26                	cmp    al,0x26
c000f042:	74 12                	je     c000f056 <opcodeFault(regs*, void*)+0x137>
c000f044:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f047:	8a 00                	mov    al,BYTE PTR [eax]
c000f049:	3c 64                	cmp    al,0x64
c000f04b:	74 09                	je     c000f056 <opcodeFault(regs*, void*)+0x137>
c000f04d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f050:	8a 00                	mov    al,BYTE PTR [eax]
c000f052:	3c 65                	cmp    al,0x65
c000f054:	75 16                	jne    c000f06c <opcodeFault(regs*, void*)+0x14d>
c000f056:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c000f05a:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c000f05d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f060:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f063:	8d 50 01             	lea    edx,[eax+0x1]
c000f066:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f069:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000f06c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f06f:	8a 00                	mov    al,BYTE PTR [eax]
c000f071:	3c 0f                	cmp    al,0xf
c000f073:	0f 85 8d 01 00 00    	jne    c000f206 <opcodeFault(regs*, void*)+0x2e7>
c000f079:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f07c:	40                   	inc    eax
c000f07d:	8a 00                	mov    al,BYTE PTR [eax]
c000f07f:	3c c7                	cmp    al,0xc7
c000f081:	0f 85 7f 01 00 00    	jne    c000f206 <opcodeFault(regs*, void*)+0x2e7>
c000f087:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c000f08a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f08d:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f090:	8d 50 01             	lea    edx,[eax+0x1]
c000f093:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f096:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000f099:	8d 45 d2             	lea    eax,[ebp-0x2e]
c000f09c:	50                   	push   eax
c000f09d:	8d 45 d3             	lea    eax,[ebp-0x2d]
c000f0a0:	50                   	push   eax
c000f0a1:	8d 45 d4             	lea    eax,[ebp-0x2c]
c000f0a4:	50                   	push   eax
c000f0a5:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000f0a8:	e8 ed 49 00 00       	call   c0013a9a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c000f0ad:	83 c4 10             	add    esp,0x10
c000f0b0:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c000f0b3:	8a 45 d3             	mov    al,BYTE PTR [ebp-0x2d]
c000f0b6:	83 f0 01             	xor    eax,0x1
c000f0b9:	84 c0                	test   al,al
c000f0bb:	0f 84 45 01 00 00    	je     c000f206 <opcodeFault(regs*, void*)+0x2e7>
c000f0c1:	8a 45 d2             	mov    al,BYTE PTR [ebp-0x2e]
c000f0c4:	3c 01                	cmp    al,0x1
c000f0c6:	0f 85 3a 01 00 00    	jne    c000f206 <opcodeFault(regs*, void*)+0x2e7>
c000f0cc:	8a 45 f3             	mov    al,BYTE PTR [ebp-0xd]
c000f0cf:	83 f0 01             	xor    eax,0x1
c000f0d2:	84 c0                	test   al,al
c000f0d4:	0f 84 2c 01 00 00    	je     c000f206 <opcodeFault(regs*, void*)+0x2e7>
c000f0da:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f0dd:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c000f0e0:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c000f0e3:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
c000f0ea:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c000f0ed:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c000f0f0:	89 c2                	mov    edx,eax
c000f0f2:	b8 00 00 00 00       	mov    eax,0x0
c000f0f7:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c000f0fa:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c000f0fd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f100:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c000f103:	ba 00 00 00 00       	mov    edx,0x0
c000f108:	09 45 e0             	or     DWORD PTR [ebp-0x20],eax
c000f10b:	09 55 e4             	or     DWORD PTR [ebp-0x1c],edx
c000f10e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f111:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000f114:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c000f117:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
c000f11e:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c000f121:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c000f124:	89 c2                	mov    edx,eax
c000f126:	b8 00 00 00 00       	mov    eax,0x0
c000f12b:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c000f12e:	89 55 dc             	mov    DWORD PTR [ebp-0x24],edx
c000f131:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f134:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000f137:	ba 00 00 00 00       	mov    edx,0x0
c000f13c:	09 45 d8             	or     DWORD PTR [ebp-0x28],eax
c000f13f:	09 55 dc             	or     DWORD PTR [ebp-0x24],edx
c000f142:	fa                   	cli    
c000f143:	a1 28 79 02 c0       	mov    eax,ds:0xc0027928
c000f148:	40                   	inc    eax
c000f149:	a3 28 79 02 c0       	mov    ds:0xc0027928,eax
c000f14e:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c000f151:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000f154:	8b 00                	mov    eax,DWORD PTR [eax]
c000f156:	89 c1                	mov    ecx,eax
c000f158:	33 4d e0             	xor    ecx,DWORD PTR [ebp-0x20]
c000f15b:	89 cb                	mov    ebx,ecx
c000f15d:	89 d0                	mov    eax,edx
c000f15f:	33 45 e4             	xor    eax,DWORD PTR [ebp-0x1c]
c000f162:	89 c6                	mov    esi,eax
c000f164:	89 f0                	mov    eax,esi
c000f166:	09 d8                	or     eax,ebx
c000f168:	85 c0                	test   eax,eax
c000f16a:	75 21                	jne    c000f18d <opcodeFault(regs*, void*)+0x26e>
c000f16c:	8b 4d e8             	mov    ecx,DWORD PTR [ebp-0x18]
c000f16f:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c000f172:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c000f175:	89 01                	mov    DWORD PTR [ecx],eax
c000f177:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000f17a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f17d:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000f180:	83 c8 40             	or     eax,0x40
c000f183:	89 c2                	mov    edx,eax
c000f185:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f188:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c000f18b:	eb 3e                	jmp    c000f1cb <opcodeFault(regs*, void*)+0x2ac>
c000f18d:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c000f190:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000f193:	8b 00                	mov    eax,DWORD PTR [eax]
c000f195:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c000f198:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c000f19b:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c000f19e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f1a1:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c000f1a4:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c000f1a7:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c000f1aa:	89 d0                	mov    eax,edx
c000f1ac:	31 d2                	xor    edx,edx
c000f1ae:	89 c3                	mov    ebx,eax
c000f1b0:	89 d6                	mov    esi,edx
c000f1b2:	89 da                	mov    edx,ebx
c000f1b4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f1b7:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c000f1ba:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f1bd:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000f1c0:	83 e0 bf             	and    eax,0xffffffbf
c000f1c3:	89 c2                	mov    edx,eax
c000f1c5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f1c8:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c000f1cb:	a1 28 79 02 c0       	mov    eax,ds:0xc0027928
c000f1d0:	48                   	dec    eax
c000f1d1:	a3 28 79 02 c0       	mov    ds:0xc0027928,eax
c000f1d6:	a1 28 79 02 c0       	mov    eax,ds:0xc0027928
c000f1db:	85 c0                	test   eax,eax
c000f1dd:	75 01                	jne    c000f1e0 <opcodeFault(regs*, void*)+0x2c1>
c000f1df:	fb                   	sti    
c000f1e0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f1e3:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f1e6:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c000f1e9:	01 c2                	add    edx,eax
c000f1eb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f1ee:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000f1f1:	83 ec 0c             	sub    esp,0xc
c000f1f4:	68 2b 37 02 c0       	push   0xc002372b
c000f1f9:	e8 c1 d8 ff ff       	call   c000cabf <Dbg::kprintf(char const*, ...)>
c000f1fe:	83 c4 10             	add    esp,0x10
c000f201:	e9 d5 00 00 00       	jmp    c000f2db <opcodeFault(regs*, void*)+0x3bc>
c000f206:	83 ec 0c             	sub    esp,0xc
c000f209:	68 3e 37 02 c0       	push   0xc002373e
c000f20e:	e8 ac d8 ff ff       	call   c000cabf <Dbg::kprintf(char const*, ...)>
c000f213:	83 c4 10             	add    esp,0x10
c000f216:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f219:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c000f21c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f21f:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000f222:	c1 e0 04             	shl    eax,0x4
c000f225:	01 d0                	add    eax,edx
c000f227:	83 c0 03             	add    eax,0x3
c000f22a:	8a 00                	mov    al,BYTE PTR [eax]
c000f22c:	0f b6 d8             	movzx  ebx,al
c000f22f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f232:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c000f235:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f238:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000f23b:	c1 e0 04             	shl    eax,0x4
c000f23e:	01 d0                	add    eax,edx
c000f240:	83 c0 02             	add    eax,0x2
c000f243:	8a 00                	mov    al,BYTE PTR [eax]
c000f245:	0f b6 c8             	movzx  ecx,al
c000f248:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f24b:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c000f24e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f251:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000f254:	c1 e0 04             	shl    eax,0x4
c000f257:	01 d0                	add    eax,edx
c000f259:	40                   	inc    eax
c000f25a:	8a 00                	mov    al,BYTE PTR [eax]
c000f25c:	0f b6 d0             	movzx  edx,al
c000f25f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f262:	8b 70 38             	mov    esi,DWORD PTR [eax+0x38]
c000f265:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f268:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000f26b:	c1 e0 04             	shl    eax,0x4
c000f26e:	01 f0                	add    eax,esi
c000f270:	8a 00                	mov    al,BYTE PTR [eax]
c000f272:	0f b6 c0             	movzx  eax,al
c000f275:	83 ec 0c             	sub    esp,0xc
c000f278:	53                   	push   ebx
c000f279:	51                   	push   ecx
c000f27a:	52                   	push   edx
c000f27b:	50                   	push   eax
c000f27c:	68 50 37 02 c0       	push   0xc0023750
c000f281:	e8 39 d8 ff ff       	call   c000cabf <Dbg::kprintf(char const*, ...)>
c000f286:	83 c4 20             	add    esp,0x20
c000f289:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f28c:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f28f:	83 c0 03             	add    eax,0x3
c000f292:	8a 00                	mov    al,BYTE PTR [eax]
c000f294:	0f b6 d8             	movzx  ebx,al
c000f297:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f29a:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f29d:	83 c0 02             	add    eax,0x2
c000f2a0:	8a 00                	mov    al,BYTE PTR [eax]
c000f2a2:	0f b6 c8             	movzx  ecx,al
c000f2a5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f2a8:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f2ab:	40                   	inc    eax
c000f2ac:	8a 00                	mov    al,BYTE PTR [eax]
c000f2ae:	0f b6 d0             	movzx  edx,al
c000f2b1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f2b4:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000f2b7:	8a 00                	mov    al,BYTE PTR [eax]
c000f2b9:	0f b6 c0             	movzx  eax,al
c000f2bc:	83 ec 0c             	sub    esp,0xc
c000f2bf:	53                   	push   ebx
c000f2c0:	51                   	push   ecx
c000f2c1:	52                   	push   edx
c000f2c2:	50                   	push   eax
c000f2c3:	68 78 37 02 c0       	push   0xc0023778
c000f2c8:	e8 f2 d7 ff ff       	call   c000cabf <Dbg::kprintf(char const*, ...)>
c000f2cd:	83 c4 20             	add    esp,0x20
c000f2d0:	83 ec 0c             	sub    esp,0xc
c000f2d3:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000f2d6:	e8 9b f6 ff ff       	call   c000e976 <displayDebugInfo(regs*)>
c000f2db:	8d 65 f8             	lea    esp,[ebp-0x8]
c000f2de:	5b                   	pop    ebx
c000f2df:	5e                   	pop    esi
c000f2e0:	5d                   	pop    ebp
c000f2e1:	c3                   	ret    

c000f2e2 <displayProgramFault(char const*)>:
c000f2e2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000f2e7:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000f2ea:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c000f2f0:	85 c0                	test   eax,eax
c000f2f2:	74 15                	je     c000f309 <displayProgramFault(char const*)+0x27>
c000f2f4:	83 ec 0c             	sub    esp,0xc
c000f2f7:	6a 04                	push   0x4
c000f2f9:	6a 0f                	push   0xf
c000f2fb:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f2ff:	50                   	push   eax
c000f300:	e8 1f b7 ff ff       	call   c000aa24 <VgaText::puts(char const*, VgaColour, VgaColour)>
c000f305:	83 c4 1c             	add    esp,0x1c
c000f308:	c3                   	ret    
c000f309:	c3                   	ret    

c000f30a <setupInterruptController()>:
c000f30a:	55                   	push   ebp
c000f30b:	89 e5                	mov    ebp,esp
c000f30d:	53                   	push   ebx
c000f30e:	83 ec 24             	sub    esp,0x24
c000f311:	b8 00 00 00 00       	mov    eax,0x0
c000f316:	85 c0                	test   eax,eax
c000f318:	0f 95 c0             	setne  al
c000f31b:	84 c0                	test   al,al
c000f31d:	74 5b                	je     c000f37a <setupInterruptController()+0x70>
c000f31f:	c7 45 e8 58 21 00 00 	mov    DWORD PTR [ebp-0x18],0x2158
c000f326:	83 ec 0c             	sub    esp,0xc
c000f329:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
c000f32c:	e8 92 a6 ff ff       	call   c00099c3 <malloc>
c000f331:	83 c4 10             	add    esp,0x10
c000f334:	89 c3                	mov    ebx,eax
c000f336:	83 ec 0c             	sub    esp,0xc
c000f339:	53                   	push   ebx
c000f33a:	e8 d7 0b 01 00       	call   c001ff16 <APIC::APIC()>
c000f33f:	83 c4 10             	add    esp,0x10
c000f342:	89 5d f0             	mov    DWORD PTR [ebp-0x10],ebx
c000f345:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
c000f348:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000f34b:	8b 00                	mov    eax,DWORD PTR [eax]
c000f34d:	83 c0 08             	add    eax,0x8
c000f350:	8b 00                	mov    eax,DWORD PTR [eax]
c000f352:	6a 00                	push   0x0
c000f354:	6a 00                	push   0x0
c000f356:	6a 00                	push   0x0
c000f358:	52                   	push   edx
c000f359:	ff d0                	call   eax
c000f35b:	83 c4 10             	add    esp,0x10
c000f35e:	a1 68 64 02 c0       	mov    eax,ds:0xc0026468
c000f363:	83 ec 08             	sub    esp,0x8
c000f366:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000f369:	50                   	push   eax
c000f36a:	e8 97 eb ff ff       	call   c000df06 <Device::addChild(Device*)>
c000f36f:	83 c4 10             	add    esp,0x10
c000f372:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000f375:	e9 79 03 00 00       	jmp    c000f6f3 <setupInterruptController()+0x3e9>
c000f37a:	a0 80 6d 02 c0       	mov    al,ds:0xc0026d80
c000f37f:	84 c0                	test   al,al
c000f381:	75 14                	jne    c000f397 <setupInterruptController()+0x8d>
c000f383:	a1 68 64 02 c0       	mov    eax,ds:0xc0026468
c000f388:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c000f38e:	83 e2 fe             	and    edx,0xfffffffe
c000f391:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c000f397:	a1 68 64 02 c0       	mov    eax,ds:0xc0026468
c000f39c:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c000f3a2:	83 e0 01             	and    eax,0x1
c000f3a5:	84 c0                	test   al,al
c000f3a7:	0f 95 c0             	setne  al
c000f3aa:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c000f3ad:	c7 45 e4 58 21 00 00 	mov    DWORD PTR [ebp-0x1c],0x2158
c000f3b4:	83 ec 0c             	sub    esp,0xc
c000f3b7:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c000f3ba:	e8 04 a6 ff ff       	call   c00099c3 <malloc>
c000f3bf:	83 c4 10             	add    esp,0x10
c000f3c2:	89 c3                	mov    ebx,eax
c000f3c4:	83 ec 0c             	sub    esp,0xc
c000f3c7:	53                   	push   ebx
c000f3c8:	e8 a1 10 01 00       	call   c002046e <PIC::PIC()>
c000f3cd:	83 c4 10             	add    esp,0x10
c000f3d0:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c000f3d3:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c000f3d6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f3d9:	8b 00                	mov    eax,DWORD PTR [eax]
c000f3db:	83 c0 08             	add    eax,0x8
c000f3de:	8b 00                	mov    eax,DWORD PTR [eax]
c000f3e0:	6a 00                	push   0x0
c000f3e2:	6a 00                	push   0x0
c000f3e4:	6a 00                	push   0x0
c000f3e6:	52                   	push   edx
c000f3e7:	ff d0                	call   eax
c000f3e9:	83 c4 10             	add    esp,0x10
c000f3ec:	80 7d ef 00          	cmp    BYTE PTR [ebp-0x11],0x0
c000f3f0:	74 73                	je     c000f465 <setupInterruptController()+0x15b>
c000f3f2:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c000f3f5:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f3f8:	8b 00                	mov    eax,DWORD PTR [eax]
c000f3fa:	83 c0 0c             	add    eax,0xc
c000f3fd:	8b 00                	mov    eax,DWORD PTR [eax]
c000f3ff:	6a 00                	push   0x0
c000f401:	6a 00                	push   0x0
c000f403:	6a 00                	push   0x0
c000f405:	52                   	push   edx
c000f406:	ff d0                	call   eax
c000f408:	83 c4 10             	add    esp,0x10
c000f40b:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c000f40f:	74 15                	je     c000f426 <setupInterruptController()+0x11c>
c000f411:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f414:	8b 00                	mov    eax,DWORD PTR [eax]
c000f416:	83 c0 04             	add    eax,0x4
c000f419:	8b 00                	mov    eax,DWORD PTR [eax]
c000f41b:	83 ec 0c             	sub    esp,0xc
c000f41e:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f421:	ff d0                	call   eax
c000f423:	83 c4 10             	add    esp,0x10
c000f426:	c7 45 e0 58 21 00 00 	mov    DWORD PTR [ebp-0x20],0x2158
c000f42d:	83 ec 0c             	sub    esp,0xc
c000f430:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c000f433:	e8 8b a5 ff ff       	call   c00099c3 <malloc>
c000f438:	83 c4 10             	add    esp,0x10
c000f43b:	89 c3                	mov    ebx,eax
c000f43d:	83 ec 0c             	sub    esp,0xc
c000f440:	53                   	push   ebx
c000f441:	e8 d0 0a 01 00       	call   c001ff16 <APIC::APIC()>
c000f446:	83 c4 10             	add    esp,0x10
c000f449:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c000f44c:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c000f44f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f452:	8b 00                	mov    eax,DWORD PTR [eax]
c000f454:	83 c0 08             	add    eax,0x8
c000f457:	8b 00                	mov    eax,DWORD PTR [eax]
c000f459:	6a 00                	push   0x0
c000f45b:	6a 00                	push   0x0
c000f45d:	6a 00                	push   0x0
c000f45f:	52                   	push   edx
c000f460:	ff d0                	call   eax
c000f462:	83 c4 10             	add    esp,0x10
c000f465:	a1 68 64 02 c0       	mov    eax,ds:0xc0026468
c000f46a:	83 ec 08             	sub    esp,0x8
c000f46d:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f470:	50                   	push   eax
c000f471:	e8 90 ea ff ff       	call   c000df06 <Device::addChild(Device*)>
c000f476:	83 c4 10             	add    esp,0x10
c000f479:	c7 05 a8 65 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00265a8,0x0
c000f483:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f486:	8b 00                	mov    eax,DWORD PTR [eax]
c000f488:	83 c0 24             	add    eax,0x24
c000f48b:	8b 00                	mov    eax,DWORD PTR [eax]
c000f48d:	6a 00                	push   0x0
c000f48f:	68 00 ef 00 c0       	push   0xc000ef00
c000f494:	6a 00                	push   0x0
c000f496:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f499:	ff d0                	call   eax
c000f49b:	83 c4 10             	add    esp,0x10
c000f49e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f4a1:	8b 00                	mov    eax,DWORD PTR [eax]
c000f4a3:	83 c0 24             	add    eax,0x24
c000f4a6:	8b 00                	mov    eax,DWORD PTR [eax]
c000f4a8:	6a 00                	push   0x0
c000f4aa:	68 00 ef 00 c0       	push   0xc000ef00
c000f4af:	6a 01                	push   0x1
c000f4b1:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f4b4:	ff d0                	call   eax
c000f4b6:	83 c4 10             	add    esp,0x10
c000f4b9:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f4bc:	8b 00                	mov    eax,DWORD PTR [eax]
c000f4be:	83 c0 24             	add    eax,0x24
c000f4c1:	8b 00                	mov    eax,DWORD PTR [eax]
c000f4c3:	6a 00                	push   0x0
c000f4c5:	68 d3 e7 00 c0       	push   0xc000e7d3
c000f4ca:	6a 02                	push   0x2
c000f4cc:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f4cf:	ff d0                	call   eax
c000f4d1:	83 c4 10             	add    esp,0x10
c000f4d4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f4d7:	8b 00                	mov    eax,DWORD PTR [eax]
c000f4d9:	83 c0 24             	add    eax,0x24
c000f4dc:	8b 00                	mov    eax,DWORD PTR [eax]
c000f4de:	6a 00                	push   0x0
c000f4e0:	68 00 ef 00 c0       	push   0xc000ef00
c000f4e5:	6a 03                	push   0x3
c000f4e7:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f4ea:	ff d0                	call   eax
c000f4ec:	83 c4 10             	add    esp,0x10
c000f4ef:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f4f2:	8b 00                	mov    eax,DWORD PTR [eax]
c000f4f4:	83 c0 24             	add    eax,0x24
c000f4f7:	8b 00                	mov    eax,DWORD PTR [eax]
c000f4f9:	6a 00                	push   0x0
c000f4fb:	68 00 ef 00 c0       	push   0xc000ef00
c000f500:	6a 04                	push   0x4
c000f502:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f505:	ff d0                	call   eax
c000f507:	83 c4 10             	add    esp,0x10
c000f50a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f50d:	8b 00                	mov    eax,DWORD PTR [eax]
c000f50f:	83 c0 24             	add    eax,0x24
c000f512:	8b 00                	mov    eax,DWORD PTR [eax]
c000f514:	6a 00                	push   0x0
c000f516:	68 00 ef 00 c0       	push   0xc000ef00
c000f51b:	6a 05                	push   0x5
c000f51d:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f520:	ff d0                	call   eax
c000f522:	83 c4 10             	add    esp,0x10
c000f525:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f528:	8b 00                	mov    eax,DWORD PTR [eax]
c000f52a:	83 c0 24             	add    eax,0x24
c000f52d:	8b 00                	mov    eax,DWORD PTR [eax]
c000f52f:	6a 00                	push   0x0
c000f531:	68 1f ef 00 c0       	push   0xc000ef1f
c000f536:	6a 06                	push   0x6
c000f538:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f53b:	ff d0                	call   eax
c000f53d:	83 c4 10             	add    esp,0x10
c000f540:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f543:	8b 00                	mov    eax,DWORD PTR [eax]
c000f545:	83 c0 24             	add    eax,0x24
c000f548:	8b 00                	mov    eax,DWORD PTR [eax]
c000f54a:	6a 00                	push   0x0
c000f54c:	68 05 ee 00 c0       	push   0xc000ee05
c000f551:	6a 07                	push   0x7
c000f553:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f556:	ff d0                	call   eax
c000f558:	83 c4 10             	add    esp,0x10
c000f55b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f55e:	8b 00                	mov    eax,DWORD PTR [eax]
c000f560:	83 c0 24             	add    eax,0x24
c000f563:	8b 00                	mov    eax,DWORD PTR [eax]
c000f565:	6a 00                	push   0x0
c000f567:	68 ee e5 00 c0       	push   0xc000e5ee
c000f56c:	6a 08                	push   0x8
c000f56e:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f571:	ff d0                	call   eax
c000f573:	83 c4 10             	add    esp,0x10
c000f576:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f579:	8b 00                	mov    eax,DWORD PTR [eax]
c000f57b:	83 c0 24             	add    eax,0x24
c000f57e:	8b 00                	mov    eax,DWORD PTR [eax]
c000f580:	6a 00                	push   0x0
c000f582:	68 00 ef 00 c0       	push   0xc000ef00
c000f587:	6a 09                	push   0x9
c000f589:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f58c:	ff d0                	call   eax
c000f58e:	83 c4 10             	add    esp,0x10
c000f591:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f594:	8b 00                	mov    eax,DWORD PTR [eax]
c000f596:	83 c0 24             	add    eax,0x24
c000f599:	8b 00                	mov    eax,DWORD PTR [eax]
c000f59b:	6a 00                	push   0x0
c000f59d:	68 00 ef 00 c0       	push   0xc000ef00
c000f5a2:	6a 0a                	push   0xa
c000f5a4:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f5a7:	ff d0                	call   eax
c000f5a9:	83 c4 10             	add    esp,0x10
c000f5ac:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f5af:	8b 00                	mov    eax,DWORD PTR [eax]
c000f5b1:	83 c0 24             	add    eax,0x24
c000f5b4:	8b 00                	mov    eax,DWORD PTR [eax]
c000f5b6:	6a 00                	push   0x0
c000f5b8:	68 00 ef 00 c0       	push   0xc000ef00
c000f5bd:	6a 0b                	push   0xb
c000f5bf:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f5c2:	ff d0                	call   eax
c000f5c4:	83 c4 10             	add    esp,0x10
c000f5c7:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f5ca:	8b 00                	mov    eax,DWORD PTR [eax]
c000f5cc:	83 c0 24             	add    eax,0x24
c000f5cf:	8b 00                	mov    eax,DWORD PTR [eax]
c000f5d1:	6a 00                	push   0x0
c000f5d3:	68 00 ef 00 c0       	push   0xc000ef00
c000f5d8:	6a 0c                	push   0xc
c000f5da:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f5dd:	ff d0                	call   eax
c000f5df:	83 c4 10             	add    esp,0x10
c000f5e2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f5e5:	8b 00                	mov    eax,DWORD PTR [eax]
c000f5e7:	83 c0 24             	add    eax,0x24
c000f5ea:	8b 00                	mov    eax,DWORD PTR [eax]
c000f5ec:	6a 00                	push   0x0
c000f5ee:	68 78 ee 00 c0       	push   0xc000ee78
c000f5f3:	6a 0d                	push   0xd
c000f5f5:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f5f8:	ff d0                	call   eax
c000f5fa:	83 c4 10             	add    esp,0x10
c000f5fd:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f600:	8b 00                	mov    eax,DWORD PTR [eax]
c000f602:	83 c0 24             	add    eax,0x24
c000f605:	8b 00                	mov    eax,DWORD PTR [eax]
c000f607:	6a 00                	push   0x0
c000f609:	68 b1 ee 00 c0       	push   0xc000eeb1
c000f60e:	6a 0e                	push   0xe
c000f610:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f613:	ff d0                	call   eax
c000f615:	83 c4 10             	add    esp,0x10
c000f618:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f61b:	8b 00                	mov    eax,DWORD PTR [eax]
c000f61d:	83 c0 24             	add    eax,0x24
c000f620:	8b 00                	mov    eax,DWORD PTR [eax]
c000f622:	6a 00                	push   0x0
c000f624:	68 00 ef 00 c0       	push   0xc000ef00
c000f629:	6a 0f                	push   0xf
c000f62b:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f62e:	ff d0                	call   eax
c000f630:	83 c4 10             	add    esp,0x10
c000f633:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f636:	8b 00                	mov    eax,DWORD PTR [eax]
c000f638:	83 c0 24             	add    eax,0x24
c000f63b:	8b 00                	mov    eax,DWORD PTR [eax]
c000f63d:	6a 00                	push   0x0
c000f63f:	68 00 ef 00 c0       	push   0xc000ef00
c000f644:	6a 10                	push   0x10
c000f646:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f649:	ff d0                	call   eax
c000f64b:	83 c4 10             	add    esp,0x10
c000f64e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f651:	8b 00                	mov    eax,DWORD PTR [eax]
c000f653:	83 c0 24             	add    eax,0x24
c000f656:	8b 00                	mov    eax,DWORD PTR [eax]
c000f658:	6a 00                	push   0x0
c000f65a:	68 00 ef 00 c0       	push   0xc000ef00
c000f65f:	6a 11                	push   0x11
c000f661:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f664:	ff d0                	call   eax
c000f666:	83 c4 10             	add    esp,0x10
c000f669:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f66c:	8b 00                	mov    eax,DWORD PTR [eax]
c000f66e:	83 c0 24             	add    eax,0x24
c000f671:	8b 00                	mov    eax,DWORD PTR [eax]
c000f673:	6a 00                	push   0x0
c000f675:	68 00 ef 00 c0       	push   0xc000ef00
c000f67a:	6a 12                	push   0x12
c000f67c:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f67f:	ff d0                	call   eax
c000f681:	83 c4 10             	add    esp,0x10
c000f684:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f687:	8b 00                	mov    eax,DWORD PTR [eax]
c000f689:	83 c0 24             	add    eax,0x24
c000f68c:	8b 00                	mov    eax,DWORD PTR [eax]
c000f68e:	6a 00                	push   0x0
c000f690:	68 00 ef 00 c0       	push   0xc000ef00
c000f695:	6a 13                	push   0x13
c000f697:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f69a:	ff d0                	call   eax
c000f69c:	83 c4 10             	add    esp,0x10
c000f69f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f6a2:	8b 00                	mov    eax,DWORD PTR [eax]
c000f6a4:	83 c0 24             	add    eax,0x24
c000f6a7:	8b 00                	mov    eax,DWORD PTR [eax]
c000f6a9:	6a 00                	push   0x0
c000f6ab:	68 00 ef 00 c0       	push   0xc000ef00
c000f6b0:	6a 14                	push   0x14
c000f6b2:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f6b5:	ff d0                	call   eax
c000f6b7:	83 c4 10             	add    esp,0x10
c000f6ba:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f6bd:	8b 00                	mov    eax,DWORD PTR [eax]
c000f6bf:	83 c0 24             	add    eax,0x24
c000f6c2:	8b 00                	mov    eax,DWORD PTR [eax]
c000f6c4:	6a 00                	push   0x0
c000f6c6:	68 00 ef 00 c0       	push   0xc000ef00
c000f6cb:	6a 1e                	push   0x1e
c000f6cd:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f6d0:	ff d0                	call   eax
c000f6d2:	83 c4 10             	add    esp,0x10
c000f6d5:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f6d8:	8b 00                	mov    eax,DWORD PTR [eax]
c000f6da:	83 c0 24             	add    eax,0x24
c000f6dd:	8b 00                	mov    eax,DWORD PTR [eax]
c000f6df:	6a 00                	push   0x0
c000f6e1:	68 93 65 01 c0       	push   0xc0016593
c000f6e6:	6a 60                	push   0x60
c000f6e8:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000f6eb:	ff d0                	call   eax
c000f6ed:	83 c4 10             	add    esp,0x10
c000f6f0:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f6f3:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000f6f6:	c9                   	leave  
c000f6f7:	c3                   	ret    

c000f6f8 <InterruptController::convertLegacyIRQNumber(int)>:
c000f6f8:	55                   	push   ebp
c000f6f9:	89 e5                	mov    ebp,esp
c000f6fb:	83 ec 08             	sub    esp,0x8
c000f6fe:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f701:	83 ec 0c             	sub    esp,0xc
c000f704:	50                   	push   eax
c000f705:	e8 fc ea ff ff       	call   c000e206 <Device::getName()>
c000f70a:	83 c4 10             	add    esp,0x10
c000f70d:	8a 00                	mov    al,BYTE PTR [eax]
c000f70f:	3c 41                	cmp    al,0x41
c000f711:	0f 94 c0             	sete   al
c000f714:	84 c0                	test   al,al
c000f716:	74 28                	je     c000f740 <InterruptController::convertLegacyIRQNumber(int)+0x48>
c000f718:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c000f71c:	7f 12                	jg     c000f730 <InterruptController::convertLegacyIRQNumber(int)+0x38>
c000f71e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000f721:	05 60 5b 02 c0       	add    eax,0xc0025b60
c000f726:	8a 00                	mov    al,BYTE PTR [eax]
c000f728:	0f b6 c0             	movzx  eax,al
c000f72b:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c000f72e:	eb 10                	jmp    c000f740 <InterruptController::convertLegacyIRQNumber(int)+0x48>
c000f730:	83 ec 0c             	sub    esp,0xc
c000f733:	68 a0 37 02 c0       	push   0xc00237a0
c000f738:	e8 44 4c 00 00       	call   c0014381 <Krnl::panic(char const*)>
c000f73d:	83 c4 10             	add    esp,0x10
c000f740:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000f743:	c9                   	leave  
c000f744:	c3                   	ret    
c000f745:	90                   	nop

c000f746 <startGUI(void*)>:
c000f746:	55                   	push   ebp
c000f747:	89 e5                	mov    ebp,esp
c000f749:	53                   	push   ebx
c000f74a:	83 ec 04             	sub    esp,0x4
c000f74d:	a1 28 79 02 c0       	mov    eax,ds:0xc0027928
c000f752:	48                   	dec    eax
c000f753:	a3 28 79 02 c0       	mov    ds:0xc0027928,eax
c000f758:	a1 28 79 02 c0       	mov    eax,ds:0xc0027928
c000f75d:	85 c0                	test   eax,eax
c000f75f:	75 01                	jne    c000f762 <startGUI(void*)+0x1c>
c000f761:	fb                   	sti    
c000f762:	8b 1d 68 64 02 c0    	mov    ebx,DWORD PTR ds:0xc0026468
c000f768:	83 ec 08             	sub    esp,0x8
c000f76b:	6a 01                	push   0x1
c000f76d:	68 20 38 02 c0       	push   0xc0023820
c000f772:	e8 f7 7d 00 00       	call   c001756e <Thr::loadDLL(char const*, bool)>
c000f777:	83 c4 10             	add    esp,0x10
c000f77a:	83 ec 08             	sub    esp,0x8
c000f77d:	53                   	push   ebx
c000f77e:	50                   	push   eax
c000f77f:	e8 1b 80 00 00       	call   c001779f <Thr::executeDLL(unsigned long, void*)>
c000f784:	83 c4 10             	add    esp,0x10
c000f787:	8b 1d 68 64 02 c0    	mov    ebx,DWORD PTR ds:0xc0026468
c000f78d:	83 ec 08             	sub    esp,0x8
c000f790:	6a 01                	push   0x1
c000f792:	68 3a 38 02 c0       	push   0xc002383a
c000f797:	e8 d2 7d 00 00       	call   c001756e <Thr::loadDLL(char const*, bool)>
c000f79c:	83 c4 10             	add    esp,0x10
c000f79f:	83 ec 08             	sub    esp,0x8
c000f7a2:	53                   	push   ebx
c000f7a3:	50                   	push   eax
c000f7a4:	e8 f6 7f 00 00       	call   c001779f <Thr::executeDLL(unsigned long, void*)>
c000f7a9:	83 c4 10             	add    esp,0x10
c000f7ac:	90                   	nop
c000f7ad:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000f7b0:	c9                   	leave  
c000f7b1:	c3                   	ret    

c000f7b2 <startGUIVESA(void*)>:
c000f7b2:	55                   	push   ebp
c000f7b3:	89 e5                	mov    ebp,esp
c000f7b5:	53                   	push   ebx
c000f7b6:	83 ec 04             	sub    esp,0x4
c000f7b9:	a1 28 79 02 c0       	mov    eax,ds:0xc0027928
c000f7be:	48                   	dec    eax
c000f7bf:	a3 28 79 02 c0       	mov    ds:0xc0027928,eax
c000f7c4:	a1 28 79 02 c0       	mov    eax,ds:0xc0027928
c000f7c9:	85 c0                	test   eax,eax
c000f7cb:	75 01                	jne    c000f7ce <startGUIVESA(void*)+0x1c>
c000f7cd:	fb                   	sti    
c000f7ce:	8b 1d 68 64 02 c0    	mov    ebx,DWORD PTR ds:0xc0026468
c000f7d4:	83 ec 08             	sub    esp,0x8
c000f7d7:	6a 01                	push   0x1
c000f7d9:	68 54 38 02 c0       	push   0xc0023854
c000f7de:	e8 8b 7d 00 00       	call   c001756e <Thr::loadDLL(char const*, bool)>
c000f7e3:	83 c4 10             	add    esp,0x10
c000f7e6:	83 ec 08             	sub    esp,0x8
c000f7e9:	53                   	push   ebx
c000f7ea:	50                   	push   eax
c000f7eb:	e8 af 7f 00 00       	call   c001779f <Thr::executeDLL(unsigned long, void*)>
c000f7f0:	83 c4 10             	add    esp,0x10
c000f7f3:	8b 1d 68 64 02 c0    	mov    ebx,DWORD PTR ds:0xc0026468
c000f7f9:	83 ec 08             	sub    esp,0x8
c000f7fc:	6a 01                	push   0x1
c000f7fe:	68 3a 38 02 c0       	push   0xc002383a
c000f803:	e8 66 7d 00 00       	call   c001756e <Thr::loadDLL(char const*, bool)>
c000f808:	83 c4 10             	add    esp,0x10
c000f80b:	83 ec 08             	sub    esp,0x8
c000f80e:	53                   	push   ebx
c000f80f:	50                   	push   eax
c000f810:	e8 8a 7f 00 00       	call   c001779f <Thr::executeDLL(unsigned long, void*)>
c000f815:	83 c4 10             	add    esp,0x10
c000f818:	90                   	nop
c000f819:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000f81c:	c9                   	leave  
c000f81d:	c3                   	ret    

c000f81e <sendKeyToTerminal(unsigned char)>:
c000f81e:	55                   	push   ebp
c000f81f:	89 e5                	mov    ebp,esp
c000f821:	83 ec 28             	sub    esp,0x28
c000f824:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f827:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c000f82a:	a1 e4 64 02 c0       	mov    eax,ds:0xc00264e4
c000f82f:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
c000f833:	83 ec 08             	sub    esp,0x8
c000f836:	52                   	push   edx
c000f837:	50                   	push   eax
c000f838:	e8 8f b6 ff ff       	call   c000aecc <VgaText::receiveKey(unsigned char)>
c000f83d:	83 c4 10             	add    esp,0x10
c000f840:	80 7d e4 0a          	cmp    BYTE PTR [ebp-0x1c],0xa
c000f844:	0f 85 8f 00 00 00    	jne    c000f8d9 <sendKeyToTerminal(unsigned char)+0xbb>
c000f84a:	fa                   	cli    
c000f84b:	a1 28 79 02 c0       	mov    eax,ds:0xc0027928
c000f850:	40                   	inc    eax
c000f851:	a3 28 79 02 c0       	mov    ds:0xc0027928,eax
c000f856:	a1 24 79 02 c0       	mov    eax,ds:0xc0027924
c000f85b:	40                   	inc    eax
c000f85c:	a3 24 79 02 c0       	mov    ds:0xc0027924,eax
c000f861:	a1 c0 65 02 c0       	mov    eax,ds:0xc00265c0
c000f866:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000f869:	c7 05 c0 65 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00265c0,0x0
c000f873:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c000f877:	74 1f                	je     c000f898 <sendKeyToTerminal(unsigned char)+0x7a>
c000f879:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000f87c:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c000f87f:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000f882:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000f885:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000f888:	83 ec 0c             	sub    esp,0xc
c000f88b:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000f88e:	e8 7d 8b 00 00       	call   c0018410 <unblockTask(ThreadControlBlock*)>
c000f893:	83 c4 10             	add    esp,0x10
c000f896:	eb db                	jmp    c000f873 <sendKeyToTerminal(unsigned char)+0x55>
c000f898:	a1 24 79 02 c0       	mov    eax,ds:0xc0027924
c000f89d:	48                   	dec    eax
c000f89e:	a3 24 79 02 c0       	mov    ds:0xc0027924,eax
c000f8a3:	a1 24 79 02 c0       	mov    eax,ds:0xc0027924
c000f8a8:	85 c0                	test   eax,eax
c000f8aa:	75 18                	jne    c000f8c4 <sendKeyToTerminal(unsigned char)+0xa6>
c000f8ac:	a1 20 79 02 c0       	mov    eax,ds:0xc0027920
c000f8b1:	85 c0                	test   eax,eax
c000f8b3:	74 0f                	je     c000f8c4 <sendKeyToTerminal(unsigned char)+0xa6>
c000f8b5:	c7 05 20 79 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027920,0x0
c000f8bf:	e8 90 86 00 00       	call   c0017f54 <schedule()>
c000f8c4:	a1 28 79 02 c0       	mov    eax,ds:0xc0027928
c000f8c9:	48                   	dec    eax
c000f8ca:	a3 28 79 02 c0       	mov    ds:0xc0027928,eax
c000f8cf:	a1 28 79 02 c0       	mov    eax,ds:0xc0027928
c000f8d4:	85 c0                	test   eax,eax
c000f8d6:	75 01                	jne    c000f8d9 <sendKeyToTerminal(unsigned char)+0xbb>
c000f8d8:	fb                   	sti    
c000f8d9:	90                   	nop
c000f8da:	c9                   	leave  
c000f8db:	c3                   	ret    

c000f8dc <sendKeyboardToken(KeyboardToken)>:
c000f8dc:	55                   	push   ebp
c000f8dd:	89 e5                	mov    ebp,esp
c000f8df:	83 ec 18             	sub    esp,0x18
c000f8e2:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c000f8e5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f8e8:	0f b7 c0             	movzx  eax,ax
c000f8eb:	83 f2 01             	xor    edx,0x1
c000f8ee:	88 90 e0 65 02 c0    	mov    BYTE PTR [eax-0x3ffd9a20],dl
c000f8f4:	a1 c8 65 02 c0       	mov    eax,ds:0xc00265c8
c000f8f9:	85 c0                	test   eax,eax
c000f8fb:	74 24                	je     c000f921 <sendKeyboardToken(KeyboardToken)+0x45>
c000f8fd:	8b 0d c8 65 02 c0    	mov    ecx,DWORD PTR ds:0xc00265c8
c000f903:	83 ec 04             	sub    esp,0x4
c000f906:	68 e0 65 02 c0       	push   0xc00265e0
c000f90b:	83 ec 08             	sub    esp,0x8
c000f90e:	89 e2                	mov    edx,esp
c000f910:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f913:	89 02                	mov    DWORD PTR [edx],eax
c000f915:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000f918:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c000f91c:	ff d1                	call   ecx
c000f91e:	83 c4 10             	add    esp,0x10
c000f921:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f924:	66 3d 03 02          	cmp    ax,0x203
c000f928:	75 07                	jne    c000f931 <sendKeyboardToken(KeyboardToken)+0x55>
c000f92a:	a0 e0 66 02 c0       	mov    al,ds:0xc00266e0
c000f92f:	84 c0                	test   al,al
c000f931:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c000f935:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c000f938:	a0 e8 69 02 c0       	mov    al,ds:0xc00269e8
c000f93d:	38 c2                	cmp    dl,al
c000f93f:	74 1c                	je     c000f95d <sendKeyboardToken(KeyboardToken)+0x81>
c000f941:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c000f944:	a2 e8 69 02 c0       	mov    ds:0xc00269e8,al
c000f949:	a0 e8 69 02 c0       	mov    al,ds:0xc00269e8
c000f94e:	0f b6 c0             	movzx  eax,al
c000f951:	83 ec 0c             	sub    esp,0xc
c000f954:	50                   	push   eax
c000f955:	e8 b2 ab ff ff       	call   c000a50c <setTerminalScrollLock(bool)>
c000f95a:	83 c4 10             	add    esp,0x10
c000f95d:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c000f960:	84 c0                	test   al,al
c000f962:	0f 84 ae 00 00 00    	je     c000fa16 <sendKeyboardToken(KeyboardToken)+0x13a>
c000f968:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f96b:	66 3d 10 03          	cmp    ax,0x310
c000f96f:	75 06                	jne    c000f977 <sendKeyboardToken(KeyboardToken)+0x9b>
c000f971:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c000f977:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f97a:	66 3d 11 03          	cmp    ax,0x311
c000f97e:	75 06                	jne    c000f986 <sendKeyboardToken(KeyboardToken)+0xaa>
c000f980:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c000f986:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f989:	66 3d 12 03          	cmp    ax,0x312
c000f98d:	75 06                	jne    c000f995 <sendKeyboardToken(KeyboardToken)+0xb9>
c000f98f:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c000f995:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f998:	66 3d 13 03          	cmp    ax,0x313
c000f99c:	75 06                	jne    c000f9a4 <sendKeyboardToken(KeyboardToken)+0xc8>
c000f99e:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c000f9a4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f9a7:	66 3d 14 03          	cmp    ax,0x314
c000f9ab:	75 06                	jne    c000f9b3 <sendKeyboardToken(KeyboardToken)+0xd7>
c000f9ad:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c000f9b3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f9b6:	66 3d 15 03          	cmp    ax,0x315
c000f9ba:	75 06                	jne    c000f9c2 <sendKeyboardToken(KeyboardToken)+0xe6>
c000f9bc:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000f9c2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f9c5:	66 3d 16 03          	cmp    ax,0x316
c000f9c9:	75 06                	jne    c000f9d1 <sendKeyboardToken(KeyboardToken)+0xf5>
c000f9cb:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c000f9d1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f9d4:	66 3d 17 03          	cmp    ax,0x317
c000f9d8:	75 06                	jne    c000f9e0 <sendKeyboardToken(KeyboardToken)+0x104>
c000f9da:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c000f9e0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f9e3:	66 3d 18 03          	cmp    ax,0x318
c000f9e7:	75 06                	jne    c000f9ef <sendKeyboardToken(KeyboardToken)+0x113>
c000f9e9:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c000f9ef:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000f9f2:	66 3d 19 03          	cmp    ax,0x319
c000f9f6:	75 06                	jne    c000f9fe <sendKeyboardToken(KeyboardToken)+0x122>
c000f9f8:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c000f9fe:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fa01:	66 3d 1a 03          	cmp    ax,0x31a
c000fa05:	0f 85 c9 00 00 00    	jne    c000fad4 <sendKeyboardToken(KeyboardToken)+0x1f8>
c000fa0b:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c000fa11:	e9 be 00 00 00       	jmp    c000fad4 <sendKeyboardToken(KeyboardToken)+0x1f8>
c000fa16:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fa19:	66 3d 10 03          	cmp    ax,0x310
c000fa1d:	75 0a                	jne    c000fa29 <sendKeyboardToken(KeyboardToken)+0x14d>
c000fa1f:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c000fa25:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000fa29:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fa2c:	66 3d 11 03          	cmp    ax,0x311
c000fa30:	75 0a                	jne    c000fa3c <sendKeyboardToken(KeyboardToken)+0x160>
c000fa32:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c000fa38:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000fa3c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fa3f:	66 3d 12 03          	cmp    ax,0x312
c000fa43:	75 0a                	jne    c000fa4f <sendKeyboardToken(KeyboardToken)+0x173>
c000fa45:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c000fa4b:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000fa4f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fa52:	66 3d 13 03          	cmp    ax,0x313
c000fa56:	75 0a                	jne    c000fa62 <sendKeyboardToken(KeyboardToken)+0x186>
c000fa58:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c000fa5e:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000fa62:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fa65:	66 3d 14 03          	cmp    ax,0x314
c000fa69:	75 0a                	jne    c000fa75 <sendKeyboardToken(KeyboardToken)+0x199>
c000fa6b:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c000fa71:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000fa75:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fa78:	66 3d 15 03          	cmp    ax,0x315
c000fa7c:	75 0a                	jne    c000fa88 <sendKeyboardToken(KeyboardToken)+0x1ac>
c000fa7e:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000fa84:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000fa88:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fa8b:	66 3d 16 03          	cmp    ax,0x316
c000fa8f:	75 0a                	jne    c000fa9b <sendKeyboardToken(KeyboardToken)+0x1bf>
c000fa91:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c000fa97:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000fa9b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fa9e:	66 3d 17 03          	cmp    ax,0x317
c000faa2:	75 0a                	jne    c000faae <sendKeyboardToken(KeyboardToken)+0x1d2>
c000faa4:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c000faaa:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000faae:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fab1:	66 3d 18 03          	cmp    ax,0x318
c000fab5:	75 0a                	jne    c000fac1 <sendKeyboardToken(KeyboardToken)+0x1e5>
c000fab7:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c000fabd:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000fac1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fac4:	66 3d 19 03          	cmp    ax,0x319
c000fac8:	75 0a                	jne    c000fad4 <sendKeyboardToken(KeyboardToken)+0x1f8>
c000faca:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c000fad0:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000fad4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fad7:	66 3d 00 02          	cmp    ax,0x200
c000fadb:	75 2c                	jne    c000fb09 <sendKeyboardToken(KeyboardToken)+0x22d>
c000fadd:	a0 e0 69 02 c0       	mov    al,ds:0xc00269e0
c000fae2:	83 f0 01             	xor    eax,0x1
c000fae5:	84 c0                	test   al,al
c000fae7:	74 20                	je     c000fb09 <sendKeyboardToken(KeyboardToken)+0x22d>
c000fae9:	a1 50 79 02 c0       	mov    eax,ds:0xc0027950
c000faee:	6a 01                	push   0x1
c000faf0:	6a 00                	push   0x0
c000faf2:	68 46 f7 00 c0       	push   0xc000f746
c000faf7:	50                   	push   eax
c000faf8:	e8 3b 82 00 00       	call   c0017d38 <Process::createThread(void (*)(void*), void*, int)>
c000fafd:	83 c4 10             	add    esp,0x10
c000fb00:	c6 05 e0 69 02 c0 01 	mov    BYTE PTR ds:0xc00269e0,0x1
c000fb07:	eb 33                	jmp    c000fb3c <sendKeyboardToken(KeyboardToken)+0x260>
c000fb09:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fb0c:	66 3d 01 02          	cmp    ax,0x201
c000fb10:	75 2a                	jne    c000fb3c <sendKeyboardToken(KeyboardToken)+0x260>
c000fb12:	a0 e0 69 02 c0       	mov    al,ds:0xc00269e0
c000fb17:	83 f0 01             	xor    eax,0x1
c000fb1a:	84 c0                	test   al,al
c000fb1c:	74 1e                	je     c000fb3c <sendKeyboardToken(KeyboardToken)+0x260>
c000fb1e:	a1 50 79 02 c0       	mov    eax,ds:0xc0027950
c000fb23:	6a 01                	push   0x1
c000fb25:	6a 00                	push   0x0
c000fb27:	68 b2 f7 00 c0       	push   0xc000f7b2
c000fb2c:	50                   	push   eax
c000fb2d:	e8 06 82 00 00       	call   c0017d38 <Process::createThread(void (*)(void*), void*, int)>
c000fb32:	83 c4 10             	add    esp,0x10
c000fb35:	c6 05 e0 69 02 c0 01 	mov    BYTE PTR ds:0xc00269e0,0x1
c000fb3c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fb3f:	66 3d 1d 03          	cmp    ax,0x31d
c000fb43:	75 06                	jne    c000fb4b <sendKeyboardToken(KeyboardToken)+0x26f>
c000fb45:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c000fb4b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fb4e:	66 3d 1c 03          	cmp    ax,0x31c
c000fb52:	75 06                	jne    c000fb5a <sendKeyboardToken(KeyboardToken)+0x27e>
c000fb54:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c000fb5a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fb5d:	66 3d 1b 03          	cmp    ax,0x31b
c000fb61:	75 06                	jne    c000fb69 <sendKeyboardToken(KeyboardToken)+0x28d>
c000fb63:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c000fb69:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fb6c:	66 3d 1e 03          	cmp    ax,0x31e
c000fb70:	75 06                	jne    c000fb78 <sendKeyboardToken(KeyboardToken)+0x29c>
c000fb72:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c000fb78:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fb7b:	66 3d 1f 03          	cmp    ax,0x31f
c000fb7f:	75 06                	jne    c000fb87 <sendKeyboardToken(KeyboardToken)+0x2ab>
c000fb81:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c000fb87:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fb8a:	66 3d 1a 03          	cmp    ax,0x31a
c000fb8e:	75 06                	jne    c000fb96 <sendKeyboardToken(KeyboardToken)+0x2ba>
c000fb90:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c000fb96:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c000fb9a:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000fb9d:	83 f0 01             	xor    eax,0x1
c000fba0:	84 c0                	test   al,al
c000fba2:	74 77                	je     c000fc1b <sendKeyboardToken(KeyboardToken)+0x33f>
c000fba4:	a0 e1 66 02 c0       	mov    al,ds:0xc00266e1
c000fba9:	84 c0                	test   al,al
c000fbab:	74 41                	je     c000fbee <sendKeyboardToken(KeyboardToken)+0x312>
c000fbad:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000fbb1:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
c000fbb5:	74 2b                	je     c000fbe2 <sendKeyboardToken(KeyboardToken)+0x306>
c000fbb7:	8b 15 e4 69 02 c0    	mov    edx,DWORD PTR ds:0xc00269e4
c000fbbd:	89 d0                	mov    eax,edx
c000fbbf:	c1 e0 02             	shl    eax,0x2
c000fbc2:	01 d0                	add    eax,edx
c000fbc4:	01 c0                	add    eax,eax
c000fbc6:	a3 e4 69 02 c0       	mov    ds:0xc00269e4,eax
c000fbcb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fbce:	0f b7 c0             	movzx  eax,ax
c000fbd1:	8d 50 d0             	lea    edx,[eax-0x30]
c000fbd4:	a1 e4 69 02 c0       	mov    eax,ds:0xc00269e4
c000fbd9:	01 d0                	add    eax,edx
c000fbdb:	a3 e4 69 02 c0       	mov    ds:0xc00269e4,eax
c000fbe0:	eb 6d                	jmp    c000fc4f <sendKeyboardToken(KeyboardToken)+0x373>
c000fbe2:	c7 05 e4 69 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00269e4,0x0
c000fbec:	eb 61                	jmp    c000fc4f <sendKeyboardToken(KeyboardToken)+0x373>
c000fbee:	a1 e4 69 02 c0       	mov    eax,ds:0xc00269e4
c000fbf3:	85 c0                	test   eax,eax
c000fbf5:	74 18                	je     c000fc0f <sendKeyboardToken(KeyboardToken)+0x333>
c000fbf7:	a1 e4 69 02 c0       	mov    eax,ds:0xc00269e4
c000fbfc:	0f b6 c0             	movzx  eax,al
c000fbff:	83 ec 0c             	sub    esp,0xc
c000fc02:	50                   	push   eax
c000fc03:	e8 16 fc ff ff       	call   c000f81e <sendKeyToTerminal(unsigned char)>
c000fc08:	83 c4 10             	add    esp,0x10
c000fc0b:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000fc0f:	c7 05 e4 69 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00269e4,0x0
c000fc19:	eb 34                	jmp    c000fc4f <sendKeyboardToken(KeyboardToken)+0x373>
c000fc1b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fc1e:	66 3d 01 01          	cmp    ax,0x101
c000fc22:	75 2b                	jne    c000fc4f <sendKeyboardToken(KeyboardToken)+0x373>
c000fc24:	a1 e4 69 02 c0       	mov    eax,ds:0xc00269e4
c000fc29:	85 c0                	test   eax,eax
c000fc2b:	74 18                	je     c000fc45 <sendKeyboardToken(KeyboardToken)+0x369>
c000fc2d:	a1 e4 69 02 c0       	mov    eax,ds:0xc00269e4
c000fc32:	0f b6 c0             	movzx  eax,al
c000fc35:	83 ec 0c             	sub    esp,0xc
c000fc38:	50                   	push   eax
c000fc39:	e8 e0 fb ff ff       	call   c000f81e <sendKeyToTerminal(unsigned char)>
c000fc3e:	83 c4 10             	add    esp,0x10
c000fc41:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000fc45:	c7 05 e4 69 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00269e4,0x0
c000fc4f:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000fc52:	83 f0 01             	xor    eax,0x1
c000fc55:	84 c0                	test   al,al
c000fc57:	74 4c                	je     c000fca5 <sendKeyboardToken(KeyboardToken)+0x3c9>
c000fc59:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000fc5c:	83 f0 01             	xor    eax,0x1
c000fc5f:	84 c0                	test   al,al
c000fc61:	74 42                	je     c000fca5 <sendKeyboardToken(KeyboardToken)+0x3c9>
c000fc63:	a0 e0 66 02 c0       	mov    al,ds:0xc00266e0
c000fc68:	83 f0 01             	xor    eax,0x1
c000fc6b:	84 c0                	test   al,al
c000fc6d:	74 36                	je     c000fca5 <sendKeyboardToken(KeyboardToken)+0x3c9>
c000fc6f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fc72:	66 83 f8 1f          	cmp    ax,0x1f
c000fc76:	76 09                	jbe    c000fc81 <sendKeyboardToken(KeyboardToken)+0x3a5>
c000fc78:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fc7b:	66 83 f8 7e          	cmp    ax,0x7e
c000fc7f:	76 12                	jbe    c000fc93 <sendKeyboardToken(KeyboardToken)+0x3b7>
c000fc81:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fc84:	66 83 f8 0a          	cmp    ax,0xa
c000fc88:	74 09                	je     c000fc93 <sendKeyboardToken(KeyboardToken)+0x3b7>
c000fc8a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fc8d:	66 83 f8 08          	cmp    ax,0x8
c000fc91:	75 12                	jne    c000fca5 <sendKeyboardToken(KeyboardToken)+0x3c9>
c000fc93:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fc96:	0f b6 c0             	movzx  eax,al
c000fc99:	83 ec 0c             	sub    esp,0xc
c000fc9c:	50                   	push   eax
c000fc9d:	e8 7c fb ff ff       	call   c000f81e <sendKeyToTerminal(unsigned char)>
c000fca2:	83 c4 10             	add    esp,0x10
c000fca5:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000fca8:	83 f0 01             	xor    eax,0x1
c000fcab:	84 c0                	test   al,al
c000fcad:	74 4f                	je     c000fcfe <sendKeyboardToken(KeyboardToken)+0x422>
c000fcaf:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000fcb2:	83 f0 01             	xor    eax,0x1
c000fcb5:	84 c0                	test   al,al
c000fcb7:	74 45                	je     c000fcfe <sendKeyboardToken(KeyboardToken)+0x422>
c000fcb9:	a0 e0 66 02 c0       	mov    al,ds:0xc00266e0
c000fcbe:	84 c0                	test   al,al
c000fcc0:	74 3c                	je     c000fcfe <sendKeyboardToken(KeyboardToken)+0x422>
c000fcc2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fcc5:	66 83 f8 3f          	cmp    ax,0x3f
c000fcc9:	76 33                	jbe    c000fcfe <sendKeyboardToken(KeyboardToken)+0x422>
c000fccb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fcce:	66 83 f8 7f          	cmp    ax,0x7f
c000fcd2:	77 2a                	ja     c000fcfe <sendKeyboardToken(KeyboardToken)+0x422>
c000fcd4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fcd7:	88 c2                	mov    dl,al
c000fcd9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fcdc:	66 83 f8 5f          	cmp    ax,0x5f
c000fce0:	76 04                	jbe    c000fce6 <sendKeyboardToken(KeyboardToken)+0x40a>
c000fce2:	b0 20                	mov    al,0x20
c000fce4:	eb 02                	jmp    c000fce8 <sendKeyboardToken(KeyboardToken)+0x40c>
c000fce6:	b0 00                	mov    al,0x0
c000fce8:	29 c2                	sub    edx,eax
c000fcea:	88 d0                	mov    al,dl
c000fcec:	83 e8 40             	sub    eax,0x40
c000fcef:	0f b6 c0             	movzx  eax,al
c000fcf2:	83 ec 0c             	sub    esp,0xc
c000fcf5:	50                   	push   eax
c000fcf6:	e8 23 fb ff ff       	call   c000f81e <sendKeyToTerminal(unsigned char)>
c000fcfb:	83 c4 10             	add    esp,0x10
c000fcfe:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fd01:	66 3d 00 03          	cmp    ax,0x300
c000fd05:	75 0f                	jne    c000fd16 <sendKeyboardToken(KeyboardToken)+0x43a>
c000fd07:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000fd0a:	83 f0 01             	xor    eax,0x1
c000fd0d:	84 c0                	test   al,al
c000fd0f:	74 05                	je     c000fd16 <sendKeyboardToken(KeyboardToken)+0x43a>
c000fd11:	e8 67 ab ff ff       	call   c000a87d <doTerminalCycle()>
c000fd16:	90                   	nop
c000fd17:	c9                   	leave  
c000fd18:	c3                   	ret    

c000fd19 <clearInternalKeybuffer(VgaText*)>:
c000fd19:	55                   	push   ebp
c000fd1a:	89 e5                	mov    ebp,esp
c000fd1c:	83 ec 08             	sub    esp,0x8
c000fd1f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fd22:	05 98 01 00 00       	add    eax,0x198
c000fd27:	83 ec 0c             	sub    esp,0xc
c000fd2a:	50                   	push   eax
c000fd2b:	e8 70 09 ff ff       	call   c00006a0 <strlen>
c000fd30:	83 c4 10             	add    esp,0x10
c000fd33:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000fd36:	81 c2 98 01 00 00    	add    edx,0x198
c000fd3c:	83 ec 04             	sub    esp,0x4
c000fd3f:	50                   	push   eax
c000fd40:	6a 00                	push   0x0
c000fd42:	52                   	push   edx
c000fd43:	e8 3c 09 ff ff       	call   c0000684 <memset>
c000fd48:	83 c4 10             	add    esp,0x10
c000fd4b:	90                   	nop
c000fd4c:	c9                   	leave  
c000fd4d:	c3                   	ret    

c000fd4e <readKeyboard(VgaText*, char*, unsigned long)>:
c000fd4e:	55                   	push   ebp
c000fd4f:	89 e5                	mov    ebp,esp
c000fd51:	83 ec 18             	sub    esp,0x18
c000fd54:	a1 c8 65 02 c0       	mov    eax,ds:0xc00265c8
c000fd59:	85 c0                	test   eax,eax
c000fd5b:	74 2a                	je     c000fd87 <readKeyboard(VgaText*, char*, unsigned long)+0x39>
c000fd5d:	66 c7 45 ec 00 00    	mov    WORD PTR [ebp-0x14],0x0
c000fd63:	8b 0d c8 65 02 c0    	mov    ecx,DWORD PTR ds:0xc00265c8
c000fd69:	83 ec 04             	sub    esp,0x4
c000fd6c:	68 e0 65 02 c0       	push   0xc00265e0
c000fd71:	83 ec 08             	sub    esp,0x8
c000fd74:	89 e2                	mov    edx,esp
c000fd76:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c000fd79:	89 02                	mov    DWORD PTR [edx],eax
c000fd7b:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000fd7e:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c000fd82:	ff d1                	call   ecx
c000fd84:	83 c4 10             	add    esp,0x10
c000fd87:	fb                   	sti    
c000fd88:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c000fd8f:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c000fd93:	0f 84 a1 00 00 00    	je     c000fe3a <readKeyboard(VgaText*, char*, unsigned long)+0xec>
c000fd99:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fd9c:	8a 80 98 01 00 00    	mov    al,BYTE PTR [eax+0x198]
c000fda2:	84 c0                	test   al,al
c000fda4:	75 28                	jne    c000fdce <readKeyboard(VgaText*, char*, unsigned long)+0x80>
c000fda6:	fa                   	cli    
c000fda7:	a1 28 79 02 c0       	mov    eax,ds:0xc0027928
c000fdac:	40                   	inc    eax
c000fdad:	a3 28 79 02 c0       	mov    ds:0xc0027928,eax
c000fdb2:	e8 9d 81 00 00       	call   c0017f54 <schedule()>
c000fdb7:	a1 28 79 02 c0       	mov    eax,ds:0xc0027928
c000fdbc:	48                   	dec    eax
c000fdbd:	a3 28 79 02 c0       	mov    ds:0xc0027928,eax
c000fdc2:	a1 28 79 02 c0       	mov    eax,ds:0xc0027928
c000fdc7:	85 c0                	test   eax,eax
c000fdc9:	75 ce                	jne    c000fd99 <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c000fdcb:	fb                   	sti    
c000fdcc:	eb cb                	jmp    c000fd99 <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c000fdce:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000fdd1:	8d 50 01             	lea    edx,[eax+0x1]
c000fdd4:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000fdd7:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000fdda:	8a 92 98 01 00 00    	mov    dl,BYTE PTR [edx+0x198]
c000fde0:	88 10                	mov    BYTE PTR [eax],dl
c000fde2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fde5:	8a 80 98 01 00 00    	mov    al,BYTE PTR [eax+0x198]
c000fdeb:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c000fdee:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000fdf1:	05 98 01 00 00       	add    eax,0x198
c000fdf6:	83 ec 0c             	sub    esp,0xc
c000fdf9:	50                   	push   eax
c000fdfa:	e8 a1 08 ff ff       	call   c00006a0 <strlen>
c000fdff:	83 c4 10             	add    esp,0x10
c000fe02:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000fe05:	81 c2 98 01 00 00    	add    edx,0x198
c000fe0b:	8d 4a 01             	lea    ecx,[edx+0x1]
c000fe0e:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000fe11:	81 c2 98 01 00 00    	add    edx,0x198
c000fe17:	83 ec 04             	sub    esp,0x4
c000fe1a:	50                   	push   eax
c000fe1b:	51                   	push   ecx
c000fe1c:	52                   	push   edx
c000fe1d:	e8 9a 07 ff ff       	call   c00005bc <memmove>
c000fe22:	83 c4 10             	add    esp,0x10
c000fe25:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
c000fe28:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c000fe2b:	80 7d f3 0a          	cmp    BYTE PTR [ebp-0xd],0xa
c000fe2f:	0f 85 5a ff ff ff    	jne    c000fd8f <readKeyboard(VgaText*, char*, unsigned long)+0x41>
c000fe35:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000fe38:	eb 03                	jmp    c000fe3d <readKeyboard(VgaText*, char*, unsigned long)+0xef>
c000fe3a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000fe3d:	c9                   	leave  
c000fe3e:	c3                   	ret    
c000fe3f:	90                   	nop

c000fe40 <Keyboard::Keyboard(char const*)>:
c000fe40:	83 ec 0c             	sub    esp,0xc
c000fe43:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fe47:	83 ec 08             	sub    esp,0x8
c000fe4a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fe4e:	50                   	push   eax
c000fe4f:	e8 b6 e2 ff ff       	call   c000e10a <Device::Device(char const*)>
c000fe54:	83 c4 10             	add    esp,0x10
c000fe57:	ba 78 38 02 c0       	mov    edx,0xc0023878
c000fe5c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fe60:	89 10                	mov    DWORD PTR [eax],edx
c000fe62:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fe66:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c000fe70:	c6 05 c4 65 02 c0 01 	mov    BYTE PTR ds:0xc00265c4,0x1
c000fe77:	90                   	nop
c000fe78:	83 c4 0c             	add    esp,0xc
c000fe7b:	c3                   	ret    

c000fe7c <Keyboard::~Keyboard()>:
c000fe7c:	83 ec 0c             	sub    esp,0xc
c000fe7f:	ba 78 38 02 c0       	mov    edx,0xc0023878
c000fe84:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fe88:	89 10                	mov    DWORD PTR [eax],edx
c000fe8a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fe8e:	83 ec 0c             	sub    esp,0xc
c000fe91:	50                   	push   eax
c000fe92:	e8 3d df ff ff       	call   c000ddd4 <Device::~Device()>
c000fe97:	83 c4 10             	add    esp,0x10
c000fe9a:	90                   	nop
c000fe9b:	83 c4 0c             	add    esp,0xc
c000fe9e:	c3                   	ret    
c000fe9f:	90                   	nop

c000fea0 <Keyboard::~Keyboard()>:
c000fea0:	83 ec 0c             	sub    esp,0xc
c000fea3:	83 ec 0c             	sub    esp,0xc
c000fea6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000feaa:	e8 cd ff ff ff       	call   c000fe7c <Keyboard::~Keyboard()>
c000feaf:	83 c4 10             	add    esp,0x10
c000feb2:	83 ec 08             	sub    esp,0x8
c000feb5:	68 5c 01 00 00       	push   0x15c
c000feba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000febe:	e8 1b cb ff ff       	call   c000c9de <operator delete(void*, unsigned long)>
c000fec3:	83 c4 10             	add    esp,0x10
c000fec6:	83 c4 0c             	add    esp,0xc
c000fec9:	c3                   	ret    

c000feca <LogicalDisk::close(int, int, void*)>:
c000feca:	83 c8 ff             	or     eax,0xffffffff
c000fecd:	c3                   	ret    

c000fece <LogicalDisk::~LogicalDisk()>:
c000fece:	83 ec 0c             	sub    esp,0xc
c000fed1:	ba f0 38 02 c0       	mov    edx,0xc00238f0
c000fed6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000feda:	89 10                	mov    DWORD PTR [eax],edx
c000fedc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fee0:	83 ec 0c             	sub    esp,0xc
c000fee3:	50                   	push   eax
c000fee4:	e8 eb de ff ff       	call   c000ddd4 <Device::~Device()>
c000fee9:	83 c4 10             	add    esp,0x10
c000feec:	90                   	nop
c000feed:	83 c4 0c             	add    esp,0xc
c000fef0:	c3                   	ret    
c000fef1:	90                   	nop

c000fef2 <LogicalDisk::~LogicalDisk()>:
c000fef2:	83 ec 0c             	sub    esp,0xc
c000fef5:	83 ec 0c             	sub    esp,0xc
c000fef8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fefc:	e8 cd ff ff ff       	call   c000fece <LogicalDisk::~LogicalDisk()>
c000ff01:	83 c4 10             	add    esp,0x10
c000ff04:	83 ec 08             	sub    esp,0x8
c000ff07:	68 74 01 00 00       	push   0x174
c000ff0c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ff10:	e8 c9 ca ff ff       	call   c000c9de <operator delete(void*, unsigned long)>
c000ff15:	83 c4 10             	add    esp,0x10
c000ff18:	83 c4 0c             	add    esp,0xc
c000ff1b:	c3                   	ret    

c000ff1c <LogicalDisk::open(int, int, void*)>:
c000ff1c:	83 ec 18             	sub    esp,0x18
c000ff1f:	68 a4 38 02 c0       	push   0xc00238a4
c000ff24:	e8 58 44 00 00       	call   c0014381 <Krnl::panic(char const*)>
c000ff29:	83 c8 ff             	or     eax,0xffffffff
c000ff2c:	83 c4 1c             	add    esp,0x1c
c000ff2f:	c3                   	ret    

c000ff30 <LogicalDisk::absoluteToRelative(unsigned long long)>:
c000ff30:	53                   	push   ebx
c000ff31:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000ff35:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ff39:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ff3d:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c000ff43:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c000ff49:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c000ff4f:	77 10                	ja     c000ff61 <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c000ff51:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c000ff57:	89 d3                	mov    ebx,edx
c000ff59:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c000ff5f:	72 05                	jb     c000ff66 <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c000ff61:	83 c8 ff             	or     eax,0xffffffff
c000ff64:	89 c2                	mov    edx,eax
c000ff66:	5b                   	pop    ebx
c000ff67:	c3                   	ret    

c000ff68 <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c000ff68:	56                   	push   esi
c000ff69:	83 c8 ff             	or     eax,0xffffffff
c000ff6c:	53                   	push   ebx
c000ff6d:	89 c2                	mov    edx,eax
c000ff6f:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000ff73:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000ff77:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000ff7b:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000ff81:	77 27                	ja     c000ffaa <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c000ff83:	89 d8                	mov    eax,ebx
c000ff85:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c000ff8b:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c000ff91:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000ff96:	89 c2                	mov    edx,eax
c000ff98:	73 10                	jae    c000ffaa <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c000ff9a:	89 c8                	mov    eax,ecx
c000ff9c:	89 da                	mov    edx,ebx
c000ff9e:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c000ffa4:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c000ffaa:	5b                   	pop    ebx
c000ffab:	5e                   	pop    esi
c000ffac:	c3                   	ret    
c000ffad:	90                   	nop

c000ffae <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c000ffae:	83 ec 1c             	sub    esp,0x1c
c000ffb1:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ffb5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ffb9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ffbd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000ffc1:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000ffc5:	89 04 24             	mov    DWORD PTR [esp],eax
c000ffc8:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000ffcc:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000ffd0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ffd4:	83 ec 08             	sub    esp,0x8
c000ffd7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ffdb:	50                   	push   eax
c000ffdc:	e8 29 e1 ff ff       	call   c000e10a <Device::Device(char const*)>
c000ffe1:	83 c4 10             	add    esp,0x10
c000ffe4:	ba f0 38 02 c0       	mov    edx,0xc00238f0
c000ffe9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ffed:	89 10                	mov    DWORD PTR [eax],edx
c000ffef:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fff3:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000fffa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fffe:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0010005:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010009:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c0010013:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0010017:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001001b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001001f:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c0010025:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c001002b:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c001002f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0010032:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0010036:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c001003c:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c0010042:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010046:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001004a:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c0010050:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010054:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c001005e:	90                   	nop
c001005f:	83 c4 1c             	add    esp,0x1c
c0010062:	c3                   	ret    
c0010063:	90                   	nop

c0010064 <LogicalDisk::assignDriveLetter()>:
c0010064:	55                   	push   ebp
c0010065:	57                   	push   edi
c0010066:	56                   	push   esi
c0010067:	53                   	push   ebx
c0010068:	83 ec 14             	sub    esp,0x14
c001006b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001006f:	8b 3d 00 6a 02 c0    	mov    edi,DWORD PTR ds:0xc0026a00
c0010075:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c001007b:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c001007f:	8a 83 69 01 00 00    	mov    al,BYTE PTR [ebx+0x169]
c0010085:	8b 3d 04 6a 02 c0    	mov    edi,DWORD PTR ds:0xc0026a04
c001008b:	3c 01                	cmp    al,0x1
c001008d:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c0010091:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0010095:	19 c0                	sbb    eax,eax
c0010097:	83 e0 02             	and    eax,0x2
c001009a:	83 c0 41             	add    eax,0x41
c001009d:	0f be e8             	movsx  ebp,al
c00100a0:	3c 43                	cmp    al,0x43
c00100a2:	75 10                	jne    c00100b4 <LogicalDisk::assignDriveLetter()+0x50>
c00100a4:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c00100ab:	75 5d                	jne    c001010a <LogicalDisk::assignDriveLetter()+0xa6>
c00100ad:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c00100b2:	75 56                	jne    c001010a <LogicalDisk::assignDriveLetter()+0xa6>
c00100b4:	8d 75 bf             	lea    esi,[ebp-0x41]
c00100b7:	ba 01 00 00 00       	mov    edx,0x1
c00100bc:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c00100c0:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c00100c4:	d3 e2                	shl    edx,cl
c00100c6:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00100ca:	89 d7                	mov    edi,edx
c00100cc:	89 d6                	mov    esi,edx
c00100ce:	c1 ff 1f             	sar    edi,0x1f
c00100d1:	23 54 24 08          	and    edx,DWORD PTR [esp+0x8]
c00100d5:	21 f9                	and    ecx,edi
c00100d7:	09 d1                	or     ecx,edx
c00100d9:	75 2f                	jne    c001010a <LogicalDisk::assignDriveLetter()+0xa6>
c00100db:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c00100df:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00100e3:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c00100e9:	09 f2                	or     edx,esi
c00100eb:	89 15 00 6a 02 c0    	mov    DWORD PTR ds:0xc0026a00,edx
c00100f1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00100f5:	09 fa                	or     edx,edi
c00100f7:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c00100fb:	89 15 04 6a 02 c0    	mov    DWORD PTR ds:0xc0026a04,edx
c0010101:	89 1c bd 20 6a 02 c0 	mov    DWORD PTR [edi*4-0x3ffd95e0],ebx
c0010108:	eb 08                	jmp    c0010112 <LogicalDisk::assignDriveLetter()+0xae>
c001010a:	45                   	inc    ebp
c001010b:	40                   	inc    eax
c001010c:	3c 5b                	cmp    al,0x5b
c001010e:	75 90                	jne    c00100a0 <LogicalDisk::assignDriveLetter()+0x3c>
c0010110:	31 c0                	xor    eax,eax
c0010112:	83 c4 14             	add    esp,0x14
c0010115:	5b                   	pop    ebx
c0010116:	5e                   	pop    esi
c0010117:	5f                   	pop    edi
c0010118:	5d                   	pop    ebp
c0010119:	c3                   	ret    

c001011a <LogicalDisk::mount()>:
c001011a:	56                   	push   esi
c001011b:	53                   	push   ebx
c001011c:	53                   	push   ebx
c001011d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0010121:	8b 1d 94 65 02 c0    	mov    ebx,DWORD PTR ds:0xc0026594
c0010127:	c7 86 70 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x170],0x0
c0010131:	85 db                	test   ebx,ebx
c0010133:	74 27                	je     c001015c <LogicalDisk::mount()+0x42>
c0010135:	51                   	push   ecx
c0010136:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c001013d:	8b 13                	mov    edx,DWORD PTR [ebx]
c001013f:	83 e8 41             	sub    eax,0x41
c0010142:	50                   	push   eax
c0010143:	56                   	push   esi
c0010144:	53                   	push   ebx
c0010145:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0010148:	83 c4 10             	add    esp,0x10
c001014b:	84 c0                	test   al,al
c001014d:	74 08                	je     c0010157 <LogicalDisk::mount()+0x3d>
c001014f:	89 9e 70 01 00 00    	mov    DWORD PTR [esi+0x170],ebx
c0010155:	eb 07                	jmp    c001015e <LogicalDisk::mount()+0x44>
c0010157:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c001015a:	eb d5                	jmp    c0010131 <LogicalDisk::mount()+0x17>
c001015c:	31 c0                	xor    eax,eax
c001015e:	5a                   	pop    edx
c001015f:	5b                   	pop    ebx
c0010160:	5e                   	pop    esi
c0010161:	c3                   	ret    

c0010162 <LogicalDisk::unmount()>:
c0010162:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010166:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c0010170:	c3                   	ret    
c0010171:	90                   	nop

c0010172 <LogicalDisk::eject()>:
c0010172:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010176:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001017c:	8b 10                	mov    edx,DWORD PTR [eax]
c001017e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0010182:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
c0010185:	90                   	nop

c0010186 <LogicalDisk::unassignDriveLetter()>:
c0010186:	57                   	push   edi
c0010187:	56                   	push   esi
c0010188:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001018c:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c0010193:	84 c9                	test   cl,cl
c0010195:	75 0f                	jne    c00101a6 <LogicalDisk::unassignDriveLetter()+0x20>
c0010197:	c7 44 24 0c c8 38 02 c0 	mov    DWORD PTR [esp+0xc],0xc00238c8
c001019f:	5e                   	pop    esi
c00101a0:	5f                   	pop    edi
c00101a1:	e9 db 41 00 00       	jmp    c0014381 <Krnl::panic(char const*)>
c00101a6:	83 e9 41             	sub    ecx,0x41
c00101a9:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c00101b0:	b8 01 00 00 00       	mov    eax,0x1
c00101b5:	c7 04 8d 20 6a 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffd95e0],0x0
c00101c0:	d3 e0                	shl    eax,cl
c00101c2:	89 c7                	mov    edi,eax
c00101c4:	f7 d0                	not    eax
c00101c6:	c1 ff 1f             	sar    edi,0x1f
c00101c9:	21 05 00 6a 02 c0    	and    DWORD PTR ds:0xc0026a00,eax
c00101cf:	89 fe                	mov    esi,edi
c00101d1:	f7 d6                	not    esi
c00101d3:	21 35 04 6a 02 c0    	and    DWORD PTR ds:0xc0026a04,esi
c00101d9:	5e                   	pop    esi
c00101da:	5f                   	pop    edi
c00101db:	c3                   	ret    

c00101dc <LogicalDisk::read(unsigned long long, int, void*)>:
c00101dc:	57                   	push   edi
c00101dd:	56                   	push   esi
c00101de:	53                   	push   ebx
c00101df:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00101e3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00101e7:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00101eb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00101ef:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c00101f5:	77 41                	ja     c0010238 <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c00101f7:	99                   	cdq    
c00101f8:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c00101fe:	01 c8                	add    eax,ecx
c0010200:	11 da                	adc    edx,ebx
c0010202:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c0010208:	19 d7                	sbb    edi,edx
c001020a:	72 33                	jb     c001023f <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c001020c:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c0010212:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c0010218:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001021c:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c0010220:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c0010226:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001022c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0010230:	5b                   	pop    ebx
c0010231:	5e                   	pop    esi
c0010232:	5f                   	pop    edi
c0010233:	e9 3c 0b 00 00       	jmp    c0010d74 <VCache::read(unsigned long long, int, void*)>
c0010238:	b8 05 00 00 00       	mov    eax,0x5
c001023d:	eb 05                	jmp    c0010244 <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c001023f:	b8 07 00 00 00       	mov    eax,0x7
c0010244:	5b                   	pop    ebx
c0010245:	5e                   	pop    esi
c0010246:	5f                   	pop    edi
c0010247:	c3                   	ret    

c0010248 <LogicalDisk::write(unsigned long long, int, void*)>:
c0010248:	57                   	push   edi
c0010249:	56                   	push   esi
c001024a:	53                   	push   ebx
c001024b:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001024f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0010253:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0010257:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001025b:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0010261:	77 41                	ja     c00102a4 <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c0010263:	99                   	cdq    
c0010264:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c001026a:	01 c8                	add    eax,ecx
c001026c:	11 da                	adc    edx,ebx
c001026e:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c0010274:	19 d7                	sbb    edi,edx
c0010276:	72 33                	jb     c00102ab <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c0010278:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c001027e:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c0010284:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0010288:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c001028c:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c0010292:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0010298:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001029c:	5b                   	pop    ebx
c001029d:	5e                   	pop    esi
c001029e:	5f                   	pop    edi
c001029f:	e9 8c 09 00 00       	jmp    c0010c30 <VCache::write(unsigned long long, int, void*)>
c00102a4:	b8 05 00 00 00       	mov    eax,0x5
c00102a9:	eb 05                	jmp    c00102b0 <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c00102ab:	b8 07 00 00 00       	mov    eax,0x7
c00102b0:	5b                   	pop    ebx
c00102b1:	5e                   	pop    esi
c00102b2:	5f                   	pop    edi
c00102b3:	c3                   	ret    

c00102b4 <Mouse::Mouse(char const*)>:
c00102b4:	83 ec 0c             	sub    esp,0xc
c00102b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00102bb:	83 ec 08             	sub    esp,0x8
c00102be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00102c2:	50                   	push   eax
c00102c3:	e8 42 de ff ff       	call   c000e10a <Device::Device(char const*)>
c00102c8:	83 c4 10             	add    esp,0x10
c00102cb:	ba 1c 39 02 c0       	mov    edx,0xc002391c
c00102d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00102d4:	89 10                	mov    DWORD PTR [eax],edx
c00102d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00102da:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c00102e4:	90                   	nop
c00102e5:	83 c4 0c             	add    esp,0xc
c00102e8:	c3                   	ret    
c00102e9:	90                   	nop
c00102ea:	66 90                	xchg   ax,ax

c00102ec <Mouse::~Mouse()>:
c00102ec:	83 ec 0c             	sub    esp,0xc
c00102ef:	ba 1c 39 02 c0       	mov    edx,0xc002391c
c00102f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00102f8:	89 10                	mov    DWORD PTR [eax],edx
c00102fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00102fe:	83 ec 0c             	sub    esp,0xc
c0010301:	50                   	push   eax
c0010302:	e8 cd da ff ff       	call   c000ddd4 <Device::~Device()>
c0010307:	83 c4 10             	add    esp,0x10
c001030a:	90                   	nop
c001030b:	83 c4 0c             	add    esp,0xc
c001030e:	c3                   	ret    
c001030f:	90                   	nop

c0010310 <Mouse::~Mouse()>:
c0010310:	83 ec 0c             	sub    esp,0xc
c0010313:	83 ec 0c             	sub    esp,0xc
c0010316:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001031a:	e8 cd ff ff ff       	call   c00102ec <Mouse::~Mouse()>
c001031f:	83 c4 10             	add    esp,0x10
c0010322:	83 ec 08             	sub    esp,0x8
c0010325:	68 58 01 00 00       	push   0x158
c001032a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001032e:	e8 ab c6 ff ff       	call   c000c9de <operator delete(void*, unsigned long)>
c0010333:	83 c4 10             	add    esp,0x10
c0010336:	83 c4 0c             	add    esp,0xc
c0010339:	c3                   	ret    

c001033a <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c001033a:	55                   	push   ebp
c001033b:	57                   	push   edi
c001033c:	56                   	push   esi
c001033d:	53                   	push   ebx
c001033e:	81 ec 28 01 00 00    	sub    esp,0x128
c0010344:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c001034b:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c0010352:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c0010359:	8b 94 24 44 01 00 00 	mov    edx,DWORD PTR [esp+0x144]
c0010360:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0010364:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0010368:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001036f:	e8 92 de ff ff       	call   c000e206 <Device::getName()>
c0010374:	5a                   	pop    edx
c0010375:	59                   	pop    ecx
c0010376:	50                   	push   eax
c0010377:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c001037b:	55                   	push   ebp
c001037c:	e8 bf 03 ff ff       	call   c0000740 <strcpy>
c0010381:	5b                   	pop    ebx
c0010382:	58                   	pop    eax
c0010383:	68 40 39 02 c0       	push   0xc0023940
c0010388:	55                   	push   ebp
c0010389:	e8 f2 04 ff ff       	call   c0000880 <strcat>
c001038e:	c7 04 24 74 01 00 00 	mov    DWORD PTR [esp],0x174
c0010395:	e8 29 96 ff ff       	call   c00099c3 <malloc>
c001039a:	83 c4 0c             	add    esp,0xc
c001039d:	89 c3                	mov    ebx,eax
c001039f:	57                   	push   edi
c00103a0:	56                   	push   esi
c00103a1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00103a5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00103a9:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c00103b0:	55                   	push   ebp
c00103b1:	50                   	push   eax
c00103b2:	e8 f7 fb ff ff       	call   c000ffae <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c00103b7:	83 c4 14             	add    esp,0x14
c00103ba:	53                   	push   ebx
c00103bb:	e8 a4 fc ff ff       	call   c0010064 <LogicalDisk::assignDriveLetter()>
c00103c0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00103c3:	e8 52 fd ff ff       	call   c001011a <LogicalDisk::mount()>
c00103c8:	58                   	pop    eax
c00103c9:	5a                   	pop    edx
c00103ca:	53                   	push   ebx
c00103cb:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c00103d2:	e8 2f db ff ff       	call   c000df06 <Device::addChild(Device*)>
c00103d7:	81 c4 2c 01 00 00    	add    esp,0x12c
c00103dd:	5b                   	pop    ebx
c00103de:	5e                   	pop    esi
c00103df:	5f                   	pop    edi
c00103e0:	5d                   	pop    ebp
c00103e1:	c3                   	ret    

c00103e2 <createPartitionsForDisk(PhysicalDisk*)>:
c00103e2:	55                   	push   ebp
c00103e3:	57                   	push   edi
c00103e4:	56                   	push   esi
c00103e5:	53                   	push   ebx
c00103e6:	81 ec 5c 02 00 00    	sub    esp,0x25c
c00103ec:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c00103f3:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00103f9:	3d 00 02 00 00       	cmp    eax,0x200
c00103fe:	74 27                	je     c0010427 <createPartitionsForDisk(PhysicalDisk*)+0x45>
c0010400:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c0010406:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c001040c:	83 ec 10             	sub    esp,0x10
c001040f:	0f a4 f7 0a          	shld   edi,esi,0xa
c0010413:	99                   	cdq    
c0010414:	c1 e6 0a             	shl    esi,0xa
c0010417:	52                   	push   edx
c0010418:	89 fd                	mov    ebp,edi
c001041a:	50                   	push   eax
c001041b:	55                   	push   ebp
c001041c:	56                   	push   esi
c001041d:	e8 62 0b 01 00       	call   c0020f84 <__udivdi3>
c0010422:	e9 b1 00 00 00       	jmp    c00104d8 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c0010427:	83 ec 0c             	sub    esp,0xc
c001042a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001042c:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c0010430:	56                   	push   esi
c0010431:	6a 01                	push   0x1
c0010433:	6a 00                	push   0x0
c0010435:	6a 00                	push   0x0
c0010437:	53                   	push   ebx
c0010438:	ff 50 28             	call   DWORD PTR [eax+0x28]
c001043b:	83 c4 20             	add    esp,0x20
c001043e:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c0010446:	75 0a                	jne    c0010452 <createPartitionsForDisk(PhysicalDisk*)+0x70>
c0010448:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c0010450:	74 2c                	je     c001047e <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c0010452:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0010458:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c001045e:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0010464:	83 ec 10             	sub    esp,0x10
c0010467:	0f a4 c2 0a          	shld   edx,eax,0xa
c001046b:	89 f7                	mov    edi,esi
c001046d:	c1 e0 0a             	shl    eax,0xa
c0010470:	c1 ff 1f             	sar    edi,0x1f
c0010473:	57                   	push   edi
c0010474:	56                   	push   esi
c0010475:	52                   	push   edx
c0010476:	50                   	push   eax
c0010477:	e8 08 0b 01 00       	call   c0020f84 <__udivdi3>
c001047c:	eb 5a                	jmp    c00104d8 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c001047e:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c0010485:	8a 84 24 1e 02 00 00 	mov    al,BYTE PTR [esp+0x21e]
c001048c:	83 e1 7f             	and    ecx,0x7f
c001048f:	83 e0 7f             	and    eax,0x7f
c0010492:	01 c1                	add    ecx,eax
c0010494:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c001049b:	83 e0 7f             	and    eax,0x7f
c001049e:	01 c1                	add    ecx,eax
c00104a0:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c00104a7:	83 e0 7f             	and    eax,0x7f
c00104aa:	00 c1                	add    cl,al
c00104ac:	74 41                	je     c00104ef <createPartitionsForDisk(PhysicalDisk*)+0x10d>
c00104ae:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c00104b4:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c00104ba:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c00104c0:	83 ec 10             	sub    esp,0x10
c00104c3:	0f a4 c2 0a          	shld   edx,eax,0xa
c00104c7:	89 f7                	mov    edi,esi
c00104c9:	c1 e0 0a             	shl    eax,0xa
c00104cc:	c1 ff 1f             	sar    edi,0x1f
c00104cf:	57                   	push   edi
c00104d0:	56                   	push   esi
c00104d1:	52                   	push   edx
c00104d2:	50                   	push   eax
c00104d3:	e8 ac 0a 01 00       	call   c0020f84 <__udivdi3>
c00104d8:	83 c4 14             	add    esp,0x14
c00104db:	52                   	push   edx
c00104dc:	50                   	push   eax
c00104dd:	6a 00                	push   0x0
c00104df:	6a 00                	push   0x0
c00104e1:	53                   	push   ebx
c00104e2:	e8 53 fe ff ff       	call   c001033a <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c00104e7:	83 c4 20             	add    esp,0x20
c00104ea:	e9 79 01 00 00       	jmp    c0010668 <createPartitionsForDisk(PhysicalDisk*)+0x286>
c00104ef:	89 f0                	mov    eax,esi
c00104f1:	31 f6                	xor    esi,esi
c00104f3:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c00104fa:	75 02                	jne    c00104fe <createPartitionsForDisk(PhysicalDisk*)+0x11c>
c00104fc:	89 f1                	mov    ecx,esi
c00104fe:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c0010505:	0f b6 b8 c8 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c8]
c001050c:	c1 e2 08             	shl    edx,0x8
c001050f:	c1 e7 10             	shl    edi,0x10
c0010512:	c7 44 f4 14 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x14],0x0
c001051a:	09 fa                	or     edx,edi
c001051c:	c7 44 f4 34 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x34],0x0
c0010524:	0f b6 b8 c6 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c6]
c001052b:	83 c0 10             	add    eax,0x10
c001052e:	09 fa                	or     edx,edi
c0010530:	0f b6 b8 b9 01 00 00 	movzx  edi,BYTE PTR [eax+0x1b9]
c0010537:	c1 e7 18             	shl    edi,0x18
c001053a:	09 fa                	or     edx,edi
c001053c:	0f b6 b8 bc 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bc]
c0010543:	89 54 f4 10          	mov    DWORD PTR [esp+esi*8+0x10],edx
c0010547:	c1 e7 10             	shl    edi,0x10
c001054a:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c0010551:	c1 e2 08             	shl    edx,0x8
c0010554:	09 fa                	or     edx,edi
c0010556:	0f b6 b8 ba 01 00 00 	movzx  edi,BYTE PTR [eax+0x1ba]
c001055d:	09 fa                	or     edx,edi
c001055f:	0f b6 b8 bd 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bd]
c0010566:	c1 e7 18             	shl    edi,0x18
c0010569:	09 fa                	or     edx,edi
c001056b:	89 54 f4 30          	mov    DWORD PTR [esp+esi*8+0x30],edx
c001056f:	46                   	inc    esi
c0010570:	83 fe 04             	cmp    esi,0x4
c0010573:	0f 85 7a ff ff ff    	jne    c00104f3 <createPartitionsForDisk(PhysicalDisk*)+0x111>
c0010579:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001057d:	83 f0 01             	xor    eax,0x1
c0010580:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c0010584:	75 57                	jne    c00105dd <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c0010586:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001058a:	83 f0 01             	xor    eax,0x1
c001058d:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c0010591:	75 4a                	jne    c00105dd <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c0010593:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0010597:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001059f:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00105a7:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c00105ad:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c00105b3:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c00105b9:	0f a4 c2 0a          	shld   edx,eax,0xa
c00105bd:	89 f7                	mov    edi,esi
c00105bf:	c1 e0 0a             	shl    eax,0xa
c00105c2:	c1 ff 1f             	sar    edi,0x1f
c00105c5:	57                   	push   edi
c00105c6:	56                   	push   esi
c00105c7:	52                   	push   edx
c00105c8:	50                   	push   eax
c00105c9:	e8 b6 09 01 00       	call   c0020f84 <__udivdi3>
c00105ce:	83 c4 10             	add    esp,0x10
c00105d1:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00105d5:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00105d9:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c00105dd:	84 c9                	test   cl,cl
c00105df:	74 53                	je     c0010634 <createPartitionsForDisk(PhysicalDisk*)+0x252>
c00105e1:	0f b6 c9             	movzx  ecx,cl
c00105e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00105e8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00105ec:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00105f0:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00105f4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00105f8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00105fc:	8b 44 cc 10          	mov    eax,DWORD PTR [esp+ecx*8+0x10]
c0010600:	8b 54 cc 14          	mov    edx,DWORD PTR [esp+ecx*8+0x14]
c0010604:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0010608:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c001060c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010610:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0010614:	89 44 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],eax
c0010618:	89 54 cc 14          	mov    DWORD PTR [esp+ecx*8+0x14],edx
c001061c:	8b 44 cc 30          	mov    eax,DWORD PTR [esp+ecx*8+0x30]
c0010620:	8b 54 cc 34          	mov    edx,DWORD PTR [esp+ecx*8+0x34]
c0010624:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0010628:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001062c:	89 74 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],esi
c0010630:	89 7c cc 34          	mov    DWORD PTR [esp+ecx*8+0x34],edi
c0010634:	31 ed                	xor    ebp,ebp
c0010636:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c001063a:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c001063e:	89 f8                	mov    eax,edi
c0010640:	09 f0                	or     eax,esi
c0010642:	74 1e                	je     c0010662 <createPartitionsForDisk(PhysicalDisk*)+0x280>
c0010644:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c0010648:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c001064c:	89 d1                	mov    ecx,edx
c001064e:	09 c1                	or     ecx,eax
c0010650:	74 10                	je     c0010662 <createPartitionsForDisk(PhysicalDisk*)+0x280>
c0010652:	83 ec 0c             	sub    esp,0xc
c0010655:	57                   	push   edi
c0010656:	56                   	push   esi
c0010657:	52                   	push   edx
c0010658:	50                   	push   eax
c0010659:	53                   	push   ebx
c001065a:	e8 db fc ff ff       	call   c001033a <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c001065f:	83 c4 20             	add    esp,0x20
c0010662:	45                   	inc    ebp
c0010663:	83 fd 04             	cmp    ebp,0x4
c0010666:	75 ce                	jne    c0010636 <createPartitionsForDisk(PhysicalDisk*)+0x254>
c0010668:	81 c4 5c 02 00 00    	add    esp,0x25c
c001066e:	5b                   	pop    ebx
c001066f:	5e                   	pop    esi
c0010670:	5f                   	pop    edi
c0010671:	5d                   	pop    ebp
c0010672:	c3                   	ret    
c0010673:	90                   	nop

c0010674 <Serial::Serial(char const*)>:
c0010674:	83 ec 0c             	sub    esp,0xc
c0010677:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001067b:	83 ec 08             	sub    esp,0x8
c001067e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010682:	50                   	push   eax
c0010683:	e8 82 da ff ff       	call   c000e10a <Device::Device(char const*)>
c0010688:	83 c4 10             	add    esp,0x10
c001068b:	ba 54 39 02 c0       	mov    edx,0xc0023954
c0010690:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010694:	89 10                	mov    DWORD PTR [eax],edx
c0010696:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001069a:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c00106a4:	90                   	nop
c00106a5:	83 c4 0c             	add    esp,0xc
c00106a8:	c3                   	ret    
c00106a9:	90                   	nop
c00106aa:	66 90                	xchg   ax,ax

c00106ac <Serial::~Serial()>:
c00106ac:	83 ec 0c             	sub    esp,0xc
c00106af:	ba 54 39 02 c0       	mov    edx,0xc0023954
c00106b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00106b8:	89 10                	mov    DWORD PTR [eax],edx
c00106ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00106be:	83 ec 0c             	sub    esp,0xc
c00106c1:	50                   	push   eax
c00106c2:	e8 0d d7 ff ff       	call   c000ddd4 <Device::~Device()>
c00106c7:	83 c4 10             	add    esp,0x10
c00106ca:	90                   	nop
c00106cb:	83 c4 0c             	add    esp,0xc
c00106ce:	c3                   	ret    
c00106cf:	90                   	nop

c00106d0 <Serial::~Serial()>:
c00106d0:	83 ec 0c             	sub    esp,0xc
c00106d3:	83 ec 0c             	sub    esp,0xc
c00106d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00106da:	e8 cd ff ff ff       	call   c00106ac <Serial::~Serial()>
c00106df:	83 c4 10             	add    esp,0x10
c00106e2:	83 ec 08             	sub    esp,0x8
c00106e5:	68 58 01 00 00       	push   0x158
c00106ea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00106ee:	e8 eb c2 ff ff       	call   c000c9de <operator delete(void*, unsigned long)>
c00106f3:	83 c4 10             	add    esp,0x10
c00106f6:	83 c4 0c             	add    esp,0xc
c00106f9:	c3                   	ret    
c00106fa:	66 90                	xchg   ax,ax

c00106fc <Timer::Timer(char const*)>:
c00106fc:	83 ec 0c             	sub    esp,0xc
c00106ff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010703:	83 ec 08             	sub    esp,0x8
c0010706:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001070a:	50                   	push   eax
c001070b:	e8 fa d9 ff ff       	call   c000e10a <Device::Device(char const*)>
c0010710:	83 c4 10             	add    esp,0x10
c0010713:	ba 98 39 02 c0       	mov    edx,0xc0023998
c0010718:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001071c:	89 10                	mov    DWORD PTR [eax],edx
c001071e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010722:	c7 80 10 01 00 00 0e 00 00 00 	mov    DWORD PTR [eax+0x110],0xe
c001072c:	90                   	nop
c001072d:	83 c4 0c             	add    esp,0xc
c0010730:	c3                   	ret    
c0010731:	90                   	nop
c0010732:	66 90                	xchg   ax,ax

c0010734 <Timer::~Timer()>:
c0010734:	83 ec 0c             	sub    esp,0xc
c0010737:	ba 98 39 02 c0       	mov    edx,0xc0023998
c001073c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010740:	89 10                	mov    DWORD PTR [eax],edx
c0010742:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010746:	83 ec 0c             	sub    esp,0xc
c0010749:	50                   	push   eax
c001074a:	e8 85 d6 ff ff       	call   c000ddd4 <Device::~Device()>
c001074f:	83 c4 10             	add    esp,0x10
c0010752:	90                   	nop
c0010753:	83 c4 0c             	add    esp,0xc
c0010756:	c3                   	ret    
c0010757:	90                   	nop

c0010758 <Timer::~Timer()>:
c0010758:	83 ec 0c             	sub    esp,0xc
c001075b:	83 ec 0c             	sub    esp,0xc
c001075e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010762:	e8 cd ff ff ff       	call   c0010734 <Timer::~Timer()>
c0010767:	83 c4 10             	add    esp,0x10
c001076a:	83 ec 08             	sub    esp,0x8
c001076d:	68 5c 01 00 00       	push   0x15c
c0010772:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010776:	e8 63 c2 ff ff       	call   c000c9de <operator delete(void*, unsigned long)>
c001077b:	83 c4 10             	add    esp,0x10
c001077e:	83 c4 0c             	add    esp,0xc
c0010781:	c3                   	ret    

c0010782 <Timer::read()>:
c0010782:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010786:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001078c:	c3                   	ret    

c001078d <timerHandler(unsigned int)>:
c001078d:	56                   	push   esi
c001078e:	53                   	push   ebx
c001078f:	51                   	push   ecx
c0010790:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010794:	01 05 8c 6a 02 c0    	add    DWORD PTR ds:0xc0026a8c,eax
c001079a:	80 3d 6d 64 02 c0 00 	cmp    BYTE PTR ds:0xc002646d,0x0
c00107a1:	0f 84 49 01 00 00    	je     c00108f0 <timerHandler(unsigned int)+0x163>
c00107a7:	fa                   	cli    
c00107a8:	ff 05 28 79 02 c0    	inc    DWORD PTR ds:0xc0027928
c00107ae:	83 ec 0c             	sub    esp,0xc
c00107b1:	ff 05 24 79 02 c0    	inc    DWORD PTR ds:0xc0027924
c00107b7:	68 38 79 02 c0       	push   0xc0027938
c00107bc:	e8 93 0d 01 00       	call   c0021554 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00107c1:	83 c4 10             	add    esp,0x10
c00107c4:	84 c0                	test   al,al
c00107c6:	0f 85 a0 00 00 00    	jne    c001086c <timerHandler(unsigned int)+0xdf>
c00107cc:	83 ec 0c             	sub    esp,0xc
c00107cf:	68 38 79 02 c0       	push   0xc0027938
c00107d4:	e8 97 0d 01 00       	call   c0021570 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00107d9:	83 c4 10             	add    esp,0x10
c00107dc:	89 c6                	mov    esi,eax
c00107de:	66 90                	xchg   ax,ax
c00107e0:	83 ec 0c             	sub    esp,0xc
c00107e3:	68 38 79 02 c0       	push   0xc0027938
c00107e8:	e8 83 0d 01 00       	call   c0021570 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00107ed:	c7 04 24 38 79 02 c0 	mov    DWORD PTR [esp],0xc0027938
c00107f4:	89 c3                	mov    ebx,eax
c00107f6:	e8 7d 0d 01 00       	call   c0021578 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c00107fb:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00107fe:	83 c4 10             	add    esp,0x10
c0010801:	3b 05 8c 6a 02 c0    	cmp    eax,DWORD PTR ds:0xc0026a8c
c0010807:	77 23                	ja     c001082c <timerHandler(unsigned int)+0x9f>
c0010809:	83 ec 0c             	sub    esp,0xc
c001080c:	53                   	push   ebx
c001080d:	e8 fe 7b 00 00       	call   c0018410 <unblockTask(ThreadControlBlock*)>
c0010812:	83 c4 10             	add    esp,0x10
c0010815:	39 de                	cmp    esi,ebx
c0010817:	75 27                	jne    c0010840 <timerHandler(unsigned int)+0xb3>
c0010819:	83 ec 0c             	sub    esp,0xc
c001081c:	68 38 79 02 c0       	push   0xc0027938
c0010821:	e8 4a 0d 01 00       	call   c0021570 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0010826:	89 c6                	mov    esi,eax
c0010828:	eb 12                	jmp    c001083c <timerHandler(unsigned int)+0xaf>
c001082a:	66 90                	xchg   ax,ax
c001082c:	52                   	push   edx
c001082d:	52                   	push   edx
c001082e:	53                   	push   ebx
c001082f:	68 38 79 02 c0       	push   0xc0027938
c0010834:	e8 f7 0d 01 00       	call   c0021630 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0010839:	8d 76 00             	lea    esi,[esi+0x0]
c001083c:	83 c4 10             	add    esp,0x10
c001083f:	90                   	nop
c0010840:	83 ec 0c             	sub    esp,0xc
c0010843:	68 38 79 02 c0       	push   0xc0027938
c0010848:	e8 07 0d 01 00       	call   c0021554 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001084d:	83 c4 10             	add    esp,0x10
c0010850:	84 c0                	test   al,al
c0010852:	75 18                	jne    c001086c <timerHandler(unsigned int)+0xdf>
c0010854:	83 ec 0c             	sub    esp,0xc
c0010857:	68 38 79 02 c0       	push   0xc0027938
c001085c:	e8 0f 0d 01 00       	call   c0021570 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0010861:	83 c4 10             	add    esp,0x10
c0010864:	39 f0                	cmp    eax,esi
c0010866:	0f 85 74 ff ff ff    	jne    c00107e0 <timerHandler(unsigned int)+0x53>
c001086c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010871:	83 78 34 00          	cmp    DWORD PTR [eax+0x34],0x0
c0010875:	74 41                	je     c00108b8 <timerHandler(unsigned int)+0x12b>
c0010877:	80 3d 6c 64 02 c0 00 	cmp    BYTE PTR ds:0xc002646c,0x0
c001087e:	74 38                	je     c00108b8 <timerHandler(unsigned int)+0x12b>
c0010880:	fa                   	cli    
c0010881:	ff 05 28 79 02 c0    	inc    DWORD PTR ds:0xc0027928
c0010887:	a1 8c 6a 02 c0       	mov    eax,ds:0xc0026a8c
c001088c:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0010892:	29 42 34             	sub    DWORD PTR [edx+0x34],eax
c0010895:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001089b:	3b 42 34             	cmp    eax,DWORD PTR [edx+0x34]
c001089e:	72 08                	jb     c00108a8 <timerHandler(unsigned int)+0x11b>
c00108a0:	e8 af 76 00 00       	call   c0017f54 <schedule()>
c00108a5:	8d 76 00             	lea    esi,[esi+0x0]
c00108a8:	a1 28 79 02 c0       	mov    eax,ds:0xc0027928
c00108ad:	48                   	dec    eax
c00108ae:	a3 28 79 02 c0       	mov    ds:0xc0027928,eax
c00108b3:	75 03                	jne    c00108b8 <timerHandler(unsigned int)+0x12b>
c00108b5:	fb                   	sti    
c00108b6:	66 90                	xchg   ax,ax
c00108b8:	a1 24 79 02 c0       	mov    eax,ds:0xc0027924
c00108bd:	48                   	dec    eax
c00108be:	a3 24 79 02 c0       	mov    ds:0xc0027924,eax
c00108c3:	75 1b                	jne    c00108e0 <timerHandler(unsigned int)+0x153>
c00108c5:	83 3d 20 79 02 c0 00 	cmp    DWORD PTR ds:0xc0027920,0x0
c00108cc:	74 12                	je     c00108e0 <timerHandler(unsigned int)+0x153>
c00108ce:	c7 05 20 79 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027920,0x0
c00108d8:	e8 77 76 00 00       	call   c0017f54 <schedule()>
c00108dd:	8d 76 00             	lea    esi,[esi+0x0]
c00108e0:	a1 28 79 02 c0       	mov    eax,ds:0xc0027928
c00108e5:	48                   	dec    eax
c00108e6:	a3 28 79 02 c0       	mov    ds:0xc0027928,eax
c00108eb:	75 03                	jne    c00108f0 <timerHandler(unsigned int)+0x163>
c00108ed:	fb                   	sti    
c00108ee:	66 90                	xchg   ax,ax
c00108f0:	58                   	pop    eax
c00108f1:	5b                   	pop    ebx
c00108f2:	5e                   	pop    esi
c00108f3:	c3                   	ret    

c00108f4 <setupTimer(int)>:
c00108f4:	57                   	push   edi
c00108f5:	a1 68 64 02 c0       	mov    eax,ds:0xc0026468
c00108fa:	56                   	push   esi
c00108fb:	53                   	push   ebx
c00108fc:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0010900:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0010906:	83 ec 0c             	sub    esp,0xc
c0010909:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c001090f:	e8 f2 d8 ff ff       	call   c000e206 <Device::getName()>
c0010914:	83 c4 10             	add    esp,0x10
c0010917:	80 38 41             	cmp    BYTE PTR [eax],0x41
c001091a:	0f 85 94 00 00 00    	jne    c00109b4 <setupTimer(int)+0xc0>
c0010920:	a1 68 64 02 c0       	mov    eax,ds:0xc0026468
c0010925:	f6 80 e8 01 00 00 01 	test   BYTE PTR [eax+0x1e8],0x1
c001092c:	0f 84 82 00 00 00    	je     c00109b4 <setupTimer(int)+0xc0>
c0010932:	83 ec 0c             	sub    esp,0xc
c0010935:	68 5c 01 00 00       	push   0x15c
c001093a:	e8 84 90 ff ff       	call   c00099c3 <malloc>
c001093f:	89 04 24             	mov    DWORD PTR [esp],eax
c0010942:	89 c3                	mov    ebx,eax
c0010944:	e8 0f 02 01 00       	call   c0020b58 <PIT::PIT()>
c0010949:	59                   	pop    ecx
c001094a:	5f                   	pop    edi
c001094b:	53                   	push   ebx
c001094c:	ff 35 68 64 02 c0    	push   DWORD PTR ds:0xc0026468
c0010952:	e8 af d5 ff ff       	call   c000df06 <Device::addChild(Device*)>
c0010957:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010959:	6a 00                	push   0x0
c001095b:	6a 00                	push   0x0
c001095d:	56                   	push   esi
c001095e:	53                   	push   ebx
c001095f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0010962:	83 c4 14             	add    esp,0x14
c0010965:	68 60 01 00 00       	push   0x160
c001096a:	e8 54 90 ff ff       	call   c00099c3 <malloc>
c001096f:	89 04 24             	mov    DWORD PTR [esp],eax
c0010972:	89 c7                	mov    edi,eax
c0010974:	e8 93 00 01 00       	call   c0020a0c <APICTimer::APICTimer()>
c0010979:	6a 00                	push   0x0
c001097b:	6a 00                	push   0x0
c001097d:	56                   	push   esi
c001097e:	57                   	push   edi
c001097f:	e8 88 ff 00 00       	call   c002090c <APICTimer::open(int, int, void*)>
c0010984:	83 c4 20             	add    esp,0x20
c0010987:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010989:	6a 00                	push   0x0
c001098b:	6a 00                	push   0x0
c001098d:	6a 00                	push   0x0
c001098f:	53                   	push   ebx
c0010990:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0010993:	58                   	pop    eax
c0010994:	a1 68 64 02 c0       	mov    eax,ds:0xc0026468
c0010999:	5a                   	pop    edx
c001099a:	57                   	push   edi
c001099b:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00109a1:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c00109a7:	e8 5a d5 ff ff       	call   c000df06 <Device::addChild(Device*)>
c00109ac:	83 c4 10             	add    esp,0x10
c00109af:	eb 37                	jmp    c00109e8 <setupTimer(int)+0xf4>
c00109b1:	8d 76 00             	lea    esi,[esi+0x0]
c00109b4:	83 ec 0c             	sub    esp,0xc
c00109b7:	68 5c 01 00 00       	push   0x15c
c00109bc:	e8 02 90 ff ff       	call   c00099c3 <malloc>
c00109c1:	89 04 24             	mov    DWORD PTR [esp],eax
c00109c4:	89 c3                	mov    ebx,eax
c00109c6:	e8 8d 01 01 00       	call   c0020b58 <PIT::PIT()>
c00109cb:	58                   	pop    eax
c00109cc:	5a                   	pop    edx
c00109cd:	53                   	push   ebx
c00109ce:	ff 35 68 64 02 c0    	push   DWORD PTR ds:0xc0026468
c00109d4:	e8 2d d5 ff ff       	call   c000df06 <Device::addChild(Device*)>
c00109d9:	8b 03                	mov    eax,DWORD PTR [ebx]
c00109db:	6a 00                	push   0x0
c00109dd:	6a 00                	push   0x0
c00109df:	56                   	push   esi
c00109e0:	53                   	push   ebx
c00109e1:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00109e4:	83 c4 20             	add    esp,0x20
c00109e7:	90                   	nop
c00109e8:	89 d8                	mov    eax,ebx
c00109ea:	5b                   	pop    ebx
c00109eb:	5e                   	pop    esi
c00109ec:	5f                   	pop    edi
c00109ed:	c3                   	ret    
c00109ee:	66 90                	xchg   ax,ax

c00109f0 <VCache::VCache(PhysicalDisk*)>:
c00109f0:	53                   	push   ebx
c00109f1:	83 ec 18             	sub    esp,0x18
c00109f4:	ba e8 3a 02 c0       	mov    edx,0xc0023ae8
c00109f9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00109fd:	89 10                	mov    DWORD PTR [eax],edx
c00109ff:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010a03:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c0010a0a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010a0e:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c0010a15:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010a19:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c0010a20:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0010a27:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010a2b:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c0010a32:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0010a39:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010a3d:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c0010a44:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010a48:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c0010a4c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010a50:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
c0010a57:	c7 40 34 00 00 00 00 	mov    DWORD PTR [eax+0x34],0x0
c0010a5e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010a62:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c0010a66:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010a6a:	c6 40 3d 00          	mov    BYTE PTR [eax+0x3d],0x0
c0010a6e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010a72:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c0010a76:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010a7a:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c0010a81:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c0010a89:	83 ec 0c             	sub    esp,0xc
c0010a8c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010a90:	e8 2e 8f ff ff       	call   c00099c3 <malloc>
c0010a95:	83 c4 10             	add    esp,0x10
c0010a98:	89 c3                	mov    ebx,eax
c0010a9a:	83 ec 0c             	sub    esp,0xc
c0010a9d:	53                   	push   ebx
c0010a9e:	e8 81 72 00 00       	call   c0017d24 <Mutex::Mutex()>
c0010aa3:	83 c4 10             	add    esp,0x10
c0010aa6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010aaa:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0010aad:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010ab1:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0010ab5:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0010ab8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010abc:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c0010ac3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0010ac7:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0010acd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010ad1:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0010ad4:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0010ad8:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c0010ade:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0010ae4:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0010ae8:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c0010aeb:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c0010aee:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010af2:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c0010af6:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0010afa:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0010b00:	05 00 01 00 00       	add    eax,0x100
c0010b05:	c1 e0 04             	shl    eax,0x4
c0010b08:	83 ec 0c             	sub    esp,0xc
c0010b0b:	50                   	push   eax
c0010b0c:	e8 b2 8e ff ff       	call   c00099c3 <malloc>
c0010b11:	83 c4 10             	add    esp,0x10
c0010b14:	89 c2                	mov    edx,eax
c0010b16:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010b1a:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0010b1d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010b21:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c0010b28:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010b2c:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c0010b30:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0010b34:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0010b3a:	c1 e0 06             	shl    eax,0x6
c0010b3d:	83 ec 0c             	sub    esp,0xc
c0010b40:	50                   	push   eax
c0010b41:	e8 7d 8e ff ff       	call   c00099c3 <malloc>
c0010b46:	83 c4 10             	add    esp,0x10
c0010b49:	89 c2                	mov    edx,eax
c0010b4b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010b4f:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0010b52:	90                   	nop
c0010b53:	83 c4 18             	add    esp,0x18
c0010b56:	5b                   	pop    ebx
c0010b57:	c3                   	ret    

c0010b58 <VCache::invalidateReadBuffer()>:
c0010b58:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010b5c:	66 c7 40 3c 00 00    	mov    WORD PTR [eax+0x3c],0x0
c0010b62:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c0010b66:	c3                   	ret    
c0010b67:	90                   	nop

c0010b68 <VCache::writeWriteBuffer()>:
c0010b68:	53                   	push   ebx
c0010b69:	83 ec 0c             	sub    esp,0xc
c0010b6c:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0010b70:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0010b73:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0010b76:	68 c0 39 02 c0       	push   0xc00239c0
c0010b7b:	e8 3f bf ff ff       	call   c000cabf <Dbg::kprintf(char const*, ...)>
c0010b80:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0010b83:	5a                   	pop    edx
c0010b84:	8b 10                	mov    edx,DWORD PTR [eax]
c0010b86:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0010b89:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0010b8c:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0010b8f:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0010b92:	50                   	push   eax
c0010b93:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c0010b96:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0010b9d:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c0010ba4:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c0010ba8:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c0010baf:	83 c4 28             	add    esp,0x28
c0010bb2:	5b                   	pop    ebx
c0010bb3:	c3                   	ret    

c0010bb4 <VCache::~VCache()>:
c0010bb4:	83 ec 0c             	sub    esp,0xc
c0010bb7:	ba e8 3a 02 c0       	mov    edx,0xc0023ae8
c0010bbc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010bc0:	89 10                	mov    DWORD PTR [eax],edx
c0010bc2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010bc6:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c0010bc9:	84 c0                	test   al,al
c0010bcb:	74 0f                	je     c0010bdc <VCache::~VCache()+0x28>
c0010bcd:	83 ec 0c             	sub    esp,0xc
c0010bd0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010bd4:	e8 8f ff ff ff       	call   c0010b68 <VCache::writeWriteBuffer()>
c0010bd9:	83 c4 10             	add    esp,0x10
c0010bdc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010be0:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0010be3:	83 ec 0c             	sub    esp,0xc
c0010be6:	50                   	push   eax
c0010be7:	e8 e7 8d ff ff       	call   c00099d3 <free>
c0010bec:	83 c4 10             	add    esp,0x10
c0010bef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010bf3:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0010bf6:	83 ec 0c             	sub    esp,0xc
c0010bf9:	50                   	push   eax
c0010bfa:	e8 d4 8d ff ff       	call   c00099d3 <free>
c0010bff:	83 c4 10             	add    esp,0x10
c0010c02:	90                   	nop
c0010c03:	83 c4 0c             	add    esp,0xc
c0010c06:	c3                   	ret    
c0010c07:	90                   	nop

c0010c08 <VCache::~VCache()>:
c0010c08:	83 ec 0c             	sub    esp,0xc
c0010c0b:	83 ec 0c             	sub    esp,0xc
c0010c0e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010c12:	e8 9d ff ff ff       	call   c0010bb4 <VCache::~VCache()>
c0010c17:	83 c4 10             	add    esp,0x10
c0010c1a:	83 ec 08             	sub    esp,0x8
c0010c1d:	6a 44                	push   0x44
c0010c1f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010c23:	e8 b6 bd ff ff       	call   c000c9de <operator delete(void*, unsigned long)>
c0010c28:	83 c4 10             	add    esp,0x10
c0010c2b:	83 c4 0c             	add    esp,0xc
c0010c2e:	c3                   	ret    
c0010c2f:	90                   	nop

c0010c30 <VCache::write(unsigned long long, int, void*)>:
c0010c30:	55                   	push   ebp
c0010c31:	31 c0                	xor    eax,eax
c0010c33:	57                   	push   edi
c0010c34:	56                   	push   esi
c0010c35:	53                   	push   ebx
c0010c36:	83 ec 0c             	sub    esp,0xc
c0010c39:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0010c3d:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0010c41:	8b 6c 24 28          	mov    ebp,DWORD PTR [esp+0x28]
c0010c45:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0010c49:	8d 76 00             	lea    esi,[esi+0x0]
c0010c4c:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c0010c50:	7d 16                	jge    c0010c68 <VCache::write(unsigned long long, int, void*)+0x38>
c0010c52:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0010c55:	8b 8a 5c 01 00 00    	mov    ecx,DWORD PTR [edx+0x15c]
c0010c5b:	0f af c8             	imul   ecx,eax
c0010c5e:	89 ca                	mov    edx,ecx
c0010c60:	01 f2                	add    edx,esi
c0010c62:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0010c64:	40                   	inc    eax
c0010c65:	eb e5                	jmp    c0010c4c <VCache::write(unsigned long long, int, void*)+0x1c>
c0010c67:	90                   	nop
c0010c68:	83 ec 0c             	sub    esp,0xc
c0010c6b:	68 e4 39 02 c0       	push   0xc00239e4
c0010c70:	e8 4a be ff ff       	call   c000cabf <Dbg::kprintf(char const*, ...)>
c0010c75:	83 c4 10             	add    esp,0x10
c0010c78:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c0010c7c:	74 0e                	je     c0010c8c <VCache::write(unsigned long long, int, void*)+0x5c>
c0010c7e:	83 ec 0c             	sub    esp,0xc
c0010c81:	53                   	push   ebx
c0010c82:	e8 d1 fe ff ff       	call   c0010b58 <VCache::invalidateReadBuffer()>
c0010c87:	83 c4 10             	add    esp,0x10
c0010c8a:	66 90                	xchg   ax,ax
c0010c8c:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c0010c90:	74 66                	je     c0010cf8 <VCache::write(unsigned long long, int, void*)+0xc8>
c0010c92:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0010c95:	99                   	cdq    
c0010c96:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c0010c99:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c0010c9c:	31 f8                	xor    eax,edi
c0010c9e:	89 d1                	mov    ecx,edx
c0010ca0:	89 ca                	mov    edx,ecx
c0010ca2:	31 ea                	xor    edx,ebp
c0010ca4:	09 d0                	or     eax,edx
c0010ca6:	75 44                	jne    c0010cec <VCache::write(unsigned long long, int, void*)+0xbc>
c0010ca8:	83 7c 24 2c 01       	cmp    DWORD PTR [esp+0x2c],0x1
c0010cad:	75 3d                	jne    c0010cec <VCache::write(unsigned long long, int, void*)+0xbc>
c0010caf:	83 ec 0c             	sub    esp,0xc
c0010cb2:	68 0b 3a 02 c0       	push   0xc0023a0b
c0010cb7:	e8 03 be ff ff       	call   c000cabf <Dbg::kprintf(char const*, ...)>
c0010cbc:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0010cbf:	8b 7b 24             	mov    edi,DWORD PTR [ebx+0x24]
c0010cc2:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c0010cc8:	0f af f9             	imul   edi,ecx
c0010ccb:	03 7b 28             	add    edi,DWORD PTR [ebx+0x28]
c0010cce:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010cd0:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0010cd3:	83 c4 10             	add    esp,0x10
c0010cd6:	40                   	inc    eax
c0010cd7:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0010cda:	83 f8 40             	cmp    eax,0x40
c0010cdd:	75 7d                	jne    c0010d5c <VCache::write(unsigned long long, int, void*)+0x12c>
c0010cdf:	83 ec 0c             	sub    esp,0xc
c0010ce2:	53                   	push   ebx
c0010ce3:	e8 80 fe ff ff       	call   c0010b68 <VCache::writeWriteBuffer()>
c0010ce8:	eb 42                	jmp    c0010d2c <VCache::write(unsigned long long, int, void*)+0xfc>
c0010cea:	66 90                	xchg   ax,ax
c0010cec:	83 ec 0c             	sub    esp,0xc
c0010cef:	53                   	push   ebx
c0010cf0:	e8 73 fe ff ff       	call   c0010b68 <VCache::writeWriteBuffer()>
c0010cf5:	83 c4 10             	add    esp,0x10
c0010cf8:	83 7c 24 2c 3f       	cmp    DWORD PTR [esp+0x2c],0x3f
c0010cfd:	7f 35                	jg     c0010d34 <VCache::write(unsigned long long, int, void*)+0x104>
c0010cff:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0010d03:	89 7b 1c             	mov    DWORD PTR [ebx+0x1c],edi
c0010d06:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0010d09:	89 6b 20             	mov    DWORD PTR [ebx+0x20],ebp
c0010d0c:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c0010d10:	52                   	push   edx
c0010d11:	56                   	push   esi
c0010d12:	6a 01                	push   0x1
c0010d14:	68 21 3a 02 c0       	push   0xc0023a21
c0010d19:	e8 a1 bd ff ff       	call   c000cabf <Dbg::kprintf(char const*, ...)>
c0010d1e:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0010d21:	8b 7b 28             	mov    edi,DWORD PTR [ebx+0x28]
c0010d24:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c0010d2a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010d2c:	83 c4 10             	add    esp,0x10
c0010d2f:	eb 2b                	jmp    c0010d5c <VCache::write(unsigned long long, int, void*)+0x12c>
c0010d31:	8d 76 00             	lea    esi,[esi+0x0]
c0010d34:	50                   	push   eax
c0010d35:	56                   	push   esi
c0010d36:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0010d3a:	68 42 3a 02 c0       	push   0xc0023a42
c0010d3f:	e8 7b bd ff ff       	call   c000cabf <Dbg::kprintf(char const*, ...)>
c0010d44:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0010d47:	8b 10                	mov    edx,DWORD PTR [eax]
c0010d49:	89 34 24             	mov    DWORD PTR [esp],esi
c0010d4c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0010d50:	55                   	push   ebp
c0010d51:	57                   	push   edi
c0010d52:	50                   	push   eax
c0010d53:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c0010d56:	83 c4 20             	add    esp,0x20
c0010d59:	8d 76 00             	lea    esi,[esi+0x0]
c0010d5c:	83 ec 0c             	sub    esp,0xc
c0010d5f:	68 5f 3a 02 c0       	push   0xc0023a5f
c0010d64:	e8 56 bd ff ff       	call   c000cabf <Dbg::kprintf(char const*, ...)>
c0010d69:	83 c4 1c             	add    esp,0x1c
c0010d6c:	31 c0                	xor    eax,eax
c0010d6e:	5b                   	pop    ebx
c0010d6f:	5e                   	pop    esi
c0010d70:	5f                   	pop    edi
c0010d71:	5d                   	pop    ebp
c0010d72:	c3                   	ret    
c0010d73:	90                   	nop

c0010d74 <VCache::read(unsigned long long, int, void*)>:
c0010d74:	55                   	push   ebp
c0010d75:	57                   	push   edi
c0010d76:	56                   	push   esi
c0010d77:	53                   	push   ebx
c0010d78:	83 ec 1c             	sub    esp,0x1c
c0010d7b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0010d7f:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0010d83:	89 04 24             	mov    DWORD PTR [esp],eax
c0010d86:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0010d8a:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0010d8e:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c0010d92:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c0010d96:	31 c0                	xor    eax,eax
c0010d98:	39 f0                	cmp    eax,esi
c0010d9a:	7d 18                	jge    c0010db4 <VCache::read(unsigned long long, int, void*)+0x40>
c0010d9c:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0010d9f:	8b ba 5c 01 00 00    	mov    edi,DWORD PTR [edx+0x15c]
c0010da5:	0f af f8             	imul   edi,eax
c0010da8:	89 fa                	mov    edx,edi
c0010daa:	01 ea                	add    edx,ebp
c0010dac:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0010dae:	40                   	inc    eax
c0010daf:	eb e7                	jmp    c0010d98 <VCache::read(unsigned long long, int, void*)+0x24>
c0010db1:	8d 76 00             	lea    esi,[esi+0x0]
c0010db4:	83 ec 0c             	sub    esp,0xc
c0010db7:	68 7f 3a 02 c0       	push   0xc0023a7f
c0010dbc:	e8 fe bc ff ff       	call   c000cabf <Dbg::kprintf(char const*, ...)>
c0010dc1:	83 c4 10             	add    esp,0x10
c0010dc4:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c0010dc8:	74 0e                	je     c0010dd8 <VCache::read(unsigned long long, int, void*)+0x64>
c0010dca:	83 ec 0c             	sub    esp,0xc
c0010dcd:	53                   	push   ebx
c0010dce:	e8 95 fd ff ff       	call   c0010b68 <VCache::writeWriteBuffer()>
c0010dd3:	83 c4 10             	add    esp,0x10
c0010dd6:	66 90                	xchg   ax,ax
c0010dd8:	83 fe 01             	cmp    esi,0x1
c0010ddb:	75 7b                	jne    c0010e58 <VCache::read(unsigned long long, int, void*)+0xe4>
c0010ddd:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0010de0:	80 b8 68 01 00 00 00 	cmp    BYTE PTR [eax+0x168],0x0
c0010de7:	75 6f                	jne    c0010e58 <VCache::read(unsigned long long, int, void*)+0xe4>
c0010de9:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0010dec:	89 d1                	mov    ecx,edx
c0010dee:	f7 d9                	neg    ecx
c0010df0:	89 cf                	mov    edi,ecx
c0010df2:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0010df6:	c1 ff 1f             	sar    edi,0x1f
c0010df9:	23 0c 24             	and    ecx,DWORD PTR [esp]
c0010dfc:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0010e00:	89 ce                	mov    esi,ecx
c0010e02:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0010e06:	23 4c 24 04          	and    ecx,DWORD PTR [esp+0x4]
c0010e0a:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c0010e0e:	89 cf                	mov    edi,ecx
c0010e10:	74 0a                	je     c0010e1c <VCache::read(unsigned long long, int, void*)+0xa8>
c0010e12:	39 4b 34             	cmp    DWORD PTR [ebx+0x34],ecx
c0010e15:	75 05                	jne    c0010e1c <VCache::read(unsigned long long, int, void*)+0xa8>
c0010e17:	39 73 30             	cmp    DWORD PTR [ebx+0x30],esi
c0010e1a:	74 1c                	je     c0010e38 <VCache::read(unsigned long long, int, void*)+0xc4>
c0010e1c:	c6 43 3c 01          	mov    BYTE PTR [ebx+0x3c],0x1
c0010e20:	89 73 30             	mov    DWORD PTR [ebx+0x30],esi
c0010e23:	89 7b 34             	mov    DWORD PTR [ebx+0x34],edi
c0010e26:	83 ec 0c             	sub    esp,0xc
c0010e29:	8b 08                	mov    ecx,DWORD PTR [eax]
c0010e2b:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0010e2e:	52                   	push   edx
c0010e2f:	57                   	push   edi
c0010e30:	56                   	push   esi
c0010e31:	50                   	push   eax
c0010e32:	ff 51 28             	call   DWORD PTR [ecx+0x28]
c0010e35:	83 c4 20             	add    esp,0x20
c0010e38:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0010e3b:	89 ef                	mov    edi,ebp
c0010e3d:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c0010e43:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0010e46:	8d 70 ff             	lea    esi,[eax-0x1]
c0010e49:	23 34 24             	and    esi,DWORD PTR [esp]
c0010e4c:	0f af f1             	imul   esi,ecx
c0010e4f:	03 73 38             	add    esi,DWORD PTR [ebx+0x38]
c0010e52:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010e54:	eb 32                	jmp    c0010e88 <VCache::read(unsigned long long, int, void*)+0x114>
c0010e56:	66 90                	xchg   ax,ax
c0010e58:	83 ec 0c             	sub    esp,0xc
c0010e5b:	53                   	push   ebx
c0010e5c:	e8 f7 fc ff ff       	call   c0010b58 <VCache::invalidateReadBuffer()>
c0010e61:	83 c4 0c             	add    esp,0xc
c0010e64:	55                   	push   ebp
c0010e65:	56                   	push   esi
c0010e66:	68 a5 3a 02 c0       	push   0xc0023aa5
c0010e6b:	e8 4f bc ff ff       	call   c000cabf <Dbg::kprintf(char const*, ...)>
c0010e70:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0010e73:	8b 10                	mov    edx,DWORD PTR [eax]
c0010e75:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0010e78:	56                   	push   esi
c0010e79:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010e7d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010e81:	50                   	push   eax
c0010e82:	ff 52 28             	call   DWORD PTR [edx+0x28]
c0010e85:	83 c4 20             	add    esp,0x20
c0010e88:	83 ec 0c             	sub    esp,0xc
c0010e8b:	68 c1 3a 02 c0       	push   0xc0023ac1
c0010e90:	e8 2a bc ff ff       	call   c000cabf <Dbg::kprintf(char const*, ...)>
c0010e95:	83 c4 2c             	add    esp,0x2c
c0010e98:	31 c0                	xor    eax,eax
c0010e9a:	5b                   	pop    ebx
c0010e9b:	5e                   	pop    esi
c0010e9c:	5f                   	pop    edi
c0010e9d:	5d                   	pop    ebp
c0010e9e:	c3                   	ret    
c0010e9f:	90                   	nop

c0010ea0 <Video::putrect(int, int, int, int, unsigned int)>:
c0010ea0:	55                   	push   ebp
c0010ea1:	57                   	push   edi
c0010ea2:	56                   	push   esi
c0010ea3:	53                   	push   ebx
c0010ea4:	83 ec 1c             	sub    esp,0x1c
c0010ea7:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0010eab:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0010eaf:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0010eb3:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c0010eb7:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0010ebb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010ebf:	01 df                	add    edi,ebx
c0010ec1:	39 fb                	cmp    ebx,edi
c0010ec3:	7d 1f                	jge    c0010ee4 <Video::putrect(int, int, int, int, unsigned int)+0x44>
c0010ec5:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0010ec9:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0010ecd:	7d 12                	jge    c0010ee1 <Video::putrect(int, int, int, int, unsigned int)+0x41>
c0010ecf:	8b 16                	mov    edx,DWORD PTR [esi]
c0010ed1:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0010ed5:	53                   	push   ebx
c0010ed6:	55                   	push   ebp
c0010ed7:	45                   	inc    ebp
c0010ed8:	56                   	push   esi
c0010ed9:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0010edc:	83 c4 10             	add    esp,0x10
c0010edf:	eb e8                	jmp    c0010ec9 <Video::putrect(int, int, int, int, unsigned int)+0x29>
c0010ee1:	43                   	inc    ebx
c0010ee2:	eb dd                	jmp    c0010ec1 <Video::putrect(int, int, int, int, unsigned int)+0x21>
c0010ee4:	83 c4 1c             	add    esp,0x1c
c0010ee7:	5b                   	pop    ebx
c0010ee8:	5e                   	pop    esi
c0010ee9:	5f                   	pop    edi
c0010eea:	5d                   	pop    ebp
c0010eeb:	c3                   	ret    

c0010eec <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c0010eec:	55                   	push   ebp
c0010eed:	57                   	push   edi
c0010eee:	31 ff                	xor    edi,edi
c0010ef0:	56                   	push   esi
c0010ef1:	53                   	push   ebx
c0010ef2:	83 ec 1c             	sub    esp,0x1c
c0010ef5:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c0010ef9:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0010efd:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c0010f04:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c0010f09:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010f0d:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c0010f11:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0010f15:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c0010f18:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0010f1c:	01 f9                	add    ecx,edi
c0010f1e:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c0010f22:	7d 2f                	jge    c0010f53 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c0010f24:	31 f6                	xor    esi,esi
c0010f26:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0010f2a:	01 f2                	add    edx,esi
c0010f2c:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c0010f30:	7d 1a                	jge    c0010f4c <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c0010f32:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0010f35:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c0010f38:	46                   	inc    esi
c0010f39:	51                   	push   ecx
c0010f3a:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0010f3e:	52                   	push   edx
c0010f3f:	55                   	push   ebp
c0010f40:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0010f43:	83 c4 10             	add    esp,0x10
c0010f46:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0010f4a:	eb da                	jmp    c0010f26 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c0010f4c:	47                   	inc    edi
c0010f4d:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c0010f51:	eb c5                	jmp    c0010f18 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c0010f53:	83 c4 1c             	add    esp,0x1c
c0010f56:	5b                   	pop    ebx
c0010f57:	5e                   	pop    esi
c0010f58:	5f                   	pop    edi
c0010f59:	5d                   	pop    ebp
c0010f5a:	c3                   	ret    
c0010f5b:	90                   	nop

c0010f5c <Video::blit(unsigned int*, int, int, int, int)>:
c0010f5c:	55                   	push   ebp
c0010f5d:	57                   	push   edi
c0010f5e:	56                   	push   esi
c0010f5f:	53                   	push   ebx
c0010f60:	83 ec 1c             	sub    esp,0x1c
c0010f63:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0010f67:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0010f6b:	85 c0                	test   eax,eax
c0010f6d:	79 02                	jns    c0010f71 <Video::blit(unsigned int*, int, int, int, int)+0x15>
c0010f6f:	31 c0                	xor    eax,eax
c0010f71:	c1 e0 02             	shl    eax,0x2
c0010f74:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0010f78:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010f7c:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0010f80:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c0010f84:	39 d8                	cmp    eax,ebx
c0010f86:	7e 49                	jle    c0010fd1 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c0010f88:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c0010f8e:	7c 41                	jl     c0010fd1 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c0010f90:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0010f94:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0010f98:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0010f9c:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c0010fa0:	39 f9                	cmp    ecx,edi
c0010fa2:	7e 22                	jle    c0010fc6 <Video::blit(unsigned int*, int, int, int, int)+0x6a>
c0010fa4:	83 c5 04             	add    ebp,0x4
c0010fa7:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c0010fad:	7c 14                	jl     c0010fc3 <Video::blit(unsigned int*, int, int, int, int)+0x67>
c0010faf:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0010fb1:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c0010fb4:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0010fb8:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0010fbc:	56                   	push   esi
c0010fbd:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c0010fc0:	83 c4 10             	add    esp,0x10
c0010fc3:	47                   	inc    edi
c0010fc4:	eb d2                	jmp    c0010f98 <Video::blit(unsigned int*, int, int, int, int)+0x3c>
c0010fc6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010fca:	43                   	inc    ebx
c0010fcb:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c0010fcf:	eb ab                	jmp    c0010f7c <Video::blit(unsigned int*, int, int, int, int)+0x20>
c0010fd1:	83 c4 1c             	add    esp,0x1c
c0010fd4:	5b                   	pop    ebx
c0010fd5:	5e                   	pop    esi
c0010fd6:	5f                   	pop    edi
c0010fd7:	5d                   	pop    ebp
c0010fd8:	c3                   	ret    
c0010fd9:	90                   	nop

c0010fda <Video::clearScreen(unsigned int)>:
c0010fda:	57                   	push   edi
c0010fdb:	56                   	push   esi
c0010fdc:	53                   	push   ebx
c0010fdd:	31 db                	xor    ebx,ebx
c0010fdf:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0010fe3:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c0010fe9:	7e 1f                	jle    c001100a <Video::clearScreen(unsigned int)+0x30>
c0010feb:	31 ff                	xor    edi,edi
c0010fed:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c0010ff3:	7e 12                	jle    c0011007 <Video::clearScreen(unsigned int)+0x2d>
c0010ff5:	8b 06                	mov    eax,DWORD PTR [esi]
c0010ff7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0010ffb:	53                   	push   ebx
c0010ffc:	57                   	push   edi
c0010ffd:	47                   	inc    edi
c0010ffe:	56                   	push   esi
c0010fff:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0011002:	83 c4 10             	add    esp,0x10
c0011005:	eb e6                	jmp    c0010fed <Video::clearScreen(unsigned int)+0x13>
c0011007:	43                   	inc    ebx
c0011008:	eb d9                	jmp    c0010fe3 <Video::clearScreen(unsigned int)+0x9>
c001100a:	5b                   	pop    ebx
c001100b:	5e                   	pop    esi
c001100c:	5f                   	pop    edi
c001100d:	c3                   	ret    

c001100e <Video::putpixel(int, int, unsigned int)>:
c001100e:	c7 44 24 04 f0 3a 02 c0 	mov    DWORD PTR [esp+0x4],0xc0023af0
c0011016:	e9 66 33 00 00       	jmp    c0014381 <Krnl::panic(char const*)>
c001101b:	90                   	nop

c001101c <Video::Video(char const*)>:
c001101c:	83 ec 0c             	sub    esp,0xc
c001101f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011023:	83 ec 08             	sub    esp,0x8
c0011026:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001102a:	50                   	push   eax
c001102b:	e8 da d0 ff ff       	call   c000e10a <Device::Device(char const*)>
c0011030:	83 c4 10             	add    esp,0x10
c0011033:	ba 60 3b 02 c0       	mov    edx,0xc0023b60
c0011038:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001103c:	89 10                	mov    DWORD PTR [eax],edx
c001103e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011042:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c001104c:	90                   	nop
c001104d:	83 c4 0c             	add    esp,0xc
c0011050:	c3                   	ret    
c0011051:	90                   	nop

c0011052 <Video::~Video()>:
c0011052:	83 ec 0c             	sub    esp,0xc
c0011055:	ba 60 3b 02 c0       	mov    edx,0xc0023b60
c001105a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001105e:	89 10                	mov    DWORD PTR [eax],edx
c0011060:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011064:	83 ec 0c             	sub    esp,0xc
c0011067:	50                   	push   eax
c0011068:	e8 67 cd ff ff       	call   c000ddd4 <Device::~Device()>
c001106d:	83 c4 10             	add    esp,0x10
c0011070:	90                   	nop
c0011071:	83 c4 0c             	add    esp,0xc
c0011074:	c3                   	ret    
c0011075:	90                   	nop

c0011076 <Video::~Video()>:
c0011076:	83 ec 0c             	sub    esp,0xc
c0011079:	83 ec 0c             	sub    esp,0xc
c001107c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011080:	e8 cd ff ff ff       	call   c0011052 <Video::~Video()>
c0011085:	83 c4 10             	add    esp,0x10
c0011088:	83 ec 08             	sub    esp,0x8
c001108b:	68 64 01 00 00       	push   0x164
c0011090:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011094:	e8 45 b9 ff ff       	call   c000c9de <operator delete(void*, unsigned long)>
c0011099:	83 c4 10             	add    esp,0x10
c001109c:	83 c4 0c             	add    esp,0xc
c001109f:	c3                   	ret    

c00110a0 <Video::isMonochrome()>:
c00110a0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00110a4:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c00110aa:	c3                   	ret    
c00110ab:	90                   	nop

c00110ac <Video::getWidth()>:
c00110ac:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00110b0:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00110b6:	c3                   	ret    
c00110b7:	90                   	nop

c00110b8 <Video::getHeight()>:
c00110b8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00110bc:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00110c2:	c3                   	ret    
c00110c3:	90                   	nop

c00110c4 <Video::drawCursor(int, int, unsigned char*, int)>:
c00110c4:	55                   	push   ebp
c00110c5:	57                   	push   edi
c00110c6:	56                   	push   esi
c00110c7:	53                   	push   ebx
c00110c8:	83 ec 2c             	sub    esp,0x2c
c00110cb:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00110cf:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c00110d3:	83 f8 01             	cmp    eax,0x1
c00110d6:	19 c9                	sbb    ecx,ecx
c00110d8:	31 db                	xor    ebx,ebx
c00110da:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00110de:	89 cd                	mov    ebp,ecx
c00110e0:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c00110e8:	f7 d5                	not    ebp
c00110ea:	81 e5 ff ff ff 00    	and    ebp,0xffffff
c00110f0:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00110f4:	01 d8                	add    eax,ebx
c00110f6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00110fa:	56                   	push   esi
c00110fb:	e8 b8 ff ff ff       	call   c00110b8 <Video::getHeight()>
c0011100:	59                   	pop    ecx
c0011101:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0011105:	7e 70                	jle    c0011177 <Video::drawCursor(int, int, unsigned char*, int)+0xb3>
c0011107:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001110b:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c001110f:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c0011112:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0011116:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001111a:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c0011121:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0011125:	89 f8                	mov    eax,edi
c0011127:	83 c0 20             	add    eax,0x20
c001112a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001112e:	56                   	push   esi
c001112f:	e8 78 ff ff ff       	call   c00110ac <Video::getWidth()>
c0011134:	5a                   	pop    edx
c0011135:	39 c7                	cmp    edi,eax
c0011137:	7d 34                	jge    c001116d <Video::drawCursor(int, int, unsigned char*, int)+0xa9>
c0011139:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c001113e:	74 05                	je     c0011145 <Video::drawCursor(int, int, unsigned char*, int)+0x81>
c0011140:	8b 06                	mov    eax,DWORD PTR [esi]
c0011142:	55                   	push   ebp
c0011143:	eb 0d                	jmp    c0011152 <Video::drawCursor(int, int, unsigned char*, int)+0x8e>
c0011145:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c001114a:	74 12                	je     c001115e <Video::drawCursor(int, int, unsigned char*, int)+0x9a>
c001114c:	8b 06                	mov    eax,DWORD PTR [esi]
c001114e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0011152:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0011156:	57                   	push   edi
c0011157:	56                   	push   esi
c0011158:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001115b:	83 c4 10             	add    esp,0x10
c001115e:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c0011162:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c0011166:	47                   	inc    edi
c0011167:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c001116b:	75 c1                	jne    c001112e <Video::drawCursor(int, int, unsigned char*, int)+0x6a>
c001116d:	43                   	inc    ebx
c001116e:	83 fb 20             	cmp    ebx,0x20
c0011171:	0f 85 79 ff ff ff    	jne    c00110f0 <Video::drawCursor(int, int, unsigned char*, int)+0x2c>
c0011177:	83 c4 2c             	add    esp,0x2c
c001117a:	5b                   	pop    ebx
c001117b:	5e                   	pop    esi
c001117c:	5f                   	pop    edi
c001117d:	5d                   	pop    ebp
c001117e:	c3                   	ret    
c001117f:	90                   	nop

c0011180 <Video::tgaParse(unsigned char*, int, int*, int*)>:
c0011180:	55                   	push   ebp
c0011181:	57                   	push   edi
c0011182:	56                   	push   esi
c0011183:	53                   	push   ebx
c0011184:	83 ec 28             	sub    esp,0x28
c0011187:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001118b:	0f b6 43 0c          	movzx  eax,BYTE PTR [ebx+0xc]
c001118f:	0f b6 73 0d          	movzx  esi,BYTE PTR [ebx+0xd]
c0011193:	0f b6 53 0e          	movzx  edx,BYTE PTR [ebx+0xe]
c0011197:	c1 e6 08             	shl    esi,0x8
c001119a:	01 c6                	add    esi,eax
c001119c:	0f b6 43 0f          	movzx  eax,BYTE PTR [ebx+0xf]
c00111a0:	c1 e0 08             	shl    eax,0x8
c00111a3:	01 d0                	add    eax,edx
c00111a5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00111a9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00111ad:	0f af c6             	imul   eax,esi
c00111b0:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c00111b7:	50                   	push   eax
c00111b8:	e8 06 88 ff ff       	call   c00099c3 <malloc>
c00111bd:	83 c4 10             	add    esp,0x10
c00111c0:	89 c7                	mov    edi,eax
c00111c2:	85 c0                	test   eax,eax
c00111c4:	75 10                	jne    c00111d6 <Video::tgaParse(unsigned char*, int, int*, int*)+0x56>
c00111c6:	83 ec 0c             	sub    esp,0xc
c00111c9:	68 11 3b 02 c0       	push   0xc0023b11
c00111ce:	e8 ae 31 00 00       	call   c0014381 <Krnl::panic(char const*)>
c00111d3:	83 c4 10             	add    esp,0x10
c00111d6:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c00111d9:	ba 12 00 00 00       	mov    edx,0x12
c00111de:	84 c0                	test   al,al
c00111e0:	74 11                	je     c00111f3 <Video::tgaParse(unsigned char*, int, int*, int*)+0x73>
c00111e2:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c00111e6:	0f b7 4b 05          	movzx  ecx,WORD PTR [ebx+0x5]
c00111ea:	c1 fa 03             	sar    edx,0x3
c00111ed:	0f af d1             	imul   edx,ecx
c00111f0:	83 c2 12             	add    edx,0x12
c00111f3:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c00111f7:	74 04                	je     c00111fd <Video::tgaParse(unsigned char*, int, int*, int*)+0x7d>
c00111f9:	85 f6                	test   esi,esi
c00111fb:	75 12                	jne    c001120f <Video::tgaParse(unsigned char*, int, int*, int*)+0x8f>
c00111fd:	83 ec 0c             	sub    esp,0xc
c0011200:	68 21 3b 02 c0       	push   0xc0023b21
c0011205:	e8 b5 b8 ff ff       	call   c000cabf <Dbg::kprintf(char const*, ...)>
c001120a:	e9 b8 00 00 00       	jmp    c00112c7 <Video::tgaParse(unsigned char*, int, int*, int*)+0x147>
c001120f:	0f b6 4b 02          	movzx  ecx,BYTE PTR [ebx+0x2]
c0011213:	80 f9 02             	cmp    cl,0x2
c0011216:	0f 85 96 00 00 00    	jne    c00112b2 <Video::tgaParse(unsigned char*, int, int*, int*)+0x132>
c001121c:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c0011221:	75 0e                	jne    c0011231 <Video::tgaParse(unsigned char*, int, int*, int*)+0xb1>
c0011223:	84 c0                	test   al,al
c0011225:	75 0a                	jne    c0011231 <Video::tgaParse(unsigned char*, int, int*, int*)+0xb1>
c0011227:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c001122a:	83 e8 18             	sub    eax,0x18
c001122d:	a8 f7                	test   al,0xf7
c001122f:	74 0a                	je     c001123b <Video::tgaParse(unsigned char*, int, int*, int*)+0xbb>
c0011231:	83 ec 0c             	sub    esp,0xc
c0011234:	68 36 3b 02 c0       	push   0xc0023b36
c0011239:	eb 7f                	jmp    c00112ba <Video::tgaParse(unsigned char*, int, int*, int*)+0x13a>
c001123b:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011243:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001124b:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c001124f:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0011257:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c001125b:	75 0c                	jne    c0011269 <Video::tgaParse(unsigned char*, int, int*, int*)+0xe9>
c001125d:	0f b6 44 13 03       	movzx  eax,BYTE PTR [ebx+edx*1+0x3]
c0011262:	c1 e0 18             	shl    eax,0x18
c0011265:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0011269:	45                   	inc    ebp
c001126a:	0f b6 4c 13 02       	movzx  ecx,BYTE PTR [ebx+edx*1+0x2]
c001126f:	c1 e1 10             	shl    ecx,0x10
c0011272:	89 c8                	mov    eax,ecx
c0011274:	0f b6 4c 13 01       	movzx  ecx,BYTE PTR [ebx+edx*1+0x1]
c0011279:	c1 e1 08             	shl    ecx,0x8
c001127c:	09 c1                	or     ecx,eax
c001127e:	0f b6 04 13          	movzx  eax,BYTE PTR [ebx+edx*1]
c0011282:	09 c1                	or     ecx,eax
c0011284:	0b 4c 24 08          	or     ecx,DWORD PTR [esp+0x8]
c0011288:	89 4c af fc          	mov    DWORD PTR [edi+ebp*4-0x4],ecx
c001128c:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c0011290:	c1 f8 03             	sar    eax,0x3
c0011293:	01 c2                	add    edx,eax
c0011295:	89 e8                	mov    eax,ebp
c0011297:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c001129b:	39 c6                	cmp    esi,eax
c001129d:	7f b0                	jg     c001124f <Video::tgaParse(unsigned char*, int, int*, int*)+0xcf>
c001129f:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c00112a3:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00112a7:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c00112aa:	7e 22                	jle    c00112ce <Video::tgaParse(unsigned char*, int, int*, int*)+0x14e>
c00112ac:	89 6c 24 04          	mov    DWORD PTR [esp+0x4],ebp
c00112b0:	eb 99                	jmp    c001124b <Video::tgaParse(unsigned char*, int, int*, int*)+0xcb>
c00112b2:	50                   	push   eax
c00112b3:	50                   	push   eax
c00112b4:	51                   	push   ecx
c00112b5:	68 44 3b 02 c0       	push   0xc0023b44
c00112ba:	e8 00 b8 ff ff       	call   c000cabf <Dbg::kprintf(char const*, ...)>
c00112bf:	89 3c 24             	mov    DWORD PTR [esp],edi
c00112c2:	e8 0c 87 ff ff       	call   c00099d3 <free>
c00112c7:	83 c4 10             	add    esp,0x10
c00112ca:	31 ff                	xor    edi,edi
c00112cc:	eb 0f                	jmp    c00112dd <Video::tgaParse(unsigned char*, int, int*, int*)+0x15d>
c00112ce:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00112d2:	89 30                	mov    DWORD PTR [eax],esi
c00112d4:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00112d8:	8b 34 24             	mov    esi,DWORD PTR [esp]
c00112db:	89 30                	mov    DWORD PTR [eax],esi
c00112dd:	83 c4 1c             	add    esp,0x1c
c00112e0:	89 f8                	mov    eax,edi
c00112e2:	5b                   	pop    ebx
c00112e3:	5e                   	pop    esi
c00112e4:	5f                   	pop    edi
c00112e5:	5d                   	pop    ebp
c00112e6:	c3                   	ret    
c00112e7:	90                   	nop

c00112e8 <Video::putTGA(int, int, unsigned char*, int)>:
c00112e8:	55                   	push   ebp
c00112e9:	57                   	push   edi
c00112ea:	56                   	push   esi
c00112eb:	53                   	push   ebx
c00112ec:	83 ec 28             	sub    esp,0x28
c00112ef:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c00112f3:	8d 44 24 18          	lea    eax,[esp+0x18]
c00112f7:	50                   	push   eax
c00112f8:	8d 44 24 18          	lea    eax,[esp+0x18]
c00112fc:	50                   	push   eax
c00112fd:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0011301:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0011305:	56                   	push   esi
c0011306:	e8 75 fe ff ff       	call   c0011180 <Video::tgaParse(unsigned char*, int, int*, int*)>
c001130b:	83 c4 20             	add    esp,0x20
c001130e:	85 c0                	test   eax,eax
c0011310:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0011314:	74 35                	je     c001134b <Video::putTGA(int, int, unsigned char*, int)+0x63>
c0011316:	89 c7                	mov    edi,eax
c0011318:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001131c:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0011320:	39 d8                	cmp    eax,ebx
c0011322:	7e 27                	jle    c001134b <Video::putTGA(int, int, unsigned char*, int)+0x63>
c0011324:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0011328:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001132c:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0011330:	39 e8                	cmp    eax,ebp
c0011332:	7e 14                	jle    c0011348 <Video::putTGA(int, int, unsigned char*, int)+0x60>
c0011334:	8b 06                	mov    eax,DWORD PTR [esi]
c0011336:	83 c7 04             	add    edi,0x4
c0011339:	ff 77 fc             	push   DWORD PTR [edi-0x4]
c001133c:	53                   	push   ebx
c001133d:	55                   	push   ebp
c001133e:	45                   	inc    ebp
c001133f:	56                   	push   esi
c0011340:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0011343:	83 c4 10             	add    esp,0x10
c0011346:	eb e0                	jmp    c0011328 <Video::putTGA(int, int, unsigned char*, int)+0x40>
c0011348:	43                   	inc    ebx
c0011349:	eb cd                	jmp    c0011318 <Video::putTGA(int, int, unsigned char*, int)+0x30>
c001134b:	83 c4 1c             	add    esp,0x1c
c001134e:	5b                   	pop    ebx
c001134f:	5e                   	pop    esi
c0011350:	5f                   	pop    edi
c0011351:	5d                   	pop    ebp
c0011352:	c3                   	ret    
c0011353:	90                   	nop

c0011354 <ACPI::close(int, int, void*)>:
c0011354:	83 ec 1c             	sub    esp,0x1c
c0011357:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c001135f:	74 0b                	je     c001136c <ACPI::close(int, int, void*)+0x18>
c0011361:	b8 00 00 00 00       	mov    eax,0x0
c0011366:	e9 99 00 00 00       	jmp    c0011404 <ACPI::close(int, int, void*)+0xb0>
c001136b:	90                   	nop
c001136c:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0011371:	75 29                	jne    c001139c <ACPI::close(int, int, void*)+0x48>
c0011373:	a1 a8 6a 02 c0       	mov    eax,ds:0xc0026aa8
c0011378:	85 c0                	test   eax,eax
c001137a:	74 08                	je     c0011384 <ACPI::close(int, int, void*)+0x30>
c001137c:	a1 a8 6a 02 c0       	mov    eax,ds:0xc0026aa8
c0011381:	ff d0                	call   eax
c0011383:	90                   	nop
c0011384:	83 ec 0c             	sub    esp,0xc
c0011387:	68 a0 3b 02 c0       	push   0xc0023ba0
c001138c:	e8 f0 2f 00 00       	call   c0014381 <Krnl::panic(char const*)>
c0011391:	83 c4 10             	add    esp,0x10
c0011394:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011399:	eb 69                	jmp    c0011404 <ACPI::close(int, int, void*)+0xb0>
c001139b:	90                   	nop
c001139c:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c00113a1:	75 59                	jne    c00113fc <ACPI::close(int, int, void*)+0xa8>
c00113a3:	a1 a4 6a 02 c0       	mov    eax,ds:0xc0026aa4
c00113a8:	85 c0                	test   eax,eax
c00113aa:	74 08                	je     c00113b4 <ACPI::close(int, int, void*)+0x60>
c00113ac:	a1 a4 6a 02 c0       	mov    eax,ds:0xc0026aa4
c00113b1:	ff d0                	call   eax
c00113b3:	90                   	nop
c00113b4:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c00113b9:	8d 76 00             	lea    esi,[esi+0x0]
c00113bc:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c00113c1:	83 e0 02             	and    eax,0x2
c00113c4:	74 1e                	je     c00113e4 <ACPI::close(int, int, void*)+0x90>
c00113c6:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c00113cd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00113d1:	89 c2                	mov    edx,eax
c00113d3:	ec                   	in     al,dx
c00113d4:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c00113d8:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c00113dc:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00113e0:	eb da                	jmp    c00113bc <ACPI::close(int, int, void*)+0x68>
c00113e2:	66 90                	xchg   ax,ax
c00113e4:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c00113eb:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c00113f0:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c00113f4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00113f8:	ee                   	out    dx,al
c00113f9:	8d 76 00             	lea    esi,[esi+0x0]
c00113fc:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011401:	8d 76 00             	lea    esi,[esi+0x0]
c0011404:	83 c4 1c             	add    esp,0x1c
c0011407:	c3                   	ret    

c0011408 <findRSDP()>:
c0011408:	83 ec 1c             	sub    esp,0x1c
c001140b:	83 ec 0c             	sub    esp,0xc
c001140e:	68 7b 3c 02 c0       	push   0xc0023c7b
c0011413:	e8 05 86 ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0011418:	83 c4 10             	add    esp,0x10
c001141b:	a1 68 64 02 c0       	mov    eax,ds:0xc0026468
c0011420:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0011426:	83 e0 04             	and    eax,0x4
c0011429:	84 c0                	test   al,al
c001142b:	75 0b                	jne    c0011438 <findRSDP()+0x30>
c001142d:	b8 00 00 00 00       	mov    eax,0x0
c0011432:	e9 a1 00 00 00       	jmp    c00114d8 <findRSDP()+0xd0>
c0011437:	90                   	nop
c0011438:	a1 98 64 02 c0       	mov    eax,ds:0xc0026498
c001143d:	3d ff 07 00 00       	cmp    eax,0x7ff
c0011442:	7f 1c                	jg     c0011460 <findRSDP()+0x58>
c0011444:	a1 68 64 02 c0       	mov    eax,ds:0xc0026468
c0011449:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c001144f:	83 e2 fb             	and    edx,0xfffffffb
c0011452:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0011458:	b8 00 00 00 00       	mov    eax,0x0
c001145d:	eb 79                	jmp    c00114d8 <findRSDP()+0xd0>
c001145f:	90                   	nop
c0011460:	83 ec 0c             	sub    esp,0xc
c0011463:	68 8b 3c 02 c0       	push   0xc0023c8b
c0011468:	e8 b0 85 ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c001146d:	83 c4 10             	add    esp,0x10
c0011470:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c0011478:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c0011480:	77 3e                	ja     c00114c0 <findRSDP()+0xb8>
c0011482:	83 ec 04             	sub    esp,0x4
c0011485:	6a 08                	push   0x8
c0011487:	68 a4 3c 02 c0       	push   0xc0023ca4
c001148c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0011490:	e8 eb f0 fe ff       	call   c0000580 <memcmp>
c0011495:	83 c4 10             	add    esp,0x10
c0011498:	85 c0                	test   eax,eax
c001149a:	0f 94 c0             	sete   al
c001149d:	84 c0                	test   al,al
c001149f:	74 17                	je     c00114b8 <findRSDP()+0xb0>
c00114a1:	83 ec 0c             	sub    esp,0xc
c00114a4:	68 ad 3c 02 c0       	push   0xc0023cad
c00114a9:	e8 6f 85 ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c00114ae:	83 c4 10             	add    esp,0x10
c00114b1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00114b5:	eb 21                	jmp    c00114d8 <findRSDP()+0xd0>
c00114b7:	90                   	nop
c00114b8:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c00114bd:	eb b9                	jmp    c0011478 <findRSDP()+0x70>
c00114bf:	90                   	nop
c00114c0:	83 ec 0c             	sub    esp,0xc
c00114c3:	68 bb 3c 02 c0       	push   0xc0023cbb
c00114c8:	e8 50 85 ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c00114cd:	83 c4 10             	add    esp,0x10
c00114d0:	b8 00 00 00 00       	mov    eax,0x0
c00114d5:	8d 76 00             	lea    esi,[esi+0x0]
c00114d8:	83 c4 1c             	add    esp,0x1c
c00114db:	c3                   	ret    

c00114dc <loadACPITables(unsigned char*)>:
c00114dc:	57                   	push   edi
c00114dd:	56                   	push   esi
c00114de:	53                   	push   ebx
c00114df:	83 ec 60             	sub    esp,0x60
c00114e2:	a1 68 64 02 c0       	mov    eax,ds:0xc0026468
c00114e7:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00114ed:	83 e0 04             	and    eax,0x4
c00114f0:	84 c0                	test   al,al
c00114f2:	0f 84 3c 02 00 00    	je     c0011734 <loadACPITables(unsigned char*)+0x258>
c00114f8:	a0 c0 6c 02 c0       	mov    al,ds:0xc0026cc0
c00114fd:	84 c0                	test   al,al
c00114ff:	74 77                	je     c0011578 <loadACPITables(unsigned char*)+0x9c>
c0011501:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c0011505:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0011509:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001150d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011510:	83 e8 24             	sub    eax,0x24
c0011513:	c1 e8 03             	shr    eax,0x3
c0011516:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001151a:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c0011522:	66 90                	xchg   ax,ax
c0011524:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0011528:	3b 44 24 4c          	cmp    eax,DWORD PTR [esp+0x4c]
c001152c:	0f 8d b6 00 00 00    	jge    c00115e8 <loadACPITables(unsigned char*)+0x10c>
c0011532:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c0011536:	83 c0 24             	add    eax,0x24
c0011539:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c001153d:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0011541:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0011545:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0011549:	c1 e0 03             	shl    eax,0x3
c001154c:	01 44 24 44          	add    DWORD PTR [esp+0x44],eax
c0011550:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0011554:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0011557:	8b 00                	mov    eax,DWORD PTR [eax]
c0011559:	89 c1                	mov    ecx,eax
c001155b:	a1 ac 6a 02 c0       	mov    eax,ds:0xc0026aac
c0011560:	8d 50 01             	lea    edx,[eax+0x1]
c0011563:	89 15 ac 6a 02 c0    	mov    DWORD PTR ds:0xc0026aac,edx
c0011569:	89 ca                	mov    edx,ecx
c001156b:	89 14 c5 c4 6a 02 c0 	mov    DWORD PTR [eax*8-0x3ffd953c],edx
c0011572:	ff 44 24 5c          	inc    DWORD PTR [esp+0x5c]
c0011576:	eb ac                	jmp    c0011524 <loadACPITables(unsigned char*)+0x48>
c0011578:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c001157c:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0011580:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0011584:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011587:	83 e8 24             	sub    eax,0x24
c001158a:	c1 e8 02             	shr    eax,0x2
c001158d:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0011591:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c0011599:	8d 76 00             	lea    esi,[esi+0x0]
c001159c:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c00115a0:	3b 44 24 3c          	cmp    eax,DWORD PTR [esp+0x3c]
c00115a4:	7d 42                	jge    c00115e8 <loadACPITables(unsigned char*)+0x10c>
c00115a6:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c00115aa:	83 c0 24             	add    eax,0x24
c00115ad:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00115b1:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00115b5:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00115b9:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c00115bd:	c1 e0 02             	shl    eax,0x2
c00115c0:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c00115c4:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00115c8:	8b 08                	mov    ecx,DWORD PTR [eax]
c00115ca:	a1 ac 6a 02 c0       	mov    eax,ds:0xc0026aac
c00115cf:	8d 50 01             	lea    edx,[eax+0x1]
c00115d2:	89 15 ac 6a 02 c0    	mov    DWORD PTR ds:0xc0026aac,edx
c00115d8:	89 ca                	mov    edx,ecx
c00115da:	89 14 c5 c4 6a 02 c0 	mov    DWORD PTR [eax*8-0x3ffd953c],edx
c00115e1:	ff 44 24 58          	inc    DWORD PTR [esp+0x58]
c00115e5:	eb b5                	jmp    c001159c <loadACPITables(unsigned char*)+0xc0>
c00115e7:	90                   	nop
c00115e8:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c00115f0:	a1 ac 6a 02 c0       	mov    eax,ds:0xc0026aac
c00115f5:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c00115f9:	0f 8d 39 01 00 00    	jge    c0011738 <loadACPITables(unsigned char*)+0x25c>
c00115ff:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0011603:	8b 04 c5 c4 6a 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd953c]
c001160a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001160e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011612:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0011616:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001161a:	25 ff 0f 00 00       	and    eax,0xfff
c001161f:	89 c6                	mov    esi,eax
c0011621:	8b 1d 90 65 02 c0    	mov    ebx,DWORD PTR ds:0xc0026590
c0011627:	83 ec 0c             	sub    esp,0xc
c001162a:	6a 01                	push   0x1
c001162c:	e8 bc a0 ff ff       	call   c000b6ed <Virt::allocateKernelVirtualPages(int)>
c0011631:	83 c4 10             	add    esp,0x10
c0011634:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0011638:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c001163e:	83 ec 0c             	sub    esp,0xc
c0011641:	6a 01                	push   0x1
c0011643:	6a 01                	push   0x1
c0011645:	50                   	push   eax
c0011646:	52                   	push   edx
c0011647:	53                   	push   ebx
c0011648:	e8 3d aa ff ff       	call   c000c08a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001164d:	83 c4 20             	add    esp,0x20
c0011650:	09 f0                	or     eax,esi
c0011652:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0011656:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001165a:	c1 e0 03             	shl    eax,0x3
c001165d:	05 c0 6a 02 c0       	add    eax,0xc0026ac0
c0011662:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011666:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001166a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001166e:	c7 44 24 14 04 00 00 00 	mov    DWORD PTR [esp+0x14],0x4
c0011676:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001167a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001167e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0011682:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0011686:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001168a:	89 c6                	mov    esi,eax
c001168c:	89 d7                	mov    edi,edx
c001168e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0011690:	89 c8                	mov    eax,ecx
c0011692:	89 fa                	mov    edx,edi
c0011694:	89 f3                	mov    ebx,esi
c0011696:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c001169a:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001169e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00116a2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00116a6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00116a9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00116ad:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00116b1:	05 00 10 00 00       	add    eax,0x1000
c00116b6:	c1 e8 0c             	shr    eax,0xc
c00116b9:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00116bd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00116c1:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00116c5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00116c9:	25 ff 0f 00 00       	and    eax,0xfff
c00116ce:	89 c6                	mov    esi,eax
c00116d0:	8b 1d 90 65 02 c0    	mov    ebx,DWORD PTR ds:0xc0026590
c00116d6:	83 ec 0c             	sub    esp,0xc
c00116d9:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00116dd:	e8 0b a0 ff ff       	call   c000b6ed <Virt::allocateKernelVirtualPages(int)>
c00116e2:	83 c4 10             	add    esp,0x10
c00116e5:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00116e9:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c00116ef:	83 ec 0c             	sub    esp,0xc
c00116f2:	6a 01                	push   0x1
c00116f4:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00116f8:	50                   	push   eax
c00116f9:	52                   	push   edx
c00116fa:	53                   	push   ebx
c00116fb:	e8 8a a9 ff ff       	call   c000c08a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0011700:	83 c4 20             	add    esp,0x20
c0011703:	09 f0                	or     eax,esi
c0011705:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0011709:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001170d:	83 ec 0c             	sub    esp,0xc
c0011710:	50                   	push   eax
c0011711:	e8 07 a3 ff ff       	call   c000ba1d <Virt::freeKernelVirtualPages(unsigned long)>
c0011716:	83 c4 10             	add    esp,0x10
c0011719:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001171d:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0011721:	89 14 c5 c4 6a 02 c0 	mov    DWORD PTR [eax*8-0x3ffd953c],edx
c0011728:	ff 44 24 54          	inc    DWORD PTR [esp+0x54]
c001172c:	e9 bf fe ff ff       	jmp    c00115f0 <loadACPITables(unsigned char*)+0x114>
c0011731:	8d 76 00             	lea    esi,[esi+0x0]
c0011734:	90                   	nop
c0011735:	8d 76 00             	lea    esi,[esi+0x0]
c0011738:	83 c4 60             	add    esp,0x60
c001173b:	5b                   	pop    ebx
c001173c:	5e                   	pop    esi
c001173d:	5f                   	pop    edi
c001173e:	c3                   	ret    
c001173f:	90                   	nop

c0011740 <findRSDT(unsigned char*)>:
c0011740:	57                   	push   edi
c0011741:	56                   	push   esi
c0011742:	53                   	push   ebx
c0011743:	83 ec 50             	sub    esp,0x50
c0011746:	83 ec 0c             	sub    esp,0xc
c0011749:	68 cf 3c 02 c0       	push   0xc0023ccf
c001174e:	e8 ca 82 ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0011753:	83 c4 10             	add    esp,0x10
c0011756:	a1 68 64 02 c0       	mov    eax,ds:0xc0026468
c001175b:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0011761:	83 e0 04             	and    eax,0x4
c0011764:	84 c0                	test   al,al
c0011766:	75 0c                	jne    c0011774 <findRSDT(unsigned char*)+0x34>
c0011768:	b8 00 00 00 00       	mov    eax,0x0
c001176d:	e9 86 01 00 00       	jmp    c00118f8 <findRSDT(unsigned char*)+0x1b8>
c0011772:	66 90                	xchg   ax,ax
c0011774:	83 ec 0c             	sub    esp,0xc
c0011777:	68 e1 3c 02 c0       	push   0xc0023ce1
c001177c:	e8 9c 82 ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0011781:	83 c4 10             	add    esp,0x10
c0011784:	89 e0                	mov    eax,esp
c0011786:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c001178a:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c001178e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0011792:	c7 44 24 34 24 00 00 00 	mov    DWORD PTR [esp+0x34],0x24
c001179a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001179e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00117a2:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00117a6:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00117aa:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c00117ae:	89 c6                	mov    esi,eax
c00117b0:	89 d7                	mov    edi,edx
c00117b2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00117b4:	89 c8                	mov    eax,ecx
c00117b6:	89 fa                	mov    edx,edi
c00117b8:	89 f3                	mov    ebx,esi
c00117ba:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c00117be:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c00117c2:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00117c6:	83 ec 0c             	sub    esp,0xc
c00117c9:	68 f3 3c 02 c0       	push   0xc0023cf3
c00117ce:	e8 4a 82 ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c00117d3:	83 c4 10             	add    esp,0x10
c00117d6:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00117da:	88 44 24 4b          	mov    BYTE PTR [esp+0x4b],al
c00117de:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c00117e6:	83 ec 0c             	sub    esp,0xc
c00117e9:	68 05 3d 02 c0       	push   0xc0023d05
c00117ee:	e8 2a 82 ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c00117f3:	83 c4 10             	add    esp,0x10
c00117f6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00117fa:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00117fe:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0011802:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011806:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c001180a:	83 ec 04             	sub    esp,0x4
c001180d:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0011811:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0011815:	68 c4 3b 02 c0       	push   0xc0023bc4
c001181a:	e8 a0 b2 ff ff       	call   c000cabf <Dbg::kprintf(char const*, ...)>
c001181f:	83 c4 10             	add    esp,0x10
c0011822:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0011826:	25 ff 0f 00 00       	and    eax,0xfff
c001182b:	89 c6                	mov    esi,eax
c001182d:	8b 1d 90 65 02 c0    	mov    ebx,DWORD PTR ds:0xc0026590
c0011833:	83 ec 0c             	sub    esp,0xc
c0011836:	6a 02                	push   0x2
c0011838:	e8 b0 9e ff ff       	call   c000b6ed <Virt::allocateKernelVirtualPages(int)>
c001183d:	83 c4 10             	add    esp,0x10
c0011840:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0011844:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c001184a:	83 ec 0c             	sub    esp,0xc
c001184d:	6a 01                	push   0x1
c001184f:	6a 02                	push   0x2
c0011851:	50                   	push   eax
c0011852:	52                   	push   edx
c0011853:	53                   	push   ebx
c0011854:	e8 31 a8 ff ff       	call   c000c08a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0011859:	83 c4 20             	add    esp,0x20
c001185c:	09 f0                	or     eax,esi
c001185e:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0011862:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0011866:	25 ff 0f 00 00       	and    eax,0xfff
c001186b:	89 c6                	mov    esi,eax
c001186d:	8b 1d 90 65 02 c0    	mov    ebx,DWORD PTR ds:0xc0026590
c0011873:	83 ec 0c             	sub    esp,0xc
c0011876:	6a 02                	push   0x2
c0011878:	e8 70 9e ff ff       	call   c000b6ed <Virt::allocateKernelVirtualPages(int)>
c001187d:	83 c4 10             	add    esp,0x10
c0011880:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0011884:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c001188a:	83 ec 0c             	sub    esp,0xc
c001188d:	6a 01                	push   0x1
c001188f:	6a 02                	push   0x2
c0011891:	50                   	push   eax
c0011892:	52                   	push   edx
c0011893:	53                   	push   ebx
c0011894:	e8 f1 a7 ff ff       	call   c000c08a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0011899:	83 c4 20             	add    esp,0x20
c001189c:	09 f0                	or     eax,esi
c001189e:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c00118a2:	83 ec 04             	sub    esp,0x4
c00118a5:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00118a9:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00118ad:	68 e4 3b 02 c0       	push   0xc0023be4
c00118b2:	e8 08 b2 ff ff       	call   c000cabf <Dbg::kprintf(char const*, ...)>
c00118b7:	83 c4 10             	add    esp,0x10
c00118ba:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c00118bf:	75 13                	jne    c00118d4 <findRSDT(unsigned char*)+0x194>
c00118c1:	c6 05 c0 6c 02 c0 00 	mov    BYTE PTR ds:0xc0026cc0,0x0
c00118c8:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00118cc:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c00118d0:	eb 22                	jmp    c00118f4 <findRSDT(unsigned char*)+0x1b4>
c00118d2:	66 90                	xchg   ax,ax
c00118d4:	80 7c 24 4b 02       	cmp    BYTE PTR [esp+0x4b],0x2
c00118d9:	75 11                	jne    c00118ec <findRSDT(unsigned char*)+0x1ac>
c00118db:	c6 05 c0 6c 02 c0 01 	mov    BYTE PTR ds:0xc0026cc0,0x1
c00118e2:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00118e6:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c00118ea:	eb 08                	jmp    c00118f4 <findRSDT(unsigned char*)+0x1b4>
c00118ec:	b8 00 00 00 00       	mov    eax,0x0
c00118f1:	eb 05                	jmp    c00118f8 <findRSDT(unsigned char*)+0x1b8>
c00118f3:	90                   	nop
c00118f4:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00118f8:	83 c4 50             	add    esp,0x50
c00118fb:	5b                   	pop    ebx
c00118fc:	5e                   	pop    esi
c00118fd:	5f                   	pop    edi
c00118fe:	c3                   	ret    
c00118ff:	90                   	nop

c0011900 <findDataTable(unsigned char*, char*)>:
c0011900:	83 ec 1c             	sub    esp,0x1c
c0011903:	a1 68 64 02 c0       	mov    eax,ds:0xc0026468
c0011908:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001190e:	83 e0 04             	and    eax,0x4
c0011911:	84 c0                	test   al,al
c0011913:	75 07                	jne    c001191c <findDataTable(unsigned char*, char*)+0x1c>
c0011915:	b8 00 00 00 00       	mov    eax,0x0
c001191a:	eb 58                	jmp    c0011974 <findDataTable(unsigned char*, char*)+0x74>
c001191c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011924:	a1 ac 6a 02 c0       	mov    eax,ds:0xc0026aac
c0011929:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c001192d:	7d 3d                	jge    c001196c <findDataTable(unsigned char*, char*)+0x6c>
c001192f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011933:	c1 e0 03             	shl    eax,0x3
c0011936:	05 c0 6a 02 c0       	add    eax,0xc0026ac0
c001193b:	83 ec 04             	sub    esp,0x4
c001193e:	6a 04                	push   0x4
c0011940:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0011944:	50                   	push   eax
c0011945:	e8 36 ec fe ff       	call   c0000580 <memcmp>
c001194a:	83 c4 10             	add    esp,0x10
c001194d:	85 c0                	test   eax,eax
c001194f:	0f 94 c0             	sete   al
c0011952:	84 c0                	test   al,al
c0011954:	74 0e                	je     c0011964 <findDataTable(unsigned char*, char*)+0x64>
c0011956:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001195a:	8b 04 c5 c4 6a 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd953c]
c0011961:	eb 11                	jmp    c0011974 <findDataTable(unsigned char*, char*)+0x74>
c0011963:	90                   	nop
c0011964:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0011968:	eb ba                	jmp    c0011924 <findDataTable(unsigned char*, char*)+0x24>
c001196a:	66 90                	xchg   ax,ax
c001196c:	b8 00 00 00 00       	mov    eax,0x0
c0011971:	8d 76 00             	lea    esi,[esi+0x0]
c0011974:	83 c4 1c             	add    esp,0x1c
c0011977:	c3                   	ret    

c0011978 <scanMADT()>:
c0011978:	53                   	push   ebx
c0011979:	83 ec 38             	sub    esp,0x38
c001197c:	83 ec 0c             	sub    esp,0xc
c001197f:	68 17 3d 02 c0       	push   0xc0023d17
c0011984:	e8 94 80 ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0011989:	83 c4 10             	add    esp,0x10
c001198c:	a1 80 64 02 c0       	mov    eax,ds:0xc0026480
c0011991:	25 00 04 00 00       	and    eax,0x400
c0011996:	74 14                	je     c00119ac <scanMADT()+0x34>
c0011998:	a1 68 64 02 c0       	mov    eax,ds:0xc0026468
c001199d:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c00119a3:	83 e2 fb             	and    edx,0xfffffffb
c00119a6:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c00119ac:	a1 68 64 02 c0       	mov    eax,ds:0xc0026468
c00119b1:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00119b7:	83 e0 04             	and    eax,0x4
c00119ba:	84 c0                	test   al,al
c00119bc:	0f 84 82 04 00 00    	je     c0011e44 <scanMADT()+0x4cc>
c00119c2:	83 ec 0c             	sub    esp,0xc
c00119c5:	68 24 3d 02 c0       	push   0xc0023d24
c00119ca:	e8 4e 80 ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c00119cf:	83 c4 10             	add    esp,0x10
c00119d2:	e8 31 fa ff ff       	call   c0011408 <findRSDP()>
c00119d7:	a3 cc 6c 02 c0       	mov    ds:0xc0026ccc,eax
c00119dc:	a1 cc 6c 02 c0       	mov    eax,ds:0xc0026ccc
c00119e1:	85 c0                	test   eax,eax
c00119e3:	75 1b                	jne    c0011a00 <scanMADT()+0x88>
c00119e5:	a1 68 64 02 c0       	mov    eax,ds:0xc0026468
c00119ea:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c00119f0:	83 e2 fb             	and    edx,0xfffffffb
c00119f3:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c00119f9:	e9 4e 04 00 00       	jmp    c0011e4c <scanMADT()+0x4d4>
c00119fe:	66 90                	xchg   ax,ax
c0011a00:	83 ec 0c             	sub    esp,0xc
c0011a03:	68 36 3d 02 c0       	push   0xc0023d36
c0011a08:	e8 10 80 ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0011a0d:	83 c4 10             	add    esp,0x10
c0011a10:	a1 cc 6c 02 c0       	mov    eax,ds:0xc0026ccc
c0011a15:	83 ec 0c             	sub    esp,0xc
c0011a18:	50                   	push   eax
c0011a19:	e8 22 fd ff ff       	call   c0011740 <findRSDT(unsigned char*)>
c0011a1e:	83 c4 10             	add    esp,0x10
c0011a21:	a3 c8 6c 02 c0       	mov    ds:0xc0026cc8,eax
c0011a26:	a1 c8 6c 02 c0       	mov    eax,ds:0xc0026cc8
c0011a2b:	85 c0                	test   eax,eax
c0011a2d:	75 19                	jne    c0011a48 <scanMADT()+0xd0>
c0011a2f:	a1 68 64 02 c0       	mov    eax,ds:0xc0026468
c0011a34:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0011a3a:	83 e2 fb             	and    edx,0xfffffffb
c0011a3d:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0011a43:	e9 04 04 00 00       	jmp    c0011e4c <scanMADT()+0x4d4>
c0011a48:	83 ec 0c             	sub    esp,0xc
c0011a4b:	68 46 3d 02 c0       	push   0xc0023d46
c0011a50:	e8 c8 7f ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0011a55:	83 c4 10             	add    esp,0x10
c0011a58:	a1 c8 6c 02 c0       	mov    eax,ds:0xc0026cc8
c0011a5d:	83 ec 0c             	sub    esp,0xc
c0011a60:	50                   	push   eax
c0011a61:	e8 76 fa ff ff       	call   c00114dc <loadACPITables(unsigned char*)>
c0011a66:	83 c4 10             	add    esp,0x10
c0011a69:	a1 c8 6c 02 c0       	mov    eax,ds:0xc0026cc8
c0011a6e:	83 ec 08             	sub    esp,0x8
c0011a71:	68 5e 3d 02 c0       	push   0xc0023d5e
c0011a76:	50                   	push   eax
c0011a77:	e8 84 fe ff ff       	call   c0011900 <findDataTable(unsigned char*, char*)>
c0011a7c:	83 c4 10             	add    esp,0x10
c0011a7f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0011a83:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c0011a88:	75 1a                	jne    c0011aa4 <scanMADT()+0x12c>
c0011a8a:	a1 68 64 02 c0       	mov    eax,ds:0xc0026468
c0011a8f:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0011a95:	83 e2 fe             	and    edx,0xfffffffe
c0011a98:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0011a9e:	e9 a9 03 00 00       	jmp    c0011e4c <scanMADT()+0x4d4>
c0011aa3:	90                   	nop
c0011aa4:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0011aac:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011ab0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011ab3:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c0011ab7:	0f 87 8f 03 00 00    	ja     c0011e4c <scanMADT()+0x4d4>
c0011abd:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c0011ac5:	0f 87 81 03 00 00    	ja     c0011e4c <scanMADT()+0x4d4>
c0011acb:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011acf:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0011ad3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011ad7:	8d 50 01             	lea    edx,[eax+0x1]
c0011ada:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0011ade:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0011ae2:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0011ae6:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c0011aea:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011aee:	8d 50 01             	lea    edx,[eax+0x1]
c0011af1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0011af5:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0011af9:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0011afd:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c0011b01:	80 7c 24 22 02       	cmp    BYTE PTR [esp+0x22],0x2
c0011b06:	0f 86 3c 03 00 00    	jbe    c0011e48 <scanMADT()+0x4d0>
c0011b0c:	80 7c 24 23 00       	cmp    BYTE PTR [esp+0x23],0x0
c0011b11:	75 59                	jne    c0011b6c <scanMADT()+0x1f4>
c0011b13:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011b17:	8d 50 01             	lea    edx,[eax+0x1]
c0011b1a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0011b1e:	8a 15 c0 6e 02 c0    	mov    dl,BYTE PTR ds:0xc0026ec0
c0011b24:	0f b6 d2             	movzx  edx,dl
c0011b27:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0011b2b:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0011b2f:	88 82 00 6f 02 c0    	mov    BYTE PTR [edx-0x3ffd9100],al
c0011b35:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011b39:	8d 50 01             	lea    edx,[eax+0x1]
c0011b3c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0011b40:	8a 15 c0 6e 02 c0    	mov    dl,BYTE PTR ds:0xc0026ec0
c0011b46:	8d 4a 01             	lea    ecx,[edx+0x1]
c0011b49:	88 0d c0 6e 02 c0    	mov    BYTE PTR ds:0xc0026ec0,cl
c0011b4f:	0f b6 d2             	movzx  edx,dl
c0011b52:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0011b56:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0011b5a:	88 82 e0 6e 02 c0    	mov    BYTE PTR [edx-0x3ffd9120],al
c0011b60:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0011b65:	e9 c6 02 00 00       	jmp    c0011e30 <scanMADT()+0x4b8>
c0011b6a:	66 90                	xchg   ax,ax
c0011b6c:	80 7c 24 23 01       	cmp    BYTE PTR [esp+0x23],0x1
c0011b71:	0f 85 15 01 00 00    	jne    c0011c8c <scanMADT()+0x314>
c0011b77:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011b7b:	8d 50 01             	lea    edx,[eax+0x1]
c0011b7e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0011b82:	8a 15 80 6d 02 c0    	mov    dl,BYTE PTR ds:0xc0026d80
c0011b88:	0f b6 d2             	movzx  edx,dl
c0011b8b:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0011b8f:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0011b93:	88 82 a0 6d 02 c0    	mov    BYTE PTR [edx-0x3ffd9260],al
c0011b99:	ff 44 24 2c          	inc    DWORD PTR [esp+0x2c]
c0011b9d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0011ba1:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011ba5:	01 d0                	add    eax,edx
c0011ba7:	83 c0 2c             	add    eax,0x2c
c0011baa:	8a 00                	mov    al,BYTE PTR [eax]
c0011bac:	0f b6 d0             	movzx  edx,al
c0011baf:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011bb3:	8d 48 01             	lea    ecx,[eax+0x1]
c0011bb6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011bba:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0011bbe:	0f b6 c0             	movzx  eax,al
c0011bc1:	c1 e0 08             	shl    eax,0x8
c0011bc4:	89 d1                	mov    ecx,edx
c0011bc6:	09 c1                	or     ecx,eax
c0011bc8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011bcc:	8d 50 02             	lea    edx,[eax+0x2]
c0011bcf:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011bd3:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0011bd7:	0f b6 c0             	movzx  eax,al
c0011bda:	c1 e0 10             	shl    eax,0x10
c0011bdd:	09 c1                	or     ecx,eax
c0011bdf:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011be3:	8d 50 03             	lea    edx,[eax+0x3]
c0011be6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011bea:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0011bee:	0f b6 c0             	movzx  eax,al
c0011bf1:	c1 e0 18             	shl    eax,0x18
c0011bf4:	09 c1                	or     ecx,eax
c0011bf6:	89 ca                	mov    edx,ecx
c0011bf8:	a0 80 6d 02 c0       	mov    al,ds:0xc0026d80
c0011bfd:	0f b6 c0             	movzx  eax,al
c0011c00:	89 14 85 c0 6d 02 c0 	mov    DWORD PTR [eax*4-0x3ffd9240],edx
c0011c07:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0011c0c:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0011c10:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011c14:	01 d0                	add    eax,edx
c0011c16:	83 c0 2c             	add    eax,0x2c
c0011c19:	8a 00                	mov    al,BYTE PTR [eax]
c0011c1b:	0f b6 d0             	movzx  edx,al
c0011c1e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011c22:	8d 48 01             	lea    ecx,[eax+0x1]
c0011c25:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011c29:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0011c2d:	0f b6 c0             	movzx  eax,al
c0011c30:	c1 e0 08             	shl    eax,0x8
c0011c33:	89 d1                	mov    ecx,edx
c0011c35:	09 c1                	or     ecx,eax
c0011c37:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011c3b:	8d 50 02             	lea    edx,[eax+0x2]
c0011c3e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011c42:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0011c46:	0f b6 c0             	movzx  eax,al
c0011c49:	c1 e0 10             	shl    eax,0x10
c0011c4c:	09 c1                	or     ecx,eax
c0011c4e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011c52:	8d 50 03             	lea    edx,[eax+0x3]
c0011c55:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011c59:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0011c5d:	0f b6 c0             	movzx  eax,al
c0011c60:	c1 e0 18             	shl    eax,0x18
c0011c63:	09 c1                	or     ecx,eax
c0011c65:	89 ca                	mov    edx,ecx
c0011c67:	a0 80 6d 02 c0       	mov    al,ds:0xc0026d80
c0011c6c:	0f b6 c0             	movzx  eax,al
c0011c6f:	89 14 85 40 6e 02 c0 	mov    DWORD PTR [eax*4-0x3ffd91c0],edx
c0011c76:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0011c7b:	a0 80 6d 02 c0       	mov    al,ds:0xc0026d80
c0011c80:	40                   	inc    eax
c0011c81:	a2 80 6d 02 c0       	mov    ds:0xc0026d80,al
c0011c86:	e9 a5 01 00 00       	jmp    c0011e30 <scanMADT()+0x4b8>
c0011c8b:	90                   	nop
c0011c8c:	80 7c 24 23 02       	cmp    BYTE PTR [esp+0x23],0x2
c0011c91:	0f 85 e9 00 00 00    	jne    c0011d80 <scanMADT()+0x408>
c0011c97:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011c9b:	8d 50 01             	lea    edx,[eax+0x1]
c0011c9e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0011ca2:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0011ca6:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0011caa:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c0011cae:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011cb2:	8d 50 01             	lea    edx,[eax+0x1]
c0011cb5:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0011cb9:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0011cbd:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0011cc1:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c0011cc5:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0011cc9:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011ccd:	01 d0                	add    eax,edx
c0011ccf:	83 c0 2c             	add    eax,0x2c
c0011cd2:	8a 00                	mov    al,BYTE PTR [eax]
c0011cd4:	0f b6 d0             	movzx  edx,al
c0011cd7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011cdb:	8d 48 01             	lea    ecx,[eax+0x1]
c0011cde:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011ce2:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0011ce6:	0f b6 c0             	movzx  eax,al
c0011ce9:	c1 e0 08             	shl    eax,0x8
c0011cec:	89 d1                	mov    ecx,edx
c0011cee:	09 c1                	or     ecx,eax
c0011cf0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011cf4:	8d 50 02             	lea    edx,[eax+0x2]
c0011cf7:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011cfb:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0011cff:	0f b6 c0             	movzx  eax,al
c0011d02:	c1 e0 10             	shl    eax,0x10
c0011d05:	09 c1                	or     ecx,eax
c0011d07:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011d0b:	8d 50 03             	lea    edx,[eax+0x3]
c0011d0e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011d12:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0011d16:	0f b6 c0             	movzx  eax,al
c0011d19:	c1 e0 18             	shl    eax,0x18
c0011d1c:	09 c8                	or     eax,ecx
c0011d1e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011d22:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0011d27:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0011d2b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011d2f:	01 d0                	add    eax,edx
c0011d31:	83 c0 2c             	add    eax,0x2c
c0011d34:	8a 00                	mov    al,BYTE PTR [eax]
c0011d36:	0f b6 c0             	movzx  eax,al
c0011d39:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0011d3d:	8d 4a 01             	lea    ecx,[edx+0x1]
c0011d40:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0011d44:	8a 54 0a 2c          	mov    dl,BYTE PTR [edx+ecx*1+0x2c]
c0011d48:	0f b6 d2             	movzx  edx,dl
c0011d4b:	c1 e2 08             	shl    edx,0x8
c0011d4e:	09 d0                	or     eax,edx
c0011d50:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c0011d55:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c0011d5a:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c0011d5f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0011d63:	88 90 60 5b 02 c0    	mov    BYTE PTR [eax-0x3ffda4a0],dl
c0011d69:	0f b6 54 24 20       	movzx  edx,BYTE PTR [esp+0x20]
c0011d6e:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c0011d73:	66 89 84 12 60 6d 02 c0 	mov    WORD PTR [edx+edx*1-0x3ffd92a0],ax
c0011d7b:	e9 b0 00 00 00       	jmp    c0011e30 <scanMADT()+0x4b8>
c0011d80:	80 7c 24 23 04       	cmp    BYTE PTR [esp+0x23],0x4
c0011d85:	0f 85 99 00 00 00    	jne    c0011e24 <scanMADT()+0x4ac>
c0011d8b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011d8f:	8d 50 01             	lea    edx,[eax+0x1]
c0011d92:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0011d96:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0011d9a:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0011d9e:	0f b6 c0             	movzx  eax,al
c0011da1:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0011da5:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0011da9:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011dad:	01 d0                	add    eax,edx
c0011daf:	83 c0 2c             	add    eax,0x2c
c0011db2:	8a 00                	mov    al,BYTE PTR [eax]
c0011db4:	0f b6 d0             	movzx  edx,al
c0011db7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011dbb:	8d 48 01             	lea    ecx,[eax+0x1]
c0011dbe:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011dc2:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0011dc6:	0f b6 c0             	movzx  eax,al
c0011dc9:	c1 e0 08             	shl    eax,0x8
c0011dcc:	09 d0                	or     eax,edx
c0011dce:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0011dd2:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c0011dd7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011ddb:	8d 50 01             	lea    edx,[eax+0x1]
c0011dde:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0011de2:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0011de6:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0011dea:	0f b6 c0             	movzx  eax,al
c0011ded:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011df1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011df5:	c1 e0 08             	shl    eax,0x8
c0011df8:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c0011dfc:	89 c1                	mov    ecx,eax
c0011dfe:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011e02:	c1 e0 18             	shl    eax,0x18
c0011e05:	89 c3                	mov    ebx,eax
c0011e07:	a1 d0 6c 02 c0       	mov    eax,ds:0xc0026cd0
c0011e0c:	8d 50 01             	lea    edx,[eax+0x1]
c0011e0f:	89 15 d0 6c 02 c0    	mov    DWORD PTR ds:0xc0026cd0,edx
c0011e15:	09 d9                	or     ecx,ebx
c0011e17:	89 ca                	mov    edx,ecx
c0011e19:	89 14 85 e0 6c 02 c0 	mov    DWORD PTR [eax*4-0x3ffd9320],edx
c0011e20:	eb 0e                	jmp    c0011e30 <scanMADT()+0x4b8>
c0011e22:	66 90                	xchg   ax,ax
c0011e24:	80 7c 24 23 05       	cmp    BYTE PTR [esp+0x23],0x5
c0011e29:	75 05                	jne    c0011e30 <scanMADT()+0x4b8>
c0011e2b:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c0011e30:	0f b6 54 24 22       	movzx  edx,BYTE PTR [esp+0x22]
c0011e35:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0011e39:	01 d0                	add    eax,edx
c0011e3b:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0011e3f:	e9 68 fc ff ff       	jmp    c0011aac <scanMADT()+0x134>
c0011e44:	90                   	nop
c0011e45:	eb 05                	jmp    c0011e4c <scanMADT()+0x4d4>
c0011e47:	90                   	nop
c0011e48:	90                   	nop
c0011e49:	8d 76 00             	lea    esi,[esi+0x0]
c0011e4c:	83 c4 38             	add    esp,0x38
c0011e4f:	5b                   	pop    ebx
c0011e50:	c3                   	ret    
c0011e51:	90                   	nop
c0011e52:	66 90                	xchg   ax,ax

c0011e54 <ACPI::ACPI()>:
c0011e54:	83 ec 0c             	sub    esp,0xc
c0011e57:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011e5b:	83 ec 08             	sub    esp,0x8
c0011e5e:	68 63 3d 02 c0       	push   0xc0023d63
c0011e63:	50                   	push   eax
c0011e64:	e8 a1 c2 ff ff       	call   c000e10a <Device::Device(char const*)>
c0011e69:	83 c4 10             	add    esp,0x10
c0011e6c:	ba ec 3e 02 c0       	mov    edx,0xc0023eec
c0011e71:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011e75:	89 10                	mov    DWORD PTR [eax],edx
c0011e77:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011e7b:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c0011e82:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011e86:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c0011e90:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011e94:	c7 80 60 12 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1260],0x0
c0011e9e:	83 ec 0c             	sub    esp,0xc
c0011ea1:	68 68 3d 02 c0       	push   0xc0023d68
c0011ea6:	e8 72 7b ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0011eab:	83 c4 10             	add    esp,0x10
c0011eae:	e8 c5 fa ff ff       	call   c0011978 <scanMADT()>
c0011eb3:	90                   	nop
c0011eb4:	83 c4 0c             	add    esp,0xc
c0011eb7:	c3                   	ret    

c0011eb8 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c0011eb8:	83 ec 2c             	sub    esp,0x2c
c0011ebb:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0011ebf:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011ec3:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0011ec7:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c0011ecb:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0011ed0:	88 d0                	mov    al,dl
c0011ed2:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0011ed6:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0011edb:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0011ee3:	90                   	nop
c0011ee4:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011ee8:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0011eee:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0011ef2:	0f 8d 9c 00 00 00    	jge    c0011f94 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xdc>
c0011ef8:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011efc:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0011f00:	83 c2 2a             	add    edx,0x2a
c0011f03:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c0011f07:	66 39 44 24 08       	cmp    WORD PTR [esp+0x8],ax
c0011f0c:	75 7a                	jne    c0011f88 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd0>
c0011f0e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011f12:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0011f16:	83 c2 2a             	add    edx,0x2a
c0011f19:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c0011f1d:	38 44 24 04          	cmp    BYTE PTR [esp+0x4],al
c0011f21:	75 65                	jne    c0011f88 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd0>
c0011f23:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0011f28:	74 3a                	je     c0011f64 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xac>
c0011f2a:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011f2e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0011f32:	83 c2 2a             	add    edx,0x2a
c0011f35:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c0011f39:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011f3d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011f40:	39 c2                	cmp    edx,eax
c0011f42:	74 10                	je     c0011f54 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x9c>
c0011f44:	83 ec 0c             	sub    esp,0xc
c0011f47:	68 04 3c 02 c0       	push   0xc0023c04
c0011f4c:	e8 30 24 00 00       	call   c0014381 <Krnl::panic(char const*)>
c0011f51:	83 c4 10             	add    esp,0x10
c0011f54:	83 ec 0c             	sub    esp,0xc
c0011f57:	68 76 3d 02 c0       	push   0xc0023d76
c0011f5c:	e8 20 24 00 00       	call   c0014381 <Krnl::panic(char const*)>
c0011f61:	83 c4 10             	add    esp,0x10
c0011f64:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0011f68:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011f6c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0011f70:	83 c2 2a             	add    edx,0x2a
c0011f73:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c0011f77:	8b 02                	mov    eax,DWORD PTR [edx]
c0011f79:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c0011f7c:	89 01                	mov    DWORD PTR [ecx],eax
c0011f7e:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0011f81:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c0011f86:	66 90                	xchg   ax,ax
c0011f88:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0011f8c:	e9 53 ff ff ff       	jmp    c0011ee4 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2c>
c0011f91:	8d 76 00             	lea    esi,[esi+0x0]
c0011f94:	90                   	nop
c0011f95:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011f99:	83 c4 2c             	add    esp,0x2c
c0011f9c:	c2 04 00             	ret    0x4
c0011f9f:	90                   	nop

c0011fa0 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c0011fa0:	83 ec 1c             	sub    esp,0x1c
c0011fa3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011fa7:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0011fab:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0011faf:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0011fb4:	88 c8                	mov    al,cl
c0011fb6:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0011fba:	88 d0                	mov    al,dl
c0011fbc:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0011fc0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011fc4:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c0011fca:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011fce:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c0011fd1:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c0011fd5:	88 54 c8 0f          	mov    BYTE PTR [eax+ecx*8+0xf],dl
c0011fd9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011fdd:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0011fe3:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0011fe7:	8d 48 2a             	lea    ecx,[eax+0x2a]
c0011fea:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011fee:	66 89 44 ca 0c       	mov    WORD PTR [edx+ecx*8+0xc],ax
c0011ff3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011ff7:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c0011ffd:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c0012001:	8d 48 01             	lea    ecx,[eax+0x1]
c0012004:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012008:	83 c2 2a             	add    edx,0x2a
c001200b:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c001200f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012013:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c0012019:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001201d:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c0012020:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0012024:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c0012028:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001202c:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0012032:	8d 50 01             	lea    edx,[eax+0x1]
c0012035:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012039:	89 90 5c 11 00 00    	mov    DWORD PTR [eax+0x115c],edx
c001203f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012043:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0012049:	3d 00 02 00 00       	cmp    eax,0x200
c001204e:	75 10                	jne    c0012060 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xc0>
c0012050:	83 ec 0c             	sub    esp,0xc
c0012053:	68 85 3d 02 c0       	push   0xc0023d85
c0012058:	e8 24 23 00 00       	call   c0014381 <Krnl::panic(char const*)>
c001205d:	83 c4 10             	add    esp,0x10
c0012060:	90                   	nop
c0012061:	83 c4 1c             	add    esp,0x1c
c0012064:	c3                   	ret    
c0012065:	90                   	nop
c0012066:	66 90                	xchg   ax,ax

c0012068 <ACPI::setScreenBrightnessLevel(void*, int)>:
c0012068:	b8 00 00 00 00       	mov    eax,0x0
c001206d:	c3                   	ret    
c001206e:	66 90                	xchg   ax,ax

c0012070 <ACPI::detectPCI()>:
c0012070:	53                   	push   ebx
c0012071:	83 ec 28             	sub    esp,0x28
c0012074:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0012079:	c6 44 24 1e 00       	mov    BYTE PTR [esp+0x1e],0x0
c001207e:	a1 68 64 02 c0       	mov    eax,ds:0xc0026468
c0012083:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0012089:	83 e0 04             	and    eax,0x4
c001208c:	84 c0                	test   al,al
c001208e:	74 2c                	je     c00120bc <ACPI::detectPCI()+0x4c>
c0012090:	a1 c8 6c 02 c0       	mov    eax,ds:0xc0026cc8
c0012095:	83 ec 08             	sub    esp,0x8
c0012098:	68 a2 3d 02 c0       	push   0xc0023da2
c001209d:	50                   	push   eax
c001209e:	e8 5d f8 ff ff       	call   c0011900 <findDataTable(unsigned char*, char*)>
c00120a3:	83 c4 10             	add    esp,0x10
c00120a6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00120aa:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c00120af:	74 0b                	je     c00120bc <ACPI::detectPCI()+0x4c>
c00120b1:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c00120b6:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c00120bb:	90                   	nop
c00120bc:	c7 44 24 14 5f 0c 00 00 	mov    DWORD PTR [esp+0x14],0xc5f
c00120c4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00120c8:	8a 00                	mov    al,BYTE PTR [eax]
c00120ca:	3c 01                	cmp    al,0x1
c00120cc:	75 0e                	jne    c00120dc <ACPI::detectPCI()+0x6c>
c00120ce:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c00120d3:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c00120d8:	eb 2a                	jmp    c0012104 <ACPI::detectPCI()+0x94>
c00120da:	66 90                	xchg   ax,ax
c00120dc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00120e0:	8a 00                	mov    al,BYTE PTR [eax]
c00120e2:	3c 02                	cmp    al,0x2
c00120e4:	75 1e                	jne    c0012104 <ACPI::detectPCI()+0x94>
c00120e6:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c00120eb:	80 7c 24 1e 00       	cmp    BYTE PTR [esp+0x1e],0x0
c00120f0:	74 12                	je     c0012104 <ACPI::detectPCI()+0x94>
c00120f2:	83 ec 0c             	sub    esp,0xc
c00120f5:	68 34 3c 02 c0       	push   0xc0023c34
c00120fa:	e8 82 22 00 00       	call   c0014381 <Krnl::panic(char const*)>
c00120ff:	83 c4 10             	add    esp,0x10
c0012102:	66 90                	xchg   ax,ax
c0012104:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0012108:	83 f0 01             	xor    eax,0x1
c001210b:	84 c0                	test   al,al
c001210d:	74 41                	je     c0012150 <ACPI::detectPCI()+0xe0>
c001210f:	e8 3c e0 fe ff       	call   c0000150 <manualPCIProbe>
c0012114:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0012118:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c001211d:	75 0d                	jne    c001212c <ACPI::detectPCI()+0xbc>
c001211f:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c0012124:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c0012129:	eb 25                	jmp    c0012150 <ACPI::detectPCI()+0xe0>
c001212b:	90                   	nop
c001212c:	83 7c 24 10 02       	cmp    DWORD PTR [esp+0x10],0x2
c0012131:	75 1d                	jne    c0012150 <ACPI::detectPCI()+0xe0>
c0012133:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c0012138:	80 7c 24 1e 00       	cmp    BYTE PTR [esp+0x1e],0x0
c001213d:	74 11                	je     c0012150 <ACPI::detectPCI()+0xe0>
c001213f:	83 ec 0c             	sub    esp,0xc
c0012142:	68 34 3c 02 c0       	push   0xc0023c34
c0012147:	e8 35 22 00 00       	call   c0014381 <Krnl::panic(char const*)>
c001214c:	83 c4 10             	add    esp,0x10
c001214f:	90                   	nop
c0012150:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0012155:	0f 84 85 00 00 00    	je     c00121e0 <ACPI::detectPCI()+0x170>
c001215b:	83 ec 0c             	sub    esp,0xc
c001215e:	68 a7 3d 02 c0       	push   0xc0023da7
c0012163:	e8 b5 78 ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0012168:	83 c4 10             	add    esp,0x10
c001216b:	c7 44 24 04 5c 01 00 00 	mov    DWORD PTR [esp+0x4],0x15c
c0012173:	83 ec 0c             	sub    esp,0xc
c0012176:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001217a:	e8 44 78 ff ff       	call   c00099c3 <malloc>
c001217f:	83 c4 10             	add    esp,0x10
c0012182:	89 c3                	mov    ebx,eax
c0012184:	83 ec 0c             	sub    esp,0xc
c0012187:	53                   	push   ebx
c0012188:	e8 dd a9 00 00       	call   c001cb6a <PCI::PCI()>
c001218d:	83 c4 10             	add    esp,0x10
c0012190:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0012194:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012198:	83 ec 08             	sub    esp,0x8
c001219b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001219f:	50                   	push   eax
c00121a0:	e8 61 bd ff ff       	call   c000df06 <Device::addChild(Device*)>
c00121a5:	83 c4 10             	add    esp,0x10
c00121a8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00121ac:	8b 00                	mov    eax,DWORD PTR [eax]
c00121ae:	83 c0 08             	add    eax,0x8
c00121b1:	8b 00                	mov    eax,DWORD PTR [eax]
c00121b3:	80 7c 24 1e 00       	cmp    BYTE PTR [esp+0x1e],0x0
c00121b8:	74 0a                	je     c00121c4 <ACPI::detectPCI()+0x154>
c00121ba:	ba 01 00 00 00       	mov    edx,0x1
c00121bf:	eb 0b                	jmp    c00121cc <ACPI::detectPCI()+0x15c>
c00121c1:	8d 76 00             	lea    esi,[esi+0x0]
c00121c4:	ba 02 00 00 00       	mov    edx,0x2
c00121c9:	8d 76 00             	lea    esi,[esi+0x0]
c00121cc:	6a 00                	push   0x0
c00121ce:	6a 00                	push   0x0
c00121d0:	52                   	push   edx
c00121d1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00121d5:	ff d0                	call   eax
c00121d7:	83 c4 10             	add    esp,0x10
c00121da:	e9 a1 00 00 00       	jmp    c0012280 <ACPI::detectPCI()+0x210>
c00121df:	90                   	nop
c00121e0:	83 ec 0c             	sub    esp,0xc
c00121e3:	68 bf 3d 02 c0       	push   0xc0023dbf
c00121e8:	e8 d2 a8 ff ff       	call   c000cabf <Dbg::kprintf(char const*, ...)>
c00121ed:	83 c4 10             	add    esp,0x10
c00121f0:	83 ec 0c             	sub    esp,0xc
c00121f3:	68 ca 3d 02 c0       	push   0xc0023dca
c00121f8:	e8 20 78 ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c00121fd:	83 c4 10             	add    esp,0x10
c0012200:	c7 04 24 70 02 00 00 	mov    DWORD PTR [esp],0x270
c0012207:	83 ec 0c             	sub    esp,0xc
c001220a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001220e:	e8 b0 77 ff ff       	call   c00099c3 <malloc>
c0012213:	83 c4 10             	add    esp,0x10
c0012216:	89 c3                	mov    ebx,eax
c0012218:	83 ec 0c             	sub    esp,0xc
c001221b:	53                   	push   ebx
c001221c:	e8 b3 b4 00 00       	call   c001d6d4 <IDE::IDE()>
c0012221:	83 c4 10             	add    esp,0x10
c0012224:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0012228:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001222c:	83 ec 08             	sub    esp,0x8
c001222f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0012233:	50                   	push   eax
c0012234:	e8 cd bc ff ff       	call   c000df06 <Device::addChild(Device*)>
c0012239:	83 c4 10             	add    esp,0x10
c001223c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0012240:	c7 80 14 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x114],0x1
c001224a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001224e:	66 c7 80 18 01 00 00 f0 01 	mov    WORD PTR [eax+0x118],0x1f0
c0012257:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001225b:	66 c7 80 1a 01 00 00 70 01 	mov    WORD PTR [eax+0x11a],0x170
c0012264:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0012268:	8b 00                	mov    eax,DWORD PTR [eax]
c001226a:	83 c0 08             	add    eax,0x8
c001226d:	8b 00                	mov    eax,DWORD PTR [eax]
c001226f:	6a 00                	push   0x0
c0012271:	6a 00                	push   0x0
c0012273:	6a 00                	push   0x0
c0012275:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012279:	ff d0                	call   eax
c001227b:	83 c4 10             	add    esp,0x10
c001227e:	66 90                	xchg   ax,ax
c0012280:	90                   	nop
c0012281:	83 c4 28             	add    esp,0x28
c0012284:	5b                   	pop    ebx
c0012285:	c3                   	ret    
c0012286:	66 90                	xchg   ax,ax

c0012288 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c0012288:	83 ec 1c             	sub    esp,0x1c
c001228b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001228f:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c0012292:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0012296:	a1 68 64 02 c0       	mov    eax,ds:0xc0026468
c001229b:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c00122a0:	83 ec 08             	sub    esp,0x8
c00122a3:	52                   	push   edx
c00122a4:	50                   	push   eax
c00122a5:	e8 ea 6c ff ff       	call   c0008f94 <Computer::readCMOS(unsigned char)>
c00122aa:	83 c4 10             	add    esp,0x10
c00122ad:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c00122b1:	a1 68 64 02 c0       	mov    eax,ds:0xc0026468
c00122b6:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c00122bb:	83 ec 04             	sub    esp,0x4
c00122be:	6a 01                	push   0x1
c00122c0:	52                   	push   edx
c00122c1:	50                   	push   eax
c00122c2:	e8 a9 6e ff ff       	call   c0009170 <Computer::writeCMOS(unsigned char, unsigned char)>
c00122c7:	83 c4 10             	add    esp,0x10
c00122ca:	90                   	nop
c00122cb:	83 c4 1c             	add    esp,0x1c
c00122ce:	c3                   	ret    
c00122cf:	90                   	nop

c00122d0 <ACPI::sleep()>:
c00122d0:	83 ec 0c             	sub    esp,0xc
c00122d3:	a1 a0 6a 02 c0       	mov    eax,ds:0xc0026aa0
c00122d8:	85 c0                	test   eax,eax
c00122da:	74 08                	je     c00122e4 <ACPI::sleep()+0x14>
c00122dc:	a1 a0 6a 02 c0       	mov    eax,ds:0xc0026aa0
c00122e1:	ff d0                	call   eax
c00122e3:	90                   	nop
c00122e4:	90                   	nop
c00122e5:	83 c4 0c             	add    esp,0xc
c00122e8:	c3                   	ret    
c00122e9:	90                   	nop
c00122ea:	66 90                	xchg   ax,ax

c00122ec <ACPI::open(int, int, void*)>:
c00122ec:	57                   	push   edi
c00122ed:	56                   	push   esi
c00122ee:	53                   	push   ebx
c00122ef:	81 ec 70 01 00 00    	sub    esp,0x170
c00122f5:	83 ec 0c             	sub    esp,0xc
c00122f8:	ff b4 24 8c 01 00 00 	push   DWORD PTR [esp+0x18c]
c00122ff:	e8 6c fd ff ff       	call   c0012070 <ACPI::detectPCI()>
c0012304:	83 c4 10             	add    esp,0x10
c0012307:	83 ec 0c             	sub    esp,0xc
c001230a:	68 5c 3c 02 c0       	push   0xc0023c5c
c001230f:	e8 09 77 ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0012314:	83 c4 10             	add    esp,0x10
c0012317:	83 ec 0c             	sub    esp,0xc
c001231a:	68 df 3d 02 c0       	push   0xc0023ddf
c001231f:	e8 d3 47 00 00       	call   c0016af7 <Thr::loadKernelSymbolTable(char const*)>
c0012324:	83 c4 10             	add    esp,0x10
c0012327:	c6 84 24 6f 01 00 00 00 	mov    BYTE PTR [esp+0x16f],0x0
c001232f:	c7 84 24 44 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x144],0x114
c001233a:	83 ec 0c             	sub    esp,0xc
c001233d:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c0012344:	e8 7a 76 ff ff       	call   c00099c3 <malloc>
c0012349:	83 c4 10             	add    esp,0x10
c001234c:	89 c3                	mov    ebx,eax
c001234e:	a1 50 79 02 c0       	mov    eax,ds:0xc0027950
c0012353:	83 ec 04             	sub    esp,0x4
c0012356:	50                   	push   eax
c0012357:	68 fd 3d 02 c0       	push   0xc0023dfd
c001235c:	53                   	push   ebx
c001235d:	e8 c8 ac ff ff       	call   c000d02a <File::File(char const*, Process*)>
c0012362:	83 c4 10             	add    esp,0x10
c0012365:	89 9c 24 68 01 00 00 	mov    DWORD PTR [esp+0x168],ebx
c001236c:	83 ec 08             	sub    esp,0x8
c001236f:	6a 01                	push   0x1
c0012371:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c0012378:	e8 11 ad ff ff       	call   c000d08e <File::open(FileOpenMode)>
c001237d:	83 c4 10             	add    esp,0x10
c0012380:	89 84 24 64 01 00 00 	mov    DWORD PTR [esp+0x164],eax
c0012387:	83 bc 24 64 01 00 00 00 	cmp    DWORD PTR [esp+0x164],0x0
c001238f:	75 17                	jne    c00123a8 <ACPI::open(int, int, void*)+0xbc>
c0012391:	83 ec 0c             	sub    esp,0xc
c0012394:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c001239b:	e8 4c ad ff ff       	call   c000d0ec <File::close()>
c00123a0:	83 c4 10             	add    esp,0x10
c00123a3:	eb 0b                	jmp    c00123b0 <ACPI::open(int, int, void*)+0xc4>
c00123a5:	8d 76 00             	lea    esi,[esi+0x0]
c00123a8:	c6 84 24 6f 01 00 00 01 	mov    BYTE PTR [esp+0x16f],0x1
c00123b0:	83 bc 24 68 01 00 00 00 	cmp    DWORD PTR [esp+0x168],0x0
c00123b8:	74 1e                	je     c00123d8 <ACPI::open(int, int, void*)+0xec>
c00123ba:	8b 84 24 68 01 00 00 	mov    eax,DWORD PTR [esp+0x168]
c00123c1:	8b 00                	mov    eax,DWORD PTR [eax]
c00123c3:	83 c0 08             	add    eax,0x8
c00123c6:	8b 00                	mov    eax,DWORD PTR [eax]
c00123c8:	83 ec 0c             	sub    esp,0xc
c00123cb:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c00123d2:	ff d0                	call   eax
c00123d4:	83 c4 10             	add    esp,0x10
c00123d7:	90                   	nop
c00123d8:	8a 84 24 6f 01 00 00 	mov    al,BYTE PTR [esp+0x16f]
c00123df:	83 f0 01             	xor    eax,0x1
c00123e2:	84 c0                	test   al,al
c00123e4:	74 42                	je     c0012428 <ACPI::open(int, int, void*)+0x13c>
c00123e6:	83 ec 0c             	sub    esp,0xc
c00123e9:	68 1b 3e 02 c0       	push   0xc0023e1b
c00123ee:	e8 2a 76 ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c00123f3:	83 c4 10             	add    esp,0x10
c00123f6:	83 ec 04             	sub    esp,0x4
c00123f9:	6a 0c                	push   0xc
c00123fb:	68 36 3e 02 c0       	push   0xc0023e36
c0012400:	68 47 3e 02 c0       	push   0xc0023e47
c0012405:	e8 57 2d 00 00       	call   c0015161 <Reg::readIntWithDefault(char*, char*, int)>
c001240a:	83 c4 10             	add    esp,0x10
c001240d:	89 84 24 60 01 00 00 	mov    DWORD PTR [esp+0x160],eax
c0012414:	83 ec 0c             	sub    esp,0xc
c0012417:	ff b4 24 6c 01 00 00 	push   DWORD PTR [esp+0x16c]
c001241e:	e8 d4 94 ff ff       	call   c000b8f7 <Virt::setupPageSwapping(int)>
c0012423:	83 c4 10             	add    esp,0x10
c0012426:	66 90                	xchg   ax,ax
c0012428:	83 ec 0c             	sub    esp,0xc
c001242b:	68 66 25 02 c0       	push   0xc0022566
c0012430:	e8 e8 75 ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0012435:	83 c4 10             	add    esp,0x10
c0012438:	8b 1d 68 64 02 c0    	mov    ebx,DWORD PTR ds:0xc0026468
c001243e:	83 ec 08             	sub    esp,0x8
c0012441:	6a 01                	push   0x1
c0012443:	68 4e 3e 02 c0       	push   0xc0023e4e
c0012448:	e8 21 51 00 00       	call   c001756e <Thr::loadDLL(char const*, bool)>
c001244d:	83 c4 10             	add    esp,0x10
c0012450:	83 ec 08             	sub    esp,0x8
c0012453:	53                   	push   ebx
c0012454:	50                   	push   eax
c0012455:	e8 45 53 00 00       	call   c001779f <Thr::executeDLL(unsigned long, void*)>
c001245a:	83 c4 10             	add    esp,0x10
c001245d:	8d 84 24 30 01 00 00 	lea    eax,[esp+0x130]
c0012464:	83 ec 08             	sub    esp,0x8
c0012467:	6a 12                	push   0x12
c0012469:	50                   	push   eax
c001246a:	e8 1b be ff ff       	call   c000e28a <getDevicesOfType(DeviceType)>
c001246f:	83 c4 0c             	add    esp,0xc
c0012472:	66 90                	xchg   ax,ax
c0012474:	83 ec 0c             	sub    esp,0xc
c0012477:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c001247e:	50                   	push   eax
c001247f:	e8 dc f2 00 00       	call   c0021760 <LinkedList<Device>::isEmpty()>
c0012484:	83 c4 10             	add    esp,0x10
c0012487:	83 f0 01             	xor    eax,0x1
c001248a:	84 c0                	test   al,al
c001248c:	0f 84 46 01 00 00    	je     c00125d8 <ACPI::open(int, int, void*)+0x2ec>
c0012492:	83 ec 0c             	sub    esp,0xc
c0012495:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c001249c:	50                   	push   eax
c001249d:	e8 da f2 00 00       	call   c002177c <LinkedList<Device>::getFirstElement()>
c00124a2:	83 c4 10             	add    esp,0x10
c00124a5:	89 84 24 5c 01 00 00 	mov    DWORD PTR [esp+0x15c],eax
c00124ac:	83 ec 0c             	sub    esp,0xc
c00124af:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c00124b6:	50                   	push   eax
c00124b7:	e8 c8 f2 00 00       	call   c0021784 <LinkedList<Device>::removeFirst()>
c00124bc:	83 c4 10             	add    esp,0x10
c00124bf:	8b 84 24 5c 01 00 00 	mov    eax,DWORD PTR [esp+0x15c]
c00124c6:	89 84 24 58 01 00 00 	mov    DWORD PTR [esp+0x158],eax
c00124cd:	8b 94 24 58 01 00 00 	mov    edx,DWORD PTR [esp+0x158]
c00124d4:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00124d8:	8d 9a 18 01 00 00    	lea    ebx,[edx+0x118]
c00124de:	ba 09 00 00 00       	mov    edx,0x9
c00124e3:	fc                   	cld    
c00124e4:	89 c7                	mov    edi,eax
c00124e6:	89 de                	mov    esi,ebx
c00124e8:	89 d1                	mov    ecx,edx
c00124ea:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00124ec:	83 ec 08             	sub    esp,0x8
c00124ef:	8d 44 24 38          	lea    eax,[esp+0x38]
c00124f3:	50                   	push   eax
c00124f4:	83 ec 24             	sub    esp,0x24
c00124f7:	89 e0                	mov    eax,esp
c00124f9:	89 c3                	mov    ebx,eax
c00124fb:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c00124ff:	ba 09 00 00 00       	mov    edx,0x9
c0012504:	89 df                	mov    edi,ebx
c0012506:	89 c6                	mov    esi,eax
c0012508:	89 d1                	mov    ecx,edx
c001250a:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001250c:	e8 37 ab 00 00       	call   c001d048 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>
c0012511:	83 c4 30             	add    esp,0x30
c0012514:	89 84 24 54 01 00 00 	mov    DWORD PTR [esp+0x154],eax
c001251b:	83 bc 24 54 01 00 00 00 	cmp    DWORD PTR [esp+0x154],0x0
c0012523:	0f 84 4b ff ff ff    	je     c0012474 <ACPI::open(int, int, void*)+0x188>
c0012529:	c7 84 24 40 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x140],0x114
c0012534:	83 ec 0c             	sub    esp,0xc
c0012537:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001253e:	e8 80 74 ff ff       	call   c00099c3 <malloc>
c0012543:	83 c4 10             	add    esp,0x10
c0012546:	89 c3                	mov    ebx,eax
c0012548:	a1 50 79 02 c0       	mov    eax,ds:0xc0027950
c001254d:	83 ec 04             	sub    esp,0x4
c0012550:	50                   	push   eax
c0012551:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c0012558:	53                   	push   ebx
c0012559:	e8 cc aa ff ff       	call   c000d02a <File::File(char const*, Process*)>
c001255e:	83 c4 10             	add    esp,0x10
c0012561:	89 9c 24 50 01 00 00 	mov    DWORD PTR [esp+0x150],ebx
c0012568:	83 ec 0c             	sub    esp,0xc
c001256b:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c0012572:	e8 85 ad ff ff       	call   c000d2fc <File::exists()>
c0012577:	83 c4 10             	add    esp,0x10
c001257a:	84 c0                	test   al,al
c001257c:	74 2a                	je     c00125a8 <ACPI::open(int, int, void*)+0x2bc>
c001257e:	83 ec 08             	sub    esp,0x8
c0012581:	6a 01                	push   0x1
c0012583:	ff b4 24 60 01 00 00 	push   DWORD PTR [esp+0x160]
c001258a:	e8 df 4f 00 00       	call   c001756e <Thr::loadDLL(char const*, bool)>
c001258f:	83 c4 10             	add    esp,0x10
c0012592:	83 ec 08             	sub    esp,0x8
c0012595:	ff b4 24 60 01 00 00 	push   DWORD PTR [esp+0x160]
c001259c:	50                   	push   eax
c001259d:	e8 fd 51 00 00       	call   c001779f <Thr::executeDLL(unsigned long, void*)>
c00125a2:	83 c4 10             	add    esp,0x10
c00125a5:	8d 76 00             	lea    esi,[esi+0x0]
c00125a8:	83 bc 24 50 01 00 00 00 	cmp    DWORD PTR [esp+0x150],0x0
c00125b0:	0f 84 be fe ff ff    	je     c0012474 <ACPI::open(int, int, void*)+0x188>
c00125b6:	8b 84 24 50 01 00 00 	mov    eax,DWORD PTR [esp+0x150]
c00125bd:	8b 00                	mov    eax,DWORD PTR [eax]
c00125bf:	83 c0 08             	add    eax,0x8
c00125c2:	8b 00                	mov    eax,DWORD PTR [eax]
c00125c4:	83 ec 0c             	sub    esp,0xc
c00125c7:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c00125ce:	ff d0                	call   eax
c00125d0:	83 c4 10             	add    esp,0x10
c00125d3:	e9 9c fe ff ff       	jmp    c0012474 <ACPI::open(int, int, void*)+0x188>
c00125d8:	83 ec 0c             	sub    esp,0xc
c00125db:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c00125e2:	50                   	push   eax
c00125e3:	e8 74 f1 00 00       	call   c002175c <LinkedList<Device>::~LinkedList()>
c00125e8:	83 c4 10             	add    esp,0x10
c00125eb:	8b 1d 68 64 02 c0    	mov    ebx,DWORD PTR ds:0xc0026468
c00125f1:	83 ec 08             	sub    esp,0x8
c00125f4:	6a 01                	push   0x1
c00125f6:	68 69 3e 02 c0       	push   0xc0023e69
c00125fb:	e8 6e 4f 00 00       	call   c001756e <Thr::loadDLL(char const*, bool)>
c0012600:	83 c4 10             	add    esp,0x10
c0012603:	83 ec 08             	sub    esp,0x8
c0012606:	53                   	push   ebx
c0012607:	50                   	push   eax
c0012608:	e8 92 51 00 00       	call   c001779f <Thr::executeDLL(unsigned long, void*)>
c001260d:	83 c4 10             	add    esp,0x10
c0012610:	8b 1d 68 64 02 c0    	mov    ebx,DWORD PTR ds:0xc0026468
c0012616:	83 ec 08             	sub    esp,0x8
c0012619:	6a 01                	push   0x1
c001261b:	68 86 3e 02 c0       	push   0xc0023e86
c0012620:	e8 49 4f 00 00       	call   c001756e <Thr::loadDLL(char const*, bool)>
c0012625:	83 c4 10             	add    esp,0x10
c0012628:	83 ec 08             	sub    esp,0x8
c001262b:	53                   	push   ebx
c001262c:	50                   	push   eax
c001262d:	e8 6d 51 00 00       	call   c001779f <Thr::executeDLL(unsigned long, void*)>
c0012632:	83 c4 10             	add    esp,0x10
c0012635:	a1 68 64 02 c0       	mov    eax,ds:0xc0026468
c001263a:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0012640:	83 e0 04             	and    eax,0x4
c0012643:	84 c0                	test   al,al
c0012645:	0f 84 15 01 00 00    	je     c0012760 <ACPI::open(int, int, void*)+0x474>
c001264b:	83 ec 0c             	sub    esp,0xc
c001264e:	68 a3 3e 02 c0       	push   0xc0023ea3
c0012653:	e8 c5 73 ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0012658:	83 c4 10             	add    esp,0x10
c001265b:	c7 84 24 3c 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x13c],0x114
c0012666:	83 ec 0c             	sub    esp,0xc
c0012669:	ff b4 24 48 01 00 00 	push   DWORD PTR [esp+0x148]
c0012670:	e8 4e 73 ff ff       	call   c00099c3 <malloc>
c0012675:	83 c4 10             	add    esp,0x10
c0012678:	89 c3                	mov    ebx,eax
c001267a:	a1 50 79 02 c0       	mov    eax,ds:0xc0027950
c001267f:	83 ec 04             	sub    esp,0x4
c0012682:	50                   	push   eax
c0012683:	68 c0 3e 02 c0       	push   0xc0023ec0
c0012688:	53                   	push   ebx
c0012689:	e8 9c a9 ff ff       	call   c000d02a <File::File(char const*, Process*)>
c001268e:	83 c4 10             	add    esp,0x10
c0012691:	89 9c 24 4c 01 00 00 	mov    DWORD PTR [esp+0x14c],ebx
c0012698:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c00126a0:	74 1a                	je     c00126bc <ACPI::open(int, int, void*)+0x3d0>
c00126a2:	83 ec 0c             	sub    esp,0xc
c00126a5:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c00126ac:	e8 4b ac ff ff       	call   c000d2fc <File::exists()>
c00126b1:	83 c4 10             	add    esp,0x10
c00126b4:	84 c0                	test   al,al
c00126b6:	74 04                	je     c00126bc <ACPI::open(int, int, void*)+0x3d0>
c00126b8:	b0 01                	mov    al,0x1
c00126ba:	eb 04                	jmp    c00126c0 <ACPI::open(int, int, void*)+0x3d4>
c00126bc:	b0 00                	mov    al,0x0
c00126be:	66 90                	xchg   ax,ax
c00126c0:	84 c0                	test   al,al
c00126c2:	74 28                	je     c00126ec <ACPI::open(int, int, void*)+0x400>
c00126c4:	83 ec 08             	sub    esp,0x8
c00126c7:	6a 01                	push   0x1
c00126c9:	68 c0 3e 02 c0       	push   0xc0023ec0
c00126ce:	e8 9b 4e 00 00       	call   c001756e <Thr::loadDLL(char const*, bool)>
c00126d3:	83 c4 10             	add    esp,0x10
c00126d6:	83 ec 08             	sub    esp,0x8
c00126d9:	ff b4 24 88 01 00 00 	push   DWORD PTR [esp+0x188]
c00126e0:	50                   	push   eax
c00126e1:	e8 b9 50 00 00       	call   c001779f <Thr::executeDLL(unsigned long, void*)>
c00126e6:	83 c4 10             	add    esp,0x10
c00126e9:	8d 76 00             	lea    esi,[esi+0x0]
c00126ec:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c00126f4:	74 2a                	je     c0012720 <ACPI::open(int, int, void*)+0x434>
c00126f6:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c00126fe:	74 20                	je     c0012720 <ACPI::open(int, int, void*)+0x434>
c0012700:	8b 84 24 4c 01 00 00 	mov    eax,DWORD PTR [esp+0x14c]
c0012707:	8b 00                	mov    eax,DWORD PTR [eax]
c0012709:	83 c0 08             	add    eax,0x8
c001270c:	8b 00                	mov    eax,DWORD PTR [eax]
c001270e:	83 ec 0c             	sub    esp,0xc
c0012711:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c0012718:	ff d0                	call   eax
c001271a:	83 c4 10             	add    esp,0x10
c001271d:	8d 76 00             	lea    esi,[esi+0x0]
c0012720:	a1 c8 6c 02 c0       	mov    eax,ds:0xc0026cc8
c0012725:	83 ec 08             	sub    esp,0x8
c0012728:	68 dd 3e 02 c0       	push   0xc0023edd
c001272d:	50                   	push   eax
c001272e:	e8 cd f1 ff ff       	call   c0011900 <findDataTable(unsigned char*, char*)>
c0012733:	83 c4 10             	add    esp,0x10
c0012736:	89 84 24 48 01 00 00 	mov    DWORD PTR [esp+0x148],eax
c001273d:	83 bc 24 48 01 00 00 00 	cmp    DWORD PTR [esp+0x148],0x0
c0012745:	74 19                	je     c0012760 <ACPI::open(int, int, void*)+0x474>
c0012747:	83 ec 08             	sub    esp,0x8
c001274a:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c0012751:	ff b4 24 8c 01 00 00 	push   DWORD PTR [esp+0x18c]
c0012758:	e8 2b fb ff ff       	call   c0012288 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c001275d:	83 c4 10             	add    esp,0x10
c0012760:	b8 00 00 00 00       	mov    eax,0x0
c0012765:	81 c4 70 01 00 00    	add    esp,0x170
c001276b:	5b                   	pop    ebx
c001276c:	5e                   	pop    esi
c001276d:	5f                   	pop    edi
c001276e:	c3                   	ret    
c001276f:	90                   	nop

c0012770 <CPU::close(int, int, void*)>:
c0012770:	31 c0                	xor    eax,eax
c0012772:	c3                   	ret    
c0012773:	90                   	nop

c0012774 <CPU::lookupAMDName(unsigned char, unsigned char)>:
c0012774:	55                   	push   ebp
c0012775:	57                   	push   edi
c0012776:	56                   	push   esi
c0012777:	53                   	push   ebx
c0012778:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001277c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0012780:	89 ce                	mov    esi,ecx
c0012782:	89 d5                	mov    ebp,edx
c0012784:	80 f9 04             	cmp    cl,0x4
c0012787:	75 28                	jne    c00127b1 <CPU::lookupAMDName(unsigned char, unsigned char)+0x3d>
c0012789:	8d 42 f9             	lea    eax,[edx-0x7]
c001278c:	3c 03                	cmp    al,0x3
c001278e:	0f 86 63 01 00 00    	jbe    c00128f7 <CPU::lookupAMDName(unsigned char, unsigned char)+0x183>
c0012794:	80 fa 03             	cmp    dl,0x3
c0012797:	0f 84 5a 01 00 00    	je     c00128f7 <CPU::lookupAMDName(unsigned char, unsigned char)+0x183>
c001279d:	8d 7a f2             	lea    edi,[edx-0xe]
c00127a0:	b8 30 5d 02 c0       	mov    eax,0xc0025d30
c00127a5:	89 fb                	mov    ebx,edi
c00127a7:	80 fb 01             	cmp    bl,0x1
c00127aa:	77 4e                	ja     c00127fa <CPU::lookupAMDName(unsigned char, unsigned char)+0x86>
c00127ac:	e9 52 01 00 00       	jmp    c0012903 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00127b1:	80 f9 05             	cmp    cl,0x5
c00127b4:	75 4d                	jne    c0012803 <CPU::lookupAMDName(unsigned char, unsigned char)+0x8f>
c00127b6:	b8 40 5d 02 c0       	mov    eax,0xc0025d40
c00127bb:	80 fa 03             	cmp    dl,0x3
c00127be:	0f 86 3f 01 00 00    	jbe    c0012903 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00127c4:	8d 7a fa             	lea    edi,[edx-0x6]
c00127c7:	b8 50 5d 02 c0       	mov    eax,0xc0025d50
c00127cc:	89 fb                	mov    ebx,edi
c00127ce:	80 fb 01             	cmp    bl,0x1
c00127d1:	0f 86 2c 01 00 00    	jbe    c0012903 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00127d7:	b8 60 5d 02 c0       	mov    eax,0xc0025d60
c00127dc:	80 fa 08             	cmp    dl,0x8
c00127df:	0f 84 1e 01 00 00    	je     c0012903 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00127e5:	89 d7                	mov    edi,edx
c00127e7:	b8 70 5d 02 c0       	mov    eax,0xc0025d70
c00127ec:	83 e7 fb             	and    edi,0xfffffffb
c00127ef:	89 fb                	mov    ebx,edi
c00127f1:	80 fb 09             	cmp    bl,0x9
c00127f4:	0f 84 09 01 00 00    	je     c0012903 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00127fa:	31 c0                	xor    eax,eax
c00127fc:	89 eb                	mov    ebx,ebp
c00127fe:	0f b6 fb             	movzx  edi,bl
c0012801:	eb 30                	jmp    c0012833 <CPU::lookupAMDName(unsigned char, unsigned char)+0xbf>
c0012803:	31 c0                	xor    eax,eax
c0012805:	80 f9 06             	cmp    cl,0x6
c0012808:	75 f2                	jne    c00127fc <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c001280a:	80 fa 0a             	cmp    dl,0xa
c001280d:	77 ed                	ja     c00127fc <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c001280f:	bf de 05 00 00       	mov    edi,0x5de
c0012814:	0f a3 d7             	bt     edi,edx
c0012817:	73 e3                	jae    c00127fc <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c0012819:	b8 80 5d 02 c0       	mov    eax,0xc0025d80
c001281e:	e9 e0 00 00 00       	jmp    c0012903 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0012823:	39 c7                	cmp    edi,eax
c0012825:	0f 84 d3 00 00 00    	je     c00128fe <CPU::lookupAMDName(unsigned char, unsigned char)+0x18a>
c001282b:	40                   	inc    eax
c001282c:	3d d0 00 00 00       	cmp    eax,0xd0
c0012831:	74 09                	je     c001283c <CPU::lookupAMDName(unsigned char, unsigned char)+0xc8>
c0012833:	89 f3                	mov    ebx,esi
c0012835:	80 fb 0f             	cmp    bl,0xf
c0012838:	75 f1                	jne    c001282b <CPU::lookupAMDName(unsigned char, unsigned char)+0xb7>
c001283a:	eb e7                	jmp    c0012823 <CPU::lookupAMDName(unsigned char, unsigned char)+0xaf>
c001283c:	80 f9 10             	cmp    cl,0x10
c001283f:	75 14                	jne    c0012855 <CPU::lookupAMDName(unsigned char, unsigned char)+0xe1>
c0012841:	8d 42 fc             	lea    eax,[edx-0x4]
c0012844:	83 e0 fb             	and    eax,0xfffffffb
c0012847:	3c 02                	cmp    al,0x2
c0012849:	76 34                	jbe    c001287f <CPU::lookupAMDName(unsigned char, unsigned char)+0x10b>
c001284b:	b8 65 40 02 c0       	mov    eax,0xc0024065
c0012850:	80 fa 02             	cmp    dl,0x2
c0012853:	eb 24                	jmp    c0012879 <CPU::lookupAMDName(unsigned char, unsigned char)+0x105>
c0012855:	80 f9 11             	cmp    cl,0x11
c0012858:	75 13                	jne    c001286d <CPU::lookupAMDName(unsigned char, unsigned char)+0xf9>
c001285a:	b8 65 40 02 c0       	mov    eax,0xc0024065
c001285f:	80 fa 03             	cmp    dl,0x3
c0012862:	0f 85 9b 00 00 00    	jne    c0012903 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0012868:	e9 91 00 00 00       	jmp    c00128fe <CPU::lookupAMDName(unsigned char, unsigned char)+0x18a>
c001286d:	80 f9 12             	cmp    cl,0x12
c0012870:	75 14                	jne    c0012886 <CPU::lookupAMDName(unsigned char, unsigned char)+0x112>
c0012872:	b8 65 40 02 c0       	mov    eax,0xc0024065
c0012877:	fe ca                	dec    dl
c0012879:	0f 85 84 00 00 00    	jne    c0012903 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001287f:	b8 a0 5d 02 c0       	mov    eax,0xc0025da0
c0012884:	eb 7d                	jmp    c0012903 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0012886:	80 f9 14             	cmp    cl,0x14
c0012889:	75 12                	jne    c001289d <CPU::lookupAMDName(unsigned char, unsigned char)+0x129>
c001288b:	4a                   	dec    edx
c001288c:	b8 65 40 02 c0       	mov    eax,0xc0024065
c0012891:	80 fa 01             	cmp    dl,0x1
c0012894:	77 6d                	ja     c0012903 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0012896:	b8 b0 5d 02 c0       	mov    eax,0xc0025db0
c001289b:	eb 66                	jmp    c0012903 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001289d:	80 f9 15             	cmp    cl,0x15
c00128a0:	75 31                	jne    c00128d3 <CPU::lookupAMDName(unsigned char, unsigned char)+0x15f>
c00128a2:	b8 c0 5d 02 c0       	mov    eax,0xc0025dc0
c00128a7:	80 fa 01             	cmp    dl,0x1
c00128aa:	74 57                	je     c0012903 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00128ac:	b8 65 40 02 c0       	mov    eax,0xc0024065
c00128b1:	80 fa 13             	cmp    dl,0x13
c00128b4:	76 0c                	jbe    c00128c2 <CPU::lookupAMDName(unsigned char, unsigned char)+0x14e>
c00128b6:	80 fa 30             	cmp    dl,0x30
c00128b9:	75 48                	jne    c0012903 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00128bb:	b8 e0 5d 02 c0       	mov    eax,0xc0025de0
c00128c0:	eb 41                	jmp    c0012903 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00128c2:	b9 04 00 09 00       	mov    ecx,0x90004
c00128c7:	0f a3 d1             	bt     ecx,edx
c00128ca:	73 37                	jae    c0012903 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00128cc:	b8 d0 5d 02 c0       	mov    eax,0xc0025dd0
c00128d1:	eb 30                	jmp    c0012903 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00128d3:	b8 65 40 02 c0       	mov    eax,0xc0024065
c00128d8:	80 f9 16             	cmp    cl,0x16
c00128db:	75 26                	jne    c0012903 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00128dd:	b8 f0 5d 02 c0       	mov    eax,0xc0025df0
c00128e2:	84 d2                	test   dl,dl
c00128e4:	74 1d                	je     c0012903 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00128e6:	b8 65 40 02 c0       	mov    eax,0xc0024065
c00128eb:	80 fa 30             	cmp    dl,0x30
c00128ee:	75 13                	jne    c0012903 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00128f0:	b8 00 5e 02 c0       	mov    eax,0xc0025e00
c00128f5:	eb 0c                	jmp    c0012903 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00128f7:	b8 20 5d 02 c0       	mov    eax,0xc0025d20
c00128fc:	eb 05                	jmp    c0012903 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00128fe:	b8 90 5d 02 c0       	mov    eax,0xc0025d90
c0012903:	5b                   	pop    ebx
c0012904:	5e                   	pop    esi
c0012905:	5f                   	pop    edi
c0012906:	5d                   	pop    ebp
c0012907:	c3                   	ret    

c0012908 <CPU::lookupIntelName(unsigned char, unsigned char)>:
c0012908:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001290c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012910:	80 f9 04             	cmp    cl,0x4
c0012913:	75 6b                	jne    c0012980 <CPU::lookupIntelName(unsigned char, unsigned char)+0x78>
c0012915:	b8 80 5b 02 c0       	mov    eax,0xc0025b80
c001291a:	80 fa 01             	cmp    dl,0x1
c001291d:	0f 86 92 02 00 00    	jbe    c0012bb5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012923:	b8 90 5b 02 c0       	mov    eax,0xc0025b90
c0012928:	80 fa 02             	cmp    dl,0x2
c001292b:	0f 84 84 02 00 00    	je     c0012bb5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012931:	b8 a0 5b 02 c0       	mov    eax,0xc0025ba0
c0012936:	80 fa 03             	cmp    dl,0x3
c0012939:	0f 84 76 02 00 00    	je     c0012bb5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001293f:	b8 b0 5b 02 c0       	mov    eax,0xc0025bb0
c0012944:	80 fa 04             	cmp    dl,0x4
c0012947:	0f 84 68 02 00 00    	je     c0012bb5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001294d:	b8 c0 5b 02 c0       	mov    eax,0xc0025bc0
c0012952:	80 fa 05             	cmp    dl,0x5
c0012955:	0f 84 5a 02 00 00    	je     c0012bb5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001295b:	b8 a0 5b 02 c0       	mov    eax,0xc0025ba0
c0012960:	80 fa 07             	cmp    dl,0x7
c0012963:	0f 84 4c 02 00 00    	je     c0012bb5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012969:	83 ea 08             	sub    edx,0x8
c001296c:	b8 65 40 02 c0       	mov    eax,0xc0024065
c0012971:	80 fa 01             	cmp    dl,0x1
c0012974:	0f 87 3b 02 00 00    	ja     c0012bb5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001297a:	b8 d0 5b 02 c0       	mov    eax,0xc0025bd0
c001297f:	c3                   	ret    
c0012980:	80 f9 05             	cmp    cl,0x5
c0012983:	75 45                	jne    c00129ca <CPU::lookupIntelName(unsigned char, unsigned char)+0xc2>
c0012985:	8d 4a ff             	lea    ecx,[edx-0x1]
c0012988:	b8 e0 5b 02 c0       	mov    eax,0xc0025be0
c001298d:	80 f9 02             	cmp    cl,0x2
c0012990:	0f 86 1f 02 00 00    	jbe    c0012bb5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012996:	80 fa 04             	cmp    dl,0x4
c0012999:	0f 84 f3 01 00 00    	je     c0012b92 <CPU::lookupIntelName(unsigned char, unsigned char)+0x28a>
c001299f:	80 fa 07             	cmp    dl,0x7
c00129a2:	0f 84 0d 02 00 00    	je     c0012bb5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00129a8:	b8 f0 5b 02 c0       	mov    eax,0xc0025bf0
c00129ad:	80 fa 08             	cmp    dl,0x8
c00129b0:	0f 84 ff 01 00 00    	je     c0012bb5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00129b6:	b8 65 40 02 c0       	mov    eax,0xc0024065
c00129bb:	80 fa 09             	cmp    dl,0x9
c00129be:	0f 85 f1 01 00 00    	jne    c0012bb5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00129c4:	b8 00 5c 02 c0       	mov    eax,0xc0025c00
c00129c9:	c3                   	ret    
c00129ca:	80 f9 06             	cmp    cl,0x6
c00129cd:	0f 85 85 01 00 00    	jne    c0012b58 <CPU::lookupIntelName(unsigned char, unsigned char)+0x250>
c00129d3:	b8 10 5c 02 c0       	mov    eax,0xc0025c10
c00129d8:	80 fa 01             	cmp    dl,0x1
c00129db:	0f 84 d4 01 00 00    	je     c0012bb5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00129e1:	8d 42 fb             	lea    eax,[edx-0x5]
c00129e4:	3c 01                	cmp    al,0x1
c00129e6:	0f 86 ac 01 00 00    	jbe    c0012b98 <CPU::lookupIntelName(unsigned char, unsigned char)+0x290>
c00129ec:	80 fa 03             	cmp    dl,0x3
c00129ef:	0f 84 a3 01 00 00    	je     c0012b98 <CPU::lookupIntelName(unsigned char, unsigned char)+0x290>
c00129f5:	8d 4a f9             	lea    ecx,[edx-0x7]
c00129f8:	b8 30 5c 02 c0       	mov    eax,0xc0025c30
c00129fd:	80 f9 01             	cmp    cl,0x1
c0012a00:	0f 86 af 01 00 00    	jbe    c0012bb5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012a06:	80 fa 09             	cmp    dl,0x9
c0012a09:	0f 84 8f 01 00 00    	je     c0012b9e <CPU::lookupIntelName(unsigned char, unsigned char)+0x296>
c0012a0f:	8d 4a f6             	lea    ecx,[edx-0xa]
c0012a12:	80 f9 01             	cmp    cl,0x1
c0012a15:	0f 86 9a 01 00 00    	jbe    c0012bb5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012a1b:	b8 40 5c 02 c0       	mov    eax,0xc0025c40
c0012a20:	80 fa 0d             	cmp    dl,0xd
c0012a23:	0f 84 8c 01 00 00    	je     c0012bb5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012a29:	b8 50 5c 02 c0       	mov    eax,0xc0025c50
c0012a2e:	80 fa 0e             	cmp    dl,0xe
c0012a31:	0f 84 7e 01 00 00    	je     c0012bb5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012a37:	b8 60 5c 02 c0       	mov    eax,0xc0025c60
c0012a3c:	80 fa 0f             	cmp    dl,0xf
c0012a3f:	0f 84 70 01 00 00    	je     c0012bb5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012a45:	b8 40 5c 02 c0       	mov    eax,0xc0025c40
c0012a4a:	80 fa 15             	cmp    dl,0x15
c0012a4d:	0f 84 62 01 00 00    	je     c0012bb5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012a53:	8d 4a ea             	lea    ecx,[edx-0x16]
c0012a56:	b8 60 5c 02 c0       	mov    eax,0xc0025c60
c0012a5b:	80 f9 01             	cmp    cl,0x1
c0012a5e:	0f 86 51 01 00 00    	jbe    c0012bb5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012a64:	80 fa 1a             	cmp    dl,0x1a
c0012a67:	0f 84 37 01 00 00    	je     c0012ba4 <CPU::lookupIntelName(unsigned char, unsigned char)+0x29c>
c0012a6d:	80 fa 1c             	cmp    dl,0x1c
c0012a70:	0f 84 34 01 00 00    	je     c0012baa <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a2>
c0012a76:	80 fa 1d             	cmp    dl,0x1d
c0012a79:	0f 84 36 01 00 00    	je     c0012bb5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012a7f:	b8 90 5c 02 c0       	mov    eax,0xc0025c90
c0012a84:	80 fa 25             	cmp    dl,0x25
c0012a87:	0f 84 28 01 00 00    	je     c0012bb5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012a8d:	8d 4a da             	lea    ecx,[edx-0x26]
c0012a90:	b8 80 5c 02 c0       	mov    eax,0xc0025c80
c0012a95:	80 f9 01             	cmp    cl,0x1
c0012a98:	0f 86 17 01 00 00    	jbe    c0012bb5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012a9e:	b8 a0 5c 02 c0       	mov    eax,0xc0025ca0
c0012aa3:	80 fa 2a             	cmp    dl,0x2a
c0012aa6:	0f 84 09 01 00 00    	je     c0012bb5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012aac:	b8 90 5c 02 c0       	mov    eax,0xc0025c90
c0012ab1:	80 fa 2c             	cmp    dl,0x2c
c0012ab4:	0f 84 fb 00 00 00    	je     c0012bb5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012aba:	b8 a0 5c 02 c0       	mov    eax,0xc0025ca0
c0012abf:	80 fa 2d             	cmp    dl,0x2d
c0012ac2:	0f 84 ed 00 00 00    	je     c0012bb5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012ac8:	b8 70 5c 02 c0       	mov    eax,0xc0025c70
c0012acd:	80 fa 2e             	cmp    dl,0x2e
c0012ad0:	0f 84 df 00 00 00    	je     c0012bb5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012ad6:	b8 90 5c 02 c0       	mov    eax,0xc0025c90
c0012adb:	80 fa 2f             	cmp    dl,0x2f
c0012ade:	0f 84 d1 00 00 00    	je     c0012bb5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012ae4:	8d 4a cb             	lea    ecx,[edx-0x35]
c0012ae7:	b8 80 5c 02 c0       	mov    eax,0xc0025c80
c0012aec:	80 f9 01             	cmp    cl,0x1
c0012aef:	0f 86 c0 00 00 00    	jbe    c0012bb5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012af5:	b8 b0 5c 02 c0       	mov    eax,0xc0025cb0
c0012afa:	80 fa 37             	cmp    dl,0x37
c0012afd:	0f 84 b2 00 00 00    	je     c0012bb5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012b03:	b8 c0 5c 02 c0       	mov    eax,0xc0025cc0
c0012b08:	80 fa 3a             	cmp    dl,0x3a
c0012b0b:	0f 84 a4 00 00 00    	je     c0012bb5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012b11:	b8 d0 5c 02 c0       	mov    eax,0xc0025cd0
c0012b16:	80 fa 3c             	cmp    dl,0x3c
c0012b19:	0f 84 96 00 00 00    	je     c0012bb5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012b1f:	b8 e0 5c 02 c0       	mov    eax,0xc0025ce0
c0012b24:	80 fa 3d             	cmp    dl,0x3d
c0012b27:	0f 84 88 00 00 00    	je     c0012bb5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012b2d:	b8 c0 5c 02 c0       	mov    eax,0xc0025cc0
c0012b32:	80 fa 3e             	cmp    dl,0x3e
c0012b35:	74 7e                	je     c0012bb5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012b37:	8d 42 bb             	lea    eax,[edx-0x45]
c0012b3a:	3c 01                	cmp    al,0x1
c0012b3c:	76 72                	jbe    c0012bb0 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a8>
c0012b3e:	80 fa 3f             	cmp    dl,0x3f
c0012b41:	74 6d                	je     c0012bb0 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a8>
c0012b43:	80 fa 4a             	cmp    dl,0x4a
c0012b46:	74 0a                	je     c0012b52 <CPU::lookupIntelName(unsigned char, unsigned char)+0x24a>
c0012b48:	b8 65 40 02 c0       	mov    eax,0xc0024065
c0012b4d:	80 fa 4d             	cmp    dl,0x4d
c0012b50:	75 63                	jne    c0012bb5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012b52:	b8 b0 5c 02 c0       	mov    eax,0xc0025cb0
c0012b57:	c3                   	ret    
c0012b58:	b8 65 40 02 c0       	mov    eax,0xc0024065
c0012b5d:	80 f9 0b             	cmp    cl,0xb
c0012b60:	75 0a                	jne    c0012b6c <CPU::lookupIntelName(unsigned char, unsigned char)+0x264>
c0012b62:	fe ca                	dec    dl
c0012b64:	75 4f                	jne    c0012bb5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012b66:	b8 f0 5c 02 c0       	mov    eax,0xc0025cf0
c0012b6b:	c3                   	ret    
c0012b6c:	80 f9 0f             	cmp    cl,0xf
c0012b6f:	75 44                	jne    c0012bb5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012b71:	b8 00 5d 02 c0       	mov    eax,0xc0025d00
c0012b76:	80 fa 02             	cmp    dl,0x2
c0012b79:	76 3a                	jbe    c0012bb5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012b7b:	8d 42 fd             	lea    eax,[edx-0x3]
c0012b7e:	3c 01                	cmp    al,0x1
c0012b80:	76 0a                	jbe    c0012b8c <CPU::lookupIntelName(unsigned char, unsigned char)+0x284>
c0012b82:	b8 65 40 02 c0       	mov    eax,0xc0024065
c0012b87:	80 fa 06             	cmp    dl,0x6
c0012b8a:	75 29                	jne    c0012bb5 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0012b8c:	b8 10 5d 02 c0       	mov    eax,0xc0025d10
c0012b91:	c3                   	ret    
c0012b92:	b8 f0 5b 02 c0       	mov    eax,0xc0025bf0
c0012b97:	c3                   	ret    
c0012b98:	b8 20 5c 02 c0       	mov    eax,0xc0025c20
c0012b9d:	c3                   	ret    
c0012b9e:	b8 40 5c 02 c0       	mov    eax,0xc0025c40
c0012ba3:	c3                   	ret    
c0012ba4:	b8 70 5c 02 c0       	mov    eax,0xc0025c70
c0012ba9:	c3                   	ret    
c0012baa:	b8 80 5c 02 c0       	mov    eax,0xc0025c80
c0012baf:	c3                   	ret    
c0012bb0:	b8 d0 5c 02 c0       	mov    eax,0xc0025cd0
c0012bb5:	c3                   	ret    

c0012bb6 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>:
c0012bb6:	60                   	pusha  
c0012bb7:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012bbb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0012bbf:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0012bc3:	9c                   	pushf  
c0012bc4:	fa                   	cli    
c0012bc5:	0f 09                	wbinvd 
c0012bc7:	0f 30                	wrmsr  
c0012bc9:	9d                   	popf   
c0012bca:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012bce:	89 02                	mov    DWORD PTR [edx],eax
c0012bd0:	61                   	popa   
c0012bd1:	c3                   	ret    

c0012bd2 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>:
c0012bd2:	60                   	pusha  
c0012bd3:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012bd7:	9c                   	pushf  
c0012bd8:	fa                   	cli    
c0012bd9:	0f 09                	wbinvd 
c0012bdb:	31 c0                	xor    eax,eax
c0012bdd:	31 d2                	xor    edx,edx
c0012bdf:	0f 32                	rdmsr  
c0012be1:	9d                   	popf   
c0012be2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012be6:	89 02                	mov    DWORD PTR [edx],eax
c0012be8:	61                   	popa   
c0012be9:	c3                   	ret    

c0012bea <CPU::AMD_K6_writeback(int, int, int)>:
c0012bea:	56                   	push   esi
c0012beb:	53                   	push   ebx
c0012bec:	83 ec 10             	sub    esp,0x10
c0012bef:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012bf3:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c0012bf8:	75 5d                	jne    c0012c57 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0012bfa:	83 f8 08             	cmp    eax,0x8
c0012bfd:	75 09                	jne    c0012c08 <CPU::AMD_K6_writeback(int, int, int)+0x1e>
c0012bff:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c0012c04:	7e 13                	jle    c0012c19 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c0012c06:	eb 30                	jmp    c0012c38 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c0012c08:	83 f8 06             	cmp    eax,0x6
c0012c0b:	7c 4a                	jl     c0012c57 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0012c0d:	83 f8 07             	cmp    eax,0x7
c0012c10:	7e 07                	jle    c0012c19 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c0012c12:	83 f8 09             	cmp    eax,0x9
c0012c15:	74 21                	je     c0012c38 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c0012c17:	eb 3e                	jmp    c0012c57 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0012c19:	89 e6                	mov    esi,esp
c0012c1b:	8b 1d 8c 64 02 c0    	mov    ebx,DWORD PTR ds:0xc002648c
c0012c21:	56                   	push   esi
c0012c22:	c1 eb 15             	shr    ebx,0x15
c0012c25:	68 82 00 00 c0       	push   0xc0000082
c0012c2a:	83 e3 7e             	and    ebx,0x7e
c0012c2d:	e8 a0 ff ff ff       	call   c0012bd2 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c0012c32:	56                   	push   esi
c0012c33:	6a 00                	push   0x0
c0012c35:	53                   	push   ebx
c0012c36:	eb 12                	jmp    c0012c4a <CPU::AMD_K6_writeback(int, int, int)+0x60>
c0012c38:	89 e3                	mov    ebx,esp
c0012c3a:	53                   	push   ebx
c0012c3b:	68 82 00 00 c0       	push   0xc0000082
c0012c40:	e8 8d ff ff ff       	call   c0012bd2 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c0012c45:	53                   	push   ebx
c0012c46:	6a 00                	push   0x0
c0012c48:	6a 00                	push   0x0
c0012c4a:	68 82 00 00 c0       	push   0xc0000082
c0012c4f:	e8 62 ff ff ff       	call   c0012bb6 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>
c0012c54:	83 c4 18             	add    esp,0x18
c0012c57:	83 c4 10             	add    esp,0x10
c0012c5a:	5b                   	pop    ebx
c0012c5b:	5e                   	pop    esi
c0012c5c:	c3                   	ret    
c0012c5d:	90                   	nop

c0012c5e <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c0012c5e:	55                   	push   ebp
c0012c5f:	57                   	push   edi
c0012c60:	56                   	push   esi
c0012c61:	53                   	push   ebx
c0012c62:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012c66:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0012c6a:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0012c6e:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0012c72:	39 05 20 5e 02 c0    	cmp    DWORD PTR ds:0xc0025e20,eax
c0012c78:	75 23                	jne    c0012c9d <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c0012c7a:	a1 2c 6f 02 c0       	mov    eax,ds:0xc0026f2c
c0012c7f:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0012c83:	89 06                	mov    DWORD PTR [esi],eax
c0012c85:	a1 28 6f 02 c0       	mov    eax,ds:0xc0026f28
c0012c8a:	89 07                	mov    DWORD PTR [edi],eax
c0012c8c:	a1 24 6f 02 c0       	mov    eax,ds:0xc0026f24
c0012c91:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0012c94:	a1 20 6f 02 c0       	mov    eax,ds:0xc0026f20
c0012c99:	89 02                	mov    DWORD PTR [edx],eax
c0012c9b:	eb 3f                	jmp    c0012cdc <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c0012c9d:	31 c9                	xor    ecx,ecx
c0012c9f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012ca3:	0f a2                	cpuid  
c0012ca5:	89 06                	mov    DWORD PTR [esi],eax
c0012ca7:	89 1f                	mov    DWORD PTR [edi],ebx
c0012ca9:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0012cad:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c0012cb0:	89 10                	mov    DWORD PTR [eax],edx
c0012cb2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012cb6:	a3 20 5e 02 c0       	mov    ds:0xc0025e20,eax
c0012cbb:	8b 06                	mov    eax,DWORD PTR [esi]
c0012cbd:	a3 2c 6f 02 c0       	mov    ds:0xc0026f2c,eax
c0012cc2:	8b 07                	mov    eax,DWORD PTR [edi]
c0012cc4:	a3 28 6f 02 c0       	mov    ds:0xc0026f28,eax
c0012cc9:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012ccc:	a3 24 6f 02 c0       	mov    ds:0xc0026f24,eax
c0012cd1:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0012cd5:	8b 00                	mov    eax,DWORD PTR [eax]
c0012cd7:	a3 20 6f 02 c0       	mov    ds:0xc0026f20,eax
c0012cdc:	5b                   	pop    ebx
c0012cdd:	5e                   	pop    esi
c0012cde:	5f                   	pop    edi
c0012cdf:	5d                   	pop    ebp
c0012ce0:	c3                   	ret    
c0012ce1:	90                   	nop

c0012ce2 <CPU::cpuidCheckEDX(unsigned int)>:
c0012ce2:	83 ec 10             	sub    esp,0x10
c0012ce5:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0012ce9:	50                   	push   eax
c0012cea:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0012cee:	50                   	push   eax
c0012cef:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0012cf3:	50                   	push   eax
c0012cf4:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0012cf8:	50                   	push   eax
c0012cf9:	6a 01                	push   0x1
c0012cfb:	e8 5e ff ff ff       	call   c0012c5e <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0012d00:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0012d04:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c0012d08:	0f 95 c0             	setne  al
c0012d0b:	83 c4 24             	add    esp,0x24
c0012d0e:	c3                   	ret    
c0012d0f:	90                   	nop

c0012d10 <CPU::cpuidCheckECX(unsigned int)>:
c0012d10:	83 ec 10             	sub    esp,0x10
c0012d13:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0012d17:	50                   	push   eax
c0012d18:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0012d1c:	50                   	push   eax
c0012d1d:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0012d21:	50                   	push   eax
c0012d22:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0012d26:	50                   	push   eax
c0012d27:	6a 01                	push   0x1
c0012d29:	e8 30 ff ff ff       	call   c0012c5e <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0012d2e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0012d32:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c0012d36:	0f 95 c0             	setne  al
c0012d39:	83 c4 24             	add    esp,0x24
c0012d3c:	c3                   	ret    
c0012d3d:	90                   	nop

c0012d3e <CPU::cpuidCheckExtendedEBX(unsigned int)>:
c0012d3e:	83 ec 10             	sub    esp,0x10
c0012d41:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0012d45:	50                   	push   eax
c0012d46:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0012d4a:	50                   	push   eax
c0012d4b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0012d4f:	50                   	push   eax
c0012d50:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0012d54:	50                   	push   eax
c0012d55:	6a 07                	push   0x7
c0012d57:	e8 02 ff ff ff       	call   c0012c5e <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0012d5c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0012d60:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c0012d64:	0f 95 c0             	setne  al
c0012d67:	83 c4 24             	add    esp,0x24
c0012d6a:	c3                   	ret    
c0012d6b:	90                   	nop

c0012d6c <CPU::cpuidCheckExtendedECX(unsigned int)>:
c0012d6c:	83 ec 10             	sub    esp,0x10
c0012d6f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0012d73:	50                   	push   eax
c0012d74:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0012d78:	50                   	push   eax
c0012d79:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0012d7d:	50                   	push   eax
c0012d7e:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0012d82:	50                   	push   eax
c0012d83:	6a 07                	push   0x7
c0012d85:	e8 d4 fe ff ff       	call   c0012c5e <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0012d8a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0012d8e:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c0012d92:	0f 95 c0             	setne  al
c0012d95:	83 c4 24             	add    esp,0x24
c0012d98:	c3                   	ret    
c0012d99:	90                   	nop

c0012d9a <CPU::CPU()>:
c0012d9a:	83 ec 0c             	sub    esp,0xc
c0012d9d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012da1:	83 ec 08             	sub    esp,0x8
c0012da4:	68 65 40 02 c0       	push   0xc0024065
c0012da9:	50                   	push   eax
c0012daa:	e8 5b b3 ff ff       	call   c000e10a <Device::Device(char const*)>
c0012daf:	83 c4 10             	add    esp,0x10
c0012db2:	ba 88 42 02 c0       	mov    edx,0xc0024288
c0012db7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012dbb:	89 10                	mov    DWORD PTR [eax],edx
c0012dbd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012dc1:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c0012dcb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012dcf:	05 78 01 00 00       	add    eax,0x178
c0012dd4:	83 ec 0c             	sub    esp,0xc
c0012dd7:	50                   	push   eax
c0012dd8:	e8 7d 64 ff ff       	call   c000925a <GDT::GDT()>
c0012ddd:	83 c4 10             	add    esp,0x10
c0012de0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012de4:	05 7c 09 00 00       	add    eax,0x97c
c0012de9:	83 ec 0c             	sub    esp,0xc
c0012dec:	50                   	push   eax
c0012ded:	e8 be 66 ff ff       	call   c00094b0 <IDT::IDT()>
c0012df2:	83 c4 10             	add    esp,0x10
c0012df5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012df9:	05 7c 11 00 00       	add    eax,0x117c
c0012dfe:	83 ec 0c             	sub    esp,0xc
c0012e01:	50                   	push   eax
c0012e02:	e8 29 82 ff ff       	call   c000b030 <TSS::TSS()>
c0012e07:	83 c4 10             	add    esp,0x10
c0012e0a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012e0e:	c6 80 94 11 00 00 00 	mov    BYTE PTR [eax+0x1194],0x0
c0012e15:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012e19:	c7 80 10 01 00 00 10 00 00 00 	mov    DWORD PTR [eax+0x110],0x10
c0012e23:	90                   	nop
c0012e24:	83 c4 0c             	add    esp,0xc
c0012e27:	c3                   	ret    

c0012e28 <CPU::displayFeatures()>:
c0012e28:	c3                   	ret    
c0012e29:	90                   	nop

c0012e2a <CPU::detectFeatures()>:
c0012e2a:	55                   	push   ebp
c0012e2b:	57                   	push   edi
c0012e2c:	56                   	push   esi
c0012e2d:	53                   	push   ebx
c0012e2e:	83 ec 50             	sub    esp,0x50
c0012e31:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
c0012e35:	81 a3 90 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x1190],0xfff80700
c0012e3f:	c6 83 94 11 00 00 01 	mov    BYTE PTR [ebx+0x1194],0x1
c0012e46:	8d ab 5f 01 00 00    	lea    ebp,[ebx+0x15f]
c0012e4c:	6a 0d                	push   0xd
c0012e4e:	6a 00                	push   0x0
c0012e50:	55                   	push   ebp
c0012e51:	e8 2e d8 fe ff       	call   c0000684 <memset>
c0012e56:	83 c4 10             	add    esp,0x10
c0012e59:	a1 68 64 02 c0       	mov    eax,ds:0xc0026468
c0012e5e:	f6 80 e8 01 00 00 02 	test   BYTE PTR [eax+0x1e8],0x2
c0012e65:	0f 84 22 09 00 00    	je     c001378d <CPU::detectFeatures()+0x963>
c0012e6b:	83 ec 0c             	sub    esp,0xc
c0012e6e:	89 ef                	mov    edi,ebp
c0012e70:	6a 10                	push   0x10
c0012e72:	e8 6b fe ff ff       	call   c0012ce2 <CPU::cpuidCheckEDX(unsigned int)>
c0012e77:	83 e0 01             	and    eax,0x1
c0012e7a:	8d 14 00             	lea    edx,[eax+eax*1]
c0012e7d:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0012e83:	83 e0 fd             	and    eax,0xfffffffd
c0012e86:	09 d0                	or     eax,edx
c0012e88:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0012e8e:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c0012e95:	e8 48 fe ff ff       	call   c0012ce2 <CPU::cpuidCheckEDX(unsigned int)>
c0012e9a:	83 e0 01             	and    eax,0x1
c0012e9d:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0012ea4:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0012eaa:	83 e0 fb             	and    eax,0xfffffffb
c0012ead:	09 d0                	or     eax,edx
c0012eaf:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0012eb5:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0012ebc:	e8 21 fe ff ff       	call   c0012ce2 <CPU::cpuidCheckEDX(unsigned int)>
c0012ec1:	83 e0 01             	and    eax,0x1
c0012ec4:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0012ecb:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0012ed1:	83 e0 f7             	and    eax,0xfffffff7
c0012ed4:	09 d0                	or     eax,edx
c0012ed6:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0012edc:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c0012ee3:	e8 fa fd ff ff       	call   c0012ce2 <CPU::cpuidCheckEDX(unsigned int)>
c0012ee8:	83 e0 01             	and    eax,0x1
c0012eeb:	c1 e0 04             	shl    eax,0x4
c0012eee:	88 c2                	mov    dl,al
c0012ef0:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0012ef6:	83 e0 ef             	and    eax,0xffffffef
c0012ef9:	09 d0                	or     eax,edx
c0012efb:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0012f01:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c0012f08:	e8 d5 fd ff ff       	call   c0012ce2 <CPU::cpuidCheckEDX(unsigned int)>
c0012f0d:	83 e0 01             	and    eax,0x1
c0012f10:	c1 e0 05             	shl    eax,0x5
c0012f13:	88 c2                	mov    dl,al
c0012f15:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0012f1b:	83 e0 df             	and    eax,0xffffffdf
c0012f1e:	09 d0                	or     eax,edx
c0012f20:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0012f26:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0012f2d:	e8 b0 fd ff ff       	call   c0012ce2 <CPU::cpuidCheckEDX(unsigned int)>
c0012f32:	83 e0 01             	and    eax,0x1
c0012f35:	8d 14 00             	lea    edx,[eax+eax*1]
c0012f38:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0012f3e:	83 e0 fd             	and    eax,0xfffffffd
c0012f41:	09 d0                	or     eax,edx
c0012f43:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0012f49:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c0012f50:	e8 8d fd ff ff       	call   c0012ce2 <CPU::cpuidCheckEDX(unsigned int)>
c0012f55:	83 e0 01             	and    eax,0x1
c0012f58:	c1 e0 06             	shl    eax,0x6
c0012f5b:	88 c2                	mov    dl,al
c0012f5d:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0012f63:	83 e0 bf             	and    eax,0xffffffbf
c0012f66:	09 d0                	or     eax,edx
c0012f68:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0012f6e:	58                   	pop    eax
c0012f6f:	8d 44 24 28          	lea    eax,[esp+0x28]
c0012f73:	50                   	push   eax
c0012f74:	8d 44 24 28          	lea    eax,[esp+0x28]
c0012f78:	50                   	push   eax
c0012f79:	8d 74 24 28          	lea    esi,[esp+0x28]
c0012f7d:	56                   	push   esi
c0012f7e:	8d 44 24 28          	lea    eax,[esp+0x28]
c0012f82:	50                   	push   eax
c0012f83:	6a 00                	push   0x0
c0012f85:	e8 d4 fc ff ff       	call   c0012c5e <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0012f8a:	b8 04 00 00 00       	mov    eax,0x4
c0012f8f:	89 c1                	mov    ecx,eax
c0012f91:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0012f93:	8d bb 63 01 00 00    	lea    edi,[ebx+0x163]
c0012f99:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c0012f9d:	89 c1                	mov    ecx,eax
c0012f9f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0012fa1:	8d bb 67 01 00 00    	lea    edi,[ebx+0x167]
c0012fa7:	8d 74 24 38          	lea    esi,[esp+0x38]
c0012fab:	89 c1                	mov    ecx,eax
c0012fad:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0012faf:	83 c4 18             	add    esp,0x18
c0012fb2:	68 10 3f 02 c0       	push   0xc0023f10
c0012fb7:	55                   	push   ebp
c0012fb8:	e8 0f d8 fe ff       	call   c00007cc <strcmp>
c0012fbd:	83 c4 10             	add    esp,0x10
c0012fc0:	85 c0                	test   eax,eax
c0012fc2:	75 0f                	jne    c0012fd3 <CPU::detectFeatures()+0x1a9>
c0012fc4:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c0012fce:	e9 22 02 00 00       	jmp    c00131f5 <CPU::detectFeatures()+0x3cb>
c0012fd3:	50                   	push   eax
c0012fd4:	50                   	push   eax
c0012fd5:	68 1d 3f 02 c0       	push   0xc0023f1d
c0012fda:	55                   	push   ebp
c0012fdb:	e8 ec d7 fe ff       	call   c00007cc <strcmp>
c0012fe0:	83 c4 10             	add    esp,0x10
c0012fe3:	85 c0                	test   eax,eax
c0012fe5:	74 dd                	je     c0012fc4 <CPU::detectFeatures()+0x19a>
c0012fe7:	50                   	push   eax
c0012fe8:	50                   	push   eax
c0012fe9:	68 2a 3f 02 c0       	push   0xc0023f2a
c0012fee:	55                   	push   ebp
c0012fef:	e8 d8 d7 fe ff       	call   c00007cc <strcmp>
c0012ff4:	83 c4 10             	add    esp,0x10
c0012ff7:	85 c0                	test   eax,eax
c0012ff9:	74 2a                	je     c0013025 <CPU::detectFeatures()+0x1fb>
c0012ffb:	50                   	push   eax
c0012ffc:	50                   	push   eax
c0012ffd:	68 37 3f 02 c0       	push   0xc0023f37
c0013002:	55                   	push   ebp
c0013003:	e8 c4 d7 fe ff       	call   c00007cc <strcmp>
c0013008:	83 c4 10             	add    esp,0x10
c001300b:	85 c0                	test   eax,eax
c001300d:	74 16                	je     c0013025 <CPU::detectFeatures()+0x1fb>
c001300f:	50                   	push   eax
c0013010:	50                   	push   eax
c0013011:	68 44 3f 02 c0       	push   0xc0023f44
c0013016:	55                   	push   ebp
c0013017:	e8 b0 d7 fe ff       	call   c00007cc <strcmp>
c001301c:	83 c4 10             	add    esp,0x10
c001301f:	85 c0                	test   eax,eax
c0013021:	74 48                	je     c001306b <CPU::detectFeatures()+0x241>
c0013023:	eb 0f                	jmp    c0013034 <CPU::detectFeatures()+0x20a>
c0013025:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c001302f:	e9 c1 01 00 00       	jmp    c00131f5 <CPU::detectFeatures()+0x3cb>
c0013034:	50                   	push   eax
c0013035:	50                   	push   eax
c0013036:	68 51 3f 02 c0       	push   0xc0023f51
c001303b:	55                   	push   ebp
c001303c:	e8 8b d7 fe ff       	call   c00007cc <strcmp>
c0013041:	83 c4 10             	add    esp,0x10
c0013044:	85 c0                	test   eax,eax
c0013046:	74 23                	je     c001306b <CPU::detectFeatures()+0x241>
c0013048:	57                   	push   edi
c0013049:	57                   	push   edi
c001304a:	68 5e 3f 02 c0       	push   0xc0023f5e
c001304f:	55                   	push   ebp
c0013050:	e8 77 d7 fe ff       	call   c00007cc <strcmp>
c0013055:	83 c4 10             	add    esp,0x10
c0013058:	85 c0                	test   eax,eax
c001305a:	75 1e                	jne    c001307a <CPU::detectFeatures()+0x250>
c001305c:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c0013066:	e9 8a 01 00 00       	jmp    c00131f5 <CPU::detectFeatures()+0x3cb>
c001306b:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c0013075:	e9 7b 01 00 00       	jmp    c00131f5 <CPU::detectFeatures()+0x3cb>
c001307a:	56                   	push   esi
c001307b:	56                   	push   esi
c001307c:	68 6b 3f 02 c0       	push   0xc0023f6b
c0013081:	55                   	push   ebp
c0013082:	e8 45 d7 fe ff       	call   c00007cc <strcmp>
c0013087:	83 c4 10             	add    esp,0x10
c001308a:	85 c0                	test   eax,eax
c001308c:	75 0f                	jne    c001309d <CPU::detectFeatures()+0x273>
c001308e:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c0013098:	e9 58 01 00 00       	jmp    c00131f5 <CPU::detectFeatures()+0x3cb>
c001309d:	51                   	push   ecx
c001309e:	51                   	push   ecx
c001309f:	68 2a 3f 02 c0       	push   0xc0023f2a
c00130a4:	55                   	push   ebp
c00130a5:	e8 22 d7 fe ff       	call   c00007cc <strcmp>
c00130aa:	83 c4 10             	add    esp,0x10
c00130ad:	85 c0                	test   eax,eax
c00130af:	75 0f                	jne    c00130c0 <CPU::detectFeatures()+0x296>
c00130b1:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c00130bb:	e9 35 01 00 00       	jmp    c00131f5 <CPU::detectFeatures()+0x3cb>
c00130c0:	52                   	push   edx
c00130c1:	52                   	push   edx
c00130c2:	68 78 3f 02 c0       	push   0xc0023f78
c00130c7:	55                   	push   ebp
c00130c8:	e8 ff d6 fe ff       	call   c00007cc <strcmp>
c00130cd:	83 c4 10             	add    esp,0x10
c00130d0:	85 c0                	test   eax,eax
c00130d2:	75 0f                	jne    c00130e3 <CPU::detectFeatures()+0x2b9>
c00130d4:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c00130de:	e9 12 01 00 00       	jmp    c00131f5 <CPU::detectFeatures()+0x3cb>
c00130e3:	50                   	push   eax
c00130e4:	50                   	push   eax
c00130e5:	68 85 3f 02 c0       	push   0xc0023f85
c00130ea:	55                   	push   ebp
c00130eb:	e8 dc d6 fe ff       	call   c00007cc <strcmp>
c00130f0:	83 c4 10             	add    esp,0x10
c00130f3:	85 c0                	test   eax,eax
c00130f5:	75 0f                	jne    c0013106 <CPU::detectFeatures()+0x2dc>
c00130f7:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c0013101:	e9 ef 00 00 00       	jmp    c00131f5 <CPU::detectFeatures()+0x3cb>
c0013106:	50                   	push   eax
c0013107:	50                   	push   eax
c0013108:	68 92 3f 02 c0       	push   0xc0023f92
c001310d:	55                   	push   ebp
c001310e:	e8 b9 d6 fe ff       	call   c00007cc <strcmp>
c0013113:	83 c4 10             	add    esp,0x10
c0013116:	85 c0                	test   eax,eax
c0013118:	75 0f                	jne    c0013129 <CPU::detectFeatures()+0x2ff>
c001311a:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c0013124:	e9 cc 00 00 00       	jmp    c00131f5 <CPU::detectFeatures()+0x3cb>
c0013129:	50                   	push   eax
c001312a:	50                   	push   eax
c001312b:	68 9f 3f 02 c0       	push   0xc0023f9f
c0013130:	55                   	push   ebp
c0013131:	e8 96 d6 fe ff       	call   c00007cc <strcmp>
c0013136:	83 c4 10             	add    esp,0x10
c0013139:	85 c0                	test   eax,eax
c001313b:	75 0f                	jne    c001314c <CPU::detectFeatures()+0x322>
c001313d:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c0013147:	e9 a9 00 00 00       	jmp    c00131f5 <CPU::detectFeatures()+0x3cb>
c001314c:	50                   	push   eax
c001314d:	50                   	push   eax
c001314e:	68 ac 3f 02 c0       	push   0xc0023fac
c0013153:	55                   	push   ebp
c0013154:	e8 73 d6 fe ff       	call   c00007cc <strcmp>
c0013159:	83 c4 10             	add    esp,0x10
c001315c:	85 c0                	test   eax,eax
c001315e:	75 0f                	jne    c001316f <CPU::detectFeatures()+0x345>
c0013160:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c001316a:	e9 86 00 00 00       	jmp    c00131f5 <CPU::detectFeatures()+0x3cb>
c001316f:	50                   	push   eax
c0013170:	50                   	push   eax
c0013171:	68 b9 3f 02 c0       	push   0xc0023fb9
c0013176:	55                   	push   ebp
c0013177:	e8 50 d6 fe ff       	call   c00007cc <strcmp>
c001317c:	83 c4 10             	add    esp,0x10
c001317f:	85 c0                	test   eax,eax
c0013181:	75 0c                	jne    c001318f <CPU::detectFeatures()+0x365>
c0013183:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c001318d:	eb 66                	jmp    c00131f5 <CPU::detectFeatures()+0x3cb>
c001318f:	50                   	push   eax
c0013190:	50                   	push   eax
c0013191:	68 c6 3f 02 c0       	push   0xc0023fc6
c0013196:	55                   	push   ebp
c0013197:	e8 30 d6 fe ff       	call   c00007cc <strcmp>
c001319c:	83 c4 10             	add    esp,0x10
c001319f:	85 c0                	test   eax,eax
c00131a1:	75 0c                	jne    c00131af <CPU::detectFeatures()+0x385>
c00131a3:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c00131ad:	eb 46                	jmp    c00131f5 <CPU::detectFeatures()+0x3cb>
c00131af:	57                   	push   edi
c00131b0:	57                   	push   edi
c00131b1:	68 d3 3f 02 c0       	push   0xc0023fd3
c00131b6:	55                   	push   ebp
c00131b7:	e8 10 d6 fe ff       	call   c00007cc <strcmp>
c00131bc:	83 c4 10             	add    esp,0x10
c00131bf:	85 c0                	test   eax,eax
c00131c1:	74 e0                	je     c00131a3 <CPU::detectFeatures()+0x379>
c00131c3:	56                   	push   esi
c00131c4:	56                   	push   esi
c00131c5:	68 e0 3f 02 c0       	push   0xc0023fe0
c00131ca:	55                   	push   ebp
c00131cb:	e8 fc d5 fe ff       	call   c00007cc <strcmp>
c00131d0:	83 c4 10             	add    esp,0x10
c00131d3:	85 c0                	test   eax,eax
c00131d5:	74 cc                	je     c00131a3 <CPU::detectFeatures()+0x379>
c00131d7:	51                   	push   ecx
c00131d8:	51                   	push   ecx
c00131d9:	68 ed 3f 02 c0       	push   0xc0023fed
c00131de:	55                   	push   ebp
c00131df:	e8 e8 d5 fe ff       	call   c00007cc <strcmp>
c00131e4:	83 c4 10             	add    esp,0x10
c00131e7:	85 c0                	test   eax,eax
c00131e9:	74 b8                	je     c00131a3 <CPU::detectFeatures()+0x379>
c00131eb:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c00131f5:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c00131fa:	0f 86 be 00 00 00    	jbe    c00132be <CPU::detectFeatures()+0x494>
c0013200:	83 ec 0c             	sub    esp,0xc
c0013203:	68 80 00 00 00       	push   0x80
c0013208:	e8 31 fb ff ff       	call   c0012d3e <CPU::cpuidCheckExtendedEBX(unsigned int)>
c001320d:	83 e0 01             	and    eax,0x1
c0013210:	c1 e0 06             	shl    eax,0x6
c0013213:	88 c2                	mov    dl,al
c0013215:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c001321b:	83 e0 bf             	and    eax,0xffffffbf
c001321e:	09 d0                	or     eax,edx
c0013220:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0013226:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c001322d:	e8 0c fb ff ff       	call   c0012d3e <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0013232:	83 e0 01             	and    eax,0x1
c0013235:	c1 e0 04             	shl    eax,0x4
c0013238:	88 c2                	mov    dl,al
c001323a:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0013240:	83 e0 ef             	and    eax,0xffffffef
c0013243:	09 d0                	or     eax,edx
c0013245:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c001324b:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c0013252:	e8 e7 fa ff ff       	call   c0012d3e <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0013257:	c1 e0 07             	shl    eax,0x7
c001325a:	88 c2                	mov    dl,al
c001325c:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0013262:	83 e0 7f             	and    eax,0x7f
c0013265:	09 d0                	or     eax,edx
c0013267:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c001326d:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0013274:	e8 f3 fa ff ff       	call   c0012d6c <CPU::cpuidCheckExtendedECX(unsigned int)>
c0013279:	83 e0 01             	and    eax,0x1
c001327c:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0013283:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0013289:	83 e0 f7             	and    eax,0xfffffff7
c001328c:	09 d0                	or     eax,edx
c001328e:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0013294:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c001329b:	e8 cc fa ff ff       	call   c0012d6c <CPU::cpuidCheckExtendedECX(unsigned int)>
c00132a0:	83 c4 10             	add    esp,0x10
c00132a3:	83 e0 01             	and    eax,0x1
c00132a6:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c00132ad:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c00132b3:	83 e0 fb             	and    eax,0xfffffffb
c00132b6:	09 d0                	or     eax,edx
c00132b8:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c00132be:	83 ec 0c             	sub    esp,0xc
c00132c1:	8d 44 24 28          	lea    eax,[esp+0x28]
c00132c5:	50                   	push   eax
c00132c6:	8d 44 24 28          	lea    eax,[esp+0x28]
c00132ca:	50                   	push   eax
c00132cb:	8d 74 24 28          	lea    esi,[esp+0x28]
c00132cf:	56                   	push   esi
c00132d0:	8d 44 24 28          	lea    eax,[esp+0x28]
c00132d4:	50                   	push   eax
c00132d5:	6a 01                	push   0x1
c00132d7:	e8 82 f9 ff ff       	call   c0012c5e <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00132dc:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c00132e0:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c00132e6:	88 ca                	mov    dl,cl
c00132e8:	83 e0 f0             	and    eax,0xfffffff0
c00132eb:	83 e2 0f             	and    edx,0xf
c00132ee:	09 d0                	or     eax,edx
c00132f0:	88 ca                	mov    dl,cl
c00132f2:	88 83 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],al
c00132f8:	c0 ea 04             	shr    dl,0x4
c00132fb:	88 54 24 2f          	mov    BYTE PTR [esp+0x2f],dl
c00132ff:	0f b6 c2             	movzx  eax,dl
c0013302:	83 c4 20             	add    esp,0x20
c0013305:	c1 e0 06             	shl    eax,0x6
c0013308:	89 c7                	mov    edi,eax
c001330a:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0013310:	66 25 3f c0          	and    ax,0xc03f
c0013314:	09 f8                	or     eax,edi
c0013316:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001331d:	89 c8                	mov    eax,ecx
c001331f:	0f b6 ab 5d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x15d]
c0013326:	c1 e8 08             	shr    eax,0x8
c0013329:	83 e5 3f             	and    ebp,0x3f
c001332c:	83 e0 0f             	and    eax,0xf
c001332f:	89 c7                	mov    edi,eax
c0013331:	c1 e7 06             	shl    edi,0x6
c0013334:	09 ef                	or     edi,ebp
c0013336:	0f b6 ab 5e 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x15e]
c001333d:	89 fa                	mov    edx,edi
c001333f:	83 e5 c0             	and    ebp,0xffffffc0
c0013342:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c0013348:	88 c2                	mov    dl,al
c001334a:	c0 ea 02             	shr    dl,0x2
c001334d:	89 d7                	mov    edi,edx
c001334f:	09 ef                	or     edi,ebp
c0013351:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c0013357:	89 fa                	mov    edx,edi
c0013359:	83 e5 cf             	and    ebp,0xffffffcf
c001335c:	88 93 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],dl
c0013362:	89 cf                	mov    edi,ecx
c0013364:	c1 ef 0c             	shr    edi,0xc
c0013367:	83 e7 03             	and    edi,0x3
c001336a:	c1 e7 04             	shl    edi,0x4
c001336d:	09 ef                	or     edi,ebp
c001336f:	3c 06                	cmp    al,0x6
c0013371:	89 fa                	mov    edx,edi
c0013373:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c0013379:	74 04                	je     c001337f <CPU::detectFeatures()+0x555>
c001337b:	3c 0f                	cmp    al,0xf
c001337d:	75 5c                	jne    c00133db <CPU::detectFeatures()+0x5b1>
c001337f:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0013383:	89 cf                	mov    edi,ecx
c0013385:	c1 ef 10             	shr    edi,0x10
c0013388:	c1 e7 04             	shl    edi,0x4
c001338b:	09 fa                	or     edx,edi
c001338d:	8b bb 5c 01 00 00    	mov    edi,DWORD PTR [ebx+0x15c]
c0013393:	0f b6 d2             	movzx  edx,dl
c0013396:	66 81 e7 3f c0       	and    di,0xc03f
c001339b:	c1 e2 06             	shl    edx,0x6
c001339e:	09 fa                	or     edx,edi
c00133a0:	3c 0f                	cmp    al,0xf
c00133a2:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c00133a9:	75 30                	jne    c00133db <CPU::detectFeatures()+0x5b1>
c00133ab:	8a 83 5d 01 00 00    	mov    al,BYTE PTR [ebx+0x15d]
c00133b1:	c1 e9 14             	shr    ecx,0x14
c00133b4:	83 e0 3f             	and    eax,0x3f
c00133b7:	83 c1 0f             	add    ecx,0xf
c00133ba:	88 ca                	mov    dl,cl
c00133bc:	c0 e9 02             	shr    cl,0x2
c00133bf:	c1 e2 06             	shl    edx,0x6
c00133c2:	09 d0                	or     eax,edx
c00133c4:	88 83 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],al
c00133ca:	8a 83 5e 01 00 00    	mov    al,BYTE PTR [ebx+0x15e]
c00133d0:	83 e0 c0             	and    eax,0xffffffc0
c00133d3:	09 c1                	or     ecx,eax
c00133d5:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c00133db:	83 ec 0c             	sub    esp,0xc
c00133de:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c00133e5:	8d 44 24 28          	lea    eax,[esp+0x28]
c00133e9:	50                   	push   eax
c00133ea:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c00133ee:	55                   	push   ebp
c00133ef:	56                   	push   esi
c00133f0:	8d 7c 24 28          	lea    edi,[esp+0x28]
c00133f4:	57                   	push   edi
c00133f5:	68 00 00 00 80       	push   0x80000000
c00133fa:	e8 5f f8 ff ff       	call   c0012c5e <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00133ff:	83 c4 20             	add    esp,0x20
c0013402:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c001340a:	76 22                	jbe    c001342e <CPU::detectFeatures()+0x604>
c001340c:	83 ec 0c             	sub    esp,0xc
c001340f:	8d 44 24 28          	lea    eax,[esp+0x28]
c0013413:	50                   	push   eax
c0013414:	55                   	push   ebp
c0013415:	56                   	push   esi
c0013416:	57                   	push   edi
c0013417:	68 01 00 00 80       	push   0x80000001
c001341c:	e8 3d f8 ff ff       	call   c0012c5e <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0013421:	81 a3 90 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x1190],0xfffe5fff
c001342b:	83 c4 20             	add    esp,0x20
c001342e:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c0013434:	83 f8 01             	cmp    eax,0x1
c0013437:	75 6f                	jne    c00134a8 <CPU::detectFeatures()+0x67e>
c0013439:	51                   	push   ecx
c001343a:	51                   	push   ecx
c001343b:	68 f9 3f 02 c0       	push   0xc0023ff9
c0013440:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0013444:	56                   	push   esi
c0013445:	e8 f6 d2 fe ff       	call   c0000740 <strcpy>
c001344a:	5f                   	pop    edi
c001344b:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0013451:	5d                   	pop    ebp
c0013452:	66 c1 e8 06          	shr    ax,0x6
c0013456:	0f b6 c0             	movzx  eax,al
c0013459:	50                   	push   eax
c001345a:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0013460:	c1 e8 0e             	shr    eax,0xe
c0013463:	0f b6 c0             	movzx  eax,al
c0013466:	50                   	push   eax
c0013467:	e8 9c f4 ff ff       	call   c0012908 <CPU::lookupIntelName(unsigned char, unsigned char)>
c001346c:	5a                   	pop    edx
c001346d:	59                   	pop    ecx
c001346e:	50                   	push   eax
c001346f:	56                   	push   esi
c0013470:	e8 0b d4 fe ff       	call   c0000880 <strcat>
c0013475:	5f                   	pop    edi
c0013476:	5d                   	pop    ebp
c0013477:	56                   	push   esi
c0013478:	53                   	push   ebx
c0013479:	e8 7e ac ff ff       	call   c000e0fc <Device::setName(char const*)>
c001347e:	58                   	pop    eax
c001347f:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c0013485:	5a                   	pop    edx
c0013486:	68 00 40 02 c0       	push   0xc0024000
c001348b:	50                   	push   eax
c001348c:	e8 3b d3 fe ff       	call   c00007cc <strcmp>
c0013491:	83 c4 10             	add    esp,0x10
c0013494:	85 c0                	test   eax,eax
c0013496:	0f 85 71 03 00 00    	jne    c001380d <CPU::detectFeatures()+0x9e3>
c001349c:	80 a3 91 11 00 00 3f 	and    BYTE PTR [ebx+0x1191],0x3f
c00134a3:	e9 65 03 00 00       	jmp    c001380d <CPU::detectFeatures()+0x9e3>
c00134a8:	83 f8 02             	cmp    eax,0x2
c00134ab:	0f 85 b5 00 00 00    	jne    c0013566 <CPU::detectFeatures()+0x73c>
c00134b1:	57                   	push   edi
c00134b2:	57                   	push   edi
c00134b3:	68 12 40 02 c0       	push   0xc0024012
c00134b8:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c00134bc:	56                   	push   esi
c00134bd:	e8 7e d2 fe ff       	call   c0000740 <strcpy>
c00134c2:	5d                   	pop    ebp
c00134c3:	58                   	pop    eax
c00134c4:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00134ca:	66 c1 e8 06          	shr    ax,0x6
c00134ce:	0f b6 c0             	movzx  eax,al
c00134d1:	50                   	push   eax
c00134d2:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00134d8:	c1 e8 0e             	shr    eax,0xe
c00134db:	0f b6 c0             	movzx  eax,al
c00134de:	50                   	push   eax
c00134df:	e8 90 f2 ff ff       	call   c0012774 <CPU::lookupAMDName(unsigned char, unsigned char)>
c00134e4:	5a                   	pop    edx
c00134e5:	59                   	pop    ecx
c00134e6:	50                   	push   eax
c00134e7:	56                   	push   esi
c00134e8:	e8 93 d3 fe ff       	call   c0000880 <strcat>
c00134ed:	5f                   	pop    edi
c00134ee:	5d                   	pop    ebp
c00134ef:	56                   	push   esi
c00134f0:	53                   	push   ebx
c00134f1:	e8 06 ac ff ff       	call   c000e0fc <Device::setName(char const*)>
c00134f6:	58                   	pop    eax
c00134f7:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c00134fd:	5a                   	pop    edx
c00134fe:	68 17 40 02 c0       	push   0xc0024017
c0013503:	50                   	push   eax
c0013504:	e8 c3 d2 fe ff       	call   c00007cc <strcmp>
c0013509:	83 c4 10             	add    esp,0x10
c001350c:	85 c0                	test   eax,eax
c001350e:	75 20                	jne    c0013530 <CPU::detectFeatures()+0x706>
c0013510:	8b 15 68 64 02 c0    	mov    edx,DWORD PTR ds:0xc0026468
c0013516:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c001351c:	a8 01                	test   al,0x1
c001351e:	74 10                	je     c0013530 <CPU::detectFeatures()+0x706>
c0013520:	83 e0 fe             	and    eax,0xfffffffe
c0013523:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c0013529:	80 8b 90 11 00 00 10 	or     BYTE PTR [ebx+0x1190],0x10
c0013530:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0013536:	c1 e8 0e             	shr    eax,0xe
c0013539:	3c 05                	cmp    al,0x5
c001353b:	0f 85 cc 02 00 00    	jne    c001380d <CPU::detectFeatures()+0x9e3>
c0013541:	56                   	push   esi
c0013542:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c0013548:	83 e0 0f             	and    eax,0xf
c001354b:	50                   	push   eax
c001354c:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0013552:	66 c1 e8 06          	shr    ax,0x6
c0013556:	0f b6 c0             	movzx  eax,al
c0013559:	50                   	push   eax
c001355a:	6a 05                	push   0x5
c001355c:	e8 89 f6 ff ff       	call   c0012bea <CPU::AMD_K6_writeback(int, int, int)>
c0013561:	e9 1f 02 00 00       	jmp    c0013785 <CPU::detectFeatures()+0x95b>
c0013566:	8d 50 fd             	lea    edx,[eax-0x3]
c0013569:	83 fa 01             	cmp    edx,0x1
c001356c:	76 09                	jbe    c0013577 <CPU::detectFeatures()+0x74d>
c001356e:	83 f8 06             	cmp    eax,0x6
c0013571:	0f 85 91 01 00 00    	jne    c0013708 <CPU::detectFeatures()+0x8de>
c0013577:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c001357d:	c1 ea 0e             	shr    edx,0xe
c0013580:	80 fa 05             	cmp    dl,0x5
c0013583:	75 7b                	jne    c0013600 <CPU::detectFeatures()+0x7d6>
c0013585:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c001358b:	66 81 e2 c0 3f       	and    dx,0x3fc0
c0013590:	66 81 fa 00 01       	cmp    dx,0x100
c0013595:	75 0c                	jne    c00135a3 <CPU::detectFeatures()+0x779>
c0013597:	51                   	push   ecx
c0013598:	51                   	push   ecx
c0013599:	68 1e 40 02 c0       	push   0xc002401e
c001359e:	e9 dc 01 00 00       	jmp    c001377f <CPU::detectFeatures()+0x955>
c00135a3:	66 81 fa 00 02       	cmp    dx,0x200
c00135a8:	75 0c                	jne    c00135b6 <CPU::detectFeatures()+0x78c>
c00135aa:	52                   	push   edx
c00135ab:	52                   	push   edx
c00135ac:	68 31 40 02 c0       	push   0xc0024031
c00135b1:	e9 c9 01 00 00       	jmp    c001377f <CPU::detectFeatures()+0x955>
c00135b6:	66 81 fa 40 02       	cmp    dx,0x240
c00135bb:	75 0c                	jne    c00135c9 <CPU::detectFeatures()+0x79f>
c00135bd:	50                   	push   eax
c00135be:	50                   	push   eax
c00135bf:	68 43 40 02 c0       	push   0xc0024043
c00135c4:	e9 b6 01 00 00       	jmp    c001377f <CPU::detectFeatures()+0x955>
c00135c9:	83 f8 06             	cmp    eax,0x6
c00135cc:	75 0c                	jne    c00135da <CPU::detectFeatures()+0x7b0>
c00135ce:	50                   	push   eax
c00135cf:	50                   	push   eax
c00135d0:	68 55 40 02 c0       	push   0xc0024055
c00135d5:	e9 a5 01 00 00       	jmp    c001377f <CPU::detectFeatures()+0x955>
c00135da:	83 f8 04             	cmp    eax,0x4
c00135dd:	75 0c                	jne    c00135eb <CPU::detectFeatures()+0x7c1>
c00135df:	50                   	push   eax
c00135e0:	50                   	push   eax
c00135e1:	68 61 40 02 c0       	push   0xc0024061
c00135e6:	e9 94 01 00 00       	jmp    c001377f <CPU::detectFeatures()+0x955>
c00135eb:	83 f8 03             	cmp    eax,0x3
c00135ee:	0f 85 19 02 00 00    	jne    c001380d <CPU::detectFeatures()+0x9e3>
c00135f4:	50                   	push   eax
c00135f5:	50                   	push   eax
c00135f6:	68 69 40 02 c0       	push   0xc0024069
c00135fb:	e9 7f 01 00 00       	jmp    c001377f <CPU::detectFeatures()+0x955>
c0013600:	80 fa 06             	cmp    dl,0x6
c0013603:	0f 85 db 00 00 00    	jne    c00136e4 <CPU::detectFeatures()+0x8ba>
c0013609:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c001360f:	66 81 e2 c0 3f       	and    dx,0x3fc0
c0013614:	66 81 fa 80 01       	cmp    dx,0x180
c0013619:	75 0c                	jne    c0013627 <CPU::detectFeatures()+0x7fd>
c001361b:	50                   	push   eax
c001361c:	50                   	push   eax
c001361d:	68 74 40 02 c0       	push   0xc0024074
c0013622:	e9 58 01 00 00       	jmp    c001377f <CPU::detectFeatures()+0x955>
c0013627:	8d 8a 40 fe ff ff    	lea    ecx,[edx-0x1c0]
c001362d:	66 f7 c1 80 ff       	test   cx,0xff80
c0013632:	75 0c                	jne    c0013640 <CPU::detectFeatures()+0x816>
c0013634:	50                   	push   eax
c0013635:	50                   	push   eax
c0013636:	68 84 40 02 c0       	push   0xc0024084
c001363b:	e9 3f 01 00 00       	jmp    c001377f <CPU::detectFeatures()+0x955>
c0013640:	66 81 fa 40 02       	cmp    dx,0x240
c0013645:	75 0c                	jne    c0013653 <CPU::detectFeatures()+0x829>
c0013647:	55                   	push   ebp
c0013648:	55                   	push   ebp
c0013649:	68 8b 40 02 c0       	push   0xc002408b
c001364e:	e9 2c 01 00 00       	jmp    c001377f <CPU::detectFeatures()+0x955>
c0013653:	66 81 fa 80 02       	cmp    dx,0x280
c0013658:	75 0c                	jne    c0013666 <CPU::detectFeatures()+0x83c>
c001365a:	57                   	push   edi
c001365b:	57                   	push   edi
c001365c:	68 94 40 02 c0       	push   0xc0024094
c0013661:	e9 19 01 00 00       	jmp    c001377f <CPU::detectFeatures()+0x955>
c0013666:	66 81 fa 40 03       	cmp    dx,0x340
c001366b:	74 ed                	je     c001365a <CPU::detectFeatures()+0x830>
c001366d:	66 81 fa c0 03       	cmp    dx,0x3c0
c0013672:	75 0c                	jne    c0013680 <CPU::detectFeatures()+0x856>
c0013674:	56                   	push   esi
c0013675:	56                   	push   esi
c0013676:	68 9b 40 02 c0       	push   0xc002409b
c001367b:	e9 ff 00 00 00       	jmp    c001377f <CPU::detectFeatures()+0x955>
c0013680:	83 f8 06             	cmp    eax,0x6
c0013683:	0f 84 45 ff ff ff    	je     c00135ce <CPU::detectFeatures()+0x7a4>
c0013689:	83 f8 04             	cmp    eax,0x4
c001368c:	0f 84 4d ff ff ff    	je     c00135df <CPU::detectFeatures()+0x7b5>
c0013692:	83 f8 03             	cmp    eax,0x3
c0013695:	0f 85 72 01 00 00    	jne    c001380d <CPU::detectFeatures()+0x9e3>
c001369b:	51                   	push   ecx
c001369c:	51                   	push   ecx
c001369d:	68 a4 40 02 c0       	push   0xc00240a4
c00136a2:	53                   	push   ebx
c00136a3:	e8 54 aa ff ff       	call   c000e0fc <Device::setName(char const*)>
c00136a8:	b1 c1                	mov    cl,0xc1
c00136aa:	88 c8                	mov    al,cl
c00136ac:	e6 22                	out    0x22,al
c00136ae:	e4 23                	in     al,0x23
c00136b0:	88 c2                	mov    dl,al
c00136b2:	88 c8                	mov    al,cl
c00136b4:	e6 22                	out    0x22,al
c00136b6:	88 d0                	mov    al,dl
c00136b8:	83 c8 10             	or     eax,0x10
c00136bb:	e6 23                	out    0x23,al
c00136bd:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c00136c4:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c00136c7:	89 d0                	mov    eax,edx
c00136c9:	66 c7 41 04 22 00    	mov    WORD PTR [ecx+0x4],0x22
c00136cf:	c6 41 06 02          	mov    BYTE PTR [ecx+0x6],0x2
c00136d3:	40                   	inc    eax
c00136d4:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c00136da:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c00136df:	e9 a1 00 00 00       	jmp    c0013785 <CPU::detectFeatures()+0x95b>
c00136e4:	83 f8 06             	cmp    eax,0x6
c00136e7:	0f 84 e1 fe ff ff    	je     c00135ce <CPU::detectFeatures()+0x7a4>
c00136ed:	83 f8 04             	cmp    eax,0x4
c00136f0:	0f 84 e9 fe ff ff    	je     c00135df <CPU::detectFeatures()+0x7b5>
c00136f6:	83 f8 03             	cmp    eax,0x3
c00136f9:	0f 85 0e 01 00 00    	jne    c001380d <CPU::detectFeatures()+0x9e3>
c00136ff:	52                   	push   edx
c0013700:	52                   	push   edx
c0013701:	68 af 40 02 c0       	push   0xc00240af
c0013706:	eb 77                	jmp    c001377f <CPU::detectFeatures()+0x955>
c0013708:	83 f8 07             	cmp    eax,0x7
c001370b:	75 09                	jne    c0013716 <CPU::detectFeatures()+0x8ec>
c001370d:	50                   	push   eax
c001370e:	50                   	push   eax
c001370f:	68 b9 40 02 c0       	push   0xc00240b9
c0013714:	eb 69                	jmp    c001377f <CPU::detectFeatures()+0x955>
c0013716:	83 f8 0a             	cmp    eax,0xa
c0013719:	75 09                	jne    c0013724 <CPU::detectFeatures()+0x8fa>
c001371b:	50                   	push   eax
c001371c:	50                   	push   eax
c001371d:	68 c4 40 02 c0       	push   0xc00240c4
c0013722:	eb 5b                	jmp    c001377f <CPU::detectFeatures()+0x955>
c0013724:	83 f8 0b             	cmp    eax,0xb
c0013727:	75 09                	jne    c0013732 <CPU::detectFeatures()+0x908>
c0013729:	50                   	push   eax
c001372a:	50                   	push   eax
c001372b:	68 cc 40 02 c0       	push   0xc00240cc
c0013730:	eb 4d                	jmp    c001377f <CPU::detectFeatures()+0x955>
c0013732:	83 f8 08             	cmp    eax,0x8
c0013735:	75 09                	jne    c0013740 <CPU::detectFeatures()+0x916>
c0013737:	50                   	push   eax
c0013738:	50                   	push   eax
c0013739:	68 d5 40 02 c0       	push   0xc00240d5
c001373e:	eb 3f                	jmp    c001377f <CPU::detectFeatures()+0x955>
c0013740:	83 f8 09             	cmp    eax,0x9
c0013743:	75 09                	jne    c001374e <CPU::detectFeatures()+0x924>
c0013745:	50                   	push   eax
c0013746:	50                   	push   eax
c0013747:	68 dd 40 02 c0       	push   0xc00240dd
c001374c:	eb 31                	jmp    c001377f <CPU::detectFeatures()+0x955>
c001374e:	83 f8 05             	cmp    eax,0x5
c0013751:	75 09                	jne    c001375c <CPU::detectFeatures()+0x932>
c0013753:	50                   	push   eax
c0013754:	50                   	push   eax
c0013755:	68 e5 40 02 c0       	push   0xc00240e5
c001375a:	eb 23                	jmp    c001377f <CPU::detectFeatures()+0x955>
c001375c:	83 f8 0c             	cmp    eax,0xc
c001375f:	75 09                	jne    c001376a <CPU::detectFeatures()+0x940>
c0013761:	55                   	push   ebp
c0013762:	55                   	push   ebp
c0013763:	68 f3 40 02 c0       	push   0xc00240f3
c0013768:	eb 15                	jmp    c001377f <CPU::detectFeatures()+0x955>
c001376a:	83 f8 0d             	cmp    eax,0xd
c001376d:	75 09                	jne    c0013778 <CPU::detectFeatures()+0x94e>
c001376f:	57                   	push   edi
c0013770:	57                   	push   edi
c0013771:	68 fe 40 02 c0       	push   0xc00240fe
c0013776:	eb 07                	jmp    c001377f <CPU::detectFeatures()+0x955>
c0013778:	56                   	push   esi
c0013779:	56                   	push   esi
c001377a:	68 12 41 02 c0       	push   0xc0024112
c001377f:	53                   	push   ebx
c0013780:	e8 77 a9 ff ff       	call   c000e0fc <Device::setName(char const*)>
c0013785:	83 c4 10             	add    esp,0x10
c0013788:	e9 80 00 00 00       	jmp    c001380d <CPU::detectFeatures()+0x9e3>
c001378d:	51                   	push   ecx
c001378e:	51                   	push   ecx
c001378f:	68 5e 3f 02 c0       	push   0xc0023f5e
c0013794:	55                   	push   ebp
c0013795:	e8 a6 cf fe ff       	call   c0000740 <strcpy>
c001379a:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c00137a4:	e8 3a ca fe ff       	call   c00001e3 <is486>
c00137a9:	83 c4 10             	add    esp,0x10
c00137ac:	85 c0                	test   eax,eax
c00137ae:	74 2b                	je     c00137db <CPU::detectFeatures()+0x9b1>
c00137b0:	52                   	push   edx
c00137b1:	52                   	push   edx
c00137b2:	68 1e 41 02 c0       	push   0xc002411e
c00137b7:	53                   	push   ebx
c00137b8:	e8 3f a9 ff ff       	call   c000e0fc <Device::setName(char const*)>
c00137bd:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c00137c4:	0f 20 c0             	mov    eax,cr0
c00137c7:	83 e0 14             	and    eax,0x14
c00137ca:	83 c4 10             	add    esp,0x10
c00137cd:	83 f8 04             	cmp    eax,0x4
c00137d0:	75 1f                	jne    c00137f1 <CPU::detectFeatures()+0x9c7>
c00137d2:	80 a3 92 11 00 00 fd 	and    BYTE PTR [ebx+0x1192],0xfd
c00137d9:	eb 32                	jmp    c001380d <CPU::detectFeatures()+0x9e3>
c00137db:	50                   	push   eax
c00137dc:	50                   	push   eax
c00137dd:	68 29 41 02 c0       	push   0xc0024129
c00137e2:	53                   	push   ebx
c00137e3:	e8 14 a9 ff ff       	call   c000e0fc <Device::setName(char const*)>
c00137e8:	80 a3 91 11 00 00 f8 	and    BYTE PTR [ebx+0x1191],0xf8
c00137ef:	eb d3                	jmp    c00137c4 <CPU::detectFeatures()+0x99a>
c00137f1:	e8 c8 c9 fe ff       	call   c00001be <hasLegacyFPU>
c00137f6:	83 e0 01             	and    eax,0x1
c00137f9:	8d 14 00             	lea    edx,[eax+eax*1]
c00137fc:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0013802:	83 e0 fd             	and    eax,0xfffffffd
c0013805:	09 d0                	or     eax,edx
c0013807:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c001380d:	c6 83 94 11 00 00 00 	mov    BYTE PTR [ebx+0x1194],0x0
c0013814:	83 c4 4c             	add    esp,0x4c
c0013817:	5b                   	pop    ebx
c0013818:	5e                   	pop    esi
c0013819:	5f                   	pop    edi
c001381a:	5d                   	pop    ebp
c001381b:	c3                   	ret    

c001381c <CPU::setupSMEP()>:
c001381c:	0f 20 e0             	mov    eax,cr4
c001381f:	0d 00 00 10 00       	or     eax,0x100000
c0013824:	0f 22 e0             	mov    cr4,eax
c0013827:	c3                   	ret    

c0013828 <CPU::setupUMIP()>:
c0013828:	0f 20 e0             	mov    eax,cr4
c001382b:	80 cc 08             	or     ah,0x8
c001382e:	0f 22 e0             	mov    cr4,eax
c0013831:	c3                   	ret    

c0013832 <CPU::setupTSC()>:
c0013832:	0f 20 e0             	mov    eax,cr4
c0013835:	83 c8 04             	or     eax,0x4
c0013838:	0f 22 e0             	mov    cr4,eax
c001383b:	c3                   	ret    

c001383c <CPU::setupLargePages()>:
c001383c:	0f 20 e0             	mov    eax,cr4
c001383f:	83 c8 10             	or     eax,0x10
c0013842:	0f 22 e0             	mov    cr4,eax
c0013845:	c3                   	ret    

c0013846 <CPU::setupPAT()>:
c0013846:	a1 68 64 02 c0       	mov    eax,ds:0xc0026468
c001384b:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c0013852:	74 2c                	je     c0013880 <CPU::setupPAT()+0x3a>
c0013854:	53                   	push   ebx
c0013855:	83 ec 10             	sub    esp,0x10
c0013858:	68 77 02 00 00       	push   0x277
c001385d:	50                   	push   eax
c001385e:	e8 c1 56 ff ff       	call   c0008f24 <Computer::rdmsr(unsigned int)>
c0013863:	83 e2 f8             	and    edx,0xfffffff8
c0013866:	83 ca 01             	or     edx,0x1
c0013869:	52                   	push   edx
c001386a:	50                   	push   eax
c001386b:	68 77 02 00 00       	push   0x277
c0013870:	ff 35 68 64 02 c0    	push   DWORD PTR ds:0xc0026468
c0013876:	e8 d5 56 ff ff       	call   c0008f50 <Computer::wrmsr(unsigned int, unsigned long long)>
c001387b:	83 c4 28             	add    esp,0x28
c001387e:	5b                   	pop    ebx
c001387f:	c3                   	ret    
c0013880:	c3                   	ret    
c0013881:	90                   	nop

c0013882 <CPU::setupMTRR()>:
c0013882:	c3                   	ret    
c0013883:	90                   	nop

c0013884 <CPU::setupGlobalPages()>:
c0013884:	0f 20 e0             	mov    eax,cr4
c0013887:	0c 80                	or     al,0x80
c0013889:	0f 22 e0             	mov    cr4,eax
c001388c:	c3                   	ret    
c001388d:	90                   	nop

c001388e <CPU::allowUsermodeDataAccess()>:
c001388e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013892:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c0013899:	74 03                	je     c001389e <CPU::allowUsermodeDataAccess()+0x10>
c001389b:	0f 01 cb             	stac   
c001389e:	c3                   	ret    
c001389f:	90                   	nop

c00138a0 <CPU::prohibitUsermodeDataAccess()>:
c00138a0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00138a4:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c00138ab:	74 03                	je     c00138b0 <CPU::prohibitUsermodeDataAccess()+0x10>
c00138ad:	0f 01 ca             	clac   
c00138b0:	c3                   	ret    
c00138b1:	90                   	nop

c00138b2 <CPU::setupSMAP()>:
c00138b2:	0f 20 e0             	mov    eax,cr4
c00138b5:	0d 00 00 20 00       	or     eax,0x200000
c00138ba:	0f 22 e0             	mov    cr4,eax
c00138bd:	eb e1                	jmp    c00138a0 <CPU::prohibitUsermodeDataAccess()>
c00138bf:	90                   	nop

c00138c0 <CPU::setupFeatures()>:
c00138c0:	83 ec 0c             	sub    esp,0xc
c00138c3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00138c7:	f6 82 90 11 00 00 40 	test   BYTE PTR [edx+0x1190],0x40
c00138ce:	74 07                	je     c00138d7 <CPU::setupFeatures()+0x17>
c00138d0:	52                   	push   edx
c00138d1:	e8 46 ff ff ff       	call   c001381c <CPU::setupSMEP()>
c00138d6:	58                   	pop    eax
c00138d7:	f6 82 91 11 00 00 10 	test   BYTE PTR [edx+0x1191],0x10
c00138de:	74 07                	je     c00138e7 <CPU::setupFeatures()+0x27>
c00138e0:	52                   	push   edx
c00138e1:	e8 cc ff ff ff       	call   c00138b2 <CPU::setupSMAP()>
c00138e6:	58                   	pop    eax
c00138e7:	f6 82 91 11 00 00 08 	test   BYTE PTR [edx+0x1191],0x8
c00138ee:	74 07                	je     c00138f7 <CPU::setupFeatures()+0x37>
c00138f0:	52                   	push   edx
c00138f1:	e8 32 ff ff ff       	call   c0013828 <CPU::setupUMIP()>
c00138f6:	58                   	pop    eax
c00138f7:	f6 82 90 11 00 00 02 	test   BYTE PTR [edx+0x1190],0x2
c00138fe:	74 07                	je     c0013907 <CPU::setupFeatures()+0x47>
c0013900:	52                   	push   edx
c0013901:	e8 2c ff ff ff       	call   c0013832 <CPU::setupTSC()>
c0013906:	58                   	pop    eax
c0013907:	f6 82 90 11 00 00 08 	test   BYTE PTR [edx+0x1190],0x8
c001390e:	74 07                	je     c0013917 <CPU::setupFeatures()+0x57>
c0013910:	52                   	push   edx
c0013911:	e8 26 ff ff ff       	call   c001383c <CPU::setupLargePages()>
c0013916:	59                   	pop    ecx
c0013917:	f6 82 90 11 00 00 10 	test   BYTE PTR [edx+0x1190],0x10
c001391e:	74 07                	je     c0013927 <CPU::setupFeatures()+0x67>
c0013920:	52                   	push   edx
c0013921:	e8 5e ff ff ff       	call   c0013884 <CPU::setupGlobalPages()>
c0013926:	58                   	pop    eax
c0013927:	f6 82 90 11 00 00 20 	test   BYTE PTR [edx+0x1190],0x20
c001392e:	74 0c                	je     c001393c <CPU::setupFeatures()+0x7c>
c0013930:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0013934:	83 c4 0c             	add    esp,0xc
c0013937:	e9 0a ff ff ff       	jmp    c0013846 <CPU::setupPAT()>
c001393c:	83 c4 0c             	add    esp,0xc
c001393f:	c3                   	ret    

c0013940 <CPU::open(int, int, void*)>:
c0013940:	57                   	push   edi
c0013941:	56                   	push   esi
c0013942:	53                   	push   ebx
c0013943:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013947:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001394b:	8d bb 7c 11 00 00    	lea    edi,[ebx+0x117c]
c0013951:	83 ec 0c             	sub    esp,0xc
c0013954:	89 b3 74 01 00 00    	mov    DWORD PTR [ebx+0x174],esi
c001395a:	68 34 41 02 c0       	push   0xc0024134
c001395f:	e8 b9 60 ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0013964:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c001396a:	89 04 24             	mov    DWORD PTR [esp],eax
c001396d:	e8 4a 59 ff ff       	call   c00092bc <GDT::setup()>
c0013972:	c7 04 24 46 41 02 c0 	mov    DWORD PTR [esp],0xc0024146
c0013979:	e8 9f 60 ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c001397e:	83 c4 0c             	add    esp,0xc
c0013981:	6a 00                	push   0x0
c0013983:	68 ef be ad de       	push   0xdeadbeef
c0013988:	57                   	push   edi
c0013989:	e8 e6 76 ff ff       	call   c000b074 <TSS::setup(unsigned long, unsigned long)>
c001398e:	c7 04 24 58 41 02 c0 	mov    DWORD PTR [esp],0xc0024158
c0013995:	e8 83 60 ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c001399a:	89 3c 24             	mov    DWORD PTR [esp],edi
c001399d:	e8 b2 76 ff ff       	call   c000b054 <TSS::flush()>
c00139a2:	c7 04 24 6c 41 02 c0 	mov    DWORD PTR [esp],0xc002416c
c00139a9:	e8 6f 60 ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c00139ae:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c00139b4:	89 04 24             	mov    DWORD PTR [esp],eax
c00139b7:	e8 6a 5b ff ff       	call   c0009526 <IDT::setup()>
c00139bc:	c7 04 24 7e 41 02 c0 	mov    DWORD PTR [esp],0xc002417e
c00139c3:	e8 55 60 ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c00139c8:	b8 00 04 00 00       	mov    eax,0x400
c00139cd:	0f 23 f8             	mov    db7,eax
c00139d0:	c7 04 24 9c 41 02 c0 	mov    DWORD PTR [esp],0xc002419c
c00139d7:	e8 41 60 ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c00139dc:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c00139e6:	e8 0e 64 ff ff       	call   c0009df9 <Phys::allocatePage()>
c00139eb:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c00139f1:	89 30                	mov    DWORD PTR [eax],esi
c00139f3:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c00139f9:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00139fc:	c7 04 24 be 41 02 c0 	mov    DWORD PTR [esp],0xc00241be
c0013a03:	e8 15 60 ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0013a08:	58                   	pop    eax
c0013a09:	5a                   	pop    edx
c0013a0a:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0013a10:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0013a14:	e8 55 86 ff ff       	call   c000c06e <VAS::setCPUSpecific(unsigned long)>
c0013a19:	c7 04 24 e6 41 02 c0 	mov    DWORD PTR [esp],0xc00241e6
c0013a20:	e8 f8 5f ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0013a25:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013a28:	e8 fd f3 ff ff       	call   c0012e2a <CPU::detectFeatures()>
c0013a2d:	c7 04 24 09 42 02 c0 	mov    DWORD PTR [esp],0xc0024209
c0013a34:	e8 e4 5f ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0013a39:	e8 cc b8 ff ff       	call   c000f30a <setupInterruptController()>
c0013a3e:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c0013a44:	c7 04 24 2d 42 02 c0 	mov    DWORD PTR [esp],0xc002422d
c0013a4b:	e8 cd 5f ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0013a50:	a1 80 64 02 c0       	mov    eax,ds:0xc0026480
c0013a55:	83 e0 10             	and    eax,0x10
c0013a58:	83 f8 01             	cmp    eax,0x1
c0013a5b:	19 c0                	sbb    eax,eax
c0013a5d:	83 e0 46             	and    eax,0x46
c0013a60:	83 c0 1e             	add    eax,0x1e
c0013a63:	89 04 24             	mov    DWORD PTR [esp],eax
c0013a66:	e8 89 ce ff ff       	call   c00108f4 <setupTimer(int)>
c0013a6b:	89 83 8c 11 00 00    	mov    DWORD PTR [ebx+0x118c],eax
c0013a71:	c7 04 24 48 42 02 c0 	mov    DWORD PTR [esp],0xc0024248
c0013a78:	e8 a0 5f ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0013a7d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013a80:	e8 3b fe ff ff       	call   c00138c0 <CPU::setupFeatures()>
c0013a85:	c7 04 24 63 42 02 c0 	mov    DWORD PTR [esp],0xc0024263
c0013a8c:	e8 8c 5f ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0013a91:	83 c4 10             	add    esp,0x10
c0013a94:	31 c0                	xor    eax,eax
c0013a96:	5b                   	pop    ebx
c0013a97:	5e                   	pop    esi
c0013a98:	5f                   	pop    edi
c0013a99:	c3                   	ret    

c0013a9a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>:
c0013a9a:	57                   	push   edi
c0013a9b:	56                   	push   esi
c0013a9c:	53                   	push   ebx
c0013a9d:	51                   	push   ecx
c0013a9e:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0013aa2:	8b 46 3c             	mov    eax,DWORD PTR [esi+0x3c]
c0013aa5:	0f 02 c0             	lar    eax,ax
c0013aa8:	8b 5e 38             	mov    ebx,DWORD PTR [esi+0x38]
c0013aab:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0013aaf:	8a 4b 01             	mov    cl,BYTE PTR [ebx+0x1]
c0013ab2:	88 ca                	mov    dl,cl
c0013ab4:	c0 ea 06             	shr    dl,0x6
c0013ab7:	88 54 24 01          	mov    BYTE PTR [esp+0x1],dl
c0013abb:	89 ca                	mov    edx,ecx
c0013abd:	66 c1 ea 03          	shr    dx,0x3
c0013ac1:	83 e2 07             	and    edx,0x7
c0013ac4:	80 7c 24 01 03       	cmp    BYTE PTR [esp+0x1],0x3
c0013ac9:	88 17                	mov    BYTE PTR [edi],dl
c0013acb:	0f 84 a6 01 00 00    	je     c0013c77 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1dd>
c0013ad1:	83 e1 07             	and    ecx,0x7
c0013ad4:	80 f9 04             	cmp    cl,0x4
c0013ad7:	0f 84 98 00 00 00    	je     c0013b75 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xdb>
c0013add:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0013ae2:	0f 95 c0             	setne  al
c0013ae5:	80 f9 05             	cmp    cl,0x5
c0013ae8:	0f 95 c2             	setne  dl
c0013aeb:	08 c2                	or     dl,al
c0013aed:	74 79                	je     c0013b68 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xce>
c0013aef:	84 c9                	test   cl,cl
c0013af1:	75 05                	jne    c0013af8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x5e>
c0013af3:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c0013af6:	eb 3c                	jmp    c0013b34 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0013af8:	80 f9 01             	cmp    cl,0x1
c0013afb:	75 05                	jne    c0013b02 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x68>
c0013afd:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0013b00:	eb 32                	jmp    c0013b34 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0013b02:	80 f9 02             	cmp    cl,0x2
c0013b05:	75 05                	jne    c0013b0c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x72>
c0013b07:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0013b0a:	eb 28                	jmp    c0013b34 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0013b0c:	31 c0                	xor    eax,eax
c0013b0e:	80 f9 03             	cmp    cl,0x3
c0013b11:	75 05                	jne    c0013b18 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x7e>
c0013b13:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0013b16:	eb 1c                	jmp    c0013b34 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0013b18:	80 f9 05             	cmp    cl,0x5
c0013b1b:	75 05                	jne    c0013b22 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x88>
c0013b1d:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0013b20:	eb 12                	jmp    c0013b34 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0013b22:	80 f9 06             	cmp    cl,0x6
c0013b25:	75 05                	jne    c0013b2c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x92>
c0013b27:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0013b2a:	eb 08                	jmp    c0013b34 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0013b2c:	80 f9 07             	cmp    cl,0x7
c0013b2f:	75 03                	jne    c0013b34 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0013b31:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0013b34:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c0013b39:	75 10                	jne    c0013b4b <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xb1>
c0013b3b:	0f be 53 02          	movsx  edx,BYTE PTR [ebx+0x2]
c0013b3f:	b9 03 00 00 00       	mov    ecx,0x3
c0013b44:	01 d0                	add    eax,edx
c0013b46:	e9 37 01 00 00       	jmp    c0013c82 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0013b4b:	b9 02 00 00 00       	mov    ecx,0x2
c0013b50:	80 7c 24 01 02       	cmp    BYTE PTR [esp+0x1],0x2
c0013b55:	0f 85 27 01 00 00    	jne    c0013c82 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0013b5b:	03 43 02             	add    eax,DWORD PTR [ebx+0x2]
c0013b5e:	b9 06 00 00 00       	mov    ecx,0x6
c0013b63:	e9 1a 01 00 00       	jmp    c0013c82 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0013b68:	8b 43 02             	mov    eax,DWORD PTR [ebx+0x2]
c0013b6b:	b9 06 00 00 00       	mov    ecx,0x6
c0013b70:	e9 0f 01 00 00       	jmp    c0013c84 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0013b75:	8a 4b 02             	mov    cl,BYTE PTR [ebx+0x2]
c0013b78:	88 ca                	mov    dl,cl
c0013b7a:	c0 ea 06             	shr    dl,0x6
c0013b7d:	88 54 24 02          	mov    BYTE PTR [esp+0x2],dl
c0013b81:	89 ca                	mov    edx,ecx
c0013b83:	66 c1 ea 03          	shr    dx,0x3
c0013b87:	83 e2 07             	and    edx,0x7
c0013b8a:	80 e1 07             	and    cl,0x7
c0013b8d:	75 05                	jne    c0013b94 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xfa>
c0013b8f:	8b 7e 2c             	mov    edi,DWORD PTR [esi+0x2c]
c0013b92:	eb 4c                	jmp    c0013be0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0013b94:	80 f9 01             	cmp    cl,0x1
c0013b97:	75 05                	jne    c0013b9e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x104>
c0013b99:	8b 7e 28             	mov    edi,DWORD PTR [esi+0x28]
c0013b9c:	eb 42                	jmp    c0013be0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0013b9e:	80 f9 02             	cmp    cl,0x2
c0013ba1:	75 05                	jne    c0013ba8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x10e>
c0013ba3:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c0013ba6:	eb 38                	jmp    c0013be0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0013ba8:	80 f9 03             	cmp    cl,0x3
c0013bab:	75 05                	jne    c0013bb2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x118>
c0013bad:	8b 7e 20             	mov    edi,DWORD PTR [esi+0x20]
c0013bb0:	eb 2e                	jmp    c0013be0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0013bb2:	80 f9 04             	cmp    cl,0x4
c0013bb5:	75 12                	jne    c0013bc9 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12f>
c0013bb7:	f6 c4 60             	test   ah,0x60
c0013bba:	75 08                	jne    c0013bc4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12a>
c0013bbc:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0013bbf:	8d 78 14             	lea    edi,[eax+0x14]
c0013bc2:	eb 1c                	jmp    c0013be0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0013bc4:	8b 7e 44             	mov    edi,DWORD PTR [esi+0x44]
c0013bc7:	eb 17                	jmp    c0013be0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0013bc9:	80 f9 05             	cmp    cl,0x5
c0013bcc:	75 05                	jne    c0013bd3 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x139>
c0013bce:	8b 7e 18             	mov    edi,DWORD PTR [esi+0x18]
c0013bd1:	eb 0d                	jmp    c0013be0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0013bd3:	80 f9 06             	cmp    cl,0x6
c0013bd6:	75 05                	jne    c0013bdd <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x143>
c0013bd8:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c0013bdb:	eb 03                	jmp    c0013be0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0013bdd:	8b 7e 10             	mov    edi,DWORD PTR [esi+0x10]
c0013be0:	84 d2                	test   dl,dl
c0013be2:	75 05                	jne    c0013be9 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x14f>
c0013be4:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c0013be7:	eb 3c                	jmp    c0013c25 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0013be9:	80 fa 01             	cmp    dl,0x1
c0013bec:	75 05                	jne    c0013bf3 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x159>
c0013bee:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0013bf1:	eb 32                	jmp    c0013c25 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0013bf3:	80 fa 02             	cmp    dl,0x2
c0013bf6:	75 05                	jne    c0013bfd <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x163>
c0013bf8:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0013bfb:	eb 28                	jmp    c0013c25 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0013bfd:	80 fa 03             	cmp    dl,0x3
c0013c00:	75 05                	jne    c0013c07 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x16d>
c0013c02:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0013c05:	eb 1e                	jmp    c0013c25 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0013c07:	31 c0                	xor    eax,eax
c0013c09:	80 fa 04             	cmp    dl,0x4
c0013c0c:	74 17                	je     c0013c25 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0013c0e:	80 fa 05             	cmp    dl,0x5
c0013c11:	75 05                	jne    c0013c18 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x17e>
c0013c13:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0013c16:	eb 0d                	jmp    c0013c25 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0013c18:	80 fa 06             	cmp    dl,0x6
c0013c1b:	75 05                	jne    c0013c22 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x188>
c0013c1d:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0013c20:	eb 03                	jmp    c0013c25 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0013c22:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0013c25:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0013c2a:	0f 94 c2             	sete   dl
c0013c2d:	80 f9 05             	cmp    cl,0x5
c0013c30:	8a 4c 24 02          	mov    cl,BYTE PTR [esp+0x2]
c0013c34:	0f 94 44 24 03       	sete   BYTE PTR [esp+0x3]
c0013c39:	d3 e0                	shl    eax,cl
c0013c3b:	22 54 24 03          	and    dl,BYTE PTR [esp+0x3]
c0013c3f:	74 0a                	je     c0013c4b <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1b1>
c0013c41:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c0013c44:	b9 07 00 00 00       	mov    ecx,0x7
c0013c49:	eb 37                	jmp    c0013c82 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0013c4b:	01 f8                	add    eax,edi
c0013c4d:	b9 03 00 00 00       	mov    ecx,0x3
c0013c52:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0013c57:	74 2b                	je     c0013c84 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0013c59:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c0013c5e:	75 0d                	jne    c0013c6d <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1d3>
c0013c60:	0f be 4b 03          	movsx  ecx,BYTE PTR [ebx+0x3]
c0013c64:	01 c8                	add    eax,ecx
c0013c66:	b9 04 00 00 00       	mov    ecx,0x4
c0013c6b:	eb 17                	jmp    c0013c84 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0013c6d:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c0013c70:	b9 07 00 00 00       	mov    ecx,0x7
c0013c75:	eb 0d                	jmp    c0013c84 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0013c77:	b9 02 00 00 00       	mov    ecx,0x2
c0013c7c:	b2 01                	mov    dl,0x1
c0013c7e:	31 c0                	xor    eax,eax
c0013c80:	eb 02                	jmp    c0013c84 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0013c82:	31 d2                	xor    edx,edx
c0013c84:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013c88:	89 0b                	mov    DWORD PTR [ebx],ecx
c0013c8a:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0013c8e:	88 11                	mov    BYTE PTR [ecx],dl
c0013c90:	5a                   	pop    edx
c0013c91:	5b                   	pop    ebx
c0013c92:	5e                   	pop    esi
c0013c93:	5f                   	pop    edi
c0013c94:	c3                   	ret    

c0013c95 <Krnl::smpEntry()>:
c0013c95:	eb fe                	jmp    c0013c95 <Krnl::smpEntry()>

c0013c97 <Krnl::startCPU(int)>:
c0013c97:	a1 68 64 02 c0       	mov    eax,ds:0xc0026468
c0013c9c:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c0013ca3:	0f 84 36 01 00 00    	je     c0013ddf <Krnl::startCPU(int)+0x148>
c0013ca9:	53                   	push   ebx
c0013caa:	83 ec 10             	sub    esp,0x10
c0013cad:	fa                   	cli    
c0013cae:	ff 05 28 79 02 c0    	inc    DWORD PTR ds:0xc0027928
c0013cb4:	6a 1b                	push   0x1b
c0013cb6:	ff 35 68 64 02 c0    	push   DWORD PTR ds:0xc0026468
c0013cbc:	e8 63 52 ff ff       	call   c0008f24 <Computer::rdmsr(unsigned int)>
c0013cc1:	25 00 f0 ff ff       	and    eax,0xfffff000
c0013cc6:	89 c3                	mov    ebx,eax
c0013cc8:	58                   	pop    eax
c0013cc9:	5a                   	pop    edx
c0013cca:	53                   	push   ebx
c0013ccb:	68 ac 42 02 c0       	push   0xc00242ac
c0013cd0:	e8 ea 8d ff ff       	call   c000cabf <Dbg::kprintf(char const*, ...)>
c0013cd5:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0013cdf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013ce3:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0013ced:	c1 e0 18             	shl    eax,0x18
c0013cf0:	8b 93 10 03 00 00    	mov    edx,DWORD PTR [ebx+0x310]
c0013cf6:	83 c4 10             	add    esp,0x10
c0013cf9:	81 e2 ff ff ff 00    	and    edx,0xffffff
c0013cff:	09 c2                	or     edx,eax
c0013d01:	89 93 10 03 00 00    	mov    DWORD PTR [ebx+0x310],edx
c0013d07:	8d 93 00 03 00 00    	lea    edx,[ebx+0x300]
c0013d0d:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c0013d13:	81 e1 00 00 f0 ff    	and    ecx,0xfff00000
c0013d19:	80 cd c5             	or     ch,0xc5
c0013d1c:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c0013d22:	f3 90                	pause  
c0013d24:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0013d26:	0f ba e1 0c          	bt     ecx,0xc
c0013d2a:	72 f6                	jb     c0013d22 <Krnl::startCPU(int)+0x8b>
c0013d2c:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c0013d32:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c0013d38:	09 c1                	or     ecx,eax
c0013d3a:	89 8b 10 03 00 00    	mov    DWORD PTR [ebx+0x310],ecx
c0013d40:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c0013d46:	81 e1 00 00 f0 ff    	and    ecx,0xfff00000
c0013d4c:	80 cd 85             	or     ch,0x85
c0013d4f:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c0013d55:	f3 90                	pause  
c0013d57:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0013d59:	0f ba e1 0c          	bt     ecx,0xc
c0013d5d:	72 f6                	jb     c0013d55 <Krnl::startCPU(int)+0xbe>
c0013d5f:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0013d69:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c0013d6f:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c0013d75:	09 c1                	or     ecx,eax
c0013d77:	89 8b 10 03 00 00    	mov    DWORD PTR [ebx+0x310],ecx
c0013d7d:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c0013d83:	81 e1 00 f8 f0 ff    	and    ecx,0xfff0f800
c0013d89:	81 c9 02 06 00 00    	or     ecx,0x602
c0013d8f:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c0013d95:	f3 90                	pause  
c0013d97:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0013d99:	0f ba e1 0c          	bt     ecx,0xc
c0013d9d:	72 f6                	jb     c0013d95 <Krnl::startCPU(int)+0xfe>
c0013d9f:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0013da9:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c0013daf:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c0013db5:	09 c8                	or     eax,ecx
c0013db7:	89 83 10 03 00 00    	mov    DWORD PTR [ebx+0x310],eax
c0013dbd:	8b 83 00 03 00 00    	mov    eax,DWORD PTR [ebx+0x300]
c0013dc3:	25 00 f8 f0 ff       	and    eax,0xfff0f800
c0013dc8:	0d 02 06 00 00       	or     eax,0x602
c0013dcd:	89 83 00 03 00 00    	mov    DWORD PTR [ebx+0x300],eax
c0013dd3:	f3 90                	pause  
c0013dd5:	8b 02                	mov    eax,DWORD PTR [edx]
c0013dd7:	0f ba e0 0c          	bt     eax,0xc
c0013ddb:	72 f6                	jb     c0013dd3 <Krnl::startCPU(int)+0x13c>
c0013ddd:	eb fe                	jmp    c0013ddd <Krnl::startCPU(int)+0x146>
c0013ddf:	c3                   	ret    

c0013de0 <Krnl::startCPUs()>:
c0013de0:	a1 68 64 02 c0       	mov    eax,ds:0xc0026468
c0013de5:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0013deb:	88 c2                	mov    dl,al
c0013ded:	83 e2 0a             	and    edx,0xa
c0013df0:	80 fa 0a             	cmp    dl,0xa
c0013df3:	75 09                	jne    c0013dfe <Krnl::startCPUs()+0x1e>
c0013df5:	a8 01                	test   al,0x1
c0013df7:	74 05                	je     c0013dfe <Krnl::startCPUs()+0x1e>
c0013df9:	e9 9d c3 fe ff       	jmp    c000019b <prepareTramp>
c0013dfe:	c3                   	ret    
c0013dff:	90                   	nop

c0013e00 <EnvVarContainer::getEnv(char const*)>:
c0013e00:	57                   	push   edi
c0013e01:	56                   	push   esi
c0013e02:	53                   	push   ebx
c0013e03:	31 db                	xor    ebx,ebx
c0013e05:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013e09:	39 1e                	cmp    DWORD PTR [esi],ebx
c0013e0b:	7e 2b                	jle    c0013e38 <EnvVarContainer::getEnv(char const*)+0x38>
c0013e0d:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c0013e14:	50                   	push   eax
c0013e15:	50                   	push   eax
c0013e16:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0013e19:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c0013e1c:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0013e20:	e8 a7 c9 fe ff       	call   c00007cc <strcmp>
c0013e25:	83 c4 10             	add    esp,0x10
c0013e28:	85 c0                	test   eax,eax
c0013e2a:	75 09                	jne    c0013e35 <EnvVarContainer::getEnv(char const*)+0x35>
c0013e2c:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0013e2f:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c0013e33:	eb 05                	jmp    c0013e3a <EnvVarContainer::getEnv(char const*)+0x3a>
c0013e35:	43                   	inc    ebx
c0013e36:	eb d1                	jmp    c0013e09 <EnvVarContainer::getEnv(char const*)+0x9>
c0013e38:	31 c0                	xor    eax,eax
c0013e3a:	5b                   	pop    ebx
c0013e3b:	5e                   	pop    esi
c0013e3c:	5f                   	pop    edi
c0013e3d:	c3                   	ret    

c0013e3e <EnvVarContainer::setEnv(char const*, char const*)>:
c0013e3e:	55                   	push   ebp
c0013e3f:	57                   	push   edi
c0013e40:	56                   	push   esi
c0013e41:	53                   	push   ebx
c0013e42:	83 ec 28             	sub    esp,0x28
c0013e45:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0013e49:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c0013e4d:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0013e51:	56                   	push   esi
c0013e52:	e8 49 c8 fe ff       	call   c00006a0 <strlen>
c0013e57:	40                   	inc    eax
c0013e58:	89 04 24             	mov    DWORD PTR [esp],eax
c0013e5b:	e8 63 5b ff ff       	call   c00099c3 <malloc>
c0013e60:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013e63:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0013e67:	e8 34 c8 fe ff       	call   c00006a0 <strlen>
c0013e6c:	40                   	inc    eax
c0013e6d:	89 04 24             	mov    DWORD PTR [esp],eax
c0013e70:	e8 4e 5b ff ff       	call   c00099c3 <malloc>
c0013e75:	89 34 24             	mov    DWORD PTR [esp],esi
c0013e78:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0013e7c:	e8 1f c8 fe ff       	call   c00006a0 <strlen>
c0013e81:	83 c4 0c             	add    esp,0xc
c0013e84:	40                   	inc    eax
c0013e85:	50                   	push   eax
c0013e86:	6a 00                	push   0x0
c0013e88:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0013e8c:	e8 f3 c7 fe ff       	call   c0000684 <memset>
c0013e91:	89 34 24             	mov    DWORD PTR [esp],esi
c0013e94:	e8 07 c8 fe ff       	call   c00006a0 <strlen>
c0013e99:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0013e9d:	8d 48 01             	lea    ecx,[eax+0x1]
c0013ea0:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013ea2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013ea5:	89 de                	mov    esi,ebx
c0013ea7:	e8 f4 c7 fe ff       	call   c00006a0 <strlen>
c0013eac:	83 c4 0c             	add    esp,0xc
c0013eaf:	40                   	inc    eax
c0013eb0:	50                   	push   eax
c0013eb1:	6a 00                	push   0x0
c0013eb3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013eb7:	e8 c8 c7 fe ff       	call   c0000684 <memset>
c0013ebc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013ebf:	e8 dc c7 fe ff       	call   c00006a0 <strlen>
c0013ec4:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0013ec8:	8d 48 01             	lea    ecx,[eax+0x1]
c0013ecb:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013ecd:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0013ed0:	40                   	inc    eax
c0013ed1:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0013ed4:	c1 e0 03             	shl    eax,0x3
c0013ed7:	5a                   	pop    edx
c0013ed8:	59                   	pop    ecx
c0013ed9:	50                   	push   eax
c0013eda:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0013edd:	e8 cd 5a ff ff       	call   c00099af <realloc>
c0013ee2:	8d 74 24 18          	lea    esi,[esp+0x18]
c0013ee6:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0013ee9:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0013eec:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c0013ef0:	b9 08 00 00 00       	mov    ecx,0x8
c0013ef5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013ef7:	83 c4 2c             	add    esp,0x2c
c0013efa:	5b                   	pop    ebx
c0013efb:	5e                   	pop    esi
c0013efc:	5f                   	pop    edi
c0013efd:	5d                   	pop    ebp
c0013efe:	c3                   	ret    
c0013eff:	90                   	nop

c0013f00 <EnvVarContainer::deleteEnv(char const*)>:
c0013f00:	c3                   	ret    
c0013f01:	90                   	nop

c0013f02 <EnvVarContainer::loadFrom(char const*, char const*)>:
c0013f02:	55                   	push   ebp
c0013f03:	57                   	push   edi
c0013f04:	56                   	push   esi
c0013f05:	53                   	push   ebx
c0013f06:	81 ec 38 01 00 00    	sub    esp,0x138
c0013f0c:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c0013f13:	8b b4 24 54 01 00 00 	mov    esi,DWORD PTR [esp+0x154]
c0013f1a:	68 14 01 00 00       	push   0x114
c0013f1f:	e8 9f 5a ff ff       	call   c00099c3 <malloc>
c0013f24:	83 c4 0c             	add    esp,0xc
c0013f27:	89 c3                	mov    ebx,eax
c0013f29:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0013f2c:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0013f33:	50                   	push   eax
c0013f34:	e8 f1 90 ff ff       	call   c000d02a <File::File(char const*, Process*)>
c0013f39:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013f3c:	e8 bb 93 ff ff       	call   c000d2fc <File::exists()>
c0013f41:	83 c4 10             	add    esp,0x10
c0013f44:	84 c0                	test   al,al
c0013f46:	75 31                	jne    c0013f79 <EnvVarContainer::loadFrom(char const*, char const*)+0x77>
c0013f48:	50                   	push   eax
c0013f49:	50                   	push   eax
c0013f4a:	6a 12                	push   0x12
c0013f4c:	53                   	push   ebx
c0013f4d:	e8 3c 91 ff ff       	call   c000d08e <File::open(FileOpenMode)>
c0013f52:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013f54:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0013f57:	89 34 24             	mov    DWORD PTR [esp],esi
c0013f5a:	e8 41 c7 fe ff       	call   c00006a0 <strlen>
c0013f5f:	5a                   	pop    edx
c0013f60:	31 d2                	xor    edx,edx
c0013f62:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0013f66:	51                   	push   ecx
c0013f67:	56                   	push   esi
c0013f68:	52                   	push   edx
c0013f69:	50                   	push   eax
c0013f6a:	53                   	push   ebx
c0013f6b:	ff d7                	call   edi
c0013f6d:	83 c4 14             	add    esp,0x14
c0013f70:	53                   	push   ebx
c0013f71:	e8 76 91 ff ff       	call   c000d0ec <File::close()>
c0013f76:	83 c4 10             	add    esp,0x10
c0013f79:	56                   	push   esi
c0013f7a:	31 f6                	xor    esi,esi
c0013f7c:	68 00 01 00 00       	push   0x100
c0013f81:	6a 00                	push   0x0
c0013f83:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0013f87:	50                   	push   eax
c0013f88:	e8 f7 c6 fe ff       	call   c0000684 <memset>
c0013f8d:	5f                   	pop    edi
c0013f8e:	58                   	pop    eax
c0013f8f:	6a 01                	push   0x1
c0013f91:	53                   	push   ebx
c0013f92:	e8 f7 90 ff ff       	call   c000d08e <File::open(FileOpenMode)>
c0013f97:	83 c4 10             	add    esp,0x10
c0013f9a:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0013fa2:	83 ec 0c             	sub    esp,0xc
c0013fa5:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013fa7:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0013fab:	51                   	push   ecx
c0013fac:	8d 54 24 23          	lea    edx,[esp+0x23]
c0013fb0:	52                   	push   edx
c0013fb1:	6a 00                	push   0x0
c0013fb3:	6a 01                	push   0x1
c0013fb5:	53                   	push   ebx
c0013fb6:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013fb9:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c0013fbd:	83 c4 20             	add    esp,0x20
c0013fc0:	3c 0d                	cmp    al,0xd
c0013fc2:	0f 84 09 01 00 00    	je     c00140d1 <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c0013fc8:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0013fcd:	0f 84 ef 00 00 00    	je     c00140c2 <EnvVarContainer::loadFrom(char const*, char const*)+0x1c0>
c0013fd3:	3c 0a                	cmp    al,0xa
c0013fd5:	74 13                	je     c0013fea <EnvVarContainer::loadFrom(char const*, char const*)+0xe8>
c0013fd7:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0013fdc:	74 0c                	je     c0013fea <EnvVarContainer::loadFrom(char const*, char const*)+0xe8>
c0013fde:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0013fe4:	0f 8e d8 00 00 00    	jle    c00140c2 <EnvVarContainer::loadFrom(char const*, char const*)+0x1c0>
c0013fea:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0013fee:	83 ec 0c             	sub    esp,0xc
c0013ff1:	8d 78 01             	lea    edi,[eax+0x1]
c0013ff4:	57                   	push   edi
c0013ff5:	e8 c9 59 ff ff       	call   c00099c3 <malloc>
c0013ffa:	2b 74 24 18          	sub    esi,DWORD PTR [esp+0x18]
c0013ffe:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0014002:	8d 56 04             	lea    edx,[esi+0x4]
c0014005:	89 14 24             	mov    DWORD PTR [esp],edx
c0014008:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001400c:	e8 b2 59 ff ff       	call   c00099c3 <malloc>
c0014011:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0014015:	83 c4 0c             	add    esp,0xc
c0014018:	57                   	push   edi
c0014019:	6a 00                	push   0x0
c001401b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001401f:	e8 60 c6 fe ff       	call   c0000684 <memset>
c0014024:	8d 74 24 30          	lea    esi,[esp+0x30]
c0014028:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001402c:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0014030:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0014032:	83 c4 0c             	add    esp,0xc
c0014035:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0014039:	52                   	push   edx
c001403a:	6a 00                	push   0x0
c001403c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0014040:	e8 3f c6 fe ff       	call   c0000684 <memset>
c0014045:	8d 74 24 30          	lea    esi,[esp+0x30]
c0014049:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c001404d:	89 34 24             	mov    DWORD PTR [esp],esi
c0014050:	e8 4b c6 fe ff       	call   c00006a0 <strlen>
c0014055:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c0014059:	89 c1                	mov    ecx,eax
c001405b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001405d:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0014060:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0014063:	40                   	inc    eax
c0014064:	83 c4 10             	add    esp,0x10
c0014067:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c001406a:	85 d2                	test   edx,edx
c001406c:	75 0c                	jne    c001407a <EnvVarContainer::loadFrom(char const*, char const*)+0x178>
c001406e:	83 ec 0c             	sub    esp,0xc
c0014071:	6a 08                	push   0x8
c0014073:	e8 4b 59 ff ff       	call   c00099c3 <malloc>
c0014078:	eb 0c                	jmp    c0014086 <EnvVarContainer::loadFrom(char const*, char const*)+0x184>
c001407a:	c1 e0 03             	shl    eax,0x3
c001407d:	51                   	push   ecx
c001407e:	51                   	push   ecx
c001407f:	50                   	push   eax
c0014080:	52                   	push   edx
c0014081:	e8 29 59 ff ff       	call   c00099af <realloc>
c0014086:	83 c4 10             	add    esp,0x10
c0014089:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c001408c:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001408f:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c0014092:	8d 74 24 18          	lea    esi,[esp+0x18]
c0014096:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c001409a:	b9 08 00 00 00       	mov    ecx,0x8
c001409f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00140a1:	31 f6                	xor    esi,esi
c00140a3:	50                   	push   eax
c00140a4:	68 00 01 00 00       	push   0x100
c00140a9:	6a 00                	push   0x0
c00140ab:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00140af:	50                   	push   eax
c00140b0:	e8 cf c5 fe ff       	call   c0000684 <memset>
c00140b5:	83 c4 10             	add    esp,0x10
c00140b8:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00140c0:	eb 0f                	jmp    c00140d1 <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c00140c2:	3c 3d                	cmp    al,0x3d
c00140c4:	74 07                	je     c00140cd <EnvVarContainer::loadFrom(char const*, char const*)+0x1cb>
c00140c6:	88 44 34 20          	mov    BYTE PTR [esp+esi*1+0x20],al
c00140ca:	46                   	inc    esi
c00140cb:	eb 04                	jmp    c00140d1 <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c00140cd:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c00140d1:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00140d6:	0f 85 c6 fe ff ff    	jne    c0013fa2 <EnvVarContainer::loadFrom(char const*, char const*)+0xa0>
c00140dc:	81 c4 2c 01 00 00    	add    esp,0x12c
c00140e2:	5b                   	pop    ebx
c00140e3:	5e                   	pop    esi
c00140e4:	5f                   	pop    edi
c00140e5:	5d                   	pop    ebp
c00140e6:	c3                   	ret    
c00140e7:	90                   	nop

c00140e8 <EnvVarContainer::__loadSystem()>:
c00140e8:	83 ec 10             	sub    esp,0x10
c00140eb:	68 40 5e 02 c0       	push   0xc0025e40
c00140f0:	68 bd 42 02 c0       	push   0xc00242bd
c00140f5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00140f9:	e8 04 fe ff ff       	call   c0013f02 <EnvVarContainer::loadFrom(char const*, char const*)>
c00140fe:	83 c4 1c             	add    esp,0x1c
c0014101:	c3                   	ret    

c0014102 <EnvVarContainer::__loadUser()>:
c0014102:	c3                   	ret    
c0014103:	90                   	nop

c0014104 <EnvVarContainer::EnvVarContainer(Process*)>:
c0014104:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014108:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001410e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014112:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0014116:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0014119:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001411d:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0014124:	90                   	nop
c0014125:	c3                   	ret    

c0014126 <EnvVarContainer::~EnvVarContainer()>:
c0014126:	83 ec 0c             	sub    esp,0xc
c0014129:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001412d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0014130:	85 c0                	test   eax,eax
c0014132:	74 1d                	je     c0014151 <EnvVarContainer::~EnvVarContainer()+0x2b>
c0014134:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014138:	8b 00                	mov    eax,DWORD PTR [eax]
c001413a:	85 c0                	test   eax,eax
c001413c:	74 13                	je     c0014151 <EnvVarContainer::~EnvVarContainer()+0x2b>
c001413e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014142:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0014145:	83 ec 0c             	sub    esp,0xc
c0014148:	50                   	push   eax
c0014149:	e8 85 58 ff ff       	call   c00099d3 <free>
c001414e:	83 c4 10             	add    esp,0x10
c0014151:	90                   	nop
c0014152:	83 c4 0c             	add    esp,0xc
c0014155:	c3                   	ret    

c0014156 <Krnl::getEnv(Process*, char const*)>:
c0014156:	53                   	push   ebx
c0014157:	83 ec 08             	sub    esp,0x8
c001415a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001415e:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0014162:	39 05 50 79 02 c0    	cmp    DWORD PTR ds:0xc0027950,eax
c0014168:	74 04                	je     c001416e <Krnl::getEnv(Process*, char const*)+0x18>
c001416a:	85 c0                	test   eax,eax
c001416c:	75 0b                	jne    c0014179 <Krnl::getEnv(Process*, char const*)+0x23>
c001416e:	a1 34 6f 02 c0       	mov    eax,ds:0xc0026f34
c0014173:	85 c0                	test   eax,eax
c0014175:	75 19                	jne    c0014190 <Krnl::getEnv(Process*, char const*)+0x3a>
c0014177:	eb 27                	jmp    c00141a0 <Krnl::getEnv(Process*, char const*)+0x4a>
c0014179:	52                   	push   edx
c001417a:	52                   	push   edx
c001417b:	53                   	push   ebx
c001417c:	ff b0 1a 07 00 00    	push   DWORD PTR [eax+0x71a]
c0014182:	e8 79 fc ff ff       	call   c0013e00 <EnvVarContainer::getEnv(char const*)>
c0014187:	83 c4 10             	add    esp,0x10
c001418a:	85 c0                	test   eax,eax
c001418c:	75 28                	jne    c00141b6 <Krnl::getEnv(Process*, char const*)+0x60>
c001418e:	eb de                	jmp    c001416e <Krnl::getEnv(Process*, char const*)+0x18>
c0014190:	52                   	push   edx
c0014191:	52                   	push   edx
c0014192:	53                   	push   ebx
c0014193:	50                   	push   eax
c0014194:	e8 67 fc ff ff       	call   c0013e00 <EnvVarContainer::getEnv(char const*)>
c0014199:	83 c4 10             	add    esp,0x10
c001419c:	85 c0                	test   eax,eax
c001419e:	75 16                	jne    c00141b6 <Krnl::getEnv(Process*, char const*)+0x60>
c00141a0:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c00141a4:	a1 38 6f 02 c0       	mov    eax,ds:0xc0026f38
c00141a9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00141ad:	83 c4 08             	add    esp,0x8
c00141b0:	5b                   	pop    ebx
c00141b1:	e9 4a fc ff ff       	jmp    c0013e00 <EnvVarContainer::getEnv(char const*)>
c00141b6:	83 c4 08             	add    esp,0x8
c00141b9:	5b                   	pop    ebx
c00141ba:	c3                   	ret    

c00141bb <Krnl::setEnvSystem(char const*, char const*)>:
c00141bb:	83 ec 10             	sub    esp,0x10
c00141be:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00141c2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00141c6:	ff 35 38 6f 02 c0    	push   DWORD PTR ds:0xc0026f38
c00141cc:	e8 6d fc ff ff       	call   c0013e3e <EnvVarContainer::setEnv(char const*, char const*)>
c00141d1:	83 c4 1c             	add    esp,0x1c
c00141d4:	c3                   	ret    

c00141d5 <Krnl::setEnvUser(char const*, char const*)>:
c00141d5:	a1 34 6f 02 c0       	mov    eax,ds:0xc0026f34
c00141da:	85 c0                	test   eax,eax
c00141dc:	74 15                	je     c00141f3 <Krnl::setEnvUser(char const*, char const*)+0x1e>
c00141de:	83 ec 10             	sub    esp,0x10
c00141e1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00141e5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00141e9:	50                   	push   eax
c00141ea:	e8 4f fc ff ff       	call   c0013e3e <EnvVarContainer::setEnv(char const*, char const*)>
c00141ef:	83 c4 1c             	add    esp,0x1c
c00141f2:	c3                   	ret    
c00141f3:	c3                   	ret    

c00141f4 <Krnl::setEnvProcess(Process*, char const*, char const*)>:
c00141f4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00141f8:	8b 80 1a 07 00 00    	mov    eax,DWORD PTR [eax+0x71a]
c00141fe:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014202:	e9 37 fc ff ff       	jmp    c0013e3e <EnvVarContainer::setEnv(char const*, char const*)>

c0014207 <Krnl::deleteEnvSystem(char const*)>:
c0014207:	c3                   	ret    

c0014208 <Krnl::deleteEnvUser(char const*)>:
c0014208:	c3                   	ret    

c0014209 <Krnl::deleteEnvProcess(Process*, char const*)>:
c0014209:	c3                   	ret    

c001420a <Krnl::newProcessEnv(Process*)>:
c001420a:	83 ec 28             	sub    esp,0x28
c001420d:	6a 0c                	push   0xc
c001420f:	e8 af 57 ff ff       	call   c00099c3 <malloc>
c0014214:	5a                   	pop    edx
c0014215:	59                   	pop    ecx
c0014216:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001421a:	50                   	push   eax
c001421b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001421f:	e8 e0 fe ff ff       	call   c0014104 <EnvVarContainer::EnvVarContainer(Process*)>
c0014224:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014228:	83 c4 2c             	add    esp,0x2c
c001422b:	c3                   	ret    

c001422c <Krnl::copyProcessEnv(Process*, Process*)>:
c001422c:	57                   	push   edi
c001422d:	56                   	push   esi
c001422e:	53                   	push   ebx
c001422f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014233:	83 ec 0c             	sub    esp,0xc
c0014236:	8b b8 1a 07 00 00    	mov    edi,DWORD PTR [eax+0x71a]
c001423c:	6a 0c                	push   0xc
c001423e:	e8 80 57 ff ff       	call   c00099c3 <malloc>
c0014243:	89 c3                	mov    ebx,eax
c0014245:	58                   	pop    eax
c0014246:	5a                   	pop    edx
c0014247:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001424b:	53                   	push   ebx
c001424c:	e8 b3 fe ff ff       	call   c0014104 <EnvVarContainer::EnvVarContainer(Process*)>
c0014251:	8b 07                	mov    eax,DWORD PTR [edi]
c0014253:	89 03                	mov    DWORD PTR [ebx],eax
c0014255:	c1 e0 03             	shl    eax,0x3
c0014258:	89 04 24             	mov    DWORD PTR [esp],eax
c001425b:	e8 63 57 ff ff       	call   c00099c3 <malloc>
c0014260:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0014263:	8b 0f                	mov    ecx,DWORD PTR [edi]
c0014265:	8b 77 04             	mov    esi,DWORD PTR [edi+0x4]
c0014268:	c1 e1 03             	shl    ecx,0x3
c001426b:	89 c7                	mov    edi,eax
c001426d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001426f:	83 c4 10             	add    esp,0x10
c0014272:	89 d8                	mov    eax,ebx
c0014274:	5b                   	pop    ebx
c0014275:	5e                   	pop    esi
c0014276:	5f                   	pop    edi
c0014277:	c3                   	ret    

c0014278 <Krnl::loadSystemEnv()>:
c0014278:	53                   	push   ebx
c0014279:	83 ec 14             	sub    esp,0x14
c001427c:	6a 0c                	push   0xc
c001427e:	e8 40 57 ff ff       	call   c00099c3 <malloc>
c0014283:	89 c3                	mov    ebx,eax
c0014285:	58                   	pop    eax
c0014286:	5a                   	pop    edx
c0014287:	ff 35 50 79 02 c0    	push   DWORD PTR ds:0xc0027950
c001428d:	53                   	push   ebx
c001428e:	e8 71 fe ff ff       	call   c0014104 <EnvVarContainer::EnvVarContainer(Process*)>
c0014293:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014296:	89 1d 38 6f 02 c0    	mov    DWORD PTR ds:0xc0026f38,ebx
c001429c:	e8 47 fe ff ff       	call   c00140e8 <EnvVarContainer::__loadSystem()>
c00142a1:	83 c4 18             	add    esp,0x18
c00142a4:	5b                   	pop    ebx
c00142a5:	c3                   	ret    

c00142a6 <Krnl::loadUserEnv()>:
c00142a6:	53                   	push   ebx
c00142a7:	83 ec 14             	sub    esp,0x14
c00142aa:	6a 0c                	push   0xc
c00142ac:	e8 12 57 ff ff       	call   c00099c3 <malloc>
c00142b1:	89 c3                	mov    ebx,eax
c00142b3:	58                   	pop    eax
c00142b4:	5a                   	pop    edx
c00142b5:	ff 35 50 79 02 c0    	push   DWORD PTR ds:0xc0027950
c00142bb:	53                   	push   ebx
c00142bc:	e8 43 fe ff ff       	call   c0014104 <EnvVarContainer::EnvVarContainer(Process*)>
c00142c1:	89 1d 34 6f 02 c0    	mov    DWORD PTR ds:0xc0026f34,ebx
c00142c7:	83 c4 18             	add    esp,0x18
c00142ca:	5b                   	pop    ebx
c00142cb:	c3                   	ret    

c00142cc <Krnl::flushEnv()>:
c00142cc:	c3                   	ret    

c00142cd <Krnl::getProcessTotalEnvCount(Process*)>:
c00142cd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00142d1:	8b 15 34 6f 02 c0    	mov    edx,DWORD PTR ds:0xc0026f34
c00142d7:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c00142dd:	a1 38 6f 02 c0       	mov    eax,ds:0xc0026f38
c00142e2:	8b 00                	mov    eax,DWORD PTR [eax]
c00142e4:	03 01                	add    eax,DWORD PTR [ecx]
c00142e6:	85 d2                	test   edx,edx
c00142e8:	74 02                	je     c00142ec <Krnl::getProcessTotalEnvCount(Process*)+0x1f>
c00142ea:	03 02                	add    eax,DWORD PTR [edx]
c00142ec:	c3                   	ret    

c00142ed <Krnl::getProcessEnvPair(Process*, int)>:
c00142ed:	57                   	push   edi
c00142ee:	56                   	push   esi
c00142ef:	8b 35 34 6f 02 c0    	mov    esi,DWORD PTR ds:0xc0026f34
c00142f5:	53                   	push   ebx
c00142f6:	85 f6                	test   esi,esi
c00142f8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00142fc:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014300:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c0014306:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001430a:	8b 01                	mov    eax,DWORD PTR [ecx]
c001430c:	75 16                	jne    c0014324 <Krnl::getProcessEnvPair(Process*, int)+0x37>
c001430e:	39 c2                	cmp    edx,eax
c0014310:	7c 16                	jl     c0014328 <Krnl::getProcessEnvPair(Process*, int)+0x3b>
c0014312:	8b 0d 38 6f 02 c0    	mov    ecx,DWORD PTR ds:0xc0026f38
c0014318:	8b 31                	mov    esi,DWORD PTR [ecx]
c001431a:	01 c6                	add    esi,eax
c001431c:	39 d6                	cmp    esi,edx
c001431e:	7e 3c                	jle    c001435c <Krnl::getProcessEnvPair(Process*, int)+0x6f>
c0014320:	29 c2                	sub    edx,eax
c0014322:	eb 04                	jmp    c0014328 <Krnl::getProcessEnvPair(Process*, int)+0x3b>
c0014324:	39 c2                	cmp    edx,eax
c0014326:	7d 05                	jge    c001432d <Krnl::getProcessEnvPair(Process*, int)+0x40>
c0014328:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c001432b:	eb 20                	jmp    c001434d <Krnl::getProcessEnvPair(Process*, int)+0x60>
c001432d:	8b 3e                	mov    edi,DWORD PTR [esi]
c001432f:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0014332:	39 d1                	cmp    ecx,edx
c0014334:	7e 04                	jle    c001433a <Krnl::getProcessEnvPair(Process*, int)+0x4d>
c0014336:	29 c2                	sub    edx,eax
c0014338:	eb 10                	jmp    c001434a <Krnl::getProcessEnvPair(Process*, int)+0x5d>
c001433a:	8b 35 38 6f 02 c0    	mov    esi,DWORD PTR ds:0xc0026f38
c0014340:	03 0e                	add    ecx,DWORD PTR [esi]
c0014342:	39 d1                	cmp    ecx,edx
c0014344:	7e 16                	jle    c001435c <Krnl::getProcessEnvPair(Process*, int)+0x6f>
c0014346:	29 c2                	sub    edx,eax
c0014348:	29 fa                	sub    edx,edi
c001434a:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001434d:	8d 14 d0             	lea    edx,[eax+edx*8]
c0014350:	8b 02                	mov    eax,DWORD PTR [edx]
c0014352:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c0014355:	89 03                	mov    DWORD PTR [ebx],eax
c0014357:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c001435a:	eb 1d                	jmp    c0014379 <Krnl::getProcessEnvPair(Process*, int)+0x8c>
c001435c:	83 ec 0c             	sub    esp,0xc
c001435f:	68 df 42 02 c0       	push   0xc00242df
c0014364:	e8 18 00 00 00       	call   c0014381 <Krnl::panic(char const*)>
c0014369:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c001436f:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0014376:	83 c4 10             	add    esp,0x10
c0014379:	89 d8                	mov    eax,ebx
c001437b:	5b                   	pop    ebx
c001437c:	5e                   	pop    esi
c001437d:	5f                   	pop    edi
c001437e:	c2 04 00             	ret    0x4

c0014381 <Krnl::panic(char const*)>:
c0014381:	55                   	push   ebp
c0014382:	89 e5                	mov    ebp,esp
c0014384:	53                   	push   ebx
c0014385:	83 ec 10             	sub    esp,0x10
c0014388:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c001438b:	fa                   	cli    
c001438c:	c6 05 44 6f 02 c0 01 	mov    BYTE PTR ds:0xc0026f44,0x1
c0014393:	53                   	push   ebx
c0014394:	e8 84 56 ff ff       	call   c0009a1d <Krnl::setBootMessage(char const*)>
c0014399:	58                   	pop    eax
c001439a:	c6 05 40 58 02 c0 00 	mov    BYTE PTR ds:0xc0025840,0x0
c00143a1:	5a                   	pop    edx
c00143a2:	53                   	push   ebx
c00143a3:	68 f9 42 02 c0       	push   0xc00242f9
c00143a8:	e8 12 87 ff ff       	call   c000cabf <Dbg::kprintf(char const*, ...)>
c00143ad:	59                   	pop    ecx
c00143ae:	a1 50 79 02 c0       	mov    eax,ds:0xc0027950
c00143b3:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c00143b9:	e8 5d 64 ff ff       	call   c000a81b <setActiveTerminal(VgaText*)>
c00143be:	83 c4 0c             	add    esp,0xc
c00143c1:	a1 50 79 02 c0       	mov    eax,ds:0xc0027950
c00143c6:	6a 01                	push   0x1
c00143c8:	6a 0f                	push   0xf
c00143ca:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c00143d0:	e8 a5 62 ff ff       	call   c000a67a <VgaText::setDefaultColours(VgaColour, VgaColour)>
c00143d5:	58                   	pop    eax
c00143d6:	a1 50 79 02 c0       	mov    eax,ds:0xc0027950
c00143db:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c00143e1:	e8 b6 67 ff ff       	call   c000ab9c <VgaText::clearScreen()>
c00143e6:	58                   	pop    eax
c00143e7:	a1 50 79 02 c0       	mov    eax,ds:0xc0027950
c00143ec:	5a                   	pop    edx
c00143ed:	68 12 43 02 c0       	push   0xc0024312
c00143f2:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c00143f8:	e8 2b 69 ff ff       	call   c000ad28 <VgaText::puts(char const*)>
c00143fd:	59                   	pop    ecx
c00143fe:	58                   	pop    eax
c00143ff:	a1 50 79 02 c0       	mov    eax,ds:0xc0027950
c0014404:	68 b8 43 02 c0       	push   0xc00243b8
c0014409:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001440f:	e8 14 69 ff ff       	call   c000ad28 <VgaText::puts(char const*)>
c0014414:	58                   	pop    eax
c0014415:	a1 50 79 02 c0       	mov    eax,ds:0xc0027950
c001441a:	5a                   	pop    edx
c001441b:	68 2e 43 02 c0       	push   0xc002432e
c0014420:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0014426:	e8 fd 68 ff ff       	call   c000ad28 <VgaText::puts(char const*)>
c001442b:	59                   	pop    ecx
c001442c:	58                   	pop    eax
c001442d:	a1 50 79 02 c0       	mov    eax,ds:0xc0027950
c0014432:	53                   	push   ebx
c0014433:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0014439:	e8 ea 68 ff ff       	call   c000ad28 <VgaText::puts(char const*)>
c001443e:	58                   	pop    eax
c001443f:	a1 50 79 02 c0       	mov    eax,ds:0xc0027950
c0014444:	5a                   	pop    edx
c0014445:	68 4e 43 02 c0       	push   0xc002434e
c001444a:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0014450:	e8 d3 68 ff ff       	call   c000ad28 <VgaText::puts(char const*)>
c0014455:	a1 40 6f 02 c0       	mov    eax,ds:0xc0026f40
c001445a:	83 c4 10             	add    esp,0x10
c001445d:	85 c0                	test   eax,eax
c001445f:	74 02                	je     c0014463 <Krnl::panic(char const*)+0xe2>
c0014461:	ff d0                	call   eax
c0014463:	83 ec 0c             	sub    esp,0xc
c0014466:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0014469:	e8 af 30 00 00       	call   c001751d <Thr::getDriverNameFromAddress(unsigned long)>
c001446e:	83 c4 10             	add    esp,0x10
c0014471:	89 c3                	mov    ebx,eax
c0014473:	85 c0                	test   eax,eax
c0014475:	0f 84 4e 02 00 00    	je     c00146c9 <Krnl::panic(char const*)+0x348>
c001447b:	83 ec 08             	sub    esp,0x8
c001447e:	a1 50 79 02 c0       	mov    eax,ds:0xc0027950
c0014483:	68 f4 43 02 c0       	push   0xc00243f4
c0014488:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001448e:	e8 95 68 ff ff       	call   c000ad28 <VgaText::puts(char const*)>
c0014493:	58                   	pop    eax
c0014494:	a1 50 79 02 c0       	mov    eax,ds:0xc0027950
c0014499:	5a                   	pop    edx
c001449a:	68 2e 43 02 c0       	push   0xc002432e
c001449f:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c00144a5:	e8 7e 68 ff ff       	call   c000ad28 <VgaText::puts(char const*)>
c00144aa:	59                   	pop    ecx
c00144ab:	58                   	pop    eax
c00144ac:	a1 50 79 02 c0       	mov    eax,ds:0xc0027950
c00144b1:	53                   	push   ebx
c00144b2:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c00144b8:	e8 6b 68 ff ff       	call   c000ad28 <VgaText::puts(char const*)>
c00144bd:	83 c4 10             	add    esp,0x10
c00144c0:	83 ec 08             	sub    esp,0x8
c00144c3:	a1 50 79 02 c0       	mov    eax,ds:0xc0027950
c00144c8:	68 4d 43 02 c0       	push   0xc002434d
c00144cd:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c00144d3:	e8 50 68 ff ff       	call   c000ad28 <VgaText::puts(char const*)>
c00144d8:	58                   	pop    eax
c00144d9:	a1 50 79 02 c0       	mov    eax,ds:0xc0027950
c00144de:	5a                   	pop    edx
c00144df:	68 4c 44 02 c0       	push   0xc002444c
c00144e4:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c00144ea:	e8 39 68 ff ff       	call   c000ad28 <VgaText::puts(char const*)>
c00144ef:	59                   	pop    ecx
c00144f0:	a1 50 79 02 c0       	mov    eax,ds:0xc0027950
c00144f5:	5b                   	pop    ebx
c00144f6:	68 8c 44 02 c0       	push   0xc002448c
c00144fb:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0014501:	e8 22 68 ff ff       	call   c000ad28 <VgaText::puts(char const*)>
c0014506:	58                   	pop    eax
c0014507:	a1 50 79 02 c0       	mov    eax,ds:0xc0027950
c001450c:	5a                   	pop    edx
c001450d:	68 39 43 02 c0       	push   0xc0024339
c0014512:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0014518:	e8 0b 68 ff ff       	call   c000ad28 <VgaText::puts(char const*)>
c001451d:	59                   	pop    ecx
c001451e:	5b                   	pop    ebx
c001451f:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0014522:	68 51 43 02 c0       	push   0xc0024351
c0014527:	e8 93 85 ff ff       	call   c000cabf <Dbg::kprintf(char const*, ...)>
c001452c:	58                   	pop    eax
c001452d:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0014530:	5a                   	pop    edx
c0014531:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0014534:	68 5a 43 02 c0       	push   0xc002435a
c0014539:	e8 81 85 ff ff       	call   c000cabf <Dbg::kprintf(char const*, ...)>
c001453e:	59                   	pop    ecx
c001453f:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0014542:	5b                   	pop    ebx
c0014543:	8b 00                	mov    eax,DWORD PTR [eax]
c0014545:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0014548:	68 63 43 02 c0       	push   0xc0024363
c001454d:	e8 6d 85 ff ff       	call   c000cabf <Dbg::kprintf(char const*, ...)>
c0014552:	58                   	pop    eax
c0014553:	a1 50 79 02 c0       	mov    eax,ds:0xc0027950
c0014558:	5a                   	pop    edx
c0014559:	68 d0 44 02 c0       	push   0xc00244d0
c001455e:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0014564:	e8 bf 67 ff ff       	call   c000ad28 <VgaText::puts(char const*)>
c0014569:	59                   	pop    ecx
c001456a:	a1 50 79 02 c0       	mov    eax,ds:0xc0027950
c001456f:	5b                   	pop    ebx
c0014570:	68 6c 43 02 c0       	push   0xc002436c
c0014575:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001457b:	e8 a8 67 ff ff       	call   c000ad28 <VgaText::puts(char const*)>
c0014580:	0f 20 c0             	mov    eax,cr0
c0014583:	5a                   	pop    edx
c0014584:	59                   	pop    ecx
c0014585:	50                   	push   eax
c0014586:	a1 50 79 02 c0       	mov    eax,ds:0xc0027950
c001458b:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0014591:	e8 4c 67 ff ff       	call   c000ace2 <VgaText::putx(unsigned int)>
c0014596:	5b                   	pop    ebx
c0014597:	58                   	pop    eax
c0014598:	a1 50 79 02 c0       	mov    eax,ds:0xc0027950
c001459d:	68 76 43 02 c0       	push   0xc0024376
c00145a2:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c00145a8:	e8 7b 67 ff ff       	call   c000ad28 <VgaText::puts(char const*)>
c00145ad:	0f 20 d0             	mov    eax,cr2
c00145b0:	5a                   	pop    edx
c00145b1:	59                   	pop    ecx
c00145b2:	50                   	push   eax
c00145b3:	a1 50 79 02 c0       	mov    eax,ds:0xc0027950
c00145b8:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c00145be:	e8 1f 67 ff ff       	call   c000ace2 <VgaText::putx(unsigned int)>
c00145c3:	5b                   	pop    ebx
c00145c4:	58                   	pop    eax
c00145c5:	a1 50 79 02 c0       	mov    eax,ds:0xc0027950
c00145ca:	68 80 43 02 c0       	push   0xc0024380
c00145cf:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c00145d5:	e8 4e 67 ff ff       	call   c000ad28 <VgaText::puts(char const*)>
c00145da:	0f 20 d8             	mov    eax,cr3
c00145dd:	5a                   	pop    edx
c00145de:	59                   	pop    ecx
c00145df:	50                   	push   eax
c00145e0:	a1 50 79 02 c0       	mov    eax,ds:0xc0027950
c00145e5:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c00145eb:	e8 f2 66 ff ff       	call   c000ace2 <VgaText::putx(unsigned int)>
c00145f0:	5b                   	pop    ebx
c00145f1:	58                   	pop    eax
c00145f2:	a1 50 79 02 c0       	mov    eax,ds:0xc0027950
c00145f7:	68 93 43 02 c0       	push   0xc0024393
c00145fc:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0014602:	e8 21 67 ff ff       	call   c000ad28 <VgaText::puts(char const*)>
c0014607:	0f 20 e0             	mov    eax,cr4
c001460a:	5a                   	pop    edx
c001460b:	59                   	pop    ecx
c001460c:	50                   	push   eax
c001460d:	a1 50 79 02 c0       	mov    eax,ds:0xc0027950
c0014612:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0014618:	e8 c5 66 ff ff       	call   c000ace2 <VgaText::putx(unsigned int)>
c001461d:	5b                   	pop    ebx
c001461e:	58                   	pop    eax
c001461f:	a1 50 79 02 c0       	mov    eax,ds:0xc0027950
c0014624:	68 9d 43 02 c0       	push   0xc002439d
c0014629:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001462f:	e8 f4 66 ff ff       	call   c000ad28 <VgaText::puts(char const*)>
c0014634:	5a                   	pop    edx
c0014635:	a1 50 79 02 c0       	mov    eax,ds:0xc0027950
c001463a:	59                   	pop    ecx
c001463b:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014641:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0014644:	50                   	push   eax
c0014645:	e8 98 66 ff ff       	call   c000ace2 <VgaText::putx(unsigned int)>
c001464a:	5b                   	pop    ebx
c001464b:	58                   	pop    eax
c001464c:	a1 50 79 02 c0       	mov    eax,ds:0xc0027950
c0014651:	68 b4 43 02 c0       	push   0xc00243b4
c0014656:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001465c:	e8 c7 66 ff ff       	call   c000ad28 <VgaText::puts(char const*)>
c0014661:	5a                   	pop    edx
c0014662:	a1 50 79 02 c0       	mov    eax,ds:0xc0027950
c0014667:	59                   	pop    ecx
c0014668:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001466e:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0014671:	ff 72 04             	push   DWORD PTR [edx+0x4]
c0014674:	50                   	push   eax
c0014675:	e8 68 66 ff ff       	call   c000ace2 <VgaText::putx(unsigned int)>
c001467a:	5b                   	pop    ebx
c001467b:	58                   	pop    eax
c001467c:	a1 50 79 02 c0       	mov    eax,ds:0xc0027950
c0014681:	68 b4 43 02 c0       	push   0xc00243b4
c0014686:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001468c:	e8 97 66 ff ff       	call   c000ad28 <VgaText::puts(char const*)>
c0014691:	a1 50 79 02 c0       	mov    eax,ds:0xc0027950
c0014696:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0014699:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001469f:	8b 12                	mov    edx,DWORD PTR [edx]
c00146a1:	59                   	pop    ecx
c00146a2:	5b                   	pop    ebx
c00146a3:	ff 72 04             	push   DWORD PTR [edx+0x4]
c00146a6:	50                   	push   eax
c00146a7:	e8 36 66 ff ff       	call   c000ace2 <VgaText::putx(unsigned int)>
c00146ac:	83 c4 10             	add    esp,0x10
c00146af:	b2 fe                	mov    dl,0xfe
c00146b1:	e4 60                	in     al,0x60
c00146b3:	3c 1c                	cmp    al,0x1c
c00146b5:	74 04                	je     c00146bb <Krnl::panic(char const*)+0x33a>
c00146b7:	3c 5a                	cmp    al,0x5a
c00146b9:	75 f6                	jne    c00146b1 <Krnl::panic(char const*)+0x330>
c00146bb:	e4 64                	in     al,0x64
c00146bd:	a8 02                	test   al,0x2
c00146bf:	75 fa                	jne    c00146bb <Krnl::panic(char const*)+0x33a>
c00146c1:	88 d0                	mov    al,dl
c00146c3:	e6 64                	out    0x64,al
c00146c5:	fa                   	cli    
c00146c6:	f4                   	hlt    
c00146c7:	eb e8                	jmp    c00146b1 <Krnl::panic(char const*)+0x330>
c00146c9:	50                   	push   eax
c00146ca:	50                   	push   eax
c00146cb:	a1 50 79 02 c0       	mov    eax,ds:0xc0027950
c00146d0:	68 20 44 02 c0       	push   0xc0024420
c00146d5:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c00146db:	e8 48 66 ff ff       	call   c000ad28 <VgaText::puts(char const*)>
c00146e0:	58                   	pop    eax
c00146e1:	a1 50 79 02 c0       	mov    eax,ds:0xc0027950
c00146e6:	5a                   	pop    edx
c00146e7:	68 2e 43 02 c0       	push   0xc002432e
c00146ec:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c00146f2:	e8 31 66 ff ff       	call   c000ad28 <VgaText::puts(char const*)>
c00146f7:	59                   	pop    ecx
c00146f8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00146fd:	5b                   	pop    ebx
c00146fe:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014701:	83 c0 0c             	add    eax,0xc
c0014704:	50                   	push   eax
c0014705:	a1 50 79 02 c0       	mov    eax,ds:0xc0027950
c001470a:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0014710:	e8 13 66 ff ff       	call   c000ad28 <VgaText::puts(char const*)>
c0014715:	83 c4 10             	add    esp,0x10
c0014718:	e9 a3 fd ff ff       	jmp    c00144c0 <Krnl::panic(char const*)+0x13f>
c001471d:	66 90                	xchg   ax,ax
c001471f:	90                   	nop

c0014720 <Net::switchEndian16(unsigned short)>:
c0014720:	83 ec 04             	sub    esp,0x4
c0014723:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0014727:	66 89 04 24          	mov    WORD PTR [esp],ax
c001472b:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c001472f:	c1 f8 08             	sar    eax,0x8
c0014732:	89 c2                	mov    edx,eax
c0014734:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0014738:	c1 e0 08             	shl    eax,0x8
c001473b:	09 d0                	or     eax,edx
c001473d:	83 c4 04             	add    esp,0x4
c0014740:	c3                   	ret    
c0014741:	8d 76 00             	lea    esi,[esi+0x0]

c0014744 <Net::switchEndian32(unsigned int)>:
c0014744:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014748:	c1 e8 18             	shr    eax,0x18
c001474b:	89 c2                	mov    edx,eax
c001474d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014751:	c1 e0 08             	shl    eax,0x8
c0014754:	25 00 00 ff 00       	and    eax,0xff0000
c0014759:	09 c2                	or     edx,eax
c001475b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001475f:	c1 e8 08             	shr    eax,0x8
c0014762:	25 00 ff 00 00       	and    eax,0xff00
c0014767:	09 c2                	or     edx,eax
c0014769:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001476d:	c1 e0 18             	shl    eax,0x18
c0014770:	09 d0                	or     eax,edx
c0014772:	c3                   	ret    
c0014773:	90                   	nop

c0014774 <Net::crc32Calc(unsigned char*, int)>:
c0014774:	83 ec 10             	sub    esp,0x10
c0014777:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001477c:	75 0a                	jne    c0014788 <Net::crc32Calc(unsigned char*, int)+0x14>
c001477e:	b8 00 00 00 00       	mov    eax,0x0
c0014783:	e9 8c 00 00 00       	jmp    c0014814 <Net::crc32Calc(unsigned char*, int)+0xa0>
c0014788:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c001478d:	7f 09                	jg     c0014798 <Net::crc32Calc(unsigned char*, int)+0x24>
c001478f:	b8 00 00 00 00       	mov    eax,0x0
c0014794:	eb 7e                	jmp    c0014814 <Net::crc32Calc(unsigned char*, int)+0xa0>
c0014796:	66 90                	xchg   ax,ax
c0014798:	c7 44 24 04 ff ff ff ff 	mov    DWORD PTR [esp+0x4],0xffffffff
c00147a0:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00147a8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00147ac:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c00147b0:	7d 5a                	jge    c001480c <Net::crc32Calc(unsigned char*, int)+0x98>
c00147b2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00147b6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00147ba:	01 d0                	add    eax,edx
c00147bc:	8a 00                	mov    al,BYTE PTR [eax]
c00147be:	0f b6 c0             	movzx  eax,al
c00147c1:	31 44 24 04          	xor    DWORD PTR [esp+0x4],eax
c00147c5:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00147cd:	8d 76 00             	lea    esi,[esi+0x0]
c00147d0:	83 7c 24 0c 07       	cmp    DWORD PTR [esp+0xc],0x7
c00147d5:	7f 2d                	jg     c0014804 <Net::crc32Calc(unsigned char*, int)+0x90>
c00147d7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00147db:	83 e0 01             	and    eax,0x1
c00147de:	74 10                	je     c00147f0 <Net::crc32Calc(unsigned char*, int)+0x7c>
c00147e0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00147e4:	d1 e8                	shr    eax,1
c00147e6:	35 20 83 b8 ed       	xor    eax,0xedb88320
c00147eb:	eb 0b                	jmp    c00147f8 <Net::crc32Calc(unsigned char*, int)+0x84>
c00147ed:	8d 76 00             	lea    esi,[esi+0x0]
c00147f0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00147f4:	d1 e8                	shr    eax,1
c00147f6:	66 90                	xchg   ax,ax
c00147f8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00147fc:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0014800:	eb ce                	jmp    c00147d0 <Net::crc32Calc(unsigned char*, int)+0x5c>
c0014802:	66 90                	xchg   ax,ax
c0014804:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0014808:	eb 9e                	jmp    c00147a8 <Net::crc32Calc(unsigned char*, int)+0x34>
c001480a:	66 90                	xchg   ax,ax
c001480c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014810:	f7 d0                	not    eax
c0014812:	66 90                	xchg   ax,ax
c0014814:	83 c4 10             	add    esp,0x10
c0014817:	c3                   	ret    

c0014818 <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)>:
c0014818:	57                   	push   edi
c0014819:	56                   	push   esi
c001481a:	53                   	push   ebx
c001481b:	83 ec 60             	sub    esp,0x60
c001481e:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0014825:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0014829:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c0014831:	8d 76 00             	lea    esi,[esi+0x0]
c0014834:	83 7c 24 5c 06       	cmp    DWORD PTR [esp+0x5c],0x6
c0014839:	7f 1d                	jg     c0014858 <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)+0x40>
c001483b:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0014842:	8d 50 01             	lea    edx,[eax+0x1]
c0014845:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c001484c:	c6 00 aa             	mov    BYTE PTR [eax],0xaa
c001484f:	ff 44 24 5c          	inc    DWORD PTR [esp+0x5c]
c0014853:	eb df                	jmp    c0014834 <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)+0x1c>
c0014855:	8d 76 00             	lea    esi,[esi+0x0]
c0014858:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001485f:	8d 50 01             	lea    edx,[eax+0x1]
c0014862:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c0014869:	c6 00 ab             	mov    BYTE PTR [eax],0xab
c001486c:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0014873:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014877:	8d 44 24 7e          	lea    eax,[esp+0x7e]
c001487b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001487f:	c7 44 24 10 06 00 00 00 	mov    DWORD PTR [esp+0x10],0x6
c0014887:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001488b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001488f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014893:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0014897:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001489b:	89 c6                	mov    esi,eax
c001489d:	89 d7                	mov    edi,edx
c001489f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00148a1:	89 c8                	mov    eax,ecx
c00148a3:	89 fa                	mov    edx,edi
c00148a5:	89 f3                	mov    ebx,esi
c00148a7:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c00148ab:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00148af:	89 04 24             	mov    DWORD PTR [esp],eax
c00148b2:	83 84 24 88 00 00 00 06 	add    DWORD PTR [esp+0x88],0x6
c00148ba:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c00148c1:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00148c5:	8d 44 24 78          	lea    eax,[esp+0x78]
c00148c9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00148cd:	c7 44 24 2c 06 00 00 00 	mov    DWORD PTR [esp+0x2c],0x6
c00148d5:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00148d9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00148dd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00148e1:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00148e5:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c00148e9:	89 c6                	mov    esi,eax
c00148eb:	89 d7                	mov    edi,edx
c00148ed:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00148ef:	89 c8                	mov    eax,ecx
c00148f1:	89 fa                	mov    edx,edi
c00148f3:	89 f3                	mov    ebx,esi
c00148f5:	89 5c 24 24          	mov    DWORD PTR [esp+0x24],ebx
c00148f9:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c00148fd:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0014901:	83 84 24 88 00 00 00 06 	add    DWORD PTR [esp+0x88],0x6
c0014909:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0014910:	0f b7 c0             	movzx  eax,ax
c0014913:	c1 f8 08             	sar    eax,0x8
c0014916:	89 c1                	mov    ecx,eax
c0014918:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001491f:	8d 50 01             	lea    edx,[eax+0x1]
c0014922:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c0014929:	88 ca                	mov    dl,cl
c001492b:	88 10                	mov    BYTE PTR [eax],dl
c001492d:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0014934:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001493b:	8d 48 01             	lea    ecx,[eax+0x1]
c001493e:	89 8c 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],ecx
c0014945:	88 10                	mov    BYTE PTR [eax],dl
c0014947:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c001494b:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c001494f:	8b 8c 24 88 00 00 00 	mov    ecx,DWORD PTR [esp+0x88]
c0014956:	89 4c 24 50          	mov    DWORD PTR [esp+0x50],ecx
c001495a:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c001495e:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0014962:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0014966:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001496a:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001496e:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c0014972:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c0014976:	89 c6                	mov    esi,eax
c0014978:	89 d7                	mov    edi,edx
c001497a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001497c:	89 c8                	mov    eax,ecx
c001497e:	89 fa                	mov    edx,edi
c0014980:	89 f3                	mov    ebx,esi
c0014982:	89 5c 24 40          	mov    DWORD PTR [esp+0x40],ebx
c0014986:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c001498a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001498e:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0014992:	01 84 24 88 00 00 00 	add    DWORD PTR [esp+0x88],eax
c0014999:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c00149a0:	2b 44 24 58          	sub    eax,DWORD PTR [esp+0x58]
c00149a4:	50                   	push   eax
c00149a5:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00149a9:	e8 c6 fd ff ff       	call   c0014774 <Net::crc32Calc(unsigned char*, int)>
c00149ae:	83 c4 08             	add    esp,0x8
c00149b1:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c00149b5:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c00149b9:	c1 e8 18             	shr    eax,0x18
c00149bc:	89 c1                	mov    ecx,eax
c00149be:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c00149c5:	8d 50 01             	lea    edx,[eax+0x1]
c00149c8:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c00149cf:	88 ca                	mov    dl,cl
c00149d1:	88 10                	mov    BYTE PTR [eax],dl
c00149d3:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c00149d7:	c1 e8 10             	shr    eax,0x10
c00149da:	89 c1                	mov    ecx,eax
c00149dc:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c00149e3:	8d 50 01             	lea    edx,[eax+0x1]
c00149e6:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c00149ed:	88 ca                	mov    dl,cl
c00149ef:	88 10                	mov    BYTE PTR [eax],dl
c00149f1:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c00149f5:	c1 e8 08             	shr    eax,0x8
c00149f8:	89 c1                	mov    ecx,eax
c00149fa:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0014a01:	8d 50 01             	lea    edx,[eax+0x1]
c0014a04:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c0014a0b:	88 ca                	mov    dl,cl
c0014a0d:	88 10                	mov    BYTE PTR [eax],dl
c0014a0f:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0014a16:	8d 50 01             	lea    edx,[eax+0x1]
c0014a19:	89 94 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],edx
c0014a20:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c0014a24:	88 10                	mov    BYTE PTR [eax],dl
c0014a26:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0014a2a:	83 c4 60             	add    esp,0x60
c0014a2d:	5b                   	pop    ebx
c0014a2e:	5e                   	pop    esi
c0014a2f:	5f                   	pop    edi
c0014a30:	c3                   	ret    
c0014a31:	8d 76 00             	lea    esi,[esi+0x0]

c0014a34 <Net::unwrapEthernetFrame(unsigned char*, int)>:
c0014a34:	57                   	push   edi
c0014a35:	56                   	push   esi
c0014a36:	53                   	push   ebx
c0014a37:	83 ec 70             	sub    esp,0x70
c0014a3a:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0014a41:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c0014a45:	83 84 24 84 00 00 00 08 	add    DWORD PTR [esp+0x84],0x8
c0014a4d:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0014a54:	83 c0 0e             	add    eax,0xe
c0014a57:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0014a5b:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0014a62:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0014a66:	c7 44 24 2c 06 00 00 00 	mov    DWORD PTR [esp+0x2c],0x6
c0014a6e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0014a72:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0014a76:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014a7a:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0014a7e:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0014a82:	89 c6                	mov    esi,eax
c0014a84:	89 d7                	mov    edi,edx
c0014a86:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0014a88:	89 c8                	mov    eax,ecx
c0014a8a:	89 fa                	mov    edx,edi
c0014a8c:	89 f3                	mov    ebx,esi
c0014a8e:	89 5c 24 24          	mov    DWORD PTR [esp+0x24],ebx
c0014a92:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0014a96:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0014a9a:	83 84 24 84 00 00 00 06 	add    DWORD PTR [esp+0x84],0x6
c0014aa2:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0014aa9:	83 c0 08             	add    eax,0x8
c0014aac:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0014ab0:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0014ab7:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0014abb:	c7 44 24 48 06 00 00 00 	mov    DWORD PTR [esp+0x48],0x6
c0014ac3:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0014ac7:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0014acb:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0014acf:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c0014ad3:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c0014ad7:	89 c6                	mov    esi,eax
c0014ad9:	89 d7                	mov    edi,edx
c0014adb:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0014add:	89 c8                	mov    eax,ecx
c0014adf:	89 fa                	mov    edx,edi
c0014ae1:	89 f3                	mov    ebx,esi
c0014ae3:	89 5c 24 40          	mov    DWORD PTR [esp+0x40],ebx
c0014ae7:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0014aeb:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0014aef:	83 84 24 84 00 00 00 06 	add    DWORD PTR [esp+0x84],0x6
c0014af7:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0014afe:	8d 50 01             	lea    edx,[eax+0x1]
c0014b01:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c0014b08:	8a 00                	mov    al,BYTE PTR [eax]
c0014b0a:	0f b6 c0             	movzx  eax,al
c0014b0d:	66 89 44 24 6a       	mov    WORD PTR [esp+0x6a],ax
c0014b12:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0014b19:	8d 50 01             	lea    edx,[eax+0x1]
c0014b1c:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c0014b23:	8a 00                	mov    al,BYTE PTR [eax]
c0014b25:	0f b6 c0             	movzx  eax,al
c0014b28:	66 89 44 24 68       	mov    WORD PTR [esp+0x68],ax
c0014b2d:	0f b7 44 24 6a       	movzx  eax,WORD PTR [esp+0x6a]
c0014b32:	c1 e0 08             	shl    eax,0x8
c0014b35:	89 c2                	mov    edx,eax
c0014b37:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0014b3b:	09 d0                	or     eax,edx
c0014b3d:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c0014b44:	66 89 42 14          	mov    WORD PTR [edx+0x14],ax
c0014b48:	83 bc 24 88 00 00 00 ff 	cmp    DWORD PTR [esp+0x88],0xffffffff
c0014b50:	75 46                	jne    c0014b98 <Net::unwrapEthernetFrame(unsigned char*, int)+0x164>
c0014b52:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0014b59:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0014b5c:	66 3d dc 05          	cmp    ax,0x5dc
c0014b60:	77 16                	ja     c0014b78 <Net::unwrapEthernetFrame(unsigned char*, int)+0x144>
c0014b62:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0014b69:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0014b6c:	0f b7 c0             	movzx  eax,ax
c0014b6f:	89 84 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],eax
c0014b76:	eb 20                	jmp    c0014b98 <Net::unwrapEthernetFrame(unsigned char*, int)+0x164>
c0014b78:	83 ec 0c             	sub    esp,0xc
c0014b7b:	68 f8 44 02 c0       	push   0xc00244f8
c0014b80:	e8 3a 7f ff ff       	call   c000cabf <Dbg::kprintf(char const*, ...)>
c0014b85:	83 c4 10             	add    esp,0x10
c0014b88:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0014b8f:	c6 40 16 00          	mov    BYTE PTR [eax+0x16],0x0
c0014b93:	e9 18 01 00 00       	jmp    c0014cb0 <Net::unwrapEthernetFrame(unsigned char*, int)+0x27c>
c0014b98:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0014b9f:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c0014ba6:	8b 12                	mov    edx,DWORD PTR [edx]
c0014ba8:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0014bac:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0014bb3:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0014bb7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0014bbb:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014bbf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0014bc3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014bc7:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0014bcb:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0014bcf:	89 c6                	mov    esi,eax
c0014bd1:	89 d7                	mov    edi,edx
c0014bd3:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0014bd5:	89 c8                	mov    eax,ecx
c0014bd7:	89 fa                	mov    edx,edi
c0014bd9:	89 f3                	mov    ebx,esi
c0014bdb:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0014bdf:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0014be3:	89 04 24             	mov    DWORD PTR [esp],eax
c0014be6:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0014bed:	01 84 24 84 00 00 00 	add    DWORD PTR [esp+0x84],eax
c0014bf4:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0014bfb:	8d 50 01             	lea    edx,[eax+0x1]
c0014bfe:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c0014c05:	8a 00                	mov    al,BYTE PTR [eax]
c0014c07:	0f b6 c0             	movzx  eax,al
c0014c0a:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c0014c0e:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0014c15:	8d 50 01             	lea    edx,[eax+0x1]
c0014c18:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c0014c1f:	8a 00                	mov    al,BYTE PTR [eax]
c0014c21:	0f b6 c0             	movzx  eax,al
c0014c24:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0014c28:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0014c2f:	8d 50 01             	lea    edx,[eax+0x1]
c0014c32:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c0014c39:	8a 00                	mov    al,BYTE PTR [eax]
c0014c3b:	0f b6 c0             	movzx  eax,al
c0014c3e:	89 44 24 5c          	mov    DWORD PTR [esp+0x5c],eax
c0014c42:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0014c49:	8d 50 01             	lea    edx,[eax+0x1]
c0014c4c:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c0014c53:	8a 00                	mov    al,BYTE PTR [eax]
c0014c55:	0f b6 c0             	movzx  eax,al
c0014c58:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0014c5c:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c0014c60:	c1 e0 18             	shl    eax,0x18
c0014c63:	89 c2                	mov    edx,eax
c0014c65:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0014c69:	c1 e0 10             	shl    eax,0x10
c0014c6c:	09 c2                	or     edx,eax
c0014c6e:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0014c72:	c1 e0 08             	shl    eax,0x8
c0014c75:	09 d0                	or     eax,edx
c0014c77:	0b 44 24 58          	or     eax,DWORD PTR [esp+0x58]
c0014c7b:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0014c7f:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0014c86:	2b 44 24 6c          	sub    eax,DWORD PTR [esp+0x6c]
c0014c8a:	83 e8 04             	sub    eax,0x4
c0014c8d:	83 ec 08             	sub    esp,0x8
c0014c90:	50                   	push   eax
c0014c91:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c0014c95:	e8 da fa ff ff       	call   c0014774 <Net::crc32Calc(unsigned char*, int)>
c0014c9a:	83 c4 10             	add    esp,0x10
c0014c9d:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c0014ca1:	0f 94 c2             	sete   dl
c0014ca4:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0014cab:	88 50 16             	mov    BYTE PTR [eax+0x16],dl
c0014cae:	90                   	nop
c0014caf:	90                   	nop
c0014cb0:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0014cb7:	83 c4 70             	add    esp,0x70
c0014cba:	5b                   	pop    ebx
c0014cbb:	5e                   	pop    esi
c0014cbc:	5f                   	pop    edi
c0014cbd:	c2 04 00             	ret    0x4

c0014cc0 <Reg::findLineFromLoadedData(char*, char*, char*)>:
c0014cc0:	55                   	push   ebp
c0014cc1:	57                   	push   edi
c0014cc2:	56                   	push   esi
c0014cc3:	53                   	push   ebx
c0014cc4:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0014cca:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c0014cd1:	8a 1e                	mov    bl,BYTE PTR [esi]
c0014cd3:	8d 6e 01             	lea    ebp,[esi+0x1]
c0014cd6:	80 fb 40             	cmp    bl,0x40
c0014cd9:	75 1b                	jne    c0014cf6 <Reg::findLineFromLoadedData(char*, char*, char*)+0x36>
c0014cdb:	8a 16                	mov    dl,BYTE PTR [esi]
c0014cdd:	84 d2                	test   dl,dl
c0014cdf:	0f 84 f1 00 00 00    	je     c0014dd6 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0014ce5:	8d 46 01             	lea    eax,[esi+0x1]
c0014ce8:	80 fa 3a             	cmp    dl,0x3a
c0014ceb:	74 04                	je     c0014cf1 <Reg::findLineFromLoadedData(char*, char*, char*)+0x31>
c0014ced:	89 c6                	mov    esi,eax
c0014cef:	eb ea                	jmp    c0014cdb <Reg::findLineFromLoadedData(char*, char*, char*)+0x1b>
c0014cf1:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0014cf4:	89 c6                	mov    esi,eax
c0014cf6:	50                   	push   eax
c0014cf7:	6a 40                	push   0x40
c0014cf9:	6a 00                	push   0x0
c0014cfb:	8d 44 24 24          	lea    eax,[esp+0x24]
c0014cff:	50                   	push   eax
c0014d00:	e8 7f b9 fe ff       	call   c0000684 <memset>
c0014d05:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c0014d0c:	31 c0                	xor    eax,eax
c0014d0e:	83 c4 10             	add    esp,0x10
c0014d11:	8a 0f                	mov    cl,BYTE PTR [edi]
c0014d13:	84 c9                	test   cl,cl
c0014d15:	0f 84 bb 00 00 00    	je     c0014dd6 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0014d1b:	3d c7 00 00 00       	cmp    eax,0xc7
c0014d20:	0f 8f b0 00 00 00    	jg     c0014dd6 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0014d26:	80 f9 0a             	cmp    cl,0xa
c0014d29:	0f 85 98 00 00 00    	jne    c0014dc7 <Reg::findLineFromLoadedData(char*, char*, char*)+0x107>
c0014d2f:	c6 44 04 58 00       	mov    BYTE PTR [esp+eax*1+0x58],0x0
c0014d34:	8a 44 24 58          	mov    al,BYTE PTR [esp+0x58]
c0014d38:	a8 df                	test   al,0xdf
c0014d3a:	0f 94 c1             	sete   cl
c0014d3d:	3c 23                	cmp    al,0x23
c0014d3f:	0f 94 c2             	sete   dl
c0014d42:	08 d1                	or     cl,dl
c0014d44:	75 4a                	jne    c0014d90 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0014d46:	8d 50 f7             	lea    edx,[eax-0x9]
c0014d49:	80 fa 01             	cmp    dl,0x1
c0014d4c:	76 42                	jbe    c0014d90 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0014d4e:	3c 5b                	cmp    al,0x5b
c0014d50:	75 42                	jne    c0014d94 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd4>
c0014d52:	80 fb 40             	cmp    bl,0x40
c0014d55:	75 39                	jne    c0014d90 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0014d57:	83 ec 0c             	sub    esp,0xc
c0014d5a:	8d 54 24 65          	lea    edx,[esp+0x65]
c0014d5e:	52                   	push   edx
c0014d5f:	e8 3c b9 fe ff       	call   c00006a0 <strlen>
c0014d64:	83 c4 10             	add    esp,0x10
c0014d67:	83 f8 3f             	cmp    eax,0x3f
c0014d6a:	77 6a                	ja     c0014dd6 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0014d6c:	50                   	push   eax
c0014d6d:	50                   	push   eax
c0014d6e:	8d 54 24 61          	lea    edx,[esp+0x61]
c0014d72:	52                   	push   edx
c0014d73:	8d 54 24 24          	lea    edx,[esp+0x24]
c0014d77:	52                   	push   edx
c0014d78:	e8 c3 b9 fe ff       	call   c0000740 <strcpy>
c0014d7d:	58                   	pop    eax
c0014d7e:	8d 54 24 24          	lea    edx,[esp+0x24]
c0014d82:	52                   	push   edx
c0014d83:	e8 18 b9 fe ff       	call   c00006a0 <strlen>
c0014d88:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c0014d8d:	83 c4 10             	add    esp,0x10
c0014d90:	31 d2                	xor    edx,edx
c0014d92:	eb 3a                	jmp    c0014dce <Reg::findLineFromLoadedData(char*, char*, char*)+0x10e>
c0014d94:	80 fb 40             	cmp    bl,0x40
c0014d97:	74 06                	je     c0014d9f <Reg::findLineFromLoadedData(char*, char*, char*)+0xdf>
c0014d99:	8d 44 24 58          	lea    eax,[esp+0x58]
c0014d9d:	eb 20                	jmp    c0014dbf <Reg::findLineFromLoadedData(char*, char*, char*)+0xff>
c0014d9f:	50                   	push   eax
c0014da0:	50                   	push   eax
c0014da1:	55                   	push   ebp
c0014da2:	8d 44 24 24          	lea    eax,[esp+0x24]
c0014da6:	50                   	push   eax
c0014da7:	e8 20 ba fe ff       	call   c00007cc <strcmp>
c0014dac:	83 c4 10             	add    esp,0x10
c0014daf:	85 c0                	test   eax,eax
c0014db1:	75 dd                	jne    c0014d90 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0014db3:	eb e4                	jmp    c0014d99 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd9>
c0014db5:	8d 50 01             	lea    edx,[eax+0x1]
c0014db8:	80 f9 3d             	cmp    cl,0x3d
c0014dbb:	74 1d                	je     c0014dda <Reg::findLineFromLoadedData(char*, char*, char*)+0x11a>
c0014dbd:	89 d0                	mov    eax,edx
c0014dbf:	8a 08                	mov    cl,BYTE PTR [eax]
c0014dc1:	84 c9                	test   cl,cl
c0014dc3:	75 f0                	jne    c0014db5 <Reg::findLineFromLoadedData(char*, char*, char*)+0xf5>
c0014dc5:	eb 0f                	jmp    c0014dd6 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0014dc7:	8d 50 01             	lea    edx,[eax+0x1]
c0014dca:	88 4c 04 58          	mov    BYTE PTR [esp+eax*1+0x58],cl
c0014dce:	47                   	inc    edi
c0014dcf:	89 d0                	mov    eax,edx
c0014dd1:	e9 3b ff ff ff       	jmp    c0014d11 <Reg::findLineFromLoadedData(char*, char*, char*)+0x51>
c0014dd6:	31 c0                	xor    eax,eax
c0014dd8:	eb 33                	jmp    c0014e0d <Reg::findLineFromLoadedData(char*, char*, char*)+0x14d>
c0014dda:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0014dde:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0014de1:	50                   	push   eax
c0014de2:	50                   	push   eax
c0014de3:	8d 44 24 60          	lea    eax,[esp+0x60]
c0014de7:	50                   	push   eax
c0014de8:	56                   	push   esi
c0014de9:	e8 de b9 fe ff       	call   c00007cc <strcmp>
c0014dee:	83 c4 10             	add    esp,0x10
c0014df1:	85 c0                	test   eax,eax
c0014df3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0014df7:	75 97                	jne    c0014d90 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0014df9:	51                   	push   ecx
c0014dfa:	51                   	push   ecx
c0014dfb:	52                   	push   edx
c0014dfc:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c0014e03:	e8 38 b9 fe ff       	call   c0000740 <strcpy>
c0014e08:	83 c4 10             	add    esp,0x10
c0014e0b:	b0 01                	mov    al,0x1
c0014e0d:	81 c4 2c 01 00 00    	add    esp,0x12c
c0014e13:	5b                   	pop    ebx
c0014e14:	5e                   	pop    esi
c0014e15:	5f                   	pop    edi
c0014e16:	5d                   	pop    ebp
c0014e17:	c3                   	ret    

c0014e18 <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c0014e18:	57                   	push   edi
c0014e19:	56                   	push   esi
c0014e1a:	53                   	push   ebx
c0014e1b:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0014e21:	8b b4 24 3c 01 00 00 	mov    esi,DWORD PTR [esp+0x13c]
c0014e28:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c0014e2f:	53                   	push   ebx
c0014e30:	e8 6b b8 fe ff       	call   c00006a0 <strlen>
c0014e35:	89 34 24             	mov    DWORD PTR [esp],esi
c0014e38:	89 c7                	mov    edi,eax
c0014e3a:	e8 61 b8 fe ff       	call   c00006a0 <strlen>
c0014e3f:	83 c4 10             	add    esp,0x10
c0014e42:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c0014e46:	3d ff 00 00 00       	cmp    eax,0xff
c0014e4b:	0f 87 d3 00 00 00    	ja     c0014f24 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c0014e51:	57                   	push   edi
c0014e52:	57                   	push   edi
c0014e53:	56                   	push   esi
c0014e54:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0014e58:	56                   	push   esi
c0014e59:	e8 e2 b8 fe ff       	call   c0000740 <strcpy>
c0014e5e:	58                   	pop    eax
c0014e5f:	5a                   	pop    edx
c0014e60:	68 9a 48 02 c0       	push   0xc002489a
c0014e65:	56                   	push   esi
c0014e66:	e8 15 ba fe ff       	call   c0000880 <strcat>
c0014e6b:	59                   	pop    ecx
c0014e6c:	5f                   	pop    edi
c0014e6d:	53                   	push   ebx
c0014e6e:	56                   	push   esi
c0014e6f:	e8 0c ba fe ff       	call   c0000880 <strcat>
c0014e74:	58                   	pop    eax
c0014e75:	5a                   	pop    edx
c0014e76:	68 44 45 02 c0       	push   0xc0024544
c0014e7b:	56                   	push   esi
c0014e7c:	e8 ff b9 fe ff       	call   c0000880 <strcat>
c0014e81:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0014e88:	e8 36 4b ff ff       	call   c00099c3 <malloc>
c0014e8d:	83 c4 0c             	add    esp,0xc
c0014e90:	89 c3                	mov    ebx,eax
c0014e92:	ff 35 50 79 02 c0    	push   DWORD PTR ds:0xc0027950
c0014e98:	56                   	push   esi
c0014e99:	50                   	push   eax
c0014e9a:	e8 8b 81 ff ff       	call   c000d02a <File::File(char const*, Process*)>
c0014e9f:	83 c4 10             	add    esp,0x10
c0014ea2:	85 db                	test   ebx,ebx
c0014ea4:	74 7e                	je     c0014f24 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c0014ea6:	51                   	push   ecx
c0014ea7:	51                   	push   ecx
c0014ea8:	6a 01                	push   0x1
c0014eaa:	53                   	push   ebx
c0014eab:	e8 de 81 ff ff       	call   c000d08e <File::open(FileOpenMode)>
c0014eb0:	83 c4 10             	add    esp,0x10
c0014eb3:	85 c0                	test   eax,eax
c0014eb5:	74 08                	je     c0014ebf <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa7>
c0014eb7:	83 ec 0c             	sub    esp,0xc
c0014eba:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014ebc:	53                   	push   ebx
c0014ebd:	eb 5f                	jmp    c0014f1e <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c0014ebf:	52                   	push   edx
c0014ec0:	8d 44 24 17          	lea    eax,[esp+0x17]
c0014ec4:	50                   	push   eax
c0014ec5:	8d 44 24 20          	lea    eax,[esp+0x20]
c0014ec9:	50                   	push   eax
c0014eca:	53                   	push   ebx
c0014ecb:	e8 6a 84 ff ff       	call   c000d33a <File::stat(unsigned long long*, bool*)>
c0014ed0:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0014ed4:	83 c4 10             	add    esp,0x10
c0014ed7:	89 c1                	mov    ecx,eax
c0014ed9:	0b 4c 24 1c          	or     ecx,DWORD PTR [esp+0x1c]
c0014edd:	74 31                	je     c0014f10 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c0014edf:	83 ec 0c             	sub    esp,0xc
c0014ee2:	50                   	push   eax
c0014ee3:	e8 db 4a ff ff       	call   c00099c3 <malloc>
c0014ee8:	89 c6                	mov    esi,eax
c0014eea:	58                   	pop    eax
c0014eeb:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014eed:	8d 54 24 20          	lea    edx,[esp+0x20]
c0014ef1:	52                   	push   edx
c0014ef2:	56                   	push   esi
c0014ef3:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0014ef7:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0014efb:	53                   	push   ebx
c0014efc:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014eff:	83 c4 20             	add    esp,0x20
c0014f02:	85 c0                	test   eax,eax
c0014f04:	75 0a                	jne    c0014f10 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c0014f06:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014f0a:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0014f0e:	74 18                	je     c0014f28 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x110>
c0014f10:	83 ec 0c             	sub    esp,0xc
c0014f13:	53                   	push   ebx
c0014f14:	e8 d3 81 ff ff       	call   c000d0ec <File::close()>
c0014f19:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014f1b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014f1e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0014f21:	83 c4 10             	add    esp,0x10
c0014f24:	31 c0                	xor    eax,eax
c0014f26:	eb 3b                	jmp    c0014f63 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x14b>
c0014f28:	83 ec 0c             	sub    esp,0xc
c0014f2b:	53                   	push   ebx
c0014f2c:	e8 bb 81 ff ff       	call   c000d0ec <File::close()>
c0014f31:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014f33:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014f36:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0014f39:	83 c4 0c             	add    esp,0xc
c0014f3c:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c0014f43:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c0014f4a:	56                   	push   esi
c0014f4b:	e8 70 fd ff ff       	call   c0014cc0 <Reg::findLineFromLoadedData(char*, char*, char*)>
c0014f50:	89 34 24             	mov    DWORD PTR [esp],esi
c0014f53:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0014f57:	e8 77 4a ff ff       	call   c00099d3 <free>
c0014f5c:	83 c4 10             	add    esp,0x10
c0014f5f:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0014f63:	81 c4 20 01 00 00    	add    esp,0x120
c0014f69:	5b                   	pop    ebx
c0014f6a:	5e                   	pop    esi
c0014f6b:	5f                   	pop    edi
c0014f6c:	c3                   	ret    

c0014f6d <Reg::getLine(char*, char*, char*)>:
c0014f6d:	57                   	push   edi
c0014f6e:	56                   	push   esi
c0014f6f:	53                   	push   ebx
c0014f70:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014f74:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0014f78:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0014f7c:	57                   	push   edi
c0014f7d:	56                   	push   esi
c0014f7e:	53                   	push   ebx
c0014f7f:	68 49 45 02 c0       	push   0xc0024549
c0014f84:	e8 8f fe ff ff       	call   c0014e18 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c0014f89:	83 c4 10             	add    esp,0x10
c0014f8c:	84 c0                	test   al,al
c0014f8e:	75 10                	jne    c0014fa0 <Reg::getLine(char*, char*, char*)+0x33>
c0014f90:	57                   	push   edi
c0014f91:	56                   	push   esi
c0014f92:	53                   	push   ebx
c0014f93:	68 6e 45 02 c0       	push   0xc002456e
c0014f98:	e8 7b fe ff ff       	call   c0014e18 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c0014f9d:	83 c4 10             	add    esp,0x10
c0014fa0:	5b                   	pop    ebx
c0014fa1:	5e                   	pop    esi
c0014fa2:	5f                   	pop    edi
c0014fa3:	c3                   	ret    

c0014fa4 <Reg::readInt(char*, char*, int*)>:
c0014fa4:	55                   	push   ebp
c0014fa5:	57                   	push   edi
c0014fa6:	56                   	push   esi
c0014fa7:	53                   	push   ebx
c0014fa8:	81 ec f0 00 00 00    	sub    esp,0xf0
c0014fae:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c0014fb2:	57                   	push   edi
c0014fb3:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c0014fba:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c0014fc1:	e8 a7 ff ff ff       	call   c0014f6d <Reg::getLine(char*, char*, char*)>
c0014fc6:	83 c4 10             	add    esp,0x10
c0014fc9:	84 c0                	test   al,al
c0014fcb:	0f 84 b3 00 00 00    	je     c0015084 <Reg::readInt(char*, char*, int*)+0xe0>
c0014fd1:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0014fd5:	80 fa 2b             	cmp    dl,0x2b
c0014fd8:	74 0c                	je     c0014fe6 <Reg::readInt(char*, char*, int*)+0x42>
c0014fda:	80 fa 2d             	cmp    dl,0x2d
c0014fdd:	75 0e                	jne    c0014fed <Reg::readInt(char*, char*, int*)+0x49>
c0014fdf:	ba 01 00 00 00       	mov    edx,0x1
c0014fe4:	eb 0b                	jmp    c0014ff1 <Reg::readInt(char*, char*, int*)+0x4d>
c0014fe6:	ba 01 00 00 00       	mov    edx,0x1
c0014feb:	eb 02                	jmp    c0014fef <Reg::readInt(char*, char*, int*)+0x4b>
c0014fed:	31 d2                	xor    edx,edx
c0014fef:	31 c0                	xor    eax,eax
c0014ff1:	be 0a 00 00 00       	mov    esi,0xa
c0014ff6:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c0014ffb:	75 20                	jne    c001501d <Reg::readInt(char*, char*, int*)+0x79>
c0014ffd:	8a 4c 14 19          	mov    cl,BYTE PTR [esp+edx*1+0x19]
c0015001:	80 f9 78             	cmp    cl,0x78
c0015004:	75 0a                	jne    c0015010 <Reg::readInt(char*, char*, int*)+0x6c>
c0015006:	83 c2 02             	add    edx,0x2
c0015009:	be 10 00 00 00       	mov    esi,0x10
c001500e:	eb 0d                	jmp    c001501d <Reg::readInt(char*, char*, int*)+0x79>
c0015010:	80 f9 62             	cmp    cl,0x62
c0015013:	75 08                	jne    c001501d <Reg::readInt(char*, char*, int*)+0x79>
c0015015:	83 c2 02             	add    edx,0x2
c0015018:	be 02 00 00 00       	mov    esi,0x2
c001501d:	01 d7                	add    edi,edx
c001501f:	31 d2                	xor    edx,edx
c0015021:	8a 1f                	mov    bl,BYTE PTR [edi]
c0015023:	88 5c 24 0f          	mov    BYTE PTR [esp+0xf],bl
c0015027:	80 fb 0d             	cmp    bl,0xd
c001502a:	0f 94 c3             	sete   bl
c001502d:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0015032:	0f 94 c1             	sete   cl
c0015035:	08 cb                	or     bl,cl
c0015037:	75 3a                	jne    c0015073 <Reg::readInt(char*, char*, int*)+0xcf>
c0015039:	0f af d6             	imul   edx,esi
c001503c:	0f be 5c 24 0f       	movsx  ebx,BYTE PTR [esp+0xf]
c0015041:	83 fe 10             	cmp    esi,0x10
c0015044:	75 26                	jne    c001506c <Reg::readInt(char*, char*, int*)+0xc8>
c0015046:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001504a:	8d 69 bf             	lea    ebp,[ecx-0x41]
c001504d:	89 e9                	mov    ecx,ebp
c001504f:	80 f9 05             	cmp    cl,0x5
c0015052:	77 06                	ja     c001505a <Reg::readInt(char*, char*, int*)+0xb6>
c0015054:	8d 54 1a c9          	lea    edx,[edx+ebx*1-0x37]
c0015058:	eb 16                	jmp    c0015070 <Reg::readInt(char*, char*, int*)+0xcc>
c001505a:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001505e:	83 e9 61             	sub    ecx,0x61
c0015061:	80 f9 05             	cmp    cl,0x5
c0015064:	77 06                	ja     c001506c <Reg::readInt(char*, char*, int*)+0xc8>
c0015066:	8d 54 1a a9          	lea    edx,[edx+ebx*1-0x57]
c001506a:	eb 04                	jmp    c0015070 <Reg::readInt(char*, char*, int*)+0xcc>
c001506c:	8d 54 1a d0          	lea    edx,[edx+ebx*1-0x30]
c0015070:	47                   	inc    edi
c0015071:	eb ae                	jmp    c0015021 <Reg::readInt(char*, char*, int*)+0x7d>
c0015073:	84 c0                	test   al,al
c0015075:	74 02                	je     c0015079 <Reg::readInt(char*, char*, int*)+0xd5>
c0015077:	f7 da                	neg    edx
c0015079:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c0015080:	89 10                	mov    DWORD PTR [eax],edx
c0015082:	88 d8                	mov    al,bl
c0015084:	81 c4 ec 00 00 00    	add    esp,0xec
c001508a:	5b                   	pop    ebx
c001508b:	5e                   	pop    esi
c001508c:	5f                   	pop    edi
c001508d:	5d                   	pop    ebp
c001508e:	c3                   	ret    

c001508f <Reg::readString(char*, char*, char*, int)>:
c001508f:	57                   	push   edi
c0015090:	56                   	push   esi
c0015091:	53                   	push   ebx
c0015092:	81 ec d4 00 00 00    	sub    esp,0xd4
c0015098:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c001509f:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c00150a3:	57                   	push   edi
c00150a4:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c00150ab:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c00150b2:	e8 b6 fe ff ff       	call   c0014f6d <Reg::getLine(char*, char*, char*)>
c00150b7:	83 c4 10             	add    esp,0x10
c00150ba:	89 c6                	mov    esi,eax
c00150bc:	84 c0                	test   al,al
c00150be:	74 44                	je     c0015104 <Reg::readString(char*, char*, char*, int)+0x75>
c00150c0:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c00150c7:	31 c0                	xor    eax,eax
c00150c9:	4a                   	dec    edx
c00150ca:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c00150cd:	84 c9                	test   cl,cl
c00150cf:	74 0f                	je     c00150e0 <Reg::readString(char*, char*, char*, int)+0x51>
c00150d1:	39 c2                	cmp    edx,eax
c00150d3:	7e 0b                	jle    c00150e0 <Reg::readString(char*, char*, char*, int)+0x51>
c00150d5:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c00150d8:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c00150dd:	40                   	inc    eax
c00150de:	eb ea                	jmp    c00150ca <Reg::readString(char*, char*, char*, int)+0x3b>
c00150e0:	83 ec 0c             	sub    esp,0xc
c00150e3:	53                   	push   ebx
c00150e4:	e8 b7 b5 fe ff       	call   c00006a0 <strlen>
c00150e9:	83 c4 10             	add    esp,0x10
c00150ec:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c00150f1:	75 11                	jne    c0015104 <Reg::readString(char*, char*, char*, int)+0x75>
c00150f3:	83 ec 0c             	sub    esp,0xc
c00150f6:	53                   	push   ebx
c00150f7:	e8 a4 b5 fe ff       	call   c00006a0 <strlen>
c00150fc:	83 c4 10             	add    esp,0x10
c00150ff:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c0015104:	81 c4 d0 00 00 00    	add    esp,0xd0
c001510a:	89 f0                	mov    eax,esi
c001510c:	5b                   	pop    ebx
c001510d:	5e                   	pop    esi
c001510e:	5f                   	pop    edi
c001510f:	c3                   	ret    

c0015110 <Reg::readBool(char*, char*, bool*)>:
c0015110:	83 ec 20             	sub    esp,0x20
c0015113:	8d 44 24 10          	lea    eax,[esp+0x10]
c0015117:	50                   	push   eax
c0015118:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001511c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015120:	e8 7f fe ff ff       	call   c0014fa4 <Reg::readInt(char*, char*, int*)>
c0015125:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001512a:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001512e:	0f 95 02             	setne  BYTE PTR [edx]
c0015131:	83 c4 2c             	add    esp,0x2c
c0015134:	c3                   	ret    

c0015135 <Reg::readBoolWithDefault(char*, char*, bool)>:
c0015135:	53                   	push   ebx
c0015136:	83 ec 1c             	sub    esp,0x1c
c0015139:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c001513d:	8d 44 24 13          	lea    eax,[esp+0x13]
c0015141:	50                   	push   eax
c0015142:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015146:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001514a:	e8 c1 ff ff ff       	call   c0015110 <Reg::readBool(char*, char*, bool*)>
c001514f:	83 c4 10             	add    esp,0x10
c0015152:	84 c0                	test   al,al
c0015154:	74 04                	je     c001515a <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c0015156:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c001515a:	88 d8                	mov    al,bl
c001515c:	83 c4 18             	add    esp,0x18
c001515f:	5b                   	pop    ebx
c0015160:	c3                   	ret    

c0015161 <Reg::readIntWithDefault(char*, char*, int)>:
c0015161:	53                   	push   ebx
c0015162:	83 ec 1c             	sub    esp,0x1c
c0015165:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0015169:	8d 44 24 10          	lea    eax,[esp+0x10]
c001516d:	50                   	push   eax
c001516e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015172:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015176:	e8 29 fe ff ff       	call   c0014fa4 <Reg::readInt(char*, char*, int*)>
c001517b:	83 c4 10             	add    esp,0x10
c001517e:	84 c0                	test   al,al
c0015180:	74 04                	je     c0015186 <Reg::readIntWithDefault(char*, char*, int)+0x25>
c0015182:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0015186:	89 d8                	mov    eax,ebx
c0015188:	83 c4 18             	add    esp,0x18
c001518b:	5b                   	pop    ebx
c001518c:	c3                   	ret    

c001518d <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c001518d:	57                   	push   edi
c001518e:	56                   	push   esi
c001518f:	56                   	push   esi
c0015190:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0015194:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0015198:	56                   	push   esi
c0015199:	57                   	push   edi
c001519a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001519e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00151a2:	e8 e8 fe ff ff       	call   c001508f <Reg::readString(char*, char*, char*, int)>
c00151a7:	83 c4 10             	add    esp,0x10
c00151aa:	84 c0                	test   al,al
c00151ac:	75 1a                	jne    c00151c8 <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x3b>
c00151ae:	51                   	push   ecx
c00151af:	56                   	push   esi
c00151b0:	6a 00                	push   0x0
c00151b2:	57                   	push   edi
c00151b3:	e8 cc b4 fe ff       	call   c0000684 <memset>
c00151b8:	8d 4e ff             	lea    ecx,[esi-0x1]
c00151bb:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00151bf:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00151c1:	83 c4 10             	add    esp,0x10
c00151c4:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c00151c8:	89 f8                	mov    eax,edi
c00151ca:	5a                   	pop    edx
c00151cb:	5e                   	pop    esi
c00151cc:	5f                   	pop    edi
c00151cd:	c3                   	ret    

c00151ce <Sys::eject(regs*)>:
c00151ce:	83 ec 0c             	sub    esp,0xc
c00151d1:	83 ca ff             	or     edx,0xffffffff
c00151d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00151d8:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c00151db:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c00151e0:	83 e9 41             	sub    ecx,0x41
c00151e3:	83 f9 19             	cmp    ecx,0x19
c00151e6:	77 18                	ja     c0015200 <Sys::eject(regs*)+0x32>
c00151e8:	8b 0c 8d 20 6a 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd95e0]
c00151ef:	85 c9                	test   ecx,ecx
c00151f1:	74 0d                	je     c0015200 <Sys::eject(regs*)+0x32>
c00151f3:	83 ec 0c             	sub    esp,0xc
c00151f6:	51                   	push   ecx
c00151f7:	e8 76 af ff ff       	call   c0010172 <LogicalDisk::eject()>
c00151fc:	83 c4 10             	add    esp,0x10
c00151ff:	99                   	cdq    
c0015200:	83 c4 0c             	add    esp,0xc
c0015203:	c3                   	ret    

c0015204 <Sys::exit(regs*)>:
c0015204:	83 ec 18             	sub    esp,0x18
c0015207:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001520b:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001520e:	e8 59 36 00 00       	call   c001886c <terminateTask(int)>
c0015213:	83 c8 ff             	or     eax,0xffffffff
c0015216:	83 c4 1c             	add    esp,0x1c
c0015219:	89 c2                	mov    edx,eax
c001521b:	c3                   	ret    

c001521c <Sys::getCwd(regs*)>:
c001521c:	83 ec 10             	sub    esp,0x10
c001521f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0015223:	ff 70 28             	push   DWORD PTR [eax+0x28]
c0015226:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0015229:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001522e:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0015231:	e8 f6 7b ff ff       	call   c000ce2c <Fs::getcwd(Process*, char*, int)>
c0015236:	83 c4 1c             	add    esp,0x1c
c0015239:	99                   	cdq    
c001523a:	c3                   	ret    

c001523b <Sys::getPID(regs*)>:
c001523b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015240:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015243:	8b 00                	mov    eax,DWORD PTR [eax]
c0015245:	99                   	cdq    
c0015246:	c3                   	ret    

c0015247 <Sys::getRAMData(regs*)>:
c0015247:	8b 0d 98 64 02 c0    	mov    ecx,DWORD PTR ds:0xc0026498
c001524d:	69 05 94 64 02 c0 c8 00 00 00 	imul   eax,DWORD PTR ds:0xc0026494,0xc8
c0015257:	99                   	cdq    
c0015258:	f7 f9                	idiv   ecx
c001525a:	c1 e0 18             	shl    eax,0x18
c001525d:	09 c8                	or     eax,ecx
c001525f:	99                   	cdq    
c0015260:	c3                   	ret    

c0015261 <Sys::getVGAPtr(regs*)>:
c0015261:	55                   	push   ebp
c0015262:	57                   	push   edi
c0015263:	56                   	push   esi
c0015264:	53                   	push   ebx
c0015265:	83 ec 18             	sub    esp,0x18
c0015268:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001526c:	ff 75 28             	push   DWORD PTR [ebp+0x28]
c001526f:	e8 fc 30 00 00       	call   c0018370 <Thr::processFromPID(int)>
c0015274:	83 c4 10             	add    esp,0x10
c0015277:	89 c1                	mov    ecx,eax
c0015279:	b8 01 00 00 00       	mov    eax,0x1
c001527e:	85 c9                	test   ecx,ecx
c0015280:	74 59                	je     c00152db <Sys::getVGAPtr(regs*)+0x7a>
c0015282:	8b 99 06 05 00 00    	mov    ebx,DWORD PTR [ecx+0x506]
c0015288:	83 7d 24 00          	cmp    DWORD PTR [ebp+0x24],0x0
c001528c:	74 0c                	je     c001529a <Sys::getVGAPtr(regs*)+0x39>
c001528e:	83 ec 0c             	sub    esp,0xc
c0015291:	53                   	push   ebx
c0015292:	e8 84 55 ff ff       	call   c000a81b <setActiveTerminal(VgaText*)>
c0015297:	83 c4 10             	add    esp,0x10
c001529a:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c001529d:	8b 7d 20             	mov    edi,DWORD PTR [ebp+0x20]
c00152a0:	b9 a0 0f 00 00       	mov    ecx,0xfa0
c00152a5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00152a7:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00152aa:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c00152ad:	81 c3 82 00 00 00    	add    ebx,0x82
c00152b3:	89 90 a0 0f 00 00    	mov    DWORD PTR [eax+0xfa0],edx
c00152b9:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c00152bc:	8b 53 96             	mov    edx,DWORD PTR [ebx-0x6a]
c00152bf:	89 90 a4 0f 00 00    	mov    DWORD PTR [eax+0xfa4],edx
c00152c5:	50                   	push   eax
c00152c6:	50                   	push   eax
c00152c7:	53                   	push   ebx
c00152c8:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c00152cb:	05 a8 0f 00 00       	add    eax,0xfa8
c00152d0:	50                   	push   eax
c00152d1:	e8 6a b4 fe ff       	call   c0000740 <strcpy>
c00152d6:	83 c4 10             	add    esp,0x10
c00152d9:	31 c0                	xor    eax,eax
c00152db:	83 c4 0c             	add    esp,0xc
c00152de:	31 d2                	xor    edx,edx
c00152e0:	5b                   	pop    ebx
c00152e1:	5e                   	pop    esi
c00152e2:	5f                   	pop    edi
c00152e3:	5d                   	pop    ebp
c00152e4:	c3                   	ret    

c00152e5 <Sys::loadDLL(regs*)>:
c00152e5:	56                   	push   esi
c00152e6:	53                   	push   ebx
c00152e7:	31 d2                	xor    edx,edx
c00152e9:	51                   	push   ecx
c00152ea:	b8 01 00 00 00       	mov    eax,0x1
c00152ef:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00152f3:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c00152f7:	0f 84 8c 00 00 00    	je     c0015389 <Sys::loadDLL(regs*)+0xa4>
c00152fd:	83 ec 0c             	sub    esp,0xc
c0015300:	68 14 01 00 00       	push   0x114
c0015305:	e8 b9 46 ff ff       	call   c00099c3 <malloc>
c001530a:	83 c4 0c             	add    esp,0xc
c001530d:	89 c3                	mov    ebx,eax
c001530f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015314:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0015317:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001531a:	53                   	push   ebx
c001531b:	e8 0a 7d ff ff       	call   c000d02a <File::File(char const*, Process*)>
c0015320:	83 c4 10             	add    esp,0x10
c0015323:	31 d2                	xor    edx,edx
c0015325:	b8 02 00 00 00       	mov    eax,0x2
c001532a:	85 db                	test   ebx,ebx
c001532c:	74 5b                	je     c0015389 <Sys::loadDLL(regs*)+0xa4>
c001532e:	83 ec 0c             	sub    esp,0xc
c0015331:	53                   	push   ebx
c0015332:	e8 c5 7f ff ff       	call   c000d2fc <File::exists()>
c0015337:	83 c4 10             	add    esp,0x10
c001533a:	84 c0                	test   al,al
c001533c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001533e:	75 11                	jne    c0015351 <Sys::loadDLL(regs*)+0x6c>
c0015340:	83 ec 0c             	sub    esp,0xc
c0015343:	53                   	push   ebx
c0015344:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015347:	83 c4 10             	add    esp,0x10
c001534a:	b8 03 00 00 00       	mov    eax,0x3
c001534f:	eb 36                	jmp    c0015387 <Sys::loadDLL(regs*)+0xa2>
c0015351:	83 ec 0c             	sub    esp,0xc
c0015354:	53                   	push   ebx
c0015355:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015358:	58                   	pop    eax
c0015359:	5a                   	pop    edx
c001535a:	6a 00                	push   0x0
c001535c:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001535f:	e8 0a 22 00 00       	call   c001756e <Thr::loadDLL(char const*, bool)>
c0015364:	83 c4 10             	add    esp,0x10
c0015367:	89 c1                	mov    ecx,eax
c0015369:	31 d2                	xor    edx,edx
c001536b:	b8 04 00 00 00       	mov    eax,0x4
c0015370:	85 c9                	test   ecx,ecx
c0015372:	74 15                	je     c0015389 <Sys::loadDLL(regs*)+0xa4>
c0015374:	53                   	push   ebx
c0015375:	53                   	push   ebx
c0015376:	ff 35 68 64 02 c0    	push   DWORD PTR ds:0xc0026468
c001537c:	51                   	push   ecx
c001537d:	e8 1d 24 00 00       	call   c001779f <Thr::executeDLL(unsigned long, void*)>
c0015382:	83 c4 10             	add    esp,0x10
c0015385:	31 c0                	xor    eax,eax
c0015387:	31 d2                	xor    edx,edx
c0015389:	59                   	pop    ecx
c001538a:	5b                   	pop    ebx
c001538b:	5e                   	pop    esi
c001538c:	c3                   	ret    

c001538d <Sys::read(regs*)>:
c001538d:	57                   	push   edi
c001538e:	56                   	push   esi
c001538f:	53                   	push   ebx
c0015390:	83 ec 10             	sub    esp,0x10
c0015393:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0015397:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001539a:	83 f8 02             	cmp    eax,0x2
c001539d:	77 10                	ja     c00153af <Sys::read(regs*)+0x22>
c001539f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00153a4:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00153a7:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c00153ad:	eb 0e                	jmp    c00153bd <Sys::read(regs*)+0x30>
c00153af:	83 ec 0c             	sub    esp,0xc
c00153b2:	50                   	push   eax
c00153b3:	e8 df 61 ff ff       	call   c000b597 <getFromFileDescriptor(int)>
c00153b8:	83 c4 10             	add    esp,0x10
c00153bb:	89 c1                	mov    ecx,eax
c00153bd:	83 c8 ff             	or     eax,0xffffffff
c00153c0:	85 c9                	test   ecx,ecx
c00153c2:	89 c2                	mov    edx,eax
c00153c4:	74 28                	je     c00153ee <Sys::read(regs*)+0x61>
c00153c6:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00153ce:	31 ff                	xor    edi,edi
c00153d0:	83 ec 0c             	sub    esp,0xc
c00153d3:	8b 01                	mov    eax,DWORD PTR [ecx]
c00153d5:	8d 54 24 18          	lea    edx,[esp+0x18]
c00153d9:	52                   	push   edx
c00153da:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00153dd:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c00153e0:	57                   	push   edi
c00153e1:	56                   	push   esi
c00153e2:	51                   	push   ecx
c00153e3:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00153e6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00153ea:	83 c4 20             	add    esp,0x20
c00153ed:	99                   	cdq    
c00153ee:	83 c4 10             	add    esp,0x10
c00153f1:	5b                   	pop    ebx
c00153f2:	5e                   	pop    esi
c00153f3:	5f                   	pop    edi
c00153f4:	c3                   	ret    

c00153f5 <Sys::sbrk(regs*)>:
c00153f5:	56                   	push   esi
c00153f6:	53                   	push   ebx
c00153f7:	50                   	push   eax
c00153f8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00153fd:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015401:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015404:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c0015407:	8b 88 12 05 00 00    	mov    ecx,DWORD PTR [eax+0x512]
c001540d:	85 db                	test   ebx,ebx
c001540f:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c0015412:	74 02                	je     c0015416 <Sys::sbrk(regs*)+0x21>
c0015414:	79 06                	jns    c001541c <Sys::sbrk(regs*)+0x27>
c0015416:	89 f0                	mov    eax,esi
c0015418:	31 d2                	xor    edx,edx
c001541a:	eb 2a                	jmp    c0015446 <Sys::sbrk(regs*)+0x51>
c001541c:	83 c8 ff             	or     eax,0xffffffff
c001541f:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c0015425:	89 c2                	mov    edx,eax
c0015427:	77 1d                	ja     c0015446 <Sys::sbrk(regs*)+0x51>
c0015429:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c001542f:	50                   	push   eax
c0015430:	c1 ea 0c             	shr    edx,0xc
c0015433:	68 07 0c 00 00       	push   0xc07
c0015438:	52                   	push   edx
c0015439:	51                   	push   ecx
c001543a:	e8 57 6a ff ff       	call   c000be96 <VAS::allocatePages(int, int)>
c001543f:	89 f0                	mov    eax,esi
c0015441:	31 d2                	xor    edx,edx
c0015443:	83 c4 10             	add    esp,0x10
c0015446:	59                   	pop    ecx
c0015447:	5b                   	pop    ebx
c0015448:	5e                   	pop    esi
c0015449:	c3                   	ret    

c001544a <Sys::setCwd(regs*)>:
c001544a:	83 ec 14             	sub    esp,0x14
c001544d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0015451:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0015454:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015459:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c001545c:	e8 3a 7f ff ff       	call   c000d39b <Fs::setcwd(Process*, char*)>
c0015461:	83 c4 1c             	add    esp,0x1c
c0015464:	99                   	cdq    
c0015465:	c3                   	ret    

c0015466 <Sys::setTime(regs*)>:
c0015466:	55                   	push   ebp
c0015467:	31 c9                	xor    ecx,ecx
c0015469:	57                   	push   edi
c001546a:	bd 0c 00 00 00       	mov    ebp,0xc
c001546f:	56                   	push   esi
c0015470:	53                   	push   ebx
c0015471:	31 db                	xor    ebx,ebx
c0015473:	83 ec 10             	sub    esp,0x10
c0015476:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001547a:	8b 72 20             	mov    esi,DWORD PTR [edx+0x20]
c001547d:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c0015480:	8b 7a 24             	mov    edi,DWORD PTR [edx+0x24]
c0015483:	89 c2                	mov    edx,eax
c0015485:	66 81 ef 6c 07       	sub    di,0x76c
c001548a:	83 e2 1f             	and    edx,0x1f
c001548d:	c1 e7 10             	shl    edi,0x10
c0015490:	42                   	inc    edx
c0015491:	c1 e8 05             	shr    eax,0x5
c0015494:	88 d1                	mov    cl,dl
c0015496:	31 d2                	xor    edx,edx
c0015498:	f7 f5                	div    ebp
c001549a:	89 dd                	mov    ebp,ebx
c001549c:	88 d5                	mov    ch,dl
c001549e:	81 e5 ff ff 00 ff    	and    ebp,0xff00ffff
c00154a4:	0f b7 c1             	movzx  eax,cx
c00154a7:	31 d2                	xor    edx,edx
c00154a9:	09 f8                	or     eax,edi
c00154ab:	bf 3c 00 00 00       	mov    edi,0x3c
c00154b0:	89 c1                	mov    ecx,eax
c00154b2:	89 f0                	mov    eax,esi
c00154b4:	f7 f7                	div    edi
c00154b6:	c1 e2 10             	shl    edx,0x10
c00154b9:	09 d5                	or     ebp,edx
c00154bb:	31 d2                	xor    edx,edx
c00154bd:	89 eb                	mov    ebx,ebp
c00154bf:	f7 f7                	div    edi
c00154c1:	bf 10 0e 00 00       	mov    edi,0xe10
c00154c6:	88 d7                	mov    bh,dl
c00154c8:	89 f0                	mov    eax,esi
c00154ca:	31 d2                	xor    edx,edx
c00154cc:	f7 f7                	div    edi
c00154ce:	bf 18 00 00 00       	mov    edi,0x18
c00154d3:	31 d2                	xor    edx,edx
c00154d5:	f7 f7                	div    edi
c00154d7:	a1 68 64 02 c0       	mov    eax,ds:0xc0026468
c00154dc:	88 d3                	mov    bl,dl
c00154de:	53                   	push   ebx
c00154df:	51                   	push   ecx
c00154e0:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c00154e6:	e8 fb 86 ff ff       	call   c000dbe6 <Clock::setTimeInDatetimeLocal(datetime_t)>
c00154eb:	83 c4 1c             	add    esp,0x1c
c00154ee:	83 f0 01             	xor    eax,0x1
c00154f1:	5b                   	pop    ebx
c00154f2:	0f b6 c0             	movzx  eax,al
c00154f5:	5e                   	pop    esi
c00154f6:	31 d2                	xor    edx,edx
c00154f8:	5f                   	pop    edi
c00154f9:	5d                   	pop    ebp
c00154fa:	c3                   	ret    

c00154fb <Sys::timezone(regs*)>:
c00154fb:	53                   	push   ebx
c00154fc:	83 ec 08             	sub    esp,0x8
c00154ff:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0015503:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c0015507:	75 17                	jne    c0015520 <Sys::timezone(regs*)+0x25>
c0015509:	83 ec 0c             	sub    esp,0xc
c001550c:	68 89 45 02 c0       	push   0xc0024589
c0015511:	e8 a9 75 ff ff       	call   c000cabf <Dbg::kprintf(char const*, ...)>
c0015516:	83 c8 ff             	or     eax,0xffffffff
c0015519:	83 c4 10             	add    esp,0x10
c001551c:	89 c2                	mov    edx,eax
c001551e:	eb 20                	jmp    c0015540 <Sys::timezone(regs*)+0x45>
c0015520:	83 ec 0c             	sub    esp,0xc
c0015523:	68 9e 45 02 c0       	push   0xc002459e
c0015528:	e8 92 75 ff ff       	call   c000cabf <Dbg::kprintf(char const*, ...)>
c001552d:	58                   	pop    eax
c001552e:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0015531:	e8 12 84 ff ff       	call   c000d948 <User::loadClockSettings(int)>
c0015536:	83 c4 10             	add    esp,0x10
c0015539:	b8 01 00 00 00       	mov    eax,0x1
c001553e:	31 d2                	xor    edx,edx
c0015540:	83 c4 08             	add    esp,0x8
c0015543:	5b                   	pop    ebx
c0015544:	c3                   	ret    

c0015545 <Sys::write(regs*)>:
c0015545:	57                   	push   edi
c0015546:	56                   	push   esi
c0015547:	53                   	push   ebx
c0015548:	83 ec 10             	sub    esp,0x10
c001554b:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001554f:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0015552:	83 f8 02             	cmp    eax,0x2
c0015555:	77 10                	ja     c0015567 <Sys::write(regs*)+0x22>
c0015557:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001555c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001555f:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c0015565:	eb 0e                	jmp    c0015575 <Sys::write(regs*)+0x30>
c0015567:	83 ec 0c             	sub    esp,0xc
c001556a:	50                   	push   eax
c001556b:	e8 27 60 ff ff       	call   c000b597 <getFromFileDescriptor(int)>
c0015570:	83 c4 10             	add    esp,0x10
c0015573:	89 c1                	mov    ecx,eax
c0015575:	83 c8 ff             	or     eax,0xffffffff
c0015578:	85 c9                	test   ecx,ecx
c001557a:	89 c2                	mov    edx,eax
c001557c:	74 28                	je     c00155a6 <Sys::write(regs*)+0x61>
c001557e:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0015586:	31 ff                	xor    edi,edi
c0015588:	83 ec 0c             	sub    esp,0xc
c001558b:	8b 01                	mov    eax,DWORD PTR [ecx]
c001558d:	8d 54 24 18          	lea    edx,[esp+0x18]
c0015591:	52                   	push   edx
c0015592:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0015595:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c0015598:	57                   	push   edi
c0015599:	56                   	push   esi
c001559a:	51                   	push   ecx
c001559b:	ff 50 10             	call   DWORD PTR [eax+0x10]
c001559e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00155a2:	83 c4 20             	add    esp,0x20
c00155a5:	99                   	cdq    
c00155a6:	83 c4 10             	add    esp,0x10
c00155a9:	5b                   	pop    ebx
c00155aa:	5e                   	pop    esi
c00155ab:	5f                   	pop    edi
c00155ac:	c3                   	ret    

c00155ad <Sys::wsbe(regs*)>:
c00155ad:	57                   	push   edi
c00155ae:	b9 0b 00 00 00       	mov    ecx,0xb
c00155b3:	56                   	push   esi
c00155b4:	be dd 45 02 c0       	mov    esi,0xc00245dd
c00155b9:	53                   	push   ebx
c00155ba:	83 ec 30             	sub    esp,0x30
c00155bd:	8d 7c 24 04          	lea    edi,[esp+0x4]
c00155c1:	fc                   	cld    
c00155c2:	83 ec 0c             	sub    esp,0xc
c00155c5:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00155c7:	8d 7c 24 10          	lea    edi,[esp+0x10]
c00155cb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00155d0:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00155d3:	8b b0 06 05 00 00    	mov    esi,DWORD PTR [eax+0x506]
c00155d9:	8b 06                	mov    eax,DWORD PTR [esi]
c00155db:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c00155de:	57                   	push   edi
c00155df:	e8 bc b0 fe ff       	call   c00006a0 <strlen>
c00155e4:	5a                   	pop    edx
c00155e5:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00155e9:	52                   	push   edx
c00155ea:	31 d2                	xor    edx,edx
c00155ec:	57                   	push   edi
c00155ed:	52                   	push   edx
c00155ee:	50                   	push   eax
c00155ef:	56                   	push   esi
c00155f0:	ff d3                	call   ebx
c00155f2:	83 c4 14             	add    esp,0x14
c00155f5:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00155f9:	ff 70 24             	push   DWORD PTR [eax+0x24]
c00155fc:	e8 6b 32 00 00       	call   c001886c <terminateTask(int)>
c0015601:	83 c4 40             	add    esp,0x40
c0015604:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0015609:	5b                   	pop    ebx
c001560a:	31 d2                	xor    edx,edx
c001560c:	5e                   	pop    esi
c001560d:	5f                   	pop    edi
c001560e:	c3                   	ret    

c001560f <Sys::yield(regs*)>:
c001560f:	83 ec 0c             	sub    esp,0xc
c0015612:	fa                   	cli    
c0015613:	ff 05 28 79 02 c0    	inc    DWORD PTR ds:0xc0027928
c0015619:	e8 36 29 00 00       	call   c0017f54 <schedule()>
c001561e:	a1 28 79 02 c0       	mov    eax,ds:0xc0027928
c0015623:	48                   	dec    eax
c0015624:	a3 28 79 02 c0       	mov    ds:0xc0027928,eax
c0015629:	75 01                	jne    c001562c <Sys::yield(regs*)+0x1d>
c001562b:	fb                   	sti    
c001562c:	8b 15 8c 6a 02 c0    	mov    edx,DWORD PTR ds:0xc0026a8c
c0015632:	83 c4 0c             	add    esp,0xc
c0015635:	89 d0                	mov    eax,edx
c0015637:	c1 ea 11             	shr    edx,0x11
c001563a:	c1 e0 07             	shl    eax,0x7
c001563d:	25 80 30 0f 00       	and    eax,0xf3080
c0015642:	31 d0                	xor    eax,edx
c0015644:	31 d2                	xor    edx,edx
c0015646:	c3                   	ret    

c0015647 <sysCallSeekDir(regs*)>:
c0015647:	31 c0                	xor    eax,eax
c0015649:	31 d2                	xor    edx,edx
c001564b:	c3                   	ret    

c001564c <sysCallTellDir(regs*)>:
c001564c:	31 c0                	xor    eax,eax
c001564e:	31 d2                	xor    edx,edx
c0015650:	c3                   	ret    

c0015651 <sysCallVerify(regs*)>:
c0015651:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015655:	31 d2                	xor    edx,edx
c0015657:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001565a:	c3                   	ret    

c001565b <sysCallGetArgc(regs*)>:
c001565b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015660:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015663:	8b 80 16 05 00 00    	mov    eax,DWORD PTR [eax+0x516]
c0015669:	99                   	cdq    
c001566a:	c3                   	ret    

c001566b <sysFormatDisk(regs*)>:
c001566b:	56                   	push   esi
c001566c:	53                   	push   ebx
c001566d:	53                   	push   ebx
c001566e:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0015672:	8b 1d 94 65 02 c0    	mov    ebx,DWORD PTR ds:0xc0026594
c0015678:	eb 25                	jmp    c001569f <sysFormatDisk(regs*)+0x34>
c001567a:	83 ec 0c             	sub    esp,0xc
c001567d:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0015680:	8b 13                	mov    edx,DWORD PTR [ebx]
c0015682:	ff 76 28             	push   DWORD PTR [esi+0x28]
c0015685:	ff 76 24             	push   DWORD PTR [esi+0x24]
c0015688:	50                   	push   eax
c0015689:	ff 34 85 20 6a 02 c0 	push   DWORD PTR [eax*4-0x3ffd95e0]
c0015690:	53                   	push   ebx
c0015691:	ff 52 48             	call   DWORD PTR [edx+0x48]
c0015694:	83 c4 20             	add    esp,0x20
c0015697:	83 f8 08             	cmp    eax,0x8
c001569a:	75 12                	jne    c00156ae <sysFormatDisk(regs*)+0x43>
c001569c:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c001569f:	85 db                	test   ebx,ebx
c00156a1:	75 d7                	jne    c001567a <sysFormatDisk(regs*)+0xf>
c00156a3:	59                   	pop    ecx
c00156a4:	b8 03 00 00 00       	mov    eax,0x3
c00156a9:	31 d2                	xor    edx,edx
c00156ab:	5b                   	pop    ebx
c00156ac:	5e                   	pop    esi
c00156ad:	c3                   	ret    
c00156ae:	85 c0                	test   eax,eax
c00156b0:	74 1b                	je     c00156cd <sysFormatDisk(regs*)+0x62>
c00156b2:	83 f8 09             	cmp    eax,0x9
c00156b5:	74 0b                	je     c00156c2 <sysFormatDisk(regs*)+0x57>
c00156b7:	59                   	pop    ecx
c00156b8:	b8 02 00 00 00       	mov    eax,0x2
c00156bd:	31 d2                	xor    edx,edx
c00156bf:	5b                   	pop    ebx
c00156c0:	5e                   	pop    esi
c00156c1:	c3                   	ret    
c00156c2:	59                   	pop    ecx
c00156c3:	b8 01 00 00 00       	mov    eax,0x1
c00156c8:	31 d2                	xor    edx,edx
c00156ca:	5b                   	pop    ebx
c00156cb:	5e                   	pop    esi
c00156cc:	c3                   	ret    
c00156cd:	59                   	pop    ecx
c00156ce:	31 c0                	xor    eax,eax
c00156d0:	31 d2                	xor    edx,edx
c00156d2:	5b                   	pop    ebx
c00156d3:	5e                   	pop    esi
c00156d4:	c3                   	ret    

c00156d5 <sysSetDiskVolumeLabel(regs*)>:
c00156d5:	56                   	push   esi
c00156d6:	53                   	push   ebx
c00156d7:	53                   	push   ebx
c00156d8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00156dc:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c00156df:	83 f8 19             	cmp    eax,0x19
c00156e2:	77 2d                	ja     c0015711 <sysSetDiskVolumeLabel(regs*)+0x3c>
c00156e4:	8b 0c 85 20 6a 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd95e0]
c00156eb:	85 c9                	test   ecx,ecx
c00156ed:	74 22                	je     c0015711 <sysSetDiskVolumeLabel(regs*)+0x3c>
c00156ef:	8b 5a 24             	mov    ebx,DWORD PTR [edx+0x24]
c00156f2:	85 db                	test   ebx,ebx
c00156f4:	74 1b                	je     c0015711 <sysSetDiskVolumeLabel(regs*)+0x3c>
c00156f6:	8b 91 70 01 00 00    	mov    edx,DWORD PTR [ecx+0x170]
c00156fc:	85 d2                	test   edx,edx
c00156fe:	74 11                	je     c0015711 <sysSetDiskVolumeLabel(regs*)+0x3c>
c0015700:	8b 32                	mov    esi,DWORD PTR [edx]
c0015702:	53                   	push   ebx
c0015703:	50                   	push   eax
c0015704:	51                   	push   ecx
c0015705:	52                   	push   edx
c0015706:	ff 56 58             	call   DWORD PTR [esi+0x58]
c0015709:	83 c4 10             	add    esp,0x10
c001570c:	99                   	cdq    
c001570d:	59                   	pop    ecx
c001570e:	5b                   	pop    ebx
c001570f:	5e                   	pop    esi
c0015710:	c3                   	ret    
c0015711:	59                   	pop    ecx
c0015712:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0015717:	ba ff ff ff ff       	mov    edx,0xffffffff
c001571c:	5b                   	pop    ebx
c001571d:	5e                   	pop    esi
c001571e:	c3                   	ret    

c001571f <sysGetDiskVolumeLabel(regs*)>:
c001571f:	57                   	push   edi
c0015720:	56                   	push   esi
c0015721:	53                   	push   ebx
c0015722:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015726:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0015729:	83 fa 19             	cmp    edx,0x19
c001572c:	77 38                	ja     c0015766 <sysGetDiskVolumeLabel(regs*)+0x47>
c001572e:	8b 0c 95 20 6a 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffd95e0]
c0015735:	85 c9                	test   ecx,ecx
c0015737:	74 2d                	je     c0015766 <sysGetDiskVolumeLabel(regs*)+0x47>
c0015739:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c001573c:	85 db                	test   ebx,ebx
c001573e:	74 26                	je     c0015766 <sysGetDiskVolumeLabel(regs*)+0x47>
c0015740:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c0015743:	85 f6                	test   esi,esi
c0015745:	74 1f                	je     c0015766 <sysGetDiskVolumeLabel(regs*)+0x47>
c0015747:	8b 81 70 01 00 00    	mov    eax,DWORD PTR [ecx+0x170]
c001574d:	85 c0                	test   eax,eax
c001574f:	74 15                	je     c0015766 <sysGetDiskVolumeLabel(regs*)+0x47>
c0015751:	83 ec 0c             	sub    esp,0xc
c0015754:	8b 38                	mov    edi,DWORD PTR [eax]
c0015756:	56                   	push   esi
c0015757:	53                   	push   ebx
c0015758:	52                   	push   edx
c0015759:	51                   	push   ecx
c001575a:	50                   	push   eax
c001575b:	ff 57 54             	call   DWORD PTR [edi+0x54]
c001575e:	83 c4 20             	add    esp,0x20
c0015761:	99                   	cdq    
c0015762:	5b                   	pop    ebx
c0015763:	5e                   	pop    esi
c0015764:	5f                   	pop    edi
c0015765:	c3                   	ret    
c0015766:	5b                   	pop    ebx
c0015767:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001576c:	ba ff ff ff ff       	mov    edx,0xffffffff
c0015771:	5e                   	pop    esi
c0015772:	5f                   	pop    edi
c0015773:	c3                   	ret    

c0015774 <sysShutdown(regs*)>:
c0015774:	83 ec 0c             	sub    esp,0xc
c0015777:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001577b:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001577e:	85 c0                	test   eax,eax
c0015780:	74 18                	je     c001579a <sysShutdown(regs*)+0x26>
c0015782:	83 f8 01             	cmp    eax,0x1
c0015785:	74 38                	je     c00157bf <sysShutdown(regs*)+0x4b>
c0015787:	83 f8 02             	cmp    eax,0x2
c001578a:	74 24                	je     c00157b0 <sysShutdown(regs*)+0x3c>
c001578c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0015791:	ba ff ff ff ff       	mov    edx,0xffffffff
c0015796:	83 c4 0c             	add    esp,0xc
c0015799:	c3                   	ret    
c001579a:	a1 68 64 02 c0       	mov    eax,ds:0xc0026468
c001579f:	8b 10                	mov    edx,DWORD PTR [eax]
c00157a1:	6a 00                	push   0x0
c00157a3:	6a 00                	push   0x0
c00157a5:	6a 00                	push   0x0
c00157a7:	50                   	push   eax
c00157a8:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00157ab:	83 c4 10             	add    esp,0x10
c00157ae:	eb dc                	jmp    c001578c <sysShutdown(regs*)+0x18>
c00157b0:	a1 68 64 02 c0       	mov    eax,ds:0xc0026468
c00157b5:	8b 10                	mov    edx,DWORD PTR [eax]
c00157b7:	6a 00                	push   0x0
c00157b9:	6a 00                	push   0x0
c00157bb:	6a 01                	push   0x1
c00157bd:	eb e8                	jmp    c00157a7 <sysShutdown(regs*)+0x33>
c00157bf:	a1 a0 6a 02 c0       	mov    eax,ds:0xc0026aa0
c00157c4:	85 c0                	test   eax,eax
c00157c6:	74 02                	je     c00157ca <sysShutdown(regs*)+0x56>
c00157c8:	ff d0                	call   eax
c00157ca:	31 c0                	xor    eax,eax
c00157cc:	31 d2                	xor    edx,edx
c00157ce:	83 c4 0c             	add    esp,0xc
c00157d1:	c3                   	ret    

c00157d2 <sysCallRealpath(regs*)>:
c00157d2:	83 ec 0c             	sub    esp,0xc
c00157d5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00157d9:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c00157dc:	85 d2                	test   edx,edx
c00157de:	74 07                	je     c00157e7 <sysCallRealpath(regs*)+0x15>
c00157e0:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c00157e3:	85 c0                	test   eax,eax
c00157e5:	75 0b                	jne    c00157f2 <sysCallRealpath(regs*)+0x20>
c00157e7:	b8 01 00 00 00       	mov    eax,0x1
c00157ec:	31 d2                	xor    edx,edx
c00157ee:	83 c4 0c             	add    esp,0xc
c00157f1:	c3                   	ret    
c00157f2:	51                   	push   ecx
c00157f3:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c00157f9:	8b 49 3c             	mov    ecx,DWORD PTR [ecx+0x3c]
c00157fc:	81 c1 0c 01 00 00    	add    ecx,0x10c
c0015802:	51                   	push   ecx
c0015803:	52                   	push   edx
c0015804:	50                   	push   eax
c0015805:	e8 76 76 ff ff       	call   c000ce80 <Fs::standardiseFiles(char*, char const*, char const*)>
c001580a:	83 c4 10             	add    esp,0x10
c001580d:	31 c0                	xor    eax,eax
c001580f:	31 d2                	xor    edx,edx
c0015811:	83 c4 0c             	add    esp,0xc
c0015814:	c3                   	ret    

c0015815 <sysCallReadDir(regs*)>:
c0015815:	53                   	push   ebx
c0015816:	83 ec 18             	sub    esp,0x18
c0015819:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001581d:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0015820:	83 f8 02             	cmp    eax,0x2
c0015823:	76 60                	jbe    c0015885 <sysCallReadDir(regs*)+0x70>
c0015825:	81 7b 20 00 ff ff 0f 	cmp    DWORD PTR [ebx+0x20],0xfffff00
c001582c:	77 48                	ja     c0015876 <sysCallReadDir(regs*)+0x61>
c001582e:	83 ec 0c             	sub    esp,0xc
c0015831:	50                   	push   eax
c0015832:	e8 60 5d ff ff       	call   c000b597 <getFromFileDescriptor(int)>
c0015837:	83 c4 10             	add    esp,0x10
c001583a:	85 c0                	test   eax,eax
c001583c:	74 38                	je     c0015876 <sysCallReadDir(regs*)+0x61>
c001583e:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0015846:	83 ec 0c             	sub    esp,0xc
c0015849:	8b 10                	mov    edx,DWORD PTR [eax]
c001584b:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c001584f:	51                   	push   ecx
c0015850:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0015853:	6a 00                	push   0x0
c0015855:	68 10 01 00 00       	push   0x110
c001585a:	50                   	push   eax
c001585b:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001585e:	83 c4 20             	add    esp,0x20
c0015861:	85 c0                	test   eax,eax
c0015863:	74 29                	je     c001588e <sysCallReadDir(regs*)+0x79>
c0015865:	83 f8 07             	cmp    eax,0x7
c0015868:	74 1b                	je     c0015885 <sysCallReadDir(regs*)+0x70>
c001586a:	b8 02 00 00 00       	mov    eax,0x2
c001586f:	31 d2                	xor    edx,edx
c0015871:	83 c4 18             	add    esp,0x18
c0015874:	5b                   	pop    ebx
c0015875:	c3                   	ret    
c0015876:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001587b:	ba ff ff ff ff       	mov    edx,0xffffffff
c0015880:	83 c4 18             	add    esp,0x18
c0015883:	5b                   	pop    ebx
c0015884:	c3                   	ret    
c0015885:	b8 01 00 00 00       	mov    eax,0x1
c001588a:	31 d2                	xor    edx,edx
c001588c:	eb e3                	jmp    c0015871 <sysCallReadDir(regs*)+0x5c>
c001588e:	31 c0                	xor    eax,eax
c0015890:	31 d2                	xor    edx,edx
c0015892:	eb dd                	jmp    c0015871 <sysCallReadDir(regs*)+0x5c>

c0015894 <sysCallIsATTY(regs*)>:
c0015894:	83 ec 0c             	sub    esp,0xc
c0015897:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001589b:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001589e:	83 f8 02             	cmp    eax,0x2
c00158a1:	76 07                	jbe    c00158aa <sysCallIsATTY(regs*)+0x16>
c00158a3:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c00158a8:	75 26                	jne    c00158d0 <sysCallIsATTY(regs*)+0x3c>
c00158aa:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00158af:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00158b2:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00158b8:	85 c0                	test   eax,eax
c00158ba:	74 24                	je     c00158e0 <sysCallIsATTY(regs*)+0x4c>
c00158bc:	83 ec 0c             	sub    esp,0xc
c00158bf:	8b 10                	mov    edx,DWORD PTR [eax]
c00158c1:	50                   	push   eax
c00158c2:	ff 12                	call   DWORD PTR [edx]
c00158c4:	31 d2                	xor    edx,edx
c00158c6:	0f b6 c0             	movzx  eax,al
c00158c9:	83 c4 10             	add    esp,0x10
c00158cc:	83 c4 0c             	add    esp,0xc
c00158cf:	c3                   	ret    
c00158d0:	83 ec 0c             	sub    esp,0xc
c00158d3:	50                   	push   eax
c00158d4:	e8 be 5c ff ff       	call   c000b597 <getFromFileDescriptor(int)>
c00158d9:	83 c4 10             	add    esp,0x10
c00158dc:	85 c0                	test   eax,eax
c00158de:	75 dc                	jne    c00158bc <sysCallIsATTY(regs*)+0x28>
c00158e0:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00158e5:	ba ff ff ff ff       	mov    edx,0xffffffff
c00158ea:	83 c4 0c             	add    esp,0xc
c00158ed:	c3                   	ret    

c00158ee <sysCallSeek(regs*)>:
c00158ee:	53                   	push   ebx
c00158ef:	83 ec 08             	sub    esp,0x8
c00158f2:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00158f6:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00158f9:	8d 50 fd             	lea    edx,[eax-0x3]
c00158fc:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c0015902:	77 32                	ja     c0015936 <sysCallSeek(regs*)+0x48>
c0015904:	83 ec 0c             	sub    esp,0xc
c0015907:	50                   	push   eax
c0015908:	e8 8a 5c ff ff       	call   c000b597 <getFromFileDescriptor(int)>
c001590d:	83 c4 0c             	add    esp,0xc
c0015910:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0015913:	31 db                	xor    ebx,ebx
c0015915:	53                   	push   ebx
c0015916:	51                   	push   ecx
c0015917:	50                   	push   eax
c0015918:	e8 2f 78 ff ff       	call   c000d14c <File::seek(unsigned long long)>
c001591d:	83 c4 10             	add    esp,0x10
c0015920:	85 c0                	test   eax,eax
c0015922:	0f 95 c0             	setne  al
c0015925:	31 d2                	xor    edx,edx
c0015927:	0f b6 c0             	movzx  eax,al
c001592a:	f7 d8                	neg    eax
c001592c:	83 d2 00             	adc    edx,0x0
c001592f:	83 c4 08             	add    esp,0x8
c0015932:	f7 da                	neg    edx
c0015934:	5b                   	pop    ebx
c0015935:	c3                   	ret    
c0015936:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001593b:	ba ff ff ff ff       	mov    edx,0xffffffff
c0015940:	83 c4 08             	add    esp,0x8
c0015943:	5b                   	pop    ebx
c0015944:	c3                   	ret    

c0015945 <sysCallTell(regs*)>:
c0015945:	53                   	push   ebx
c0015946:	83 ec 08             	sub    esp,0x8
c0015949:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001594d:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0015950:	83 f8 02             	cmp    eax,0x2
c0015953:	76 4d                	jbe    c00159a2 <sysCallTell(regs*)+0x5d>
c0015955:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001595a:	76 19                	jbe    c0015975 <sysCallTell(regs*)+0x30>
c001595c:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001595f:	31 d2                	xor    edx,edx
c0015961:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0015967:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001596e:	31 c0                	xor    eax,eax
c0015970:	83 c4 08             	add    esp,0x8
c0015973:	5b                   	pop    ebx
c0015974:	c3                   	ret    
c0015975:	83 ec 0c             	sub    esp,0xc
c0015978:	50                   	push   eax
c0015979:	e8 19 5c ff ff       	call   c000b597 <getFromFileDescriptor(int)>
c001597e:	5a                   	pop    edx
c001597f:	59                   	pop    ecx
c0015980:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0015983:	50                   	push   eax
c0015984:	e8 19 78 ff ff       	call   c000d1a2 <File::tell(unsigned long long*)>
c0015989:	83 c4 10             	add    esp,0x10
c001598c:	85 c0                	test   eax,eax
c001598e:	0f 95 c0             	setne  al
c0015991:	31 d2                	xor    edx,edx
c0015993:	0f b6 c0             	movzx  eax,al
c0015996:	f7 d8                	neg    eax
c0015998:	83 d2 00             	adc    edx,0x0
c001599b:	83 c4 08             	add    esp,0x8
c001599e:	f7 da                	neg    edx
c00159a0:	5b                   	pop    ebx
c00159a1:	c3                   	ret    
c00159a2:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00159a7:	ba ff ff ff ff       	mov    edx,0xffffffff
c00159ac:	83 c4 08             	add    esp,0x8
c00159af:	5b                   	pop    ebx
c00159b0:	c3                   	ret    

c00159b1 <sysCallSize(regs*)>:
c00159b1:	53                   	push   ebx
c00159b2:	83 ec 18             	sub    esp,0x18
c00159b5:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00159b9:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00159bc:	83 f8 02             	cmp    eax,0x2
c00159bf:	76 53                	jbe    c0015a14 <sysCallSize(regs*)+0x63>
c00159c1:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c00159c6:	76 19                	jbe    c00159e1 <sysCallSize(regs*)+0x30>
c00159c8:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00159cb:	31 d2                	xor    edx,edx
c00159cd:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00159d3:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00159da:	31 c0                	xor    eax,eax
c00159dc:	83 c4 18             	add    esp,0x18
c00159df:	5b                   	pop    ebx
c00159e0:	c3                   	ret    
c00159e1:	83 ec 0c             	sub    esp,0xc
c00159e4:	50                   	push   eax
c00159e5:	e8 ad 5b ff ff       	call   c000b597 <getFromFileDescriptor(int)>
c00159ea:	83 c4 0c             	add    esp,0xc
c00159ed:	8d 54 24 13          	lea    edx,[esp+0x13]
c00159f1:	52                   	push   edx
c00159f2:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c00159f5:	50                   	push   eax
c00159f6:	e8 3f 79 ff ff       	call   c000d33a <File::stat(unsigned long long*, bool*)>
c00159fb:	83 c4 10             	add    esp,0x10
c00159fe:	85 c0                	test   eax,eax
c0015a00:	0f 95 c0             	setne  al
c0015a03:	31 d2                	xor    edx,edx
c0015a05:	0f b6 c0             	movzx  eax,al
c0015a08:	f7 d8                	neg    eax
c0015a0a:	83 d2 00             	adc    edx,0x0
c0015a0d:	83 c4 18             	add    esp,0x18
c0015a10:	f7 da                	neg    edx
c0015a12:	5b                   	pop    ebx
c0015a13:	c3                   	ret    
c0015a14:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0015a19:	ba ff ff ff ff       	mov    edx,0xffffffff
c0015a1e:	83 c4 18             	add    esp,0x18
c0015a21:	5b                   	pop    ebx
c0015a22:	c3                   	ret    

c0015a23 <sysCallSizeFromFilename(regs*)>:
c0015a23:	57                   	push   edi
c0015a24:	56                   	push   esi
c0015a25:	53                   	push   ebx
c0015a26:	83 ec 20             	sub    esp,0x20
c0015a29:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0015a2d:	8b 5e 20             	mov    ebx,DWORD PTR [esi+0x20]
c0015a30:	83 fb 02             	cmp    ebx,0x2
c0015a33:	0f 86 88 00 00 00    	jbe    c0015ac1 <sysCallSizeFromFilename(regs*)+0x9e>
c0015a39:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c0015a3f:	76 1b                	jbe    c0015a5c <sysCallSizeFromFilename(regs*)+0x39>
c0015a41:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0015a44:	31 d2                	xor    edx,edx
c0015a46:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0015a4c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0015a53:	83 c4 20             	add    esp,0x20
c0015a56:	31 c0                	xor    eax,eax
c0015a58:	5b                   	pop    ebx
c0015a59:	5e                   	pop    esi
c0015a5a:	5f                   	pop    edi
c0015a5b:	c3                   	ret    
c0015a5c:	83 ec 0c             	sub    esp,0xc
c0015a5f:	68 14 01 00 00       	push   0x114
c0015a64:	e8 5a 3f ff ff       	call   c00099c3 <malloc>
c0015a69:	83 c4 0c             	add    esp,0xc
c0015a6c:	89 c7                	mov    edi,eax
c0015a6e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015a73:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0015a76:	53                   	push   ebx
c0015a77:	57                   	push   edi
c0015a78:	e8 ad 75 ff ff       	call   c000d02a <File::File(char const*, Process*)>
c0015a7d:	83 c4 0c             	add    esp,0xc
c0015a80:	8d 44 24 23          	lea    eax,[esp+0x23]
c0015a84:	50                   	push   eax
c0015a85:	ff 76 28             	push   DWORD PTR [esi+0x28]
c0015a88:	57                   	push   edi
c0015a89:	e8 ac 78 ff ff       	call   c000d33a <File::stat(unsigned long long*, bool*)>
c0015a8e:	83 c4 10             	add    esp,0x10
c0015a91:	85 ff                	test   edi,edi
c0015a93:	74 14                	je     c0015aa9 <sysCallSizeFromFilename(regs*)+0x86>
c0015a95:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0015a99:	8b 17                	mov    edx,DWORD PTR [edi]
c0015a9b:	83 ec 0c             	sub    esp,0xc
c0015a9e:	57                   	push   edi
c0015a9f:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0015aa2:	83 c4 10             	add    esp,0x10
c0015aa5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015aa9:	85 c0                	test   eax,eax
c0015aab:	0f 95 c0             	setne  al
c0015aae:	31 d2                	xor    edx,edx
c0015ab0:	0f b6 c0             	movzx  eax,al
c0015ab3:	f7 d8                	neg    eax
c0015ab5:	83 d2 00             	adc    edx,0x0
c0015ab8:	83 c4 20             	add    esp,0x20
c0015abb:	f7 da                	neg    edx
c0015abd:	5b                   	pop    ebx
c0015abe:	5e                   	pop    esi
c0015abf:	5f                   	pop    edi
c0015ac0:	c3                   	ret    
c0015ac1:	83 c4 20             	add    esp,0x20
c0015ac4:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0015ac9:	5b                   	pop    ebx
c0015aca:	ba ff ff ff ff       	mov    edx,0xffffffff
c0015acf:	5e                   	pop    esi
c0015ad0:	5f                   	pop    edi
c0015ad1:	c3                   	ret    

c0015ad2 <sysCallClose(regs*)>:
c0015ad2:	53                   	push   ebx
c0015ad3:	83 ec 08             	sub    esp,0x8
c0015ad6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015ada:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0015add:	83 f8 02             	cmp    eax,0x2
c0015ae0:	76 41                	jbe    c0015b23 <sysCallClose(regs*)+0x51>
c0015ae2:	8d 90 00 01 00 f0    	lea    edx,[eax-0xfffff00]
c0015ae8:	83 fa 01             	cmp    edx,0x1
c0015aeb:	76 2d                	jbe    c0015b1a <sysCallClose(regs*)+0x48>
c0015aed:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0015af2:	77 2f                	ja     c0015b23 <sysCallClose(regs*)+0x51>
c0015af4:	83 ec 0c             	sub    esp,0xc
c0015af7:	50                   	push   eax
c0015af8:	e8 9a 5a ff ff       	call   c000b597 <getFromFileDescriptor(int)>
c0015afd:	89 c3                	mov    ebx,eax
c0015aff:	89 04 24             	mov    DWORD PTR [esp],eax
c0015b02:	e8 e5 75 ff ff       	call   c000d0ec <File::close()>
c0015b07:	83 c4 10             	add    esp,0x10
c0015b0a:	85 db                	test   ebx,ebx
c0015b0c:	74 0c                	je     c0015b1a <sysCallClose(regs*)+0x48>
c0015b0e:	83 ec 0c             	sub    esp,0xc
c0015b11:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015b13:	53                   	push   ebx
c0015b14:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015b17:	83 c4 10             	add    esp,0x10
c0015b1a:	31 c0                	xor    eax,eax
c0015b1c:	31 d2                	xor    edx,edx
c0015b1e:	83 c4 08             	add    esp,0x8
c0015b21:	5b                   	pop    ebx
c0015b22:	c3                   	ret    
c0015b23:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0015b28:	ba ff ff ff ff       	mov    edx,0xffffffff
c0015b2d:	83 c4 08             	add    esp,0x8
c0015b30:	5b                   	pop    ebx
c0015b31:	c3                   	ret    

c0015b32 <sysCallOpenDir(regs*)>:
c0015b32:	56                   	push   esi
c0015b33:	53                   	push   ebx
c0015b34:	53                   	push   ebx
c0015b35:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0015b39:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c0015b3c:	85 f6                	test   esi,esi
c0015b3e:	74 59                	je     c0015b99 <sysCallOpenDir(regs*)+0x67>
c0015b40:	83 ec 0c             	sub    esp,0xc
c0015b43:	68 14 01 00 00       	push   0x114
c0015b48:	e8 76 3e ff ff       	call   c00099c3 <malloc>
c0015b4d:	83 c4 0c             	add    esp,0xc
c0015b50:	89 c6                	mov    esi,eax
c0015b52:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015b57:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0015b5a:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0015b5d:	56                   	push   esi
c0015b5e:	e8 73 79 ff ff       	call   c000d4d6 <Directory::Directory(char const*, Process*)>
c0015b63:	83 c4 10             	add    esp,0x10
c0015b66:	85 f6                	test   esi,esi
c0015b68:	74 2f                	je     c0015b99 <sysCallOpenDir(regs*)+0x67>
c0015b6a:	83 ec 0c             	sub    esp,0xc
c0015b6d:	56                   	push   esi
c0015b6e:	e8 c7 79 ff ff       	call   c000d53a <Directory::open()>
c0015b73:	83 c4 10             	add    esp,0x10
c0015b76:	85 c0                	test   eax,eax
c0015b78:	75 1f                	jne    c0015b99 <sysCallOpenDir(regs*)+0x67>
c0015b7a:	83 ec 0c             	sub    esp,0xc
c0015b7d:	56                   	push   esi
c0015b7e:	e8 1f 57 ff ff       	call   c000b2a2 <UnixFile::getFileDescriptor()>
c0015b83:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0015b86:	83 c4 10             	add    esp,0x10
c0015b89:	89 02                	mov    DWORD PTR [edx],eax
c0015b8b:	c1 f8 1f             	sar    eax,0x1f
c0015b8e:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0015b91:	31 c0                	xor    eax,eax
c0015b93:	59                   	pop    ecx
c0015b94:	31 d2                	xor    edx,edx
c0015b96:	5b                   	pop    ebx
c0015b97:	5e                   	pop    esi
c0015b98:	c3                   	ret    
c0015b99:	59                   	pop    ecx
c0015b9a:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0015b9f:	ba ff ff ff ff       	mov    edx,0xffffffff
c0015ba4:	5b                   	pop    ebx
c0015ba5:	5e                   	pop    esi
c0015ba6:	c3                   	ret    

c0015ba7 <sysCallCloseDir(regs*)>:
c0015ba7:	53                   	push   ebx
c0015ba8:	83 ec 08             	sub    esp,0x8
c0015bab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015baf:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0015bb2:	8d 50 fd             	lea    edx,[eax-0x3]
c0015bb5:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c0015bbb:	77 2f                	ja     c0015bec <sysCallCloseDir(regs*)+0x45>
c0015bbd:	83 ec 0c             	sub    esp,0xc
c0015bc0:	50                   	push   eax
c0015bc1:	e8 d1 59 ff ff       	call   c000b597 <getFromFileDescriptor(int)>
c0015bc6:	89 c3                	mov    ebx,eax
c0015bc8:	89 04 24             	mov    DWORD PTR [esp],eax
c0015bcb:	e8 c6 79 ff ff       	call   c000d596 <Directory::close()>
c0015bd0:	83 c4 10             	add    esp,0x10
c0015bd3:	85 db                	test   ebx,ebx
c0015bd5:	74 0c                	je     c0015be3 <sysCallCloseDir(regs*)+0x3c>
c0015bd7:	83 ec 0c             	sub    esp,0xc
c0015bda:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015bdc:	53                   	push   ebx
c0015bdd:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015be0:	83 c4 10             	add    esp,0x10
c0015be3:	31 c0                	xor    eax,eax
c0015be5:	31 d2                	xor    edx,edx
c0015be7:	83 c4 08             	add    esp,0x8
c0015bea:	5b                   	pop    ebx
c0015beb:	c3                   	ret    
c0015bec:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0015bf1:	ba ff ff ff ff       	mov    edx,0xffffffff
c0015bf6:	83 c4 08             	add    esp,0x8
c0015bf9:	5b                   	pop    ebx
c0015bfa:	c3                   	ret    

c0015bfb <sysCallMakeDir(regs*)>:
c0015bfb:	56                   	push   esi
c0015bfc:	53                   	push   ebx
c0015bfd:	83 ec 10             	sub    esp,0x10
c0015c00:	68 14 01 00 00       	push   0x114
c0015c05:	e8 b9 3d ff ff       	call   c00099c3 <malloc>
c0015c0a:	83 c4 0c             	add    esp,0xc
c0015c0d:	89 c3                	mov    ebx,eax
c0015c0f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015c14:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0015c17:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0015c1b:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0015c1e:	53                   	push   ebx
c0015c1f:	e8 b2 78 ff ff       	call   c000d4d6 <Directory::Directory(char const*, Process*)>
c0015c24:	83 c4 10             	add    esp,0x10
c0015c27:	85 db                	test   ebx,ebx
c0015c29:	74 32                	je     c0015c5d <sysCallMakeDir(regs*)+0x62>
c0015c2b:	83 ec 0c             	sub    esp,0xc
c0015c2e:	53                   	push   ebx
c0015c2f:	e8 e6 7a ff ff       	call   c000d71a <Directory::create()>
c0015c34:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015c37:	89 c6                	mov    esi,eax
c0015c39:	e8 58 79 ff ff       	call   c000d596 <Directory::close()>
c0015c3e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015c40:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015c43:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015c46:	83 c4 10             	add    esp,0x10
c0015c49:	31 c0                	xor    eax,eax
c0015c4b:	59                   	pop    ecx
c0015c4c:	85 f6                	test   esi,esi
c0015c4e:	5b                   	pop    ebx
c0015c4f:	0f 95 c0             	setne  al
c0015c52:	5e                   	pop    esi
c0015c53:	31 d2                	xor    edx,edx
c0015c55:	f7 d8                	neg    eax
c0015c57:	83 d2 00             	adc    edx,0x0
c0015c5a:	f7 da                	neg    edx
c0015c5c:	c3                   	ret    
c0015c5d:	59                   	pop    ecx
c0015c5e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0015c63:	ba ff ff ff ff       	mov    edx,0xffffffff
c0015c68:	5b                   	pop    ebx
c0015c69:	5e                   	pop    esi
c0015c6a:	c3                   	ret    

c0015c6b <sysCallWait(regs*)>:
c0015c6b:	83 ec 10             	sub    esp,0x10
c0015c6e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0015c72:	ff 70 28             	push   DWORD PTR [eax+0x28]
c0015c75:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0015c78:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0015c7b:	e8 fc 24 00 00       	call   c001817c <waitTask(int, int*, int)>
c0015c80:	83 c4 1c             	add    esp,0x1c
c0015c83:	99                   	cdq    
c0015c84:	c3                   	ret    

c0015c85 <sysCallNotImpl(regs*)>:
c0015c85:	83 ec 18             	sub    esp,0x18
c0015c88:	68 09 46 02 c0       	push   0xc0024609
c0015c8d:	e8 ef e6 ff ff       	call   c0014381 <Krnl::panic(char const*)>
c0015c92:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0015c97:	ba ff ff ff ff       	mov    edx,0xffffffff
c0015c9c:	83 c4 1c             	add    esp,0x1c
c0015c9f:	c3                   	ret    

c0015ca0 <sysPanic(regs*)>:
c0015ca0:	83 ec 18             	sub    esp,0x18
c0015ca3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015ca7:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0015caa:	e8 d2 e6 ff ff       	call   c0014381 <Krnl::panic(char const*)>
c0015caf:	b8 01 00 00 00       	mov    eax,0x1
c0015cb4:	31 d2                	xor    edx,edx
c0015cb6:	83 c4 1c             	add    esp,0x1c
c0015cb9:	c3                   	ret    

c0015cba <sysCallRmdir(regs*)>:
c0015cba:	56                   	push   esi
c0015cbb:	53                   	push   ebx
c0015cbc:	83 ec 20             	sub    esp,0x20
c0015cbf:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0015cc3:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0015cc6:	68 14 01 00 00       	push   0x114
c0015ccb:	e8 f3 3c ff ff       	call   c00099c3 <malloc>
c0015cd0:	83 c4 0c             	add    esp,0xc
c0015cd3:	89 c3                	mov    ebx,eax
c0015cd5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015cda:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0015cdd:	56                   	push   esi
c0015cde:	53                   	push   ebx
c0015cdf:	e8 46 73 ff ff       	call   c000d02a <File::File(char const*, Process*)>
c0015ce4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015ce7:	e8 1a 75 ff ff       	call   c000d206 <File::unlink()>
c0015cec:	83 c4 10             	add    esp,0x10
c0015cef:	85 db                	test   ebx,ebx
c0015cf1:	74 14                	je     c0015d07 <sysCallRmdir(regs*)+0x4d>
c0015cf3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0015cf7:	8b 13                	mov    edx,DWORD PTR [ebx]
c0015cf9:	83 ec 0c             	sub    esp,0xc
c0015cfc:	53                   	push   ebx
c0015cfd:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0015d00:	83 c4 10             	add    esp,0x10
c0015d03:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015d07:	85 c0                	test   eax,eax
c0015d09:	0f 95 c0             	setne  al
c0015d0c:	31 d2                	xor    edx,edx
c0015d0e:	0f b6 c0             	movzx  eax,al
c0015d11:	f7 d8                	neg    eax
c0015d13:	83 d2 00             	adc    edx,0x0
c0015d16:	83 c4 14             	add    esp,0x14
c0015d19:	f7 da                	neg    edx
c0015d1b:	5b                   	pop    ebx
c0015d1c:	5e                   	pop    esi
c0015d1d:	c3                   	ret    

c0015d1e <sysCallUnlink(regs*)>:
c0015d1e:	56                   	push   esi
c0015d1f:	53                   	push   ebx
c0015d20:	83 ec 20             	sub    esp,0x20
c0015d23:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0015d27:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0015d2a:	68 14 01 00 00       	push   0x114
c0015d2f:	e8 8f 3c ff ff       	call   c00099c3 <malloc>
c0015d34:	83 c4 0c             	add    esp,0xc
c0015d37:	89 c3                	mov    ebx,eax
c0015d39:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015d3e:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0015d41:	56                   	push   esi
c0015d42:	53                   	push   ebx
c0015d43:	e8 e2 72 ff ff       	call   c000d02a <File::File(char const*, Process*)>
c0015d48:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015d4b:	e8 b6 74 ff ff       	call   c000d206 <File::unlink()>
c0015d50:	83 c4 10             	add    esp,0x10
c0015d53:	85 db                	test   ebx,ebx
c0015d55:	74 14                	je     c0015d6b <sysCallUnlink(regs*)+0x4d>
c0015d57:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0015d5b:	8b 13                	mov    edx,DWORD PTR [ebx]
c0015d5d:	83 ec 0c             	sub    esp,0xc
c0015d60:	53                   	push   ebx
c0015d61:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0015d64:	83 c4 10             	add    esp,0x10
c0015d67:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015d6b:	85 c0                	test   eax,eax
c0015d6d:	0f 95 c0             	setne  al
c0015d70:	31 d2                	xor    edx,edx
c0015d72:	0f b6 c0             	movzx  eax,al
c0015d75:	f7 d8                	neg    eax
c0015d77:	83 d2 00             	adc    edx,0x0
c0015d7a:	83 c4 14             	add    esp,0x14
c0015d7d:	f7 da                	neg    edx
c0015d7f:	5b                   	pop    ebx
c0015d80:	5e                   	pop    esi
c0015d81:	c3                   	ret    

c0015d82 <sysCallGetArgv(regs*)>:
c0015d82:	83 ec 0c             	sub    esp,0xc
c0015d85:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015d89:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0015d8c:	85 c0                	test   eax,eax
c0015d8e:	78 2b                	js     c0015dbb <sysCallGetArgv(regs*)+0x39>
c0015d90:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0015d96:	8b 49 3c             	mov    ecx,DWORD PTR [ecx+0x3c]
c0015d99:	3b 81 16 05 00 00    	cmp    eax,DWORD PTR [ecx+0x516]
c0015d9f:	7d 1a                	jge    c0015dbb <sysCallGetArgv(regs*)+0x39>
c0015da1:	8b 84 81 1a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x51a]
c0015da8:	85 c0                	test   eax,eax
c0015daa:	74 17                	je     c0015dc3 <sysCallGetArgv(regs*)+0x41>
c0015dac:	83 ec 08             	sub    esp,0x8
c0015daf:	50                   	push   eax
c0015db0:	ff 72 24             	push   DWORD PTR [edx+0x24]
c0015db3:	e8 88 a9 fe ff       	call   c0000740 <strcpy>
c0015db8:	83 c4 10             	add    esp,0x10
c0015dbb:	31 c0                	xor    eax,eax
c0015dbd:	31 d2                	xor    edx,edx
c0015dbf:	83 c4 0c             	add    esp,0xc
c0015dc2:	c3                   	ret    
c0015dc3:	b8 01 00 00 00       	mov    eax,0x1
c0015dc8:	31 d2                	xor    edx,edx
c0015dca:	83 c4 0c             	add    esp,0xc
c0015dcd:	c3                   	ret    

c0015dce <sysCallTTYName(regs*)>:
c0015dce:	56                   	push   esi
c0015dcf:	53                   	push   ebx
c0015dd0:	53                   	push   ebx
c0015dd1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0015dd5:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0015dd8:	85 c0                	test   eax,eax
c0015dda:	74 5f                	je     c0015e3b <sysCallTTYName(regs*)+0x6d>
c0015ddc:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0015ddf:	83 f8 02             	cmp    eax,0x2
c0015de2:	77 3e                	ja     c0015e22 <sysCallTTYName(regs*)+0x54>
c0015de4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015de9:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015dec:	8b 98 06 05 00 00    	mov    ebx,DWORD PTR [eax+0x506]
c0015df2:	85 db                	test   ebx,ebx
c0015df4:	74 45                	je     c0015e3b <sysCallTTYName(regs*)+0x6d>
c0015df6:	83 ec 0c             	sub    esp,0xc
c0015df9:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015dfb:	53                   	push   ebx
c0015dfc:	ff 10                	call   DWORD PTR [eax]
c0015dfe:	83 c4 10             	add    esp,0x10
c0015e01:	84 c0                	test   al,al
c0015e03:	74 41                	je     c0015e46 <sysCallTTYName(regs*)+0x78>
c0015e05:	83 ec 08             	sub    esp,0x8
c0015e08:	81 c3 82 00 00 00    	add    ebx,0x82
c0015e0e:	53                   	push   ebx
c0015e0f:	ff 76 24             	push   DWORD PTR [esi+0x24]
c0015e12:	e8 29 a9 fe ff       	call   c0000740 <strcpy>
c0015e17:	83 c4 10             	add    esp,0x10
c0015e1a:	31 c0                	xor    eax,eax
c0015e1c:	59                   	pop    ecx
c0015e1d:	31 d2                	xor    edx,edx
c0015e1f:	5b                   	pop    ebx
c0015e20:	5e                   	pop    esi
c0015e21:	c3                   	ret    
c0015e22:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0015e27:	74 bb                	je     c0015de4 <sysCallTTYName(regs*)+0x16>
c0015e29:	83 ec 0c             	sub    esp,0xc
c0015e2c:	50                   	push   eax
c0015e2d:	e8 65 57 ff ff       	call   c000b597 <getFromFileDescriptor(int)>
c0015e32:	83 c4 10             	add    esp,0x10
c0015e35:	89 c3                	mov    ebx,eax
c0015e37:	85 db                	test   ebx,ebx
c0015e39:	75 bb                	jne    c0015df6 <sysCallTTYName(regs*)+0x28>
c0015e3b:	59                   	pop    ecx
c0015e3c:	b8 01 00 00 00       	mov    eax,0x1
c0015e41:	31 d2                	xor    edx,edx
c0015e43:	5b                   	pop    ebx
c0015e44:	5e                   	pop    esi
c0015e45:	c3                   	ret    
c0015e46:	59                   	pop    ecx
c0015e47:	b8 02 00 00 00       	mov    eax,0x2
c0015e4c:	31 d2                	xor    edx,edx
c0015e4e:	5b                   	pop    ebx
c0015e4f:	5e                   	pop    esi
c0015e50:	c3                   	ret    

c0015e51 <sysCallUSleep(regs*)>:
c0015e51:	83 ec 1c             	sub    esp,0x1c
c0015e54:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0015e58:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c0015e5b:	8b 51 28             	mov    edx,DWORD PTR [ecx+0x28]
c0015e5e:	6a 00                	push   0x0
c0015e60:	6a 64                	push   0x64
c0015e62:	52                   	push   edx
c0015e63:	50                   	push   eax
c0015e64:	e8 1b b1 00 00       	call   c0020f84 <__udivdi3>
c0015e69:	83 c4 14             	add    esp,0x14
c0015e6c:	50                   	push   eax
c0015e6d:	e8 da 23 00 00       	call   c001824c <milliTenthSleep(unsigned int)>
c0015e72:	31 c0                	xor    eax,eax
c0015e74:	31 d2                	xor    edx,edx
c0015e76:	83 c4 1c             	add    esp,0x1c
c0015e79:	c3                   	ret    

c0015e7a <sysCallSpawn(regs*)>:
c0015e7a:	56                   	push   esi
c0015e7b:	53                   	push   ebx
c0015e7c:	50                   	push   eax
c0015e7d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0015e81:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0015e84:	85 c0                	test   eax,eax
c0015e86:	75 08                	jne    c0015e90 <sysCallSpawn(regs*)+0x16>
c0015e88:	59                   	pop    ecx
c0015e89:	31 c0                	xor    eax,eax
c0015e8b:	31 d2                	xor    edx,edx
c0015e8d:	5b                   	pop    ebx
c0015e8e:	5e                   	pop    esi
c0015e8f:	c3                   	ret    
c0015e90:	83 ec 0c             	sub    esp,0xc
c0015e93:	68 1f 07 00 00       	push   0x71f
c0015e98:	e8 26 3b ff ff       	call   c00099c3 <malloc>
c0015e9d:	83 c4 10             	add    esp,0x10
c0015ea0:	89 c6                	mov    esi,eax
c0015ea2:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0015ea5:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0015ea8:	85 c0                	test   eax,eax
c0015eaa:	75 32                	jne    c0015ede <sysCallSpawn(regs*)+0x64>
c0015eac:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015eb1:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015eb4:	52                   	push   edx
c0015eb5:	50                   	push   eax
c0015eb6:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0015eb9:	56                   	push   esi
c0015eba:	e8 85 1a 00 00       	call   c0017944 <Process::Process(char const*, Process*, char**)>
c0015ebf:	83 c4 10             	add    esp,0x10
c0015ec2:	80 be 1e 07 00 00 00 	cmp    BYTE PTR [esi+0x71e],0x0
c0015ec9:	75 bd                	jne    c0015e88 <sysCallSpawn(regs*)+0xe>
c0015ecb:	83 ec 0c             	sub    esp,0xc
c0015ece:	56                   	push   esi
c0015ecf:	e8 5c 1f 00 00       	call   c0017e30 <Process::createUserThread()>
c0015ed4:	8b 06                	mov    eax,DWORD PTR [esi]
c0015ed6:	83 c4 10             	add    esp,0x10
c0015ed9:	99                   	cdq    
c0015eda:	59                   	pop    ecx
c0015edb:	5b                   	pop    ebx
c0015edc:	5e                   	pop    esi
c0015edd:	c3                   	ret    
c0015ede:	31 c0                	xor    eax,eax
c0015ee0:	eb d2                	jmp    c0015eb4 <sysCallSpawn(regs*)+0x3a>

c0015ee2 <sysCallGetEnv(regs*)>:
c0015ee2:	57                   	push   edi
c0015ee3:	56                   	push   esi
c0015ee4:	53                   	push   ebx
c0015ee5:	83 ec 1c             	sub    esp,0x1c
c0015ee8:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0015eec:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015ef1:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0015ef4:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0015ef7:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0015efa:	e8 ce e3 ff ff       	call   c00142cd <Krnl::getProcessTotalEnvCount(Process*)>
c0015eff:	83 c4 10             	add    esp,0x10
c0015f02:	39 c7                	cmp    edi,eax
c0015f04:	7c 14                	jl     c0015f1a <sysCallGetEnv(regs*)+0x38>
c0015f06:	85 f6                	test   esi,esi
c0015f08:	75 0b                	jne    c0015f15 <sysCallGetEnv(regs*)+0x33>
c0015f0a:	83 c4 10             	add    esp,0x10
c0015f0d:	31 c0                	xor    eax,eax
c0015f0f:	5b                   	pop    ebx
c0015f10:	31 d2                	xor    edx,edx
c0015f12:	5e                   	pop    esi
c0015f13:	5f                   	pop    edi
c0015f14:	c3                   	ret    
c0015f15:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0015f18:	eb f0                	jmp    c0015f0a <sysCallGetEnv(regs*)+0x28>
c0015f1a:	8d 44 24 08          	lea    eax,[esp+0x8]
c0015f1e:	52                   	push   edx
c0015f1f:	57                   	push   edi
c0015f20:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0015f26:	ff 72 3c             	push   DWORD PTR [edx+0x3c]
c0015f29:	50                   	push   eax
c0015f2a:	e8 be e3 ff ff       	call   c00142ed <Krnl::getProcessEnvPair(Process*, int)>
c0015f2f:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0015f32:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0015f36:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0015f3a:	83 c4 0c             	add    esp,0xc
c0015f3d:	85 c9                	test   ecx,ecx
c0015f3f:	75 23                	jne    c0015f64 <sysCallGetEnv(regs*)+0x82>
c0015f41:	83 ec 0c             	sub    esp,0xc
c0015f44:	50                   	push   eax
c0015f45:	e8 56 a7 fe ff       	call   c00006a0 <strlen>
c0015f4a:	89 3c 24             	mov    DWORD PTR [esp],edi
c0015f4d:	89 c3                	mov    ebx,eax
c0015f4f:	e8 4c a7 fe ff       	call   c00006a0 <strlen>
c0015f54:	83 c4 10             	add    esp,0x10
c0015f57:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c0015f5b:	83 c4 10             	add    esp,0x10
c0015f5e:	31 d2                	xor    edx,edx
c0015f60:	5b                   	pop    ebx
c0015f61:	5e                   	pop    esi
c0015f62:	5f                   	pop    edi
c0015f63:	c3                   	ret    
c0015f64:	83 ec 08             	sub    esp,0x8
c0015f67:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0015f6a:	50                   	push   eax
c0015f6b:	56                   	push   esi
c0015f6c:	e8 cf a7 fe ff       	call   c0000740 <strcpy>
c0015f71:	58                   	pop    eax
c0015f72:	5a                   	pop    edx
c0015f73:	68 23 46 02 c0       	push   0xc0024623
c0015f78:	56                   	push   esi
c0015f79:	e8 02 a9 fe ff       	call   c0000880 <strcat>
c0015f7e:	59                   	pop    ecx
c0015f7f:	5b                   	pop    ebx
c0015f80:	57                   	push   edi
c0015f81:	56                   	push   esi
c0015f82:	e8 f9 a8 fe ff       	call   c0000880 <strcat>
c0015f87:	83 c4 10             	add    esp,0x10
c0015f8a:	e9 7b ff ff ff       	jmp    c0015f0a <sysCallGetEnv(regs*)+0x28>

c0015f8f <sysAppSettings(regs*)>:
c0015f8f:	57                   	push   edi
c0015f90:	56                   	push   esi
c0015f91:	56                   	push   esi
c0015f92:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015f96:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0015f99:	8b 86 00 01 00 00    	mov    eax,DWORD PTR [esi+0x100]
c0015f9f:	25 e0 1f 00 00       	and    eax,0x1fe0
c0015fa4:	66 3d c0 09          	cmp    ax,0x9c0
c0015fa8:	75 2e                	jne    c0015fd8 <sysAppSettings(regs*)+0x49>
c0015faa:	8a 86 00 01 00 00    	mov    al,BYTE PTR [esi+0x100]
c0015fb0:	83 e0 1f             	and    eax,0x1f
c0015fb3:	3c 01                	cmp    al,0x1
c0015fb5:	74 2c                	je     c0015fe3 <sysAppSettings(regs*)+0x54>
c0015fb7:	3c 07                	cmp    al,0x7
c0015fb9:	0f 84 b3 00 00 00    	je     c0016072 <sysAppSettings(regs*)+0xe3>
c0015fbf:	84 c0                	test   al,al
c0015fc1:	0f 84 d2 00 00 00    	je     c0016099 <sysAppSettings(regs*)+0x10a>
c0015fc7:	3c 08                	cmp    al,0x8
c0015fc9:	74 63                	je     c001602e <sysAppSettings(regs*)+0x9f>
c0015fcb:	59                   	pop    ecx
c0015fcc:	0f b6 c0             	movzx  eax,al
c0015fcf:	5e                   	pop    esi
c0015fd0:	05 e8 03 00 00       	add    eax,0x3e8
c0015fd5:	5f                   	pop    edi
c0015fd6:	99                   	cdq    
c0015fd7:	c3                   	ret    
c0015fd8:	b8 01 00 00 00       	mov    eax,0x1
c0015fdd:	59                   	pop    ecx
c0015fde:	31 d2                	xor    edx,edx
c0015fe0:	5e                   	pop    esi
c0015fe1:	5f                   	pop    edi
c0015fe2:	c3                   	ret    
c0015fe3:	50                   	push   eax
c0015fe4:	68 00 01 00 00       	push   0x100
c0015fe9:	6a 00                	push   0x0
c0015feb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015ff0:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015ff3:	83 c0 0c             	add    eax,0xc
c0015ff6:	50                   	push   eax
c0015ff7:	e8 88 a6 fe ff       	call   c0000684 <memset>
c0015ffc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016001:	b9 ff 00 00 00       	mov    ecx,0xff
c0016006:	8b 78 3c             	mov    edi,DWORD PTR [eax+0x3c]
c0016009:	83 c7 0c             	add    edi,0xc
c001600c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001600e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016013:	5a                   	pop    edx
c0016014:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0016017:	59                   	pop    ecx
c0016018:	8d 50 0c             	lea    edx,[eax+0xc]
c001601b:	52                   	push   edx
c001601c:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0016022:	e8 93 46 ff ff       	call   c000a6ba <VgaText::setTitle(char*)>
c0016027:	83 c4 10             	add    esp,0x10
c001602a:	31 c0                	xor    eax,eax
c001602c:	eb af                	jmp    c0015fdd <sysAppSettings(regs*)+0x4e>
c001602e:	83 ec 08             	sub    esp,0x8
c0016031:	8b 86 04 01 00 00    	mov    eax,DWORD PTR [esi+0x104]
c0016037:	83 e0 0f             	and    eax,0xf
c001603a:	50                   	push   eax
c001603b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016040:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0016043:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c0016049:	e8 5c 46 ff ff       	call   c000a6aa <VgaText::setTitleColour(VgaColour)>
c001604e:	5f                   	pop    edi
c001604f:	58                   	pop    eax
c0016050:	8b 86 04 01 00 00    	mov    eax,DWORD PTR [esi+0x104]
c0016056:	c1 e8 04             	shr    eax,0x4
c0016059:	83 e0 0f             	and    eax,0xf
c001605c:	50                   	push   eax
c001605d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016062:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0016065:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001606b:	e8 2a 46 ff ff       	call   c000a69a <VgaText::setTitleTextColour(VgaColour)>
c0016070:	eb b5                	jmp    c0016027 <sysAppSettings(regs*)+0x98>
c0016072:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016077:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001607a:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0016080:	8a 86 01 01 00 00    	mov    al,BYTE PTR [esi+0x101]
c0016086:	c0 e8 06             	shr    al,0x6
c0016089:	83 e0 01             	and    eax,0x1
c001608c:	88 82 80 00 00 00    	mov    BYTE PTR [edx+0x80],al
c0016092:	31 c0                	xor    eax,eax
c0016094:	e9 44 ff ff ff       	jmp    c0015fdd <sysAppSettings(regs*)+0x4e>
c0016099:	b8 02 00 00 00       	mov    eax,0x2
c001609e:	e9 3a ff ff ff       	jmp    c0015fdd <sysAppSettings(regs*)+0x4e>

c00160a3 <sysSetFatAttrib(regs*)>:
c00160a3:	57                   	push   edi
c00160a4:	56                   	push   esi
c00160a5:	53                   	push   ebx
c00160a6:	83 ec 1c             	sub    esp,0x1c
c00160a9:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c00160ad:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c00160b0:	68 14 01 00 00       	push   0x114
c00160b5:	e8 09 39 ff ff       	call   c00099c3 <malloc>
c00160ba:	83 c4 0c             	add    esp,0xc
c00160bd:	89 c3                	mov    ebx,eax
c00160bf:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00160c4:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c00160c7:	57                   	push   edi
c00160c8:	53                   	push   ebx
c00160c9:	e8 5c 6f ff ff       	call   c000d02a <File::File(char const*, Process*)>
c00160ce:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c00160d1:	83 c4 0c             	add    esp,0xc
c00160d4:	0f b6 d4             	movzx  edx,ah
c00160d7:	0f b6 c0             	movzx  eax,al
c00160da:	52                   	push   edx
c00160db:	50                   	push   eax
c00160dc:	53                   	push   ebx
c00160dd:	e8 be 71 ff ff       	call   c000d2a0 <File::chfatattr(unsigned char, unsigned char)>
c00160e2:	83 c4 10             	add    esp,0x10
c00160e5:	85 db                	test   ebx,ebx
c00160e7:	74 14                	je     c00160fd <sysSetFatAttrib(regs*)+0x5a>
c00160e9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00160ed:	8b 13                	mov    edx,DWORD PTR [ebx]
c00160ef:	83 ec 0c             	sub    esp,0xc
c00160f2:	53                   	push   ebx
c00160f3:	ff 52 08             	call   DWORD PTR [edx+0x8]
c00160f6:	83 c4 10             	add    esp,0x10
c00160f9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00160fd:	85 c0                	test   eax,eax
c00160ff:	0f 95 c0             	setne  al
c0016102:	31 d2                	xor    edx,edx
c0016104:	0f b6 c0             	movzx  eax,al
c0016107:	f7 d8                	neg    eax
c0016109:	83 d2 00             	adc    edx,0x0
c001610c:	83 c4 10             	add    esp,0x10
c001610f:	f7 da                	neg    edx
c0016111:	5b                   	pop    ebx
c0016112:	5e                   	pop    esi
c0016113:	5f                   	pop    edi
c0016114:	c3                   	ret    

c0016115 <sysPipe(regs*)>:
c0016115:	57                   	push   edi
c0016116:	56                   	push   esi
c0016117:	53                   	push   ebx
c0016118:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001611c:	83 ec 0c             	sub    esp,0xc
c001611f:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c0016122:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c0016125:	6a 20                	push   0x20
c0016127:	e8 97 38 ff ff       	call   c00099c3 <malloc>
c001612c:	89 c3                	mov    ebx,eax
c001612e:	58                   	pop    eax
c001612f:	5a                   	pop    edx
c0016130:	68 00 50 00 00       	push   0x5000
c0016135:	53                   	push   ebx
c0016136:	e8 f7 42 ff ff       	call   c000a432 <Pipe::Pipe(int)>
c001613b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001613e:	e8 5f 51 ff ff       	call   c000b2a2 <UnixFile::getFileDescriptor()>
c0016143:	89 07                	mov    DWORD PTR [edi],eax
c0016145:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016148:	e8 55 51 ff ff       	call   c000b2a2 <UnixFile::getFileDescriptor()>
c001614d:	83 c4 10             	add    esp,0x10
c0016150:	89 06                	mov    DWORD PTR [esi],eax
c0016152:	31 d2                	xor    edx,edx
c0016154:	5b                   	pop    ebx
c0016155:	31 c0                	xor    eax,eax
c0016157:	5e                   	pop    esi
c0016158:	5f                   	pop    edi
c0016159:	c3                   	ret    

c001615a <sysGetUnixTime(regs*)>:
c001615a:	a1 68 64 02 c0       	mov    eax,ds:0xc0026468
c001615f:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0016165:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0016169:	e9 b0 78 ff ff       	jmp    c000da1e <Clock::timeInSecondsLocal()>

c001616e <string_ends_with(char const*, char const*)>:
c001616e:	57                   	push   edi
c001616f:	56                   	push   esi
c0016170:	53                   	push   ebx
c0016171:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0016175:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0016179:	83 ec 0c             	sub    esp,0xc
c001617c:	53                   	push   ebx
c001617d:	e8 1e a5 fe ff       	call   c00006a0 <strlen>
c0016182:	89 3c 24             	mov    DWORD PTR [esp],edi
c0016185:	89 c6                	mov    esi,eax
c0016187:	e8 14 a5 fe ff       	call   c00006a0 <strlen>
c001618c:	83 c4 10             	add    esp,0x10
c001618f:	39 c6                	cmp    esi,eax
c0016191:	7d 06                	jge    c0016199 <string_ends_with(char const*, char const*)+0x2b>
c0016193:	5b                   	pop    ebx
c0016194:	31 c0                	xor    eax,eax
c0016196:	5e                   	pop    esi
c0016197:	5f                   	pop    edi
c0016198:	c3                   	ret    
c0016199:	83 ec 08             	sub    esp,0x8
c001619c:	29 c6                	sub    esi,eax
c001619e:	57                   	push   edi
c001619f:	01 f3                	add    ebx,esi
c00161a1:	53                   	push   ebx
c00161a2:	e8 25 a6 fe ff       	call   c00007cc <strcmp>
c00161a7:	83 c4 10             	add    esp,0x10
c00161aa:	85 c0                	test   eax,eax
c00161ac:	5b                   	pop    ebx
c00161ad:	0f 94 c0             	sete   al
c00161b0:	5e                   	pop    esi
c00161b1:	0f b6 c0             	movzx  eax,al
c00161b4:	5f                   	pop    edi
c00161b5:	c3                   	ret    

c00161b6 <sysCallOpen(regs*)>:
c00161b6:	56                   	push   esi
c00161b7:	53                   	push   ebx
c00161b8:	81 ec 04 01 00 00    	sub    esp,0x104
c00161be:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c00161c5:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c00161c8:	85 c9                	test   ecx,ecx
c00161ca:	0f 84 ad 01 00 00    	je     c001637d <sysCallOpen(regs*)+0x1c7>
c00161d0:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00161d3:	85 c0                	test   eax,eax
c00161d5:	0f 84 a2 01 00 00    	je     c001637d <sysCallOpen(regs*)+0x1c7>
c00161db:	52                   	push   edx
c00161dc:	68 25 46 02 c0       	push   0xc0024625
c00161e1:	50                   	push   eax
c00161e2:	8d 74 24 0c          	lea    esi,[esp+0xc]
c00161e6:	56                   	push   esi
c00161e7:	e8 94 6c ff ff       	call   c000ce80 <Fs::standardiseFiles(char*, char const*, char const*)>
c00161ec:	89 34 24             	mov    DWORD PTR [esp],esi
c00161ef:	e8 ac a4 fe ff       	call   c00006a0 <strlen>
c00161f4:	83 c4 10             	add    esp,0x10
c00161f7:	48                   	dec    eax
c00161f8:	74 1d                	je     c0016217 <sysCallOpen(regs*)+0x61>
c00161fa:	8a 14 04             	mov    dl,BYTE PTR [esp+eax*1]
c00161fd:	eb 0f                	jmp    c001620e <sysCallOpen(regs*)+0x58>
c00161ff:	80 fa 3a             	cmp    dl,0x3a
c0016202:	74 0f                	je     c0016213 <sysCallOpen(regs*)+0x5d>
c0016204:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c0016208:	48                   	dec    eax
c0016209:	74 0c                	je     c0016217 <sysCallOpen(regs*)+0x61>
c001620b:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c001620e:	80 fa 2e             	cmp    dl,0x2e
c0016211:	75 ec                	jne    c00161ff <sysCallOpen(regs*)+0x49>
c0016213:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c0016217:	83 ec 08             	sub    esp,0x8
c001621a:	68 29 46 02 c0       	push   0xc0024629
c001621f:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0016222:	e8 47 ff ff ff       	call   c001616e <string_ends_with(char const*, char const*)>
c0016227:	83 c4 10             	add    esp,0x10
c001622a:	85 c0                	test   eax,eax
c001622c:	74 1d                	je     c001624b <sysCallOpen(regs*)+0x95>
c001622e:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0016231:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c0016237:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001623e:	81 c4 04 01 00 00    	add    esp,0x104
c0016244:	31 c0                	xor    eax,eax
c0016246:	31 d2                	xor    edx,edx
c0016248:	5b                   	pop    ebx
c0016249:	5e                   	pop    esi
c001624a:	c3                   	ret    
c001624b:	83 ec 08             	sub    esp,0x8
c001624e:	68 2e 46 02 c0       	push   0xc002462e
c0016253:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0016256:	e8 13 ff ff ff       	call   c001616e <string_ends_with(char const*, char const*)>
c001625b:	83 c4 10             	add    esp,0x10
c001625e:	85 c0                	test   eax,eax
c0016260:	75 cc                	jne    c001622e <sysCallOpen(regs*)+0x78>
c0016262:	83 ec 08             	sub    esp,0x8
c0016265:	68 2a 46 02 c0       	push   0xc002462a
c001626a:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001626d:	e8 5a a5 fe ff       	call   c00007cc <strcmp>
c0016272:	83 c4 10             	add    esp,0x10
c0016275:	85 c0                	test   eax,eax
c0016277:	74 b5                	je     c001622e <sysCallOpen(regs*)+0x78>
c0016279:	83 ec 08             	sub    esp,0x8
c001627c:	68 29 46 02 c0       	push   0xc0024629
c0016281:	56                   	push   esi
c0016282:	e8 e7 fe ff ff       	call   c001616e <string_ends_with(char const*, char const*)>
c0016287:	83 c4 10             	add    esp,0x10
c001628a:	85 c0                	test   eax,eax
c001628c:	75 a0                	jne    c001622e <sysCallOpen(regs*)+0x78>
c001628e:	83 ec 08             	sub    esp,0x8
c0016291:	68 33 46 02 c0       	push   0xc0024633
c0016296:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0016299:	e8 d0 fe ff ff       	call   c001616e <string_ends_with(char const*, char const*)>
c001629e:	83 c4 10             	add    esp,0x10
c00162a1:	85 c0                	test   eax,eax
c00162a3:	0f 85 e7 00 00 00    	jne    c0016390 <sysCallOpen(regs*)+0x1da>
c00162a9:	83 ec 08             	sub    esp,0x8
c00162ac:	68 38 46 02 c0       	push   0xc0024638
c00162b1:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00162b4:	e8 b5 fe ff ff       	call   c001616e <string_ends_with(char const*, char const*)>
c00162b9:	83 c4 10             	add    esp,0x10
c00162bc:	85 c0                	test   eax,eax
c00162be:	0f 85 cc 00 00 00    	jne    c0016390 <sysCallOpen(regs*)+0x1da>
c00162c4:	83 ec 08             	sub    esp,0x8
c00162c7:	68 34 46 02 c0       	push   0xc0024634
c00162cc:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00162cf:	e8 f8 a4 fe ff       	call   c00007cc <strcmp>
c00162d4:	83 c4 10             	add    esp,0x10
c00162d7:	85 c0                	test   eax,eax
c00162d9:	0f 84 b1 00 00 00    	je     c0016390 <sysCallOpen(regs*)+0x1da>
c00162df:	83 ec 08             	sub    esp,0x8
c00162e2:	68 33 46 02 c0       	push   0xc0024633
c00162e7:	56                   	push   esi
c00162e8:	e8 81 fe ff ff       	call   c001616e <string_ends_with(char const*, char const*)>
c00162ed:	83 c4 10             	add    esp,0x10
c00162f0:	85 c0                	test   eax,eax
c00162f2:	0f 85 98 00 00 00    	jne    c0016390 <sysCallOpen(regs*)+0x1da>
c00162f8:	83 ec 0c             	sub    esp,0xc
c00162fb:	68 14 01 00 00       	push   0x114
c0016300:	e8 be 36 ff ff       	call   c00099c3 <malloc>
c0016305:	83 c4 0c             	add    esp,0xc
c0016308:	89 c6                	mov    esi,eax
c001630a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001630f:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0016312:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0016315:	56                   	push   esi
c0016316:	e8 0f 6d ff ff       	call   c000d02a <File::File(char const*, Process*)>
c001631b:	83 c4 10             	add    esp,0x10
c001631e:	85 f6                	test   esi,esi
c0016320:	74 5b                	je     c001637d <sysCallOpen(regs*)+0x1c7>
c0016322:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0016325:	0f b6 c2             	movzx  eax,dl
c0016328:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c001632b:	89 d0                	mov    eax,edx
c001632d:	83 e0 01             	and    eax,0x1
c0016330:	f6 c2 02             	test   dl,0x2
c0016333:	74 03                	je     c0016338 <sysCallOpen(regs*)+0x182>
c0016335:	83 c8 02             	or     eax,0x2
c0016338:	f6 c2 04             	test   dl,0x4
c001633b:	74 03                	je     c0016340 <sysCallOpen(regs*)+0x18a>
c001633d:	83 c8 04             	or     eax,0x4
c0016340:	f6 c2 08             	test   dl,0x8
c0016343:	74 03                	je     c0016348 <sysCallOpen(regs*)+0x192>
c0016345:	83 c8 0a             	or     eax,0xa
c0016348:	83 e2 10             	and    edx,0x10
c001634b:	74 03                	je     c0016350 <sysCallOpen(regs*)+0x19a>
c001634d:	83 c8 12             	or     eax,0x12
c0016350:	83 ec 08             	sub    esp,0x8
c0016353:	50                   	push   eax
c0016354:	56                   	push   esi
c0016355:	e8 34 6d ff ff       	call   c000d08e <File::open(FileOpenMode)>
c001635a:	83 c4 10             	add    esp,0x10
c001635d:	85 c0                	test   eax,eax
c001635f:	75 1c                	jne    c001637d <sysCallOpen(regs*)+0x1c7>
c0016361:	83 ec 0c             	sub    esp,0xc
c0016364:	56                   	push   esi
c0016365:	e8 38 4f ff ff       	call   c000b2a2 <UnixFile::getFileDescriptor()>
c001636a:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001636d:	83 c4 10             	add    esp,0x10
c0016370:	89 02                	mov    DWORD PTR [edx],eax
c0016372:	c1 f8 1f             	sar    eax,0x1f
c0016375:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0016378:	e9 c1 fe ff ff       	jmp    c001623e <sysCallOpen(regs*)+0x88>
c001637d:	81 c4 04 01 00 00    	add    esp,0x104
c0016383:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0016388:	ba ff ff ff ff       	mov    edx,0xffffffff
c001638d:	5b                   	pop    ebx
c001638e:	5e                   	pop    esi
c001638f:	c3                   	ret    
c0016390:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0016393:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c0016399:	e9 99 fe ff ff       	jmp    c0016237 <sysCallOpen(regs*)+0x81>

c001639e <Sys::loadSyscalls()>:
c001639e:	c7 05 60 6f 02 c0 0f 56 01 c0 	mov    DWORD PTR ds:0xc0026f60,0xc001560f
c00163a8:	c7 05 64 6f 02 c0 04 52 01 c0 	mov    DWORD PTR ds:0xc0026f64,0xc0015204
c00163b2:	c7 05 68 6f 02 c0 f5 53 01 c0 	mov    DWORD PTR ds:0xc0026f68,0xc00153f5
c00163bc:	c7 05 6c 6f 02 c0 45 55 01 c0 	mov    DWORD PTR ds:0xc0026f6c,0xc0015545
c00163c6:	c7 05 70 6f 02 c0 8d 53 01 c0 	mov    DWORD PTR ds:0xc0026f70,0xc001538d
c00163d0:	c7 05 74 6f 02 c0 3b 52 01 c0 	mov    DWORD PTR ds:0xc0026f74,0xc001523b
c00163da:	c7 05 78 6f 02 c0 1c 52 01 c0 	mov    DWORD PTR ds:0xc0026f78,0xc001521c
c00163e4:	c7 05 7c 6f 02 c0 4a 54 01 c0 	mov    DWORD PTR ds:0xc0026f7c,0xc001544a
c00163ee:	c7 05 84 6f 02 c0 d2 5a 01 c0 	mov    DWORD PTR ds:0xc0026f84,0xc0015ad2
c00163f8:	c7 05 80 6f 02 c0 b6 61 01 c0 	mov    DWORD PTR ds:0xc0026f80,0xc00161b6
c0016402:	c7 05 88 6f 02 c0 32 5b 01 c0 	mov    DWORD PTR ds:0xc0026f88,0xc0015b32
c001640c:	c7 05 8c 6f 02 c0 15 58 01 c0 	mov    DWORD PTR ds:0xc0026f8c,0xc0015815
c0016416:	c7 05 90 6f 02 c0 47 56 01 c0 	mov    DWORD PTR ds:0xc0026f90,0xc0015647
c0016420:	c7 05 94 6f 02 c0 4c 56 01 c0 	mov    DWORD PTR ds:0xc0026f94,0xc001564c
c001642a:	c7 05 98 6f 02 c0 fb 5b 01 c0 	mov    DWORD PTR ds:0xc0026f98,0xc0015bfb
c0016434:	c7 05 9c 6f 02 c0 a7 5b 01 c0 	mov    DWORD PTR ds:0xc0026f9c,0xc0015ba7
c001643e:	c7 05 a0 6f 02 c0 ee 58 01 c0 	mov    DWORD PTR ds:0xc0026fa0,0xc00158ee
c0016448:	c7 05 a4 6f 02 c0 45 59 01 c0 	mov    DWORD PTR ds:0xc0026fa4,0xc0015945
c0016452:	c7 05 a8 6f 02 c0 b1 59 01 c0 	mov    DWORD PTR ds:0xc0026fa8,0xc00159b1
c001645c:	c7 05 ac 6f 02 c0 51 56 01 c0 	mov    DWORD PTR ds:0xc0026fac,0xc0015651
c0016466:	c7 05 b0 6f 02 c0 6b 5c 01 c0 	mov    DWORD PTR ds:0xc0026fb0,0xc0015c6b
c0016470:	c7 05 b4 6f 02 c0 85 5c 01 c0 	mov    DWORD PTR ds:0xc0026fb4,0xc0015c85
c001647a:	c7 05 b8 6f 02 c0 85 5c 01 c0 	mov    DWORD PTR ds:0xc0026fb8,0xc0015c85
c0016484:	c7 05 bc 6f 02 c0 ba 5c 01 c0 	mov    DWORD PTR ds:0xc0026fbc,0xc0015cba
c001648e:	c7 05 c0 6f 02 c0 1e 5d 01 c0 	mov    DWORD PTR ds:0xc0026fc0,0xc0015d1e
c0016498:	c7 05 c4 6f 02 c0 5b 56 01 c0 	mov    DWORD PTR ds:0xc0026fc4,0xc001565b
c00164a2:	c7 05 c8 6f 02 c0 82 5d 01 c0 	mov    DWORD PTR ds:0xc0026fc8,0xc0015d82
c00164ac:	c7 05 cc 6f 02 c0 d2 57 01 c0 	mov    DWORD PTR ds:0xc0026fcc,0xc00157d2
c00164b6:	c7 05 d0 6f 02 c0 ce 5d 01 c0 	mov    DWORD PTR ds:0xc0026fd0,0xc0015dce
c00164c0:	c7 05 d4 6f 02 c0 94 58 01 c0 	mov    DWORD PTR ds:0xc0026fd4,0xc0015894
c00164ca:	c7 05 d8 6f 02 c0 51 5e 01 c0 	mov    DWORD PTR ds:0xc0026fd8,0xc0015e51
c00164d4:	c7 05 dc 6f 02 c0 23 5a 01 c0 	mov    DWORD PTR ds:0xc0026fdc,0xc0015a23
c00164de:	c7 05 e0 6f 02 c0 7a 5e 01 c0 	mov    DWORD PTR ds:0xc0026fe0,0xc0015e7a
c00164e8:	c7 05 e4 6f 02 c0 e2 5e 01 c0 	mov    DWORD PTR ds:0xc0026fe4,0xc0015ee2
c00164f2:	c7 05 e8 6f 02 c0 8f 5f 01 c0 	mov    DWORD PTR ds:0xc0026fe8,0xc0015f8f
c00164fc:	c7 05 ec 6f 02 c0 6b 56 01 c0 	mov    DWORD PTR ds:0xc0026fec,0xc001566b
c0016506:	c7 05 f0 6f 02 c0 d5 56 01 c0 	mov    DWORD PTR ds:0xc0026ff0,0xc00156d5
c0016510:	c7 05 f4 6f 02 c0 1f 57 01 c0 	mov    DWORD PTR ds:0xc0026ff4,0xc001571f
c001651a:	c7 05 f8 6f 02 c0 a3 60 01 c0 	mov    DWORD PTR ds:0xc0026ff8,0xc00160a3
c0016524:	c7 05 fc 6f 02 c0 a0 5c 01 c0 	mov    DWORD PTR ds:0xc0026ffc,0xc0015ca0
c001652e:	c7 05 00 70 02 c0 74 57 01 c0 	mov    DWORD PTR ds:0xc0027000,0xc0015774
c0016538:	c7 05 04 70 02 c0 15 61 01 c0 	mov    DWORD PTR ds:0xc0027004,0xc0016115
c0016542:	c7 05 08 70 02 c0 5a 61 01 c0 	mov    DWORD PTR ds:0xc0027008,0xc001615a
c001654c:	c7 05 0c 70 02 c0 e5 52 01 c0 	mov    DWORD PTR ds:0xc002700c,0xc00152e5
c0016556:	c7 05 10 70 02 c0 66 54 01 c0 	mov    DWORD PTR ds:0xc0027010,0xc0015466
c0016560:	c7 05 14 70 02 c0 fb 54 01 c0 	mov    DWORD PTR ds:0xc0027014,0xc00154fb
c001656a:	c7 05 18 70 02 c0 ce 51 01 c0 	mov    DWORD PTR ds:0xc0027018,0xc00151ce
c0016574:	c7 05 1c 70 02 c0 ad 55 01 c0 	mov    DWORD PTR ds:0xc002701c,0xc00155ad
c001657e:	c7 05 20 70 02 c0 47 52 01 c0 	mov    DWORD PTR ds:0xc0027020,0xc0015247
c0016588:	c7 05 24 70 02 c0 61 52 01 c0 	mov    DWORD PTR ds:0xc0027024,0xc0015261
c0016592:	c3                   	ret    

c0016593 <Sys::systemCall(regs*, void*)>:
c0016593:	53                   	push   ebx
c0016594:	83 ec 08             	sub    esp,0x8
c0016597:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001659b:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001659e:	83 f8 7f             	cmp    eax,0x7f
c00165a1:	77 16                	ja     c00165b9 <Sys::systemCall(regs*, void*)+0x26>
c00165a3:	8b 14 85 60 6f 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd90a0]
c00165aa:	85 d2                	test   edx,edx
c00165ac:	74 0b                	je     c00165b9 <Sys::systemCall(regs*, void*)+0x26>
c00165ae:	83 ec 0c             	sub    esp,0xc
c00165b1:	53                   	push   ebx
c00165b2:	ff d2                	call   edx
c00165b4:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00165b7:	eb 0d                	jmp    c00165c6 <Sys::systemCall(regs*, void*)+0x33>
c00165b9:	52                   	push   edx
c00165ba:	52                   	push   edx
c00165bb:	50                   	push   eax
c00165bc:	68 3d 46 02 c0       	push   0xc002463d
c00165c1:	e8 f9 64 ff ff       	call   c000cabf <Dbg::kprintf(char const*, ...)>
c00165c6:	83 c4 10             	add    esp,0x10
c00165c9:	b8 ef be ad de       	mov    eax,0xdeadbeef
c00165ce:	31 d2                	xor    edx,edx
c00165d0:	83 c4 08             	add    esp,0x8
c00165d3:	5b                   	pop    ebx
c00165d4:	c3                   	ret    

c00165d5 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c00165d5:	55                   	push   ebp
c00165d6:	57                   	push   edi
c00165d7:	56                   	push   esi
c00165d8:	53                   	push   ebx
c00165d9:	81 ec 2c 10 00 00    	sub    esp,0x102c
c00165df:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c00165e6:	8b 9c 24 4c 10 00 00 	mov    ebx,DWORD PTR [esp+0x104c]
c00165ed:	85 c0                	test   eax,eax
c00165ef:	0f 95 c1             	setne  cl
c00165f2:	83 bc 24 48 10 00 00 00 	cmp    DWORD PTR [esp+0x1048],0x0
c00165fa:	0f 94 c2             	sete   dl
c00165fd:	84 d1                	test   cl,dl
c00165ff:	74 23                	je     c0016624 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x4f>
c0016601:	f7 c3 ff 0f 00 00    	test   ebx,0xfff
c0016607:	74 1b                	je     c0016624 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x4f>
c0016609:	81 c3 00 10 00 00    	add    ebx,0x1000
c001660f:	89 da                	mov    edx,ebx
c0016611:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0016617:	81 ca 00 f0 ff ff    	or     edx,0xfffff000
c001661d:	89 94 24 48 10 00 00 	mov    DWORD PTR [esp+0x1048],edx
c0016624:	8b 94 24 48 10 00 00 	mov    edx,DWORD PTR [esp+0x1048]
c001662b:	05 ff 0f 00 00       	add    eax,0xfff
c0016630:	83 ec 0c             	sub    esp,0xc
c0016633:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016637:	8d ba ff 0f 00 00    	lea    edi,[edx+0xfff]
c001663d:	c1 e8 0c             	shr    eax,0xc
c0016640:	89 fe                	mov    esi,edi
c0016642:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0016646:	c1 ee 0c             	shr    esi,0xc
c0016649:	6a 01                	push   0x1
c001664b:	e8 9d 50 ff ff       	call   c000b6ed <Virt::allocateKernelVirtualPages(int)>
c0016650:	89 c5                	mov    ebp,eax
c0016652:	58                   	pop    eax
c0016653:	5a                   	pop    edx
c0016654:	56                   	push   esi
c0016655:	68 51 46 02 c0       	push   0xc0024651
c001665a:	e8 60 64 ff ff       	call   c000cabf <Dbg::kprintf(char const*, ...)>
c001665f:	59                   	pop    ecx
c0016660:	58                   	pop    eax
c0016661:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0016665:	68 63 46 02 c0       	push   0xc0024663
c001666a:	e8 50 64 ff ff       	call   c000cabf <Dbg::kprintf(char const*, ...)>
c001666f:	83 c4 10             	add    esp,0x10
c0016672:	81 ff ff 0f 00 00    	cmp    edi,0xfff
c0016678:	0f 86 31 01 00 00    	jbe    c00167af <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1da>
c001667e:	c1 e6 0c             	shl    esi,0xc
c0016681:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016684:	8d 04 1e             	lea    eax,[esi+ebx*1]
c0016687:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001668b:	8b bc 24 48 10 00 00 	mov    edi,DWORD PTR [esp+0x1048]
c0016692:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0016695:	01 df                	add    edi,ebx
c0016697:	2b 3c 24             	sub    edi,DWORD PTR [esp]
c001669a:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c001669e:	0f 84 08 01 00 00    	je     c00167ac <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1d7>
c00166a4:	81 ff 00 10 00 00    	cmp    edi,0x1000
c00166aa:	76 05                	jbe    c00166b1 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xdc>
c00166ac:	bf 00 10 00 00       	mov    edi,0x1000
c00166b1:	83 ec 0c             	sub    esp,0xc
c00166b4:	31 d2                	xor    edx,edx
c00166b6:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c00166bd:	8b 08                	mov    ecx,DWORD PTR [eax]
c00166bf:	8d 44 24 28          	lea    eax,[esp+0x28]
c00166c3:	50                   	push   eax
c00166c4:	8d 74 24 30          	lea    esi,[esp+0x30]
c00166c8:	56                   	push   esi
c00166c9:	52                   	push   edx
c00166ca:	57                   	push   edi
c00166cb:	ff b4 24 60 10 00 00 	push   DWORD PTR [esp+0x1060]
c00166d2:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00166d5:	83 c4 20             	add    esp,0x20
c00166d8:	85 c0                	test   eax,eax
c00166da:	74 0a                	je     c00166e6 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x111>
c00166dc:	53                   	push   ebx
c00166dd:	53                   	push   ebx
c00166de:	50                   	push   eax
c00166df:	68 75 46 02 c0       	push   0xc0024675
c00166e4:	eb 0f                	jmp    c00166f5 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x120>
c00166e6:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c00166ea:	74 20                	je     c001670c <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x137>
c00166ec:	51                   	push   ecx
c00166ed:	51                   	push   ecx
c00166ee:	6a 00                	push   0x0
c00166f0:	68 a0 46 02 c0       	push   0xc00246a0
c00166f5:	e8 c5 63 ff ff       	call   c000cabf <Dbg::kprintf(char const*, ...)>
c00166fa:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00166fd:	e8 1b 53 ff ff       	call   c000ba1d <Virt::freeKernelVirtualPages(unsigned long)>
c0016702:	83 c4 10             	add    esp,0x10
c0016705:	31 c0                	xor    eax,eax
c0016707:	e9 68 01 00 00       	jmp    c0016874 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x29f>
c001670c:	fa                   	cli    
c001670d:	ff 05 28 79 02 c0    	inc    DWORD PTR ds:0xc0027928
c0016713:	e8 e1 36 ff ff       	call   c0009df9 <Phys::allocatePage()>
c0016718:	6a 07                	push   0x7
c001671a:	89 c7                	mov    edi,eax
c001671c:	55                   	push   ebp
c001671d:	50                   	push   eax
c001671e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016723:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0016726:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c001672c:	e8 63 56 ff ff       	call   c000bd94 <VAS::mapPage(unsigned long, unsigned long, int)>
c0016731:	83 c4 0c             	add    esp,0xc
c0016734:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c001673b:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0016741:	6a 00                	push   0x0
c0016743:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016748:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001674b:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0016751:	e8 98 54 ff ff       	call   c000bbee <VAS::mapOtherVASIn(bool, VAS*)>
c0016756:	58                   	pop    eax
c0016757:	5a                   	pop    edx
c0016758:	68 07 0c 00 00       	push   0xc07
c001675d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0016761:	57                   	push   edi
c0016762:	89 ef                	mov    edi,ebp
c0016764:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c001676b:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0016771:	6a 00                	push   0x0
c0016773:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016778:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001677b:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0016781:	e8 ca 59 ff ff       	call   c000c150 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c0016786:	b9 00 10 00 00       	mov    ecx,0x1000
c001678b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001678d:	a1 28 79 02 c0       	mov    eax,ds:0xc0027928
c0016792:	83 c4 20             	add    esp,0x20
c0016795:	48                   	dec    eax
c0016796:	a3 28 79 02 c0       	mov    ds:0xc0027928,eax
c001679b:	85 c0                	test   eax,eax
c001679d:	75 01                	jne    c00167a0 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1cb>
c001679f:	fb                   	sti    
c00167a0:	81 04 24 00 10 00 00 	add    DWORD PTR [esp],0x1000
c00167a7:	e9 df fe ff ff       	jmp    c001668b <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xb6>
c00167ac:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c00167af:	81 7c 24 04 ff 0f 00 00 	cmp    DWORD PTR [esp+0x4],0xfff
c00167b7:	0f 86 a9 00 00 00    	jbe    c0016866 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x291>
c00167bd:	fa                   	cli    
c00167be:	ff 05 28 79 02 c0    	inc    DWORD PTR ds:0xc0027928
c00167c4:	51                   	push   ecx
c00167c5:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c00167cc:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00167d2:	6a 00                	push   0x0
c00167d4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00167d9:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00167dc:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00167e2:	e8 07 54 ff ff       	call   c000bbee <VAS::mapOtherVASIn(bool, VAS*)>
c00167e7:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00167eb:	c1 e6 0c             	shl    esi,0xc
c00167ee:	01 de                	add    esi,ebx
c00167f0:	83 c4 10             	add    esp,0x10
c00167f3:	39 de                	cmp    esi,ebx
c00167f5:	74 61                	je     c0016858 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x283>
c00167f7:	e8 fd 35 ff ff       	call   c0009df9 <Phys::allocatePage()>
c00167fc:	6a 07                	push   0x7
c00167fe:	89 c7                	mov    edi,eax
c0016800:	55                   	push   ebp
c0016801:	50                   	push   eax
c0016802:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016807:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001680a:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0016810:	e8 7f 55 ff ff       	call   c000bd94 <VAS::mapPage(unsigned long, unsigned long, int)>
c0016815:	58                   	pop    eax
c0016816:	5a                   	pop    edx
c0016817:	68 07 0c 00 00       	push   0xc07
c001681c:	53                   	push   ebx
c001681d:	81 c3 00 10 00 00    	add    ebx,0x1000
c0016823:	57                   	push   edi
c0016824:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c001682b:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0016831:	6a 00                	push   0x0
c0016833:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016838:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001683b:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0016841:	e8 0a 59 ff ff       	call   c000c150 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c0016846:	83 c4 1c             	add    esp,0x1c
c0016849:	68 00 10 00 00       	push   0x1000
c001684e:	6a 00                	push   0x0
c0016850:	55                   	push   ebp
c0016851:	e8 2e 9e fe ff       	call   c0000684 <memset>
c0016856:	eb 98                	jmp    c00167f0 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x21b>
c0016858:	a1 28 79 02 c0       	mov    eax,ds:0xc0027928
c001685d:	48                   	dec    eax
c001685e:	a3 28 79 02 c0       	mov    ds:0xc0027928,eax
c0016863:	75 01                	jne    c0016866 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x291>
c0016865:	fb                   	sti    
c0016866:	83 ec 0c             	sub    esp,0xc
c0016869:	55                   	push   ebp
c001686a:	e8 ae 51 ff ff       	call   c000ba1d <Virt::freeKernelVirtualPages(unsigned long)>
c001686f:	83 c4 10             	add    esp,0x10
c0016872:	b0 01                	mov    al,0x1
c0016874:	81 c4 2c 10 00 00    	add    esp,0x102c
c001687a:	5b                   	pop    ebx
c001687b:	5e                   	pop    esi
c001687c:	5f                   	pop    edi
c001687d:	5d                   	pop    ebp
c001687e:	c3                   	ret    

c001687f <Thr::loadProgramIntoMemory(Process*, char const*)>:
c001687f:	55                   	push   ebp
c0016880:	57                   	push   edi
c0016881:	56                   	push   esi
c0016882:	53                   	push   ebx
c0016883:	83 ec 48             	sub    esp,0x48
c0016886:	68 14 01 00 00       	push   0x114
c001688b:	e8 33 31 ff ff       	call   c00099c3 <malloc>
c0016890:	83 c4 0c             	add    esp,0xc
c0016893:	89 c6                	mov    esi,eax
c0016895:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0016899:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001689d:	50                   	push   eax
c001689e:	e8 87 67 ff ff       	call   c000d02a <File::File(char const*, Process*)>
c00168a3:	58                   	pop    eax
c00168a4:	5a                   	pop    edx
c00168a5:	6a 01                	push   0x1
c00168a7:	56                   	push   esi
c00168a8:	e8 e1 67 ff ff       	call   c000d08e <File::open(FileOpenMode)>
c00168ad:	83 c4 10             	add    esp,0x10
c00168b0:	85 c0                	test   eax,eax
c00168b2:	0f 85 47 01 00 00    	jne    c00169ff <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c00168b8:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c00168c0:	83 ec 0c             	sub    esp,0xc
c00168c3:	6a 34                	push   0x34
c00168c5:	e8 f9 30 ff ff       	call   c00099c3 <malloc>
c00168ca:	89 c3                	mov    ebx,eax
c00168cc:	58                   	pop    eax
c00168cd:	8b 06                	mov    eax,DWORD PTR [esi]
c00168cf:	8d 7c 24 38          	lea    edi,[esp+0x38]
c00168d3:	57                   	push   edi
c00168d4:	53                   	push   ebx
c00168d5:	6a 00                	push   0x0
c00168d7:	6a 34                	push   0x34
c00168d9:	56                   	push   esi
c00168da:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00168dd:	83 c4 20             	add    esp,0x20
c00168e0:	85 c0                	test   eax,eax
c00168e2:	0f 85 17 01 00 00    	jne    c00169ff <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c00168e8:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c00168ee:	0f 85 0b 01 00 00    	jne    c00169ff <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c00168f4:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00168f7:	85 c0                	test   eax,eax
c00168f9:	0f 84 00 01 00 00    	je     c00169ff <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c00168ff:	31 d2                	xor    edx,edx
c0016901:	55                   	push   ebp
c0016902:	52                   	push   edx
c0016903:	50                   	push   eax
c0016904:	56                   	push   esi
c0016905:	e8 42 68 ff ff       	call   c000d14c <File::seek(unsigned long long)>
c001690a:	83 c4 10             	add    esp,0x10
c001690d:	85 c0                	test   eax,eax
c001690f:	0f 85 ea 00 00 00    	jne    c00169ff <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0016915:	83 ec 0c             	sub    esp,0xc
c0016918:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001691b:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001691f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0016923:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c0016927:	0f af c2             	imul   eax,edx
c001692a:	50                   	push   eax
c001692b:	e8 93 30 ff ff       	call   c00099c3 <malloc>
c0016930:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0016932:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0016936:	89 3c 24             	mov    DWORD PTR [esp],edi
c0016939:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001693d:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c0016941:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c0016945:	0f af c2             	imul   eax,edx
c0016948:	99                   	cdq    
c0016949:	52                   	push   edx
c001694a:	50                   	push   eax
c001694b:	56                   	push   esi
c001694c:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001694f:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0016952:	83 c4 20             	add    esp,0x20
c0016955:	85 c0                	test   eax,eax
c0016957:	0f 84 a2 00 00 00    	je     c00169ff <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001695d:	31 d2                	xor    edx,edx
c001695f:	51                   	push   ecx
c0016960:	52                   	push   edx
c0016961:	50                   	push   eax
c0016962:	56                   	push   esi
c0016963:	e8 e4 67 ff ff       	call   c000d14c <File::seek(unsigned long long)>
c0016968:	83 c4 10             	add    esp,0x10
c001696b:	85 c0                	test   eax,eax
c001696d:	0f 85 8c 00 00 00    	jne    c00169ff <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0016973:	83 ec 0c             	sub    esp,0xc
c0016976:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001697a:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001697e:	31 ed                	xor    ebp,ebp
c0016980:	0f af c2             	imul   eax,edx
c0016983:	50                   	push   eax
c0016984:	e8 3a 30 ff ff       	call   c00099c3 <malloc>
c0016989:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001698b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001698f:	89 3c 24             	mov    DWORD PTR [esp],edi
c0016992:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016996:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001699a:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001699e:	0f af c2             	imul   eax,edx
c00169a1:	99                   	cdq    
c00169a2:	52                   	push   edx
c00169a3:	50                   	push   eax
c00169a4:	56                   	push   esi
c00169a5:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00169a8:	83 c4 20             	add    esp,0x20
c00169ab:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00169b3:	66 39 6b 2c          	cmp    WORD PTR [ebx+0x2c],bp
c00169b7:	0f 86 80 00 00 00    	jbe    c0016a3d <Thr::loadProgramIntoMemory(Process*, char const*)+0x1be>
c00169bd:	0f b7 fd             	movzx  edi,bp
c00169c0:	c1 e7 05             	shl    edi,0x5
c00169c3:	03 7c 24 0c          	add    edi,DWORD PTR [esp+0xc]
c00169c7:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c00169ca:	75 6b                	jne    c0016a37 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c00169cc:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c00169cf:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00169d3:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c00169d6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00169da:	52                   	push   edx
c00169db:	31 d2                	xor    edx,edx
c00169dd:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c00169e0:	52                   	push   edx
c00169e1:	50                   	push   eax
c00169e2:	56                   	push   esi
c00169e3:	e8 64 67 ff ff       	call   c000d14c <File::seek(unsigned long long)>
c00169e8:	83 c4 10             	add    esp,0x10
c00169eb:	85 c0                	test   eax,eax
c00169ed:	74 17                	je     c0016a06 <Thr::loadProgramIntoMemory(Process*, char const*)+0x187>
c00169ef:	83 ec 0c             	sub    esp,0xc
c00169f2:	68 cc 46 02 c0       	push   0xc00246cc
c00169f7:	e8 c3 60 ff ff       	call   c000cabf <Dbg::kprintf(char const*, ...)>
c00169fc:	83 c4 10             	add    esp,0x10
c00169ff:	31 c0                	xor    eax,eax
c0016a01:	e9 87 00 00 00       	jmp    c0016a8d <Thr::loadProgramIntoMemory(Process*, char const*)+0x20e>
c0016a06:	83 ec 0c             	sub    esp,0xc
c0016a09:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c0016a0c:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c0016a0f:	50                   	push   eax
c0016a10:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0016a14:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016a18:	56                   	push   esi
c0016a19:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0016a1d:	e8 b3 fb ff ff       	call   c00165d5 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c0016a22:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016a26:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c0016a2a:	83 c4 20             	add    esp,0x20
c0016a2d:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c0016a31:	73 04                	jae    c0016a37 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c0016a33:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016a37:	45                   	inc    ebp
c0016a38:	e9 76 ff ff ff       	jmp    c00169b3 <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c0016a3d:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0016a41:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0016a45:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016a49:	89 91 0e 05 00 00    	mov    DWORD PTR [ecx+0x50e],edx
c0016a4f:	83 ec 0c             	sub    esp,0xc
c0016a52:	8b 91 12 05 00 00    	mov    edx,DWORD PTR [ecx+0x512]
c0016a58:	25 00 f0 ff ff       	and    eax,0xfffff000
c0016a5d:	05 00 10 00 00       	add    eax,0x1000
c0016a62:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0016a65:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016a69:	e8 65 2f ff ff       	call   c00099d3 <free>
c0016a6e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016a71:	e8 5d 2f ff ff       	call   c00099d3 <free>
c0016a76:	58                   	pop    eax
c0016a77:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016a7b:	e8 53 2f ff ff       	call   c00099d3 <free>
c0016a80:	89 34 24             	mov    DWORD PTR [esp],esi
c0016a83:	e8 64 66 ff ff       	call   c000d0ec <File::close()>
c0016a88:	83 c4 10             	add    esp,0x10
c0016a8b:	b0 01                	mov    al,0x1
c0016a8d:	83 c4 3c             	add    esp,0x3c
c0016a90:	5b                   	pop    ebx
c0016a91:	5e                   	pop    esi
c0016a92:	5f                   	pop    edi
c0016a93:	5d                   	pop    ebp
c0016a94:	c3                   	ret    

c0016a95 <Thr::runtimeReferenceHelper()>:
c0016a95:	83 ec 18             	sub    esp,0x18
c0016a98:	68 d4 46 02 c0       	push   0xc00246d4
c0016a9d:	e8 1d 60 ff ff       	call   c000cabf <Dbg::kprintf(char const*, ...)>
c0016aa2:	fa                   	cli    
c0016aa3:	83 c4 10             	add    esp,0x10
c0016aa6:	eb fe                	jmp    c0016aa6 <Thr::runtimeReferenceHelper()+0x11>

c0016aa8 <Thr::getAddressOfKernelSymbol(char const*)>:
c0016aa8:	57                   	push   edi
c0016aa9:	56                   	push   esi
c0016aaa:	53                   	push   ebx
c0016aab:	31 db                	xor    ebx,ebx
c0016aad:	39 1d 00 79 02 c0    	cmp    DWORD PTR ds:0xc0027900,ebx
c0016ab3:	7e 3c                	jle    c0016af1 <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c0016ab5:	8b 34 9d 80 78 02 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffd8780]
c0016abc:	31 ff                	xor    edi,edi
c0016abe:	39 3c 9d 80 77 02 c0 	cmp    DWORD PTR [ebx*4-0x3ffd8880],edi
c0016ac5:	7e 27                	jle    c0016aee <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c0016ac7:	50                   	push   eax
c0016ac8:	50                   	push   eax
c0016ac9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016acd:	8b 06                	mov    eax,DWORD PTR [esi]
c0016acf:	03 04 9d 00 78 02 c0 	add    eax,DWORD PTR [ebx*4-0x3ffd8800]
c0016ad6:	50                   	push   eax
c0016ad7:	e8 f0 9c fe ff       	call   c00007cc <strcmp>
c0016adc:	83 c4 10             	add    esp,0x10
c0016adf:	85 c0                	test   eax,eax
c0016ae1:	75 05                	jne    c0016ae8 <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c0016ae3:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0016ae6:	eb 0b                	jmp    c0016af3 <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c0016ae8:	83 c6 10             	add    esi,0x10
c0016aeb:	47                   	inc    edi
c0016aec:	eb d0                	jmp    c0016abe <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c0016aee:	43                   	inc    ebx
c0016aef:	eb bc                	jmp    c0016aad <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c0016af1:	31 c0                	xor    eax,eax
c0016af3:	5b                   	pop    ebx
c0016af4:	5e                   	pop    esi
c0016af5:	5f                   	pop    edi
c0016af6:	c3                   	ret    

c0016af7 <Thr::loadKernelSymbolTable(char const*)>:
c0016af7:	55                   	push   ebp
c0016af8:	57                   	push   edi
c0016af9:	56                   	push   esi
c0016afa:	53                   	push   ebx
c0016afb:	83 ec 68             	sub    esp,0x68
c0016afe:	8b 35 50 79 02 c0    	mov    esi,DWORD PTR ds:0xc0027950
c0016b04:	68 14 01 00 00       	push   0x114
c0016b09:	e8 b5 2e ff ff       	call   c00099c3 <malloc>
c0016b0e:	83 c4 0c             	add    esp,0xc
c0016b11:	89 c3                	mov    ebx,eax
c0016b13:	56                   	push   esi
c0016b14:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c0016b18:	50                   	push   eax
c0016b19:	e8 0c 65 ff ff       	call   c000d02a <File::File(char const*, Process*)>
c0016b1e:	5e                   	pop    esi
c0016b1f:	5f                   	pop    edi
c0016b20:	6a 01                	push   0x1
c0016b22:	53                   	push   ebx
c0016b23:	e8 66 65 ff ff       	call   c000d08e <File::open(FileOpenMode)>
c0016b28:	83 c4 10             	add    esp,0x10
c0016b2b:	85 c0                	test   eax,eax
c0016b2d:	74 0a                	je     c0016b39 <Thr::loadKernelSymbolTable(char const*)+0x42>
c0016b2f:	83 ec 0c             	sub    esp,0xc
c0016b32:	68 f6 46 02 c0       	push   0xc00246f6
c0016b37:	eb 34                	jmp    c0016b6d <Thr::loadKernelSymbolTable(char const*)+0x76>
c0016b39:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0016b41:	83 ec 0c             	sub    esp,0xc
c0016b44:	6a 34                	push   0x34
c0016b46:	e8 78 2e ff ff       	call   c00099c3 <malloc>
c0016b4b:	59                   	pop    ecx
c0016b4c:	89 c7                	mov    edi,eax
c0016b4e:	8d 74 24 34          	lea    esi,[esp+0x34]
c0016b52:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016b54:	56                   	push   esi
c0016b55:	57                   	push   edi
c0016b56:	6a 00                	push   0x0
c0016b58:	6a 34                	push   0x34
c0016b5a:	53                   	push   ebx
c0016b5b:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0016b5e:	83 c4 20             	add    esp,0x20
c0016b61:	85 c0                	test   eax,eax
c0016b63:	74 17                	je     c0016b7c <Thr::loadKernelSymbolTable(char const*)+0x85>
c0016b65:	83 ec 0c             	sub    esp,0xc
c0016b68:	68 0d 47 02 c0       	push   0xc002470d
c0016b6d:	e8 0f d8 ff ff       	call   c0014381 <Krnl::panic(char const*)>
c0016b72:	83 c4 10             	add    esp,0x10
c0016b75:	31 c0                	xor    eax,eax
c0016b77:	e9 31 02 00 00       	jmp    c0016dad <Thr::loadKernelSymbolTable(char const*)+0x2b6>
c0016b7c:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c0016b82:	75 e1                	jne    c0016b65 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0016b84:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c0016b87:	85 c0                	test   eax,eax
c0016b89:	74 da                	je     c0016b65 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0016b8b:	52                   	push   edx
c0016b8c:	31 d2                	xor    edx,edx
c0016b8e:	52                   	push   edx
c0016b8f:	50                   	push   eax
c0016b90:	53                   	push   ebx
c0016b91:	e8 b6 65 ff ff       	call   c000d14c <File::seek(unsigned long long)>
c0016b96:	83 c4 10             	add    esp,0x10
c0016b99:	85 c0                	test   eax,eax
c0016b9b:	75 c8                	jne    c0016b65 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0016b9d:	83 ec 0c             	sub    esp,0xc
c0016ba0:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0016ba4:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0016ba8:	31 ed                	xor    ebp,ebp
c0016baa:	0f af c2             	imul   eax,edx
c0016bad:	50                   	push   eax
c0016bae:	e8 10 2e ff ff       	call   c00099c3 <malloc>
c0016bb3:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0016bb5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0016bb9:	89 34 24             	mov    DWORD PTR [esp],esi
c0016bbc:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016bc0:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0016bc4:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0016bc8:	0f af c2             	imul   eax,edx
c0016bcb:	99                   	cdq    
c0016bcc:	52                   	push   edx
c0016bcd:	50                   	push   eax
c0016bce:	53                   	push   ebx
c0016bcf:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0016bd2:	83 c4 20             	add    esp,0x20
c0016bd5:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0016bdd:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0016be5:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0016bed:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0016bf5:	66 39 6f 30          	cmp    WORD PTR [edi+0x30],bp
c0016bf9:	0f 86 aa 00 00 00    	jbe    c0016ca9 <Thr::loadKernelSymbolTable(char const*)+0x1b2>
c0016bff:	0f b7 f5             	movzx  esi,bp
c0016c02:	6b f6 28             	imul   esi,esi,0x28
c0016c05:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c0016c09:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0016c0c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0016c10:	50                   	push   eax
c0016c11:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016c15:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c0016c19:	8b 16                	mov    edx,DWORD PTR [esi]
c0016c1b:	6b c0 28             	imul   eax,eax,0x28
c0016c1e:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c0016c22:	89 d0                	mov    eax,edx
c0016c24:	31 d2                	xor    edx,edx
c0016c26:	52                   	push   edx
c0016c27:	50                   	push   eax
c0016c28:	53                   	push   ebx
c0016c29:	e8 1e 65 ff ff       	call   c000d14c <File::seek(unsigned long long)>
c0016c2e:	83 c4 0c             	add    esp,0xc
c0016c31:	6a 20                	push   0x20
c0016c33:	6a 00                	push   0x0
c0016c35:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c0016c39:	52                   	push   edx
c0016c3a:	e8 45 9a fe ff       	call   c0000684 <memset>
c0016c3f:	58                   	pop    eax
c0016c40:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016c42:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c0016c46:	51                   	push   ecx
c0016c47:	8d 54 24 40          	lea    edx,[esp+0x40]
c0016c4b:	52                   	push   edx
c0016c4c:	6a 00                	push   0x0
c0016c4e:	6a 1f                	push   0x1f
c0016c50:	53                   	push   ebx
c0016c51:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0016c54:	83 c4 18             	add    esp,0x18
c0016c57:	68 24 47 02 c0       	push   0xc0024724
c0016c5c:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c0016c60:	52                   	push   edx
c0016c61:	e8 66 9b fe ff       	call   c00007cc <strcmp>
c0016c66:	83 c4 10             	add    esp,0x10
c0016c69:	85 c0                	test   eax,eax
c0016c6b:	75 0f                	jne    c0016c7c <Thr::loadKernelSymbolTable(char const*)+0x185>
c0016c6d:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0016c70:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0016c74:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016c78:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016c7c:	50                   	push   eax
c0016c7d:	50                   	push   eax
c0016c7e:	68 2c 47 02 c0       	push   0xc002472c
c0016c83:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c0016c87:	50                   	push   eax
c0016c88:	e8 3f 9b fe ff       	call   c00007cc <strcmp>
c0016c8d:	83 c4 10             	add    esp,0x10
c0016c90:	85 c0                	test   eax,eax
c0016c92:	75 0f                	jne    c0016ca3 <Thr::loadKernelSymbolTable(char const*)+0x1ac>
c0016c94:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0016c97:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0016c9b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016c9f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016ca3:	45                   	inc    ebp
c0016ca4:	e9 4c ff ff ff       	jmp    c0016bf5 <Thr::loadKernelSymbolTable(char const*)+0xfe>
c0016ca9:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0016cae:	75 10                	jne    c0016cc0 <Thr::loadKernelSymbolTable(char const*)+0x1c9>
c0016cb0:	83 ec 0c             	sub    esp,0xc
c0016cb3:	68 34 47 02 c0       	push   0xc0024734
c0016cb8:	e8 c4 d6 ff ff       	call   c0014381 <Krnl::panic(char const*)>
c0016cbd:	83 c4 10             	add    esp,0x10
c0016cc0:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c0016cc5:	75 10                	jne    c0016cd7 <Thr::loadKernelSymbolTable(char const*)+0x1e0>
c0016cc7:	83 ec 0c             	sub    esp,0xc
c0016cca:	68 34 47 02 c0       	push   0xc0024734
c0016ccf:	e8 ad d6 ff ff       	call   c0014381 <Krnl::panic(char const*)>
c0016cd4:	83 c4 10             	add    esp,0x10
c0016cd7:	31 d2                	xor    edx,edx
c0016cd9:	50                   	push   eax
c0016cda:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016cde:	52                   	push   edx
c0016cdf:	50                   	push   eax
c0016ce0:	53                   	push   ebx
c0016ce1:	e8 66 64 ff ff       	call   c000d14c <File::seek(unsigned long long)>
c0016ce6:	5a                   	pop    edx
c0016ce7:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0016ceb:	e8 d3 2c ff ff       	call   c00099c3 <malloc>
c0016cf0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0016cf4:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0016cf8:	31 c9                	xor    ecx,ecx
c0016cfa:	5e                   	pop    esi
c0016cfb:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016cfd:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c0016d01:	55                   	push   ebp
c0016d02:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016d06:	51                   	push   ecx
c0016d07:	52                   	push   edx
c0016d08:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0016d0c:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c0016d10:	53                   	push   ebx
c0016d11:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0016d14:	83 c4 14             	add    esp,0x14
c0016d17:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0016d1b:	e8 a3 2c ff ff       	call   c00099c3 <malloc>
c0016d20:	89 c6                	mov    esi,eax
c0016d22:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016d24:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0016d27:	56                   	push   esi
c0016d28:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0016d2c:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0016d30:	51                   	push   ecx
c0016d31:	52                   	push   edx
c0016d32:	53                   	push   ebx
c0016d33:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0016d36:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016d3a:	8b 15 00 79 02 c0    	mov    edx,DWORD PTR ds:0xc0027900
c0016d40:	83 c4 1c             	add    esp,0x1c
c0016d43:	c1 e8 04             	shr    eax,0x4
c0016d46:	89 04 95 80 77 02 c0 	mov    DWORD PTR [edx*4-0x3ffd8880],eax
c0016d4d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0016d51:	31 d2                	xor    edx,edx
c0016d53:	52                   	push   edx
c0016d54:	50                   	push   eax
c0016d55:	53                   	push   ebx
c0016d56:	e8 f1 63 ff ff       	call   c000d14c <File::seek(unsigned long long)>
c0016d5b:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0016d5d:	31 d2                	xor    edx,edx
c0016d5f:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0016d62:	56                   	push   esi
c0016d63:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0016d67:	52                   	push   edx
c0016d68:	50                   	push   eax
c0016d69:	53                   	push   ebx
c0016d6a:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0016d6d:	83 c4 14             	add    esp,0x14
c0016d70:	53                   	push   ebx
c0016d71:	e8 76 63 ff ff       	call   c000d0ec <File::close()>
c0016d76:	5d                   	pop    ebp
c0016d77:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0016d7b:	e8 53 2c ff ff       	call   c00099d3 <free>
c0016d80:	89 3c 24             	mov    DWORD PTR [esp],edi
c0016d83:	e8 4b 2c ff ff       	call   c00099d3 <free>
c0016d88:	a1 00 79 02 c0       	mov    eax,ds:0xc0027900
c0016d8d:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0016d91:	8d 50 01             	lea    edx,[eax+0x1]
c0016d94:	89 0c 85 80 78 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8780],ecx
c0016d9b:	89 34 85 00 78 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8800],esi
c0016da2:	89 15 00 79 02 c0    	mov    DWORD PTR ds:0xc0027900,edx
c0016da8:	83 c4 10             	add    esp,0x10
c0016dab:	b0 01                	mov    al,0x1
c0016dad:	83 c4 5c             	add    esp,0x5c
c0016db0:	5b                   	pop    ebx
c0016db1:	5e                   	pop    esi
c0016db2:	5f                   	pop    edi
c0016db3:	5d                   	pop    ebp
c0016db4:	c3                   	ret    

c0016db5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c0016db5:	55                   	push   ebp
c0016db6:	57                   	push   edi
c0016db7:	56                   	push   esi
c0016db8:	53                   	push   ebx
c0016db9:	81 ec 68 03 00 00    	sub    esp,0x368
c0016dbf:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c0016dc6:	8b 1d 50 79 02 c0    	mov    ebx,DWORD PTR ds:0xc0027950
c0016dcc:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c0016dd0:	68 14 01 00 00       	push   0x114
c0016dd5:	e8 e9 2b ff ff       	call   c00099c3 <malloc>
c0016dda:	83 c4 0c             	add    esp,0xc
c0016ddd:	89 c5                	mov    ebp,eax
c0016ddf:	53                   	push   ebx
c0016de0:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c0016de7:	50                   	push   eax
c0016de8:	e8 3d 62 ff ff       	call   c000d02a <File::File(char const*, Process*)>
c0016ded:	5e                   	pop    esi
c0016dee:	5f                   	pop    edi
c0016def:	6a 01                	push   0x1
c0016df1:	55                   	push   ebp
c0016df2:	e8 97 62 ff ff       	call   c000d08e <File::open(FileOpenMode)>
c0016df7:	83 c4 10             	add    esp,0x10
c0016dfa:	85 c0                	test   eax,eax
c0016dfc:	0f 85 a7 06 00 00    	jne    c00174a9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0016e02:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0016e0a:	83 ec 0c             	sub    esp,0xc
c0016e0d:	6a 34                	push   0x34
c0016e0f:	e8 af 2b ff ff       	call   c00099c3 <malloc>
c0016e14:	5b                   	pop    ebx
c0016e15:	89 c7                	mov    edi,eax
c0016e17:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c0016e1b:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0016e1e:	53                   	push   ebx
c0016e1f:	57                   	push   edi
c0016e20:	6a 00                	push   0x0
c0016e22:	6a 34                	push   0x34
c0016e24:	55                   	push   ebp
c0016e25:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0016e28:	83 c4 20             	add    esp,0x20
c0016e2b:	85 c0                	test   eax,eax
c0016e2d:	0f 85 76 06 00 00    	jne    c00174a9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0016e33:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c0016e39:	0f 85 6a 06 00 00    	jne    c00174a9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0016e3f:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c0016e42:	85 c0                	test   eax,eax
c0016e44:	0f 84 5f 06 00 00    	je     c00174a9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0016e4a:	31 d2                	xor    edx,edx
c0016e4c:	51                   	push   ecx
c0016e4d:	52                   	push   edx
c0016e4e:	50                   	push   eax
c0016e4f:	55                   	push   ebp
c0016e50:	e8 f7 62 ff ff       	call   c000d14c <File::seek(unsigned long long)>
c0016e55:	83 c4 10             	add    esp,0x10
c0016e58:	85 c0                	test   eax,eax
c0016e5a:	0f 85 49 06 00 00    	jne    c00174a9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0016e60:	83 ec 0c             	sub    esp,0xc
c0016e63:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
c0016e66:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0016e6a:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0016e6e:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0016e72:	0f af c2             	imul   eax,edx
c0016e75:	50                   	push   eax
c0016e76:	e8 48 2b ff ff       	call   c00099c3 <malloc>
c0016e7b:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0016e7e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0016e82:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016e85:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016e89:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0016e8d:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0016e91:	0f af c2             	imul   eax,edx
c0016e94:	99                   	cdq    
c0016e95:	52                   	push   edx
c0016e96:	50                   	push   eax
c0016e97:	55                   	push   ebp
c0016e98:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0016e9b:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c0016e9e:	83 c4 20             	add    esp,0x20
c0016ea1:	85 c0                	test   eax,eax
c0016ea3:	0f 84 00 06 00 00    	je     c00174a9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0016ea9:	52                   	push   edx
c0016eaa:	31 d2                	xor    edx,edx
c0016eac:	52                   	push   edx
c0016ead:	50                   	push   eax
c0016eae:	55                   	push   ebp
c0016eaf:	e8 98 62 ff ff       	call   c000d14c <File::seek(unsigned long long)>
c0016eb4:	83 c4 10             	add    esp,0x10
c0016eb7:	85 c0                	test   eax,eax
c0016eb9:	0f 85 ea 05 00 00    	jne    c00174a9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0016ebf:	83 ec 0c             	sub    esp,0xc
c0016ec2:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c0016ec6:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c0016eca:	31 f6                	xor    esi,esi
c0016ecc:	0f af c2             	imul   eax,edx
c0016ecf:	50                   	push   eax
c0016ed0:	e8 ee 2a ff ff       	call   c00099c3 <malloc>
c0016ed5:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0016ed8:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0016edc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016edf:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0016ee3:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c0016ee7:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c0016eeb:	0f af c2             	imul   eax,edx
c0016eee:	99                   	cdq    
c0016eef:	52                   	push   edx
c0016ef0:	50                   	push   eax
c0016ef1:	55                   	push   ebp
c0016ef2:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0016ef5:	83 c4 20             	add    esp,0x20
c0016ef8:	66 39 77 2c          	cmp    WORD PTR [edi+0x2c],si
c0016efc:	0f 86 8a 00 00 00    	jbe    c0016f8c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d7>
c0016f02:	0f b7 de             	movzx  ebx,si
c0016f05:	c1 e3 05             	shl    ebx,0x5
c0016f08:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c0016f0c:	83 3b 01             	cmp    DWORD PTR [ebx],0x1
c0016f0f:	75 75                	jne    c0016f86 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d1>
c0016f11:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016f14:	31 d2                	xor    edx,edx
c0016f16:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0016f1a:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0016f1d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016f21:	50                   	push   eax
c0016f22:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0016f25:	52                   	push   edx
c0016f26:	50                   	push   eax
c0016f27:	55                   	push   ebp
c0016f28:	e8 1f 62 ff ff       	call   c000d14c <File::seek(unsigned long long)>
c0016f2d:	83 c4 10             	add    esp,0x10
c0016f30:	85 c0                	test   eax,eax
c0016f32:	0f 85 71 05 00 00    	jne    c00174a9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0016f38:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c0016f3f:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0016f42:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c0016f46:	31 d2                	xor    edx,edx
c0016f48:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0016f4c:	83 ec 0c             	sub    esp,0xc
c0016f4f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016f53:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0016f5a:	50                   	push   eax
c0016f5b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0016f5f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016f63:	52                   	push   edx
c0016f64:	50                   	push   eax
c0016f65:	55                   	push   ebp
c0016f66:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0016f69:	83 c4 1c             	add    esp,0x1c
c0016f6c:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0016f6f:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c0016f72:	50                   	push   eax
c0016f73:	6a 00                	push   0x0
c0016f75:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016f79:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0016f7d:	50                   	push   eax
c0016f7e:	e8 01 97 fe ff       	call   c0000684 <memset>
c0016f83:	83 c4 10             	add    esp,0x10
c0016f86:	46                   	inc    esi
c0016f87:	e9 6c ff ff ff       	jmp    c0016ef8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x143>
c0016f8c:	53                   	push   ebx
c0016f8d:	31 db                	xor    ebx,ebx
c0016f8f:	68 00 01 00 00       	push   0x100
c0016f94:	6a 00                	push   0x0
c0016f96:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c0016f9a:	50                   	push   eax
c0016f9b:	e8 e4 96 fe ff       	call   c0000684 <memset>
c0016fa0:	83 c4 0c             	add    esp,0xc
c0016fa3:	68 00 01 00 00       	push   0x100
c0016fa8:	6a 00                	push   0x0
c0016faa:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c0016fb1:	50                   	push   eax
c0016fb2:	e8 cd 96 fe ff       	call   c0000684 <memset>
c0016fb7:	83 c4 10             	add    esp,0x10
c0016fba:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0016fc2:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0016fca:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c0016fd2:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0016fda:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0016fe2:	66 39 5f 30          	cmp    WORD PTR [edi+0x30],bx
c0016fe6:	0f 86 30 01 00 00    	jbe    c001711c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x367>
c0016fec:	0f b7 f3             	movzx  esi,bx
c0016fef:	6b f6 28             	imul   esi,esi,0x28
c0016ff2:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c0016ff6:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0016ff9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016ffd:	52                   	push   edx
c0016ffe:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0017002:	0f b7 57 32          	movzx  edx,WORD PTR [edi+0x32]
c0017006:	8b 06                	mov    eax,DWORD PTR [esi]
c0017008:	6b d2 28             	imul   edx,edx,0x28
c001700b:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c001700f:	31 d2                	xor    edx,edx
c0017011:	52                   	push   edx
c0017012:	50                   	push   eax
c0017013:	55                   	push   ebp
c0017014:	e8 33 61 ff ff       	call   c000d14c <File::seek(unsigned long long)>
c0017019:	83 c4 0c             	add    esp,0xc
c001701c:	6a 20                	push   0x20
c001701e:	6a 00                	push   0x0
c0017020:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0017027:	51                   	push   ecx
c0017028:	e8 57 96 fe ff       	call   c0000684 <memset>
c001702d:	59                   	pop    ecx
c001702e:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0017031:	8d 54 24 58          	lea    edx,[esp+0x58]
c0017035:	52                   	push   edx
c0017036:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c001703d:	51                   	push   ecx
c001703e:	6a 00                	push   0x0
c0017040:	6a 1f                	push   0x1f
c0017042:	55                   	push   ebp
c0017043:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0017046:	83 c4 1c             	add    esp,0x1c
c0017049:	6a 09                	push   0x9
c001704b:	68 4e 47 02 c0       	push   0xc002474e
c0017050:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0017057:	51                   	push   ecx
c0017058:	e8 23 95 fe ff       	call   c0000580 <memcmp>
c001705d:	83 c4 10             	add    esp,0x10
c0017060:	85 c0                	test   eax,eax
c0017062:	75 21                	jne    c0017085 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2d0>
c0017064:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017068:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001706c:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c0017070:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0017074:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0017077:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c001707e:	89 d0                	mov    eax,edx
c0017080:	40                   	inc    eax
c0017081:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017085:	50                   	push   eax
c0017086:	6a 09                	push   0x9
c0017088:	68 58 47 02 c0       	push   0xc0024758
c001708d:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0017094:	50                   	push   eax
c0017095:	e8 e6 94 fe ff       	call   c0000580 <memcmp>
c001709a:	83 c4 10             	add    esp,0x10
c001709d:	85 c0                	test   eax,eax
c001709f:	75 21                	jne    c00170c2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x30d>
c00170a1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00170a5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00170a9:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c00170ad:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00170b1:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00170b4:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c00170bb:	89 d0                	mov    eax,edx
c00170bd:	40                   	inc    eax
c00170be:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00170c2:	50                   	push   eax
c00170c3:	50                   	push   eax
c00170c4:	68 24 47 02 c0       	push   0xc0024724
c00170c9:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00170d0:	50                   	push   eax
c00170d1:	e8 f6 96 fe ff       	call   c00007cc <strcmp>
c00170d6:	83 c4 10             	add    esp,0x10
c00170d9:	85 c0                	test   eax,eax
c00170db:	75 0f                	jne    c00170ec <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x337>
c00170dd:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00170e0:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00170e4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00170e8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00170ec:	50                   	push   eax
c00170ed:	50                   	push   eax
c00170ee:	68 2c 47 02 c0       	push   0xc002472c
c00170f3:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00170fa:	50                   	push   eax
c00170fb:	e8 cc 96 fe ff       	call   c00007cc <strcmp>
c0017100:	83 c4 10             	add    esp,0x10
c0017103:	85 c0                	test   eax,eax
c0017105:	75 0f                	jne    c0017116 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x361>
c0017107:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001710a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001710e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017112:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0017116:	43                   	inc    ebx
c0017117:	e9 c6 fe ff ff       	jmp    c0016fe2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x22d>
c001711c:	31 d2                	xor    edx,edx
c001711e:	50                   	push   eax
c001711f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017123:	52                   	push   edx
c0017124:	50                   	push   eax
c0017125:	55                   	push   ebp
c0017126:	e8 21 60 ff ff       	call   c000d14c <File::seek(unsigned long long)>
c001712b:	58                   	pop    eax
c001712c:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0017130:	e8 8e 28 ff ff       	call   c00099c3 <malloc>
c0017135:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0017138:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001713c:	31 d2                	xor    edx,edx
c001713e:	58                   	pop    eax
c001713f:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c0017143:	53                   	push   ebx
c0017144:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0017148:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001714c:	52                   	push   edx
c001714d:	50                   	push   eax
c001714e:	55                   	push   ebp
c001714f:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0017152:	83 c4 14             	add    esp,0x14
c0017155:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017159:	e8 65 28 ff ff       	call   c00099c3 <malloc>
c001715e:	31 d2                	xor    edx,edx
c0017160:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0017164:	83 c4 0c             	add    esp,0xc
c0017167:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001716b:	52                   	push   edx
c001716c:	50                   	push   eax
c001716d:	55                   	push   ebp
c001716e:	e8 d9 5f ff ff       	call   c000d14c <File::seek(unsigned long long)>
c0017173:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0017176:	31 d2                	xor    edx,edx
c0017178:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001717b:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001717f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017183:	52                   	push   edx
c0017184:	50                   	push   eax
c0017185:	55                   	push   ebp
c0017186:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0017189:	83 c4 20             	add    esp,0x20
c001718c:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0017194:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0017198:	39 5c 24 04          	cmp    DWORD PTR [esp+0x4],ebx
c001719c:	0f 84 0b 03 00 00    	je     c00174ad <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f8>
c00171a2:	8b 84 9c 50 01 00 00 	mov    eax,DWORD PTR [esp+ebx*4+0x150]
c00171a9:	31 d2                	xor    edx,edx
c00171ab:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00171af:	c1 e8 03             	shr    eax,0x3
c00171b2:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00171b6:	51                   	push   ecx
c00171b7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00171bb:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c00171bf:	52                   	push   edx
c00171c0:	50                   	push   eax
c00171c1:	55                   	push   ebp
c00171c2:	e8 85 5f ff ff       	call   c000d14c <File::seek(unsigned long long)>
c00171c7:	5b                   	pop    ebx
c00171c8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00171cc:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c00171d3:	e8 eb 27 ff ff       	call   c00099c3 <malloc>
c00171d8:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c00171db:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00171df:	31 d2                	xor    edx,edx
c00171e1:	5e                   	pop    esi
c00171e2:	8d 44 24 58          	lea    eax,[esp+0x58]
c00171e6:	50                   	push   eax
c00171e7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00171eb:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00171ef:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c00171f6:	52                   	push   edx
c00171f7:	50                   	push   eax
c00171f8:	55                   	push   ebp
c00171f9:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00171fc:	83 c4 20             	add    esp,0x20
c00171ff:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0017207:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001720b:	39 74 24 20          	cmp    DWORD PTR [esp+0x20],esi
c001720f:	0f 8d 7c 02 00 00    	jge    c0017491 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6dc>
c0017215:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0017219:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001721d:	c6 44 24 24 00       	mov    BYTE PTR [esp+0x24],0x0
c0017222:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c0017225:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0017229:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001722d:	8b 5c d8 04          	mov    ebx,DWORD PTR [eax+ebx*8+0x4]
c0017231:	89 d8                	mov    eax,ebx
c0017233:	c1 e8 08             	shr    eax,0x8
c0017236:	89 c6                	mov    esi,eax
c0017238:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001723c:	c1 e6 04             	shl    esi,0x4
c001723f:	03 74 24 34          	add    esi,DWORD PTR [esp+0x34]
c0017243:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c0017246:	85 d2                	test   edx,edx
c0017248:	0f 85 bf 00 00 00    	jne    c001730d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001724e:	83 ec 0c             	sub    esp,0xc
c0017251:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017255:	03 06                	add    eax,DWORD PTR [esi]
c0017257:	50                   	push   eax
c0017258:	e8 4b f8 ff ff       	call   c0016aa8 <Thr::getAddressOfKernelSymbol(char const*)>
c001725d:	83 c4 10             	add    esp,0x10
c0017260:	89 c2                	mov    edx,eax
c0017262:	c6 44 24 24 01       	mov    BYTE PTR [esp+0x24],0x1
c0017267:	85 c0                	test   eax,eax
c0017269:	0f 85 9e 00 00 00    	jne    c001730d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001726f:	83 ec 0c             	sub    esp,0xc
c0017272:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017276:	03 06                	add    eax,DWORD PTR [esi]
c0017278:	50                   	push   eax
c0017279:	e8 92 16 ff ff       	call   c0008910 <Krnl::resolveCompatibilitySymbol(char*)>
c001727e:	83 c4 10             	add    esp,0x10
c0017281:	89 c2                	mov    edx,eax
c0017283:	85 c0                	test   eax,eax
c0017285:	0f 85 82 00 00 00    	jne    c001730d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001728b:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c001728f:	50                   	push   eax
c0017290:	50                   	push   eax
c0017291:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017295:	03 06                	add    eax,DWORD PTR [esi]
c0017297:	50                   	push   eax
c0017298:	68 62 47 02 c0       	push   0xc0024762
c001729d:	e8 1d 58 ff ff       	call   c000cabf <Dbg::kprintf(char const*, ...)>
c00172a2:	58                   	pop    eax
c00172a3:	5a                   	pop    edx
c00172a4:	68 7c 47 02 c0       	push   0xc002477c
c00172a9:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00172b0:	50                   	push   eax
c00172b1:	e8 8a 94 fe ff       	call   c0000740 <strcpy>
c00172b6:	59                   	pop    ecx
c00172b7:	58                   	pop    eax
c00172b8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00172bc:	03 06                	add    eax,DWORD PTR [esi]
c00172be:	50                   	push   eax
c00172bf:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00172c6:	50                   	push   eax
c00172c7:	e8 b4 95 fe ff       	call   c0000880 <strcat>
c00172cc:	58                   	pop    eax
c00172cd:	5a                   	pop    edx
c00172ce:	68 12 48 02 c0       	push   0xc0024812
c00172d3:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00172da:	50                   	push   eax
c00172db:	e8 a0 95 fe ff       	call   c0000880 <strcat>
c00172e0:	83 c4 10             	add    esp,0x10
c00172e3:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c00172e8:	0f 84 5d 01 00 00    	je     c001744b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c00172ee:	83 ec 0c             	sub    esp,0xc
c00172f1:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00172f8:	50                   	push   eax
c00172f9:	e8 83 d0 ff ff       	call   c0014381 <Krnl::panic(char const*)>
c00172fe:	83 c4 10             	add    esp,0x10
c0017301:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0017305:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0017309:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001730d:	80 fb 01             	cmp    bl,0x1
c0017310:	0f 85 88 00 00 00    	jne    c001739e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e9>
c0017316:	8b 8c 24 74 03 00 00 	mov    ecx,DWORD PTR [esp+0x374]
c001731d:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0017321:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c0017325:	01 ce                	add    esi,ecx
c0017327:	81 fb 01 04 00 00    	cmp    ebx,0x401
c001732d:	0f 94 c0             	sete   al
c0017330:	81 fb 01 01 00 00    	cmp    ebx,0x101
c0017336:	0f 94 c3             	sete   bl
c0017339:	09 c3                	or     ebx,eax
c001733b:	8b 06                	mov    eax,DWORD PTR [esi]
c001733d:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c0017342:	74 41                	je     c0017385 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d0>
c0017344:	8d 0c 02             	lea    ecx,[edx+eax*1]
c0017347:	84 db                	test   bl,bl
c0017349:	75 15                	jne    c0017360 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ab>
c001734b:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001734f:	66 83 f8 0c          	cmp    ax,0xc
c0017353:	76 05                	jbe    c001735a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5a5>
c0017355:	b8 0c 00 00 00       	mov    eax,0xc
c001735a:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c001735e:	76 37                	jbe    c0017397 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c0017360:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0017364:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0017369:	0f 84 dc 00 00 00    	je     c001744b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c001736f:	83 ec 0c             	sub    esp,0xc
c0017372:	68 93 47 02 c0       	push   0xc0024793
c0017377:	e8 05 d0 ff ff       	call   c0014381 <Krnl::panic(char const*)>
c001737c:	83 c4 10             	add    esp,0x10
c001737f:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0017383:	eb 12                	jmp    c0017397 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c0017385:	01 c1                	add    ecx,eax
c0017387:	84 db                	test   bl,bl
c0017389:	75 0c                	jne    c0017397 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c001738b:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001738f:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c0017393:	77 02                	ja     c0017397 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c0017395:	01 d1                	add    ecx,edx
c0017397:	89 0e                	mov    DWORD PTR [esi],ecx
c0017399:	e9 ea 00 00 00       	jmp    c0017488 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c001739e:	80 fb 02             	cmp    bl,0x2
c00173a1:	75 7c                	jne    c001741f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x66a>
c00173a3:	8b b4 24 74 03 00 00 	mov    esi,DWORD PTR [esp+0x374]
c00173aa:	2b 74 24 28          	sub    esi,DWORD PTR [esp+0x28]
c00173ae:	03 74 24 2c          	add    esi,DWORD PTR [esp+0x2c]
c00173b2:	81 fb 01 04 00 00    	cmp    ebx,0x401
c00173b8:	74 20                	je     c00173da <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x625>
c00173ba:	81 fb 01 01 00 00    	cmp    ebx,0x101
c00173c0:	74 18                	je     c00173da <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x625>
c00173c2:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c00173c6:	b9 0a 00 00 00       	mov    ecx,0xa
c00173cb:	66 83 f8 0e          	cmp    ax,0xe
c00173cf:	77 03                	ja     c00173d4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x61f>
c00173d1:	8d 48 fc             	lea    ecx,[eax-0x4]
c00173d4:	3b 4c 24 30          	cmp    ecx,DWORD PTR [esp+0x30]
c00173d8:	76 1f                	jbe    c00173f9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x644>
c00173da:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c00173de:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c00173e3:	74 66                	je     c001744b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c00173e5:	83 ec 0c             	sub    esp,0xc
c00173e8:	68 af 47 02 c0       	push   0xc00247af
c00173ed:	e8 8f cf ff ff       	call   c0014381 <Krnl::panic(char const*)>
c00173f2:	83 c4 10             	add    esp,0x10
c00173f5:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00173f9:	8b 06                	mov    eax,DWORD PTR [esi]
c00173fb:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c0017400:	74 13                	je     c0017415 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x660>
c0017402:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0017406:	2b 8c 24 74 03 00 00 	sub    ecx,DWORD PTR [esp+0x374]
c001740d:	2b 4c 24 2c          	sub    ecx,DWORD PTR [esp+0x2c]
c0017411:	01 c8                	add    eax,ecx
c0017413:	eb 04                	jmp    c0017419 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x664>
c0017415:	2b 44 24 2c          	sub    eax,DWORD PTR [esp+0x2c]
c0017419:	01 c2                	add    edx,eax
c001741b:	89 16                	mov    DWORD PTR [esi],edx
c001741d:	eb 69                	jmp    c0017488 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c001741f:	0f b6 db             	movzx  ebx,bl
c0017422:	50                   	push   eax
c0017423:	50                   	push   eax
c0017424:	53                   	push   ebx
c0017425:	68 cb 47 02 c0       	push   0xc00247cb
c001742a:	e8 90 56 ff ff       	call   c000cabf <Dbg::kprintf(char const*, ...)>
c001742f:	83 c4 10             	add    esp,0x10
c0017432:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0017437:	74 12                	je     c001744b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c0017439:	83 ec 0c             	sub    esp,0xc
c001743c:	68 d6 47 02 c0       	push   0xc00247d6
c0017441:	e8 3b cf ff ff       	call   c0014381 <Krnl::panic(char const*)>
c0017446:	83 c4 10             	add    esp,0x10
c0017449:	eb 3d                	jmp    c0017488 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c001744b:	83 ec 0c             	sub    esp,0xc
c001744e:	55                   	push   ebp
c001744f:	e8 98 5c ff ff       	call   c000d0ec <File::close()>
c0017454:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0017457:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001745a:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001745d:	59                   	pop    ecx
c001745e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017462:	e8 6c 25 ff ff       	call   c00099d3 <free>
c0017467:	5b                   	pop    ebx
c0017468:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001746c:	e8 62 25 ff ff       	call   c00099d3 <free>
c0017471:	89 3c 24             	mov    DWORD PTR [esp],edi
c0017474:	e8 5a 25 ff ff       	call   c00099d3 <free>
c0017479:	5e                   	pop    esi
c001747a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001747e:	e8 50 25 ff ff       	call   c00099d3 <free>
c0017483:	83 c4 10             	add    esp,0x10
c0017486:	eb 21                	jmp    c00174a9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0017488:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c001748c:	e9 76 fd ff ff       	jmp    c0017207 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x452>
c0017491:	83 ec 0c             	sub    esp,0xc
c0017494:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017498:	e8 36 25 ff ff       	call   c00099d3 <free>
c001749d:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c00174a1:	83 c4 10             	add    esp,0x10
c00174a4:	e9 eb fc ff ff       	jmp    c0017194 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3df>
c00174a9:	31 c0                	xor    eax,eax
c00174ab:	eb 33                	jmp    c00174e0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x72b>
c00174ad:	83 ec 0c             	sub    esp,0xc
c00174b0:	55                   	push   ebp
c00174b1:	e8 36 5c ff ff       	call   c000d0ec <File::close()>
c00174b6:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00174b9:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00174bc:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00174bf:	58                   	pop    eax
c00174c0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00174c4:	e8 0a 25 ff ff       	call   c00099d3 <free>
c00174c9:	89 3c 24             	mov    DWORD PTR [esp],edi
c00174cc:	e8 02 25 ff ff       	call   c00099d3 <free>
c00174d1:	5a                   	pop    edx
c00174d2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00174d6:	e8 f8 24 ff ff       	call   c00099d3 <free>
c00174db:	83 c4 10             	add    esp,0x10
c00174de:	b0 01                	mov    al,0x1
c00174e0:	81 c4 5c 03 00 00    	add    esp,0x35c
c00174e6:	5b                   	pop    ebx
c00174e7:	5e                   	pop    esi
c00174e8:	5f                   	pop    edi
c00174e9:	5d                   	pop    ebp
c00174ea:	c3                   	ret    

c00174eb <Thr::getDriverBaseFromAddress(unsigned long)>:
c00174eb:	56                   	push   esi
c00174ec:	31 d2                	xor    edx,edx
c00174ee:	53                   	push   ebx
c00174ef:	8b 1d 60 71 02 c0    	mov    ebx,DWORD PTR ds:0xc0027160
c00174f5:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00174f9:	39 d3                	cmp    ebx,edx
c00174fb:	7e 1b                	jle    c0017518 <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c00174fd:	8b 04 95 80 73 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd8c80]
c0017504:	39 c8                	cmp    eax,ecx
c0017506:	77 0d                	ja     c0017515 <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c0017508:	8b 34 95 80 71 02 c0 	mov    esi,DWORD PTR [edx*4-0x3ffd8e80]
c001750f:	01 c6                	add    esi,eax
c0017511:	39 ce                	cmp    esi,ecx
c0017513:	77 05                	ja     c001751a <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c0017515:	42                   	inc    edx
c0017516:	eb e1                	jmp    c00174f9 <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c0017518:	31 c0                	xor    eax,eax
c001751a:	5b                   	pop    ebx
c001751b:	5e                   	pop    esi
c001751c:	c3                   	ret    

c001751d <Thr::getDriverNameFromAddress(unsigned long)>:
c001751d:	53                   	push   ebx
c001751e:	31 c0                	xor    eax,eax
c0017520:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0017524:	8b 1d 60 71 02 c0    	mov    ebx,DWORD PTR ds:0xc0027160
c001752a:	39 c3                	cmp    ebx,eax
c001752c:	7e 22                	jle    c0017550 <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c001752e:	8b 14 85 80 73 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd8c80]
c0017535:	39 ca                	cmp    edx,ecx
c0017537:	77 14                	ja     c001754d <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c0017539:	03 14 85 80 71 02 c0 	add    edx,DWORD PTR [eax*4-0x3ffd8e80]
c0017540:	39 ca                	cmp    edx,ecx
c0017542:	76 09                	jbe    c001754d <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c0017544:	8b 04 85 80 75 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8a80]
c001754b:	eb 05                	jmp    c0017552 <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c001754d:	40                   	inc    eax
c001754e:	eb da                	jmp    c001752a <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c0017550:	31 c0                	xor    eax,eax
c0017552:	5b                   	pop    ebx
c0017553:	c3                   	ret    

c0017554 <Thr::getDriverOffsetFromAddress(unsigned long)>:
c0017554:	53                   	push   ebx
c0017555:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0017559:	53                   	push   ebx
c001755a:	e8 8c ff ff ff       	call   c00174eb <Thr::getDriverBaseFromAddress(unsigned long)>
c001755f:	5a                   	pop    edx
c0017560:	31 d2                	xor    edx,edx
c0017562:	85 c0                	test   eax,eax
c0017564:	74 04                	je     c001756a <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c0017566:	89 da                	mov    edx,ebx
c0017568:	29 c2                	sub    edx,eax
c001756a:	89 d0                	mov    eax,edx
c001756c:	5b                   	pop    ebx
c001756d:	c3                   	ret    

c001756e <Thr::loadDLL(char const*, bool)>:
c001756e:	55                   	push   ebp
c001756f:	57                   	push   edi
c0017570:	56                   	push   esi
c0017571:	53                   	push   ebx
c0017572:	81 ec 34 01 00 00    	sub    esp,0x134
c0017578:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c001757f:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c0017586:	56                   	push   esi
c0017587:	68 ee 47 02 c0       	push   0xc00247ee
c001758c:	e8 2e 55 ff ff       	call   c000cabf <Dbg::kprintf(char const*, ...)>
c0017591:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0017598:	e8 26 24 ff ff       	call   c00099c3 <malloc>
c001759d:	83 c4 0c             	add    esp,0xc
c00175a0:	89 c3                	mov    ebx,eax
c00175a2:	ff 35 50 79 02 c0    	push   DWORD PTR ds:0xc0027950
c00175a8:	56                   	push   esi
c00175a9:	50                   	push   eax
c00175aa:	e8 7b 5a ff ff       	call   c000d02a <File::File(char const*, Process*)>
c00175af:	83 c4 10             	add    esp,0x10
c00175b2:	85 db                	test   ebx,ebx
c00175b4:	75 3c                	jne    c00175f2 <Thr::loadDLL(char const*, bool)+0x84>
c00175b6:	89 f8                	mov    eax,edi
c00175b8:	84 c0                	test   al,al
c00175ba:	0f 84 d2 01 00 00    	je     c0017792 <Thr::loadDLL(char const*, bool)+0x224>
c00175c0:	55                   	push   ebp
c00175c1:	55                   	push   ebp
c00175c2:	68 ff 47 02 c0       	push   0xc00247ff
c00175c7:	8d 6c 24 2c          	lea    ebp,[esp+0x2c]
c00175cb:	55                   	push   ebp
c00175cc:	e8 6f 91 fe ff       	call   c0000740 <strcpy>
c00175d1:	58                   	pop    eax
c00175d2:	5a                   	pop    edx
c00175d3:	56                   	push   esi
c00175d4:	55                   	push   ebp
c00175d5:	e8 a6 92 fe ff       	call   c0000880 <strcat>
c00175da:	59                   	pop    ecx
c00175db:	58                   	pop    eax
c00175dc:	68 12 48 02 c0       	push   0xc0024812
c00175e1:	55                   	push   ebp
c00175e2:	e8 99 92 fe ff       	call   c0000880 <strcat>
c00175e7:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00175ea:	e8 92 cd ff ff       	call   c0014381 <Krnl::panic(char const*)>
c00175ef:	83 c4 10             	add    esp,0x10
c00175f2:	51                   	push   ecx
c00175f3:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c00175f7:	50                   	push   eax
c00175f8:	8d 44 24 20          	lea    eax,[esp+0x20]
c00175fc:	50                   	push   eax
c00175fd:	53                   	push   ebx
c00175fe:	e8 37 5d ff ff       	call   c000d33a <File::stat(unsigned long long*, bool*)>
c0017603:	83 c4 10             	add    esp,0x10
c0017606:	85 db                	test   ebx,ebx
c0017608:	74 0c                	je     c0017616 <Thr::loadDLL(char const*, bool)+0xa8>
c001760a:	83 ec 0c             	sub    esp,0xc
c001760d:	8b 03                	mov    eax,DWORD PTR [ebx]
c001760f:	53                   	push   ebx
c0017610:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0017613:	83 c4 10             	add    esp,0x10
c0017616:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c001761b:	75 0a                	jne    c0017627 <Thr::loadDLL(char const*, bool)+0xb9>
c001761d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017621:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c0017625:	75 3c                	jne    c0017663 <Thr::loadDLL(char const*, bool)+0xf5>
c0017627:	89 f8                	mov    eax,edi
c0017629:	84 c0                	test   al,al
c001762b:	0f 84 49 01 00 00    	je     c001777a <Thr::loadDLL(char const*, bool)+0x20c>
c0017631:	51                   	push   ecx
c0017632:	51                   	push   ecx
c0017633:	68 ff 47 02 c0       	push   0xc00247ff
c0017638:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c001763c:	53                   	push   ebx
c001763d:	e8 fe 90 fe ff       	call   c0000740 <strcpy>
c0017642:	5d                   	pop    ebp
c0017643:	58                   	pop    eax
c0017644:	56                   	push   esi
c0017645:	53                   	push   ebx
c0017646:	e8 35 92 fe ff       	call   c0000880 <strcat>
c001764b:	58                   	pop    eax
c001764c:	5a                   	pop    edx
c001764d:	68 12 48 02 c0       	push   0xc0024812
c0017652:	53                   	push   ebx
c0017653:	e8 28 92 fe ff       	call   c0000880 <strcat>
c0017658:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001765b:	e8 21 cd ff ff       	call   c0014381 <Krnl::panic(char const*)>
c0017660:	83 c4 10             	add    esp,0x10
c0017663:	52                   	push   edx
c0017664:	6a 03                	push   0x3
c0017666:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001766a:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001766e:	05 ff 0f 00 00       	add    eax,0xfff
c0017673:	83 d2 00             	adc    edx,0x0
c0017676:	0f ac d0 0c          	shrd   eax,edx,0xc
c001767a:	50                   	push   eax
c001767b:	ff 35 90 65 02 c0    	push   DWORD PTR ds:0xc0026590
c0017681:	e8 10 48 ff ff       	call   c000be96 <VAS::allocatePages(int, int)>
c0017686:	59                   	pop    ecx
c0017687:	89 c3                	mov    ebx,eax
c0017689:	5d                   	pop    ebp
c001768a:	50                   	push   eax
c001768b:	68 42 29 02 c0       	push   0xc0022942
c0017690:	e8 2a 54 ff ff       	call   c000cabf <Dbg::kprintf(char const*, ...)>
c0017695:	89 34 24             	mov    DWORD PTR [esp],esi
c0017698:	e8 03 90 fe ff       	call   c00006a0 <strlen>
c001769d:	8b 2d 60 71 02 c0    	mov    ebp,DWORD PTR ds:0xc0027160
c00176a3:	40                   	inc    eax
c00176a4:	89 04 24             	mov    DWORD PTR [esp],eax
c00176a7:	e8 17 23 ff ff       	call   c00099c3 <malloc>
c00176ac:	89 04 ad 80 75 02 c0 	mov    DWORD PTR [ebp*4-0x3ffd8a80],eax
c00176b3:	58                   	pop    eax
c00176b4:	a1 60 71 02 c0       	mov    eax,ds:0xc0027160
c00176b9:	5a                   	pop    edx
c00176ba:	56                   	push   esi
c00176bb:	ff 34 85 80 75 02 c0 	push   DWORD PTR [eax*4-0x3ffd8a80]
c00176c2:	e8 79 90 fe ff       	call   c0000740 <strcpy>
c00176c7:	a1 60 71 02 c0       	mov    eax,ds:0xc0027160
c00176cc:	8d 50 01             	lea    edx,[eax+0x1]
c00176cf:	89 1c 85 80 73 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8c80],ebx
c00176d6:	89 15 60 71 02 c0    	mov    DWORD PTR ds:0xc0027160,edx
c00176dc:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00176e0:	83 c4 0c             	add    esp,0xc
c00176e3:	89 14 85 80 71 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8e80],edx
c00176ea:	6a 01                	push   0x1
c00176ec:	53                   	push   ebx
c00176ed:	56                   	push   esi
c00176ee:	e8 c2 f6 ff ff       	call   c0016db5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c00176f3:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c00176f7:	83 c4 10             	add    esp,0x10
c00176fa:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c00176ff:	0f 85 89 00 00 00    	jne    c001778e <Thr::loadDLL(char const*, bool)+0x220>
c0017705:	89 f8                	mov    eax,edi
c0017707:	84 c0                	test   al,al
c0017709:	74 73                	je     c001777e <Thr::loadDLL(char const*, bool)+0x210>
c001770b:	83 ec 0c             	sub    esp,0xc
c001770e:	68 14 48 02 c0       	push   0xc0024814
c0017713:	e8 69 cc ff ff       	call   c0014381 <Krnl::panic(char const*)>
c0017718:	83 c4 10             	add    esp,0x10
c001771b:	eb 61                	jmp    c001777e <Thr::loadDLL(char const*, bool)+0x210>
c001771d:	50                   	push   eax
c001771e:	50                   	push   eax
c001771f:	89 e8                	mov    eax,ebp
c0017721:	c1 e0 0c             	shl    eax,0xc
c0017724:	01 d8                	add    eax,ebx
c0017726:	50                   	push   eax
c0017727:	ff 35 90 65 02 c0    	push   DWORD PTR ds:0xc0026590
c001772d:	e8 cc 42 ff ff       	call   c000b9fe <VAS::getPageTableEntry(unsigned long)>
c0017732:	83 c4 10             	add    esp,0x10
c0017735:	8b 00                	mov    eax,DWORD PTR [eax]
c0017737:	a8 60                	test   al,0x60
c0017739:	75 11                	jne    c001774c <Thr::loadDLL(char const*, bool)+0x1de>
c001773b:	83 ec 0c             	sub    esp,0xc
c001773e:	25 00 f0 ff ff       	and    eax,0xfffff000
c0017743:	50                   	push   eax
c0017744:	e8 2d 26 ff ff       	call   c0009d76 <Phys::freePage(unsigned long)>
c0017749:	83 c4 10             	add    esp,0x10
c001774c:	45                   	inc    ebp
c001774d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017751:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0017755:	05 ff 0f 00 00       	add    eax,0xfff
c001775a:	bf 00 00 00 00       	mov    edi,0x0
c001775f:	83 d2 00             	adc    edx,0x0
c0017762:	0f ac d0 0c          	shrd   eax,edx,0xc
c0017766:	c1 ea 0c             	shr    edx,0xc
c0017769:	39 c5                	cmp    ebp,eax
c001776b:	89 d1                	mov    ecx,edx
c001776d:	89 f8                	mov    eax,edi
c001776f:	19 c8                	sbb    eax,ecx
c0017771:	72 aa                	jb     c001771d <Thr::loadDLL(char const*, bool)+0x1af>
c0017773:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0017778:	75 18                	jne    c0017792 <Thr::loadDLL(char const*, bool)+0x224>
c001777a:	31 db                	xor    ebx,ebx
c001777c:	eb 14                	jmp    c0017792 <Thr::loadDLL(char const*, bool)+0x224>
c001777e:	83 ec 0c             	sub    esp,0xc
c0017781:	68 33 48 02 c0       	push   0xc0024833
c0017786:	e8 f6 cb ff ff       	call   c0014381 <Krnl::panic(char const*)>
c001778b:	83 c4 10             	add    esp,0x10
c001778e:	31 ed                	xor    ebp,ebp
c0017790:	eb bb                	jmp    c001774d <Thr::loadDLL(char const*, bool)+0x1df>
c0017792:	81 c4 2c 01 00 00    	add    esp,0x12c
c0017798:	89 d8                	mov    eax,ebx
c001779a:	5b                   	pop    ebx
c001779b:	5e                   	pop    esi
c001779c:	5f                   	pop    edi
c001779d:	5d                   	pop    ebp
c001779e:	c3                   	ret    

c001779f <Thr::executeDLL(unsigned long, void*)>:
c001779f:	56                   	push   esi
c00177a0:	53                   	push   ebx
c00177a1:	52                   	push   edx
c00177a2:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00177a6:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00177aa:	85 db                	test   ebx,ebx
c00177ac:	75 10                	jne    c00177be <Thr::executeDLL(unsigned long, void*)+0x1f>
c00177ae:	83 ec 0c             	sub    esp,0xc
c00177b1:	68 4f 48 02 c0       	push   0xc002484f
c00177b6:	e8 c6 cb ff ff       	call   c0014381 <Krnl::panic(char const*)>
c00177bb:	83 c4 10             	add    esp,0x10
c00177be:	50                   	push   eax
c00177bf:	50                   	push   eax
c00177c0:	53                   	push   ebx
c00177c1:	68 79 48 02 c0       	push   0xc0024879
c00177c6:	e8 f4 52 ff ff       	call   c000cabf <Dbg::kprintf(char const*, ...)>
c00177cb:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c00177cf:	89 d8                	mov    eax,ebx
c00177d1:	83 c4 14             	add    esp,0x14
c00177d4:	5b                   	pop    ebx
c00177d5:	5e                   	pop    esi
c00177d6:	ff e0                	jmp    eax

c00177d8 <userModeEntryPoint(void*)>:
c00177d8:	a1 28 79 02 c0       	mov    eax,ds:0xc0027928
c00177dd:	48                   	dec    eax
c00177de:	a3 28 79 02 c0       	mov    ds:0xc0027928,eax
c00177e3:	75 03                	jne    c00177e8 <userModeEntryPoint(void*)+0x10>
c00177e5:	fb                   	sti    
c00177e6:	66 90                	xchg   ax,ax
c00177e8:	fb                   	sti    
c00177e9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00177ee:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00177f1:	8b 80 0e 05 00 00    	mov    eax,DWORD PTR [eax+0x50e]
c00177f7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00177fb:	e9 5f 8a fe ff       	jmp    c000025f <goToUsermode>

c0017800 <changeTSS>:
c0017800:	83 ec 14             	sub    esp,0x14
c0017803:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017808:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c001780b:	b8 00 00 e8 01       	mov    eax,0x1e80000
c0017810:	c1 e2 15             	shl    edx,0x15
c0017813:	29 d0                	sub    eax,edx
c0017815:	50                   	push   eax
c0017816:	a1 68 64 02 c0       	mov    eax,ds:0xc0026468
c001781b:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0017821:	05 7c 11 00 00       	add    eax,0x117c
c0017826:	50                   	push   eax
c0017827:	e8 14 38 ff ff       	call   c000b040 <TSS::setESP(unsigned long)>
c001782c:	83 c4 1c             	add    esp,0x1c
c001782f:	c3                   	ret    

c0017830 <switchToThread(ThreadControlBlock*)>:
c0017830:	57                   	push   edi
c0017831:	a1 24 79 02 c0       	mov    eax,ds:0xc0027924
c0017836:	56                   	push   esi
c0017837:	85 c0                	test   eax,eax
c0017839:	53                   	push   ebx
c001783a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001783e:	0f 85 90 00 00 00    	jne    c00178d4 <switchToThread(ThreadControlBlock*)+0xa4>
c0017844:	8a 41 40             	mov    al,BYTE PTR [ecx+0x40]
c0017847:	3c ff                	cmp    al,0xff
c0017849:	0f 84 81 00 00 00    	je     c00178d0 <switchToThread(ThreadControlBlock*)+0xa0>
c001784f:	0f b6 d0             	movzx  edx,al
c0017852:	b8 00 04 00 00       	mov    eax,0x400
c0017857:	29 d0                	sub    eax,edx
c0017859:	d1 f8                	sar    eax,1
c001785b:	03 41 34             	add    eax,DWORD PTR [ecx+0x34]
c001785e:	66 90                	xchg   ax,ax
c0017860:	89 41 34             	mov    DWORD PTR [ecx+0x34],eax
c0017863:	a1 68 64 02 c0       	mov    eax,ds:0xc0026468
c0017868:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001786e:	f6 80 90 11 00 00 02 	test   BYTE PTR [eax+0x1190],0x2
c0017875:	74 4d                	je     c00178c4 <switchToThread(ThreadControlBlock*)+0x94>
c0017877:	0f 31                	rdtsc  
c0017879:	a3 68 79 02 c0       	mov    ds:0xc0027968,eax
c001787e:	89 c6                	mov    esi,eax
c0017880:	89 d7                	mov    edi,edx
c0017882:	2b 35 58 79 02 c0    	sub    esi,DWORD PTR ds:0xc0027958
c0017888:	89 15 6c 79 02 c0    	mov    DWORD PTR ds:0xc002796c,edx
c001788e:	1b 3d 5c 79 02 c0    	sbb    edi,DWORD PTR ds:0xc002795c
c0017894:	89 35 60 79 02 c0    	mov    DWORD PTR ds:0xc0027960,esi
c001789a:	a3 58 79 02 c0       	mov    ds:0xc0027958,eax
c001789f:	89 3d 64 79 02 c0    	mov    DWORD PTR ds:0xc0027964,edi
c00178a5:	8b 1d 00 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002000
c00178ab:	89 15 5c 79 02 c0    	mov    DWORD PTR ds:0xc002795c,edx
c00178b1:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00178b4:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00178b7:	01 c6                	add    esi,eax
c00178b9:	11 d7                	adc    edi,edx
c00178bb:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c00178be:	89 7b 14             	mov    DWORD PTR [ebx+0x14],edi
c00178c1:	8d 76 00             	lea    esi,[esi+0x0]
c00178c4:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c00178c8:	5b                   	pop    ebx
c00178c9:	5e                   	pop    esi
c00178ca:	5f                   	pop    edi
c00178cb:	e9 c7 89 fe ff       	jmp    c0000297 <switchToThreadASM>
c00178d0:	31 c0                	xor    eax,eax
c00178d2:	eb 8c                	jmp    c0017860 <switchToThread(ThreadControlBlock*)+0x30>
c00178d4:	5b                   	pop    ebx
c00178d5:	c7 05 20 79 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0027920,0x1
c00178df:	5e                   	pop    esi
c00178e0:	5f                   	pop    edi
c00178e1:	c3                   	ret    
c00178e2:	66 90                	xchg   ax,ax

c00178e4 <Process::addArgs(char**)>:
c00178e4:	57                   	push   edi
c00178e5:	56                   	push   esi
c00178e6:	53                   	push   ebx
c00178e7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00178eb:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00178ef:	c7 86 16 05 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x516],0x0
c00178f9:	85 ff                	test   edi,edi
c00178fb:	74 43                	je     c0017940 <Process::addArgs(char**)+0x5c>
c00178fd:	8b 07                	mov    eax,DWORD PTR [edi]
c00178ff:	85 c0                	test   eax,eax
c0017901:	74 3d                	je     c0017940 <Process::addArgs(char**)+0x5c>
c0017903:	31 db                	xor    ebx,ebx
c0017905:	8d 76 00             	lea    esi,[esi+0x0]
c0017908:	83 ec 0c             	sub    esp,0xc
c001790b:	50                   	push   eax
c001790c:	e8 8f 8d fe ff       	call   c00006a0 <strlen>
c0017911:	40                   	inc    eax
c0017912:	89 04 24             	mov    DWORD PTR [esp],eax
c0017915:	e8 a9 20 ff ff       	call   c00099c3 <malloc>
c001791a:	89 84 9e 1a 05 00 00 	mov    DWORD PTR [esi+ebx*4+0x51a],eax
c0017921:	5a                   	pop    edx
c0017922:	59                   	pop    ecx
c0017923:	ff 34 9f             	push   DWORD PTR [edi+ebx*4]
c0017926:	43                   	inc    ebx
c0017927:	50                   	push   eax
c0017928:	e8 13 8e fe ff       	call   c0000740 <strcpy>
c001792d:	ff 86 16 05 00 00    	inc    DWORD PTR [esi+0x516]
c0017933:	83 c4 10             	add    esp,0x10
c0017936:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c0017939:	85 c0                	test   eax,eax
c001793b:	75 cb                	jne    c0017908 <Process::addArgs(char**)+0x24>
c001793d:	8d 76 00             	lea    esi,[esi+0x0]
c0017940:	5b                   	pop    ebx
c0017941:	5e                   	pop    esi
c0017942:	5f                   	pop    edi
c0017943:	c3                   	ret    

c0017944 <Process::Process(char const*, Process*, char**)>:
c0017944:	56                   	push   esi
c0017945:	53                   	push   ebx
c0017946:	83 ec 14             	sub    esp,0x14
c0017949:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001794d:	05 0c 02 00 00       	add    eax,0x20c
c0017952:	bb 07 00 00 00       	mov    ebx,0x7
c0017957:	89 c6                	mov    esi,eax
c0017959:	8d 76 00             	lea    esi,[esi+0x0]
c001795c:	85 db                	test   ebx,ebx
c001795e:	78 14                	js     c0017974 <Process::Process(char const*, Process*, char**)+0x30>
c0017960:	83 ec 0c             	sub    esp,0xc
c0017963:	56                   	push   esi
c0017964:	e8 27 9f 00 00       	call   c0021890 <ThreadControlBlock::ThreadControlBlock()>
c0017969:	83 c4 10             	add    esp,0x10
c001796c:	83 c6 5f             	add    esi,0x5f
c001796f:	4b                   	dec    ebx
c0017970:	eb ea                	jmp    c001795c <Process::Process(char const*, Process*, char**)+0x18>
c0017972:	66 90                	xchg   ax,ax
c0017974:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017978:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c001797f:	83 ec 0c             	sub    esp,0xc
c0017982:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017986:	e8 7f c8 ff ff       	call   c001420a <Krnl::newProcessEnv(Process*)>
c001798b:	83 c4 10             	add    esp,0x10
c001798e:	89 c2                	mov    edx,eax
c0017990:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017994:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c001799a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001799e:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c00179a7:	a1 90 5e 02 c0       	mov    eax,ds:0xc0025e90
c00179ac:	8d 50 01             	lea    edx,[eax+0x1]
c00179af:	89 15 90 5e 02 c0    	mov    DWORD PTR ds:0xc0025e90,edx
c00179b5:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00179b9:	89 02                	mov    DWORD PTR [edx],eax
c00179bb:	c7 44 24 08 14 00 00 00 	mov    DWORD PTR [esp+0x8],0x14
c00179c3:	83 ec 0c             	sub    esp,0xc
c00179c6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00179ca:	e8 f4 1f ff ff       	call   c00099c3 <malloc>
c00179cf:	83 c4 10             	add    esp,0x10
c00179d2:	89 c3                	mov    ebx,eax
c00179d4:	83 ec 08             	sub    esp,0x8
c00179d7:	6a 00                	push   0x0
c00179d9:	53                   	push   ebx
c00179da:	e8 5f 48 ff ff       	call   c000c23e <VAS::VAS(bool)>
c00179df:	83 c4 10             	add    esp,0x10
c00179e2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00179e6:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c00179ec:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00179f0:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c00179fa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00179fe:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017a02:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c0017a08:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017a0c:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0017a12:	85 c0                	test   eax,eax
c0017a14:	74 42                	je     c0017a58 <Process::Process(char const*, Process*, char**)+0x114>
c0017a16:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017a1a:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0017a20:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0017a26:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017a2a:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c0017a30:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017a34:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0017a3a:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0017a40:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017a44:	05 0c 01 00 00       	add    eax,0x10c
c0017a49:	83 ec 08             	sub    esp,0x8
c0017a4c:	52                   	push   edx
c0017a4d:	50                   	push   eax
c0017a4e:	e8 ed 8c fe ff       	call   c0000740 <strcpy>
c0017a53:	83 c4 10             	add    esp,0x10
c0017a56:	eb 64                	jmp    c0017abc <Process::Process(char const*, Process*, char**)+0x178>
c0017a58:	c7 44 24 04 c4 02 00 00 	mov    DWORD PTR [esp+0x4],0x2c4
c0017a60:	83 ec 0c             	sub    esp,0xc
c0017a63:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0017a67:	e8 57 1f ff ff       	call   c00099c3 <malloc>
c0017a6c:	83 c4 10             	add    esp,0x10
c0017a6f:	89 c3                	mov    ebx,eax
c0017a71:	83 ec 08             	sub    esp,0x8
c0017a74:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017a78:	53                   	push   ebx
c0017a79:	e8 d0 32 ff ff       	call   c000ad4e <VgaText::VgaText(char const*)>
c0017a7e:	83 c4 10             	add    esp,0x10
c0017a81:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017a85:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c0017a8b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017a8f:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017a95:	83 ec 0c             	sub    esp,0xc
c0017a98:	50                   	push   eax
c0017a99:	e8 6f 2a ff ff       	call   c000a50d <addToTerminalCycle(VgaText*)>
c0017a9e:	83 c4 10             	add    esp,0x10
c0017aa1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017aa5:	05 0c 01 00 00       	add    eax,0x10c
c0017aaa:	83 ec 08             	sub    esp,0x8
c0017aad:	68 98 48 02 c0       	push   0xc0024898
c0017ab2:	50                   	push   eax
c0017ab3:	e8 88 8c fe ff       	call   c0000740 <strcpy>
c0017ab8:	83 c4 10             	add    esp,0x10
c0017abb:	90                   	nop
c0017abc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017ac0:	83 c0 0c             	add    eax,0xc
c0017ac3:	83 ec 08             	sub    esp,0x8
c0017ac6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017aca:	50                   	push   eax
c0017acb:	e8 70 8c fe ff       	call   c0000740 <strcpy>
c0017ad0:	83 c4 10             	add    esp,0x10
c0017ad3:	83 ec 08             	sub    esp,0x8
c0017ad6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0017ada:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017ade:	e8 01 fe ff ff       	call   c00178e4 <Process::addArgs(char**)>
c0017ae3:	83 c4 10             	add    esp,0x10
c0017ae6:	83 ec 08             	sub    esp,0x8
c0017ae9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017aed:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017af1:	e8 89 ed ff ff       	call   c001687f <Thr::loadProgramIntoMemory(Process*, char const*)>
c0017af6:	83 c4 10             	add    esp,0x10
c0017af9:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0017afd:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0017b01:	83 f0 01             	xor    eax,0x1
c0017b04:	88 c2                	mov    dl,al
c0017b06:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017b0a:	88 90 1e 07 00 00    	mov    BYTE PTR [eax+0x71e],dl
c0017b10:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0017b15:	83 ec 08             	sub    esp,0x8
c0017b18:	50                   	push   eax
c0017b19:	68 f0 48 02 c0       	push   0xc00248f0
c0017b1e:	e8 9c 4f ff ff       	call   c000cabf <Dbg::kprintf(char const*, ...)>
c0017b23:	83 c4 10             	add    esp,0x10
c0017b26:	90                   	nop
c0017b27:	83 c4 14             	add    esp,0x14
c0017b2a:	5b                   	pop    ebx
c0017b2b:	5e                   	pop    esi
c0017b2c:	c3                   	ret    
c0017b2d:	90                   	nop
c0017b2e:	66 90                	xchg   ax,ax

c0017b30 <Process::Process(bool, char const*, Process*, char**)>:
c0017b30:	56                   	push   esi
c0017b31:	53                   	push   ebx
c0017b32:	83 ec 24             	sub    esp,0x24
c0017b35:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017b39:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0017b3d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017b41:	05 0c 02 00 00       	add    eax,0x20c
c0017b46:	bb 07 00 00 00       	mov    ebx,0x7
c0017b4b:	89 c6                	mov    esi,eax
c0017b4d:	8d 76 00             	lea    esi,[esi+0x0]
c0017b50:	85 db                	test   ebx,ebx
c0017b52:	78 14                	js     c0017b68 <Process::Process(bool, char const*, Process*, char**)+0x38>
c0017b54:	83 ec 0c             	sub    esp,0xc
c0017b57:	56                   	push   esi
c0017b58:	e8 33 9d 00 00       	call   c0021890 <ThreadControlBlock::ThreadControlBlock()>
c0017b5d:	83 c4 10             	add    esp,0x10
c0017b60:	83 c6 5f             	add    esi,0x5f
c0017b63:	4b                   	dec    ebx
c0017b64:	eb ea                	jmp    c0017b50 <Process::Process(bool, char const*, Process*, char**)+0x20>
c0017b66:	66 90                	xchg   ax,ax
c0017b68:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017b6c:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c0017b73:	83 ec 0c             	sub    esp,0xc
c0017b76:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0017b7a:	e8 8b c6 ff ff       	call   c001420a <Krnl::newProcessEnv(Process*)>
c0017b7f:	83 c4 10             	add    esp,0x10
c0017b82:	89 c2                	mov    edx,eax
c0017b84:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017b88:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c0017b8e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017b92:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c0017b9b:	a1 90 5e 02 c0       	mov    eax,ds:0xc0025e90
c0017ba0:	8d 50 01             	lea    edx,[eax+0x1]
c0017ba3:	89 15 90 5e 02 c0    	mov    DWORD PTR ds:0xc0025e90,edx
c0017ba9:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0017bad:	89 02                	mov    DWORD PTR [edx],eax
c0017baf:	c7 44 24 1c 14 00 00 00 	mov    DWORD PTR [esp+0x1c],0x14
c0017bb7:	83 ec 0c             	sub    esp,0xc
c0017bba:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0017bbe:	e8 00 1e ff ff       	call   c00099c3 <malloc>
c0017bc3:	83 c4 10             	add    esp,0x10
c0017bc6:	89 c3                	mov    ebx,eax
c0017bc8:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0017bcd:	83 ec 08             	sub    esp,0x8
c0017bd0:	50                   	push   eax
c0017bd1:	53                   	push   ebx
c0017bd2:	e8 67 46 ff ff       	call   c000c23e <VAS::VAS(bool)>
c0017bd7:	83 c4 10             	add    esp,0x10
c0017bda:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017bde:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c0017be4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017be8:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0017bf2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017bf6:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0017bfa:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c0017c00:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017c04:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0017c0a:	85 c0                	test   eax,eax
c0017c0c:	74 42                	je     c0017c50 <Process::Process(bool, char const*, Process*, char**)+0x120>
c0017c0e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017c12:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0017c18:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0017c1e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017c22:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c0017c28:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017c2c:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0017c32:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0017c38:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017c3c:	05 0c 01 00 00       	add    eax,0x10c
c0017c41:	83 ec 08             	sub    esp,0x8
c0017c44:	52                   	push   edx
c0017c45:	50                   	push   eax
c0017c46:	e8 f5 8a fe ff       	call   c0000740 <strcpy>
c0017c4b:	83 c4 10             	add    esp,0x10
c0017c4e:	eb 64                	jmp    c0017cb4 <Process::Process(bool, char const*, Process*, char**)+0x184>
c0017c50:	c7 44 24 18 c4 02 00 00 	mov    DWORD PTR [esp+0x18],0x2c4
c0017c58:	83 ec 0c             	sub    esp,0xc
c0017c5b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0017c5f:	e8 5f 1d ff ff       	call   c00099c3 <malloc>
c0017c64:	83 c4 10             	add    esp,0x10
c0017c67:	89 c3                	mov    ebx,eax
c0017c69:	83 ec 08             	sub    esp,0x8
c0017c6c:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0017c70:	53                   	push   ebx
c0017c71:	e8 d8 30 ff ff       	call   c000ad4e <VgaText::VgaText(char const*)>
c0017c76:	83 c4 10             	add    esp,0x10
c0017c79:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017c7d:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c0017c83:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017c87:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017c8d:	83 ec 0c             	sub    esp,0xc
c0017c90:	50                   	push   eax
c0017c91:	e8 77 28 ff ff       	call   c000a50d <addToTerminalCycle(VgaText*)>
c0017c96:	83 c4 10             	add    esp,0x10
c0017c99:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017c9d:	05 0c 01 00 00       	add    eax,0x10c
c0017ca2:	83 ec 08             	sub    esp,0x8
c0017ca5:	68 98 48 02 c0       	push   0xc0024898
c0017caa:	50                   	push   eax
c0017cab:	e8 90 8a fe ff       	call   c0000740 <strcpy>
c0017cb0:	83 c4 10             	add    esp,0x10
c0017cb3:	90                   	nop
c0017cb4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017cb8:	83 c0 0c             	add    eax,0xc
c0017cbb:	83 ec 08             	sub    esp,0x8
c0017cbe:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0017cc2:	50                   	push   eax
c0017cc3:	e8 78 8a fe ff       	call   c0000740 <strcpy>
c0017cc8:	83 c4 10             	add    esp,0x10
c0017ccb:	83 ec 08             	sub    esp,0x8
c0017cce:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0017cd2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0017cd6:	e8 09 fc ff ff       	call   c00178e4 <Process::addArgs(char**)>
c0017cdb:	83 c4 10             	add    esp,0x10
c0017cde:	90                   	nop
c0017cdf:	83 c4 24             	add    esp,0x24
c0017ce2:	5b                   	pop    ebx
c0017ce3:	5e                   	pop    esi
c0017ce4:	c3                   	ret    
c0017ce5:	8d 76 00             	lea    esi,[esi+0x0]

c0017ce8 <taskStartupFunction>:
c0017ce8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017ced:	8b 40 41             	mov    eax,DWORD PTR [eax+0x41]
c0017cf0:	c3                   	ret    
c0017cf1:	90                   	nop
c0017cf2:	66 90                	xchg   ax,ax

c0017cf4 <Semaphore::Semaphore(int)>:
c0017cf4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017cf8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0017cfc:	89 10                	mov    DWORD PTR [eax],edx
c0017cfe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017d02:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c0017d09:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017d0d:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0017d14:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017d18:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0017d1f:	90                   	nop
c0017d20:	c3                   	ret    
c0017d21:	90                   	nop
c0017d22:	66 90                	xchg   ax,ax

c0017d24 <Mutex::Mutex()>:
c0017d24:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017d28:	6a 01                	push   0x1
c0017d2a:	50                   	push   eax
c0017d2b:	e8 c4 ff ff ff       	call   c0017cf4 <Semaphore::Semaphore(int)>
c0017d30:	83 c4 08             	add    esp,0x8
c0017d33:	90                   	nop
c0017d34:	c3                   	ret    
c0017d35:	90                   	nop
c0017d36:	66 90                	xchg   ax,ax

c0017d38 <Process::createThread(void (*)(void*), void*, int)>:
c0017d38:	57                   	push   edi
c0017d39:	31 c9                	xor    ecx,ecx
c0017d3b:	56                   	push   esi
c0017d3c:	53                   	push   ebx
c0017d3d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0017d41:	66 8b b3 04 05 00 00 	mov    si,WORD PTR [ebx+0x504]
c0017d48:	89 f2                	mov    edx,esi
c0017d4a:	66 90                	xchg   ax,ax
c0017d4c:	0f b7 c2             	movzx  eax,dx
c0017d4f:	83 e2 01             	and    edx,0x1
c0017d52:	74 14                	je     c0017d68 <Process::createThread(void (*)(void*), void*, int)+0x30>
c0017d54:	d1 f8                	sar    eax,1
c0017d56:	41                   	inc    ecx
c0017d57:	89 c2                	mov    edx,eax
c0017d59:	83 f9 10             	cmp    ecx,0x10
c0017d5c:	75 ee                	jne    c0017d4c <Process::createThread(void (*)(void*), void*, int)+0x14>
c0017d5e:	31 db                	xor    ebx,ebx
c0017d60:	89 d8                	mov    eax,ebx
c0017d62:	5b                   	pop    ebx
c0017d63:	5e                   	pop    esi
c0017d64:	5f                   	pop    edi
c0017d65:	c3                   	ret    
c0017d66:	66 90                	xchg   ax,ax
c0017d68:	b8 01 00 00 00       	mov    eax,0x1
c0017d6d:	d3 e0                	shl    eax,cl
c0017d6f:	09 c6                	or     esi,eax
c0017d71:	8d 04 c9             	lea    eax,[ecx+ecx*8]
c0017d74:	66 89 b3 04 05 00 00 	mov    WORD PTR [ebx+0x504],si
c0017d7b:	01 c0                	add    eax,eax
c0017d7d:	01 c8                	add    eax,ecx
c0017d7f:	8d 04 80             	lea    eax,[eax+eax*4]
c0017d82:	01 d8                	add    eax,ebx
c0017d84:	80 b8 6a 02 00 00 00 	cmp    BYTE PTR [eax+0x26a],0x0
c0017d8b:	75 0b                	jne    c0017d98 <Process::createThread(void (*)(void*), void*, int)+0x60>
c0017d8d:	c7 80 61 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x261],0x0
c0017d97:	90                   	nop
c0017d98:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c0017d9e:	83 ec 08             	sub    esp,0x8
c0017da1:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0017da4:	8d 04 c9             	lea    eax,[ecx+ecx*8]
c0017da7:	01 c0                	add    eax,eax
c0017da9:	01 c8                	add    eax,ecx
c0017dab:	8d 3c 80             	lea    edi,[eax+eax*4]
c0017dae:	8d 04 3b             	lea    eax,[ebx+edi*1]
c0017db1:	89 90 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edx
c0017db7:	89 98 48 02 00 00    	mov    DWORD PTR [eax+0x248],ebx
c0017dbd:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017dc1:	89 88 44 02 00 00    	mov    DWORD PTR [eax+0x244],ecx
c0017dc7:	89 90 4d 02 00 00    	mov    DWORD PTR [eax+0x24d],edx
c0017dcd:	8d 9c 3b 0c 02 00 00 	lea    ebx,[ebx+edi*1+0x20c]
c0017dd4:	89 ca                	mov    edx,ecx
c0017dd6:	f7 da                	neg    edx
c0017dd8:	c1 e2 15             	shl    edx,0x15
c0017ddb:	81 c2 e0 ff ff 01    	add    edx,0x1ffffe0
c0017de1:	89 90 10 02 00 00    	mov    DWORD PTR [eax+0x210],edx
c0017de7:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0017deb:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c0017df5:	88 90 4c 02 00 00    	mov    BYTE PTR [eax+0x24c],dl
c0017dfb:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0017dff:	89 90 18 02 00 00    	mov    DWORD PTR [eax+0x218],edx
c0017e05:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c0017e0f:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c0017e19:	53                   	push   ebx
c0017e1a:	68 44 79 02 c0       	push   0xc0027944
c0017e1f:	e8 0c 98 00 00       	call   c0021630 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0017e24:	83 c4 10             	add    esp,0x10
c0017e27:	89 d8                	mov    eax,ebx
c0017e29:	5b                   	pop    ebx
c0017e2a:	5e                   	pop    esi
c0017e2b:	5f                   	pop    edi
c0017e2c:	c3                   	ret    
c0017e2d:	90                   	nop
c0017e2e:	66 90                	xchg   ax,ax

c0017e30 <Process::createUserThread()>:
c0017e30:	83 ec 0c             	sub    esp,0xc
c0017e33:	68 80 00 00 00       	push   0x80
c0017e38:	6a 00                	push   0x0
c0017e3a:	68 d8 77 01 c0       	push   0xc00177d8
c0017e3f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017e43:	e8 f0 fe ff ff       	call   c0017d38 <Process::createThread(void (*)(void*), void*, int)>
c0017e48:	83 c4 1c             	add    esp,0x1c
c0017e4b:	c3                   	ret    

c0017e4c <setupMultitasking(void (*)())>:
c0017e4c:	56                   	push   esi
c0017e4d:	53                   	push   ebx
c0017e4e:	51                   	push   ecx
c0017e4f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0017e53:	eb 13                	jmp    c0017e68 <setupMultitasking(void (*)())+0x1c>
c0017e55:	8d 76 00             	lea    esi,[esi+0x0]
c0017e58:	83 ec 0c             	sub    esp,0xc
c0017e5b:	68 44 79 02 c0       	push   0xc0027944
c0017e60:	e8 13 97 00 00       	call   c0021578 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0017e65:	83 c4 10             	add    esp,0x10
c0017e68:	83 ec 0c             	sub    esp,0xc
c0017e6b:	68 44 79 02 c0       	push   0xc0027944
c0017e70:	e8 df 96 00 00       	call   c0021554 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0017e75:	83 c4 10             	add    esp,0x10
c0017e78:	84 c0                	test   al,al
c0017e7a:	74 dc                	je     c0017e58 <setupMultitasking(void (*)())+0xc>
c0017e7c:	83 ec 0c             	sub    esp,0xc
c0017e7f:	68 1f 07 00 00       	push   0x71f
c0017e84:	e8 3a 1b ff ff       	call   c00099c3 <malloc>
c0017e89:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0017e90:	89 c3                	mov    ebx,eax
c0017e92:	6a 00                	push   0x0
c0017e94:	68 9c 48 02 c0       	push   0xc002489c
c0017e99:	6a 01                	push   0x1
c0017e9b:	50                   	push   eax
c0017e9c:	e8 8f fc ff ff       	call   c0017b30 <Process::Process(bool, char const*, Process*, char**)>
c0017ea1:	83 c4 14             	add    esp,0x14
c0017ea4:	89 1d 50 79 02 c0    	mov    DWORD PTR ds:0xc0027950,ebx
c0017eaa:	ff b3 06 05 00 00    	push   DWORD PTR [ebx+0x506]
c0017eb0:	e8 66 29 ff ff       	call   c000a81b <setActiveTerminal(VgaText*)>
c0017eb5:	66 83 8b 04 05 00 00 01 	or     WORD PTR [ebx+0x504],0x1
c0017ebd:	c7 83 61 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x261],0x0
c0017ec7:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c0017ecd:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0017ed0:	c7 83 44 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x244],0x0
c0017eda:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c0017ee0:	89 9b 48 02 00 00    	mov    DWORD PTR [ebx+0x248],ebx
c0017ee6:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c0017ef0:	c7 83 40 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x240],0x2faf080
c0017efa:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c0017f04:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c0017f0a:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c0017f14:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c0017f1a:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c0017f24:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0017f2a:	58                   	pop    eax
c0017f2b:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c0017f31:	5a                   	pop    edx
c0017f32:	68 98 48 02 c0       	push   0xc0024898
c0017f37:	50                   	push   eax
c0017f38:	e8 03 88 fe ff       	call   c0000740 <strcpy>
c0017f3d:	c6 83 4c 02 00 00 80 	mov    BYTE PTR [ebx+0x24c],0x80
c0017f44:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0017f48:	83 c4 14             	add    esp,0x14
c0017f4b:	5b                   	pop    ebx
c0017f4c:	5e                   	pop    esi
c0017f4d:	e9 37 83 fe ff       	jmp    c0000289 <switchToThreadASMFirstTime>
c0017f52:	66 90                	xchg   ax,ax

c0017f54 <schedule()>:
c0017f54:	a1 24 79 02 c0       	mov    eax,ds:0xc0027924
c0017f59:	85 c0                	test   eax,eax
c0017f5b:	74 0b                	je     c0017f68 <schedule()+0x14>
c0017f5d:	c7 05 20 79 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0027920,0x1
c0017f67:	c3                   	ret    
c0017f68:	53                   	push   ebx
c0017f69:	83 ec 14             	sub    esp,0x14
c0017f6c:	68 44 79 02 c0       	push   0xc0027944
c0017f71:	e8 de 95 00 00       	call   c0021554 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0017f76:	83 c4 10             	add    esp,0x10
c0017f79:	84 c0                	test   al,al
c0017f7b:	75 3b                	jne    c0017fb8 <schedule()+0x64>
c0017f7d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017f82:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0017f85:	4a                   	dec    edx
c0017f86:	74 38                	je     c0017fc0 <schedule()+0x6c>
c0017f88:	83 ec 0c             	sub    esp,0xc
c0017f8b:	68 44 79 02 c0       	push   0xc0027944
c0017f90:	e8 db 95 00 00       	call   c0021570 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0017f95:	c7 04 24 44 79 02 c0 	mov    DWORD PTR [esp],0xc0027944
c0017f9c:	89 c3                	mov    ebx,eax
c0017f9e:	e8 d5 95 00 00       	call   c0021578 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0017fa3:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c0017faa:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0017fad:	e8 7e f8 ff ff       	call   c0017830 <switchToThread(ThreadControlBlock*)>
c0017fb2:	83 c4 10             	add    esp,0x10
c0017fb5:	8d 76 00             	lea    esi,[esi+0x0]
c0017fb8:	83 c4 08             	add    esp,0x8
c0017fbb:	5b                   	pop    ebx
c0017fbc:	c3                   	ret    
c0017fbd:	8d 76 00             	lea    esi,[esi+0x0]
c0017fc0:	83 ec 08             	sub    esp,0x8
c0017fc3:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0017fca:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c0017fd0:	68 44 79 02 c0       	push   0xc0027944
c0017fd5:	e8 56 96 00 00       	call   c0021630 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0017fda:	83 c4 10             	add    esp,0x10
c0017fdd:	eb a9                	jmp    c0017f88 <schedule()+0x34>
c0017fdf:	90                   	nop

c0017fe0 <Semaphore::tryAcquire()>:
c0017fe0:	53                   	push   ebx
c0017fe1:	83 ec 08             	sub    esp,0x8
c0017fe4:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0017fe8:	fa                   	cli    
c0017fe9:	a1 28 79 02 c0       	mov    eax,ds:0xc0027928
c0017fee:	8d 50 01             	lea    edx,[eax+0x1]
c0017ff1:	89 15 28 79 02 c0    	mov    DWORD PTR ds:0xc0027928,edx
c0017ff7:	8b 15 24 79 02 c0    	mov    edx,DWORD PTR ds:0xc0027924
c0017ffd:	8d 5a 01             	lea    ebx,[edx+0x1]
c0018000:	89 1d 24 79 02 c0    	mov    DWORD PTR ds:0xc0027924,ebx
c0018006:	8b 59 0c             	mov    ebx,DWORD PTR [ecx+0xc]
c0018009:	3b 19                	cmp    ebx,DWORD PTR [ecx]
c001800b:	7c 33                	jl     c0018040 <Semaphore::tryAcquire()+0x60>
c001800d:	89 15 24 79 02 c0    	mov    DWORD PTR ds:0xc0027924,edx
c0018013:	85 d2                	test   edx,edx
c0018015:	75 0d                	jne    c0018024 <Semaphore::tryAcquire()+0x44>
c0018017:	8b 15 20 79 02 c0    	mov    edx,DWORD PTR ds:0xc0027920
c001801d:	85 d2                	test   edx,edx
c001801f:	75 6b                	jne    c001808c <Semaphore::tryAcquire()+0xac>
c0018021:	8d 76 00             	lea    esi,[esi+0x0]
c0018024:	a3 28 79 02 c0       	mov    ds:0xc0027928,eax
c0018029:	85 c0                	test   eax,eax
c001802b:	74 0b                	je     c0018038 <Semaphore::tryAcquire()+0x58>
c001802d:	8d 76 00             	lea    esi,[esi+0x0]
c0018030:	31 c0                	xor    eax,eax
c0018032:	83 c4 08             	add    esp,0x8
c0018035:	5b                   	pop    ebx
c0018036:	c3                   	ret    
c0018037:	90                   	nop
c0018038:	fb                   	sti    
c0018039:	83 c4 08             	add    esp,0x8
c001803c:	5b                   	pop    ebx
c001803d:	c3                   	ret    
c001803e:	66 90                	xchg   ax,ax
c0018040:	43                   	inc    ebx
c0018041:	89 15 24 79 02 c0    	mov    DWORD PTR ds:0xc0027924,edx
c0018047:	89 59 0c             	mov    DWORD PTR [ecx+0xc],ebx
c001804a:	85 d2                	test   edx,edx
c001804c:	75 22                	jne    c0018070 <Semaphore::tryAcquire()+0x90>
c001804e:	8b 0d 20 79 02 c0    	mov    ecx,DWORD PTR ds:0xc0027920
c0018054:	85 c9                	test   ecx,ecx
c0018056:	74 18                	je     c0018070 <Semaphore::tryAcquire()+0x90>
c0018058:	c7 05 20 79 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027920,0x0
c0018062:	e8 ed fe ff ff       	call   c0017f54 <schedule()>
c0018067:	a1 28 79 02 c0       	mov    eax,ds:0xc0027928
c001806c:	48                   	dec    eax
c001806d:	8d 76 00             	lea    esi,[esi+0x0]
c0018070:	a3 28 79 02 c0       	mov    ds:0xc0027928,eax
c0018075:	85 c0                	test   eax,eax
c0018077:	75 0b                	jne    c0018084 <Semaphore::tryAcquire()+0xa4>
c0018079:	fb                   	sti    
c001807a:	b0 01                	mov    al,0x1
c001807c:	83 c4 08             	add    esp,0x8
c001807f:	5b                   	pop    ebx
c0018080:	c3                   	ret    
c0018081:	8d 76 00             	lea    esi,[esi+0x0]
c0018084:	b0 01                	mov    al,0x1
c0018086:	83 c4 08             	add    esp,0x8
c0018089:	5b                   	pop    ebx
c001808a:	c3                   	ret    
c001808b:	90                   	nop
c001808c:	c7 05 20 79 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027920,0x0
c0018096:	e8 b9 fe ff ff       	call   c0017f54 <schedule()>
c001809b:	a1 28 79 02 c0       	mov    eax,ds:0xc0027928
c00180a0:	48                   	dec    eax
c00180a1:	a3 28 79 02 c0       	mov    ds:0xc0027928,eax
c00180a6:	85 c0                	test   eax,eax
c00180a8:	75 86                	jne    c0018030 <Semaphore::tryAcquire()+0x50>
c00180aa:	eb 8c                	jmp    c0018038 <Semaphore::tryAcquire()+0x58>

c00180ac <Semaphore::assertLocked(char const*)>:
c00180ac:	83 ec 0c             	sub    esp,0xc
c00180af:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00180b3:	fa                   	cli    
c00180b4:	ff 05 28 79 02 c0    	inc    DWORD PTR ds:0xc0027928
c00180ba:	a1 24 79 02 c0       	mov    eax,ds:0xc0027924
c00180bf:	8d 48 01             	lea    ecx,[eax+0x1]
c00180c2:	89 0d 24 79 02 c0    	mov    DWORD PTR ds:0xc0027924,ecx
c00180c8:	8b 0a                	mov    ecx,DWORD PTR [edx]
c00180ca:	39 4a 0c             	cmp    DWORD PTR [edx+0xc],ecx
c00180cd:	7c 29                	jl     c00180f8 <Semaphore::assertLocked(char const*)+0x4c>
c00180cf:	90                   	nop
c00180d0:	a3 24 79 02 c0       	mov    ds:0xc0027924,eax
c00180d5:	85 c0                	test   eax,eax
c00180d7:	75 0b                	jne    c00180e4 <Semaphore::assertLocked(char const*)+0x38>
c00180d9:	a1 20 79 02 c0       	mov    eax,ds:0xc0027920
c00180de:	85 c0                	test   eax,eax
c00180e0:	75 2e                	jne    c0018110 <Semaphore::assertLocked(char const*)+0x64>
c00180e2:	66 90                	xchg   ax,ax
c00180e4:	a1 28 79 02 c0       	mov    eax,ds:0xc0027928
c00180e9:	48                   	dec    eax
c00180ea:	a3 28 79 02 c0       	mov    ds:0xc0027928,eax
c00180ef:	75 03                	jne    c00180f4 <Semaphore::assertLocked(char const*)+0x48>
c00180f1:	fb                   	sti    
c00180f2:	66 90                	xchg   ax,ax
c00180f4:	83 c4 0c             	add    esp,0xc
c00180f7:	c3                   	ret    
c00180f8:	83 ec 0c             	sub    esp,0xc
c00180fb:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00180ff:	e8 7d c2 ff ff       	call   c0014381 <Krnl::panic(char const*)>
c0018104:	a1 24 79 02 c0       	mov    eax,ds:0xc0027924
c0018109:	83 c4 10             	add    esp,0x10
c001810c:	48                   	dec    eax
c001810d:	eb c1                	jmp    c00180d0 <Semaphore::assertLocked(char const*)+0x24>
c001810f:	90                   	nop
c0018110:	c7 05 20 79 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027920,0x0
c001811a:	e8 35 fe ff ff       	call   c0017f54 <schedule()>
c001811f:	eb c3                	jmp    c00180e4 <Semaphore::assertLocked(char const*)+0x38>
c0018121:	8d 76 00             	lea    esi,[esi+0x0]

c0018124 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c0018124:	83 ec 0c             	sub    esp,0xc
c0018127:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001812c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0018130:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0018133:	e8 1c fe ff ff       	call   c0017f54 <schedule()>
c0018138:	a1 28 79 02 c0       	mov    eax,ds:0xc0027928
c001813d:	48                   	dec    eax
c001813e:	a3 28 79 02 c0       	mov    ds:0xc0027928,eax
c0018143:	75 03                	jne    c0018148 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)+0x24>
c0018145:	fb                   	sti    
c0018146:	66 90                	xchg   ax,ax
c0018148:	83 c4 0c             	add    esp,0xc
c001814b:	c3                   	ret    

c001814c <blockTask(TaskState)>:
c001814c:	83 ec 0c             	sub    esp,0xc
c001814f:	fa                   	cli    
c0018150:	ff 05 28 79 02 c0    	inc    DWORD PTR ds:0xc0027928
c0018156:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001815a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001815f:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0018162:	e8 ed fd ff ff       	call   c0017f54 <schedule()>
c0018167:	a1 28 79 02 c0       	mov    eax,ds:0xc0027928
c001816c:	48                   	dec    eax
c001816d:	a3 28 79 02 c0       	mov    ds:0xc0027928,eax
c0018172:	75 04                	jne    c0018178 <blockTask(TaskState)+0x2c>
c0018174:	fb                   	sti    
c0018175:	8d 76 00             	lea    esi,[esi+0x0]
c0018178:	83 c4 0c             	add    esp,0xc
c001817b:	c3                   	ret    

c001817c <waitTask(int, int*, int)>:
c001817c:	83 ec 18             	sub    esp,0x18
c001817f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018184:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0018188:	89 50 45             	mov    DWORD PTR [eax+0x45],edx
c001818b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001818f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018194:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c0018197:	6a 07                	push   0x7
c0018199:	e8 ae ff ff ff       	call   c001814c <blockTask(TaskState)>
c001819e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00181a3:	83 c4 10             	add    esp,0x10
c00181a6:	8b 50 49             	mov    edx,DWORD PTR [eax+0x49]
c00181a9:	85 d2                	test   edx,edx
c00181ab:	74 0b                	je     c00181b8 <waitTask(int, int*, int)+0x3c>
c00181ad:	8b 40 4d             	mov    eax,DWORD PTR [eax+0x4d]
c00181b0:	89 02                	mov    DWORD PTR [edx],eax
c00181b2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00181b7:	90                   	nop
c00181b8:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c00181bb:	83 c4 0c             	add    esp,0xc
c00181be:	c3                   	ret    
c00181bf:	90                   	nop

c00181c0 <milliTenthSleepUntil(unsigned int)>:
c00181c0:	83 ec 0c             	sub    esp,0xc
c00181c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00181c7:	39 05 8c 6a 02 c0    	cmp    DWORD PTR ds:0xc0026a8c,eax
c00181cd:	76 05                	jbe    c00181d4 <milliTenthSleepUntil(unsigned int)+0x14>
c00181cf:	90                   	nop
c00181d0:	83 c4 0c             	add    esp,0xc
c00181d3:	c3                   	ret    
c00181d4:	fa                   	cli    
c00181d5:	ff 05 28 79 02 c0    	inc    DWORD PTR ds:0xc0027928
c00181db:	83 ec 08             	sub    esp,0x8
c00181de:	ff 05 24 79 02 c0    	inc    DWORD PTR ds:0xc0027924
c00181e4:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00181ea:	89 42 2c             	mov    DWORD PTR [edx+0x2c],eax
c00181ed:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c00181f3:	68 38 79 02 c0       	push   0xc0027938
c00181f8:	e8 33 94 00 00       	call   c0021630 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00181fd:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0018204:	e8 43 ff ff ff       	call   c001814c <blockTask(TaskState)>
c0018209:	a1 24 79 02 c0       	mov    eax,ds:0xc0027924
c001820e:	83 c4 10             	add    esp,0x10
c0018211:	48                   	dec    eax
c0018212:	a3 24 79 02 c0       	mov    ds:0xc0027924,eax
c0018217:	85 c0                	test   eax,eax
c0018219:	75 09                	jne    c0018224 <milliTenthSleepUntil(unsigned int)+0x64>
c001821b:	a1 20 79 02 c0       	mov    eax,ds:0xc0027920
c0018220:	85 c0                	test   eax,eax
c0018222:	75 14                	jne    c0018238 <milliTenthSleepUntil(unsigned int)+0x78>
c0018224:	a1 28 79 02 c0       	mov    eax,ds:0xc0027928
c0018229:	48                   	dec    eax
c001822a:	a3 28 79 02 c0       	mov    ds:0xc0027928,eax
c001822f:	75 9f                	jne    c00181d0 <milliTenthSleepUntil(unsigned int)+0x10>
c0018231:	fb                   	sti    
c0018232:	83 c4 0c             	add    esp,0xc
c0018235:	c3                   	ret    
c0018236:	66 90                	xchg   ax,ax
c0018238:	c7 05 20 79 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027920,0x0
c0018242:	e8 0d fd ff ff       	call   c0017f54 <schedule()>
c0018247:	eb db                	jmp    c0018224 <milliTenthSleepUntil(unsigned int)+0x64>
c0018249:	8d 76 00             	lea    esi,[esi+0x0]

c001824c <milliTenthSleep(unsigned int)>:
c001824c:	a1 8c 6a 02 c0       	mov    eax,ds:0xc0026a8c
c0018251:	01 44 24 04          	add    DWORD PTR [esp+0x4],eax
c0018255:	e9 66 ff ff ff       	jmp    c00181c0 <milliTenthSleepUntil(unsigned int)>
c001825a:	66 90                	xchg   ax,ax

c001825c <sleep(unsigned int)>:
c001825c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018260:	8d 04 80             	lea    eax,[eax+eax*4]
c0018263:	8d 04 80             	lea    eax,[eax+eax*4]
c0018266:	8d 04 80             	lea    eax,[eax+eax*4]
c0018269:	8d 04 80             	lea    eax,[eax+eax*4]
c001826c:	c1 e0 04             	shl    eax,0x4
c001826f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0018273:	eb d7                	jmp    c001824c <milliTenthSleep(unsigned int)>
c0018275:	90                   	nop
c0018276:	66 90                	xchg   ax,ax

c0018278 <Semaphore::acquire()>:
c0018278:	83 ec 0c             	sub    esp,0xc
c001827b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001827f:	fa                   	cli    
c0018280:	a1 24 79 02 c0       	mov    eax,ds:0xc0027924
c0018285:	ff 05 28 79 02 c0    	inc    DWORD PTR ds:0xc0027928
c001828b:	8d 48 01             	lea    ecx,[eax+0x1]
c001828e:	89 0d 24 79 02 c0    	mov    DWORD PTR ds:0xc0027924,ecx
c0018294:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0018297:	3b 0a                	cmp    ecx,DWORD PTR [edx]
c0018299:	7d 2d                	jge    c00182c8 <Semaphore::acquire()+0x50>
c001829b:	41                   	inc    ecx
c001829c:	89 4a 0c             	mov    DWORD PTR [edx+0xc],ecx
c001829f:	90                   	nop
c00182a0:	a3 24 79 02 c0       	mov    ds:0xc0027924,eax
c00182a5:	85 c0                	test   eax,eax
c00182a7:	75 0b                	jne    c00182b4 <Semaphore::acquire()+0x3c>
c00182a9:	a1 20 79 02 c0       	mov    eax,ds:0xc0027920
c00182ae:	85 c0                	test   eax,eax
c00182b0:	75 62                	jne    c0018314 <Semaphore::acquire()+0x9c>
c00182b2:	66 90                	xchg   ax,ax
c00182b4:	a1 28 79 02 c0       	mov    eax,ds:0xc0027928
c00182b9:	48                   	dec    eax
c00182ba:	a3 28 79 02 c0       	mov    ds:0xc0027928,eax
c00182bf:	75 03                	jne    c00182c4 <Semaphore::acquire()+0x4c>
c00182c1:	fb                   	sti    
c00182c2:	66 90                	xchg   ax,ax
c00182c4:	83 c4 0c             	add    esp,0xc
c00182c7:	c3                   	ret    
c00182c8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00182cd:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c00182d4:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c00182d7:	85 c9                	test   ecx,ecx
c00182d9:	74 4d                	je     c0018328 <Semaphore::acquire()+0xb0>
c00182db:	8b 42 08             	mov    eax,DWORD PTR [edx+0x8]
c00182de:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c00182e4:	89 48 20             	mov    DWORD PTR [eax+0x20],ecx
c00182e7:	90                   	nop
c00182e8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00182ed:	83 ec 0c             	sub    esp,0xc
c00182f0:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c00182f3:	68 18 49 02 c0       	push   0xc0024918
c00182f8:	e8 c2 47 ff ff       	call   c000cabf <Dbg::kprintf(char const*, ...)>
c00182fd:	c7 04 24 05 00 00 00 	mov    DWORD PTR [esp],0x5
c0018304:	e8 43 fe ff ff       	call   c001814c <blockTask(TaskState)>
c0018309:	a1 24 79 02 c0       	mov    eax,ds:0xc0027924
c001830e:	83 c4 10             	add    esp,0x10
c0018311:	48                   	dec    eax
c0018312:	eb 8c                	jmp    c00182a0 <Semaphore::acquire()+0x28>
c0018314:	c7 05 20 79 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027920,0x0
c001831e:	e8 31 fc ff ff       	call   c0017f54 <schedule()>
c0018323:	eb 8f                	jmp    c00182b4 <Semaphore::acquire()+0x3c>
c0018325:	8d 76 00             	lea    esi,[esi+0x0]
c0018328:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001832d:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0018330:	eb b6                	jmp    c00182e8 <Semaphore::acquire()+0x70>
c0018332:	66 90                	xchg   ax,ax

c0018334 <taskReturned>:
c0018334:	83 ec 18             	sub    esp,0x18
c0018337:	68 38 49 02 c0       	push   0xc0024938
c001833c:	e8 40 c0 ff ff       	call   c0014381 <Krnl::panic(char const*)>
c0018341:	83 c4 10             	add    esp,0x10
c0018344:	83 ec 0c             	sub    esp,0xc
c0018347:	6a 02                	push   0x2
c0018349:	e8 fe fd ff ff       	call   c001814c <blockTask(TaskState)>
c001834e:	fa                   	cli    
c001834f:	ff 05 28 79 02 c0    	inc    DWORD PTR ds:0xc0027928
c0018355:	e8 fa fb ff ff       	call   c0017f54 <schedule()>
c001835a:	a1 28 79 02 c0       	mov    eax,ds:0xc0027928
c001835f:	83 c4 10             	add    esp,0x10
c0018362:	48                   	dec    eax
c0018363:	a3 28 79 02 c0       	mov    ds:0xc0027928,eax
c0018368:	85 c0                	test   eax,eax
c001836a:	75 d8                	jne    c0018344 <taskReturned+0x10>
c001836c:	fb                   	sti    
c001836d:	eb d5                	jmp    c0018344 <taskReturned+0x10>
c001836f:	90                   	nop

c0018370 <Thr::processFromPID(int)>:
c0018370:	57                   	push   edi
c0018371:	56                   	push   esi
c0018372:	53                   	push   ebx
c0018373:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0018377:	fa                   	cli    
c0018378:	ff 05 28 79 02 c0    	inc    DWORD PTR ds:0xc0027928
c001837e:	83 ec 0c             	sub    esp,0xc
c0018381:	68 44 79 02 c0       	push   0xc0027944
c0018386:	e8 e5 91 00 00       	call   c0021570 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001838b:	83 c4 10             	add    esp,0x10
c001838e:	89 c7                	mov    edi,eax
c0018390:	eb 16                	jmp    c00183a8 <Thr::processFromPID(int)+0x38>
c0018392:	66 90                	xchg   ax,ax
c0018394:	83 ec 0c             	sub    esp,0xc
c0018397:	68 44 79 02 c0       	push   0xc0027944
c001839c:	e8 cf 91 00 00       	call   c0021570 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00183a1:	83 c4 10             	add    esp,0x10
c00183a4:	39 f8                	cmp    eax,edi
c00183a6:	74 4c                	je     c00183f4 <Thr::processFromPID(int)+0x84>
c00183a8:	83 ec 0c             	sub    esp,0xc
c00183ab:	68 44 79 02 c0       	push   0xc0027944
c00183b0:	e8 bb 91 00 00       	call   c0021570 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00183b5:	c7 04 24 44 79 02 c0 	mov    DWORD PTR [esp],0xc0027944
c00183bc:	89 c3                	mov    ebx,eax
c00183be:	e8 b5 91 00 00       	call   c0021578 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c00183c3:	58                   	pop    eax
c00183c4:	5a                   	pop    edx
c00183c5:	53                   	push   ebx
c00183c6:	68 44 79 02 c0       	push   0xc0027944
c00183cb:	e8 60 92 00 00       	call   c0021630 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00183d0:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00183d3:	83 c4 10             	add    esp,0x10
c00183d6:	39 30                	cmp    DWORD PTR [eax],esi
c00183d8:	75 ba                	jne    c0018394 <Thr::processFromPID(int)+0x24>
c00183da:	a1 28 79 02 c0       	mov    eax,ds:0xc0027928
c00183df:	48                   	dec    eax
c00183e0:	a3 28 79 02 c0       	mov    ds:0xc0027928,eax
c00183e5:	74 09                	je     c00183f0 <Thr::processFromPID(int)+0x80>
c00183e7:	90                   	nop
c00183e8:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00183eb:	5b                   	pop    ebx
c00183ec:	5e                   	pop    esi
c00183ed:	5f                   	pop    edi
c00183ee:	c3                   	ret    
c00183ef:	90                   	nop
c00183f0:	fb                   	sti    
c00183f1:	eb f5                	jmp    c00183e8 <Thr::processFromPID(int)+0x78>
c00183f3:	90                   	nop
c00183f4:	a1 28 79 02 c0       	mov    eax,ds:0xc0027928
c00183f9:	48                   	dec    eax
c00183fa:	a3 28 79 02 c0       	mov    ds:0xc0027928,eax
c00183ff:	75 07                	jne    c0018408 <Thr::processFromPID(int)+0x98>
c0018401:	fb                   	sti    
c0018402:	5b                   	pop    ebx
c0018403:	5e                   	pop    esi
c0018404:	5f                   	pop    edi
c0018405:	c3                   	ret    
c0018406:	66 90                	xchg   ax,ax
c0018408:	5b                   	pop    ebx
c0018409:	31 c0                	xor    eax,eax
c001840b:	5e                   	pop    esi
c001840c:	5f                   	pop    edi
c001840d:	c3                   	ret    
c001840e:	66 90                	xchg   ax,ax

c0018410 <unblockTask(ThreadControlBlock*)>:
c0018410:	53                   	push   ebx
c0018411:	83 ec 08             	sub    esp,0x8
c0018414:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0018418:	fa                   	cli    
c0018419:	ff 05 28 79 02 c0    	inc    DWORD PTR ds:0xc0027928
c001841f:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0018422:	85 c0                	test   eax,eax
c0018424:	74 66                	je     c001848c <unblockTask(ThreadControlBlock*)+0x7c>
c0018426:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0018429:	48                   	dec    eax
c001842a:	74 38                	je     c0018464 <unblockTask(ThreadControlBlock*)+0x54>
c001842c:	83 ec 0c             	sub    esp,0xc
c001842f:	68 44 79 02 c0       	push   0xc0027944
c0018434:	e8 37 91 00 00       	call   c0021570 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0018439:	83 c4 10             	add    esp,0x10
c001843c:	85 c0                	test   eax,eax
c001843e:	75 1c                	jne    c001845c <unblockTask(ThreadControlBlock*)+0x4c>
c0018440:	eb 5e                	jmp    c00184a0 <unblockTask(ThreadControlBlock*)+0x90>
c0018442:	66 90                	xchg   ax,ax
c0018444:	83 ec 08             	sub    esp,0x8
c0018447:	50                   	push   eax
c0018448:	68 44 79 02 c0       	push   0xc0027944
c001844d:	e8 ce 94 00 00       	call   c0021920 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c0018452:	83 c4 10             	add    esp,0x10
c0018455:	85 c0                	test   eax,eax
c0018457:	74 47                	je     c00184a0 <unblockTask(ThreadControlBlock*)+0x90>
c0018459:	8d 76 00             	lea    esi,[esi+0x0]
c001845c:	39 c3                	cmp    ebx,eax
c001845e:	75 e4                	jne    c0018444 <unblockTask(ThreadControlBlock*)+0x34>
c0018460:	eb 12                	jmp    c0018474 <unblockTask(ThreadControlBlock*)+0x64>
c0018462:	66 90                	xchg   ax,ax
c0018464:	83 ec 0c             	sub    esp,0xc
c0018467:	68 ba 48 02 c0       	push   0xc00248ba
c001846c:	e8 4e 46 ff ff       	call   c000cabf <Dbg::kprintf(char const*, ...)>
c0018471:	83 c4 10             	add    esp,0x10
c0018474:	a1 28 79 02 c0       	mov    eax,ds:0xc0027928
c0018479:	48                   	dec    eax
c001847a:	a3 28 79 02 c0       	mov    ds:0xc0027928,eax
c001847f:	75 03                	jne    c0018484 <unblockTask(ThreadControlBlock*)+0x74>
c0018481:	fb                   	sti    
c0018482:	66 90                	xchg   ax,ax
c0018484:	83 c4 08             	add    esp,0x8
c0018487:	5b                   	pop    ebx
c0018488:	c3                   	ret    
c0018489:	8d 76 00             	lea    esi,[esi+0x0]
c001848c:	83 ec 0c             	sub    esp,0xc
c001848f:	68 a3 48 02 c0       	push   0xc00248a3
c0018494:	e8 26 46 ff ff       	call   c000cabf <Dbg::kprintf(char const*, ...)>
c0018499:	83 c4 10             	add    esp,0x10
c001849c:	eb d6                	jmp    c0018474 <unblockTask(ThreadControlBlock*)+0x64>
c001849e:	66 90                	xchg   ax,ax
c00184a0:	83 ec 08             	sub    esp,0x8
c00184a3:	53                   	push   ebx
c00184a4:	68 44 79 02 c0       	push   0xc0027944
c00184a9:	e8 82 91 00 00       	call   c0021630 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00184ae:	83 c4 10             	add    esp,0x10
c00184b1:	eb c1                	jmp    c0018474 <unblockTask(ThreadControlBlock*)+0x64>
c00184b3:	90                   	nop

c00184b4 <cleanupTerminatedTask(ThreadControlBlock*)>:
c00184b4:	55                   	push   ebp
c00184b5:	57                   	push   edi
c00184b6:	56                   	push   esi
c00184b7:	53                   	push   ebx
c00184b8:	83 ec 1c             	sub    esp,0x1c
c00184bb:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00184bf:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00184c2:	8b b8 16 05 00 00    	mov    edi,DWORD PTR [eax+0x516]
c00184c8:	85 ff                	test   edi,edi
c00184ca:	7e 24                	jle    c00184f0 <cleanupTerminatedTask(ThreadControlBlock*)+0x3c>
c00184cc:	31 f6                	xor    esi,esi
c00184ce:	66 90                	xchg   ax,ax
c00184d0:	83 ec 0c             	sub    esp,0xc
c00184d3:	ff b4 b0 1a 05 00 00 	push   DWORD PTR [eax+esi*4+0x51a]
c00184da:	46                   	inc    esi
c00184db:	e8 f3 14 ff ff       	call   c00099d3 <free>
c00184e0:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00184e3:	83 c4 10             	add    esp,0x10
c00184e6:	39 b0 16 05 00 00    	cmp    DWORD PTR [eax+0x516],esi
c00184ec:	7f e2                	jg     c00184d0 <cleanupTerminatedTask(ThreadControlBlock*)+0x1c>
c00184ee:	66 90                	xchg   ax,ax
c00184f0:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c00184fa:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c00184ff:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c0018502:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0018505:	d3 c0                	rol    eax,cl
c0018507:	66 21 82 04 05 00 00 	and    WORD PTR [edx+0x504],ax
c001850e:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0018511:	89 f7                	mov    edi,esi
c0018513:	66 83 be 04 05 00 00 00 	cmp    WORD PTR [esi+0x504],0x0
c001851b:	0f 85 73 01 00 00    	jne    c0018694 <cleanupTerminatedTask(ThreadControlBlock*)+0x1e0>
c0018521:	8b ae 1a 07 00 00    	mov    ebp,DWORD PTR [esi+0x71a]
c0018527:	85 ed                	test   ebp,ebp
c0018529:	74 1d                	je     c0018548 <cleanupTerminatedTask(ThreadControlBlock*)+0x94>
c001852b:	83 ec 0c             	sub    esp,0xc
c001852e:	55                   	push   ebp
c001852f:	e8 f2 bb ff ff       	call   c0014126 <EnvVarContainer::~EnvVarContainer()>
c0018534:	59                   	pop    ecx
c0018535:	5e                   	pop    esi
c0018536:	6a 0c                	push   0xc
c0018538:	55                   	push   ebp
c0018539:	e8 a0 44 ff ff       	call   c000c9de <operator delete(void*, unsigned long)>
c001853e:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0018541:	83 c4 10             	add    esp,0x10
c0018544:	89 f7                	mov    edi,esi
c0018546:	66 90                	xchg   ax,ax
c0018548:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c001854e:	85 c0                	test   eax,eax
c0018550:	0f 84 b2 00 00 00    	je     c0018608 <cleanupTerminatedTask(ThreadControlBlock*)+0x154>
c0018556:	8b 4b 51             	mov    ecx,DWORD PTR [ebx+0x51]
c0018559:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001855d:	31 c9                	xor    ecx,ecx
c001855f:	eb 17                	jmp    c0018578 <cleanupTerminatedTask(ThreadControlBlock*)+0xc4>
c0018561:	8d 76 00             	lea    esi,[esi+0x0]
c0018564:	41                   	inc    ecx
c0018565:	83 f9 10             	cmp    ecx,0x10
c0018568:	0f 84 9a 00 00 00    	je     c0018608 <cleanupTerminatedTask(ThreadControlBlock*)+0x154>
c001856e:	66 90                	xchg   ax,ax
c0018570:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c0018576:	66 90                	xchg   ax,ax
c0018578:	0f b7 90 04 05 00 00 	movzx  edx,WORD PTR [eax+0x504]
c001857f:	d3 fa                	sar    edx,cl
c0018581:	83 e2 01             	and    edx,0x1
c0018584:	74 de                	je     c0018564 <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c0018586:	8d 14 c9             	lea    edx,[ecx+ecx*8]
c0018589:	01 d2                	add    edx,edx
c001858b:	01 ca                	add    edx,ecx
c001858d:	8d 14 92             	lea    edx,[edx+edx*4]
c0018590:	01 d0                	add    eax,edx
c0018592:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c0018598:	83 fd 07             	cmp    ebp,0x7
c001859b:	75 c7                	jne    c0018564 <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c001859d:	05 40 02 00 00       	add    eax,0x240
c00185a2:	8b 68 11             	mov    ebp,DWORD PTR [eax+0x11]
c00185a5:	83 fd ff             	cmp    ebp,0xffffffff
c00185a8:	0f 8c ee 00 00 00    	jl     c001869c <cleanupTerminatedTask(ThreadControlBlock*)+0x1e8>
c00185ae:	0f 84 ac 01 00 00    	je     c0018760 <cleanupTerminatedTask(ThreadControlBlock*)+0x2ac>
c00185b4:	85 ed                	test   ebp,ebp
c00185b6:	0f 84 90 01 00 00    	je     c001874c <cleanupTerminatedTask(ThreadControlBlock*)+0x298>
c00185bc:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c00185be:	75 a4                	jne    c0018564 <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c00185c0:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c00185c6:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00185ca:	01 d0                	add    eax,edx
c00185cc:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00185d0:	83 ec 0c             	sub    esp,0xc
c00185d3:	89 b8 59 02 00 00    	mov    DWORD PTR [eax+0x259],edi
c00185d9:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00185dc:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c00185e2:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c00185e9:	50                   	push   eax
c00185ea:	e8 21 fe ff ff       	call   c0018410 <unblockTask(ThreadControlBlock*)>
c00185ef:	83 c4 10             	add    esp,0x10
c00185f2:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c00185f5:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00185f9:	89 f7                	mov    edi,esi
c00185fb:	41                   	inc    ecx
c00185fc:	83 f9 10             	cmp    ecx,0x10
c00185ff:	0f 85 6b ff ff ff    	jne    c0018570 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c0018605:	8d 76 00             	lea    esi,[esi+0x0]
c0018608:	8b 86 06 05 00 00    	mov    eax,DWORD PTR [esi+0x506]
c001860e:	85 c0                	test   eax,eax
c0018610:	74 62                	je     c0018674 <cleanupTerminatedTask(ThreadControlBlock*)+0x1c0>
c0018612:	8b 96 0a 05 00 00    	mov    edx,DWORD PTR [esi+0x50a]
c0018618:	3b 82 06 05 00 00    	cmp    eax,DWORD PTR [edx+0x506]
c001861e:	74 54                	je     c0018674 <cleanupTerminatedTask(ThreadControlBlock*)+0x1c0>
c0018620:	83 ec 0c             	sub    esp,0xc
c0018623:	68 44 79 02 c0       	push   0xc0027944
c0018628:	e8 43 8f 00 00       	call   c0021570 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001862d:	c7 04 24 44 79 02 c0 	mov    DWORD PTR [esp],0xc0027944
c0018634:	89 c7                	mov    edi,eax
c0018636:	e8 19 8f 00 00       	call   c0021554 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001863b:	83 c4 10             	add    esp,0x10
c001863e:	84 c0                	test   al,al
c0018640:	0f 84 ce 00 00 00    	je     c0018714 <cleanupTerminatedTask(ThreadControlBlock*)+0x260>
c0018646:	66 90                	xchg   ax,ax
c0018648:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001864b:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0018651:	85 d2                	test   edx,edx
c0018653:	74 0f                	je     c0018664 <cleanupTerminatedTask(ThreadControlBlock*)+0x1b0>
c0018655:	83 ec 0c             	sub    esp,0xc
c0018658:	8b 02                	mov    eax,DWORD PTR [edx]
c001865a:	52                   	push   edx
c001865b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001865e:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0018661:	83 c4 10             	add    esp,0x10
c0018664:	c7 80 06 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x506],0x0
c001866e:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c0018671:	8d 76 00             	lea    esi,[esi+0x0]
c0018674:	8b 9f 12 05 00 00    	mov    ebx,DWORD PTR [edi+0x512]
c001867a:	85 db                	test   ebx,ebx
c001867c:	74 16                	je     c0018694 <cleanupTerminatedTask(ThreadControlBlock*)+0x1e0>
c001867e:	83 ec 0c             	sub    esp,0xc
c0018681:	53                   	push   ebx
c0018682:	e8 91 35 ff ff       	call   c000bc18 <VAS::~VAS()>
c0018687:	58                   	pop    eax
c0018688:	5a                   	pop    edx
c0018689:	6a 14                	push   0x14
c001868b:	53                   	push   ebx
c001868c:	e8 4d 43 ff ff       	call   c000c9de <operator delete(void*, unsigned long)>
c0018691:	83 c4 10             	add    esp,0x10
c0018694:	83 c4 1c             	add    esp,0x1c
c0018697:	5b                   	pop    ebx
c0018698:	5e                   	pop    esi
c0018699:	5f                   	pop    edi
c001869a:	5d                   	pop    ebp
c001869b:	c3                   	ret    
c001869c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00186a0:	83 ec 0c             	sub    esp,0xc
c00186a3:	68 6c 49 02 c0       	push   0xc002496c
c00186a8:	e8 d4 bc ff ff       	call   c0014381 <Krnl::panic(char const*)>
c00186ad:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c00186b0:	83 c4 10             	add    esp,0x10
c00186b3:	89 f7                	mov    edi,esi
c00186b5:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00186b9:	e9 a6 fe ff ff       	jmp    c0018564 <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c00186be:	66 90                	xchg   ax,ax
c00186c0:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00186c6:	39 82 06 05 00 00    	cmp    DWORD PTR [edx+0x506],eax
c00186cc:	75 1e                	jne    c00186ec <cleanupTerminatedTask(ThreadControlBlock*)+0x238>
c00186ce:	83 ec 0c             	sub    esp,0xc
c00186d1:	68 d4 49 02 c0       	push   0xc00249d4
c00186d6:	e8 e4 43 ff ff       	call   c000cabf <Dbg::kprintf(char const*, ...)>
c00186db:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c00186e2:	e8 65 fa ff ff       	call   c001814c <blockTask(TaskState)>
c00186e7:	83 c4 10             	add    esp,0x10
c00186ea:	66 90                	xchg   ax,ax
c00186ec:	83 ec 08             	sub    esp,0x8
c00186ef:	56                   	push   esi
c00186f0:	68 44 79 02 c0       	push   0xc0027944
c00186f5:	e8 36 8f 00 00       	call   c0021630 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00186fa:	c7 04 24 44 79 02 c0 	mov    DWORD PTR [esp],0xc0027944
c0018701:	e8 6a 8e 00 00       	call   c0021570 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0018706:	83 c4 10             	add    esp,0x10
c0018709:	39 f8                	cmp    eax,edi
c001870b:	0f 84 37 ff ff ff    	je     c0018648 <cleanupTerminatedTask(ThreadControlBlock*)+0x194>
c0018711:	8d 76 00             	lea    esi,[esi+0x0]
c0018714:	83 ec 0c             	sub    esp,0xc
c0018717:	68 44 79 02 c0       	push   0xc0027944
c001871c:	e8 4f 8e 00 00       	call   c0021570 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0018721:	c7 04 24 44 79 02 c0 	mov    DWORD PTR [esp],0xc0027944
c0018728:	89 c6                	mov    esi,eax
c001872a:	e8 49 8e 00 00       	call   c0021578 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001872f:	83 c4 10             	add    esp,0x10
c0018732:	39 f3                	cmp    ebx,esi
c0018734:	74 b6                	je     c00186ec <cleanupTerminatedTask(ThreadControlBlock*)+0x238>
c0018736:	8b 56 3c             	mov    edx,DWORD PTR [esi+0x3c]
c0018739:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001873c:	39 82 0a 05 00 00    	cmp    DWORD PTR [edx+0x50a],eax
c0018742:	75 a8                	jne    c00186ec <cleanupTerminatedTask(ThreadControlBlock*)+0x238>
c0018744:	e9 77 ff ff ff       	jmp    c00186c0 <cleanupTerminatedTask(ThreadControlBlock*)+0x20c>
c0018749:	8d 76 00             	lea    esi,[esi+0x0]
c001874c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0018750:	83 ec 0c             	sub    esp,0xc
c0018753:	68 a0 49 02 c0       	push   0xc00249a0
c0018758:	e9 4b ff ff ff       	jmp    c00186a8 <cleanupTerminatedTask(ThreadControlBlock*)+0x1f4>
c001875d:	8d 76 00             	lea    esi,[esi+0x0]
c0018760:	8b 36                	mov    esi,DWORD PTR [esi]
c0018762:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0018766:	89 70 11             	mov    DWORD PTR [eax+0x11],esi
c0018769:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001876c:	8b b8 0a 05 00 00    	mov    edi,DWORD PTR [eax+0x50a]
c0018772:	01 d7                	add    edi,edx
c0018774:	89 f8                	mov    eax,edi
c0018776:	e9 51 fe ff ff       	jmp    c00185cc <cleanupTerminatedTask(ThreadControlBlock*)+0x118>
c001877b:	90                   	nop

c001877c <cleanerTaskFunction(void*)>:
c001877c:	53                   	push   ebx
c001877d:	83 ec 08             	sub    esp,0x8
c0018780:	a1 28 79 02 c0       	mov    eax,ds:0xc0027928
c0018785:	48                   	dec    eax
c0018786:	a3 28 79 02 c0       	mov    ds:0xc0027928,eax
c001878b:	75 03                	jne    c0018790 <cleanerTaskFunction(void*)+0x14>
c001878d:	fb                   	sti    
c001878e:	66 90                	xchg   ax,ax
c0018790:	fa                   	cli    
c0018791:	a1 28 79 02 c0       	mov    eax,ds:0xc0027928
c0018796:	80 3d 0c 79 02 c0 00 	cmp    BYTE PTR ds:0xc002790c,0x0
c001879d:	8d 50 01             	lea    edx,[eax+0x1]
c00187a0:	89 15 28 79 02 c0    	mov    DWORD PTR ds:0xc0027928,edx
c00187a6:	0f 84 ac 00 00 00    	je     c0018858 <cleanerTaskFunction(void*)+0xdc>
c00187ac:	a3 28 79 02 c0       	mov    ds:0xc0027928,eax
c00187b1:	85 c0                	test   eax,eax
c00187b3:	75 03                	jne    c00187b8 <cleanerTaskFunction(void*)+0x3c>
c00187b5:	fb                   	sti    
c00187b6:	66 90                	xchg   ax,ax
c00187b8:	c6 05 0c 79 02 c0 00 	mov    BYTE PTR ds:0xc002790c,0x0
c00187bf:	fa                   	cli    
c00187c0:	ff 05 28 79 02 c0    	inc    DWORD PTR ds:0xc0027928
c00187c6:	ff 05 24 79 02 c0    	inc    DWORD PTR ds:0xc0027924
c00187cc:	fa                   	cli    
c00187cd:	ff 05 28 79 02 c0    	inc    DWORD PTR ds:0xc0027928
c00187d3:	eb 2b                	jmp    c0018800 <cleanerTaskFunction(void*)+0x84>
c00187d5:	8d 76 00             	lea    esi,[esi+0x0]
c00187d8:	83 ec 0c             	sub    esp,0xc
c00187db:	68 2c 79 02 c0       	push   0xc002792c
c00187e0:	e8 8b 8d 00 00       	call   c0021570 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00187e5:	c7 04 24 2c 79 02 c0 	mov    DWORD PTR [esp],0xc002792c
c00187ec:	89 c3                	mov    ebx,eax
c00187ee:	e8 85 8d 00 00       	call   c0021578 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c00187f3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00187f6:	e8 b9 fc ff ff       	call   c00184b4 <cleanupTerminatedTask(ThreadControlBlock*)>
c00187fb:	83 c4 10             	add    esp,0x10
c00187fe:	66 90                	xchg   ax,ax
c0018800:	83 ec 0c             	sub    esp,0xc
c0018803:	68 2c 79 02 c0       	push   0xc002792c
c0018808:	e8 47 8d 00 00       	call   c0021554 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001880d:	83 c4 10             	add    esp,0x10
c0018810:	84 c0                	test   al,al
c0018812:	74 c4                	je     c00187d8 <cleanerTaskFunction(void*)+0x5c>
c0018814:	a1 28 79 02 c0       	mov    eax,ds:0xc0027928
c0018819:	48                   	dec    eax
c001881a:	a3 28 79 02 c0       	mov    ds:0xc0027928,eax
c001881f:	75 03                	jne    c0018824 <cleanerTaskFunction(void*)+0xa8>
c0018821:	fb                   	sti    
c0018822:	66 90                	xchg   ax,ax
c0018824:	a1 24 79 02 c0       	mov    eax,ds:0xc0027924
c0018829:	48                   	dec    eax
c001882a:	a3 24 79 02 c0       	mov    ds:0xc0027924,eax
c001882f:	0f 85 4b ff ff ff    	jne    c0018780 <cleanerTaskFunction(void*)+0x4>
c0018835:	a1 20 79 02 c0       	mov    eax,ds:0xc0027920
c001883a:	85 c0                	test   eax,eax
c001883c:	0f 84 3e ff ff ff    	je     c0018780 <cleanerTaskFunction(void*)+0x4>
c0018842:	c7 05 20 79 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027920,0x0
c001884c:	e8 03 f7 ff ff       	call   c0017f54 <schedule()>
c0018851:	e9 2a ff ff ff       	jmp    c0018780 <cleanerTaskFunction(void*)+0x4>
c0018856:	66 90                	xchg   ax,ax
c0018858:	83 ec 0c             	sub    esp,0xc
c001885b:	6a 02                	push   0x2
c001885d:	e8 c2 f8 ff ff       	call   c0018124 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0018862:	83 c4 10             	add    esp,0x10
c0018865:	e9 4e ff ff ff       	jmp    c00187b8 <cleanerTaskFunction(void*)+0x3c>
c001886a:	66 90                	xchg   ax,ax

c001886c <terminateTask(int)>:
c001886c:	83 ec 14             	sub    esp,0x14
c001886f:	fa                   	cli    
c0018870:	ff 05 28 79 02 c0    	inc    DWORD PTR ds:0xc0027928
c0018876:	ff 05 24 79 02 c0    	inc    DWORD PTR ds:0xc0027924
c001887c:	fa                   	cli    
c001887d:	ff 05 28 79 02 c0    	inc    DWORD PTR ds:0xc0027928
c0018883:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018887:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001888c:	89 50 51             	mov    DWORD PTR [eax+0x51],edx
c001888f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018894:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0018897:	50                   	push   eax
c0018898:	68 2c 79 02 c0       	push   0xc002792c
c001889d:	e8 8e 8d 00 00       	call   c0021630 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00188a2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00188a7:	83 c4 10             	add    esp,0x10
c00188aa:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c00188b1:	a1 08 79 02 c0       	mov    eax,ds:0xc0027908
c00188b6:	85 c0                	test   eax,eax
c00188b8:	74 5e                	je     c0018918 <terminateTask(int)+0xac>
c00188ba:	83 ec 0c             	sub    esp,0xc
c00188bd:	c6 05 0c 79 02 c0 01 	mov    BYTE PTR ds:0xc002790c,0x1
c00188c4:	50                   	push   eax
c00188c5:	e8 46 fb ff ff       	call   c0018410 <unblockTask(ThreadControlBlock*)>
c00188ca:	83 c4 10             	add    esp,0x10
c00188cd:	8d 76 00             	lea    esi,[esi+0x0]
c00188d0:	a1 28 79 02 c0       	mov    eax,ds:0xc0027928
c00188d5:	48                   	dec    eax
c00188d6:	a3 28 79 02 c0       	mov    ds:0xc0027928,eax
c00188db:	75 03                	jne    c00188e0 <terminateTask(int)+0x74>
c00188dd:	fb                   	sti    
c00188de:	66 90                	xchg   ax,ax
c00188e0:	a1 24 79 02 c0       	mov    eax,ds:0xc0027924
c00188e5:	48                   	dec    eax
c00188e6:	a3 24 79 02 c0       	mov    ds:0xc0027924,eax
c00188eb:	75 0b                	jne    c00188f8 <terminateTask(int)+0x8c>
c00188ed:	83 3d 20 79 02 c0 00 	cmp    DWORD PTR ds:0xc0027920,0x0
c00188f4:	75 36                	jne    c001892c <terminateTask(int)+0xc0>
c00188f6:	66 90                	xchg   ax,ax
c00188f8:	a1 28 79 02 c0       	mov    eax,ds:0xc0027928
c00188fd:	48                   	dec    eax
c00188fe:	a3 28 79 02 c0       	mov    ds:0xc0027928,eax
c0018903:	75 03                	jne    c0018908 <terminateTask(int)+0x9c>
c0018905:	fb                   	sti    
c0018906:	66 90                	xchg   ax,ax
c0018908:	fa                   	cli    
c0018909:	ff 05 28 79 02 c0    	inc    DWORD PTR ds:0xc0027928
c001890f:	90                   	nop
c0018910:	e8 3f f6 ff ff       	call   c0017f54 <schedule()>
c0018915:	eb e1                	jmp    c00188f8 <terminateTask(int)+0x8c>
c0018917:	90                   	nop
c0018918:	83 ec 0c             	sub    esp,0xc
c001891b:	68 d1 48 02 c0       	push   0xc00248d1
c0018920:	e8 9a 41 ff ff       	call   c000cabf <Dbg::kprintf(char const*, ...)>
c0018925:	83 c4 10             	add    esp,0x10
c0018928:	eb a6                	jmp    c00188d0 <terminateTask(int)+0x64>
c001892a:	66 90                	xchg   ax,ax
c001892c:	c7 05 20 79 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027920,0x0
c0018936:	eb d8                	jmp    c0018910 <terminateTask(int)+0xa4>

c0018938 <Thr::terminateFromIRQ(int)>:
c0018938:	83 ec 18             	sub    esp,0x18
c001893b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001893f:	e8 28 ff ff ff       	call   c001886c <terminateTask(int)>

c0018944 <Semaphore::release()>:
c0018944:	83 ec 0c             	sub    esp,0xc
c0018947:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001894b:	fa                   	cli    
c001894c:	a1 24 79 02 c0       	mov    eax,ds:0xc0027924
c0018951:	ff 05 28 79 02 c0    	inc    DWORD PTR ds:0xc0027928
c0018957:	8d 48 01             	lea    ecx,[eax+0x1]
c001895a:	89 0d 24 79 02 c0    	mov    DWORD PTR ds:0xc0027924,ecx
c0018960:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c0018963:	85 c9                	test   ecx,ecx
c0018965:	74 41                	je     c00189a8 <Semaphore::release()+0x64>
c0018967:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c001896a:	83 ec 0c             	sub    esp,0xc
c001896d:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0018970:	51                   	push   ecx
c0018971:	e8 9a fa ff ff       	call   c0018410 <unblockTask(ThreadControlBlock*)>
c0018976:	a1 24 79 02 c0       	mov    eax,ds:0xc0027924
c001897b:	83 c4 10             	add    esp,0x10
c001897e:	48                   	dec    eax
c001897f:	90                   	nop
c0018980:	a3 24 79 02 c0       	mov    ds:0xc0027924,eax
c0018985:	85 c0                	test   eax,eax
c0018987:	75 0b                	jne    c0018994 <Semaphore::release()+0x50>
c0018989:	a1 20 79 02 c0       	mov    eax,ds:0xc0027920
c001898e:	85 c0                	test   eax,eax
c0018990:	75 1e                	jne    c00189b0 <Semaphore::release()+0x6c>
c0018992:	66 90                	xchg   ax,ax
c0018994:	a1 28 79 02 c0       	mov    eax,ds:0xc0027928
c0018999:	48                   	dec    eax
c001899a:	a3 28 79 02 c0       	mov    ds:0xc0027928,eax
c001899f:	75 03                	jne    c00189a4 <Semaphore::release()+0x60>
c00189a1:	fb                   	sti    
c00189a2:	66 90                	xchg   ax,ax
c00189a4:	83 c4 0c             	add    esp,0xc
c00189a7:	c3                   	ret    
c00189a8:	ff 4a 0c             	dec    DWORD PTR [edx+0xc]
c00189ab:	eb d3                	jmp    c0018980 <Semaphore::release()+0x3c>
c00189ad:	8d 76 00             	lea    esi,[esi+0x0]
c00189b0:	c7 05 20 79 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027920,0x0
c00189ba:	e8 95 f5 ff ff       	call   c0017f54 <schedule()>
c00189bf:	eb d3                	jmp    c0018994 <Semaphore::release()+0x50>
c00189c1:	8d 76 00             	lea    esi,[esi+0x0]

c00189c4 <__static_initialization_and_destruction_0(int, int)>:
c00189c4:	83 ec 0c             	sub    esp,0xc
c00189c7:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c00189cc:	0f 85 8e 00 00 00    	jne    c0018a60 <__static_initialization_and_destruction_0(int, int)+0x9c>
c00189d2:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c00189da:	0f 85 80 00 00 00    	jne    c0018a60 <__static_initialization_and_destruction_0(int, int)+0x9c>
c00189e0:	83 ec 0c             	sub    esp,0xc
c00189e3:	68 44 79 02 c0       	push   0xc0027944
c00189e8:	e8 ef 8e 00 00       	call   c00218dc <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c00189ed:	83 c4 10             	add    esp,0x10
c00189f0:	83 ec 04             	sub    esp,0x4
c00189f3:	68 c8 56 02 c0       	push   0xc00256c8
c00189f8:	68 44 79 02 c0       	push   0xc0027944
c00189fd:	68 8c 18 02 c0       	push   0xc002188c
c0018a02:	e8 51 3f ff ff       	call   c000c958 <__cxa_atexit>
c0018a07:	83 c4 10             	add    esp,0x10
c0018a0a:	83 ec 0c             	sub    esp,0xc
c0018a0d:	68 38 79 02 c0       	push   0xc0027938
c0018a12:	e8 c5 8e 00 00       	call   c00218dc <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0018a17:	83 c4 10             	add    esp,0x10
c0018a1a:	83 ec 04             	sub    esp,0x4
c0018a1d:	68 c8 56 02 c0       	push   0xc00256c8
c0018a22:	68 38 79 02 c0       	push   0xc0027938
c0018a27:	68 8c 18 02 c0       	push   0xc002188c
c0018a2c:	e8 27 3f ff ff       	call   c000c958 <__cxa_atexit>
c0018a31:	83 c4 10             	add    esp,0x10
c0018a34:	83 ec 0c             	sub    esp,0xc
c0018a37:	68 2c 79 02 c0       	push   0xc002792c
c0018a3c:	e8 9b 8e 00 00       	call   c00218dc <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0018a41:	83 c4 10             	add    esp,0x10
c0018a44:	83 ec 04             	sub    esp,0x4
c0018a47:	68 c8 56 02 c0       	push   0xc00256c8
c0018a4c:	68 2c 79 02 c0       	push   0xc002792c
c0018a51:	68 8c 18 02 c0       	push   0xc002188c
c0018a56:	e8 fd 3e ff ff       	call   c000c958 <__cxa_atexit>
c0018a5b:	83 c4 10             	add    esp,0x10
c0018a5e:	66 90                	xchg   ax,ax
c0018a60:	90                   	nop
c0018a61:	83 c4 0c             	add    esp,0xc
c0018a64:	c3                   	ret    
c0018a65:	8d 76 00             	lea    esi,[esi+0x0]

c0018a68 <_GLOBAL__sub_I__ZN3Thr7nextPIDE>:
c0018a68:	83 ec 0c             	sub    esp,0xc
c0018a6b:	83 ec 08             	sub    esp,0x8
c0018a6e:	68 ff ff 00 00       	push   0xffff
c0018a73:	6a 01                	push   0x1
c0018a75:	e8 4a ff ff ff       	call   c00189c4 <__static_initialization_and_destruction_0(int, int)>
c0018a7a:	83 c4 10             	add    esp,0x10
c0018a7d:	83 c4 0c             	add    esp,0xc
c0018a80:	c3                   	ret    

c0018a81 <Vm::inbv(unsigned short)>:
c0018a81:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0018a85:	66 81 fa fe fe       	cmp    dx,0xfefe
c0018a8a:	75 06                	jne    c0018a92 <Vm::inbv(unsigned short)+0x11>
c0018a8c:	a0 8c 79 02 c0       	mov    al,ds:0xc002798c
c0018a91:	c3                   	ret    
c0018a92:	ec                   	in     al,dx
c0018a93:	c3                   	ret    

c0018a94 <Vm::outbv(unsigned short, unsigned char)>:
c0018a94:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0018a98:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018a9c:	66 81 fa fe fe       	cmp    dx,0xfefe
c0018aa1:	75 25                	jne    c0018ac8 <Vm::outbv(unsigned short, unsigned char)+0x34>
c0018aa3:	8b 0d 8c 79 02 c0    	mov    ecx,DWORD PTR ds:0xc002798c
c0018aa9:	8d 51 01             	lea    edx,[ecx+0x1]
c0018aac:	88 81 a0 79 02 c0    	mov    BYTE PTR [ecx-0x3ffd8660],al
c0018ab2:	89 15 8c 79 02 c0    	mov    DWORD PTR ds:0xc002798c,edx
c0018ab8:	83 fa 20             	cmp    edx,0x20
c0018abb:	75 0c                	jne    c0018ac9 <Vm::outbv(unsigned short, unsigned char)+0x35>
c0018abd:	c7 05 8c 79 02 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc002798c,0x1f
c0018ac7:	c3                   	ret    
c0018ac8:	ee                   	out    dx,al
c0018ac9:	c3                   	ret    

c0018aca <Vm::realToLinear(unsigned short, unsigned short)>:
c0018aca:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0018acf:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0018ad4:	c1 e0 04             	shl    eax,0x4
c0018ad7:	01 d0                	add    eax,edx
c0018ad9:	c3                   	ret    

c0018ada <Vm::getSegment(unsigned int)>:
c0018ada:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018ade:	c1 e8 10             	shr    eax,0x10
c0018ae1:	c3                   	ret    

c0018ae2 <Vm::getOffset(unsigned int)>:
c0018ae2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018ae6:	c3                   	ret    

c0018ae7 <Vm::mainloop2()>:
c0018ae7:	83 ec 18             	sub    esp,0x18
c0018aea:	fa                   	cli    
c0018aeb:	ff 05 28 79 02 c0    	inc    DWORD PTR ds:0xc0027928
c0018af1:	6a 02                	push   0x2
c0018af3:	c6 05 85 79 02 c0 01 	mov    BYTE PTR ds:0xc0027985,0x1
c0018afa:	e8 25 f6 ff ff       	call   c0018124 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0018aff:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018b04:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c0018b08:	52                   	push   edx
c0018b09:	0f b7 50 59          	movzx  edx,WORD PTR [eax+0x59]
c0018b0d:	52                   	push   edx
c0018b0e:	0f b7 50 57          	movzx  edx,WORD PTR [eax+0x57]
c0018b12:	52                   	push   edx
c0018b13:	0f b7 40 55          	movzx  eax,WORD PTR [eax+0x55]
c0018b17:	50                   	push   eax
c0018b18:	e8 12 77 fe ff       	call   c000022f <goToVM86>
c0018b1d:	83 c4 2c             	add    esp,0x2c
c0018b20:	c3                   	ret    

c0018b21 <Vm::mainVm8086Loop(void*)>:
c0018b21:	a1 28 79 02 c0       	mov    eax,ds:0xc0027928
c0018b26:	48                   	dec    eax
c0018b27:	a3 28 79 02 c0       	mov    ds:0xc0027928,eax
c0018b2c:	75 01                	jne    c0018b2f <Vm::mainVm8086Loop(void*)+0xe>
c0018b2e:	fb                   	sti    
c0018b2f:	eb b6                	jmp    c0018ae7 <Vm::mainloop2()>

c0018b31 <Vm::mainloop3(unsigned long)>:
c0018b31:	83 ec 18             	sub    esp,0x18
c0018b34:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0018b38:	fa                   	cli    
c0018b39:	ff 05 28 79 02 c0    	inc    DWORD PTR ds:0xc0027928
c0018b3f:	6a 02                	push   0x2
c0018b41:	c6 05 84 79 02 c0 01 	mov    BYTE PTR ds:0xc0027984,0x1
c0018b48:	a3 80 79 02 c0       	mov    ds:0xc0027980,eax
c0018b4d:	e8 d2 f5 ff ff       	call   c0018124 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0018b52:	83 c4 1c             	add    esp,0x1c
c0018b55:	eb 90                	jmp    c0018ae7 <Vm::mainloop2()>

c0018b57 <Vm::initialise8086()>:
c0018b57:	83 ec 0c             	sub    esp,0xc
c0018b5a:	68 80 00 00 00       	push   0x80
c0018b5f:	6a 00                	push   0x0
c0018b61:	68 21 8b 01 c0       	push   0xc0018b21
c0018b66:	ff 35 50 79 02 c0    	push   DWORD PTR ds:0xc0027950
c0018b6c:	e8 c7 f1 ff ff       	call   c0017d38 <Process::createThread(void (*)(void*), void*, int)>
c0018b71:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c0018b78:	a3 88 79 02 c0       	mov    ds:0xc0027988,eax
c0018b7d:	68 00 01 00 00       	push   0x100
c0018b82:	a1 50 79 02 c0       	mov    eax,ds:0xc0027950
c0018b87:	6a 00                	push   0x0
c0018b89:	6a 00                	push   0x0
c0018b8b:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0018b91:	e8 f4 34 ff ff       	call   c000c08a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0018b96:	83 c4 2c             	add    esp,0x2c
c0018b99:	c3                   	ret    

c0018b9a <Vm::finish8086()>:
c0018b9a:	53                   	push   ebx
c0018b9b:	83 ec 08             	sub    esp,0x8
c0018b9e:	fa                   	cli    
c0018b9f:	ff 05 28 79 02 c0    	inc    DWORD PTR ds:0xc0027928
c0018ba5:	80 3d 84 79 02 c0 00 	cmp    BYTE PTR ds:0xc0027984,0x0
c0018bac:	75 15                	jne    c0018bc3 <Vm::finish8086()+0x29>
c0018bae:	e8 a1 f3 ff ff       	call   c0017f54 <schedule()>
c0018bb3:	a1 28 79 02 c0       	mov    eax,ds:0xc0027928
c0018bb8:	48                   	dec    eax
c0018bb9:	a3 28 79 02 c0       	mov    ds:0xc0027928,eax
c0018bbe:	75 de                	jne    c0018b9e <Vm::finish8086()+0x4>
c0018bc0:	fb                   	sti    
c0018bc1:	eb db                	jmp    c0018b9e <Vm::finish8086()+0x4>
c0018bc3:	83 ec 0c             	sub    esp,0xc
c0018bc6:	8b 1d 80 79 02 c0    	mov    ebx,DWORD PTR ds:0xc0027980
c0018bcc:	ff 35 88 79 02 c0    	push   DWORD PTR ds:0xc0027988
c0018bd2:	c6 05 84 79 02 c0 00 	mov    BYTE PTR ds:0xc0027984,0x0
c0018bd9:	e8 32 f8 ff ff       	call   c0018410 <unblockTask(ThreadControlBlock*)>
c0018bde:	a1 28 79 02 c0       	mov    eax,ds:0xc0027928
c0018be3:	83 c4 10             	add    esp,0x10
c0018be6:	8d 50 ff             	lea    edx,[eax-0x1]
c0018be9:	89 15 28 79 02 c0    	mov    DWORD PTR ds:0xc0027928,edx
c0018bef:	85 d2                	test   edx,edx
c0018bf1:	75 01                	jne    c0018bf4 <Vm::finish8086()+0x5a>
c0018bf3:	fb                   	sti    
c0018bf4:	89 d8                	mov    eax,ebx
c0018bf6:	83 c4 08             	add    esp,0x8
c0018bf9:	5b                   	pop    ebx
c0018bfa:	c3                   	ret    

c0018bfb <Vm::getOutput8086(unsigned char*)>:
c0018bfb:	57                   	push   edi
c0018bfc:	8b 0d 8c 79 02 c0    	mov    ecx,DWORD PTR ds:0xc002798c
c0018c02:	56                   	push   esi
c0018c03:	be a0 79 02 c0       	mov    esi,0xc00279a0
c0018c08:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0018c0c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0018c0e:	a1 8c 79 02 c0       	mov    eax,ds:0xc002798c
c0018c13:	5e                   	pop    esi
c0018c14:	c7 05 8c 79 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002798c,0x0
c0018c1e:	5f                   	pop    edi
c0018c1f:	c3                   	ret    

c0018c20 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c0018c20:	55                   	push   ebp
c0018c21:	57                   	push   edi
c0018c22:	56                   	push   esi
c0018c23:	53                   	push   ebx
c0018c24:	83 ec 2c             	sub    esp,0x2c
c0018c27:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0018c2b:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0018c2f:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0018c33:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0018c37:	fa                   	cli    
c0018c38:	ff 05 28 79 02 c0    	inc    DWORD PTR ds:0xc0027928
c0018c3e:	0f b6 35 85 79 02 c0 	movzx  esi,BYTE PTR ds:0xc0027985
c0018c45:	89 f0                	mov    eax,esi
c0018c47:	84 c0                	test   al,al
c0018c49:	75 1d                	jne    c0018c68 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x48>
c0018c4b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0018c4f:	e8 00 f3 ff ff       	call   c0017f54 <schedule()>
c0018c54:	a1 28 79 02 c0       	mov    eax,ds:0xc0027928
c0018c59:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018c5d:	48                   	dec    eax
c0018c5e:	a3 28 79 02 c0       	mov    ds:0xc0027928,eax
c0018c63:	75 d2                	jne    c0018c37 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0018c65:	fb                   	sti    
c0018c66:	eb cf                	jmp    c0018c37 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0018c68:	a1 88 79 02 c0       	mov    eax,ds:0xc0027988
c0018c6d:	c7 05 8c 79 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002798c,0x0
c0018c77:	66 89 50 59          	mov    WORD PTR [eax+0x59],dx
c0018c7b:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c0018c7f:	66 89 68 55          	mov    WORD PTR [eax+0x55],bp
c0018c83:	66 89 78 57          	mov    WORD PTR [eax+0x57],di
c0018c87:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c0018c8b:	50                   	push   eax
c0018c8c:	6a 20                	push   0x20
c0018c8e:	6a 00                	push   0x0
c0018c90:	68 a0 79 02 c0       	push   0xc00279a0
c0018c95:	e8 ea 79 fe ff       	call   c0000684 <memset>
c0018c9a:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0018ca1:	e8 1d 0d ff ff       	call   c00099c3 <malloc>
c0018ca6:	83 c4 0c             	add    esp,0xc
c0018ca9:	89 c3                	mov    ebx,eax
c0018cab:	ff 35 50 79 02 c0    	push   DWORD PTR ds:0xc0027950
c0018cb1:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0018cb5:	50                   	push   eax
c0018cb6:	e8 6f 43 ff ff       	call   c000d02a <File::File(char const*, Process*)>
c0018cbb:	83 c4 10             	add    esp,0x10
c0018cbe:	85 db                	test   ebx,ebx
c0018cc0:	75 0a                	jne    c0018ccc <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xac>
c0018cc2:	83 ec 0c             	sub    esp,0xc
c0018cc5:	68 fc 49 02 c0       	push   0xc00249fc
c0018cca:	eb 3e                	jmp    c0018d0a <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xea>
c0018ccc:	50                   	push   eax
c0018ccd:	8d 44 24 17          	lea    eax,[esp+0x17]
c0018cd1:	50                   	push   eax
c0018cd2:	8d 44 24 20          	lea    eax,[esp+0x20]
c0018cd6:	50                   	push   eax
c0018cd7:	53                   	push   ebx
c0018cd8:	e8 5d 46 ff ff       	call   c000d33a <File::stat(unsigned long long*, bool*)>
c0018cdd:	83 c4 10             	add    esp,0x10
c0018ce0:	80 7c 24 13 00       	cmp    BYTE PTR [esp+0x13],0x0
c0018ce5:	74 0a                	je     c0018cf1 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xd1>
c0018ce7:	83 ec 0c             	sub    esp,0xc
c0018cea:	68 10 4a 02 c0       	push   0xc0024a10
c0018cef:	eb 19                	jmp    c0018d0a <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xea>
c0018cf1:	51                   	push   ecx
c0018cf2:	51                   	push   ecx
c0018cf3:	6a 01                	push   0x1
c0018cf5:	53                   	push   ebx
c0018cf6:	e8 93 43 ff ff       	call   c000d08e <File::open(FileOpenMode)>
c0018cfb:	83 c4 10             	add    esp,0x10
c0018cfe:	85 c0                	test   eax,eax
c0018d00:	74 24                	je     c0018d26 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x106>
c0018d02:	83 ec 0c             	sub    esp,0xc
c0018d05:	68 29 4a 02 c0       	push   0xc0024a29
c0018d0a:	e8 72 b6 ff ff       	call   c0014381 <Krnl::panic(char const*)>
c0018d0f:	a1 28 79 02 c0       	mov    eax,ds:0xc0027928
c0018d14:	83 c4 10             	add    esp,0x10
c0018d17:	48                   	dec    eax
c0018d18:	a3 28 79 02 c0       	mov    ds:0xc0027928,eax
c0018d1d:	85 c0                	test   eax,eax
c0018d1f:	75 01                	jne    c0018d22 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x102>
c0018d21:	fb                   	sti    
c0018d22:	31 f6                	xor    esi,esi
c0018d24:	eb 58                	jmp    c0018d7e <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x15e>
c0018d26:	0f b7 ed             	movzx  ebp,bp
c0018d29:	50                   	push   eax
c0018d2a:	0f b7 ff             	movzx  edi,di
c0018d2d:	50                   	push   eax
c0018d2e:	55                   	push   ebp
c0018d2f:	57                   	push   edi
c0018d30:	e8 95 fd ff ff       	call   c0018aca <Vm::realToLinear(unsigned short, unsigned short)>
c0018d35:	5a                   	pop    edx
c0018d36:	8b 13                	mov    edx,DWORD PTR [ebx]
c0018d38:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0018d3c:	51                   	push   ecx
c0018d3d:	50                   	push   eax
c0018d3e:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0018d42:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0018d46:	53                   	push   ebx
c0018d47:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0018d4a:	83 c4 14             	add    esp,0x14
c0018d4d:	53                   	push   ebx
c0018d4e:	e8 99 43 ff ff       	call   c000d0ec <File::close()>
c0018d53:	a1 28 79 02 c0       	mov    eax,ds:0xc0027928
c0018d58:	83 c4 10             	add    esp,0x10
c0018d5b:	48                   	dec    eax
c0018d5c:	c6 05 85 79 02 c0 00 	mov    BYTE PTR ds:0xc0027985,0x0
c0018d63:	a3 28 79 02 c0       	mov    ds:0xc0027928,eax
c0018d68:	85 c0                	test   eax,eax
c0018d6a:	75 01                	jne    c0018d6d <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x14d>
c0018d6c:	fb                   	sti    
c0018d6d:	83 ec 0c             	sub    esp,0xc
c0018d70:	ff 35 88 79 02 c0    	push   DWORD PTR ds:0xc0027988
c0018d76:	e8 95 f6 ff ff       	call   c0018410 <unblockTask(ThreadControlBlock*)>
c0018d7b:	83 c4 10             	add    esp,0x10
c0018d7e:	83 c4 2c             	add    esp,0x2c
c0018d81:	89 f0                	mov    eax,esi
c0018d83:	5b                   	pop    ebx
c0018d84:	5e                   	pop    esi
c0018d85:	5f                   	pop    edi
c0018d86:	5d                   	pop    ebp
c0018d87:	c3                   	ret    

c0018d88 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c0018d88:	57                   	push   edi
c0018d89:	56                   	push   esi
c0018d8a:	53                   	push   ebx
c0018d8b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0018d8f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018d93:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0018d97:	83 e8 06             	sub    eax,0x6
c0018d9a:	0f b7 c0             	movzx  eax,ax
c0018d9d:	50                   	push   eax
c0018d9e:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c0018da3:	50                   	push   eax
c0018da4:	e8 21 fd ff ff       	call   c0018aca <Vm::realToLinear(unsigned short, unsigned short)>
c0018da9:	5a                   	pop    edx
c0018daa:	5e                   	pop    esi
c0018dab:	8b 71 44             	mov    esi,DWORD PTR [ecx+0x44]
c0018dae:	8d 56 fa             	lea    edx,[esi-0x6]
c0018db1:	81 e2 ff ff 00 00    	and    edx,0xffff
c0018db7:	89 51 44             	mov    DWORD PTR [ecx+0x44],edx
c0018dba:	8b 51 38             	mov    edx,DWORD PTR [ecx+0x38]
c0018dbd:	83 c2 02             	add    edx,0x2
c0018dc0:	66 89 10             	mov    WORD PTR [eax],dx
c0018dc3:	8b 51 3c             	mov    edx,DWORD PTR [ecx+0x3c]
c0018dc6:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c0018dca:	8b 51 40             	mov    edx,DWORD PTR [ecx+0x40]
c0018dcd:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c0018dd1:	89 d6                	mov    esi,edx
c0018dd3:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0018dd9:	66 81 e6 ff fd       	and    si,0xfdff
c0018dde:	80 7f 5d 00          	cmp    BYTE PTR [edi+0x5d],0x0
c0018de2:	74 07                	je     c0018deb <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x63>
c0018de4:	89 d6                	mov    esi,edx
c0018de6:	66 81 ce 00 02       	or     si,0x200
c0018deb:	66 89 70 04          	mov    WORD PTR [eax+0x4],si
c0018def:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018df4:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c0018df8:	0f b7 04 9d 02 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x2]
c0018e00:	89 41 3c             	mov    DWORD PTR [ecx+0x3c],eax
c0018e03:	0f b7 04 9d 00 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x0]
c0018e0b:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c0018e0e:	5b                   	pop    ebx
c0018e0f:	5e                   	pop    esi
c0018e10:	5f                   	pop    edi
c0018e11:	c3                   	ret    

c0018e12 <Vm::readByteFromReal(unsigned short, unsigned short)>:
c0018e12:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0018e17:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0018e1c:	c1 e0 04             	shl    eax,0x4
c0018e1f:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c0018e22:	c3                   	ret    

c0018e23 <Vm::readWordFromReal(unsigned short, unsigned short)>:
c0018e23:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0018e28:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0018e2d:	c1 e0 04             	shl    eax,0x4
c0018e30:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c0018e34:	c3                   	ret    

c0018e35 <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c0018e35:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0018e3a:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0018e3f:	c1 e0 04             	shl    eax,0x4
c0018e42:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c0018e45:	c3                   	ret    

c0018e46 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c0018e46:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0018e4b:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0018e50:	c1 e0 04             	shl    eax,0x4
c0018e53:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0018e57:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c0018e5a:	c3                   	ret    

c0018e5b <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c0018e5b:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0018e60:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0018e65:	c1 e0 04             	shl    eax,0x4
c0018e68:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0018e6c:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c0018e70:	c3                   	ret    

c0018e71 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c0018e71:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0018e76:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0018e7b:	c1 e0 04             	shl    eax,0x4
c0018e7e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0018e82:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c0018e85:	c3                   	ret    

c0018e86 <Vm::faultHandler(regs*)>:
c0018e86:	55                   	push   ebp
c0018e87:	57                   	push   edi
c0018e88:	56                   	push   esi
c0018e89:	53                   	push   ebx
c0018e8a:	83 ec 1c             	sub    esp,0x1c
c0018e8d:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0018e91:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0018e94:	0f b7 53 38          	movzx  edx,WORD PTR [ebx+0x38]
c0018e98:	0f b7 f8             	movzx  edi,ax
c0018e9b:	52                   	push   edx
c0018e9c:	0f b7 c0             	movzx  eax,ax
c0018e9f:	50                   	push   eax
c0018ea0:	e8 25 fc ff ff       	call   c0018aca <Vm::realToLinear(unsigned short, unsigned short)>
c0018ea5:	5a                   	pop    edx
c0018ea6:	8b 6b 48             	mov    ebp,DWORD PTR [ebx+0x48]
c0018ea9:	59                   	pop    ecx
c0018eaa:	89 c1                	mov    ecx,eax
c0018eac:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0018eaf:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0018eb3:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0018eb8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0018ebc:	0f b7 c5             	movzx  eax,bp
c0018ebf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018ec3:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0018ec7:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0018ecb:	e8 fa fb ff ff       	call   c0018aca <Vm::realToLinear(unsigned short, unsigned short)>
c0018ed0:	5e                   	pop    esi
c0018ed1:	be 06 00 00 00       	mov    esi,0x6
c0018ed6:	5a                   	pop    edx
c0018ed7:	c6 44 24 03 00       	mov    BYTE PTR [esp+0x3],0x0
c0018edc:	c6 44 24 02 00       	mov    BYTE PTR [esp+0x2],0x0
c0018ee1:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c0018ee4:	80 fa 9d             	cmp    dl,0x9d
c0018ee7:	0f 84 2c 02 00 00    	je     c0019119 <Vm::faultHandler(regs*)+0x293>
c0018eed:	0f 87 91 00 00 00    	ja     c0018f84 <Vm::faultHandler(regs*)+0xfe>
c0018ef3:	80 fa 66             	cmp    dl,0x66
c0018ef6:	0f 84 98 01 00 00    	je     c0019094 <Vm::faultHandler(regs*)+0x20e>
c0018efc:	77 47                	ja     c0018f45 <Vm::faultHandler(regs*)+0xbf>
c0018efe:	80 fa 36             	cmp    dl,0x36
c0018f01:	0f 84 80 01 00 00    	je     c0019087 <Vm::faultHandler(regs*)+0x201>
c0018f07:	77 1a                	ja     c0018f23 <Vm::faultHandler(regs*)+0x9d>
c0018f09:	80 fa 26             	cmp    dl,0x26
c0018f0c:	0f 84 4e 01 00 00    	je     c0019060 <Vm::faultHandler(regs*)+0x1da>
c0018f12:	80 fa 2e             	cmp    dl,0x2e
c0018f15:	0f 85 e2 05 00 00    	jne    c00194fd <Vm::faultHandler(regs*)+0x677>
c0018f1b:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0018f1e:	31 f6                	xor    esi,esi
c0018f20:	41                   	inc    ecx
c0018f21:	eb be                	jmp    c0018ee1 <Vm::faultHandler(regs*)+0x5b>
c0018f23:	80 fa 64             	cmp    dl,0x64
c0018f26:	0f 84 41 01 00 00    	je     c001906d <Vm::faultHandler(regs*)+0x1e7>
c0018f2c:	0f 87 48 01 00 00    	ja     c001907a <Vm::faultHandler(regs*)+0x1f4>
c0018f32:	80 fa 3e             	cmp    dl,0x3e
c0018f35:	0f 85 c2 05 00 00    	jne    c00194fd <Vm::faultHandler(regs*)+0x677>
c0018f3b:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0018f3e:	be 01 00 00 00       	mov    esi,0x1
c0018f43:	eb db                	jmp    c0018f20 <Vm::faultHandler(regs*)+0x9a>
c0018f45:	80 fa 6d             	cmp    dl,0x6d
c0018f48:	0f 84 ec 02 00 00    	je     c001923a <Vm::faultHandler(regs*)+0x3b4>
c0018f4e:	77 17                	ja     c0018f67 <Vm::faultHandler(regs*)+0xe1>
c0018f50:	80 fa 67             	cmp    dl,0x67
c0018f53:	0f 84 48 01 00 00    	je     c00190a1 <Vm::faultHandler(regs*)+0x21b>
c0018f59:	80 fa 6c             	cmp    dl,0x6c
c0018f5c:	0f 84 69 02 00 00    	je     c00191cb <Vm::faultHandler(regs*)+0x345>
c0018f62:	e9 96 05 00 00       	jmp    c00194fd <Vm::faultHandler(regs*)+0x677>
c0018f67:	80 fa 6f             	cmp    dl,0x6f
c0018f6a:	0f 84 f4 03 00 00    	je     c0019364 <Vm::faultHandler(regs*)+0x4de>
c0018f70:	0f 82 59 03 00 00    	jb     c00192cf <Vm::faultHandler(regs*)+0x449>
c0018f76:	80 fa 9c             	cmp    dl,0x9c
c0018f79:	0f 84 2f 01 00 00    	je     c00190ae <Vm::faultHandler(regs*)+0x228>
c0018f7f:	e9 79 05 00 00       	jmp    c00194fd <Vm::faultHandler(regs*)+0x677>
c0018f84:	80 fa ec             	cmp    dl,0xec
c0018f87:	0f 84 14 05 00 00    	je     c00194a1 <Vm::faultHandler(regs*)+0x61b>
c0018f8d:	77 7b                	ja     c001900a <Vm::faultHandler(regs*)+0x184>
c0018f8f:	80 fa e4             	cmp    dl,0xe4
c0018f92:	0f 84 93 04 00 00    	je     c001942b <Vm::faultHandler(regs*)+0x5a5>
c0018f98:	77 53                	ja     c0018fed <Vm::faultHandler(regs*)+0x167>
c0018f9a:	80 fa cd             	cmp    dl,0xcd
c0018f9d:	0f 84 d9 01 00 00    	je     c001917c <Vm::faultHandler(regs*)+0x2f6>
c0018fa3:	80 fa cf             	cmp    dl,0xcf
c0018fa6:	0f 85 51 05 00 00    	jne    c00194fd <Vm::faultHandler(regs*)+0x677>
c0018fac:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0018faf:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c0018fb2:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0018fb6:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c0018fb9:	0f b7 50 04          	movzx  edx,WORD PTR [eax+0x4]
c0018fbd:	81 ca 00 02 02 00    	or     edx,0x20200
c0018fc3:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0018fc6:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c0018fca:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0018fd0:	66 c1 e8 09          	shr    ax,0x9
c0018fd4:	83 e0 01             	and    eax,0x1
c0018fd7:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0018fda:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0018fdd:	83 c0 06             	add    eax,0x6
c0018fe0:	25 ff ff 00 00       	and    eax,0xffff
c0018fe5:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0018fe8:	e9 0c 05 00 00       	jmp    c00194f9 <Vm::faultHandler(regs*)+0x673>
c0018fed:	80 fa e6             	cmp    dl,0xe6
c0018ff0:	0f 84 7f 04 00 00    	je     c0019475 <Vm::faultHandler(regs*)+0x5ef>
c0018ff6:	0f 82 4b 04 00 00    	jb     c0019447 <Vm::faultHandler(regs*)+0x5c1>
c0018ffc:	80 fa e7             	cmp    dl,0xe7
c0018fff:	0f 84 87 04 00 00    	je     c001948c <Vm::faultHandler(regs*)+0x606>
c0019005:	e9 f3 04 00 00       	jmp    c00194fd <Vm::faultHandler(regs*)+0x677>
c001900a:	80 fa ef             	cmp    dl,0xef
c001900d:	0f 84 d1 04 00 00    	je     c00194e4 <Vm::faultHandler(regs*)+0x65e>
c0019013:	77 28                	ja     c001903d <Vm::faultHandler(regs*)+0x1b7>
c0019015:	80 fa ed             	cmp    dl,0xed
c0019018:	0f 84 9f 04 00 00    	je     c00194bd <Vm::faultHandler(regs*)+0x637>
c001901e:	80 fa ee             	cmp    dl,0xee
c0019021:	0f 85 d6 04 00 00    	jne    c00194fd <Vm::faultHandler(regs*)+0x677>
c0019027:	50                   	push   eax
c0019028:	50                   	push   eax
c0019029:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c001902d:	50                   	push   eax
c001902e:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0019032:	50                   	push   eax
c0019033:	e8 5c fa ff ff       	call   c0018a94 <Vm::outbv(unsigned short, unsigned char)>
c0019038:	e9 9f 04 00 00       	jmp    c00194dc <Vm::faultHandler(regs*)+0x656>
c001903d:	80 fa fa             	cmp    dl,0xfa
c0019040:	0f 84 69 01 00 00    	je     c00191af <Vm::faultHandler(regs*)+0x329>
c0019046:	80 fa fb             	cmp    dl,0xfb
c0019049:	0f 84 6e 01 00 00    	je     c00191bd <Vm::faultHandler(regs*)+0x337>
c001904f:	80 fa f3             	cmp    dl,0xf3
c0019052:	0f 85 a5 04 00 00    	jne    c00194fd <Vm::faultHandler(regs*)+0x677>
c0019058:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001905b:	e9 c0 fe ff ff       	jmp    c0018f20 <Vm::faultHandler(regs*)+0x9a>
c0019060:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0019063:	be 02 00 00 00       	mov    esi,0x2
c0019068:	e9 b3 fe ff ff       	jmp    c0018f20 <Vm::faultHandler(regs*)+0x9a>
c001906d:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0019070:	be 03 00 00 00       	mov    esi,0x3
c0019075:	e9 a6 fe ff ff       	jmp    c0018f20 <Vm::faultHandler(regs*)+0x9a>
c001907a:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001907d:	be 04 00 00 00       	mov    esi,0x4
c0019082:	e9 99 fe ff ff       	jmp    c0018f20 <Vm::faultHandler(regs*)+0x9a>
c0019087:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001908a:	be 05 00 00 00       	mov    esi,0x5
c001908f:	e9 8c fe ff ff       	jmp    c0018f20 <Vm::faultHandler(regs*)+0x9a>
c0019094:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0019097:	c6 44 24 02 01       	mov    BYTE PTR [esp+0x2],0x1
c001909c:	e9 7f fe ff ff       	jmp    c0018f20 <Vm::faultHandler(regs*)+0x9a>
c00190a1:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00190a4:	c6 44 24 03 01       	mov    BYTE PTR [esp+0x3],0x1
c00190a9:	e9 72 fe ff ff       	jmp    c0018f20 <Vm::faultHandler(regs*)+0x9a>
c00190ae:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c00190b1:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00190b5:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c00190ba:	74 30                	je     c00190ec <Vm::faultHandler(regs*)+0x266>
c00190bc:	83 e9 04             	sub    ecx,0x4
c00190bf:	81 e2 ff 0d 00 00    	and    edx,0xdff
c00190c5:	81 e1 ff ff 00 00    	and    ecx,0xffff
c00190cb:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c00190ce:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c00190d1:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c00190d7:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c00190db:	0f 84 15 04 00 00    	je     c00194f6 <Vm::faultHandler(regs*)+0x670>
c00190e1:	80 ce 02             	or     dh,0x2
c00190e4:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c00190e7:	e9 0a 04 00 00       	jmp    c00194f6 <Vm::faultHandler(regs*)+0x670>
c00190ec:	83 e9 02             	sub    ecx,0x2
c00190ef:	81 e1 ff ff 00 00    	and    ecx,0xffff
c00190f5:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c00190f8:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c00190fc:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0019102:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c0019106:	74 05                	je     c001910d <Vm::faultHandler(regs*)+0x287>
c0019108:	80 ce 02             	or     dh,0x2
c001910b:	eb 03                	jmp    c0019110 <Vm::faultHandler(regs*)+0x28a>
c001910d:	80 e6 fd             	and    dh,0xfd
c0019110:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c0019114:	e9 dd 03 00 00       	jmp    c00194f6 <Vm::faultHandler(regs*)+0x670>
c0019119:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001911e:	74 2a                	je     c001914a <Vm::faultHandler(regs*)+0x2c4>
c0019120:	8b 10                	mov    edx,DWORD PTR [eax]
c0019122:	81 e2 ff 0d 00 00    	and    edx,0xdff
c0019128:	81 ca 00 02 02 00    	or     edx,0x20200
c001912e:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0019131:	8b 00                	mov    eax,DWORD PTR [eax]
c0019133:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0019139:	c1 e8 09             	shr    eax,0x9
c001913c:	83 e0 01             	and    eax,0x1
c001913f:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0019142:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0019145:	83 c0 04             	add    eax,0x4
c0019148:	eb 25                	jmp    c001916f <Vm::faultHandler(regs*)+0x2e9>
c001914a:	0f b7 10             	movzx  edx,WORD PTR [eax]
c001914d:	81 ca 00 02 02 00    	or     edx,0x20200
c0019153:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0019156:	66 8b 00             	mov    ax,WORD PTR [eax]
c0019159:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001915f:	66 c1 e8 09          	shr    ax,0x9
c0019163:	83 e0 01             	and    eax,0x1
c0019166:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0019169:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001916c:	83 c0 02             	add    eax,0x2
c001916f:	25 ff ff 00 00       	and    eax,0xffff
c0019174:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0019177:	e9 7a 03 00 00       	jmp    c00194f6 <Vm::faultHandler(regs*)+0x670>
c001917c:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0019180:	3c ee                	cmp    al,0xee
c0019182:	75 10                	jne    c0019194 <Vm::faultHandler(regs*)+0x30e>
c0019184:	83 ec 0c             	sub    esp,0xc
c0019187:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c001918a:	e8 a2 f9 ff ff       	call   c0018b31 <Vm::mainloop3(unsigned long)>
c001918f:	e9 4b 03 00 00       	jmp    c00194df <Vm::faultHandler(regs*)+0x659>
c0019194:	83 ec 0c             	sub    esp,0xc
c0019197:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001919b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001919f:	51                   	push   ecx
c00191a0:	50                   	push   eax
c00191a1:	53                   	push   ebx
c00191a2:	e8 e1 fb ff ff       	call   c0018d88 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c00191a7:	83 c4 20             	add    esp,0x20
c00191aa:	e9 4a 03 00 00       	jmp    c00194f9 <Vm::faultHandler(regs*)+0x673>
c00191af:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00191b4:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c00191b8:	e9 39 03 00 00       	jmp    c00194f6 <Vm::faultHandler(regs*)+0x670>
c00191bd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00191c2:	c6 40 5d 01          	mov    BYTE PTR [eax+0x5d],0x1
c00191c6:	e9 2b 03 00 00       	jmp    c00194f6 <Vm::faultHandler(regs*)+0x670>
c00191cb:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c00191ce:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c00191d3:	74 2b                	je     c0019200 <Vm::faultHandler(regs*)+0x37a>
c00191d5:	81 7b 10 ff ff 00 00 	cmp    DWORD PTR [ebx+0x10],0xffff
c00191dc:	76 22                	jbe    c0019200 <Vm::faultHandler(regs*)+0x37a>
c00191de:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c00191e2:	50                   	push   eax
c00191e3:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c00191e7:	50                   	push   eax
c00191e8:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c00191ec:	50                   	push   eax
c00191ed:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c00191f1:	50                   	push   eax
c00191f2:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00191f6:	50                   	push   eax
c00191f7:	6a 6c                	push   0x6c
c00191f9:	6a 6c                	push   0x6c
c00191fb:	e9 b9 01 00 00       	jmp    c00193b9 <Vm::faultHandler(regs*)+0x533>
c0019200:	83 ec 0c             	sub    esp,0xc
c0019203:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0019207:	0f b7 f6             	movzx  esi,si
c001920a:	50                   	push   eax
c001920b:	e8 71 f8 ff ff       	call   c0018a81 <Vm::inbv(unsigned short)>
c0019210:	83 c4 0c             	add    esp,0xc
c0019213:	0f b6 c0             	movzx  eax,al
c0019216:	50                   	push   eax
c0019217:	0f b7 43 10          	movzx  eax,WORD PTR [ebx+0x10]
c001921b:	50                   	push   eax
c001921c:	56                   	push   esi
c001921d:	e8 24 fc ff ff       	call   c0018e46 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c0019222:	83 c4 10             	add    esp,0x10
c0019225:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0019228:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001922c:	74 03                	je     c0019231 <Vm::faultHandler(regs*)+0x3ab>
c001922e:	48                   	dec    eax
c001922f:	eb 01                	jmp    c0019232 <Vm::faultHandler(regs*)+0x3ac>
c0019231:	40                   	inc    eax
c0019232:	0f b7 c0             	movzx  eax,ax
c0019235:	e9 8d 00 00 00       	jmp    c00192c7 <Vm::faultHandler(regs*)+0x441>
c001923a:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c001923d:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0019240:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0019245:	74 29                	je     c0019270 <Vm::faultHandler(regs*)+0x3ea>
c0019247:	3d ff ff 00 00       	cmp    eax,0xffff
c001924c:	76 22                	jbe    c0019270 <Vm::faultHandler(regs*)+0x3ea>
c001924e:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0019252:	50                   	push   eax
c0019253:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0019257:	50                   	push   eax
c0019258:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001925c:	50                   	push   eax
c001925d:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0019261:	50                   	push   eax
c0019262:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0019266:	50                   	push   eax
c0019267:	6a 6d                	push   0x6d
c0019269:	6a 6d                	push   0x6d
c001926b:	e9 49 01 00 00       	jmp    c00193b9 <Vm::faultHandler(regs*)+0x533>
c0019270:	0f b7 c8             	movzx  ecx,ax
c0019273:	0f b7 f6             	movzx  esi,si
c0019276:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0019279:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001927e:	74 20                	je     c00192a0 <Vm::faultHandler(regs*)+0x41a>
c0019280:	ed                   	in     eax,dx
c0019281:	55                   	push   ebp
c0019282:	50                   	push   eax
c0019283:	51                   	push   ecx
c0019284:	56                   	push   esi
c0019285:	e8 e7 fb ff ff       	call   c0018e71 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c001928a:	83 c4 10             	add    esp,0x10
c001928d:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0019290:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0019294:	74 05                	je     c001929b <Vm::faultHandler(regs*)+0x415>
c0019296:	83 e8 04             	sub    eax,0x4
c0019299:	eb 27                	jmp    c00192c2 <Vm::faultHandler(regs*)+0x43c>
c001929b:	83 c0 04             	add    eax,0x4
c001929e:	eb 22                	jmp    c00192c2 <Vm::faultHandler(regs*)+0x43c>
c00192a0:	66 ed                	in     ax,dx
c00192a2:	0f b7 c0             	movzx  eax,ax
c00192a5:	57                   	push   edi
c00192a6:	50                   	push   eax
c00192a7:	51                   	push   ecx
c00192a8:	56                   	push   esi
c00192a9:	e8 ad fb ff ff       	call   c0018e5b <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c00192ae:	83 c4 10             	add    esp,0x10
c00192b1:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00192b4:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c00192b8:	74 05                	je     c00192bf <Vm::faultHandler(regs*)+0x439>
c00192ba:	83 e8 02             	sub    eax,0x2
c00192bd:	eb 03                	jmp    c00192c2 <Vm::faultHandler(regs*)+0x43c>
c00192bf:	83 c0 02             	add    eax,0x2
c00192c2:	25 ff ff 00 00       	and    eax,0xffff
c00192c7:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c00192ca:	e9 27 02 00 00       	jmp    c00194f6 <Vm::faultHandler(regs*)+0x670>
c00192cf:	8d 46 ff             	lea    eax,[esi-0x1]
c00192d2:	3c 05                	cmp    al,0x5
c00192d4:	77 24                	ja     c00192fa <Vm::faultHandler(regs*)+0x474>
c00192d6:	0f b6 c0             	movzx  eax,al
c00192d9:	ff 24 85 9c 4a 02 c0 	jmp    DWORD PTR [eax*4-0x3ffdb564]
c00192e0:	0f b7 fd             	movzx  edi,bp
c00192e3:	eb 15                	jmp    c00192fa <Vm::faultHandler(regs*)+0x474>
c00192e5:	0f b7 7b 0c          	movzx  edi,WORD PTR [ebx+0xc]
c00192e9:	eb 0f                	jmp    c00192fa <Vm::faultHandler(regs*)+0x474>
c00192eb:	0f b7 7b 08          	movzx  edi,WORD PTR [ebx+0x8]
c00192ef:	eb 09                	jmp    c00192fa <Vm::faultHandler(regs*)+0x474>
c00192f1:	0f b7 7b 04          	movzx  edi,WORD PTR [ebx+0x4]
c00192f5:	eb 03                	jmp    c00192fa <Vm::faultHandler(regs*)+0x474>
c00192f7:	0f b7 3b             	movzx  edi,WORD PTR [ebx]
c00192fa:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00192fd:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0019302:	74 29                	je     c001932d <Vm::faultHandler(regs*)+0x4a7>
c0019304:	3d ff ff 00 00       	cmp    eax,0xffff
c0019309:	76 22                	jbe    c001932d <Vm::faultHandler(regs*)+0x4a7>
c001930b:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001930f:	50                   	push   eax
c0019310:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0019314:	50                   	push   eax
c0019315:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0019319:	50                   	push   eax
c001931a:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001931e:	50                   	push   eax
c001931f:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0019323:	50                   	push   eax
c0019324:	6a 6e                	push   0x6e
c0019326:	6a 6e                	push   0x6e
c0019328:	e9 8c 00 00 00       	jmp    c00193b9 <Vm::faultHandler(regs*)+0x533>
c001932d:	0f b7 c0             	movzx  eax,ax
c0019330:	52                   	push   edx
c0019331:	52                   	push   edx
c0019332:	50                   	push   eax
c0019333:	57                   	push   edi
c0019334:	e8 d9 fa ff ff       	call   c0018e12 <Vm::readByteFromReal(unsigned short, unsigned short)>
c0019339:	59                   	pop    ecx
c001933a:	0f b6 c0             	movzx  eax,al
c001933d:	5e                   	pop    esi
c001933e:	50                   	push   eax
c001933f:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0019343:	50                   	push   eax
c0019344:	e8 4b f7 ff ff       	call   c0018a94 <Vm::outbv(unsigned short, unsigned char)>
c0019349:	83 c4 10             	add    esp,0x10
c001934c:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001934f:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0019353:	74 03                	je     c0019358 <Vm::faultHandler(regs*)+0x4d2>
c0019355:	48                   	dec    eax
c0019356:	eb 01                	jmp    c0019359 <Vm::faultHandler(regs*)+0x4d3>
c0019358:	40                   	inc    eax
c0019359:	0f b7 c0             	movzx  eax,ax
c001935c:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c001935f:	e9 92 01 00 00       	jmp    c00194f6 <Vm::faultHandler(regs*)+0x670>
c0019364:	8d 46 ff             	lea    eax,[esi-0x1]
c0019367:	3c 05                	cmp    al,0x5
c0019369:	77 1f                	ja     c001938a <Vm::faultHandler(regs*)+0x504>
c001936b:	0f b6 c0             	movzx  eax,al
c001936e:	ff 24 85 b4 4a 02 c0 	jmp    DWORD PTR [eax*4-0x3ffdb54c]
c0019375:	89 ef                	mov    edi,ebp
c0019377:	eb 11                	jmp    c001938a <Vm::faultHandler(regs*)+0x504>
c0019379:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c001937c:	eb 0c                	jmp    c001938a <Vm::faultHandler(regs*)+0x504>
c001937e:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c0019381:	eb 07                	jmp    c001938a <Vm::faultHandler(regs*)+0x504>
c0019383:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0019386:	eb 02                	jmp    c001938a <Vm::faultHandler(regs*)+0x504>
c0019388:	8b 3b                	mov    edi,DWORD PTR [ebx]
c001938a:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c001938d:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0019392:	74 37                	je     c00193cb <Vm::faultHandler(regs*)+0x545>
c0019394:	81 fe ff ff 00 00    	cmp    esi,0xffff
c001939a:	76 2f                	jbe    c00193cb <Vm::faultHandler(regs*)+0x545>
c001939c:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c00193a0:	50                   	push   eax
c00193a1:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c00193a5:	50                   	push   eax
c00193a6:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c00193aa:	50                   	push   eax
c00193ab:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c00193af:	50                   	push   eax
c00193b0:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00193b4:	50                   	push   eax
c00193b5:	6a 6f                	push   0x6f
c00193b7:	6a 6f                	push   0x6f
c00193b9:	68 42 4a 02 c0       	push   0xc0024a42
c00193be:	e8 fc 36 ff ff       	call   c000cabf <Dbg::kprintf(char const*, ...)>
c00193c3:	83 c4 20             	add    esp,0x20
c00193c6:	e9 86 01 00 00       	jmp    c0019551 <Vm::faultHandler(regs*)+0x6cb>
c00193cb:	0f b7 d7             	movzx  edx,di
c00193ce:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c00193d1:	0f b7 c6             	movzx  eax,si
c00193d4:	81 e1 00 04 00 00    	and    ecx,0x400
c00193da:	8b 7b 24             	mov    edi,DWORD PTR [ebx+0x24]
c00193dd:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c00193e2:	74 1d                	je     c0019401 <Vm::faultHandler(regs*)+0x57b>
c00193e4:	55                   	push   ebp
c00193e5:	55                   	push   ebp
c00193e6:	50                   	push   eax
c00193e7:	52                   	push   edx
c00193e8:	e8 48 fa ff ff       	call   c0018e35 <Vm::readDwordFromReal(unsigned short, unsigned short)>
c00193ed:	83 c4 10             	add    esp,0x10
c00193f0:	89 fa                	mov    edx,edi
c00193f2:	ef                   	out    dx,eax
c00193f3:	85 c9                	test   ecx,ecx
c00193f5:	74 05                	je     c00193fc <Vm::faultHandler(regs*)+0x576>
c00193f7:	83 ee 04             	sub    esi,0x4
c00193fa:	eb 21                	jmp    c001941d <Vm::faultHandler(regs*)+0x597>
c00193fc:	83 c6 04             	add    esi,0x4
c00193ff:	eb 1c                	jmp    c001941d <Vm::faultHandler(regs*)+0x597>
c0019401:	55                   	push   ebp
c0019402:	55                   	push   ebp
c0019403:	50                   	push   eax
c0019404:	52                   	push   edx
c0019405:	e8 19 fa ff ff       	call   c0018e23 <Vm::readWordFromReal(unsigned short, unsigned short)>
c001940a:	83 c4 10             	add    esp,0x10
c001940d:	89 fa                	mov    edx,edi
c001940f:	66 ef                	out    dx,ax
c0019411:	85 c9                	test   ecx,ecx
c0019413:	74 05                	je     c001941a <Vm::faultHandler(regs*)+0x594>
c0019415:	83 ee 02             	sub    esi,0x2
c0019418:	eb 03                	jmp    c001941d <Vm::faultHandler(regs*)+0x597>
c001941a:	83 c6 02             	add    esi,0x2
c001941d:	81 e6 ff ff 00 00    	and    esi,0xffff
c0019423:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0019426:	e9 cb 00 00 00       	jmp    c00194f6 <Vm::faultHandler(regs*)+0x670>
c001942b:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c0019432:	83 ec 0c             	sub    esp,0xc
c0019435:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0019439:	50                   	push   eax
c001943a:	e8 42 f6 ff ff       	call   c0018a81 <Vm::inbv(unsigned short)>
c001943f:	0f b6 c0             	movzx  eax,al
c0019442:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c0019445:	eb 3f                	jmp    c0019486 <Vm::faultHandler(regs*)+0x600>
c0019447:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001944c:	74 07                	je     c0019455 <Vm::faultHandler(regs*)+0x5cf>
c001944e:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0019452:	ed                   	in     eax,dx
c0019453:	eb 14                	jmp    c0019469 <Vm::faultHandler(regs*)+0x5e3>
c0019455:	8b 73 2c             	mov    esi,DWORD PTR [ebx+0x2c]
c0019458:	66 31 f6             	xor    si,si
c001945b:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c001945e:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0019462:	66 ed                	in     ax,dx
c0019464:	0f b7 c0             	movzx  eax,ax
c0019467:	09 f0                	or     eax,esi
c0019469:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001946c:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0019470:	e9 84 00 00 00       	jmp    c00194f9 <Vm::faultHandler(regs*)+0x673>
c0019475:	52                   	push   edx
c0019476:	52                   	push   edx
c0019477:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c001947b:	50                   	push   eax
c001947c:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0019480:	50                   	push   eax
c0019481:	e8 0e f6 ff ff       	call   c0018a94 <Vm::outbv(unsigned short, unsigned char)>
c0019486:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001948a:	eb 53                	jmp    c00194df <Vm::faultHandler(regs*)+0x659>
c001948c:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001948f:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0019493:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0019498:	74 03                	je     c001949d <Vm::faultHandler(regs*)+0x617>
c001949a:	ef                   	out    dx,eax
c001949b:	eb cf                	jmp    c001946c <Vm::faultHandler(regs*)+0x5e6>
c001949d:	66 ef                	out    dx,ax
c001949f:	eb cb                	jmp    c001946c <Vm::faultHandler(regs*)+0x5e6>
c00194a1:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c00194a8:	83 ec 0c             	sub    esp,0xc
c00194ab:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c00194af:	50                   	push   eax
c00194b0:	e8 cc f5 ff ff       	call   c0018a81 <Vm::inbv(unsigned short)>
c00194b5:	0f b6 c0             	movzx  eax,al
c00194b8:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c00194bb:	eb 1f                	jmp    c00194dc <Vm::faultHandler(regs*)+0x656>
c00194bd:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c00194c0:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c00194c5:	74 03                	je     c00194ca <Vm::faultHandler(regs*)+0x644>
c00194c7:	ed                   	in     eax,dx
c00194c8:	eb 0d                	jmp    c00194d7 <Vm::faultHandler(regs*)+0x651>
c00194ca:	66 ed                	in     ax,dx
c00194cc:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00194cf:	0f b7 c0             	movzx  eax,ax
c00194d2:	66 31 d2             	xor    dx,dx
c00194d5:	09 d0                	or     eax,edx
c00194d7:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00194da:	eb 1a                	jmp    c00194f6 <Vm::faultHandler(regs*)+0x670>
c00194dc:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00194df:	83 c4 10             	add    esp,0x10
c00194e2:	eb 15                	jmp    c00194f9 <Vm::faultHandler(regs*)+0x673>
c00194e4:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00194e7:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c00194ea:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c00194ef:	74 03                	je     c00194f4 <Vm::faultHandler(regs*)+0x66e>
c00194f1:	ef                   	out    dx,eax
c00194f2:	eb 02                	jmp    c00194f6 <Vm::faultHandler(regs*)+0x670>
c00194f4:	66 ef                	out    dx,ax
c00194f6:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00194f9:	b0 01                	mov    al,0x1
c00194fb:	eb 56                	jmp    c0019553 <Vm::faultHandler(regs*)+0x6cd>
c00194fd:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0019501:	50                   	push   eax
c0019502:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0019506:	50                   	push   eax
c0019507:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001950b:	50                   	push   eax
c001950c:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0019510:	50                   	push   eax
c0019511:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0019515:	50                   	push   eax
c0019516:	52                   	push   edx
c0019517:	52                   	push   edx
c0019518:	68 6f 4a 02 c0       	push   0xc0024a6f
c001951d:	e8 9d 35 ff ff       	call   c000cabf <Dbg::kprintf(char const*, ...)>
c0019522:	83 c4 20             	add    esp,0x20
c0019525:	83 ec 0c             	sub    esp,0xc
c0019528:	6a 60                	push   0x60
c001952a:	e8 52 f5 ff ff       	call   c0018a81 <Vm::inbv(unsigned short)>
c001952f:	83 c4 10             	add    esp,0x10
c0019532:	3c 1c                	cmp    al,0x1c
c0019534:	74 04                	je     c001953a <Vm::faultHandler(regs*)+0x6b4>
c0019536:	3c 5a                	cmp    al,0x5a
c0019538:	75 eb                	jne    c0019525 <Vm::faultHandler(regs*)+0x69f>
c001953a:	3c 5a                	cmp    al,0x5a
c001953c:	74 04                	je     c0019542 <Vm::faultHandler(regs*)+0x6bc>
c001953e:	3c 1c                	cmp    al,0x1c
c0019540:	75 0f                	jne    c0019551 <Vm::faultHandler(regs*)+0x6cb>
c0019542:	83 ec 0c             	sub    esp,0xc
c0019545:	6a 60                	push   0x60
c0019547:	e8 35 f5 ff ff       	call   c0018a81 <Vm::inbv(unsigned short)>
c001954c:	83 c4 10             	add    esp,0x10
c001954f:	eb e9                	jmp    c001953a <Vm::faultHandler(regs*)+0x6b4>
c0019551:	31 c0                	xor    eax,eax
c0019553:	83 c4 1c             	add    esp,0x1c
c0019556:	5b                   	pop    ebx
c0019557:	5e                   	pop    esi
c0019558:	5f                   	pop    edi
c0019559:	5d                   	pop    ebp
c001955a:	c3                   	ret    
c001955b:	90                   	nop

c001955c <Vm::fpuInternalTo32(unsigned long long)>:
c001955c:	57                   	push   edi
c001955d:	56                   	push   esi
c001955e:	53                   	push   ebx
c001955f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0019563:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019567:	89 d6                	mov    esi,edx
c0019569:	89 d7                	mov    edi,edx
c001956b:	89 c1                	mov    ecx,eax
c001956d:	c1 ef 14             	shr    edi,0x14
c0019570:	89 d3                	mov    ebx,edx
c0019572:	81 e7 ff 07 00 00    	and    edi,0x7ff
c0019578:	31 d2                	xor    edx,edx
c001957a:	89 f8                	mov    eax,edi
c001957c:	81 e6 00 00 00 80    	and    esi,0x80000000
c0019582:	bf ff 00 00 00       	mov    edi,0xff
c0019587:	05 80 fc ff ff       	add    eax,0xfffffc80
c001958c:	83 d2 ff             	adc    edx,0xffffffff
c001958f:	39 c7                	cmp    edi,eax
c0019591:	bf 00 00 00 00       	mov    edi,0x0
c0019596:	19 d7                	sbb    edi,edx
c0019598:	72 16                	jb     c00195b0 <Vm::fpuInternalTo32(unsigned long long)+0x54>
c001959a:	0f ac d9 1d          	shrd   ecx,ebx,0x1d
c001959e:	c1 e0 17             	shl    eax,0x17
c00195a1:	81 e1 ff ff 7f 00    	and    ecx,0x7fffff
c00195a7:	09 f1                	or     ecx,esi
c00195a9:	09 c1                	or     ecx,eax
c00195ab:	89 cf                	mov    edi,ecx
c00195ad:	eb 05                	jmp    c00195b4 <Vm::fpuInternalTo32(unsigned long long)+0x58>
c00195af:	90                   	nop
c00195b0:	31 ff                	xor    edi,edi
c00195b2:	66 90                	xchg   ax,ax
c00195b4:	89 f8                	mov    eax,edi
c00195b6:	5b                   	pop    ebx
c00195b7:	5e                   	pop    esi
c00195b8:	5f                   	pop    edi
c00195b9:	c3                   	ret    

c00195ba <Vm::fpuInternalTo64(unsigned long long)>:
c00195ba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00195be:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00195c2:	c3                   	ret    

c00195c3 <Vm::fpu32ToInternal(unsigned int)>:
c00195c3:	57                   	push   edi
c00195c4:	31 ff                	xor    edi,edi
c00195c6:	56                   	push   esi
c00195c7:	53                   	push   ebx
c00195c8:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00195cc:	89 cb                	mov    ebx,ecx
c00195ce:	89 ce                	mov    esi,ecx
c00195d0:	81 e3 00 00 00 80    	and    ebx,0x80000000
c00195d6:	81 e6 ff ff 7f 00    	and    esi,0x7fffff
c00195dc:	c1 e9 17             	shr    ecx,0x17
c00195df:	89 f0                	mov    eax,esi
c00195e1:	0f b6 d1             	movzx  edx,cl
c00195e4:	81 c2 80 03 00 00    	add    edx,0x380
c00195ea:	89 d1                	mov    ecx,edx
c00195ec:	89 fa                	mov    edx,edi
c00195ee:	c1 e1 14             	shl    ecx,0x14
c00195f1:	0f a4 c2 1d          	shld   edx,eax,0x1d
c00195f5:	c1 e0 1d             	shl    eax,0x1d
c00195f8:	89 d7                	mov    edi,edx
c00195fa:	89 c6                	mov    esi,eax
c00195fc:	89 ca                	mov    edx,ecx
c00195fe:	89 f0                	mov    eax,esi
c0019600:	09 fa                	or     edx,edi
c0019602:	09 da                	or     edx,ebx
c0019604:	5b                   	pop    ebx
c0019605:	5e                   	pop    esi
c0019606:	5f                   	pop    edi
c0019607:	c3                   	ret    

c0019608 <Vm::fpu64ToInternal(unsigned long long)>:
c0019608:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001960c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0019610:	c3                   	ret    

c0019611 <Vm::fpuFloatToLong(unsigned long long)>:
c0019611:	57                   	push   edi
c0019612:	31 c0                	xor    eax,eax
c0019614:	56                   	push   esi
c0019615:	31 d2                	xor    edx,edx
c0019617:	53                   	push   ebx
c0019618:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001961c:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0019620:	89 d9                	mov    ecx,ebx
c0019622:	c1 e9 14             	shr    ecx,0x14
c0019625:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c001962b:	89 cf                	mov    edi,ecx
c001962d:	81 ef ff 03 00 00    	sub    edi,0x3ff
c0019633:	78 37                	js     c001966c <Vm::fpuFloatToLong(unsigned long long)+0x5b>
c0019635:	89 d9                	mov    ecx,ebx
c0019637:	89 f0                	mov    eax,esi
c0019639:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c001963f:	81 c9 00 00 10 00    	or     ecx,0x100000
c0019645:	89 ca                	mov    edx,ecx
c0019647:	b9 34 00 00 00       	mov    ecx,0x34
c001964c:	29 f9                	sub    ecx,edi
c001964e:	0f ad d0             	shrd   eax,edx,cl
c0019651:	d3 fa                	sar    edx,cl
c0019653:	f6 c1 20             	test   cl,0x20
c0019656:	74 08                	je     c0019660 <Vm::fpuFloatToLong(unsigned long long)+0x4f>
c0019658:	89 d0                	mov    eax,edx
c001965a:	c1 fa 1f             	sar    edx,0x1f
c001965d:	8d 76 00             	lea    esi,[esi+0x0]
c0019660:	85 db                	test   ebx,ebx
c0019662:	79 08                	jns    c001966c <Vm::fpuFloatToLong(unsigned long long)+0x5b>
c0019664:	f7 d8                	neg    eax
c0019666:	83 d2 00             	adc    edx,0x0
c0019669:	f7 da                	neg    edx
c001966b:	90                   	nop
c001966c:	5b                   	pop    ebx
c001966d:	5e                   	pop    esi
c001966e:	5f                   	pop    edi
c001966f:	c3                   	ret    

c0019670 <Vm::fpuULongToFloat(unsigned long long)>:
c0019670:	57                   	push   edi
c0019671:	31 c9                	xor    ecx,ecx
c0019673:	56                   	push   esi
c0019674:	53                   	push   ebx
c0019675:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0019679:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001967d:	8d 76 00             	lea    esi,[esi+0x0]
c0019680:	0f ba e7 14          	bt     edi,0x14
c0019684:	72 0a                	jb     c0019690 <Vm::fpuULongToFloat(unsigned long long)+0x20>
c0019686:	01 f6                	add    esi,esi
c0019688:	11 ff                	adc    edi,edi
c001968a:	41                   	inc    ecx
c001968b:	eb f3                	jmp    c0019680 <Vm::fpuULongToFloat(unsigned long long)+0x10>
c001968d:	8d 76 00             	lea    esi,[esi+0x0]
c0019690:	89 fa                	mov    edx,edi
c0019692:	89 f0                	mov    eax,esi
c0019694:	bb 33 04 00 00       	mov    ebx,0x433
c0019699:	81 e2 ff ff 0f 00    	and    edx,0xfffff
c001969f:	29 cb                	sub    ebx,ecx
c00196a1:	89 d9                	mov    ecx,ebx
c00196a3:	5b                   	pop    ebx
c00196a4:	c1 e1 14             	shl    ecx,0x14
c00196a7:	5e                   	pop    esi
c00196a8:	09 ca                	or     edx,ecx
c00196aa:	5f                   	pop    edi
c00196ab:	c3                   	ret    

c00196ac <Vm::fpuLongToFloat(long long)>:
c00196ac:	56                   	push   esi
c00196ad:	31 c0                	xor    eax,eax
c00196af:	53                   	push   ebx
c00196b0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00196b4:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00196b8:	39 c8                	cmp    eax,ecx
c00196ba:	19 d8                	sbb    eax,ebx
c00196bc:	7d 06                	jge    c00196c4 <Vm::fpuLongToFloat(long long)+0x18>
c00196be:	31 f6                	xor    esi,esi
c00196c0:	eb 0e                	jmp    c00196d0 <Vm::fpuLongToFloat(long long)+0x24>
c00196c2:	66 90                	xchg   ax,ax
c00196c4:	f7 d9                	neg    ecx
c00196c6:	be 01 00 00 00       	mov    esi,0x1
c00196cb:	83 d3 00             	adc    ebx,0x0
c00196ce:	f7 db                	neg    ebx
c00196d0:	31 c0                	xor    eax,eax
c00196d2:	66 90                	xchg   ax,ax
c00196d4:	0f ba e3 14          	bt     ebx,0x14
c00196d8:	72 0a                	jb     c00196e4 <Vm::fpuLongToFloat(long long)+0x38>
c00196da:	01 c9                	add    ecx,ecx
c00196dc:	11 db                	adc    ebx,ebx
c00196de:	40                   	inc    eax
c00196df:	eb f3                	jmp    c00196d4 <Vm::fpuLongToFloat(long long)+0x28>
c00196e1:	8d 76 00             	lea    esi,[esi+0x0]
c00196e4:	ba 33 04 00 00       	mov    edx,0x433
c00196e9:	29 c2                	sub    edx,eax
c00196eb:	89 c8                	mov    eax,ecx
c00196ed:	c1 e2 14             	shl    edx,0x14
c00196f0:	89 d9                	mov    ecx,ebx
c00196f2:	89 f3                	mov    ebx,esi
c00196f4:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c00196fa:	09 ca                	or     edx,ecx
c00196fc:	84 db                	test   bl,bl
c00196fe:	74 08                	je     c0019708 <Vm::fpuLongToFloat(long long)+0x5c>
c0019700:	81 ca 00 00 00 80    	or     edx,0x80000000
c0019706:	66 90                	xchg   ax,ax
c0019708:	5b                   	pop    ebx
c0019709:	5e                   	pop    esi
c001970a:	c3                   	ret    

c001970b <Vm::fpuGet0()>:
c001970b:	31 c0                	xor    eax,eax
c001970d:	31 d2                	xor    edx,edx
c001970f:	c3                   	ret    

c0019710 <Vm::fpuGet1()>:
c0019710:	b8 01 00 00 00       	mov    eax,0x1
c0019715:	31 d2                	xor    edx,edx
c0019717:	c3                   	ret    

c0019718 <Vm::fpuGetPi()>:
c0019718:	b8 03 00 00 00       	mov    eax,0x3
c001971d:	31 d2                	xor    edx,edx
c001971f:	c3                   	ret    

c0019720 <Vm::fpuGetLog2E()>:
c0019720:	83 ec 18             	sub    esp,0x18
c0019723:	68 cc 4a 02 c0       	push   0xc0024acc
c0019728:	e8 54 ac ff ff       	call   c0014381 <Krnl::panic(char const*)>
c001972d:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0019732:	31 d2                	xor    edx,edx
c0019734:	83 c4 1c             	add    esp,0x1c
c0019737:	c3                   	ret    

c0019738 <Vm::fpuGetLogE2()>:
c0019738:	83 ec 18             	sub    esp,0x18
c001973b:	68 d8 4a 02 c0       	push   0xc0024ad8
c0019740:	e8 3c ac ff ff       	call   c0014381 <Krnl::panic(char const*)>
c0019745:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001974a:	31 d2                	xor    edx,edx
c001974c:	83 c4 1c             	add    esp,0x1c
c001974f:	c3                   	ret    

c0019750 <Vm::fpuGetLog210()>:
c0019750:	83 ec 18             	sub    esp,0x18
c0019753:	68 e4 4a 02 c0       	push   0xc0024ae4
c0019758:	e8 24 ac ff ff       	call   c0014381 <Krnl::panic(char const*)>
c001975d:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0019762:	31 d2                	xor    edx,edx
c0019764:	83 c4 1c             	add    esp,0x1c
c0019767:	c3                   	ret    

c0019768 <Vm::fpuGetLog102()>:
c0019768:	83 ec 18             	sub    esp,0x18
c001976b:	68 f1 4a 02 c0       	push   0xc0024af1
c0019770:	e8 0c ac ff ff       	call   c0014381 <Krnl::panic(char const*)>
c0019775:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001977a:	31 d2                	xor    edx,edx
c001977c:	83 c4 1c             	add    esp,0x1c
c001977f:	c3                   	ret    

c0019780 <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>:
c0019780:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019784:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c0019788:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001978c:	1b 44 24 10          	sbb    eax,DWORD PTR [esp+0x10]
c0019790:	0f 92 c0             	setb   al
c0019793:	c3                   	ret    

c0019794 <Vm::fpuAreEqual(unsigned long long, unsigned long long)>:
c0019794:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0019798:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001979c:	33 54 24 04          	xor    edx,DWORD PTR [esp+0x4]
c00197a0:	33 44 24 08          	xor    eax,DWORD PTR [esp+0x8]
c00197a4:	09 c2                	or     edx,eax
c00197a6:	0f 94 c0             	sete   al
c00197a9:	c3                   	ret    

c00197aa <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>:
c00197aa:	57                   	push   edi
c00197ab:	56                   	push   esi
c00197ac:	53                   	push   ebx
c00197ad:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00197b1:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00197b5:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00197b9:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00197bd:	57                   	push   edi
c00197be:	56                   	push   esi
c00197bf:	53                   	push   ebx
c00197c0:	51                   	push   ecx
c00197c1:	e8 ce ff ff ff       	call   c0019794 <Vm::fpuAreEqual(unsigned long long, unsigned long long)>
c00197c6:	83 c4 10             	add    esp,0x10
c00197c9:	88 c2                	mov    dl,al
c00197cb:	31 c0                	xor    eax,eax
c00197cd:	84 d2                	test   dl,dl
c00197cf:	75 0f                	jne    c00197e0 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)+0x36>
c00197d1:	57                   	push   edi
c00197d2:	56                   	push   esi
c00197d3:	53                   	push   ebx
c00197d4:	51                   	push   ecx
c00197d5:	e8 a6 ff ff ff       	call   c0019780 <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>
c00197da:	83 c4 10             	add    esp,0x10
c00197dd:	8d 76 00             	lea    esi,[esi+0x0]
c00197e0:	83 e0 01             	and    eax,0x1
c00197e3:	5b                   	pop    ebx
c00197e4:	88 c1                	mov    cl,al
c00197e6:	83 e2 01             	and    edx,0x1
c00197e9:	a0 c1 79 02 c0       	mov    al,ds:0xc00279c1
c00197ee:	c1 e2 06             	shl    edx,0x6
c00197f1:	83 e0 ba             	and    eax,0xffffffba
c00197f4:	5e                   	pop    esi
c00197f5:	09 c8                	or     eax,ecx
c00197f7:	5f                   	pop    edi
c00197f8:	09 d0                	or     eax,edx
c00197fa:	a2 c1 79 02 c0       	mov    ds:0xc00279c1,al
c00197ff:	c3                   	ret    

c0019800 <Vm::fpuAdd(unsigned long long, unsigned long long)>:
c0019800:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019804:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0019808:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c001980c:	13 54 24 08          	adc    edx,DWORD PTR [esp+0x8]
c0019810:	c3                   	ret    

c0019811 <Vm::fpuAbs(unsigned long long)>:
c0019811:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019815:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0019819:	c3                   	ret    

c001981a <Vm::fpuChs(unsigned long long)>:
c001981a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001981e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0019822:	f7 d8                	neg    eax
c0019824:	83 d2 00             	adc    edx,0x0
c0019827:	f7 da                	neg    edx
c0019829:	c3                   	ret    

c001982a <Vm::fpuSub(unsigned long long, unsigned long long)>:
c001982a:	f7 5c 24 0c          	neg    DWORD PTR [esp+0xc]
c001982e:	83 54 24 10 00       	adc    DWORD PTR [esp+0x10],0x0
c0019833:	f7 5c 24 10          	neg    DWORD PTR [esp+0x10]
c0019837:	eb c7                	jmp    c0019800 <Vm::fpuAdd(unsigned long long, unsigned long long)>

c0019839 <Vm::fpuMultiply(unsigned long long, unsigned long long)>:
c0019839:	53                   	push   ebx
c001983a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001983e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0019842:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0019846:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001984a:	0f af ca             	imul   ecx,edx
c001984d:	0f af d8             	imul   ebx,eax
c0019850:	f7 e2                	mul    edx
c0019852:	01 d9                	add    ecx,ebx
c0019854:	5b                   	pop    ebx
c0019855:	01 ca                	add    edx,ecx
c0019857:	c3                   	ret    

c0019858 <Vm::fpuDivide(unsigned long long, unsigned long long)>:
c0019858:	83 ec 0c             	sub    esp,0xc
c001985b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001985f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019863:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019867:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001986b:	e8 14 77 00 00       	call   c0020f84 <__udivdi3>
c0019870:	83 c4 1c             	add    esp,0x1c
c0019873:	c3                   	ret    

c0019874 <Vm::fpuSquare(unsigned long long)>:
c0019874:	50                   	push   eax
c0019875:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019879:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001987d:	52                   	push   edx
c001987e:	50                   	push   eax
c001987f:	52                   	push   edx
c0019880:	50                   	push   eax
c0019881:	e8 b3 ff ff ff       	call   c0019839 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c0019886:	83 c4 14             	add    esp,0x14
c0019889:	c3                   	ret    

c001988a <Vm::fpuGetReg(int)>:
c001988a:	83 ec 0c             	sub    esp,0xc
c001988d:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c0019892:	76 10                	jbe    c00198a4 <Vm::fpuGetReg(int)+0x1a>
c0019894:	83 ec 0c             	sub    esp,0xc
c0019897:	68 fe 4a 02 c0       	push   0xc0024afe
c001989c:	e8 e0 aa ff ff       	call   c0014381 <Krnl::panic(char const*)>
c00198a1:	83 c4 10             	add    esp,0x10
c00198a4:	a0 c1 79 02 c0       	mov    al,ds:0xc00279c1
c00198a9:	b9 08 00 00 00       	mov    ecx,0x8
c00198ae:	c0 e8 03             	shr    al,0x3
c00198b1:	83 e0 07             	and    eax,0x7
c00198b4:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c00198b8:	99                   	cdq    
c00198b9:	f7 f9                	idiv   ecx
c00198bb:	8b 04 d5 c4 79 02 c0 	mov    eax,DWORD PTR [edx*8-0x3ffd863c]
c00198c2:	8b 14 d5 c8 79 02 c0 	mov    edx,DWORD PTR [edx*8-0x3ffd8638]
c00198c9:	83 c4 0c             	add    esp,0xc
c00198cc:	c3                   	ret    

c00198cd <Vm::fpuSetReg(int, unsigned long long)>:
c00198cd:	57                   	push   edi
c00198ce:	56                   	push   esi
c00198cf:	52                   	push   edx
c00198d0:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00198d4:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00198d8:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c00198dd:	76 11                	jbe    c00198f0 <Vm::fpuSetReg(int, unsigned long long)+0x23>
c00198df:	83 ec 0c             	sub    esp,0xc
c00198e2:	68 11 4b 02 c0       	push   0xc0024b11
c00198e7:	e8 95 aa ff ff       	call   c0014381 <Krnl::panic(char const*)>
c00198ec:	83 c4 10             	add    esp,0x10
c00198ef:	90                   	nop
c00198f0:	a0 c1 79 02 c0       	mov    al,ds:0xc00279c1
c00198f5:	b9 08 00 00 00       	mov    ecx,0x8
c00198fa:	c0 e8 03             	shr    al,0x3
c00198fd:	83 e0 07             	and    eax,0x7
c0019900:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0019904:	99                   	cdq    
c0019905:	f7 f9                	idiv   ecx
c0019907:	89 34 d5 c4 79 02 c0 	mov    DWORD PTR [edx*8-0x3ffd863c],esi
c001990e:	89 3c d5 c8 79 02 c0 	mov    DWORD PTR [edx*8-0x3ffd8638],edi
c0019915:	58                   	pop    eax
c0019916:	5e                   	pop    esi
c0019917:	5f                   	pop    edi
c0019918:	c3                   	ret    

c0019919 <Vm::fpuPush(unsigned long long)>:
c0019919:	a0 c1 79 02 c0       	mov    al,ds:0xc00279c1
c001991e:	c0 e8 03             	shr    al,0x3
c0019921:	83 e0 07             	and    eax,0x7
c0019924:	83 c0 07             	add    eax,0x7
c0019927:	88 c2                	mov    dl,al
c0019929:	83 e0 07             	and    eax,0x7
c001992c:	83 e2 07             	and    edx,0x7
c001992f:	8d 0c d5 00 00 00 00 	lea    ecx,[edx*8+0x0]
c0019936:	8a 15 c1 79 02 c0    	mov    dl,BYTE PTR ds:0xc00279c1
c001993c:	83 e2 c7             	and    edx,0xffffffc7
c001993f:	09 ca                	or     edx,ecx
c0019941:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0019945:	88 15 c1 79 02 c0    	mov    BYTE PTR ds:0xc00279c1,dl
c001994b:	89 0c c5 c8 79 02 c0 	mov    DWORD PTR [eax*8-0x3ffd8638],ecx
c0019952:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0019956:	89 14 c5 c4 79 02 c0 	mov    DWORD PTR [eax*8-0x3ffd863c],edx
c001995d:	a1 04 7a 02 c0       	mov    eax,ds:0xc0027a04
c0019962:	83 f8 08             	cmp    eax,0x8
c0019965:	75 09                	jne    c0019970 <Vm::fpuPush(unsigned long long)+0x57>
c0019967:	80 0d c0 79 02 c0 40 	or     BYTE PTR ds:0xc00279c0,0x40
c001996e:	c3                   	ret    
c001996f:	90                   	nop
c0019970:	40                   	inc    eax
c0019971:	a3 04 7a 02 c0       	mov    ds:0xc0027a04,eax
c0019976:	c3                   	ret    

c0019977 <Vm::fpuPop()>:
c0019977:	8a 0d c1 79 02 c0    	mov    cl,BYTE PTR ds:0xc00279c1
c001997d:	53                   	push   ebx
c001997e:	c0 e9 03             	shr    cl,0x3
c0019981:	8a 1d c1 79 02 c0    	mov    bl,BYTE PTR ds:0xc00279c1
c0019987:	83 e1 07             	and    ecx,0x7
c001998a:	83 e3 c7             	and    ebx,0xffffffc7
c001998d:	8b 04 cd c4 79 02 c0 	mov    eax,DWORD PTR [ecx*8-0x3ffd863c]
c0019994:	8b 14 cd c8 79 02 c0 	mov    edx,DWORD PTR [ecx*8-0x3ffd8638]
c001999b:	8d 0c cd 08 00 00 00 	lea    ecx,[ecx*8+0x8]
c00199a2:	83 e1 38             	and    ecx,0x38
c00199a5:	09 d9                	or     ecx,ebx
c00199a7:	88 0d c1 79 02 c0    	mov    BYTE PTR ds:0xc00279c1,cl
c00199ad:	8b 0d 04 7a 02 c0    	mov    ecx,DWORD PTR ds:0xc0027a04
c00199b3:	85 c9                	test   ecx,ecx
c00199b5:	74 09                	je     c00199c0 <Vm::fpuPop()+0x49>
c00199b7:	49                   	dec    ecx
c00199b8:	89 0d 04 7a 02 c0    	mov    DWORD PTR ds:0xc0027a04,ecx
c00199be:	eb 08                	jmp    c00199c8 <Vm::fpuPop()+0x51>
c00199c0:	80 0d c0 79 02 c0 40 	or     BYTE PTR ds:0xc00279c0,0x40
c00199c7:	90                   	nop
c00199c8:	5b                   	pop    ebx
c00199c9:	c3                   	ret    

c00199ca <Vm::x87Handler(regs*)>:
c00199ca:	55                   	push   ebp
c00199cb:	57                   	push   edi
c00199cc:	56                   	push   esi
c00199cd:	53                   	push   ebx
c00199ce:	83 ec 1c             	sub    esp,0x1c
c00199d1:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00199d5:	c6 44 24 0a 00       	mov    BYTE PTR [esp+0xa],0x0
c00199da:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c00199dd:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c00199e5:	8d 44 24 0b          	lea    eax,[esp+0xb]
c00199e9:	50                   	push   eax
c00199ea:	8d 44 24 0e          	lea    eax,[esp+0xe]
c00199ee:	50                   	push   eax
c00199ef:	8d 44 24 14          	lea    eax,[esp+0x14]
c00199f3:	50                   	push   eax
c00199f4:	53                   	push   ebx
c00199f5:	e8 a0 a0 ff ff       	call   c0013a9a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c00199fa:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c00199fd:	83 c4 10             	add    esp,0x10
c0019a00:	89 c6                	mov    esi,eax
c0019a02:	80 fa d9             	cmp    dl,0xd9
c0019a05:	0f 85 79 01 00 00    	jne    c0019b84 <Vm::x87Handler(regs*)+0x1ba>
c0019a0b:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0019a0f:	8d 50 20             	lea    edx,[eax+0x20]
c0019a12:	80 fa 0e             	cmp    dl,0xe
c0019a15:	0f 87 a5 00 00 00    	ja     c0019ac0 <Vm::x87Handler(regs*)+0xf6>
c0019a1b:	0f b6 d2             	movzx  edx,dl
c0019a1e:	ff 24 95 24 4b 02 c0 	jmp    DWORD PTR [edx*4-0x3ffdb4dc]
c0019a25:	8d 76 00             	lea    esi,[esi+0x0]
c0019a28:	e8 de fc ff ff       	call   c001970b <Vm::fpuGet0()>
c0019a2d:	eb 09                	jmp    c0019a38 <Vm::x87Handler(regs*)+0x6e>
c0019a2f:	90                   	nop
c0019a30:	e8 db fc ff ff       	call   c0019710 <Vm::fpuGet1()>
c0019a35:	8d 76 00             	lea    esi,[esi+0x0]
c0019a38:	57                   	push   edi
c0019a39:	57                   	push   edi
c0019a3a:	66 90                	xchg   ax,ax
c0019a3c:	52                   	push   edx
c0019a3d:	50                   	push   eax
c0019a3e:	e8 d6 fe ff ff       	call   c0019919 <Vm::fpuPush(unsigned long long)>
c0019a43:	90                   	nop
c0019a44:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0019a48:	83 c4 10             	add    esp,0x10
c0019a4b:	90                   	nop
c0019a4c:	b0 01                	mov    al,0x1
c0019a4e:	e9 89 0a 00 00       	jmp    c001a4dc <Vm::x87Handler(regs*)+0xb12>
c0019a53:	90                   	nop
c0019a54:	83 ec 0c             	sub    esp,0xc
c0019a57:	6a 00                	push   0x0
c0019a59:	e8 2c fe ff ff       	call   c001988a <Vm::fpuGetReg(int)>
c0019a5e:	59                   	pop    ecx
c0019a5f:	5e                   	pop    esi
c0019a60:	52                   	push   edx
c0019a61:	50                   	push   eax
c0019a62:	e8 b3 fd ff ff       	call   c001981a <Vm::fpuChs(unsigned long long)>
c0019a67:	eb 17                	jmp    c0019a80 <Vm::x87Handler(regs*)+0xb6>
c0019a69:	8d 76 00             	lea    esi,[esi+0x0]
c0019a6c:	83 ec 0c             	sub    esp,0xc
c0019a6f:	6a 00                	push   0x0
c0019a71:	e8 14 fe ff ff       	call   c001988a <Vm::fpuGetReg(int)>
c0019a76:	5f                   	pop    edi
c0019a77:	5d                   	pop    ebp
c0019a78:	52                   	push   edx
c0019a79:	50                   	push   eax
c0019a7a:	e8 92 fd ff ff       	call   c0019811 <Vm::fpuAbs(unsigned long long)>
c0019a7f:	90                   	nop
c0019a80:	83 c4 0c             	add    esp,0xc
c0019a83:	90                   	nop
c0019a84:	52                   	push   edx
c0019a85:	50                   	push   eax
c0019a86:	66 90                	xchg   ax,ax
c0019a88:	6a 00                	push   0x0
c0019a8a:	66 90                	xchg   ax,ax
c0019a8c:	e8 3c fe ff ff       	call   c00198cd <Vm::fpuSetReg(int, unsigned long long)>
c0019a91:	eb b1                	jmp    c0019a44 <Vm::x87Handler(regs*)+0x7a>
c0019a93:	90                   	nop
c0019a94:	e8 b7 fc ff ff       	call   c0019750 <Vm::fpuGetLog210()>
c0019a99:	eb 9d                	jmp    c0019a38 <Vm::x87Handler(regs*)+0x6e>
c0019a9b:	90                   	nop
c0019a9c:	e8 7f fc ff ff       	call   c0019720 <Vm::fpuGetLog2E()>
c0019aa1:	eb 95                	jmp    c0019a38 <Vm::x87Handler(regs*)+0x6e>
c0019aa3:	90                   	nop
c0019aa4:	e8 6f fc ff ff       	call   c0019718 <Vm::fpuGetPi()>
c0019aa9:	eb 8d                	jmp    c0019a38 <Vm::x87Handler(regs*)+0x6e>
c0019aab:	90                   	nop
c0019aac:	e8 b7 fc ff ff       	call   c0019768 <Vm::fpuGetLog102()>
c0019ab1:	eb 85                	jmp    c0019a38 <Vm::x87Handler(regs*)+0x6e>
c0019ab3:	90                   	nop
c0019ab4:	e8 7f fc ff ff       	call   c0019738 <Vm::fpuGetLogE2()>
c0019ab9:	e9 7a ff ff ff       	jmp    c0019a38 <Vm::x87Handler(regs*)+0x6e>
c0019abe:	66 90                	xchg   ax,ax
c0019ac0:	8d 50 40             	lea    edx,[eax+0x40]
c0019ac3:	80 fa 07             	cmp    dl,0x7
c0019ac6:	77 18                	ja     c0019ae0 <Vm::x87Handler(regs*)+0x116>
c0019ac8:	83 ec 0c             	sub    esp,0xc
c0019acb:	2d c0 00 00 00       	sub    eax,0xc0
c0019ad0:	50                   	push   eax
c0019ad1:	e8 b4 fd ff ff       	call   c001988a <Vm::fpuGetReg(int)>
c0019ad6:	59                   	pop    ecx
c0019ad7:	5e                   	pop    esi
c0019ad8:	e9 5f ff ff ff       	jmp    c0019a3c <Vm::x87Handler(regs*)+0x72>
c0019add:	8d 76 00             	lea    esi,[esi+0x0]
c0019ae0:	8d 50 38             	lea    edx,[eax+0x38]
c0019ae3:	80 fa 07             	cmp    dl,0x7
c0019ae6:	77 3c                	ja     c0019b24 <Vm::x87Handler(regs*)+0x15a>
c0019ae8:	83 ec 0c             	sub    esp,0xc
c0019aeb:	2d c8 00 00 00       	sub    eax,0xc8
c0019af0:	50                   	push   eax
c0019af1:	e8 94 fd ff ff       	call   c001988a <Vm::fpuGetReg(int)>
c0019af6:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0019afd:	89 c6                	mov    esi,eax
c0019aff:	89 d7                	mov    edi,edx
c0019b01:	e8 84 fd ff ff       	call   c001988a <Vm::fpuGetReg(int)>
c0019b06:	83 c4 0c             	add    esp,0xc
c0019b09:	52                   	push   edx
c0019b0a:	50                   	push   eax
c0019b0b:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0019b0f:	2d c8 00 00 00       	sub    eax,0xc8
c0019b14:	50                   	push   eax
c0019b15:	e8 b3 fd ff ff       	call   c00198cd <Vm::fpuSetReg(int, unsigned long long)>
c0019b1a:	83 c4 0c             	add    esp,0xc
c0019b1d:	57                   	push   edi
c0019b1e:	56                   	push   esi
c0019b1f:	e9 64 ff ff ff       	jmp    c0019a88 <Vm::x87Handler(regs*)+0xbe>
c0019b24:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c0019b28:	84 d2                	test   dl,dl
c0019b2a:	75 10                	jne    c0019b3c <Vm::x87Handler(regs*)+0x172>
c0019b2c:	83 ec 0c             	sub    esp,0xc
c0019b2f:	ff 36                	push   DWORD PTR [esi]
c0019b31:	e8 8d fa ff ff       	call   c00195c3 <Vm::fpu32ToInternal(unsigned int)>
c0019b36:	e9 c9 00 00 00       	jmp    c0019c04 <Vm::x87Handler(regs*)+0x23a>
c0019b3b:	90                   	nop
c0019b3c:	80 fa 03             	cmp    dl,0x3
c0019b3f:	75 13                	jne    c0019b54 <Vm::x87Handler(regs*)+0x18a>
c0019b41:	e8 31 fe ff ff       	call   c0019977 <Vm::fpuPop()>
c0019b46:	55                   	push   ebp
c0019b47:	55                   	push   ebp
c0019b48:	52                   	push   edx
c0019b49:	50                   	push   eax
c0019b4a:	e8 0d fa ff ff       	call   c001955c <Vm::fpuInternalTo32(unsigned long long)>
c0019b4f:	e9 90 00 00 00       	jmp    c0019be4 <Vm::x87Handler(regs*)+0x21a>
c0019b54:	80 fa 05             	cmp    dl,0x5
c0019b57:	75 0f                	jne    c0019b68 <Vm::x87Handler(regs*)+0x19e>
c0019b59:	66 8b 06             	mov    ax,WORD PTR [esi]
c0019b5c:	66 a3 c2 79 02 c0    	mov    ds:0xc00279c2,ax
c0019b62:	e9 ed 00 00 00       	jmp    c0019c54 <Vm::x87Handler(regs*)+0x28a>
c0019b67:	90                   	nop
c0019b68:	31 c0                	xor    eax,eax
c0019b6a:	80 fa 07             	cmp    dl,0x7
c0019b6d:	0f 85 69 09 00 00    	jne    c001a4dc <Vm::x87Handler(regs*)+0xb12>
c0019b73:	66 a1 c2 79 02 c0    	mov    ax,ds:0xc00279c2
c0019b79:	66 89 06             	mov    WORD PTR [esi],ax
c0019b7c:	e9 d3 00 00 00       	jmp    c0019c54 <Vm::x87Handler(regs*)+0x28a>
c0019b81:	8d 76 00             	lea    esi,[esi+0x0]
c0019b84:	80 fa d8             	cmp    dl,0xd8
c0019b87:	0f 84 d3 00 00 00    	je     c0019c60 <Vm::x87Handler(regs*)+0x296>
c0019b8d:	80 fa dc             	cmp    dl,0xdc
c0019b90:	0f 84 2a 02 00 00    	je     c0019dc0 <Vm::x87Handler(regs*)+0x3f6>
c0019b96:	80 fa de             	cmp    dl,0xde
c0019b99:	0f 84 f1 02 00 00    	je     c0019e90 <Vm::x87Handler(regs*)+0x4c6>
c0019b9f:	80 fa dd             	cmp    dl,0xdd
c0019ba2:	0f 84 94 04 00 00    	je     c001a03c <Vm::x87Handler(regs*)+0x672>
c0019ba8:	80 fa da             	cmp    dl,0xda
c0019bab:	0f 84 5f 05 00 00    	je     c001a110 <Vm::x87Handler(regs*)+0x746>
c0019bb1:	80 fa df             	cmp    dl,0xdf
c0019bb4:	0f 84 aa 05 00 00    	je     c001a164 <Vm::x87Handler(regs*)+0x79a>
c0019bba:	31 c0                	xor    eax,eax
c0019bbc:	80 fa db             	cmp    dl,0xdb
c0019bbf:	0f 85 17 09 00 00    	jne    c001a4dc <Vm::x87Handler(regs*)+0xb12>
c0019bc5:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c0019bc9:	80 fa 03             	cmp    dl,0x3
c0019bcc:	0f 85 c2 06 00 00    	jne    c001a294 <Vm::x87Handler(regs*)+0x8ca>
c0019bd2:	e8 a0 fd ff ff       	call   c0019977 <Vm::fpuPop()>
c0019bd7:	55                   	push   ebp
c0019bd8:	55                   	push   ebp
c0019bd9:	8d 76 00             	lea    esi,[esi+0x0]
c0019bdc:	52                   	push   edx
c0019bdd:	50                   	push   eax
c0019bde:	e8 2e fa ff ff       	call   c0019611 <Vm::fpuFloatToLong(unsigned long long)>
c0019be3:	90                   	nop
c0019be4:	83 c4 10             	add    esp,0x10
c0019be7:	89 06                	mov    DWORD PTR [esi],eax
c0019be9:	eb 69                	jmp    c0019c54 <Vm::x87Handler(regs*)+0x28a>
c0019beb:	90                   	nop
c0019bec:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c0019bf0:	84 d2                	test   dl,dl
c0019bf2:	0f 85 2c 06 00 00    	jne    c001a224 <Vm::x87Handler(regs*)+0x85a>
c0019bf8:	57                   	push   edi
c0019bf9:	57                   	push   edi
c0019bfa:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0019bfd:	ff 36                	push   DWORD PTR [esi]
c0019bff:	e8 04 fa ff ff       	call   c0019608 <Vm::fpu64ToInternal(unsigned long long)>
c0019c04:	5e                   	pop    esi
c0019c05:	5f                   	pop    edi
c0019c06:	52                   	push   edx
c0019c07:	50                   	push   eax
c0019c08:	e8 0c fd ff ff       	call   c0019919 <Vm::fpuPush(unsigned long long)>
c0019c0d:	8d 76 00             	lea    esi,[esi+0x0]
c0019c10:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019c14:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c0019c17:	e9 2c fe ff ff       	jmp    c0019a48 <Vm::x87Handler(regs*)+0x7e>
c0019c1c:	80 fa 03             	cmp    dl,0x3
c0019c1f:	0f 85 2b 07 00 00    	jne    c001a350 <Vm::x87Handler(regs*)+0x986>
c0019c25:	57                   	push   edi
c0019c26:	57                   	push   edi
c0019c27:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0019c2a:	ff 36                	push   DWORD PTR [esi]
c0019c2c:	e8 d7 f9 ff ff       	call   c0019608 <Vm::fpu64ToInternal(unsigned long long)>
c0019c31:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0019c38:	89 c6                	mov    esi,eax
c0019c3a:	89 d7                	mov    edi,edx
c0019c3c:	e8 49 fc ff ff       	call   c001988a <Vm::fpuGetReg(int)>
c0019c41:	57                   	push   edi
c0019c42:	56                   	push   esi
c0019c43:	52                   	push   edx
c0019c44:	50                   	push   eax
c0019c45:	e8 60 fb ff ff       	call   c00197aa <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c0019c4a:	83 c4 20             	add    esp,0x20
c0019c4d:	e8 25 fd ff ff       	call   c0019977 <Vm::fpuPop()>
c0019c52:	66 90                	xchg   ax,ax
c0019c54:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019c58:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c0019c5b:	e9 ec fd ff ff       	jmp    c0019a4c <Vm::x87Handler(regs*)+0x82>
c0019c60:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0019c64:	8d 50 40             	lea    edx,[eax+0x40]
c0019c67:	80 fa 07             	cmp    dl,0x7
c0019c6a:	77 2c                	ja     c0019c98 <Vm::x87Handler(regs*)+0x2ce>
c0019c6c:	83 ec 0c             	sub    esp,0xc
c0019c6f:	2d c0 00 00 00       	sub    eax,0xc0
c0019c74:	50                   	push   eax
c0019c75:	e8 10 fc ff ff       	call   c001988a <Vm::fpuGetReg(int)>
c0019c7a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0019c81:	89 c6                	mov    esi,eax
c0019c83:	89 d7                	mov    edi,edx
c0019c85:	e8 00 fc ff ff       	call   c001988a <Vm::fpuGetReg(int)>
c0019c8a:	57                   	push   edi
c0019c8b:	56                   	push   esi
c0019c8c:	52                   	push   edx
c0019c8d:	50                   	push   eax
c0019c8e:	e8 6d fb ff ff       	call   c0019800 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c0019c93:	eb 33                	jmp    c0019cc8 <Vm::x87Handler(regs*)+0x2fe>
c0019c95:	8d 76 00             	lea    esi,[esi+0x0]
c0019c98:	8d 50 38             	lea    edx,[eax+0x38]
c0019c9b:	80 fa 07             	cmp    dl,0x7
c0019c9e:	77 30                	ja     c0019cd0 <Vm::x87Handler(regs*)+0x306>
c0019ca0:	83 ec 0c             	sub    esp,0xc
c0019ca3:	2d c8 00 00 00       	sub    eax,0xc8
c0019ca8:	50                   	push   eax
c0019ca9:	e8 dc fb ff ff       	call   c001988a <Vm::fpuGetReg(int)>
c0019cae:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0019cb5:	89 c6                	mov    esi,eax
c0019cb7:	89 d7                	mov    edi,edx
c0019cb9:	e8 cc fb ff ff       	call   c001988a <Vm::fpuGetReg(int)>
c0019cbe:	57                   	push   edi
c0019cbf:	56                   	push   esi
c0019cc0:	52                   	push   edx
c0019cc1:	50                   	push   eax
c0019cc2:	e8 72 fb ff ff       	call   c0019839 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c0019cc7:	90                   	nop
c0019cc8:	83 c4 1c             	add    esp,0x1c
c0019ccb:	e9 b4 fd ff ff       	jmp    c0019a84 <Vm::x87Handler(regs*)+0xba>
c0019cd0:	8d 50 30             	lea    edx,[eax+0x30]
c0019cd3:	80 fa 07             	cmp    dl,0x7
c0019cd6:	77 10                	ja     c0019ce8 <Vm::x87Handler(regs*)+0x31e>
c0019cd8:	83 ec 0c             	sub    esp,0xc
c0019cdb:	2d d0 00 00 00       	sub    eax,0xd0
c0019ce0:	e9 c3 03 00 00       	jmp    c001a0a8 <Vm::x87Handler(regs*)+0x6de>
c0019ce5:	8d 76 00             	lea    esi,[esi+0x0]
c0019ce8:	8d 50 28             	lea    edx,[eax+0x28]
c0019ceb:	80 fa 07             	cmp    dl,0x7
c0019cee:	77 10                	ja     c0019d00 <Vm::x87Handler(regs*)+0x336>
c0019cf0:	83 ec 0c             	sub    esp,0xc
c0019cf3:	2d d8 00 00 00       	sub    eax,0xd8
c0019cf8:	e9 e7 03 00 00       	jmp    c001a0e4 <Vm::x87Handler(regs*)+0x71a>
c0019cfd:	8d 76 00             	lea    esi,[esi+0x0]
c0019d00:	8d 50 20             	lea    edx,[eax+0x20]
c0019d03:	80 fa 07             	cmp    dl,0x7
c0019d06:	77 1c                	ja     c0019d24 <Vm::x87Handler(regs*)+0x35a>
c0019d08:	83 ec 0c             	sub    esp,0xc
c0019d0b:	2d e0 00 00 00       	sub    eax,0xe0
c0019d10:	50                   	push   eax
c0019d11:	e8 74 fb ff ff       	call   c001988a <Vm::fpuGetReg(int)>
c0019d16:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0019d1d:	89 c6                	mov    esi,eax
c0019d1f:	89 d7                	mov    edi,edx
c0019d21:	eb 25                	jmp    c0019d48 <Vm::x87Handler(regs*)+0x37e>
c0019d23:	90                   	nop
c0019d24:	8d 50 18             	lea    edx,[eax+0x18]
c0019d27:	80 fa 07             	cmp    dl,0x7
c0019d2a:	77 30                	ja     c0019d5c <Vm::x87Handler(regs*)+0x392>
c0019d2c:	83 ec 0c             	sub    esp,0xc
c0019d2f:	6a 00                	push   0x0
c0019d31:	e8 54 fb ff ff       	call   c001988a <Vm::fpuGetReg(int)>
c0019d36:	89 c6                	mov    esi,eax
c0019d38:	89 d7                	mov    edi,edx
c0019d3a:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0019d3e:	2d e8 00 00 00       	sub    eax,0xe8
c0019d43:	89 04 24             	mov    DWORD PTR [esp],eax
c0019d46:	66 90                	xchg   ax,ax
c0019d48:	e8 3d fb ff ff       	call   c001988a <Vm::fpuGetReg(int)>
c0019d4d:	57                   	push   edi
c0019d4e:	56                   	push   esi
c0019d4f:	52                   	push   edx
c0019d50:	50                   	push   eax
c0019d51:	e8 d4 fa ff ff       	call   c001982a <Vm::fpuSub(unsigned long long, unsigned long long)>
c0019d56:	e9 6d ff ff ff       	jmp    c0019cc8 <Vm::x87Handler(regs*)+0x2fe>
c0019d5b:	90                   	nop
c0019d5c:	8d 50 10             	lea    edx,[eax+0x10]
c0019d5f:	80 fa 07             	cmp    dl,0x7
c0019d62:	77 1c                	ja     c0019d80 <Vm::x87Handler(regs*)+0x3b6>
c0019d64:	83 ec 0c             	sub    esp,0xc
c0019d67:	2d f0 00 00 00       	sub    eax,0xf0
c0019d6c:	50                   	push   eax
c0019d6d:	e8 18 fb ff ff       	call   c001988a <Vm::fpuGetReg(int)>
c0019d72:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0019d79:	89 c6                	mov    esi,eax
c0019d7b:	89 d7                	mov    edi,edx
c0019d7d:	eb 25                	jmp    c0019da4 <Vm::x87Handler(regs*)+0x3da>
c0019d7f:	90                   	nop
c0019d80:	3c f7                	cmp    al,0xf7
c0019d82:	0f 86 00 04 00 00    	jbe    c001a188 <Vm::x87Handler(regs*)+0x7be>
c0019d88:	83 ec 0c             	sub    esp,0xc
c0019d8b:	6a 00                	push   0x0
c0019d8d:	e8 f8 fa ff ff       	call   c001988a <Vm::fpuGetReg(int)>
c0019d92:	89 c6                	mov    esi,eax
c0019d94:	89 d7                	mov    edi,edx
c0019d96:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0019d9a:	2d f8 00 00 00       	sub    eax,0xf8
c0019d9f:	89 04 24             	mov    DWORD PTR [esp],eax
c0019da2:	66 90                	xchg   ax,ax
c0019da4:	e8 e1 fa ff ff       	call   c001988a <Vm::fpuGetReg(int)>
c0019da9:	57                   	push   edi
c0019daa:	56                   	push   esi
c0019dab:	52                   	push   edx
c0019dac:	50                   	push   eax
c0019dad:	e8 a6 fa ff ff       	call   c0019858 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c0019db2:	83 c4 1c             	add    esp,0x1c
c0019db5:	52                   	push   edx
c0019db6:	50                   	push   eax
c0019db7:	6a 00                	push   0x0
c0019db9:	e9 6a 02 00 00       	jmp    c001a028 <Vm::x87Handler(regs*)+0x65e>
c0019dbe:	66 90                	xchg   ax,ax
c0019dc0:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0019dc4:	8d 50 40             	lea    edx,[eax+0x40]
c0019dc7:	80 fa 07             	cmp    dl,0x7
c0019dca:	77 38                	ja     c0019e04 <Vm::x87Handler(regs*)+0x43a>
c0019dcc:	83 ec 0c             	sub    esp,0xc
c0019dcf:	2d c0 00 00 00       	sub    eax,0xc0
c0019dd4:	50                   	push   eax
c0019dd5:	e8 b0 fa ff ff       	call   c001988a <Vm::fpuGetReg(int)>
c0019dda:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0019de1:	89 c6                	mov    esi,eax
c0019de3:	89 d7                	mov    edi,edx
c0019de5:	e8 a0 fa ff ff       	call   c001988a <Vm::fpuGetReg(int)>
c0019dea:	57                   	push   edi
c0019deb:	56                   	push   esi
c0019dec:	52                   	push   edx
c0019ded:	50                   	push   eax
c0019dee:	e8 0d fa ff ff       	call   c0019800 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c0019df3:	83 c4 1c             	add    esp,0x1c
c0019df6:	52                   	push   edx
c0019df7:	50                   	push   eax
c0019df8:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0019dfc:	2d c0 00 00 00       	sub    eax,0xc0
c0019e01:	eb 41                	jmp    c0019e44 <Vm::x87Handler(regs*)+0x47a>
c0019e03:	90                   	nop
c0019e04:	8d 50 38             	lea    edx,[eax+0x38]
c0019e07:	80 fa 07             	cmp    dl,0x7
c0019e0a:	77 40                	ja     c0019e4c <Vm::x87Handler(regs*)+0x482>
c0019e0c:	83 ec 0c             	sub    esp,0xc
c0019e0f:	2d c8 00 00 00       	sub    eax,0xc8
c0019e14:	50                   	push   eax
c0019e15:	e8 70 fa ff ff       	call   c001988a <Vm::fpuGetReg(int)>
c0019e1a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0019e21:	89 c6                	mov    esi,eax
c0019e23:	89 d7                	mov    edi,edx
c0019e25:	e8 60 fa ff ff       	call   c001988a <Vm::fpuGetReg(int)>
c0019e2a:	57                   	push   edi
c0019e2b:	56                   	push   esi
c0019e2c:	52                   	push   edx
c0019e2d:	50                   	push   eax
c0019e2e:	e8 06 fa ff ff       	call   c0019839 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c0019e33:	83 c4 1c             	add    esp,0x1c
c0019e36:	52                   	push   edx
c0019e37:	50                   	push   eax
c0019e38:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0019e3c:	2d c8 00 00 00       	sub    eax,0xc8
c0019e41:	8d 76 00             	lea    esi,[esi+0x0]
c0019e44:	50                   	push   eax
c0019e45:	e9 42 fc ff ff       	jmp    c0019a8c <Vm::x87Handler(regs*)+0xc2>
c0019e4a:	66 90                	xchg   ax,ax
c0019e4c:	83 c0 18             	add    eax,0x18
c0019e4f:	3c 07                	cmp    al,0x7
c0019e51:	0f 87 6d 04 00 00    	ja     c001a2c4 <Vm::x87Handler(regs*)+0x8fa>
c0019e57:	83 ec 0c             	sub    esp,0xc
c0019e5a:	6a 00                	push   0x0
c0019e5c:	e8 29 fa ff ff       	call   c001988a <Vm::fpuGetReg(int)>
c0019e61:	89 c6                	mov    esi,eax
c0019e63:	89 d7                	mov    edi,edx
c0019e65:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0019e69:	2d e8 00 00 00       	sub    eax,0xe8
c0019e6e:	89 04 24             	mov    DWORD PTR [esp],eax
c0019e71:	e8 14 fa ff ff       	call   c001988a <Vm::fpuGetReg(int)>
c0019e76:	57                   	push   edi
c0019e77:	56                   	push   esi
c0019e78:	52                   	push   edx
c0019e79:	50                   	push   eax
c0019e7a:	e8 ab f9 ff ff       	call   c001982a <Vm::fpuSub(unsigned long long, unsigned long long)>
c0019e7f:	83 c4 1c             	add    esp,0x1c
c0019e82:	52                   	push   edx
c0019e83:	50                   	push   eax
c0019e84:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0019e88:	2d e8 00 00 00       	sub    eax,0xe8
c0019e8d:	eb b5                	jmp    c0019e44 <Vm::x87Handler(regs*)+0x47a>
c0019e8f:	90                   	nop
c0019e90:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0019e94:	8d 50 40             	lea    edx,[eax+0x40]
c0019e97:	80 fa 07             	cmp    dl,0x7
c0019e9a:	77 3c                	ja     c0019ed8 <Vm::x87Handler(regs*)+0x50e>
c0019e9c:	83 ec 0c             	sub    esp,0xc
c0019e9f:	2d c0 00 00 00       	sub    eax,0xc0
c0019ea4:	50                   	push   eax
c0019ea5:	e8 e0 f9 ff ff       	call   c001988a <Vm::fpuGetReg(int)>
c0019eaa:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0019eb1:	89 c6                	mov    esi,eax
c0019eb3:	89 d7                	mov    edi,edx
c0019eb5:	e8 d0 f9 ff ff       	call   c001988a <Vm::fpuGetReg(int)>
c0019eba:	57                   	push   edi
c0019ebb:	56                   	push   esi
c0019ebc:	52                   	push   edx
c0019ebd:	50                   	push   eax
c0019ebe:	e8 3d f9 ff ff       	call   c0019800 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c0019ec3:	83 c4 1c             	add    esp,0x1c
c0019ec6:	52                   	push   edx
c0019ec7:	50                   	push   eax
c0019ec8:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0019ecc:	2d c0 00 00 00       	sub    eax,0xc0
c0019ed1:	e9 b2 01 00 00       	jmp    c001a088 <Vm::x87Handler(regs*)+0x6be>
c0019ed6:	66 90                	xchg   ax,ax
c0019ed8:	8d 50 20             	lea    edx,[eax+0x20]
c0019edb:	80 fa 07             	cmp    dl,0x7
c0019ede:	77 3c                	ja     c0019f1c <Vm::x87Handler(regs*)+0x552>
c0019ee0:	83 ec 0c             	sub    esp,0xc
c0019ee3:	2d e0 00 00 00       	sub    eax,0xe0
c0019ee8:	50                   	push   eax
c0019ee9:	e8 9c f9 ff ff       	call   c001988a <Vm::fpuGetReg(int)>
c0019eee:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0019ef5:	89 c6                	mov    esi,eax
c0019ef7:	89 d7                	mov    edi,edx
c0019ef9:	e8 8c f9 ff ff       	call   c001988a <Vm::fpuGetReg(int)>
c0019efe:	57                   	push   edi
c0019eff:	56                   	push   esi
c0019f00:	52                   	push   edx
c0019f01:	50                   	push   eax
c0019f02:	e8 23 f9 ff ff       	call   c001982a <Vm::fpuSub(unsigned long long, unsigned long long)>
c0019f07:	83 c4 1c             	add    esp,0x1c
c0019f0a:	52                   	push   edx
c0019f0b:	50                   	push   eax
c0019f0c:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0019f10:	2d e0 00 00 00       	sub    eax,0xe0
c0019f15:	e9 6e 01 00 00       	jmp    c001a088 <Vm::x87Handler(regs*)+0x6be>
c0019f1a:	66 90                	xchg   ax,ax
c0019f1c:	8d 50 18             	lea    edx,[eax+0x18]
c0019f1f:	80 fa 07             	cmp    dl,0x7
c0019f22:	77 3c                	ja     c0019f60 <Vm::x87Handler(regs*)+0x596>
c0019f24:	83 ec 0c             	sub    esp,0xc
c0019f27:	6a 00                	push   0x0
c0019f29:	e8 5c f9 ff ff       	call   c001988a <Vm::fpuGetReg(int)>
c0019f2e:	89 c6                	mov    esi,eax
c0019f30:	89 d7                	mov    edi,edx
c0019f32:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0019f36:	2d e8 00 00 00       	sub    eax,0xe8
c0019f3b:	89 04 24             	mov    DWORD PTR [esp],eax
c0019f3e:	e8 47 f9 ff ff       	call   c001988a <Vm::fpuGetReg(int)>
c0019f43:	57                   	push   edi
c0019f44:	56                   	push   esi
c0019f45:	52                   	push   edx
c0019f46:	50                   	push   eax
c0019f47:	e8 de f8 ff ff       	call   c001982a <Vm::fpuSub(unsigned long long, unsigned long long)>
c0019f4c:	83 c4 1c             	add    esp,0x1c
c0019f4f:	52                   	push   edx
c0019f50:	50                   	push   eax
c0019f51:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0019f55:	2d e8 00 00 00       	sub    eax,0xe8
c0019f5a:	e9 29 01 00 00       	jmp    c001a088 <Vm::x87Handler(regs*)+0x6be>
c0019f5f:	90                   	nop
c0019f60:	8d 50 38             	lea    edx,[eax+0x38]
c0019f63:	80 fa 07             	cmp    dl,0x7
c0019f66:	77 3c                	ja     c0019fa4 <Vm::x87Handler(regs*)+0x5da>
c0019f68:	83 ec 0c             	sub    esp,0xc
c0019f6b:	2d c8 00 00 00       	sub    eax,0xc8
c0019f70:	50                   	push   eax
c0019f71:	e8 14 f9 ff ff       	call   c001988a <Vm::fpuGetReg(int)>
c0019f76:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0019f7d:	89 c6                	mov    esi,eax
c0019f7f:	89 d7                	mov    edi,edx
c0019f81:	e8 04 f9 ff ff       	call   c001988a <Vm::fpuGetReg(int)>
c0019f86:	57                   	push   edi
c0019f87:	56                   	push   esi
c0019f88:	52                   	push   edx
c0019f89:	50                   	push   eax
c0019f8a:	e8 aa f8 ff ff       	call   c0019839 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c0019f8f:	83 c4 1c             	add    esp,0x1c
c0019f92:	52                   	push   edx
c0019f93:	50                   	push   eax
c0019f94:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0019f98:	2d c8 00 00 00       	sub    eax,0xc8
c0019f9d:	e9 82 00 00 00       	jmp    c001a024 <Vm::x87Handler(regs*)+0x65a>
c0019fa2:	66 90                	xchg   ax,ax
c0019fa4:	3c f7                	cmp    al,0xf7
c0019fa6:	76 38                	jbe    c0019fe0 <Vm::x87Handler(regs*)+0x616>
c0019fa8:	83 ec 0c             	sub    esp,0xc
c0019fab:	6a 00                	push   0x0
c0019fad:	e8 d8 f8 ff ff       	call   c001988a <Vm::fpuGetReg(int)>
c0019fb2:	89 c6                	mov    esi,eax
c0019fb4:	89 d7                	mov    edi,edx
c0019fb6:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0019fba:	2d f8 00 00 00       	sub    eax,0xf8
c0019fbf:	89 04 24             	mov    DWORD PTR [esp],eax
c0019fc2:	e8 c3 f8 ff ff       	call   c001988a <Vm::fpuGetReg(int)>
c0019fc7:	57                   	push   edi
c0019fc8:	56                   	push   esi
c0019fc9:	52                   	push   edx
c0019fca:	50                   	push   eax
c0019fcb:	e8 88 f8 ff ff       	call   c0019858 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c0019fd0:	83 c4 1c             	add    esp,0x1c
c0019fd3:	52                   	push   edx
c0019fd4:	50                   	push   eax
c0019fd5:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0019fd9:	2d f8 00 00 00       	sub    eax,0xf8
c0019fde:	eb 44                	jmp    c001a024 <Vm::x87Handler(regs*)+0x65a>
c0019fe0:	8d 50 10             	lea    edx,[eax+0x10]
c0019fe3:	80 fa 07             	cmp    dl,0x7
c0019fe6:	0f 87 6c 01 00 00    	ja     c001a158 <Vm::x87Handler(regs*)+0x78e>
c0019fec:	83 ec 0c             	sub    esp,0xc
c0019fef:	2d f0 00 00 00       	sub    eax,0xf0
c0019ff4:	50                   	push   eax
c0019ff5:	e8 90 f8 ff ff       	call   c001988a <Vm::fpuGetReg(int)>
c0019ffa:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001a001:	89 c6                	mov    esi,eax
c001a003:	89 d7                	mov    edi,edx
c001a005:	e8 80 f8 ff ff       	call   c001988a <Vm::fpuGetReg(int)>
c001a00a:	57                   	push   edi
c001a00b:	56                   	push   esi
c001a00c:	52                   	push   edx
c001a00d:	50                   	push   eax
c001a00e:	e8 45 f8 ff ff       	call   c0019858 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001a013:	83 c4 1c             	add    esp,0x1c
c001a016:	52                   	push   edx
c001a017:	50                   	push   eax
c001a018:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001a01c:	2d f0 00 00 00       	sub    eax,0xf0
c001a021:	8d 76 00             	lea    esi,[esi+0x0]
c001a024:	50                   	push   eax
c001a025:	8d 76 00             	lea    esi,[esi+0x0]
c001a028:	e8 a0 f8 ff ff       	call   c00198cd <Vm::fpuSetReg(int, unsigned long long)>
c001a02d:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001a031:	e8 41 f9 ff ff       	call   c0019977 <Vm::fpuPop()>
c001a036:	e9 0d fa ff ff       	jmp    c0019a48 <Vm::x87Handler(regs*)+0x7e>
c001a03b:	90                   	nop
c001a03c:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001a040:	8d 50 30             	lea    edx,[eax+0x30]
c001a043:	80 fa 07             	cmp    dl,0x7
c001a046:	77 20                	ja     c001a068 <Vm::x87Handler(regs*)+0x69e>
c001a048:	83 ec 0c             	sub    esp,0xc
c001a04b:	6a 00                	push   0x0
c001a04d:	e8 38 f8 ff ff       	call   c001988a <Vm::fpuGetReg(int)>
c001a052:	83 c4 0c             	add    esp,0xc
c001a055:	52                   	push   edx
c001a056:	50                   	push   eax
c001a057:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001a05b:	2d d0 00 00 00       	sub    eax,0xd0
c001a060:	e9 df fd ff ff       	jmp    c0019e44 <Vm::x87Handler(regs*)+0x47a>
c001a065:	8d 76 00             	lea    esi,[esi+0x0]
c001a068:	8d 50 28             	lea    edx,[eax+0x28]
c001a06b:	80 fa 07             	cmp    dl,0x7
c001a06e:	77 28                	ja     c001a098 <Vm::x87Handler(regs*)+0x6ce>
c001a070:	83 ec 0c             	sub    esp,0xc
c001a073:	6a 00                	push   0x0
c001a075:	e8 10 f8 ff ff       	call   c001988a <Vm::fpuGetReg(int)>
c001a07a:	83 c4 0c             	add    esp,0xc
c001a07d:	52                   	push   edx
c001a07e:	50                   	push   eax
c001a07f:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001a083:	2d d8 00 00 00       	sub    eax,0xd8
c001a088:	50                   	push   eax
c001a089:	e8 3f f8 ff ff       	call   c00198cd <Vm::fpuSetReg(int, unsigned long long)>
c001a08e:	e8 e4 f8 ff ff       	call   c0019977 <Vm::fpuPop()>
c001a093:	e9 ac f9 ff ff       	jmp    c0019a44 <Vm::x87Handler(regs*)+0x7a>
c001a098:	8d 50 20             	lea    edx,[eax+0x20]
c001a09b:	80 fa 07             	cmp    dl,0x7
c001a09e:	77 30                	ja     c001a0d0 <Vm::x87Handler(regs*)+0x706>
c001a0a0:	83 ec 0c             	sub    esp,0xc
c001a0a3:	2d e0 00 00 00       	sub    eax,0xe0
c001a0a8:	50                   	push   eax
c001a0a9:	e8 dc f7 ff ff       	call   c001988a <Vm::fpuGetReg(int)>
c001a0ae:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001a0b5:	89 c6                	mov    esi,eax
c001a0b7:	89 d7                	mov    edi,edx
c001a0b9:	e8 cc f7 ff ff       	call   c001988a <Vm::fpuGetReg(int)>
c001a0be:	57                   	push   edi
c001a0bf:	56                   	push   esi
c001a0c0:	52                   	push   edx
c001a0c1:	50                   	push   eax
c001a0c2:	e8 e3 f6 ff ff       	call   c00197aa <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001a0c7:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001a0cb:	e9 78 02 00 00       	jmp    c001a348 <Vm::x87Handler(regs*)+0x97e>
c001a0d0:	8d 50 18             	lea    edx,[eax+0x18]
c001a0d3:	80 fa 07             	cmp    dl,0x7
c001a0d6:	0f 87 10 fb ff ff    	ja     c0019bec <Vm::x87Handler(regs*)+0x222>
c001a0dc:	83 ec 0c             	sub    esp,0xc
c001a0df:	2d e8 00 00 00       	sub    eax,0xe8
c001a0e4:	50                   	push   eax
c001a0e5:	e8 a0 f7 ff ff       	call   c001988a <Vm::fpuGetReg(int)>
c001a0ea:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001a0f1:	89 c6                	mov    esi,eax
c001a0f3:	89 d7                	mov    edi,edx
c001a0f5:	e8 90 f7 ff ff       	call   c001988a <Vm::fpuGetReg(int)>
c001a0fa:	57                   	push   edi
c001a0fb:	56                   	push   esi
c001a0fc:	52                   	push   edx
c001a0fd:	50                   	push   eax
c001a0fe:	e8 a7 f6 ff ff       	call   c00197aa <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001a103:	83 c4 20             	add    esp,0x20
c001a106:	e8 6c f8 ff ff       	call   c0019977 <Vm::fpuPop()>
c001a10b:	eb 6f                	jmp    c001a17c <Vm::x87Handler(regs*)+0x7b2>
c001a10d:	8d 76 00             	lea    esi,[esi+0x0]
c001a110:	80 7d 01 e9          	cmp    BYTE PTR [ebp+0x1],0xe9
c001a114:	0f 85 22 01 00 00    	jne    c001a23c <Vm::x87Handler(regs*)+0x872>
c001a11a:	66 90                	xchg   ax,ax
c001a11c:	83 ec 0c             	sub    esp,0xc
c001a11f:	6a 01                	push   0x1
c001a121:	e8 64 f7 ff ff       	call   c001988a <Vm::fpuGetReg(int)>
c001a126:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001a12d:	89 c6                	mov    esi,eax
c001a12f:	89 d7                	mov    edi,edx
c001a131:	e8 54 f7 ff ff       	call   c001988a <Vm::fpuGetReg(int)>
c001a136:	57                   	push   edi
c001a137:	56                   	push   esi
c001a138:	52                   	push   edx
c001a139:	50                   	push   eax
c001a13a:	e8 6b f6 ff ff       	call   c00197aa <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001a13f:	83 c4 20             	add    esp,0x20
c001a142:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001a146:	e8 2c f8 ff ff       	call   c0019977 <Vm::fpuPop()>
c001a14b:	e8 27 f8 ff ff       	call   c0019977 <Vm::fpuPop()>
c001a150:	e9 f7 f8 ff ff       	jmp    c0019a4c <Vm::x87Handler(regs*)+0x82>
c001a155:	8d 76 00             	lea    esi,[esi+0x0]
c001a158:	3c d9                	cmp    al,0xd9
c001a15a:	0f 85 e8 02 00 00    	jne    c001a448 <Vm::x87Handler(regs*)+0xa7e>
c001a160:	eb ba                	jmp    c001a11c <Vm::x87Handler(regs*)+0x752>
c001a162:	66 90                	xchg   ax,ax
c001a164:	80 7d 01 e0          	cmp    BYTE PTR [ebp+0x1],0xe0
c001a168:	0f 85 2a 03 00 00    	jne    c001a498 <Vm::x87Handler(regs*)+0xace>
c001a16e:	0f b7 05 c0 79 02 c0 	movzx  eax,WORD PTR ds:0xc00279c0
c001a175:	66 89 43 2c          	mov    WORD PTR [ebx+0x2c],ax
c001a179:	8d 76 00             	lea    esi,[esi+0x0]
c001a17c:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001a180:	e9 c7 f8 ff ff       	jmp    c0019a4c <Vm::x87Handler(regs*)+0x82>
c001a185:	8d 76 00             	lea    esi,[esi+0x0]
c001a188:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001a18c:	84 d2                	test   dl,dl
c001a18e:	75 10                	jne    c001a1a0 <Vm::x87Handler(regs*)+0x7d6>
c001a190:	83 ec 0c             	sub    esp,0xc
c001a193:	ff 36                	push   DWORD PTR [esi]
c001a195:	e8 29 f4 ff ff       	call   c00195c3 <Vm::fpu32ToInternal(unsigned int)>
c001a19a:	e9 39 01 00 00       	jmp    c001a2d8 <Vm::x87Handler(regs*)+0x90e>
c001a19f:	90                   	nop
c001a1a0:	80 fa 01             	cmp    dl,0x1
c001a1a3:	75 0f                	jne    c001a1b4 <Vm::x87Handler(regs*)+0x7ea>
c001a1a5:	83 ec 0c             	sub    esp,0xc
c001a1a8:	ff 36                	push   DWORD PTR [esi]
c001a1aa:	e8 14 f4 ff ff       	call   c00195c3 <Vm::fpu32ToInternal(unsigned int)>
c001a1af:	e9 b4 02 00 00       	jmp    c001a468 <Vm::x87Handler(regs*)+0xa9e>
c001a1b4:	80 fa 04             	cmp    dl,0x4
c001a1b7:	75 0f                	jne    c001a1c8 <Vm::x87Handler(regs*)+0x7fe>
c001a1b9:	83 ec 0c             	sub    esp,0xc
c001a1bc:	ff 36                	push   DWORD PTR [esi]
c001a1be:	e8 00 f4 ff ff       	call   c00195c3 <Vm::fpu32ToInternal(unsigned int)>
c001a1c3:	e9 9c 01 00 00       	jmp    c001a364 <Vm::x87Handler(regs*)+0x99a>
c001a1c8:	80 fa 05             	cmp    dl,0x5
c001a1cb:	75 1b                	jne    c001a1e8 <Vm::x87Handler(regs*)+0x81e>
c001a1cd:	83 ec 0c             	sub    esp,0xc
c001a1d0:	6a 00                	push   0x0
c001a1d2:	e8 b3 f6 ff ff       	call   c001988a <Vm::fpuGetReg(int)>
c001a1d7:	89 c7                	mov    edi,eax
c001a1d9:	89 d5                	mov    ebp,edx
c001a1db:	58                   	pop    eax
c001a1dc:	ff 36                	push   DWORD PTR [esi]
c001a1de:	e8 e0 f3 ff ff       	call   c00195c3 <Vm::fpu32ToInternal(unsigned int)>
c001a1e3:	e9 bc 01 00 00       	jmp    c001a3a4 <Vm::x87Handler(regs*)+0x9da>
c001a1e8:	80 fa 06             	cmp    dl,0x6
c001a1eb:	75 0f                	jne    c001a1fc <Vm::x87Handler(regs*)+0x832>
c001a1ed:	83 ec 0c             	sub    esp,0xc
c001a1f0:	ff 36                	push   DWORD PTR [esi]
c001a1f2:	e8 cc f3 ff ff       	call   c00195c3 <Vm::fpu32ToInternal(unsigned int)>
c001a1f7:	e9 cc 01 00 00       	jmp    c001a3c8 <Vm::x87Handler(regs*)+0x9fe>
c001a1fc:	31 c0                	xor    eax,eax
c001a1fe:	80 fa 07             	cmp    dl,0x7
c001a201:	0f 85 d5 02 00 00    	jne    c001a4dc <Vm::x87Handler(regs*)+0xb12>
c001a207:	83 ec 0c             	sub    esp,0xc
c001a20a:	6a 00                	push   0x0
c001a20c:	e8 79 f6 ff ff       	call   c001988a <Vm::fpuGetReg(int)>
c001a211:	89 c7                	mov    edi,eax
c001a213:	89 d5                	mov    ebp,edx
c001a215:	58                   	pop    eax
c001a216:	ff 36                	push   DWORD PTR [esi]
c001a218:	e8 a6 f3 ff ff       	call   c00195c3 <Vm::fpu32ToInternal(unsigned int)>
c001a21d:	e9 ee 01 00 00       	jmp    c001a410 <Vm::x87Handler(regs*)+0xa46>
c001a222:	66 90                	xchg   ax,ax
c001a224:	80 fa 03             	cmp    dl,0x3
c001a227:	0f 85 f7 01 00 00    	jne    c001a424 <Vm::x87Handler(regs*)+0xa5a>
c001a22d:	e8 45 f7 ff ff       	call   c0019977 <Vm::fpuPop()>
c001a232:	51                   	push   ecx
c001a233:	51                   	push   ecx
c001a234:	e9 03 02 00 00       	jmp    c001a43c <Vm::x87Handler(regs*)+0xa72>
c001a239:	8d 76 00             	lea    esi,[esi+0x0]
c001a23c:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001a240:	80 fa 01             	cmp    dl,0x1
c001a243:	75 0b                	jne    c001a250 <Vm::x87Handler(regs*)+0x886>
c001a245:	57                   	push   edi
c001a246:	57                   	push   edi
c001a247:	8b 06                	mov    eax,DWORD PTR [esi]
c001a249:	e9 0e 02 00 00       	jmp    c001a45c <Vm::x87Handler(regs*)+0xa92>
c001a24e:	66 90                	xchg   ax,ax
c001a250:	80 fa 04             	cmp    dl,0x4
c001a253:	75 13                	jne    c001a268 <Vm::x87Handler(regs*)+0x89e>
c001a255:	31 d2                	xor    edx,edx
c001a257:	51                   	push   ecx
c001a258:	51                   	push   ecx
c001a259:	8b 06                	mov    eax,DWORD PTR [esi]
c001a25b:	52                   	push   edx
c001a25c:	50                   	push   eax
c001a25d:	e8 4a f4 ff ff       	call   c00196ac <Vm::fpuLongToFloat(long long)>
c001a262:	e9 fd 00 00 00       	jmp    c001a364 <Vm::x87Handler(regs*)+0x99a>
c001a267:	90                   	nop
c001a268:	31 c0                	xor    eax,eax
c001a26a:	80 fa 07             	cmp    dl,0x7
c001a26d:	0f 85 69 02 00 00    	jne    c001a4dc <Vm::x87Handler(regs*)+0xb12>
c001a273:	83 ec 0c             	sub    esp,0xc
c001a276:	6a 00                	push   0x0
c001a278:	e8 0d f6 ff ff       	call   c001988a <Vm::fpuGetReg(int)>
c001a27d:	89 c7                	mov    edi,eax
c001a27f:	89 d5                	mov    ebp,edx
c001a281:	58                   	pop    eax
c001a282:	8b 06                	mov    eax,DWORD PTR [esi]
c001a284:	5a                   	pop    edx
c001a285:	31 d2                	xor    edx,edx
c001a287:	52                   	push   edx
c001a288:	50                   	push   eax
c001a289:	e8 1e f4 ff ff       	call   c00196ac <Vm::fpuLongToFloat(long long)>
c001a28e:	e9 7d 01 00 00       	jmp    c001a410 <Vm::x87Handler(regs*)+0xa46>
c001a293:	90                   	nop
c001a294:	84 d2                	test   dl,dl
c001a296:	75 10                	jne    c001a2a8 <Vm::x87Handler(regs*)+0x8de>
c001a298:	31 d2                	xor    edx,edx
c001a29a:	55                   	push   ebp
c001a29b:	55                   	push   ebp
c001a29c:	8b 06                	mov    eax,DWORD PTR [esi]
c001a29e:	52                   	push   edx
c001a29f:	50                   	push   eax
c001a2a0:	e9 03 02 00 00       	jmp    c001a4a8 <Vm::x87Handler(regs*)+0xade>
c001a2a5:	8d 76 00             	lea    esi,[esi+0x0]
c001a2a8:	31 c0                	xor    eax,eax
c001a2aa:	80 fa 02             	cmp    dl,0x2
c001a2ad:	0f 85 29 02 00 00    	jne    c001a4dc <Vm::x87Handler(regs*)+0xb12>
c001a2b3:	83 ec 0c             	sub    esp,0xc
c001a2b6:	6a 00                	push   0x0
c001a2b8:	e8 cd f5 ff ff       	call   c001988a <Vm::fpuGetReg(int)>
c001a2bd:	59                   	pop    ecx
c001a2be:	5f                   	pop    edi
c001a2bf:	e9 18 f9 ff ff       	jmp    c0019bdc <Vm::x87Handler(regs*)+0x212>
c001a2c4:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001a2c8:	84 d2                	test   dl,dl
c001a2ca:	75 2c                	jne    c001a2f8 <Vm::x87Handler(regs*)+0x92e>
c001a2cc:	50                   	push   eax
c001a2cd:	50                   	push   eax
c001a2ce:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001a2d1:	ff 36                	push   DWORD PTR [esi]
c001a2d3:	e8 30 f3 ff ff       	call   c0019608 <Vm::fpu64ToInternal(unsigned long long)>
c001a2d8:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001a2df:	89 c6                	mov    esi,eax
c001a2e1:	89 d7                	mov    edi,edx
c001a2e3:	e8 a2 f5 ff ff       	call   c001988a <Vm::fpuGetReg(int)>
c001a2e8:	57                   	push   edi
c001a2e9:	56                   	push   esi
c001a2ea:	52                   	push   edx
c001a2eb:	50                   	push   eax
c001a2ec:	e8 0f f5 ff ff       	call   c0019800 <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001a2f1:	e9 8e 01 00 00       	jmp    c001a484 <Vm::x87Handler(regs*)+0xaba>
c001a2f6:	66 90                	xchg   ax,ax
c001a2f8:	80 fa 01             	cmp    dl,0x1
c001a2fb:	75 13                	jne    c001a310 <Vm::x87Handler(regs*)+0x946>
c001a2fd:	50                   	push   eax
c001a2fe:	50                   	push   eax
c001a2ff:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001a302:	ff 36                	push   DWORD PTR [esi]
c001a304:	e8 ff f2 ff ff       	call   c0019608 <Vm::fpu64ToInternal(unsigned long long)>
c001a309:	e9 5a 01 00 00       	jmp    c001a468 <Vm::x87Handler(regs*)+0xa9e>
c001a30e:	66 90                	xchg   ax,ax
c001a310:	80 fa 02             	cmp    dl,0x2
c001a313:	0f 85 03 f9 ff ff    	jne    c0019c1c <Vm::x87Handler(regs*)+0x252>
c001a319:	55                   	push   ebp
c001a31a:	55                   	push   ebp
c001a31b:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001a31e:	ff 36                	push   DWORD PTR [esi]
c001a320:	e8 e3 f2 ff ff       	call   c0019608 <Vm::fpu64ToInternal(unsigned long long)>
c001a325:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001a32c:	89 c6                	mov    esi,eax
c001a32e:	89 d7                	mov    edi,edx
c001a330:	e8 55 f5 ff ff       	call   c001988a <Vm::fpuGetReg(int)>
c001a335:	57                   	push   edi
c001a336:	56                   	push   esi
c001a337:	52                   	push   edx
c001a338:	50                   	push   eax
c001a339:	e8 6c f4 ff ff       	call   c00197aa <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001a33e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001a342:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001a345:	8d 76 00             	lea    esi,[esi+0x0]
c001a348:	83 c4 20             	add    esp,0x20
c001a34b:	e9 fc f6 ff ff       	jmp    c0019a4c <Vm::x87Handler(regs*)+0x82>
c001a350:	80 fa 04             	cmp    dl,0x4
c001a353:	75 2f                	jne    c001a384 <Vm::x87Handler(regs*)+0x9ba>
c001a355:	51                   	push   ecx
c001a356:	51                   	push   ecx
c001a357:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001a35a:	ff 36                	push   DWORD PTR [esi]
c001a35c:	e8 a7 f2 ff ff       	call   c0019608 <Vm::fpu64ToInternal(unsigned long long)>
c001a361:	8d 76 00             	lea    esi,[esi+0x0]
c001a364:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001a36b:	89 c6                	mov    esi,eax
c001a36d:	89 d7                	mov    edi,edx
c001a36f:	e8 16 f5 ff ff       	call   c001988a <Vm::fpuGetReg(int)>
c001a374:	57                   	push   edi
c001a375:	56                   	push   esi
c001a376:	52                   	push   edx
c001a377:	50                   	push   eax
c001a378:	e8 ad f4 ff ff       	call   c001982a <Vm::fpuSub(unsigned long long, unsigned long long)>
c001a37d:	e9 02 01 00 00       	jmp    c001a484 <Vm::x87Handler(regs*)+0xaba>
c001a382:	66 90                	xchg   ax,ax
c001a384:	80 fa 05             	cmp    dl,0x5
c001a387:	75 2b                	jne    c001a3b4 <Vm::x87Handler(regs*)+0x9ea>
c001a389:	83 ec 0c             	sub    esp,0xc
c001a38c:	6a 00                	push   0x0
c001a38e:	e8 f7 f4 ff ff       	call   c001988a <Vm::fpuGetReg(int)>
c001a393:	89 c7                	mov    edi,eax
c001a395:	89 d5                	mov    ebp,edx
c001a397:	58                   	pop    eax
c001a398:	5a                   	pop    edx
c001a399:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001a39c:	ff 36                	push   DWORD PTR [esi]
c001a39e:	e8 65 f2 ff ff       	call   c0019608 <Vm::fpu64ToInternal(unsigned long long)>
c001a3a3:	90                   	nop
c001a3a4:	83 c4 10             	add    esp,0x10
c001a3a7:	55                   	push   ebp
c001a3a8:	57                   	push   edi
c001a3a9:	52                   	push   edx
c001a3aa:	50                   	push   eax
c001a3ab:	e8 7a f4 ff ff       	call   c001982a <Vm::fpuSub(unsigned long long, unsigned long long)>
c001a3b0:	eb 6a                	jmp    c001a41c <Vm::x87Handler(regs*)+0xa52>
c001a3b2:	66 90                	xchg   ax,ax
c001a3b4:	80 fa 06             	cmp    dl,0x6
c001a3b7:	75 2f                	jne    c001a3e8 <Vm::x87Handler(regs*)+0xa1e>
c001a3b9:	51                   	push   ecx
c001a3ba:	51                   	push   ecx
c001a3bb:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001a3be:	ff 36                	push   DWORD PTR [esi]
c001a3c0:	e8 43 f2 ff ff       	call   c0019608 <Vm::fpu64ToInternal(unsigned long long)>
c001a3c5:	8d 76 00             	lea    esi,[esi+0x0]
c001a3c8:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001a3cf:	89 c6                	mov    esi,eax
c001a3d1:	89 d7                	mov    edi,edx
c001a3d3:	e8 b2 f4 ff ff       	call   c001988a <Vm::fpuGetReg(int)>
c001a3d8:	57                   	push   edi
c001a3d9:	56                   	push   esi
c001a3da:	52                   	push   edx
c001a3db:	50                   	push   eax
c001a3dc:	e8 77 f4 ff ff       	call   c0019858 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001a3e1:	e9 9e 00 00 00       	jmp    c001a484 <Vm::x87Handler(regs*)+0xaba>
c001a3e6:	66 90                	xchg   ax,ax
c001a3e8:	31 c0                	xor    eax,eax
c001a3ea:	80 fa 07             	cmp    dl,0x7
c001a3ed:	0f 85 e9 00 00 00    	jne    c001a4dc <Vm::x87Handler(regs*)+0xb12>
c001a3f3:	83 ec 0c             	sub    esp,0xc
c001a3f6:	6a 00                	push   0x0
c001a3f8:	e8 8d f4 ff ff       	call   c001988a <Vm::fpuGetReg(int)>
c001a3fd:	89 c7                	mov    edi,eax
c001a3ff:	89 d5                	mov    ebp,edx
c001a401:	58                   	pop    eax
c001a402:	5a                   	pop    edx
c001a403:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001a406:	ff 36                	push   DWORD PTR [esi]
c001a408:	e8 fb f1 ff ff       	call   c0019608 <Vm::fpu64ToInternal(unsigned long long)>
c001a40d:	8d 76 00             	lea    esi,[esi+0x0]
c001a410:	83 c4 10             	add    esp,0x10
c001a413:	55                   	push   ebp
c001a414:	57                   	push   edi
c001a415:	52                   	push   edx
c001a416:	50                   	push   eax
c001a417:	e8 3c f4 ff ff       	call   c0019858 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001a41c:	83 c4 0c             	add    esp,0xc
c001a41f:	eb 67                	jmp    c001a488 <Vm::x87Handler(regs*)+0xabe>
c001a421:	8d 76 00             	lea    esi,[esi+0x0]
c001a424:	31 c0                	xor    eax,eax
c001a426:	80 fa 02             	cmp    dl,0x2
c001a429:	0f 85 ad 00 00 00    	jne    c001a4dc <Vm::x87Handler(regs*)+0xb12>
c001a42f:	83 ec 0c             	sub    esp,0xc
c001a432:	6a 00                	push   0x0
c001a434:	e8 51 f4 ff ff       	call   c001988a <Vm::fpuGetReg(int)>
c001a439:	59                   	pop    ecx
c001a43a:	5f                   	pop    edi
c001a43b:	90                   	nop
c001a43c:	52                   	push   edx
c001a43d:	50                   	push   eax
c001a43e:	e8 77 f1 ff ff       	call   c00195ba <Vm::fpuInternalTo64(unsigned long long)>
c001a443:	e9 84 00 00 00       	jmp    c001a4cc <Vm::x87Handler(regs*)+0xb02>
c001a448:	31 c0                	xor    eax,eax
c001a44a:	80 7c 24 0b 01       	cmp    BYTE PTR [esp+0xb],0x1
c001a44f:	0f 85 87 00 00 00    	jne    c001a4dc <Vm::x87Handler(regs*)+0xb12>
c001a455:	50                   	push   eax
c001a456:	50                   	push   eax
c001a457:	0f b7 06             	movzx  eax,WORD PTR [esi]
c001a45a:	66 90                	xchg   ax,ax
c001a45c:	31 d2                	xor    edx,edx
c001a45e:	52                   	push   edx
c001a45f:	50                   	push   eax
c001a460:	e8 47 f2 ff ff       	call   c00196ac <Vm::fpuLongToFloat(long long)>
c001a465:	8d 76 00             	lea    esi,[esi+0x0]
c001a468:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001a46f:	89 c6                	mov    esi,eax
c001a471:	89 d7                	mov    edi,edx
c001a473:	e8 12 f4 ff ff       	call   c001988a <Vm::fpuGetReg(int)>
c001a478:	57                   	push   edi
c001a479:	56                   	push   esi
c001a47a:	52                   	push   edx
c001a47b:	50                   	push   eax
c001a47c:	e8 b8 f3 ff ff       	call   c0019839 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001a481:	8d 76 00             	lea    esi,[esi+0x0]
c001a484:	83 c4 1c             	add    esp,0x1c
c001a487:	90                   	nop
c001a488:	52                   	push   edx
c001a489:	50                   	push   eax
c001a48a:	6a 00                	push   0x0
c001a48c:	e8 3c f4 ff ff       	call   c00198cd <Vm::fpuSetReg(int, unsigned long long)>
c001a491:	e9 7a f7 ff ff       	jmp    c0019c10 <Vm::x87Handler(regs*)+0x246>
c001a496:	66 90                	xchg   ax,ax
c001a498:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001a49c:	80 fa 05             	cmp    dl,0x5
c001a49f:	75 13                	jne    c001a4b4 <Vm::x87Handler(regs*)+0xaea>
c001a4a1:	55                   	push   ebp
c001a4a2:	55                   	push   ebp
c001a4a3:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001a4a6:	ff 36                	push   DWORD PTR [esi]
c001a4a8:	e8 c3 f1 ff ff       	call   c0019670 <Vm::fpuULongToFloat(unsigned long long)>
c001a4ad:	e9 52 f7 ff ff       	jmp    c0019c04 <Vm::x87Handler(regs*)+0x23a>
c001a4b2:	66 90                	xchg   ax,ax
c001a4b4:	31 c0                	xor    eax,eax
c001a4b6:	80 fa 07             	cmp    dl,0x7
c001a4b9:	75 21                	jne    c001a4dc <Vm::x87Handler(regs*)+0xb12>
c001a4bb:	e8 b7 f4 ff ff       	call   c0019977 <Vm::fpuPop()>
c001a4c0:	51                   	push   ecx
c001a4c1:	51                   	push   ecx
c001a4c2:	52                   	push   edx
c001a4c3:	50                   	push   eax
c001a4c4:	e8 48 f1 ff ff       	call   c0019611 <Vm::fpuFloatToLong(unsigned long long)>
c001a4c9:	8d 76 00             	lea    esi,[esi+0x0]
c001a4cc:	83 c4 10             	add    esp,0x10
c001a4cf:	89 06                	mov    DWORD PTR [esi],eax
c001a4d1:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c001a4d4:	e9 7b f7 ff ff       	jmp    c0019c54 <Vm::x87Handler(regs*)+0x28a>
c001a4d9:	8d 76 00             	lea    esi,[esi+0x0]
c001a4dc:	83 c4 1c             	add    esp,0x1c
c001a4df:	5b                   	pop    ebx
c001a4e0:	5e                   	pop    esi
c001a4e1:	5f                   	pop    edi
c001a4e2:	5d                   	pop    ebp
c001a4e3:	c3                   	ret    

c001a4e4 <__static_initialization_and_destruction_0(int, int)>:
c001a4e4:	83 ec 0c             	sub    esp,0xc
c001a4e7:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c001a4ec:	75 1a                	jne    c001a508 <__static_initialization_and_destruction_0(int, int)+0x24>
c001a4ee:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c001a4f6:	75 10                	jne    c001a508 <__static_initialization_and_destruction_0(int, int)+0x24>
c001a4f8:	83 ec 0c             	sub    esp,0xc
c001a4fb:	68 c0 79 02 c0       	push   0xc00279c0
c001a500:	e8 23 74 00 00       	call   c0021928 <Vm::_FPUState::_FPUState()>
c001a505:	83 c4 10             	add    esp,0x10
c001a508:	90                   	nop
c001a509:	83 c4 0c             	add    esp,0xc
c001a50c:	c3                   	ret    
c001a50d:	8d 76 00             	lea    esi,[esi+0x0]

c001a510 <_GLOBAL__sub_I__ZN2Vm8fpuStateE>:
c001a510:	83 ec 0c             	sub    esp,0xc
c001a513:	83 ec 08             	sub    esp,0x8
c001a516:	68 ff ff 00 00       	push   0xffff
c001a51b:	6a 01                	push   0x1
c001a51d:	e8 c2 ff ff ff       	call   c001a4e4 <__static_initialization_and_destruction_0(int, int)>
c001a522:	83 c4 10             	add    esp,0x10
c001a525:	83 c4 0c             	add    esp,0xc
c001a528:	c3                   	ret    
c001a529:	66 90                	xchg   ax,ax
c001a52b:	90                   	nop

c001a52c <FAT::getName()>:
c001a52c:	b8 60 4b 02 c0       	mov    eax,0xc0024b60
c001a531:	c3                   	ret    
c001a532:	66 90                	xchg   ax,ax

c001a534 <FAT::tell(void*, unsigned long long*)>:
c001a534:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001a539:	75 09                	jne    c001a544 <FAT::tell(void*, unsigned long long*)+0x10>
c001a53b:	b8 04 00 00 00       	mov    eax,0x4
c001a540:	c3                   	ret    
c001a541:	8d 76 00             	lea    esi,[esi+0x0]
c001a544:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001a549:	75 09                	jne    c001a554 <FAT::tell(void*, unsigned long long*)+0x20>
c001a54b:	b8 04 00 00 00       	mov    eax,0x4
c001a550:	c3                   	ret    
c001a551:	8d 76 00             	lea    esi,[esi+0x0]
c001a554:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a558:	8b 50 30             	mov    edx,DWORD PTR [eax+0x30]
c001a55b:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c001a55e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001a562:	89 01                	mov    DWORD PTR [ecx],eax
c001a564:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001a567:	b8 00 00 00 00       	mov    eax,0x0
c001a56c:	c3                   	ret    
c001a56d:	90                   	nop
c001a56e:	66 90                	xchg   ax,ax

c001a570 <FAT::stat(void*, unsigned long long*)>:
c001a570:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001a575:	75 09                	jne    c001a580 <FAT::stat(void*, unsigned long long*)+0x10>
c001a577:	b8 04 00 00 00       	mov    eax,0x4
c001a57c:	c3                   	ret    
c001a57d:	8d 76 00             	lea    esi,[esi+0x0]
c001a580:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001a585:	75 09                	jne    c001a590 <FAT::stat(void*, unsigned long long*)+0x20>
c001a587:	b8 04 00 00 00       	mov    eax,0x4
c001a58c:	c3                   	ret    
c001a58d:	8d 76 00             	lea    esi,[esi+0x0]
c001a590:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a594:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c001a597:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001a59a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001a59e:	89 01                	mov    DWORD PTR [ecx],eax
c001a5a0:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001a5a3:	b8 00 00 00 00       	mov    eax,0x0
c001a5a8:	c3                   	ret    
c001a5a9:	90                   	nop
c001a5aa:	66 90                	xchg   ax,ax

c001a5ac <FAT::~FAT()>:
c001a5ac:	83 ec 0c             	sub    esp,0xc
c001a5af:	ba ac 4b 02 c0       	mov    edx,0xc0024bac
c001a5b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a5b8:	89 10                	mov    DWORD PTR [eax],edx
c001a5ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a5be:	83 ec 0c             	sub    esp,0xc
c001a5c1:	50                   	push   eax
c001a5c2:	e8 33 28 ff ff       	call   c000cdfa <Filesystem::~Filesystem()>
c001a5c7:	83 c4 10             	add    esp,0x10
c001a5ca:	90                   	nop
c001a5cb:	83 c4 0c             	add    esp,0xc
c001a5ce:	c3                   	ret    
c001a5cf:	90                   	nop

c001a5d0 <FAT::~FAT()>:
c001a5d0:	83 ec 0c             	sub    esp,0xc
c001a5d3:	83 ec 0c             	sub    esp,0xc
c001a5d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a5da:	e8 cd ff ff ff       	call   c001a5ac <FAT::~FAT()>
c001a5df:	83 c4 10             	add    esp,0x10
c001a5e2:	83 ec 08             	sub    esp,0x8
c001a5e5:	6a 08                	push   0x8
c001a5e7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a5eb:	e8 ee 23 ff ff       	call   c000c9de <operator delete(void*, unsigned long)>
c001a5f0:	83 c4 10             	add    esp,0x10
c001a5f3:	83 c4 0c             	add    esp,0xc
c001a5f6:	c3                   	ret    
c001a5f7:	90                   	nop

c001a5f8 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c001a5f8:	83 ec 1c             	sub    esp,0x1c
c001a5fb:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c001a602:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c001a607:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001a60b:	8b 04 85 40 7a 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd85c0]
c001a612:	83 f8 ff             	cmp    eax,0xffffffff
c001a615:	75 35                	jne    c001a64c <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x54>
c001a617:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001a61b:	88 c2                	mov    dl,al
c001a61d:	a1 20 7a 02 c0       	mov    eax,ds:0xc0027a20
c001a622:	01 d0                	add    eax,edx
c001a624:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001a628:	8b 15 20 7a 02 c0    	mov    edx,DWORD PTR ds:0xc0027a20
c001a62e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001a632:	89 14 85 40 7a 02 c0 	mov    DWORD PTR [eax*4-0x3ffd85c0],edx
c001a639:	a1 20 7a 02 c0       	mov    eax,ds:0xc0027a20
c001a63e:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001a642:	89 14 85 c0 7a 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8540],edx
c001a649:	eb 19                	jmp    c001a664 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6c>
c001a64b:	90                   	nop
c001a64c:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001a650:	88 c2                	mov    dl,al
c001a652:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001a656:	8b 04 85 40 7a 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd85c0]
c001a65d:	01 d0                	add    eax,edx
c001a65f:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001a663:	90                   	nop
c001a664:	83 ec 04             	sub    esp,0x4
c001a667:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001a66b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001a66f:	8d 44 24 15          	lea    eax,[esp+0x15]
c001a673:	50                   	push   eax
c001a674:	e8 b9 c5 fe ff       	call   c0006c32 <f_getlabel>
c001a679:	83 c4 10             	add    esp,0x10
c001a67c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a680:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001a685:	75 09                	jne    c001a690 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x98>
c001a687:	b8 00 00 00 00       	mov    eax,0x0
c001a68c:	eb 0a                	jmp    c001a698 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0xa0>
c001a68e:	66 90                	xchg   ax,ax
c001a690:	b8 01 00 00 00       	mov    eax,0x1
c001a695:	8d 76 00             	lea    esi,[esi+0x0]
c001a698:	83 c4 1c             	add    esp,0x1c
c001a69b:	c3                   	ret    

c001a69c <FAT::setlabel(LogicalDisk*, int, char*)>:
c001a69c:	57                   	push   edi
c001a69d:	83 ec 58             	sub    esp,0x58
c001a6a0:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c001a6a8:	8d 54 24 10          	lea    edx,[esp+0x10]
c001a6ac:	b9 0f 00 00 00       	mov    ecx,0xf
c001a6b1:	b8 00 00 00 00       	mov    eax,0x0
c001a6b6:	fc                   	cld    
c001a6b7:	89 d7                	mov    edi,edx
c001a6b9:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001a6bb:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001a6bf:	8b 04 85 40 7a 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd85c0]
c001a6c6:	83 f8 ff             	cmp    eax,0xffffffff
c001a6c9:	75 35                	jne    c001a700 <FAT::setlabel(LogicalDisk*, int, char*)+0x64>
c001a6cb:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001a6cf:	88 c2                	mov    dl,al
c001a6d1:	a1 20 7a 02 c0       	mov    eax,ds:0xc0027a20
c001a6d6:	01 d0                	add    eax,edx
c001a6d8:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001a6dc:	8b 15 20 7a 02 c0    	mov    edx,DWORD PTR ds:0xc0027a20
c001a6e2:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001a6e6:	89 14 85 40 7a 02 c0 	mov    DWORD PTR [eax*4-0x3ffd85c0],edx
c001a6ed:	a1 20 7a 02 c0       	mov    eax,ds:0xc0027a20
c001a6f2:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c001a6f6:	89 14 85 c0 7a 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8540],edx
c001a6fd:	eb 19                	jmp    c001a718 <FAT::setlabel(LogicalDisk*, int, char*)+0x7c>
c001a6ff:	90                   	nop
c001a700:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001a704:	88 c2                	mov    dl,al
c001a706:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001a70a:	8b 04 85 40 7a 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd85c0]
c001a711:	01 d0                	add    eax,edx
c001a713:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001a717:	90                   	nop
c001a718:	83 ec 08             	sub    esp,0x8
c001a71b:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c001a71f:	8d 44 24 18          	lea    eax,[esp+0x18]
c001a723:	50                   	push   eax
c001a724:	e8 57 61 fe ff       	call   c0000880 <strcat>
c001a729:	83 c4 10             	add    esp,0x10
c001a72c:	83 ec 0c             	sub    esp,0xc
c001a72f:	8d 44 24 18          	lea    eax,[esp+0x18]
c001a733:	50                   	push   eax
c001a734:	e8 e7 c6 fe ff       	call   c0006e20 <f_setlabel>
c001a739:	83 c4 10             	add    esp,0x10
c001a73c:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001a740:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c001a745:	75 09                	jne    c001a750 <FAT::setlabel(LogicalDisk*, int, char*)+0xb4>
c001a747:	b8 00 00 00 00       	mov    eax,0x0
c001a74c:	eb 0a                	jmp    c001a758 <FAT::setlabel(LogicalDisk*, int, char*)+0xbc>
c001a74e:	66 90                	xchg   ax,ax
c001a750:	b8 01 00 00 00       	mov    eax,0x1
c001a755:	8d 76 00             	lea    esi,[esi+0x0]
c001a758:	83 c4 58             	add    esp,0x58
c001a75b:	5f                   	pop    edi
c001a75c:	c3                   	ret    
c001a75d:	90                   	nop
c001a75e:	66 90                	xchg   ax,ax

c001a760 <FAT::format(LogicalDisk*, int, char const*, int)>:
c001a760:	83 ec 2c             	sub    esp,0x2c
c001a763:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001a76b:	83 ec 08             	sub    esp,0x8
c001a76e:	68 84 4b 02 c0       	push   0xc0024b84
c001a773:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001a777:	e8 50 60 fe ff       	call   c00007cc <strcmp>
c001a77c:	83 c4 10             	add    esp,0x10
c001a77f:	85 c0                	test   eax,eax
c001a781:	0f 94 c0             	sete   al
c001a784:	84 c0                	test   al,al
c001a786:	74 10                	je     c001a798 <FAT::format(LogicalDisk*, int, char const*, int)+0x38>
c001a788:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001a790:	e9 b3 00 00 00       	jmp    c001a848 <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c001a795:	8d 76 00             	lea    esi,[esi+0x0]
c001a798:	83 ec 08             	sub    esp,0x8
c001a79b:	68 76 4b 02 c0       	push   0xc0024b76
c001a7a0:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001a7a4:	e8 23 60 fe ff       	call   c00007cc <strcmp>
c001a7a9:	83 c4 10             	add    esp,0x10
c001a7ac:	85 c0                	test   eax,eax
c001a7ae:	0f 94 c0             	sete   al
c001a7b1:	84 c0                	test   al,al
c001a7b3:	74 0f                	je     c001a7c4 <FAT::format(LogicalDisk*, int, char const*, int)+0x64>
c001a7b5:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001a7bd:	e9 86 00 00 00       	jmp    c001a848 <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c001a7c2:	66 90                	xchg   ax,ax
c001a7c4:	83 ec 08             	sub    esp,0x8
c001a7c7:	68 7c 4b 02 c0       	push   0xc0024b7c
c001a7cc:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001a7d0:	e8 f7 5f fe ff       	call   c00007cc <strcmp>
c001a7d5:	83 c4 10             	add    esp,0x10
c001a7d8:	85 c0                	test   eax,eax
c001a7da:	0f 94 c0             	sete   al
c001a7dd:	84 c0                	test   al,al
c001a7df:	74 0b                	je     c001a7ec <FAT::format(LogicalDisk*, int, char const*, int)+0x8c>
c001a7e1:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001a7e9:	eb 5d                	jmp    c001a848 <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c001a7eb:	90                   	nop
c001a7ec:	83 ec 08             	sub    esp,0x8
c001a7ef:	68 8c 20 02 c0       	push   0xc002208c
c001a7f4:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001a7f8:	e8 cf 5f fe ff       	call   c00007cc <strcmp>
c001a7fd:	83 c4 10             	add    esp,0x10
c001a800:	85 c0                	test   eax,eax
c001a802:	0f 94 c0             	sete   al
c001a805:	84 c0                	test   al,al
c001a807:	74 0b                	je     c001a814 <FAT::format(LogicalDisk*, int, char const*, int)+0xb4>
c001a809:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c001a811:	eb 35                	jmp    c001a848 <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c001a813:	90                   	nop
c001a814:	83 ec 08             	sub    esp,0x8
c001a817:	68 82 4b 02 c0       	push   0xc0024b82
c001a81c:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001a820:	e8 a7 5f fe ff       	call   c00007cc <strcmp>
c001a825:	83 c4 10             	add    esp,0x10
c001a828:	85 c0                	test   eax,eax
c001a82a:	0f 94 c0             	sete   al
c001a82d:	84 c0                	test   al,al
c001a82f:	74 0b                	je     c001a83c <FAT::format(LogicalDisk*, int, char const*, int)+0xdc>
c001a831:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c001a839:	eb 0d                	jmp    c001a848 <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c001a83b:	90                   	nop
c001a83c:	b8 08 00 00 00       	mov    eax,0x8
c001a841:	e9 ea 00 00 00       	jmp    c001a930 <FAT::format(LogicalDisk*, int, char const*, int)+0x1d0>
c001a846:	66 90                	xchg   ax,ax
c001a848:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c001a84f:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c001a854:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a858:	8b 04 85 40 7a 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd85c0]
c001a85f:	83 f8 ff             	cmp    eax,0xffffffff
c001a862:	75 34                	jne    c001a898 <FAT::format(LogicalDisk*, int, char const*, int)+0x138>
c001a864:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001a868:	88 c2                	mov    dl,al
c001a86a:	a1 20 7a 02 c0       	mov    eax,ds:0xc0027a20
c001a86f:	01 d0                	add    eax,edx
c001a871:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c001a875:	8b 15 20 7a 02 c0    	mov    edx,DWORD PTR ds:0xc0027a20
c001a87b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a87f:	89 14 85 40 7a 02 c0 	mov    DWORD PTR [eax*4-0x3ffd85c0],edx
c001a886:	a1 20 7a 02 c0       	mov    eax,ds:0xc0027a20
c001a88b:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001a88f:	89 14 85 c0 7a 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8540],edx
c001a896:	eb 18                	jmp    c001a8b0 <FAT::format(LogicalDisk*, int, char const*, int)+0x150>
c001a898:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001a89c:	88 c2                	mov    dl,al
c001a89e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a8a2:	8b 04 85 40 7a 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd85c0]
c001a8a9:	01 d0                	add    eax,edx
c001a8ab:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c001a8af:	90                   	nop
c001a8b0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a8b4:	88 04 24             	mov    BYTE PTR [esp],al
c001a8b7:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001a8bb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a8bf:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001a8c7:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c001a8cc:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001a8d4:	83 ec 0c             	sub    esp,0xc
c001a8d7:	68 00 20 00 00       	push   0x2000
c001a8dc:	e8 e2 f0 fe ff       	call   c00099c3 <malloc>
c001a8e1:	83 c4 10             	add    esp,0x10
c001a8e4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001a8e8:	68 00 20 00 00       	push   0x2000
c001a8ed:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a8f1:	8d 44 24 08          	lea    eax,[esp+0x8]
c001a8f5:	50                   	push   eax
c001a8f6:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c001a8fa:	50                   	push   eax
c001a8fb:	e8 a1 cb fe ff       	call   c00074a1 <f_mkfs>
c001a900:	83 c4 10             	add    esp,0x10
c001a903:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001a907:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001a90c:	75 0a                	jne    c001a918 <FAT::format(LogicalDisk*, int, char const*, int)+0x1b8>
c001a90e:	b8 00 00 00 00       	mov    eax,0x0
c001a913:	eb 1b                	jmp    c001a930 <FAT::format(LogicalDisk*, int, char const*, int)+0x1d0>
c001a915:	8d 76 00             	lea    esi,[esi+0x0]
c001a918:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c001a91d:	75 09                	jne    c001a928 <FAT::format(LogicalDisk*, int, char const*, int)+0x1c8>
c001a91f:	b8 09 00 00 00       	mov    eax,0x9
c001a924:	eb 0a                	jmp    c001a930 <FAT::format(LogicalDisk*, int, char const*, int)+0x1d0>
c001a926:	66 90                	xchg   ax,ax
c001a928:	b8 01 00 00 00       	mov    eax,0x1
c001a92d:	8d 76 00             	lea    esi,[esi+0x0]
c001a930:	83 c4 2c             	add    esp,0x2c
c001a933:	c3                   	ret    

c001a934 <FAT::tryMount(LogicalDisk*, int)>:
c001a934:	81 ec 6c 03 00 00    	sub    esp,0x36c
c001a93a:	a1 20 7a 02 c0       	mov    eax,ds:0xc0027a20
c001a93f:	83 f8 14             	cmp    eax,0x14
c001a942:	75 18                	jne    c001a95c <FAT::tryMount(LogicalDisk*, int)+0x28>
c001a944:	83 ec 0c             	sub    esp,0xc
c001a947:	68 88 4b 02 c0       	push   0xc0024b88
c001a94c:	e8 30 9a ff ff       	call   c0014381 <Krnl::panic(char const*)>
c001a951:	83 c4 10             	add    esp,0x10
c001a954:	b0 00                	mov    al,0x0
c001a956:	e9 e9 01 00 00       	jmp    c001ab44 <FAT::tryMount(LogicalDisk*, int)+0x210>
c001a95b:	90                   	nop
c001a95c:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c001a963:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001a969:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001a96f:	3d 00 02 00 00       	cmp    eax,0x200
c001a974:	74 0a                	je     c001a980 <FAT::tryMount(LogicalDisk*, int)+0x4c>
c001a976:	b0 00                	mov    al,0x0
c001a978:	e9 c7 01 00 00       	jmp    c001ab44 <FAT::tryMount(LogicalDisk*, int)+0x210>
c001a97d:	8d 76 00             	lea    esi,[esi+0x0]
c001a980:	c6 84 24 5f 03 00 00 00 	mov    BYTE PTR [esp+0x35f],0x0
c001a988:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c001a98f:	8b 04 85 40 7a 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd85c0]
c001a996:	83 f8 ff             	cmp    eax,0xffffffff
c001a999:	74 09                	je     c001a9a4 <FAT::tryMount(LogicalDisk*, int)+0x70>
c001a99b:	b0 01                	mov    al,0x1
c001a99d:	e9 a2 01 00 00       	jmp    c001ab44 <FAT::tryMount(LogicalDisk*, int)+0x210>
c001a9a2:	66 90                	xchg   ax,ax
c001a9a4:	66 c7 84 24 51 03 00 00 30 3a 	mov    WORD PTR [esp+0x351],0x3a30
c001a9ae:	c6 84 24 53 03 00 00 00 	mov    BYTE PTR [esp+0x353],0x0
c001a9b6:	8a 84 24 51 03 00 00 	mov    al,BYTE PTR [esp+0x351]
c001a9bd:	88 c2                	mov    dl,al
c001a9bf:	a1 20 7a 02 c0       	mov    eax,ds:0xc0027a20
c001a9c4:	01 d0                	add    eax,edx
c001a9c6:	88 84 24 51 03 00 00 	mov    BYTE PTR [esp+0x351],al
c001a9cd:	8b 15 20 7a 02 c0    	mov    edx,DWORD PTR ds:0xc0027a20
c001a9d3:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c001a9da:	89 14 85 40 7a 02 c0 	mov    DWORD PTR [eax*4-0x3ffd85c0],edx
c001a9e1:	a1 20 7a 02 c0       	mov    eax,ds:0xc0027a20
c001a9e6:	8b 94 24 78 03 00 00 	mov    edx,DWORD PTR [esp+0x378]
c001a9ed:	89 14 85 c0 7a 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8540],edx
c001a9f4:	83 ec 0c             	sub    esp,0xc
c001a9f7:	68 54 02 00 00       	push   0x254
c001a9fc:	e8 c2 ef fe ff       	call   c00099c3 <malloc>
c001aa01:	83 c4 10             	add    esp,0x10
c001aa04:	89 84 24 58 03 00 00 	mov    DWORD PTR [esp+0x358],eax
c001aa0b:	83 ec 04             	sub    esp,0x4
c001aa0e:	6a 00                	push   0x0
c001aa10:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c001aa17:	50                   	push   eax
c001aa18:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c001aa1f:	e8 05 a4 fe ff       	call   c0004e29 <f_mount>
c001aa24:	83 c4 10             	add    esp,0x10
c001aa27:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c001aa2e:	83 bc 24 54 03 00 00 00 	cmp    DWORD PTR [esp+0x354],0x0
c001aa36:	74 1c                	je     c001aa54 <FAT::tryMount(LogicalDisk*, int)+0x120>
c001aa38:	83 ec 0c             	sub    esp,0xc
c001aa3b:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c001aa42:	e8 9c ef fe ff       	call   c00099e3 <rfree>
c001aa47:	83 c4 10             	add    esp,0x10
c001aa4a:	b0 00                	mov    al,0x0
c001aa4c:	e9 f3 00 00 00       	jmp    c001ab44 <FAT::tryMount(LogicalDisk*, int)+0x210>
c001aa51:	8d 76 00             	lea    esi,[esi+0x0]
c001aa54:	83 ec 04             	sub    esp,0x4
c001aa57:	68 00 01 00 00       	push   0x100
c001aa5c:	6a 00                	push   0x0
c001aa5e:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c001aa65:	50                   	push   eax
c001aa66:	e8 19 5c fe ff       	call   c0000684 <memset>
c001aa6b:	83 c4 10             	add    esp,0x10
c001aa6e:	83 ec 08             	sub    esp,0x8
c001aa71:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c001aa78:	50                   	push   eax
c001aa79:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c001aa80:	50                   	push   eax
c001aa81:	e8 fa 5d fe ff       	call   c0000880 <strcat>
c001aa86:	83 c4 10             	add    esp,0x10
c001aa89:	83 ec 08             	sub    esp,0x8
c001aa8c:	68 96 4b 02 c0       	push   0xc0024b96
c001aa91:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c001aa98:	50                   	push   eax
c001aa99:	e8 e2 5d fe ff       	call   c0000880 <strcat>
c001aa9e:	83 c4 10             	add    esp,0x10
c001aaa1:	83 ec 04             	sub    esp,0x4
c001aaa4:	6a 01                	push   0x1
c001aaa6:	8d 84 24 59 02 00 00 	lea    eax,[esp+0x259]
c001aaad:	50                   	push   eax
c001aaae:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001aab2:	50                   	push   eax
c001aab3:	e8 d3 a3 fe ff       	call   c0004e8b <f_open>
c001aab8:	83 c4 10             	add    esp,0x10
c001aabb:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c001aac2:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c001aac9:	85 c0                	test   eax,eax
c001aacb:	74 0b                	je     c001aad8 <FAT::tryMount(LogicalDisk*, int)+0x1a4>
c001aacd:	78 31                	js     c001ab00 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c001aacf:	83 e8 04             	sub    eax,0x4
c001aad2:	83 f8 01             	cmp    eax,0x1
c001aad5:	77 29                	ja     c001ab00 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c001aad7:	90                   	nop
c001aad8:	c6 84 24 5f 03 00 00 01 	mov    BYTE PTR [esp+0x35f],0x1
c001aae0:	83 ec 0c             	sub    esp,0xc
c001aae3:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001aae7:	50                   	push   eax
c001aae8:	e8 f0 ae fe ff       	call   c00059dd <f_close>
c001aaed:	83 c4 10             	add    esp,0x10
c001aaf0:	90                   	nop
c001aaf1:	80 bc 24 5f 03 00 00 00 	cmp    BYTE PTR [esp+0x35f],0x0
c001aaf9:	74 41                	je     c001ab3c <FAT::tryMount(LogicalDisk*, int)+0x208>
c001aafb:	eb 33                	jmp    c001ab30 <FAT::tryMount(LogicalDisk*, int)+0x1fc>
c001aafd:	8d 76 00             	lea    esi,[esi+0x0]
c001ab00:	83 ec 0c             	sub    esp,0xc
c001ab03:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c001ab0a:	e8 d4 ee fe ff       	call   c00099e3 <rfree>
c001ab0f:	83 c4 10             	add    esp,0x10
c001ab12:	83 ec 04             	sub    esp,0x4
c001ab15:	6a 00                	push   0x0
c001ab17:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c001ab1e:	50                   	push   eax
c001ab1f:	6a 00                	push   0x0
c001ab21:	e8 03 a3 fe ff       	call   c0004e29 <f_mount>
c001ab26:	83 c4 10             	add    esp,0x10
c001ab29:	b0 00                	mov    al,0x0
c001ab2b:	eb 17                	jmp    c001ab44 <FAT::tryMount(LogicalDisk*, int)+0x210>
c001ab2d:	8d 76 00             	lea    esi,[esi+0x0]
c001ab30:	a1 20 7a 02 c0       	mov    eax,ds:0xc0027a20
c001ab35:	40                   	inc    eax
c001ab36:	a3 20 7a 02 c0       	mov    ds:0xc0027a20,eax
c001ab3b:	90                   	nop
c001ab3c:	8a 84 24 5f 03 00 00 	mov    al,BYTE PTR [esp+0x35f]
c001ab43:	90                   	nop
c001ab44:	81 c4 6c 03 00 00    	add    esp,0x36c
c001ab4a:	c3                   	ret    
c001ab4b:	90                   	nop

c001ab4c <FAT::allocateSwapfile(char const*, int)>:
c001ab4c:	55                   	push   ebp
c001ab4d:	57                   	push   edi
c001ab4e:	56                   	push   esi
c001ab4f:	53                   	push   ebx
c001ab50:	81 ec 3c 04 00 00    	sub    esp,0x43c
c001ab56:	c7 84 24 20 04 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x420],0x114
c001ab61:	83 ec 0c             	sub    esp,0xc
c001ab64:	ff b4 24 2c 04 00 00 	push   DWORD PTR [esp+0x42c]
c001ab6b:	e8 53 ee fe ff       	call   c00099c3 <malloc>
c001ab70:	83 c4 10             	add    esp,0x10
c001ab73:	89 c7                	mov    edi,eax
c001ab75:	a1 50 79 02 c0       	mov    eax,ds:0xc0027950
c001ab7a:	83 ec 04             	sub    esp,0x4
c001ab7d:	50                   	push   eax
c001ab7e:	ff b4 24 5c 04 00 00 	push   DWORD PTR [esp+0x45c]
c001ab85:	57                   	push   edi
c001ab86:	e8 9f 24 ff ff       	call   c000d02a <File::File(char const*, Process*)>
c001ab8b:	83 c4 10             	add    esp,0x10
c001ab8e:	89 bc 24 2c 04 00 00 	mov    DWORD PTR [esp+0x42c],edi
c001ab95:	83 ec 04             	sub    esp,0x4
c001ab98:	8d 44 24 13          	lea    eax,[esp+0x13]
c001ab9c:	50                   	push   eax
c001ab9d:	8d 44 24 18          	lea    eax,[esp+0x18]
c001aba1:	50                   	push   eax
c001aba2:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001aba9:	e8 8c 27 ff ff       	call   c000d33a <File::stat(unsigned long long*, bool*)>
c001abae:	83 c4 10             	add    esp,0x10
c001abb1:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c001abb8:	c1 e0 14             	shl    eax,0x14
c001abbb:	89 c7                	mov    edi,eax
c001abbd:	89 c5                	mov    ebp,eax
c001abbf:	c1 fd 1f             	sar    ebp,0x1f
c001abc2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001abc6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001abca:	89 f9                	mov    ecx,edi
c001abcc:	31 c1                	xor    ecx,eax
c001abce:	89 cb                	mov    ebx,ecx
c001abd0:	89 e9                	mov    ecx,ebp
c001abd2:	31 d1                	xor    ecx,edx
c001abd4:	89 ce                	mov    esi,ecx
c001abd6:	89 f0                	mov    eax,esi
c001abd8:	09 d8                	or     eax,ebx
c001abda:	0f 84 98 00 00 00    	je     c001ac78 <FAT::allocateSwapfile(char const*, int)+0x12c>
c001abe0:	83 ec 0c             	sub    esp,0xc
c001abe3:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001abea:	e8 17 26 ff ff       	call   c000d206 <File::unlink()>
c001abef:	83 c4 10             	add    esp,0x10
c001abf2:	83 ec 08             	sub    esp,0x8
c001abf5:	6a 12                	push   0x12
c001abf7:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001abfe:	e8 8b 24 ff ff       	call   c000d08e <File::open(FileOpenMode)>
c001ac03:	83 c4 10             	add    esp,0x10
c001ac06:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001ac0d:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c001ac13:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c001ac1a:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c001ac21:	c1 e0 14             	shl    eax,0x14
c001ac24:	99                   	cdq    
c001ac25:	6a 01                	push   0x1
c001ac27:	52                   	push   edx
c001ac28:	50                   	push   eax
c001ac29:	ff b4 24 34 04 00 00 	push   DWORD PTR [esp+0x434]
c001ac30:	e8 58 c4 fe ff       	call   c000708d <f_expand>
c001ac35:	83 c4 10             	add    esp,0x10
c001ac38:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001ac3f:	8b 00                	mov    eax,DWORD PTR [eax]
c001ac41:	83 c0 10             	add    eax,0x10
c001ac44:	8b 00                	mov    eax,DWORD PTR [eax]
c001ac46:	83 ec 0c             	sub    esp,0xc
c001ac49:	8d 54 24 24          	lea    edx,[esp+0x24]
c001ac4d:	52                   	push   edx
c001ac4e:	8d 54 24 30          	lea    edx,[esp+0x30]
c001ac52:	52                   	push   edx
c001ac53:	6a 00                	push   0x0
c001ac55:	68 00 04 00 00       	push   0x400
c001ac5a:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c001ac61:	ff d0                	call   eax
c001ac63:	83 c4 20             	add    esp,0x20
c001ac66:	83 ec 0c             	sub    esp,0xc
c001ac69:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001ac70:	e8 77 24 ff ff       	call   c000d0ec <File::close()>
c001ac75:	83 c4 10             	add    esp,0x10
c001ac78:	83 ec 08             	sub    esp,0x8
c001ac7b:	6a 01                	push   0x1
c001ac7d:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001ac84:	e8 05 24 ff ff       	call   c000d08e <File::open(FileOpenMode)>
c001ac89:	83 c4 10             	add    esp,0x10
c001ac8c:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001ac93:	8b 00                	mov    eax,DWORD PTR [eax]
c001ac95:	83 c0 0c             	add    eax,0xc
c001ac98:	8b 00                	mov    eax,DWORD PTR [eax]
c001ac9a:	83 ec 0c             	sub    esp,0xc
c001ac9d:	8d 54 24 24          	lea    edx,[esp+0x24]
c001aca1:	52                   	push   edx
c001aca2:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c001aca6:	52                   	push   edx
c001aca7:	6a 00                	push   0x0
c001aca9:	6a 04                	push   0x4
c001acab:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c001acb2:	ff d0                	call   eax
c001acb4:	83 c4 20             	add    esp,0x20
c001acb7:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001acbe:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c001acc4:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c001accb:	8b 84 24 28 04 00 00 	mov    eax,DWORD PTR [esp+0x428]
c001acd2:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c001acd5:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001acd8:	89 84 24 24 04 00 00 	mov    DWORD PTR [esp+0x424],eax
c001acdf:	83 ec 0c             	sub    esp,0xc
c001ace2:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001ace9:	e8 fe 23 ff ff       	call   c000d0ec <File::close()>
c001acee:	83 c4 10             	add    esp,0x10
c001acf1:	8b 84 24 24 04 00 00 	mov    eax,DWORD PTR [esp+0x424]
c001acf8:	ba 00 00 00 00       	mov    edx,0x0
c001acfd:	81 c4 3c 04 00 00    	add    esp,0x43c
c001ad03:	5b                   	pop    ebx
c001ad04:	5e                   	pop    esi
c001ad05:	5f                   	pop    edi
c001ad06:	5d                   	pop    ebp
c001ad07:	c3                   	ret    

c001ad08 <FAT::readDir(void*, unsigned long, void*, int*)>:
c001ad08:	57                   	push   edi
c001ad09:	56                   	push   esi
c001ad0a:	53                   	push   ebx
c001ad0b:	81 ec 50 02 00 00    	sub    esp,0x250
c001ad11:	83 bc 24 64 02 00 00 00 	cmp    DWORD PTR [esp+0x264],0x0
c001ad19:	74 0d                	je     c001ad28 <FAT::readDir(void*, unsigned long, void*, int*)+0x20>
c001ad1b:	83 bc 24 70 02 00 00 00 	cmp    DWORD PTR [esp+0x270],0x0
c001ad23:	75 0f                	jne    c001ad34 <FAT::readDir(void*, unsigned long, void*, int*)+0x2c>
c001ad25:	8d 76 00             	lea    esi,[esi+0x0]
c001ad28:	b8 04 00 00 00       	mov    eax,0x4
c001ad2d:	e9 36 01 00 00       	jmp    c001ae68 <FAT::readDir(void*, unsigned long, void*, int*)+0x160>
c001ad32:	66 90                	xchg   ax,ax
c001ad34:	83 ec 08             	sub    esp,0x8
c001ad37:	8d 84 24 1c 01 00 00 	lea    eax,[esp+0x11c]
c001ad3e:	50                   	push   eax
c001ad3f:	ff b4 24 70 02 00 00 	push   DWORD PTR [esp+0x270]
c001ad46:	e8 9c b2 fe ff       	call   c0005fe7 <f_readdir>
c001ad4b:	83 c4 10             	add    esp,0x10
c001ad4e:	89 84 24 4c 02 00 00 	mov    DWORD PTR [esp+0x24c],eax
c001ad55:	66 c7 44 24 04 00 00 	mov    WORD PTR [esp+0x4],0x0
c001ad5c:	83 ec 0c             	sub    esp,0xc
c001ad5f:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c001ad66:	83 c0 1a             	add    eax,0x1a
c001ad69:	50                   	push   eax
c001ad6a:	e8 31 59 fe ff       	call   c00006a0 <strlen>
c001ad6f:	83 c4 10             	add    esp,0x10
c001ad72:	ba 00 00 00 00       	mov    edx,0x0
c001ad77:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001ad7b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001ad7f:	8a 84 24 20 01 00 00 	mov    al,BYTE PTR [esp+0x120]
c001ad86:	0f b6 c0             	movzx  eax,al
c001ad89:	83 e0 10             	and    eax,0x10
c001ad8c:	74 0a                	je     c001ad98 <FAT::readDir(void*, unsigned long, void*, int*)+0x90>
c001ad8e:	b8 02 00 00 00       	mov    eax,0x2
c001ad93:	eb 0b                	jmp    c001ada0 <FAT::readDir(void*, unsigned long, void*, int*)+0x98>
c001ad95:	8d 76 00             	lea    esi,[esi+0x0]
c001ad98:	b8 01 00 00 00       	mov    eax,0x1
c001ad9d:	8d 76 00             	lea    esi,[esi+0x0]
c001ada0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001ada4:	83 ec 08             	sub    esp,0x8
c001ada7:	8d 84 24 1c 01 00 00 	lea    eax,[esp+0x11c]
c001adae:	83 c0 1a             	add    eax,0x1a
c001adb1:	50                   	push   eax
c001adb2:	8d 44 24 10          	lea    eax,[esp+0x10]
c001adb6:	83 c0 10             	add    eax,0x10
c001adb9:	50                   	push   eax
c001adba:	e8 81 59 fe ff       	call   c0000740 <strcpy>
c001adbf:	83 c4 10             	add    esp,0x10
c001adc2:	8b 84 24 6c 02 00 00 	mov    eax,DWORD PTR [esp+0x26c]
c001adc9:	89 84 24 48 02 00 00 	mov    DWORD PTR [esp+0x248],eax
c001add0:	8d 44 24 04          	lea    eax,[esp+0x4]
c001add4:	89 84 24 44 02 00 00 	mov    DWORD PTR [esp+0x244],eax
c001addb:	8b 84 24 68 02 00 00 	mov    eax,DWORD PTR [esp+0x268]
c001ade2:	89 84 24 40 02 00 00 	mov    DWORD PTR [esp+0x240],eax
c001ade9:	8b 84 24 48 02 00 00 	mov    eax,DWORD PTR [esp+0x248]
c001adf0:	89 84 24 3c 02 00 00 	mov    DWORD PTR [esp+0x23c],eax
c001adf7:	8b 84 24 44 02 00 00 	mov    eax,DWORD PTR [esp+0x244]
c001adfe:	8b 94 24 48 02 00 00 	mov    edx,DWORD PTR [esp+0x248]
c001ae05:	8b 8c 24 40 02 00 00 	mov    ecx,DWORD PTR [esp+0x240]
c001ae0c:	89 c6                	mov    esi,eax
c001ae0e:	89 d7                	mov    edi,edx
c001ae10:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001ae12:	89 c8                	mov    eax,ecx
c001ae14:	89 fa                	mov    edx,edi
c001ae16:	89 f3                	mov    ebx,esi
c001ae18:	89 9c 24 38 02 00 00 	mov    DWORD PTR [esp+0x238],ebx
c001ae1f:	89 94 24 34 02 00 00 	mov    DWORD PTR [esp+0x234],edx
c001ae26:	89 84 24 30 02 00 00 	mov    DWORD PTR [esp+0x230],eax
c001ae2d:	8b 84 24 70 02 00 00 	mov    eax,DWORD PTR [esp+0x270]
c001ae34:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c001ae3a:	8a 84 24 2e 01 00 00 	mov    al,BYTE PTR [esp+0x12e]
c001ae41:	84 c0                	test   al,al
c001ae43:	75 07                	jne    c001ae4c <FAT::readDir(void*, unsigned long, void*, int*)+0x144>
c001ae45:	b8 07 00 00 00       	mov    eax,0x7
c001ae4a:	eb 1c                	jmp    c001ae68 <FAT::readDir(void*, unsigned long, void*, int*)+0x160>
c001ae4c:	8b 84 24 4c 02 00 00 	mov    eax,DWORD PTR [esp+0x24c]
c001ae53:	85 c0                	test   eax,eax
c001ae55:	75 09                	jne    c001ae60 <FAT::readDir(void*, unsigned long, void*, int*)+0x158>
c001ae57:	b8 00 00 00 00       	mov    eax,0x0
c001ae5c:	eb 0a                	jmp    c001ae68 <FAT::readDir(void*, unsigned long, void*, int*)+0x160>
c001ae5e:	66 90                	xchg   ax,ax
c001ae60:	b8 01 00 00 00       	mov    eax,0x1
c001ae65:	8d 76 00             	lea    esi,[esi+0x0]
c001ae68:	81 c4 50 02 00 00    	add    esp,0x250
c001ae6e:	5b                   	pop    ebx
c001ae6f:	5e                   	pop    esi
c001ae70:	5f                   	pop    edi
c001ae71:	c3                   	ret    
c001ae72:	66 90                	xchg   ax,ax

c001ae74 <FAT::read(void*, unsigned long, void*, int*)>:
c001ae74:	83 ec 1c             	sub    esp,0x1c
c001ae77:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001ae7c:	74 0a                	je     c001ae88 <FAT::read(void*, unsigned long, void*, int*)+0x14>
c001ae7e:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c001ae83:	75 0b                	jne    c001ae90 <FAT::read(void*, unsigned long, void*, int*)+0x1c>
c001ae85:	8d 76 00             	lea    esi,[esi+0x0]
c001ae88:	b8 04 00 00 00       	mov    eax,0x4
c001ae8d:	eb 41                	jmp    c001aed0 <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c001ae8f:	90                   	nop
c001ae90:	8d 44 24 08          	lea    eax,[esp+0x8]
c001ae94:	50                   	push   eax
c001ae95:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ae99:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001ae9d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001aea1:	e8 21 a4 fe ff       	call   c00052c7 <f_read>
c001aea6:	83 c4 10             	add    esp,0x10
c001aea9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001aead:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001aeb1:	89 c2                	mov    edx,eax
c001aeb3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001aeb7:	89 10                	mov    DWORD PTR [eax],edx
c001aeb9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001aebd:	85 c0                	test   eax,eax
c001aebf:	75 07                	jne    c001aec8 <FAT::read(void*, unsigned long, void*, int*)+0x54>
c001aec1:	b8 00 00 00 00       	mov    eax,0x0
c001aec6:	eb 08                	jmp    c001aed0 <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c001aec8:	b8 01 00 00 00       	mov    eax,0x1
c001aecd:	8d 76 00             	lea    esi,[esi+0x0]
c001aed0:	83 c4 1c             	add    esp,0x1c
c001aed3:	c3                   	ret    

c001aed4 <FAT::write(void*, unsigned long, void*, int*)>:
c001aed4:	83 ec 1c             	sub    esp,0x1c
c001aed7:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001aedc:	74 0a                	je     c001aee8 <FAT::write(void*, unsigned long, void*, int*)+0x14>
c001aede:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c001aee3:	75 0b                	jne    c001aef0 <FAT::write(void*, unsigned long, void*, int*)+0x1c>
c001aee5:	8d 76 00             	lea    esi,[esi+0x0]
c001aee8:	b8 04 00 00 00       	mov    eax,0x4
c001aeed:	eb 41                	jmp    c001af30 <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c001aeef:	90                   	nop
c001aef0:	8d 44 24 08          	lea    eax,[esp+0x8]
c001aef4:	50                   	push   eax
c001aef5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001aef9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001aefd:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001af01:	e8 41 a6 fe ff       	call   c0005547 <f_write>
c001af06:	83 c4 10             	add    esp,0x10
c001af09:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001af0d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001af11:	89 c2                	mov    edx,eax
c001af13:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001af17:	89 10                	mov    DWORD PTR [eax],edx
c001af19:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001af1d:	85 c0                	test   eax,eax
c001af1f:	75 07                	jne    c001af28 <FAT::write(void*, unsigned long, void*, int*)+0x54>
c001af21:	b8 00 00 00 00       	mov    eax,0x0
c001af26:	eb 08                	jmp    c001af30 <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c001af28:	b8 01 00 00 00       	mov    eax,0x1
c001af2d:	8d 76 00             	lea    esi,[esi+0x0]
c001af30:	83 c4 1c             	add    esp,0x1c
c001af33:	c3                   	ret    

c001af34 <FAT::close(void*)>:
c001af34:	83 ec 1c             	sub    esp,0x1c
c001af37:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001af3c:	75 0a                	jne    c001af48 <FAT::close(void*)+0x14>
c001af3e:	b8 04 00 00 00       	mov    eax,0x4
c001af43:	eb 3f                	jmp    c001af84 <FAT::close(void*)+0x50>
c001af45:	8d 76 00             	lea    esi,[esi+0x0]
c001af48:	83 ec 0c             	sub    esp,0xc
c001af4b:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001af4f:	e8 89 aa fe ff       	call   c00059dd <f_close>
c001af54:	83 c4 10             	add    esp,0x10
c001af57:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001af5b:	83 ec 0c             	sub    esp,0xc
c001af5e:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001af62:	e8 6c ea fe ff       	call   c00099d3 <free>
c001af67:	83 c4 10             	add    esp,0x10
c001af6a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001af6e:	85 c0                	test   eax,eax
c001af70:	75 0a                	jne    c001af7c <FAT::close(void*)+0x48>
c001af72:	b8 00 00 00 00       	mov    eax,0x0
c001af77:	eb 0b                	jmp    c001af84 <FAT::close(void*)+0x50>
c001af79:	8d 76 00             	lea    esi,[esi+0x0]
c001af7c:	b8 01 00 00 00       	mov    eax,0x1
c001af81:	8d 76 00             	lea    esi,[esi+0x0]
c001af84:	83 c4 1c             	add    esp,0x1c
c001af87:	c3                   	ret    

c001af88 <FAT::closeDir(void*)>:
c001af88:	83 ec 1c             	sub    esp,0x1c
c001af8b:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001af90:	75 0a                	jne    c001af9c <FAT::closeDir(void*)+0x14>
c001af92:	b8 04 00 00 00       	mov    eax,0x4
c001af97:	eb 3f                	jmp    c001afd8 <FAT::closeDir(void*)+0x50>
c001af99:	8d 76 00             	lea    esi,[esi+0x0]
c001af9c:	83 ec 0c             	sub    esp,0xc
c001af9f:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001afa3:	e8 1d b0 fe ff       	call   c0005fc5 <f_closedir>
c001afa8:	83 c4 10             	add    esp,0x10
c001afab:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001afaf:	83 ec 0c             	sub    esp,0xc
c001afb2:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001afb6:	e8 18 ea fe ff       	call   c00099d3 <free>
c001afbb:	83 c4 10             	add    esp,0x10
c001afbe:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001afc2:	85 c0                	test   eax,eax
c001afc4:	75 0a                	jne    c001afd0 <FAT::closeDir(void*)+0x48>
c001afc6:	b8 00 00 00 00       	mov    eax,0x0
c001afcb:	eb 0b                	jmp    c001afd8 <FAT::closeDir(void*)+0x50>
c001afcd:	8d 76 00             	lea    esi,[esi+0x0]
c001afd0:	b8 01 00 00 00       	mov    eax,0x1
c001afd5:	8d 76 00             	lea    esi,[esi+0x0]
c001afd8:	83 c4 1c             	add    esp,0x1c
c001afdb:	c3                   	ret    

c001afdc <FAT::seek(void*, unsigned long long)>:
c001afdc:	83 ec 2c             	sub    esp,0x2c
c001afdf:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001afe3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001afe7:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001afeb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001afef:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c001aff4:	75 0a                	jne    c001b000 <FAT::seek(void*, unsigned long long)+0x24>
c001aff6:	b8 04 00 00 00       	mov    eax,0x4
c001affb:	eb 37                	jmp    c001b034 <FAT::seek(void*, unsigned long long)+0x58>
c001affd:	8d 76 00             	lea    esi,[esi+0x0]
c001b000:	83 ec 04             	sub    esp,0x4
c001b003:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001b007:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001b00b:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001b00f:	e8 f8 a9 fe ff       	call   c0005a0c <f_lseek>
c001b014:	83 c4 10             	add    esp,0x10
c001b017:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001b01b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b01f:	85 c0                	test   eax,eax
c001b021:	75 09                	jne    c001b02c <FAT::seek(void*, unsigned long long)+0x50>
c001b023:	b8 00 00 00 00       	mov    eax,0x0
c001b028:	eb 0a                	jmp    c001b034 <FAT::seek(void*, unsigned long long)+0x58>
c001b02a:	66 90                	xchg   ax,ax
c001b02c:	b8 01 00 00 00       	mov    eax,0x1
c001b031:	8d 76 00             	lea    esi,[esi+0x0]
c001b034:	83 c4 2c             	add    esp,0x2c
c001b037:	c3                   	ret    

c001b038 <fatWrapperReadDisk>:
c001b038:	83 ec 1c             	sub    esp,0x1c
c001b03b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b03f:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001b043:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001b047:	89 04 24             	mov    DWORD PTR [esp],eax
c001b04a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001b04e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001b052:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001b057:	8b 04 85 20 6a 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd95e0]
c001b05e:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001b062:	83 ec 0c             	sub    esp,0xc
c001b065:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001b069:	52                   	push   edx
c001b06a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001b06e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001b072:	50                   	push   eax
c001b073:	e8 64 51 ff ff       	call   c00101dc <LogicalDisk::read(unsigned long long, int, void*)>
c001b078:	83 c4 20             	add    esp,0x20
c001b07b:	83 c4 1c             	add    esp,0x1c
c001b07e:	c3                   	ret    
c001b07f:	90                   	nop

c001b080 <fatWrapperWriteDisk>:
c001b080:	83 ec 1c             	sub    esp,0x1c
c001b083:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b087:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001b08b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001b08f:	89 04 24             	mov    DWORD PTR [esp],eax
c001b092:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001b096:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001b09a:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001b09f:	8b 04 85 20 6a 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd95e0]
c001b0a6:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001b0aa:	83 ec 0c             	sub    esp,0xc
c001b0ad:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001b0b1:	52                   	push   edx
c001b0b2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001b0b6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001b0ba:	50                   	push   eax
c001b0bb:	e8 88 51 ff ff       	call   c0010248 <LogicalDisk::write(unsigned long long, int, void*)>
c001b0c0:	83 c4 20             	add    esp,0x20
c001b0c3:	83 c4 1c             	add    esp,0x1c
c001b0c6:	c3                   	ret    
c001b0c7:	90                   	nop

c001b0c8 <fatWrapperIoctl>:
c001b0c8:	53                   	push   ebx
c001b0c9:	83 ec 28             	sub    esp,0x28
c001b0cc:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001b0d0:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001b0d4:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c001b0d8:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001b0dc:	80 7c 24 08 02       	cmp    BYTE PTR [esp+0x8],0x2
c001b0e1:	75 31                	jne    c001b114 <fatWrapperIoctl+0x4c>
c001b0e3:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001b0e7:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001b0eb:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001b0f0:	8b 04 85 20 6a 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd95e0]
c001b0f7:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001b0fd:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001b103:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001b107:	66 89 02             	mov    WORD PTR [edx],ax
c001b10a:	b8 00 00 00 00       	mov    eax,0x0
c001b10f:	e9 bc 00 00 00       	jmp    c001b1d0 <fatWrapperIoctl+0x108>
c001b114:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c001b119:	75 6d                	jne    c001b188 <fatWrapperIoctl+0xc0>
c001b11b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001b11f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001b123:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001b128:	8b 04 85 20 6a 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd95e0]
c001b12f:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001b135:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c001b13b:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c001b141:	89 c8                	mov    eax,ecx
c001b143:	89 da                	mov    edx,ebx
c001b145:	0f a4 c2 0a          	shld   edx,eax,0xa
c001b149:	c1 e0 0a             	shl    eax,0xa
c001b14c:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c001b151:	8b 0c 8d 20 6a 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd95e0]
c001b158:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c001b15e:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c001b164:	89 cb                	mov    ebx,ecx
c001b166:	c1 fb 1f             	sar    ebx,0x1f
c001b169:	53                   	push   ebx
c001b16a:	51                   	push   ecx
c001b16b:	52                   	push   edx
c001b16c:	50                   	push   eax
c001b16d:	e8 12 5e 00 00       	call   c0020f84 <__udivdi3>
c001b172:	83 c4 10             	add    esp,0x10
c001b175:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001b179:	89 01                	mov    DWORD PTR [ecx],eax
c001b17b:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001b17e:	b8 00 00 00 00       	mov    eax,0x0
c001b183:	eb 4b                	jmp    c001b1d0 <fatWrapperIoctl+0x108>
c001b185:	8d 76 00             	lea    esi,[esi+0x0]
c001b188:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c001b18d:	75 09                	jne    c001b198 <fatWrapperIoctl+0xd0>
c001b18f:	b8 00 00 00 00       	mov    eax,0x0
c001b194:	eb 3a                	jmp    c001b1d0 <fatWrapperIoctl+0x108>
c001b196:	66 90                	xchg   ax,ax
c001b198:	80 7c 24 08 03       	cmp    BYTE PTR [esp+0x8],0x3
c001b19d:	75 19                	jne    c001b1b8 <fatWrapperIoctl+0xf0>
c001b19f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001b1a3:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001b1a7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b1ab:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c001b1b1:	b8 00 00 00 00       	mov    eax,0x0
c001b1b6:	eb 18                	jmp    c001b1d0 <fatWrapperIoctl+0x108>
c001b1b8:	80 7c 24 08 04       	cmp    BYTE PTR [esp+0x8],0x4
c001b1bd:	75 09                	jne    c001b1c8 <fatWrapperIoctl+0x100>
c001b1bf:	b8 00 00 00 00       	mov    eax,0x0
c001b1c4:	eb 0a                	jmp    c001b1d0 <fatWrapperIoctl+0x108>
c001b1c6:	66 90                	xchg   ax,ax
c001b1c8:	b8 04 00 00 00       	mov    eax,0x4
c001b1cd:	8d 76 00             	lea    esi,[esi+0x0]
c001b1d0:	83 c4 28             	add    esp,0x28
c001b1d3:	5b                   	pop    ebx
c001b1d4:	c3                   	ret    
c001b1d5:	90                   	nop
c001b1d6:	66 90                	xchg   ax,ax

c001b1d8 <FAT::FAT()>:
c001b1d8:	83 ec 1c             	sub    esp,0x1c
c001b1db:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b1df:	83 ec 0c             	sub    esp,0xc
c001b1e2:	50                   	push   eax
c001b1e3:	e8 ee 1b ff ff       	call   c000cdd6 <Filesystem::Filesystem()>
c001b1e8:	83 c4 10             	add    esp,0x10
c001b1eb:	ba ac 4b 02 c0       	mov    edx,0xc0024bac
c001b1f0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b1f4:	89 10                	mov    DWORD PTR [eax],edx
c001b1f6:	c7 05 20 7a 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027a20,0x0
c001b200:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001b208:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c001b20d:	7f 15                	jg     c001b224 <FAT::FAT()+0x4c>
c001b20f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b213:	c7 04 85 40 7a 02 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffd85c0],0xffffffff
c001b21e:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001b222:	eb e4                	jmp    c001b208 <FAT::FAT()+0x30>
c001b224:	90                   	nop
c001b225:	83 c4 1c             	add    esp,0x1c
c001b228:	c3                   	ret    
c001b229:	90                   	nop
c001b22a:	66 90                	xchg   ax,ax

c001b22c <FAT::fixFilepath(char*)>:
c001b22c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b230:	8a 00                	mov    al,BYTE PTR [eax]
c001b232:	3c 40                	cmp    al,0x40
c001b234:	7e 2e                	jle    c001b264 <FAT::fixFilepath(char*)+0x38>
c001b236:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b23a:	8a 00                	mov    al,BYTE PTR [eax]
c001b23c:	83 e8 41             	sub    eax,0x41
c001b23f:	88 c2                	mov    dl,al
c001b241:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b245:	88 10                	mov    BYTE PTR [eax],dl
c001b247:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b24b:	8a 00                	mov    al,BYTE PTR [eax]
c001b24d:	0f be c0             	movsx  eax,al
c001b250:	8b 04 85 40 7a 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd85c0]
c001b257:	83 c0 30             	add    eax,0x30
c001b25a:	88 c2                	mov    dl,al
c001b25c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b260:	88 10                	mov    BYTE PTR [eax],dl
c001b262:	66 90                	xchg   ax,ax
c001b264:	90                   	nop
c001b265:	c3                   	ret    
c001b266:	66 90                	xchg   ax,ax

c001b268 <FAT::open(char const*, void**, FileOpenMode)>:
c001b268:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001b26e:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001b276:	74 0c                	je     c001b284 <FAT::open(char const*, void**, FileOpenMode)+0x1c>
c001b278:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c001b280:	75 0e                	jne    c001b290 <FAT::open(char const*, void**, FileOpenMode)+0x28>
c001b282:	66 90                	xchg   ax,ax
c001b284:	b8 04 00 00 00       	mov    eax,0x4
c001b289:	e9 06 01 00 00       	jmp    c001b394 <FAT::open(char const*, void**, FileOpenMode)+0x12c>
c001b28e:	66 90                	xchg   ax,ax
c001b290:	83 ec 08             	sub    esp,0x8
c001b293:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001b29a:	8d 44 24 14          	lea    eax,[esp+0x14]
c001b29e:	50                   	push   eax
c001b29f:	e8 9c 54 fe ff       	call   c0000740 <strcpy>
c001b2a4:	83 c4 10             	add    esp,0x10
c001b2a7:	83 ec 08             	sub    esp,0x8
c001b2aa:	8d 44 24 10          	lea    eax,[esp+0x10]
c001b2ae:	50                   	push   eax
c001b2af:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001b2b6:	e8 71 ff ff ff       	call   c001b22c <FAT::fixFilepath(char*)>
c001b2bb:	83 c4 10             	add    esp,0x10
c001b2be:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c001b2c6:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001b2cd:	83 e0 01             	and    eax,0x1
c001b2d0:	74 0a                	je     c001b2dc <FAT::open(char const*, void**, FileOpenMode)+0x74>
c001b2d2:	80 8c 24 0f 01 00 00 01 	or     BYTE PTR [esp+0x10f],0x1
c001b2da:	66 90                	xchg   ax,ax
c001b2dc:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001b2e3:	83 e0 04             	and    eax,0x4
c001b2e6:	74 10                	je     c001b2f8 <FAT::open(char const*, void**, FileOpenMode)+0x90>
c001b2e8:	80 8c 24 0f 01 00 00 30 	or     BYTE PTR [esp+0x10f],0x30
c001b2f0:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c001b2f8:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001b2ff:	83 e0 02             	and    eax,0x2
c001b302:	74 08                	je     c001b30c <FAT::open(char const*, void**, FileOpenMode)+0xa4>
c001b304:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c001b30c:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001b313:	83 e0 08             	and    eax,0x8
c001b316:	74 08                	je     c001b320 <FAT::open(char const*, void**, FileOpenMode)+0xb8>
c001b318:	80 8c 24 0f 01 00 00 04 	or     BYTE PTR [esp+0x10f],0x4
c001b320:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001b327:	83 e0 10             	and    eax,0x10
c001b32a:	74 08                	je     c001b334 <FAT::open(char const*, void**, FileOpenMode)+0xcc>
c001b32c:	80 8c 24 0f 01 00 00 08 	or     BYTE PTR [esp+0x10f],0x8
c001b334:	83 ec 0c             	sub    esp,0xc
c001b337:	68 50 02 00 00       	push   0x250
c001b33c:	e8 82 e6 fe ff       	call   c00099c3 <malloc>
c001b341:	83 c4 10             	add    esp,0x10
c001b344:	89 c2                	mov    edx,eax
c001b346:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001b34d:	89 10                	mov    DWORD PTR [eax],edx
c001b34f:	0f b6 94 24 0f 01 00 00 	movzx  edx,BYTE PTR [esp+0x10f]
c001b357:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001b35e:	8b 00                	mov    eax,DWORD PTR [eax]
c001b360:	83 ec 04             	sub    esp,0x4
c001b363:	52                   	push   edx
c001b364:	8d 54 24 10          	lea    edx,[esp+0x10]
c001b368:	52                   	push   edx
c001b369:	50                   	push   eax
c001b36a:	e8 1c 9b fe ff       	call   c0004e8b <f_open>
c001b36f:	83 c4 10             	add    esp,0x10
c001b372:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c001b379:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c001b381:	74 09                	je     c001b38c <FAT::open(char const*, void**, FileOpenMode)+0x124>
c001b383:	b8 01 00 00 00       	mov    eax,0x1
c001b388:	eb 0a                	jmp    c001b394 <FAT::open(char const*, void**, FileOpenMode)+0x12c>
c001b38a:	66 90                	xchg   ax,ax
c001b38c:	b8 00 00 00 00       	mov    eax,0x0
c001b391:	8d 76 00             	lea    esi,[esi+0x0]
c001b394:	81 c4 1c 01 00 00    	add    esp,0x11c
c001b39a:	c3                   	ret    
c001b39b:	90                   	nop

c001b39c <FAT::openDir(char const*, void**)>:
c001b39c:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001b3a2:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001b3aa:	74 0c                	je     c001b3b8 <FAT::openDir(char const*, void**)+0x1c>
c001b3ac:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c001b3b4:	75 0e                	jne    c001b3c4 <FAT::openDir(char const*, void**)+0x28>
c001b3b6:	66 90                	xchg   ax,ax
c001b3b8:	b8 04 00 00 00       	mov    eax,0x4
c001b3bd:	e9 82 00 00 00       	jmp    c001b444 <FAT::openDir(char const*, void**)+0xa8>
c001b3c2:	66 90                	xchg   ax,ax
c001b3c4:	83 ec 08             	sub    esp,0x8
c001b3c7:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001b3ce:	8d 44 24 18          	lea    eax,[esp+0x18]
c001b3d2:	50                   	push   eax
c001b3d3:	e8 68 53 fe ff       	call   c0000740 <strcpy>
c001b3d8:	83 c4 10             	add    esp,0x10
c001b3db:	83 ec 08             	sub    esp,0x8
c001b3de:	8d 44 24 14          	lea    eax,[esp+0x14]
c001b3e2:	50                   	push   eax
c001b3e3:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001b3ea:	e8 3d fe ff ff       	call   c001b22c <FAT::fixFilepath(char*)>
c001b3ef:	83 c4 10             	add    esp,0x10
c001b3f2:	83 ec 0c             	sub    esp,0xc
c001b3f5:	6a 4c                	push   0x4c
c001b3f7:	e8 c7 e5 fe ff       	call   c00099c3 <malloc>
c001b3fc:	83 c4 10             	add    esp,0x10
c001b3ff:	89 c2                	mov    edx,eax
c001b401:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001b408:	89 10                	mov    DWORD PTR [eax],edx
c001b40a:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001b411:	8b 00                	mov    eax,DWORD PTR [eax]
c001b413:	83 ec 08             	sub    esp,0x8
c001b416:	8d 54 24 14          	lea    edx,[esp+0x14]
c001b41a:	52                   	push   edx
c001b41b:	50                   	push   eax
c001b41c:	e8 a2 aa fe ff       	call   c0005ec3 <f_opendir>
c001b421:	83 c4 10             	add    esp,0x10
c001b424:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001b42b:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c001b433:	74 07                	je     c001b43c <FAT::openDir(char const*, void**)+0xa0>
c001b435:	b8 01 00 00 00       	mov    eax,0x1
c001b43a:	eb 08                	jmp    c001b444 <FAT::openDir(char const*, void**)+0xa8>
c001b43c:	b8 00 00 00 00       	mov    eax,0x0
c001b441:	8d 76 00             	lea    esi,[esi+0x0]
c001b444:	81 c4 1c 01 00 00    	add    esp,0x11c
c001b44a:	c3                   	ret    
c001b44b:	90                   	nop

c001b44c <FAT::stat(char const*, unsigned long long*, bool*)>:
c001b44c:	81 ec 2c 02 00 00    	sub    esp,0x22c
c001b452:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c001b45a:	75 0c                	jne    c001b468 <FAT::stat(char const*, unsigned long long*, bool*)+0x1c>
c001b45c:	b8 04 00 00 00       	mov    eax,0x4
c001b461:	e9 d2 00 00 00       	jmp    c001b538 <FAT::stat(char const*, unsigned long long*, bool*)+0xec>
c001b466:	66 90                	xchg   ax,ax
c001b468:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c001b470:	75 0a                	jne    c001b47c <FAT::stat(char const*, unsigned long long*, bool*)+0x30>
c001b472:	b8 04 00 00 00       	mov    eax,0x4
c001b477:	e9 bc 00 00 00       	jmp    c001b538 <FAT::stat(char const*, unsigned long long*, bool*)+0xec>
c001b47c:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c001b484:	75 0a                	jne    c001b490 <FAT::stat(char const*, unsigned long long*, bool*)+0x44>
c001b486:	b8 04 00 00 00       	mov    eax,0x4
c001b48b:	e9 a8 00 00 00       	jmp    c001b538 <FAT::stat(char const*, unsigned long long*, bool*)+0xec>
c001b490:	83 ec 08             	sub    esp,0x8
c001b493:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001b49a:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c001b4a1:	50                   	push   eax
c001b4a2:	e8 99 52 fe ff       	call   c0000740 <strcpy>
c001b4a7:	83 c4 10             	add    esp,0x10
c001b4aa:	83 ec 08             	sub    esp,0x8
c001b4ad:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c001b4b4:	50                   	push   eax
c001b4b5:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001b4bc:	e8 6b fd ff ff       	call   c001b22c <FAT::fixFilepath(char*)>
c001b4c1:	83 c4 10             	add    esp,0x10
c001b4c4:	83 ec 08             	sub    esp,0x8
c001b4c7:	8d 44 24 08          	lea    eax,[esp+0x8]
c001b4cb:	50                   	push   eax
c001b4cc:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c001b4d3:	50                   	push   eax
c001b4d4:	e8 a9 ab fe ff       	call   c0006082 <f_stat>
c001b4d9:	83 c4 10             	add    esp,0x10
c001b4dc:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c001b4e3:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c001b4ea:	85 c0                	test   eax,eax
c001b4ec:	74 0a                	je     c001b4f8 <FAT::stat(char const*, unsigned long long*, bool*)+0xac>
c001b4ee:	83 f8 04             	cmp    eax,0x4
c001b4f1:	74 35                	je     c001b528 <FAT::stat(char const*, unsigned long long*, bool*)+0xdc>
c001b4f3:	eb 3b                	jmp    c001b530 <FAT::stat(char const*, unsigned long long*, bool*)+0xe4>
c001b4f5:	8d 76 00             	lea    esi,[esi+0x0]
c001b4f8:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001b4fc:	0f b6 c0             	movzx  eax,al
c001b4ff:	83 e0 10             	and    eax,0x10
c001b502:	0f 95 c2             	setne  dl
c001b505:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c001b50c:	88 10                	mov    BYTE PTR [eax],dl
c001b50e:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001b511:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001b515:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c001b51c:	89 01                	mov    DWORD PTR [ecx],eax
c001b51e:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001b521:	b8 00 00 00 00       	mov    eax,0x0
c001b526:	eb 10                	jmp    c001b538 <FAT::stat(char const*, unsigned long long*, bool*)+0xec>
c001b528:	b8 02 00 00 00       	mov    eax,0x2
c001b52d:	eb 09                	jmp    c001b538 <FAT::stat(char const*, unsigned long long*, bool*)+0xec>
c001b52f:	90                   	nop
c001b530:	b8 01 00 00 00       	mov    eax,0x1
c001b535:	8d 76 00             	lea    esi,[esi+0x0]
c001b538:	81 c4 2c 02 00 00    	add    esp,0x22c
c001b53e:	c3                   	ret    
c001b53f:	90                   	nop

c001b540 <FAT::unlink(char const*)>:
c001b540:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001b546:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001b54e:	75 08                	jne    c001b558 <FAT::unlink(char const*)+0x18>
c001b550:	b8 04 00 00 00       	mov    eax,0x4
c001b555:	eb 61                	jmp    c001b5b8 <FAT::unlink(char const*)+0x78>
c001b557:	90                   	nop
c001b558:	83 ec 08             	sub    esp,0x8
c001b55b:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001b562:	8d 44 24 18          	lea    eax,[esp+0x18]
c001b566:	50                   	push   eax
c001b567:	e8 d4 51 fe ff       	call   c0000740 <strcpy>
c001b56c:	83 c4 10             	add    esp,0x10
c001b56f:	83 ec 08             	sub    esp,0x8
c001b572:	8d 44 24 14          	lea    eax,[esp+0x14]
c001b576:	50                   	push   eax
c001b577:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001b57e:	e8 a9 fc ff ff       	call   c001b22c <FAT::fixFilepath(char*)>
c001b583:	83 c4 10             	add    esp,0x10
c001b586:	83 ec 0c             	sub    esp,0xc
c001b589:	8d 44 24 18          	lea    eax,[esp+0x18]
c001b58d:	50                   	push   eax
c001b58e:	e8 41 ae fe ff       	call   c00063d4 <f_unlink>
c001b593:	83 c4 10             	add    esp,0x10
c001b596:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001b59d:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c001b5a4:	85 c0                	test   eax,eax
c001b5a6:	75 08                	jne    c001b5b0 <FAT::unlink(char const*)+0x70>
c001b5a8:	b8 00 00 00 00       	mov    eax,0x0
c001b5ad:	eb 09                	jmp    c001b5b8 <FAT::unlink(char const*)+0x78>
c001b5af:	90                   	nop
c001b5b0:	b8 01 00 00 00       	mov    eax,0x1
c001b5b5:	8d 76 00             	lea    esi,[esi+0x0]
c001b5b8:	81 c4 1c 01 00 00    	add    esp,0x11c
c001b5be:	c3                   	ret    
c001b5bf:	90                   	nop

c001b5c0 <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c001b5c0:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001b5c6:	8b 94 24 38 01 00 00 	mov    edx,DWORD PTR [esp+0x138]
c001b5cd:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c001b5d4:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c001b5d8:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001b5dc:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c001b5e4:	75 0a                	jne    c001b5f0 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x30>
c001b5e6:	b8 04 00 00 00       	mov    eax,0x4
c001b5eb:	e9 30 01 00 00       	jmp    c001b720 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x160>
c001b5f0:	83 ec 08             	sub    esp,0x8
c001b5f3:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001b5fa:	8d 44 24 24          	lea    eax,[esp+0x24]
c001b5fe:	50                   	push   eax
c001b5ff:	e8 3c 51 fe ff       	call   c0000740 <strcpy>
c001b604:	83 c4 10             	add    esp,0x10
c001b607:	83 ec 08             	sub    esp,0x8
c001b60a:	8d 44 24 20          	lea    eax,[esp+0x20]
c001b60e:	50                   	push   eax
c001b60f:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001b616:	e8 11 fc ff ff       	call   c001b22c <FAT::fixFilepath(char*)>
c001b61b:	83 c4 10             	add    esp,0x10
c001b61e:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c001b626:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c001b62e:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001b633:	83 e0 01             	and    eax,0x1
c001b636:	74 08                	je     c001b640 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x80>
c001b638:	80 8c 24 1f 01 00 00 01 	or     BYTE PTR [esp+0x11f],0x1
c001b640:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001b645:	83 e0 02             	and    eax,0x2
c001b648:	74 0a                	je     c001b654 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x94>
c001b64a:	80 8c 24 1f 01 00 00 20 	or     BYTE PTR [esp+0x11f],0x20
c001b652:	66 90                	xchg   ax,ax
c001b654:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001b659:	83 e0 04             	and    eax,0x4
c001b65c:	74 0a                	je     c001b668 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xa8>
c001b65e:	80 8c 24 1f 01 00 00 04 	or     BYTE PTR [esp+0x11f],0x4
c001b666:	66 90                	xchg   ax,ax
c001b668:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001b66d:	83 e0 08             	and    eax,0x8
c001b670:	74 0a                	je     c001b67c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xbc>
c001b672:	80 8c 24 1f 01 00 00 02 	or     BYTE PTR [esp+0x11f],0x2
c001b67a:	66 90                	xchg   ax,ax
c001b67c:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001b681:	83 e0 01             	and    eax,0x1
c001b684:	74 0a                	je     c001b690 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xd0>
c001b686:	80 8c 24 1e 01 00 00 01 	or     BYTE PTR [esp+0x11e],0x1
c001b68e:	66 90                	xchg   ax,ax
c001b690:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001b695:	83 e0 02             	and    eax,0x2
c001b698:	74 0a                	je     c001b6a4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xe4>
c001b69a:	80 8c 24 1e 01 00 00 20 	or     BYTE PTR [esp+0x11e],0x20
c001b6a2:	66 90                	xchg   ax,ax
c001b6a4:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001b6a9:	83 e0 04             	and    eax,0x4
c001b6ac:	74 0a                	je     c001b6b8 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xf8>
c001b6ae:	80 8c 24 1e 01 00 00 04 	or     BYTE PTR [esp+0x11e],0x4
c001b6b6:	66 90                	xchg   ax,ax
c001b6b8:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001b6bd:	83 e0 08             	and    eax,0x8
c001b6c0:	74 0a                	je     c001b6cc <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x10c>
c001b6c2:	80 8c 24 1e 01 00 00 02 	or     BYTE PTR [esp+0x11e],0x2
c001b6ca:	66 90                	xchg   ax,ax
c001b6cc:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001b6d3:	08 84 24 1e 01 00 00 	or     BYTE PTR [esp+0x11e],al
c001b6da:	0f b6 94 24 1e 01 00 00 	movzx  edx,BYTE PTR [esp+0x11e]
c001b6e2:	0f b6 84 24 1f 01 00 00 	movzx  eax,BYTE PTR [esp+0x11f]
c001b6ea:	83 ec 04             	sub    esp,0x4
c001b6ed:	52                   	push   edx
c001b6ee:	50                   	push   eax
c001b6ef:	8d 44 24 24          	lea    eax,[esp+0x24]
c001b6f3:	50                   	push   eax
c001b6f4:	e8 7d b3 fe ff       	call   c0006a76 <f_chmod>
c001b6f9:	83 c4 10             	add    esp,0x10
c001b6fc:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c001b703:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c001b70a:	85 c0                	test   eax,eax
c001b70c:	75 0a                	jne    c001b718 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x158>
c001b70e:	b8 00 00 00 00       	mov    eax,0x0
c001b713:	eb 0b                	jmp    c001b720 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x160>
c001b715:	8d 76 00             	lea    esi,[esi+0x0]
c001b718:	b8 01 00 00 00       	mov    eax,0x1
c001b71d:	8d 76 00             	lea    esi,[esi+0x0]
c001b720:	81 c4 2c 01 00 00    	add    esp,0x12c
c001b726:	c3                   	ret    
c001b727:	90                   	nop

c001b728 <FAT::rename(char const*, char const*)>:
c001b728:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001b72e:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c001b736:	74 0c                	je     c001b744 <FAT::rename(char const*, char const*)+0x1c>
c001b738:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c001b740:	75 0e                	jne    c001b750 <FAT::rename(char const*, char const*)+0x28>
c001b742:	66 90                	xchg   ax,ax
c001b744:	b8 04 00 00 00       	mov    eax,0x4
c001b749:	e9 9e 00 00 00       	jmp    c001b7ec <FAT::rename(char const*, char const*)+0xc4>
c001b74e:	66 90                	xchg   ax,ax
c001b750:	83 ec 08             	sub    esp,0x8
c001b753:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001b75a:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001b761:	50                   	push   eax
c001b762:	e8 d9 4f fe ff       	call   c0000740 <strcpy>
c001b767:	83 c4 10             	add    esp,0x10
c001b76a:	83 ec 08             	sub    esp,0x8
c001b76d:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c001b774:	50                   	push   eax
c001b775:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001b77c:	e8 ab fa ff ff       	call   c001b22c <FAT::fixFilepath(char*)>
c001b781:	83 c4 10             	add    esp,0x10
c001b784:	83 ec 08             	sub    esp,0x8
c001b787:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c001b78e:	8d 44 24 18          	lea    eax,[esp+0x18]
c001b792:	50                   	push   eax
c001b793:	e8 a8 4f fe ff       	call   c0000740 <strcpy>
c001b798:	83 c4 10             	add    esp,0x10
c001b79b:	83 ec 08             	sub    esp,0x8
c001b79e:	8d 44 24 14          	lea    eax,[esp+0x14]
c001b7a2:	50                   	push   eax
c001b7a3:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001b7aa:	e8 7d fa ff ff       	call   c001b22c <FAT::fixFilepath(char*)>
c001b7af:	83 c4 10             	add    esp,0x10
c001b7b2:	83 ec 08             	sub    esp,0x8
c001b7b5:	8d 44 24 14          	lea    eax,[esp+0x14]
c001b7b9:	50                   	push   eax
c001b7ba:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001b7c1:	50                   	push   eax
c001b7c2:	e8 bc af fe ff       	call   c0006783 <f_rename>
c001b7c7:	83 c4 10             	add    esp,0x10
c001b7ca:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c001b7d1:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c001b7d8:	85 c0                	test   eax,eax
c001b7da:	75 08                	jne    c001b7e4 <FAT::rename(char const*, char const*)+0xbc>
c001b7dc:	b8 00 00 00 00       	mov    eax,0x0
c001b7e1:	eb 09                	jmp    c001b7ec <FAT::rename(char const*, char const*)+0xc4>
c001b7e3:	90                   	nop
c001b7e4:	b8 01 00 00 00       	mov    eax,0x1
c001b7e9:	8d 76 00             	lea    esi,[esi+0x0]
c001b7ec:	81 c4 1c 02 00 00    	add    esp,0x21c
c001b7f2:	c3                   	ret    
c001b7f3:	90                   	nop

c001b7f4 <FAT::mkdir(char const*)>:
c001b7f4:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001b7fa:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001b802:	75 08                	jne    c001b80c <FAT::mkdir(char const*)+0x18>
c001b804:	b8 04 00 00 00       	mov    eax,0x4
c001b809:	eb 61                	jmp    c001b86c <FAT::mkdir(char const*)+0x78>
c001b80b:	90                   	nop
c001b80c:	83 ec 08             	sub    esp,0x8
c001b80f:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001b816:	8d 44 24 18          	lea    eax,[esp+0x18]
c001b81a:	50                   	push   eax
c001b81b:	e8 20 4f fe ff       	call   c0000740 <strcpy>
c001b820:	83 c4 10             	add    esp,0x10
c001b823:	83 ec 08             	sub    esp,0x8
c001b826:	8d 44 24 14          	lea    eax,[esp+0x14]
c001b82a:	50                   	push   eax
c001b82b:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001b832:	e8 f5 f9 ff ff       	call   c001b22c <FAT::fixFilepath(char*)>
c001b837:	83 c4 10             	add    esp,0x10
c001b83a:	83 ec 0c             	sub    esp,0xc
c001b83d:	8d 44 24 18          	lea    eax,[esp+0x18]
c001b841:	50                   	push   eax
c001b842:	e8 10 ad fe ff       	call   c0006557 <f_mkdir>
c001b847:	83 c4 10             	add    esp,0x10
c001b84a:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001b851:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c001b858:	85 c0                	test   eax,eax
c001b85a:	75 08                	jne    c001b864 <FAT::mkdir(char const*)+0x70>
c001b85c:	b8 00 00 00 00       	mov    eax,0x0
c001b861:	eb 09                	jmp    c001b86c <FAT::mkdir(char const*)+0x78>
c001b863:	90                   	nop
c001b864:	b8 01 00 00 00       	mov    eax,0x1
c001b869:	8d 76 00             	lea    esi,[esi+0x0]
c001b86c:	81 c4 1c 01 00 00    	add    esp,0x11c
c001b872:	c3                   	ret    
c001b873:	90                   	nop

c001b874 <FAT::exists(char const*)>:
c001b874:	81 ec 2c 02 00 00    	sub    esp,0x22c
c001b87a:	83 ec 08             	sub    esp,0x8
c001b87d:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001b884:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001b888:	50                   	push   eax
c001b889:	e8 b2 4e fe ff       	call   c0000740 <strcpy>
c001b88e:	83 c4 10             	add    esp,0x10
c001b891:	83 ec 08             	sub    esp,0x8
c001b894:	8d 44 24 08          	lea    eax,[esp+0x8]
c001b898:	50                   	push   eax
c001b899:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001b8a0:	e8 87 f9 ff ff       	call   c001b22c <FAT::fixFilepath(char*)>
c001b8a5:	83 c4 10             	add    esp,0x10
c001b8a8:	83 ec 08             	sub    esp,0x8
c001b8ab:	8d 84 24 08 01 00 00 	lea    eax,[esp+0x108]
c001b8b2:	50                   	push   eax
c001b8b3:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001b8b7:	50                   	push   eax
c001b8b8:	e8 c5 a7 fe ff       	call   c0006082 <f_stat>
c001b8bd:	83 c4 10             	add    esp,0x10
c001b8c0:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c001b8c7:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c001b8ce:	85 c0                	test   eax,eax
c001b8d0:	75 06                	jne    c001b8d8 <FAT::exists(char const*)+0x64>
c001b8d2:	b0 01                	mov    al,0x1
c001b8d4:	eb 06                	jmp    c001b8dc <FAT::exists(char const*)+0x68>
c001b8d6:	66 90                	xchg   ax,ax
c001b8d8:	b0 00                	mov    al,0x0
c001b8da:	66 90                	xchg   ax,ax
c001b8dc:	81 c4 2c 02 00 00    	add    esp,0x22c
c001b8e2:	c3                   	ret    
c001b8e3:	90                   	nop

c001b8e4 <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c001b8e4:	b8 08 00 00 00       	mov    eax,0x8
c001b8e9:	c3                   	ret    

c001b8ea <ISO9660::seek(void*, unsigned long long)>:
c001b8ea:	53                   	push   ebx
c001b8eb:	b8 04 00 00 00       	mov    eax,0x4
c001b8f0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001b8f4:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b8f8:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001b8fc:	85 d2                	test   edx,edx
c001b8fe:	74 17                	je     c001b917 <ISO9660::seek(void*, unsigned long long)+0x2d>
c001b900:	89 c8                	mov    eax,ecx
c001b902:	3b 5a 08             	cmp    ebx,DWORD PTR [edx+0x8]
c001b905:	1b 42 0c             	sbb    eax,DWORD PTR [edx+0xc]
c001b908:	b8 01 00 00 00       	mov    eax,0x1
c001b90d:	73 08                	jae    c001b917 <ISO9660::seek(void*, unsigned long long)+0x2d>
c001b90f:	89 5a 10             	mov    DWORD PTR [edx+0x10],ebx
c001b912:	89 4a 14             	mov    DWORD PTR [edx+0x14],ecx
c001b915:	31 c0                	xor    eax,eax
c001b917:	5b                   	pop    ebx
c001b918:	c3                   	ret    
c001b919:	90                   	nop

c001b91a <ISO9660::tell(void*, unsigned long long*)>:
c001b91a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001b91e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b922:	85 d2                	test   edx,edx
c001b924:	74 12                	je     c001b938 <ISO9660::tell(void*, unsigned long long*)+0x1e>
c001b926:	85 c0                	test   eax,eax
c001b928:	74 0e                	je     c001b938 <ISO9660::tell(void*, unsigned long long*)+0x1e>
c001b92a:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001b92d:	8b 52 10             	mov    edx,DWORD PTR [edx+0x10]
c001b930:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c001b933:	89 10                	mov    DWORD PTR [eax],edx
c001b935:	31 c0                	xor    eax,eax
c001b937:	c3                   	ret    
c001b938:	b8 04 00 00 00       	mov    eax,0x4
c001b93d:	c3                   	ret    

c001b93e <ISO9660::getName()>:
c001b93e:	b8 0c 4c 02 c0       	mov    eax,0xc0024c0c
c001b943:	c3                   	ret    

c001b944 <ISO9660::stat(void*, unsigned long long*)>:
c001b944:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001b948:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b94c:	85 d2                	test   edx,edx
c001b94e:	74 12                	je     c001b962 <ISO9660::stat(void*, unsigned long long*)+0x1e>
c001b950:	85 c0                	test   eax,eax
c001b952:	74 0e                	je     c001b962 <ISO9660::stat(void*, unsigned long long*)+0x1e>
c001b954:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c001b957:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c001b95a:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c001b95d:	89 10                	mov    DWORD PTR [eax],edx
c001b95f:	31 c0                	xor    eax,eax
c001b961:	c3                   	ret    
c001b962:	b8 04 00 00 00       	mov    eax,0x4
c001b967:	c3                   	ret    

c001b968 <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c001b968:	b8 01 00 00 00       	mov    eax,0x1
c001b96d:	c3                   	ret    

c001b96e <ISO9660::unlink(char const*)>:
c001b96e:	b8 01 00 00 00       	mov    eax,0x1
c001b973:	c3                   	ret    

c001b974 <ISO9660::write(void*, unsigned long, void*, int*)>:
c001b974:	b8 01 00 00 00       	mov    eax,0x1
c001b979:	c3                   	ret    

c001b97a <ISO9660::rename(char const*, char const*)>:
c001b97a:	b8 01 00 00 00       	mov    eax,0x1
c001b97f:	c3                   	ret    

c001b980 <ISO9660::mkdir(char const*)>:
c001b980:	b8 01 00 00 00       	mov    eax,0x1
c001b985:	c3                   	ret    

c001b986 <ISO9660::close(void*)>:
c001b986:	83 ec 0c             	sub    esp,0xc
c001b989:	b8 04 00 00 00       	mov    eax,0x4
c001b98e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001b992:	85 d2                	test   edx,edx
c001b994:	74 0e                	je     c001b9a4 <ISO9660::close(void*)+0x1e>
c001b996:	83 ec 0c             	sub    esp,0xc
c001b999:	52                   	push   edx
c001b99a:	e8 34 e0 fe ff       	call   c00099d3 <free>
c001b99f:	83 c4 10             	add    esp,0x10
c001b9a2:	31 c0                	xor    eax,eax
c001b9a4:	83 c4 0c             	add    esp,0xc
c001b9a7:	c3                   	ret    

c001b9a8 <ISO9660::closeDir(void*)>:
c001b9a8:	83 ec 0c             	sub    esp,0xc
c001b9ab:	b8 04 00 00 00       	mov    eax,0x4
c001b9b0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001b9b4:	85 d2                	test   edx,edx
c001b9b6:	74 0e                	je     c001b9c6 <ISO9660::closeDir(void*)+0x1e>
c001b9b8:	83 ec 0c             	sub    esp,0xc
c001b9bb:	52                   	push   edx
c001b9bc:	e8 12 e0 fe ff       	call   c00099d3 <free>
c001b9c1:	83 c4 10             	add    esp,0x10
c001b9c4:	31 c0                	xor    eax,eax
c001b9c6:	83 c4 0c             	add    esp,0xc
c001b9c9:	c3                   	ret    

c001b9ca <ISO9660::~ISO9660()>:
c001b9ca:	83 ec 0c             	sub    esp,0xc
c001b9cd:	ba 30 4c 02 c0       	mov    edx,0xc0024c30
c001b9d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b9d6:	89 10                	mov    DWORD PTR [eax],edx
c001b9d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b9dc:	83 ec 0c             	sub    esp,0xc
c001b9df:	50                   	push   eax
c001b9e0:	e8 15 14 ff ff       	call   c000cdfa <Filesystem::~Filesystem()>
c001b9e5:	83 c4 10             	add    esp,0x10
c001b9e8:	90                   	nop
c001b9e9:	83 c4 0c             	add    esp,0xc
c001b9ec:	c3                   	ret    
c001b9ed:	90                   	nop

c001b9ee <ISO9660::~ISO9660()>:
c001b9ee:	83 ec 0c             	sub    esp,0xc
c001b9f1:	83 ec 0c             	sub    esp,0xc
c001b9f4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b9f8:	e8 cd ff ff ff       	call   c001b9ca <ISO9660::~ISO9660()>
c001b9fd:	83 c4 10             	add    esp,0x10
c001ba00:	83 ec 08             	sub    esp,0x8
c001ba03:	6a 08                	push   0x8
c001ba05:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ba09:	e8 d0 0f ff ff       	call   c000c9de <operator delete(void*, unsigned long)>
c001ba0e:	83 c4 10             	add    esp,0x10
c001ba11:	83 c4 0c             	add    esp,0xc
c001ba14:	c3                   	ret    

c001ba15 <__memmem(unsigned char*, int, unsigned char*, int)>:
c001ba15:	55                   	push   ebp
c001ba16:	31 c9                	xor    ecx,ecx
c001ba18:	57                   	push   edi
c001ba19:	56                   	push   esi
c001ba1a:	53                   	push   ebx
c001ba1b:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c001ba1f:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001ba23:	89 eb                	mov    ebx,ebp
c001ba25:	2b 74 24 20          	sub    esi,DWORD PTR [esp+0x20]
c001ba29:	39 ce                	cmp    esi,ecx
c001ba2b:	7e 17                	jle    c001ba44 <__memmem(unsigned char*, int, unsigned char*, int)+0x2f>
c001ba2d:	31 d2                	xor    edx,edx
c001ba2f:	3b 54 24 20          	cmp    edx,DWORD PTR [esp+0x20]
c001ba33:	7d 13                	jge    c001ba48 <__memmem(unsigned char*, int, unsigned char*, int)+0x33>
c001ba35:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001ba39:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c001ba3c:	38 04 17             	cmp    BYTE PTR [edi+edx*1],al
c001ba3f:	75 0d                	jne    c001ba4e <__memmem(unsigned char*, int, unsigned char*, int)+0x39>
c001ba41:	42                   	inc    edx
c001ba42:	eb eb                	jmp    c001ba2f <__memmem(unsigned char*, int, unsigned char*, int)+0x1a>
c001ba44:	31 c0                	xor    eax,eax
c001ba46:	eb 0a                	jmp    c001ba52 <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c001ba48:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c001ba4c:	eb 04                	jmp    c001ba52 <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c001ba4e:	41                   	inc    ecx
c001ba4f:	43                   	inc    ebx
c001ba50:	eb d7                	jmp    c001ba29 <__memmem(unsigned char*, int, unsigned char*, int)+0x14>
c001ba52:	5b                   	pop    ebx
c001ba53:	5e                   	pop    esi
c001ba54:	5f                   	pop    edi
c001ba55:	5d                   	pop    ebp
c001ba56:	c3                   	ret    

c001ba57 <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c001ba57:	57                   	push   edi
c001ba58:	56                   	push   esi
c001ba59:	53                   	push   ebx
c001ba5a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001ba5e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ba62:	39 0d 20 7b 02 c0    	cmp    DWORD PTR ds:0xc0027b20,ecx
c001ba68:	75 08                	jne    c001ba72 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x1b>
c001ba6a:	38 05 94 5e 02 c0    	cmp    BYTE PTR ds:0xc0025e94,al
c001ba70:	74 2b                	je     c001ba9d <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x46>
c001ba72:	83 ec 0c             	sub    esp,0xc
c001ba75:	a2 94 5e 02 c0       	mov    ds:0xc0025e94,al
c001ba7a:	68 40 7b 02 c0       	push   0xc0027b40
c001ba7f:	0f be c0             	movsx  eax,al
c001ba82:	6a 01                	push   0x1
c001ba84:	89 0d 20 7b 02 c0    	mov    DWORD PTR ds:0xc0027b20,ecx
c001ba8a:	31 db                	xor    ebx,ebx
c001ba8c:	53                   	push   ebx
c001ba8d:	51                   	push   ecx
c001ba8e:	ff 34 85 1c 69 02 c0 	push   DWORD PTR [eax*4-0x3ffd96e4]
c001ba95:	e8 42 47 ff ff       	call   c00101dc <LogicalDisk::read(unsigned long long, int, void*)>
c001ba9a:	83 c4 20             	add    esp,0x20
c001ba9d:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001baa1:	be 40 7b 02 c0       	mov    esi,0xc0027b40
c001baa6:	b9 00 08 00 00       	mov    ecx,0x800
c001baab:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001baad:	5b                   	pop    ebx
c001baae:	5e                   	pop    esi
c001baaf:	5f                   	pop    edi
c001bab0:	c3                   	ret    
c001bab1:	90                   	nop

c001bab2 <ISO9660::tryMount(LogicalDisk*, int)>:
c001bab2:	81 ec 10 08 00 00    	sub    esp,0x810
c001bab8:	8a 84 24 1c 08 00 00 	mov    al,BYTE PTR [esp+0x81c]
c001babf:	83 c0 41             	add    eax,0x41
c001bac2:	0f be c0             	movsx  eax,al
c001bac5:	50                   	push   eax
c001bac6:	8d 44 24 08          	lea    eax,[esp+0x8]
c001baca:	50                   	push   eax
c001bacb:	6a 10                	push   0x10
c001bacd:	e8 85 ff ff ff       	call   c001ba57 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001bad2:	83 c4 10             	add    esp,0x10
c001bad5:	31 c0                	xor    eax,eax
c001bad7:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c001badc:	75 1d                	jne    c001bafb <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c001bade:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c001bae3:	75 16                	jne    c001bafb <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c001bae5:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c001baea:	75 0f                	jne    c001bafb <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c001baec:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c001baf1:	75 08                	jne    c001bafb <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c001baf3:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c001baf8:	0f 94 c0             	sete   al
c001bafb:	81 c4 0c 08 00 00    	add    esp,0x80c
c001bb01:	c3                   	ret    

c001bb02 <ISO9660::read(void*, unsigned long, void*, int*)>:
c001bb02:	55                   	push   ebp
c001bb03:	57                   	push   edi
c001bb04:	56                   	push   esi
c001bb05:	53                   	push   ebx
c001bb06:	81 ec 2c 08 00 00    	sub    esp,0x82c
c001bb0c:	8b ac 24 44 08 00 00 	mov    ebp,DWORD PTR [esp+0x844]
c001bb13:	85 ed                	test   ebp,ebp
c001bb15:	0f 84 da 01 00 00    	je     c001bcf5 <ISO9660::read(void*, unsigned long, void*, int*)+0x1f3>
c001bb1b:	83 bc 24 50 08 00 00 00 	cmp    DWORD PTR [esp+0x850],0x0
c001bb23:	0f 84 cc 01 00 00    	je     c001bcf5 <ISO9660::read(void*, unsigned long, void*, int*)+0x1f3>
c001bb29:	b8 01 00 00 00       	mov    eax,0x1
c001bb2e:	80 7d 18 00          	cmp    BYTE PTR [ebp+0x18],0x0
c001bb32:	0f 85 c2 01 00 00    	jne    c001bcfa <ISO9660::read(void*, unsigned long, void*, int*)+0x1f8>
c001bb38:	31 d2                	xor    edx,edx
c001bb3a:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c001bb41:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c001bb44:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c001bb47:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c001bb4a:	89 04 24             	mov    DWORD PTR [esp],eax
c001bb4d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001bb51:	01 c8                	add    eax,ecx
c001bb53:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c001bb56:	11 da                	adc    edx,ebx
c001bb58:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c001bb5c:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001bb60:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c001bb64:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001bb68:	19 d7                	sbb    edi,edx
c001bb6a:	72 11                	jb     c001bb7d <ISO9660::read(void*, unsigned long, void*, int*)+0x7b>
c001bb6c:	8b 34 24             	mov    esi,DWORD PTR [esp]
c001bb6f:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c001bb73:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001bb77:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001bb7b:	eb 0c                	jmp    c001bb89 <ISO9660::read(void*, unsigned long, void*, int*)+0x87>
c001bb7d:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c001bb81:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001bb85:	29 ce                	sub    esi,ecx
c001bb87:	19 df                	sbb    edi,ebx
c001bb89:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001bb8c:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c001bb8f:	0f a4 c2 0b          	shld   edx,eax,0xb
c001bb93:	c1 e0 0b             	shl    eax,0xb
c001bb96:	01 c8                	add    eax,ecx
c001bb98:	11 da                	adc    edx,ebx
c001bb9a:	89 04 24             	mov    DWORD PTR [esp],eax
c001bb9d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001bba1:	51                   	push   ecx
c001bba2:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c001bba6:	50                   	push   eax
c001bba7:	8d 5c 24 28          	lea    ebx,[esp+0x28]
c001bbab:	53                   	push   ebx
c001bbac:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001bbb0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001bbb4:	0f ac d0 0b          	shrd   eax,edx,0xb
c001bbb8:	50                   	push   eax
c001bbb9:	e8 99 fe ff ff       	call   c001ba57 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001bbbe:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c001bbc1:	b8 00 08 00 00       	mov    eax,0x800
c001bbc6:	81 e2 ff 07 00 00    	and    edx,0x7ff
c001bbcc:	89 74 24 2c          	mov    DWORD PTR [esp+0x2c],esi
c001bbd0:	29 d0                	sub    eax,edx
c001bbd2:	83 c4 10             	add    esp,0x10
c001bbd5:	89 f9                	mov    ecx,edi
c001bbd7:	39 c6                	cmp    esi,eax
c001bbd9:	83 d9 00             	sbb    ecx,0x0
c001bbdc:	7d 1b                	jge    c001bbf9 <ISO9660::read(void*, unsigned long, void*, int*)+0xf7>
c001bbde:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001bbe3:	75 12                	jne    c001bbf7 <ISO9660::read(void*, unsigned long, void*, int*)+0xf5>
c001bbe5:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c001bbec:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001bbf2:	e9 fa 00 00 00       	jmp    c001bcf1 <ISO9660::read(void*, unsigned long, void*, int*)+0x1ef>
c001bbf7:	89 f0                	mov    eax,esi
c001bbf9:	01 d3                	add    ebx,edx
c001bbfb:	31 d2                	xor    edx,edx
c001bbfd:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c001bc01:	39 c2                	cmp    edx,eax
c001bc03:	7d 14                	jge    c001bc19 <ISO9660::read(void*, unsigned long, void*, int*)+0x117>
c001bc05:	8b 9c 24 4c 08 00 00 	mov    ebx,DWORD PTR [esp+0x84c]
c001bc0c:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001bc10:	8a 0c 11             	mov    cl,BYTE PTR [ecx+edx*1]
c001bc13:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c001bc16:	42                   	inc    edx
c001bc17:	eb e8                	jmp    c001bc01 <ISO9660::read(void*, unsigned long, void*, int*)+0xff>
c001bc19:	89 c2                	mov    edx,eax
c001bc1b:	85 c0                	test   eax,eax
c001bc1d:	79 02                	jns    c001bc21 <ISO9660::read(void*, unsigned long, void*, int*)+0x11f>
c001bc1f:	31 d2                	xor    edx,edx
c001bc21:	01 c2                	add    edx,eax
c001bc23:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c001bc26:	03 94 24 4c 08 00 00 	add    edx,DWORD PTR [esp+0x84c]
c001bc2d:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c001bc31:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001bc35:	99                   	cdq    
c001bc36:	01 c1                	add    ecx,eax
c001bc38:	11 d3                	adc    ebx,edx
c001bc3a:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c001bc3e:	29 c6                	sub    esi,eax
c001bc40:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001bc44:	19 d7                	sbb    edi,edx
c001bc46:	89 34 24             	mov    DWORD PTR [esp],esi
c001bc49:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c001bc4d:	b8 ff 07 00 00       	mov    eax,0x7ff
c001bc52:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c001bc55:	b8 00 00 00 00       	mov    eax,0x0
c001bc5a:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c001bc5e:	7d 43                	jge    c001bca3 <ISO9660::read(void*, unsigned long, void*, int*)+0x1a1>
c001bc60:	52                   	push   edx
c001bc61:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c001bc65:	50                   	push   eax
c001bc66:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001bc6a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001bc6e:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001bc72:	0f ac d0 0b          	shrd   eax,edx,0xb
c001bc76:	50                   	push   eax
c001bc77:	e8 db fd ff ff       	call   c001ba57 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001bc7c:	81 44 24 20 00 08 00 00 	add    DWORD PTR [esp+0x20],0x800
c001bc84:	83 54 24 24 00       	adc    DWORD PTR [esp+0x24],0x0
c001bc89:	81 44 24 28 00 08 00 00 	add    DWORD PTR [esp+0x28],0x800
c001bc91:	81 44 24 10 00 f8 ff ff 	add    DWORD PTR [esp+0x10],0xfffff800
c001bc99:	83 54 24 14 ff       	adc    DWORD PTR [esp+0x14],0xffffffff
c001bc9e:	83 c4 10             	add    esp,0x10
c001bca1:	eb aa                	jmp    c001bc4d <ISO9660::read(void*, unsigned long, void*, int*)+0x14b>
c001bca3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bca7:	0b 04 24             	or     eax,DWORD PTR [esp]
c001bcaa:	74 2a                	je     c001bcd6 <ISO9660::read(void*, unsigned long, void*, int*)+0x1d4>
c001bcac:	50                   	push   eax
c001bcad:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c001bcb1:	50                   	push   eax
c001bcb2:	8d 74 24 28          	lea    esi,[esp+0x28]
c001bcb6:	56                   	push   esi
c001bcb7:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001bcbb:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001bcbf:	0f ac d9 0b          	shrd   ecx,ebx,0xb
c001bcc3:	51                   	push   ecx
c001bcc4:	e8 8e fd ff ff       	call   c001ba57 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001bcc9:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001bccd:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001bcd1:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001bcd3:	83 c4 10             	add    esp,0x10
c001bcd6:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c001bcdd:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001bce1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001bce5:	89 18                	mov    DWORD PTR [eax],ebx
c001bce7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001bceb:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c001bcee:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c001bcf1:	31 c0                	xor    eax,eax
c001bcf3:	eb 05                	jmp    c001bcfa <ISO9660::read(void*, unsigned long, void*, int*)+0x1f8>
c001bcf5:	b8 04 00 00 00       	mov    eax,0x4
c001bcfa:	81 c4 2c 08 00 00    	add    esp,0x82c
c001bd00:	5b                   	pop    ebx
c001bd01:	5e                   	pop    esi
c001bd02:	5f                   	pop    edi
c001bd03:	5d                   	pop    ebp
c001bd04:	c3                   	ret    
c001bd05:	90                   	nop

c001bd06 <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c001bd06:	55                   	push   ebp
c001bd07:	57                   	push   edi
c001bd08:	56                   	push   esi
c001bd09:	53                   	push   ebx
c001bd0a:	81 ec 5c 09 00 00    	sub    esp,0x95c
c001bd10:	8b ac 24 74 09 00 00 	mov    ebp,DWORD PTR [esp+0x974]
c001bd17:	85 ed                	test   ebp,ebp
c001bd19:	0f 84 51 02 00 00    	je     c001bf70 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26a>
c001bd1f:	83 bc 24 80 09 00 00 00 	cmp    DWORD PTR [esp+0x980],0x0
c001bd27:	0f 84 43 02 00 00    	je     c001bf70 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26a>
c001bd2d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001bd30:	0b 45 08             	or     eax,DWORD PTR [ebp+0x8]
c001bd33:	75 0a                	jne    c001bd3f <ISO9660::readDir(void*, unsigned long, void*, int*)+0x39>
c001bd35:	b8 07 00 00 00       	mov    eax,0x7
c001bd3a:	e9 36 02 00 00       	jmp    c001bf75 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26f>
c001bd3f:	50                   	push   eax
c001bd40:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c001bd44:	50                   	push   eax
c001bd45:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c001bd4c:	53                   	push   ebx
c001bd4d:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001bd50:	c1 e0 0b             	shl    eax,0xb
c001bd53:	03 45 10             	add    eax,DWORD PTR [ebp+0x10]
c001bd56:	c1 e8 0b             	shr    eax,0xb
c001bd59:	50                   	push   eax
c001bd5a:	e8 f8 fc ff ff       	call   c001ba57 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001bd5f:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001bd62:	83 c4 10             	add    esp,0x10
c001bd65:	89 c1                	mov    ecx,eax
c001bd67:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c001bd6a:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c001bd70:	8a 1c 0b             	mov    bl,BYTE PTR [ebx+ecx*1]
c001bd73:	84 db                	test   bl,bl
c001bd75:	0f 85 8b 00 00 00    	jne    c001be06 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x100>
c001bd7b:	8d b0 ff 07 00 00    	lea    esi,[eax+0x7ff]
c001bd81:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c001bd84:	81 e6 ff 07 00 00    	and    esi,0x7ff
c001bd8a:	29 c6                	sub    esi,eax
c001bd8c:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c001bd90:	89 f3                	mov    ebx,esi
c001bd92:	89 f1                	mov    ecx,esi
c001bd94:	c1 fb 1f             	sar    ebx,0x1f
c001bd97:	01 f0                	add    eax,esi
c001bd99:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c001bd9c:	11 da                	adc    edx,ebx
c001bd9e:	89 04 24             	mov    DWORD PTR [esp],eax
c001bda1:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001bda5:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c001bda8:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c001bdab:	89 d8                	mov    eax,ebx
c001bdad:	39 74 24 0c          	cmp    DWORD PTR [esp+0xc],esi
c001bdb1:	ba 00 00 00 00       	mov    edx,0x0
c001bdb6:	19 f8                	sbb    eax,edi
c001bdb8:	b8 00 00 00 00       	mov    eax,0x0
c001bdbd:	73 08                	jae    c001bdc7 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc1>
c001bdbf:	89 f0                	mov    eax,esi
c001bdc1:	89 fa                	mov    edx,edi
c001bdc3:	29 c8                	sub    eax,ecx
c001bdc5:	19 da                	sbb    edx,ebx
c001bdc7:	89 d7                	mov    edi,edx
c001bdc9:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c001bdcc:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c001bdcf:	09 c7                	or     edi,eax
c001bdd1:	0f 84 5e ff ff ff    	je     c001bd35 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x2f>
c001bdd7:	57                   	push   edi
c001bdd8:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c001bddc:	50                   	push   eax
c001bddd:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c001bde4:	53                   	push   ebx
c001bde5:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001bde8:	c1 e0 0b             	shl    eax,0xb
c001bdeb:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c001bdef:	c1 e8 0b             	shr    eax,0xb
c001bdf2:	50                   	push   eax
c001bdf3:	e8 5f fc ff ff       	call   c001ba57 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001bdf8:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001bdfb:	83 c4 10             	add    esp,0x10
c001bdfe:	25 ff 07 00 00       	and    eax,0x7ff
c001be03:	8a 1c 03             	mov    bl,BYTE PTR [ebx+eax*1]
c001be06:	31 ff                	xor    edi,edi
c001be08:	56                   	push   esi
c001be09:	6a 28                	push   0x28
c001be0b:	6a 00                	push   0x0
c001be0d:	8d 44 24 24          	lea    eax,[esp+0x24]
c001be11:	50                   	push   eax
c001be12:	e8 6d 48 fe ff       	call   c0000684 <memset>
c001be17:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001be1a:	25 ff 07 00 00       	and    eax,0x7ff
c001be1f:	89 c6                	mov    esi,eax
c001be21:	83 c6 21             	add    esi,0x21
c001be24:	83 d7 00             	adc    edi,0x0
c001be27:	83 c4 10             	add    esp,0x10
c001be2a:	31 c9                	xor    ecx,ecx
c001be2c:	8a 84 34 50 01 00 00 	mov    al,BYTE PTR [esp+esi*1+0x150]
c001be33:	83 f9 28             	cmp    ecx,0x28
c001be36:	88 04 24             	mov    BYTE PTR [esp],al
c001be39:	0f 94 c2             	sete   dl
c001be3c:	88 d0                	mov    al,dl
c001be3e:	ba ff 07 00 00       	mov    edx,0x7ff
c001be43:	39 f2                	cmp    edx,esi
c001be45:	ba 00 00 00 00       	mov    edx,0x0
c001be4a:	19 fa                	sbb    edx,edi
c001be4c:	0f 92 c2             	setb   dl
c001be4f:	09 c2                	or     edx,eax
c001be51:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c001be55:	0f 94 c0             	sete   al
c001be58:	08 d0                	or     al,dl
c001be5a:	75 16                	jne    c001be72 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x16c>
c001be5c:	80 3c 24 3b          	cmp    BYTE PTR [esp],0x3b
c001be60:	74 10                	je     c001be72 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x16c>
c001be62:	8a 04 24             	mov    al,BYTE PTR [esp]
c001be65:	88 44 0c 18          	mov    BYTE PTR [esp+ecx*1+0x18],al
c001be69:	41                   	inc    ecx
c001be6a:	83 c6 01             	add    esi,0x1
c001be6d:	83 d7 00             	adc    edi,0x0
c001be70:	eb ba                	jmp    c001be2c <ISO9660::readDir(void*, unsigned long, void*, int*)+0x126>
c001be72:	66 c7 44 24 40 00 00 	mov    WORD PTR [esp+0x40],0x0
c001be79:	83 ec 0c             	sub    esp,0xc
c001be7c:	8d 74 24 24          	lea    esi,[esp+0x24]
c001be80:	56                   	push   esi
c001be81:	e8 1a 48 fe ff       	call   c00006a0 <strlen>
c001be86:	8d bc 24 60 09 00 00 	lea    edi,[esp+0x960]
c001be8d:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c001be91:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c001be99:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001be9c:	5a                   	pop    edx
c001be9d:	25 ff 07 00 00       	and    eax,0x7ff
c001bea2:	59                   	pop    ecx
c001bea3:	01 f8                	add    eax,edi
c001bea5:	8a 80 19 f8 ff ff    	mov    al,BYTE PTR [eax-0x7e7]
c001beab:	83 e0 02             	and    eax,0x2
c001beae:	3c 01                	cmp    al,0x1
c001beb0:	19 c0                	sbb    eax,eax
c001beb2:	83 c0 02             	add    eax,0x2
c001beb5:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c001beb9:	56                   	push   esi
c001beba:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c001bebe:	50                   	push   eax
c001bebf:	e8 7c 48 fe ff       	call   c0000740 <strcpy>
c001bec4:	8a 44 24 60          	mov    al,BYTE PTR [esp+0x60]
c001bec8:	83 c4 10             	add    esp,0x10
c001becb:	84 c0                	test   al,al
c001becd:	75 21                	jne    c001bef0 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x1ea>
c001becf:	c7 44 24 44 01 00 00 00 	mov    DWORD PTR [esp+0x44],0x1
c001bed7:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001bedf:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c001bee7:	66 c7 44 24 50 2e 00 	mov    WORD PTR [esp+0x50],0x2e
c001beee:	eb 28                	jmp    c001bf18 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x212>
c001bef0:	fe c8                	dec    al
c001bef2:	75 24                	jne    c001bf18 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x212>
c001bef4:	c7 44 24 44 02 00 00 00 	mov    DWORD PTR [esp+0x44],0x2
c001befc:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001bf04:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c001bf0c:	66 c7 44 24 50 2e 2e 	mov    WORD PTR [esp+0x50],0x2e2e
c001bf13:	c6 44 24 52 00       	mov    BYTE PTR [esp+0x52],0x0
c001bf18:	8d 74 24 40          	lea    esi,[esp+0x40]
c001bf1c:	8b 8c 24 78 09 00 00 	mov    ecx,DWORD PTR [esp+0x978]
c001bf23:	8b bc 24 7c 09 00 00 	mov    edi,DWORD PTR [esp+0x97c]
c001bf2a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001bf2c:	0f b6 f3             	movzx  esi,bl
c001bf2f:	8b 84 24 80 09 00 00 	mov    eax,DWORD PTR [esp+0x980]
c001bf36:	31 db                	xor    ebx,ebx
c001bf38:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c001bf3e:	89 df                	mov    edi,ebx
c001bf40:	01 75 10             	add    DWORD PTR [ebp+0x10],esi
c001bf43:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001bf46:	11 5d 14             	adc    DWORD PTR [ebp+0x14],ebx
c001bf49:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001bf4c:	39 c6                	cmp    esi,eax
c001bf4e:	19 d7                	sbb    edi,edx
c001bf50:	72 10                	jb     c001bf62 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x25c>
c001bf52:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c001bf59:	c7 45 0c 00 00 00 00 	mov    DWORD PTR [ebp+0xc],0x0
c001bf60:	eb 0a                	jmp    c001bf6c <ISO9660::readDir(void*, unsigned long, void*, int*)+0x266>
c001bf62:	29 f0                	sub    eax,esi
c001bf64:	19 da                	sbb    edx,ebx
c001bf66:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c001bf69:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c001bf6c:	31 c0                	xor    eax,eax
c001bf6e:	eb 05                	jmp    c001bf75 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26f>
c001bf70:	b8 04 00 00 00       	mov    eax,0x4
c001bf75:	81 c4 5c 09 00 00    	add    esp,0x95c
c001bf7b:	5b                   	pop    ebx
c001bf7c:	5e                   	pop    esi
c001bf7d:	5f                   	pop    edi
c001bf7e:	5d                   	pop    ebp
c001bf7f:	c3                   	ret    

c001bf80 <readRoot(unsigned int*, unsigned int*, char)>:
c001bf80:	57                   	push   edi
c001bf81:	56                   	push   esi
c001bf82:	81 ec 38 08 00 00    	sub    esp,0x838
c001bf88:	0f be 84 24 4c 08 00 00 	movsx  eax,BYTE PTR [esp+0x84c]
c001bf90:	50                   	push   eax
c001bf91:	8d 44 24 38          	lea    eax,[esp+0x38]
c001bf95:	50                   	push   eax
c001bf96:	6a 10                	push   0x10
c001bf98:	e8 ba fa ff ff       	call   c001ba57 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001bf9d:	8d b4 24 dc 00 00 00 	lea    esi,[esp+0xdc]
c001bfa4:	8d 7c 24 1e          	lea    edi,[esp+0x1e]
c001bfa8:	b9 22 00 00 00       	mov    ecx,0x22
c001bfad:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001bfaf:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c001bfb6:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001bfba:	89 10                	mov    DWORD PTR [eax],edx
c001bfbc:	8b 84 24 54 08 00 00 	mov    eax,DWORD PTR [esp+0x854]
c001bfc3:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001bfc7:	89 10                	mov    DWORD PTR [eax],edx
c001bfc9:	81 c4 44 08 00 00    	add    esp,0x844
c001bfcf:	b0 01                	mov    al,0x1
c001bfd1:	5e                   	pop    esi
c001bfd2:	5f                   	pop    edi
c001bfd3:	c3                   	ret    

c001bfd4 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>:
c001bfd4:	55                   	push   ebp
c001bfd5:	57                   	push   edi
c001bfd6:	56                   	push   esi
c001bfd7:	53                   	push   ebx
c001bfd8:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001bfde:	8b 84 24 44 01 00 00 	mov    eax,DWORD PTR [esp+0x144]
c001bfe5:	8b 9c 24 30 01 00 00 	mov    ebx,DWORD PTR [esp+0x130]
c001bfec:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001bff0:	80 7b 01 3a          	cmp    BYTE PTR [ebx+0x1],0x3a
c001bff4:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001bff8:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001bffc:	75 03                	jne    c001c001 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c001bffe:	83 c3 02             	add    ebx,0x2
c001c001:	80 3b 2f             	cmp    BYTE PTR [ebx],0x2f
c001c004:	75 03                	jne    c001c009 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x35>
c001c006:	43                   	inc    ebx
c001c007:	eb f8                	jmp    c001c001 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c001c009:	51                   	push   ecx
c001c00a:	68 00 01 00 00       	push   0x100
c001c00f:	6a 00                	push   0x0
c001c011:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001c015:	50                   	push   eax
c001c016:	e8 69 46 fe ff       	call   c0000684 <memset>
c001c01b:	83 c4 10             	add    esp,0x10
c001c01e:	31 d2                	xor    edx,edx
c001c020:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c001c023:	84 c0                	test   al,al
c001c025:	74 21                	je     c001c048 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x74>
c001c027:	3c 2f                	cmp    al,0x2f
c001c029:	75 0b                	jne    c001c036 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x62>
c001c02b:	8d 5c 13 01          	lea    ebx,[ebx+edx*1+0x1]
c001c02f:	bd 01 00 00 00       	mov    ebp,0x1
c001c034:	eb 14                	jmp    c001c04a <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x76>
c001c036:	8d 48 9f             	lea    ecx,[eax-0x61]
c001c039:	80 f9 19             	cmp    cl,0x19
c001c03c:	77 03                	ja     c001c041 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x6d>
c001c03e:	83 e8 20             	sub    eax,0x20
c001c041:	88 44 14 10          	mov    BYTE PTR [esp+edx*1+0x10],al
c001c045:	42                   	inc    edx
c001c046:	eb d8                	jmp    c001c020 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x4c>
c001c048:	31 ed                	xor    ebp,ebp
c001c04a:	83 ec 0c             	sub    esp,0xc
c001c04d:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c001c054:	e8 6a d9 fe ff       	call   c00099c3 <malloc>
c001c059:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c001c060:	89 c6                	mov    esi,eax
c001c062:	8d b9 ff 07 00 00    	lea    edi,[ecx+0x7ff]
c001c068:	c1 ef 0b             	shr    edi,0xb
c001c06b:	03 bc 24 44 01 00 00 	add    edi,DWORD PTR [esp+0x144]
c001c072:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c001c076:	83 c4 10             	add    esp,0x10
c001c079:	0f be 7c 24 0c       	movsx  edi,BYTE PTR [esp+0xc]
c001c07e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001c082:	3b 8c 24 34 01 00 00 	cmp    ecx,DWORD PTR [esp+0x134]
c001c089:	74 28                	je     c001c0b3 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xdf>
c001c08b:	52                   	push   edx
c001c08c:	57                   	push   edi
c001c08d:	50                   	push   eax
c001c08e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001c092:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001c099:	e8 b9 f9 ff ff       	call   c001ba57 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001c09e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001c0a2:	ff 84 24 44 01 00 00 	inc    DWORD PTR [esp+0x144]
c001c0a9:	05 00 08 00 00       	add    eax,0x800
c001c0ae:	83 c4 10             	add    esp,0x10
c001c0b1:	eb cb                	jmp    c001c07e <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xaa>
c001c0b3:	83 ec 0c             	sub    esp,0xc
c001c0b6:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c001c0ba:	57                   	push   edi
c001c0bb:	e8 e0 45 fe ff       	call   c00006a0 <strlen>
c001c0c0:	50                   	push   eax
c001c0c1:	57                   	push   edi
c001c0c2:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c001c0c9:	56                   	push   esi
c001c0ca:	e8 46 f9 ff ff       	call   c001ba15 <__memmem(unsigned char*, int, unsigned char*, int)>
c001c0cf:	83 c4 20             	add    esp,0x20
c001c0d2:	85 c0                	test   eax,eax
c001c0d4:	75 13                	jne    c001c0e9 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x115>
c001c0d6:	83 ec 0c             	sub    esp,0xc
c001c0d9:	56                   	push   esi
c001c0da:	e8 f4 d8 fe ff       	call   c00099d3 <free>
c001c0df:	83 c4 10             	add    esp,0x10
c001c0e2:	31 c0                	xor    eax,eax
c001c0e4:	e9 b3 00 00 00       	jmp    c001c19c <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c001c0e9:	0f b6 78 e2          	movzx  edi,BYTE PTR [eax-0x1e]
c001c0ed:	0f b6 50 e3          	movzx  edx,BYTE PTR [eax-0x1d]
c001c0f1:	c1 e7 08             	shl    edi,0x8
c001c0f4:	c1 e2 10             	shl    edx,0x10
c001c0f7:	09 d7                	or     edi,edx
c001c0f9:	0f b6 50 e1          	movzx  edx,BYTE PTR [eax-0x1f]
c001c0fd:	09 d7                	or     edi,edx
c001c0ff:	0f b6 50 e4          	movzx  edx,BYTE PTR [eax-0x1c]
c001c103:	c1 e2 18             	shl    edx,0x18
c001c106:	09 d7                	or     edi,edx
c001c108:	0f b6 50 ea          	movzx  edx,BYTE PTR [eax-0x16]
c001c10c:	89 d1                	mov    ecx,edx
c001c10e:	0f b6 50 eb          	movzx  edx,BYTE PTR [eax-0x15]
c001c112:	c1 e1 08             	shl    ecx,0x8
c001c115:	c1 e2 10             	shl    edx,0x10
c001c118:	09 ca                	or     edx,ecx
c001c11a:	0f b6 48 e9          	movzx  ecx,BYTE PTR [eax-0x17]
c001c11e:	09 ca                	or     edx,ecx
c001c120:	0f b6 48 ec          	movzx  ecx,BYTE PTR [eax-0x14]
c001c124:	c1 e1 18             	shl    ecx,0x18
c001c127:	09 ca                	or     edx,ecx
c001c129:	89 e9                	mov    ecx,ebp
c001c12b:	84 c9                	test   cl,cl
c001c12d:	74 3c                	je     c001c16b <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x197>
c001c12f:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001c133:	83 ec 0c             	sub    esp,0xc
c001c136:	56                   	push   esi
c001c137:	e8 97 d8 fe ff       	call   c00099d3 <free>
c001c13c:	83 c4 0c             	add    esp,0xc
c001c13f:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001c146:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c001c14b:	50                   	push   eax
c001c14c:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001c153:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001c15a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001c15e:	52                   	push   edx
c001c15f:	57                   	push   edi
c001c160:	53                   	push   ebx
c001c161:	e8 6e fe ff ff       	call   c001bfd4 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c001c166:	83 c4 20             	add    esp,0x20
c001c169:	eb 31                	jmp    c001c19c <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c001c16b:	8a 40 f8             	mov    al,BYTE PTR [eax-0x8]
c001c16e:	8b 9c 24 3c 01 00 00 	mov    ebx,DWORD PTR [esp+0x13c]
c001c175:	d0 e8                	shr    al,1
c001c177:	89 3b                	mov    DWORD PTR [ebx],edi
c001c179:	83 e0 01             	and    eax,0x1
c001c17c:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c001c183:	83 ec 0c             	sub    esp,0xc
c001c186:	89 13                	mov    DWORD PTR [ebx],edx
c001c188:	8b 9c 24 54 01 00 00 	mov    ebx,DWORD PTR [esp+0x154]
c001c18f:	89 03                	mov    DWORD PTR [ebx],eax
c001c191:	56                   	push   esi
c001c192:	e8 3c d8 fe ff       	call   c00099d3 <free>
c001c197:	83 c4 10             	add    esp,0x10
c001c19a:	b0 01                	mov    al,0x1
c001c19c:	81 c4 1c 01 00 00    	add    esp,0x11c
c001c1a2:	5b                   	pop    ebx
c001c1a3:	5e                   	pop    esi
c001c1a4:	5f                   	pop    edi
c001c1a5:	5d                   	pop    ebp
c001c1a6:	c3                   	ret    

c001c1a7 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>:
c001c1a7:	55                   	push   ebp
c001c1a8:	57                   	push   edi
c001c1a9:	56                   	push   esi
c001c1aa:	53                   	push   ebx
c001c1ab:	83 ec 20             	sub    esp,0x20
c001c1ae:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001c1b2:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c001c1b6:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001c1ba:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001c1c2:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001c1ca:	0f be 7c 24 40       	movsx  edi,BYTE PTR [esp+0x40]
c001c1cf:	c7 03 ff ff ff ff    	mov    DWORD PTR [ebx],0xffffffff
c001c1d5:	c7 06 ff ff ff ff    	mov    DWORD PTR [esi],0xffffffff
c001c1db:	57                   	push   edi
c001c1dc:	8d 44 24 14          	lea    eax,[esp+0x14]
c001c1e0:	50                   	push   eax
c001c1e1:	8d 44 24 14          	lea    eax,[esp+0x14]
c001c1e5:	50                   	push   eax
c001c1e6:	e8 95 fd ff ff       	call   c001bf80 <readRoot(unsigned int*, unsigned int*, char)>
c001c1eb:	5a                   	pop    edx
c001c1ec:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001c1f0:	e8 ab 44 fe ff       	call   c00006a0 <strlen>
c001c1f5:	83 c4 10             	add    esp,0x10
c001c1f8:	83 f8 03             	cmp    eax,0x3
c001c1fb:	77 17                	ja     c001c214 <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x6d>
c001c1fd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c201:	89 03                	mov    DWORD PTR [ebx],eax
c001c203:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c207:	89 06                	mov    DWORD PTR [esi],eax
c001c209:	c7 45 00 01 00 00 00 	mov    DWORD PTR [ebp+0x0],0x1
c001c210:	b0 01                	mov    al,0x1
c001c212:	eb 19                	jmp    c001c22d <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x86>
c001c214:	50                   	push   eax
c001c215:	55                   	push   ebp
c001c216:	57                   	push   edi
c001c217:	56                   	push   esi
c001c218:	53                   	push   ebx
c001c219:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001c21d:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001c221:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001c225:	e8 aa fd ff ff       	call   c001bfd4 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c001c22a:	83 c4 20             	add    esp,0x20
c001c22d:	83 c4 1c             	add    esp,0x1c
c001c230:	5b                   	pop    ebx
c001c231:	5e                   	pop    esi
c001c232:	5f                   	pop    edi
c001c233:	5d                   	pop    ebp
c001c234:	c3                   	ret    
c001c235:	90                   	nop

c001c236 <ISO9660::open(char const*, void**, FileOpenMode)>:
c001c236:	57                   	push   edi
c001c237:	56                   	push   esi
c001c238:	53                   	push   ebx
c001c239:	83 ec 10             	sub    esp,0x10
c001c23c:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001c240:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001c244:	85 ff                	test   edi,edi
c001c246:	0f 84 8b 00 00 00    	je     c001c2d7 <ISO9660::open(char const*, void**, FileOpenMode)+0xa1>
c001c24c:	85 f6                	test   esi,esi
c001c24e:	0f 84 83 00 00 00    	je     c001c2d7 <ISO9660::open(char const*, void**, FileOpenMode)+0xa1>
c001c254:	b8 03 00 00 00       	mov    eax,0x3
c001c259:	83 7c 24 2c 01       	cmp    DWORD PTR [esp+0x2c],0x1
c001c25e:	75 7c                	jne    c001c2dc <ISO9660::open(char const*, void**, FileOpenMode)+0xa6>
c001c260:	83 ec 0c             	sub    esp,0xc
c001c263:	6a 1c                	push   0x1c
c001c265:	e8 59 d7 fe ff       	call   c00099c3 <malloc>
c001c26a:	89 07                	mov    DWORD PTR [edi],eax
c001c26c:	89 c3                	mov    ebx,eax
c001c26e:	58                   	pop    eax
c001c26f:	8d 44 24 18          	lea    eax,[esp+0x18]
c001c273:	50                   	push   eax
c001c274:	0f be 06             	movsx  eax,BYTE PTR [esi]
c001c277:	50                   	push   eax
c001c278:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001c27c:	50                   	push   eax
c001c27d:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001c281:	50                   	push   eax
c001c282:	56                   	push   esi
c001c283:	e8 1f ff ff ff       	call   c001c1a7 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001c288:	83 c4 20             	add    esp,0x20
c001c28b:	84 c0                	test   al,al
c001c28d:	74 07                	je     c001c296 <ISO9660::open(char const*, void**, FileOpenMode)+0x60>
c001c28f:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001c294:	74 0b                	je     c001c2a1 <ISO9660::open(char const*, void**, FileOpenMode)+0x6b>
c001c296:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c001c29a:	b8 01 00 00 00       	mov    eax,0x1
c001c29f:	eb 3b                	jmp    c001c2dc <ISO9660::open(char const*, void**, FileOpenMode)+0xa6>
c001c2a1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c2a5:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c001c2a9:	89 03                	mov    DWORD PTR [ebx],eax
c001c2ab:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c001c2b2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c2b6:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c001c2bd:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001c2c4:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001c2c7:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001c2ce:	8a 06                	mov    al,BYTE PTR [esi]
c001c2d0:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c001c2d3:	31 c0                	xor    eax,eax
c001c2d5:	eb 05                	jmp    c001c2dc <ISO9660::open(char const*, void**, FileOpenMode)+0xa6>
c001c2d7:	b8 04 00 00 00       	mov    eax,0x4
c001c2dc:	83 c4 10             	add    esp,0x10
c001c2df:	5b                   	pop    ebx
c001c2e0:	5e                   	pop    esi
c001c2e1:	5f                   	pop    edi
c001c2e2:	c3                   	ret    
c001c2e3:	90                   	nop

c001c2e4 <ISO9660::exists(char const*)>:
c001c2e4:	83 ec 28             	sub    esp,0x28
c001c2e7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001c2eb:	8d 54 24 18          	lea    edx,[esp+0x18]
c001c2ef:	52                   	push   edx
c001c2f0:	0f be 10             	movsx  edx,BYTE PTR [eax]
c001c2f3:	52                   	push   edx
c001c2f4:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c001c2f8:	52                   	push   edx
c001c2f9:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c001c2fd:	52                   	push   edx
c001c2fe:	50                   	push   eax
c001c2ff:	e8 a3 fe ff ff       	call   c001c1a7 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001c304:	83 c4 3c             	add    esp,0x3c
c001c307:	c3                   	ret    

c001c308 <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c001c308:	56                   	push   esi
c001c309:	53                   	push   ebx
c001c30a:	83 ec 14             	sub    esp,0x14
c001c30d:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c001c311:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001c315:	85 db                	test   ebx,ebx
c001c317:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001c31b:	0f 94 c2             	sete   dl
c001c31e:	85 f6                	test   esi,esi
c001c320:	0f 94 c0             	sete   al
c001c323:	08 c2                	or     dl,al
c001c325:	75 68                	jne    c001c38f <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c001c327:	85 c9                	test   ecx,ecx
c001c329:	74 64                	je     c001c38f <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c001c32b:	83 ec 0c             	sub    esp,0xc
c001c32e:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001c331:	8d 44 24 18          	lea    eax,[esp+0x18]
c001c335:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c001c33b:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001c342:	50                   	push   eax
c001c343:	0f be 01             	movsx  eax,BYTE PTR [ecx]
c001c346:	50                   	push   eax
c001c347:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001c34b:	50                   	push   eax
c001c34c:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001c350:	50                   	push   eax
c001c351:	51                   	push   ecx
c001c352:	e8 50 fe ff ff       	call   c001c1a7 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001c357:	83 c4 20             	add    esp,0x20
c001c35a:	ba 01 00 00 00       	mov    edx,0x1
c001c35f:	84 c0                	test   al,al
c001c361:	74 31                	je     c001c394 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c001c363:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c367:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001c36e:	89 03                	mov    DWORD PTR [ebx],eax
c001c370:	ba 00 00 00 00       	mov    edx,0x0
c001c375:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c379:	85 c0                	test   eax,eax
c001c37b:	0f 95 06             	setne  BYTE PTR [esi]
c001c37e:	74 14                	je     c001c394 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c001c380:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c001c386:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001c38d:	eb 05                	jmp    c001c394 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c001c38f:	ba 04 00 00 00       	mov    edx,0x4
c001c394:	83 c4 14             	add    esp,0x14
c001c397:	89 d0                	mov    eax,edx
c001c399:	5b                   	pop    ebx
c001c39a:	5e                   	pop    esi
c001c39b:	c3                   	ret    

c001c39c <ISO9660::openDir(char const*, void**)>:
c001c39c:	57                   	push   edi
c001c39d:	56                   	push   esi
c001c39e:	53                   	push   ebx
c001c39f:	83 ec 10             	sub    esp,0x10
c001c3a2:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001c3a6:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001c3aa:	85 ff                	test   edi,edi
c001c3ac:	74 7b                	je     c001c429 <ISO9660::openDir(char const*, void**)+0x8d>
c001c3ae:	85 f6                	test   esi,esi
c001c3b0:	74 77                	je     c001c429 <ISO9660::openDir(char const*, void**)+0x8d>
c001c3b2:	83 ec 0c             	sub    esp,0xc
c001c3b5:	6a 1c                	push   0x1c
c001c3b7:	e8 07 d6 fe ff       	call   c00099c3 <malloc>
c001c3bc:	89 07                	mov    DWORD PTR [edi],eax
c001c3be:	89 c3                	mov    ebx,eax
c001c3c0:	58                   	pop    eax
c001c3c1:	8d 44 24 18          	lea    eax,[esp+0x18]
c001c3c5:	50                   	push   eax
c001c3c6:	0f be 06             	movsx  eax,BYTE PTR [esi]
c001c3c9:	50                   	push   eax
c001c3ca:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001c3ce:	50                   	push   eax
c001c3cf:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001c3d3:	50                   	push   eax
c001c3d4:	56                   	push   esi
c001c3d5:	e8 cd fd ff ff       	call   c001c1a7 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001c3da:	83 c4 20             	add    esp,0x20
c001c3dd:	84 c0                	test   al,al
c001c3df:	74 07                	je     c001c3e8 <ISO9660::openDir(char const*, void**)+0x4c>
c001c3e1:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001c3e6:	75 0b                	jne    c001c3f3 <ISO9660::openDir(char const*, void**)+0x57>
c001c3e8:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c001c3ec:	b8 01 00 00 00       	mov    eax,0x1
c001c3f1:	eb 3b                	jmp    c001c42e <ISO9660::openDir(char const*, void**)+0x92>
c001c3f3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c3f7:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c001c3fb:	89 03                	mov    DWORD PTR [ebx],eax
c001c3fd:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c001c404:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c408:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c001c40f:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001c416:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001c419:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001c420:	8a 06                	mov    al,BYTE PTR [esi]
c001c422:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c001c425:	31 c0                	xor    eax,eax
c001c427:	eb 05                	jmp    c001c42e <ISO9660::openDir(char const*, void**)+0x92>
c001c429:	b8 04 00 00 00       	mov    eax,0x4
c001c42e:	83 c4 10             	add    esp,0x10
c001c431:	5b                   	pop    ebx
c001c432:	5e                   	pop    esi
c001c433:	5f                   	pop    edi
c001c434:	c3                   	ret    
c001c435:	90                   	nop

c001c436 <ISO9660::ISO9660()>:
c001c436:	83 ec 0c             	sub    esp,0xc
c001c439:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c43d:	83 ec 0c             	sub    esp,0xc
c001c440:	50                   	push   eax
c001c441:	e8 90 09 ff ff       	call   c000cdd6 <Filesystem::Filesystem()>
c001c446:	83 c4 10             	add    esp,0x10
c001c449:	ba 30 4c 02 c0       	mov    edx,0xc0024c30
c001c44e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c452:	89 10                	mov    DWORD PTR [eax],edx
c001c454:	90                   	nop
c001c455:	83 c4 0c             	add    esp,0xc
c001c458:	c3                   	ret    
c001c459:	90                   	nop

c001c45a <SoundCard::beginPlayback()>:
c001c45a:	c7 44 24 04 90 4c 02 c0 	mov    DWORD PTR [esp+0x4],0xc0024c90
c001c462:	e9 1a 7f ff ff       	jmp    c0014381 <Krnl::panic(char const*)>
c001c467:	90                   	nop

c001c468 <SoundCard::stopPlayback()>:
c001c468:	c7 44 24 04 c4 4c 02 c0 	mov    DWORD PTR [esp+0x4],0xc0024cc4
c001c470:	e9 0c 7f ff ff       	jmp    c0014381 <Krnl::panic(char const*)>
c001c475:	90                   	nop

c001c476 <SoundCard::SoundCard(char const*)>:
c001c476:	83 ec 1c             	sub    esp,0x1c
c001c479:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c47d:	83 ec 08             	sub    esp,0x8
c001c480:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001c484:	50                   	push   eax
c001c485:	e8 80 1c ff ff       	call   c000e10a <Device::Device(char const*)>
c001c48a:	83 c4 10             	add    esp,0x10
c001c48d:	ba d0 4d 02 c0       	mov    edx,0xc0024dd0
c001c492:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c496:	89 10                	mov    DWORD PTR [eax],edx
c001c498:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c49c:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c001c4a3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c4a7:	c7 80 dc 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1dc],0x0
c001c4b1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c4b5:	c7 80 e0 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e0],0x0
c001c4bf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c4c3:	c7 80 e4 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e4],0x0
c001c4cd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c4d1:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c001c4db:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001c4e3:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c001c4e8:	7f 19                	jg     c001c503 <SoundCard::SoundCard(char const*)+0x8d>
c001c4ea:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c4ee:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001c4f2:	83 c2 54             	add    edx,0x54
c001c4f5:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c001c4fd:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001c501:	eb e0                	jmp    c001c4e3 <SoundCard::SoundCard(char const*)+0x6d>
c001c503:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c507:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c001c50e:	90                   	nop
c001c50f:	83 c4 1c             	add    esp,0x1c
c001c512:	c3                   	ret    
c001c513:	90                   	nop

c001c514 <SoundCard::~SoundCard()>:
c001c514:	83 ec 0c             	sub    esp,0xc
c001c517:	ba d0 4d 02 c0       	mov    edx,0xc0024dd0
c001c51c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c520:	89 10                	mov    DWORD PTR [eax],edx
c001c522:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c526:	83 ec 0c             	sub    esp,0xc
c001c529:	50                   	push   eax
c001c52a:	e8 a5 18 ff ff       	call   c000ddd4 <Device::~Device()>
c001c52f:	83 c4 10             	add    esp,0x10
c001c532:	90                   	nop
c001c533:	83 c4 0c             	add    esp,0xc
c001c536:	c3                   	ret    
c001c537:	90                   	nop

c001c538 <SoundCard::~SoundCard()>:
c001c538:	83 ec 0c             	sub    esp,0xc
c001c53b:	83 ec 0c             	sub    esp,0xc
c001c53e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c542:	e8 cd ff ff ff       	call   c001c514 <SoundCard::~SoundCard()>
c001c547:	83 c4 10             	add    esp,0x10
c001c54a:	83 ec 08             	sub    esp,0x8
c001c54d:	68 e8 01 00 00       	push   0x1e8
c001c552:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c556:	e8 83 04 ff ff       	call   c000c9de <operator delete(void*, unsigned long)>
c001c55b:	83 c4 10             	add    esp,0x10
c001c55e:	83 c4 0c             	add    esp,0xc
c001c561:	c3                   	ret    

c001c562 <SoundCard::configureRates(int, int, int)>:
c001c562:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001c566:	31 c0                	xor    eax,eax
c001c568:	80 ba d8 01 00 00 00 	cmp    BYTE PTR [edx+0x1d8],0x0
c001c56f:	75 20                	jne    c001c591 <SoundCard::configureRates(int, int, int)+0x2f>
c001c571:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c575:	89 82 e0 01 00 00    	mov    DWORD PTR [edx+0x1e0],eax
c001c57b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c57f:	89 82 dc 01 00 00    	mov    DWORD PTR [edx+0x1dc],eax
c001c585:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c589:	89 82 e4 01 00 00    	mov    DWORD PTR [edx+0x1e4],eax
c001c58f:	b0 01                	mov    al,0x1
c001c591:	c3                   	ret    

c001c592 <SoundCard::getSamples16(int, short*)>:
c001c592:	55                   	push   ebp
c001c593:	57                   	push   edi
c001c594:	31 ff                	xor    edi,edi
c001c596:	56                   	push   esi
c001c597:	53                   	push   ebx
c001c598:	83 ec 28             	sub    esp,0x28
c001c59b:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c001c59f:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c001c5a3:	8d 5c 2d 00          	lea    ebx,[ebp+ebp*1+0x0]
c001c5a7:	68 f7 4c 02 c0       	push   0xc0024cf7
c001c5ac:	e8 0e 05 ff ff       	call   c000cabf <Dbg::kprintf(char const*, ...)>
c001c5b1:	83 c4 0c             	add    esp,0xc
c001c5b4:	53                   	push   ebx
c001c5b5:	6a 00                	push   0x0
c001c5b7:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001c5bb:	e8 c4 40 fe ff       	call   c0000684 <memset>
c001c5c0:	58                   	pop    eax
c001c5c1:	5a                   	pop    edx
c001c5c2:	53                   	push   ebx
c001c5c3:	31 db                	xor    ebx,ebx
c001c5c5:	68 16 4d 02 c0       	push   0xc0024d16
c001c5ca:	e8 f0 04 ff ff       	call   c000cabf <Dbg::kprintf(char const*, ...)>
c001c5cf:	83 c4 10             	add    esp,0x10
c001c5d2:	52                   	push   edx
c001c5d3:	52                   	push   edx
c001c5d4:	53                   	push   ebx
c001c5d5:	68 29 4d 02 c0       	push   0xc0024d29
c001c5da:	e8 e0 04 ff ff       	call   c000cabf <Dbg::kprintf(char const*, ...)>
c001c5df:	59                   	pop    ecx
c001c5e0:	58                   	pop    eax
c001c5e1:	ff b4 9e 58 01 00 00 	push   DWORD PTR [esi+ebx*4+0x158]
c001c5e8:	68 41 4d 02 c0       	push   0xc0024d41
c001c5ed:	e8 cd 04 ff ff       	call   c000cabf <Dbg::kprintf(char const*, ...)>
c001c5f2:	8b 84 9e 58 01 00 00 	mov    eax,DWORD PTR [esi+ebx*4+0x158]
c001c5f9:	83 c4 10             	add    esp,0x10
c001c5fc:	85 c0                	test   eax,eax
c001c5fe:	74 44                	je     c001c644 <SoundCard::getSamples16(int, short*)+0xb2>
c001c600:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c001c604:	75 3e                	jne    c001c644 <SoundCard::getSamples16(int, short*)+0xb2>
c001c606:	50                   	push   eax
c001c607:	50                   	push   eax
c001c608:	53                   	push   ebx
c001c609:	68 53 4d 02 c0       	push   0xc0024d53
c001c60e:	e8 ac 04 ff ff       	call   c000cabf <Dbg::kprintf(char const*, ...)>
c001c613:	56                   	push   esi
c001c614:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001c618:	55                   	push   ebp
c001c619:	ff b4 9e 58 01 00 00 	push   DWORD PTR [esi+ebx*4+0x158]
c001c620:	e8 6f 03 00 00       	call   c001c994 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>
c001c625:	83 c4 18             	add    esp,0x18
c001c628:	50                   	push   eax
c001c629:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001c62d:	68 6a 4d 02 c0       	push   0xc0024d6a
c001c632:	e8 88 04 ff ff       	call   c000cabf <Dbg::kprintf(char const*, ...)>
c001c637:	83 c4 10             	add    esp,0x10
c001c63a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c63e:	39 c7                	cmp    edi,eax
c001c640:	7d 02                	jge    c001c644 <SoundCard::getSamples16(int, short*)+0xb2>
c001c642:	89 c7                	mov    edi,eax
c001c644:	43                   	inc    ebx
c001c645:	83 fb 20             	cmp    ebx,0x20
c001c648:	75 88                	jne    c001c5d2 <SoundCard::getSamples16(int, short*)+0x40>
c001c64a:	83 c4 1c             	add    esp,0x1c
c001c64d:	89 f8                	mov    eax,edi
c001c64f:	5b                   	pop    ebx
c001c650:	5e                   	pop    esi
c001c651:	5f                   	pop    edi
c001c652:	5d                   	pop    ebp
c001c653:	c3                   	ret    

c001c654 <SoundCard::getSamples32(int, int*)>:
c001c654:	55                   	push   ebp
c001c655:	57                   	push   edi
c001c656:	31 ff                	xor    edi,edi
c001c658:	56                   	push   esi
c001c659:	31 f6                	xor    esi,esi
c001c65b:	53                   	push   ebx
c001c65c:	83 ec 10             	sub    esp,0x10
c001c65f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001c663:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001c667:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001c66b:	c1 e0 02             	shl    eax,0x2
c001c66e:	50                   	push   eax
c001c66f:	6a 00                	push   0x0
c001c671:	55                   	push   ebp
c001c672:	e8 0d 40 fe ff       	call   c0000684 <memset>
c001c677:	83 c4 10             	add    esp,0x10
c001c67a:	8b 84 bb 58 01 00 00 	mov    eax,DWORD PTR [ebx+edi*4+0x158]
c001c681:	85 c0                	test   eax,eax
c001c683:	74 1b                	je     c001c6a0 <SoundCard::getSamples32(int, int*)+0x4c>
c001c685:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c001c689:	75 15                	jne    c001c6a0 <SoundCard::getSamples32(int, int*)+0x4c>
c001c68b:	53                   	push   ebx
c001c68c:	55                   	push   ebp
c001c68d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001c691:	50                   	push   eax
c001c692:	e8 f9 03 00 00       	call   c001ca90 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>
c001c697:	83 c4 10             	add    esp,0x10
c001c69a:	39 c6                	cmp    esi,eax
c001c69c:	7d 02                	jge    c001c6a0 <SoundCard::getSamples32(int, int*)+0x4c>
c001c69e:	89 c6                	mov    esi,eax
c001c6a0:	47                   	inc    edi
c001c6a1:	83 ff 20             	cmp    edi,0x20
c001c6a4:	75 d4                	jne    c001c67a <SoundCard::getSamples32(int, int*)+0x26>
c001c6a6:	8a 83 d8 01 00 00    	mov    al,BYTE PTR [ebx+0x1d8]
c001c6ac:	85 f6                	test   esi,esi
c001c6ae:	75 0f                	jne    c001c6bf <SoundCard::getSamples32(int, int*)+0x6b>
c001c6b0:	84 c0                	test   al,al
c001c6b2:	74 1b                	je     c001c6cf <SoundCard::getSamples32(int, int*)+0x7b>
c001c6b4:	83 ec 0c             	sub    esp,0xc
c001c6b7:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c6b9:	53                   	push   ebx
c001c6ba:	ff 50 28             	call   DWORD PTR [eax+0x28]
c001c6bd:	eb 0d                	jmp    c001c6cc <SoundCard::getSamples32(int, int*)+0x78>
c001c6bf:	84 c0                	test   al,al
c001c6c1:	75 0c                	jne    c001c6cf <SoundCard::getSamples32(int, int*)+0x7b>
c001c6c3:	83 ec 0c             	sub    esp,0xc
c001c6c6:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c6c8:	53                   	push   ebx
c001c6c9:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001c6cc:	83 c4 10             	add    esp,0x10
c001c6cf:	83 c4 0c             	add    esp,0xc
c001c6d2:	89 f0                	mov    eax,esi
c001c6d4:	5b                   	pop    ebx
c001c6d5:	5e                   	pop    esi
c001c6d6:	5f                   	pop    edi
c001c6d7:	5d                   	pop    ebp
c001c6d8:	c3                   	ret    
c001c6d9:	90                   	nop

c001c6da <SoundCard::addChannel(SoundPort*)>:
c001c6da:	56                   	push   esi
c001c6db:	53                   	push   ebx
c001c6dc:	53                   	push   ebx
c001c6dd:	31 db                	xor    ebx,ebx
c001c6df:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001c6e3:	83 bc 9e 58 01 00 00 00 	cmp    DWORD PTR [esi+ebx*4+0x158],0x0
c001c6eb:	74 27                	je     c001c714 <SoundCard::addChannel(SoundPort*)+0x3a>
c001c6ed:	43                   	inc    ebx
c001c6ee:	83 fb 20             	cmp    ebx,0x20
c001c6f1:	75 f0                	jne    c001c6e3 <SoundCard::addChannel(SoundPort*)+0x9>
c001c6f3:	83 ec 0c             	sub    esp,0xc
c001c6f6:	83 cb ff             	or     ebx,0xffffffff
c001c6f9:	68 8f 4d 02 c0       	push   0xc0024d8f
c001c6fe:	e8 bc 03 ff ff       	call   c000cabf <Dbg::kprintf(char const*, ...)>
c001c703:	c7 04 24 88 4d 02 c0 	mov    DWORD PTR [esp],0xc0024d88
c001c70a:	e8 72 7c ff ff       	call   c0014381 <Krnl::panic(char const*)>
c001c70f:	83 c4 10             	add    esp,0x10
c001c712:	eb 1b                	jmp    c001c72f <SoundCard::addChannel(SoundPort*)+0x55>
c001c714:	51                   	push   ecx
c001c715:	51                   	push   ecx
c001c716:	53                   	push   ebx
c001c717:	68 a7 4d 02 c0       	push   0xc0024da7
c001c71c:	e8 9e 03 ff ff       	call   c000cabf <Dbg::kprintf(char const*, ...)>
c001c721:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001c725:	83 c4 10             	add    esp,0x10
c001c728:	89 84 9e 58 01 00 00 	mov    DWORD PTR [esi+ebx*4+0x158],eax
c001c72f:	89 d8                	mov    eax,ebx
c001c731:	5a                   	pop    edx
c001c732:	5b                   	pop    ebx
c001c733:	5e                   	pop    esi
c001c734:	c3                   	ret    
c001c735:	90                   	nop

c001c736 <SoundCard::removeChannel(int)>:
c001c736:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c73a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001c73e:	c7 84 90 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x158],0x0
c001c749:	c3                   	ret    
c001c74a:	66 90                	xchg   ax,ax

c001c74c <SoundPort::SoundPort(int, int, int, int)>:
c001c74c:	83 ec 0c             	sub    esp,0xc
c001c74f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c753:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001c75a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c75e:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c001c762:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c766:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c76a:	89 10                	mov    DWORD PTR [eax],edx
c001c76c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c770:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001c774:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001c777:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c77b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001c77f:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001c782:	83 7c 24 20 ff       	cmp    DWORD PTR [esp+0x20],0xffffffff
c001c787:	75 13                	jne    c001c79c <SoundPort::SoundPort(int, int, int, int)+0x50>
c001c789:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c78d:	8b 00                	mov    eax,DWORD PTR [eax]
c001c78f:	05 a0 0f 00 00       	add    eax,0xfa0
c001c794:	01 c0                	add    eax,eax
c001c796:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001c79a:	66 90                	xchg   ax,ax
c001c79c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c7a0:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001c7a4:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c001c7a7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c7ab:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c001c7b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c7b6:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001c7b9:	c1 e0 02             	shl    eax,0x2
c001c7bc:	83 ec 0c             	sub    esp,0xc
c001c7bf:	50                   	push   eax
c001c7c0:	e8 fe d1 fe ff       	call   c00099c3 <malloc>
c001c7c5:	83 c4 10             	add    esp,0x10
c001c7c8:	89 c2                	mov    edx,eax
c001c7ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c7ce:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001c7d1:	90                   	nop
c001c7d2:	83 c4 0c             	add    esp,0xc
c001c7d5:	c3                   	ret    
c001c7d6:	66 90                	xchg   ax,ax

c001c7d8 <SoundPort::~SoundPort()>:
c001c7d8:	83 ec 0c             	sub    esp,0xc
c001c7db:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c7df:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001c7e2:	85 c0                	test   eax,eax
c001c7e4:	74 1e                	je     c001c804 <SoundPort::~SoundPort()+0x2c>
c001c7e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c7ea:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001c7ed:	83 ec 0c             	sub    esp,0xc
c001c7f0:	50                   	push   eax
c001c7f1:	e8 dd d1 fe ff       	call   c00099d3 <free>
c001c7f6:	83 c4 10             	add    esp,0x10
c001c7f9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c7fd:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001c804:	90                   	nop
c001c805:	83 c4 0c             	add    esp,0xc
c001c808:	c3                   	ret    
c001c809:	90                   	nop
c001c80a:	66 90                	xchg   ax,ax

c001c80c <SoundPort::unpause()>:
c001c80c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c810:	c6 40 18 00          	mov    BYTE PTR [eax+0x18],0x0
c001c814:	c3                   	ret    
c001c815:	90                   	nop
c001c816:	66 90                	xchg   ax,ax

c001c818 <SoundPort::pause()>:
c001c818:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c81c:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c001c820:	c3                   	ret    
c001c821:	90                   	nop
c001c822:	66 90                	xchg   ax,ax

c001c824 <SoundPort::getBufferUsed()>:
c001c824:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c828:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001c82b:	c3                   	ret    

c001c82c <SoundPort::getBufferSize()>:
c001c82c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c830:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001c833:	c3                   	ret    

c001c834 <SoundPort::buffer16(short*, int)>:
c001c834:	55                   	push   ebp
c001c835:	57                   	push   edi
c001c836:	56                   	push   esi
c001c837:	53                   	push   ebx
c001c838:	83 ec 1c             	sub    esp,0x1c
c001c83b:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001c83f:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001c843:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c001c846:	3b 42 10             	cmp    eax,DWORD PTR [edx+0x10]
c001c849:	0f 84 85 00 00 00    	je     c001c8d4 <SoundPort::buffer16(short*, int)+0xa0>
c001c84f:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c001c853:	85 c9                	test   ecx,ecx
c001c855:	7e 7d                	jle    c001c8d4 <SoundPort::buffer16(short*, int)+0xa0>
c001c857:	0f bf 4d 00          	movsx  ecx,WORD PTR [ebp+0x0]
c001c85b:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c001c85e:	c1 e1 0f             	shl    ecx,0xf
c001c861:	8d 70 01             	lea    esi,[eax+0x1]
c001c864:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c001c867:	89 0c 83             	mov    DWORD PTR [ebx+eax*4],ecx
c001c86a:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001c86d:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001c870:	74 6e                	je     c001c8e0 <SoundPort::buffer16(short*, int)+0xac>
c001c872:	31 f6                	xor    esi,esi
c001c874:	eb 22                	jmp    c001c898 <SoundPort::buffer16(short*, int)+0x64>
c001c876:	66 90                	xchg   ax,ax
c001c878:	0f bf 5c 45 00       	movsx  ebx,WORD PTR [ebp+eax*2+0x0]
c001c87d:	8d 79 01             	lea    edi,[ecx+0x1]
c001c880:	c1 e3 0f             	shl    ebx,0xf
c001c883:	89 7a 14             	mov    DWORD PTR [edx+0x14],edi
c001c886:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c001c889:	89 1c 8f             	mov    DWORD PTR [edi+ecx*4],ebx
c001c88c:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001c88f:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001c892:	74 1c                	je     c001c8b0 <SoundPort::buffer16(short*, int)+0x7c>
c001c894:	89 c6                	mov    esi,eax
c001c896:	66 90                	xchg   ax,ax
c001c898:	8d 46 01             	lea    eax,[esi+0x1]
c001c89b:	39 44 24 38          	cmp    DWORD PTR [esp+0x38],eax
c001c89f:	75 d7                	jne    c001c878 <SoundPort::buffer16(short*, int)+0x44>
c001c8a1:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001c8a5:	83 c4 1c             	add    esp,0x1c
c001c8a8:	5b                   	pop    ebx
c001c8a9:	5e                   	pop    esi
c001c8aa:	5f                   	pop    edi
c001c8ab:	5d                   	pop    ebp
c001c8ac:	c3                   	ret    
c001c8ad:	8d 76 00             	lea    esi,[esi+0x0]
c001c8b0:	8d 46 02             	lea    eax,[esi+0x2]
c001c8b3:	90                   	nop
c001c8b4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c8b8:	83 ec 0c             	sub    esp,0xc
c001c8bb:	68 fc 4d 02 c0       	push   0xc0024dfc
c001c8c0:	e8 fa 01 ff ff       	call   c000cabf <Dbg::kprintf(char const*, ...)>
c001c8c5:	83 c4 10             	add    esp,0x10
c001c8c8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c8cc:	83 c4 1c             	add    esp,0x1c
c001c8cf:	5b                   	pop    ebx
c001c8d0:	5e                   	pop    esi
c001c8d1:	5f                   	pop    edi
c001c8d2:	5d                   	pop    ebp
c001c8d3:	c3                   	ret    
c001c8d4:	83 c4 1c             	add    esp,0x1c
c001c8d7:	31 c0                	xor    eax,eax
c001c8d9:	5b                   	pop    ebx
c001c8da:	5e                   	pop    esi
c001c8db:	5f                   	pop    edi
c001c8dc:	5d                   	pop    ebp
c001c8dd:	c3                   	ret    
c001c8de:	66 90                	xchg   ax,ax
c001c8e0:	b8 01 00 00 00       	mov    eax,0x1
c001c8e5:	eb cd                	jmp    c001c8b4 <SoundPort::buffer16(short*, int)+0x80>
c001c8e7:	90                   	nop

c001c8e8 <SoundPort::buffer32(int*, int)>:
c001c8e8:	55                   	push   ebp
c001c8e9:	57                   	push   edi
c001c8ea:	56                   	push   esi
c001c8eb:	53                   	push   ebx
c001c8ec:	83 ec 1c             	sub    esp,0x1c
c001c8ef:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001c8f3:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001c8f7:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001c8fa:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001c8fe:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c902:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001c905:	74 79                	je     c001c980 <SoundPort::buffer32(int*, int)+0x98>
c001c907:	85 c0                	test   eax,eax
c001c909:	7e 75                	jle    c001c980 <SoundPort::buffer32(int*, int)+0x98>
c001c90b:	8d 71 01             	lea    esi,[ecx+0x1]
c001c90e:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c001c911:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c001c914:	8b 37                	mov    esi,DWORD PTR [edi]
c001c916:	89 34 8b             	mov    DWORD PTR [ebx+ecx*4],esi
c001c919:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001c91c:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001c91f:	74 6b                	je     c001c98c <SoundPort::buffer32(int*, int)+0xa4>
c001c921:	31 f6                	xor    esi,esi
c001c923:	eb 1f                	jmp    c001c944 <SoundPort::buffer32(int*, int)+0x5c>
c001c925:	8d 76 00             	lea    esi,[esi+0x0]
c001c928:	8d 69 01             	lea    ebp,[ecx+0x1]
c001c92b:	89 6a 14             	mov    DWORD PTR [edx+0x14],ebp
c001c92e:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c001c931:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c001c934:	89 44 8d 00          	mov    DWORD PTR [ebp+ecx*4+0x0],eax
c001c938:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001c93b:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001c93e:	74 1c                	je     c001c95c <SoundPort::buffer32(int*, int)+0x74>
c001c940:	89 de                	mov    esi,ebx
c001c942:	66 90                	xchg   ax,ax
c001c944:	8d 5e 01             	lea    ebx,[esi+0x1]
c001c947:	39 5c 24 0c          	cmp    DWORD PTR [esp+0xc],ebx
c001c94b:	75 db                	jne    c001c928 <SoundPort::buffer32(int*, int)+0x40>
c001c94d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c951:	83 c4 1c             	add    esp,0x1c
c001c954:	5b                   	pop    ebx
c001c955:	5e                   	pop    esi
c001c956:	5f                   	pop    edi
c001c957:	5d                   	pop    ebp
c001c958:	c3                   	ret    
c001c959:	8d 76 00             	lea    esi,[esi+0x0]
c001c95c:	8d 46 02             	lea    eax,[esi+0x2]
c001c95f:	90                   	nop
c001c960:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c964:	83 ec 0c             	sub    esp,0xc
c001c967:	68 17 4e 02 c0       	push   0xc0024e17
c001c96c:	e8 4e 01 ff ff       	call   c000cabf <Dbg::kprintf(char const*, ...)>
c001c971:	83 c4 10             	add    esp,0x10
c001c974:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c978:	83 c4 1c             	add    esp,0x1c
c001c97b:	5b                   	pop    ebx
c001c97c:	5e                   	pop    esi
c001c97d:	5f                   	pop    edi
c001c97e:	5d                   	pop    ebp
c001c97f:	c3                   	ret    
c001c980:	83 c4 1c             	add    esp,0x1c
c001c983:	31 c0                	xor    eax,eax
c001c985:	5b                   	pop    ebx
c001c986:	5e                   	pop    esi
c001c987:	5f                   	pop    edi
c001c988:	5d                   	pop    ebp
c001c989:	c3                   	ret    
c001c98a:	66 90                	xchg   ax,ax
c001c98c:	b8 01 00 00 00       	mov    eax,0x1
c001c991:	eb cd                	jmp    c001c960 <SoundPort::buffer32(int*, int)+0x78>
c001c993:	90                   	nop

c001c994 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>:
c001c994:	57                   	push   edi
c001c995:	56                   	push   esi
c001c996:	53                   	push   ebx
c001c997:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c99b:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c001c99f:	8b 86 e0 01 00 00    	mov    eax,DWORD PTR [esi+0x1e0]
c001c9a5:	39 03                	cmp    DWORD PTR [ebx],eax
c001c9a7:	74 13                	je     c001c9bc <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x28>
c001c9a9:	83 ec 0c             	sub    esp,0xc
c001c9ac:	68 6c 4e 02 c0       	push   0xc0024e6c
c001c9b1:	e8 cb 79 ff ff       	call   c0014381 <Krnl::panic(char const*)>
c001c9b6:	83 c4 10             	add    esp,0x10
c001c9b9:	8d 76 00             	lea    esi,[esi+0x0]
c001c9bc:	8b 86 dc 01 00 00    	mov    eax,DWORD PTR [esi+0x1dc]
c001c9c2:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c001c9c5:	74 11                	je     c001c9d8 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x44>
c001c9c7:	83 ec 0c             	sub    esp,0xc
c001c9ca:	68 32 4e 02 c0       	push   0xc0024e32
c001c9cf:	e8 ad 79 ff ff       	call   c0014381 <Krnl::panic(char const*)>
c001c9d4:	83 c4 10             	add    esp,0x10
c001c9d7:	90                   	nop
c001c9d8:	8b 86 e4 01 00 00    	mov    eax,DWORD PTR [esi+0x1e4]
c001c9de:	39 43 08             	cmp    DWORD PTR [ebx+0x8],eax
c001c9e1:	74 11                	je     c001c9f4 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x60>
c001c9e3:	83 ec 0c             	sub    esp,0xc
c001c9e6:	68 32 4e 02 c0       	push   0xc0024e32
c001c9eb:	e8 91 79 ff ff       	call   c0014381 <Krnl::panic(char const*)>
c001c9f0:	83 c4 10             	add    esp,0x10
c001c9f3:	90                   	nop
c001c9f4:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001c9f7:	89 c6                	mov    esi,eax
c001c9f9:	3b 44 24 14          	cmp    eax,DWORD PTR [esp+0x14]
c001c9fd:	7e 05                	jle    c001ca04 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x70>
c001c9ff:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001ca03:	90                   	nop
c001ca04:	85 f6                	test   esi,esi
c001ca06:	7e 30                	jle    c001ca38 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0xa4>
c001ca08:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001ca0c:	8d 3c 36             	lea    edi,[esi+esi*1]
c001ca0f:	31 c9                	xor    ecx,ecx
c001ca11:	01 d7                	add    edi,edx
c001ca13:	90                   	nop
c001ca14:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c001ca17:	8b 04 08             	mov    eax,DWORD PTR [eax+ecx*1]
c001ca1a:	85 c0                	test   eax,eax
c001ca1c:	79 06                	jns    c001ca24 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x90>
c001ca1e:	05 ff 7f 00 00       	add    eax,0x7fff
c001ca23:	90                   	nop
c001ca24:	c1 f8 0f             	sar    eax,0xf
c001ca27:	83 c1 04             	add    ecx,0x4
c001ca2a:	66 01 02             	add    WORD PTR [edx],ax
c001ca2d:	83 c2 02             	add    edx,0x2
c001ca30:	39 d7                	cmp    edi,edx
c001ca32:	75 e0                	jne    c001ca14 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x80>
c001ca34:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001ca37:	90                   	nop
c001ca38:	56                   	push   esi
c001ca39:	89 c2                	mov    edx,eax
c001ca3b:	8d 3c b5 00 00 00 00 	lea    edi,[esi*4+0x0]
c001ca42:	29 f2                	sub    edx,esi
c001ca44:	52                   	push   edx
c001ca45:	50                   	push   eax
c001ca46:	68 8c 4e 02 c0       	push   0xc0024e8c
c001ca4b:	e8 6f 00 ff ff       	call   c000cabf <Dbg::kprintf(char const*, ...)>
c001ca50:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c001ca53:	50                   	push   eax
c001ca54:	01 f8                	add    eax,edi
c001ca56:	50                   	push   eax
c001ca57:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001ca5a:	29 f0                	sub    eax,esi
c001ca5c:	c1 e0 02             	shl    eax,0x2
c001ca5f:	50                   	push   eax
c001ca60:	68 bc 4e 02 c0       	push   0xc0024ebc
c001ca65:	e8 55 00 ff ff       	call   c000cabf <Dbg::kprintf(char const*, ...)>
c001ca6a:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c001ca6d:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001ca70:	83 c4 1c             	add    esp,0x1c
c001ca73:	01 d7                	add    edi,edx
c001ca75:	29 f0                	sub    eax,esi
c001ca77:	c1 e0 02             	shl    eax,0x2
c001ca7a:	50                   	push   eax
c001ca7b:	57                   	push   edi
c001ca7c:	52                   	push   edx
c001ca7d:	e8 3a 3b fe ff       	call   c00005bc <memmove>
c001ca82:	29 73 14             	sub    DWORD PTR [ebx+0x14],esi
c001ca85:	83 c4 10             	add    esp,0x10
c001ca88:	89 f0                	mov    eax,esi
c001ca8a:	5b                   	pop    ebx
c001ca8b:	5e                   	pop    esi
c001ca8c:	5f                   	pop    edi
c001ca8d:	c3                   	ret    
c001ca8e:	66 90                	xchg   ax,ax

c001ca90 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>:
c001ca90:	57                   	push   edi
c001ca91:	56                   	push   esi
c001ca92:	53                   	push   ebx
c001ca93:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001ca97:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001ca9b:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001ca9f:	8b 87 e0 01 00 00    	mov    eax,DWORD PTR [edi+0x1e0]
c001caa5:	39 06                	cmp    DWORD PTR [esi],eax
c001caa7:	74 13                	je     c001cabc <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x2c>
c001caa9:	83 ec 0c             	sub    esp,0xc
c001caac:	68 e0 4e 02 c0       	push   0xc0024ee0
c001cab1:	e8 cb 78 ff ff       	call   c0014381 <Krnl::panic(char const*)>
c001cab6:	83 c4 10             	add    esp,0x10
c001cab9:	8d 76 00             	lea    esi,[esi+0x0]
c001cabc:	8b 87 dc 01 00 00    	mov    eax,DWORD PTR [edi+0x1dc]
c001cac2:	39 46 04             	cmp    DWORD PTR [esi+0x4],eax
c001cac5:	74 11                	je     c001cad8 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x48>
c001cac7:	83 ec 0c             	sub    esp,0xc
c001caca:	68 4e 4e 02 c0       	push   0xc0024e4e
c001cacf:	e8 ad 78 ff ff       	call   c0014381 <Krnl::panic(char const*)>
c001cad4:	83 c4 10             	add    esp,0x10
c001cad7:	90                   	nop
c001cad8:	8b 87 e4 01 00 00    	mov    eax,DWORD PTR [edi+0x1e4]
c001cade:	39 46 08             	cmp    DWORD PTR [esi+0x8],eax
c001cae1:	74 11                	je     c001caf4 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x64>
c001cae3:	83 ec 0c             	sub    esp,0xc
c001cae6:	68 4e 4e 02 c0       	push   0xc0024e4e
c001caeb:	e8 91 78 ff ff       	call   c0014381 <Krnl::panic(char const*)>
c001caf0:	83 c4 10             	add    esp,0x10
c001caf3:	90                   	nop
c001caf4:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c001caf7:	3b 7c 24 14          	cmp    edi,DWORD PTR [esp+0x14]
c001cafb:	7e 07                	jle    c001cb04 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x74>
c001cafd:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001cb01:	8d 76 00             	lea    esi,[esi+0x0]
c001cb04:	85 ff                	test   edi,edi
c001cb06:	7e 1c                	jle    c001cb24 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x94>
c001cb08:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c001cb0f:	31 c0                	xor    eax,eax
c001cb11:	8d 76 00             	lea    esi,[esi+0x0]
c001cb14:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c001cb17:	8b 14 02             	mov    edx,DWORD PTR [edx+eax*1]
c001cb1a:	01 14 03             	add    DWORD PTR [ebx+eax*1],edx
c001cb1d:	83 c0 04             	add    eax,0x4
c001cb20:	39 c1                	cmp    ecx,eax
c001cb22:	75 f0                	jne    c001cb14 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x84>
c001cb24:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c001cb27:	50                   	push   eax
c001cb28:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001cb2b:	29 f8                	sub    eax,edi
c001cb2d:	c1 e0 02             	shl    eax,0x2
c001cb30:	50                   	push   eax
c001cb31:	8d 04 ba             	lea    eax,[edx+edi*4]
c001cb34:	50                   	push   eax
c001cb35:	52                   	push   edx
c001cb36:	e8 81 3a fe ff       	call   c00005bc <memmove>
c001cb3b:	29 7e 14             	sub    DWORD PTR [esi+0x14],edi
c001cb3e:	83 c4 10             	add    esp,0x10
c001cb41:	89 f8                	mov    eax,edi
c001cb43:	5b                   	pop    ebx
c001cb44:	5e                   	pop    esi
c001cb45:	5f                   	pop    edi
c001cb46:	c3                   	ret    
c001cb47:	90                   	nop

c001cb48 <PCI::open(int, int, void*)>:
c001cb48:	83 ec 18             	sub    esp,0x18
c001cb4b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001cb4f:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001cb53:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001cb59:	8b 10                	mov    edx,DWORD PTR [eax]
c001cb5b:	50                   	push   eax
c001cb5c:	ff 52 18             	call   DWORD PTR [edx+0x18]
c001cb5f:	31 c0                	xor    eax,eax
c001cb61:	83 c4 1c             	add    esp,0x1c
c001cb64:	c3                   	ret    
c001cb65:	90                   	nop

c001cb66 <PCI::close(int, int, void*)>:
c001cb66:	31 c0                	xor    eax,eax
c001cb68:	c3                   	ret    
c001cb69:	90                   	nop

c001cb6a <PCI::PCI()>:
c001cb6a:	83 ec 0c             	sub    esp,0xc
c001cb6d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cb71:	83 ec 08             	sub    esp,0x8
c001cb74:	68 ff 4e 02 c0       	push   0xc0024eff
c001cb79:	50                   	push   eax
c001cb7a:	e8 ed 0b ff ff       	call   c000d76c <Bus::Bus(char const*)>
c001cb7f:	83 c4 10             	add    esp,0x10
c001cb82:	ba e8 4f 02 c0       	mov    edx,0xc0024fe8
c001cb87:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cb8b:	89 10                	mov    DWORD PTR [eax],edx
c001cb8d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cb91:	c7 80 58 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x158],0x1
c001cb9b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cb9f:	a3 40 83 02 c0       	mov    ds:0xc0028340,eax
c001cba4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cba8:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001cbae:	0f b6 d0             	movzx  edx,al
c001cbb1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cbb5:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c001cbbc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cbc0:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001cbc6:	0f b6 d0             	movzx  edx,al
c001cbc9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cbcd:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c001cbd2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cbd6:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001cbdc:	8d 50 01             	lea    edx,[eax+0x1]
c001cbdf:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001cbe3:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c001cbe9:	0f b6 d0             	movzx  edx,al
c001cbec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cbf0:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001cbf4:	83 c9 c0             	or     ecx,0xffffffc0
c001cbf7:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001cbfb:	90                   	nop
c001cbfc:	83 c4 0c             	add    esp,0xc
c001cbff:	c3                   	ret    

c001cc00 <PCI::readBAR8(unsigned int, int)>:
c001cc00:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001cc04:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001cc08:	f6 c2 01             	test   dl,0x1
c001cc0b:	74 07                	je     c001cc14 <PCI::readBAR8(unsigned int, int)+0x14>
c001cc0d:	83 e2 fc             	and    edx,0xfffffffc
c001cc10:	01 c2                	add    edx,eax
c001cc12:	ec                   	in     al,dx
c001cc13:	c3                   	ret    
c001cc14:	83 e2 f0             	and    edx,0xfffffff0
c001cc17:	8a 04 02             	mov    al,BYTE PTR [edx+eax*1]
c001cc1a:	c3                   	ret    
c001cc1b:	90                   	nop

c001cc1c <PCI::readBAR16(unsigned int, int)>:
c001cc1c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001cc20:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001cc24:	f6 c2 01             	test   dl,0x1
c001cc27:	74 08                	je     c001cc31 <PCI::readBAR16(unsigned int, int)+0x15>
c001cc29:	83 e2 fc             	and    edx,0xfffffffc
c001cc2c:	01 c2                	add    edx,eax
c001cc2e:	66 ed                	in     ax,dx
c001cc30:	c3                   	ret    
c001cc31:	83 e2 f0             	and    edx,0xfffffff0
c001cc34:	66 8b 04 02          	mov    ax,WORD PTR [edx+eax*1]
c001cc38:	c3                   	ret    
c001cc39:	90                   	nop

c001cc3a <PCI::readBAR32(unsigned int, int)>:
c001cc3a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001cc3e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001cc42:	f6 c2 01             	test   dl,0x1
c001cc45:	74 07                	je     c001cc4e <PCI::readBAR32(unsigned int, int)+0x14>
c001cc47:	83 e2 fc             	and    edx,0xfffffffc
c001cc4a:	01 c2                	add    edx,eax
c001cc4c:	ed                   	in     eax,dx
c001cc4d:	c3                   	ret    
c001cc4e:	83 e2 f0             	and    edx,0xfffffff0
c001cc51:	8b 04 02             	mov    eax,DWORD PTR [edx+eax*1]
c001cc54:	c3                   	ret    
c001cc55:	90                   	nop

c001cc56 <PCI::writeBAR8(unsigned int, unsigned char, int)>:
c001cc56:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001cc5a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001cc5e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001cc62:	f6 c2 01             	test   dl,0x1
c001cc65:	74 07                	je     c001cc6e <PCI::writeBAR8(unsigned int, unsigned char, int)+0x18>
c001cc67:	83 e2 fc             	and    edx,0xfffffffc
c001cc6a:	01 ca                	add    edx,ecx
c001cc6c:	ee                   	out    dx,al
c001cc6d:	c3                   	ret    
c001cc6e:	83 e2 f0             	and    edx,0xfffffff0
c001cc71:	88 04 0a             	mov    BYTE PTR [edx+ecx*1],al
c001cc74:	c3                   	ret    
c001cc75:	90                   	nop

c001cc76 <PCI::writeBAR16(unsigned int, unsigned short, int)>:
c001cc76:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001cc7a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001cc7e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001cc82:	f6 c2 01             	test   dl,0x1
c001cc85:	74 08                	je     c001cc8f <PCI::writeBAR16(unsigned int, unsigned short, int)+0x19>
c001cc87:	83 e2 fc             	and    edx,0xfffffffc
c001cc8a:	01 ca                	add    edx,ecx
c001cc8c:	66 ef                	out    dx,ax
c001cc8e:	c3                   	ret    
c001cc8f:	83 e2 f0             	and    edx,0xfffffff0
c001cc92:	66 89 04 0a          	mov    WORD PTR [edx+ecx*1],ax
c001cc96:	c3                   	ret    
c001cc97:	90                   	nop

c001cc98 <PCI::writeBAR32(unsigned int, unsigned int, int)>:
c001cc98:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001cc9c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001cca0:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001cca4:	f6 c2 01             	test   dl,0x1
c001cca7:	74 07                	je     c001ccb0 <PCI::writeBAR32(unsigned int, unsigned int, int)+0x18>
c001cca9:	83 e2 fc             	and    edx,0xfffffffc
c001ccac:	01 ca                	add    edx,ecx
c001ccae:	ef                   	out    dx,eax
c001ccaf:	c3                   	ret    
c001ccb0:	83 e2 f0             	and    edx,0xfffffff0
c001ccb3:	89 04 0a             	mov    DWORD PTR [edx+ecx*1],eax
c001ccb6:	c3                   	ret    
c001ccb7:	90                   	nop

c001ccb8 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001ccb8:	55                   	push   ebp
c001ccb9:	57                   	push   edi
c001ccba:	56                   	push   esi
c001ccbb:	53                   	push   ebx
c001ccbc:	83 ec 0c             	sub    esp,0xc
c001ccbf:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001ccc3:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c001ccc7:	89 f0                	mov    eax,esi
c001ccc9:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c001cccd:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001ccd1:	3c 07                	cmp    al,0x7
c001ccd3:	76 10                	jbe    c001cce5 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x2d>
c001ccd5:	83 ec 0c             	sub    esp,0xc
c001ccd8:	68 07 4f 02 c0       	push   0xc0024f07
c001ccdd:	e8 9f 76 ff ff       	call   c0014381 <Krnl::panic(char const*)>
c001cce2:	83 c4 10             	add    esp,0x10
c001cce5:	80 fb 0f             	cmp    bl,0xf
c001cce8:	76 10                	jbe    c001ccfa <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x42>
c001ccea:	83 ec 0c             	sub    esp,0xc
c001cced:	68 37 4f 02 c0       	push   0xc0024f37
c001ccf2:	e8 8a 76 ff ff       	call   c0014381 <Krnl::panic(char const*)>
c001ccf7:	83 c4 10             	add    esp,0x10
c001ccfa:	8d 04 36             	lea    eax,[esi+esi*1]
c001ccfd:	ba f8 0c 00 00       	mov    edx,0xcf8
c001cd02:	83 c8 f0             	or     eax,0xfffffff0
c001cd05:	ee                   	out    dx,al
c001cd06:	ba fa 0c 00 00       	mov    edx,0xcfa
c001cd0b:	89 e8                	mov    eax,ebp
c001cd0d:	ee                   	out    dx,al
c001cd0e:	83 c4 0c             	add    esp,0xc
c001cd11:	89 d8                	mov    eax,ebx
c001cd13:	66 81 e7 fc 00       	and    di,0xfc
c001cd18:	5b                   	pop    ebx
c001cd19:	c1 e0 08             	shl    eax,0x8
c001cd1c:	5e                   	pop    esi
c001cd1d:	09 f8                	or     eax,edi
c001cd1f:	5f                   	pop    edi
c001cd20:	66 0d 00 c0          	or     ax,0xc000
c001cd24:	5d                   	pop    ebp
c001cd25:	c3                   	ret    

c001cd26 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001cd26:	57                   	push   edi
c001cd27:	56                   	push   esi
c001cd28:	53                   	push   ebx
c001cd29:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001cd2d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001cd31:	8b be 58 01 00 00    	mov    edi,DWORD PTR [esi+0x158]
c001cd37:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001cd3b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001cd3f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001cd43:	83 ff 01             	cmp    edi,0x1
c001cd46:	75 3e                	jne    c001cd86 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x60>
c001cd48:	89 de                	mov    esi,ebx
c001cd4a:	0f b6 c0             	movzx  eax,al
c001cd4d:	81 e6 fc 00 00 00    	and    esi,0xfc
c001cd53:	c1 e0 10             	shl    eax,0x10
c001cd56:	0f b6 c9             	movzx  ecx,cl
c001cd59:	09 f0                	or     eax,esi
c001cd5b:	c1 e1 08             	shl    ecx,0x8
c001cd5e:	0f b6 d2             	movzx  edx,dl
c001cd61:	09 c8                	or     eax,ecx
c001cd63:	c1 e2 0b             	shl    edx,0xb
c001cd66:	09 d0                	or     eax,edx
c001cd68:	ba f8 0c 00 00       	mov    edx,0xcf8
c001cd6d:	0d 00 00 00 80       	or     eax,0x80000000
c001cd72:	ef                   	out    dx,eax
c001cd73:	ba fc 0c 00 00       	mov    edx,0xcfc
c001cd78:	ed                   	in     eax,dx
c001cd79:	83 e3 02             	and    ebx,0x2
c001cd7c:	0f b6 cb             	movzx  ecx,bl
c001cd7f:	c1 e1 03             	shl    ecx,0x3
c001cd82:	d3 e8                	shr    eax,cl
c001cd84:	eb 43                	jmp    c001cdc9 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa3>
c001cd86:	83 ff 02             	cmp    edi,0x2
c001cd89:	75 2c                	jne    c001cdb7 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x91>
c001cd8b:	83 ec 0c             	sub    esp,0xc
c001cd8e:	0f b6 c9             	movzx  ecx,cl
c001cd91:	0f b6 d2             	movzx  edx,dl
c001cd94:	0f b6 fb             	movzx  edi,bl
c001cd97:	0f b6 c0             	movzx  eax,al
c001cd9a:	57                   	push   edi
c001cd9b:	51                   	push   ecx
c001cd9c:	52                   	push   edx
c001cd9d:	50                   	push   eax
c001cd9e:	56                   	push   esi
c001cd9f:	e8 14 ff ff ff       	call   c001ccb8 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c001cda4:	89 c2                	mov    edx,eax
c001cda6:	ed                   	in     eax,dx
c001cda7:	83 e3 02             	and    ebx,0x2
c001cdaa:	83 c4 20             	add    esp,0x20
c001cdad:	0f b6 cb             	movzx  ecx,bl
c001cdb0:	c1 e1 03             	shl    ecx,0x3
c001cdb3:	d3 e8                	shr    eax,cl
c001cdb5:	eb 12                	jmp    c001cdc9 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa3>
c001cdb7:	83 ec 0c             	sub    esp,0xc
c001cdba:	68 67 4f 02 c0       	push   0xc0024f67
c001cdbf:	e8 bd 75 ff ff       	call   c0014381 <Krnl::panic(char const*)>
c001cdc4:	83 c4 10             	add    esp,0x10
c001cdc7:	31 c0                	xor    eax,eax
c001cdc9:	5b                   	pop    ebx
c001cdca:	5e                   	pop    esi
c001cdcb:	5f                   	pop    edi
c001cdcc:	c3                   	ret    
c001cdcd:	90                   	nop

c001cdce <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c001cdce:	83 ec 18             	sub    esp,0x18
c001cdd1:	6a 00                	push   0x0
c001cdd3:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001cdd8:	50                   	push   eax
c001cdd9:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001cdde:	50                   	push   eax
c001cddf:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001cde4:	50                   	push   eax
c001cde5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001cde9:	e8 38 ff ff ff       	call   c001cd26 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001cdee:	83 c4 2c             	add    esp,0x2c
c001cdf1:	c3                   	ret    

c001cdf2 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c001cdf2:	83 ec 18             	sub    esp,0x18
c001cdf5:	6a 0e                	push   0xe
c001cdf7:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001cdfc:	50                   	push   eax
c001cdfd:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001ce02:	50                   	push   eax
c001ce03:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001ce08:	50                   	push   eax
c001ce09:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ce0d:	e8 14 ff ff ff       	call   c001cd26 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001ce12:	83 c4 2c             	add    esp,0x2c
c001ce15:	0f b6 c0             	movzx  eax,al
c001ce18:	c3                   	ret    
c001ce19:	90                   	nop

c001ce1a <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c001ce1a:	55                   	push   ebp
c001ce1b:	57                   	push   edi
c001ce1c:	56                   	push   esi
c001ce1d:	53                   	push   ebx
c001ce1e:	83 ec 18             	sub    esp,0x18
c001ce21:	0f b6 74 24 38       	movzx  esi,BYTE PTR [esp+0x38]
c001ce26:	0f b6 6c 24 34       	movzx  ebp,BYTE PTR [esp+0x34]
c001ce2b:	0f b6 7c 24 30       	movzx  edi,BYTE PTR [esp+0x30]
c001ce30:	6a 0a                	push   0xa
c001ce32:	56                   	push   esi
c001ce33:	55                   	push   ebp
c001ce34:	57                   	push   edi
c001ce35:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001ce39:	e8 e8 fe ff ff       	call   c001cd26 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001ce3e:	83 c4 14             	add    esp,0x14
c001ce41:	89 c3                	mov    ebx,eax
c001ce43:	6a 0a                	push   0xa
c001ce45:	0f b6 db             	movzx  ebx,bl
c001ce48:	56                   	push   esi
c001ce49:	55                   	push   ebp
c001ce4a:	57                   	push   edi
c001ce4b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001ce4f:	e8 d2 fe ff ff       	call   c001cd26 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001ce54:	83 c4 2c             	add    esp,0x2c
c001ce57:	25 00 ff 00 00       	and    eax,0xff00
c001ce5c:	09 d8                	or     eax,ebx
c001ce5e:	5b                   	pop    ebx
c001ce5f:	5e                   	pop    esi
c001ce60:	5f                   	pop    edi
c001ce61:	5d                   	pop    ebp
c001ce62:	c3                   	ret    
c001ce63:	90                   	nop

c001ce64 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c001ce64:	83 ec 18             	sub    esp,0x18
c001ce67:	6a 08                	push   0x8
c001ce69:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001ce6e:	50                   	push   eax
c001ce6f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001ce74:	50                   	push   eax
c001ce75:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001ce7a:	50                   	push   eax
c001ce7b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ce7f:	e8 a2 fe ff ff       	call   c001cd26 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001ce84:	83 c4 2c             	add    esp,0x2c
c001ce87:	0f b6 c4             	movzx  eax,ah
c001ce8a:	c3                   	ret    
c001ce8b:	90                   	nop

c001ce8c <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c001ce8c:	83 ec 18             	sub    esp,0x18
c001ce8f:	6a 08                	push   0x8
c001ce91:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001ce96:	50                   	push   eax
c001ce97:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001ce9c:	50                   	push   eax
c001ce9d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001cea2:	50                   	push   eax
c001cea3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001cea7:	e8 7a fe ff ff       	call   c001cd26 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001ceac:	83 c4 2c             	add    esp,0x2c
c001ceaf:	c3                   	ret    

c001ceb0 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c001ceb0:	83 ec 18             	sub    esp,0x18
c001ceb3:	6a 3c                	push   0x3c
c001ceb5:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001ceba:	50                   	push   eax
c001cebb:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001cec0:	50                   	push   eax
c001cec1:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001cec6:	50                   	push   eax
c001cec7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001cecb:	e8 56 fe ff ff       	call   c001cd26 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001ced0:	83 c4 2c             	add    esp,0x2c
c001ced3:	c3                   	ret    

c001ced4 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c001ced4:	83 ec 18             	sub    esp,0x18
c001ced7:	6a 18                	push   0x18
c001ced9:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001cede:	50                   	push   eax
c001cedf:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001cee4:	50                   	push   eax
c001cee5:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001ceea:	50                   	push   eax
c001ceeb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ceef:	e8 32 fe ff ff       	call   c001cd26 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001cef4:	83 c4 2c             	add    esp,0x2c
c001cef7:	0f b6 c4             	movzx  eax,ah
c001cefa:	c3                   	ret    
c001cefb:	90                   	nop

c001cefc <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001cefc:	55                   	push   ebp
c001cefd:	57                   	push   edi
c001cefe:	56                   	push   esi
c001ceff:	53                   	push   ebx
c001cf00:	83 ec 28             	sub    esp,0x28
c001cf03:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c001cf07:	0f b6 7c 24 48       	movzx  edi,BYTE PTR [esp+0x48]
c001cf0c:	0f b6 6c 24 44       	movzx  ebp,BYTE PTR [esp+0x44]
c001cf11:	0f b6 4c 24 4c       	movzx  ecx,BYTE PTR [esp+0x4c]
c001cf16:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c001cf1d:	8d 43 12             	lea    eax,[ebx+0x12]
c001cf20:	83 c3 10             	add    ebx,0x10
c001cf23:	0f b6 c0             	movzx  eax,al
c001cf26:	0f b6 db             	movzx  ebx,bl
c001cf29:	50                   	push   eax
c001cf2a:	51                   	push   ecx
c001cf2b:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c001cf2f:	57                   	push   edi
c001cf30:	55                   	push   ebp
c001cf31:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001cf35:	e8 ec fd ff ff       	call   c001cd26 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001cf3a:	83 c4 14             	add    esp,0x14
c001cf3d:	89 c6                	mov    esi,eax
c001cf3f:	53                   	push   ebx
c001cf40:	c1 e6 10             	shl    esi,0x10
c001cf43:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001cf47:	51                   	push   ecx
c001cf48:	57                   	push   edi
c001cf49:	55                   	push   ebp
c001cf4a:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001cf4e:	e8 d3 fd ff ff       	call   c001cd26 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001cf53:	83 c4 3c             	add    esp,0x3c
c001cf56:	0f b7 c0             	movzx  eax,ax
c001cf59:	5b                   	pop    ebx
c001cf5a:	09 f0                	or     eax,esi
c001cf5c:	5e                   	pop    esi
c001cf5d:	5f                   	pop    edi
c001cf5e:	5d                   	pop    ebp
c001cf5f:	c3                   	ret    

c001cf60 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c001cf60:	55                   	push   ebp
c001cf61:	57                   	push   edi
c001cf62:	56                   	push   esi
c001cf63:	53                   	push   ebx
c001cf64:	83 ec 0c             	sub    esp,0xc
c001cf67:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001cf6b:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001cf6f:	89 f5                	mov    ebp,esi
c001cf71:	8b 8f 58 01 00 00    	mov    ecx,DWORD PTR [edi+0x158]
c001cf77:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001cf7b:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001cf7f:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001cf83:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001cf87:	83 f9 01             	cmp    ecx,0x1
c001cf8a:	75 5d                	jne    c001cfe9 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x89>
c001cf8c:	0f b6 c8             	movzx  ecx,al
c001cf8f:	0f b6 d2             	movzx  edx,dl
c001cf92:	c1 e1 10             	shl    ecx,0x10
c001cf95:	c1 e2 0b             	shl    edx,0xb
c001cf98:	89 f0                	mov    eax,esi
c001cf9a:	25 fc 00 00 00       	and    eax,0xfc
c001cf9f:	09 c1                	or     ecx,eax
c001cfa1:	89 e8                	mov    eax,ebp
c001cfa3:	0f b6 c0             	movzx  eax,al
c001cfa6:	c1 e0 08             	shl    eax,0x8
c001cfa9:	09 c1                	or     ecx,eax
c001cfab:	09 d1                	or     ecx,edx
c001cfad:	ba f8 0c 00 00       	mov    edx,0xcf8
c001cfb2:	81 c9 00 00 00 80    	or     ecx,0x80000000
c001cfb8:	89 c8                	mov    eax,ecx
c001cfba:	ef                   	out    dx,eax
c001cfbb:	ba fc 0c 00 00       	mov    edx,0xcfc
c001cfc0:	ed                   	in     eax,dx
c001cfc1:	0f b7 db             	movzx  ebx,bx
c001cfc4:	83 e6 02             	and    esi,0x2
c001cfc7:	74 0a                	je     c001cfd3 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x73>
c001cfc9:	0f b7 d0             	movzx  edx,ax
c001cfcc:	c1 e3 10             	shl    ebx,0x10
c001cfcf:	09 d3                	or     ebx,edx
c001cfd1:	eb 05                	jmp    c001cfd8 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x78>
c001cfd3:	66 31 c0             	xor    ax,ax
c001cfd6:	09 c3                	or     ebx,eax
c001cfd8:	ba f8 0c 00 00       	mov    edx,0xcf8
c001cfdd:	89 c8                	mov    eax,ecx
c001cfdf:	ef                   	out    dx,eax
c001cfe0:	ba fc 0c 00 00       	mov    edx,0xcfc
c001cfe5:	89 d8                	mov    eax,ebx
c001cfe7:	eb 41                	jmp    c001d02a <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c001cfe9:	83 f9 02             	cmp    ecx,0x2
c001cfec:	75 45                	jne    c001d033 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xd3>
c001cfee:	83 ec 0c             	sub    esp,0xc
c001cff1:	0f b6 d2             	movzx  edx,dl
c001cff4:	89 f1                	mov    ecx,esi
c001cff6:	0f b6 c0             	movzx  eax,al
c001cff9:	0f b6 f1             	movzx  esi,cl
c001cffc:	89 e9                	mov    ecx,ebp
c001cffe:	56                   	push   esi
c001cfff:	0f b6 c9             	movzx  ecx,cl
c001d002:	51                   	push   ecx
c001d003:	52                   	push   edx
c001d004:	50                   	push   eax
c001d005:	57                   	push   edi
c001d006:	e8 ad fc ff ff       	call   c001ccb8 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d00b:	89 c2                	mov    edx,eax
c001d00d:	ed                   	in     eax,dx
c001d00e:	83 c4 20             	add    esp,0x20
c001d011:	0f b7 db             	movzx  ebx,bx
c001d014:	f6 c2 02             	test   dl,0x2
c001d017:	74 0c                	je     c001d025 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc5>
c001d019:	0f b7 c8             	movzx  ecx,ax
c001d01c:	89 d8                	mov    eax,ebx
c001d01e:	c1 e0 10             	shl    eax,0x10
c001d021:	09 c8                	or     eax,ecx
c001d023:	eb 05                	jmp    c001d02a <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c001d025:	66 31 c0             	xor    ax,ax
c001d028:	09 d8                	or     eax,ebx
c001d02a:	ef                   	out    dx,eax
c001d02b:	83 c4 0c             	add    esp,0xc
c001d02e:	5b                   	pop    ebx
c001d02f:	5e                   	pop    esi
c001d030:	5f                   	pop    edi
c001d031:	5d                   	pop    ebp
c001d032:	c3                   	ret    
c001d033:	c7 44 24 20 67 4f 02 c0 	mov    DWORD PTR [esp+0x20],0xc0024f67
c001d03b:	83 c4 0c             	add    esp,0xc
c001d03e:	5b                   	pop    ebx
c001d03f:	5e                   	pop    esi
c001d040:	5f                   	pop    edi
c001d041:	5d                   	pop    ebp
c001d042:	e9 3a 73 ff ff       	jmp    c0014381 <Krnl::panic(char const*)>
c001d047:	90                   	nop

c001d048 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>:
c001d048:	55                   	push   ebp
c001d049:	57                   	push   edi
c001d04a:	56                   	push   esi
c001d04b:	53                   	push   ebx
c001d04c:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001d052:	80 3d 4c 83 02 c0 00 	cmp    BYTE PTR ds:0xc002834c,0x0
c001d059:	0f 85 84 00 00 00    	jne    c001d0e3 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x9b>
c001d05f:	83 ec 0c             	sub    esp,0xc
c001d062:	68 14 01 00 00       	push   0x114
c001d067:	e8 57 c9 fe ff       	call   c00099c3 <malloc>
c001d06c:	83 c4 0c             	add    esp,0xc
c001d06f:	89 c3                	mov    ebx,eax
c001d071:	ff 35 50 79 02 c0    	push   DWORD PTR ds:0xc0027950
c001d077:	68 6d 4f 02 c0       	push   0xc0024f6d
c001d07c:	50                   	push   eax
c001d07d:	e8 a8 ff fe ff       	call   c000d02a <File::File(char const*, Process*)>
c001d082:	5a                   	pop    edx
c001d083:	59                   	pop    ecx
c001d084:	6a 01                	push   0x1
c001d086:	53                   	push   ebx
c001d087:	e8 02 00 ff ff       	call   c000d08e <File::open(FileOpenMode)>
c001d08c:	83 c4 0c             	add    esp,0xc
c001d08f:	8d 44 24 1f          	lea    eax,[esp+0x1f]
c001d093:	50                   	push   eax
c001d094:	8d 44 24 28          	lea    eax,[esp+0x28]
c001d098:	50                   	push   eax
c001d099:	53                   	push   ebx
c001d09a:	e8 9b 02 ff ff       	call   c000d33a <File::stat(unsigned long long*, bool*)>
c001d09f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d0a3:	40                   	inc    eax
c001d0a4:	89 04 24             	mov    DWORD PTR [esp],eax
c001d0a7:	e8 17 c9 fe ff       	call   c00099c3 <malloc>
c001d0ac:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001d0b0:	a3 48 83 02 c0       	mov    ds:0xc0028348,eax
c001d0b5:	c6 04 10 00          	mov    BYTE PTR [eax+edx*1],0x0
c001d0b9:	5e                   	pop    esi
c001d0ba:	8b 13                	mov    edx,DWORD PTR [ebx]
c001d0bc:	8d 4c 24 28          	lea    ecx,[esp+0x28]
c001d0c0:	51                   	push   ecx
c001d0c1:	50                   	push   eax
c001d0c2:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c001d0c6:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c001d0ca:	53                   	push   ebx
c001d0cb:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001d0ce:	83 c4 14             	add    esp,0x14
c001d0d1:	53                   	push   ebx
c001d0d2:	e8 15 00 ff ff       	call   c000d0ec <File::close()>
c001d0d7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d0db:	83 c4 10             	add    esp,0x10
c001d0de:	a3 44 83 02 c0       	mov    ds:0xc0028344,eax
c001d0e3:	a1 44 83 02 c0       	mov    eax,ds:0xc0028344
c001d0e8:	8b 15 48 83 02 c0    	mov    edx,DWORD PTR ds:0xc0028348
c001d0ee:	89 04 24             	mov    DWORD PTR [esp],eax
c001d0f1:	31 ff                	xor    edi,edi
c001d0f3:	66 8b 84 24 42 01 00 00 	mov    ax,WORD PTR [esp+0x142]
c001d0fb:	31 f6                	xor    esi,esi
c001d0fd:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c001d102:	31 db                	xor    ebx,ebx
c001d104:	66 8b 84 24 62 01 00 00 	mov    ax,WORD PTR [esp+0x162]
c001d10c:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c001d111:	8a 84 24 40 01 00 00 	mov    al,BYTE PTR [esp+0x140]
c001d118:	88 44 24 0a          	mov    BYTE PTR [esp+0xa],al
c001d11c:	8a 84 24 41 01 00 00 	mov    al,BYTE PTR [esp+0x141]
c001d123:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c001d127:	39 3c 24             	cmp    DWORD PTR [esp],edi
c001d12a:	0f 8e 6b 01 00 00    	jle    c001d29b <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x253>
c001d130:	8a 04 3a             	mov    al,BYTE PTR [edx+edi*1]
c001d133:	d4 40                	aam    0x40
c001d135:	d5 39                	aad    0x39
c001d137:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001d13b:	8a 44 3a 01          	mov    al,BYTE PTR [edx+edi*1+0x1]
c001d13f:	d4 40                	aam    0x40
c001d141:	d5 39                	aad    0x39
c001d143:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c001d147:	8a 44 3a 03          	mov    al,BYTE PTR [edx+edi*1+0x3]
c001d14b:	d4 40                	aam    0x40
c001d14d:	d5 39                	aad    0x39
c001d14f:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c001d153:	8a 44 3a 04          	mov    al,BYTE PTR [edx+edi*1+0x4]
c001d157:	d4 40                	aam    0x40
c001d159:	d5 39                	aad    0x39
c001d15b:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001d15f:	8a 44 3a 06          	mov    al,BYTE PTR [edx+edi*1+0x6]
c001d163:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c001d167:	3c 56                	cmp    al,0x56
c001d169:	74 45                	je     c001d1b0 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x168>
c001d16b:	d4 40                	aam    0x40
c001d16d:	d5 39                	aad    0x39
c001d16f:	8d 48 d0             	lea    ecx,[eax-0x30]
c001d172:	8a 44 3a 07          	mov    al,BYTE PTR [edx+edi*1+0x7]
c001d176:	0f b6 c9             	movzx  ecx,cl
c001d179:	c1 e1 04             	shl    ecx,0x4
c001d17c:	d4 40                	aam    0x40
c001d17e:	d5 39                	aad    0x39
c001d180:	8d 58 d0             	lea    ebx,[eax-0x30]
c001d183:	8a 44 3a 08          	mov    al,BYTE PTR [edx+edi*1+0x8]
c001d187:	0f b6 db             	movzx  ebx,bl
c001d18a:	09 cb                	or     ebx,ecx
c001d18c:	c1 e3 04             	shl    ebx,0x4
c001d18f:	d4 40                	aam    0x40
c001d191:	d5 39                	aad    0x39
c001d193:	8d 48 d0             	lea    ecx,[eax-0x30]
c001d196:	8a 44 3a 09          	mov    al,BYTE PTR [edx+edi*1+0x9]
c001d19a:	0f b6 c9             	movzx  ecx,cl
c001d19d:	09 cb                	or     ebx,ecx
c001d19f:	c1 e3 04             	shl    ebx,0x4
c001d1a2:	89 d9                	mov    ecx,ebx
c001d1a4:	d4 40                	aam    0x40
c001d1a6:	d5 39                	aad    0x39
c001d1a8:	8d 58 d0             	lea    ebx,[eax-0x30]
c001d1ab:	0f b6 db             	movzx  ebx,bl
c001d1ae:	09 cb                	or     ebx,ecx
c001d1b0:	8a 4c 3a 0b          	mov    cl,BYTE PTR [edx+edi*1+0xb]
c001d1b4:	80 f9 44             	cmp    cl,0x44
c001d1b7:	74 47                	je     c001d200 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1b8>
c001d1b9:	88 c8                	mov    al,cl
c001d1bb:	d4 40                	aam    0x40
c001d1bd:	d5 39                	aad    0x39
c001d1bf:	83 e8 30             	sub    eax,0x30
c001d1c2:	0f b6 e8             	movzx  ebp,al
c001d1c5:	8a 44 3a 0c          	mov    al,BYTE PTR [edx+edi*1+0xc]
c001d1c9:	c1 e5 04             	shl    ebp,0x4
c001d1cc:	d4 40                	aam    0x40
c001d1ce:	d5 39                	aad    0x39
c001d1d0:	83 e8 30             	sub    eax,0x30
c001d1d3:	0f b6 f0             	movzx  esi,al
c001d1d6:	8a 44 3a 0d          	mov    al,BYTE PTR [edx+edi*1+0xd]
c001d1da:	09 ee                	or     esi,ebp
c001d1dc:	c1 e6 04             	shl    esi,0x4
c001d1df:	d4 40                	aam    0x40
c001d1e1:	d5 39                	aad    0x39
c001d1e3:	83 e8 30             	sub    eax,0x30
c001d1e6:	0f b6 e8             	movzx  ebp,al
c001d1e9:	8a 44 3a 0e          	mov    al,BYTE PTR [edx+edi*1+0xe]
c001d1ed:	09 ee                	or     esi,ebp
c001d1ef:	c1 e6 04             	shl    esi,0x4
c001d1f2:	89 f5                	mov    ebp,esi
c001d1f4:	d4 40                	aam    0x40
c001d1f6:	d5 39                	aad    0x39
c001d1f8:	83 e8 30             	sub    eax,0x30
c001d1fb:	0f b6 f0             	movzx  esi,al
c001d1fe:	09 ee                	or     esi,ebp
c001d200:	83 c7 10             	add    edi,0x10
c001d203:	8d 6c 24 20          	lea    ebp,[esp+0x20]
c001d207:	8a 04 3a             	mov    al,BYTE PTR [edx+edi*1]
c001d20a:	3c 0a                	cmp    al,0xa
c001d20c:	74 09                	je     c001d217 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1cf>
c001d20e:	45                   	inc    ebp
c001d20f:	39 3c 24             	cmp    DWORD PTR [esp],edi
c001d212:	75 16                	jne    c001d22a <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1e2>
c001d214:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c001d217:	3c 0a                	cmp    al,0xa
c001d219:	0f 94 c0             	sete   al
c001d21c:	0f b6 c0             	movzx  eax,al
c001d21f:	01 c7                	add    edi,eax
c001d221:	80 7c 24 05 56       	cmp    BYTE PTR [esp+0x5],0x56
c001d226:	75 0c                	jne    c001d234 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1ec>
c001d228:	eb 15                	jmp    c001d23f <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1f7>
c001d22a:	47                   	inc    edi
c001d22b:	88 45 ff             	mov    BYTE PTR [ebp-0x1],al
c001d22e:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c001d232:	eb d3                	jmp    c001d207 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1bf>
c001d234:	66 39 5c 24 06       	cmp    WORD PTR [esp+0x6],bx
c001d239:	0f 85 e8 fe ff ff    	jne    c001d127 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c001d23f:	80 f9 44             	cmp    cl,0x44
c001d242:	74 0b                	je     c001d24f <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x207>
c001d244:	66 39 74 24 08       	cmp    WORD PTR [esp+0x8],si
c001d249:	0f 85 d8 fe ff ff    	jne    c001d127 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c001d24f:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c001d253:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c001d257:	c1 e1 04             	shl    ecx,0x4
c001d25a:	83 e8 30             	sub    eax,0x30
c001d25d:	09 c8                	or     eax,ecx
c001d25f:	38 44 24 0a          	cmp    BYTE PTR [esp+0xa],al
c001d263:	0f 85 be fe ff ff    	jne    c001d127 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c001d269:	8a 4c 24 0e          	mov    cl,BYTE PTR [esp+0xe]
c001d26d:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001d271:	c1 e1 04             	shl    ecx,0x4
c001d274:	83 e8 30             	sub    eax,0x30
c001d277:	09 c8                	or     eax,ecx
c001d279:	38 44 24 0b          	cmp    BYTE PTR [esp+0xb],al
c001d27d:	0f 85 a4 fe ff ff    	jne    c001d127 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c001d283:	50                   	push   eax
c001d284:	50                   	push   eax
c001d285:	8d 44 24 28          	lea    eax,[esp+0x28]
c001d289:	50                   	push   eax
c001d28a:	ff b4 24 70 01 00 00 	push   DWORD PTR [esp+0x170]
c001d291:	e8 aa 34 fe ff       	call   c0000740 <strcpy>
c001d296:	83 c4 10             	add    esp,0x10
c001d299:	eb 15                	jmp    c001d2b0 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x268>
c001d29b:	8b 84 24 64 01 00 00 	mov    eax,DWORD PTR [esp+0x164]
c001d2a2:	c7 84 24 64 01 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x164],0x0
c001d2ad:	c6 00 00             	mov    BYTE PTR [eax],0x0
c001d2b0:	8b 84 24 64 01 00 00 	mov    eax,DWORD PTR [esp+0x164]
c001d2b7:	81 c4 2c 01 00 00    	add    esp,0x12c
c001d2bd:	5b                   	pop    ebx
c001d2be:	5e                   	pop    esi
c001d2bf:	5f                   	pop    edi
c001d2c0:	5d                   	pop    ebp
c001d2c1:	c3                   	ret    

c001d2c2 <PCI::checkBus(unsigned char)>:
c001d2c2:	56                   	push   esi
c001d2c3:	53                   	push   ebx
c001d2c4:	31 db                	xor    ebx,ebx
c001d2c6:	51                   	push   ecx
c001d2c7:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001d2cc:	52                   	push   edx
c001d2cd:	53                   	push   ebx
c001d2ce:	43                   	inc    ebx
c001d2cf:	56                   	push   esi
c001d2d0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d2d4:	e8 37 03 00 00       	call   c001d610 <PCI::checkDevice(unsigned char, unsigned char)>
c001d2d9:	83 c4 10             	add    esp,0x10
c001d2dc:	83 fb 20             	cmp    ebx,0x20
c001d2df:	75 eb                	jne    c001d2cc <PCI::checkBus(unsigned char)+0xa>
c001d2e1:	58                   	pop    eax
c001d2e2:	5b                   	pop    ebx
c001d2e3:	5e                   	pop    esi
c001d2e4:	c3                   	ret    
c001d2e5:	90                   	nop

c001d2e6 <PCI::foundDevice(PCIDeviceInfo)>:
c001d2e6:	55                   	push   ebp
c001d2e7:	57                   	push   edi
c001d2e8:	56                   	push   esi
c001d2e9:	53                   	push   ebx
c001d2ea:	83 ec 1c             	sub    esp,0x1c
c001d2ed:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001d2f1:	66 83 7c 24 36 ff    	cmp    WORD PTR [esp+0x36],0xffff
c001d2f7:	0f 84 52 01 00 00    	je     c001d44f <PCI::foundDevice(PCIDeviceInfo)+0x169>
c001d2fd:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c001d301:	66 81 f9 06 04       	cmp    cx,0x406
c001d306:	75 2c                	jne    c001d334 <PCI::foundDevice(PCIDeviceInfo)+0x4e>
c001d308:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c001d30d:	50                   	push   eax
c001d30e:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c001d313:	50                   	push   eax
c001d314:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c001d319:	50                   	push   eax
c001d31a:	56                   	push   esi
c001d31b:	e8 b4 fb ff ff       	call   c001ced4 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c001d320:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c001d324:	0f b6 c0             	movzx  eax,al
c001d327:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001d32b:	83 c4 2c             	add    esp,0x2c
c001d32e:	5b                   	pop    ebx
c001d32f:	5e                   	pop    esi
c001d330:	5f                   	pop    edi
c001d331:	5d                   	pop    ebp
c001d332:	eb 8e                	jmp    c001d2c2 <PCI::checkBus(unsigned char)>
c001d334:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001d338:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c001d33e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001d342:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001d346:	8a 54 24 54          	mov    dl,BYTE PTR [esp+0x54]
c001d34a:	88 d3                	mov    bl,dl
c001d34c:	85 c0                	test   eax,eax
c001d34e:	74 33                	je     c001d383 <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c001d350:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001d353:	85 d2                	test   edx,edx
c001d355:	74 28                	je     c001d37f <PCI::foundDevice(PCIDeviceInfo)+0x99>
c001d357:	8b ba 18 01 00 00    	mov    edi,DWORD PTR [edx+0x118]
c001d35d:	31 ef                	xor    edi,ebp
c001d35f:	81 e7 ff 00 ff ff    	and    edi,0xffff00ff
c001d365:	75 18                	jne    c001d37f <PCI::foundDevice(PCIDeviceInfo)+0x99>
c001d367:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001d36b:	39 ba 20 01 00 00    	cmp    DWORD PTR [edx+0x120],edi
c001d371:	75 0c                	jne    c001d37f <PCI::foundDevice(PCIDeviceInfo)+0x99>
c001d373:	38 9a 38 01 00 00    	cmp    BYTE PTR [edx+0x138],bl
c001d379:	0f 84 d0 00 00 00    	je     c001d44f <PCI::foundDevice(PCIDeviceInfo)+0x169>
c001d37f:	8b 00                	mov    eax,DWORD PTR [eax]
c001d381:	eb c9                	jmp    c001d34c <PCI::foundDevice(PCIDeviceInfo)+0x66>
c001d383:	66 81 f9 01 06       	cmp    cx,0x601
c001d388:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c001d38c:	75 19                	jne    c001d3a7 <PCI::foundDevice(PCIDeviceInfo)+0xc1>
c001d38e:	83 ec 0c             	sub    esp,0xc
c001d391:	68 64 01 00 00       	push   0x164
c001d396:	e8 28 c6 fe ff       	call   c00099c3 <malloc>
c001d39b:	89 c5                	mov    ebp,eax
c001d39d:	89 04 24             	mov    DWORD PTR [esp],eax
c001d3a0:	e8 7b 0e 00 00       	call   c001e220 <SATABus::SATABus()>
c001d3a5:	eb 1e                	jmp    c001d3c5 <PCI::foundDevice(PCIDeviceInfo)+0xdf>
c001d3a7:	66 81 f9 01 01       	cmp    cx,0x101
c001d3ac:	75 60                	jne    c001d40e <PCI::foundDevice(PCIDeviceInfo)+0x128>
c001d3ae:	83 ec 0c             	sub    esp,0xc
c001d3b1:	68 70 02 00 00       	push   0x270
c001d3b6:	e8 08 c6 fe ff       	call   c00099c3 <malloc>
c001d3bb:	89 c5                	mov    ebp,eax
c001d3bd:	89 04 24             	mov    DWORD PTR [esp],eax
c001d3c0:	e8 0f 03 00 00       	call   c001d6d4 <IDE::IDE()>
c001d3c5:	58                   	pop    eax
c001d3c6:	5a                   	pop    edx
c001d3c7:	55                   	push   ebp
c001d3c8:	56                   	push   esi
c001d3c9:	e8 38 0b ff ff       	call   c000df06 <Device::addChild(Device*)>
c001d3ce:	83 ec 1c             	sub    esp,0x1c
c001d3d1:	b9 09 00 00 00       	mov    ecx,0x9
c001d3d6:	fc                   	cld    
c001d3d7:	89 e7                	mov    edi,esp
c001d3d9:	89 de                	mov    esi,ebx
c001d3db:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001d3dd:	55                   	push   ebp
c001d3de:	e8 35 0a ff ff       	call   c000de18 <Device::preOpenPCI(PCIDeviceInfo)>
c001d3e3:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001d3e6:	89 6c 24 60          	mov    DWORD PTR [esp+0x60],ebp
c001d3ea:	c7 44 24 6c 00 00 00 00 	mov    DWORD PTR [esp+0x6c],0x0
c001d3f2:	c7 44 24 68 00 00 00 00 	mov    DWORD PTR [esp+0x68],0x0
c001d3fa:	c7 44 24 64 00 00 00 00 	mov    DWORD PTR [esp+0x64],0x0
c001d402:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001d405:	83 c4 4c             	add    esp,0x4c
c001d408:	5b                   	pop    ebx
c001d409:	5e                   	pop    esi
c001d40a:	5f                   	pop    edi
c001d40b:	5d                   	pop    ebp
c001d40c:	ff e0                	jmp    eax
c001d40e:	83 ec 0c             	sub    esp,0xc
c001d411:	68 58 01 00 00       	push   0x158
c001d416:	e8 a8 c5 fe ff       	call   c00099c3 <malloc>
c001d41b:	89 c5                	mov    ebp,eax
c001d41d:	58                   	pop    eax
c001d41e:	5a                   	pop    edx
c001d41f:	68 86 4f 02 c0       	push   0xc0024f86
c001d424:	55                   	push   ebp
c001d425:	e8 e6 0d ff ff       	call   c000e210 <DriverlessDevice::DriverlessDevice(char const*)>
c001d42a:	59                   	pop    ecx
c001d42b:	5f                   	pop    edi
c001d42c:	55                   	push   ebp
c001d42d:	56                   	push   esi
c001d42e:	e8 d3 0a ff ff       	call   c000df06 <Device::addChild(Device*)>
c001d433:	b9 09 00 00 00       	mov    ecx,0x9
c001d438:	fc                   	cld    
c001d439:	89 df                	mov    edi,ebx
c001d43b:	89 de                	mov    esi,ebx
c001d43d:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001d43f:	89 6c 24 40          	mov    DWORD PTR [esp+0x40],ebp
c001d443:	83 c4 2c             	add    esp,0x2c
c001d446:	5b                   	pop    ebx
c001d447:	5e                   	pop    esi
c001d448:	5f                   	pop    edi
c001d449:	5d                   	pop    ebp
c001d44a:	e9 c9 09 ff ff       	jmp    c000de18 <Device::preOpenPCI(PCIDeviceInfo)>
c001d44f:	83 c4 1c             	add    esp,0x1c
c001d452:	5b                   	pop    ebx
c001d453:	5e                   	pop    esi
c001d454:	5f                   	pop    edi
c001d455:	5d                   	pop    ebp
c001d456:	c3                   	ret    
c001d457:	90                   	nop

c001d458 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c001d458:	55                   	push   ebp
c001d459:	57                   	push   edi
c001d45a:	56                   	push   esi
c001d45b:	53                   	push   ebx
c001d45c:	83 ec 68             	sub    esp,0x68
c001d45f:	8b 6c 24 7c          	mov    ebp,DWORD PTR [esp+0x7c]
c001d463:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001d46a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001d46e:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001d475:	0f b6 74 24 18       	movzx  esi,BYTE PTR [esp+0x18]
c001d47a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001d47e:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001d485:	0f b6 5c 24 1c       	movzx  ebx,BYTE PTR [esp+0x1c]
c001d48a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001d48e:	0f b6 7c 24 20       	movzx  edi,BYTE PTR [esp+0x20]
c001d493:	6a 0c                	push   0xc
c001d495:	57                   	push   edi
c001d496:	53                   	push   ebx
c001d497:	56                   	push   esi
c001d498:	55                   	push   ebp
c001d499:	e8 88 f8 ff ff       	call   c001cd26 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d49e:	83 c4 20             	add    esp,0x20
c001d4a1:	57                   	push   edi
c001d4a2:	53                   	push   ebx
c001d4a3:	56                   	push   esi
c001d4a4:	55                   	push   ebp
c001d4a5:	e8 70 f9 ff ff       	call   c001ce1a <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c001d4aa:	66 89 44 24 2a       	mov    WORD PTR [esp+0x2a],ax
c001d4af:	57                   	push   edi
c001d4b0:	53                   	push   ebx
c001d4b1:	56                   	push   esi
c001d4b2:	55                   	push   ebp
c001d4b3:	e8 f8 f9 ff ff       	call   c001ceb0 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c001d4b8:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001d4bc:	83 c4 14             	add    esp,0x14
c001d4bf:	6a 3c                	push   0x3c
c001d4c1:	57                   	push   edi
c001d4c2:	53                   	push   ebx
c001d4c3:	56                   	push   esi
c001d4c4:	55                   	push   ebp
c001d4c5:	e8 5c f8 ff ff       	call   c001cd26 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d4ca:	0f b6 c4             	movzx  eax,ah
c001d4cd:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001d4d1:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c001d4d5:	88 44 24 6d          	mov    BYTE PTR [esp+0x6d],al
c001d4d9:	a1 68 64 02 c0       	mov    eax,ds:0xc0026468
c001d4de:	83 c4 20             	add    esp,0x20
c001d4e1:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c001d4e7:	83 b8 5c 11 00 00 00 	cmp    DWORD PTR [eax+0x115c],0x0
c001d4ee:	74 7c                	je     c001d56c <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x114>
c001d4f0:	31 c0                	xor    eax,eax
c001d4f2:	8b 15 68 64 02 c0    	mov    edx,DWORD PTR ds:0xc0026468
c001d4f8:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c001d4fe:	39 82 5c 11 00 00    	cmp    DWORD PTR [edx+0x115c],eax
c001d504:	7e 66                	jle    c001d56c <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x114>
c001d506:	8d 14 c2             	lea    edx,[edx+eax*8]
c001d509:	0f b7 8a 5c 01 00 00 	movzx  ecx,WORD PTR [edx+0x15c]
c001d510:	39 cb                	cmp    ebx,ecx
c001d512:	75 55                	jne    c001d569 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x111>
c001d514:	0f b6 92 5e 01 00 00 	movzx  edx,BYTE PTR [edx+0x15e]
c001d51b:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c001d51f:	75 48                	jne    c001d569 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x111>
c001d521:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d525:	83 ec 0c             	sub    esp,0xc
c001d528:	68 a0 4f 02 c0       	push   0xc0024fa0
c001d52d:	e8 8d f5 fe ff       	call   c000cabf <Dbg::kprintf(char const*, ...)>
c001d532:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d536:	8b 15 68 64 02 c0    	mov    edx,DWORD PTR ds:0xc0026468
c001d53c:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001d540:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c001d546:	0f b6 94 c2 5f 01 00 00 	movzx  edx,BYTE PTR [edx+eax*8+0x15f]
c001d54e:	88 54 24 14          	mov    BYTE PTR [esp+0x14],dl
c001d552:	52                   	push   edx
c001d553:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d557:	53                   	push   ebx
c001d558:	68 c5 4f 02 c0       	push   0xc0024fc5
c001d55d:	e8 5d f5 fe ff       	call   c000cabf <Dbg::kprintf(char const*, ...)>
c001d562:	83 c4 20             	add    esp,0x20
c001d565:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001d569:	40                   	inc    eax
c001d56a:	eb 86                	jmp    c001d4f2 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x9a>
c001d56c:	31 d2                	xor    edx,edx
c001d56e:	83 ec 0c             	sub    esp,0xc
c001d571:	57                   	push   edi
c001d572:	53                   	push   ebx
c001d573:	56                   	push   esi
c001d574:	52                   	push   edx
c001d575:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c001d579:	55                   	push   ebp
c001d57a:	e8 7d f9 ff ff       	call   c001cefc <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d57f:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001d583:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c001d587:	42                   	inc    edx
c001d588:	83 c4 20             	add    esp,0x20
c001d58b:	83 fa 06             	cmp    edx,0x6
c001d58e:	75 de                	jne    c001d56e <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x116>
c001d590:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c001d595:	83 ec 0c             	sub    esp,0xc
c001d598:	86 e0                	xchg   al,ah
c001d59a:	66 89 44 24 38       	mov    WORD PTR [esp+0x38],ax
c001d59f:	6a 02                	push   0x2
c001d5a1:	57                   	push   edi
c001d5a2:	53                   	push   ebx
c001d5a3:	56                   	push   esi
c001d5a4:	55                   	push   ebp
c001d5a5:	e8 7c f7 ff ff       	call   c001cd26 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d5aa:	66 89 44 24 6e       	mov    WORD PTR [esp+0x6e],ax
c001d5af:	83 c4 20             	add    esp,0x20
c001d5b2:	57                   	push   edi
c001d5b3:	53                   	push   ebx
c001d5b4:	56                   	push   esi
c001d5b5:	55                   	push   ebp
c001d5b6:	e8 a9 f8 ff ff       	call   c001ce64 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c001d5bb:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c001d5bf:	57                   	push   edi
c001d5c0:	53                   	push   ebx
c001d5c1:	56                   	push   esi
c001d5c2:	55                   	push   ebp
c001d5c3:	e8 06 f8 ff ff       	call   c001cdce <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001d5c8:	b9 09 00 00 00       	mov    ecx,0x9
c001d5cd:	66 89 44 24 4e       	mov    WORD PTR [esp+0x4e],ax
c001d5d2:	8a 44 24 24          	mov    al,BYTE PTR [esp+0x24]
c001d5d6:	88 44 24 6c          	mov    BYTE PTR [esp+0x6c],al
c001d5da:	8a 44 24 2c          	mov    al,BYTE PTR [esp+0x2c]
c001d5de:	88 44 24 50          	mov    BYTE PTR [esp+0x50],al
c001d5e2:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c001d5e6:	88 44 24 51          	mov    BYTE PTR [esp+0x51],al
c001d5ea:	8a 44 24 34          	mov    al,BYTE PTR [esp+0x34]
c001d5ee:	88 44 24 52          	mov    BYTE PTR [esp+0x52],al
c001d5f2:	83 ec 0c             	sub    esp,0xc
c001d5f5:	fc                   	cld    
c001d5f6:	89 e7                	mov    edi,esp
c001d5f8:	8d 74 24 58          	lea    esi,[esp+0x58]
c001d5fc:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001d5fe:	55                   	push   ebp
c001d5ff:	e8 e2 fc ff ff       	call   c001d2e6 <PCI::foundDevice(PCIDeviceInfo)>
c001d604:	81 c4 8c 00 00 00    	add    esp,0x8c
c001d60a:	5b                   	pop    ebx
c001d60b:	5e                   	pop    esi
c001d60c:	5f                   	pop    edi
c001d60d:	5d                   	pop    ebp
c001d60e:	c3                   	ret    
c001d60f:	90                   	nop

c001d610 <PCI::checkDevice(unsigned char, unsigned char)>:
c001d610:	55                   	push   ebp
c001d611:	57                   	push   edi
c001d612:	56                   	push   esi
c001d613:	53                   	push   ebx
c001d614:	83 ec 0c             	sub    esp,0xc
c001d617:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c001d61b:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c001d620:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c001d625:	6a 00                	push   0x0
c001d627:	56                   	push   esi
c001d628:	57                   	push   edi
c001d629:	55                   	push   ebp
c001d62a:	e8 9f f7 ff ff       	call   c001cdce <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001d62f:	6a 00                	push   0x0
c001d631:	56                   	push   esi
c001d632:	57                   	push   edi
c001d633:	55                   	push   ebp
c001d634:	e8 1f fe ff ff       	call   c001d458 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001d639:	83 c4 20             	add    esp,0x20
c001d63c:	6a 00                	push   0x0
c001d63e:	56                   	push   esi
c001d63f:	57                   	push   edi
c001d640:	55                   	push   ebp
c001d641:	e8 ac f7 ff ff       	call   c001cdf2 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001d646:	83 c4 10             	add    esp,0x10
c001d649:	84 c0                	test   al,al
c001d64b:	79 27                	jns    c001d674 <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c001d64d:	bb 01 00 00 00       	mov    ebx,0x1
c001d652:	53                   	push   ebx
c001d653:	56                   	push   esi
c001d654:	57                   	push   edi
c001d655:	55                   	push   ebp
c001d656:	e8 73 f7 ff ff       	call   c001cdce <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001d65b:	83 c4 10             	add    esp,0x10
c001d65e:	66 40                	inc    ax
c001d660:	74 0c                	je     c001d66e <PCI::checkDevice(unsigned char, unsigned char)+0x5e>
c001d662:	53                   	push   ebx
c001d663:	56                   	push   esi
c001d664:	57                   	push   edi
c001d665:	55                   	push   ebp
c001d666:	e8 ed fd ff ff       	call   c001d458 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001d66b:	83 c4 10             	add    esp,0x10
c001d66e:	43                   	inc    ebx
c001d66f:	83 fb 08             	cmp    ebx,0x8
c001d672:	75 de                	jne    c001d652 <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c001d674:	83 c4 0c             	add    esp,0xc
c001d677:	5b                   	pop    ebx
c001d678:	5e                   	pop    esi
c001d679:	5f                   	pop    edi
c001d67a:	5d                   	pop    ebp
c001d67b:	c3                   	ret    

c001d67c <PCI::detect()>:
c001d67c:	56                   	push   esi
c001d67d:	53                   	push   ebx
c001d67e:	53                   	push   ebx
c001d67f:	31 db                	xor    ebx,ebx
c001d681:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001d685:	6a 00                	push   0x0
c001d687:	6a 00                	push   0x0
c001d689:	6a 00                	push   0x0
c001d68b:	56                   	push   esi
c001d68c:	e8 61 f7 ff ff       	call   c001cdf2 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001d691:	83 c4 10             	add    esp,0x10
c001d694:	a8 80                	test   al,0x80
c001d696:	75 21                	jne    c001d6b9 <PCI::detect()+0x3d>
c001d698:	51                   	push   ecx
c001d699:	51                   	push   ecx
c001d69a:	6a 00                	push   0x0
c001d69c:	56                   	push   esi
c001d69d:	e8 20 fc ff ff       	call   c001d2c2 <PCI::checkBus(unsigned char)>
c001d6a2:	83 c4 10             	add    esp,0x10
c001d6a5:	eb 24                	jmp    c001d6cb <PCI::detect()+0x4f>
c001d6a7:	52                   	push   edx
c001d6a8:	52                   	push   edx
c001d6a9:	53                   	push   ebx
c001d6aa:	43                   	inc    ebx
c001d6ab:	56                   	push   esi
c001d6ac:	e8 11 fc ff ff       	call   c001d2c2 <PCI::checkBus(unsigned char)>
c001d6b1:	83 c4 10             	add    esp,0x10
c001d6b4:	83 fb 08             	cmp    ebx,0x8
c001d6b7:	74 12                	je     c001d6cb <PCI::detect()+0x4f>
c001d6b9:	53                   	push   ebx
c001d6ba:	6a 00                	push   0x0
c001d6bc:	6a 00                	push   0x0
c001d6be:	56                   	push   esi
c001d6bf:	e8 0a f7 ff ff       	call   c001cdce <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001d6c4:	83 c4 10             	add    esp,0x10
c001d6c7:	66 40                	inc    ax
c001d6c9:	74 dc                	je     c001d6a7 <PCI::detect()+0x2b>
c001d6cb:	58                   	pop    eax
c001d6cc:	5b                   	pop    ebx
c001d6cd:	5e                   	pop    esi
c001d6ce:	c3                   	ret    
c001d6cf:	90                   	nop

c001d6d0 <IDE::close(int, int, void*)>:
c001d6d0:	83 c8 ff             	or     eax,0xffffffff
c001d6d3:	c3                   	ret    

c001d6d4 <IDE::IDE()>:
c001d6d4:	83 ec 0c             	sub    esp,0xc
c001d6d7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d6db:	83 ec 08             	sub    esp,0x8
c001d6de:	68 0c 50 02 c0       	push   0xc002500c
c001d6e3:	50                   	push   eax
c001d6e4:	e8 cb 0b ff ff       	call   c000e2b4 <HardDiskController::HardDiskController(char const*)>
c001d6e9:	83 c4 10             	add    esp,0x10
c001d6ec:	ba 9c 50 02 c0       	mov    edx,0xc002509c
c001d6f1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d6f5:	89 10                	mov    DWORD PTR [eax],edx
c001d6f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d6fb:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c001d702:	90                   	nop
c001d703:	83 c4 0c             	add    esp,0xc
c001d706:	c3                   	ret    
c001d707:	90                   	nop

c001d708 <IDE::prepareInterrupt(unsigned char)>:
c001d708:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001d70d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001d711:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c001d719:	c3                   	ret    

c001d71a <selectDrive(unsigned char, unsigned char)>:
c001d71a:	c3                   	ret    
c001d71b:	90                   	nop

c001d71c <IDE::getBase(unsigned char)>:
c001d71c:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c001d721:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d725:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c001d72d:	c3                   	ret    

c001d72e <IDE::write(unsigned char, unsigned char, unsigned char)>:
c001d72e:	55                   	push   ebp
c001d72f:	57                   	push   edi
c001d730:	56                   	push   esi
c001d731:	53                   	push   ebx
c001d732:	83 ec 1c             	sub    esp,0x1c
c001d735:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001d739:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001d73d:	8d 4b f8             	lea    ecx,[ebx-0x8]
c001d740:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001d744:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001d748:	80 f9 03             	cmp    cl,0x3
c001d74b:	77 51                	ja     c001d79e <IDE::write(unsigned char, unsigned char, unsigned char)+0x70>
c001d74d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d751:	0f b6 f2             	movzx  esi,dl
c001d754:	0f b6 db             	movzx  ebx,bl
c001d757:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c001d75a:	8a 54 ef 10          	mov    dl,BYTE PTR [edi+ebp*8+0x10]
c001d75e:	83 ca 80             	or     edx,0xffffff80
c001d761:	0f b6 d2             	movzx  edx,dl
c001d764:	52                   	push   edx
c001d765:	6a 0c                	push   0xc
c001d767:	56                   	push   esi
c001d768:	57                   	push   edi
c001d769:	e8 c0 ff ff ff       	call   c001d72e <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d76e:	66 8b 54 ef 0a       	mov    dx,WORD PTR [edi+ebp*8+0xa]
c001d773:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001d777:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c001d77b:	ee                   	out    dx,al
c001d77c:	0f b6 44 ef 10       	movzx  eax,BYTE PTR [edi+ebp*8+0x10]
c001d781:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c001d785:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c001d789:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001d78d:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001d795:	83 c4 2c             	add    esp,0x2c
c001d798:	5b                   	pop    ebx
c001d799:	5e                   	pop    esi
c001d79a:	5f                   	pop    edi
c001d79b:	5d                   	pop    ebp
c001d79c:	eb 90                	jmp    c001d72e <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d79e:	80 fb 07             	cmp    bl,0x7
c001d7a1:	77 12                	ja     c001d7b5 <IDE::write(unsigned char, unsigned char, unsigned char)+0x87>
c001d7a3:	0f b6 d2             	movzx  edx,dl
c001d7a6:	0f b6 db             	movzx  ebx,bl
c001d7a9:	66 03 9c d7 5a 01 00 00 	add    bx,WORD PTR [edi+edx*8+0x15a]
c001d7b1:	89 da                	mov    edx,ebx
c001d7b3:	eb 2f                	jmp    c001d7e4 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c001d7b5:	80 fb 0d             	cmp    bl,0xd
c001d7b8:	77 13                	ja     c001d7cd <IDE::write(unsigned char, unsigned char, unsigned char)+0x9f>
c001d7ba:	0f b6 d2             	movzx  edx,dl
c001d7bd:	0f b6 db             	movzx  ebx,bl
c001d7c0:	8b 94 d7 5c 01 00 00 	mov    edx,DWORD PTR [edi+edx*8+0x15c]
c001d7c7:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c001d7cb:	eb 17                	jmp    c001d7e4 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c001d7cd:	80 fb 15             	cmp    bl,0x15
c001d7d0:	77 13                	ja     c001d7e5 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c001d7d2:	0f b6 d2             	movzx  edx,dl
c001d7d5:	0f b6 db             	movzx  ebx,bl
c001d7d8:	66 8b 94 d7 5e 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15e]
c001d7e0:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c001d7e4:	ee                   	out    dx,al
c001d7e5:	83 c4 1c             	add    esp,0x1c
c001d7e8:	5b                   	pop    ebx
c001d7e9:	5e                   	pop    esi
c001d7ea:	5f                   	pop    edi
c001d7eb:	5d                   	pop    ebp
c001d7ec:	c3                   	ret    
c001d7ed:	90                   	nop

c001d7ee <IDE::read(unsigned char, unsigned char)>:
c001d7ee:	55                   	push   ebp
c001d7ef:	57                   	push   edi
c001d7f0:	56                   	push   esi
c001d7f1:	53                   	push   ebx
c001d7f2:	83 ec 1c             	sub    esp,0x1c
c001d7f5:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001d7f9:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001d7fd:	8d 43 f8             	lea    eax,[ebx-0x8]
c001d800:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001d804:	3c 03                	cmp    al,0x3
c001d806:	77 43                	ja     c001d84b <IDE::read(unsigned char, unsigned char)+0x5d>
c001d808:	0f b6 f2             	movzx  esi,dl
c001d80b:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c001d80e:	8a 44 ef 10          	mov    al,BYTE PTR [edi+ebp*8+0x10]
c001d812:	83 c8 80             	or     eax,0xffffff80
c001d815:	0f b6 c0             	movzx  eax,al
c001d818:	50                   	push   eax
c001d819:	6a 0c                	push   0xc
c001d81b:	56                   	push   esi
c001d81c:	57                   	push   edi
c001d81d:	e8 0c ff ff ff       	call   c001d72e <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d822:	66 8b 4c ef 0a       	mov    cx,WORD PTR [edi+ebp*8+0xa]
c001d827:	0f b6 c3             	movzx  eax,bl
c001d82a:	8d 54 01 fa          	lea    edx,[ecx+eax*1-0x6]
c001d82e:	ec                   	in     al,dx
c001d82f:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001d833:	0f b6 54 ef 10       	movzx  edx,BYTE PTR [edi+ebp*8+0x10]
c001d838:	52                   	push   edx
c001d839:	6a 0c                	push   0xc
c001d83b:	56                   	push   esi
c001d83c:	57                   	push   edi
c001d83d:	e8 ec fe ff ff       	call   c001d72e <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d842:	83 c4 20             	add    esp,0x20
c001d845:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001d849:	eb 49                	jmp    c001d894 <IDE::read(unsigned char, unsigned char)+0xa6>
c001d84b:	80 fb 07             	cmp    bl,0x7
c001d84e:	77 12                	ja     c001d862 <IDE::read(unsigned char, unsigned char)+0x74>
c001d850:	0f b6 d2             	movzx  edx,dl
c001d853:	0f b6 c3             	movzx  eax,bl
c001d856:	66 03 84 d7 5a 01 00 00 	add    ax,WORD PTR [edi+edx*8+0x15a]
c001d85e:	89 c2                	mov    edx,eax
c001d860:	eb 31                	jmp    c001d893 <IDE::read(unsigned char, unsigned char)+0xa5>
c001d862:	80 fb 0d             	cmp    bl,0xd
c001d865:	77 13                	ja     c001d87a <IDE::read(unsigned char, unsigned char)+0x8c>
c001d867:	0f b6 d2             	movzx  edx,dl
c001d86a:	8b 84 d7 5c 01 00 00 	mov    eax,DWORD PTR [edi+edx*8+0x15c]
c001d871:	0f b6 d3             	movzx  edx,bl
c001d874:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c001d878:	eb 19                	jmp    c001d893 <IDE::read(unsigned char, unsigned char)+0xa5>
c001d87a:	31 c0                	xor    eax,eax
c001d87c:	80 fb 15             	cmp    bl,0x15
c001d87f:	77 13                	ja     c001d894 <IDE::read(unsigned char, unsigned char)+0xa6>
c001d881:	0f b6 d2             	movzx  edx,dl
c001d884:	66 8b 84 d7 5e 01 00 00 	mov    ax,WORD PTR [edi+edx*8+0x15e]
c001d88c:	0f b6 d3             	movzx  edx,bl
c001d88f:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c001d893:	ec                   	in     al,dx
c001d894:	83 c4 1c             	add    esp,0x1c
c001d897:	5b                   	pop    ebx
c001d898:	5e                   	pop    esi
c001d899:	5f                   	pop    edi
c001d89a:	5d                   	pop    ebp
c001d89b:	c3                   	ret    

c001d89c <IDE::waitInterrupt(unsigned char)>:
c001d89c:	55                   	push   ebp
c001d89d:	57                   	push   edi
c001d89e:	56                   	push   esi
c001d89f:	53                   	push   ebx
c001d8a0:	31 db                	xor    ebx,ebx
c001d8a2:	83 ec 0c             	sub    esp,0xc
c001d8a5:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001d8a9:	0f b6 74 24 24       	movzx  esi,BYTE PTR [esp+0x24]
c001d8ae:	0f b6 ac 37 6c 02 00 00 	movzx  ebp,BYTE PTR [edi+esi*1+0x26c]
c001d8b6:	89 e8                	mov    eax,ebp
c001d8b8:	84 c0                	test   al,al
c001d8ba:	75 30                	jne    c001d8ec <IDE::waitInterrupt(unsigned char)+0x50>
c001d8bc:	50                   	push   eax
c001d8bd:	6a 0c                	push   0xc
c001d8bf:	56                   	push   esi
c001d8c0:	57                   	push   edi
c001d8c1:	e8 28 ff ff ff       	call   c001d7ee <IDE::read(unsigned char, unsigned char)>
c001d8c6:	83 c4 10             	add    esp,0x10
c001d8c9:	a8 01                	test   al,0x1
c001d8cb:	75 27                	jne    c001d8f4 <IDE::waitInterrupt(unsigned char)+0x58>
c001d8cd:	f6 c3 04             	test   bl,0x4
c001d8d0:	75 12                	jne    c001d8e4 <IDE::waitInterrupt(unsigned char)+0x48>
c001d8d2:	83 fb 32             	cmp    ebx,0x32
c001d8d5:	7e 0d                	jle    c001d8e4 <IDE::waitInterrupt(unsigned char)+0x48>
c001d8d7:	83 ec 0c             	sub    esp,0xc
c001d8da:	6a 64                	push   0x64
c001d8dc:	e8 6b a9 ff ff       	call   c001824c <milliTenthSleep(unsigned int)>
c001d8e1:	83 c4 10             	add    esp,0x10
c001d8e4:	83 fb 3c             	cmp    ebx,0x3c
c001d8e7:	74 0b                	je     c001d8f4 <IDE::waitInterrupt(unsigned char)+0x58>
c001d8e9:	43                   	inc    ebx
c001d8ea:	eb c2                	jmp    c001d8ae <IDE::waitInterrupt(unsigned char)+0x12>
c001d8ec:	c6 84 37 6c 02 00 00 00 	mov    BYTE PTR [edi+esi*1+0x26c],0x0
c001d8f4:	83 c4 0c             	add    esp,0xc
c001d8f7:	89 e8                	mov    eax,ebp
c001d8f9:	5b                   	pop    ebx
c001d8fa:	5e                   	pop    esi
c001d8fb:	5f                   	pop    edi
c001d8fc:	5d                   	pop    ebp
c001d8fd:	c3                   	ret    

c001d8fe <ideChannel0IRQHandler(regs*, void*)>:
c001d8fe:	83 ec 10             	sub    esp,0x10
c001d901:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d905:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c001d90c:	6a 07                	push   0x7
c001d90e:	6a 00                	push   0x0
c001d910:	50                   	push   eax
c001d911:	e8 d8 fe ff ff       	call   c001d7ee <IDE::read(unsigned char, unsigned char)>
c001d916:	83 c4 1c             	add    esp,0x1c
c001d919:	c3                   	ret    

c001d91a <ideChannel1IRQHandler(regs*, void*)>:
c001d91a:	83 ec 10             	sub    esp,0x10
c001d91d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d921:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c001d928:	6a 07                	push   0x7
c001d92a:	6a 01                	push   0x1
c001d92c:	50                   	push   eax
c001d92d:	e8 bc fe ff ff       	call   c001d7ee <IDE::read(unsigned char, unsigned char)>
c001d932:	83 c4 1c             	add    esp,0x1c
c001d935:	c3                   	ret    

c001d936 <IDE::enableIRQs(unsigned char, bool)>:
c001d936:	57                   	push   edi
c001d937:	56                   	push   esi
c001d938:	be 04 00 00 00       	mov    esi,0x4
c001d93d:	53                   	push   ebx
c001d93e:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c001d943:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001d947:	0f b6 7c 24 14       	movzx  edi,BYTE PTR [esp+0x14]
c001d94c:	0f 94 c0             	sete   al
c001d94f:	d1 e0                	shl    eax,1
c001d951:	88 84 fb 60 01 00 00 	mov    BYTE PTR [ebx+edi*8+0x160],al
c001d958:	0f b6 c0             	movzx  eax,al
c001d95b:	50                   	push   eax
c001d95c:	6a 0c                	push   0xc
c001d95e:	57                   	push   edi
c001d95f:	53                   	push   ebx
c001d960:	e8 c9 fd ff ff       	call   c001d72e <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d965:	83 c4 10             	add    esp,0x10
c001d968:	50                   	push   eax
c001d969:	6a 0c                	push   0xc
c001d96b:	57                   	push   edi
c001d96c:	53                   	push   ebx
c001d96d:	e8 7c fe ff ff       	call   c001d7ee <IDE::read(unsigned char, unsigned char)>
c001d972:	83 c4 10             	add    esp,0x10
c001d975:	4e                   	dec    esi
c001d976:	75 f0                	jne    c001d968 <IDE::enableIRQs(unsigned char, bool)+0x32>
c001d978:	5b                   	pop    ebx
c001d979:	5e                   	pop    esi
c001d97a:	5f                   	pop    edi
c001d97b:	c3                   	ret    

c001d97c <IDE::open(int, int, void*)>:
c001d97c:	55                   	push   ebp
c001d97d:	57                   	push   edi
c001d97e:	56                   	push   esi
c001d97f:	53                   	push   ebx
c001d980:	83 ec 1c             	sub    esp,0x1c
c001d983:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001d987:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c001d990:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c001d999:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c001d9a0:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c001d9a7:	0f 85 b0 02 00 00    	jne    c001dc5d <IDE::open(int, int, void*)+0x2e1>
c001d9ad:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c001d9b3:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c001d9b7:	83 e0 7f             	and    eax,0x7f
c001d9ba:	3c 05                	cmp    al,0x5
c001d9bc:	74 04                	je     c001d9c2 <IDE::open(int, int, void*)+0x46>
c001d9be:	3c 0f                	cmp    al,0xf
c001d9c0:	75 32                	jne    c001d9f4 <IDE::open(int, int, void*)+0x78>
c001d9c2:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c001d9c8:	83 e0 fc             	and    eax,0xfffffffc
c001d9cb:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001d9d2:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c001d9d8:	83 e0 fc             	and    eax,0xfffffffc
c001d9db:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001d9e2:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c001d9e8:	83 e0 fc             	and    eax,0xfffffffc
c001d9eb:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001d9f2:	eb 14                	jmp    c001da08 <IDE::open(int, int, void*)+0x8c>
c001d9f4:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c001d9fe:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c001da08:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c001da0f:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c001da16:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001da1a:	89 c6                	mov    esi,eax
c001da1c:	bf f8 0c 00 00       	mov    edi,0xcf8
c001da21:	c1 e6 10             	shl    esi,0x10
c001da24:	89 e8                	mov    eax,ebp
c001da26:	89 fa                	mov    edx,edi
c001da28:	c1 e0 0b             	shl    eax,0xb
c001da2b:	09 f0                	or     eax,esi
c001da2d:	0f b6 b3 1e 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11e]
c001da34:	c1 e6 08             	shl    esi,0x8
c001da37:	09 c6                	or     esi,eax
c001da39:	89 f0                	mov    eax,esi
c001da3b:	0d 08 00 00 80       	or     eax,0x80000008
c001da40:	ef                   	out    dx,eax
c001da41:	b9 fc 0c 00 00       	mov    ecx,0xcfc
c001da46:	89 ca                	mov    edx,ecx
c001da48:	ed                   	in     eax,dx
c001da49:	c1 e8 10             	shr    eax,0x10
c001da4c:	3d ff ff 00 00       	cmp    eax,0xffff
c001da51:	0f 84 f5 00 00 00    	je     c001db4c <IDE::open(int, int, void*)+0x1d0>
c001da57:	81 ce 3c 00 00 80    	or     esi,0x8000003c
c001da5d:	89 fa                	mov    edx,edi
c001da5f:	89 f0                	mov    eax,esi
c001da61:	ef                   	out    dx,eax
c001da62:	b0 fe                	mov    al,0xfe
c001da64:	89 ca                	mov    edx,ecx
c001da66:	ee                   	out    dx,al
c001da67:	89 f0                	mov    eax,esi
c001da69:	89 fa                	mov    edx,edi
c001da6b:	ef                   	out    dx,eax
c001da6c:	89 ca                	mov    edx,ecx
c001da6e:	ed                   	in     eax,dx
c001da6f:	3c fe                	cmp    al,0xfe
c001da71:	0f 85 a9 00 00 00    	jne    c001db20 <IDE::open(int, int, void*)+0x1a4>
c001da77:	8b 15 68 64 02 c0    	mov    edx,DWORD PTR ds:0xc0026468
c001da7d:	f6 82 e8 01 00 00 01 	test   BYTE PTR [edx+0x1e8],0x1
c001da84:	74 33                	je     c001dab9 <IDE::open(int, int, void*)+0x13d>
c001da86:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c001da8c:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c001da90:	40                   	inc    eax
c001da91:	83 ec 0c             	sub    esp,0xc
c001da94:	0f b6 c0             	movzx  eax,al
c001da97:	50                   	push   eax
c001da98:	55                   	push   ebp
c001da99:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001da9d:	ff b2 e4 01 00 00    	push   DWORD PTR [edx+0x1e4]
c001daa3:	51                   	push   ecx
c001daa4:	e8 0f 44 ff ff       	call   c0011eb8 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c001daa9:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c001daae:	83 c4 1c             	add    esp,0x1c
c001dab1:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001dab7:	eb 0a                	jmp    c001dac3 <IDE::open(int, int, void*)+0x147>
c001dab9:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c001dac3:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c001daca:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001dad1:	c1 e1 10             	shl    ecx,0x10
c001dad4:	c1 e0 08             	shl    eax,0x8
c001dad7:	bf f8 0c 00 00       	mov    edi,0xcf8
c001dadc:	09 c1                	or     ecx,eax
c001dade:	89 fa                	mov    edx,edi
c001dae0:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c001dae7:	c1 e0 0b             	shl    eax,0xb
c001daea:	09 c1                	or     ecx,eax
c001daec:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c001daf2:	89 c8                	mov    eax,ecx
c001daf4:	ef                   	out    dx,eax
c001daf5:	be fc 0c 00 00       	mov    esi,0xcfc
c001dafa:	8a 83 50 01 00 00    	mov    al,BYTE PTR [ebx+0x150]
c001db00:	89 f2                	mov    edx,esi
c001db02:	ee                   	out    dx,al
c001db03:	89 c8                	mov    eax,ecx
c001db05:	89 fa                	mov    edx,edi
c001db07:	ef                   	out    dx,eax
c001db08:	89 f2                	mov    edx,esi
c001db0a:	ed                   	in     eax,dx
c001db0b:	0f b6 c0             	movzx  eax,al
c001db0e:	3b 83 50 01 00 00    	cmp    eax,DWORD PTR [ebx+0x150]
c001db14:	74 46                	je     c001db5c <IDE::open(int, int, void*)+0x1e0>
c001db16:	83 ec 0c             	sub    esp,0xc
c001db19:	68 24 50 02 c0       	push   0xc0025024
c001db1e:	eb 34                	jmp    c001db54 <IDE::open(int, int, void*)+0x1d8>
c001db20:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c001db29:	75 17                	jne    c001db42 <IDE::open(int, int, void*)+0x1c6>
c001db2b:	80 7c 24 03 80       	cmp    BYTE PTR [esp+0x3],0x80
c001db30:	74 07                	je     c001db39 <IDE::open(int, int, void*)+0x1bd>
c001db32:	80 7c 24 03 8a       	cmp    BYTE PTR [esp+0x3],0x8a
c001db37:	75 09                	jne    c001db42 <IDE::open(int, int, void*)+0x1c6>
c001db39:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001db40:	eb 1a                	jmp    c001db5c <IDE::open(int, int, void*)+0x1e0>
c001db42:	83 ec 0c             	sub    esp,0xc
c001db45:	68 2c 50 02 c0       	push   0xc002502c
c001db4a:	eb 08                	jmp    c001db54 <IDE::open(int, int, void*)+0x1d8>
c001db4c:	83 ec 0c             	sub    esp,0xc
c001db4f:	68 5d 50 02 c0       	push   0xc002505d
c001db54:	e8 28 68 ff ff       	call   c0014381 <Krnl::panic(char const*)>
c001db59:	83 c4 10             	add    esp,0x10
c001db5c:	80 bb 1f 01 00 00 00 	cmp    BYTE PTR [ebx+0x11f],0x0
c001db63:	79 1a                	jns    c001db7f <IDE::open(int, int, void*)+0x203>
c001db65:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c001db6b:	83 e0 fc             	and    eax,0xfffffffc
c001db6e:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c001db75:	83 c0 08             	add    eax,0x8
c001db78:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c001db7f:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001db85:	89 c2                	mov    edx,eax
c001db87:	83 e2 0f             	and    edx,0xf
c001db8a:	66 83 fa 08          	cmp    dx,0x8
c001db8e:	75 0a                	jne    c001db9a <IDE::open(int, int, void*)+0x21e>
c001db90:	83 e8 02             	sub    eax,0x2
c001db93:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001db9a:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c001dba0:	89 c2                	mov    edx,eax
c001dba2:	83 e2 0f             	and    edx,0xf
c001dba5:	66 83 fa 08          	cmp    dx,0x8
c001dba9:	75 0a                	jne    c001dbb5 <IDE::open(int, int, void*)+0x239>
c001dbab:	83 e8 02             	sub    eax,0x2
c001dbae:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001dbb5:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c001dbbc:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c001dbc3:	89 d0                	mov    eax,edx
c001dbc5:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001dbc8:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001dbcc:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c001dbd0:	8d 4a 01             	lea    ecx,[edx+0x1]
c001dbd3:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c001dbd8:	0f b6 c9             	movzx  ecx,cl
c001dbdb:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c001dbe2:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001dbe5:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001dbe9:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c001dbed:	8d 50 02             	lea    edx,[eax+0x2]
c001dbf0:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c001dbf5:	0f b6 d2             	movzx  edx,dl
c001dbf8:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c001dbfe:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001dc01:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001dc05:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c001dc09:	8d 48 03             	lea    ecx,[eax+0x3]
c001dc0c:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c001dc11:	0f b6 c9             	movzx  ecx,cl
c001dc14:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c001dc1a:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001dc1d:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001dc21:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c001dc25:	8d 50 04             	lea    edx,[eax+0x4]
c001dc28:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c001dc2e:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c001dc33:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c001dc3a:	66 85 f6             	test   si,si
c001dc3d:	74 5b                	je     c001dc9a <IDE::open(int, int, void*)+0x31e>
c001dc3f:	0f b6 d2             	movzx  edx,dl
c001dc42:	83 c0 05             	add    eax,0x5
c001dc45:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001dc48:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001dc4c:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c001dc50:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c001dc56:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c001dc5b:	eb 3d                	jmp    c001dc9a <IDE::open(int, int, void*)+0x31e>
c001dc5d:	8b 83 18 01 00 00    	mov    eax,DWORD PTR [ebx+0x118]
c001dc63:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001dc6a:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001dc71:	66 05 06 02          	add    ax,0x206
c001dc75:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001dc7c:	66 8b 83 1a 01 00 00 	mov    ax,WORD PTR [ebx+0x11a]
c001dc83:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001dc8a:	66 05 06 02          	add    ax,0x206
c001dc8e:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001dc95:	e9 e5 fe ff ff       	jmp    c001db7f <IDE::open(int, int, void*)+0x203>
c001dc9a:	50                   	push   eax
c001dc9b:	50                   	push   eax
c001dc9c:	6a 00                	push   0x0
c001dc9e:	53                   	push   ebx
c001dc9f:	e8 64 fa ff ff       	call   c001d708 <IDE::prepareInterrupt(unsigned char)>
c001dca4:	5a                   	pop    edx
c001dca5:	59                   	pop    ecx
c001dca6:	6a 01                	push   0x1
c001dca8:	53                   	push   ebx
c001dca9:	e8 5a fa ff ff       	call   c001d708 <IDE::prepareInterrupt(unsigned char)>
c001dcae:	83 c4 0c             	add    esp,0xc
c001dcb1:	6a 00                	push   0x0
c001dcb3:	6a 00                	push   0x0
c001dcb5:	53                   	push   ebx
c001dcb6:	e8 7b fc ff ff       	call   c001d936 <IDE::enableIRQs(unsigned char, bool)>
c001dcbb:	83 c4 0c             	add    esp,0xc
c001dcbe:	6a 00                	push   0x0
c001dcc0:	6a 01                	push   0x1
c001dcc2:	53                   	push   ebx
c001dcc3:	e8 6e fc ff ff       	call   c001d936 <IDE::enableIRQs(unsigned char, bool)>
c001dcc8:	83 c4 10             	add    esp,0x10
c001dccb:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c001dcd2:	74 34                	je     c001dd08 <IDE::open(int, int, void*)+0x38c>
c001dcd4:	83 ec 0c             	sub    esp,0xc
c001dcd7:	53                   	push   ebx
c001dcd8:	6a 01                	push   0x1
c001dcda:	68 fe d8 01 c0       	push   0xc001d8fe
c001dcdf:	6a 0e                	push   0xe
c001dce1:	53                   	push   ebx
c001dce2:	e8 97 01 ff ff       	call   c000de7e <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001dce7:	83 c4 14             	add    esp,0x14
c001dcea:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001dcf0:	53                   	push   ebx
c001dcf1:	6a 01                	push   0x1
c001dcf3:	68 1a d9 01 c0       	push   0xc001d91a
c001dcf8:	6a 0f                	push   0xf
c001dcfa:	53                   	push   ebx
c001dcfb:	e8 7e 01 ff ff       	call   c000de7e <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001dd00:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c001dd06:	eb 38                	jmp    c001dd40 <IDE::open(int, int, void*)+0x3c4>
c001dd08:	83 ec 0c             	sub    esp,0xc
c001dd0b:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c001dd15:	53                   	push   ebx
c001dd16:	6a 00                	push   0x0
c001dd18:	68 fe d8 01 c0       	push   0xc001d8fe
c001dd1d:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c001dd23:	53                   	push   ebx
c001dd24:	e8 55 01 ff ff       	call   c000de7e <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001dd29:	83 c4 14             	add    esp,0x14
c001dd2c:	53                   	push   ebx
c001dd2d:	6a 00                	push   0x0
c001dd2f:	68 1a d9 01 c0       	push   0xc001d91a
c001dd34:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c001dd3a:	53                   	push   ebx
c001dd3b:	e8 3e 01 ff ff       	call   c000de7e <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001dd40:	8b 03                	mov    eax,DWORD PTR [ebx]
c001dd42:	83 c4 20             	add    esp,0x20
c001dd45:	83 ec 0c             	sub    esp,0xc
c001dd48:	53                   	push   ebx
c001dd49:	ff 50 18             	call   DWORD PTR [eax+0x18]
c001dd4c:	83 c4 0c             	add    esp,0xc
c001dd4f:	6a 07                	push   0x7
c001dd51:	6a 00                	push   0x0
c001dd53:	53                   	push   ebx
c001dd54:	e8 95 fa ff ff       	call   c001d7ee <IDE::read(unsigned char, unsigned char)>
c001dd59:	83 c4 0c             	add    esp,0xc
c001dd5c:	6a 07                	push   0x7
c001dd5e:	6a 01                	push   0x1
c001dd60:	53                   	push   ebx
c001dd61:	e8 88 fa ff ff       	call   c001d7ee <IDE::read(unsigned char, unsigned char)>
c001dd66:	83 c4 0c             	add    esp,0xc
c001dd69:	6a 01                	push   0x1
c001dd6b:	6a 00                	push   0x0
c001dd6d:	53                   	push   ebx
c001dd6e:	e8 c3 fb ff ff       	call   c001d936 <IDE::enableIRQs(unsigned char, bool)>
c001dd73:	83 c4 0c             	add    esp,0xc
c001dd76:	6a 01                	push   0x1
c001dd78:	6a 01                	push   0x1
c001dd7a:	53                   	push   ebx
c001dd7b:	e8 b6 fb ff ff       	call   c001d936 <IDE::enableIRQs(unsigned char, bool)>
c001dd80:	83 c4 2c             	add    esp,0x2c
c001dd83:	31 c0                	xor    eax,eax
c001dd85:	5b                   	pop    ebx
c001dd86:	5e                   	pop    esi
c001dd87:	5f                   	pop    edi
c001dd88:	5d                   	pop    ebp
c001dd89:	c3                   	ret    

c001dd8a <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c001dd8a:	55                   	push   ebp
c001dd8b:	57                   	push   edi
c001dd8c:	56                   	push   esi
c001dd8d:	53                   	push   ebx
c001dd8e:	83 ec 1c             	sub    esp,0x1c
c001dd91:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001dd95:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001dd99:	8d 50 f8             	lea    edx,[eax-0x8]
c001dd9c:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001dda0:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c001dda4:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001dda8:	80 fa 03             	cmp    dl,0x3
c001ddab:	77 5d                	ja     c001de0a <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x80>
c001ddad:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001ddb1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001ddb5:	0f b6 db             	movzx  ebx,bl
c001ddb8:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c001ddbb:	8a 54 ee 10          	mov    dl,BYTE PTR [esi+ebp*8+0x10]
c001ddbf:	83 ca 80             	or     edx,0xffffff80
c001ddc2:	0f b6 d2             	movzx  edx,dl
c001ddc5:	52                   	push   edx
c001ddc6:	6a 0c                	push   0xc
c001ddc8:	53                   	push   ebx
c001ddc9:	56                   	push   esi
c001ddca:	e8 5f f9 ff ff       	call   c001d72e <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ddcf:	66 8b 54 ee 0a       	mov    dx,WORD PTR [esi+ebp*8+0xa]
c001ddd4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ddd8:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001dddc:	0f b6 c0             	movzx  eax,al
c001dddf:	8d 54 02 fa          	lea    edx,[edx+eax*1-0x6]
c001dde3:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001dde5:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001ddea:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c001ddee:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c001ddf2:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001ddf6:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001ddfe:	83 c4 2c             	add    esp,0x2c
c001de01:	5b                   	pop    ebx
c001de02:	5e                   	pop    esi
c001de03:	5f                   	pop    edi
c001de04:	5d                   	pop    ebp
c001de05:	e9 24 f9 ff ff       	jmp    c001d72e <IDE::write(unsigned char, unsigned char, unsigned char)>
c001de0a:	3c 07                	cmp    al,0x7
c001de0c:	77 10                	ja     c001de1e <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x94>
c001de0e:	0f b6 db             	movzx  ebx,bl
c001de11:	0f b6 d0             	movzx  edx,al
c001de14:	66 03 94 de 5a 01 00 00 	add    dx,WORD PTR [esi+ebx*8+0x15a]
c001de1c:	eb 2d                	jmp    c001de4b <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c001de1e:	3c 0d                	cmp    al,0xd
c001de20:	77 13                	ja     c001de35 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xab>
c001de22:	0f b6 db             	movzx  ebx,bl
c001de25:	0f b6 c0             	movzx  eax,al
c001de28:	8b 94 de 5c 01 00 00 	mov    edx,DWORD PTR [esi+ebx*8+0x15c]
c001de2f:	8d 54 02 f4          	lea    edx,[edx+eax*1-0xc]
c001de33:	eb 16                	jmp    c001de4b <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c001de35:	3c 15                	cmp    al,0x15
c001de37:	77 14                	ja     c001de4d <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc3>
c001de39:	0f b6 db             	movzx  ebx,bl
c001de3c:	0f b6 c0             	movzx  eax,al
c001de3f:	66 8b 94 de 5e 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15e]
c001de47:	8d 54 02 f2          	lea    edx,[edx+eax*1-0xe]
c001de4b:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001de4d:	83 c4 1c             	add    esp,0x1c
c001de50:	5b                   	pop    ebx
c001de51:	5e                   	pop    esi
c001de52:	5f                   	pop    edi
c001de53:	5d                   	pop    ebp
c001de54:	c3                   	ret    
c001de55:	90                   	nop

c001de56 <IDE::detect()>:
c001de56:	55                   	push   ebp
c001de57:	57                   	push   edi
c001de58:	56                   	push   esi
c001de59:	53                   	push   ebx
c001de5a:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001de60:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c001de67:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c001de6e:	0f 85 97 02 00 00    	jne    c001e10b <IDE::detect()+0x2b5>
c001de74:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c001de7b:	31 f6                	xor    esi,esi
c001de7d:	31 ed                	xor    ebp,ebp
c001de7f:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001de87:	89 e8                	mov    eax,ebp
c001de89:	c1 e0 06             	shl    eax,0x6
c001de8c:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c001de94:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001de98:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001de9c:	c1 e0 04             	shl    eax,0x4
c001de9f:	83 c8 a0             	or     eax,0xffffffa0
c001dea2:	0f b6 c0             	movzx  eax,al
c001dea5:	50                   	push   eax
c001dea6:	6a 06                	push   0x6
c001dea8:	56                   	push   esi
c001dea9:	53                   	push   ebx
c001deaa:	e8 7f f8 ff ff       	call   c001d72e <IDE::write(unsigned char, unsigned char, unsigned char)>
c001deaf:	83 c4 0c             	add    esp,0xc
c001deb2:	6a 0c                	push   0xc
c001deb4:	56                   	push   esi
c001deb5:	53                   	push   ebx
c001deb6:	e8 33 f9 ff ff       	call   c001d7ee <IDE::read(unsigned char, unsigned char)>
c001debb:	83 c4 0c             	add    esp,0xc
c001debe:	6a 0c                	push   0xc
c001dec0:	56                   	push   esi
c001dec1:	53                   	push   ebx
c001dec2:	e8 27 f9 ff ff       	call   c001d7ee <IDE::read(unsigned char, unsigned char)>
c001dec7:	83 c4 0c             	add    esp,0xc
c001deca:	6a 0c                	push   0xc
c001decc:	56                   	push   esi
c001decd:	53                   	push   ebx
c001dece:	e8 1b f9 ff ff       	call   c001d7ee <IDE::read(unsigned char, unsigned char)>
c001ded3:	83 c4 0c             	add    esp,0xc
c001ded6:	6a 0c                	push   0xc
c001ded8:	56                   	push   esi
c001ded9:	53                   	push   ebx
c001deda:	e8 0f f9 ff ff       	call   c001d7ee <IDE::read(unsigned char, unsigned char)>
c001dedf:	68 ec 00 00 00       	push   0xec
c001dee4:	6a 07                	push   0x7
c001dee6:	56                   	push   esi
c001dee7:	53                   	push   ebx
c001dee8:	e8 41 f8 ff ff       	call   c001d72e <IDE::write(unsigned char, unsigned char, unsigned char)>
c001deed:	83 c4 1c             	add    esp,0x1c
c001def0:	6a 0c                	push   0xc
c001def2:	56                   	push   esi
c001def3:	53                   	push   ebx
c001def4:	e8 f5 f8 ff ff       	call   c001d7ee <IDE::read(unsigned char, unsigned char)>
c001def9:	83 c4 0c             	add    esp,0xc
c001defc:	6a 0c                	push   0xc
c001defe:	56                   	push   esi
c001deff:	53                   	push   ebx
c001df00:	e8 e9 f8 ff ff       	call   c001d7ee <IDE::read(unsigned char, unsigned char)>
c001df05:	83 c4 0c             	add    esp,0xc
c001df08:	6a 0c                	push   0xc
c001df0a:	56                   	push   esi
c001df0b:	53                   	push   ebx
c001df0c:	e8 dd f8 ff ff       	call   c001d7ee <IDE::read(unsigned char, unsigned char)>
c001df11:	83 c4 0c             	add    esp,0xc
c001df14:	6a 0c                	push   0xc
c001df16:	56                   	push   esi
c001df17:	53                   	push   ebx
c001df18:	e8 d1 f8 ff ff       	call   c001d7ee <IDE::read(unsigned char, unsigned char)>
c001df1d:	83 c4 0c             	add    esp,0xc
c001df20:	6a 0c                	push   0xc
c001df22:	56                   	push   esi
c001df23:	53                   	push   ebx
c001df24:	e8 c5 f8 ff ff       	call   c001d7ee <IDE::read(unsigned char, unsigned char)>
c001df29:	83 c4 10             	add    esp,0x10
c001df2c:	84 c0                	test   al,al
c001df2e:	0f 84 5f 01 00 00    	je     c001e093 <IDE::detect()+0x23d>
c001df34:	31 ff                	xor    edi,edi
c001df36:	50                   	push   eax
c001df37:	6a 0c                	push   0xc
c001df39:	56                   	push   esi
c001df3a:	53                   	push   ebx
c001df3b:	e8 ae f8 ff ff       	call   c001d7ee <IDE::read(unsigned char, unsigned char)>
c001df40:	83 c4 10             	add    esp,0x10
c001df43:	a8 01                	test   al,0x1
c001df45:	0f 85 69 01 00 00    	jne    c001e0b4 <IDE::detect()+0x25e>
c001df4b:	84 c0                	test   al,al
c001df4d:	78 04                	js     c001df53 <IDE::detect()+0xfd>
c001df4f:	a8 08                	test   al,0x8
c001df51:	75 23                	jne    c001df76 <IDE::detect()+0x120>
c001df53:	47                   	inc    edi
c001df54:	81 ff 17 01 00 00    	cmp    edi,0x117
c001df5a:	7e da                	jle    c001df36 <IDE::detect()+0xe0>
c001df5c:	83 ec 0c             	sub    esp,0xc
c001df5f:	6a 32                	push   0x32
c001df61:	e8 e6 a2 ff ff       	call   c001824c <milliTenthSleep(unsigned int)>
c001df66:	83 c4 10             	add    esp,0x10
c001df69:	81 ff 2c 01 00 00    	cmp    edi,0x12c
c001df6f:	75 c5                	jne    c001df36 <IDE::detect()+0xe0>
c001df71:	e9 3e 01 00 00       	jmp    c001e0b4 <IDE::detect()+0x25e>
c001df76:	31 c9                	xor    ecx,ecx
c001df78:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c001df7c:	8d 7c 24 10          	lea    edi,[esp+0x10]
c001df80:	83 ec 0c             	sub    esp,0xc
c001df83:	68 80 00 00 00       	push   0x80
c001df88:	57                   	push   edi
c001df89:	6a 00                	push   0x0
c001df8b:	56                   	push   esi
c001df8c:	53                   	push   ebx
c001df8d:	e8 f8 fd ff ff       	call   c001dd8a <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c001df92:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c001df97:	89 e8                	mov    eax,ebp
c001df99:	89 d1                	mov    ecx,edx
c001df9b:	c1 e0 06             	shl    eax,0x6
c001df9e:	01 d8                	add    eax,ebx
c001dfa0:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c001dfa7:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c001dfae:	89 f2                	mov    edx,esi
c001dfb0:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c001dfb6:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c001dfba:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c001dfc0:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001dfc4:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c001dfcb:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c001dfd3:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c001dfda:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c001dfe2:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c001dfe8:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c001dfef:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c001dff5:	8d 54 24 58          	lea    edx,[esp+0x58]
c001dff9:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c001dffd:	83 c4 20             	add    esp,0x20
c001e000:	8a 57 37             	mov    dl,BYTE PTR [edi+0x37]
c001e003:	83 c0 02             	add    eax,0x2
c001e006:	88 90 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],dl
c001e00c:	83 c7 02             	add    edi,0x2
c001e00f:	8a 57 34             	mov    dl,BYTE PTR [edi+0x34]
c001e012:	88 90 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],dl
c001e018:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c001e01c:	75 e2                	jne    c001e000 <IDE::detect()+0x1aa>
c001e01e:	89 e8                	mov    eax,ebp
c001e020:	c1 e0 06             	shl    eax,0x6
c001e023:	01 d8                	add    eax,ebx
c001e025:	8b 90 74 01 00 00    	mov    edx,DWORD PTR [eax+0x174]
c001e02b:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c001e032:	66 c1 ea 09          	shr    dx,0x9
c001e036:	83 e2 01             	and    edx,0x1
c001e039:	84 c9                	test   cl,cl
c001e03b:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c001e041:	75 22                	jne    c001e065 <IDE::detect()+0x20f>
c001e043:	83 b8 7c 01 00 00 00 	cmp    DWORD PTR [eax+0x17c],0x0
c001e04a:	74 46                	je     c001e092 <IDE::detect()+0x23c>
c001e04c:	83 ec 0c             	sub    esp,0xc
c001e04f:	68 7c 01 00 00       	push   0x17c
c001e054:	e8 6a b9 fe ff       	call   c00099c3 <malloc>
c001e059:	89 c7                	mov    edi,eax
c001e05b:	89 04 24             	mov    DWORD PTR [esp],eax
c001e05e:	e8 13 05 00 00       	call   c001e576 <ATA::ATA()>
c001e063:	eb 17                	jmp    c001e07c <IDE::detect()+0x226>
c001e065:	83 ec 0c             	sub    esp,0xc
c001e068:	68 80 01 00 00       	push   0x180
c001e06d:	e8 51 b9 fe ff       	call   c00099c3 <malloc>
c001e072:	89 c7                	mov    edi,eax
c001e074:	89 04 24             	mov    DWORD PTR [esp],eax
c001e077:	e8 82 0b 00 00       	call   c001ebfe <ATAPI::ATAPI()>
c001e07c:	5a                   	pop    edx
c001e07d:	59                   	pop    ecx
c001e07e:	57                   	push   edi
c001e07f:	53                   	push   ebx
c001e080:	e8 81 fe fe ff       	call   c000df06 <Device::addChild(Device*)>
c001e085:	8b 07                	mov    eax,DWORD PTR [edi]
c001e087:	53                   	push   ebx
c001e088:	55                   	push   ebp
c001e089:	6a 00                	push   0x0
c001e08b:	57                   	push   edi
c001e08c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001e08f:	83 c4 20             	add    esp,0x20
c001e092:	45                   	inc    ebp
c001e093:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c001e098:	74 0d                	je     c001e0a7 <IDE::detect()+0x251>
c001e09a:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c001e0a2:	e9 e0 fd ff ff       	jmp    c001de87 <IDE::detect()+0x31>
c001e0a7:	4e                   	dec    esi
c001e0a8:	74 61                	je     c001e10b <IDE::detect()+0x2b5>
c001e0aa:	be 01 00 00 00       	mov    esi,0x1
c001e0af:	e9 cb fd ff ff       	jmp    c001de7f <IDE::detect()+0x29>
c001e0b4:	50                   	push   eax
c001e0b5:	6a 04                	push   0x4
c001e0b7:	56                   	push   esi
c001e0b8:	53                   	push   ebx
c001e0b9:	e8 30 f7 ff ff       	call   c001d7ee <IDE::read(unsigned char, unsigned char)>
c001e0be:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001e0c2:	83 c4 0c             	add    esp,0xc
c001e0c5:	6a 05                	push   0x5
c001e0c7:	56                   	push   esi
c001e0c8:	53                   	push   ebx
c001e0c9:	e8 20 f7 ff ff       	call   c001d7ee <IDE::read(unsigned char, unsigned char)>
c001e0ce:	83 c4 10             	add    esp,0x10
c001e0d1:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c001e0d5:	80 fa 14             	cmp    dl,0x14
c001e0d8:	75 04                	jne    c001e0de <IDE::detect()+0x288>
c001e0da:	3c eb                	cmp    al,0xeb
c001e0dc:	eb 07                	jmp    c001e0e5 <IDE::detect()+0x28f>
c001e0de:	3c 96                	cmp    al,0x96
c001e0e0:	75 b1                	jne    c001e093 <IDE::detect()+0x23d>
c001e0e2:	80 fa 69             	cmp    dl,0x69
c001e0e5:	75 ac                	jne    c001e093 <IDE::detect()+0x23d>
c001e0e7:	68 a1 00 00 00       	push   0xa1
c001e0ec:	6a 07                	push   0x7
c001e0ee:	56                   	push   esi
c001e0ef:	53                   	push   ebx
c001e0f0:	e8 39 f6 ff ff       	call   c001d72e <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e0f5:	c7 04 24 0a 00 00 00 	mov    DWORD PTR [esp],0xa
c001e0fc:	e8 4b a1 ff ff       	call   c001824c <milliTenthSleep(unsigned int)>
c001e101:	83 c4 10             	add    esp,0x10
c001e104:	b1 01                	mov    cl,0x1
c001e106:	e9 6d fe ff ff       	jmp    c001df78 <IDE::detect()+0x122>
c001e10b:	81 c4 1c 02 00 00    	add    esp,0x21c
c001e111:	5b                   	pop    ebx
c001e112:	5e                   	pop    esi
c001e113:	5f                   	pop    edi
c001e114:	5d                   	pop    ebp
c001e115:	c3                   	ret    

c001e116 <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c001e116:	55                   	push   ebp
c001e117:	57                   	push   edi
c001e118:	56                   	push   esi
c001e119:	53                   	push   ebx
c001e11a:	83 ec 1c             	sub    esp,0x1c
c001e11d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001e121:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001e125:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001e129:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c001e12d:	88 c3                	mov    bl,al
c001e12f:	84 c0                	test   al,al
c001e131:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e135:	0f 84 81 00 00 00    	je     c001e1bc <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c001e13b:	83 ec 0c             	sub    esp,0xc
c001e13e:	68 87 50 02 c0       	push   0xc0025087
c001e143:	e8 77 e9 fe ff       	call   c000cabf <Dbg::kprintf(char const*, ...)>
c001e148:	83 c4 10             	add    esp,0x10
c001e14b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e14f:	3c 01                	cmp    al,0x1
c001e151:	74 63                	je     c001e1b6 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa0>
c001e153:	3c 02                	cmp    al,0x2
c001e155:	75 53                	jne    c001e1aa <IDE::printError(unsigned char, unsigned char, unsigned char)+0x94>
c001e157:	d1 e6                	shl    esi,1
c001e159:	09 ee                	or     esi,ebp
c001e15b:	50                   	push   eax
c001e15c:	89 f0                	mov    eax,esi
c001e15e:	6a 01                	push   0x1
c001e160:	0f b6 f0             	movzx  esi,al
c001e163:	c1 e6 06             	shl    esi,0x6
c001e166:	0f b6 84 37 6d 01 00 00 	movzx  eax,BYTE PTR [edi+esi*1+0x16d]
c001e16e:	50                   	push   eax
c001e16f:	57                   	push   edi
c001e170:	e8 79 f6 ff ff       	call   c001d7ee <IDE::read(unsigned char, unsigned char)>
c001e175:	83 c4 10             	add    esp,0x10
c001e178:	a8 01                	test   al,0x1
c001e17a:	74 02                	je     c001e17e <IDE::printError(unsigned char, unsigned char, unsigned char)+0x68>
c001e17c:	b3 07                	mov    bl,0x7
c001e17e:	a8 02                	test   al,0x2
c001e180:	74 02                	je     c001e184 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x6e>
c001e182:	b3 03                	mov    bl,0x3
c001e184:	a8 04                	test   al,0x4
c001e186:	74 02                	je     c001e18a <IDE::printError(unsigned char, unsigned char, unsigned char)+0x74>
c001e188:	b3 14                	mov    bl,0x14
c001e18a:	a8 08                	test   al,0x8
c001e18c:	74 02                	je     c001e190 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x7a>
c001e18e:	b3 03                	mov    bl,0x3
c001e190:	a8 10                	test   al,0x10
c001e192:	74 02                	je     c001e196 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x80>
c001e194:	b3 15                	mov    bl,0x15
c001e196:	a8 20                	test   al,0x20
c001e198:	74 02                	je     c001e19c <IDE::printError(unsigned char, unsigned char, unsigned char)+0x86>
c001e19a:	b3 03                	mov    bl,0x3
c001e19c:	a8 40                	test   al,0x40
c001e19e:	74 02                	je     c001e1a2 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x8c>
c001e1a0:	b3 16                	mov    bl,0x16
c001e1a2:	84 c0                	test   al,al
c001e1a4:	79 16                	jns    c001e1bc <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c001e1a6:	b3 0d                	mov    bl,0xd
c001e1a8:	eb 12                	jmp    c001e1bc <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c001e1aa:	3c 03                	cmp    al,0x3
c001e1ac:	74 0c                	je     c001e1ba <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa4>
c001e1ae:	3c 04                	cmp    al,0x4
c001e1b0:	75 0a                	jne    c001e1bc <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c001e1b2:	b3 08                	mov    bl,0x8
c001e1b4:	eb 06                	jmp    c001e1bc <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c001e1b6:	b3 13                	mov    bl,0x13
c001e1b8:	eb 02                	jmp    c001e1bc <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c001e1ba:	b3 17                	mov    bl,0x17
c001e1bc:	83 c4 1c             	add    esp,0x1c
c001e1bf:	88 d8                	mov    al,bl
c001e1c1:	5b                   	pop    ebx
c001e1c2:	5e                   	pop    esi
c001e1c3:	5f                   	pop    edi
c001e1c4:	5d                   	pop    ebp
c001e1c5:	c3                   	ret    

c001e1c6 <IDE::polling(unsigned char, unsigned int)>:
c001e1c6:	57                   	push   edi
c001e1c7:	56                   	push   esi
c001e1c8:	53                   	push   ebx
c001e1c9:	bb 04 00 00 00       	mov    ebx,0x4
c001e1ce:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c001e1d2:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001e1d7:	52                   	push   edx
c001e1d8:	6a 0c                	push   0xc
c001e1da:	56                   	push   esi
c001e1db:	57                   	push   edi
c001e1dc:	e8 0d f6 ff ff       	call   c001d7ee <IDE::read(unsigned char, unsigned char)>
c001e1e1:	83 c4 10             	add    esp,0x10
c001e1e4:	4b                   	dec    ebx
c001e1e5:	75 f0                	jne    c001e1d7 <IDE::polling(unsigned char, unsigned int)+0x11>
c001e1e7:	bb a0 86 01 00       	mov    ebx,0x186a0
c001e1ec:	50                   	push   eax
c001e1ed:	6a 0c                	push   0xc
c001e1ef:	56                   	push   esi
c001e1f0:	57                   	push   edi
c001e1f1:	e8 f8 f5 ff ff       	call   c001d7ee <IDE::read(unsigned char, unsigned char)>
c001e1f6:	83 c4 10             	add    esp,0x10
c001e1f9:	a8 01                	test   al,0x1
c001e1fb:	75 17                	jne    c001e214 <IDE::polling(unsigned char, unsigned int)+0x4e>
c001e1fd:	a8 20                	test   al,0x20
c001e1ff:	75 0f                	jne    c001e210 <IDE::polling(unsigned char, unsigned int)+0x4a>
c001e201:	4b                   	dec    ebx
c001e202:	74 10                	je     c001e214 <IDE::polling(unsigned char, unsigned int)+0x4e>
c001e204:	84 c0                	test   al,al
c001e206:	78 e4                	js     c001e1ec <IDE::polling(unsigned char, unsigned int)+0x26>
c001e208:	a8 08                	test   al,0x8
c001e20a:	74 e0                	je     c001e1ec <IDE::polling(unsigned char, unsigned int)+0x26>
c001e20c:	31 c0                	xor    eax,eax
c001e20e:	eb 06                	jmp    c001e216 <IDE::polling(unsigned char, unsigned int)+0x50>
c001e210:	b0 01                	mov    al,0x1
c001e212:	eb 02                	jmp    c001e216 <IDE::polling(unsigned char, unsigned int)+0x50>
c001e214:	b0 02                	mov    al,0x2
c001e216:	5b                   	pop    ebx
c001e217:	5e                   	pop    esi
c001e218:	5f                   	pop    edi
c001e219:	c3                   	ret    

c001e21a <SATABus::close(int, int, void*)>:
c001e21a:	31 c0                	xor    eax,eax
c001e21c:	c3                   	ret    
c001e21d:	90                   	nop

c001e21e <SATABus::detect()>:
c001e21e:	c3                   	ret    
c001e21f:	90                   	nop

c001e220 <SATABus::SATABus()>:
c001e220:	83 ec 0c             	sub    esp,0xc
c001e223:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e227:	83 ec 08             	sub    esp,0x8
c001e22a:	68 c0 50 02 c0       	push   0xc00250c0
c001e22f:	50                   	push   eax
c001e230:	e8 7f 00 ff ff       	call   c000e2b4 <HardDiskController::HardDiskController(char const*)>
c001e235:	83 c4 10             	add    esp,0x10
c001e238:	ba 14 51 02 c0       	mov    edx,0xc0025114
c001e23d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e241:	89 10                	mov    DWORD PTR [eax],edx
c001e243:	83 ec 0c             	sub    esp,0xc
c001e246:	6a 50                	push   0x50
c001e248:	e8 97 bc fe ff       	call   c0009ee4 <Phys::allocateContiguousPages(int)>
c001e24d:	83 c4 10             	add    esp,0x10
c001e250:	89 c2                	mov    edx,eax
c001e252:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e256:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001e25c:	83 ec 0c             	sub    esp,0xc
c001e25f:	6a 50                	push   0x50
c001e261:	e8 87 d4 fe ff       	call   c000b6ed <Virt::allocateKernelVirtualPages(int)>
c001e266:	83 c4 10             	add    esp,0x10
c001e269:	89 c2                	mov    edx,eax
c001e26b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e26f:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001e275:	a1 90 65 02 c0       	mov    eax,ds:0xc0026590
c001e27a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001e27e:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c001e284:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001e288:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c001e28e:	83 ec 0c             	sub    esp,0xc
c001e291:	6a 03                	push   0x3
c001e293:	6a 50                	push   0x50
c001e295:	51                   	push   ecx
c001e296:	52                   	push   edx
c001e297:	50                   	push   eax
c001e298:	e8 ed dd fe ff       	call   c000c08a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001e29d:	83 c4 20             	add    esp,0x20
c001e2a0:	90                   	nop
c001e2a1:	83 c4 0c             	add    esp,0xc
c001e2a4:	c3                   	ret    
c001e2a5:	90                   	nop

c001e2a6 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c001e2a6:	83 ec 0c             	sub    esp,0xc
c001e2a9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e2ad:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c001e2b0:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001e2b3:	09 c2                	or     edx,eax
c001e2b5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e2b9:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001e2bf:	8b 08                	mov    ecx,DWORD PTR [eax]
c001e2c1:	31 c0                	xor    eax,eax
c001e2c3:	c1 e9 08             	shr    ecx,0x8
c001e2c6:	83 e1 0f             	and    ecx,0xf
c001e2c9:	39 c8                	cmp    eax,ecx
c001e2cb:	74 0a                	je     c001e2d7 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c001e2cd:	f6 c2 01             	test   dl,0x1
c001e2d0:	74 18                	je     c001e2ea <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x44>
c001e2d2:	d1 ea                	shr    edx,1
c001e2d4:	40                   	inc    eax
c001e2d5:	eb f2                	jmp    c001e2c9 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x23>
c001e2d7:	83 ec 0c             	sub    esp,0xc
c001e2da:	68 e4 50 02 c0       	push   0xc00250e4
c001e2df:	e8 9d 60 ff ff       	call   c0014381 <Krnl::panic(char const*)>
c001e2e4:	83 c4 10             	add    esp,0x10
c001e2e7:	83 c8 ff             	or     eax,0xffffffff
c001e2ea:	83 c4 0c             	add    esp,0xc
c001e2ed:	c3                   	ret    

c001e2ee <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c001e2ee:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001e2f2:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c001e2f5:	89 c2                	mov    edx,eax
c001e2f7:	c1 ea 08             	shr    edx,0x8
c001e2fa:	83 e2 0f             	and    edx,0xf
c001e2fd:	fe ca                	dec    dl
c001e2ff:	75 31                	jne    c001e332 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c001e301:	83 e0 0f             	and    eax,0xf
c001e304:	3c 03                	cmp    al,0x3
c001e306:	75 2a                	jne    c001e332 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c001e308:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c001e30b:	b8 02 00 00 00       	mov    eax,0x2
c001e310:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c001e316:	74 1c                	je     c001e334 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c001e318:	b8 04 00 00 00       	mov    eax,0x4
c001e31d:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c001e323:	74 0f                	je     c001e334 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c001e325:	31 c0                	xor    eax,eax
c001e327:	83 fa 03             	cmp    edx,0x3
c001e32a:	0f 94 c0             	sete   al
c001e32d:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c001e331:	c3                   	ret    
c001e332:	31 c0                	xor    eax,eax
c001e334:	c3                   	ret    
c001e335:	90                   	nop

c001e336 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c001e336:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e33a:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001e33d:	0f ba e2 0f          	bt     edx,0xf
c001e341:	72 f7                	jb     c001e33a <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c001e343:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001e346:	83 ca 10             	or     edx,0x10
c001e349:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001e34c:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001e34f:	83 ca 01             	or     edx,0x1
c001e352:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001e355:	c3                   	ret    

c001e356 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c001e356:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e35a:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001e35d:	83 e2 fe             	and    edx,0xfffffffe
c001e360:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001e363:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001e366:	83 e2 ef             	and    edx,0xffffffef
c001e369:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001e36c:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001e36f:	0f ba e2 0e          	bt     edx,0xe
c001e373:	72 f7                	jb     c001e36c <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c001e375:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001e378:	0f ba e2 0f          	bt     edx,0xf
c001e37c:	72 ee                	jb     c001e36c <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c001e37e:	c3                   	ret    
c001e37f:	90                   	nop

c001e380 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c001e380:	55                   	push   ebp
c001e381:	57                   	push   edi
c001e382:	56                   	push   esi
c001e383:	53                   	push   ebx
c001e384:	83 ec 1c             	sub    esp,0x1c
c001e387:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001e38b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001e38f:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001e393:	53                   	push   ebx
c001e394:	89 fd                	mov    ebp,edi
c001e396:	56                   	push   esi
c001e397:	c1 e5 0a             	shl    ebp,0xa
c001e39a:	e8 b7 ff ff ff       	call   c001e356 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c001e39f:	83 ec 0c             	sub    esp,0xc
c001e3a2:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c001e3a8:	01 e8                	add    eax,ebp
c001e3aa:	89 03                	mov    DWORD PTR [ebx],eax
c001e3ac:	8b 03                	mov    eax,DWORD PTR [ebx]
c001e3ae:	68 00 04 00 00       	push   0x400
c001e3b3:	6a 00                	push   0x0
c001e3b5:	50                   	push   eax
c001e3b6:	e8 c9 22 fe ff       	call   c0000684 <memset>
c001e3bb:	8b 86 5c 01 00 00    	mov    eax,DWORD PTR [esi+0x15c]
c001e3c1:	89 fa                	mov    edx,edi
c001e3c3:	01 e8                	add    eax,ebp
c001e3c5:	c1 e7 0d             	shl    edi,0xd
c001e3c8:	89 03                	mov    DWORD PTR [ebx],eax
c001e3ca:	c1 e2 08             	shl    edx,0x8
c001e3cd:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001e3d4:	81 c2 00 80 00 00    	add    edx,0x8000
c001e3da:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001e3de:	89 d0                	mov    eax,edx
c001e3e0:	83 c4 1c             	add    esp,0x1c
c001e3e3:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c001e3e9:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001e3ec:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001e3ef:	68 00 01 00 00       	push   0x100
c001e3f4:	6a 00                	push   0x0
c001e3f6:	50                   	push   eax
c001e3f7:	e8 88 22 fe ff       	call   c0000684 <memset>
c001e3fc:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001e400:	8d 87 00 a0 00 00    	lea    eax,[edi+0xa000]
c001e406:	03 96 5c 01 00 00    	add    edx,DWORD PTR [esi+0x15c]
c001e40c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001e410:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c001e413:	83 c4 10             	add    esp,0x10
c001e416:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001e41d:	31 ff                	xor    edi,edi
c001e41f:	03 ae 58 01 00 00    	add    ebp,DWORD PTR [esi+0x158]
c001e425:	66 c7 45 02 08 00    	mov    WORD PTR [ebp+0x2],0x8
c001e42b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e42f:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c001e435:	83 c5 20             	add    ebp,0x20
c001e438:	01 f8                	add    eax,edi
c001e43a:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001e43d:	52                   	push   edx
c001e43e:	68 00 01 00 00       	push   0x100
c001e443:	6a 00                	push   0x0
c001e445:	50                   	push   eax
c001e446:	e8 39 22 fe ff       	call   c0000684 <memset>
c001e44b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001e44f:	83 c4 10             	add    esp,0x10
c001e452:	03 86 5c 01 00 00    	add    eax,DWORD PTR [esi+0x15c]
c001e458:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c001e45f:	01 f8                	add    eax,edi
c001e461:	81 c7 00 01 00 00    	add    edi,0x100
c001e467:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001e46a:	81 ff 00 20 00 00    	cmp    edi,0x2000
c001e470:	75 b3                	jne    c001e425 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa5>
c001e472:	89 5c 24 34          	mov    DWORD PTR [esp+0x34],ebx
c001e476:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c001e47a:	83 c4 1c             	add    esp,0x1c
c001e47d:	5b                   	pop    ebx
c001e47e:	5e                   	pop    esi
c001e47f:	5f                   	pop    edi
c001e480:	5d                   	pop    ebp
c001e481:	e9 b0 fe ff ff       	jmp    c001e336 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>

c001e486 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c001e486:	55                   	push   ebp
c001e487:	57                   	push   edi
c001e488:	56                   	push   esi
c001e489:	53                   	push   ebx
c001e48a:	31 db                	xor    ebx,ebx
c001e48c:	83 ec 0c             	sub    esp,0xc
c001e48f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001e493:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001e497:	8b 78 0c             	mov    edi,DWORD PTR [eax+0xc]
c001e49a:	f7 c7 01 00 00 00    	test   edi,0x1
c001e4a0:	74 7a                	je     c001e51c <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c001e4a2:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001e4a6:	89 d8                	mov    eax,ebx
c001e4a8:	c1 e0 07             	shl    eax,0x7
c001e4ab:	8d ac 01 00 01 00 00 	lea    ebp,[ecx+eax*1+0x100]
c001e4b2:	55                   	push   ebp
c001e4b3:	56                   	push   esi
c001e4b4:	e8 35 fe ff ff       	call   c001e2ee <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c001e4b9:	5a                   	pop    edx
c001e4ba:	83 f8 01             	cmp    eax,0x1
c001e4bd:	59                   	pop    ecx
c001e4be:	75 21                	jne    c001e4e1 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x5b>
c001e4c0:	50                   	push   eax
c001e4c1:	53                   	push   ebx
c001e4c2:	55                   	push   ebp
c001e4c3:	56                   	push   esi
c001e4c4:	e8 b7 fe ff ff       	call   c001e380 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001e4c9:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c001e4d0:	e8 ee b4 fe ff       	call   c00099c3 <malloc>
c001e4d5:	89 c5                	mov    ebp,eax
c001e4d7:	89 04 24             	mov    DWORD PTR [esp],eax
c001e4da:	e8 7f 0d 00 00       	call   c001f25e <SATA::SATA()>
c001e4df:	eb 24                	jmp    c001e505 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x7f>
c001e4e1:	83 f8 04             	cmp    eax,0x4
c001e4e4:	75 36                	jne    c001e51c <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c001e4e6:	51                   	push   ecx
c001e4e7:	53                   	push   ebx
c001e4e8:	55                   	push   ebp
c001e4e9:	56                   	push   esi
c001e4ea:	e8 91 fe ff ff       	call   c001e380 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001e4ef:	c7 04 24 80 01 00 00 	mov    DWORD PTR [esp],0x180
c001e4f6:	e8 c8 b4 fe ff       	call   c00099c3 <malloc>
c001e4fb:	89 c5                	mov    ebp,eax
c001e4fd:	89 04 24             	mov    DWORD PTR [esp],eax
c001e500:	e8 cf 10 00 00       	call   c001f5d4 <SATAPI::SATAPI()>
c001e505:	58                   	pop    eax
c001e506:	5a                   	pop    edx
c001e507:	55                   	push   ebp
c001e508:	56                   	push   esi
c001e509:	e8 f8 f9 fe ff       	call   c000df06 <Device::addChild(Device*)>
c001e50e:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001e511:	56                   	push   esi
c001e512:	6a 00                	push   0x0
c001e514:	53                   	push   ebx
c001e515:	55                   	push   ebp
c001e516:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001e519:	83 c4 20             	add    esp,0x20
c001e51c:	d1 ef                	shr    edi,1
c001e51e:	43                   	inc    ebx
c001e51f:	83 fb 20             	cmp    ebx,0x20
c001e522:	0f 85 72 ff ff ff    	jne    c001e49a <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14>
c001e528:	83 c4 0c             	add    esp,0xc
c001e52b:	5b                   	pop    ebx
c001e52c:	5e                   	pop    esi
c001e52d:	5f                   	pop    edi
c001e52e:	5d                   	pop    ebp
c001e52f:	c3                   	ret    

c001e530 <SATABus::open(int, int, void*)>:
c001e530:	83 ec 14             	sub    esp,0x14
c001e533:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001e537:	8b 90 34 01 00 00    	mov    edx,DWORD PTR [eax+0x134]
c001e53d:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c001e543:	52                   	push   edx
c001e544:	50                   	push   eax
c001e545:	e8 3c ff ff ff       	call   c001e486 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c001e54a:	31 c0                	xor    eax,eax
c001e54c:	83 c4 1c             	add    esp,0x1c
c001e54f:	c3                   	ret    

c001e550 <ATA::close(int, int, void*)>:
c001e550:	83 ec 0c             	sub    esp,0xc
c001e553:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e557:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001e55d:	85 c0                	test   eax,eax
c001e55f:	74 0c                	je     c001e56d <ATA::close(int, int, void*)+0x1d>
c001e561:	83 ec 0c             	sub    esp,0xc
c001e564:	8b 10                	mov    edx,DWORD PTR [eax]
c001e566:	50                   	push   eax
c001e567:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001e56a:	83 c4 10             	add    esp,0x10
c001e56d:	31 c0                	xor    eax,eax
c001e56f:	83 c4 0c             	add    esp,0xc
c001e572:	c3                   	ret    
c001e573:	90                   	nop

c001e574 <ATA::powerSaving(PowerSavingLevel)>:
c001e574:	c3                   	ret    
c001e575:	90                   	nop

c001e576 <ATA::ATA()>:
c001e576:	83 ec 0c             	sub    esp,0xc
c001e579:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e57d:	83 ec 04             	sub    esp,0x4
c001e580:	68 00 02 00 00       	push   0x200
c001e585:	68 09 52 02 c0       	push   0xc0025209
c001e58a:	50                   	push   eax
c001e58b:	e8 ae fd fe ff       	call   c000e33e <PhysicalDisk::PhysicalDisk(char const*, int)>
c001e590:	83 c4 10             	add    esp,0x10
c001e593:	ba 8c 51 02 c0       	mov    edx,0xc002518c
c001e598:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e59c:	89 10                	mov    DWORD PTR [eax],edx
c001e59e:	90                   	nop
c001e59f:	83 c4 0c             	add    esp,0xc
c001e5a2:	c3                   	ret    
c001e5a3:	90                   	nop

c001e5a4 <ATA::flush(bool)>:
c001e5a4:	53                   	push   ebx
c001e5a5:	83 ec 08             	sub    esp,0x8
c001e5a8:	80 7c 24 14 01       	cmp    BYTE PTR [esp+0x14],0x1
c001e5ad:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001e5b1:	19 c0                	sbb    eax,eax
c001e5b3:	83 e0 fd             	and    eax,0xfffffffd
c001e5b6:	05 ea 00 00 00       	add    eax,0xea
c001e5bb:	50                   	push   eax
c001e5bc:	6a 07                	push   0x7
c001e5be:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001e5c5:	50                   	push   eax
c001e5c6:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001e5cc:	e8 5d f1 ff ff       	call   c001d72e <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e5d1:	83 c4 0c             	add    esp,0xc
c001e5d4:	6a 00                	push   0x0
c001e5d6:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001e5dd:	50                   	push   eax
c001e5de:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001e5e4:	e8 dd fb ff ff       	call   c001e1c6 <IDE::polling(unsigned char, unsigned int)>
c001e5e9:	83 c4 18             	add    esp,0x18
c001e5ec:	5b                   	pop    ebx
c001e5ed:	c3                   	ret    

c001e5ee <ATA::readyForCommand()>:
c001e5ee:	56                   	push   esi
c001e5ef:	53                   	push   ebx
c001e5f0:	53                   	push   ebx
c001e5f1:	31 db                	xor    ebx,ebx
c001e5f3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001e5f7:	51                   	push   ecx
c001e5f8:	6a 0c                	push   0xc
c001e5fa:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001e601:	50                   	push   eax
c001e602:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001e608:	e8 e1 f1 ff ff       	call   c001d7ee <IDE::read(unsigned char, unsigned char)>
c001e60d:	83 c4 10             	add    esp,0x10
c001e610:	a8 88                	test   al,0x88
c001e612:	74 1f                	je     c001e633 <ATA::readyForCommand()+0x45>
c001e614:	43                   	inc    ebx
c001e615:	83 fb 63             	cmp    ebx,0x63
c001e618:	7e dd                	jle    c001e5f7 <ATA::readyForCommand()+0x9>
c001e61a:	83 ec 0c             	sub    esp,0xc
c001e61d:	6a 0a                	push   0xa
c001e61f:	e8 28 9c ff ff       	call   c001824c <milliTenthSleep(unsigned int)>
c001e624:	83 c4 10             	add    esp,0x10
c001e627:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c001e62d:	75 c8                	jne    c001e5f7 <ATA::readyForCommand()+0x9>
c001e62f:	31 c0                	xor    eax,eax
c001e631:	eb 02                	jmp    c001e635 <ATA::readyForCommand()+0x47>
c001e633:	b0 01                	mov    al,0x1
c001e635:	5a                   	pop    edx
c001e636:	5b                   	pop    ebx
c001e637:	5e                   	pop    esi
c001e638:	c3                   	ret    
c001e639:	90                   	nop

c001e63a <ATA::access(unsigned long long, int, void*, bool)>:
c001e63a:	55                   	push   ebp
c001e63b:	57                   	push   edi
c001e63c:	56                   	push   esi
c001e63d:	53                   	push   ebx
c001e63e:	83 ec 38             	sub    esp,0x38
c001e641:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c001e645:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c001e649:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c001e64d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001e651:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c001e655:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001e659:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c001e65d:	68 38 51 02 c0       	push   0xc0025138
c001e662:	e8 58 e4 fe ff       	call   c000cabf <Dbg::kprintf(char const*, ...)>
c001e667:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001e66d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001e671:	83 c4 10             	add    esp,0x10
c001e674:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001e67a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001e67e:	c1 e0 06             	shl    eax,0x6
c001e681:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c001e689:	74 5d                	je     c001e6e8 <ATA::access(unsigned long long, int, void*, bool)+0xae>
c001e68b:	89 fa                	mov    edx,edi
c001e68d:	89 f0                	mov    eax,esi
c001e68f:	0f ac d0 1c          	shrd   eax,edx,0x1c
c001e693:	c1 ea 1c             	shr    edx,0x1c
c001e696:	89 d1                	mov    ecx,edx
c001e698:	09 c1                	or     ecx,eax
c001e69a:	74 25                	je     c001e6c1 <ATA::access(unsigned long long, int, void*, bool)+0x87>
c001e69c:	31 ed                	xor    ebp,ebp
c001e69e:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c001e6a5:	89 fa                	mov    edx,edi
c001e6a7:	89 f0                	mov    eax,esi
c001e6a9:	0f ad d0             	shrd   eax,edx,cl
c001e6ac:	d3 ea                	shr    edx,cl
c001e6ae:	f6 c1 20             	test   cl,0x20
c001e6b1:	74 02                	je     c001e6b5 <ATA::access(unsigned long long, int, void*, bool)+0x7b>
c001e6b3:	89 d0                	mov    eax,edx
c001e6b5:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c001e6b9:	45                   	inc    ebp
c001e6ba:	83 fd 06             	cmp    ebp,0x6
c001e6bd:	75 df                	jne    c001e69e <ATA::access(unsigned long long, int, void*, bool)+0x64>
c001e6bf:	eb 76                	jmp    c001e737 <ATA::access(unsigned long long, int, void*, bool)+0xfd>
c001e6c1:	89 f0                	mov    eax,esi
c001e6c3:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c001e6c8:	89 fa                	mov    edx,edi
c001e6ca:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001e6d1:	0f ac d0 10          	shrd   eax,edx,0x10
c001e6d5:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001e6da:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001e6de:	c1 ee 18             	shr    esi,0x18
c001e6e1:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c001e6e6:	eb 56                	jmp    c001e73e <ATA::access(unsigned long long, int, void*, bool)+0x104>
c001e6e8:	6a 00                	push   0x0
c001e6ea:	6a 3f                	push   0x3f
c001e6ec:	57                   	push   edi
c001e6ed:	56                   	push   esi
c001e6ee:	e8 91 29 00 00       	call   c0021084 <__umoddi3>
c001e6f3:	83 c4 10             	add    esp,0x10
c001e6f6:	40                   	inc    eax
c001e6f7:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c001e6fb:	6a 00                	push   0x0
c001e6fd:	68 f0 03 00 00       	push   0x3f0
c001e702:	57                   	push   edi
c001e703:	56                   	push   esi
c001e704:	e8 7b 28 00 00       	call   c0020f84 <__udivdi3>
c001e709:	83 c4 10             	add    esp,0x10
c001e70c:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c001e711:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001e718:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001e71d:	6a 00                	push   0x0
c001e71f:	6a 3f                	push   0x3f
c001e721:	57                   	push   edi
c001e722:	56                   	push   esi
c001e723:	e8 5c 28 00 00       	call   c0020f84 <__udivdi3>
c001e728:	83 c4 10             	add    esp,0x10
c001e72b:	89 c6                	mov    esi,eax
c001e72d:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c001e732:	83 e6 0f             	and    esi,0xf
c001e735:	eb 07                	jmp    c001e73e <ATA::access(unsigned long long, int, void*, bool)+0x104>
c001e737:	31 f6                	xor    esi,esi
c001e739:	c6 44 24 0e 02       	mov    BYTE PTR [esp+0xe],0x2
c001e73e:	bf 01 00 00 00       	mov    edi,0x1
c001e743:	50                   	push   eax
c001e744:	6a 00                	push   0x0
c001e746:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001e74d:	50                   	push   eax
c001e74e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001e752:	e8 df f1 ff ff       	call   c001d936 <IDE::enableIRQs(unsigned char, bool)>
c001e757:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001e75a:	e8 8f fe ff ff       	call   c001e5ee <ATA::readyForCommand()>
c001e75f:	83 c4 10             	add    esp,0x10
c001e762:	84 c0                	test   al,al
c001e764:	0f 84 bc 02 00 00    	je     c001ea26 <ATA::access(unsigned long long, int, void*, bool)+0x3ec>
c001e76a:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001e770:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001e776:	c1 e0 04             	shl    eax,0x4
c001e779:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c001e780:	09 c6                	or     esi,eax
c001e782:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001e787:	75 05                	jne    c001e78e <ATA::access(unsigned long long, int, void*, bool)+0x154>
c001e789:	83 ce a0             	or     esi,0xffffffa0
c001e78c:	eb 03                	jmp    c001e791 <ATA::access(unsigned long long, int, void*, bool)+0x157>
c001e78e:	83 ce e0             	or     esi,0xffffffe0
c001e791:	89 f0                	mov    eax,esi
c001e793:	0f b6 f0             	movzx  esi,al
c001e796:	56                   	push   esi
c001e797:	6a 06                	push   0x6
c001e799:	51                   	push   ecx
c001e79a:	52                   	push   edx
c001e79b:	e8 8e ef ff ff       	call   c001d72e <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e7a0:	83 c4 10             	add    esp,0x10
c001e7a3:	6a 00                	push   0x0
c001e7a5:	6a 01                	push   0x1
c001e7a7:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001e7ae:	50                   	push   eax
c001e7af:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001e7b5:	e8 74 ef ff ff       	call   c001d72e <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e7ba:	83 c4 10             	add    esp,0x10
c001e7bd:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c001e7c2:	75 6e                	jne    c001e832 <ATA::access(unsigned long long, int, void*, bool)+0x1f8>
c001e7c4:	6a 00                	push   0x0
c001e7c6:	6a 08                	push   0x8
c001e7c8:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001e7cf:	50                   	push   eax
c001e7d0:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001e7d6:	e8 53 ef ff ff       	call   c001d72e <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e7db:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c001e7e0:	50                   	push   eax
c001e7e1:	6a 09                	push   0x9
c001e7e3:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001e7ea:	50                   	push   eax
c001e7eb:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001e7f1:	e8 38 ef ff ff       	call   c001d72e <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e7f6:	83 c4 20             	add    esp,0x20
c001e7f9:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c001e7fe:	50                   	push   eax
c001e7ff:	6a 0a                	push   0xa
c001e801:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001e808:	50                   	push   eax
c001e809:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001e80f:	e8 1a ef ff ff       	call   c001d72e <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e814:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c001e819:	50                   	push   eax
c001e81a:	6a 0b                	push   0xb
c001e81c:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001e823:	50                   	push   eax
c001e824:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001e82a:	e8 ff ee ff ff       	call   c001d72e <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e82f:	83 c4 20             	add    esp,0x20
c001e832:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c001e837:	50                   	push   eax
c001e838:	6a 02                	push   0x2
c001e83a:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001e841:	50                   	push   eax
c001e842:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001e848:	e8 e1 ee ff ff       	call   c001d72e <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e84d:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c001e852:	50                   	push   eax
c001e853:	6a 03                	push   0x3
c001e855:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001e85c:	50                   	push   eax
c001e85d:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001e863:	e8 c6 ee ff ff       	call   c001d72e <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e868:	83 c4 20             	add    esp,0x20
c001e86b:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c001e870:	50                   	push   eax
c001e871:	6a 04                	push   0x4
c001e873:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001e87a:	50                   	push   eax
c001e87b:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001e881:	e8 a8 ee ff ff       	call   c001d72e <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e886:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001e88b:	50                   	push   eax
c001e88c:	6a 05                	push   0x5
c001e88e:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001e895:	50                   	push   eax
c001e896:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001e89c:	e8 8d ee ff ff       	call   c001d72e <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e8a1:	83 c4 20             	add    esp,0x20
c001e8a4:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c001e8a9:	0f 94 c0             	sete   al
c001e8ac:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001e8b1:	74 09                	je     c001e8bc <ATA::access(unsigned long long, int, void*, bool)+0x282>
c001e8b3:	8d 04 85 30 00 00 00 	lea    eax,[eax*4+0x30]
c001e8ba:	eb 07                	jmp    c001e8c3 <ATA::access(unsigned long long, int, void*, bool)+0x289>
c001e8bc:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c001e8c3:	0f b6 c0             	movzx  eax,al
c001e8c6:	50                   	push   eax
c001e8c7:	6a 07                	push   0x7
c001e8c9:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001e8d0:	50                   	push   eax
c001e8d1:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001e8d7:	e8 52 ee ff ff       	call   c001d72e <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e8dc:	c7 04 24 45 51 02 c0 	mov    DWORD PTR [esp],0xc0025145
c001e8e3:	e8 d7 e1 fe ff       	call   c000cabf <Dbg::kprintf(char const*, ...)>
c001e8e8:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c001e8ec:	83 c4 10             	add    esp,0x10
c001e8ef:	85 f6                	test   esi,esi
c001e8f1:	0f 84 f7 00 00 00    	je     c001e9ee <ATA::access(unsigned long long, int, void*, bool)+0x3b4>
c001e8f7:	83 ec 0c             	sub    esp,0xc
c001e8fa:	68 48 51 02 c0       	push   0xc0025148
c001e8ff:	e8 bb e1 fe ff       	call   c000cabf <Dbg::kprintf(char const*, ...)>
c001e904:	83 c4 0c             	add    esp,0xc
c001e907:	6a 01                	push   0x1
c001e909:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001e910:	50                   	push   eax
c001e911:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001e917:	e8 aa f8 ff ff       	call   c001e1c6 <IDE::polling(unsigned char, unsigned int)>
c001e91c:	c7 04 24 4b 51 02 c0 	mov    DWORD PTR [esp],0xc002514b
c001e923:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c001e927:	e8 93 e1 fe ff       	call   c000cabf <Dbg::kprintf(char const*, ...)>
c001e92c:	83 c4 10             	add    esp,0x10
c001e92f:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c001e933:	84 c0                	test   al,al
c001e935:	74 2b                	je     c001e962 <ATA::access(unsigned long long, int, void*, bool)+0x328>
c001e937:	0f b6 f8             	movzx  edi,al
c001e93a:	57                   	push   edi
c001e93b:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c001e942:	50                   	push   eax
c001e943:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001e94a:	50                   	push   eax
c001e94b:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001e951:	e8 c0 f7 ff ff       	call   c001e116 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001e956:	c7 04 24 4e 51 02 c0 	mov    DWORD PTR [esp],0xc002514e
c001e95d:	e9 bc 00 00 00       	jmp    c001ea1e <ATA::access(unsigned long long, int, void*, bool)+0x3e4>
c001e962:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001e967:	74 50                	je     c001e9b9 <ATA::access(unsigned long long, int, void*, bool)+0x37f>
c001e969:	83 ec 0c             	sub    esp,0xc
c001e96c:	31 ed                	xor    ebp,ebp
c001e96e:	68 59 51 02 c0       	push   0xc0025159
c001e973:	e8 47 e1 fe ff       	call   c000cabf <Dbg::kprintf(char const*, ...)>
c001e978:	83 c4 10             	add    esp,0x10
c001e97b:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001e97f:	66 8b 3c 68          	mov    di,WORD PTR [eax+ebp*2]
c001e983:	50                   	push   eax
c001e984:	50                   	push   eax
c001e985:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001e98c:	50                   	push   eax
c001e98d:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001e993:	e8 84 ed ff ff       	call   c001d71c <IDE::getBase(unsigned char)>
c001e998:	89 c2                	mov    edx,eax
c001e99a:	89 f8                	mov    eax,edi
c001e99c:	66 ef                	out    dx,ax
c001e99e:	45                   	inc    ebp
c001e99f:	83 c4 10             	add    esp,0x10
c001e9a2:	81 fd 00 01 00 00    	cmp    ebp,0x100
c001e9a8:	75 d1                	jne    c001e97b <ATA::access(unsigned long long, int, void*, bool)+0x341>
c001e9aa:	83 ec 0c             	sub    esp,0xc
c001e9ad:	68 5c 51 02 c0       	push   0xc002515c
c001e9b2:	e8 08 e1 fe ff       	call   c000cabf <Dbg::kprintf(char const*, ...)>
c001e9b7:	eb 24                	jmp    c001e9dd <ATA::access(unsigned long long, int, void*, bool)+0x3a3>
c001e9b9:	51                   	push   ecx
c001e9ba:	51                   	push   ecx
c001e9bb:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001e9c2:	50                   	push   eax
c001e9c3:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001e9c9:	e8 4e ed ff ff       	call   c001d71c <IDE::getBase(unsigned char)>
c001e9ce:	b9 00 01 00 00       	mov    ecx,0x100
c001e9d3:	89 c2                	mov    edx,eax
c001e9d5:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c001e9d9:	fc                   	cld    
c001e9da:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c001e9dd:	83 c4 10             	add    esp,0x10
c001e9e0:	4e                   	dec    esi
c001e9e1:	81 44 24 50 00 02 00 00 	add    DWORD PTR [esp+0x50],0x200
c001e9e9:	e9 01 ff ff ff       	jmp    c001e8ef <ATA::access(unsigned long long, int, void*, bool)+0x2b5>
c001e9ee:	31 ff                	xor    edi,edi
c001e9f0:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001e9f5:	74 2f                	je     c001ea26 <ATA::access(unsigned long long, int, void*, bool)+0x3ec>
c001e9f7:	83 ec 0c             	sub    esp,0xc
c001e9fa:	68 5f 51 02 c0       	push   0xc002515f
c001e9ff:	e8 bb e0 fe ff       	call   c000cabf <Dbg::kprintf(char const*, ...)>
c001ea04:	58                   	pop    eax
c001ea05:	31 c0                	xor    eax,eax
c001ea07:	5a                   	pop    edx
c001ea08:	80 7c 24 16 02       	cmp    BYTE PTR [esp+0x16],0x2
c001ea0d:	0f 94 c0             	sete   al
c001ea10:	50                   	push   eax
c001ea11:	53                   	push   ebx
c001ea12:	e8 8d fb ff ff       	call   c001e5a4 <ATA::flush(bool)>
c001ea17:	c7 04 24 62 51 02 c0 	mov    DWORD PTR [esp],0xc0025162
c001ea1e:	e8 9c e0 fe ff       	call   c000cabf <Dbg::kprintf(char const*, ...)>
c001ea23:	83 c4 10             	add    esp,0x10
c001ea26:	83 c4 2c             	add    esp,0x2c
c001ea29:	89 f8                	mov    eax,edi
c001ea2b:	5b                   	pop    ebx
c001ea2c:	5e                   	pop    esi
c001ea2d:	5f                   	pop    edi
c001ea2e:	5d                   	pop    ebp
c001ea2f:	c3                   	ret    

c001ea30 <ATA::read(unsigned long long, int, void*)>:
c001ea30:	57                   	push   edi
c001ea31:	b8 04 00 00 00       	mov    eax,0x4
c001ea36:	56                   	push   esi
c001ea37:	53                   	push   ebx
c001ea38:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001ea3c:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001ea40:	8d 7a ff             	lea    edi,[edx-0x1]
c001ea43:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001ea47:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001ea4b:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001ea51:	77 25                	ja     c001ea78 <ATA::read(unsigned long long, int, void*)+0x48>
c001ea53:	b8 06 00 00 00       	mov    eax,0x6
c001ea58:	85 f6                	test   esi,esi
c001ea5a:	74 1c                	je     c001ea78 <ATA::read(unsigned long long, int, void*)+0x48>
c001ea5c:	50                   	push   eax
c001ea5d:	50                   	push   eax
c001ea5e:	6a 00                	push   0x0
c001ea60:	56                   	push   esi
c001ea61:	52                   	push   edx
c001ea62:	53                   	push   ebx
c001ea63:	51                   	push   ecx
c001ea64:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ea68:	e8 cd fb ff ff       	call   c001e63a <ATA::access(unsigned long long, int, void*, bool)>
c001ea6d:	83 c4 20             	add    esp,0x20
c001ea70:	85 c0                	test   eax,eax
c001ea72:	0f 95 c0             	setne  al
c001ea75:	0f b6 c0             	movzx  eax,al
c001ea78:	5b                   	pop    ebx
c001ea79:	5e                   	pop    esi
c001ea7a:	5f                   	pop    edi
c001ea7b:	c3                   	ret    

c001ea7c <ATA::write(unsigned long long, int, void*)>:
c001ea7c:	55                   	push   ebp
c001ea7d:	57                   	push   edi
c001ea7e:	56                   	push   esi
c001ea7f:	53                   	push   ebx
c001ea80:	83 ec 18             	sub    esp,0x18
c001ea83:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001ea87:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001ea8b:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001ea8f:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c001ea93:	68 65 51 02 c0       	push   0xc0025165
c001ea98:	e8 22 e0 fe ff       	call   c000cabf <Dbg::kprintf(char const*, ...)>
c001ea9d:	8d 53 ff             	lea    edx,[ebx-0x1]
c001eaa0:	83 c4 10             	add    esp,0x10
c001eaa3:	b8 04 00 00 00       	mov    eax,0x4
c001eaa8:	81 fa fe 00 00 00    	cmp    edx,0xfe
c001eaae:	77 25                	ja     c001ead5 <ATA::write(unsigned long long, int, void*)+0x59>
c001eab0:	b8 06 00 00 00       	mov    eax,0x6
c001eab5:	85 f6                	test   esi,esi
c001eab7:	74 1c                	je     c001ead5 <ATA::write(unsigned long long, int, void*)+0x59>
c001eab9:	50                   	push   eax
c001eaba:	50                   	push   eax
c001eabb:	6a 01                	push   0x1
c001eabd:	56                   	push   esi
c001eabe:	53                   	push   ebx
c001eabf:	55                   	push   ebp
c001eac0:	57                   	push   edi
c001eac1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001eac5:	e8 70 fb ff ff       	call   c001e63a <ATA::access(unsigned long long, int, void*, bool)>
c001eaca:	83 c4 20             	add    esp,0x20
c001eacd:	85 c0                	test   eax,eax
c001eacf:	0f 95 c0             	setne  al
c001ead2:	0f b6 c0             	movzx  eax,al
c001ead5:	83 c4 0c             	add    esp,0xc
c001ead8:	5b                   	pop    ebx
c001ead9:	5e                   	pop    esi
c001eada:	5f                   	pop    edi
c001eadb:	5d                   	pop    ebp
c001eadc:	c3                   	ret    
c001eadd:	90                   	nop

c001eade <ATA::detectCHS()>:
c001eade:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001eae2:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c001eae8:	c1 e0 06             	shl    eax,0x6
c001eaeb:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c001eaf1:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c001eafb:	c7 44 24 04 71 51 02 c0 	mov    DWORD PTR [esp+0x4],0xc0025171
c001eb03:	e9 79 58 ff ff       	jmp    c0014381 <Krnl::panic(char const*)>

c001eb08 <ATA::open(int, int, void*)>:
c001eb08:	53                   	push   ebx
c001eb09:	83 ec 08             	sub    esp,0x8
c001eb0c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001eb10:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001eb14:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001eb18:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001eb1e:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001eb24:	c1 e0 06             	shl    eax,0x6
c001eb27:	01 d0                	add    eax,edx
c001eb29:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c001eb30:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c001eb36:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c001eb3d:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001eb47:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c001eb4d:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c001eb54:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c001eb5b:	75 0c                	jne    c001eb69 <ATA::open(int, int, void*)+0x61>
c001eb5d:	83 ec 0c             	sub    esp,0xc
c001eb60:	53                   	push   ebx
c001eb61:	e8 78 ff ff ff       	call   c001eade <ATA::detectCHS()>
c001eb66:	83 c4 10             	add    esp,0x10
c001eb69:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001eb6f:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001eb75:	c1 e0 06             	shl    eax,0x6
c001eb78:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c001eb7f:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001eb89:	d1 e8                	shr    eax,1
c001eb8b:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c001eb91:	6a 04                	push   0x4
c001eb93:	6a 0c                	push   0xc
c001eb95:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001eb9c:	50                   	push   eax
c001eb9d:	52                   	push   edx
c001eb9e:	e8 8b eb ff ff       	call   c001d72e <IDE::write(unsigned char, unsigned char, unsigned char)>
c001eba3:	90                   	nop
c001eba4:	90                   	nop
c001eba5:	6a 00                	push   0x0
c001eba7:	6a 0c                	push   0xc
c001eba9:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ebb0:	50                   	push   eax
c001ebb1:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ebb7:	e8 72 eb ff ff       	call   c001d72e <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ebbc:	83 c4 14             	add    esp,0x14
c001ebbf:	53                   	push   ebx
c001ebc0:	e8 e1 f7 fe ff       	call   c000e3a6 <PhysicalDisk::startCache()>
c001ebc5:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001ebc8:	e8 15 18 ff ff       	call   c00103e2 <createPartitionsForDisk(PhysicalDisk*)>
c001ebcd:	31 c0                	xor    eax,eax
c001ebcf:	83 c4 18             	add    esp,0x18
c001ebd2:	5b                   	pop    ebx
c001ebd3:	c3                   	ret    

c001ebd4 <ATAPI::write(unsigned long long, int, void*)>:
c001ebd4:	b8 03 00 00 00       	mov    eax,0x3
c001ebd9:	c3                   	ret    

c001ebda <ATAPI::close(int, int, void*)>:
c001ebda:	83 ec 0c             	sub    esp,0xc
c001ebdd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ebe1:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001ebe7:	85 c0                	test   eax,eax
c001ebe9:	74 0c                	je     c001ebf7 <ATAPI::close(int, int, void*)+0x1d>
c001ebeb:	83 ec 0c             	sub    esp,0xc
c001ebee:	8b 10                	mov    edx,DWORD PTR [eax]
c001ebf0:	50                   	push   eax
c001ebf1:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001ebf4:	83 c4 10             	add    esp,0x10
c001ebf7:	31 c0                	xor    eax,eax
c001ebf9:	83 c4 0c             	add    esp,0xc
c001ebfc:	c3                   	ret    
c001ebfd:	90                   	nop

c001ebfe <ATAPI::ATAPI()>:
c001ebfe:	83 ec 0c             	sub    esp,0xc
c001ec01:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ec05:	83 ec 04             	sub    esp,0x4
c001ec08:	68 00 08 00 00       	push   0x800
c001ec0d:	68 a9 52 02 c0       	push   0xc00252a9
c001ec12:	50                   	push   eax
c001ec13:	e8 26 f7 fe ff       	call   c000e33e <PhysicalDisk::PhysicalDisk(char const*, int)>
c001ec18:	83 c4 10             	add    esp,0x10
c001ec1b:	ba c4 51 02 c0       	mov    edx,0xc00251c4
c001ec20:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ec24:	89 10                	mov    DWORD PTR [eax],edx
c001ec26:	90                   	nop
c001ec27:	83 c4 0c             	add    esp,0xc
c001ec2a:	c3                   	ret    
c001ec2b:	90                   	nop

c001ec2c <ATAPI::readyForCommand()>:
c001ec2c:	56                   	push   esi
c001ec2d:	53                   	push   ebx
c001ec2e:	53                   	push   ebx
c001ec2f:	31 db                	xor    ebx,ebx
c001ec31:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001ec35:	51                   	push   ecx
c001ec36:	6a 0c                	push   0xc
c001ec38:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001ec3f:	50                   	push   eax
c001ec40:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001ec46:	e8 a3 eb ff ff       	call   c001d7ee <IDE::read(unsigned char, unsigned char)>
c001ec4b:	83 c4 10             	add    esp,0x10
c001ec4e:	a8 88                	test   al,0x88
c001ec50:	74 1f                	je     c001ec71 <ATAPI::readyForCommand()+0x45>
c001ec52:	43                   	inc    ebx
c001ec53:	83 fb 63             	cmp    ebx,0x63
c001ec56:	7e dd                	jle    c001ec35 <ATAPI::readyForCommand()+0x9>
c001ec58:	83 ec 0c             	sub    esp,0xc
c001ec5b:	6a 0a                	push   0xa
c001ec5d:	e8 ea 95 ff ff       	call   c001824c <milliTenthSleep(unsigned int)>
c001ec62:	83 c4 10             	add    esp,0x10
c001ec65:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c001ec6b:	75 c8                	jne    c001ec35 <ATAPI::readyForCommand()+0x9>
c001ec6d:	31 c0                	xor    eax,eax
c001ec6f:	eb 02                	jmp    c001ec73 <ATAPI::readyForCommand()+0x47>
c001ec71:	b0 01                	mov    al,0x1
c001ec73:	5a                   	pop    edx
c001ec74:	5b                   	pop    ebx
c001ec75:	5e                   	pop    esi
c001ec76:	c3                   	ret    
c001ec77:	90                   	nop

c001ec78 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c001ec78:	55                   	push   ebp
c001ec79:	57                   	push   edi
c001ec7a:	56                   	push   esi
c001ec7b:	53                   	push   ebx
c001ec7c:	83 ec 20             	sub    esp,0x20
c001ec7f:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001ec83:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c001ec87:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001ec8b:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001ec8f:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001ec93:	6a 01                	push   0x1
c001ec95:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001ec9c:	50                   	push   eax
c001ec9d:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001eca3:	e8 8e ec ff ff       	call   c001d936 <IDE::enableIRQs(unsigned char, bool)>
c001eca8:	5e                   	pop    esi
c001eca9:	58                   	pop    eax
c001ecaa:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001ecb1:	50                   	push   eax
c001ecb2:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001ecb8:	e8 4b ea ff ff       	call   c001d708 <IDE::prepareInterrupt(unsigned char)>
c001ecbd:	89 3c 24             	mov    DWORD PTR [esp],edi
c001ecc0:	e8 67 ff ff ff       	call   c001ec2c <ATAPI::readyForCommand()>
c001ecc5:	83 c4 10             	add    esp,0x10
c001ecc8:	84 c0                	test   al,al
c001ecca:	75 0a                	jne    c001ecd6 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c001eccc:	bb 01 00 00 00       	mov    ebx,0x1
c001ecd1:	e9 57 02 00 00       	jmp    c001ef2d <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001ecd6:	8a 87 74 01 00 00    	mov    al,BYTE PTR [edi+0x174]
c001ecdc:	c1 e0 04             	shl    eax,0x4
c001ecdf:	0f b6 c0             	movzx  eax,al
c001ece2:	50                   	push   eax
c001ece3:	6a 06                	push   0x6
c001ece5:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001ecec:	50                   	push   eax
c001eced:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001ecf3:	e8 36 ea ff ff       	call   c001d72e <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ecf8:	6a 00                	push   0x0
c001ecfa:	6a 01                	push   0x1
c001ecfc:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001ed03:	50                   	push   eax
c001ed04:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001ed0a:	e8 1f ea ff ff       	call   c001d72e <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ed0f:	83 c4 20             	add    esp,0x20
c001ed12:	0f b6 c3             	movzx  eax,bl
c001ed15:	0f b6 df             	movzx  ebx,bh
c001ed18:	50                   	push   eax
c001ed19:	6a 04                	push   0x4
c001ed1b:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001ed22:	50                   	push   eax
c001ed23:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001ed29:	e8 00 ea ff ff       	call   c001d72e <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ed2e:	53                   	push   ebx
c001ed2f:	6a 05                	push   0x5
c001ed31:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001ed38:	50                   	push   eax
c001ed39:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001ed3f:	e8 ea e9 ff ff       	call   c001d72e <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ed44:	83 c4 20             	add    esp,0x20
c001ed47:	68 a0 00 00 00       	push   0xa0
c001ed4c:	6a 07                	push   0x7
c001ed4e:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001ed55:	50                   	push   eax
c001ed56:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001ed5c:	e8 cd e9 ff ff       	call   c001d72e <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ed61:	83 c4 0c             	add    esp,0xc
c001ed64:	6a 01                	push   0x1
c001ed66:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001ed6d:	50                   	push   eax
c001ed6e:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001ed74:	e8 4d f4 ff ff       	call   c001e1c6 <IDE::polling(unsigned char, unsigned int)>
c001ed79:	83 c4 10             	add    esp,0x10
c001ed7c:	8b 97 70 01 00 00    	mov    edx,DWORD PTR [edi+0x170]
c001ed82:	84 c0                	test   al,al
c001ed84:	74 23                	je     c001eda9 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c001ed86:	0f b6 d8             	movzx  ebx,al
c001ed89:	0f b6 d2             	movzx  edx,dl
c001ed8c:	53                   	push   ebx
c001ed8d:	0f b6 87 74 01 00 00 	movzx  eax,BYTE PTR [edi+0x174]
c001ed94:	50                   	push   eax
c001ed95:	52                   	push   edx
c001ed96:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001ed9c:	e8 75 f3 ff ff       	call   c001e116 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001eda1:	83 c4 10             	add    esp,0x10
c001eda4:	e9 84 01 00 00       	jmp    c001ef2d <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001eda9:	0f b6 d2             	movzx  edx,dl
c001edac:	53                   	push   ebx
c001edad:	53                   	push   ebx
c001edae:	52                   	push   edx
c001edaf:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001edb5:	e8 62 e9 ff ff       	call   c001d71c <IDE::getBase(unsigned char)>
c001edba:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001edbe:	b9 06 00 00 00       	mov    ecx,0x6
c001edc3:	89 c2                	mov    edx,eax
c001edc5:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c001edc8:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c001edcc:	83 c4 10             	add    esp,0x10
c001edcf:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001edd5:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001eddc:	85 db                	test   ebx,ebx
c001edde:	0f 84 ec 00 00 00    	je     c001eed0 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x258>
c001ede4:	51                   	push   ecx
c001ede5:	51                   	push   ecx
c001ede6:	52                   	push   edx
c001ede7:	50                   	push   eax
c001ede8:	e8 af ea ff ff       	call   c001d89c <IDE::waitInterrupt(unsigned char)>
c001eded:	83 c4 10             	add    esp,0x10
c001edf0:	84 c0                	test   al,al
c001edf2:	0f 84 d4 fe ff ff    	je     c001eccc <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c001edf8:	56                   	push   esi
c001edf9:	56                   	push   esi
c001edfa:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001ee01:	50                   	push   eax
c001ee02:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001ee08:	e8 fb e8 ff ff       	call   c001d708 <IDE::prepareInterrupt(unsigned char)>
c001ee0d:	83 c4 0c             	add    esp,0xc
c001ee10:	6a 04                	push   0x4
c001ee12:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001ee19:	50                   	push   eax
c001ee1a:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001ee20:	e8 c9 e9 ff ff       	call   c001d7ee <IDE::read(unsigned char, unsigned char)>
c001ee25:	83 c4 0c             	add    esp,0xc
c001ee28:	89 c6                	mov    esi,eax
c001ee2a:	6a 05                	push   0x5
c001ee2c:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001ee33:	50                   	push   eax
c001ee34:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001ee3a:	e8 af e9 ff ff       	call   c001d7ee <IDE::read(unsigned char, unsigned char)>
c001ee3f:	89 f1                	mov    ecx,esi
c001ee41:	0f b6 c0             	movzx  eax,al
c001ee44:	0f b6 f1             	movzx  esi,cl
c001ee47:	c1 e0 08             	shl    eax,0x8
c001ee4a:	09 c6                	or     esi,eax
c001ee4c:	d1 fe                	sar    esi,1
c001ee4e:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c001ee52:	83 c4 10             	add    esp,0x10
c001ee55:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c001ee5a:	74 41                	je     c001ee9d <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x225>
c001ee5c:	31 c9                	xor    ecx,ecx
c001ee5e:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001ee64:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001ee6b:	3b 4c 24 04          	cmp    ecx,DWORD PTR [esp+0x4]
c001ee6f:	75 0a                	jne    c001ee7b <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x203>
c001ee71:	01 c9                	add    ecx,ecx
c001ee73:	01 cd                	add    ebp,ecx
c001ee75:	4b                   	dec    ebx
c001ee76:	e9 54 ff ff ff       	jmp    c001edcf <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x157>
c001ee7b:	66 8b 74 4d 00       	mov    si,WORD PTR [ebp+ecx*2+0x0]
c001ee80:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001ee84:	51                   	push   ecx
c001ee85:	51                   	push   ecx
c001ee86:	52                   	push   edx
c001ee87:	50                   	push   eax
c001ee88:	e8 8f e8 ff ff       	call   c001d71c <IDE::getBase(unsigned char)>
c001ee8d:	89 c2                	mov    edx,eax
c001ee8f:	89 f0                	mov    eax,esi
c001ee91:	66 ef                	out    dx,ax
c001ee93:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001ee97:	83 c4 10             	add    esp,0x10
c001ee9a:	41                   	inc    ecx
c001ee9b:	eb c1                	jmp    c001ee5e <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1e6>
c001ee9d:	31 f6                	xor    esi,esi
c001ee9f:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001eea5:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001eeac:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c001eeb0:	75 06                	jne    c001eeb8 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x240>
c001eeb2:	01 f6                	add    esi,esi
c001eeb4:	01 f5                	add    ebp,esi
c001eeb6:	eb bd                	jmp    c001ee75 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1fd>
c001eeb8:	51                   	push   ecx
c001eeb9:	51                   	push   ecx
c001eeba:	52                   	push   edx
c001eebb:	50                   	push   eax
c001eebc:	e8 5b e8 ff ff       	call   c001d71c <IDE::getBase(unsigned char)>
c001eec1:	89 c2                	mov    edx,eax
c001eec3:	66 ed                	in     ax,dx
c001eec5:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c001eeca:	83 c4 10             	add    esp,0x10
c001eecd:	46                   	inc    esi
c001eece:	eb cf                	jmp    c001ee9f <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x227>
c001eed0:	51                   	push   ecx
c001eed1:	51                   	push   ecx
c001eed2:	52                   	push   edx
c001eed3:	50                   	push   eax
c001eed4:	e8 c3 e9 ff ff       	call   c001d89c <IDE::waitInterrupt(unsigned char)>
c001eed9:	83 c4 10             	add    esp,0x10
c001eedc:	84 c0                	test   al,al
c001eede:	0f 84 e8 fd ff ff    	je     c001eccc <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c001eee4:	bb a0 86 01 00       	mov    ebx,0x186a0
c001eee9:	52                   	push   edx
c001eeea:	52                   	push   edx
c001eeeb:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001eef2:	50                   	push   eax
c001eef3:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001eef9:	e8 0a e8 ff ff       	call   c001d708 <IDE::prepareInterrupt(unsigned char)>
c001eefe:	83 c4 10             	add    esp,0x10
c001ef01:	50                   	push   eax
c001ef02:	50                   	push   eax
c001ef03:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001ef0a:	50                   	push   eax
c001ef0b:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001ef11:	e8 06 e8 ff ff       	call   c001d71c <IDE::getBase(unsigned char)>
c001ef16:	8d 50 07             	lea    edx,[eax+0x7]
c001ef19:	ec                   	in     al,dx
c001ef1a:	83 c4 10             	add    esp,0x10
c001ef1d:	a8 88                	test   al,0x88
c001ef1f:	74 0a                	je     c001ef2b <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b3>
c001ef21:	4b                   	dec    ebx
c001ef22:	75 dd                	jne    c001ef01 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x289>
c001ef24:	bb 02 00 00 00       	mov    ebx,0x2
c001ef29:	eb 02                	jmp    c001ef2d <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001ef2b:	31 db                	xor    ebx,ebx
c001ef2d:	83 c4 1c             	add    esp,0x1c
c001ef30:	89 d8                	mov    eax,ebx
c001ef32:	5b                   	pop    ebx
c001ef33:	5e                   	pop    esi
c001ef34:	5f                   	pop    edi
c001ef35:	5d                   	pop    ebp
c001ef36:	c3                   	ret    
c001ef37:	90                   	nop

c001ef38 <ATAPI::diskRemoved()>:
c001ef38:	83 ec 18             	sub    esp,0x18
c001ef3b:	68 b5 52 02 c0       	push   0xc00252b5
c001ef40:	e8 7a db fe ff       	call   c000cabf <Dbg::kprintf(char const*, ...)>
c001ef45:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ef49:	c6 80 7c 01 00 00 00 	mov    BYTE PTR [eax+0x17c],0x0
c001ef50:	83 c4 1c             	add    esp,0x1c
c001ef53:	c3                   	ret    

c001ef54 <ATAPI::eject()>:
c001ef54:	57                   	push   edi
c001ef55:	b9 03 00 00 00       	mov    ecx,0x3
c001ef5a:	53                   	push   ebx
c001ef5b:	83 ec 14             	sub    esp,0x14
c001ef5e:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001ef62:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001ef66:	fc                   	cld    
c001ef67:	31 c0                	xor    eax,eax
c001ef69:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001ef6b:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001ef70:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001ef75:	50                   	push   eax
c001ef76:	50                   	push   eax
c001ef77:	6a 00                	push   0x0
c001ef79:	6a 00                	push   0x0
c001ef7b:	6a 00                	push   0x0
c001ef7d:	6a 02                	push   0x2
c001ef7f:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001ef83:	50                   	push   eax
c001ef84:	53                   	push   ebx
c001ef85:	e8 ee fc ff ff       	call   c001ec78 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001ef8a:	83 c4 14             	add    esp,0x14
c001ef8d:	53                   	push   ebx
c001ef8e:	e8 a5 ff ff ff       	call   c001ef38 <ATAPI::diskRemoved()>
c001ef93:	83 c4 24             	add    esp,0x24
c001ef96:	31 c0                	xor    eax,eax
c001ef98:	5b                   	pop    ebx
c001ef99:	5f                   	pop    edi
c001ef9a:	c3                   	ret    
c001ef9b:	90                   	nop

c001ef9c <ATAPI::diskInserted()>:
c001ef9c:	53                   	push   ebx
c001ef9d:	83 ec 14             	sub    esp,0x14
c001efa0:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001efa4:	68 cc 52 02 c0       	push   0xc00252cc
c001efa9:	e8 11 db fe ff       	call   c000cabf <Dbg::kprintf(char const*, ...)>
c001efae:	c6 83 7c 01 00 00 01 	mov    BYTE PTR [ebx+0x17c],0x1
c001efb5:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001efb8:	e8 e9 f3 fe ff       	call   c000e3a6 <PhysicalDisk::startCache()>
c001efbd:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c001efc1:	83 c4 18             	add    esp,0x18
c001efc4:	5b                   	pop    ebx
c001efc5:	e9 18 14 ff ff       	jmp    c00103e2 <createPartitionsForDisk(PhysicalDisk*)>

c001efca <ATAPI::detectMedia()>:
c001efca:	56                   	push   esi
c001efcb:	53                   	push   ebx
c001efcc:	83 ec 28             	sub    esp,0x28
c001efcf:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001efd3:	6a 0c                	push   0xc
c001efd5:	6a 00                	push   0x0
c001efd7:	8d 74 24 0e          	lea    esi,[esp+0xe]
c001efdb:	56                   	push   esi
c001efdc:	e8 a3 16 fe ff       	call   c0000684 <memset>
c001efe1:	58                   	pop    eax
c001efe2:	5a                   	pop    edx
c001efe3:	6a 00                	push   0x0
c001efe5:	6a 00                	push   0x0
c001efe7:	6a 00                	push   0x0
c001efe9:	6a 00                	push   0x0
c001efeb:	56                   	push   esi
c001efec:	53                   	push   ebx
c001efed:	e8 86 fc ff ff       	call   c001ec78 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001eff2:	83 c4 1c             	add    esp,0x1c
c001eff5:	6a 0c                	push   0xc
c001eff7:	6a 00                	push   0x0
c001eff9:	56                   	push   esi
c001effa:	e8 85 16 fe ff       	call   c0000684 <memset>
c001efff:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c001f004:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c001f009:	59                   	pop    ecx
c001f00a:	58                   	pop    eax
c001f00b:	6a 01                	push   0x1
c001f00d:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c001f011:	50                   	push   eax
c001f012:	6a 00                	push   0x0
c001f014:	6a 12                	push   0x12
c001f016:	56                   	push   esi
c001f017:	53                   	push   ebx
c001f018:	e8 5b fc ff ff       	call   c001ec78 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001f01d:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c001f021:	83 c4 20             	add    esp,0x20
c001f024:	83 e0 7f             	and    eax,0x7f
c001f027:	3c 70                	cmp    al,0x70
c001f029:	74 15                	je     c001f040 <ATAPI::detectMedia()+0x76>
c001f02b:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001f032:	75 0c                	jne    c001f040 <ATAPI::detectMedia()+0x76>
c001f034:	83 ec 0c             	sub    esp,0xc
c001f037:	53                   	push   ebx
c001f038:	e8 5f ff ff ff       	call   c001ef9c <ATAPI::diskInserted()>
c001f03d:	83 c4 10             	add    esp,0x10
c001f040:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001f044:	83 e0 0f             	and    eax,0xf
c001f047:	3c 02                	cmp    al,0x2
c001f049:	75 1b                	jne    c001f066 <ATAPI::detectMedia()+0x9c>
c001f04b:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c001f050:	75 2d                	jne    c001f07f <ATAPI::detectMedia()+0xb5>
c001f052:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001f059:	74 24                	je     c001f07f <ATAPI::detectMedia()+0xb5>
c001f05b:	83 ec 0c             	sub    esp,0xc
c001f05e:	53                   	push   ebx
c001f05f:	e8 d4 fe ff ff       	call   c001ef38 <ATAPI::diskRemoved()>
c001f064:	eb 16                	jmp    c001f07c <ATAPI::detectMedia()+0xb2>
c001f066:	84 c0                	test   al,al
c001f068:	75 15                	jne    c001f07f <ATAPI::detectMedia()+0xb5>
c001f06a:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001f071:	75 0c                	jne    c001f07f <ATAPI::detectMedia()+0xb5>
c001f073:	83 ec 0c             	sub    esp,0xc
c001f076:	53                   	push   ebx
c001f077:	e8 20 ff ff ff       	call   c001ef9c <ATAPI::diskInserted()>
c001f07c:	83 c4 10             	add    esp,0x10
c001f07f:	83 c4 24             	add    esp,0x24
c001f082:	5b                   	pop    ebx
c001f083:	5e                   	pop    esi
c001f084:	c3                   	ret    
c001f085:	90                   	nop

c001f086 <ATAPI::open(int, int, void*)>:
c001f086:	53                   	push   ebx
c001f087:	83 ec 08             	sub    esp,0x8
c001f08a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001f08e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001f092:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001f096:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001f09c:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001f0a2:	c1 e0 06             	shl    eax,0x6
c001f0a5:	01 d0                	add    eax,edx
c001f0a7:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c001f0ae:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c001f0b4:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c001f0bb:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001f0c5:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001f0cb:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c001f0d2:	6a 04                	push   0x4
c001f0d4:	6a 0c                	push   0xc
c001f0d6:	51                   	push   ecx
c001f0d7:	52                   	push   edx
c001f0d8:	e8 51 e6 ff ff       	call   c001d72e <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f0dd:	90                   	nop
c001f0de:	90                   	nop
c001f0df:	6a 00                	push   0x0
c001f0e1:	6a 0c                	push   0xc
c001f0e3:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f0ea:	50                   	push   eax
c001f0eb:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f0f1:	e8 38 e6 ff ff       	call   c001d72e <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f0f6:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001f0fd:	83 c4 14             	add    esp,0x14
c001f100:	53                   	push   ebx
c001f101:	e8 c4 fe ff ff       	call   c001efca <ATAPI::detectMedia()>
c001f106:	31 c0                	xor    eax,eax
c001f108:	83 c4 18             	add    esp,0x18
c001f10b:	5b                   	pop    ebx
c001f10c:	c3                   	ret    
c001f10d:	90                   	nop

c001f10e <ATAPI::read(unsigned long long, int, void*)>:
c001f10e:	55                   	push   ebp
c001f10f:	57                   	push   edi
c001f110:	56                   	push   esi
c001f111:	53                   	push   ebx
c001f112:	83 ec 1c             	sub    esp,0x1c
c001f115:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001f119:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001f11d:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c001f121:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c001f128:	74 41                	je     c001f16b <ATAPI::read(unsigned long long, int, void*)+0x5d>
c001f12a:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001f12e:	b9 03 00 00 00       	mov    ecx,0x3
c001f133:	fc                   	cld    
c001f134:	31 c0                	xor    eax,eax
c001f136:	86 fb                	xchg   bl,bh
c001f138:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001f13a:	c1 c3 10             	rol    ebx,0x10
c001f13d:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c001f142:	89 e8                	mov    eax,ebp
c001f144:	86 fb                	xchg   bl,bh
c001f146:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c001f14a:	89 5c 24 06          	mov    DWORD PTR [esp+0x6],ebx
c001f14e:	50                   	push   eax
c001f14f:	50                   	push   eax
c001f150:	55                   	push   ebp
c001f151:	c1 e5 0b             	shl    ebp,0xb
c001f154:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001f158:	6a 00                	push   0x0
c001f15a:	55                   	push   ebp
c001f15b:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001f15f:	50                   	push   eax
c001f160:	56                   	push   esi
c001f161:	e8 12 fb ff ff       	call   c001ec78 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001f166:	83 c4 20             	add    esp,0x20
c001f169:	eb 1a                	jmp    c001f185 <ATAPI::read(unsigned long long, int, void*)+0x77>
c001f16b:	83 ec 0c             	sub    esp,0xc
c001f16e:	56                   	push   esi
c001f16f:	e8 56 fe ff ff       	call   c001efca <ATAPI::detectMedia()>
c001f174:	83 c4 10             	add    esp,0x10
c001f177:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c001f17e:	75 aa                	jne    c001f12a <ATAPI::read(unsigned long long, int, void*)+0x1c>
c001f180:	b8 02 00 00 00       	mov    eax,0x2
c001f185:	83 c4 1c             	add    esp,0x1c
c001f188:	5b                   	pop    ebx
c001f189:	5e                   	pop    esi
c001f18a:	5f                   	pop    edi
c001f18b:	5d                   	pop    ebp
c001f18c:	c3                   	ret    
c001f18d:	90                   	nop

c001f18e <SATA::close(int, int, void*)>:
c001f18e:	83 ec 0c             	sub    esp,0xc
c001f191:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f195:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001f19b:	85 c0                	test   eax,eax
c001f19d:	74 0c                	je     c001f1ab <SATA::close(int, int, void*)+0x1d>
c001f19f:	83 ec 0c             	sub    esp,0xc
c001f1a2:	8b 10                	mov    edx,DWORD PTR [eax]
c001f1a4:	50                   	push   eax
c001f1a5:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001f1a8:	83 c4 10             	add    esp,0x10
c001f1ab:	31 c0                	xor    eax,eax
c001f1ad:	83 c4 0c             	add    esp,0xc
c001f1b0:	c3                   	ret    
c001f1b1:	90                   	nop

c001f1b2 <SATA::powerSaving(PowerSavingLevel)>:
c001f1b2:	c3                   	ret    
c001f1b3:	90                   	nop

c001f1b4 <SATA::open(int, int, void*)>:
c001f1b4:	56                   	push   esi
c001f1b5:	53                   	push   ebx
c001f1b6:	50                   	push   eax
c001f1b7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001f1bb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001f1bf:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001f1c9:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c001f1cf:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c001f1d9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001f1dd:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001f1e7:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001f1ed:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c001f1f4:	e8 00 ac fe ff       	call   c0009df9 <Phys::allocatePage()>
c001f1f9:	89 c6                	mov    esi,eax
c001f1fb:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001f201:	81 c6 00 10 00 00    	add    esi,0x1000
c001f207:	e8 ed ab fe ff       	call   c0009df9 <Phys::allocatePage()>
c001f20c:	39 c6                	cmp    esi,eax
c001f20e:	74 10                	je     c001f220 <SATA::open(int, int, void*)+0x6c>
c001f210:	83 ec 0c             	sub    esp,0xc
c001f213:	68 f4 51 02 c0       	push   0xc00251f4
c001f218:	e8 64 51 ff ff       	call   c0014381 <Krnl::panic(char const*)>
c001f21d:	83 c4 10             	add    esp,0x10
c001f220:	83 ec 0c             	sub    esp,0xc
c001f223:	6a 02                	push   0x2
c001f225:	e8 c3 c4 fe ff       	call   c000b6ed <Virt::allocateKernelVirtualPages(int)>
c001f22a:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001f230:	6a 03                	push   0x3
c001f232:	50                   	push   eax
c001f233:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c001f239:	ff 35 90 65 02 c0    	push   DWORD PTR ds:0xc0026590
c001f23f:	e8 50 cb fe ff       	call   c000bd94 <VAS::mapPage(unsigned long, unsigned long, int)>
c001f244:	83 c4 14             	add    esp,0x14
c001f247:	53                   	push   ebx
c001f248:	e8 59 f1 fe ff       	call   c000e3a6 <PhysicalDisk::startCache()>
c001f24d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001f250:	e8 8d 11 ff ff       	call   c00103e2 <createPartitionsForDisk(PhysicalDisk*)>
c001f255:	83 c4 14             	add    esp,0x14
c001f258:	31 c0                	xor    eax,eax
c001f25a:	5b                   	pop    ebx
c001f25b:	5e                   	pop    esi
c001f25c:	c3                   	ret    
c001f25d:	90                   	nop

c001f25e <SATA::SATA()>:
c001f25e:	83 ec 0c             	sub    esp,0xc
c001f261:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f265:	83 ec 04             	sub    esp,0x4
c001f268:	68 00 02 00 00       	push   0x200
c001f26d:	68 08 52 02 c0       	push   0xc0025208
c001f272:	50                   	push   eax
c001f273:	e8 c6 f0 fe ff       	call   c000e33e <PhysicalDisk::PhysicalDisk(char const*, int)>
c001f278:	83 c4 10             	add    esp,0x10
c001f27b:	ba 78 52 02 c0       	mov    edx,0xc0025278
c001f280:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f284:	89 10                	mov    DWORD PTR [eax],edx
c001f286:	90                   	nop
c001f287:	83 c4 0c             	add    esp,0xc
c001f28a:	c3                   	ret    
c001f28b:	90                   	nop

c001f28c <SATA::access(unsigned long long, int, void*, bool)>:
c001f28c:	55                   	push   ebp
c001f28d:	57                   	push   edi
c001f28e:	56                   	push   esi
c001f28f:	53                   	push   ebx
c001f290:	83 ec 2c             	sub    esp,0x2c
c001f293:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001f297:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001f29b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001f29f:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001f2a3:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001f2a7:	83 7c 24 4c 10       	cmp    DWORD PTR [esp+0x4c],0x10
c001f2ac:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f2b0:	7e 10                	jle    c001f2c2 <SATA::access(unsigned long long, int, void*, bool)+0x36>
c001f2b2:	83 ec 0c             	sub    esp,0xc
c001f2b5:	68 18 52 02 c0       	push   0xc0025218
c001f2ba:	e8 c2 50 ff ff       	call   c0014381 <Krnl::panic(char const*)>
c001f2bf:	83 c4 10             	add    esp,0x10
c001f2c2:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001f2c8:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c001f2ce:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001f2d4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001f2d8:	89 d0                	mov    eax,edx
c001f2da:	c1 e0 07             	shl    eax,0x7
c001f2dd:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001f2e1:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c001f2eb:	51                   	push   ecx
c001f2ec:	8d 42 02             	lea    eax,[edx+0x2]
c001f2ef:	51                   	push   ecx
c001f2f0:	c1 e0 07             	shl    eax,0x7
c001f2f3:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c001f2f7:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001f2fb:	50                   	push   eax
c001f2fc:	ff b3 70 01 00 00    	push   DWORD PTR [ebx+0x170]
c001f302:	e8 9f ef ff ff       	call   c001e2a6 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c001f307:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001f30b:	83 c4 10             	add    esp,0x10
c001f30e:	b8 01 00 00 00       	mov    eax,0x1
c001f313:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c001f318:	0f 84 cb 01 00 00    	je     c001f4e9 <SATA::access(unsigned long long, int, void*, bool)+0x25d>
c001f31e:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001f322:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001f326:	c1 e0 09             	shl    eax,0x9
c001f329:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c001f32e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001f332:	74 0e                	je     c001f342 <SATA::access(unsigned long long, int, void*, bool)+0xb6>
c001f334:	8b bb 78 01 00 00    	mov    edi,DWORD PTR [ebx+0x178]
c001f33a:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c001f33e:	89 c1                	mov    ecx,eax
c001f340:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001f342:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001f346:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c001f34c:	8d 42 02             	lea    eax,[edx+0x2]
c001f34f:	c1 e0 07             	shl    eax,0x7
c001f352:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001f356:	8b 00                	mov    eax,DWORD PTR [eax]
c001f358:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c001f35e:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c001f364:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001f368:	c1 e1 05             	shl    ecx,0x5
c001f36b:	01 c8                	add    eax,ecx
c001f36d:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c001f371:	83 e1 01             	and    ecx,0x1
c001f374:	89 ce                	mov    esi,ecx
c001f376:	8a 08                	mov    cl,BYTE PTR [eax]
c001f378:	c1 e6 06             	shl    esi,0x6
c001f37b:	83 e1 bf             	and    ecx,0xffffffbf
c001f37e:	09 f1                	or     ecx,esi
c001f380:	88 08                	mov    BYTE PTR [eax],cl
c001f382:	8b 08                	mov    ecx,DWORD PTR [eax]
c001f384:	81 e1 e0 ff 00 00    	and    ecx,0xffe0
c001f38a:	81 c9 05 00 01 00    	or     ecx,0x10005
c001f390:	89 08                	mov    DWORD PTR [eax],ecx
c001f392:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c001f398:	8b b1 58 01 00 00    	mov    esi,DWORD PTR [ecx+0x158]
c001f39e:	2b b1 5c 01 00 00    	sub    esi,DWORD PTR [ecx+0x15c]
c001f3a4:	03 70 08             	add    esi,DWORD PTR [eax+0x8]
c001f3a7:	50                   	push   eax
c001f3a8:	68 90 00 00 00       	push   0x90
c001f3ad:	6a 00                	push   0x0
c001f3af:	56                   	push   esi
c001f3b0:	e8 cf 12 fe ff       	call   c0000684 <memset>
c001f3b5:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001f3bb:	66 89 6e 04          	mov    WORD PTR [esi+0x4],bp
c001f3bf:	89 86 80 00 00 00    	mov    DWORD PTR [esi+0x80],eax
c001f3c5:	c6 46 07 40          	mov    BYTE PTR [esi+0x7],0x40
c001f3c9:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001f3cd:	83 c4 10             	add    esp,0x10
c001f3d0:	48                   	dec    eax
c001f3d1:	25 ff ff 3f 00       	and    eax,0x3fffff
c001f3d6:	89 c1                	mov    ecx,eax
c001f3d8:	8b 86 8c 00 00 00    	mov    eax,DWORD PTR [esi+0x8c]
c001f3de:	25 00 00 c0 ff       	and    eax,0xffc00000
c001f3e3:	09 c8                	or     eax,ecx
c001f3e5:	89 86 8c 00 00 00    	mov    DWORD PTR [esi+0x8c],eax
c001f3eb:	66 8b 06             	mov    ax,WORD PTR [esi]
c001f3ee:	80 8e 8f 00 00 00 80 	or     BYTE PTR [esi+0x8f],0x80
c001f3f5:	66 25 00 7f          	and    ax,0x7f00
c001f3f9:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001f3fd:	66 0d 27 80          	or     ax,0x8027
c001f401:	80 7c 24 0c 01       	cmp    BYTE PTR [esp+0xc],0x1
c001f406:	66 89 06             	mov    WORD PTR [esi],ax
c001f409:	19 c0                	sbb    eax,eax
c001f40b:	83 e0 f0             	and    eax,0xfffffff0
c001f40e:	83 c0 35             	add    eax,0x35
c001f411:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c001f414:	89 e8                	mov    eax,ebp
c001f416:	c1 e8 10             	shr    eax,0x10
c001f419:	88 46 06             	mov    BYTE PTR [esi+0x6],al
c001f41c:	89 e8                	mov    eax,ebp
c001f41e:	c1 e8 18             	shr    eax,0x18
c001f421:	88 46 08             	mov    BYTE PTR [esi+0x8],al
c001f424:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c001f428:	88 46 09             	mov    BYTE PTR [esi+0x9],al
c001f42b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001f42f:	88 66 0a             	mov    BYTE PTR [esi+0xa],ah
c001f432:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001f436:	66 89 46 0c          	mov    WORD PTR [esi+0xc],ax
c001f43a:	89 d6                	mov    esi,edx
c001f43c:	31 c0                	xor    eax,eax
c001f43e:	c1 e6 07             	shl    esi,0x7
c001f441:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001f445:	8b 8e 20 01 00 00    	mov    ecx,DWORD PTR [esi+0x120]
c001f44b:	80 e1 88             	and    cl,0x88
c001f44e:	74 0a                	je     c001f45a <SATA::access(unsigned long long, int, void*, bool)+0x1ce>
c001f450:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001f455:	74 0a                	je     c001f461 <SATA::access(unsigned long long, int, void*, bool)+0x1d5>
c001f457:	40                   	inc    eax
c001f458:	eb eb                	jmp    c001f445 <SATA::access(unsigned long long, int, void*, bool)+0x1b9>
c001f45a:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001f45f:	75 0a                	jne    c001f46b <SATA::access(unsigned long long, int, void*, bool)+0x1df>
c001f461:	83 ec 0c             	sub    esp,0xc
c001f464:	68 51 52 02 c0       	push   0xc0025251
c001f469:	eb 56                	jmp    c001f4c1 <SATA::access(unsigned long long, int, void*, bool)+0x235>
c001f46b:	b8 01 00 00 00       	mov    eax,0x1
c001f470:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c001f474:	c1 e2 07             	shl    edx,0x7
c001f477:	d3 e0                	shl    eax,cl
c001f479:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c001f47d:	89 86 38 01 00 00    	mov    DWORD PTR [esi+0x138],eax
c001f483:	8b 8a 38 01 00 00    	mov    ecx,DWORD PTR [edx+0x138]
c001f489:	85 c8                	test   eax,ecx
c001f48b:	74 20                	je     c001f4ad <SATA::access(unsigned long long, int, void*, bool)+0x221>
c001f48d:	8b 8a 10 01 00 00    	mov    ecx,DWORD PTR [edx+0x110]
c001f493:	0f ba e1 1e          	bt     ecx,0x1e
c001f497:	73 ea                	jae    c001f483 <SATA::access(unsigned long long, int, void*, bool)+0x1f7>
c001f499:	83 ec 0c             	sub    esp,0xc
c001f49c:	68 5f 52 02 c0       	push   0xc002525f
c001f4a1:	e8 db 4e ff ff       	call   c0014381 <Krnl::panic(char const*)>
c001f4a6:	83 c4 10             	add    esp,0x10
c001f4a9:	31 c0                	xor    eax,eax
c001f4ab:	eb 3c                	jmp    c001f4e9 <SATA::access(unsigned long long, int, void*, bool)+0x25d>
c001f4ad:	8b 82 10 01 00 00    	mov    eax,DWORD PTR [edx+0x110]
c001f4b3:	0f ba e0 1e          	bt     eax,0x1e
c001f4b7:	73 17                	jae    c001f4d0 <SATA::access(unsigned long long, int, void*, bool)+0x244>
c001f4b9:	83 ec 0c             	sub    esp,0xc
c001f4bc:	68 5f 52 02 c0       	push   0xc002525f
c001f4c1:	e8 bb 4e ff ff       	call   c0014381 <Krnl::panic(char const*)>
c001f4c6:	83 c4 10             	add    esp,0x10
c001f4c9:	b8 01 00 00 00       	mov    eax,0x1
c001f4ce:	eb 19                	jmp    c001f4e9 <SATA::access(unsigned long long, int, void*, bool)+0x25d>
c001f4d0:	31 c0                	xor    eax,eax
c001f4d2:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c001f4d7:	75 10                	jne    c001f4e9 <SATA::access(unsigned long long, int, void*, bool)+0x25d>
c001f4d9:	8b b3 78 01 00 00    	mov    esi,DWORD PTR [ebx+0x178]
c001f4df:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c001f4e3:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001f4e7:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001f4e9:	83 c4 2c             	add    esp,0x2c
c001f4ec:	5b                   	pop    ebx
c001f4ed:	5e                   	pop    esi
c001f4ee:	5f                   	pop    edi
c001f4ef:	5d                   	pop    ebp
c001f4f0:	c3                   	ret    
c001f4f1:	90                   	nop

c001f4f2 <SATA::read(unsigned long long, int, void*)>:
c001f4f2:	57                   	push   edi
c001f4f3:	b8 04 00 00 00       	mov    eax,0x4
c001f4f8:	56                   	push   esi
c001f4f9:	53                   	push   ebx
c001f4fa:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001f4fe:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001f502:	8d 7a ff             	lea    edi,[edx-0x1]
c001f505:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001f509:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001f50d:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001f513:	77 25                	ja     c001f53a <SATA::read(unsigned long long, int, void*)+0x48>
c001f515:	b8 06 00 00 00       	mov    eax,0x6
c001f51a:	85 f6                	test   esi,esi
c001f51c:	74 1c                	je     c001f53a <SATA::read(unsigned long long, int, void*)+0x48>
c001f51e:	50                   	push   eax
c001f51f:	50                   	push   eax
c001f520:	6a 00                	push   0x0
c001f522:	56                   	push   esi
c001f523:	52                   	push   edx
c001f524:	53                   	push   ebx
c001f525:	51                   	push   ecx
c001f526:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001f52a:	e8 5d fd ff ff       	call   c001f28c <SATA::access(unsigned long long, int, void*, bool)>
c001f52f:	83 c4 20             	add    esp,0x20
c001f532:	85 c0                	test   eax,eax
c001f534:	0f 95 c0             	setne  al
c001f537:	0f b6 c0             	movzx  eax,al
c001f53a:	5b                   	pop    ebx
c001f53b:	5e                   	pop    esi
c001f53c:	5f                   	pop    edi
c001f53d:	c3                   	ret    

c001f53e <SATA::write(unsigned long long, int, void*)>:
c001f53e:	55                   	push   ebp
c001f53f:	b8 04 00 00 00       	mov    eax,0x4
c001f544:	57                   	push   edi
c001f545:	56                   	push   esi
c001f546:	53                   	push   ebx
c001f547:	83 ec 0c             	sub    esp,0xc
c001f54a:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001f54e:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001f552:	8d 73 ff             	lea    esi,[ebx-0x1]
c001f555:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001f559:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001f55d:	81 fe fe 00 00 00    	cmp    esi,0xfe
c001f563:	77 3d                	ja     c001f5a2 <SATA::write(unsigned long long, int, void*)+0x64>
c001f565:	b8 06 00 00 00       	mov    eax,0x6
c001f56a:	85 ed                	test   ebp,ebp
c001f56c:	74 34                	je     c001f5a2 <SATA::write(unsigned long long, int, void*)+0x64>
c001f56e:	c1 e3 09             	shl    ebx,0x9
c001f571:	01 eb                	add    ebx,ebp
c001f573:	89 d6                	mov    esi,edx
c001f575:	89 cf                	mov    edi,ecx
c001f577:	83 c6 01             	add    esi,0x1
c001f57a:	83 d7 00             	adc    edi,0x0
c001f57d:	50                   	push   eax
c001f57e:	50                   	push   eax
c001f57f:	6a 01                	push   0x1
c001f581:	55                   	push   ebp
c001f582:	81 c5 00 02 00 00    	add    ebp,0x200
c001f588:	6a 01                	push   0x1
c001f58a:	51                   	push   ecx
c001f58b:	52                   	push   edx
c001f58c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001f590:	e8 f7 fc ff ff       	call   c001f28c <SATA::access(unsigned long long, int, void*, bool)>
c001f595:	83 c4 20             	add    esp,0x20
c001f598:	89 f2                	mov    edx,esi
c001f59a:	89 f9                	mov    ecx,edi
c001f59c:	39 dd                	cmp    ebp,ebx
c001f59e:	75 d3                	jne    c001f573 <SATA::write(unsigned long long, int, void*)+0x35>
c001f5a0:	31 c0                	xor    eax,eax
c001f5a2:	83 c4 0c             	add    esp,0xc
c001f5a5:	5b                   	pop    ebx
c001f5a6:	5e                   	pop    esi
c001f5a7:	5f                   	pop    edi
c001f5a8:	5d                   	pop    ebp
c001f5a9:	c3                   	ret    

c001f5aa <SATAPI::write(unsigned long long, int, void*)>:
c001f5aa:	b8 03 00 00 00       	mov    eax,0x3
c001f5af:	c3                   	ret    

c001f5b0 <SATAPI::close(int, int, void*)>:
c001f5b0:	83 ec 0c             	sub    esp,0xc
c001f5b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f5b7:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001f5bd:	85 c0                	test   eax,eax
c001f5bf:	74 0c                	je     c001f5cd <SATAPI::close(int, int, void*)+0x1d>
c001f5c1:	83 ec 0c             	sub    esp,0xc
c001f5c4:	8b 10                	mov    edx,DWORD PTR [eax]
c001f5c6:	50                   	push   eax
c001f5c7:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001f5ca:	83 c4 10             	add    esp,0x10
c001f5cd:	31 c0                	xor    eax,eax
c001f5cf:	83 c4 0c             	add    esp,0xc
c001f5d2:	c3                   	ret    
c001f5d3:	90                   	nop

c001f5d4 <SATAPI::SATAPI()>:
c001f5d4:	83 ec 0c             	sub    esp,0xc
c001f5d7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f5db:	83 ec 04             	sub    esp,0x4
c001f5de:	68 00 08 00 00       	push   0x800
c001f5e3:	68 a8 52 02 c0       	push   0xc00252a8
c001f5e8:	50                   	push   eax
c001f5e9:	e8 50 ed fe ff       	call   c000e33e <PhysicalDisk::PhysicalDisk(char const*, int)>
c001f5ee:	83 c4 10             	add    esp,0x10
c001f5f1:	ba 54 53 02 c0       	mov    edx,0xc0025354
c001f5f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f5fa:	89 10                	mov    DWORD PTR [eax],edx
c001f5fc:	90                   	nop
c001f5fd:	83 c4 0c             	add    esp,0xc
c001f600:	c3                   	ret    
c001f601:	90                   	nop

c001f602 <SATAPI::diskRemoved()>:
c001f602:	83 ec 18             	sub    esp,0x18
c001f605:	68 b4 52 02 c0       	push   0xc00252b4
c001f60a:	e8 b0 d4 fe ff       	call   c000cabf <Dbg::kprintf(char const*, ...)>
c001f60f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001f613:	c6 80 74 01 00 00 00 	mov    BYTE PTR [eax+0x174],0x0
c001f61a:	83 c4 1c             	add    esp,0x1c
c001f61d:	c3                   	ret    

c001f61e <SATAPI::diskInserted()>:
c001f61e:	53                   	push   ebx
c001f61f:	83 ec 14             	sub    esp,0x14
c001f622:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001f626:	68 cb 52 02 c0       	push   0xc00252cb
c001f62b:	e8 8f d4 fe ff       	call   c000cabf <Dbg::kprintf(char const*, ...)>
c001f630:	c6 83 74 01 00 00 01 	mov    BYTE PTR [ebx+0x174],0x1
c001f637:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001f63a:	e8 67 ed fe ff       	call   c000e3a6 <PhysicalDisk::startCache()>
c001f63f:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c001f643:	83 c4 18             	add    esp,0x18
c001f646:	5b                   	pop    ebx
c001f647:	e9 96 0d ff ff       	jmp    c00103e2 <createPartitionsForDisk(PhysicalDisk*)>

c001f64c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>:
c001f64c:	55                   	push   ebp
c001f64d:	57                   	push   edi
c001f64e:	56                   	push   esi
c001f64f:	53                   	push   ebx
c001f650:	83 ec 34             	sub    esp,0x34
c001f653:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c001f657:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001f65b:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c001f65f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001f663:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c001f667:	8b 85 70 01 00 00    	mov    eax,DWORD PTR [ebp+0x170]
c001f66d:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001f673:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001f677:	8b 85 6c 01 00 00    	mov    eax,DWORD PTR [ebp+0x16c]
c001f67d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001f681:	c1 e0 07             	shl    eax,0x7
c001f684:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001f688:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001f68c:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c001f696:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001f69a:	8d 58 02             	lea    ebx,[eax+0x2]
c001f69d:	c1 e3 07             	shl    ebx,0x7
c001f6a0:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c001f6a4:	53                   	push   ebx
c001f6a5:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001f6ab:	e8 f6 eb ff ff       	call   c001e2a6 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c001f6b0:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001f6b4:	83 c4 10             	add    esp,0x10
c001f6b7:	b8 01 00 00 00       	mov    eax,0x1
c001f6bc:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c001f6c1:	0f 84 85 01 00 00    	je     c001f84c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x200>
c001f6c7:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c001f6cd:	8b 03                	mov    eax,DWORD PTR [ebx]
c001f6cf:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c001f6d5:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c001f6db:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001f6df:	c1 e1 05             	shl    ecx,0x5
c001f6e2:	01 c8                	add    eax,ecx
c001f6e4:	8b 08                	mov    ecx,DWORD PTR [eax]
c001f6e6:	81 e1 80 ff 00 00    	and    ecx,0xff80
c001f6ec:	81 c9 25 00 01 00    	or     ecx,0x10025
c001f6f2:	89 08                	mov    DWORD PTR [eax],ecx
c001f6f4:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c001f6fa:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c001f700:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c001f706:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c001f709:	8d 7b 40             	lea    edi,[ebx+0x40]
c001f70c:	50                   	push   eax
c001f70d:	68 90 00 00 00       	push   0x90
c001f712:	6a 00                	push   0x0
c001f714:	53                   	push   ebx
c001f715:	e8 6a 0f fe ff       	call   c0000684 <memset>
c001f71a:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c001f71e:	b9 0c 00 00 00       	mov    ecx,0xc
c001f723:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001f725:	8b 85 78 01 00 00    	mov    eax,DWORD PTR [ebp+0x178]
c001f72b:	c6 43 02 a0          	mov    BYTE PTR [ebx+0x2],0xa0
c001f72f:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c001f735:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c001f739:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001f73d:	48                   	dec    eax
c001f73e:	25 ff ff 3f 00       	and    eax,0x3fffff
c001f743:	89 c1                	mov    ecx,eax
c001f745:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c001f74b:	25 00 00 c0 ff       	and    eax,0xffc00000
c001f750:	09 c8                	or     eax,ecx
c001f752:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c001f758:	66 8b 03             	mov    ax,WORD PTR [ebx]
c001f75b:	80 8b 8f 00 00 00 80 	or     BYTE PTR [ebx+0x8f],0x80
c001f762:	66 25 00 7f          	and    ax,0x7f00
c001f766:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001f76a:	66 0d 27 80          	or     ax,0x8027
c001f76e:	66 89 53 04          	mov    WORD PTR [ebx+0x4],dx
c001f772:	66 89 03             	mov    WORD PTR [ebx],ax
c001f775:	89 d0                	mov    eax,edx
c001f777:	c1 ea 18             	shr    edx,0x18
c001f77a:	c1 e8 10             	shr    eax,0x10
c001f77d:	88 53 08             	mov    BYTE PTR [ebx+0x8],dl
c001f780:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c001f783:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c001f787:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c001f78a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001f78e:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c001f791:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001f795:	83 c4 10             	add    esp,0x10
c001f798:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c001f79c:	31 c0                	xor    eax,eax
c001f79e:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001f7a2:	8b 93 20 01 00 00    	mov    edx,DWORD PTR [ebx+0x120]
c001f7a8:	80 e2 88             	and    dl,0x88
c001f7ab:	74 0a                	je     c001f7b7 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x16b>
c001f7ad:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001f7b2:	74 0a                	je     c001f7be <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x172>
c001f7b4:	40                   	inc    eax
c001f7b5:	eb eb                	jmp    c001f7a2 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x156>
c001f7b7:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001f7bc:	75 0f                	jne    c001f7cd <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x181>
c001f7be:	83 ec 0c             	sub    esp,0xc
c001f7c1:	68 51 52 02 c0       	push   0xc0025251
c001f7c6:	e8 b6 4b ff ff       	call   c0014381 <Krnl::panic(char const*)>
c001f7cb:	eb 3f                	jmp    c001f80c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1c0>
c001f7cd:	ba 01 00 00 00       	mov    edx,0x1
c001f7d2:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c001f7d6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f7da:	d3 e2                	shl    edx,cl
c001f7dc:	c1 e0 07             	shl    eax,0x7
c001f7df:	89 93 38 01 00 00    	mov    DWORD PTR [ebx+0x138],edx
c001f7e5:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001f7e9:	8b 88 38 01 00 00    	mov    ecx,DWORD PTR [eax+0x138]
c001f7ef:	85 ca                	test   edx,ecx
c001f7f1:	74 23                	je     c001f816 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1ca>
c001f7f3:	8b 88 10 01 00 00    	mov    ecx,DWORD PTR [eax+0x110]
c001f7f9:	0f ba e1 1e          	bt     ecx,0x1e
c001f7fd:	73 ea                	jae    c001f7e9 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x19d>
c001f7ff:	83 ec 0c             	sub    esp,0xc
c001f802:	68 e3 52 02 c0       	push   0xc00252e3
c001f807:	e8 b3 d2 fe ff       	call   c000cabf <Dbg::kprintf(char const*, ...)>
c001f80c:	83 c4 10             	add    esp,0x10
c001f80f:	b8 01 00 00 00       	mov    eax,0x1
c001f814:	eb 36                	jmp    c001f84c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x200>
c001f816:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c001f81c:	0f ba e0 1e          	bt     eax,0x1e
c001f820:	73 0a                	jae    c001f82c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1e0>
c001f822:	83 ec 0c             	sub    esp,0xc
c001f825:	68 f6 52 02 c0       	push   0xc00252f6
c001f82a:	eb db                	jmp    c001f807 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1bb>
c001f82c:	83 7c 24 54 00       	cmp    DWORD PTR [esp+0x54],0x0
c001f831:	74 17                	je     c001f84a <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1fe>
c001f833:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c001f838:	74 10                	je     c001f84a <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1fe>
c001f83a:	8b b5 7c 01 00 00    	mov    esi,DWORD PTR [ebp+0x17c]
c001f840:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c001f844:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c001f848:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001f84a:	31 c0                	xor    eax,eax
c001f84c:	83 c4 2c             	add    esp,0x2c
c001f84f:	5b                   	pop    ebx
c001f850:	5e                   	pop    esi
c001f851:	5f                   	pop    edi
c001f852:	5d                   	pop    ebp
c001f853:	c3                   	ret    

c001f854 <SATAPI::eject()>:
c001f854:	57                   	push   edi
c001f855:	b9 03 00 00 00       	mov    ecx,0x3
c001f85a:	53                   	push   ebx
c001f85b:	83 ec 14             	sub    esp,0x14
c001f85e:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001f862:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001f866:	fc                   	cld    
c001f867:	31 c0                	xor    eax,eax
c001f869:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001f86b:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001f870:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001f875:	50                   	push   eax
c001f876:	6a 00                	push   0x0
c001f878:	6a 00                	push   0x0
c001f87a:	6a 00                	push   0x0
c001f87c:	6a 00                	push   0x0
c001f87e:	6a 02                	push   0x2
c001f880:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001f884:	50                   	push   eax
c001f885:	53                   	push   ebx
c001f886:	e8 c1 fd ff ff       	call   c001f64c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001f88b:	83 c4 14             	add    esp,0x14
c001f88e:	53                   	push   ebx
c001f88f:	e8 6e fd ff ff       	call   c001f602 <SATAPI::diskRemoved()>
c001f894:	83 c4 24             	add    esp,0x24
c001f897:	31 c0                	xor    eax,eax
c001f899:	5b                   	pop    ebx
c001f89a:	5f                   	pop    edi
c001f89b:	c3                   	ret    

c001f89c <SATAPI::detectMedia()>:
c001f89c:	56                   	push   esi
c001f89d:	53                   	push   ebx
c001f89e:	83 ec 28             	sub    esp,0x28
c001f8a1:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001f8a5:	6a 0c                	push   0xc
c001f8a7:	6a 00                	push   0x0
c001f8a9:	8d 74 24 0e          	lea    esi,[esp+0xe]
c001f8ad:	56                   	push   esi
c001f8ae:	e8 d1 0d fe ff       	call   c0000684 <memset>
c001f8b3:	83 c4 0c             	add    esp,0xc
c001f8b6:	6a 00                	push   0x0
c001f8b8:	6a 00                	push   0x0
c001f8ba:	6a 00                	push   0x0
c001f8bc:	6a 00                	push   0x0
c001f8be:	6a 00                	push   0x0
c001f8c0:	56                   	push   esi
c001f8c1:	53                   	push   ebx
c001f8c2:	e8 85 fd ff ff       	call   c001f64c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001f8c7:	83 c4 1c             	add    esp,0x1c
c001f8ca:	6a 0c                	push   0xc
c001f8cc:	6a 00                	push   0x0
c001f8ce:	56                   	push   esi
c001f8cf:	e8 b0 0d fe ff       	call   c0000684 <memset>
c001f8d4:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c001f8d9:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c001f8de:	83 c4 0c             	add    esp,0xc
c001f8e1:	6a 01                	push   0x1
c001f8e3:	8d 44 24 16          	lea    eax,[esp+0x16]
c001f8e7:	50                   	push   eax
c001f8e8:	6a 00                	push   0x0
c001f8ea:	6a 00                	push   0x0
c001f8ec:	6a 12                	push   0x12
c001f8ee:	56                   	push   esi
c001f8ef:	53                   	push   ebx
c001f8f0:	e8 57 fd ff ff       	call   c001f64c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001f8f5:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c001f8f9:	83 c4 20             	add    esp,0x20
c001f8fc:	83 e0 7f             	and    eax,0x7f
c001f8ff:	3c 70                	cmp    al,0x70
c001f901:	74 15                	je     c001f918 <SATAPI::detectMedia()+0x7c>
c001f903:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c001f90a:	75 0c                	jne    c001f918 <SATAPI::detectMedia()+0x7c>
c001f90c:	83 ec 0c             	sub    esp,0xc
c001f90f:	53                   	push   ebx
c001f910:	e8 09 fd ff ff       	call   c001f61e <SATAPI::diskInserted()>
c001f915:	83 c4 10             	add    esp,0x10
c001f918:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001f91c:	83 e0 0f             	and    eax,0xf
c001f91f:	3c 02                	cmp    al,0x2
c001f921:	75 1b                	jne    c001f93e <SATAPI::detectMedia()+0xa2>
c001f923:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c001f928:	75 2d                	jne    c001f957 <SATAPI::detectMedia()+0xbb>
c001f92a:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c001f931:	74 24                	je     c001f957 <SATAPI::detectMedia()+0xbb>
c001f933:	83 ec 0c             	sub    esp,0xc
c001f936:	53                   	push   ebx
c001f937:	e8 c6 fc ff ff       	call   c001f602 <SATAPI::diskRemoved()>
c001f93c:	eb 16                	jmp    c001f954 <SATAPI::detectMedia()+0xb8>
c001f93e:	84 c0                	test   al,al
c001f940:	75 15                	jne    c001f957 <SATAPI::detectMedia()+0xbb>
c001f942:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c001f949:	75 0c                	jne    c001f957 <SATAPI::detectMedia()+0xbb>
c001f94b:	83 ec 0c             	sub    esp,0xc
c001f94e:	53                   	push   ebx
c001f94f:	e8 ca fc ff ff       	call   c001f61e <SATAPI::diskInserted()>
c001f954:	83 c4 10             	add    esp,0x10
c001f957:	83 c4 24             	add    esp,0x24
c001f95a:	5b                   	pop    ebx
c001f95b:	5e                   	pop    esi
c001f95c:	c3                   	ret    
c001f95d:	90                   	nop

c001f95e <SATAPI::open(int, int, void*)>:
c001f95e:	56                   	push   esi
c001f95f:	53                   	push   ebx
c001f960:	50                   	push   eax
c001f961:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001f965:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001f969:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c001f973:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c001f979:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001f983:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001f987:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001f991:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001f997:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c001f99e:	e8 56 a4 fe ff       	call   c0009df9 <Phys::allocatePage()>
c001f9a3:	89 c6                	mov    esi,eax
c001f9a5:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001f9ab:	81 c6 00 10 00 00    	add    esi,0x1000
c001f9b1:	e8 43 a4 fe ff       	call   c0009df9 <Phys::allocatePage()>
c001f9b6:	39 c6                	cmp    esi,eax
c001f9b8:	74 10                	je     c001f9ca <SATAPI::open(int, int, void*)+0x6c>
c001f9ba:	83 ec 0c             	sub    esp,0xc
c001f9bd:	68 0b 53 02 c0       	push   0xc002530b
c001f9c2:	e8 ba 49 ff ff       	call   c0014381 <Krnl::panic(char const*)>
c001f9c7:	83 c4 10             	add    esp,0x10
c001f9ca:	83 ec 0c             	sub    esp,0xc
c001f9cd:	6a 02                	push   0x2
c001f9cf:	e8 19 bd fe ff       	call   c000b6ed <Virt::allocateKernelVirtualPages(int)>
c001f9d4:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c001f9da:	6a 03                	push   0x3
c001f9dc:	50                   	push   eax
c001f9dd:	ff b3 78 01 00 00    	push   DWORD PTR [ebx+0x178]
c001f9e3:	ff 35 90 65 02 c0    	push   DWORD PTR ds:0xc0026590
c001f9e9:	e8 a6 c3 fe ff       	call   c000bd94 <VAS::mapPage(unsigned long, unsigned long, int)>
c001f9ee:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c001f9f5:	83 c4 14             	add    esp,0x14
c001f9f8:	53                   	push   ebx
c001f9f9:	e8 9e fe ff ff       	call   c001f89c <SATAPI::detectMedia()>
c001f9fe:	83 c4 14             	add    esp,0x14
c001fa01:	31 c0                	xor    eax,eax
c001fa03:	5b                   	pop    ebx
c001fa04:	5e                   	pop    esi
c001fa05:	c3                   	ret    

c001fa06 <SATAPI::read(unsigned long long, int, void*)>:
c001fa06:	55                   	push   ebp
c001fa07:	57                   	push   edi
c001fa08:	56                   	push   esi
c001fa09:	53                   	push   ebx
c001fa0a:	83 ec 1c             	sub    esp,0x1c
c001fa0d:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001fa11:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001fa15:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001fa19:	80 bd 74 01 00 00 00 	cmp    BYTE PTR [ebp+0x174],0x0
c001fa20:	74 19                	je     c001fa3b <SATAPI::read(unsigned long long, int, void*)+0x35>
c001fa22:	83 7c 24 3c 04       	cmp    DWORD PTR [esp+0x3c],0x4
c001fa27:	7e 2e                	jle    c001fa57 <SATAPI::read(unsigned long long, int, void*)+0x51>
c001fa29:	83 ec 0c             	sub    esp,0xc
c001fa2c:	68 21 53 02 c0       	push   0xc0025321
c001fa31:	e8 4b 49 ff ff       	call   c0014381 <Krnl::panic(char const*)>
c001fa36:	83 c4 10             	add    esp,0x10
c001fa39:	eb 1c                	jmp    c001fa57 <SATAPI::read(unsigned long long, int, void*)+0x51>
c001fa3b:	83 ec 0c             	sub    esp,0xc
c001fa3e:	55                   	push   ebp
c001fa3f:	e8 58 fe ff ff       	call   c001f89c <SATAPI::detectMedia()>
c001fa44:	83 c4 10             	add    esp,0x10
c001fa47:	b8 02 00 00 00       	mov    eax,0x2
c001fa4c:	80 bd 74 01 00 00 00 	cmp    BYTE PTR [ebp+0x174],0x0
c001fa53:	75 cd                	jne    c001fa22 <SATAPI::read(unsigned long long, int, void*)+0x1c>
c001fa55:	eb 49                	jmp    c001faa0 <SATAPI::read(unsigned long long, int, void*)+0x9a>
c001fa57:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001fa5b:	b9 03 00 00 00       	mov    ecx,0x3
c001fa60:	fc                   	cld    
c001fa61:	31 c0                	xor    eax,eax
c001fa63:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001fa65:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c001fa6a:	89 d8                	mov    eax,ebx
c001fa6c:	86 e0                	xchg   al,ah
c001fa6e:	c1 c0 10             	rol    eax,0x10
c001fa71:	86 e0                	xchg   al,ah
c001fa73:	89 44 24 06          	mov    DWORD PTR [esp+0x6],eax
c001fa77:	8a 44 24 3c          	mov    al,BYTE PTR [esp+0x3c]
c001fa7b:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c001fa7f:	50                   	push   eax
c001fa80:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001fa84:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001fa88:	56                   	push   esi
c001fa89:	53                   	push   ebx
c001fa8a:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001fa8e:	c1 e0 0b             	shl    eax,0xb
c001fa91:	50                   	push   eax
c001fa92:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001fa96:	50                   	push   eax
c001fa97:	55                   	push   ebp
c001fa98:	e8 af fb ff ff       	call   c001f64c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001fa9d:	83 c4 20             	add    esp,0x20
c001faa0:	83 c4 1c             	add    esp,0x1c
c001faa3:	5b                   	pop    ebx
c001faa4:	5e                   	pop    esi
c001faa5:	5f                   	pop    edi
c001faa6:	5d                   	pop    ebp
c001faa7:	c3                   	ret    

c001faa8 <AVX::open(int, int, void*)>:
c001faa8:	83 ec 0c             	sub    esp,0xc
c001faab:	e8 38 11 00 00       	call   c0020be8 <avxInit>
c001fab0:	b8 00 00 00 00       	mov    eax,0x0
c001fab5:	83 c4 0c             	add    esp,0xc
c001fab8:	c3                   	ret    
c001fab9:	90                   	nop
c001faba:	66 90                	xchg   ax,ax

c001fabc <AVX::close(int, int, void*)>:
c001fabc:	83 ec 0c             	sub    esp,0xc
c001fabf:	e8 25 11 00 00       	call   c0020be9 <avxClose>
c001fac4:	b8 00 00 00 00       	mov    eax,0x0
c001fac9:	83 c4 0c             	add    esp,0xc
c001facc:	c3                   	ret    
c001facd:	90                   	nop
c001face:	66 90                	xchg   ax,ax

c001fad0 <AVX::available()>:
c001fad0:	83 ec 0c             	sub    esp,0xc
c001fad3:	e8 08 11 00 00       	call   c0020be0 <avxDetect>
c001fad8:	85 c0                	test   eax,eax
c001fada:	0f 95 c0             	setne  al
c001fadd:	83 c4 0c             	add    esp,0xc
c001fae0:	c3                   	ret    
c001fae1:	90                   	nop
c001fae2:	66 90                	xchg   ax,ax

c001fae4 <AVX::save(void*)>:
c001fae4:	83 ec 0c             	sub    esp,0xc
c001fae7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001faeb:	83 ec 0c             	sub    esp,0xc
c001faee:	50                   	push   eax
c001faef:	e8 f2 10 00 00       	call   c0020be6 <avxSave>
c001faf4:	83 c4 10             	add    esp,0x10
c001faf7:	90                   	nop
c001faf8:	83 c4 0c             	add    esp,0xc
c001fafb:	c3                   	ret    

c001fafc <AVX::load(void*)>:
c001fafc:	83 ec 0c             	sub    esp,0xc
c001faff:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001fb03:	83 ec 0c             	sub    esp,0xc
c001fb06:	50                   	push   eax
c001fb07:	e8 db 10 00 00       	call   c0020be7 <avxLoad>
c001fb0c:	83 c4 10             	add    esp,0x10
c001fb0f:	90                   	nop
c001fb10:	83 c4 0c             	add    esp,0xc
c001fb13:	c3                   	ret    

c001fb14 <AVX::AVX()>:
c001fb14:	83 ec 0c             	sub    esp,0xc
c001fb17:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb1b:	83 ec 08             	sub    esp,0x8
c001fb1e:	68 84 53 02 c0       	push   0xc0025384
c001fb23:	50                   	push   eax
c001fb24:	e8 f3 e8 fe ff       	call   c000e41c <FPU::FPU(char const*)>
c001fb29:	83 c4 10             	add    esp,0x10
c001fb2c:	ba 94 53 02 c0       	mov    edx,0xc0025394
c001fb31:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb35:	89 10                	mov    DWORD PTR [eax],edx
c001fb37:	90                   	nop
c001fb38:	83 c4 0c             	add    esp,0xc
c001fb3b:	c3                   	ret    

c001fb3c <MMX::available()>:
c001fb3c:	a1 68 64 02 c0       	mov    eax,ds:0xc0026468
c001fb41:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001fb47:	83 e0 20             	and    eax,0x20
c001fb4a:	84 c0                	test   al,al
c001fb4c:	0f 95 c0             	setne  al
c001fb4f:	c3                   	ret    

c001fb50 <MMX::open(int, int, void*)>:
c001fb50:	83 ec 0c             	sub    esp,0xc
c001fb53:	e8 1a 11 00 00       	call   c0020c72 <x87Init>
c001fb58:	b8 00 00 00 00       	mov    eax,0x0
c001fb5d:	83 c4 0c             	add    esp,0xc
c001fb60:	c3                   	ret    
c001fb61:	90                   	nop
c001fb62:	66 90                	xchg   ax,ax

c001fb64 <MMX::close(int, int, void*)>:
c001fb64:	83 ec 0c             	sub    esp,0xc
c001fb67:	e8 20 11 00 00       	call   c0020c8c <x87Close>
c001fb6c:	b8 00 00 00 00       	mov    eax,0x0
c001fb71:	83 c4 0c             	add    esp,0xc
c001fb74:	c3                   	ret    
c001fb75:	90                   	nop
c001fb76:	66 90                	xchg   ax,ax

c001fb78 <MMX::save(void*)>:
c001fb78:	83 ec 0c             	sub    esp,0xc
c001fb7b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001fb7f:	83 ec 0c             	sub    esp,0xc
c001fb82:	50                   	push   eax
c001fb83:	e8 d9 10 00 00       	call   c0020c61 <x87Save>
c001fb88:	83 c4 10             	add    esp,0x10
c001fb8b:	90                   	nop
c001fb8c:	83 c4 0c             	add    esp,0xc
c001fb8f:	c3                   	ret    

c001fb90 <MMX::load(void*)>:
c001fb90:	83 ec 0c             	sub    esp,0xc
c001fb93:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001fb97:	83 ec 0c             	sub    esp,0xc
c001fb9a:	50                   	push   eax
c001fb9b:	e8 ca 10 00 00       	call   c0020c6a <x87Load>
c001fba0:	83 c4 10             	add    esp,0x10
c001fba3:	90                   	nop
c001fba4:	83 c4 0c             	add    esp,0xc
c001fba7:	c3                   	ret    

c001fba8 <MMX::MMX()>:
c001fba8:	83 ec 0c             	sub    esp,0xc
c001fbab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fbaf:	83 ec 08             	sub    esp,0x8
c001fbb2:	68 c4 53 02 c0       	push   0xc00253c4
c001fbb7:	50                   	push   eax
c001fbb8:	e8 5f e8 fe ff       	call   c000e41c <FPU::FPU(char const*)>
c001fbbd:	83 c4 10             	add    esp,0x10
c001fbc0:	ba d4 53 02 c0       	mov    edx,0xc00253d4
c001fbc5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fbc9:	89 10                	mov    DWORD PTR [eax],edx
c001fbcb:	90                   	nop
c001fbcc:	83 c4 0c             	add    esp,0xc
c001fbcf:	c3                   	ret    

c001fbd0 <SSE::open(int, int, void*)>:
c001fbd0:	83 ec 0c             	sub    esp,0xc
c001fbd3:	e8 4c 10 00 00       	call   c0020c24 <sseInit>
c001fbd8:	b8 00 00 00 00       	mov    eax,0x0
c001fbdd:	83 c4 0c             	add    esp,0xc
c001fbe0:	c3                   	ret    
c001fbe1:	90                   	nop
c001fbe2:	66 90                	xchg   ax,ax

c001fbe4 <SSE::close(int, int, void*)>:
c001fbe4:	83 ec 0c             	sub    esp,0xc
c001fbe7:	e8 48 10 00 00       	call   c0020c34 <sseClose>
c001fbec:	b8 00 00 00 00       	mov    eax,0x0
c001fbf1:	83 c4 0c             	add    esp,0xc
c001fbf4:	c3                   	ret    
c001fbf5:	90                   	nop
c001fbf6:	66 90                	xchg   ax,ax

c001fbf8 <SSE::available()>:
c001fbf8:	83 ec 1c             	sub    esp,0x1c
c001fbfb:	e8 00 10 00 00       	call   c0020c00 <absolutelyNoChanceInHell>
c001fc00:	85 c0                	test   eax,eax
c001fc02:	0f 95 c0             	setne  al
c001fc05:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001fc09:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001fc0d:	83 c4 1c             	add    esp,0x1c
c001fc10:	c3                   	ret    
c001fc11:	90                   	nop
c001fc12:	66 90                	xchg   ax,ax

c001fc14 <SSE::save(void*)>:
c001fc14:	83 ec 0c             	sub    esp,0xc
c001fc17:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001fc1b:	83 ec 0c             	sub    esp,0xc
c001fc1e:	50                   	push   eax
c001fc1f:	e8 f4 0f 00 00       	call   c0020c18 <sseSave>
c001fc24:	83 c4 10             	add    esp,0x10
c001fc27:	90                   	nop
c001fc28:	83 c4 0c             	add    esp,0xc
c001fc2b:	c3                   	ret    

c001fc2c <SSE::load(void*)>:
c001fc2c:	83 ec 0c             	sub    esp,0xc
c001fc2f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001fc33:	83 ec 0c             	sub    esp,0xc
c001fc36:	50                   	push   eax
c001fc37:	e8 e2 0f 00 00       	call   c0020c1e <sseLoad>
c001fc3c:	83 c4 10             	add    esp,0x10
c001fc3f:	90                   	nop
c001fc40:	83 c4 0c             	add    esp,0xc
c001fc43:	c3                   	ret    

c001fc44 <SSE::SSE()>:
c001fc44:	83 ec 0c             	sub    esp,0xc
c001fc47:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc4b:	83 ec 08             	sub    esp,0x8
c001fc4e:	68 04 54 02 c0       	push   0xc0025404
c001fc53:	50                   	push   eax
c001fc54:	e8 c3 e7 fe ff       	call   c000e41c <FPU::FPU(char const*)>
c001fc59:	83 c4 10             	add    esp,0x10
c001fc5c:	ba 14 54 02 c0       	mov    edx,0xc0025414
c001fc61:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc65:	89 10                	mov    DWORD PTR [eax],edx
c001fc67:	90                   	nop
c001fc68:	83 c4 0c             	add    esp,0xc
c001fc6b:	c3                   	ret    

c001fc6c <x87::open(int, int, void*)>:
c001fc6c:	83 ec 0c             	sub    esp,0xc
c001fc6f:	e8 fe 0f 00 00       	call   c0020c72 <x87Init>
c001fc74:	b8 00 00 00 00       	mov    eax,0x0
c001fc79:	83 c4 0c             	add    esp,0xc
c001fc7c:	c3                   	ret    
c001fc7d:	90                   	nop
c001fc7e:	66 90                	xchg   ax,ax

c001fc80 <x87::close(int, int, void*)>:
c001fc80:	83 ec 0c             	sub    esp,0xc
c001fc83:	e8 04 10 00 00       	call   c0020c8c <x87Close>
c001fc88:	b8 00 00 00 00       	mov    eax,0x0
c001fc8d:	83 c4 0c             	add    esp,0xc
c001fc90:	c3                   	ret    
c001fc91:	90                   	nop
c001fc92:	66 90                	xchg   ax,ax

c001fc94 <x87::available()>:
c001fc94:	83 ec 0c             	sub    esp,0xc
c001fc97:	e8 aa 0f 00 00       	call   c0020c46 <x87Detect>
c001fc9c:	85 c0                	test   eax,eax
c001fc9e:	0f 95 c0             	setne  al
c001fca1:	83 c4 0c             	add    esp,0xc
c001fca4:	c3                   	ret    
c001fca5:	90                   	nop
c001fca6:	66 90                	xchg   ax,ax

c001fca8 <x87::save(void*)>:
c001fca8:	83 ec 0c             	sub    esp,0xc
c001fcab:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001fcaf:	83 ec 0c             	sub    esp,0xc
c001fcb2:	50                   	push   eax
c001fcb3:	e8 a9 0f 00 00       	call   c0020c61 <x87Save>
c001fcb8:	83 c4 10             	add    esp,0x10
c001fcbb:	90                   	nop
c001fcbc:	83 c4 0c             	add    esp,0xc
c001fcbf:	c3                   	ret    

c001fcc0 <x87::load(void*)>:
c001fcc0:	83 ec 0c             	sub    esp,0xc
c001fcc3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001fcc7:	83 ec 0c             	sub    esp,0xc
c001fcca:	50                   	push   eax
c001fccb:	e8 9a 0f 00 00       	call   c0020c6a <x87Load>
c001fcd0:	83 c4 10             	add    esp,0x10
c001fcd3:	90                   	nop
c001fcd4:	83 c4 0c             	add    esp,0xc
c001fcd7:	c3                   	ret    

c001fcd8 <x87::x87()>:
c001fcd8:	83 ec 0c             	sub    esp,0xc
c001fcdb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fcdf:	83 ec 08             	sub    esp,0x8
c001fce2:	68 44 54 02 c0       	push   0xc0025444
c001fce7:	50                   	push   eax
c001fce8:	e8 2f e7 fe ff       	call   c000e41c <FPU::FPU(char const*)>
c001fced:	83 c4 10             	add    esp,0x10
c001fcf0:	ba 54 54 02 c0       	mov    edx,0xc0025454
c001fcf5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fcf9:	89 10                	mov    DWORD PTR [eax],edx
c001fcfb:	90                   	nop
c001fcfc:	83 c4 0c             	add    esp,0xc
c001fcff:	c3                   	ret    

c001fd00 <APIC::disable()>:
c001fd00:	90                   	nop
c001fd01:	c3                   	ret    

c001fd02 <APIC::close(int, int, void*)>:
c001fd02:	55                   	push   ebp
c001fd03:	89 e5                	mov    ebp,esp
c001fd05:	83 ec 08             	sub    esp,0x8
c001fd08:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001fd0b:	8b 00                	mov    eax,DWORD PTR [eax]
c001fd0d:	83 c0 3c             	add    eax,0x3c
c001fd10:	8b 00                	mov    eax,DWORD PTR [eax]
c001fd12:	83 ec 0c             	sub    esp,0xc
c001fd15:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001fd18:	ff d0                	call   eax
c001fd1a:	83 c4 10             	add    esp,0x10
c001fd1d:	b8 00 00 00 00       	mov    eax,0x0
c001fd22:	c9                   	leave  
c001fd23:	c3                   	ret    

c001fd24 <IOAPIC::close(int, int, void*)>:
c001fd24:	b8 00 00 00 00       	mov    eax,0x0
c001fd29:	c3                   	ret    

c001fd2a <APIC::io_wait()>:
c001fd2a:	eb 00                	jmp    c001fd2c <APIC::io_wait()+0x2>
c001fd2c:	eb 00                	jmp    c001fd2e <APIC::io_wait()+0x4>
c001fd2e:	90                   	nop
c001fd2f:	c3                   	ret    

c001fd30 <APIC::getBase()>:
c001fd30:	55                   	push   ebp
c001fd31:	89 e5                	mov    ebp,esp
c001fd33:	83 ec 18             	sub    esp,0x18
c001fd36:	a1 68 64 02 c0       	mov    eax,ds:0xc0026468
c001fd3b:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001fd41:	83 e0 08             	and    eax,0x8
c001fd44:	84 c0                	test   al,al
c001fd46:	75 07                	jne    c001fd4f <APIC::getBase()+0x1f>
c001fd48:	b8 00 00 00 00       	mov    eax,0x0
c001fd4d:	eb 21                	jmp    c001fd70 <APIC::getBase()+0x40>
c001fd4f:	a1 68 64 02 c0       	mov    eax,ds:0xc0026468
c001fd54:	83 ec 08             	sub    esp,0x8
c001fd57:	6a 1b                	push   0x1b
c001fd59:	50                   	push   eax
c001fd5a:	e8 c5 91 fe ff       	call   c0008f24 <Computer::rdmsr(unsigned int)>
c001fd5f:	83 c4 10             	add    esp,0x10
c001fd62:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001fd65:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c001fd68:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001fd6b:	25 00 f0 ff ff       	and    eax,0xfffff000
c001fd70:	c9                   	leave  
c001fd71:	c3                   	ret    

c001fd72 <APIC::eoi(unsigned char)>:
c001fd72:	55                   	push   ebp
c001fd73:	89 e5                	mov    ebp,esp
c001fd75:	83 ec 28             	sub    esp,0x28
c001fd78:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001fd7b:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c001fd7e:	83 ec 0c             	sub    esp,0xc
c001fd81:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001fd84:	e8 a7 ff ff ff       	call   c001fd30 <APIC::getBase()>
c001fd89:	83 c4 10             	add    esp,0x10
c001fd8c:	05 b0 00 00 00       	add    eax,0xb0
c001fd91:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c001fd94:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001fd97:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c001fd9d:	90                   	nop
c001fd9e:	c9                   	leave  
c001fd9f:	c3                   	ret    

c001fda0 <APIC::open(int, int, void*)>:
c001fda0:	55                   	push   ebp
c001fda1:	89 e5                	mov    ebp,esp
c001fda3:	57                   	push   edi
c001fda4:	56                   	push   esi
c001fda5:	53                   	push   ebx
c001fda6:	83 ec 2c             	sub    esp,0x2c
c001fda9:	83 ec 0c             	sub    esp,0xc
c001fdac:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001fdaf:	e8 7c ff ff ff       	call   c001fd30 <APIC::getBase()>
c001fdb4:	83 c4 10             	add    esp,0x10
c001fdb7:	89 c2                	mov    edx,eax
c001fdb9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001fdbc:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001fdc2:	0f b6 f8             	movzx  edi,al
c001fdc5:	89 d0                	mov    eax,edx
c001fdc7:	ba 00 00 00 00       	mov    edx,0x0
c001fdcc:	89 c1                	mov    ecx,eax
c001fdce:	80 e5 ff             	and    ch,0xff
c001fdd1:	89 cb                	mov    ebx,ecx
c001fdd3:	0f b6 f2             	movzx  esi,dl
c001fdd6:	89 d8                	mov    eax,ebx
c001fdd8:	89 f2                	mov    edx,esi
c001fdda:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001fddd:	8d 5f 08             	lea    ebx,[edi+0x8]
c001fde0:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c001fde4:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c001fde8:	83 e0 00             	and    eax,0x0
c001fdeb:	09 d0                	or     eax,edx
c001fded:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c001fdf1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001fdf4:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001fdfa:	8d 50 01             	lea    edx,[eax+0x1]
c001fdfd:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001fe00:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c001fe06:	0f b6 d0             	movzx  edx,al
c001fe09:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001fe0c:	83 c2 08             	add    edx,0x8
c001fe0f:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c001fe13:	0f b6 c9             	movzx  ecx,cl
c001fe16:	81 c9 00 00 01 00    	or     ecx,0x10000
c001fe1c:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c001fe20:	83 ec 0c             	sub    esp,0xc
c001fe23:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001fe26:	e8 05 ff ff ff       	call   c001fd30 <APIC::getBase()>
c001fe2b:	83 c4 10             	add    esp,0x10
c001fe2e:	05 f0 00 00 00       	add    eax,0xf0
c001fe33:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c001fe36:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c001fe39:	8b 00                	mov    eax,DWORD PTR [eax]
c001fe3b:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c001fe3e:	81 4d dc 00 01 00 00 	or     DWORD PTR [ebp-0x24],0x100
c001fe45:	81 4d dc ff 00 00 00 	or     DWORD PTR [ebp-0x24],0xff
c001fe4c:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c001fe4f:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c001fe52:	89 10                	mov    DWORD PTR [eax],edx
c001fe54:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
c001fe5b:	a1 d0 6c 02 c0       	mov    eax,ds:0xc0026cd0
c001fe60:	39 45 e4             	cmp    DWORD PTR [ebp-0x1c],eax
c001fe63:	7d 7c                	jge    c001fee1 <APIC::open(int, int, void*)+0x141>
c001fe65:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c001fe68:	8b 04 85 e0 6c 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9320]
c001fe6f:	88 45 db             	mov    BYTE PTR [ebp-0x25],al
c001fe72:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c001fe75:	8b 04 85 e0 6c 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9320]
c001fe7c:	c1 e8 08             	shr    eax,0x8
c001fe7f:	66 89 45 d8          	mov    WORD PTR [ebp-0x28],ax
c001fe83:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c001fe86:	8b 04 85 e0 6c 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9320]
c001fe8d:	c1 e8 18             	shr    eax,0x18
c001fe90:	88 45 d7             	mov    BYTE PTR [ebp-0x29],al
c001fe93:	80 7d db ff          	cmp    BYTE PTR [ebp-0x25],0xff
c001fe97:	75 40                	jne    c001fed9 <APIC::open(int, int, void*)+0x139>
c001fe99:	83 ec 0c             	sub    esp,0xc
c001fe9c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001fe9f:	e8 8c fe ff ff       	call   c001fd30 <APIC::getBase()>
c001fea4:	83 c4 10             	add    esp,0x10
c001fea7:	80 7d d7 01          	cmp    BYTE PTR [ebp-0x29],0x1
c001feab:	75 07                	jne    c001feb4 <APIC::open(int, int, void*)+0x114>
c001fead:	ba 60 03 00 00       	mov    edx,0x360
c001feb2:	eb 05                	jmp    c001feb9 <APIC::open(int, int, void*)+0x119>
c001feb4:	ba 50 03 00 00       	mov    edx,0x350
c001feb9:	01 d0                	add    eax,edx
c001febb:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c001febe:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c001fec1:	8b 00                	mov    eax,DWORD PTR [eax]
c001fec3:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
c001fec6:	81 65 cc 00 ff ff ff 	and    DWORD PTR [ebp-0x34],0xffffff00
c001fecd:	83 4d cc 02          	or     DWORD PTR [ebp-0x34],0x2
c001fed1:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c001fed4:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c001fed7:	89 10                	mov    DWORD PTR [eax],edx
c001fed9:	ff 45 e4             	inc    DWORD PTR [ebp-0x1c]
c001fedc:	e9 7a ff ff ff       	jmp    c001fe5b <APIC::open(int, int, void*)+0xbb>
c001fee1:	b8 00 00 00 00       	mov    eax,0x0
c001fee6:	8d 65 f4             	lea    esp,[ebp-0xc]
c001fee9:	5b                   	pop    ebx
c001feea:	5e                   	pop    esi
c001feeb:	5f                   	pop    edi
c001feec:	5d                   	pop    ebp
c001feed:	c3                   	ret    

c001feee <IOAPIC::IOAPIC()>:
c001feee:	83 ec 0c             	sub    esp,0xc
c001fef1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fef5:	83 ec 08             	sub    esp,0x8
c001fef8:	68 84 54 02 c0       	push   0xc0025484
c001fefd:	50                   	push   eax
c001fefe:	e8 07 e2 fe ff       	call   c000e10a <Device::Device(char const*)>
c001ff03:	83 c4 10             	add    esp,0x10
c001ff06:	ba ac 55 02 c0       	mov    edx,0xc00255ac
c001ff0b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff0f:	89 10                	mov    DWORD PTR [eax],edx
c001ff11:	90                   	nop
c001ff12:	83 c4 0c             	add    esp,0xc
c001ff15:	c3                   	ret    

c001ff16 <APIC::APIC()>:
c001ff16:	53                   	push   ebx
c001ff17:	83 ec 18             	sub    esp,0x18
c001ff1a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ff1e:	83 ec 08             	sub    esp,0x8
c001ff21:	68 8c 54 02 c0       	push   0xc002548c
c001ff26:	50                   	push   eax
c001ff27:	e8 56 e9 fe ff       	call   c000e882 <InterruptController::InterruptController(char const*)>
c001ff2c:	83 c4 10             	add    esp,0x10
c001ff2f:	ba 64 55 02 c0       	mov    edx,0xc0025564
c001ff34:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ff38:	89 10                	mov    DWORD PTR [eax],edx
c001ff3a:	a0 a0 83 02 c0       	mov    al,ds:0xc00283a0
c001ff3f:	83 f0 01             	xor    eax,0x1
c001ff42:	84 c0                	test   al,al
c001ff44:	0f 84 a1 00 00 00    	je     c001ffeb <APIC::APIC()+0xd5>
c001ff4a:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c001ff4f:	a0 80 6d 02 c0       	mov    al,ds:0xc0026d80
c001ff54:	38 44 24 0f          	cmp    BYTE PTR [esp+0xf],al
c001ff58:	0f 83 86 00 00 00    	jae    c001ffe4 <APIC::APIC()+0xce>
c001ff5e:	c7 44 24 04 68 01 00 00 	mov    DWORD PTR [esp+0x4],0x168
c001ff66:	83 ec 0c             	sub    esp,0xc
c001ff69:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001ff6d:	e8 51 9a fe ff       	call   c00099c3 <malloc>
c001ff72:	83 c4 10             	add    esp,0x10
c001ff75:	89 c3                	mov    ebx,eax
c001ff77:	83 ec 0c             	sub    esp,0xc
c001ff7a:	53                   	push   ebx
c001ff7b:	e8 6e ff ff ff       	call   c001feee <IOAPIC::IOAPIC()>
c001ff80:	83 c4 10             	add    esp,0x10
c001ff83:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c001ff87:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c001ff8c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001ff90:	89 14 85 80 83 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7c80],edx
c001ff97:	a1 60 83 02 c0       	mov    eax,ds:0xc0028360
c001ff9c:	40                   	inc    eax
c001ff9d:	a3 60 83 02 c0       	mov    ds:0xc0028360,eax
c001ffa2:	a1 68 64 02 c0       	mov    eax,ds:0xc0026468
c001ffa7:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c001ffad:	83 ec 08             	sub    esp,0x8
c001ffb0:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001ffb4:	50                   	push   eax
c001ffb5:	e8 4c df fe ff       	call   c000df06 <Device::addChild(Device*)>
c001ffba:	83 c4 10             	add    esp,0x10
c001ffbd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ffc1:	8b 00                	mov    eax,DWORD PTR [eax]
c001ffc3:	83 c0 08             	add    eax,0x8
c001ffc6:	8b 00                	mov    eax,DWORD PTR [eax]
c001ffc8:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c001ffcd:	6a 00                	push   0x0
c001ffcf:	6a 00                	push   0x0
c001ffd1:	52                   	push   edx
c001ffd2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001ffd6:	ff d0                	call   eax
c001ffd8:	83 c4 10             	add    esp,0x10
c001ffdb:	fe 44 24 0f          	inc    BYTE PTR [esp+0xf]
c001ffdf:	e9 6b ff ff ff       	jmp    c001ff4f <APIC::APIC()+0x39>
c001ffe4:	c6 05 a0 83 02 c0 01 	mov    BYTE PTR ds:0xc00283a0,0x1
c001ffeb:	90                   	nop
c001ffec:	83 c4 18             	add    esp,0x18
c001ffef:	5b                   	pop    ebx
c001fff0:	c3                   	ret    
c001fff1:	90                   	nop

c001fff2 <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c001fff2:	55                   	push   ebp
c001fff3:	89 e5                	mov    ebp,esp
c001fff5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001fff8:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001fffe:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c0020001:	72 1d                	jb     c0020020 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c0020003:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0020006:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c002000c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002000f:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c0020015:	01 d0                	add    eax,edx
c0020017:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c002001a:	73 04                	jae    c0020020 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c002001c:	b0 01                	mov    al,0x1
c002001e:	eb 02                	jmp    c0020022 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c0020020:	b0 00                	mov    al,0x0
c0020022:	5d                   	pop    ebp
c0020023:	c3                   	ret    

c0020024 <IOAPIC::read(int)>:
c0020024:	55                   	push   ebp
c0020025:	89 e5                	mov    ebp,esp
c0020027:	83 ec 10             	sub    esp,0x10
c002002a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002002d:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0020033:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c0020036:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0020039:	0f b6 d0             	movzx  edx,al
c002003c:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c002003f:	89 10                	mov    DWORD PTR [eax],edx
c0020041:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0020044:	83 c0 10             	add    eax,0x10
c0020047:	8b 00                	mov    eax,DWORD PTR [eax]
c0020049:	c9                   	leave  
c002004a:	c3                   	ret    
c002004b:	90                   	nop

c002004c <IOAPIC::open(int, int, void*)>:
c002004c:	55                   	push   ebp
c002004d:	89 e5                	mov    ebp,esp
c002004f:	57                   	push   edi
c0020050:	56                   	push   esi
c0020051:	53                   	push   ebx
c0020052:	83 ec 0c             	sub    esp,0xc
c0020055:	83 ec 0c             	sub    esp,0xc
c0020058:	68 b7 54 02 c0       	push   0xc00254b7
c002005d:	e8 5d ca fe ff       	call   c000cabf <Dbg::kprintf(char const*, ...)>
c0020062:	83 c4 10             	add    esp,0x10
c0020065:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0020068:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c002006b:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0020071:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0020074:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c002007a:	8b 14 85 c0 6d 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd9240]
c0020081:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0020084:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c002008a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002008d:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0020093:	8b 14 85 40 6e 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd91c0]
c002009a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002009d:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c00200a3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00200a6:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c00200ac:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00200af:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c00200b5:	0f b6 f8             	movzx  edi,al
c00200b8:	89 d0                	mov    eax,edx
c00200ba:	ba 00 00 00 00       	mov    edx,0x0
c00200bf:	89 c1                	mov    ecx,eax
c00200c1:	80 e5 ff             	and    ch,0xff
c00200c4:	89 cb                	mov    ebx,ecx
c00200c6:	0f b6 f2             	movzx  esi,dl
c00200c9:	89 d8                	mov    eax,ebx
c00200cb:	89 f2                	mov    edx,esi
c00200cd:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c00200d0:	8d 5f 08             	lea    ebx,[edi+0x8]
c00200d3:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c00200d7:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c00200db:	83 e0 00             	and    eax,0x0
c00200de:	09 d0                	or     eax,edx
c00200e0:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c00200e4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00200e7:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c00200ed:	8d 50 01             	lea    edx,[eax+0x1]
c00200f0:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c00200f3:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c00200f9:	0f b6 d0             	movzx  edx,al
c00200fc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00200ff:	83 c2 08             	add    edx,0x8
c0020102:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c0020106:	0f b6 c9             	movzx  ecx,cl
c0020109:	81 c9 00 ad de 00    	or     ecx,0xdead00
c002010f:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c0020113:	83 ec 08             	sub    esp,0x8
c0020116:	6a 01                	push   0x1
c0020118:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002011b:	e8 04 ff ff ff       	call   c0020024 <IOAPIC::read(int)>
c0020120:	83 c4 10             	add    esp,0x10
c0020123:	c1 f8 10             	sar    eax,0x10
c0020126:	0f b6 c0             	movzx  eax,al
c0020129:	8d 50 01             	lea    edx,[eax+0x1]
c002012c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002012f:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c0020135:	b8 00 00 00 00       	mov    eax,0x0
c002013a:	8d 65 f4             	lea    esp,[ebp-0xc]
c002013d:	5b                   	pop    ebx
c002013e:	5e                   	pop    esi
c002013f:	5f                   	pop    edi
c0020140:	5d                   	pop    ebp
c0020141:	c3                   	ret    

c0020142 <IOAPIC::write(int, int)>:
c0020142:	55                   	push   ebp
c0020143:	89 e5                	mov    ebp,esp
c0020145:	83 ec 10             	sub    esp,0x10
c0020148:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002014b:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0020151:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c0020154:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0020157:	0f b6 d0             	movzx  edx,al
c002015a:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c002015d:	89 10                	mov    DWORD PTR [eax],edx
c002015f:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0020162:	8d 50 10             	lea    edx,[eax+0x10]
c0020165:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0020168:	89 02                	mov    DWORD PTR [edx],eax
c002016a:	90                   	nop
c002016b:	c9                   	leave  
c002016c:	c3                   	ret    
c002016d:	90                   	nop

c002016e <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c002016e:	55                   	push   ebp
c002016f:	89 e5                	mov    ebp,esp
c0020171:	53                   	push   ebx
c0020172:	83 ec 2c             	sub    esp,0x2c
c0020175:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0020178:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c002017b:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c002017e:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c0020181:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0020184:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0020187:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c002018a:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c002018d:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0020190:	88 d8                	mov    al,bl
c0020192:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c0020195:	88 c8                	mov    al,cl
c0020197:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c002019a:	88 d0                	mov    al,dl
c002019c:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c002019f:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c00201a3:	83 c0 08             	add    eax,0x8
c00201a6:	01 c0                	add    eax,eax
c00201a8:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00201ab:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c00201af:	83 c0 08             	add    eax,0x8
c00201b2:	01 c0                	add    eax,eax
c00201b4:	40                   	inc    eax
c00201b5:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00201b8:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00201bb:	50                   	push   eax
c00201bc:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00201bf:	e8 60 fe ff ff       	call   c0020024 <IOAPIC::read(int)>
c00201c4:	83 c4 08             	add    esp,0x8
c00201c7:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c00201ca:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c00201d1:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c00201d4:	c1 e0 18             	shl    eax,0x18
c00201d7:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c00201da:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c00201dd:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00201e0:	52                   	push   edx
c00201e1:	50                   	push   eax
c00201e2:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00201e5:	e8 58 ff ff ff       	call   c0020142 <IOAPIC::write(int, int)>
c00201ea:	83 c4 0c             	add    esp,0xc
c00201ed:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00201f0:	50                   	push   eax
c00201f1:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00201f4:	e8 2b fe ff ff       	call   c0020024 <IOAPIC::read(int)>
c00201f9:	83 c4 08             	add    esp,0x8
c00201fc:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c00201ff:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c0020206:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c002020d:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c0020214:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c0020218:	74 09                	je     c0020223 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xb5>
c002021a:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c0020221:	eb 07                	jmp    c002022a <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xbc>
c0020223:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c002022a:	80 7d d0 00          	cmp    BYTE PTR [ebp-0x30],0x0
c002022e:	74 09                	je     c0020239 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xcb>
c0020230:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c0020237:	eb 07                	jmp    c0020240 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd2>
c0020239:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c0020240:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c0020247:	0f b6 45 e0          	movzx  eax,BYTE PTR [ebp-0x20]
c002024b:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c002024e:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0020251:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0020254:	52                   	push   edx
c0020255:	50                   	push   eax
c0020256:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0020259:	e8 e4 fe ff ff       	call   c0020142 <IOAPIC::write(int, int)>
c002025e:	83 c4 0c             	add    esp,0xc
c0020261:	90                   	nop
c0020262:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0020265:	c9                   	leave  
c0020266:	c3                   	ret    
c0020267:	90                   	nop

c0020268 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c0020268:	55                   	push   ebp
c0020269:	89 e5                	mov    ebp,esp
c002026b:	57                   	push   edi
c002026c:	56                   	push   esi
c002026d:	53                   	push   ebx
c002026e:	83 ec 2c             	sub    esp,0x2c
c0020271:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0020274:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c0020277:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
c002027b:	c6 45 e6 00          	mov    BYTE PTR [ebp-0x1a],0x0
c002027f:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c0020283:	74 5a                	je     c00202df <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c0020285:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c0020289:	7f 44                	jg     c00202cf <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x67>
c002028b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002028e:	05 60 5b 02 c0       	add    eax,0xc0025b60
c0020293:	8a 00                	mov    al,BYTE PTR [eax]
c0020295:	0f b6 c0             	movzx  eax,al
c0020298:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c002029b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002029e:	66 8b 84 00 60 6d 02 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffd92a0]
c00202a6:	0f b7 c0             	movzx  eax,ax
c00202a9:	83 e0 02             	and    eax,0x2
c00202ac:	85 c0                	test   eax,eax
c00202ae:	74 04                	je     c00202b4 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x4c>
c00202b0:	c6 45 e6 01          	mov    BYTE PTR [ebp-0x1a],0x1
c00202b4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00202b7:	66 8b 84 00 60 6d 02 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffd92a0]
c00202bf:	0f b7 c0             	movzx  eax,ax
c00202c2:	83 e0 08             	and    eax,0x8
c00202c5:	85 c0                	test   eax,eax
c00202c7:	74 16                	je     c00202df <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c00202c9:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
c00202cd:	eb 10                	jmp    c00202df <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c00202cf:	83 ec 0c             	sub    esp,0xc
c00202d2:	68 c8 54 02 c0       	push   0xc00254c8
c00202d7:	e8 a5 40 ff ff       	call   c0014381 <Krnl::panic(char const*)>
c00202dc:	83 c4 10             	add    esp,0x10
c00202df:	c6 45 e5 00          	mov    BYTE PTR [ebp-0x1b],0x0
c00202e3:	a1 60 83 02 c0       	mov    eax,ds:0xc0028360
c00202e8:	83 ec 08             	sub    esp,0x8
c00202eb:	50                   	push   eax
c00202ec:	68 00 55 02 c0       	push   0xc0025500
c00202f1:	e8 c9 c7 fe ff       	call   c000cabf <Dbg::kprintf(char const*, ...)>
c00202f6:	83 c4 10             	add    esp,0x10
c00202f9:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
c0020300:	a1 60 83 02 c0       	mov    eax,ds:0xc0028360
c0020305:	39 45 e0             	cmp    DWORD PTR [ebp-0x20],eax
c0020308:	7d 67                	jge    c0020371 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c002030a:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c002030d:	8b 04 85 80 83 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7c80]
c0020314:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0020317:	83 ec 08             	sub    esp,0x8
c002031a:	52                   	push   edx
c002031b:	50                   	push   eax
c002031c:	e8 d1 fc ff ff       	call   c001fff2 <IOAPIC::handlesGSIWithNumber(unsigned int)>
c0020321:	83 c4 10             	add    esp,0x10
c0020324:	84 c0                	test   al,al
c0020326:	74 44                	je     c002036c <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x104>
c0020328:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c002032b:	8b 1c 85 80 83 02 c0 	mov    ebx,DWORD PTR [eax*4-0x3ffd7c80]
c0020332:	0f b6 45 e6          	movzx  eax,BYTE PTR [ebp-0x1a]
c0020336:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0020339:	0f b6 7d e7          	movzx  edi,BYTE PTR [ebp-0x19]
c002033d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0020340:	83 c0 20             	add    eax,0x20
c0020343:	0f b6 f0             	movzx  esi,al
c0020346:	b8 00 00 00 00       	mov    eax,0x0
c002034b:	99                   	cdq    
c002034c:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c002034f:	0f b6 c9             	movzx  ecx,cl
c0020352:	83 ec 04             	sub    esp,0x4
c0020355:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c0020358:	57                   	push   edi
c0020359:	56                   	push   esi
c002035a:	52                   	push   edx
c002035b:	50                   	push   eax
c002035c:	51                   	push   ecx
c002035d:	53                   	push   ebx
c002035e:	e8 0b fe ff ff       	call   c002016e <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c0020363:	83 c4 20             	add    esp,0x20
c0020366:	c6 45 e5 01          	mov    BYTE PTR [ebp-0x1b],0x1
c002036a:	eb 05                	jmp    c0020371 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c002036c:	ff 45 e0             	inc    DWORD PTR [ebp-0x20]
c002036f:	eb 8f                	jmp    c0020300 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x98>
c0020371:	8a 45 e5             	mov    al,BYTE PTR [ebp-0x1b]
c0020374:	83 f0 01             	xor    eax,0x1
c0020377:	84 c0                	test   al,al
c0020379:	74 10                	je     c002038b <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x123>
c002037b:	83 ec 0c             	sub    esp,0xc
c002037e:	68 17 55 02 c0       	push   0xc0025517
c0020383:	e8 f9 3f ff ff       	call   c0014381 <Krnl::panic(char const*)>
c0020388:	83 c4 10             	add    esp,0x10
c002038b:	83 45 0c 20          	add    DWORD PTR [ebp+0xc],0x20
c002038f:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
c0020396:	83 7d dc 03          	cmp    DWORD PTR [ebp-0x24],0x3
c002039a:	7f 65                	jg     c0020401 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x199>
c002039c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002039f:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00203a2:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c00203a9:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c00203ac:	01 ca                	add    edx,ecx
c00203ae:	83 c2 54             	add    edx,0x54
c00203b1:	8b 44 90 08          	mov    eax,DWORD PTR [eax+edx*4+0x8]
c00203b5:	85 c0                	test   eax,eax
c00203b7:	75 43                	jne    c00203fc <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x194>
c00203b9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00203bc:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00203bf:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c00203c6:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c00203c9:	01 ca                	add    edx,ecx
c00203cb:	8d 4a 54             	lea    ecx,[edx+0x54]
c00203ce:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c00203d1:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c00203d5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00203d8:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00203db:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c00203e2:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c00203e5:	01 ca                	add    edx,ecx
c00203e7:	8d 8a 54 04 00 00    	lea    ecx,[edx+0x454]
c00203ed:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c00203f0:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c00203f4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00203f7:	83 e8 20             	sub    eax,0x20
c00203fa:	eb 1a                	jmp    c0020416 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1ae>
c00203fc:	ff 45 dc             	inc    DWORD PTR [ebp-0x24]
c00203ff:	eb 95                	jmp    c0020396 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12e>
c0020401:	83 ec 0c             	sub    esp,0xc
c0020404:	68 24 55 02 c0       	push   0xc0025524
c0020409:	e8 73 3f ff ff       	call   c0014381 <Krnl::panic(char const*)>
c002040e:	83 c4 10             	add    esp,0x10
c0020411:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0020416:	8d 65 f4             	lea    esp,[ebp-0xc]
c0020419:	5b                   	pop    ebx
c002041a:	5e                   	pop    esi
c002041b:	5f                   	pop    edi
c002041c:	5d                   	pop    ebp
c002041d:	c3                   	ret    

c002041e <PIC::disable()>:
c002041e:	55                   	push   ebp
c002041f:	89 e5                	mov    ebp,esp
c0020421:	83 ec 10             	sub    esp,0x10
c0020424:	66 c7 45 fa a1 00    	mov    WORD PTR [ebp-0x6],0xa1
c002042a:	c6 45 f9 ff          	mov    BYTE PTR [ebp-0x7],0xff
c002042e:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0020431:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c0020435:	ee                   	out    dx,al
c0020436:	66 c7 45 fe 21 00    	mov    WORD PTR [ebp-0x2],0x21
c002043c:	c6 45 fd ff          	mov    BYTE PTR [ebp-0x3],0xff
c0020440:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c0020443:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0020447:	ee                   	out    dx,al
c0020448:	90                   	nop
c0020449:	c9                   	leave  
c002044a:	c3                   	ret    
c002044b:	90                   	nop

c002044c <PIC::close(int, int, void*)>:
c002044c:	55                   	push   ebp
c002044d:	89 e5                	mov    ebp,esp
c002044f:	83 ec 08             	sub    esp,0x8
c0020452:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0020455:	8b 00                	mov    eax,DWORD PTR [eax]
c0020457:	83 c0 3c             	add    eax,0x3c
c002045a:	8b 00                	mov    eax,DWORD PTR [eax]
c002045c:	83 ec 0c             	sub    esp,0xc
c002045f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0020462:	ff d0                	call   eax
c0020464:	83 c4 10             	add    esp,0x10
c0020467:	b8 00 00 00 00       	mov    eax,0x0
c002046c:	c9                   	leave  
c002046d:	c3                   	ret    

c002046e <PIC::PIC()>:
c002046e:	83 ec 0c             	sub    esp,0xc
c0020471:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020475:	83 ec 08             	sub    esp,0x8
c0020478:	68 d0 55 02 c0       	push   0xc00255d0
c002047d:	50                   	push   eax
c002047e:	e8 ff e3 fe ff       	call   c000e882 <InterruptController::InterruptController(char const*)>
c0020483:	83 c4 10             	add    esp,0x10
c0020486:	ba fc 55 02 c0       	mov    edx,0xc00255fc
c002048b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002048f:	89 10                	mov    DWORD PTR [eax],edx
c0020491:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020495:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002049b:	0f b6 d0             	movzx  edx,al
c002049e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00204a2:	66 c7 44 90 04 20 00 	mov    WORD PTR [eax+edx*4+0x4],0x20
c00204a9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00204ad:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00204b3:	0f b6 d0             	movzx  edx,al
c00204b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00204ba:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c00204bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00204c3:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00204c9:	8d 50 01             	lea    edx,[eax+0x1]
c00204cc:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00204d0:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c00204d6:	0f b6 d0             	movzx  edx,al
c00204d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00204dd:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c00204e1:	83 e1 3f             	and    ecx,0x3f
c00204e4:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c00204e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00204ec:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00204f2:	0f b6 d0             	movzx  edx,al
c00204f5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00204f9:	66 c7 44 90 04 a0 00 	mov    WORD PTR [eax+edx*4+0x4],0xa0
c0020500:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020504:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002050a:	0f b6 d0             	movzx  edx,al
c002050d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020511:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0020516:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002051a:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0020520:	8d 50 01             	lea    edx,[eax+0x1]
c0020523:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0020527:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c002052d:	0f b6 d0             	movzx  edx,al
c0020530:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020534:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0020538:	83 e1 3f             	and    ecx,0x3f
c002053b:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c002053f:	90                   	nop
c0020540:	83 c4 0c             	add    esp,0xc
c0020543:	c3                   	ret    

c0020544 <PIC::ioWait()>:
c0020544:	eb 00                	jmp    c0020546 <PIC::ioWait()+0x2>
c0020546:	eb 00                	jmp    c0020548 <PIC::ioWait()+0x4>
c0020548:	90                   	nop
c0020549:	c3                   	ret    

c002054a <PIC::getIRQReg(int)>:
c002054a:	55                   	push   ebp
c002054b:	89 e5                	mov    ebp,esp
c002054d:	83 ec 10             	sub    esp,0x10
c0020550:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0020553:	0f b6 c0             	movzx  eax,al
c0020556:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c002055c:	88 45 f1             	mov    BYTE PTR [ebp-0xf],al
c002055f:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0020562:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0020566:	ee                   	out    dx,al
c0020567:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002056a:	0f b6 c0             	movzx  eax,al
c002056d:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c0020573:	88 45 f5             	mov    BYTE PTR [ebp-0xb],al
c0020576:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0020579:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c002057d:	ee                   	out    dx,al
c002057e:	66 c7 45 fa a0 00    	mov    WORD PTR [ebp-0x6],0xa0
c0020584:	66 8b 45 fa          	mov    ax,WORD PTR [ebp-0x6]
c0020588:	89 c2                	mov    edx,eax
c002058a:	ec                   	in     al,dx
c002058b:	88 45 f9             	mov    BYTE PTR [ebp-0x7],al
c002058e:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0020591:	0f b6 c0             	movzx  eax,al
c0020594:	c1 e0 08             	shl    eax,0x8
c0020597:	89 c1                	mov    ecx,eax
c0020599:	66 c7 45 fe 20 00    	mov    WORD PTR [ebp-0x2],0x20
c002059f:	66 8b 45 fe          	mov    ax,WORD PTR [ebp-0x2]
c00205a3:	89 c2                	mov    edx,eax
c00205a5:	ec                   	in     al,dx
c00205a6:	88 45 fd             	mov    BYTE PTR [ebp-0x3],al
c00205a9:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c00205ac:	0f b6 c0             	movzx  eax,al
c00205af:	09 c8                	or     eax,ecx
c00205b1:	c9                   	leave  
c00205b2:	c3                   	ret    
c00205b3:	90                   	nop

c00205b4 <PIC::eoi(unsigned char)>:
c00205b4:	55                   	push   ebp
c00205b5:	89 e5                	mov    ebp,esp
c00205b7:	83 ec 14             	sub    esp,0x14
c00205ba:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00205bd:	88 45 ec             	mov    BYTE PTR [ebp-0x14],al
c00205c0:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c00205c4:	75 1e                	jne    c00205e4 <PIC::eoi(unsigned char)+0x30>
c00205c6:	6a 0b                	push   0xb
c00205c8:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00205cb:	e8 7a ff ff ff       	call   c002054a <PIC::getIRQReg(int)>
c00205d0:	83 c4 08             	add    esp,0x8
c00205d3:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c00205d7:	0f b7 45 fe          	movzx  eax,WORD PTR [ebp-0x2]
c00205db:	25 80 00 00 00       	and    eax,0x80
c00205e0:	85 c0                	test   eax,eax
c00205e2:	74 5f                	je     c0020643 <PIC::eoi(unsigned char)+0x8f>
c00205e4:	80 7d ec 0f          	cmp    BYTE PTR [ebp-0x14],0xf
c00205e8:	75 2d                	jne    c0020617 <PIC::eoi(unsigned char)+0x63>
c00205ea:	6a 0b                	push   0xb
c00205ec:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00205ef:	e8 56 ff ff ff       	call   c002054a <PIC::getIRQReg(int)>
c00205f4:	83 c4 08             	add    esp,0x8
c00205f7:	66 89 45 fc          	mov    WORD PTR [ebp-0x4],ax
c00205fb:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c00205fe:	66 85 c0             	test   ax,ax
c0020601:	78 14                	js     c0020617 <PIC::eoi(unsigned char)+0x63>
c0020603:	66 c7 45 fa 20 00    	mov    WORD PTR [ebp-0x6],0x20
c0020609:	c6 45 f9 20          	mov    BYTE PTR [ebp-0x7],0x20
c002060d:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0020610:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c0020614:	ee                   	out    dx,al
c0020615:	eb 2d                	jmp    c0020644 <PIC::eoi(unsigned char)+0x90>
c0020617:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c002061b:	76 12                	jbe    c002062f <PIC::eoi(unsigned char)+0x7b>
c002061d:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c0020623:	c6 45 f5 20          	mov    BYTE PTR [ebp-0xb],0x20
c0020627:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c002062a:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c002062e:	ee                   	out    dx,al
c002062f:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c0020635:	c6 45 f1 20          	mov    BYTE PTR [ebp-0xf],0x20
c0020639:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c002063c:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0020640:	ee                   	out    dx,al
c0020641:	eb 01                	jmp    c0020644 <PIC::eoi(unsigned char)+0x90>
c0020643:	90                   	nop
c0020644:	c9                   	leave  
c0020645:	c3                   	ret    

c0020646 <PIC::remap()>:
c0020646:	55                   	push   ebp
c0020647:	89 e5                	mov    ebp,esp
c0020649:	83 ec 48             	sub    esp,0x48
c002064c:	c7 45 f4 20 00 00 00 	mov    DWORD PTR [ebp-0xc],0x20
c0020653:	c7 45 f0 28 00 00 00 	mov    DWORD PTR [ebp-0x10],0x28
c002065a:	66 c7 45 c0 21 00    	mov    WORD PTR [ebp-0x40],0x21
c0020660:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
c0020663:	89 c2                	mov    edx,eax
c0020665:	ec                   	in     al,dx
c0020666:	88 45 bf             	mov    BYTE PTR [ebp-0x41],al
c0020669:	8a 45 bf             	mov    al,BYTE PTR [ebp-0x41]
c002066c:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c002066f:	66 c7 45 c4 a1 00    	mov    WORD PTR [ebp-0x3c],0xa1
c0020675:	8b 45 c4             	mov    eax,DWORD PTR [ebp-0x3c]
c0020678:	89 c2                	mov    edx,eax
c002067a:	ec                   	in     al,dx
c002067b:	88 45 c3             	mov    BYTE PTR [ebp-0x3d],al
c002067e:	8a 45 c3             	mov    al,BYTE PTR [ebp-0x3d]
c0020681:	88 45 ee             	mov    BYTE PTR [ebp-0x12],al
c0020684:	66 c7 45 c8 20 00    	mov    WORD PTR [ebp-0x38],0x20
c002068a:	c6 45 c7 11          	mov    BYTE PTR [ebp-0x39],0x11
c002068e:	8a 45 c7             	mov    al,BYTE PTR [ebp-0x39]
c0020691:	8b 55 c8             	mov    edx,DWORD PTR [ebp-0x38]
c0020694:	ee                   	out    dx,al
c0020695:	83 ec 0c             	sub    esp,0xc
c0020698:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002069b:	e8 a4 fe ff ff       	call   c0020544 <PIC::ioWait()>
c00206a0:	83 c4 10             	add    esp,0x10
c00206a3:	66 c7 45 cc a0 00    	mov    WORD PTR [ebp-0x34],0xa0
c00206a9:	c6 45 cb 11          	mov    BYTE PTR [ebp-0x35],0x11
c00206ad:	8a 45 cb             	mov    al,BYTE PTR [ebp-0x35]
c00206b0:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c00206b3:	ee                   	out    dx,al
c00206b4:	83 ec 0c             	sub    esp,0xc
c00206b7:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00206ba:	e8 85 fe ff ff       	call   c0020544 <PIC::ioWait()>
c00206bf:	83 c4 10             	add    esp,0x10
c00206c2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00206c5:	0f b6 c0             	movzx  eax,al
c00206c8:	66 c7 45 d0 21 00    	mov    WORD PTR [ebp-0x30],0x21
c00206ce:	88 45 cf             	mov    BYTE PTR [ebp-0x31],al
c00206d1:	8a 45 cf             	mov    al,BYTE PTR [ebp-0x31]
c00206d4:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c00206d7:	ee                   	out    dx,al
c00206d8:	83 ec 0c             	sub    esp,0xc
c00206db:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00206de:	e8 61 fe ff ff       	call   c0020544 <PIC::ioWait()>
c00206e3:	83 c4 10             	add    esp,0x10
c00206e6:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00206e9:	0f b6 c0             	movzx  eax,al
c00206ec:	66 c7 45 d4 a1 00    	mov    WORD PTR [ebp-0x2c],0xa1
c00206f2:	88 45 d3             	mov    BYTE PTR [ebp-0x2d],al
c00206f5:	8a 45 d3             	mov    al,BYTE PTR [ebp-0x2d]
c00206f8:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c00206fb:	ee                   	out    dx,al
c00206fc:	83 ec 0c             	sub    esp,0xc
c00206ff:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0020702:	e8 3d fe ff ff       	call   c0020544 <PIC::ioWait()>
c0020707:	83 c4 10             	add    esp,0x10
c002070a:	66 c7 45 d8 21 00    	mov    WORD PTR [ebp-0x28],0x21
c0020710:	c6 45 d7 04          	mov    BYTE PTR [ebp-0x29],0x4
c0020714:	8a 45 d7             	mov    al,BYTE PTR [ebp-0x29]
c0020717:	8b 55 d8             	mov    edx,DWORD PTR [ebp-0x28]
c002071a:	ee                   	out    dx,al
c002071b:	83 ec 0c             	sub    esp,0xc
c002071e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0020721:	e8 1e fe ff ff       	call   c0020544 <PIC::ioWait()>
c0020726:	83 c4 10             	add    esp,0x10
c0020729:	66 c7 45 dc a1 00    	mov    WORD PTR [ebp-0x24],0xa1
c002072f:	c6 45 db 02          	mov    BYTE PTR [ebp-0x25],0x2
c0020733:	8a 45 db             	mov    al,BYTE PTR [ebp-0x25]
c0020736:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0020739:	ee                   	out    dx,al
c002073a:	83 ec 0c             	sub    esp,0xc
c002073d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0020740:	e8 ff fd ff ff       	call   c0020544 <PIC::ioWait()>
c0020745:	83 c4 10             	add    esp,0x10
c0020748:	66 c7 45 e0 21 00    	mov    WORD PTR [ebp-0x20],0x21
c002074e:	c6 45 df 01          	mov    BYTE PTR [ebp-0x21],0x1
c0020752:	8a 45 df             	mov    al,BYTE PTR [ebp-0x21]
c0020755:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0020758:	ee                   	out    dx,al
c0020759:	83 ec 0c             	sub    esp,0xc
c002075c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002075f:	e8 e0 fd ff ff       	call   c0020544 <PIC::ioWait()>
c0020764:	83 c4 10             	add    esp,0x10
c0020767:	66 c7 45 e4 a1 00    	mov    WORD PTR [ebp-0x1c],0xa1
c002076d:	c6 45 e3 01          	mov    BYTE PTR [ebp-0x1d],0x1
c0020771:	8a 45 e3             	mov    al,BYTE PTR [ebp-0x1d]
c0020774:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0020777:	ee                   	out    dx,al
c0020778:	83 ec 0c             	sub    esp,0xc
c002077b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002077e:	e8 c1 fd ff ff       	call   c0020544 <PIC::ioWait()>
c0020783:	83 c4 10             	add    esp,0x10
c0020786:	0f b6 45 ef          	movzx  eax,BYTE PTR [ebp-0x11]
c002078a:	66 c7 45 e8 21 00    	mov    WORD PTR [ebp-0x18],0x21
c0020790:	88 45 e7             	mov    BYTE PTR [ebp-0x19],al
c0020793:	8a 45 e7             	mov    al,BYTE PTR [ebp-0x19]
c0020796:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0020799:	ee                   	out    dx,al
c002079a:	0f b6 45 ee          	movzx  eax,BYTE PTR [ebp-0x12]
c002079e:	66 c7 45 ec a1 00    	mov    WORD PTR [ebp-0x14],0xa1
c00207a4:	88 45 eb             	mov    BYTE PTR [ebp-0x15],al
c00207a7:	8a 45 eb             	mov    al,BYTE PTR [ebp-0x15]
c00207aa:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00207ad:	ee                   	out    dx,al
c00207ae:	90                   	nop
c00207af:	c9                   	leave  
c00207b0:	c3                   	ret    
c00207b1:	90                   	nop

c00207b2 <PIC::open(int, int, void*)>:
c00207b2:	55                   	push   ebp
c00207b3:	89 e5                	mov    ebp,esp
c00207b5:	83 ec 18             	sub    esp,0x18
c00207b8:	66 c7 45 f2 21 00    	mov    WORD PTR [ebp-0xe],0x21
c00207be:	c6 45 f1 00          	mov    BYTE PTR [ebp-0xf],0x0
c00207c2:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c00207c5:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c00207c9:	ee                   	out    dx,al
c00207ca:	66 c7 45 f6 a1 00    	mov    WORD PTR [ebp-0xa],0xa1
c00207d0:	c6 45 f5 00          	mov    BYTE PTR [ebp-0xb],0x0
c00207d4:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c00207d7:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c00207db:	ee                   	out    dx,al
c00207dc:	83 ec 0c             	sub    esp,0xc
c00207df:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00207e2:	e8 5f fe ff ff       	call   c0020646 <PIC::remap()>
c00207e7:	83 c4 10             	add    esp,0x10
c00207ea:	b8 00 00 00 00       	mov    eax,0x0
c00207ef:	c9                   	leave  
c00207f0:	c3                   	ret    
c00207f1:	66 90                	xchg   ax,ax
c00207f3:	90                   	nop

c00207f4 <APICTimer::close(int, int, void*)>:
c00207f4:	b8 00 00 00 00       	mov    eax,0x0
c00207f9:	c3                   	ret    
c00207fa:	66 90                	xchg   ax,ax

c00207fc <apicTimerHandler(regs*, void*)>:
c00207fc:	83 ec 0c             	sub    esp,0xc
c00207ff:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0020803:	8b 08                	mov    ecx,DWORD PTR [eax]
c0020805:	b8 10 27 00 00       	mov    eax,0x2710
c002080a:	ba 00 00 00 00       	mov    edx,0x0
c002080f:	f7 f1                	div    ecx
c0020811:	83 ec 0c             	sub    esp,0xc
c0020814:	50                   	push   eax
c0020815:	e8 73 ff fe ff       	call   c001078d <timerHandler(unsigned int)>
c002081a:	83 c4 10             	add    esp,0x10
c002081d:	90                   	nop
c002081e:	83 c4 0c             	add    esp,0xc
c0020821:	c3                   	ret    
c0020822:	66 90                	xchg   ax,ax

c0020824 <APICTimer::write(int)>:
c0020824:	83 ec 1c             	sub    esp,0x1c
c0020827:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002082b:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c002082f:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0020835:	a1 68 64 02 c0       	mov    eax,ds:0xc0026468
c002083a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0020840:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0020846:	83 ec 0c             	sub    esp,0xc
c0020849:	50                   	push   eax
c002084a:	e8 e1 f4 ff ff       	call   c001fd30 <APIC::getBase()>
c002084f:	83 c4 10             	add    esp,0x10
c0020852:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020856:	a1 8c 6a 02 c0       	mov    eax,ds:0xc0026a8c
c002085b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002085f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020863:	05 e0 03 00 00       	add    eax,0x3e0
c0020868:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c002086e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020872:	05 80 03 00 00       	add    eax,0x380
c0020877:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c002087d:	fb                   	sti    
c002087e:	66 90                	xchg   ax,ax
c0020880:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020884:	8d 90 10 27 00 00    	lea    edx,[eax+0x2710]
c002088a:	a1 8c 6a 02 c0       	mov    eax,ds:0xc0026a8c
c002088f:	39 c2                	cmp    edx,eax
c0020891:	76 05                	jbe    c0020898 <APICTimer::write(int)+0x74>
c0020893:	eb eb                	jmp    c0020880 <APICTimer::write(int)+0x5c>
c0020895:	8d 76 00             	lea    esi,[esi+0x0]
c0020898:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002089c:	05 20 03 00 00       	add    eax,0x320
c00208a1:	c7 00 00 00 01 00    	mov    DWORD PTR [eax],0x10000
c00208a7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00208ab:	05 90 03 00 00       	add    eax,0x390
c00208b0:	8b 00                	mov    eax,DWORD PTR [eax]
c00208b2:	f7 d0                	not    eax
c00208b4:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00208b8:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c00208bc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00208c0:	ba 00 00 00 00       	mov    edx,0x0
c00208c5:	f7 f1                	div    ecx
c00208c7:	89 04 24             	mov    DWORD PTR [esp],eax
c00208ca:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00208ce:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00208d4:	0d 00 00 02 00       	or     eax,0x20000
c00208d9:	89 c2                	mov    edx,eax
c00208db:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00208df:	05 20 03 00 00       	add    eax,0x320
c00208e4:	89 10                	mov    DWORD PTR [eax],edx
c00208e6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00208ea:	05 e0 03 00 00       	add    eax,0x3e0
c00208ef:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c00208f5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00208f9:	05 80 03 00 00       	add    eax,0x380
c00208fe:	89 c2                	mov    edx,eax
c0020900:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0020903:	89 02                	mov    DWORD PTR [edx],eax
c0020905:	90                   	nop
c0020906:	83 c4 1c             	add    esp,0x1c
c0020909:	c3                   	ret    
c002090a:	66 90                	xchg   ax,ax

c002090c <APICTimer::open(int, int, void*)>:
c002090c:	57                   	push   edi
c002090d:	56                   	push   esi
c002090e:	53                   	push   ebx
c002090f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020913:	8b 00                	mov    eax,DWORD PTR [eax]
c0020915:	83 c0 24             	add    eax,0x24
c0020918:	8b 00                	mov    eax,DWORD PTR [eax]
c002091a:	83 ec 08             	sub    esp,0x8
c002091d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020921:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020925:	ff d0                	call   eax
c0020927:	83 c4 10             	add    esp,0x10
c002092a:	a1 68 64 02 c0       	mov    eax,ds:0xc0026468
c002092f:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0020935:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c002093b:	83 ec 0c             	sub    esp,0xc
c002093e:	50                   	push   eax
c002093f:	e8 ec f3 ff ff       	call   c001fd30 <APIC::getBase()>
c0020944:	83 c4 10             	add    esp,0x10
c0020947:	8d 90 00 03 00 00    	lea    edx,[eax+0x300]
c002094d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020951:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0020957:	0f b6 f8             	movzx  edi,al
c002095a:	89 d0                	mov    eax,edx
c002095c:	ba 00 00 00 00       	mov    edx,0x0
c0020961:	89 c1                	mov    ecx,eax
c0020963:	80 e5 ff             	and    ch,0xff
c0020966:	89 cb                	mov    ebx,ecx
c0020968:	0f b6 f2             	movzx  esi,dl
c002096b:	89 d8                	mov    eax,ebx
c002096d:	89 f2                	mov    edx,esi
c002096f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0020973:	8d 5f 08             	lea    ebx,[edi+0x8]
c0020976:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c002097a:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c002097e:	83 e0 00             	and    eax,0x0
c0020981:	09 d0                	or     eax,edx
c0020983:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c0020987:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002098b:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0020991:	8d 50 01             	lea    edx,[eax+0x1]
c0020994:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0020998:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c002099e:	0f b6 d0             	movzx  edx,al
c00209a1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00209a5:	83 c2 08             	add    edx,0x8
c00209a8:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c00209ac:	0f b6 c9             	movzx  ecx,cl
c00209af:	81 c9 00 00 01 00    	or     ecx,0x10000
c00209b5:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c00209b9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00209bd:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00209c1:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c00209c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00209cb:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00209cf:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c00209d5:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00209d9:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c00209df:	83 ec 0c             	sub    esp,0xc
c00209e2:	51                   	push   ecx
c00209e3:	6a 01                	push   0x1
c00209e5:	68 fc 07 02 c0       	push   0xc00207fc
c00209ea:	52                   	push   edx
c00209eb:	50                   	push   eax
c00209ec:	e8 8d d4 fe ff       	call   c000de7e <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00209f1:	83 c4 20             	add    esp,0x20
c00209f4:	89 c2                	mov    edx,eax
c00209f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00209fa:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0020a00:	b8 00 00 00 00       	mov    eax,0x0
c0020a05:	5b                   	pop    ebx
c0020a06:	5e                   	pop    esi
c0020a07:	5f                   	pop    edi
c0020a08:	c3                   	ret    
c0020a09:	90                   	nop
c0020a0a:	66 90                	xchg   ax,ax

c0020a0c <APICTimer::APICTimer()>:
c0020a0c:	83 ec 0c             	sub    esp,0xc
c0020a0f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020a13:	83 ec 08             	sub    esp,0x8
c0020a16:	68 3c 56 02 c0       	push   0xc002563c
c0020a1b:	50                   	push   eax
c0020a1c:	e8 db fc fe ff       	call   c00106fc <Timer::Timer(char const*)>
c0020a21:	83 c4 10             	add    esp,0x10
c0020a24:	ba 50 56 02 c0       	mov    edx,0xc0025650
c0020a29:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020a2d:	89 10                	mov    DWORD PTR [eax],edx
c0020a2f:	90                   	nop
c0020a30:	83 c4 0c             	add    esp,0xc
c0020a33:	c3                   	ret    

c0020a34 <PIT::write(int)>:
c0020a34:	83 ec 10             	sub    esp,0x10
c0020a37:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0020a3b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0020a3f:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0020a45:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0020a49:	a3 a4 83 02 c0       	mov    ds:0xc00283a4,eax
c0020a4e:	b8 dc 34 12 00       	mov    eax,0x1234dc
c0020a53:	99                   	cdq    
c0020a54:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c0020a58:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020a5c:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c0020a63:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c0020a68:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c0020a6c:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c0020a71:	ee                   	out    dx,al
c0020a72:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020a76:	0f b6 c0             	movzx  eax,al
c0020a79:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c0020a80:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c0020a84:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c0020a88:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c0020a8d:	ee                   	out    dx,al
c0020a8e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020a92:	c1 f8 08             	sar    eax,0x8
c0020a95:	0f b6 c0             	movzx  eax,al
c0020a98:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c0020a9f:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0020aa3:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0020aa7:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0020aac:	ee                   	out    dx,al
c0020aad:	90                   	nop
c0020aae:	83 c4 10             	add    esp,0x10
c0020ab1:	c3                   	ret    
c0020ab2:	66 90                	xchg   ax,ax

c0020ab4 <pitHandler(regs*, void*)>:
c0020ab4:	83 ec 0c             	sub    esp,0xc
c0020ab7:	8b 0d a4 83 02 c0    	mov    ecx,DWORD PTR ds:0xc00283a4
c0020abd:	b8 a0 86 01 00       	mov    eax,0x186a0
c0020ac2:	99                   	cdq    
c0020ac3:	f7 f9                	idiv   ecx
c0020ac5:	83 ec 0c             	sub    esp,0xc
c0020ac8:	50                   	push   eax
c0020ac9:	e8 bf fc fe ff       	call   c001078d <timerHandler(unsigned int)>
c0020ace:	83 c4 10             	add    esp,0x10
c0020ad1:	90                   	nop
c0020ad2:	83 c4 0c             	add    esp,0xc
c0020ad5:	c3                   	ret    
c0020ad6:	66 90                	xchg   ax,ax

c0020ad8 <PIT::open(int, int, void*)>:
c0020ad8:	83 ec 0c             	sub    esp,0xc
c0020adb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020adf:	8b 00                	mov    eax,DWORD PTR [eax]
c0020ae1:	83 c0 24             	add    eax,0x24
c0020ae4:	8b 00                	mov    eax,DWORD PTR [eax]
c0020ae6:	83 ec 08             	sub    esp,0x8
c0020ae9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020aed:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020af1:	ff d0                	call   eax
c0020af3:	83 c4 10             	add    esp,0x10
c0020af6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020afa:	83 ec 0c             	sub    esp,0xc
c0020afd:	6a 00                	push   0x0
c0020aff:	6a 01                	push   0x1
c0020b01:	68 b4 0a 02 c0       	push   0xc0020ab4
c0020b06:	6a 00                	push   0x0
c0020b08:	50                   	push   eax
c0020b09:	e8 70 d3 fe ff       	call   c000de7e <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0020b0e:	83 c4 20             	add    esp,0x20
c0020b11:	89 c2                	mov    edx,eax
c0020b13:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020b17:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0020b1d:	b8 00 00 00 00       	mov    eax,0x0
c0020b22:	83 c4 0c             	add    esp,0xc
c0020b25:	c3                   	ret    
c0020b26:	66 90                	xchg   ax,ax

c0020b28 <PIT::close(int, int, void*)>:
c0020b28:	83 ec 0c             	sub    esp,0xc
c0020b2b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020b2f:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0020b39:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020b3d:	6a 01                	push   0x1
c0020b3f:	68 b4 0a 02 c0       	push   0xc0020ab4
c0020b44:	6a 00                	push   0x0
c0020b46:	50                   	push   eax
c0020b47:	e8 7c d3 fe ff       	call   c000dec8 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c0020b4c:	83 c4 10             	add    esp,0x10
c0020b4f:	b8 00 00 00 00       	mov    eax,0x0
c0020b54:	83 c4 0c             	add    esp,0xc
c0020b57:	c3                   	ret    

c0020b58 <PIT::PIT()>:
c0020b58:	83 ec 0c             	sub    esp,0xc
c0020b5b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020b5f:	83 ec 08             	sub    esp,0x8
c0020b62:	68 78 56 02 c0       	push   0xc0025678
c0020b67:	50                   	push   eax
c0020b68:	e8 8f fb fe ff       	call   c00106fc <Timer::Timer(char const*)>
c0020b6d:	83 c4 10             	add    esp,0x10
c0020b70:	ba a0 56 02 c0       	mov    edx,0xc00256a0
c0020b75:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020b79:	89 10                	mov    DWORD PTR [eax],edx
c0020b7b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020b7f:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0020b85:	0f b6 d0             	movzx  edx,al
c0020b88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020b8c:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c0020b93:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020b97:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0020b9d:	0f b6 d0             	movzx  edx,al
c0020ba0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020ba4:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c0020ba9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020bad:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0020bb3:	8d 50 01             	lea    edx,[eax+0x1]
c0020bb6:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0020bba:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0020bc0:	0f b6 d0             	movzx  edx,al
c0020bc3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020bc7:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0020bcb:	83 e1 3f             	and    ecx,0x3f
c0020bce:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0020bd2:	90                   	nop
c0020bd3:	83 c4 0c             	add    esp,0xc
c0020bd6:	c3                   	ret    
c0020bd7:	66 90                	xchg   ax,ax
c0020bd9:	66 90                	xchg   ax,ax
c0020bdb:	66 90                	xchg   ax,ax
c0020bdd:	66 90                	xchg   ax,ax
c0020bdf:	90                   	nop

c0020be0 <avxDetect>:
c0020be0:	b8 00 00 00 00       	mov    eax,0x0
c0020be5:	c3                   	ret    

c0020be6 <avxSave>:
c0020be6:	c3                   	ret    

c0020be7 <avxLoad>:
c0020be7:	c3                   	ret    

c0020be8 <avxInit>:
c0020be8:	c3                   	ret    

c0020be9 <avxClose>:
c0020be9:	c3                   	ret    

c0020bea <wouldSheSayYes>:
c0020bea:	c3                   	ret    
c0020beb:	49                   	dec    ecx
c0020bec:	20 6c 6f 76          	and    BYTE PTR [edi+ebp*2+0x76],ch
c0020bf0:	65 20 79 6f          	and    BYTE PTR gs:[ecx+0x6f],bh
c0020bf4:	75 20                	jne    c0020c16 <sseDetect.noSSE+0x1>
c0020bf6:	4e                   	dec    esi
c0020bf7:	79 61                	jns    c0020c5a <x87Detect+0x14>
c0020bf9:	68 2e 2e 2e 00       	push   0x2e2e2e
c0020bfe:	66 90                	xchg   ax,ax

c0020c00 <absolutelyNoChanceInHell>:
c0020c00:	b8 01 00 00 00       	mov    eax,0x1
c0020c05:	0f a2                	cpuid  
c0020c07:	f7 c2 00 00 00 02    	test   edx,0x2000000
c0020c0d:	74 06                	je     c0020c15 <sseDetect.noSSE>
c0020c0f:	b8 01 00 00 00       	mov    eax,0x1
c0020c14:	c3                   	ret    

c0020c15 <sseDetect.noSSE>:
c0020c15:	31 c0                	xor    eax,eax
c0020c17:	c3                   	ret    

c0020c18 <sseSave>:
c0020c18:	0f ae 44 24 04       	fxsave [esp+0x4]
c0020c1d:	c3                   	ret    

c0020c1e <sseLoad>:
c0020c1e:	0f ae 4c 24 04       	fxrstor [esp+0x4]
c0020c23:	c3                   	ret    

c0020c24 <sseInit>:
c0020c24:	e8 49 00 00 00       	call   c0020c72 <x87Init>
c0020c29:	0f 20 e0             	mov    eax,cr4
c0020c2c:	66 0d 00 06          	or     ax,0x600
c0020c30:	0f 22 e0             	mov    cr4,eax
c0020c33:	c3                   	ret    

c0020c34 <sseClose>:
c0020c34:	c3                   	ret    
c0020c35:	66 90                	xchg   ax,ax
c0020c37:	66 90                	xchg   ax,ax
c0020c39:	66 90                	xchg   ax,ax
c0020c3b:	66 90                	xchg   ax,ax
c0020c3d:	66 90                	xchg   ax,ax
c0020c3f:	90                   	nop

c0020c40 <value_37F>:
c0020c40:	7f 03                	jg     c0020c45 <value_37A+0x1>

c0020c42 <value_37E>:
c0020c42:	7e 03                	jle    c0020c47 <x87Detect+0x1>

c0020c44 <value_37A>:
c0020c44:	7a 03                	jp     c0020c49 <x87Detect+0x3>

c0020c46 <x87Detect>:
c0020c46:	b8 01 00 00 00       	mov    eax,0x1
c0020c4b:	0f a2                	cpuid  
c0020c4d:	f7 c2 01 00 00 00    	test   edx,0x1
c0020c53:	74 06                	je     c0020c5b <x87Detect.nox87>
c0020c55:	b8 01 00 00 00       	mov    eax,0x1
c0020c5a:	c3                   	ret    

c0020c5b <x87Detect.nox87>:
c0020c5b:	b8 00 00 00 00       	mov    eax,0x0
c0020c60:	c3                   	ret    

c0020c61 <x87Save>:
c0020c61:	55                   	push   ebp
c0020c62:	89 e5                	mov    ebp,esp
c0020c64:	9b dd 75 08          	fsave  [ebp+0x8]
c0020c68:	c9                   	leave  
c0020c69:	c3                   	ret    

c0020c6a <x87Load>:
c0020c6a:	55                   	push   ebp
c0020c6b:	89 e5                	mov    ebp,esp
c0020c6d:	dd 65 08             	frstor [ebp+0x8]
c0020c70:	c9                   	leave  
c0020c71:	c3                   	ret    

c0020c72 <x87Init>:
c0020c72:	9b db e3             	finit  
c0020c75:	0f 20 c0             	mov    eax,cr0
c0020c78:	66 25 fb ff          	and    ax,0xfffb
c0020c7c:	66 0d 22 00          	or     ax,0x22
c0020c80:	0f 22 c0             	mov    cr0,eax
c0020c83:	0f 06                	clts   
c0020c85:	d9 2d 44 0c 02 c0    	fldcw  WORD PTR ds:0xc0020c44
c0020c8b:	c3                   	ret    

c0020c8c <x87Close>:
c0020c8c:	c3                   	ret    
c0020c8d:	66 90                	xchg   ax,ax
c0020c8f:	90                   	nop

c0020c90 <__do_global_ctors_aux>:
c0020c90:	a1 2c 1e 02 c0       	mov    eax,ds:0xc0021e2c
c0020c95:	83 f8 ff             	cmp    eax,0xffffffff
c0020c98:	74 1a                	je     c0020cb4 <__do_global_ctors_aux+0x24>
c0020c9a:	55                   	push   ebp
c0020c9b:	89 e5                	mov    ebp,esp
c0020c9d:	53                   	push   ebx
c0020c9e:	52                   	push   edx
c0020c9f:	bb 2c 1e 02 c0       	mov    ebx,0xc0021e2c
c0020ca4:	ff d0                	call   eax
c0020ca6:	83 eb 04             	sub    ebx,0x4
c0020ca9:	8b 03                	mov    eax,DWORD PTR [ebx]
c0020cab:	83 f8 ff             	cmp    eax,0xffffffff
c0020cae:	75 f4                	jne    c0020ca4 <__do_global_ctors_aux+0x14>
c0020cb0:	58                   	pop    eax
c0020cb1:	5b                   	pop    ebx
c0020cb2:	5d                   	pop    ebp
c0020cb3:	c3                   	ret    
c0020cb4:	c3                   	ret    
c0020cb5:	66 90                	xchg   ax,ax
c0020cb7:	90                   	nop

c0020cb8 <__divdi3>:
c0020cb8:	55                   	push   ebp
c0020cb9:	57                   	push   edi
c0020cba:	56                   	push   esi
c0020cbb:	53                   	push   ebx
c0020cbc:	83 ec 1c             	sub    esp,0x1c
c0020cbf:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0020cc3:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0020cc7:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0020cca:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0020cce:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020cd2:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0020cd6:	85 db                	test   ebx,ebx
c0020cd8:	0f 88 8e 00 00 00    	js     c0020d6c <__divdi3+0xb4>
c0020cde:	89 dd                	mov    ebp,ebx
c0020ce0:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0020ce8:	89 d3                	mov    ebx,edx
c0020cea:	85 d2                	test   edx,edx
c0020cec:	79 0d                	jns    c0020cfb <__divdi3+0x43>
c0020cee:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c0020cf2:	f7 d8                	neg    eax
c0020cf4:	83 d2 00             	adc    edx,0x0
c0020cf7:	f7 da                	neg    edx
c0020cf9:	89 d3                	mov    ebx,edx
c0020cfb:	89 c7                	mov    edi,eax
c0020cfd:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0020d00:	85 db                	test   ebx,ebx
c0020d02:	75 48                	jne    c0020d4c <__divdi3+0x94>
c0020d04:	39 ef                	cmp    edi,ebp
c0020d06:	76 24                	jbe    c0020d2c <__divdi3+0x74>
c0020d08:	89 ea                	mov    edx,ebp
c0020d0a:	f7 f7                	div    edi
c0020d0c:	89 c1                	mov    ecx,eax
c0020d0e:	31 f6                	xor    esi,esi
c0020d10:	89 c8                	mov    eax,ecx
c0020d12:	89 f2                	mov    edx,esi
c0020d14:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0020d18:	85 c9                	test   ecx,ecx
c0020d1a:	74 07                	je     c0020d23 <__divdi3+0x6b>
c0020d1c:	f7 d8                	neg    eax
c0020d1e:	83 d2 00             	adc    edx,0x0
c0020d21:	f7 da                	neg    edx
c0020d23:	83 c4 1c             	add    esp,0x1c
c0020d26:	5b                   	pop    ebx
c0020d27:	5e                   	pop    esi
c0020d28:	5f                   	pop    edi
c0020d29:	5d                   	pop    ebp
c0020d2a:	c3                   	ret    
c0020d2b:	90                   	nop
c0020d2c:	85 ff                	test   edi,edi
c0020d2e:	75 0b                	jne    c0020d3b <__divdi3+0x83>
c0020d30:	b8 01 00 00 00       	mov    eax,0x1
c0020d35:	31 d2                	xor    edx,edx
c0020d37:	f7 f3                	div    ebx
c0020d39:	89 c7                	mov    edi,eax
c0020d3b:	31 d2                	xor    edx,edx
c0020d3d:	89 e8                	mov    eax,ebp
c0020d3f:	f7 f7                	div    edi
c0020d41:	89 c6                	mov    esi,eax
c0020d43:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0020d46:	f7 f7                	div    edi
c0020d48:	89 c1                	mov    ecx,eax
c0020d4a:	eb c4                	jmp    c0020d10 <__divdi3+0x58>
c0020d4c:	39 eb                	cmp    ebx,ebp
c0020d4e:	77 3c                	ja     c0020d8c <__divdi3+0xd4>
c0020d50:	0f bd f3             	bsr    esi,ebx
c0020d53:	83 f6 1f             	xor    esi,0x1f
c0020d56:	75 40                	jne    c0020d98 <__divdi3+0xe0>
c0020d58:	39 eb                	cmp    ebx,ebp
c0020d5a:	72 09                	jb     c0020d65 <__divdi3+0xad>
c0020d5c:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c0020d5f:	0f 87 97 00 00 00    	ja     c0020dfc <__divdi3+0x144>
c0020d65:	b9 01 00 00 00       	mov    ecx,0x1
c0020d6a:	eb a4                	jmp    c0020d10 <__divdi3+0x58>
c0020d6c:	f7 d9                	neg    ecx
c0020d6e:	83 d3 00             	adc    ebx,0x0
c0020d71:	f7 db                	neg    ebx
c0020d73:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0020d76:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0020d7a:	89 dd                	mov    ebp,ebx
c0020d7c:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c0020d84:	e9 5f ff ff ff       	jmp    c0020ce8 <__divdi3+0x30>
c0020d89:	8d 76 00             	lea    esi,[esi+0x0]
c0020d8c:	31 f6                	xor    esi,esi
c0020d8e:	31 c9                	xor    ecx,ecx
c0020d90:	e9 7b ff ff ff       	jmp    c0020d10 <__divdi3+0x58>
c0020d95:	8d 76 00             	lea    esi,[esi+0x0]
c0020d98:	b8 20 00 00 00       	mov    eax,0x20
c0020d9d:	29 f0                	sub    eax,esi
c0020d9f:	89 f1                	mov    ecx,esi
c0020da1:	d3 e3                	shl    ebx,cl
c0020da3:	89 fa                	mov    edx,edi
c0020da5:	88 c1                	mov    cl,al
c0020da7:	d3 ea                	shr    edx,cl
c0020da9:	09 da                	or     edx,ebx
c0020dab:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0020daf:	89 f1                	mov    ecx,esi
c0020db1:	d3 e7                	shl    edi,cl
c0020db3:	89 eb                	mov    ebx,ebp
c0020db5:	88 c1                	mov    cl,al
c0020db7:	d3 eb                	shr    ebx,cl
c0020db9:	89 f1                	mov    ecx,esi
c0020dbb:	d3 e5                	shl    ebp,cl
c0020dbd:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0020dc0:	88 c1                	mov    cl,al
c0020dc2:	d3 ea                	shr    edx,cl
c0020dc4:	09 d5                	or     ebp,edx
c0020dc6:	89 e8                	mov    eax,ebp
c0020dc8:	89 da                	mov    edx,ebx
c0020dca:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c0020dce:	89 d3                	mov    ebx,edx
c0020dd0:	89 c5                	mov    ebp,eax
c0020dd2:	f7 e7                	mul    edi
c0020dd4:	39 d3                	cmp    ebx,edx
c0020dd6:	72 18                	jb     c0020df0 <__divdi3+0x138>
c0020dd8:	74 0a                	je     c0020de4 <__divdi3+0x12c>
c0020dda:	89 e9                	mov    ecx,ebp
c0020ddc:	31 f6                	xor    esi,esi
c0020dde:	e9 2d ff ff ff       	jmp    c0020d10 <__divdi3+0x58>
c0020de3:	90                   	nop
c0020de4:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0020de7:	89 f1                	mov    ecx,esi
c0020de9:	d3 e7                	shl    edi,cl
c0020deb:	39 c7                	cmp    edi,eax
c0020ded:	73 eb                	jae    c0020dda <__divdi3+0x122>
c0020def:	90                   	nop
c0020df0:	8d 4d ff             	lea    ecx,[ebp-0x1]
c0020df3:	31 f6                	xor    esi,esi
c0020df5:	e9 16 ff ff ff       	jmp    c0020d10 <__divdi3+0x58>
c0020dfa:	66 90                	xchg   ax,ax
c0020dfc:	31 c9                	xor    ecx,ecx
c0020dfe:	e9 0d ff ff ff       	jmp    c0020d10 <__divdi3+0x58>
c0020e03:	90                   	nop

c0020e04 <__moddi3>:
c0020e04:	55                   	push   ebp
c0020e05:	57                   	push   edi
c0020e06:	56                   	push   esi
c0020e07:	53                   	push   ebx
c0020e08:	83 ec 2c             	sub    esp,0x2c
c0020e0b:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c0020e0f:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c0020e13:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0020e17:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0020e1b:	85 db                	test   ebx,ebx
c0020e1d:	0f 88 85 00 00 00    	js     c0020ea8 <__moddi3+0xa4>
c0020e23:	89 de                	mov    esi,ebx
c0020e25:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0020e2d:	89 d7                	mov    edi,edx
c0020e2f:	85 d2                	test   edx,edx
c0020e31:	79 09                	jns    c0020e3c <__moddi3+0x38>
c0020e33:	f7 d8                	neg    eax
c0020e35:	83 d2 00             	adc    edx,0x0
c0020e38:	f7 da                	neg    edx
c0020e3a:	89 d7                	mov    edi,edx
c0020e3c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020e40:	89 cd                	mov    ebp,ecx
c0020e42:	85 ff                	test   edi,edi
c0020e44:	75 52                	jne    c0020e98 <__moddi3+0x94>
c0020e46:	89 c3                	mov    ebx,eax
c0020e48:	39 f0                	cmp    eax,esi
c0020e4a:	76 24                	jbe    c0020e70 <__moddi3+0x6c>
c0020e4c:	89 c8                	mov    eax,ecx
c0020e4e:	89 f2                	mov    edx,esi
c0020e50:	f7 f3                	div    ebx
c0020e52:	89 d6                	mov    esi,edx
c0020e54:	89 f0                	mov    eax,esi
c0020e56:	31 d2                	xor    edx,edx
c0020e58:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0020e5c:	85 c9                	test   ecx,ecx
c0020e5e:	74 07                	je     c0020e67 <__moddi3+0x63>
c0020e60:	f7 d8                	neg    eax
c0020e62:	83 d2 00             	adc    edx,0x0
c0020e65:	f7 da                	neg    edx
c0020e67:	83 c4 2c             	add    esp,0x2c
c0020e6a:	5b                   	pop    ebx
c0020e6b:	5e                   	pop    esi
c0020e6c:	5f                   	pop    edi
c0020e6d:	5d                   	pop    ebp
c0020e6e:	c3                   	ret    
c0020e6f:	90                   	nop
c0020e70:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0020e74:	85 db                	test   ebx,ebx
c0020e76:	75 0d                	jne    c0020e85 <__moddi3+0x81>
c0020e78:	b8 01 00 00 00       	mov    eax,0x1
c0020e7d:	31 d2                	xor    edx,edx
c0020e7f:	f7 f7                	div    edi
c0020e81:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020e85:	89 f0                	mov    eax,esi
c0020e87:	31 d2                	xor    edx,edx
c0020e89:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0020e8d:	f7 f7                	div    edi
c0020e8f:	89 e8                	mov    eax,ebp
c0020e91:	f7 f7                	div    edi
c0020e93:	89 d6                	mov    esi,edx
c0020e95:	eb bd                	jmp    c0020e54 <__moddi3+0x50>
c0020e97:	90                   	nop
c0020e98:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0020e9c:	39 f7                	cmp    edi,esi
c0020e9e:	76 20                	jbe    c0020ec0 <__moddi3+0xbc>
c0020ea0:	89 c8                	mov    eax,ecx
c0020ea2:	89 f2                	mov    edx,esi
c0020ea4:	eb b2                	jmp    c0020e58 <__moddi3+0x54>
c0020ea6:	66 90                	xchg   ax,ax
c0020ea8:	f7 d9                	neg    ecx
c0020eaa:	83 d3 00             	adc    ebx,0x0
c0020ead:	f7 db                	neg    ebx
c0020eaf:	89 de                	mov    esi,ebx
c0020eb1:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c0020eb9:	e9 6f ff ff ff       	jmp    c0020e2d <__moddi3+0x29>
c0020ebe:	66 90                	xchg   ax,ax
c0020ec0:	0f bd c7             	bsr    eax,edi
c0020ec3:	83 f0 1f             	xor    eax,0x1f
c0020ec6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0020eca:	75 24                	jne    c0020ef0 <__moddi3+0xec>
c0020ecc:	39 f7                	cmp    edi,esi
c0020ece:	72 06                	jb     c0020ed6 <__moddi3+0xd2>
c0020ed0:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c0020ed4:	77 0c                	ja     c0020ee2 <__moddi3+0xde>
c0020ed6:	89 e9                	mov    ecx,ebp
c0020ed8:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c0020edc:	19 fe                	sbb    esi,edi
c0020ede:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0020ee2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0020ee6:	89 f2                	mov    edx,esi
c0020ee8:	e9 6b ff ff ff       	jmp    c0020e58 <__moddi3+0x54>
c0020eed:	8d 76 00             	lea    esi,[esi+0x0]
c0020ef0:	b8 20 00 00 00       	mov    eax,0x20
c0020ef5:	89 c2                	mov    edx,eax
c0020ef7:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0020efb:	29 da                	sub    edx,ebx
c0020efd:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0020f01:	88 d9                	mov    cl,bl
c0020f03:	d3 e7                	shl    edi,cl
c0020f05:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020f09:	88 d1                	mov    cl,dl
c0020f0b:	d3 e8                	shr    eax,cl
c0020f0d:	09 c7                	or     edi,eax
c0020f0f:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c0020f13:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0020f17:	89 d8                	mov    eax,ebx
c0020f19:	88 d9                	mov    cl,bl
c0020f1b:	d3 e7                	shl    edi,cl
c0020f1d:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0020f21:	89 f3                	mov    ebx,esi
c0020f23:	88 d1                	mov    cl,dl
c0020f25:	d3 eb                	shr    ebx,cl
c0020f27:	89 c7                	mov    edi,eax
c0020f29:	88 c1                	mov    cl,al
c0020f2b:	d3 e6                	shl    esi,cl
c0020f2d:	89 e8                	mov    eax,ebp
c0020f2f:	88 d1                	mov    cl,dl
c0020f31:	d3 e8                	shr    eax,cl
c0020f33:	09 f0                	or     eax,esi
c0020f35:	89 f9                	mov    ecx,edi
c0020f37:	d3 e5                	shl    ebp,cl
c0020f39:	89 da                	mov    edx,ebx
c0020f3b:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c0020f3f:	89 d3                	mov    ebx,edx
c0020f41:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0020f45:	89 c6                	mov    esi,eax
c0020f47:	89 d1                	mov    ecx,edx
c0020f49:	39 d3                	cmp    ebx,edx
c0020f4b:	72 27                	jb     c0020f74 <__moddi3+0x170>
c0020f4d:	74 21                	je     c0020f70 <__moddi3+0x16c>
c0020f4f:	29 f5                	sub    ebp,esi
c0020f51:	19 cb                	sbb    ebx,ecx
c0020f53:	89 de                	mov    esi,ebx
c0020f55:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c0020f59:	d3 e6                	shl    esi,cl
c0020f5b:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0020f5f:	89 f9                	mov    ecx,edi
c0020f61:	d3 ed                	shr    ebp,cl
c0020f63:	09 ee                	or     esi,ebp
c0020f65:	89 f0                	mov    eax,esi
c0020f67:	d3 eb                	shr    ebx,cl
c0020f69:	89 da                	mov    edx,ebx
c0020f6b:	e9 e8 fe ff ff       	jmp    c0020e58 <__moddi3+0x54>
c0020f70:	39 c5                	cmp    ebp,eax
c0020f72:	73 db                	jae    c0020f4f <__moddi3+0x14b>
c0020f74:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0020f78:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c0020f7c:	89 d1                	mov    ecx,edx
c0020f7e:	89 c6                	mov    esi,eax
c0020f80:	eb cd                	jmp    c0020f4f <__moddi3+0x14b>
c0020f82:	66 90                	xchg   ax,ax

c0020f84 <__udivdi3>:
c0020f84:	55                   	push   ebp
c0020f85:	57                   	push   edi
c0020f86:	56                   	push   esi
c0020f87:	53                   	push   ebx
c0020f88:	83 ec 1c             	sub    esp,0x1c
c0020f8b:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0020f8f:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0020f93:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0020f97:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0020f9b:	85 d2                	test   edx,edx
c0020f9d:	75 41                	jne    c0020fe0 <__udivdi3+0x5c>
c0020f9f:	39 f7                	cmp    edi,esi
c0020fa1:	76 15                	jbe    c0020fb8 <__udivdi3+0x34>
c0020fa3:	89 e8                	mov    eax,ebp
c0020fa5:	89 f2                	mov    edx,esi
c0020fa7:	f7 f7                	div    edi
c0020fa9:	31 db                	xor    ebx,ebx
c0020fab:	89 da                	mov    edx,ebx
c0020fad:	83 c4 1c             	add    esp,0x1c
c0020fb0:	5b                   	pop    ebx
c0020fb1:	5e                   	pop    esi
c0020fb2:	5f                   	pop    edi
c0020fb3:	5d                   	pop    ebp
c0020fb4:	c3                   	ret    
c0020fb5:	8d 76 00             	lea    esi,[esi+0x0]
c0020fb8:	89 f9                	mov    ecx,edi
c0020fba:	85 ff                	test   edi,edi
c0020fbc:	75 0b                	jne    c0020fc9 <__udivdi3+0x45>
c0020fbe:	b8 01 00 00 00       	mov    eax,0x1
c0020fc3:	31 d2                	xor    edx,edx
c0020fc5:	f7 f7                	div    edi
c0020fc7:	89 c1                	mov    ecx,eax
c0020fc9:	31 d2                	xor    edx,edx
c0020fcb:	89 f0                	mov    eax,esi
c0020fcd:	f7 f1                	div    ecx
c0020fcf:	89 c3                	mov    ebx,eax
c0020fd1:	89 e8                	mov    eax,ebp
c0020fd3:	f7 f1                	div    ecx
c0020fd5:	89 da                	mov    edx,ebx
c0020fd7:	83 c4 1c             	add    esp,0x1c
c0020fda:	5b                   	pop    ebx
c0020fdb:	5e                   	pop    esi
c0020fdc:	5f                   	pop    edi
c0020fdd:	5d                   	pop    ebp
c0020fde:	c3                   	ret    
c0020fdf:	90                   	nop
c0020fe0:	39 f2                	cmp    edx,esi
c0020fe2:	77 1c                	ja     c0021000 <__udivdi3+0x7c>
c0020fe4:	0f bd da             	bsr    ebx,edx
c0020fe7:	83 f3 1f             	xor    ebx,0x1f
c0020fea:	75 24                	jne    c0021010 <__udivdi3+0x8c>
c0020fec:	39 f2                	cmp    edx,esi
c0020fee:	72 08                	jb     c0020ff8 <__udivdi3+0x74>
c0020ff0:	39 ef                	cmp    edi,ebp
c0020ff2:	0f 87 84 00 00 00    	ja     c002107c <__udivdi3+0xf8>
c0020ff8:	b8 01 00 00 00       	mov    eax,0x1
c0020ffd:	eb ac                	jmp    c0020fab <__udivdi3+0x27>
c0020fff:	90                   	nop
c0021000:	31 db                	xor    ebx,ebx
c0021002:	31 c0                	xor    eax,eax
c0021004:	89 da                	mov    edx,ebx
c0021006:	83 c4 1c             	add    esp,0x1c
c0021009:	5b                   	pop    ebx
c002100a:	5e                   	pop    esi
c002100b:	5f                   	pop    edi
c002100c:	5d                   	pop    ebp
c002100d:	c3                   	ret    
c002100e:	66 90                	xchg   ax,ax
c0021010:	b8 20 00 00 00       	mov    eax,0x20
c0021015:	29 d8                	sub    eax,ebx
c0021017:	88 d9                	mov    cl,bl
c0021019:	d3 e2                	shl    edx,cl
c002101b:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c002101f:	89 fa                	mov    edx,edi
c0021021:	88 c1                	mov    cl,al
c0021023:	d3 ea                	shr    edx,cl
c0021025:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0021029:	09 d1                	or     ecx,edx
c002102b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c002102f:	88 d9                	mov    cl,bl
c0021031:	d3 e7                	shl    edi,cl
c0021033:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0021037:	89 f7                	mov    edi,esi
c0021039:	88 c1                	mov    cl,al
c002103b:	d3 ef                	shr    edi,cl
c002103d:	88 d9                	mov    cl,bl
c002103f:	d3 e6                	shl    esi,cl
c0021041:	89 ea                	mov    edx,ebp
c0021043:	88 c1                	mov    cl,al
c0021045:	d3 ea                	shr    edx,cl
c0021047:	09 d6                	or     esi,edx
c0021049:	89 f0                	mov    eax,esi
c002104b:	89 fa                	mov    edx,edi
c002104d:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0021051:	89 d7                	mov    edi,edx
c0021053:	89 c6                	mov    esi,eax
c0021055:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0021059:	39 d7                	cmp    edi,edx
c002105b:	72 13                	jb     c0021070 <__udivdi3+0xec>
c002105d:	74 09                	je     c0021068 <__udivdi3+0xe4>
c002105f:	89 f0                	mov    eax,esi
c0021061:	31 db                	xor    ebx,ebx
c0021063:	e9 43 ff ff ff       	jmp    c0020fab <__udivdi3+0x27>
c0021068:	88 d9                	mov    cl,bl
c002106a:	d3 e5                	shl    ebp,cl
c002106c:	39 c5                	cmp    ebp,eax
c002106e:	73 ef                	jae    c002105f <__udivdi3+0xdb>
c0021070:	8d 46 ff             	lea    eax,[esi-0x1]
c0021073:	31 db                	xor    ebx,ebx
c0021075:	e9 31 ff ff ff       	jmp    c0020fab <__udivdi3+0x27>
c002107a:	66 90                	xchg   ax,ax
c002107c:	31 c0                	xor    eax,eax
c002107e:	e9 28 ff ff ff       	jmp    c0020fab <__udivdi3+0x27>
c0021083:	90                   	nop

c0021084 <__umoddi3>:
c0021084:	55                   	push   ebp
c0021085:	57                   	push   edi
c0021086:	56                   	push   esi
c0021087:	53                   	push   ebx
c0021088:	83 ec 1c             	sub    esp,0x1c
c002108b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c002108f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0021093:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0021097:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c002109b:	89 da                	mov    edx,ebx
c002109d:	85 c0                	test   eax,eax
c002109f:	75 37                	jne    c00210d8 <__umoddi3+0x54>
c00210a1:	39 df                	cmp    edi,ebx
c00210a3:	76 13                	jbe    c00210b8 <__umoddi3+0x34>
c00210a5:	89 f0                	mov    eax,esi
c00210a7:	f7 f7                	div    edi
c00210a9:	89 d0                	mov    eax,edx
c00210ab:	31 d2                	xor    edx,edx
c00210ad:	83 c4 1c             	add    esp,0x1c
c00210b0:	5b                   	pop    ebx
c00210b1:	5e                   	pop    esi
c00210b2:	5f                   	pop    edi
c00210b3:	5d                   	pop    ebp
c00210b4:	c3                   	ret    
c00210b5:	8d 76 00             	lea    esi,[esi+0x0]
c00210b8:	89 fd                	mov    ebp,edi
c00210ba:	85 ff                	test   edi,edi
c00210bc:	75 0b                	jne    c00210c9 <__umoddi3+0x45>
c00210be:	b8 01 00 00 00       	mov    eax,0x1
c00210c3:	31 d2                	xor    edx,edx
c00210c5:	f7 f7                	div    edi
c00210c7:	89 c5                	mov    ebp,eax
c00210c9:	89 d8                	mov    eax,ebx
c00210cb:	31 d2                	xor    edx,edx
c00210cd:	f7 f5                	div    ebp
c00210cf:	89 f0                	mov    eax,esi
c00210d1:	f7 f5                	div    ebp
c00210d3:	89 d0                	mov    eax,edx
c00210d5:	eb d4                	jmp    c00210ab <__umoddi3+0x27>
c00210d7:	90                   	nop
c00210d8:	89 f1                	mov    ecx,esi
c00210da:	39 d8                	cmp    eax,ebx
c00210dc:	76 0a                	jbe    c00210e8 <__umoddi3+0x64>
c00210de:	89 f0                	mov    eax,esi
c00210e0:	83 c4 1c             	add    esp,0x1c
c00210e3:	5b                   	pop    ebx
c00210e4:	5e                   	pop    esi
c00210e5:	5f                   	pop    edi
c00210e6:	5d                   	pop    ebp
c00210e7:	c3                   	ret    
c00210e8:	0f bd e8             	bsr    ebp,eax
c00210eb:	83 f5 1f             	xor    ebp,0x1f
c00210ee:	75 1c                	jne    c002110c <__umoddi3+0x88>
c00210f0:	39 d8                	cmp    eax,ebx
c00210f2:	72 04                	jb     c00210f8 <__umoddi3+0x74>
c00210f4:	39 f7                	cmp    edi,esi
c00210f6:	77 08                	ja     c0021100 <__umoddi3+0x7c>
c00210f8:	89 da                	mov    edx,ebx
c00210fa:	29 fe                	sub    esi,edi
c00210fc:	19 c2                	sbb    edx,eax
c00210fe:	89 f1                	mov    ecx,esi
c0021100:	89 c8                	mov    eax,ecx
c0021102:	83 c4 1c             	add    esp,0x1c
c0021105:	5b                   	pop    ebx
c0021106:	5e                   	pop    esi
c0021107:	5f                   	pop    edi
c0021108:	5d                   	pop    ebp
c0021109:	c3                   	ret    
c002110a:	66 90                	xchg   ax,ax
c002110c:	ba 20 00 00 00       	mov    edx,0x20
c0021111:	29 ea                	sub    edx,ebp
c0021113:	89 e9                	mov    ecx,ebp
c0021115:	d3 e0                	shl    eax,cl
c0021117:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002111b:	89 f8                	mov    eax,edi
c002111d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0021121:	88 d1                	mov    cl,dl
c0021123:	d3 e8                	shr    eax,cl
c0021125:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0021129:	09 c1                	or     ecx,eax
c002112b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c002112f:	89 e9                	mov    ecx,ebp
c0021131:	d3 e7                	shl    edi,cl
c0021133:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0021137:	89 d8                	mov    eax,ebx
c0021139:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c002113d:	88 d1                	mov    cl,dl
c002113f:	d3 e8                	shr    eax,cl
c0021141:	89 c7                	mov    edi,eax
c0021143:	89 e9                	mov    ecx,ebp
c0021145:	d3 e3                	shl    ebx,cl
c0021147:	89 f0                	mov    eax,esi
c0021149:	88 d1                	mov    cl,dl
c002114b:	d3 e8                	shr    eax,cl
c002114d:	09 d8                	or     eax,ebx
c002114f:	89 e9                	mov    ecx,ebp
c0021151:	d3 e6                	shl    esi,cl
c0021153:	89 f3                	mov    ebx,esi
c0021155:	89 fa                	mov    edx,edi
c0021157:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c002115b:	89 d1                	mov    ecx,edx
c002115d:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0021161:	89 c6                	mov    esi,eax
c0021163:	89 d7                	mov    edi,edx
c0021165:	39 d1                	cmp    ecx,edx
c0021167:	72 27                	jb     c0021190 <__umoddi3+0x10c>
c0021169:	74 21                	je     c002118c <__umoddi3+0x108>
c002116b:	89 ca                	mov    edx,ecx
c002116d:	29 f3                	sub    ebx,esi
c002116f:	19 fa                	sbb    edx,edi
c0021171:	89 d0                	mov    eax,edx
c0021173:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0021177:	d3 e0                	shl    eax,cl
c0021179:	89 e9                	mov    ecx,ebp
c002117b:	d3 eb                	shr    ebx,cl
c002117d:	09 d8                	or     eax,ebx
c002117f:	d3 ea                	shr    edx,cl
c0021181:	83 c4 1c             	add    esp,0x1c
c0021184:	5b                   	pop    ebx
c0021185:	5e                   	pop    esi
c0021186:	5f                   	pop    edi
c0021187:	5d                   	pop    ebp
c0021188:	c3                   	ret    
c0021189:	8d 76 00             	lea    esi,[esi+0x0]
c002118c:	39 c3                	cmp    ebx,eax
c002118e:	73 db                	jae    c002116b <__umoddi3+0xe7>
c0021190:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0021194:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c0021198:	89 d7                	mov    edi,edx
c002119a:	89 c6                	mov    esi,eax
c002119c:	eb cd                	jmp    c002116b <__umoddi3+0xe7>

Disassembly of section .init:

c002119e <_init>:
c002119e:	55                   	push   ebp
c002119f:	89 e5                	mov    ebp,esp
c00211a1:	e8 72 ef fd ff       	call   c0000118 <frame_dummy>
c00211a6:	e8 e5 fa ff ff       	call   c0020c90 <__do_global_ctors_aux>
c00211ab:	5d                   	pop    ebp
c00211ac:	c3                   	ret    

Disassembly of section .fini:

c00211ad <_fini>:
c00211ad:	55                   	push   ebp
c00211ae:	89 e5                	mov    ebp,esp
c00211b0:	e8 f3 ee fd ff       	call   c00000a8 <__do_global_dtors_aux>
c00211b5:	5d                   	pop    ebp
c00211b6:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c00211b8 <Computer::~Computer()>:
c00211b8:	83 ec 0c             	sub    esp,0xc
c00211bb:	ba d4 27 02 c0       	mov    edx,0xc00227d4
c00211c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00211c4:	89 10                	mov    DWORD PTR [eax],edx
c00211c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00211ca:	83 ec 0c             	sub    esp,0xc
c00211cd:	50                   	push   eax
c00211ce:	e8 01 cc fe ff       	call   c000ddd4 <Device::~Device()>
c00211d3:	83 c4 10             	add    esp,0x10
c00211d6:	90                   	nop
c00211d7:	83 c4 0c             	add    esp,0xc
c00211da:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c00211dc <Computer::~Computer()>:
c00211dc:	83 ec 0c             	sub    esp,0xc
c00211df:	83 ec 0c             	sub    esp,0xc
c00211e2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00211e6:	e8 cd ff ff ff       	call   c00211b8 <Computer::~Computer()>
c00211eb:	83 c4 10             	add    esp,0x10
c00211ee:	83 ec 08             	sub    esp,0x8
c00211f1:	68 ec 01 00 00       	push   0x1ec
c00211f6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00211fa:	e8 df b7 fe ff       	call   c000c9de <operator delete(void*, unsigned long)>
c00211ff:	83 c4 10             	add    esp,0x10
c0021202:	83 c4 0c             	add    esp,0xc
c0021205:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c0021206 <idleCommon()>:
c0021206:	83 ec 0c             	sub    esp,0xc
c0021209:	fa                   	cli    
c002120a:	ff 05 28 79 02 c0    	inc    DWORD PTR ds:0xc0027928
c0021210:	e8 3f 6d ff ff       	call   c0017f54 <schedule()>
c0021215:	a1 28 79 02 c0       	mov    eax,ds:0xc0027928
c002121a:	48                   	dec    eax
c002121b:	a3 28 79 02 c0       	mov    ds:0xc0027928,eax
c0021220:	75 01                	jne    c0021223 <idleCommon()+0x1d>
c0021222:	fb                   	sti    
c0021223:	83 c4 0c             	add    esp,0xc
c0021226:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c0021228 <LinkedList<UnixFile>::~LinkedList()>:
c0021228:	90                   	nop
c0021229:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c002122a <LinkedList<UnixFile>::LinkedList()>:
c002122a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002122e:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0021234:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021238:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002123f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021243:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002124a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002124e:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0021254:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021258:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002125f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021263:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002126a:	90                   	nop
c002126b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c002126c <LinkedList<UnixFile>::addElement(UnixFile*)>:
c002126c:	83 ec 0c             	sub    esp,0xc
c002126f:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0021274:	75 10                	jne    c0021286 <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c0021276:	83 ec 0c             	sub    esp,0xc
c0021279:	68 24 2b 02 c0       	push   0xc0022b24
c002127e:	e8 fe 30 ff ff       	call   c0014381 <Krnl::panic(char const*)>
c0021283:	83 c4 10             	add    esp,0x10
c0021286:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002128a:	8b 00                	mov    eax,DWORD PTR [eax]
c002128c:	85 c0                	test   eax,eax
c002128e:	74 34                	je     c00212c4 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c0021290:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021294:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021297:	85 c0                	test   eax,eax
c0021299:	74 29                	je     c00212c4 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c002129b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002129f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00212a2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00212a6:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00212a9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00212ad:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00212b1:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00212b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00212b8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00212bb:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00212c2:	eb 65                	jmp    c0021329 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c00212c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00212c8:	8b 00                	mov    eax,DWORD PTR [eax]
c00212ca:	85 c0                	test   eax,eax
c00212cc:	75 4b                	jne    c0021319 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c00212ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00212d2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00212d5:	85 c0                	test   eax,eax
c00212d7:	75 40                	jne    c0021319 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c00212d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00212dd:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00212e1:	89 10                	mov    DWORD PTR [eax],edx
c00212e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00212e7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00212eb:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00212ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00212f2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00212f5:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00212fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021300:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0021303:	85 c0                	test   eax,eax
c0021305:	74 22                	je     c0021329 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0021307:	83 ec 0c             	sub    esp,0xc
c002130a:	68 46 2b 02 c0       	push   0xc0022b46
c002130f:	e8 6d 30 ff ff       	call   c0014381 <Krnl::panic(char const*)>
c0021314:	83 c4 10             	add    esp,0x10
c0021317:	eb 10                	jmp    c0021329 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0021319:	83 ec 0c             	sub    esp,0xc
c002131c:	68 50 2b 02 c0       	push   0xc0022b50
c0021321:	e8 5b 30 ff ff       	call   c0014381 <Krnl::panic(char const*)>
c0021326:	83 c4 10             	add    esp,0x10
c0021329:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002132d:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0021330:	8d 50 01             	lea    edx,[eax+0x1]
c0021333:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021337:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002133a:	90                   	nop
c002133b:	83 c4 0c             	add    esp,0xc
c002133e:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c0021340 <LinkedList<UnixFile>::getFirstElement()>:
c0021340:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021344:	8b 00                	mov    eax,DWORD PTR [eax]
c0021346:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c0021348 <LinkedList<UnixFile>::removeFirst()>:
c0021348:	83 ec 0c             	sub    esp,0xc
c002134b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002134f:	8b 00                	mov    eax,DWORD PTR [eax]
c0021351:	85 c0                	test   eax,eax
c0021353:	75 12                	jne    c0021367 <LinkedList<UnixFile>::removeFirst()+0x1f>
c0021355:	83 ec 0c             	sub    esp,0xc
c0021358:	68 5c 2b 02 c0       	push   0xc0022b5c
c002135d:	e8 1f 30 ff ff       	call   c0014381 <Krnl::panic(char const*)>
c0021362:	83 c4 10             	add    esp,0x10
c0021365:	eb 7e                	jmp    c00213e5 <LinkedList<UnixFile>::removeFirst()+0x9d>
c0021367:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002136b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002136e:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0021371:	85 c0                	test   eax,eax
c0021373:	74 10                	je     c0021385 <LinkedList<UnixFile>::removeFirst()+0x3d>
c0021375:	83 ec 0c             	sub    esp,0xc
c0021378:	68 a7 2b 02 c0       	push   0xc0022ba7
c002137d:	e8 ff 2f ff ff       	call   c0014381 <Krnl::panic(char const*)>
c0021382:	83 c4 10             	add    esp,0x10
c0021385:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021389:	8b 00                	mov    eax,DWORD PTR [eax]
c002138b:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002138e:	85 c0                	test   eax,eax
c0021390:	75 33                	jne    c00213c5 <LinkedList<UnixFile>::removeFirst()+0x7d>
c0021392:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021396:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002139c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00213a0:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00213a7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00213ab:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00213ae:	83 f8 01             	cmp    eax,0x1
c00213b1:	74 21                	je     c00213d4 <LinkedList<UnixFile>::removeFirst()+0x8c>
c00213b3:	83 ec 0c             	sub    esp,0xc
c00213b6:	68 80 2b 02 c0       	push   0xc0022b80
c00213bb:	e8 c1 2f ff ff       	call   c0014381 <Krnl::panic(char const*)>
c00213c0:	83 c4 10             	add    esp,0x10
c00213c3:	eb 0f                	jmp    c00213d4 <LinkedList<UnixFile>::removeFirst()+0x8c>
c00213c5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00213c9:	8b 00                	mov    eax,DWORD PTR [eax]
c00213cb:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c00213ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00213d2:	89 10                	mov    DWORD PTR [eax],edx
c00213d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00213d8:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00213db:	8d 50 ff             	lea    edx,[eax-0x1]
c00213de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00213e2:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00213e5:	83 c4 0c             	add    esp,0xc
c00213e8:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c00213ea <LinkedList<UnixFile>::getNext(UnixFile*)>:
c00213ea:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00213ee:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00213f1:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c00213f2 <DriverlessDevice::~DriverlessDevice()>:
c00213f2:	ba 1c 34 02 c0       	mov    edx,0xc002341c
c00213f7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00213fb:	89 10                	mov    DWORD PTR [eax],edx
c00213fd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021401:	50                   	push   eax
c0021402:	e8 cd c9 fe ff       	call   c000ddd4 <Device::~Device()>
c0021407:	83 c4 04             	add    esp,0x4
c002140a:	90                   	nop
c002140b:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c002140c <DriverlessDevice::~DriverlessDevice()>:
c002140c:	83 ec 0c             	sub    esp,0xc
c002140f:	83 ec 0c             	sub    esp,0xc
c0021412:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021416:	e8 d7 ff ff ff       	call   c00213f2 <DriverlessDevice::~DriverlessDevice()>
c002141b:	83 c4 10             	add    esp,0x10
c002141e:	83 ec 08             	sub    esp,0x8
c0021421:	68 58 01 00 00       	push   0x158
c0021426:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002142a:	e8 af b5 fe ff       	call   c000c9de <operator delete(void*, unsigned long)>
c002142f:	83 c4 10             	add    esp,0x10
c0021432:	83 c4 0c             	add    esp,0xc
c0021435:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c0021436 <LinkedList<Device>::addElement(Device*)>:
c0021436:	83 ec 0c             	sub    esp,0xc
c0021439:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c002143e:	75 10                	jne    c0021450 <LinkedList<Device>::addElement(Device*)+0x1a>
c0021440:	83 ec 0c             	sub    esp,0xc
c0021443:	68 24 2b 02 c0       	push   0xc0022b24
c0021448:	e8 34 2f ff ff       	call   c0014381 <Krnl::panic(char const*)>
c002144d:	83 c4 10             	add    esp,0x10
c0021450:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021454:	8b 00                	mov    eax,DWORD PTR [eax]
c0021456:	85 c0                	test   eax,eax
c0021458:	74 3a                	je     c0021494 <LinkedList<Device>::addElement(Device*)+0x5e>
c002145a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002145e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021461:	85 c0                	test   eax,eax
c0021463:	74 2f                	je     c0021494 <LinkedList<Device>::addElement(Device*)+0x5e>
c0021465:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021469:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002146c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0021470:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c0021476:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002147a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002147e:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0021481:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021485:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021488:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c0021492:	eb 68                	jmp    c00214fc <LinkedList<Device>::addElement(Device*)+0xc6>
c0021494:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021498:	8b 00                	mov    eax,DWORD PTR [eax]
c002149a:	85 c0                	test   eax,eax
c002149c:	75 4e                	jne    c00214ec <LinkedList<Device>::addElement(Device*)+0xb6>
c002149e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00214a2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00214a5:	85 c0                	test   eax,eax
c00214a7:	75 43                	jne    c00214ec <LinkedList<Device>::addElement(Device*)+0xb6>
c00214a9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00214ad:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00214b1:	89 10                	mov    DWORD PTR [eax],edx
c00214b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00214b7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00214bb:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00214be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00214c2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00214c5:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c00214cf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00214d3:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00214d6:	85 c0                	test   eax,eax
c00214d8:	74 22                	je     c00214fc <LinkedList<Device>::addElement(Device*)+0xc6>
c00214da:	83 ec 0c             	sub    esp,0xc
c00214dd:	68 46 2b 02 c0       	push   0xc0022b46
c00214e2:	e8 9a 2e ff ff       	call   c0014381 <Krnl::panic(char const*)>
c00214e7:	83 c4 10             	add    esp,0x10
c00214ea:	eb 10                	jmp    c00214fc <LinkedList<Device>::addElement(Device*)+0xc6>
c00214ec:	83 ec 0c             	sub    esp,0xc
c00214ef:	68 50 2b 02 c0       	push   0xc0022b50
c00214f4:	e8 88 2e ff ff       	call   c0014381 <Krnl::panic(char const*)>
c00214f9:	83 c4 10             	add    esp,0x10
c00214fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021500:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0021503:	8d 50 01             	lea    edx,[eax+0x1]
c0021506:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002150a:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002150d:	90                   	nop
c002150e:	83 c4 0c             	add    esp,0xc
c0021511:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c0021512 <LinkedList<Device>::LinkedList()>:
c0021512:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021516:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002151c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021520:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0021527:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002152b:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0021532:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021536:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002153c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021540:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0021547:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002154b:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0021552:	90                   	nop
c0021553:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c0021554 <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c0021554:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021558:	8b 00                	mov    eax,DWORD PTR [eax]
c002155a:	85 c0                	test   eax,eax
c002155c:	75 0e                	jne    c002156c <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c002155e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021562:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021565:	85 c0                	test   eax,eax
c0021567:	75 03                	jne    c002156c <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c0021569:	b0 01                	mov    al,0x1
c002156b:	c3                   	ret    
c002156c:	b0 00                	mov    al,0x0
c002156e:	90                   	nop
c002156f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c0021570 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c0021570:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021574:	8b 00                	mov    eax,DWORD PTR [eax]
c0021576:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c0021578 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c0021578:	83 ec 0c             	sub    esp,0xc
c002157b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002157f:	8b 00                	mov    eax,DWORD PTR [eax]
c0021581:	85 c0                	test   eax,eax
c0021583:	75 17                	jne    c002159c <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x24>
c0021585:	83 ec 0c             	sub    esp,0xc
c0021588:	68 5c 2b 02 c0       	push   0xc0022b5c
c002158d:	e8 ef 2d ff ff       	call   c0014381 <Krnl::panic(char const*)>
c0021592:	83 c4 10             	add    esp,0x10
c0021595:	e9 92 00 00 00       	jmp    c002162c <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xb4>
c002159a:	66 90                	xchg   ax,ax
c002159c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00215a0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00215a3:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00215a6:	85 c0                	test   eax,eax
c00215a8:	0f 95 c0             	setne  al
c00215ab:	84 c0                	test   al,al
c00215ad:	74 11                	je     c00215c0 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x48>
c00215af:	83 ec 0c             	sub    esp,0xc
c00215b2:	68 a7 2b 02 c0       	push   0xc0022ba7
c00215b7:	e8 c5 2d ff ff       	call   c0014381 <Krnl::panic(char const*)>
c00215bc:	83 c4 10             	add    esp,0x10
c00215bf:	90                   	nop
c00215c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00215c4:	8b 00                	mov    eax,DWORD PTR [eax]
c00215c6:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00215c9:	85 c0                	test   eax,eax
c00215cb:	0f 94 c0             	sete   al
c00215ce:	84 c0                	test   al,al
c00215d0:	74 36                	je     c0021608 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x90>
c00215d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00215d6:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00215dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00215e0:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00215e7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00215eb:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00215ee:	83 f8 01             	cmp    eax,0x1
c00215f1:	74 25                	je     c0021618 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa0>
c00215f3:	83 ec 0c             	sub    esp,0xc
c00215f6:	68 80 2b 02 c0       	push   0xc0022b80
c00215fb:	e8 81 2d ff ff       	call   c0014381 <Krnl::panic(char const*)>
c0021600:	83 c4 10             	add    esp,0x10
c0021603:	eb 13                	jmp    c0021618 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa0>
c0021605:	8d 76 00             	lea    esi,[esi+0x0]
c0021608:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002160c:	8b 00                	mov    eax,DWORD PTR [eax]
c002160e:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0021611:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021615:	89 10                	mov    DWORD PTR [eax],edx
c0021617:	90                   	nop
c0021618:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002161c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002161f:	8d 50 ff             	lea    edx,[eax-0x1]
c0021622:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021626:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0021629:	8d 76 00             	lea    esi,[esi+0x0]
c002162c:	83 c4 0c             	add    esp,0xc
c002162f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c0021630 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c0021630:	83 ec 0c             	sub    esp,0xc
c0021633:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0021638:	75 12                	jne    c002164c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1c>
c002163a:	83 ec 0c             	sub    esp,0xc
c002163d:	68 24 2b 02 c0       	push   0xc0022b24
c0021642:	e8 3a 2d ff ff       	call   c0014381 <Krnl::panic(char const*)>
c0021647:	83 c4 10             	add    esp,0x10
c002164a:	66 90                	xchg   ax,ax
c002164c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021650:	8b 00                	mov    eax,DWORD PTR [eax]
c0021652:	85 c0                	test   eax,eax
c0021654:	74 36                	je     c002168c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c0021656:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002165a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002165d:	85 c0                	test   eax,eax
c002165f:	74 2b                	je     c002168c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c0021661:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021665:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021668:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002166c:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c002166f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021673:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0021677:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c002167a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002167e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021681:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0021688:	eb 6a                	jmp    c00216f4 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c002168a:	66 90                	xchg   ax,ax
c002168c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021690:	8b 00                	mov    eax,DWORD PTR [eax]
c0021692:	85 c0                	test   eax,eax
c0021694:	75 4e                	jne    c00216e4 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c0021696:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002169a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002169d:	85 c0                	test   eax,eax
c002169f:	75 43                	jne    c00216e4 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c00216a1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00216a5:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00216a9:	89 10                	mov    DWORD PTR [eax],edx
c00216ab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00216af:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00216b3:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00216b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00216ba:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00216bd:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c00216c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00216c8:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00216cb:	85 c0                	test   eax,eax
c00216cd:	74 25                	je     c00216f4 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c00216cf:	83 ec 0c             	sub    esp,0xc
c00216d2:	68 46 2b 02 c0       	push   0xc0022b46
c00216d7:	e8 a5 2c ff ff       	call   c0014381 <Krnl::panic(char const*)>
c00216dc:	83 c4 10             	add    esp,0x10
c00216df:	eb 13                	jmp    c00216f4 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c00216e1:	8d 76 00             	lea    esi,[esi+0x0]
c00216e4:	83 ec 0c             	sub    esp,0xc
c00216e7:	68 50 2b 02 c0       	push   0xc0022b50
c00216ec:	e8 90 2c ff ff       	call   c0014381 <Krnl::panic(char const*)>
c00216f1:	83 c4 10             	add    esp,0x10
c00216f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00216f8:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00216fb:	8d 50 01             	lea    edx,[eax+0x1]
c00216fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021702:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0021705:	90                   	nop
c0021706:	83 c4 0c             	add    esp,0xc
c0021709:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c002170c <ACPI::~ACPI()>:
c002170c:	83 ec 0c             	sub    esp,0xc
c002170f:	ba ec 3e 02 c0       	mov    edx,0xc0023eec
c0021714:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021718:	89 10                	mov    DWORD PTR [eax],edx
c002171a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002171e:	83 ec 0c             	sub    esp,0xc
c0021721:	50                   	push   eax
c0021722:	e8 ad c6 fe ff       	call   c000ddd4 <Device::~Device()>
c0021727:	83 c4 10             	add    esp,0x10
c002172a:	90                   	nop
c002172b:	83 c4 0c             	add    esp,0xc
c002172e:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c0021730 <ACPI::~ACPI()>:
c0021730:	83 ec 0c             	sub    esp,0xc
c0021733:	83 ec 0c             	sub    esp,0xc
c0021736:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002173a:	e8 cd ff ff ff       	call   c002170c <ACPI::~ACPI()>
c002173f:	83 c4 10             	add    esp,0x10
c0021742:	83 ec 08             	sub    esp,0x8
c0021745:	68 64 12 00 00       	push   0x1264
c002174a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002174e:	e8 8b b2 fe ff       	call   c000c9de <operator delete(void*, unsigned long)>
c0021753:	83 c4 10             	add    esp,0x10
c0021756:	83 c4 0c             	add    esp,0xc
c0021759:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceED2Ev:

c002175c <LinkedList<Device>::~LinkedList()>:
c002175c:	90                   	nop
c002175d:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE7isEmptyEv:

c0021760 <LinkedList<Device>::isEmpty()>:
c0021760:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021764:	8b 00                	mov    eax,DWORD PTR [eax]
c0021766:	85 c0                	test   eax,eax
c0021768:	75 0e                	jne    c0021778 <LinkedList<Device>::isEmpty()+0x18>
c002176a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002176e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021771:	85 c0                	test   eax,eax
c0021773:	75 03                	jne    c0021778 <LinkedList<Device>::isEmpty()+0x18>
c0021775:	b0 01                	mov    al,0x1
c0021777:	c3                   	ret    
c0021778:	b0 00                	mov    al,0x0
c002177a:	90                   	nop
c002177b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE15getFirstElementEv:

c002177c <LinkedList<Device>::getFirstElement()>:
c002177c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021780:	8b 00                	mov    eax,DWORD PTR [eax]
c0021782:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE11removeFirstEv:

c0021784 <LinkedList<Device>::removeFirst()>:
c0021784:	83 ec 0c             	sub    esp,0xc
c0021787:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002178b:	8b 00                	mov    eax,DWORD PTR [eax]
c002178d:	85 c0                	test   eax,eax
c002178f:	75 17                	jne    c00217a8 <LinkedList<Device>::removeFirst()+0x24>
c0021791:	83 ec 0c             	sub    esp,0xc
c0021794:	68 5c 2b 02 c0       	push   0xc0022b5c
c0021799:	e8 e3 2b ff ff       	call   c0014381 <Krnl::panic(char const*)>
c002179e:	83 c4 10             	add    esp,0x10
c00217a1:	e9 92 00 00 00       	jmp    c0021838 <LinkedList<Device>::removeFirst()+0xb4>
c00217a6:	66 90                	xchg   ax,ax
c00217a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00217ac:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00217af:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c00217b5:	85 c0                	test   eax,eax
c00217b7:	74 13                	je     c00217cc <LinkedList<Device>::removeFirst()+0x48>
c00217b9:	83 ec 0c             	sub    esp,0xc
c00217bc:	68 a7 2b 02 c0       	push   0xc0022ba7
c00217c1:	e8 bb 2b ff ff       	call   c0014381 <Krnl::panic(char const*)>
c00217c6:	83 c4 10             	add    esp,0x10
c00217c9:	8d 76 00             	lea    esi,[esi+0x0]
c00217cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00217d0:	8b 00                	mov    eax,DWORD PTR [eax]
c00217d2:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c00217d8:	85 c0                	test   eax,eax
c00217da:	75 34                	jne    c0021810 <LinkedList<Device>::removeFirst()+0x8c>
c00217dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00217e0:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00217e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00217ea:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00217f1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00217f5:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00217f8:	83 f8 01             	cmp    eax,0x1
c00217fb:	74 27                	je     c0021824 <LinkedList<Device>::removeFirst()+0xa0>
c00217fd:	83 ec 0c             	sub    esp,0xc
c0021800:	68 80 2b 02 c0       	push   0xc0022b80
c0021805:	e8 77 2b ff ff       	call   c0014381 <Krnl::panic(char const*)>
c002180a:	83 c4 10             	add    esp,0x10
c002180d:	eb 15                	jmp    c0021824 <LinkedList<Device>::removeFirst()+0xa0>
c002180f:	90                   	nop
c0021810:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021814:	8b 00                	mov    eax,DWORD PTR [eax]
c0021816:	8b 90 48 01 00 00    	mov    edx,DWORD PTR [eax+0x148]
c002181c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021820:	89 10                	mov    DWORD PTR [eax],edx
c0021822:	66 90                	xchg   ax,ax
c0021824:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021828:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002182b:	8d 50 ff             	lea    edx,[eax-0x1]
c002182e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021832:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0021835:	8d 76 00             	lea    esi,[esi+0x0]
c0021838:	83 c4 0c             	add    esp,0xc
c002183b:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c002183c <CPU::~CPU()>:
c002183c:	83 ec 0c             	sub    esp,0xc
c002183f:	ba 88 42 02 c0       	mov    edx,0xc0024288
c0021844:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021848:	89 10                	mov    DWORD PTR [eax],edx
c002184a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002184e:	83 ec 0c             	sub    esp,0xc
c0021851:	50                   	push   eax
c0021852:	e8 7d c5 fe ff       	call   c000ddd4 <Device::~Device()>
c0021857:	83 c4 10             	add    esp,0x10
c002185a:	90                   	nop
c002185b:	83 c4 0c             	add    esp,0xc
c002185e:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c0021860 <CPU::~CPU()>:
c0021860:	83 ec 0c             	sub    esp,0xc
c0021863:	83 ec 0c             	sub    esp,0xc
c0021866:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002186a:	e8 cd ff ff ff       	call   c002183c <CPU::~CPU()>
c002186f:	83 c4 10             	add    esp,0x10
c0021872:	83 ec 08             	sub    esp,0x8
c0021875:	68 98 11 00 00       	push   0x1198
c002187a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002187e:	e8 5b b1 fe ff       	call   c000c9de <operator delete(void*, unsigned long)>
c0021883:	83 c4 10             	add    esp,0x10
c0021886:	83 c4 0c             	add    esp,0xc
c0021889:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c002188c <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c002188c:	90                   	nop
c002188d:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c0021890 <ThreadControlBlock::ThreadControlBlock()>:
c0021890:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021894:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c002189b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002189f:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c00218a6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00218aa:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c00218b1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00218b5:	c7 40 3c 00 00 00 00 	mov    DWORD PTR [eax+0x3c],0x0
c00218bc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00218c0:	c7 40 55 00 00 00 00 	mov    DWORD PTR [eax+0x55],0x0
c00218c7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00218cb:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c00218cf:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00218d3:	c6 40 5e 00          	mov    BYTE PTR [eax+0x5e],0x0
c00218d7:	90                   	nop
c00218d8:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c00218dc <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c00218dc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00218e0:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00218e6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00218ea:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00218f1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00218f5:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00218fc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021900:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0021906:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002190a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0021911:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021915:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002191c:	90                   	nop
c002191d:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c0021920 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c0021920:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021924:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0021927:	c3                   	ret    

Disassembly of section .text._ZN2Vm9_FPUStateC2Ev:

c0021928 <Vm::_FPUState::_FPUState()>:
c0021928:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002192c:	c7 40 44 00 00 00 00 	mov    DWORD PTR [eax+0x44],0x0
c0021933:	90                   	nop
c0021934:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c0021936 <PCI::~PCI()>:
c0021936:	83 ec 0c             	sub    esp,0xc
c0021939:	ba e8 4f 02 c0       	mov    edx,0xc0024fe8
c002193e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021942:	89 10                	mov    DWORD PTR [eax],edx
c0021944:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021948:	83 ec 0c             	sub    esp,0xc
c002194b:	50                   	push   eax
c002194c:	e8 53 be fe ff       	call   c000d7a4 <Bus::~Bus()>
c0021951:	83 c4 10             	add    esp,0x10
c0021954:	90                   	nop
c0021955:	83 c4 0c             	add    esp,0xc
c0021958:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c002195a <PCI::~PCI()>:
c002195a:	83 ec 0c             	sub    esp,0xc
c002195d:	83 ec 0c             	sub    esp,0xc
c0021960:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021964:	e8 cd ff ff ff       	call   c0021936 <PCI::~PCI()>
c0021969:	83 c4 10             	add    esp,0x10
c002196c:	83 ec 08             	sub    esp,0x8
c002196f:	68 5c 01 00 00       	push   0x15c
c0021974:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021978:	e8 61 b0 fe ff       	call   c000c9de <operator delete(void*, unsigned long)>
c002197d:	83 c4 10             	add    esp,0x10
c0021980:	83 c4 0c             	add    esp,0xc
c0021983:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c0021984 <IDE::~IDE()>:
c0021984:	83 ec 0c             	sub    esp,0xc
c0021987:	ba 9c 50 02 c0       	mov    edx,0xc002509c
c002198c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021990:	89 10                	mov    DWORD PTR [eax],edx
c0021992:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021996:	83 ec 0c             	sub    esp,0xc
c0021999:	50                   	push   eax
c002199a:	e8 4d c9 fe ff       	call   c000e2ec <HardDiskController::~HardDiskController()>
c002199f:	83 c4 10             	add    esp,0x10
c00219a2:	90                   	nop
c00219a3:	83 c4 0c             	add    esp,0xc
c00219a6:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c00219a8 <IDE::~IDE()>:
c00219a8:	83 ec 0c             	sub    esp,0xc
c00219ab:	83 ec 0c             	sub    esp,0xc
c00219ae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00219b2:	e8 cd ff ff ff       	call   c0021984 <IDE::~IDE()>
c00219b7:	83 c4 10             	add    esp,0x10
c00219ba:	83 ec 08             	sub    esp,0x8
c00219bd:	68 70 02 00 00       	push   0x270
c00219c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00219c6:	e8 13 b0 fe ff       	call   c000c9de <operator delete(void*, unsigned long)>
c00219cb:	83 c4 10             	add    esp,0x10
c00219ce:	83 c4 0c             	add    esp,0xc
c00219d1:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c00219d2 <SATABus::~SATABus()>:
c00219d2:	83 ec 0c             	sub    esp,0xc
c00219d5:	ba 14 51 02 c0       	mov    edx,0xc0025114
c00219da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00219de:	89 10                	mov    DWORD PTR [eax],edx
c00219e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00219e4:	83 ec 0c             	sub    esp,0xc
c00219e7:	50                   	push   eax
c00219e8:	e8 ff c8 fe ff       	call   c000e2ec <HardDiskController::~HardDiskController()>
c00219ed:	83 c4 10             	add    esp,0x10
c00219f0:	90                   	nop
c00219f1:	83 c4 0c             	add    esp,0xc
c00219f4:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c00219f6 <SATABus::~SATABus()>:
c00219f6:	83 ec 0c             	sub    esp,0xc
c00219f9:	83 ec 0c             	sub    esp,0xc
c00219fc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021a00:	e8 cd ff ff ff       	call   c00219d2 <SATABus::~SATABus()>
c0021a05:	83 c4 10             	add    esp,0x10
c0021a08:	83 ec 08             	sub    esp,0x8
c0021a0b:	68 64 01 00 00       	push   0x164
c0021a10:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021a14:	e8 c5 af fe ff       	call   c000c9de <operator delete(void*, unsigned long)>
c0021a19:	83 c4 10             	add    esp,0x10
c0021a1c:	83 c4 0c             	add    esp,0xc
c0021a1f:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c0021a20 <ATA::~ATA()>:
c0021a20:	83 ec 0c             	sub    esp,0xc
c0021a23:	ba 8c 51 02 c0       	mov    edx,0xc002518c
c0021a28:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021a2c:	89 10                	mov    DWORD PTR [eax],edx
c0021a2e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021a32:	83 ec 0c             	sub    esp,0xc
c0021a35:	50                   	push   eax
c0021a36:	e8 93 c9 fe ff       	call   c000e3ce <PhysicalDisk::~PhysicalDisk()>
c0021a3b:	83 c4 10             	add    esp,0x10
c0021a3e:	90                   	nop
c0021a3f:	83 c4 0c             	add    esp,0xc
c0021a42:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c0021a44 <ATA::~ATA()>:
c0021a44:	83 ec 0c             	sub    esp,0xc
c0021a47:	83 ec 0c             	sub    esp,0xc
c0021a4a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021a4e:	e8 cd ff ff ff       	call   c0021a20 <ATA::~ATA()>
c0021a53:	83 c4 10             	add    esp,0x10
c0021a56:	83 ec 08             	sub    esp,0x8
c0021a59:	68 7c 01 00 00       	push   0x17c
c0021a5e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021a62:	e8 77 af fe ff       	call   c000c9de <operator delete(void*, unsigned long)>
c0021a67:	83 c4 10             	add    esp,0x10
c0021a6a:	83 c4 0c             	add    esp,0xc
c0021a6d:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c0021a6e <ATAPI::~ATAPI()>:
c0021a6e:	83 ec 0c             	sub    esp,0xc
c0021a71:	ba c4 51 02 c0       	mov    edx,0xc00251c4
c0021a76:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021a7a:	89 10                	mov    DWORD PTR [eax],edx
c0021a7c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021a80:	83 ec 0c             	sub    esp,0xc
c0021a83:	50                   	push   eax
c0021a84:	e8 45 c9 fe ff       	call   c000e3ce <PhysicalDisk::~PhysicalDisk()>
c0021a89:	83 c4 10             	add    esp,0x10
c0021a8c:	90                   	nop
c0021a8d:	83 c4 0c             	add    esp,0xc
c0021a90:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c0021a92 <ATAPI::~ATAPI()>:
c0021a92:	83 ec 0c             	sub    esp,0xc
c0021a95:	83 ec 0c             	sub    esp,0xc
c0021a98:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021a9c:	e8 cd ff ff ff       	call   c0021a6e <ATAPI::~ATAPI()>
c0021aa1:	83 c4 10             	add    esp,0x10
c0021aa4:	83 ec 08             	sub    esp,0x8
c0021aa7:	68 80 01 00 00       	push   0x180
c0021aac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021ab0:	e8 29 af fe ff       	call   c000c9de <operator delete(void*, unsigned long)>
c0021ab5:	83 c4 10             	add    esp,0x10
c0021ab8:	83 c4 0c             	add    esp,0xc
c0021abb:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c0021abc <SATA::~SATA()>:
c0021abc:	83 ec 0c             	sub    esp,0xc
c0021abf:	ba 78 52 02 c0       	mov    edx,0xc0025278
c0021ac4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021ac8:	89 10                	mov    DWORD PTR [eax],edx
c0021aca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021ace:	83 ec 0c             	sub    esp,0xc
c0021ad1:	50                   	push   eax
c0021ad2:	e8 f7 c8 fe ff       	call   c000e3ce <PhysicalDisk::~PhysicalDisk()>
c0021ad7:	83 c4 10             	add    esp,0x10
c0021ada:	90                   	nop
c0021adb:	83 c4 0c             	add    esp,0xc
c0021ade:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c0021ae0 <SATA::~SATA()>:
c0021ae0:	83 ec 0c             	sub    esp,0xc
c0021ae3:	83 ec 0c             	sub    esp,0xc
c0021ae6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021aea:	e8 cd ff ff ff       	call   c0021abc <SATA::~SATA()>
c0021aef:	83 c4 10             	add    esp,0x10
c0021af2:	83 ec 08             	sub    esp,0x8
c0021af5:	68 7c 01 00 00       	push   0x17c
c0021afa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021afe:	e8 db ae fe ff       	call   c000c9de <operator delete(void*, unsigned long)>
c0021b03:	83 c4 10             	add    esp,0x10
c0021b06:	83 c4 0c             	add    esp,0xc
c0021b09:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID2Ev:

c0021b0a <SATAPI::~SATAPI()>:
c0021b0a:	83 ec 0c             	sub    esp,0xc
c0021b0d:	ba 54 53 02 c0       	mov    edx,0xc0025354
c0021b12:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021b16:	89 10                	mov    DWORD PTR [eax],edx
c0021b18:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021b1c:	83 ec 0c             	sub    esp,0xc
c0021b1f:	50                   	push   eax
c0021b20:	e8 a9 c8 fe ff       	call   c000e3ce <PhysicalDisk::~PhysicalDisk()>
c0021b25:	83 c4 10             	add    esp,0x10
c0021b28:	90                   	nop
c0021b29:	83 c4 0c             	add    esp,0xc
c0021b2c:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID0Ev:

c0021b2e <SATAPI::~SATAPI()>:
c0021b2e:	83 ec 0c             	sub    esp,0xc
c0021b31:	83 ec 0c             	sub    esp,0xc
c0021b34:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021b38:	e8 cd ff ff ff       	call   c0021b0a <SATAPI::~SATAPI()>
c0021b3d:	83 c4 10             	add    esp,0x10
c0021b40:	83 ec 08             	sub    esp,0x8
c0021b43:	68 80 01 00 00       	push   0x180
c0021b48:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021b4c:	e8 8d ae fe ff       	call   c000c9de <operator delete(void*, unsigned long)>
c0021b51:	83 c4 10             	add    esp,0x10
c0021b54:	83 c4 0c             	add    esp,0xc
c0021b57:	c3                   	ret    

Disassembly of section .text._ZN3AVXD2Ev:

c0021b58 <AVX::~AVX()>:
c0021b58:	83 ec 0c             	sub    esp,0xc
c0021b5b:	ba 94 53 02 c0       	mov    edx,0xc0025394
c0021b60:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021b64:	89 10                	mov    DWORD PTR [eax],edx
c0021b66:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021b6a:	83 ec 0c             	sub    esp,0xc
c0021b6d:	50                   	push   eax
c0021b6e:	e8 e1 c8 fe ff       	call   c000e454 <FPU::~FPU()>
c0021b73:	83 c4 10             	add    esp,0x10
c0021b76:	90                   	nop
c0021b77:	83 c4 0c             	add    esp,0xc
c0021b7a:	c3                   	ret    

Disassembly of section .text._ZN3AVXD0Ev:

c0021b7c <AVX::~AVX()>:
c0021b7c:	83 ec 0c             	sub    esp,0xc
c0021b7f:	83 ec 0c             	sub    esp,0xc
c0021b82:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021b86:	e8 cd ff ff ff       	call   c0021b58 <AVX::~AVX()>
c0021b8b:	83 c4 10             	add    esp,0x10
c0021b8e:	83 ec 08             	sub    esp,0x8
c0021b91:	68 58 01 00 00       	push   0x158
c0021b96:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021b9a:	e8 3f ae fe ff       	call   c000c9de <operator delete(void*, unsigned long)>
c0021b9f:	83 c4 10             	add    esp,0x10
c0021ba2:	83 c4 0c             	add    esp,0xc
c0021ba5:	c3                   	ret    

Disassembly of section .text._ZN3MMXD2Ev:

c0021ba8 <MMX::~MMX()>:
c0021ba8:	83 ec 0c             	sub    esp,0xc
c0021bab:	ba d4 53 02 c0       	mov    edx,0xc00253d4
c0021bb0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021bb4:	89 10                	mov    DWORD PTR [eax],edx
c0021bb6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021bba:	83 ec 0c             	sub    esp,0xc
c0021bbd:	50                   	push   eax
c0021bbe:	e8 91 c8 fe ff       	call   c000e454 <FPU::~FPU()>
c0021bc3:	83 c4 10             	add    esp,0x10
c0021bc6:	90                   	nop
c0021bc7:	83 c4 0c             	add    esp,0xc
c0021bca:	c3                   	ret    

Disassembly of section .text._ZN3MMXD0Ev:

c0021bcc <MMX::~MMX()>:
c0021bcc:	83 ec 0c             	sub    esp,0xc
c0021bcf:	83 ec 0c             	sub    esp,0xc
c0021bd2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021bd6:	e8 cd ff ff ff       	call   c0021ba8 <MMX::~MMX()>
c0021bdb:	83 c4 10             	add    esp,0x10
c0021bde:	83 ec 08             	sub    esp,0x8
c0021be1:	68 58 01 00 00       	push   0x158
c0021be6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021bea:	e8 ef ad fe ff       	call   c000c9de <operator delete(void*, unsigned long)>
c0021bef:	83 c4 10             	add    esp,0x10
c0021bf2:	83 c4 0c             	add    esp,0xc
c0021bf5:	c3                   	ret    

Disassembly of section .text._ZN3SSED2Ev:

c0021bf8 <SSE::~SSE()>:
c0021bf8:	83 ec 0c             	sub    esp,0xc
c0021bfb:	ba 14 54 02 c0       	mov    edx,0xc0025414
c0021c00:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021c04:	89 10                	mov    DWORD PTR [eax],edx
c0021c06:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021c0a:	83 ec 0c             	sub    esp,0xc
c0021c0d:	50                   	push   eax
c0021c0e:	e8 41 c8 fe ff       	call   c000e454 <FPU::~FPU()>
c0021c13:	83 c4 10             	add    esp,0x10
c0021c16:	90                   	nop
c0021c17:	83 c4 0c             	add    esp,0xc
c0021c1a:	c3                   	ret    

Disassembly of section .text._ZN3SSED0Ev:

c0021c1c <SSE::~SSE()>:
c0021c1c:	83 ec 0c             	sub    esp,0xc
c0021c1f:	83 ec 0c             	sub    esp,0xc
c0021c22:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021c26:	e8 cd ff ff ff       	call   c0021bf8 <SSE::~SSE()>
c0021c2b:	83 c4 10             	add    esp,0x10
c0021c2e:	83 ec 08             	sub    esp,0x8
c0021c31:	68 58 01 00 00       	push   0x158
c0021c36:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021c3a:	e8 9f ad fe ff       	call   c000c9de <operator delete(void*, unsigned long)>
c0021c3f:	83 c4 10             	add    esp,0x10
c0021c42:	83 c4 0c             	add    esp,0xc
c0021c45:	c3                   	ret    

Disassembly of section .text._ZN3x87D2Ev:

c0021c48 <x87::~x87()>:
c0021c48:	83 ec 0c             	sub    esp,0xc
c0021c4b:	ba 54 54 02 c0       	mov    edx,0xc0025454
c0021c50:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021c54:	89 10                	mov    DWORD PTR [eax],edx
c0021c56:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021c5a:	83 ec 0c             	sub    esp,0xc
c0021c5d:	50                   	push   eax
c0021c5e:	e8 f1 c7 fe ff       	call   c000e454 <FPU::~FPU()>
c0021c63:	83 c4 10             	add    esp,0x10
c0021c66:	90                   	nop
c0021c67:	83 c4 0c             	add    esp,0xc
c0021c6a:	c3                   	ret    

Disassembly of section .text._ZN3x87D0Ev:

c0021c6c <x87::~x87()>:
c0021c6c:	83 ec 0c             	sub    esp,0xc
c0021c6f:	83 ec 0c             	sub    esp,0xc
c0021c72:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021c76:	e8 cd ff ff ff       	call   c0021c48 <x87::~x87()>
c0021c7b:	83 c4 10             	add    esp,0x10
c0021c7e:	83 ec 08             	sub    esp,0x8
c0021c81:	68 58 01 00 00       	push   0x158
c0021c86:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021c8a:	e8 4f ad fe ff       	call   c000c9de <operator delete(void*, unsigned long)>
c0021c8f:	83 c4 10             	add    esp,0x10
c0021c92:	83 c4 0c             	add    esp,0xc
c0021c95:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c0021c96 <IOAPIC::~IOAPIC()>:
c0021c96:	83 ec 0c             	sub    esp,0xc
c0021c99:	ba ac 55 02 c0       	mov    edx,0xc00255ac
c0021c9e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021ca2:	89 10                	mov    DWORD PTR [eax],edx
c0021ca4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021ca8:	83 ec 0c             	sub    esp,0xc
c0021cab:	50                   	push   eax
c0021cac:	e8 23 c1 fe ff       	call   c000ddd4 <Device::~Device()>
c0021cb1:	83 c4 10             	add    esp,0x10
c0021cb4:	90                   	nop
c0021cb5:	83 c4 0c             	add    esp,0xc
c0021cb8:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c0021cba <IOAPIC::~IOAPIC()>:
c0021cba:	83 ec 0c             	sub    esp,0xc
c0021cbd:	83 ec 0c             	sub    esp,0xc
c0021cc0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021cc4:	e8 cd ff ff ff       	call   c0021c96 <IOAPIC::~IOAPIC()>
c0021cc9:	83 c4 10             	add    esp,0x10
c0021ccc:	83 ec 08             	sub    esp,0x8
c0021ccf:	68 68 01 00 00       	push   0x168
c0021cd4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021cd8:	e8 01 ad fe ff       	call   c000c9de <operator delete(void*, unsigned long)>
c0021cdd:	83 c4 10             	add    esp,0x10
c0021ce0:	83 c4 0c             	add    esp,0xc
c0021ce3:	c3                   	ret    

Disassembly of section .text._ZN4APICD2Ev:

c0021ce4 <APIC::~APIC()>:
c0021ce4:	83 ec 0c             	sub    esp,0xc
c0021ce7:	ba 64 55 02 c0       	mov    edx,0xc0025564
c0021cec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021cf0:	89 10                	mov    DWORD PTR [eax],edx
c0021cf2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021cf6:	83 ec 0c             	sub    esp,0xc
c0021cf9:	50                   	push   eax
c0021cfa:	e8 29 cc fe ff       	call   c000e928 <InterruptController::~InterruptController()>
c0021cff:	83 c4 10             	add    esp,0x10
c0021d02:	90                   	nop
c0021d03:	83 c4 0c             	add    esp,0xc
c0021d06:	c3                   	ret    

Disassembly of section .text._ZN4APICD0Ev:

c0021d08 <APIC::~APIC()>:
c0021d08:	83 ec 0c             	sub    esp,0xc
c0021d0b:	83 ec 0c             	sub    esp,0xc
c0021d0e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021d12:	e8 cd ff ff ff       	call   c0021ce4 <APIC::~APIC()>
c0021d17:	83 c4 10             	add    esp,0x10
c0021d1a:	83 ec 08             	sub    esp,0x8
c0021d1d:	68 58 21 00 00       	push   0x2158
c0021d22:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021d26:	e8 b3 ac fe ff       	call   c000c9de <operator delete(void*, unsigned long)>
c0021d2b:	83 c4 10             	add    esp,0x10
c0021d2e:	83 c4 0c             	add    esp,0xc
c0021d31:	c3                   	ret    

Disassembly of section .text._ZN3PICD2Ev:

c0021d32 <PIC::~PIC()>:
c0021d32:	83 ec 0c             	sub    esp,0xc
c0021d35:	ba fc 55 02 c0       	mov    edx,0xc00255fc
c0021d3a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021d3e:	89 10                	mov    DWORD PTR [eax],edx
c0021d40:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021d44:	83 ec 0c             	sub    esp,0xc
c0021d47:	50                   	push   eax
c0021d48:	e8 db cb fe ff       	call   c000e928 <InterruptController::~InterruptController()>
c0021d4d:	83 c4 10             	add    esp,0x10
c0021d50:	90                   	nop
c0021d51:	83 c4 0c             	add    esp,0xc
c0021d54:	c3                   	ret    

Disassembly of section .text._ZN3PICD0Ev:

c0021d56 <PIC::~PIC()>:
c0021d56:	83 ec 0c             	sub    esp,0xc
c0021d59:	83 ec 0c             	sub    esp,0xc
c0021d5c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021d60:	e8 cd ff ff ff       	call   c0021d32 <PIC::~PIC()>
c0021d65:	83 c4 10             	add    esp,0x10
c0021d68:	83 ec 08             	sub    esp,0x8
c0021d6b:	68 58 21 00 00       	push   0x2158
c0021d70:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021d74:	e8 65 ac fe ff       	call   c000c9de <operator delete(void*, unsigned long)>
c0021d79:	83 c4 10             	add    esp,0x10
c0021d7c:	83 c4 0c             	add    esp,0xc
c0021d7f:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c0021d80 <APICTimer::~APICTimer()>:
c0021d80:	83 ec 0c             	sub    esp,0xc
c0021d83:	ba 50 56 02 c0       	mov    edx,0xc0025650
c0021d88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021d8c:	89 10                	mov    DWORD PTR [eax],edx
c0021d8e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021d92:	83 ec 0c             	sub    esp,0xc
c0021d95:	50                   	push   eax
c0021d96:	e8 99 e9 fe ff       	call   c0010734 <Timer::~Timer()>
c0021d9b:	83 c4 10             	add    esp,0x10
c0021d9e:	90                   	nop
c0021d9f:	83 c4 0c             	add    esp,0xc
c0021da2:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c0021da4 <APICTimer::~APICTimer()>:
c0021da4:	83 ec 0c             	sub    esp,0xc
c0021da7:	83 ec 0c             	sub    esp,0xc
c0021daa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021dae:	e8 cd ff ff ff       	call   c0021d80 <APICTimer::~APICTimer()>
c0021db3:	83 c4 10             	add    esp,0x10
c0021db6:	83 ec 08             	sub    esp,0x8
c0021db9:	68 60 01 00 00       	push   0x160
c0021dbe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021dc2:	e8 17 ac fe ff       	call   c000c9de <operator delete(void*, unsigned long)>
c0021dc7:	83 c4 10             	add    esp,0x10
c0021dca:	83 c4 0c             	add    esp,0xc
c0021dcd:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c0021dd0 <PIT::~PIT()>:
c0021dd0:	83 ec 0c             	sub    esp,0xc
c0021dd3:	ba a0 56 02 c0       	mov    edx,0xc00256a0
c0021dd8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021ddc:	89 10                	mov    DWORD PTR [eax],edx
c0021dde:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021de2:	83 ec 0c             	sub    esp,0xc
c0021de5:	50                   	push   eax
c0021de6:	e8 49 e9 fe ff       	call   c0010734 <Timer::~Timer()>
c0021deb:	83 c4 10             	add    esp,0x10
c0021dee:	90                   	nop
c0021def:	83 c4 0c             	add    esp,0xc
c0021df2:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c0021df4 <PIT::~PIT()>:
c0021df4:	83 ec 0c             	sub    esp,0xc
c0021df7:	83 ec 0c             	sub    esp,0xc
c0021dfa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021dfe:	e8 cd ff ff ff       	call   c0021dd0 <PIT::~PIT()>
c0021e03:	83 c4 10             	add    esp,0x10
c0021e06:	83 ec 08             	sub    esp,0x8
c0021e09:	68 5c 01 00 00       	push   0x15c
c0021e0e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021e12:	e8 c7 ab fe ff       	call   c000c9de <operator delete(void*, unsigned long)>
c0021e17:	83 c4 10             	add    esp,0x10
c0021e1a:	83 c4 0c             	add    esp,0xc
c0021e1d:	c3                   	ret    
