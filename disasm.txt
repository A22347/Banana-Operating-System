
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 f0 7a 00 00       	call   c0007b10 <KeEntryPoint>

c0000020 <deregister_tm_clones>:
c0000020:	b8 64 36 02 c0       	mov    eax,0xc0023664
c0000025:	3d 64 36 02 c0       	cmp    eax,0xc0023664
c000002a:	74 1c                	je     c0000048 <deregister_tm_clones+0x28>
c000002c:	b8 00 00 00 00       	mov    eax,0x0
c0000031:	85 c0                	test   eax,eax
c0000033:	74 13                	je     c0000048 <deregister_tm_clones+0x28>
c0000035:	55                   	push   ebp
c0000036:	89 e5                	mov    ebp,esp
c0000038:	83 ec 14             	sub    esp,0x14
c000003b:	68 64 36 02 c0       	push   0xc0023664
c0000040:	ff d0                	call   eax
c0000042:	83 c4 10             	add    esp,0x10
c0000045:	c9                   	leave  
c0000046:	c3                   	ret    
c0000047:	90                   	nop
c0000048:	c3                   	ret    
c0000049:	8d 76 00             	lea    esi,[esi+0x0]

c000004c <register_tm_clones>:
c000004c:	b8 64 36 02 c0       	mov    eax,0xc0023664
c0000051:	2d 64 36 02 c0       	sub    eax,0xc0023664
c0000056:	c1 f8 02             	sar    eax,0x2
c0000059:	89 c2                	mov    edx,eax
c000005b:	c1 ea 1f             	shr    edx,0x1f
c000005e:	01 d0                	add    eax,edx
c0000060:	d1 f8                	sar    eax,1
c0000062:	74 1c                	je     c0000080 <register_tm_clones+0x34>
c0000064:	ba 00 00 00 00       	mov    edx,0x0
c0000069:	85 d2                	test   edx,edx
c000006b:	74 13                	je     c0000080 <register_tm_clones+0x34>
c000006d:	55                   	push   ebp
c000006e:	89 e5                	mov    ebp,esp
c0000070:	83 ec 10             	sub    esp,0x10
c0000073:	50                   	push   eax
c0000074:	68 64 36 02 c0       	push   0xc0023664
c0000079:	ff d2                	call   edx
c000007b:	83 c4 10             	add    esp,0x10
c000007e:	c9                   	leave  
c000007f:	c3                   	ret    
c0000080:	c3                   	ret    
c0000081:	8d 76 00             	lea    esi,[esi+0x0]

c0000084 <__do_global_dtors_aux>:
c0000084:	80 3d c0 50 02 c0 00 	cmp    BYTE PTR ds:0xc00250c0,0x0
c000008b:	75 63                	jne    c00000f0 <__do_global_dtors_aux+0x6c>
c000008d:	55                   	push   ebp
c000008e:	89 e5                	mov    ebp,esp
c0000090:	56                   	push   esi
c0000091:	53                   	push   ebx
c0000092:	bb ec fd 01 c0       	mov    ebx,0xc001fdec
c0000097:	81 eb e8 fd 01 c0    	sub    ebx,0xc001fde8
c000009d:	c1 fb 02             	sar    ebx,0x2
c00000a0:	4b                   	dec    ebx
c00000a1:	be e8 fd 01 c0       	mov    esi,0xc001fde8
c00000a6:	a1 c4 50 02 c0       	mov    eax,ds:0xc00250c4
c00000ab:	39 d8                	cmp    eax,ebx
c00000ad:	73 13                	jae    c00000c2 <__do_global_dtors_aux+0x3e>
c00000af:	90                   	nop
c00000b0:	40                   	inc    eax
c00000b1:	a3 c4 50 02 c0       	mov    ds:0xc00250c4,eax
c00000b6:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000b9:	a1 c4 50 02 c0       	mov    eax,ds:0xc00250c4
c00000be:	39 d8                	cmp    eax,ebx
c00000c0:	72 ee                	jb     c00000b0 <__do_global_dtors_aux+0x2c>
c00000c2:	e8 59 ff ff ff       	call   c0000020 <deregister_tm_clones>
c00000c7:	b8 00 00 00 00       	mov    eax,0x0
c00000cc:	85 c0                	test   eax,eax
c00000ce:	74 10                	je     c00000e0 <__do_global_dtors_aux+0x5c>
c00000d0:	83 ec 0c             	sub    esp,0xc
c00000d3:	68 64 36 02 c0       	push   0xc0023664
c00000d8:	e8 23 ff ff 3f       	call   0 <SIG_STATE_STRUCT>
c00000dd:	83 c4 10             	add    esp,0x10
c00000e0:	c6 05 c0 50 02 c0 01 	mov    BYTE PTR ds:0xc00250c0,0x1
c00000e7:	8d 65 f8             	lea    esp,[ebp-0x8]
c00000ea:	5b                   	pop    ebx
c00000eb:	5e                   	pop    esi
c00000ec:	5d                   	pop    ebp
c00000ed:	c3                   	ret    
c00000ee:	66 90                	xchg   ax,ax
c00000f0:	c3                   	ret    
c00000f1:	8d 76 00             	lea    esi,[esi+0x0]

c00000f4 <frame_dummy>:
c00000f4:	b8 00 00 00 00       	mov    eax,0x0
c00000f9:	85 c0                	test   eax,eax
c00000fb:	74 1f                	je     c000011c <frame_dummy+0x28>
c00000fd:	55                   	push   ebp
c00000fe:	89 e5                	mov    ebp,esp
c0000100:	83 ec 10             	sub    esp,0x10
c0000103:	68 c8 50 02 c0       	push   0xc00250c8
c0000108:	68 64 36 02 c0       	push   0xc0023664
c000010d:	e8 ee fe ff 3f       	call   0 <SIG_STATE_STRUCT>
c0000112:	83 c4 10             	add    esp,0x10
c0000115:	c9                   	leave  
c0000116:	e9 31 ff ff ff       	jmp    c000004c <register_tm_clones>
c000011b:	90                   	nop
c000011c:	e9 2b ff ff ff       	jmp    c000004c <register_tm_clones>
c0000121:	66 90                	xchg   ax,ax
c0000123:	66 90                	xchg   ax,ax
c0000125:	66 90                	xchg   ax,ax
c0000127:	66 90                	xchg   ax,ax
c0000129:	66 90                	xchg   ax,ax
c000012b:	66 90                	xchg   ax,ax
c000012d:	66 90                	xchg   ax,ax
c000012f:	90                   	nop

c0000130 <manualPCIProbe>:
c0000130:	31 c0                	xor    eax,eax
c0000132:	66 ba f8 0c          	mov    dx,0xcf8
c0000136:	ed                   	in     eax,dx
c0000137:	89 c3                	mov    ebx,eax
c0000139:	b8 00 00 00 80       	mov    eax,0x80000000
c000013e:	ef                   	out    dx,eax
c000013f:	ed                   	in     eax,dx
c0000140:	3d 00 00 00 80       	cmp    eax,0x80000000
c0000145:	75 0a                	jne    c0000151 <manualPCIProbe.noMech1>
c0000147:	b8 01 00 00 00       	mov    eax,0x1
c000014c:	e9 26 00 00 00       	jmp    c0000177 <manualPCIProbe.gotPCI>

c0000151 <manualPCIProbe.noMech1>:
c0000151:	89 d8                	mov    eax,ebx
c0000153:	ef                   	out    dx,eax
c0000154:	66 ba f8 0c          	mov    dx,0xcf8
c0000158:	ec                   	in     al,dx
c0000159:	88 c3                	mov    bl,al
c000015b:	30 c0                	xor    al,al
c000015d:	ee                   	out    dx,al
c000015e:	ec                   	in     al,dx
c000015f:	84 c0                	test   al,al
c0000161:	75 15                	jne    c0000178 <manualPCIProbe.noPCI>
c0000163:	66 ba fa 0c          	mov    dx,0xcfa
c0000167:	ec                   	in     al,dx
c0000168:	88 c7                	mov    bh,al
c000016a:	30 c0                	xor    al,al
c000016c:	ee                   	out    dx,al
c000016d:	ec                   	in     al,dx
c000016e:	84 c0                	test   al,al
c0000170:	75 06                	jne    c0000178 <manualPCIProbe.noPCI>
c0000172:	b8 02 00 00 00       	mov    eax,0x2

c0000177 <manualPCIProbe.gotPCI>:
c0000177:	c3                   	ret    

c0000178 <manualPCIProbe.noPCI>:
c0000178:	31 c0                	xor    eax,eax
c000017a:	c3                   	ret    

c000017b <prepareTramp>:
c000017b:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c0000182:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c0000189:	50                   	push   eax
c000018a:	0f 20 d8             	mov    eax,cr3
c000018d:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c0000192:	58                   	pop    eax
c0000193:	c3                   	ret    

c0000194 <doTPAUSE>:
c0000194:	fb                   	sti    
c0000195:	31 c0                	xor    eax,eax
c0000197:	31 d2                	xor    edx,edx
c0000199:	66 0f ae f0          	tpause eax
c000019d:	c3                   	ret    

c000019e <hasLegacyFPU>:
c000019e:	0f 20 c2             	mov    edx,cr0
c00001a1:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c00001a7:	0f 22 c2             	mov    cr0,edx
c00001aa:	db e3                	fninit 
c00001ac:	dd 3d c1 01 00 c0    	fnstsw WORD PTR ds:0xc00001c1
c00001b2:	31 c0                	xor    eax,eax
c00001b4:	66 81 3d c1 01 00 c0 00 00 	cmp    WORD PTR ds:0xc00001c1,0x0
c00001bd:	75 01                	jne    c00001c0 <hasLegacyFPU.nofpu>

c00001bf <hasLegacyFPU.hasfpu>:
c00001bf:	40                   	inc    eax

c00001c0 <hasLegacyFPU.nofpu>:
c00001c0:	c3                   	ret    

c00001c1 <testword>:
c00001c1:	aa                   	stos   BYTE PTR es:[edi],al
c00001c2:	55                   	push   ebp

c00001c3 <is486>:
c00001c3:	0f 09                	wbinvd 
c00001c5:	31 c0                	xor    eax,eax
c00001c7:	40                   	inc    eax
c00001c8:	c3                   	ret    
c00001c9:	90                   	nop
c00001ca:	90                   	nop
c00001cb:	90                   	nop
c00001cc:	90                   	nop
c00001cd:	90                   	nop
c00001ce:	90                   	nop
c00001cf:	90                   	nop
c00001d0:	90                   	nop
c00001d1:	90                   	nop
c00001d2:	90                   	nop
c00001d3:	90                   	nop
c00001d4:	90                   	nop
c00001d5:	90                   	nop
c00001d6:	90                   	nop
c00001d7:	90                   	nop
c00001d8:	90                   	nop
c00001d9:	90                   	nop
c00001da:	90                   	nop
c00001db:	90                   	nop
c00001dc:	90                   	nop
c00001dd:	90                   	nop
c00001de:	90                   	nop
c00001df:	90                   	nop
c00001e0:	90                   	nop
c00001e1:	90                   	nop
c00001e2:	90                   	nop
c00001e3:	90                   	nop
c00001e4:	90                   	nop
c00001e5:	90                   	nop
c00001e6:	90                   	nop
c00001e7:	90                   	nop
c00001e8:	90                   	nop
c00001e9:	90                   	nop
c00001ea:	90                   	nop
c00001eb:	90                   	nop
c00001ec:	90                   	nop
c00001ed:	90                   	nop
c00001ee:	90                   	nop
c00001ef:	90                   	nop
c00001f0:	90                   	nop
c00001f1:	90                   	nop
c00001f2:	90                   	nop
c00001f3:	90                   	nop
c00001f4:	90                   	nop
c00001f5:	90                   	nop
c00001f6:	31 c0                	xor    eax,eax
c00001f8:	c3                   	ret    

c00001f9 <detectCPUID>:
c00001f9:	9c                   	pushf  
c00001fa:	9c                   	pushf  
c00001fb:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c0000202:	9d                   	popf   
c0000203:	9c                   	pushf  
c0000204:	58                   	pop    eax
c0000205:	33 04 24             	xor    eax,DWORD PTR [esp]
c0000208:	9d                   	popf   
c0000209:	25 00 00 20 00       	and    eax,0x200000
c000020e:	c3                   	ret    

c000020f <goToVM86>:
c000020f:	55                   	push   ebp
c0000210:	89 e5                	mov    ebp,esp
c0000212:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000215:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000218:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c000021b:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c000021e:	25 ff ff 00 00       	and    eax,0xffff
c0000223:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000229:	81 e1 ff ff 00 00    	and    ecx,0xffff
c000022f:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000235:	52                   	push   edx
c0000236:	51                   	push   ecx
c0000237:	68 02 02 02 00       	push   0x20202
c000023c:	53                   	push   ebx
c000023d:	50                   	push   eax
c000023e:	cf                   	iret   

c000023f <goToUsermode>:
c000023f:	55                   	push   ebp
c0000240:	89 e5                	mov    ebp,esp
c0000242:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000245:	66 b8 23 00          	mov    ax,0x23
c0000249:	66 8e d8             	mov    ds,ax
c000024c:	66 8e c0             	mov    es,ax
c000024f:	66 8e e0             	mov    fs,ax
c0000252:	66 8e e8             	mov    gs,ax
c0000255:	89 e0                	mov    eax,esp
c0000257:	68 23 00 00 00       	push   0x23
c000025c:	50                   	push   eax
c000025d:	68 02 02 00 00       	push   0x202
c0000262:	68 1b 00 00 00       	push   0x1b
c0000267:	53                   	push   ebx
c0000268:	cf                   	iret   

c0000269 <switchToThreadASMFirstTime>:
c0000269:	9c                   	pushf  
c000026a:	fa                   	cli    
c000026b:	50                   	push   eax
c000026c:	53                   	push   ebx
c000026d:	51                   	push   ecx
c000026e:	52                   	push   edx
c000026f:	56                   	push   esi
c0000270:	57                   	push   edi
c0000271:	55                   	push   ebp
c0000272:	e9 11 00 00 00       	jmp    c0000288 <commonThreadSwitch>

c0000277 <switchToThreadASM>:
c0000277:	9c                   	pushf  
c0000278:	50                   	push   eax
c0000279:	53                   	push   ebx
c000027a:	51                   	push   ecx
c000027b:	52                   	push   edx
c000027c:	56                   	push   esi
c000027d:	57                   	push   edi
c000027e:	55                   	push   ebp
c000027f:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0000285:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c0000288 <commonThreadSwitch>:
c0000288:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000028c:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0000292:	8b 06                	mov    eax,DWORD PTR [esi]
c0000294:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0000297:	0f 20 d9             	mov    ecx,cr3
c000029a:	39 c8                	cmp    eax,ecx
c000029c:	74 03                	je     c00002a1 <commonThreadSwitch.doneVAS>
c000029e:	0f 22 d8             	mov    cr3,eax

c00002a1 <commonThreadSwitch.doneVAS>:
c00002a1:	85 d2                	test   edx,edx
c00002a3:	75 11                	jne    c00002b6 <commonThreadSwitch.firstTime>
c00002a5:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c00002a8:	e8 33 50 01 00       	call   c00152e0 <changeTSS>
c00002ad:	5d                   	pop    ebp
c00002ae:	5f                   	pop    edi
c00002af:	5e                   	pop    esi
c00002b0:	5a                   	pop    edx
c00002b1:	59                   	pop    ecx
c00002b2:	5b                   	pop    ebx
c00002b3:	58                   	pop    eax
c00002b4:	9d                   	popf   
c00002b5:	c3                   	ret    

c00002b6 <commonThreadSwitch.firstTime>:
c00002b6:	fa                   	cli    
c00002b7:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00002ba:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c00002bf:	60                   	pusha  
c00002c0:	e8 08 a4 00 00       	call   c000a6cd <mapVASFirstTime>
c00002c5:	61                   	popa   
c00002c6:	89 c4                	mov    esp,eax
c00002c8:	56                   	push   esi
c00002c9:	52                   	push   edx
c00002ca:	e8 11 50 01 00       	call   c00152e0 <changeTSS>
c00002cf:	5a                   	pop    edx
c00002d0:	5e                   	pop    esi
c00002d1:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c00002d8:	5d                   	pop    ebp
c00002d9:	5f                   	pop    edi
c00002da:	5e                   	pop    esi
c00002db:	59                   	pop    ecx
c00002dc:	59                   	pop    ecx
c00002dd:	5b                   	pop    ebx
c00002de:	58                   	pop    eax
c00002df:	81 c4 04 00 00 00    	add    esp,0x4
c00002e5:	6a 02                	push   0x2
c00002e7:	9d                   	popf   
c00002e8:	52                   	push   edx
c00002e9:	e8 1e 55 01 00       	call   c001580c <taskStartupFunction>
c00002ee:	5a                   	pop    edx
c00002ef:	50                   	push   eax
c00002f0:	ff d2                	call   edx
c00002f2:	e8 dd 5b 01 00       	call   c0015ed4 <taskReturned>
c00002f7:	e9 fb ff ff ff       	jmp    c00002f7 <commonThreadSwitch.firstTime+0x41>

c00002fc <asmQuickAcquireLock>:
c00002fc:	55                   	push   ebp
c00002fd:	89 e5                	mov    ebp,esp
c00002ff:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c0000302 <asmQuickAcquireLock.retry>:
c0000302:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000307:	72 02                	jb     c000030b <asmQuickAcquireLock.spin_with_pause>
c0000309:	fa                   	cli    
c000030a:	c3                   	ret    

c000030b <asmQuickAcquireLock.spin_with_pause>:
c000030b:	f3 90                	pause  
c000030d:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000313:	75 f6                	jne    c000030b <asmQuickAcquireLock.spin_with_pause>
c0000315:	e9 e8 ff ff ff       	jmp    c0000302 <asmQuickAcquireLock.retry>

c000031a <asmQuickReleaseLock>:
c000031a:	55                   	push   ebp
c000031b:	89 e5                	mov    ebp,esp
c000031d:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c0000324:	5d                   	pop    ebp
c0000325:	c3                   	ret    

c0000326 <asmAcquireLock>:
c0000326:	55                   	push   ebp
c0000327:	89 e5                	mov    ebp,esp
c0000329:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c000032c <asmAcquireLock.retry>:
c000032c:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000331:	72 05                	jb     c0000338 <asmAcquireLock.spin_with_pause>
c0000333:	9c                   	pushf  
c0000334:	58                   	pop    eax
c0000335:	fa                   	cli    
c0000336:	5d                   	pop    ebp
c0000337:	c3                   	ret    

c0000338 <asmAcquireLock.spin_with_pause>:
c0000338:	f3 90                	pause  
c000033a:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000340:	75 f6                	jne    c0000338 <asmAcquireLock.spin_with_pause>
c0000342:	e9 e5 ff ff ff       	jmp    c000032c <asmAcquireLock.retry>

c0000347 <asmReleaseLock>:
c0000347:	55                   	push   ebp
c0000348:	89 e5                	mov    ebp,esp
c000034a:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c000034d:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0000350:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0000356:	52                   	push   edx
c0000357:	9d                   	popf   
c0000358:	5d                   	pop    ebp
c0000359:	c3                   	ret    

c000035a <loadGDT>:
c000035a:	0f 01 15 c0 5e 02 c0 	lgdtd  ds:0xc0025ec0
c0000361:	66 b8 10 00          	mov    ax,0x10
c0000365:	66 8e d8             	mov    ds,ax
c0000368:	66 8e c0             	mov    es,ax
c000036b:	66 8e e0             	mov    fs,ax
c000036e:	66 8e e8             	mov    gs,ax
c0000371:	66 8e d0             	mov    ss,ax
c0000374:	e9 00 00 00 00       	jmp    c0000379 <flush2>

c0000379 <flush2>:
c0000379:	c3                   	ret    

c000037a <memcpy>:
c000037a:	e9 59 0e 01 00       	jmp    c00111d8 <__not_memcpy>
c000037f:	90                   	nop

c0000380 <memcmp>:
c0000380:	56                   	push   esi
c0000381:	53                   	push   ebx
c0000382:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000386:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000038a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000038e:	85 f6                	test   esi,esi
c0000390:	74 21                	je     c00003b3 <memcmp+0x33>
c0000392:	8a 08                	mov    cl,BYTE PTR [eax]
c0000394:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c0000397:	38 d9                	cmp    cl,bl
c0000399:	75 25                	jne    c00003c0 <memcmp+0x40>
c000039b:	01 c6                	add    esi,eax
c000039d:	eb 0a                	jmp    c00003a9 <memcmp+0x29>
c000039f:	90                   	nop
c00003a0:	8a 08                	mov    cl,BYTE PTR [eax]
c00003a2:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c00003a5:	38 cb                	cmp    bl,cl
c00003a7:	75 17                	jne    c00003c0 <memcmp+0x40>
c00003a9:	83 c0 01             	add    eax,0x1
c00003ac:	83 c2 01             	add    edx,0x1
c00003af:	39 f0                	cmp    eax,esi
c00003b1:	75 ed                	jne    c00003a0 <memcmp+0x20>
c00003b3:	31 c0                	xor    eax,eax
c00003b5:	5b                   	pop    ebx
c00003b6:	5e                   	pop    esi
c00003b7:	c3                   	ret    
c00003b8:	90                   	nop
c00003b9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00003c0:	0f b6 c1             	movzx  eax,cl
c00003c3:	29 d8                	sub    eax,ebx
c00003c5:	5b                   	pop    ebx
c00003c6:	5e                   	pop    esi
c00003c7:	c3                   	ret    
c00003c8:	90                   	nop
c00003c9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]

c00003d0 <memmove>:
c00003d0:	55                   	push   ebp
c00003d1:	57                   	push   edi
c00003d2:	56                   	push   esi
c00003d3:	53                   	push   ebx
c00003d4:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c00003d8:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00003dc:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00003e0:	39 dd                	cmp    ebp,ebx
c00003e2:	0f 83 a8 00 00 00    	jae    c0000490 <memmove+0xc0>
c00003e8:	85 d2                	test   edx,edx
c00003ea:	0f 84 8c 00 00 00    	je     c000047c <memmove+0xac>
c00003f0:	8d 4b 04             	lea    ecx,[ebx+0x4]
c00003f3:	8d 75 04             	lea    esi,[ebp+0x4]
c00003f6:	39 cd                	cmp    ebp,ecx
c00003f8:	0f 93 c1             	setae  cl
c00003fb:	39 f3                	cmp    ebx,esi
c00003fd:	0f 93 c0             	setae  al
c0000400:	89 c6                	mov    esi,eax
c0000402:	31 c0                	xor    eax,eax
c0000404:	09 f1                	or     ecx,esi
c0000406:	8d 72 ff             	lea    esi,[edx-0x1]
c0000409:	83 fe 0c             	cmp    esi,0xc
c000040c:	0f 97 c0             	seta   al
c000040f:	89 c6                	mov    esi,eax
c0000411:	85 ce                	test   esi,ecx
c0000413:	0f 84 a7 00 00 00    	je     c00004c0 <memmove+0xf0>
c0000419:	89 e9                	mov    ecx,ebp
c000041b:	09 d9                	or     ecx,ebx
c000041d:	80 e1 03             	and    cl,0x3
c0000420:	0f 85 9a 00 00 00    	jne    c00004c0 <memmove+0xf0>
c0000426:	89 d7                	mov    edi,edx
c0000428:	89 d9                	mov    ecx,ebx
c000042a:	83 e7 fc             	and    edi,0xfffffffc
c000042d:	89 ee                	mov    esi,ebp
c000042f:	01 df                	add    edi,ebx
c0000431:	eb 0d                	jmp    c0000440 <memmove+0x70>
c0000433:	90                   	nop
c0000434:	90                   	nop
c0000435:	90                   	nop
c0000436:	90                   	nop
c0000437:	90                   	nop
c0000438:	90                   	nop
c0000439:	90                   	nop
c000043a:	90                   	nop
c000043b:	90                   	nop
c000043c:	90                   	nop
c000043d:	90                   	nop
c000043e:	90                   	nop
c000043f:	90                   	nop
c0000440:	8b 01                	mov    eax,DWORD PTR [ecx]
c0000442:	83 c6 04             	add    esi,0x4
c0000445:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c0000448:	83 c1 04             	add    ecx,0x4
c000044b:	39 f9                	cmp    ecx,edi
c000044d:	75 f1                	jne    c0000440 <memmove+0x70>
c000044f:	89 d1                	mov    ecx,edx
c0000451:	89 d7                	mov    edi,edx
c0000453:	83 e1 fc             	and    ecx,0xfffffffc
c0000456:	29 cf                	sub    edi,ecx
c0000458:	01 cb                	add    ebx,ecx
c000045a:	8d 74 0d 00          	lea    esi,[ebp+ecx*1+0x0]
c000045e:	39 ca                	cmp    edx,ecx
c0000460:	74 1a                	je     c000047c <memmove+0xac>
c0000462:	8a 03                	mov    al,BYTE PTR [ebx]
c0000464:	83 ff 01             	cmp    edi,0x1
c0000467:	88 06                	mov    BYTE PTR [esi],al
c0000469:	74 11                	je     c000047c <memmove+0xac>
c000046b:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c000046e:	83 ff 02             	cmp    edi,0x2
c0000471:	88 46 01             	mov    BYTE PTR [esi+0x1],al
c0000474:	74 06                	je     c000047c <memmove+0xac>
c0000476:	8a 43 02             	mov    al,BYTE PTR [ebx+0x2]
c0000479:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c000047c:	5b                   	pop    ebx
c000047d:	89 e8                	mov    eax,ebp
c000047f:	5e                   	pop    esi
c0000480:	5f                   	pop    edi
c0000481:	5d                   	pop    ebp
c0000482:	c3                   	ret    
c0000483:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000489:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000490:	76 ea                	jbe    c000047c <memmove+0xac>
c0000492:	85 d2                	test   edx,edx
c0000494:	74 e6                	je     c000047c <memmove+0xac>
c0000496:	83 eb 01             	sub    ebx,0x1
c0000499:	8d 4d ff             	lea    ecx,[ebp-0x1]
c000049c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c00004a0:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c00004a3:	88 04 11             	mov    BYTE PTR [ecx+edx*1],al
c00004a6:	83 ea 01             	sub    edx,0x1
c00004a9:	75 f5                	jne    c00004a0 <memmove+0xd0>
c00004ab:	5b                   	pop    ebx
c00004ac:	89 e8                	mov    eax,ebp
c00004ae:	5e                   	pop    esi
c00004af:	5f                   	pop    edi
c00004b0:	5d                   	pop    ebp
c00004b1:	c3                   	ret    
c00004b2:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00004b9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00004c0:	01 ea                	add    edx,ebp
c00004c2:	89 e9                	mov    ecx,ebp
c00004c4:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00004ca:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c00004d0:	8a 03                	mov    al,BYTE PTR [ebx]
c00004d2:	83 c1 01             	add    ecx,0x1
c00004d5:	88 41 ff             	mov    BYTE PTR [ecx-0x1],al
c00004d8:	83 c3 01             	add    ebx,0x1
c00004db:	39 d1                	cmp    ecx,edx
c00004dd:	75 f1                	jne    c00004d0 <memmove+0x100>
c00004df:	eb 9b                	jmp    c000047c <memmove+0xac>
c00004e1:	eb 0d                	jmp    c00004f0 <memset>
c00004e3:	90                   	nop
c00004e4:	90                   	nop
c00004e5:	90                   	nop
c00004e6:	90                   	nop
c00004e7:	90                   	nop
c00004e8:	90                   	nop
c00004e9:	90                   	nop
c00004ea:	90                   	nop
c00004eb:	90                   	nop
c00004ec:	90                   	nop
c00004ed:	90                   	nop
c00004ee:	90                   	nop
c00004ef:	90                   	nop

c00004f0 <memset>:
c00004f0:	57                   	push   edi
c00004f1:	56                   	push   esi
c00004f2:	53                   	push   ebx
c00004f3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00004f7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00004fb:	85 d2                	test   edx,edx
c00004fd:	74 1d                	je     c000051c <memset+0x2c>
c00004ff:	0f be 5c 24 14       	movsx  ebx,BYTE PTR [esp+0x14]
c0000504:	89 f7                	mov    edi,esi
c0000506:	83 fa 04             	cmp    edx,0x4
c0000509:	73 25                	jae    c0000530 <memset+0x40>
c000050b:	83 e2 03             	and    edx,0x3
c000050e:	74 0c                	je     c000051c <memset+0x2c>
c0000510:	31 c0                	xor    eax,eax
c0000512:	88 1c 07             	mov    BYTE PTR [edi+eax*1],bl
c0000515:	83 c0 01             	add    eax,0x1
c0000518:	39 d0                	cmp    eax,edx
c000051a:	72 f6                	jb     c0000512 <memset+0x22>
c000051c:	89 f0                	mov    eax,esi
c000051e:	5b                   	pop    ebx
c000051f:	5e                   	pop    esi
c0000520:	5f                   	pop    edi
c0000521:	c3                   	ret    
c0000522:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000529:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000530:	0f b6 c3             	movzx  eax,bl
c0000533:	88 c4                	mov    ah,al
c0000535:	89 c1                	mov    ecx,eax
c0000537:	c1 e1 10             	shl    ecx,0x10
c000053a:	09 c8                	or     eax,ecx
c000053c:	f7 c6 01 00 00 00    	test   esi,0x1
c0000542:	75 12                	jne    c0000556 <memset+0x66>
c0000544:	f7 c7 02 00 00 00    	test   edi,0x2
c000054a:	75 14                	jne    c0000560 <memset+0x70>
c000054c:	89 d1                	mov    ecx,edx
c000054e:	c1 e9 02             	shr    ecx,0x2
c0000551:	fc                   	cld    
c0000552:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0000554:	eb b5                	jmp    c000050b <memset+0x1b>
c0000556:	88 06                	mov    BYTE PTR [esi],al
c0000558:	8d 7e 01             	lea    edi,[esi+0x1]
c000055b:	83 ea 01             	sub    edx,0x1
c000055e:	eb e4                	jmp    c0000544 <memset+0x54>
c0000560:	66 89 07             	mov    WORD PTR [edi],ax
c0000563:	83 ea 02             	sub    edx,0x2
c0000566:	83 c7 02             	add    edi,0x2
c0000569:	eb e1                	jmp    c000054c <memset+0x5c>
c000056b:	90                   	nop
c000056c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]

c0000570 <strlen>:
c0000570:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0000574:	31 c0                	xor    eax,eax
c0000576:	80 3a 00             	cmp    BYTE PTR [edx],0x0
c0000579:	74 15                	je     c0000590 <strlen+0x20>
c000057b:	90                   	nop
c000057c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000580:	83 c0 01             	add    eax,0x1
c0000583:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c0000587:	75 f7                	jne    c0000580 <strlen+0x10>
c0000589:	c3                   	ret    
c000058a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000590:	c3                   	ret    
c0000591:	eb 0d                	jmp    c00005a0 <strpbrk>
c0000593:	90                   	nop
c0000594:	90                   	nop
c0000595:	90                   	nop
c0000596:	90                   	nop
c0000597:	90                   	nop
c0000598:	90                   	nop
c0000599:	90                   	nop
c000059a:	90                   	nop
c000059b:	90                   	nop
c000059c:	90                   	nop
c000059d:	90                   	nop
c000059e:	90                   	nop
c000059f:	90                   	nop

c00005a0 <strpbrk>:
c00005a0:	57                   	push   edi
c00005a1:	56                   	push   esi
c00005a2:	53                   	push   ebx
c00005a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00005a7:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00005ab:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00005ae:	85 db                	test   ebx,ebx
c00005b0:	74 36                	je     c00005e8 <strpbrk+0x48>
c00005b2:	0f be 37             	movsx  esi,BYTE PTR [edi]
c00005b5:	85 f6                	test   esi,esi
c00005b7:	74 25                	je     c00005de <strpbrk+0x3e>
c00005b9:	39 de                	cmp    esi,ebx
c00005bb:	74 2d                	je     c00005ea <strpbrk+0x4a>
c00005bd:	89 fa                	mov    edx,edi
c00005bf:	eb 13                	jmp    c00005d4 <strpbrk+0x34>
c00005c1:	eb 0d                	jmp    c00005d0 <strpbrk+0x30>
c00005c3:	90                   	nop
c00005c4:	90                   	nop
c00005c5:	90                   	nop
c00005c6:	90                   	nop
c00005c7:	90                   	nop
c00005c8:	90                   	nop
c00005c9:	90                   	nop
c00005ca:	90                   	nop
c00005cb:	90                   	nop
c00005cc:	90                   	nop
c00005cd:	90                   	nop
c00005ce:	90                   	nop
c00005cf:	90                   	nop
c00005d0:	39 d9                	cmp    ecx,ebx
c00005d2:	74 16                	je     c00005ea <strpbrk+0x4a>
c00005d4:	83 c2 01             	add    edx,0x1
c00005d7:	0f be 0a             	movsx  ecx,BYTE PTR [edx]
c00005da:	85 c9                	test   ecx,ecx
c00005dc:	75 f2                	jne    c00005d0 <strpbrk+0x30>
c00005de:	83 c0 01             	add    eax,0x1
c00005e1:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00005e4:	85 db                	test   ebx,ebx
c00005e6:	75 cd                	jne    c00005b5 <strpbrk+0x15>
c00005e8:	31 c0                	xor    eax,eax
c00005ea:	5b                   	pop    ebx
c00005eb:	5e                   	pop    esi
c00005ec:	5f                   	pop    edi
c00005ed:	c3                   	ret    
c00005ee:	66 90                	xchg   ax,ax

c00005f0 <strtok>:
c00005f0:	56                   	push   esi
c00005f1:	53                   	push   ebx
c00005f2:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00005f6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00005fa:	85 db                	test   ebx,ebx
c00005fc:	75 09                	jne    c0000607 <strtok+0x17>
c00005fe:	eb 30                	jmp    c0000630 <strtok+0x40>
c0000600:	83 c3 01             	add    ebx,0x1
c0000603:	c6 43 ff 00          	mov    BYTE PTR [ebx-0x1],0x0
c0000607:	56                   	push   esi
c0000608:	53                   	push   ebx
c0000609:	e8 92 ff ff ff       	call   c00005a0 <strpbrk>
c000060e:	5a                   	pop    edx
c000060f:	a3 e0 50 02 c0       	mov    ds:0xc00250e0,eax
c0000614:	59                   	pop    ecx
c0000615:	39 d8                	cmp    eax,ebx
c0000617:	74 e7                	je     c0000600 <strtok+0x10>
c0000619:	85 c0                	test   eax,eax
c000061b:	74 1d                	je     c000063a <strtok+0x4a>
c000061d:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0000620:	8d 50 01             	lea    edx,[eax+0x1]
c0000623:	89 d8                	mov    eax,ebx
c0000625:	89 15 e0 50 02 c0    	mov    DWORD PTR ds:0xc00250e0,edx
c000062b:	5b                   	pop    ebx
c000062c:	5e                   	pop    esi
c000062d:	c3                   	ret    
c000062e:	66 90                	xchg   ax,ax
c0000630:	8b 1d e0 50 02 c0    	mov    ebx,DWORD PTR ds:0xc00250e0
c0000636:	85 db                	test   ebx,ebx
c0000638:	75 cd                	jne    c0000607 <strtok+0x17>
c000063a:	31 c0                	xor    eax,eax
c000063c:	5b                   	pop    ebx
c000063d:	5e                   	pop    esi
c000063e:	c3                   	ret    
c000063f:	90                   	nop

c0000640 <strcpy>:
c0000640:	53                   	push   ebx
c0000641:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000645:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0000649:	89 c3                	mov    ebx,eax
c000064b:	8a 11                	mov    dl,BYTE PTR [ecx]
c000064d:	84 d2                	test   dl,dl
c000064f:	74 1d                	je     c000066e <strcpy+0x2e>
c0000651:	eb 0d                	jmp    c0000660 <strcpy+0x20>
c0000653:	90                   	nop
c0000654:	90                   	nop
c0000655:	90                   	nop
c0000656:	90                   	nop
c0000657:	90                   	nop
c0000658:	90                   	nop
c0000659:	90                   	nop
c000065a:	90                   	nop
c000065b:	90                   	nop
c000065c:	90                   	nop
c000065d:	90                   	nop
c000065e:	90                   	nop
c000065f:	90                   	nop
c0000660:	88 13                	mov    BYTE PTR [ebx],dl
c0000662:	83 c1 01             	add    ecx,0x1
c0000665:	83 c3 01             	add    ebx,0x1
c0000668:	8a 11                	mov    dl,BYTE PTR [ecx]
c000066a:	84 d2                	test   dl,dl
c000066c:	75 f2                	jne    c0000660 <strcpy+0x20>
c000066e:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0000671:	5b                   	pop    ebx
c0000672:	c3                   	ret    
c0000673:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000679:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000680 <strncpy>:
c0000680:	57                   	push   edi
c0000681:	56                   	push   esi
c0000682:	53                   	push   ebx
c0000683:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0000687:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000068b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000068f:	85 f6                	test   esi,esi
c0000691:	74 44                	je     c00006d7 <strncpy+0x57>
c0000693:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0000695:	8d 46 ff             	lea    eax,[esi-0x1]
c0000698:	8d 7a 01             	lea    edi,[edx+0x1]
c000069b:	88 0a                	mov    BYTE PTR [edx],cl
c000069d:	84 c9                	test   cl,cl
c000069f:	74 3f                	je     c00006e0 <strncpy+0x60>
c00006a1:	85 c0                	test   eax,eax
c00006a3:	74 32                	je     c00006d7 <strncpy+0x57>
c00006a5:	8d 4b 02             	lea    ecx,[ebx+0x2]
c00006a8:	8d 46 fe             	lea    eax,[esi-0x2]
c00006ab:	8a 5b 01             	mov    bl,BYTE PTR [ebx+0x1]
c00006ae:	8d 7a 02             	lea    edi,[edx+0x2]
c00006b1:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c00006b4:	84 db                	test   bl,bl
c00006b6:	75 1b                	jne    c00006d3 <strncpy+0x53>
c00006b8:	eb 26                	jmp    c00006e0 <strncpy+0x60>
c00006ba:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00006c0:	83 c1 01             	add    ecx,0x1
c00006c3:	83 c7 01             	add    edi,0x1
c00006c6:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00006c9:	83 e8 01             	sub    eax,0x1
c00006cc:	88 5f ff             	mov    BYTE PTR [edi-0x1],bl
c00006cf:	84 db                	test   bl,bl
c00006d1:	74 0d                	je     c00006e0 <strncpy+0x60>
c00006d3:	85 c0                	test   eax,eax
c00006d5:	75 e9                	jne    c00006c0 <strncpy+0x40>
c00006d7:	5b                   	pop    ebx
c00006d8:	89 d0                	mov    eax,edx
c00006da:	5e                   	pop    esi
c00006db:	5f                   	pop    edi
c00006dc:	c3                   	ret    
c00006dd:	8d 76 00             	lea    esi,[esi+0x0]
c00006e0:	85 c0                	test   eax,eax
c00006e2:	74 f3                	je     c00006d7 <strncpy+0x57>
c00006e4:	89 c3                	mov    ebx,eax
c00006e6:	83 f8 04             	cmp    eax,0x4
c00006e9:	73 25                	jae    c0000710 <strncpy+0x90>
c00006eb:	f6 c3 02             	test   bl,0x2
c00006ee:	74 08                	je     c00006f8 <strncpy+0x78>
c00006f0:	66 c7 07 00 00       	mov    WORD PTR [edi],0x0
c00006f5:	83 c7 02             	add    edi,0x2
c00006f8:	80 e3 01             	and    bl,0x1
c00006fb:	74 da                	je     c00006d7 <strncpy+0x57>
c00006fd:	c6 07 00             	mov    BYTE PTR [edi],0x0
c0000700:	89 d0                	mov    eax,edx
c0000702:	5b                   	pop    ebx
c0000703:	5e                   	pop    esi
c0000704:	5f                   	pop    edi
c0000705:	c3                   	ret    
c0000706:	8d 76 00             	lea    esi,[esi+0x0]
c0000709:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000710:	f7 c7 01 00 00 00    	test   edi,0x1
c0000716:	75 14                	jne    c000072c <strncpy+0xac>
c0000718:	f7 c7 02 00 00 00    	test   edi,0x2
c000071e:	75 17                	jne    c0000737 <strncpy+0xb7>
c0000720:	89 d9                	mov    ecx,ebx
c0000722:	c1 e9 02             	shr    ecx,0x2
c0000725:	fc                   	cld    
c0000726:	31 c0                	xor    eax,eax
c0000728:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c000072a:	eb bf                	jmp    c00006eb <strncpy+0x6b>
c000072c:	c6 07 00             	mov    BYTE PTR [edi],0x0
c000072f:	83 eb 01             	sub    ebx,0x1
c0000732:	83 c7 01             	add    edi,0x1
c0000735:	eb e1                	jmp    c0000718 <strncpy+0x98>
c0000737:	66 c7 07 00 00       	mov    WORD PTR [edi],0x0
c000073c:	83 eb 02             	sub    ebx,0x2
c000073f:	83 c7 02             	add    edi,0x2
c0000742:	eb dc                	jmp    c0000720 <strncpy+0xa0>
c0000744:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000074a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c0000750 <strcmp>:
c0000750:	57                   	push   edi
c0000751:	56                   	push   esi
c0000752:	53                   	push   ebx
c0000753:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0000757:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000075b:	8a 17                	mov    dl,BYTE PTR [edi]
c000075d:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0000760:	38 c2                	cmp    dl,al
c0000762:	75 32                	jne    c0000796 <strcmp+0x46>
c0000764:	85 c0                	test   eax,eax
c0000766:	74 28                	je     c0000790 <strcmp+0x40>
c0000768:	b8 01 00 00 00       	mov    eax,0x1
c000076d:	eb 08                	jmp    c0000777 <strcmp+0x27>
c000076f:	90                   	nop
c0000770:	83 c0 01             	add    eax,0x1
c0000773:	85 db                	test   ebx,ebx
c0000775:	74 19                	je     c0000790 <strcmp+0x40>
c0000777:	0f be 1c 07          	movsx  ebx,BYTE PTR [edi+eax*1]
c000077b:	8a 0c 06             	mov    cl,BYTE PTR [esi+eax*1]
c000077e:	89 da                	mov    edx,ebx
c0000780:	38 d9                	cmp    cl,bl
c0000782:	74 ec                	je     c0000770 <strcmp+0x20>
c0000784:	5b                   	pop    ebx
c0000785:	0f b6 c2             	movzx  eax,dl
c0000788:	0f b6 c9             	movzx  ecx,cl
c000078b:	5e                   	pop    esi
c000078c:	29 c8                	sub    eax,ecx
c000078e:	5f                   	pop    edi
c000078f:	c3                   	ret    
c0000790:	5b                   	pop    ebx
c0000791:	31 c0                	xor    eax,eax
c0000793:	5e                   	pop    esi
c0000794:	5f                   	pop    edi
c0000795:	c3                   	ret    
c0000796:	89 c1                	mov    ecx,eax
c0000798:	eb ea                	jmp    c0000784 <strcmp+0x34>
c000079a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]

c00007a0 <strchr>:
c00007a0:	53                   	push   ebx
c00007a1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00007a5:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00007a8:	85 db                	test   ebx,ebx
c00007aa:	74 22                	je     c00007ce <strchr+0x2e>
c00007ac:	0f be 54 24 0c       	movsx  edx,BYTE PTR [esp+0xc]
c00007b1:	39 d3                	cmp    ebx,edx
c00007b3:	74 1b                	je     c00007d0 <strchr+0x30>
c00007b5:	89 d1                	mov    ecx,edx
c00007b7:	eb 0b                	jmp    c00007c4 <strchr+0x24>
c00007b9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00007c0:	39 ca                	cmp    edx,ecx
c00007c2:	74 0c                	je     c00007d0 <strchr+0x30>
c00007c4:	83 c0 01             	add    eax,0x1
c00007c7:	0f be 10             	movsx  edx,BYTE PTR [eax]
c00007ca:	85 d2                	test   edx,edx
c00007cc:	75 f2                	jne    c00007c0 <strchr+0x20>
c00007ce:	31 c0                	xor    eax,eax
c00007d0:	5b                   	pop    ebx
c00007d1:	c3                   	ret    
c00007d2:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00007d9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c00007e0 <strncmp>:
c00007e0:	55                   	push   ebp
c00007e1:	57                   	push   edi
c00007e2:	56                   	push   esi
c00007e3:	53                   	push   ebx
c00007e4:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00007e8:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00007ec:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00007f0:	85 f6                	test   esi,esi
c00007f2:	74 35                	je     c0000829 <strncmp+0x49>
c00007f4:	8a 17                	mov    dl,BYTE PTR [edi]
c00007f6:	0f be 2b             	movsx  ebp,BYTE PTR [ebx]
c00007f9:	89 e9                	mov    ecx,ebp
c00007fb:	38 ca                	cmp    dl,cl
c00007fd:	75 31                	jne    c0000830 <strncmp+0x50>
c00007ff:	8d 47 01             	lea    eax,[edi+0x1]
c0000802:	85 ed                	test   ebp,ebp
c0000804:	74 23                	je     c0000829 <strncmp+0x49>
c0000806:	01 f7                	add    edi,esi
c0000808:	eb 18                	jmp    c0000822 <strncmp+0x42>
c000080a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000810:	0f be 30             	movsx  esi,BYTE PTR [eax]
c0000813:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0000815:	89 f2                	mov    edx,esi
c0000817:	38 d1                	cmp    cl,dl
c0000819:	75 15                	jne    c0000830 <strncmp+0x50>
c000081b:	83 c0 01             	add    eax,0x1
c000081e:	85 f6                	test   esi,esi
c0000820:	74 07                	je     c0000829 <strncmp+0x49>
c0000822:	83 c3 01             	add    ebx,0x1
c0000825:	39 c7                	cmp    edi,eax
c0000827:	75 e7                	jne    c0000810 <strncmp+0x30>
c0000829:	5b                   	pop    ebx
c000082a:	31 c0                	xor    eax,eax
c000082c:	5e                   	pop    esi
c000082d:	5f                   	pop    edi
c000082e:	5d                   	pop    ebp
c000082f:	c3                   	ret    
c0000830:	5b                   	pop    ebx
c0000831:	0f b6 c2             	movzx  eax,dl
c0000834:	5e                   	pop    esi
c0000835:	0f b6 c9             	movzx  ecx,cl
c0000838:	5f                   	pop    edi
c0000839:	29 c8                	sub    eax,ecx
c000083b:	5d                   	pop    ebp
c000083c:	c3                   	ret    
c000083d:	8d 76 00             	lea    esi,[esi+0x0]

c0000840 <strcat>:
c0000840:	56                   	push   esi
c0000841:	53                   	push   ebx
c0000842:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000846:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000084a:	89 c3                	mov    ebx,eax
c000084c:	eb 04                	jmp    c0000852 <strcat+0x12>
c000084e:	66 90                	xchg   ax,ax
c0000850:	89 d3                	mov    ebx,edx
c0000852:	8d 53 01             	lea    edx,[ebx+0x1]
c0000855:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000859:	75 f5                	jne    c0000850 <strcat+0x10>
c000085b:	31 d2                	xor    edx,edx
c000085d:	8d 76 00             	lea    esi,[esi+0x0]
c0000860:	8a 0c 16             	mov    cl,BYTE PTR [esi+edx*1]
c0000863:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c0000866:	83 c2 01             	add    edx,0x1
c0000869:	84 c9                	test   cl,cl
c000086b:	75 f3                	jne    c0000860 <strcat+0x20>
c000086d:	5b                   	pop    ebx
c000086e:	5e                   	pop    esi
c000086f:	c3                   	ret    

c0000870 <strncat>:
c0000870:	56                   	push   esi
c0000871:	53                   	push   ebx
c0000872:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000876:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000087a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000087e:	85 f6                	test   esi,esi
c0000880:	74 32                	je     c00008b4 <strncat+0x44>
c0000882:	89 c2                	mov    edx,eax
c0000884:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000088a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c0000890:	83 c2 01             	add    edx,0x1
c0000893:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000897:	75 f7                	jne    c0000890 <strncat+0x20>
c0000899:	01 ce                	add    esi,ecx
c000089b:	eb 0a                	jmp    c00008a7 <strncat+0x37>
c000089d:	8d 76 00             	lea    esi,[esi+0x0]
c00008a0:	39 f1                	cmp    ecx,esi
c00008a2:	74 1c                	je     c00008c0 <strncat+0x50>
c00008a4:	83 c2 01             	add    edx,0x1
c00008a7:	83 c1 01             	add    ecx,0x1
c00008aa:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00008ad:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00008b0:	84 db                	test   bl,bl
c00008b2:	75 ec                	jne    c00008a0 <strncat+0x30>
c00008b4:	5b                   	pop    ebx
c00008b5:	5e                   	pop    esi
c00008b6:	c3                   	ret    
c00008b7:	89 f6                	mov    esi,esi
c00008b9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00008c0:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00008c3:	5b                   	pop    ebx
c00008c4:	5e                   	pop    esi
c00008c5:	c3                   	ret    
c00008c6:	8d 76 00             	lea    esi,[esi+0x0]
c00008c9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c00008d0 <strstr>:
c00008d0:	57                   	push   edi
c00008d1:	56                   	push   esi
c00008d2:	53                   	push   ebx
c00008d3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00008d7:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00008db:	57                   	push   edi
c00008dc:	e8 8f fc ff ff       	call   c0000570 <strlen>
c00008e1:	59                   	pop    ecx
c00008e2:	85 c0                	test   eax,eax
c00008e4:	74 3a                	je     c0000920 <strstr+0x50>
c00008e6:	89 c6                	mov    esi,eax
c00008e8:	eb 18                	jmp    c0000902 <strstr+0x32>
c00008ea:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00008f0:	56                   	push   esi
c00008f1:	57                   	push   edi
c00008f2:	53                   	push   ebx
c00008f3:	e8 88 fa ff ff       	call   c0000380 <memcmp>
c00008f8:	83 c4 0c             	add    esp,0xc
c00008fb:	85 c0                	test   eax,eax
c00008fd:	74 21                	je     c0000920 <strstr+0x50>
c00008ff:	83 c3 01             	add    ebx,0x1
c0000902:	53                   	push   ebx
c0000903:	e8 68 fc ff ff       	call   c0000570 <strlen>
c0000908:	5a                   	pop    edx
c0000909:	39 f0                	cmp    eax,esi
c000090b:	73 e3                	jae    c00008f0 <strstr+0x20>
c000090d:	5b                   	pop    ebx
c000090e:	31 c0                	xor    eax,eax
c0000910:	5e                   	pop    esi
c0000911:	5f                   	pop    edi
c0000912:	c3                   	ret    
c0000913:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000919:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000920:	89 d8                	mov    eax,ebx
c0000922:	5b                   	pop    ebx
c0000923:	5e                   	pop    esi
c0000924:	5f                   	pop    edi
c0000925:	c3                   	ret    
c0000926:	8d 76 00             	lea    esi,[esi+0x0]
c0000929:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000930 <toupper>:
c0000930:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000934:	0f b6 d0             	movzx  edx,al
c0000937:	f6 82 00 fe 01 c0 02 	test   BYTE PTR [edx-0x3ffe0200],0x2
c000093e:	74 03                	je     c0000943 <toupper+0x13>
c0000940:	83 e8 20             	sub    eax,0x20
c0000943:	c3                   	ret    
c0000944:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000094a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c0000950 <tolower>:
c0000950:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000954:	0f b6 d0             	movzx  edx,al
c0000957:	f6 82 00 fe 01 c0 01 	test   BYTE PTR [edx-0x3ffe0200],0x1
c000095e:	74 03                	je     c0000963 <tolower+0x13>
c0000960:	83 c0 20             	add    eax,0x20
c0000963:	c3                   	ret    
c0000964:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000096a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c0000970 <simple_strtoul>:
c0000970:	55                   	push   ebp
c0000971:	57                   	push   edi
c0000972:	56                   	push   esi
c0000973:	53                   	push   ebx
c0000974:	83 ec 08             	sub    esp,0x8
c0000977:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000097b:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000097f:	eb 12                	jmp    c0000993 <simple_strtoul+0x23>
c0000981:	eb 0d                	jmp    c0000990 <simple_strtoul+0x20>
c0000983:	90                   	nop
c0000984:	90                   	nop
c0000985:	90                   	nop
c0000986:	90                   	nop
c0000987:	90                   	nop
c0000988:	90                   	nop
c0000989:	90                   	nop
c000098a:	90                   	nop
c000098b:	90                   	nop
c000098c:	90                   	nop
c000098d:	90                   	nop
c000098e:	90                   	nop
c000098f:	90                   	nop
c0000990:	83 c3 01             	add    ebx,0x1
c0000993:	0f b6 13             	movzx  edx,BYTE PTR [ebx]
c0000996:	f6 82 00 fe 01 c0 08 	test   BYTE PTR [edx-0x3ffe0200],0x8
c000099d:	75 f1                	jne    c0000990 <simple_strtoul+0x20>
c000099f:	0f be c2             	movsx  eax,dl
c00009a2:	83 f8 09             	cmp    eax,0x9
c00009a5:	74 e9                	je     c0000990 <simple_strtoul+0x20>
c00009a7:	83 f8 2d             	cmp    eax,0x2d
c00009aa:	0f 84 60 01 00 00    	je     c0000b10 <simple_strtoul+0x1a0>
c00009b0:	83 f8 2b             	cmp    eax,0x2b
c00009b3:	0f 84 e7 00 00 00    	je     c0000aa0 <simple_strtoul+0x130>
c00009b9:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00009c1:	85 f6                	test   esi,esi
c00009c3:	0f 85 ea 00 00 00    	jne    c0000ab3 <simple_strtoul+0x143>
c00009c9:	0f be 13             	movsx  edx,BYTE PTR [ebx]
c00009cc:	89 d1                	mov    ecx,edx
c00009ce:	83 fa 30             	cmp    edx,0x30
c00009d1:	0f 84 90 01 00 00    	je     c0000b67 <simple_strtoul+0x1f7>
c00009d7:	be 0a 00 00 00       	mov    esi,0xa
c00009dc:	85 d2                	test   edx,edx
c00009de:	0f 84 c5 01 00 00    	je     c0000ba9 <simple_strtoul+0x239>
c00009e4:	31 ed                	xor    ebp,ebp
c00009e6:	31 ff                	xor    edi,edi
c00009e8:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00009ef:	eb 3e                	jmp    c0000a2f <simple_strtoul+0xbf>
c00009f1:	eb 0d                	jmp    c0000a00 <simple_strtoul+0x90>
c00009f3:	90                   	nop
c00009f4:	90                   	nop
c00009f5:	90                   	nop
c00009f6:	90                   	nop
c00009f7:	90                   	nop
c00009f8:	90                   	nop
c00009f9:	90                   	nop
c00009fa:	90                   	nop
c00009fb:	90                   	nop
c00009fc:	90                   	nop
c00009fd:	90                   	nop
c00009fe:	90                   	nop
c00009ff:	90                   	nop
c0000a00:	83 e9 30             	sub    ecx,0x30
c0000a03:	39 f1                	cmp    ecx,esi
c0000a05:	73 59                	jae    c0000a60 <simple_strtoul+0xf0>
c0000a07:	31 d2                	xor    edx,edx
c0000a09:	89 c8                	mov    eax,ecx
c0000a0b:	f7 d0                	not    eax
c0000a0d:	f7 f6                	div    esi
c0000a0f:	39 f8                	cmp    eax,edi
c0000a11:	0f 82 d9 00 00 00    	jb     c0000af0 <simple_strtoul+0x180>
c0000a17:	0f af fe             	imul   edi,esi
c0000a1a:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0000a21:	01 cf                	add    edi,ecx
c0000a23:	83 c3 01             	add    ebx,0x1
c0000a26:	0f be 13             	movsx  edx,BYTE PTR [ebx]
c0000a29:	89 d1                	mov    ecx,edx
c0000a2b:	85 d2                	test   edx,edx
c0000a2d:	74 31                	je     c0000a60 <simple_strtoul+0xf0>
c0000a2f:	0f b6 c9             	movzx  ecx,cl
c0000a32:	f6 81 00 fe 01 c0 04 	test   BYTE PTR [ecx-0x3ffe0200],0x4
c0000a39:	75 c5                	jne    c0000a00 <simple_strtoul+0x90>
c0000a3b:	52                   	push   edx
c0000a3c:	e8 ef fe ff ff       	call   c0000930 <toupper>
c0000a41:	59                   	pop    ecx
c0000a42:	0f b6 d0             	movzx  edx,al
c0000a45:	f6 82 00 fe 01 c0 01 	test   BYTE PTR [edx-0x3ffe0200],0x1
c0000a4c:	74 12                	je     c0000a60 <simple_strtoul+0xf0>
c0000a4e:	8d 48 c9             	lea    ecx,[eax-0x37]
c0000a51:	39 f1                	cmp    ecx,esi
c0000a53:	72 b2                	jb     c0000a07 <simple_strtoul+0x97>
c0000a55:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000a59:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000a60:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000a64:	85 c0                	test   eax,eax
c0000a66:	74 18                	je     c0000a80 <simple_strtoul+0x110>
c0000a68:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0000a6b:	09 f8                	or     eax,edi
c0000a6d:	0f 85 8d 00 00 00    	jne    c0000b00 <simple_strtoul+0x190>
c0000a73:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000a77:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000a7b:	31 ff                	xor    edi,edi
c0000a7d:	89 30                	mov    DWORD PTR [eax],esi
c0000a7f:	90                   	nop
c0000a80:	83 fd 01             	cmp    ebp,0x1
c0000a83:	75 05                	jne    c0000a8a <simple_strtoul+0x11a>
c0000a85:	bf ff ff ff ff       	mov    edi,0xffffffff
c0000a8a:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0000a8f:	75 02                	jne    c0000a93 <simple_strtoul+0x123>
c0000a91:	f7 df                	neg    edi
c0000a93:	83 c4 08             	add    esp,0x8
c0000a96:	89 f8                	mov    eax,edi
c0000a98:	5b                   	pop    ebx
c0000a99:	5e                   	pop    esi
c0000a9a:	5f                   	pop    edi
c0000a9b:	5d                   	pop    ebp
c0000a9c:	c3                   	ret    
c0000a9d:	8d 76 00             	lea    esi,[esi+0x0]
c0000aa0:	83 c3 01             	add    ebx,0x1
c0000aa3:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000aab:	85 f6                	test   esi,esi
c0000aad:	0f 84 16 ff ff ff    	je     c00009c9 <simple_strtoul+0x59>
c0000ab3:	8d 46 fe             	lea    eax,[esi-0x2]
c0000ab6:	83 f8 22             	cmp    eax,0x22
c0000ab9:	0f 87 8b 00 00 00    	ja     c0000b4a <simple_strtoul+0x1da>
c0000abf:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0000ac1:	83 fe 08             	cmp    esi,0x8
c0000ac4:	0f 84 c8 00 00 00    	je     c0000b92 <simple_strtoul+0x222>
c0000aca:	83 fe 10             	cmp    esi,0x10
c0000acd:	0f 85 0d 01 00 00    	jne    c0000be0 <simple_strtoul+0x270>
c0000ad3:	0f be d1             	movsx  edx,cl
c0000ad6:	83 fa 30             	cmp    edx,0x30
c0000ad9:	74 45                	je     c0000b20 <simple_strtoul+0x1b0>
c0000adb:	be 10 00 00 00       	mov    esi,0x10
c0000ae0:	e9 f7 fe ff ff       	jmp    c00009dc <simple_strtoul+0x6c>
c0000ae5:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000ae9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000af0:	bd 01 00 00 00       	mov    ebp,0x1
c0000af5:	31 ff                	xor    edi,edi
c0000af7:	e9 27 ff ff ff       	jmp    c0000a23 <simple_strtoul+0xb3>
c0000afc:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000b00:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b04:	89 18                	mov    DWORD PTR [eax],ebx
c0000b06:	e9 75 ff ff ff       	jmp    c0000a80 <simple_strtoul+0x110>
c0000b0b:	90                   	nop
c0000b0c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000b10:	83 c3 01             	add    ebx,0x1
c0000b13:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000b1b:	e9 a1 fe ff ff       	jmp    c00009c1 <simple_strtoul+0x51>
c0000b20:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000b24:	52                   	push   edx
c0000b25:	89 d1                	mov    ecx,edx
c0000b27:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0000b2b:	e8 20 fe ff ff       	call   c0000950 <tolower>
c0000b30:	5e                   	pop    esi
c0000b31:	83 f8 78             	cmp    eax,0x78
c0000b34:	0f 84 93 00 00 00    	je     c0000bcd <simple_strtoul+0x25d>
c0000b3a:	83 c3 01             	add    ebx,0x1
c0000b3d:	be 10 00 00 00       	mov    esi,0x10
c0000b42:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0000b45:	e9 92 fe ff ff       	jmp    c00009dc <simple_strtoul+0x6c>
c0000b4a:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0000b4e:	85 ff                	test   edi,edi
c0000b50:	74 69                	je     c0000bbb <simple_strtoul+0x24b>
c0000b52:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b56:	85 db                	test   ebx,ebx
c0000b58:	75 5b                	jne    c0000bb5 <simple_strtoul+0x245>
c0000b5a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000b60:	31 ff                	xor    edi,edi
c0000b62:	e9 23 ff ff ff       	jmp    c0000a8a <simple_strtoul+0x11a>
c0000b67:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000b6b:	52                   	push   edx
c0000b6c:	89 d1                	mov    ecx,edx
c0000b6e:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0000b72:	e8 d9 fd ff ff       	call   c0000950 <tolower>
c0000b77:	5d                   	pop    ebp
c0000b78:	83 f8 78             	cmp    eax,0x78
c0000b7b:	74 45                	je     c0000bc2 <simple_strtoul+0x252>
c0000b7d:	83 c3 01             	add    ebx,0x1
c0000b80:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0000b83:	83 fa 30             	cmp    edx,0x30
c0000b86:	74 16                	je     c0000b9e <simple_strtoul+0x22e>
c0000b88:	be 08 00 00 00       	mov    esi,0x8
c0000b8d:	e9 4a fe ff ff       	jmp    c00009dc <simple_strtoul+0x6c>
c0000b92:	0f be d1             	movsx  edx,cl
c0000b95:	83 fa 30             	cmp    edx,0x30
c0000b98:	0f 85 3e fe ff ff    	jne    c00009dc <simple_strtoul+0x6c>
c0000b9e:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000ba2:	83 c3 01             	add    ebx,0x1
c0000ba5:	89 d1                	mov    ecx,edx
c0000ba7:	eb df                	jmp    c0000b88 <simple_strtoul+0x218>
c0000ba9:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0000bad:	85 d2                	test   edx,edx
c0000baf:	74 0a                	je     c0000bbb <simple_strtoul+0x24b>
c0000bb1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000bb5:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000bb9:	89 30                	mov    DWORD PTR [eax],esi
c0000bbb:	31 ff                	xor    edi,edi
c0000bbd:	e9 c8 fe ff ff       	jmp    c0000a8a <simple_strtoul+0x11a>
c0000bc2:	8a 4b 02             	mov    cl,BYTE PTR [ebx+0x2]
c0000bc5:	83 c3 02             	add    ebx,0x2
c0000bc8:	e9 06 ff ff ff       	jmp    c0000ad3 <simple_strtoul+0x163>
c0000bcd:	0f be 53 02          	movsx  edx,BYTE PTR [ebx+0x2]
c0000bd1:	be 10 00 00 00       	mov    esi,0x10
c0000bd6:	89 d1                	mov    ecx,edx
c0000bd8:	83 c3 02             	add    ebx,0x2
c0000bdb:	e9 fc fd ff ff       	jmp    c00009dc <simple_strtoul+0x6c>
c0000be0:	0f be d1             	movsx  edx,cl
c0000be3:	e9 f4 fd ff ff       	jmp    c00009dc <simple_strtoul+0x6c>

c0000be8 <largebin_index>:
c0000be8:	89 c2                	mov    edx,eax
c0000bea:	c1 ea 08             	shr    edx,0x8
c0000bed:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000bf3:	77 10                	ja     c0000c05 <largebin_index+0x1d>
c0000bf5:	0f bd d2             	bsr    edx,edx
c0000bf8:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000bfb:	d3 e8                	shr    eax,cl
c0000bfd:	83 e0 03             	and    eax,0x3
c0000c00:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000c04:	c3                   	ret    
c0000c05:	b8 5f 00 00 00       	mov    eax,0x5f
c0000c0a:	c3                   	ret    

c0000c0b <malloc_init_state>:
c0000c0b:	53                   	push   ebx
c0000c0c:	8d 50 34             	lea    edx,[eax+0x34]
c0000c0f:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000c15:	89 d1                	mov    ecx,edx
c0000c17:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000c1a:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000c1d:	83 c2 08             	add    edx,0x8
c0000c20:	39 da                	cmp    edx,ebx
c0000c22:	75 f3                	jne    c0000c17 <malloc_init_state+0xc>
c0000c24:	8b 10                	mov    edx,DWORD PTR [eax]
c0000c26:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000c30:	83 e2 03             	and    edx,0x3
c0000c33:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c0000c3d:	83 ca 48             	or     edx,0x48
c0000c40:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000c4a:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000c54:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000c5b:	89 10                	mov    DWORD PTR [eax],edx
c0000c5d:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000c60:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000c6a:	5b                   	pop    ebx
c0000c6b:	c3                   	ret    

c0000c6c <malloc_consolidate>:
c0000c6c:	8b 10                	mov    edx,DWORD PTR [eax]
c0000c6e:	85 d2                	test   edx,edx
c0000c70:	0f 84 d8 00 00 00    	je     c0000d4e <malloc_consolidate+0xe2>
c0000c76:	55                   	push   ebp
c0000c77:	83 e2 fd             	and    edx,0xfffffffd
c0000c7a:	57                   	push   edi
c0000c7b:	89 c5                	mov    ebp,eax
c0000c7d:	56                   	push   esi
c0000c7e:	8d 78 34             	lea    edi,[eax+0x34]
c0000c81:	53                   	push   ebx
c0000c82:	83 ec 10             	sub    esp,0x10
c0000c85:	89 10                	mov    DWORD PTR [eax],edx
c0000c87:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000c8b:	c1 ea 03             	shr    edx,0x3
c0000c8e:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000c92:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000c96:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000c99:	85 d2                	test   edx,edx
c0000c9b:	0f 84 98 00 00 00    	je     c0000d39 <malloc_consolidate+0xcd>
c0000ca1:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000ca8:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000cab:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000cae:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000cb2:	89 f9                	mov    ecx,edi
c0000cb4:	83 e1 fe             	and    ecx,0xfffffffe
c0000cb7:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000cba:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000cbd:	83 e3 fc             	and    ebx,0xfffffffc
c0000cc0:	83 e7 01             	and    edi,0x1
c0000cc3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000cc6:	75 14                	jne    c0000cdc <malloc_consolidate+0x70>
c0000cc8:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000cca:	29 fa                	sub    edx,edi
c0000ccc:	01 f9                	add    ecx,edi
c0000cce:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000cd1:	89 fb                	mov    ebx,edi
c0000cd3:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000cd6:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000cd9:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000cdc:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000cdf:	74 40                	je     c0000d21 <malloc_consolidate+0xb5>
c0000ce1:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000ce4:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000ce7:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000ceb:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000cee:	83 e7 01             	and    edi,0x1
c0000cf1:	75 0e                	jne    c0000d01 <malloc_consolidate+0x95>
c0000cf3:	01 d9                	add    ecx,ebx
c0000cf5:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000cf8:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000cfb:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000cfe:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000d01:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000d04:	89 ce                	mov    esi,ecx
c0000d06:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000d09:	83 ce 01             	or     esi,0x1
c0000d0c:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000d0f:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000d12:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000d15:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000d19:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000d1c:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000d1f:	eb 0c                	jmp    c0000d2d <malloc_consolidate+0xc1>
c0000d21:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000d24:	83 c9 01             	or     ecx,0x1
c0000d27:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d2a:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000d2d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000d31:	85 d2                	test   edx,edx
c0000d33:	0f 85 6f ff ff ff    	jne    c0000ca8 <malloc_consolidate+0x3c>
c0000d39:	83 c5 04             	add    ebp,0x4
c0000d3c:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000d40:	0f 85 50 ff ff ff    	jne    c0000c96 <malloc_consolidate+0x2a>
c0000d46:	83 c4 10             	add    esp,0x10
c0000d49:	5b                   	pop    ebx
c0000d4a:	5e                   	pop    esi
c0000d4b:	5f                   	pop    edi
c0000d4c:	5d                   	pop    ebp
c0000d4d:	c3                   	ret    
c0000d4e:	e9 b8 fe ff ff       	jmp    c0000c0b <malloc_init_state>

c0000d53 <dlfree>:
c0000d53:	57                   	push   edi
c0000d54:	56                   	push   esi
c0000d55:	53                   	push   ebx
c0000d56:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000d5a:	85 db                	test   ebx,ebx
c0000d5c:	0f 84 e2 00 00 00    	je     c0000e44 <dlfree+0xf1>
c0000d62:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000d65:	8b 0d 00 51 02 c0    	mov    ecx,DWORD PTR ds:0xc0025100
c0000d6b:	89 f0                	mov    eax,esi
c0000d6d:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000d70:	83 e0 fc             	and    eax,0xfffffffc
c0000d73:	39 c1                	cmp    ecx,eax
c0000d75:	72 24                	jb     c0000d9b <dlfree+0x48>
c0000d77:	83 c9 03             	or     ecx,0x3
c0000d7a:	c1 e8 03             	shr    eax,0x3
c0000d7d:	89 0d 00 51 02 c0    	mov    DWORD PTR ds:0xc0025100,ecx
c0000d83:	83 e8 02             	sub    eax,0x2
c0000d86:	8b 0c 85 04 51 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdaefc]
c0000d8d:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000d8f:	89 14 85 04 51 02 c0 	mov    DWORD PTR [eax*4-0x3ffdaefc],edx
c0000d96:	e9 a9 00 00 00       	jmp    c0000e44 <dlfree+0xf1>
c0000d9b:	83 e6 02             	and    esi,0x2
c0000d9e:	0f 85 a0 00 00 00    	jne    c0000e44 <dlfree+0xf1>
c0000da4:	83 c9 01             	or     ecx,0x1
c0000da7:	8d 34 02             	lea    esi,[edx+eax*1]
c0000daa:	89 0d 00 51 02 c0    	mov    DWORD PTR ds:0xc0025100,ecx
c0000db0:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000db3:	83 e1 fc             	and    ecx,0xfffffffc
c0000db6:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000dba:	75 13                	jne    c0000dcf <dlfree+0x7c>
c0000dbc:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000dbf:	29 da                	sub    edx,ebx
c0000dc1:	01 d8                	add    eax,ebx
c0000dc3:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000dc6:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000dc9:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000dcc:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000dcf:	39 35 2c 51 02 c0    	cmp    DWORD PTR ds:0xc002512c,esi
c0000dd5:	74 40                	je     c0000e17 <dlfree+0xc4>
c0000dd7:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000ddb:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000dde:	80 e3 01             	and    bl,0x1
c0000de1:	75 0e                	jne    c0000df1 <dlfree+0x9e>
c0000de3:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000de6:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000de9:	01 c8                	add    eax,ecx
c0000deb:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000dee:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000df1:	8b 0d 3c 51 02 c0    	mov    ecx,DWORD PTR ds:0xc002513c
c0000df7:	c7 42 0c 34 51 02 c0 	mov    DWORD PTR [edx+0xc],0xc0025134
c0000dfe:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000e01:	89 15 3c 51 02 c0    	mov    DWORD PTR ds:0xc002513c,edx
c0000e07:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000e0a:	89 c1                	mov    ecx,eax
c0000e0c:	83 c9 01             	or     ecx,0x1
c0000e0f:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e12:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000e15:	eb 10                	jmp    c0000e27 <dlfree+0xd4>
c0000e17:	01 c8                	add    eax,ecx
c0000e19:	89 c1                	mov    ecx,eax
c0000e1b:	83 c9 01             	or     ecx,0x1
c0000e1e:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e21:	89 15 2c 51 02 c0    	mov    DWORD PTR ds:0xc002512c,edx
c0000e27:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000e2c:	76 16                	jbe    c0000e44 <dlfree+0xf1>
c0000e2e:	f6 05 00 51 02 c0 02 	test   BYTE PTR ds:0xc0025100,0x2
c0000e35:	74 0d                	je     c0000e44 <dlfree+0xf1>
c0000e37:	5b                   	pop    ebx
c0000e38:	b8 00 51 02 c0       	mov    eax,0xc0025100
c0000e3d:	5e                   	pop    esi
c0000e3e:	5f                   	pop    edi
c0000e3f:	e9 28 fe ff ff       	jmp    c0000c6c <malloc_consolidate>
c0000e44:	5b                   	pop    ebx
c0000e45:	5e                   	pop    esi
c0000e46:	5f                   	pop    edi
c0000e47:	c3                   	ret    

c0000e48 <sYSMALLOc>:
c0000e48:	55                   	push   ebp
c0000e49:	57                   	push   edi
c0000e4a:	56                   	push   esi
c0000e4b:	53                   	push   ebx
c0000e4c:	89 d3                	mov    ebx,edx
c0000e4e:	83 ec 2c             	sub    esp,0x2c
c0000e51:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000e55:	8b 92 5c 03 00 00    	mov    edx,DWORD PTR [edx+0x35c]
c0000e5b:	f6 03 02             	test   BYTE PTR [ebx],0x2
c0000e5e:	8d 42 ff             	lea    eax,[edx-0x1]
c0000e61:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0000e65:	74 1f                	je     c0000e86 <sYSMALLOc+0x3e>
c0000e67:	89 d8                	mov    eax,ebx
c0000e69:	e8 fe fd ff ff       	call   c0000c6c <malloc_consolidate>
c0000e6e:	83 ec 0c             	sub    esp,0xc
c0000e71:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0000e75:	83 e8 07             	sub    eax,0x7
c0000e78:	50                   	push   eax
c0000e79:	e8 2d 02 00 00       	call   c00010ab <dlmalloc>
c0000e7e:	83 c4 10             	add    esp,0x10
c0000e81:	e9 1d 02 00 00       	jmp    c00010a3 <sYSMALLOc+0x25b>
c0000e86:	8b 7b 2c             	mov    edi,DWORD PTR [ebx+0x2c]
c0000e89:	8b 8b 48 03 00 00    	mov    ecx,DWORD PTR [ebx+0x348]
c0000e8f:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0000e92:	83 e0 fc             	and    eax,0xfffffffc
c0000e95:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000e99:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000e9d:	83 c0 10             	add    eax,0x10
c0000ea0:	01 c1                	add    ecx,eax
c0000ea2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0000ea6:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000ead:	74 04                	je     c0000eb3 <sYSMALLOc+0x6b>
c0000eaf:	2b 4c 24 04          	sub    ecx,DWORD PTR [esp+0x4]
c0000eb3:	f7 da                	neg    edx
c0000eb5:	03 4c 24 14          	add    ecx,DWORD PTR [esp+0x14]
c0000eb9:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0000ebd:	21 d1                	and    ecx,edx
c0000ebf:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0000ec3:	7f 07                	jg     c0000ecc <sYSMALLOc+0x84>
c0000ec5:	31 c0                	xor    eax,eax
c0000ec7:	e9 d7 01 00 00       	jmp    c00010a3 <sYSMALLOc+0x25b>
c0000ecc:	83 ec 0c             	sub    esp,0xc
c0000ecf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000ed3:	e8 b0 6a 00 00       	call   c0007988 <sbrk>
c0000ed8:	83 c4 10             	add    esp,0x10
c0000edb:	89 c6                	mov    esi,eax
c0000edd:	83 f8 ff             	cmp    eax,0xffffffff
c0000ee0:	74 e3                	je     c0000ec5 <sYSMALLOc+0x7d>
c0000ee2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000ee6:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0000ee9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000eed:	03 83 68 03 00 00    	add    eax,DWORD PTR [ebx+0x368]
c0000ef3:	39 f1                	cmp    ecx,esi
c0000ef5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000ef9:	89 83 68 03 00 00    	mov    DWORD PTR [ebx+0x368],eax
c0000eff:	75 13                	jne    c0000f14 <sYSMALLOc+0xcc>
c0000f01:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000f05:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000f09:	83 c8 01             	or     eax,0x1
c0000f0c:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000f0f:	e9 37 01 00 00       	jmp    c000104b <sYSMALLOc+0x203>
c0000f14:	8b 93 60 03 00 00    	mov    edx,DWORD PTR [ebx+0x360]
c0000f1a:	89 d5                	mov    ebp,edx
c0000f1c:	83 e5 01             	and    ebp,0x1
c0000f1f:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000f24:	0f 95 c0             	setne  al
c0000f27:	21 e8                	and    eax,ebp
c0000f29:	39 f1                	cmp    ecx,esi
c0000f2b:	76 12                	jbe    c0000f3f <sYSMALLOc+0xf7>
c0000f2d:	85 c0                	test   eax,eax
c0000f2f:	74 0e                	je     c0000f3f <sYSMALLOc+0xf7>
c0000f31:	83 e2 fe             	and    edx,0xfffffffe
c0000f34:	89 93 60 03 00 00    	mov    DWORD PTR [ebx+0x360],edx
c0000f3a:	e9 82 00 00 00       	jmp    c0000fc1 <sYSMALLOc+0x179>
c0000f3f:	85 ed                	test   ebp,ebp
c0000f41:	74 7e                	je     c0000fc1 <sYSMALLOc+0x179>
c0000f43:	85 c0                	test   eax,eax
c0000f45:	74 0e                	je     c0000f55 <sYSMALLOc+0x10d>
c0000f47:	89 f0                	mov    eax,esi
c0000f49:	29 c8                	sub    eax,ecx
c0000f4b:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0000f4f:	89 83 68 03 00 00    	mov    DWORD PTR [ebx+0x368],eax
c0000f55:	89 f2                	mov    edx,esi
c0000f57:	83 e2 07             	and    edx,0x7
c0000f5a:	74 0c                	je     c0000f68 <sYSMALLOc+0x120>
c0000f5c:	b8 08 00 00 00       	mov    eax,0x8
c0000f61:	29 d0                	sub    eax,edx
c0000f63:	8d 2c 06             	lea    ebp,[esi+eax*1]
c0000f66:	eb 04                	jmp    c0000f6c <sYSMALLOc+0x124>
c0000f68:	89 f5                	mov    ebp,esi
c0000f6a:	31 c0                	xor    eax,eax
c0000f6c:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000f70:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000f74:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0000f78:	01 c1                	add    ecx,eax
c0000f7a:	83 ec 0c             	sub    esp,0xc
c0000f7d:	01 f1                	add    ecx,esi
c0000f7f:	01 ca                	add    edx,ecx
c0000f81:	29 c8                	sub    eax,ecx
c0000f83:	23 54 24 24          	and    edx,DWORD PTR [esp+0x24]
c0000f87:	01 c2                	add    edx,eax
c0000f89:	52                   	push   edx
c0000f8a:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0000f8e:	e8 f5 69 00 00       	call   c0007988 <sbrk>
c0000f93:	83 c4 10             	add    esp,0x10
c0000f96:	83 f8 ff             	cmp    eax,0xffffffff
c0000f99:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000f9d:	75 0f                	jne    c0000fae <sYSMALLOc+0x166>
c0000f9f:	83 ec 0c             	sub    esp,0xc
c0000fa2:	6a 00                	push   0x0
c0000fa4:	e8 df 69 00 00       	call   c0007988 <sbrk>
c0000fa9:	83 c4 10             	add    esp,0x10
c0000fac:	eb 30                	jmp    c0000fde <sYSMALLOc+0x196>
c0000fae:	39 c6                	cmp    esi,eax
c0000fb0:	76 33                	jbe    c0000fe5 <sYSMALLOc+0x19d>
c0000fb2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000fb6:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0000fbd:	01 f0                	add    eax,esi
c0000fbf:	eb 1d                	jmp    c0000fde <sYSMALLOc+0x196>
c0000fc1:	83 ec 0c             	sub    esp,0xc
c0000fc4:	89 f5                	mov    ebp,esi
c0000fc6:	6a 00                	push   0x0
c0000fc8:	e8 bb 69 00 00       	call   c0007988 <sbrk>
c0000fcd:	89 c2                	mov    edx,eax
c0000fcf:	29 f2                	sub    edx,esi
c0000fd1:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c0000fd5:	83 c4 10             	add    esp,0x10
c0000fd8:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000fde:	31 d2                	xor    edx,edx
c0000fe0:	83 f8 ff             	cmp    eax,0xffffffff
c0000fe3:	74 66                	je     c000104b <sYSMALLOc+0x203>
c0000fe5:	29 e8                	sub    eax,ebp
c0000fe7:	89 6b 2c             	mov    DWORD PTR [ebx+0x2c],ebp
c0000fea:	01 d0                	add    eax,edx
c0000fec:	83 c8 01             	or     eax,0x1
c0000fef:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0000ff2:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000ff8:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000ffd:	74 4c                	je     c000104b <sYSMALLOc+0x203>
c0000fff:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001003:	83 e8 0c             	sub    eax,0xc
c0001006:	83 e0 f8             	and    eax,0xfffffff8
c0001009:	89 c2                	mov    edx,eax
c000100b:	83 ca 01             	or     edx,0x1
c000100e:	83 f8 0f             	cmp    eax,0xf
c0001011:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c0001014:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c000101c:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c0001024:	76 25                	jbe    c000104b <sYSMALLOc+0x203>
c0001026:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c000102c:	83 ec 0c             	sub    esp,0xc
c000102f:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c0001039:	83 c7 08             	add    edi,0x8
c000103c:	57                   	push   edi
c000103d:	e8 11 fd ff ff       	call   c0000d53 <dlfree>
c0001042:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c0001048:	83 c4 10             	add    esp,0x10
c000104b:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c0001051:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c0001057:	73 06                	jae    c000105f <sYSMALLOc+0x217>
c0001059:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c000105f:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c0001065:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c000106b:	73 06                	jae    c0001073 <sYSMALLOc+0x22b>
c000106d:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c0001073:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0001076:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001079:	83 e2 fc             	and    edx,0xfffffffc
c000107c:	3b 54 24 1c          	cmp    edx,DWORD PTR [esp+0x1c]
c0001080:	0f 82 3f fe ff ff    	jb     c0000ec5 <sYSMALLOc+0x7d>
c0001086:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000108a:	8d 0c 38             	lea    ecx,[eax+edi*1]
c000108d:	29 fa                	sub    edx,edi
c000108f:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0001092:	83 ca 01             	or     edx,0x1
c0001095:	89 fb                	mov    ebx,edi
c0001097:	83 c0 08             	add    eax,0x8
c000109a:	83 cb 01             	or     ebx,0x1
c000109d:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c00010a0:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00010a3:	83 c4 2c             	add    esp,0x2c
c00010a6:	5b                   	pop    ebx
c00010a7:	5e                   	pop    esi
c00010a8:	5f                   	pop    edi
c00010a9:	5d                   	pop    ebp
c00010aa:	c3                   	ret    

c00010ab <dlmalloc>:
c00010ab:	55                   	push   ebp
c00010ac:	57                   	push   edi
c00010ad:	56                   	push   esi
c00010ae:	53                   	push   ebx
c00010af:	83 ec 1c             	sub    esp,0x1c
c00010b2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00010b6:	83 f8 df             	cmp    eax,0xffffffdf
c00010b9:	0f 87 70 03 00 00    	ja     c000142f <dlmalloc+0x384>
c00010bf:	83 c0 0b             	add    eax,0xb
c00010c2:	be 10 00 00 00       	mov    esi,0x10
c00010c7:	83 f8 0f             	cmp    eax,0xf
c00010ca:	76 05                	jbe    c00010d1 <dlmalloc+0x26>
c00010cc:	83 e0 f8             	and    eax,0xfffffff8
c00010cf:	89 c6                	mov    esi,eax
c00010d1:	8b 3d 00 51 02 c0    	mov    edi,DWORD PTR ds:0xc0025100
c00010d7:	f7 c7 01 00 00 00    	test   edi,0x1
c00010dd:	75 17                	jne    c00010f6 <dlmalloc+0x4b>
c00010df:	85 ff                	test   edi,edi
c00010e1:	0f 85 05 03 00 00    	jne    c00013ec <dlmalloc+0x341>
c00010e7:	b8 00 51 02 c0       	mov    eax,0xc0025100
c00010ec:	e8 7b fb ff ff       	call   c0000c6c <malloc_consolidate>
c00010f1:	e9 f6 02 00 00       	jmp    c00013ec <dlmalloc+0x341>
c00010f6:	39 f7                	cmp    edi,esi
c00010f8:	72 1f                	jb     c0001119 <dlmalloc+0x6e>
c00010fa:	89 f2                	mov    edx,esi
c00010fc:	c1 ea 03             	shr    edx,0x3
c00010ff:	83 ea 02             	sub    edx,0x2
c0001102:	8b 04 95 04 51 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdaefc]
c0001109:	85 c0                	test   eax,eax
c000110b:	74 0c                	je     c0001119 <dlmalloc+0x6e>
c000110d:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0001110:	89 0c 95 04 51 02 c0 	mov    DWORD PTR [edx*4-0x3ffdaefc],ecx
c0001117:	eb 30                	jmp    c0001149 <dlmalloc+0x9e>
c0001119:	89 f0                	mov    eax,esi
c000111b:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001121:	77 2e                	ja     c0001151 <dlmalloc+0xa6>
c0001123:	c1 e8 03             	shr    eax,0x3
c0001126:	8d 14 c5 34 51 02 c0 	lea    edx,[eax*8-0x3ffdaecc]
c000112d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001131:	8d 5a f8             	lea    ebx,[edx-0x8]
c0001134:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c0001137:	39 c3                	cmp    ebx,eax
c0001139:	74 2e                	je     c0001169 <dlmalloc+0xbe>
c000113b:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c000113e:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c0001143:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0001146:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c0001149:	83 c0 08             	add    eax,0x8
c000114c:	e9 e0 02 00 00       	jmp    c0001431 <dlmalloc+0x386>
c0001151:	e8 92 fa ff ff       	call   c0000be8 <largebin_index>
c0001156:	83 e7 02             	and    edi,0x2
c0001159:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000115d:	74 0a                	je     c0001169 <dlmalloc+0xbe>
c000115f:	b8 00 51 02 c0       	mov    eax,0xc0025100
c0001164:	e8 03 fb ff ff       	call   c0000c6c <malloc_consolidate>
c0001169:	8d 46 10             	lea    eax,[esi+0x10]
c000116c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001170:	8b 1d 40 51 02 c0    	mov    ebx,DWORD PTR ds:0xc0025140
c0001176:	81 fb 34 51 02 c0    	cmp    ebx,0xc0025134
c000117c:	0f 84 13 01 00 00    	je     c0001295 <dlmalloc+0x1ea>
c0001182:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0001185:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0001188:	83 e7 fc             	and    edi,0xfffffffc
c000118b:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001191:	77 4c                	ja     c00011df <dlmalloc+0x134>
c0001193:	3d 34 51 02 c0       	cmp    eax,0xc0025134
c0001198:	75 45                	jne    c00011df <dlmalloc+0x134>
c000119a:	39 1d 30 51 02 c0    	cmp    DWORD PTR ds:0xc0025130,ebx
c00011a0:	75 3d                	jne    c00011df <dlmalloc+0x134>
c00011a2:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c00011a6:	73 37                	jae    c00011df <dlmalloc+0x134>
c00011a8:	8d 04 33             	lea    eax,[ebx+esi*1]
c00011ab:	89 fa                	mov    edx,edi
c00011ad:	a3 3c 51 02 c0       	mov    ds:0xc002513c,eax
c00011b2:	a3 40 51 02 c0       	mov    ds:0xc0025140,eax
c00011b7:	a3 30 51 02 c0       	mov    ds:0xc0025130,eax
c00011bc:	29 f2                	sub    edx,esi
c00011be:	c7 40 08 34 51 02 c0 	mov    DWORD PTR [eax+0x8],0xc0025134
c00011c5:	c7 40 0c 34 51 02 c0 	mov    DWORD PTR [eax+0xc],0xc0025134
c00011cc:	83 ce 01             	or     esi,0x1
c00011cf:	89 d1                	mov    ecx,edx
c00011d1:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c00011d4:	83 c9 01             	or     ecx,0x1
c00011d7:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c00011da:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c00011dd:	eb 15                	jmp    c00011f4 <dlmalloc+0x149>
c00011df:	a3 40 51 02 c0       	mov    ds:0xc0025140,eax
c00011e4:	39 fe                	cmp    esi,edi
c00011e6:	c7 40 08 34 51 02 c0 	mov    DWORD PTR [eax+0x8],0xc0025134
c00011ed:	75 0d                	jne    c00011fc <dlmalloc+0x151>
c00011ef:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c00011f4:	8d 43 08             	lea    eax,[ebx+0x8]
c00011f7:	e9 35 02 00 00       	jmp    c0001431 <dlmalloc+0x386>
c00011fc:	89 f8                	mov    eax,edi
c00011fe:	81 ff ff 00 00 00    	cmp    edi,0xff
c0001204:	77 19                	ja     c000121f <dlmalloc+0x174>
c0001206:	c1 e8 03             	shr    eax,0x3
c0001209:	8d 14 00             	lea    edx,[eax+eax*1]
c000120c:	83 c2 0d             	add    edx,0xd
c000120f:	8d 2c 95 f8 50 02 c0 	lea    ebp,[edx*4-0x3ffdaf08]
c0001216:	8b 14 95 00 51 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdaf00]
c000121d:	eb 46                	jmp    c0001265 <dlmalloc+0x1ba>
c000121f:	e8 c4 f9 ff ff       	call   c0000be8 <largebin_index>
c0001224:	8d 14 00             	lea    edx,[eax+eax*1]
c0001227:	83 c2 0d             	add    edx,0xd
c000122a:	8d 0c 95 00 51 02 c0 	lea    ecx,[edx*4-0x3ffdaf00]
c0001231:	8b 14 95 00 51 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdaf00]
c0001238:	8d 69 f8             	lea    ebp,[ecx-0x8]
c000123b:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c000123f:	89 d5                	mov    ebp,edx
c0001241:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c0001245:	74 1e                	je     c0001265 <dlmalloc+0x1ba>
c0001247:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c000124a:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c000124d:	77 12                	ja     c0001261 <dlmalloc+0x1b6>
c000124f:	83 cf 01             	or     edi,0x1
c0001252:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c0001255:	76 05                	jbe    c000125c <dlmalloc+0x1b1>
c0001257:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c000125a:	eb f6                	jmp    c0001252 <dlmalloc+0x1a7>
c000125c:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c000125f:	eb 04                	jmp    c0001265 <dlmalloc+0x1ba>
c0001261:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0001265:	89 c7                	mov    edi,eax
c0001267:	88 c1                	mov    cl,al
c0001269:	c1 ff 05             	sar    edi,0x5
c000126c:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0001270:	bf 01 00 00 00       	mov    edi,0x1
c0001275:	d3 e7                	shl    edi,cl
c0001277:	89 f8                	mov    eax,edi
c0001279:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000127d:	09 04 bd 34 54 02 c0 	or     DWORD PTR [edi*4-0x3ffdabcc],eax
c0001284:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c0001287:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c000128a:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c000128d:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c0001290:	e9 db fe ff ff       	jmp    c0001170 <dlmalloc+0xc5>
c0001295:	81 fe ff 00 00 00    	cmp    esi,0xff
c000129b:	76 78                	jbe    c0001315 <dlmalloc+0x26a>
c000129d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00012a1:	8d 04 c5 34 51 02 c0 	lea    eax,[eax*8-0x3ffdaecc]
c00012a8:	8d 48 f8             	lea    ecx,[eax-0x8]
c00012ab:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00012ae:	39 ca                	cmp    edx,ecx
c00012b0:	74 63                	je     c0001315 <dlmalloc+0x26a>
c00012b2:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c00012b5:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c00012b8:	83 e3 fc             	and    ebx,0xfffffffc
c00012bb:	39 de                	cmp    esi,ebx
c00012bd:	77 52                	ja     c0001311 <dlmalloc+0x266>
c00012bf:	89 df                	mov    edi,ebx
c00012c1:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c00012c4:	29 f7                	sub    edi,esi
c00012c6:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c00012c9:	01 d3                	add    ebx,edx
c00012cb:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c00012ce:	83 ff 0f             	cmp    edi,0xf
c00012d1:	8d 42 08             	lea    eax,[edx+0x8]
c00012d4:	77 09                	ja     c00012df <dlmalloc+0x234>
c00012d6:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c00012da:	e9 52 01 00 00       	jmp    c0001431 <dlmalloc+0x386>
c00012df:	8d 0c 32             	lea    ecx,[edx+esi*1]
c00012e2:	83 ce 01             	or     esi,0x1
c00012e5:	89 0d 3c 51 02 c0    	mov    DWORD PTR ds:0xc002513c,ecx
c00012eb:	89 0d 40 51 02 c0    	mov    DWORD PTR ds:0xc0025140,ecx
c00012f1:	c7 41 08 34 51 02 c0 	mov    DWORD PTR [ecx+0x8],0xc0025134
c00012f8:	c7 41 0c 34 51 02 c0 	mov    DWORD PTR [ecx+0xc],0xc0025134
c00012ff:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0001302:	89 fa                	mov    edx,edi
c0001304:	83 ca 01             	or     edx,0x1
c0001307:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000130a:	89 3b                	mov    DWORD PTR [ebx],edi
c000130c:	e9 20 01 00 00       	jmp    c0001431 <dlmalloc+0x386>
c0001311:	89 c2                	mov    edx,eax
c0001313:	eb 99                	jmp    c00012ae <dlmalloc+0x203>
c0001315:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001319:	b8 01 00 00 00       	mov    eax,0x1
c000131e:	41                   	inc    ecx
c000131f:	89 cb                	mov    ebx,ecx
c0001321:	8d 14 cd 2c 51 02 c0 	lea    edx,[ecx*8-0x3ffdaed4]
c0001328:	c1 eb 05             	shr    ebx,0x5
c000132b:	d3 e0                	shl    eax,cl
c000132d:	8b 3c 9d 34 54 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffdabcc]
c0001334:	39 f8                	cmp    eax,edi
c0001336:	77 04                	ja     c000133c <dlmalloc+0x291>
c0001338:	85 c0                	test   eax,eax
c000133a:	75 26                	jne    c0001362 <dlmalloc+0x2b7>
c000133c:	43                   	inc    ebx
c000133d:	83 fb 02             	cmp    ebx,0x2
c0001340:	0f 87 a6 00 00 00    	ja     c00013ec <dlmalloc+0x341>
c0001346:	8b 3c 9d 34 54 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffdabcc]
c000134d:	85 ff                	test   edi,edi
c000134f:	74 eb                	je     c000133c <dlmalloc+0x291>
c0001351:	89 d8                	mov    eax,ebx
c0001353:	c1 e0 06             	shl    eax,0x6
c0001356:	8d 14 85 2c 51 02 c0 	lea    edx,[eax*4-0x3ffdaed4]
c000135d:	b8 01 00 00 00       	mov    eax,0x1
c0001362:	85 f8                	test   eax,edi
c0001364:	75 07                	jne    c000136d <dlmalloc+0x2c2>
c0001366:	83 c2 08             	add    edx,0x8
c0001369:	01 c0                	add    eax,eax
c000136b:	eb f5                	jmp    c0001362 <dlmalloc+0x2b7>
c000136d:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0001370:	39 ca                	cmp    edx,ecx
c0001372:	75 14                	jne    c0001388 <dlmalloc+0x2dd>
c0001374:	89 c1                	mov    ecx,eax
c0001376:	83 c2 08             	add    edx,0x8
c0001379:	f7 d1                	not    ecx
c000137b:	01 c0                	add    eax,eax
c000137d:	21 cf                	and    edi,ecx
c000137f:	89 3c 9d 34 54 02 c0 	mov    DWORD PTR [ebx*4-0x3ffdabcc],edi
c0001386:	eb ac                	jmp    c0001334 <dlmalloc+0x289>
c0001388:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c000138b:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c000138e:	83 e0 fc             	and    eax,0xfffffffc
c0001391:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c0001394:	89 c3                	mov    ebx,eax
c0001396:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c0001399:	29 f3                	sub    ebx,esi
c000139b:	8d 14 01             	lea    edx,[ecx+eax*1]
c000139e:	83 fb 0f             	cmp    ebx,0xf
c00013a1:	8d 41 08             	lea    eax,[ecx+0x8]
c00013a4:	77 09                	ja     c00013af <dlmalloc+0x304>
c00013a6:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c00013aa:	e9 82 00 00 00       	jmp    c0001431 <dlmalloc+0x386>
c00013af:	8d 3c 31             	lea    edi,[ecx+esi*1]
c00013b2:	81 fe ff 00 00 00    	cmp    esi,0xff
c00013b8:	89 3d 3c 51 02 c0    	mov    DWORD PTR ds:0xc002513c,edi
c00013be:	89 3d 40 51 02 c0    	mov    DWORD PTR ds:0xc0025140,edi
c00013c4:	c7 47 08 34 51 02 c0 	mov    DWORD PTR [edi+0x8],0xc0025134
c00013cb:	c7 47 0c 34 51 02 c0 	mov    DWORD PTR [edi+0xc],0xc0025134
c00013d2:	77 06                	ja     c00013da <dlmalloc+0x32f>
c00013d4:	89 3d 30 51 02 c0    	mov    DWORD PTR ds:0xc0025130,edi
c00013da:	83 ce 01             	or     esi,0x1
c00013dd:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c00013e0:	89 d9                	mov    ecx,ebx
c00013e2:	83 c9 01             	or     ecx,0x1
c00013e5:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c00013e8:	89 1a                	mov    DWORD PTR [edx],ebx
c00013ea:	eb 45                	jmp    c0001431 <dlmalloc+0x386>
c00013ec:	a1 2c 51 02 c0       	mov    eax,ds:0xc002512c
c00013f1:	8d 4e 10             	lea    ecx,[esi+0x10]
c00013f4:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00013f7:	83 e2 fc             	and    edx,0xfffffffc
c00013fa:	39 d1                	cmp    ecx,edx
c00013fc:	77 1e                	ja     c000141c <dlmalloc+0x371>
c00013fe:	8d 0c 30             	lea    ecx,[eax+esi*1]
c0001401:	89 f3                	mov    ebx,esi
c0001403:	89 0d 2c 51 02 c0    	mov    DWORD PTR ds:0xc002512c,ecx
c0001409:	83 cb 01             	or     ebx,0x1
c000140c:	29 f2                	sub    edx,esi
c000140e:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0001411:	83 ca 01             	or     edx,0x1
c0001414:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001417:	e9 2d fd ff ff       	jmp    c0001149 <dlmalloc+0x9e>
c000141c:	83 c4 1c             	add    esp,0x1c
c000141f:	89 f0                	mov    eax,esi
c0001421:	5b                   	pop    ebx
c0001422:	ba 00 51 02 c0       	mov    edx,0xc0025100
c0001427:	5e                   	pop    esi
c0001428:	5f                   	pop    edi
c0001429:	5d                   	pop    ebp
c000142a:	e9 19 fa ff ff       	jmp    c0000e48 <sYSMALLOc>
c000142f:	31 c0                	xor    eax,eax
c0001431:	83 c4 1c             	add    esp,0x1c
c0001434:	5b                   	pop    ebx
c0001435:	5e                   	pop    esi
c0001436:	5f                   	pop    edi
c0001437:	5d                   	pop    ebp
c0001438:	c3                   	ret    

c0001439 <iALLOc>:
c0001439:	55                   	push   ebp
c000143a:	89 c5                	mov    ebp,eax
c000143c:	57                   	push   edi
c000143d:	56                   	push   esi
c000143e:	53                   	push   ebx
c000143f:	83 ec 2c             	sub    esp,0x2c
c0001442:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0001446:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000144a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000144e:	83 3d 00 51 02 c0 00 	cmp    DWORD PTR ds:0xc0025100,0x0
c0001455:	75 12                	jne    c0001469 <iALLOc+0x30>
c0001457:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000145b:	b8 00 51 02 c0       	mov    eax,0xc0025100
c0001460:	e8 07 f8 ff ff       	call   c0000c6c <malloc_consolidate>
c0001465:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0001469:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000146e:	74 12                	je     c0001482 <iALLOc+0x49>
c0001470:	85 ed                	test   ebp,ebp
c0001472:	0f 84 64 01 00 00    	je     c00015dc <iALLOc+0x1a3>
c0001478:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0001480:	eb 33                	jmp    c00014b5 <iALLOc+0x7c>
c0001482:	85 ed                	test   ebp,ebp
c0001484:	75 14                	jne    c000149a <iALLOc+0x61>
c0001486:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c000148e:	83 c4 2c             	add    esp,0x2c
c0001491:	5b                   	pop    ebx
c0001492:	5e                   	pop    esi
c0001493:	5f                   	pop    edi
c0001494:	5d                   	pop    ebp
c0001495:	e9 11 fc ff ff       	jmp    c00010ab <dlmalloc>
c000149a:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c00014a1:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c00014a9:	83 f8 0f             	cmp    eax,0xf
c00014ac:	76 07                	jbe    c00014b5 <iALLOc+0x7c>
c00014ae:	83 e0 f8             	and    eax,0xfffffff8
c00014b1:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00014b5:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c00014ba:	75 09                	jne    c00014c5 <iALLOc+0x8c>
c00014bc:	89 d0                	mov    eax,edx
c00014be:	8d 3c aa             	lea    edi,[edx+ebp*4]
c00014c1:	31 f6                	xor    esi,esi
c00014c3:	eb 3b                	jmp    c0001500 <iALLOc+0xc7>
c00014c5:	8b 02                	mov    eax,DWORD PTR [edx]
c00014c7:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c00014cf:	83 c0 0b             	add    eax,0xb
c00014d2:	83 f8 0f             	cmp    eax,0xf
c00014d5:	76 07                	jbe    c00014de <iALLOc+0xa5>
c00014d7:	83 e0 f8             	and    eax,0xfffffff8
c00014da:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00014de:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00014e2:	0f af f5             	imul   esi,ebp
c00014e5:	eb 25                	jmp    c000150c <iALLOc+0xd3>
c00014e7:	8b 18                	mov    ebx,DWORD PTR [eax]
c00014e9:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c00014ec:	bb 10 00 00 00       	mov    ebx,0x10
c00014f1:	83 f9 0f             	cmp    ecx,0xf
c00014f4:	76 05                	jbe    c00014fb <iALLOc+0xc2>
c00014f6:	83 e1 f8             	and    ecx,0xfffffff8
c00014f9:	89 cb                	mov    ebx,ecx
c00014fb:	01 de                	add    esi,ebx
c00014fd:	83 c0 04             	add    eax,0x4
c0001500:	39 c7                	cmp    edi,eax
c0001502:	75 e3                	jne    c00014e7 <iALLOc+0xae>
c0001504:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000150c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0001510:	8b 1d 54 54 02 c0    	mov    ebx,DWORD PTR ds:0xc0025454
c0001516:	83 ec 0c             	sub    esp,0xc
c0001519:	c7 05 54 54 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025454,0x0
c0001523:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001527:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c000152b:	50                   	push   eax
c000152c:	e8 7a fb ff ff       	call   c00010ab <dlmalloc>
c0001531:	83 c4 10             	add    esp,0x10
c0001534:	89 1d 54 54 02 c0    	mov    DWORD PTR ds:0xc0025454,ebx
c000153a:	85 c0                	test   eax,eax
c000153c:	0f 84 92 00 00 00    	je     c00015d4 <iALLOc+0x19b>
c0001542:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c0001545:	8d 78 f8             	lea    edi,[eax-0x8]
c0001548:	83 e3 fc             	and    ebx,0xfffffffc
c000154b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000154f:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c0001554:	74 1e                	je     c0001574 <iALLOc+0x13b>
c0001556:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000155a:	89 d9                	mov    ecx,ebx
c000155c:	52                   	push   edx
c000155d:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c0001561:	83 e9 04             	sub    ecx,0x4
c0001564:	51                   	push   ecx
c0001565:	6a 00                	push   0x0
c0001567:	50                   	push   eax
c0001568:	e8 83 ef ff ff       	call   c00004f0 <memset>
c000156d:	83 c4 10             	add    esp,0x10
c0001570:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001574:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0001579:	75 14                	jne    c000158f <iALLOc+0x156>
c000157b:	8d 04 37             	lea    eax,[edi+esi*1]
c000157e:	29 f3                	sub    ebx,esi
c0001580:	8d 48 08             	lea    ecx,[eax+0x8]
c0001583:	83 cb 01             	or     ebx,0x1
c0001586:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000158a:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000158d:	89 f3                	mov    ebx,esi
c000158f:	31 c0                	xor    eax,eax
c0001591:	4d                   	dec    ebp
c0001592:	8d 4f 08             	lea    ecx,[edi+0x8]
c0001595:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001599:	39 c5                	cmp    ebp,eax
c000159b:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c000159e:	74 2c                	je     c00015cc <iALLOc+0x193>
c00015a0:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00015a4:	85 c9                	test   ecx,ecx
c00015a6:	75 15                	jne    c00015bd <iALLOc+0x184>
c00015a8:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c00015ab:	8d 71 0b             	lea    esi,[ecx+0xb]
c00015ae:	b9 10 00 00 00       	mov    ecx,0x10
c00015b3:	83 fe 0f             	cmp    esi,0xf
c00015b6:	76 05                	jbe    c00015bd <iALLOc+0x184>
c00015b8:	83 e6 f8             	and    esi,0xfffffff8
c00015bb:	89 f1                	mov    ecx,esi
c00015bd:	89 ce                	mov    esi,ecx
c00015bf:	29 cb                	sub    ebx,ecx
c00015c1:	83 ce 01             	or     esi,0x1
c00015c4:	40                   	inc    eax
c00015c5:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c00015c8:	01 cf                	add    edi,ecx
c00015ca:	eb c6                	jmp    c0001592 <iALLOc+0x159>
c00015cc:	83 cb 01             	or     ebx,0x1
c00015cf:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c00015d2:	eb 08                	jmp    c00015dc <iALLOc+0x1a3>
c00015d4:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00015dc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00015e0:	83 c4 2c             	add    esp,0x2c
c00015e3:	5b                   	pop    ebx
c00015e4:	5e                   	pop    esi
c00015e5:	5f                   	pop    edi
c00015e6:	5d                   	pop    ebp
c00015e7:	c3                   	ret    

c00015e8 <dlrealloc>:
c00015e8:	55                   	push   ebp
c00015e9:	57                   	push   edi
c00015ea:	56                   	push   esi
c00015eb:	53                   	push   ebx
c00015ec:	83 ec 1c             	sub    esp,0x1c
c00015ef:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00015f3:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00015f7:	85 db                	test   ebx,ebx
c00015f9:	75 10                	jne    c000160b <dlrealloc+0x23>
c00015fb:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00015ff:	83 c4 1c             	add    esp,0x1c
c0001602:	5b                   	pop    ebx
c0001603:	5e                   	pop    esi
c0001604:	5f                   	pop    edi
c0001605:	5d                   	pop    ebp
c0001606:	e9 a0 fa ff ff       	jmp    c00010ab <dlmalloc>
c000160b:	83 f8 df             	cmp    eax,0xffffffdf
c000160e:	76 07                	jbe    c0001617 <dlrealloc+0x2f>
c0001610:	31 db                	xor    ebx,ebx
c0001612:	e9 6a 01 00 00       	jmp    c0001781 <dlrealloc+0x199>
c0001617:	83 c0 0b             	add    eax,0xb
c000161a:	bd 10 00 00 00       	mov    ebp,0x10
c000161f:	83 f8 0f             	cmp    eax,0xf
c0001622:	76 05                	jbe    c0001629 <dlrealloc+0x41>
c0001624:	83 e0 f8             	and    eax,0xfffffff8
c0001627:	89 c5                	mov    ebp,eax
c0001629:	8b 43 fc             	mov    eax,DWORD PTR [ebx-0x4]
c000162c:	8d 7b f8             	lea    edi,[ebx-0x8]
c000162f:	89 c6                	mov    esi,eax
c0001631:	83 e6 fc             	and    esi,0xfffffffc
c0001634:	a8 02                	test   al,0x2
c0001636:	75 d8                	jne    c0001610 <dlrealloc+0x28>
c0001638:	39 f5                	cmp    ebp,esi
c000163a:	0f 86 04 01 00 00    	jbe    c0001744 <dlrealloc+0x15c>
c0001640:	8d 14 37             	lea    edx,[edi+esi*1]
c0001643:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c0001646:	39 15 2c 51 02 c0    	cmp    DWORD PTR ds:0xc002512c,edx
c000164c:	75 33                	jne    c0001681 <dlrealloc+0x99>
c000164e:	83 e1 fc             	and    ecx,0xfffffffc
c0001651:	01 f1                	add    ecx,esi
c0001653:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0001657:	8d 4d 10             	lea    ecx,[ebp+0x10]
c000165a:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c000165e:	77 49                	ja     c00016a9 <dlrealloc+0xc1>
c0001660:	01 ef                	add    edi,ebp
c0001662:	83 e0 01             	and    eax,0x1
c0001665:	09 e8                	or     eax,ebp
c0001667:	89 43 fc             	mov    DWORD PTR [ebx-0x4],eax
c000166a:	89 3d 2c 51 02 c0    	mov    DWORD PTR ds:0xc002512c,edi
c0001670:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001674:	29 e8                	sub    eax,ebp
c0001676:	83 c8 01             	or     eax,0x1
c0001679:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c000167c:	e9 00 01 00 00       	jmp    c0001781 <dlrealloc+0x199>
c0001681:	89 c8                	mov    eax,ecx
c0001683:	83 e0 fe             	and    eax,0xfffffffe
c0001686:	f6 44 02 04 01       	test   BYTE PTR [edx+eax*1+0x4],0x1
c000168b:	75 1c                	jne    c00016a9 <dlrealloc+0xc1>
c000168d:	83 e1 fc             	and    ecx,0xfffffffc
c0001690:	01 f1                	add    ecx,esi
c0001692:	39 cd                	cmp    ebp,ecx
c0001694:	77 13                	ja     c00016a9 <dlrealloc+0xc1>
c0001696:	8b 72 08             	mov    esi,DWORD PTR [edx+0x8]
c0001699:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c000169c:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
c000169f:	89 70 08             	mov    DWORD PTR [eax+0x8],esi
c00016a2:	89 ce                	mov    esi,ecx
c00016a4:	e9 9b 00 00 00       	jmp    c0001744 <dlrealloc+0x15c>
c00016a9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00016ad:	8d 45 f9             	lea    eax,[ebp-0x7]
c00016b0:	83 ec 0c             	sub    esp,0xc
c00016b3:	50                   	push   eax
c00016b4:	e8 f2 f9 ff ff       	call   c00010ab <dlmalloc>
c00016b9:	83 c4 10             	add    esp,0x10
c00016bc:	85 c0                	test   eax,eax
c00016be:	0f 84 4c ff ff ff    	je     c0001610 <dlrealloc+0x28>
c00016c4:	8d 48 f8             	lea    ecx,[eax-0x8]
c00016c7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00016cb:	39 ca                	cmp    edx,ecx
c00016cd:	75 0a                	jne    c00016d9 <dlrealloc+0xf1>
c00016cf:	8b 40 fc             	mov    eax,DWORD PTR [eax-0x4]
c00016d2:	83 e0 fc             	and    eax,0xfffffffc
c00016d5:	01 c6                	add    esi,eax
c00016d7:	eb 6b                	jmp    c0001744 <dlrealloc+0x15c>
c00016d9:	8d 4e fc             	lea    ecx,[esi-0x4]
c00016dc:	83 f9 27             	cmp    ecx,0x27
c00016df:	76 08                	jbe    c00016e9 <dlrealloc+0x101>
c00016e1:	89 de                	mov    esi,ebx
c00016e3:	89 c7                	mov    edi,eax
c00016e5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00016e7:	eb 43                	jmp    c000172c <dlrealloc+0x144>
c00016e9:	8b 13                	mov    edx,DWORD PTR [ebx]
c00016eb:	83 f9 13             	cmp    ecx,0x13
c00016ee:	89 10                	mov    DWORD PTR [eax],edx
c00016f0:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c00016f3:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00016f6:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00016f9:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00016fc:	76 2e                	jbe    c000172c <dlrealloc+0x144>
c00016fe:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0001701:	83 f9 1b             	cmp    ecx,0x1b
c0001704:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0001707:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c000170a:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000170d:	76 1d                	jbe    c000172c <dlrealloc+0x144>
c000170f:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0001712:	83 f9 23             	cmp    ecx,0x23
c0001715:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0001718:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000171b:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000171e:	76 0c                	jbe    c000172c <dlrealloc+0x144>
c0001720:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0001723:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0001726:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0001729:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c000172c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001730:	83 ec 0c             	sub    esp,0xc
c0001733:	53                   	push   ebx
c0001734:	e8 1a f6 ff ff       	call   c0000d53 <dlfree>
c0001739:	83 c4 10             	add    esp,0x10
c000173c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001740:	89 c3                	mov    ebx,eax
c0001742:	eb 3d                	jmp    c0001781 <dlrealloc+0x199>
c0001744:	89 f2                	mov    edx,esi
c0001746:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c0001749:	29 ea                	sub    edx,ebp
c000174b:	83 e1 01             	and    ecx,0x1
c000174e:	8d 04 37             	lea    eax,[edi+esi*1]
c0001751:	83 fa 0f             	cmp    edx,0xf
c0001754:	77 0b                	ja     c0001761 <dlrealloc+0x179>
c0001756:	09 ce                	or     esi,ecx
c0001758:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c000175b:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c000175f:	eb 20                	jmp    c0001781 <dlrealloc+0x199>
c0001761:	01 ef                	add    edi,ebp
c0001763:	83 ec 0c             	sub    esp,0xc
c0001766:	09 cd                	or     ebp,ecx
c0001768:	83 ca 01             	or     edx,0x1
c000176b:	89 6b fc             	mov    DWORD PTR [ebx-0x4],ebp
c000176e:	83 c7 08             	add    edi,0x8
c0001771:	89 57 fc             	mov    DWORD PTR [edi-0x4],edx
c0001774:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c0001778:	57                   	push   edi
c0001779:	e8 d5 f5 ff ff       	call   c0000d53 <dlfree>
c000177e:	83 c4 10             	add    esp,0x10
c0001781:	83 c4 1c             	add    esp,0x1c
c0001784:	89 d8                	mov    eax,ebx
c0001786:	5b                   	pop    ebx
c0001787:	5e                   	pop    esi
c0001788:	5f                   	pop    edi
c0001789:	5d                   	pop    ebp
c000178a:	c3                   	ret    

c000178b <dlmemalign>:
c000178b:	55                   	push   ebp
c000178c:	57                   	push   edi
c000178d:	56                   	push   esi
c000178e:	53                   	push   ebx
c000178f:	83 ec 0c             	sub    esp,0xc
c0001792:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0001796:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000179a:	83 fa 08             	cmp    edx,0x8
c000179d:	77 10                	ja     c00017af <dlmemalign+0x24>
c000179f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00017a3:	83 c4 0c             	add    esp,0xc
c00017a6:	5b                   	pop    ebx
c00017a7:	5e                   	pop    esi
c00017a8:	5f                   	pop    edi
c00017a9:	5d                   	pop    ebp
c00017aa:	e9 fc f8 ff ff       	jmp    c00010ab <dlmalloc>
c00017af:	bf 10 00 00 00       	mov    edi,0x10
c00017b4:	83 fa 0f             	cmp    edx,0xf
c00017b7:	76 13                	jbe    c00017cc <dlmemalign+0x41>
c00017b9:	8d 4a ff             	lea    ecx,[edx-0x1]
c00017bc:	85 d1                	test   ecx,edx
c00017be:	75 04                	jne    c00017c4 <dlmemalign+0x39>
c00017c0:	89 d7                	mov    edi,edx
c00017c2:	eb 08                	jmp    c00017cc <dlmemalign+0x41>
c00017c4:	39 d7                	cmp    edi,edx
c00017c6:	73 04                	jae    c00017cc <dlmemalign+0x41>
c00017c8:	01 ff                	add    edi,edi
c00017ca:	eb f8                	jmp    c00017c4 <dlmemalign+0x39>
c00017cc:	83 f8 df             	cmp    eax,0xffffffdf
c00017cf:	76 07                	jbe    c00017d8 <dlmemalign+0x4d>
c00017d1:	31 c0                	xor    eax,eax
c00017d3:	e9 ce 00 00 00       	jmp    c00018a6 <dlmemalign+0x11b>
c00017d8:	83 c0 0b             	add    eax,0xb
c00017db:	bd 10 00 00 00       	mov    ebp,0x10
c00017e0:	83 f8 0f             	cmp    eax,0xf
c00017e3:	76 05                	jbe    c00017ea <dlmemalign+0x5f>
c00017e5:	83 e0 f8             	and    eax,0xfffffff8
c00017e8:	89 c5                	mov    ebp,eax
c00017ea:	83 ec 0c             	sub    esp,0xc
c00017ed:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c00017f1:	50                   	push   eax
c00017f2:	e8 b4 f8 ff ff       	call   c00010ab <dlmalloc>
c00017f7:	83 c4 10             	add    esp,0x10
c00017fa:	89 c1                	mov    ecx,eax
c00017fc:	85 c0                	test   eax,eax
c00017fe:	74 d1                	je     c00017d1 <dlmemalign+0x46>
c0001800:	31 d2                	xor    edx,edx
c0001802:	8d 70 f8             	lea    esi,[eax-0x8]
c0001805:	f7 f7                	div    edi
c0001807:	85 d2                	test   edx,edx
c0001809:	74 62                	je     c000186d <dlmemalign+0xe2>
c000180b:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c000180f:	89 f8                	mov    eax,edi
c0001811:	f7 d8                	neg    eax
c0001813:	21 c3                	and    ebx,eax
c0001815:	83 eb 08             	sub    ebx,0x8
c0001818:	89 d8                	mov    eax,ebx
c000181a:	29 f0                	sub    eax,esi
c000181c:	83 f8 0f             	cmp    eax,0xf
c000181f:	77 02                	ja     c0001823 <dlmemalign+0x98>
c0001821:	01 fb                	add    ebx,edi
c0001823:	89 d8                	mov    eax,ebx
c0001825:	29 f0                	sub    eax,esi
c0001827:	89 c6                	mov    esi,eax
c0001829:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c000182c:	89 c2                	mov    edx,eax
c000182e:	83 e2 fc             	and    edx,0xfffffffc
c0001831:	29 f2                	sub    edx,esi
c0001833:	a8 02                	test   al,0x2
c0001835:	74 10                	je     c0001847 <dlmemalign+0xbc>
c0001837:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c000183a:	83 ca 02             	or     edx,0x2
c000183d:	8d 43 08             	lea    eax,[ebx+0x8]
c0001840:	89 33                	mov    DWORD PTR [ebx],esi
c0001842:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0001845:	eb 5f                	jmp    c00018a6 <dlmemalign+0x11b>
c0001847:	83 ec 0c             	sub    esp,0xc
c000184a:	89 d0                	mov    eax,edx
c000184c:	83 c8 01             	or     eax,0x1
c000184f:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0001852:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c0001857:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c000185a:	83 e0 01             	and    eax,0x1
c000185d:	09 f0                	or     eax,esi
c000185f:	89 de                	mov    esi,ebx
c0001861:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c0001864:	51                   	push   ecx
c0001865:	e8 e9 f4 ff ff       	call   c0000d53 <dlfree>
c000186a:	83 c4 10             	add    esp,0x10
c000186d:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0001870:	a8 02                	test   al,0x2
c0001872:	75 2f                	jne    c00018a3 <dlmemalign+0x118>
c0001874:	83 e0 fc             	and    eax,0xfffffffc
c0001877:	8d 55 10             	lea    edx,[ebp+0x10]
c000187a:	39 c2                	cmp    edx,eax
c000187c:	73 25                	jae    c00018a3 <dlmemalign+0x118>
c000187e:	8d 14 2e             	lea    edx,[esi+ebp*1]
c0001881:	83 ec 0c             	sub    esp,0xc
c0001884:	29 e8                	sub    eax,ebp
c0001886:	83 c2 08             	add    edx,0x8
c0001889:	83 c8 01             	or     eax,0x1
c000188c:	89 42 fc             	mov    DWORD PTR [edx-0x4],eax
c000188f:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0001892:	83 e0 01             	and    eax,0x1
c0001895:	09 c5                	or     ebp,eax
c0001897:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c000189a:	52                   	push   edx
c000189b:	e8 b3 f4 ff ff       	call   c0000d53 <dlfree>
c00018a0:	83 c4 10             	add    esp,0x10
c00018a3:	8d 46 08             	lea    eax,[esi+0x8]
c00018a6:	83 c4 0c             	add    esp,0xc
c00018a9:	5b                   	pop    ebx
c00018aa:	5e                   	pop    esi
c00018ab:	5f                   	pop    edi
c00018ac:	5d                   	pop    ebp
c00018ad:	c3                   	ret    

c00018ae <dlcalloc>:
c00018ae:	53                   	push   ebx
c00018af:	83 ec 14             	sub    esp,0x14
c00018b2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00018b6:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c00018bb:	50                   	push   eax
c00018bc:	e8 ea f7 ff ff       	call   c00010ab <dlmalloc>
c00018c1:	83 c4 10             	add    esp,0x10
c00018c4:	89 c3                	mov    ebx,eax
c00018c6:	85 c0                	test   eax,eax
c00018c8:	74 77                	je     c0001941 <dlcalloc+0x93>
c00018ca:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c00018cd:	89 d0                	mov    eax,edx
c00018cf:	83 e0 fc             	and    eax,0xfffffffc
c00018d2:	80 e2 02             	and    dl,0x2
c00018d5:	75 5a                	jne    c0001931 <dlcalloc+0x83>
c00018d7:	83 e8 04             	sub    eax,0x4
c00018da:	83 f8 27             	cmp    eax,0x27
c00018dd:	76 03                	jbe    c00018e2 <dlcalloc+0x34>
c00018df:	51                   	push   ecx
c00018e0:	eb 53                	jmp    c0001935 <dlcalloc+0x87>
c00018e2:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00018e8:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00018ef:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c00018f6:	83 f8 13             	cmp    eax,0x13
c00018f9:	76 46                	jbe    c0001941 <dlcalloc+0x93>
c00018fb:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0001902:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0001909:	83 f8 1b             	cmp    eax,0x1b
c000190c:	76 33                	jbe    c0001941 <dlcalloc+0x93>
c000190e:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0001915:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000191c:	83 f8 23             	cmp    eax,0x23
c000191f:	76 20                	jbe    c0001941 <dlcalloc+0x93>
c0001921:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0001928:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c000192f:	eb 10                	jmp    c0001941 <dlcalloc+0x93>
c0001931:	83 e8 08             	sub    eax,0x8
c0001934:	52                   	push   edx
c0001935:	50                   	push   eax
c0001936:	6a 00                	push   0x0
c0001938:	53                   	push   ebx
c0001939:	e8 b2 eb ff ff       	call   c00004f0 <memset>
c000193e:	83 c4 10             	add    esp,0x10
c0001941:	89 d8                	mov    eax,ebx
c0001943:	83 c4 08             	add    esp,0x8
c0001946:	5b                   	pop    ebx
c0001947:	c3                   	ret    

c0001948 <dlcfree>:
c0001948:	e9 06 f4 ff ff       	jmp    c0000d53 <dlfree>

c000194d <dlindependent_calloc>:
c000194d:	83 ec 28             	sub    esp,0x28
c0001950:	b9 03 00 00 00       	mov    ecx,0x3
c0001955:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001959:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000195d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0001961:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0001965:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001969:	e8 cb fa ff ff       	call   c0001439 <iALLOc>
c000196e:	83 c4 2c             	add    esp,0x2c
c0001971:	c3                   	ret    

c0001972 <dlindependent_comalloc>:
c0001972:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0001976:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000197a:	31 c9                	xor    ecx,ecx
c000197c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0001980:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0001984:	e9 b0 fa ff ff       	jmp    c0001439 <iALLOc>

c0001989 <dlvalloc>:
c0001989:	83 ec 0c             	sub    esp,0xc
c000198c:	83 3d 00 51 02 c0 00 	cmp    DWORD PTR ds:0xc0025100,0x0
c0001993:	75 0a                	jne    c000199f <dlvalloc+0x16>
c0001995:	b8 00 51 02 c0       	mov    eax,0xc0025100
c000199a:	e8 cd f2 ff ff       	call   c0000c6c <malloc_consolidate>
c000199f:	50                   	push   eax
c00019a0:	50                   	push   eax
c00019a1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00019a5:	ff 35 5c 54 02 c0    	push   DWORD PTR ds:0xc002545c
c00019ab:	e8 db fd ff ff       	call   c000178b <dlmemalign>
c00019b0:	83 c4 1c             	add    esp,0x1c
c00019b3:	c3                   	ret    

c00019b4 <dlpvalloc>:
c00019b4:	83 ec 0c             	sub    esp,0xc
c00019b7:	83 3d 00 51 02 c0 00 	cmp    DWORD PTR ds:0xc0025100,0x0
c00019be:	75 0a                	jne    c00019ca <dlpvalloc+0x16>
c00019c0:	b8 00 51 02 c0       	mov    eax,0xc0025100
c00019c5:	e8 a2 f2 ff ff       	call   c0000c6c <malloc_consolidate>
c00019ca:	a1 5c 54 02 c0       	mov    eax,ds:0xc002545c
c00019cf:	89 c1                	mov    ecx,eax
c00019d1:	52                   	push   edx
c00019d2:	f7 d9                	neg    ecx
c00019d4:	52                   	push   edx
c00019d5:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00019d9:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c00019dd:	21 ca                	and    edx,ecx
c00019df:	52                   	push   edx
c00019e0:	50                   	push   eax
c00019e1:	e8 a5 fd ff ff       	call   c000178b <dlmemalign>
c00019e6:	83 c4 1c             	add    esp,0x1c
c00019e9:	c3                   	ret    

c00019ea <dlmalloc_trim>:
c00019ea:	b8 00 51 02 c0       	mov    eax,0xc0025100
c00019ef:	e8 78 f2 ff ff       	call   c0000c6c <malloc_consolidate>
c00019f4:	31 c0                	xor    eax,eax
c00019f6:	c3                   	ret    

c00019f7 <dlmalloc_usable_size>:
c00019f7:	53                   	push   ebx
c00019f8:	31 c0                	xor    eax,eax
c00019fa:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00019fe:	85 c9                	test   ecx,ecx
c0001a00:	74 24                	je     c0001a26 <dlmalloc_usable_size+0x2f>
c0001a02:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c0001a05:	f6 c2 02             	test   dl,0x2
c0001a08:	74 08                	je     c0001a12 <dlmalloc_usable_size+0x1b>
c0001a0a:	83 e2 fc             	and    edx,0xfffffffc
c0001a0d:	8d 42 f8             	lea    eax,[edx-0x8]
c0001a10:	eb 14                	jmp    c0001a26 <dlmalloc_usable_size+0x2f>
c0001a12:	89 d3                	mov    ebx,edx
c0001a14:	31 c0                	xor    eax,eax
c0001a16:	83 e3 fe             	and    ebx,0xfffffffe
c0001a19:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c0001a1e:	74 06                	je     c0001a26 <dlmalloc_usable_size+0x2f>
c0001a20:	83 e2 fc             	and    edx,0xfffffffc
c0001a23:	8d 42 fc             	lea    eax,[edx-0x4]
c0001a26:	5b                   	pop    ebx
c0001a27:	c3                   	ret    

c0001a28 <dlmallinfo>:
c0001a28:	55                   	push   ebp
c0001a29:	57                   	push   edi
c0001a2a:	56                   	push   esi
c0001a2b:	53                   	push   ebx
c0001a2c:	83 ec 08             	sub    esp,0x8
c0001a2f:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0001a33:	83 3d 2c 51 02 c0 00 	cmp    DWORD PTR ds:0xc002512c,0x0
c0001a3a:	75 0a                	jne    c0001a46 <dlmallinfo+0x1e>
c0001a3c:	b8 00 51 02 c0       	mov    eax,0xc0025100
c0001a41:	e8 26 f2 ff ff       	call   c0000c6c <malloc_consolidate>
c0001a46:	a1 2c 51 02 c0       	mov    eax,ds:0xc002512c
c0001a4b:	31 ed                	xor    ebp,ebp
c0001a4d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0001a50:	31 c9                	xor    ecx,ecx
c0001a52:	83 e0 fc             	and    eax,0xfffffffc
c0001a55:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001a59:	31 c0                	xor    eax,eax
c0001a5b:	8b 14 85 04 51 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdaefc]
c0001a62:	85 d2                	test   edx,edx
c0001a64:	74 0e                	je     c0001a74 <dlmallinfo+0x4c>
c0001a66:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c0001a69:	45                   	inc    ebp
c0001a6a:	83 e6 fc             	and    esi,0xfffffffc
c0001a6d:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0001a70:	01 f1                	add    ecx,esi
c0001a72:	eb ee                	jmp    c0001a62 <dlmallinfo+0x3a>
c0001a74:	40                   	inc    eax
c0001a75:	83 f8 0a             	cmp    eax,0xa
c0001a78:	75 e1                	jne    c0001a5b <dlmallinfo+0x33>
c0001a7a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001a7e:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0001a85:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001a88:	b8 34 51 02 c0       	mov    eax,0xc0025134
c0001a8d:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c0001a90:	39 f0                	cmp    eax,esi
c0001a92:	74 10                	je     c0001aa4 <dlmallinfo+0x7c>
c0001a94:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0001a97:	ff 04 24             	inc    DWORD PTR [esp]
c0001a9a:	83 e7 fc             	and    edi,0xfffffffc
c0001a9d:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0001aa0:	01 fa                	add    edx,edi
c0001aa2:	eb ec                	jmp    c0001a90 <dlmallinfo+0x68>
c0001aa4:	83 c0 08             	add    eax,0x8
c0001aa7:	3d 2c 54 02 c0       	cmp    eax,0xc002542c
c0001aac:	75 df                	jne    c0001a8d <dlmallinfo+0x65>
c0001aae:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c0001ab1:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0001ab4:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001ab7:	a1 68 54 02 c0       	mov    eax,ds:0xc0025468
c0001abc:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001abf:	89 03                	mov    DWORD PTR [ebx],eax
c0001ac1:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0001ac4:	8b 35 50 54 02 c0    	mov    esi,DWORD PTR ds:0xc0025450
c0001aca:	29 d0                	sub    eax,edx
c0001acc:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001acf:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001ad2:	8b 35 64 54 02 c0    	mov    esi,DWORD PTR ds:0xc0025464
c0001ad8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001adc:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001adf:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001ae2:	8b 35 74 54 02 c0    	mov    esi,DWORD PTR ds:0xc0025474
c0001ae8:	89 d8                	mov    eax,ebx
c0001aea:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001aed:	83 c4 08             	add    esp,0x8
c0001af0:	5b                   	pop    ebx
c0001af1:	5e                   	pop    esi
c0001af2:	5f                   	pop    edi
c0001af3:	5d                   	pop    ebp
c0001af4:	c2 04 00             	ret    0x4

c0001af7 <dlmalloc_stats>:
c0001af7:	83 ec 30             	sub    esp,0x30
c0001afa:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001afe:	50                   	push   eax
c0001aff:	e8 24 ff ff ff       	call   c0001a28 <dlmallinfo>
c0001b04:	83 c4 30             	add    esp,0x30
c0001b07:	c3                   	ret    

c0001b08 <dlmallopt>:
c0001b08:	56                   	push   esi
c0001b09:	b8 00 51 02 c0       	mov    eax,0xc0025100
c0001b0e:	53                   	push   ebx
c0001b0f:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001b13:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001b17:	e8 50 f1 ff ff       	call   c0000c6c <malloc_consolidate>
c0001b1c:	8d 46 04             	lea    eax,[esi+0x4]
c0001b1f:	83 f8 05             	cmp    eax,0x5
c0001b22:	77 67                	ja     c0001b8b <dlmallopt+0x83>
c0001b24:	ff 24 85 04 ff 01 c0 	jmp    DWORD PTR [eax*4-0x3ffe00fc]
c0001b2b:	83 fb 50             	cmp    ebx,0x50
c0001b2e:	77 5b                	ja     c0001b8b <dlmallopt+0x83>
c0001b30:	ba 08 00 00 00       	mov    edx,0x8
c0001b35:	85 db                	test   ebx,ebx
c0001b37:	74 12                	je     c0001b4b <dlmallopt+0x43>
c0001b39:	83 c3 0b             	add    ebx,0xb
c0001b3c:	ba 10 00 00 00       	mov    edx,0x10
c0001b41:	83 fb 0f             	cmp    ebx,0xf
c0001b44:	76 05                	jbe    c0001b4b <dlmallopt+0x43>
c0001b46:	89 da                	mov    edx,ebx
c0001b48:	83 e2 f8             	and    edx,0xfffffff8
c0001b4b:	a1 00 51 02 c0       	mov    eax,ds:0xc0025100
c0001b50:	83 e0 03             	and    eax,0x3
c0001b53:	09 d0                	or     eax,edx
c0001b55:	a3 00 51 02 c0       	mov    ds:0xc0025100,eax
c0001b5a:	eb 31                	jmp    c0001b8d <dlmallopt+0x85>
c0001b5c:	89 1d 44 54 02 c0    	mov    DWORD PTR ds:0xc0025444,ebx
c0001b62:	eb 06                	jmp    c0001b6a <dlmallopt+0x62>
c0001b64:	89 1d 48 54 02 c0    	mov    DWORD PTR ds:0xc0025448,ebx
c0001b6a:	be 01 00 00 00       	mov    esi,0x1
c0001b6f:	eb 1c                	jmp    c0001b8d <dlmallopt+0x85>
c0001b71:	89 1d 4c 54 02 c0    	mov    DWORD PTR ds:0xc002544c,ebx
c0001b77:	eb f1                	jmp    c0001b6a <dlmallopt+0x62>
c0001b79:	31 f6                	xor    esi,esi
c0001b7b:	85 db                	test   ebx,ebx
c0001b7d:	75 0e                	jne    c0001b8d <dlmallopt+0x85>
c0001b7f:	c7 05 54 54 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025454,0x0
c0001b89:	eb df                	jmp    c0001b6a <dlmallopt+0x62>
c0001b8b:	31 f6                	xor    esi,esi
c0001b8d:	89 f0                	mov    eax,esi
c0001b8f:	5b                   	pop    ebx
c0001b90:	5e                   	pop    esi
c0001b91:	c3                   	ret    
c0001b92:	66 90                	xchg   ax,ax

c0001b94 <isblank>:
c0001b94:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001b99:	74 09                	je     c0001ba4 <isblank+0x10>
c0001b9b:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001ba0:	75 0a                	jne    c0001bac <isblank+0x18>
c0001ba2:	66 90                	xchg   ax,ax
c0001ba4:	b8 01 00 00 00       	mov    eax,0x1
c0001ba9:	c3                   	ret    
c0001baa:	66 90                	xchg   ax,ax
c0001bac:	b8 00 00 00 00       	mov    eax,0x0
c0001bb1:	c3                   	ret    
c0001bb2:	66 90                	xchg   ax,ax

c0001bb4 <iscntrl>:
c0001bb4:	83 7c 24 04 1f       	cmp    DWORD PTR [esp+0x4],0x1f
c0001bb9:	7e 09                	jle    c0001bc4 <iscntrl+0x10>
c0001bbb:	83 7c 24 04 7f       	cmp    DWORD PTR [esp+0x4],0x7f
c0001bc0:	75 0a                	jne    c0001bcc <iscntrl+0x18>
c0001bc2:	66 90                	xchg   ax,ax
c0001bc4:	b8 01 00 00 00       	mov    eax,0x1
c0001bc9:	c3                   	ret    
c0001bca:	66 90                	xchg   ax,ax
c0001bcc:	b8 00 00 00 00       	mov    eax,0x0
c0001bd1:	c3                   	ret    
c0001bd2:	66 90                	xchg   ax,ax

c0001bd4 <isdigit>:
c0001bd4:	83 7c 24 04 2f       	cmp    DWORD PTR [esp+0x4],0x2f
c0001bd9:	7e 0d                	jle    c0001be8 <isdigit+0x14>
c0001bdb:	83 7c 24 04 39       	cmp    DWORD PTR [esp+0x4],0x39
c0001be0:	7f 06                	jg     c0001be8 <isdigit+0x14>
c0001be2:	b8 01 00 00 00       	mov    eax,0x1
c0001be7:	c3                   	ret    
c0001be8:	b8 00 00 00 00       	mov    eax,0x0
c0001bed:	c3                   	ret    
c0001bee:	66 90                	xchg   ax,ax

c0001bf0 <islower>:
c0001bf0:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c0001bf5:	7e 0d                	jle    c0001c04 <islower+0x14>
c0001bf7:	83 7c 24 04 7a       	cmp    DWORD PTR [esp+0x4],0x7a
c0001bfc:	7f 06                	jg     c0001c04 <islower+0x14>
c0001bfe:	b8 01 00 00 00       	mov    eax,0x1
c0001c03:	c3                   	ret    
c0001c04:	b8 00 00 00 00       	mov    eax,0x0
c0001c09:	c3                   	ret    
c0001c0a:	66 90                	xchg   ax,ax

c0001c0c <isspace>:
c0001c0c:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001c11:	7c 19                	jl     c0001c2c <isspace+0x20>
c0001c13:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0001c18:	7e 0a                	jle    c0001c24 <isspace+0x18>
c0001c1a:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001c1f:	75 0b                	jne    c0001c2c <isspace+0x20>
c0001c21:	8d 76 00             	lea    esi,[esi+0x0]
c0001c24:	b8 01 00 00 00       	mov    eax,0x1
c0001c29:	c3                   	ret    
c0001c2a:	66 90                	xchg   ax,ax
c0001c2c:	b8 00 00 00 00       	mov    eax,0x0
c0001c31:	c3                   	ret    
c0001c32:	66 90                	xchg   ax,ax

c0001c34 <isupper>:
c0001c34:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c0001c39:	7e 0d                	jle    c0001c48 <isupper+0x14>
c0001c3b:	83 7c 24 04 5a       	cmp    DWORD PTR [esp+0x4],0x5a
c0001c40:	7f 06                	jg     c0001c48 <isupper+0x14>
c0001c42:	b8 01 00 00 00       	mov    eax,0x1
c0001c47:	c3                   	ret    
c0001c48:	b8 00 00 00 00       	mov    eax,0x0
c0001c4d:	c3                   	ret    
c0001c4e:	66 90                	xchg   ax,ax

c0001c50 <isalpha>:
c0001c50:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c54:	e8 db ff ff ff       	call   c0001c34 <isupper>
c0001c59:	83 c4 04             	add    esp,0x4
c0001c5c:	85 c0                	test   eax,eax
c0001c5e:	75 10                	jne    c0001c70 <isalpha+0x20>
c0001c60:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c64:	e8 87 ff ff ff       	call   c0001bf0 <islower>
c0001c69:	83 c4 04             	add    esp,0x4
c0001c6c:	85 c0                	test   eax,eax
c0001c6e:	74 08                	je     c0001c78 <isalpha+0x28>
c0001c70:	b8 01 00 00 00       	mov    eax,0x1
c0001c75:	c3                   	ret    
c0001c76:	66 90                	xchg   ax,ax
c0001c78:	b8 00 00 00 00       	mov    eax,0x0
c0001c7d:	c3                   	ret    
c0001c7e:	66 90                	xchg   ax,ax

c0001c80 <isalnum>:
c0001c80:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c84:	e8 c7 ff ff ff       	call   c0001c50 <isalpha>
c0001c89:	83 c4 04             	add    esp,0x4
c0001c8c:	85 c0                	test   eax,eax
c0001c8e:	75 10                	jne    c0001ca0 <isalnum+0x20>
c0001c90:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c94:	e8 3b ff ff ff       	call   c0001bd4 <isdigit>
c0001c99:	83 c4 04             	add    esp,0x4
c0001c9c:	85 c0                	test   eax,eax
c0001c9e:	74 08                	je     c0001ca8 <isalnum+0x28>
c0001ca0:	b8 01 00 00 00       	mov    eax,0x1
c0001ca5:	c3                   	ret    
c0001ca6:	66 90                	xchg   ax,ax
c0001ca8:	b8 00 00 00 00       	mov    eax,0x0
c0001cad:	c3                   	ret    
c0001cae:	66 90                	xchg   ax,ax

c0001cb0 <ispunct>:
c0001cb0:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001cb4:	e8 c7 ff ff ff       	call   c0001c80 <isalnum>
c0001cb9:	83 c4 04             	add    esp,0x4
c0001cbc:	85 c0                	test   eax,eax
c0001cbe:	75 28                	jne    c0001ce8 <ispunct+0x38>
c0001cc0:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001cc4:	e8 43 ff ff ff       	call   c0001c0c <isspace>
c0001cc9:	83 c4 04             	add    esp,0x4
c0001ccc:	85 c0                	test   eax,eax
c0001cce:	75 18                	jne    c0001ce8 <ispunct+0x38>
c0001cd0:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001cd4:	e8 db fe ff ff       	call   c0001bb4 <iscntrl>
c0001cd9:	83 c4 04             	add    esp,0x4
c0001cdc:	85 c0                	test   eax,eax
c0001cde:	75 08                	jne    c0001ce8 <ispunct+0x38>
c0001ce0:	b8 01 00 00 00       	mov    eax,0x1
c0001ce5:	c3                   	ret    
c0001ce6:	66 90                	xchg   ax,ax
c0001ce8:	b8 00 00 00 00       	mov    eax,0x0
c0001ced:	c3                   	ret    
c0001cee:	66 90                	xchg   ax,ax

c0001cf0 <isgraph>:
c0001cf0:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001cf4:	e8 87 ff ff ff       	call   c0001c80 <isalnum>
c0001cf9:	83 c4 04             	add    esp,0x4
c0001cfc:	85 c0                	test   eax,eax
c0001cfe:	75 10                	jne    c0001d10 <isgraph+0x20>
c0001d00:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001d04:	e8 a7 ff ff ff       	call   c0001cb0 <ispunct>
c0001d09:	83 c4 04             	add    esp,0x4
c0001d0c:	85 c0                	test   eax,eax
c0001d0e:	74 08                	je     c0001d18 <isgraph+0x28>
c0001d10:	b8 01 00 00 00       	mov    eax,0x1
c0001d15:	c3                   	ret    
c0001d16:	66 90                	xchg   ax,ax
c0001d18:	b8 00 00 00 00       	mov    eax,0x0
c0001d1d:	c3                   	ret    
c0001d1e:	66 90                	xchg   ax,ax

c0001d20 <isprint>:
c0001d20:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001d24:	e8 c7 ff ff ff       	call   c0001cf0 <isgraph>
c0001d29:	83 c4 04             	add    esp,0x4
c0001d2c:	85 c0                	test   eax,eax
c0001d2e:	75 08                	jne    c0001d38 <isprint+0x18>
c0001d30:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001d35:	75 09                	jne    c0001d40 <isprint+0x20>
c0001d37:	90                   	nop
c0001d38:	b8 01 00 00 00       	mov    eax,0x1
c0001d3d:	c3                   	ret    
c0001d3e:	66 90                	xchg   ax,ax
c0001d40:	b8 00 00 00 00       	mov    eax,0x0
c0001d45:	c3                   	ret    
c0001d46:	66 90                	xchg   ax,ax

c0001d48 <isxdigit>:
c0001d48:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001d4c:	e8 83 fe ff ff       	call   c0001bd4 <isdigit>
c0001d51:	83 c4 04             	add    esp,0x4
c0001d54:	85 c0                	test   eax,eax
c0001d56:	75 20                	jne    c0001d78 <isxdigit+0x30>
c0001d58:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c0001d5d:	7e 09                	jle    c0001d68 <isxdigit+0x20>
c0001d5f:	83 7c 24 04 46       	cmp    DWORD PTR [esp+0x4],0x46
c0001d64:	7e 12                	jle    c0001d78 <isxdigit+0x30>
c0001d66:	66 90                	xchg   ax,ax
c0001d68:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c0001d6d:	7e 11                	jle    c0001d80 <isxdigit+0x38>
c0001d6f:	83 7c 24 04 66       	cmp    DWORD PTR [esp+0x4],0x66
c0001d74:	7f 0a                	jg     c0001d80 <isxdigit+0x38>
c0001d76:	66 90                	xchg   ax,ax
c0001d78:	b8 01 00 00 00       	mov    eax,0x1
c0001d7d:	c3                   	ret    
c0001d7e:	66 90                	xchg   ax,ax
c0001d80:	b8 00 00 00 00       	mov    eax,0x0
c0001d85:	c3                   	ret    

c0001d86 <disk_status>:
c0001d86:	31 c0                	xor    eax,eax
c0001d88:	c3                   	ret    

c0001d89 <disk_initialize>:
c0001d89:	31 c0                	xor    eax,eax
c0001d8b:	c3                   	ret    

c0001d8c <disk_read>:
c0001d8c:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001d91:	0f b6 04 85 c0 a5 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd5a40]
c0001d99:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001d9d:	e9 da 76 01 00       	jmp    c001947c <fatWrapperReadDisk>

c0001da2 <disk_write>:
c0001da2:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001da7:	0f b6 04 85 c0 a5 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd5a40]
c0001daf:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001db3:	e9 04 77 01 00       	jmp    c00194bc <fatWrapperWriteDisk>

c0001db8 <disk_ioctl>:
c0001db8:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001dbd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001dc1:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001dc6:	0f b6 04 85 c0 a5 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd5a40]
c0001dce:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001dd2:	e9 25 77 01 00       	jmp    c00194fc <fatWrapperIoctl>

c0001dd7 <ld_word>:
c0001dd7:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001ddb:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001dde:	c1 e2 08             	shl    edx,0x8
c0001de1:	09 d0                	or     eax,edx
c0001de3:	c3                   	ret    

c0001de4 <ld_dword>:
c0001de4:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001de8:	89 d1                	mov    ecx,edx
c0001dea:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001dee:	c1 e1 08             	shl    ecx,0x8
c0001df1:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001df4:	09 ca                	or     edx,ecx
c0001df6:	c1 e2 08             	shl    edx,0x8
c0001df9:	09 d0                	or     eax,edx
c0001dfb:	c3                   	ret    

c0001dfc <st_word>:
c0001dfc:	66 89 10             	mov    WORD PTR [eax],dx
c0001dff:	c3                   	ret    

c0001e00 <st_dword>:
c0001e00:	89 10                	mov    DWORD PTR [eax],edx
c0001e02:	c3                   	ret    

c0001e03 <mem_cpy>:
c0001e03:	85 c9                	test   ecx,ecx
c0001e05:	74 10                	je     c0001e17 <mem_cpy+0x14>
c0001e07:	57                   	push   edi
c0001e08:	01 c1                	add    ecx,eax
c0001e0a:	56                   	push   esi
c0001e0b:	89 c7                	mov    edi,eax
c0001e0d:	89 d6                	mov    esi,edx
c0001e0f:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001e10:	39 f9                	cmp    ecx,edi
c0001e12:	75 fb                	jne    c0001e0f <mem_cpy+0xc>
c0001e14:	5e                   	pop    esi
c0001e15:	5f                   	pop    edi
c0001e16:	c3                   	ret    
c0001e17:	c3                   	ret    

c0001e18 <mem_set>:
c0001e18:	01 c1                	add    ecx,eax
c0001e1a:	40                   	inc    eax
c0001e1b:	88 50 ff             	mov    BYTE PTR [eax-0x1],dl
c0001e1e:	39 c8                	cmp    eax,ecx
c0001e20:	75 f8                	jne    c0001e1a <mem_set+0x2>
c0001e22:	c3                   	ret    

c0001e23 <mem_cmp>:
c0001e23:	57                   	push   edi
c0001e24:	56                   	push   esi
c0001e25:	89 c6                	mov    esi,eax
c0001e27:	53                   	push   ebx
c0001e28:	46                   	inc    esi
c0001e29:	42                   	inc    edx
c0001e2a:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001e2e:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001e32:	29 fb                	sub    ebx,edi
c0001e34:	89 cf                	mov    edi,ecx
c0001e36:	29 f7                	sub    edi,esi
c0001e38:	01 c7                	add    edi,eax
c0001e3a:	74 04                	je     c0001e40 <mem_cmp+0x1d>
c0001e3c:	85 db                	test   ebx,ebx
c0001e3e:	74 e8                	je     c0001e28 <mem_cmp+0x5>
c0001e40:	89 d8                	mov    eax,ebx
c0001e42:	5b                   	pop    ebx
c0001e43:	5e                   	pop    esi
c0001e44:	5f                   	pop    edi
c0001e45:	c3                   	ret    

c0001e46 <chk_chr>:
c0001e46:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001e49:	85 c9                	test   ecx,ecx
c0001e4b:	74 07                	je     c0001e54 <chk_chr+0xe>
c0001e4d:	39 d1                	cmp    ecx,edx
c0001e4f:	74 03                	je     c0001e54 <chk_chr+0xe>
c0001e51:	40                   	inc    eax
c0001e52:	eb f2                	jmp    c0001e46 <chk_chr>
c0001e54:	89 c8                	mov    eax,ecx
c0001e56:	c3                   	ret    

c0001e57 <dbc_1st>:
c0001e57:	31 c0                	xor    eax,eax
c0001e59:	c3                   	ret    

c0001e5a <dbc_2nd>:
c0001e5a:	31 c0                	xor    eax,eax
c0001e5c:	c3                   	ret    

c0001e5d <tchar2uni>:
c0001e5d:	57                   	push   edi
c0001e5e:	56                   	push   esi
c0001e5f:	53                   	push   ebx
c0001e60:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001e62:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001e64:	8d 73 01             	lea    esi,[ebx+0x1]
c0001e67:	f6 c1 80             	test   cl,0x80
c0001e6a:	75 0a                	jne    c0001e76 <tchar2uni+0x19>
c0001e6c:	0f b6 d1             	movzx  edx,cl
c0001e6f:	89 f3                	mov    ebx,esi
c0001e71:	e9 b2 00 00 00       	jmp    c0001f28 <tchar2uni+0xcb>
c0001e76:	89 ca                	mov    edx,ecx
c0001e78:	81 e2 e0 00 00 00    	and    edx,0xe0
c0001e7e:	81 fa c0 00 00 00    	cmp    edx,0xc0
c0001e84:	89 ca                	mov    edx,ecx
c0001e86:	75 0a                	jne    c0001e92 <tchar2uni+0x35>
c0001e88:	83 e2 1f             	and    edx,0x1f
c0001e8b:	b9 01 00 00 00       	mov    ecx,0x1
c0001e90:	eb 37                	jmp    c0001ec9 <tchar2uni+0x6c>
c0001e92:	81 e2 f0 00 00 00    	and    edx,0xf0
c0001e98:	81 fa e0 00 00 00    	cmp    edx,0xe0
c0001e9e:	75 0c                	jne    c0001eac <tchar2uni+0x4f>
c0001ea0:	89 ca                	mov    edx,ecx
c0001ea2:	b9 02 00 00 00       	mov    ecx,0x2
c0001ea7:	83 e2 0f             	and    edx,0xf
c0001eaa:	eb 1d                	jmp    c0001ec9 <tchar2uni+0x6c>
c0001eac:	89 cf                	mov    edi,ecx
c0001eae:	83 ca ff             	or     edx,0xffffffff
c0001eb1:	81 e7 f8 00 00 00    	and    edi,0xf8
c0001eb7:	81 ff f0 00 00 00    	cmp    edi,0xf0
c0001ebd:	75 70                	jne    c0001f2f <tchar2uni+0xd2>
c0001ebf:	89 ca                	mov    edx,ecx
c0001ec1:	b9 03 00 00 00       	mov    ecx,0x3
c0001ec6:	83 e2 07             	and    edx,0x7
c0001ec9:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0001ecd:	46                   	inc    esi
c0001ece:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0001ed1:	89 cf                	mov    edi,ecx
c0001ed3:	81 e7 c0 00 00 00    	and    edi,0xc0
c0001ed9:	83 c7 80             	add    edi,0xffffff80
c0001edc:	75 4e                	jne    c0001f2c <tchar2uni+0xcf>
c0001ede:	c1 e2 06             	shl    edx,0x6
c0001ee1:	83 e1 3f             	and    ecx,0x3f
c0001ee4:	09 ca                	or     edx,ecx
c0001ee6:	39 de                	cmp    esi,ebx
c0001ee8:	75 e3                	jne    c0001ecd <tchar2uni+0x70>
c0001eea:	8d 4a 80             	lea    ecx,[edx-0x80]
c0001eed:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0001ef3:	77 37                	ja     c0001f2c <tchar2uni+0xcf>
c0001ef5:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0001efb:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001f01:	76 29                	jbe    c0001f2c <tchar2uni+0xcf>
c0001f03:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0001f09:	76 1d                	jbe    c0001f28 <tchar2uni+0xcb>
c0001f0b:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0001f11:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0001f17:	c1 e1 06             	shl    ecx,0x6
c0001f1a:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0001f20:	09 ca                	or     edx,ecx
c0001f22:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0001f28:	89 18                	mov    DWORD PTR [eax],ebx
c0001f2a:	eb 03                	jmp    c0001f2f <tchar2uni+0xd2>
c0001f2c:	83 ca ff             	or     edx,0xffffffff
c0001f2f:	5b                   	pop    ebx
c0001f30:	89 d0                	mov    eax,edx
c0001f32:	5e                   	pop    esi
c0001f33:	5f                   	pop    edi
c0001f34:	c3                   	ret    

c0001f35 <put_utf>:
c0001f35:	53                   	push   ebx
c0001f36:	83 f8 7f             	cmp    eax,0x7f
c0001f39:	89 c3                	mov    ebx,eax
c0001f3b:	b0 00                	mov    al,0x0
c0001f3d:	77 11                	ja     c0001f50 <put_utf+0x1b>
c0001f3f:	85 c9                	test   ecx,ecx
c0001f41:	0f 84 e5 00 00 00    	je     c000202c <put_utf+0xf7>
c0001f47:	88 1a                	mov    BYTE PTR [edx],bl
c0001f49:	b0 01                	mov    al,0x1
c0001f4b:	e9 dc 00 00 00       	jmp    c000202c <put_utf+0xf7>
c0001f50:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0001f56:	77 23                	ja     c0001f7b <put_utf+0x46>
c0001f58:	83 f9 01             	cmp    ecx,0x1
c0001f5b:	0f 86 cb 00 00 00    	jbe    c000202c <put_utf+0xf7>
c0001f61:	89 d8                	mov    eax,ebx
c0001f63:	83 e3 3f             	and    ebx,0x3f
c0001f66:	c1 e8 06             	shr    eax,0x6
c0001f69:	83 cb 80             	or     ebx,0xffffff80
c0001f6c:	83 c8 c0             	or     eax,0xffffffc0
c0001f6f:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0001f72:	88 02                	mov    BYTE PTR [edx],al
c0001f74:	b0 02                	mov    al,0x2
c0001f76:	e9 b1 00 00 00       	jmp    c000202c <put_utf+0xf7>
c0001f7b:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0001f81:	77 40                	ja     c0001fc3 <put_utf+0x8e>
c0001f83:	83 f9 02             	cmp    ecx,0x2
c0001f86:	0f 86 a0 00 00 00    	jbe    c000202c <put_utf+0xf7>
c0001f8c:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0001f92:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001f98:	0f 86 8e 00 00 00    	jbe    c000202c <put_utf+0xf7>
c0001f9e:	89 d8                	mov    eax,ebx
c0001fa0:	c1 e8 0c             	shr    eax,0xc
c0001fa3:	83 c8 e0             	or     eax,0xffffffe0
c0001fa6:	88 02                	mov    BYTE PTR [edx],al
c0001fa8:	89 d8                	mov    eax,ebx
c0001faa:	83 e3 3f             	and    ebx,0x3f
c0001fad:	c1 e8 06             	shr    eax,0x6
c0001fb0:	83 cb 80             	or     ebx,0xffffff80
c0001fb3:	83 e0 3f             	and    eax,0x3f
c0001fb6:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0001fb9:	83 c8 80             	or     eax,0xffffff80
c0001fbc:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001fbf:	b0 03                	mov    al,0x3
c0001fc1:	eb 69                	jmp    c000202c <put_utf+0xf7>
c0001fc3:	83 f9 03             	cmp    ecx,0x3
c0001fc6:	76 64                	jbe    c000202c <put_utf+0xf7>
c0001fc8:	89 d9                	mov    ecx,ebx
c0001fca:	0f b7 c3             	movzx  eax,bx
c0001fcd:	66 31 c9             	xor    cx,cx
c0001fd0:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c0001fd6:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0001fdc:	c1 e9 06             	shr    ecx,0x6
c0001fdf:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0001fe5:	77 43                	ja     c000202a <put_utf+0xf5>
c0001fe7:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c0001fed:	77 3b                	ja     c000202a <put_utf+0xf5>
c0001fef:	09 cb                	or     ebx,ecx
c0001ff1:	81 c3 00 00 01 00    	add    ebx,0x10000
c0001ff7:	89 d8                	mov    eax,ebx
c0001ff9:	c1 e8 12             	shr    eax,0x12
c0001ffc:	83 c8 f0             	or     eax,0xfffffff0
c0001fff:	88 02                	mov    BYTE PTR [edx],al
c0002001:	89 d8                	mov    eax,ebx
c0002003:	c1 e8 0c             	shr    eax,0xc
c0002006:	83 e0 3f             	and    eax,0x3f
c0002009:	83 c8 80             	or     eax,0xffffff80
c000200c:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c000200f:	89 d8                	mov    eax,ebx
c0002011:	83 e3 3f             	and    ebx,0x3f
c0002014:	c1 e8 06             	shr    eax,0x6
c0002017:	83 cb 80             	or     ebx,0xffffff80
c000201a:	83 e0 3f             	and    eax,0x3f
c000201d:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0002020:	83 c8 80             	or     eax,0xffffff80
c0002023:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c0002026:	b0 04                	mov    al,0x4
c0002028:	eb 02                	jmp    c000202c <put_utf+0xf7>
c000202a:	31 c0                	xor    eax,eax
c000202c:	5b                   	pop    ebx
c000202d:	c3                   	ret    

c000202e <clst2sect>:
c000202e:	8d 4a fe             	lea    ecx,[edx-0x2]
c0002031:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0002034:	83 ea 02             	sub    edx,0x2
c0002037:	39 ca                	cmp    edx,ecx
c0002039:	76 0d                	jbe    c0002048 <clst2sect+0x1a>
c000203b:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c000203f:	0f af d1             	imul   edx,ecx
c0002042:	03 50 2c             	add    edx,DWORD PTR [eax+0x2c]
c0002045:	89 d0                	mov    eax,edx
c0002047:	c3                   	ret    
c0002048:	31 c0                	xor    eax,eax
c000204a:	c3                   	ret    

c000204b <pick_lfn>:
c000204b:	55                   	push   ebp
c000204c:	57                   	push   edi
c000204d:	89 c7                	mov    edi,eax
c000204f:	56                   	push   esi
c0002050:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002053:	53                   	push   ebx
c0002054:	89 d3                	mov    ebx,edx
c0002056:	e8 7c fd ff ff       	call   c0001dd7 <ld_word>
c000205b:	66 85 c0             	test   ax,ax
c000205e:	74 04                	je     c0002064 <pick_lfn+0x19>
c0002060:	31 c0                	xor    eax,eax
c0002062:	eb 62                	jmp    c00020c6 <pick_lfn+0x7b>
c0002064:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0002067:	bd 01 00 00 00       	mov    ebp,0x1
c000206c:	83 e1 bf             	and    ecx,0xffffffbf
c000206f:	31 f6                	xor    esi,esi
c0002071:	49                   	dec    ecx
c0002072:	6b c9 0d             	imul   ecx,ecx,0xd
c0002075:	0f b6 86 60 00 02 c0 	movzx  eax,BYTE PTR [esi-0x3ffdffa0]
c000207c:	01 d8                	add    eax,ebx
c000207e:	e8 54 fd ff ff       	call   c0001dd7 <ld_word>
c0002083:	66 85 ed             	test   bp,bp
c0002086:	74 11                	je     c0002099 <pick_lfn+0x4e>
c0002088:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c000208e:	77 d0                	ja     c0002060 <pick_lfn+0x15>
c0002090:	66 89 04 4f          	mov    WORD PTR [edi+ecx*2],ax
c0002094:	89 c5                	mov    ebp,eax
c0002096:	41                   	inc    ecx
c0002097:	eb 0a                	jmp    c00020a3 <pick_lfn+0x58>
c0002099:	0f b7 c0             	movzx  eax,ax
c000209c:	3d ff ff 00 00       	cmp    eax,0xffff
c00020a1:	75 bd                	jne    c0002060 <pick_lfn+0x15>
c00020a3:	46                   	inc    esi
c00020a4:	83 fe 0d             	cmp    esi,0xd
c00020a7:	75 cc                	jne    c0002075 <pick_lfn+0x2a>
c00020a9:	f6 03 40             	test   BYTE PTR [ebx],0x40
c00020ac:	74 13                	je     c00020c1 <pick_lfn+0x76>
c00020ae:	66 85 ed             	test   bp,bp
c00020b1:	74 0e                	je     c00020c1 <pick_lfn+0x76>
c00020b3:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c00020b9:	77 a5                	ja     c0002060 <pick_lfn+0x15>
c00020bb:	66 c7 04 4f 00 00    	mov    WORD PTR [edi+ecx*2],0x0
c00020c1:	b8 01 00 00 00       	mov    eax,0x1
c00020c6:	5b                   	pop    ebx
c00020c7:	5e                   	pop    esi
c00020c8:	5f                   	pop    edi
c00020c9:	5d                   	pop    ebp
c00020ca:	c3                   	ret    

c00020cb <put_lfn>:
c00020cb:	55                   	push   ebp
c00020cc:	57                   	push   edi
c00020cd:	89 d7                	mov    edi,edx
c00020cf:	56                   	push   esi
c00020d0:	31 f6                	xor    esi,esi
c00020d2:	53                   	push   ebx
c00020d3:	83 ec 0c             	sub    esp,0xc
c00020d6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00020da:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c00020de:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00020e2:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c00020e8:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c00020eb:	8d 42 1a             	lea    eax,[edx+0x1a]
c00020ee:	31 d2                	xor    edx,edx
c00020f0:	e8 07 fd ff ff       	call   c0001dfc <st_word>
c00020f5:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00020fc:	0f b6 d9             	movzx  ebx,cl
c00020ff:	4b                   	dec    ebx
c0002100:	6b db 0d             	imul   ebx,ebx,0xd
c0002103:	0f b7 c6             	movzx  eax,si
c0002106:	3d ff ff 00 00       	cmp    eax,0xffff
c000210b:	74 09                	je     c0002116 <put_lfn+0x4b>
c000210d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002111:	0f b7 34 58          	movzx  esi,WORD PTR [eax+ebx*2]
c0002115:	43                   	inc    ebx
c0002116:	0f b7 ee             	movzx  ebp,si
c0002119:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000211c:	89 ea                	mov    edx,ebp
c000211e:	0f b6 80 60 00 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffdffa0]
c0002125:	01 f8                	add    eax,edi
c0002127:	e8 d0 fc ff ff       	call   c0001dfc <st_word>
c000212c:	85 ed                	test   ebp,ebp
c000212e:	75 05                	jne    c0002135 <put_lfn+0x6a>
c0002130:	be ff ff 00 00       	mov    esi,0xffff
c0002135:	ff 04 24             	inc    DWORD PTR [esp]
c0002138:	83 3c 24 0d          	cmp    DWORD PTR [esp],0xd
c000213c:	75 c5                	jne    c0002103 <put_lfn+0x38>
c000213e:	81 fe ff ff 00 00    	cmp    esi,0xffff
c0002144:	74 0b                	je     c0002151 <put_lfn+0x86>
c0002146:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000214a:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c000214f:	75 07                	jne    c0002158 <put_lfn+0x8d>
c0002151:	83 c9 40             	or     ecx,0x40
c0002154:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002158:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c000215c:	88 07                	mov    BYTE PTR [edi],al
c000215e:	83 c4 0c             	add    esp,0xc
c0002161:	5b                   	pop    ebx
c0002162:	5e                   	pop    esi
c0002163:	5f                   	pop    edi
c0002164:	5d                   	pop    ebp
c0002165:	c3                   	ret    

c0002166 <gen_numname>:
c0002166:	57                   	push   edi
c0002167:	89 cf                	mov    edi,ecx
c0002169:	56                   	push   esi
c000216a:	b9 0b 00 00 00       	mov    ecx,0xb
c000216f:	53                   	push   ebx
c0002170:	89 c6                	mov    esi,eax
c0002172:	83 ec 10             	sub    esp,0x10
c0002175:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0002179:	e8 85 fc ff ff       	call   c0001e03 <mem_cpy>
c000217e:	83 fb 05             	cmp    ebx,0x5
c0002181:	76 30                	jbe    c00021b3 <gen_numname+0x4d>
c0002183:	66 8b 07             	mov    ax,WORD PTR [edi]
c0002186:	66 85 c0             	test   ax,ax
c0002189:	74 28                	je     c00021b3 <gen_numname+0x4d>
c000218b:	83 c7 02             	add    edi,0x2
c000218e:	ba 10 00 00 00       	mov    edx,0x10
c0002193:	01 db                	add    ebx,ebx
c0002195:	89 c1                	mov    ecx,eax
c0002197:	c1 e0 10             	shl    eax,0x10
c000219a:	83 e1 01             	and    ecx,0x1
c000219d:	c1 e8 11             	shr    eax,0x11
c00021a0:	01 cb                	add    ebx,ecx
c00021a2:	0f ba e3 10          	bt     ebx,0x10
c00021a6:	73 06                	jae    c00021ae <gen_numname+0x48>
c00021a8:	81 f3 21 10 01 00    	xor    ebx,0x11021
c00021ae:	4a                   	dec    edx
c00021af:	75 e2                	jne    c0002193 <gen_numname+0x2d>
c00021b1:	eb d0                	jmp    c0002183 <gen_numname+0x1d>
c00021b3:	b8 07 00 00 00       	mov    eax,0x7
c00021b8:	89 d9                	mov    ecx,ebx
c00021ba:	83 e1 0f             	and    ecx,0xf
c00021bd:	8d 79 30             	lea    edi,[ecx+0x30]
c00021c0:	89 fa                	mov    edx,edi
c00021c2:	83 ff 39             	cmp    edi,0x39
c00021c5:	76 03                	jbe    c00021ca <gen_numname+0x64>
c00021c7:	8d 51 37             	lea    edx,[ecx+0x37]
c00021ca:	8d 48 ff             	lea    ecx,[eax-0x1]
c00021cd:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c00021d1:	89 da                	mov    edx,ebx
c00021d3:	c1 ea 04             	shr    edx,0x4
c00021d6:	83 fb 0f             	cmp    ebx,0xf
c00021d9:	76 06                	jbe    c00021e1 <gen_numname+0x7b>
c00021db:	89 c8                	mov    eax,ecx
c00021dd:	89 d3                	mov    ebx,edx
c00021df:	eb d7                	jmp    c00021b8 <gen_numname+0x52>
c00021e1:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c00021e6:	31 d2                	xor    edx,edx
c00021e8:	8d 58 fe             	lea    ebx,[eax-0x2]
c00021eb:	8d 04 16             	lea    eax,[esi+edx*1]
c00021ee:	39 ca                	cmp    edx,ecx
c00021f0:	73 19                	jae    c000220b <gen_numname+0xa5>
c00021f2:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c00021f5:	83 f8 20             	cmp    eax,0x20
c00021f8:	74 11                	je     c000220b <gen_numname+0xa5>
c00021fa:	e8 58 fc ff ff       	call   c0001e57 <dbc_1st>
c00021ff:	85 c0                	test   eax,eax
c0002201:	74 05                	je     c0002208 <gen_numname+0xa2>
c0002203:	39 d3                	cmp    ebx,edx
c0002205:	74 04                	je     c000220b <gen_numname+0xa5>
c0002207:	42                   	inc    edx
c0002208:	42                   	inc    edx
c0002209:	eb e0                	jmp    c00021eb <gen_numname+0x85>
c000220b:	b0 20                	mov    al,0x20
c000220d:	83 f9 07             	cmp    ecx,0x7
c0002210:	77 05                	ja     c0002217 <gen_numname+0xb1>
c0002212:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c0002216:	41                   	inc    ecx
c0002217:	42                   	inc    edx
c0002218:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c000221c:	83 fa 07             	cmp    edx,0x7
c000221f:	76 ea                	jbe    c000220b <gen_numname+0xa5>
c0002221:	83 c4 10             	add    esp,0x10
c0002224:	5b                   	pop    ebx
c0002225:	5e                   	pop    esi
c0002226:	5f                   	pop    edi
c0002227:	c3                   	ret    

c0002228 <sum_sfn>:
c0002228:	53                   	push   ebx
c0002229:	31 c9                	xor    ecx,ecx
c000222b:	31 db                	xor    ebx,ebx
c000222d:	0f b6 d1             	movzx  edx,cl
c0002230:	c1 e1 07             	shl    ecx,0x7
c0002233:	d1 ea                	shr    edx,1
c0002235:	09 ca                	or     edx,ecx
c0002237:	8a 0c 18             	mov    cl,BYTE PTR [eax+ebx*1]
c000223a:	43                   	inc    ebx
c000223b:	01 ca                	add    edx,ecx
c000223d:	83 fb 0b             	cmp    ebx,0xb
c0002240:	88 d1                	mov    cl,dl
c0002242:	75 e9                	jne    c000222d <sum_sfn+0x5>
c0002244:	88 d0                	mov    al,dl
c0002246:	5b                   	pop    ebx
c0002247:	c3                   	ret    

c0002248 <get_ldnumber>:
c0002248:	8b 10                	mov    edx,DWORD PTR [eax]
c000224a:	85 d2                	test   edx,edx
c000224c:	74 14                	je     c0002262 <get_ldnumber+0x1a>
c000224e:	56                   	push   esi
c000224f:	53                   	push   ebx
c0002250:	89 d3                	mov    ebx,edx
c0002252:	43                   	inc    ebx
c0002253:	8a 4b ff             	mov    cl,BYTE PTR [ebx-0x1]
c0002256:	80 f9 1f             	cmp    cl,0x1f
c0002259:	76 0d                	jbe    c0002268 <get_ldnumber+0x20>
c000225b:	80 f9 3a             	cmp    cl,0x3a
c000225e:	75 f2                	jne    c0002252 <get_ldnumber+0xa>
c0002260:	eb 0a                	jmp    c000226c <get_ldnumber+0x24>
c0002262:	83 c9 ff             	or     ecx,0xffffffff
c0002265:	89 c8                	mov    eax,ecx
c0002267:	c3                   	ret    
c0002268:	31 c9                	xor    ecx,ecx
c000226a:	eb 24                	jmp    c0002290 <get_ldnumber+0x48>
c000226c:	0f b6 32             	movzx  esi,BYTE PTR [edx]
c000226f:	8d 4e d0             	lea    ecx,[esi-0x30]
c0002272:	80 f9 09             	cmp    cl,0x9
c0002275:	77 16                	ja     c000228d <get_ldnumber+0x45>
c0002277:	83 c2 02             	add    edx,0x2
c000227a:	83 c9 ff             	or     ecx,0xffffffff
c000227d:	39 d3                	cmp    ebx,edx
c000227f:	75 0f                	jne    c0002290 <get_ldnumber+0x48>
c0002281:	89 f2                	mov    edx,esi
c0002283:	89 18                	mov    DWORD PTR [eax],ebx
c0002285:	0f be ca             	movsx  ecx,dl
c0002288:	83 e9 30             	sub    ecx,0x30
c000228b:	eb 03                	jmp    c0002290 <get_ldnumber+0x48>
c000228d:	83 c9 ff             	or     ecx,0xffffffff
c0002290:	89 c8                	mov    eax,ecx
c0002292:	5b                   	pop    ebx
c0002293:	5e                   	pop    esi
c0002294:	c3                   	ret    

c0002295 <validate>:
c0002295:	56                   	push   esi
c0002296:	53                   	push   ebx
c0002297:	89 d6                	mov    esi,edx
c0002299:	51                   	push   ecx
c000229a:	85 c0                	test   eax,eax
c000229c:	75 09                	jne    c00022a7 <validate+0x12>
c000229e:	b8 09 00 00 00       	mov    eax,0x9
c00022a3:	31 c9                	xor    ecx,ecx
c00022a5:	eb 2e                	jmp    c00022d5 <validate+0x40>
c00022a7:	89 c3                	mov    ebx,eax
c00022a9:	8b 00                	mov    eax,DWORD PTR [eax]
c00022ab:	85 c0                	test   eax,eax
c00022ad:	74 ef                	je     c000229e <validate+0x9>
c00022af:	80 38 00             	cmp    BYTE PTR [eax],0x0
c00022b2:	74 ea                	je     c000229e <validate+0x9>
c00022b4:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c00022b7:	66 39 50 06          	cmp    WORD PTR [eax+0x6],dx
c00022bb:	75 e1                	jne    c000229e <validate+0x9>
c00022bd:	83 ec 0c             	sub    esp,0xc
c00022c0:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00022c4:	50                   	push   eax
c00022c5:	e8 bc fa ff ff       	call   c0001d86 <disk_status>
c00022ca:	83 c4 10             	add    esp,0x10
c00022cd:	a8 01                	test   al,0x1
c00022cf:	75 cd                	jne    c000229e <validate+0x9>
c00022d1:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00022d3:	31 c0                	xor    eax,eax
c00022d5:	89 0e                	mov    DWORD PTR [esi],ecx
c00022d7:	5a                   	pop    edx
c00022d8:	5b                   	pop    ebx
c00022d9:	5e                   	pop    esi
c00022da:	c3                   	ret    

c00022db <sync_window>:
c00022db:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c00022df:	74 58                	je     c0002339 <sync_window+0x5e>
c00022e1:	56                   	push   esi
c00022e2:	53                   	push   ebx
c00022e3:	8d 70 34             	lea    esi,[eax+0x34]
c00022e6:	51                   	push   ecx
c00022e7:	89 c3                	mov    ebx,eax
c00022e9:	6a 01                	push   0x1
c00022eb:	ff 70 30             	push   DWORD PTR [eax+0x30]
c00022ee:	56                   	push   esi
c00022ef:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00022f3:	50                   	push   eax
c00022f4:	e8 a9 fa ff ff       	call   c0001da2 <disk_write>
c00022f9:	83 c4 10             	add    esp,0x10
c00022fc:	ba 01 00 00 00       	mov    edx,0x1
c0002301:	85 c0                	test   eax,eax
c0002303:	75 2e                	jne    c0002333 <sync_window+0x58>
c0002305:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0002308:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000230b:	89 c1                	mov    ecx,eax
c000230d:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c0002311:	2b 4b 24             	sub    ecx,DWORD PTR [ebx+0x24]
c0002314:	39 d1                	cmp    ecx,edx
c0002316:	73 19                	jae    c0002331 <sync_window+0x56>
c0002318:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c000231c:	75 13                	jne    c0002331 <sync_window+0x56>
c000231e:	6a 01                	push   0x1
c0002320:	01 d0                	add    eax,edx
c0002322:	50                   	push   eax
c0002323:	56                   	push   esi
c0002324:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002328:	50                   	push   eax
c0002329:	e8 74 fa ff ff       	call   c0001da2 <disk_write>
c000232e:	83 c4 10             	add    esp,0x10
c0002331:	31 d2                	xor    edx,edx
c0002333:	89 d0                	mov    eax,edx
c0002335:	5a                   	pop    edx
c0002336:	5b                   	pop    ebx
c0002337:	5e                   	pop    esi
c0002338:	c3                   	ret    
c0002339:	31 d2                	xor    edx,edx
c000233b:	89 d0                	mov    eax,edx
c000233d:	c3                   	ret    

c000233e <move_window>:
c000233e:	57                   	push   edi
c000233f:	56                   	push   esi
c0002340:	31 f6                	xor    esi,esi
c0002342:	53                   	push   ebx
c0002343:	39 50 30             	cmp    DWORD PTR [eax+0x30],edx
c0002346:	74 32                	je     c000237a <move_window+0x3c>
c0002348:	89 c3                	mov    ebx,eax
c000234a:	89 d7                	mov    edi,edx
c000234c:	e8 8a ff ff ff       	call   c00022db <sync_window>
c0002351:	89 c6                	mov    esi,eax
c0002353:	85 c0                	test   eax,eax
c0002355:	75 23                	jne    c000237a <move_window+0x3c>
c0002357:	6a 01                	push   0x1
c0002359:	8d 43 34             	lea    eax,[ebx+0x34]
c000235c:	57                   	push   edi
c000235d:	50                   	push   eax
c000235e:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002362:	50                   	push   eax
c0002363:	e8 24 fa ff ff       	call   c0001d8c <disk_read>
c0002368:	83 c4 10             	add    esp,0x10
c000236b:	85 c0                	test   eax,eax
c000236d:	74 08                	je     c0002377 <move_window+0x39>
c000236f:	be 01 00 00 00       	mov    esi,0x1
c0002374:	83 cf ff             	or     edi,0xffffffff
c0002377:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c000237a:	89 f0                	mov    eax,esi
c000237c:	5b                   	pop    ebx
c000237d:	5e                   	pop    esi
c000237e:	5f                   	pop    edi
c000237f:	c3                   	ret    

c0002380 <check_fs>:
c0002380:	53                   	push   ebx
c0002381:	89 c3                	mov    ebx,eax
c0002383:	83 ec 08             	sub    esp,0x8
c0002386:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c000238a:	c7 40 30 ff ff ff ff 	mov    DWORD PTR [eax+0x30],0xffffffff
c0002391:	e8 a8 ff ff ff       	call   c000233e <move_window>
c0002396:	ba 04 00 00 00       	mov    edx,0x4
c000239b:	85 c0                	test   eax,eax
c000239d:	75 68                	jne    c0002407 <check_fs+0x87>
c000239f:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c00023a5:	e8 2d fa ff ff       	call   c0001dd7 <ld_word>
c00023aa:	ba 03 00 00 00       	mov    edx,0x3
c00023af:	66 3d 55 aa          	cmp    ax,0xaa55
c00023b3:	75 52                	jne    c0002407 <check_fs+0x87>
c00023b5:	8a 43 34             	mov    al,BYTE PTR [ebx+0x34]
c00023b8:	8d 50 18             	lea    edx,[eax+0x18]
c00023bb:	80 fa 01             	cmp    dl,0x1
c00023be:	76 09                	jbe    c00023c9 <check_fs+0x49>
c00023c0:	ba 02 00 00 00       	mov    edx,0x2
c00023c5:	3c eb                	cmp    al,0xeb
c00023c7:	75 3e                	jne    c0002407 <check_fs+0x87>
c00023c9:	ba 7c 26 02 c0       	mov    edx,0xc002267c
c00023ce:	8d 43 6a             	lea    eax,[ebx+0x6a]
c00023d1:	b9 03 00 00 00       	mov    ecx,0x3
c00023d6:	e8 48 fa ff ff       	call   c0001e23 <mem_cmp>
c00023db:	31 d2                	xor    edx,edx
c00023dd:	85 c0                	test   eax,eax
c00023df:	74 26                	je     c0002407 <check_fs+0x87>
c00023e1:	ba 1c ff 01 c0       	mov    edx,0xc001ff1c
c00023e6:	8d 83 86 00 00 00    	lea    eax,[ebx+0x86]
c00023ec:	b9 05 00 00 00       	mov    ecx,0x5
c00023f1:	e8 2d fa ff ff       	call   c0001e23 <mem_cmp>
c00023f6:	31 d2                	xor    edx,edx
c00023f8:	85 c0                	test   eax,eax
c00023fa:	74 0b                	je     c0002407 <check_fs+0x87>
c00023fc:	31 d2                	xor    edx,edx
c00023fe:	80 7b 76 28          	cmp    BYTE PTR [ebx+0x76],0x28
c0002402:	0f 95 c2             	setne  dl
c0002405:	01 d2                	add    edx,edx
c0002407:	89 d0                	mov    eax,edx
c0002409:	83 c4 08             	add    esp,0x8
c000240c:	5b                   	pop    ebx
c000240d:	c3                   	ret    

c000240e <find_volume>:
c000240e:	55                   	push   ebp
c000240f:	57                   	push   edi
c0002410:	56                   	push   esi
c0002411:	89 c6                	mov    esi,eax
c0002413:	53                   	push   ebx
c0002414:	89 d3                	mov    ebx,edx
c0002416:	83 ec 2c             	sub    esp,0x2c
c0002419:	31 d2                	xor    edx,edx
c000241b:	e8 60 ff ff ff       	call   c0002380 <check_fs>
c0002420:	83 f8 02             	cmp    eax,0x2
c0002423:	74 06                	je     c000242b <find_volume+0x1d>
c0002425:	77 62                	ja     c0002489 <find_volume+0x7b>
c0002427:	85 db                	test   ebx,ebx
c0002429:	74 5e                	je     c0002489 <find_volume+0x7b>
c000242b:	8d 4c 24 10          	lea    ecx,[esp+0x10]
c000242f:	8d 86 3a 02 00 00    	lea    eax,[esi+0x23a]
c0002435:	8d ae fa 01 00 00    	lea    ebp,[esi+0x1fa]
c000243b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000243f:	89 cf                	mov    edi,ecx
c0002441:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002445:	89 e8                	mov    eax,ebp
c0002447:	83 c5 10             	add    ebp,0x10
c000244a:	e8 95 f9 ff ff       	call   c0001de4 <ld_dword>
c000244f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002453:	89 01                	mov    DWORD PTR [ecx],eax
c0002455:	83 c1 04             	add    ecx,0x4
c0002458:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c000245c:	75 e3                	jne    c0002441 <find_volume+0x33>
c000245e:	31 ed                	xor    ebp,ebp
c0002460:	85 db                	test   ebx,ebx
c0002462:	74 03                	je     c0002467 <find_volume+0x59>
c0002464:	8d 6b ff             	lea    ebp,[ebx-0x1]
c0002467:	8b 14 af             	mov    edx,DWORD PTR [edi+ebp*4]
c000246a:	b8 03 00 00 00       	mov    eax,0x3
c000246f:	85 d2                	test   edx,edx
c0002471:	74 0c                	je     c000247f <find_volume+0x71>
c0002473:	89 f0                	mov    eax,esi
c0002475:	e8 06 ff ff ff       	call   c0002380 <check_fs>
c000247a:	83 f8 01             	cmp    eax,0x1
c000247d:	76 0a                	jbe    c0002489 <find_volume+0x7b>
c000247f:	85 db                	test   ebx,ebx
c0002481:	75 06                	jne    c0002489 <find_volume+0x7b>
c0002483:	45                   	inc    ebp
c0002484:	83 fd 03             	cmp    ebp,0x3
c0002487:	76 de                	jbe    c0002467 <find_volume+0x59>
c0002489:	83 c4 2c             	add    esp,0x2c
c000248c:	5b                   	pop    ebx
c000248d:	5e                   	pop    esi
c000248e:	5f                   	pop    edi
c000248f:	5d                   	pop    ebp
c0002490:	c3                   	ret    

c0002491 <mount_volume>:
c0002491:	55                   	push   ebp
c0002492:	89 d5                	mov    ebp,edx
c0002494:	57                   	push   edi
c0002495:	89 cf                	mov    edi,ecx
c0002497:	56                   	push   esi
c0002498:	53                   	push   ebx
c0002499:	bb 0b 00 00 00       	mov    ebx,0xb
c000249e:	83 ec 1c             	sub    esp,0x1c
c00024a1:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00024a7:	e8 9c fd ff ff       	call   c0002248 <get_ldnumber>
c00024ac:	85 c0                	test   eax,eax
c00024ae:	0f 88 c4 02 00 00    	js     c0002778 <mount_volume+0x2e7>
c00024b4:	8b 34 85 a0 54 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffdab60]
c00024bb:	89 c2                	mov    edx,eax
c00024bd:	bb 0c 00 00 00       	mov    ebx,0xc
c00024c2:	85 f6                	test   esi,esi
c00024c4:	0f 84 ae 02 00 00    	je     c0002778 <mount_volume+0x2e7>
c00024ca:	89 75 00             	mov    DWORD PTR [ebp+0x0],esi
c00024cd:	83 e7 fe             	and    edi,0xfffffffe
c00024d0:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c00024d3:	74 3a                	je     c000250f <mount_volume+0x7e>
c00024d5:	89 04 24             	mov    DWORD PTR [esp],eax
c00024d8:	83 ec 0c             	sub    esp,0xc
c00024db:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00024df:	50                   	push   eax
c00024e0:	e8 a1 f8 ff ff       	call   c0001d86 <disk_status>
c00024e5:	83 c4 10             	add    esp,0x10
c00024e8:	a8 01                	test   al,0x1
c00024ea:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00024ed:	75 20                	jne    c000250f <mount_volume+0x7e>
c00024ef:	31 db                	xor    ebx,ebx
c00024f1:	81 e7 fe 00 00 00    	and    edi,0xfe
c00024f7:	0f 84 7b 02 00 00    	je     c0002778 <mount_volume+0x2e7>
c00024fd:	a8 04                	test   al,0x4
c00024ff:	0f 84 73 02 00 00    	je     c0002778 <mount_volume+0x2e7>
c0002505:	bb 0a 00 00 00       	mov    ebx,0xa
c000250a:	e9 69 02 00 00       	jmp    c0002778 <mount_volume+0x2e7>
c000250f:	83 ec 0c             	sub    esp,0xc
c0002512:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0002515:	88 56 01             	mov    BYTE PTR [esi+0x1],dl
c0002518:	0f b6 c2             	movzx  eax,dl
c000251b:	bb 03 00 00 00       	mov    ebx,0x3
c0002520:	50                   	push   eax
c0002521:	e8 63 f8 ff ff       	call   c0001d89 <disk_initialize>
c0002526:	83 c4 10             	add    esp,0x10
c0002529:	a8 01                	test   al,0x1
c000252b:	0f 85 47 02 00 00    	jne    c0002778 <mount_volume+0x2e7>
c0002531:	81 e7 fe 00 00 00    	and    edi,0xfe
c0002537:	74 04                	je     c000253d <mount_volume+0xac>
c0002539:	a8 04                	test   al,0x4
c000253b:	75 c8                	jne    c0002505 <mount_volume+0x74>
c000253d:	31 d2                	xor    edx,edx
c000253f:	89 f0                	mov    eax,esi
c0002541:	bb 01 00 00 00       	mov    ebx,0x1
c0002546:	e8 c3 fe ff ff       	call   c000240e <find_volume>
c000254b:	83 f8 04             	cmp    eax,0x4
c000254e:	0f 84 24 02 00 00    	je     c0002778 <mount_volume+0x2e7>
c0002554:	83 f8 01             	cmp    eax,0x1
c0002557:	76 0a                	jbe    c0002563 <mount_volume+0xd2>
c0002559:	bb 0d 00 00 00       	mov    ebx,0xd
c000255e:	e9 15 02 00 00       	jmp    c0002778 <mount_volume+0x2e7>
c0002563:	8d 46 3f             	lea    eax,[esi+0x3f]
c0002566:	e8 6c f8 ff ff       	call   c0001dd7 <ld_word>
c000256b:	66 3d 00 02          	cmp    ax,0x200
c000256f:	75 e8                	jne    c0002559 <mount_volume+0xc8>
c0002571:	8d 46 4a             	lea    eax,[esi+0x4a]
c0002574:	e8 5e f8 ff ff       	call   c0001dd7 <ld_word>
c0002579:	0f b7 c0             	movzx  eax,ax
c000257c:	89 04 24             	mov    DWORD PTR [esp],eax
c000257f:	85 c0                	test   eax,eax
c0002581:	75 0b                	jne    c000258e <mount_volume+0xfd>
c0002583:	8d 46 58             	lea    eax,[esi+0x58]
c0002586:	e8 59 f8 ff ff       	call   c0001de4 <ld_dword>
c000258b:	89 04 24             	mov    DWORD PTR [esp],eax
c000258e:	8b 46 30             	mov    eax,DWORD PTR [esi+0x30]
c0002591:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0002595:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002598:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c000259b:	8a 46 44             	mov    al,BYTE PTR [esi+0x44]
c000259e:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c00025a2:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c00025a5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00025a9:	48                   	dec    eax
c00025aa:	3c 01                	cmp    al,0x1
c00025ac:	77 ab                	ja     c0002559 <mount_volume+0xc8>
c00025ae:	0f b6 46 41          	movzx  eax,BYTE PTR [esi+0x41]
c00025b2:	89 c3                	mov    ebx,eax
c00025b4:	66 89 46 0a          	mov    WORD PTR [esi+0xa],ax
c00025b8:	66 85 c0             	test   ax,ax
c00025bb:	74 9c                	je     c0002559 <mount_volume+0xc8>
c00025bd:	8d 40 ff             	lea    eax,[eax-0x1]
c00025c0:	85 d8                	test   eax,ebx
c00025c2:	75 95                	jne    c0002559 <mount_volume+0xc8>
c00025c4:	8d 46 45             	lea    eax,[esi+0x45]
c00025c7:	e8 0b f8 ff ff       	call   c0001dd7 <ld_word>
c00025cc:	89 c7                	mov    edi,eax
c00025ce:	66 89 46 08          	mov    WORD PTR [esi+0x8],ax
c00025d2:	a8 0f                	test   al,0xf
c00025d4:	75 83                	jne    c0002559 <mount_volume+0xc8>
c00025d6:	8d 46 47             	lea    eax,[esi+0x47]
c00025d9:	e8 f9 f7 ff ff       	call   c0001dd7 <ld_word>
c00025de:	0f b7 e8             	movzx  ebp,ax
c00025e1:	85 ed                	test   ebp,ebp
c00025e3:	75 0a                	jne    c00025ef <mount_volume+0x15e>
c00025e5:	8d 46 54             	lea    eax,[esi+0x54]
c00025e8:	e8 f7 f7 ff ff       	call   c0001de4 <ld_dword>
c00025ed:	89 c5                	mov    ebp,eax
c00025ef:	8d 46 42             	lea    eax,[esi+0x42]
c00025f2:	e8 e0 f7 ff ff       	call   c0001dd7 <ld_word>
c00025f7:	0f b7 c8             	movzx  ecx,ax
c00025fa:	85 c9                	test   ecx,ecx
c00025fc:	0f 84 57 ff ff ff    	je     c0002559 <mount_volume+0xc8>
c0002602:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0002607:	0f af 04 24          	imul   eax,DWORD PTR [esp]
c000260b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000260f:	0f b7 c7             	movzx  eax,di
c0002612:	c1 e8 04             	shr    eax,0x4
c0002615:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0002619:	01 c8                	add    eax,ecx
c000261b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000261f:	39 c5                	cmp    ebp,eax
c0002621:	0f 82 32 ff ff ff    	jb     c0002559 <mount_volume+0xc8>
c0002627:	29 c5                	sub    ebp,eax
c0002629:	31 d2                	xor    edx,edx
c000262b:	89 e8                	mov    eax,ebp
c000262d:	f7 f3                	div    ebx
c000262f:	39 dd                	cmp    ebp,ebx
c0002631:	0f 82 22 ff ff ff    	jb     c0002559 <mount_volume+0xc8>
c0002637:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c000263c:	0f 87 17 ff ff ff    	ja     c0002559 <mount_volume+0xc8>
c0002642:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0002647:	0f 86 1c 01 00 00    	jbe    c0002769 <mount_volume+0x2d8>
c000264d:	bb 03 00 00 00       	mov    ebx,0x3
c0002652:	8d 68 02             	lea    ebp,[eax+0x2]
c0002655:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002659:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000265d:	03 54 24 04          	add    edx,DWORD PTR [esp+0x4]
c0002661:	89 46 20             	mov    DWORD PTR [esi+0x20],eax
c0002664:	89 6e 18             	mov    DWORD PTR [esi+0x18],ebp
c0002667:	01 c8                	add    eax,ecx
c0002669:	89 56 2c             	mov    DWORD PTR [esi+0x2c],edx
c000266c:	89 46 24             	mov    DWORD PTR [esi+0x24],eax
c000266f:	83 fb 03             	cmp    ebx,0x3
c0002672:	75 23                	jne    c0002697 <mount_volume+0x206>
c0002674:	8d 46 5e             	lea    eax,[esi+0x5e]
c0002677:	e8 5b f7 ff ff       	call   c0001dd7 <ld_word>
c000267c:	09 c7                	or     edi,eax
c000267e:	66 85 ff             	test   di,di
c0002681:	0f 85 d2 fe ff ff    	jne    c0002559 <mount_volume+0xc8>
c0002687:	8d 46 60             	lea    eax,[esi+0x60]
c000268a:	c1 e5 02             	shl    ebp,0x2
c000268d:	e8 52 f7 ff ff       	call   c0001de4 <ld_dword>
c0002692:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c0002695:	eb 24                	jmp    c00026bb <mount_volume+0x22a>
c0002697:	66 85 ff             	test   di,di
c000269a:	0f 84 b9 fe ff ff    	je     c0002559 <mount_volume+0xc8>
c00026a0:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c00026a4:	83 fb 02             	cmp    ebx,0x2
c00026a7:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c00026aa:	75 04                	jne    c00026b0 <mount_volume+0x21f>
c00026ac:	01 ed                	add    ebp,ebp
c00026ae:	eb 0b                	jmp    c00026bb <mount_volume+0x22a>
c00026b0:	8d 44 6d 00          	lea    eax,[ebp+ebp*2+0x0]
c00026b4:	83 e5 01             	and    ebp,0x1
c00026b7:	d1 e8                	shr    eax,1
c00026b9:	01 c5                	add    ebp,eax
c00026bb:	81 c5 ff 01 00 00    	add    ebp,0x1ff
c00026c1:	c1 ed 09             	shr    ebp,0x9
c00026c4:	3b 2c 24             	cmp    ebp,DWORD PTR [esp]
c00026c7:	0f 87 8c fe ff ff    	ja     c0002559 <mount_volume+0xc8>
c00026cd:	c7 46 14 ff ff ff ff 	mov    DWORD PTR [esi+0x14],0xffffffff
c00026d4:	c7 46 10 ff ff ff ff 	mov    DWORD PTR [esi+0x10],0xffffffff
c00026db:	c6 46 04 80          	mov    BYTE PTR [esi+0x4],0x80
c00026df:	83 fb 03             	cmp    ebx,0x3
c00026e2:	75 6e                	jne    c0002752 <mount_volume+0x2c1>
c00026e4:	8d 46 64             	lea    eax,[esi+0x64]
c00026e7:	e8 eb f6 ff ff       	call   c0001dd7 <ld_word>
c00026ec:	66 48                	dec    ax
c00026ee:	75 62                	jne    c0002752 <mount_volume+0x2c1>
c00026f0:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00026f4:	89 f0                	mov    eax,esi
c00026f6:	42                   	inc    edx
c00026f7:	e8 42 fc ff ff       	call   c000233e <move_window>
c00026fc:	85 c0                	test   eax,eax
c00026fe:	75 52                	jne    c0002752 <mount_volume+0x2c1>
c0002700:	c6 46 04 00          	mov    BYTE PTR [esi+0x4],0x0
c0002704:	8d 86 32 02 00 00    	lea    eax,[esi+0x232]
c000270a:	e8 c8 f6 ff ff       	call   c0001dd7 <ld_word>
c000270f:	66 3d 55 aa          	cmp    ax,0xaa55
c0002713:	75 3d                	jne    c0002752 <mount_volume+0x2c1>
c0002715:	8d 46 34             	lea    eax,[esi+0x34]
c0002718:	e8 c7 f6 ff ff       	call   c0001de4 <ld_dword>
c000271d:	3d 52 52 61 41       	cmp    eax,0x41615252
c0002722:	75 2e                	jne    c0002752 <mount_volume+0x2c1>
c0002724:	8d 86 18 02 00 00    	lea    eax,[esi+0x218]
c000272a:	e8 b5 f6 ff ff       	call   c0001de4 <ld_dword>
c000272f:	3d 72 72 41 61       	cmp    eax,0x61417272
c0002734:	75 1c                	jne    c0002752 <mount_volume+0x2c1>
c0002736:	8d 86 1c 02 00 00    	lea    eax,[esi+0x21c]
c000273c:	e8 a3 f6 ff ff       	call   c0001de4 <ld_dword>
c0002741:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c0002744:	8d 86 20 02 00 00    	lea    eax,[esi+0x220]
c000274a:	e8 95 f6 ff ff       	call   c0001de4 <ld_dword>
c000274f:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c0002752:	66 a1 80 54 02 c0    	mov    ax,ds:0xc0025480
c0002758:	88 1e                	mov    BYTE PTR [esi],bl
c000275a:	40                   	inc    eax
c000275b:	31 db                	xor    ebx,ebx
c000275d:	66 a3 80 54 02 c0    	mov    ds:0xc0025480,ax
c0002763:	66 89 46 06          	mov    WORD PTR [esi+0x6],ax
c0002767:	eb 0f                	jmp    c0002778 <mount_volume+0x2e7>
c0002769:	3d f6 0f 00 00       	cmp    eax,0xff6
c000276e:	19 db                	sbb    ebx,ebx
c0002770:	83 c3 02             	add    ebx,0x2
c0002773:	e9 da fe ff ff       	jmp    c0002652 <mount_volume+0x1c1>
c0002778:	83 c4 1c             	add    esp,0x1c
c000277b:	89 d8                	mov    eax,ebx
c000277d:	5b                   	pop    ebx
c000277e:	5e                   	pop    esi
c000277f:	5f                   	pop    edi
c0002780:	5d                   	pop    ebp
c0002781:	c3                   	ret    

c0002782 <put_fat>:
c0002782:	55                   	push   ebp
c0002783:	bd 02 00 00 00       	mov    ebp,0x2
c0002788:	57                   	push   edi
c0002789:	56                   	push   esi
c000278a:	53                   	push   ebx
c000278b:	83 ec 1c             	sub    esp,0x1c
c000278e:	83 fa 01             	cmp    edx,0x1
c0002791:	0f 86 38 01 00 00    	jbe    c00028cf <put_fat+0x14d>
c0002797:	39 50 18             	cmp    DWORD PTR [eax+0x18],edx
c000279a:	0f 86 2f 01 00 00    	jbe    c00028cf <put_fat+0x14d>
c00027a0:	89 c6                	mov    esi,eax
c00027a2:	89 cf                	mov    edi,ecx
c00027a4:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c00027a7:	89 d3                	mov    ebx,edx
c00027a9:	83 f8 02             	cmp    eax,0x2
c00027ac:	0f 84 b1 00 00 00    	je     c0002863 <put_fat+0xe1>
c00027b2:	83 f8 03             	cmp    eax,0x3
c00027b5:	0f 84 d5 00 00 00    	je     c0002890 <put_fat+0x10e>
c00027bb:	48                   	dec    eax
c00027bc:	0f 85 0d 01 00 00    	jne    c00028cf <put_fat+0x14d>
c00027c2:	89 d1                	mov    ecx,edx
c00027c4:	89 f0                	mov    eax,esi
c00027c6:	d1 e9                	shr    ecx,1
c00027c8:	01 d1                	add    ecx,edx
c00027ca:	89 ca                	mov    edx,ecx
c00027cc:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00027d0:	c1 ea 09             	shr    edx,0x9
c00027d3:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c00027d6:	e8 63 fb ff ff       	call   c000233e <move_window>
c00027db:	89 c5                	mov    ebp,eax
c00027dd:	85 c0                	test   eax,eax
c00027df:	0f 85 ea 00 00 00    	jne    c00028cf <put_fat+0x14d>
c00027e5:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00027e9:	8d 46 34             	lea    eax,[esi+0x34]
c00027ec:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00027f0:	8d 41 01             	lea    eax,[ecx+0x1]
c00027f3:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c00027f9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00027fd:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c0002801:	89 f8                	mov    eax,edi
c0002803:	83 e3 01             	and    ebx,0x1
c0002806:	74 11                	je     c0002819 <put_fat+0x97>
c0002808:	8a 11                	mov    dl,BYTE PTR [ecx]
c000280a:	89 f8                	mov    eax,edi
c000280c:	83 e2 0f             	and    edx,0xf
c000280f:	c1 e0 04             	shl    eax,0x4
c0002812:	25 f0 0f 00 00       	and    eax,0xff0
c0002817:	09 d0                	or     eax,edx
c0002819:	88 01                	mov    BYTE PTR [ecx],al
c000281b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000281f:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002823:	c1 ea 09             	shr    edx,0x9
c0002826:	89 f0                	mov    eax,esi
c0002828:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c000282b:	e8 0e fb ff ff       	call   c000233e <move_window>
c0002830:	89 c5                	mov    ebp,eax
c0002832:	85 c0                	test   eax,eax
c0002834:	0f 85 95 00 00 00    	jne    c00028cf <put_fat+0x14d>
c000283a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000283e:	25 ff 01 00 00       	and    eax,0x1ff
c0002843:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002847:	85 db                	test   ebx,ebx
c0002849:	74 07                	je     c0002852 <put_fat+0xd0>
c000284b:	c1 ef 04             	shr    edi,0x4
c000284e:	89 f9                	mov    ecx,edi
c0002850:	eb 0d                	jmp    c000285f <put_fat+0xdd>
c0002852:	8a 08                	mov    cl,BYTE PTR [eax]
c0002854:	c1 ef 08             	shr    edi,0x8
c0002857:	83 e1 f0             	and    ecx,0xfffffff0
c000285a:	83 e7 0f             	and    edi,0xf
c000285d:	09 f9                	or     ecx,edi
c000285f:	88 08                	mov    BYTE PTR [eax],cl
c0002861:	eb 27                	jmp    c000288a <put_fat+0x108>
c0002863:	c1 ea 08             	shr    edx,0x8
c0002866:	89 f0                	mov    eax,esi
c0002868:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c000286b:	e8 ce fa ff ff       	call   c000233e <move_window>
c0002870:	89 c5                	mov    ebp,eax
c0002872:	85 c0                	test   eax,eax
c0002874:	75 59                	jne    c00028cf <put_fat+0x14d>
c0002876:	01 db                	add    ebx,ebx
c0002878:	0f b7 d7             	movzx  edx,di
c000287b:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0002881:	8d 44 1e 34          	lea    eax,[esi+ebx*1+0x34]
c0002885:	e8 72 f5 ff ff       	call   c0001dfc <st_word>
c000288a:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c000288e:	eb 3f                	jmp    c00028cf <put_fat+0x14d>
c0002890:	c1 ea 07             	shr    edx,0x7
c0002893:	89 f0                	mov    eax,esi
c0002895:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0002898:	e8 a1 fa ff ff       	call   c000233e <move_window>
c000289d:	89 c5                	mov    ebp,eax
c000289f:	85 c0                	test   eax,eax
c00028a1:	75 2c                	jne    c00028cf <put_fat+0x14d>
c00028a3:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c00028a9:	c1 e3 02             	shl    ebx,0x2
c00028ac:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c00028b2:	8d 5c 1e 34          	lea    ebx,[esi+ebx*1+0x34]
c00028b6:	89 d8                	mov    eax,ebx
c00028b8:	e8 27 f5 ff ff       	call   c0001de4 <ld_dword>
c00028bd:	25 00 00 00 f0       	and    eax,0xf0000000
c00028c2:	09 f8                	or     eax,edi
c00028c4:	89 c2                	mov    edx,eax
c00028c6:	89 d8                	mov    eax,ebx
c00028c8:	e8 33 f5 ff ff       	call   c0001e00 <st_dword>
c00028cd:	eb bb                	jmp    c000288a <put_fat+0x108>
c00028cf:	83 c4 1c             	add    esp,0x1c
c00028d2:	89 e8                	mov    eax,ebp
c00028d4:	5b                   	pop    ebx
c00028d5:	5e                   	pop    esi
c00028d6:	5f                   	pop    edi
c00028d7:	5d                   	pop    ebp
c00028d8:	c3                   	ret    

c00028d9 <dir_clear>:
c00028d9:	55                   	push   ebp
c00028da:	57                   	push   edi
c00028db:	56                   	push   esi
c00028dc:	89 c6                	mov    esi,eax
c00028de:	53                   	push   ebx
c00028df:	83 ec 1c             	sub    esp,0x1c
c00028e2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00028e6:	e8 f0 f9 ff ff       	call   c00022db <sync_window>
c00028eb:	85 c0                	test   eax,eax
c00028ed:	0f 85 c0 00 00 00    	jne    c00029b3 <dir_clear+0xda>
c00028f3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00028f7:	89 f0                	mov    eax,esi
c00028f9:	e8 30 f7 ff ff       	call   c000202e <clst2sect>
c00028fe:	31 d2                	xor    edx,edx
c0002900:	89 46 30             	mov    DWORD PTR [esi+0x30],eax
c0002903:	89 c5                	mov    ebp,eax
c0002905:	b9 00 02 00 00       	mov    ecx,0x200
c000290a:	8d 46 34             	lea    eax,[esi+0x34]
c000290d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002911:	e8 02 f5 ff ff       	call   c0001e18 <mem_set>
c0002916:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c000291a:	c1 e3 09             	shl    ebx,0x9
c000291d:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c0002923:	76 1b                	jbe    c0002940 <dir_clear+0x67>
c0002925:	bb 00 80 00 00       	mov    ebx,0x8000
c000292a:	eb 14                	jmp    c0002940 <dir_clear+0x67>
c000292c:	83 ec 0c             	sub    esp,0xc
c000292f:	53                   	push   ebx
c0002930:	e8 eb 32 00 00       	call   c0005c20 <ff_memalloc>
c0002935:	83 c4 10             	add    esp,0x10
c0002938:	89 c7                	mov    edi,eax
c000293a:	85 c0                	test   eax,eax
c000293c:	75 7c                	jne    c00029ba <dir_clear+0xe1>
c000293e:	d1 eb                	shr    ebx,1
c0002940:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002946:	77 e4                	ja     c000292c <dir_clear+0x53>
c0002948:	31 db                	xor    ebx,ebx
c000294a:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c000294e:	39 d8                	cmp    eax,ebx
c0002950:	76 53                	jbe    c00029a5 <dir_clear+0xcc>
c0002952:	6a 01                	push   0x1
c0002954:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c0002957:	50                   	push   eax
c0002958:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c000295c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0002960:	50                   	push   eax
c0002961:	e8 3c f4 ff ff       	call   c0001da2 <disk_write>
c0002966:	83 c4 10             	add    esp,0x10
c0002969:	85 c0                	test   eax,eax
c000296b:	75 38                	jne    c00029a5 <dir_clear+0xcc>
c000296d:	43                   	inc    ebx
c000296e:	eb da                	jmp    c000294a <dir_clear+0x71>
c0002970:	52                   	push   edx
c0002971:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c0002974:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0002978:	50                   	push   eax
c0002979:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c000297d:	57                   	push   edi
c000297e:	50                   	push   eax
c000297f:	e8 1e f4 ff ff       	call   c0001da2 <disk_write>
c0002984:	83 c4 10             	add    esp,0x10
c0002987:	85 c0                	test   eax,eax
c0002989:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000298d:	75 0a                	jne    c0002999 <dir_clear+0xc0>
c000298f:	01 d3                	add    ebx,edx
c0002991:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0002995:	39 d8                	cmp    eax,ebx
c0002997:	77 d7                	ja     c0002970 <dir_clear+0x97>
c0002999:	83 ec 0c             	sub    esp,0xc
c000299c:	57                   	push   edi
c000299d:	e8 96 32 00 00       	call   c0005c38 <ff_memfree>
c00029a2:	83 c4 10             	add    esp,0x10
c00029a5:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00029a9:	39 d8                	cmp    eax,ebx
c00029ab:	0f 95 c0             	setne  al
c00029ae:	0f b6 c0             	movzx  eax,al
c00029b1:	eb 19                	jmp    c00029cc <dir_clear+0xf3>
c00029b3:	b8 01 00 00 00       	mov    eax,0x1
c00029b8:	eb 12                	jmp    c00029cc <dir_clear+0xf3>
c00029ba:	89 d9                	mov    ecx,ebx
c00029bc:	31 d2                	xor    edx,edx
c00029be:	e8 55 f4 ff ff       	call   c0001e18 <mem_set>
c00029c3:	89 da                	mov    edx,ebx
c00029c5:	31 db                	xor    ebx,ebx
c00029c7:	c1 ea 09             	shr    edx,0x9
c00029ca:	eb c5                	jmp    c0002991 <dir_clear+0xb8>
c00029cc:	83 c4 1c             	add    esp,0x1c
c00029cf:	5b                   	pop    ebx
c00029d0:	5e                   	pop    esi
c00029d1:	5f                   	pop    edi
c00029d2:	5d                   	pop    ebp
c00029d3:	c3                   	ret    

c00029d4 <create_name>:
c00029d4:	55                   	push   ebp
c00029d5:	57                   	push   edi
c00029d6:	89 d7                	mov    edi,edx
c00029d8:	56                   	push   esi
c00029d9:	31 f6                	xor    esi,esi
c00029db:	53                   	push   ebx
c00029dc:	83 ec 3c             	sub    esp,0x3c
c00029df:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00029e3:	8b 02                	mov    eax,DWORD PTR [edx]
c00029e5:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00029e9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00029ed:	8b 00                	mov    eax,DWORD PTR [eax]
c00029ef:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00029f2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00029f6:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00029fa:	e8 5e f4 ff ff       	call   c0001e5d <tchar2uni>
c00029ff:	89 c3                	mov    ebx,eax
c0002a01:	83 f8 ff             	cmp    eax,0xffffffff
c0002a04:	75 0a                	jne    c0002a10 <create_name+0x3c>
c0002a06:	b8 06 00 00 00       	mov    eax,0x6
c0002a0b:	e9 93 02 00 00       	jmp    c0002ca3 <create_name+0x2cf>
c0002a10:	3d ff ff 00 00       	cmp    eax,0xffff
c0002a15:	76 0c                	jbe    c0002a23 <create_name+0x4f>
c0002a17:	c1 e8 10             	shr    eax,0x10
c0002a1a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002a1e:	66 89 04 72          	mov    WORD PTR [edx+esi*2],ax
c0002a22:	46                   	inc    esi
c0002a23:	0f b7 d3             	movzx  edx,bx
c0002a26:	83 fa 1f             	cmp    edx,0x1f
c0002a29:	76 4a                	jbe    c0002a75 <create_name+0xa1>
c0002a2b:	83 fa 5c             	cmp    edx,0x5c
c0002a2e:	74 30                	je     c0002a60 <create_name+0x8c>
c0002a30:	83 fa 2f             	cmp    edx,0x2f
c0002a33:	74 2b                	je     c0002a60 <create_name+0x8c>
c0002a35:	83 fa 7f             	cmp    edx,0x7f
c0002a38:	77 0e                	ja     c0002a48 <create_name+0x74>
c0002a3a:	b8 22 ff 01 c0       	mov    eax,0xc001ff22
c0002a3f:	e8 02 f4 ff ff       	call   c0001e46 <chk_chr>
c0002a44:	85 c0                	test   eax,eax
c0002a46:	75 be                	jne    c0002a06 <create_name+0x32>
c0002a48:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0002a4e:	77 b6                	ja     c0002a06 <create_name+0x32>
c0002a50:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002a54:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0002a58:	46                   	inc    esi
c0002a59:	eb 9b                	jmp    c00029f6 <create_name+0x22>
c0002a5b:	40                   	inc    eax
c0002a5c:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0002a60:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002a64:	0f be 10             	movsx  edx,BYTE PTR [eax]
c0002a67:	83 fa 2f             	cmp    edx,0x2f
c0002a6a:	74 ef                	je     c0002a5b <create_name+0x87>
c0002a6c:	83 fa 5c             	cmp    edx,0x5c
c0002a6f:	74 ea                	je     c0002a5b <create_name+0x87>
c0002a71:	31 db                	xor    ebx,ebx
c0002a73:	eb 02                	jmp    c0002a77 <create_name+0xa3>
c0002a75:	b3 04                	mov    bl,0x4
c0002a77:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002a7b:	89 07                	mov    DWORD PTR [edi],eax
c0002a7d:	85 f6                	test   esi,esi
c0002a7f:	74 16                	je     c0002a97 <create_name+0xc3>
c0002a81:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002a85:	0f b7 44 70 fe       	movzx  eax,WORD PTR [eax+esi*2-0x2]
c0002a8a:	83 f8 20             	cmp    eax,0x20
c0002a8d:	74 05                	je     c0002a94 <create_name+0xc0>
c0002a8f:	83 f8 2e             	cmp    eax,0x2e
c0002a92:	75 03                	jne    c0002a97 <create_name+0xc3>
c0002a94:	4e                   	dec    esi
c0002a95:	eb e6                	jmp    c0002a7d <create_name+0xa9>
c0002a97:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002a9b:	31 ff                	xor    edi,edi
c0002a9d:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0002aa3:	85 f6                	test   esi,esi
c0002aa5:	0f 84 5b ff ff ff    	je     c0002a06 <create_name+0x32>
c0002aab:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002aaf:	8d 57 01             	lea    edx,[edi+0x1]
c0002ab2:	0f b7 04 78          	movzx  eax,WORD PTR [eax+edi*2]
c0002ab6:	83 f8 20             	cmp    eax,0x20
c0002ab9:	75 04                	jne    c0002abf <create_name+0xeb>
c0002abb:	89 d7                	mov    edi,edx
c0002abd:	eb ec                	jmp    c0002aab <create_name+0xd7>
c0002abf:	85 ff                	test   edi,edi
c0002ac1:	75 05                	jne    c0002ac8 <create_name+0xf4>
c0002ac3:	83 f8 2e             	cmp    eax,0x2e
c0002ac6:	75 08                	jne    c0002ad0 <create_name+0xfc>
c0002ac8:	83 cb 03             	or     ebx,0x3
c0002acb:	eb 03                	jmp    c0002ad0 <create_name+0xfc>
c0002acd:	4e                   	dec    esi
c0002ace:	74 0c                	je     c0002adc <create_name+0x108>
c0002ad0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002ad4:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0002ada:	75 f1                	jne    c0002acd <create_name+0xf9>
c0002adc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002ae0:	b9 0b 00 00 00       	mov    ecx,0xb
c0002ae5:	83 c0 20             	add    eax,0x20
c0002ae8:	ba 20 00 00 00       	mov    edx,0x20
c0002aed:	31 ed                	xor    ebp,ebp
c0002aef:	e8 24 f3 ff ff       	call   c0001e18 <mem_set>
c0002af4:	b9 08 00 00 00       	mov    ecx,0x8
c0002af9:	c6 44 24 08 00       	mov    BYTE PTR [esp+0x8],0x0
c0002afe:	8d 47 01             	lea    eax,[edi+0x1]
c0002b01:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0002b05:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002b09:	0f b7 04 78          	movzx  eax,WORD PTR [eax+edi*2]
c0002b0d:	89 c7                	mov    edi,eax
c0002b0f:	85 c0                	test   eax,eax
c0002b11:	0f 84 25 01 00 00    	je     c0002c3c <create_name+0x268>
c0002b17:	83 f8 20             	cmp    eax,0x20
c0002b1a:	74 0f                	je     c0002b2b <create_name+0x157>
c0002b1c:	83 f8 2e             	cmp    eax,0x2e
c0002b1f:	75 13                	jne    c0002b34 <create_name+0x160>
c0002b21:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002b25:	0f 84 6a 01 00 00    	je     c0002c95 <create_name+0x2c1>
c0002b2b:	83 cb 03             	or     ebx,0x3
c0002b2e:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0002b32:	eb ca                	jmp    c0002afe <create_name+0x12a>
c0002b34:	39 cd                	cmp    ebp,ecx
c0002b36:	73 0b                	jae    c0002b43 <create_name+0x16f>
c0002b38:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002b3c:	75 3f                	jne    c0002b7d <create_name+0x1a9>
c0002b3e:	e9 52 01 00 00       	jmp    c0002c95 <create_name+0x2c1>
c0002b43:	83 f9 0b             	cmp    ecx,0xb
c0002b46:	75 0d                	jne    c0002b55 <create_name+0x181>
c0002b48:	83 cb 03             	or     ebx,0x3
c0002b4b:	b9 0b 00 00 00       	mov    ecx,0xb
c0002b50:	e9 e7 00 00 00       	jmp    c0002c3c <create_name+0x268>
c0002b55:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002b59:	74 0d                	je     c0002b68 <create_name+0x194>
c0002b5b:	83 cb 03             	or     ebx,0x3
c0002b5e:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002b62:	0f 87 d4 00 00 00    	ja     c0002c3c <create_name+0x268>
c0002b68:	c1 64 24 08 02       	shl    DWORD PTR [esp+0x8],0x2
c0002b6d:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0002b71:	b9 0b 00 00 00       	mov    ecx,0xb
c0002b76:	bd 08 00 00 00       	mov    ebp,0x8
c0002b7b:	eb b1                	jmp    c0002b2e <create_name+0x15a>
c0002b7d:	83 f8 7f             	cmp    eax,0x7f
c0002b80:	76 66                	jbe    c0002be8 <create_name+0x214>
c0002b82:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0002b86:	89 d9                	mov    ecx,ebx
c0002b88:	83 c9 02             	or     ecx,0x2
c0002b8b:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0002b8f:	52                   	push   edx
c0002b90:	52                   	push   edx
c0002b91:	68 b5 01 00 00       	push   0x1b5
c0002b96:	50                   	push   eax
c0002b97:	e8 b4 30 00 00       	call   c0005c50 <ff_uni2oem>
c0002b9c:	83 c4 10             	add    esp,0x10
c0002b9f:	89 c7                	mov    edi,eax
c0002ba1:	a8 80                	test   al,0x80
c0002ba3:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0002ba7:	74 0c                	je     c0002bb5 <create_name+0x1e1>
c0002ba9:	83 e7 7f             	and    edi,0x7f
c0002bac:	0f b6 bf e0 ff 01 c0 	movzx  edi,BYTE PTR [edi-0x3ffe0020]
c0002bb3:	eb 2a                	jmp    c0002bdf <create_name+0x20b>
c0002bb5:	0f b7 c0             	movzx  eax,ax
c0002bb8:	3d ff 00 00 00       	cmp    eax,0xff
c0002bbd:	76 20                	jbe    c0002bdf <create_name+0x20b>
c0002bbf:	8d 51 ff             	lea    edx,[ecx-0x1]
c0002bc2:	39 ea                	cmp    edx,ebp
c0002bc4:	77 0a                	ja     c0002bd0 <create_name+0x1fc>
c0002bc6:	83 cb 03             	or     ebx,0x3
c0002bc9:	89 cd                	mov    ebp,ecx
c0002bcb:	e9 5e ff ff ff       	jmp    c0002b2e <create_name+0x15a>
c0002bd0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0002bd4:	88 64 2b 20          	mov    BYTE PTR [ebx+ebp*1+0x20],ah
c0002bd8:	45                   	inc    ebp
c0002bd9:	8a 5c 24 18          	mov    bl,BYTE PTR [esp+0x18]
c0002bdd:	eb 4d                	jmp    c0002c2c <create_name+0x258>
c0002bdf:	8a 5c 24 18          	mov    bl,BYTE PTR [esp+0x18]
c0002be3:	66 85 ff             	test   di,di
c0002be6:	74 19                	je     c0002c01 <create_name+0x22d>
c0002be8:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0002bec:	0f b7 d7             	movzx  edx,di
c0002bef:	b8 2b ff 01 c0       	mov    eax,0xc001ff2b
c0002bf4:	e8 4d f2 ff ff       	call   c0001e46 <chk_chr>
c0002bf9:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0002bfd:	85 c0                	test   eax,eax
c0002bff:	74 0a                	je     c0002c0b <create_name+0x237>
c0002c01:	83 cb 03             	or     ebx,0x3
c0002c04:	bf 5f 00 00 00       	mov    edi,0x5f
c0002c09:	eb 21                	jmp    c0002c2c <create_name+0x258>
c0002c0b:	8d 47 bf             	lea    eax,[edi-0x41]
c0002c0e:	66 83 f8 19          	cmp    ax,0x19
c0002c12:	77 07                	ja     c0002c1b <create_name+0x247>
c0002c14:	83 4c 24 08 02       	or     DWORD PTR [esp+0x8],0x2
c0002c19:	eb 11                	jmp    c0002c2c <create_name+0x258>
c0002c1b:	8d 47 9f             	lea    eax,[edi-0x61]
c0002c1e:	66 83 f8 19          	cmp    ax,0x19
c0002c22:	77 08                	ja     c0002c2c <create_name+0x258>
c0002c24:	83 4c 24 08 01       	or     DWORD PTR [esp+0x8],0x1
c0002c29:	83 ef 20             	sub    edi,0x20
c0002c2c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0002c30:	89 f8                	mov    eax,edi
c0002c32:	88 44 2a 20          	mov    BYTE PTR [edx+ebp*1+0x20],al
c0002c36:	45                   	inc    ebp
c0002c37:	e9 f2 fe ff ff       	jmp    c0002b2e <create_name+0x15a>
c0002c3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002c40:	80 78 20 e5          	cmp    BYTE PTR [eax+0x20],0xe5
c0002c44:	75 04                	jne    c0002c4a <create_name+0x276>
c0002c46:	c6 40 20 05          	mov    BYTE PTR [eax+0x20],0x5
c0002c4a:	83 f9 08             	cmp    ecx,0x8
c0002c4d:	75 05                	jne    c0002c54 <create_name+0x280>
c0002c4f:	c1 64 24 08 02       	shl    DWORD PTR [esp+0x8],0x2
c0002c54:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002c58:	83 e0 0c             	and    eax,0xc
c0002c5b:	83 f8 0c             	cmp    eax,0xc
c0002c5e:	74 0c                	je     c0002c6c <create_name+0x298>
c0002c60:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002c64:	83 e0 03             	and    eax,0x3
c0002c67:	83 f8 03             	cmp    eax,0x3
c0002c6a:	75 05                	jne    c0002c71 <create_name+0x29d>
c0002c6c:	83 cb 02             	or     ebx,0x2
c0002c6f:	eb 19                	jmp    c0002c8a <create_name+0x2b6>
c0002c71:	f6 c3 02             	test   bl,0x2
c0002c74:	75 14                	jne    c0002c8a <create_name+0x2b6>
c0002c76:	f6 44 24 08 01       	test   BYTE PTR [esp+0x8],0x1
c0002c7b:	74 03                	je     c0002c80 <create_name+0x2ac>
c0002c7d:	83 cb 10             	or     ebx,0x10
c0002c80:	f6 44 24 08 04       	test   BYTE PTR [esp+0x8],0x4
c0002c85:	74 03                	je     c0002c8a <create_name+0x2b6>
c0002c87:	83 cb 08             	or     ebx,0x8
c0002c8a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002c8e:	88 58 2b             	mov    BYTE PTR [eax+0x2b],bl
c0002c91:	31 c0                	xor    eax,eax
c0002c93:	eb 0e                	jmp    c0002ca3 <create_name+0x2cf>
c0002c95:	83 f9 0b             	cmp    ecx,0xb
c0002c98:	0f 85 ca fe ff ff    	jne    c0002b68 <create_name+0x194>
c0002c9e:	e9 a5 fe ff ff       	jmp    c0002b48 <create_name+0x174>
c0002ca3:	83 c4 3c             	add    esp,0x3c
c0002ca6:	5b                   	pop    ebx
c0002ca7:	5e                   	pop    esi
c0002ca8:	5f                   	pop    edi
c0002ca9:	5d                   	pop    ebp
c0002caa:	c3                   	ret    

c0002cab <cmp_lfn>:
c0002cab:	55                   	push   ebp
c0002cac:	57                   	push   edi
c0002cad:	89 d7                	mov    edi,edx
c0002caf:	56                   	push   esi
c0002cb0:	53                   	push   ebx
c0002cb1:	83 ec 1c             	sub    esp,0x1c
c0002cb4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002cb8:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002cbb:	e8 17 f1 ff ff       	call   c0001dd7 <ld_word>
c0002cc0:	66 85 c0             	test   ax,ax
c0002cc3:	74 07                	je     c0002ccc <cmp_lfn+0x21>
c0002cc5:	31 c0                	xor    eax,eax
c0002cc7:	e9 a1 00 00 00       	jmp    c0002d6d <cmp_lfn+0xc2>
c0002ccc:	8a 1f                	mov    bl,BYTE PTR [edi]
c0002cce:	bd 01 00 00 00       	mov    ebp,0x1
c0002cd3:	83 e3 3f             	and    ebx,0x3f
c0002cd6:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0002cde:	4b                   	dec    ebx
c0002cdf:	6b db 0d             	imul   ebx,ebx,0xd
c0002ce2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002ce6:	0f b6 80 60 00 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffdffa0]
c0002ced:	01 f8                	add    eax,edi
c0002cef:	e8 e3 f0 ff ff       	call   c0001dd7 <ld_word>
c0002cf4:	66 85 ed             	test   bp,bp
c0002cf7:	89 c6                	mov    esi,eax
c0002cf9:	74 3c                	je     c0002d37 <cmp_lfn+0x8c>
c0002cfb:	81 fb ff 00 00 00    	cmp    ebx,0xff
c0002d01:	77 c2                	ja     c0002cc5 <cmp_lfn+0x1a>
c0002d03:	83 ec 0c             	sub    esp,0xc
c0002d06:	0f b7 c0             	movzx  eax,ax
c0002d09:	50                   	push   eax
c0002d0a:	e8 59 30 00 00       	call   c0005d68 <ff_wtoupper>
c0002d0f:	89 c5                	mov    ebp,eax
c0002d11:	8d 43 01             	lea    eax,[ebx+0x1]
c0002d14:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0002d18:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0002d1c:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c0002d20:	89 04 24             	mov    DWORD PTR [esp],eax
c0002d23:	e8 40 30 00 00       	call   c0005d68 <ff_wtoupper>
c0002d28:	83 c4 10             	add    esp,0x10
c0002d2b:	39 c5                	cmp    ebp,eax
c0002d2d:	75 96                	jne    c0002cc5 <cmp_lfn+0x1a>
c0002d2f:	89 f5                	mov    ebp,esi
c0002d31:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0002d35:	eb 0b                	jmp    c0002d42 <cmp_lfn+0x97>
c0002d37:	0f b7 c8             	movzx  ecx,ax
c0002d3a:	81 f9 ff ff 00 00    	cmp    ecx,0xffff
c0002d40:	75 83                	jne    c0002cc5 <cmp_lfn+0x1a>
c0002d42:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c0002d46:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0002d4b:	75 95                	jne    c0002ce2 <cmp_lfn+0x37>
c0002d4d:	f6 07 40             	test   BYTE PTR [edi],0x40
c0002d50:	74 16                	je     c0002d68 <cmp_lfn+0xbd>
c0002d52:	66 85 ed             	test   bp,bp
c0002d55:	74 11                	je     c0002d68 <cmp_lfn+0xbd>
c0002d57:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002d5b:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002d60:	0f 94 c0             	sete   al
c0002d63:	0f b6 c0             	movzx  eax,al
c0002d66:	eb 05                	jmp    c0002d6d <cmp_lfn+0xc2>
c0002d68:	b8 01 00 00 00       	mov    eax,0x1
c0002d6d:	83 c4 1c             	add    esp,0x1c
c0002d70:	5b                   	pop    ebx
c0002d71:	5e                   	pop    esi
c0002d72:	5f                   	pop    edi
c0002d73:	5d                   	pop    ebp
c0002d74:	c3                   	ret    

c0002d75 <sync_fs>:
c0002d75:	56                   	push   esi
c0002d76:	53                   	push   ebx
c0002d77:	53                   	push   ebx
c0002d78:	89 c3                	mov    ebx,eax
c0002d7a:	e8 5c f5 ff ff       	call   c00022db <sync_window>
c0002d7f:	85 c0                	test   eax,eax
c0002d81:	0f 85 9a 00 00 00    	jne    c0002e21 <sync_fs+0xac>
c0002d87:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c0002d8a:	75 7b                	jne    c0002e07 <sync_fs+0x92>
c0002d8c:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c0002d90:	75 75                	jne    c0002e07 <sync_fs+0x92>
c0002d92:	b9 00 02 00 00       	mov    ecx,0x200
c0002d97:	8d 73 34             	lea    esi,[ebx+0x34]
c0002d9a:	31 d2                	xor    edx,edx
c0002d9c:	89 f0                	mov    eax,esi
c0002d9e:	e8 75 f0 ff ff       	call   c0001e18 <mem_set>
c0002da3:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c0002da9:	ba 55 aa 00 00       	mov    edx,0xaa55
c0002dae:	e8 49 f0 ff ff       	call   c0001dfc <st_word>
c0002db3:	ba 52 52 61 41       	mov    edx,0x41615252
c0002db8:	89 f0                	mov    eax,esi
c0002dba:	e8 41 f0 ff ff       	call   c0001e00 <st_dword>
c0002dbf:	8d 83 18 02 00 00    	lea    eax,[ebx+0x218]
c0002dc5:	ba 72 72 41 61       	mov    edx,0x61417272
c0002dca:	e8 31 f0 ff ff       	call   c0001e00 <st_dword>
c0002dcf:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0002dd2:	8d 83 1c 02 00 00    	lea    eax,[ebx+0x21c]
c0002dd8:	e8 23 f0 ff ff       	call   c0001e00 <st_dword>
c0002ddd:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0002de0:	8d 83 20 02 00 00    	lea    eax,[ebx+0x220]
c0002de6:	e8 15 f0 ff ff       	call   c0001e00 <st_dword>
c0002deb:	6a 01                	push   0x1
c0002ded:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0002df0:	40                   	inc    eax
c0002df1:	50                   	push   eax
c0002df2:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0002df5:	56                   	push   esi
c0002df6:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002dfa:	50                   	push   eax
c0002dfb:	e8 a2 ef ff ff       	call   c0001da2 <disk_write>
c0002e00:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c0002e04:	83 c4 10             	add    esp,0x10
c0002e07:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002e0b:	51                   	push   ecx
c0002e0c:	6a 00                	push   0x0
c0002e0e:	6a 00                	push   0x0
c0002e10:	50                   	push   eax
c0002e11:	e8 a2 ef ff ff       	call   c0001db8 <disk_ioctl>
c0002e16:	83 c4 10             	add    esp,0x10
c0002e19:	85 c0                	test   eax,eax
c0002e1b:	0f 95 c0             	setne  al
c0002e1e:	0f b6 c0             	movzx  eax,al
c0002e21:	5a                   	pop    edx
c0002e22:	5b                   	pop    ebx
c0002e23:	5e                   	pop    esi
c0002e24:	c3                   	ret    

c0002e25 <create_partition>:
c0002e25:	55                   	push   ebp
c0002e26:	0f b6 c0             	movzx  eax,al
c0002e29:	57                   	push   edi
c0002e2a:	56                   	push   esi
c0002e2b:	53                   	push   ebx
c0002e2c:	83 ec 40             	sub    esp,0x40
c0002e2f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002e33:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0002e37:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0002e3b:	8d 44 24 30          	lea    eax,[esp+0x30]
c0002e3f:	50                   	push   eax
c0002e40:	6a 01                	push   0x1
c0002e42:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0002e46:	e8 6d ef ff ff       	call   c0001db8 <disk_ioctl>
c0002e4b:	83 c4 10             	add    esp,0x10
c0002e4e:	85 c0                	test   eax,eax
c0002e50:	0f 85 6a 01 00 00    	jne    c0002fc0 <create_partition+0x19b>
c0002e56:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002e5a:	b9 05 00 00 00       	mov    ecx,0x5
c0002e5f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0002e63:	be 08 00 00 00       	mov    esi,0x8
c0002e68:	89 f0                	mov    eax,esi
c0002e6a:	31 d2                	xor    edx,edx
c0002e6c:	0f b6 d8             	movzx  ebx,al
c0002e6f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002e73:	f7 f3                	div    ebx
c0002e75:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0002e7a:	76 0a                	jbe    c0002e86 <create_partition+0x61>
c0002e7c:	d1 e6                	shl    esi,1
c0002e7e:	49                   	dec    ecx
c0002e7f:	75 e7                	jne    c0002e68 <create_partition+0x43>
c0002e81:	be ff ff ff ff       	mov    esi,0xffffffff
c0002e86:	b9 00 02 00 00       	mov    ecx,0x200
c0002e8b:	31 d2                	xor    edx,edx
c0002e8d:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002e91:	e8 82 ef ff ff       	call   c0001e18 <mem_set>
c0002e96:	b9 64 00 00 00       	mov    ecx,0x64
c0002e9b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002e9f:	31 d2                	xor    edx,edx
c0002ea1:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0002ea9:	f7 f1                	div    ecx
c0002eab:	b9 3f 00 00 00       	mov    ecx,0x3f
c0002eb0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0002eb4:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002eb8:	8d 98 c6 01 00 00    	lea    ebx,[eax+0x1c6]
c0002ebe:	89 f0                	mov    eax,esi
c0002ec0:	0f b6 c0             	movzx  eax,al
c0002ec3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002ec7:	85 c9                	test   ecx,ecx
c0002ec9:	75 34                	jne    c0002eff <create_partition+0xda>
c0002ecb:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002ecf:	ba 55 aa 00 00       	mov    edx,0xaa55
c0002ed4:	05 fe 01 00 00       	add    eax,0x1fe
c0002ed9:	e8 1e ef ff ff       	call   c0001dfc <st_word>
c0002ede:	6a 01                	push   0x1
c0002ee0:	6a 00                	push   0x0
c0002ee2:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c0002ee6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0002eea:	e8 b3 ee ff ff       	call   c0001da2 <disk_write>
c0002eef:	83 c4 10             	add    esp,0x10
c0002ef2:	85 c0                	test   eax,eax
c0002ef4:	0f 95 c0             	setne  al
c0002ef7:	0f b6 c0             	movzx  eax,al
c0002efa:	e9 c6 00 00 00       	jmp    c0002fc5 <create_partition+0x1a0>
c0002eff:	39 4c 24 04          	cmp    DWORD PTR [esp+0x4],ecx
c0002f03:	76 c6                	jbe    c0002ecb <create_partition+0xa6>
c0002f05:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0002f09:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0002f0d:	8b 34 b8             	mov    esi,DWORD PTR [eax+edi*4]
c0002f10:	83 fe 64             	cmp    esi,0x64
c0002f13:	77 0d                	ja     c0002f22 <create_partition+0xfd>
c0002f15:	74 07                	je     c0002f1e <create_partition+0xf9>
c0002f17:	0f af 74 24 1c       	imul   esi,DWORD PTR [esp+0x1c]
c0002f1c:	eb 04                	jmp    c0002f22 <create_partition+0xfd>
c0002f1e:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0002f22:	31 c0                	xor    eax,eax
c0002f24:	89 f2                	mov    edx,esi
c0002f26:	01 ca                	add    edx,ecx
c0002f28:	0f 92 c0             	setb   al
c0002f2b:	3b 54 24 04          	cmp    edx,DWORD PTR [esp+0x4]
c0002f2f:	77 04                	ja     c0002f35 <create_partition+0x110>
c0002f31:	85 c0                	test   eax,eax
c0002f33:	74 08                	je     c0002f3d <create_partition+0x118>
c0002f35:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0002f39:	29 ce                	sub    esi,ecx
c0002f3b:	eb 04                	jmp    c0002f41 <create_partition+0x11c>
c0002f3d:	85 f6                	test   esi,esi
c0002f3f:	74 8a                	je     c0002ecb <create_partition+0xa6>
c0002f41:	89 ca                	mov    edx,ecx
c0002f43:	89 d8                	mov    eax,ebx
c0002f45:	bf 3f 00 00 00       	mov    edi,0x3f
c0002f4a:	e8 b1 ee ff ff       	call   c0001e00 <st_dword>
c0002f4f:	8d 43 04             	lea    eax,[ebx+0x4]
c0002f52:	89 f2                	mov    edx,esi
c0002f54:	83 c3 10             	add    ebx,0x10
c0002f57:	e8 a4 ee ff ff       	call   c0001e00 <st_dword>
c0002f5c:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c0002f60:	31 d2                	xor    edx,edx
c0002f62:	88 43 ec             	mov    BYTE PTR [ebx-0x14],al
c0002f65:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0002f69:	89 c8                	mov    eax,ecx
c0002f6b:	01 f1                	add    ecx,esi
c0002f6d:	f7 f7                	div    edi
c0002f6f:	89 d5                	mov    ebp,edx
c0002f71:	31 d2                	xor    edx,edx
c0002f73:	45                   	inc    ebp
c0002f74:	f7 74 24 10          	div    DWORD PTR [esp+0x10]
c0002f78:	88 53 e9             	mov    BYTE PTR [ebx-0x17],dl
c0002f7b:	88 43 eb             	mov    BYTE PTR [ebx-0x15],al
c0002f7e:	89 c2                	mov    edx,eax
c0002f80:	8d 41 ff             	lea    eax,[ecx-0x1]
c0002f83:	c1 ea 02             	shr    edx,0x2
c0002f86:	83 e2 c0             	and    edx,0xffffffc0
c0002f89:	09 ea                	or     edx,ebp
c0002f8b:	88 53 ea             	mov    BYTE PTR [ebx-0x16],dl
c0002f8e:	31 d2                	xor    edx,edx
c0002f90:	f7 f7                	div    edi
c0002f92:	89 d6                	mov    esi,edx
c0002f94:	31 d2                	xor    edx,edx
c0002f96:	46                   	inc    esi
c0002f97:	f7 74 24 10          	div    DWORD PTR [esp+0x10]
c0002f9b:	88 53 ed             	mov    BYTE PTR [ebx-0x13],dl
c0002f9e:	88 43 ef             	mov    BYTE PTR [ebx-0x11],al
c0002fa1:	89 c7                	mov    edi,eax
c0002fa3:	c1 ef 02             	shr    edi,0x2
c0002fa6:	83 e7 c0             	and    edi,0xffffffc0
c0002fa9:	09 fe                	or     esi,edi
c0002fab:	89 f2                	mov    edx,esi
c0002fad:	88 53 ee             	mov    BYTE PTR [ebx-0x12],dl
c0002fb0:	83 7c 24 08 04       	cmp    DWORD PTR [esp+0x8],0x4
c0002fb5:	0f 85 0c ff ff ff    	jne    c0002ec7 <create_partition+0xa2>
c0002fbb:	e9 0b ff ff ff       	jmp    c0002ecb <create_partition+0xa6>
c0002fc0:	b8 01 00 00 00       	mov    eax,0x1
c0002fc5:	83 c4 3c             	add    esp,0x3c
c0002fc8:	5b                   	pop    ebx
c0002fc9:	5e                   	pop    esi
c0002fca:	5f                   	pop    edi
c0002fcb:	5d                   	pop    ebp
c0002fcc:	c3                   	ret    

c0002fcd <get_fileinfo>:
c0002fcd:	55                   	push   ebp
c0002fce:	57                   	push   edi
c0002fcf:	56                   	push   esi
c0002fd0:	53                   	push   ebx
c0002fd1:	83 ec 1c             	sub    esp,0x1c
c0002fd4:	8b 30                	mov    esi,DWORD PTR [eax]
c0002fd6:	c6 42 16 00          	mov    BYTE PTR [edx+0x16],0x0
c0002fda:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0002fde:	83 78 18 00          	cmp    DWORD PTR [eax+0x18],0x0
c0002fe2:	0f 84 d3 01 00 00    	je     c00031bb <get_fileinfo+0x1ee>
c0002fe8:	89 d3                	mov    ebx,edx
c0002fea:	89 c6                	mov    esi,eax
c0002fec:	83 78 2c ff          	cmp    DWORD PTR [eax+0x2c],0xffffffff
c0002ff0:	74 72                	je     c0003064 <get_fileinfo+0x97>
c0002ff2:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0002ffa:	31 ed                	xor    ebp,ebp
c0002ffc:	31 ff                	xor    edi,edi
c0002ffe:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003002:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0003006:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003009:	0f b7 04 08          	movzx  eax,WORD PTR [eax+ecx*1]
c000300d:	89 c2                	mov    edx,eax
c000300f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003013:	85 c0                	test   eax,eax
c0003015:	74 41                	je     c0003058 <get_fileinfo+0x8b>
c0003017:	0f b7 c5             	movzx  eax,bp
c000301a:	85 c0                	test   eax,eax
c000301c:	75 0d                	jne    c000302b <get_fileinfo+0x5e>
c000301e:	8d 8a 00 28 00 00    	lea    ecx,[edx+0x2800]
c0003024:	66 81 f9 ff 07       	cmp    cx,0x7ff
c0003029:	76 22                	jbe    c000304d <get_fileinfo+0x80>
c000302b:	c1 e0 10             	shl    eax,0x10
c000302e:	b9 ff 00 00 00       	mov    ecx,0xff
c0003033:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0003037:	29 f9                	sub    ecx,edi
c0003039:	8d 54 3b 16          	lea    edx,[ebx+edi*1+0x16]
c000303d:	e8 f3 ee ff ff       	call   c0001f35 <put_utf>
c0003042:	0f b6 c0             	movzx  eax,al
c0003045:	85 c0                	test   eax,eax
c0003047:	74 0d                	je     c0003056 <get_fileinfo+0x89>
c0003049:	01 c7                	add    edi,eax
c000304b:	31 d2                	xor    edx,edx
c000304d:	83 44 24 04 02       	add    DWORD PTR [esp+0x4],0x2
c0003052:	89 d5                	mov    ebp,edx
c0003054:	eb a8                	jmp    c0002ffe <get_fileinfo+0x31>
c0003056:	31 ff                	xor    edi,edi
c0003058:	66 85 ed             	test   bp,bp
c000305b:	74 02                	je     c000305f <get_fileinfo+0x92>
c000305d:	31 ff                	xor    edi,edi
c000305f:	c6 44 3b 16 00       	mov    BYTE PTR [ebx+edi*1+0x16],0x0
c0003064:	31 ff                	xor    edi,edi
c0003066:	31 c9                	xor    ecx,ecx
c0003068:	83 f9 0a             	cmp    ecx,0xa
c000306b:	0f 87 ac 00 00 00    	ja     c000311d <get_fileinfo+0x150>
c0003071:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0003074:	8d 69 01             	lea    ebp,[ecx+0x1]
c0003077:	0f b6 04 08          	movzx  eax,BYTE PTR [eax+ecx*1]
c000307b:	89 c2                	mov    edx,eax
c000307d:	83 f8 20             	cmp    eax,0x20
c0003080:	0f 84 90 00 00 00    	je     c0003116 <get_fileinfo+0x149>
c0003086:	83 f8 05             	cmp    eax,0x5
c0003089:	75 05                	jne    c0003090 <get_fileinfo+0xc3>
c000308b:	ba e5 00 00 00       	mov    edx,0xe5
c0003090:	83 ff 0b             	cmp    edi,0xb
c0003093:	77 0b                	ja     c00030a0 <get_fileinfo+0xd3>
c0003095:	83 fd 09             	cmp    ebp,0x9
c0003098:	75 06                	jne    c00030a0 <get_fileinfo+0xd3>
c000309a:	c6 44 3b 09 2e       	mov    BYTE PTR [ebx+edi*1+0x9],0x2e
c000309f:	47                   	inc    edi
c00030a0:	0f b7 c2             	movzx  eax,dx
c00030a3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00030a7:	e8 ab ed ff ff       	call   c0001e57 <dbc_1st>
c00030ac:	85 c0                	test   eax,eax
c00030ae:	74 2f                	je     c00030df <get_fileinfo+0x112>
c00030b0:	83 fd 08             	cmp    ebp,0x8
c00030b3:	74 2a                	je     c00030df <get_fileinfo+0x112>
c00030b5:	83 fd 0b             	cmp    ebp,0xb
c00030b8:	74 25                	je     c00030df <get_fileinfo+0x112>
c00030ba:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00030bd:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c00030c1:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c00030c5:	e8 90 ed ff ff       	call   c0001e5a <dbc_2nd>
c00030ca:	85 c0                	test   eax,eax
c00030cc:	74 11                	je     c00030df <get_fileinfo+0x112>
c00030ce:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00030d2:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c00030d7:	c1 e0 08             	shl    eax,0x8
c00030da:	8d 69 02             	lea    ebp,[ecx+0x2]
c00030dd:	09 c2                	or     edx,eax
c00030df:	0f b7 d2             	movzx  edx,dx
c00030e2:	50                   	push   eax
c00030e3:	50                   	push   eax
c00030e4:	68 b5 01 00 00       	push   0x1b5
c00030e9:	52                   	push   edx
c00030ea:	e8 01 2c 00 00       	call   c0005cf0 <ff_oem2uni>
c00030ef:	83 c4 10             	add    esp,0x10
c00030f2:	0f b7 c0             	movzx  eax,ax
c00030f5:	85 c0                	test   eax,eax
c00030f7:	75 04                	jne    c00030fd <get_fileinfo+0x130>
c00030f9:	31 ff                	xor    edi,edi
c00030fb:	eb 20                	jmp    c000311d <get_fileinfo+0x150>
c00030fd:	b9 0c 00 00 00       	mov    ecx,0xc
c0003102:	8d 54 3b 09          	lea    edx,[ebx+edi*1+0x9]
c0003106:	29 f9                	sub    ecx,edi
c0003108:	e8 28 ee ff ff       	call   c0001f35 <put_utf>
c000310d:	0f b6 c0             	movzx  eax,al
c0003110:	85 c0                	test   eax,eax
c0003112:	74 e5                	je     c00030f9 <get_fileinfo+0x12c>
c0003114:	01 c7                	add    edi,eax
c0003116:	89 e9                	mov    ecx,ebp
c0003118:	e9 4b ff ff ff       	jmp    c0003068 <get_fileinfo+0x9b>
c000311d:	c6 44 3b 09 00       	mov    BYTE PTR [ebx+edi*1+0x9],0x0
c0003122:	80 7b 16 00          	cmp    BYTE PTR [ebx+0x16],0x0
c0003126:	75 5f                	jne    c0003187 <get_fileinfo+0x1ba>
c0003128:	85 ff                	test   edi,edi
c000312a:	75 0b                	jne    c0003137 <get_fileinfo+0x16a>
c000312c:	c6 43 16 3f          	mov    BYTE PTR [ebx+0x16],0x3f
c0003130:	ba 01 00 00 00       	mov    edx,0x1
c0003135:	eb 3e                	jmp    c0003175 <get_fileinfo+0x1a8>
c0003137:	bf 08 00 00 00       	mov    edi,0x8
c000313c:	31 d2                	xor    edx,edx
c000313e:	66 0f be 44 13 09    	movsx  ax,BYTE PTR [ebx+edx*1+0x9]
c0003144:	84 c0                	test   al,al
c0003146:	74 2d                	je     c0003175 <get_fileinfo+0x1a8>
c0003148:	66 83 f8 2e          	cmp    ax,0x2e
c000314c:	74 1b                	je     c0003169 <get_fileinfo+0x19c>
c000314e:	8d 48 bf             	lea    ecx,[eax-0x41]
c0003151:	66 83 f9 19          	cmp    cx,0x19
c0003155:	77 17                	ja     c000316e <get_fileinfo+0x1a1>
c0003157:	8b 4e 1c             	mov    ecx,DWORD PTR [esi+0x1c]
c000315a:	8a 49 0c             	mov    cl,BYTE PTR [ecx+0xc]
c000315d:	21 f9                	and    ecx,edi
c000315f:	80 e1 18             	and    cl,0x18
c0003162:	74 0a                	je     c000316e <get_fileinfo+0x1a1>
c0003164:	83 c0 20             	add    eax,0x20
c0003167:	eb 05                	jmp    c000316e <get_fileinfo+0x1a1>
c0003169:	bf 10 00 00 00       	mov    edi,0x10
c000316e:	88 44 13 16          	mov    BYTE PTR [ebx+edx*1+0x16],al
c0003172:	42                   	inc    edx
c0003173:	eb c9                	jmp    c000313e <get_fileinfo+0x171>
c0003175:	c6 44 13 16 00       	mov    BYTE PTR [ebx+edx*1+0x16],0x0
c000317a:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000317d:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c0003181:	75 04                	jne    c0003187 <get_fileinfo+0x1ba>
c0003183:	c6 43 09 00          	mov    BYTE PTR [ebx+0x9],0x0
c0003187:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000318a:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c000318d:	88 43 08             	mov    BYTE PTR [ebx+0x8],al
c0003190:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0003193:	83 c0 1c             	add    eax,0x1c
c0003196:	e8 49 ec ff ff       	call   c0001de4 <ld_dword>
c000319b:	89 03                	mov    DWORD PTR [ebx],eax
c000319d:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00031a0:	83 c0 16             	add    eax,0x16
c00031a3:	e8 2f ec ff ff       	call   c0001dd7 <ld_word>
c00031a8:	66 89 43 06          	mov    WORD PTR [ebx+0x6],ax
c00031ac:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00031af:	83 c0 18             	add    eax,0x18
c00031b2:	e8 20 ec ff ff       	call   c0001dd7 <ld_word>
c00031b7:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c00031bb:	83 c4 1c             	add    esp,0x1c
c00031be:	5b                   	pop    ebx
c00031bf:	5e                   	pop    esi
c00031c0:	5f                   	pop    edi
c00031c1:	5d                   	pop    ebp
c00031c2:	c3                   	ret    

c00031c3 <ld_clust.isra.0>:
c00031c3:	56                   	push   esi
c00031c4:	89 c6                	mov    esi,eax
c00031c6:	53                   	push   ebx
c00031c7:	8d 42 1a             	lea    eax,[edx+0x1a]
c00031ca:	89 d3                	mov    ebx,edx
c00031cc:	e8 06 ec ff ff       	call   c0001dd7 <ld_word>
c00031d1:	0f b7 c8             	movzx  ecx,ax
c00031d4:	89 f0                	mov    eax,esi
c00031d6:	3c 03                	cmp    al,0x3
c00031d8:	75 0d                	jne    c00031e7 <ld_clust.isra.0+0x24>
c00031da:	8d 43 14             	lea    eax,[ebx+0x14]
c00031dd:	e8 f5 eb ff ff       	call   c0001dd7 <ld_word>
c00031e2:	c1 e0 10             	shl    eax,0x10
c00031e5:	09 c1                	or     ecx,eax
c00031e7:	89 c8                	mov    eax,ecx
c00031e9:	5b                   	pop    ebx
c00031ea:	5e                   	pop    esi
c00031eb:	c3                   	ret    

c00031ec <st_clust.isra.1>:
c00031ec:	56                   	push   esi
c00031ed:	89 c6                	mov    esi,eax
c00031ef:	53                   	push   ebx
c00031f0:	89 d3                	mov    ebx,edx
c00031f2:	0f b7 d1             	movzx  edx,cx
c00031f5:	8d 43 1a             	lea    eax,[ebx+0x1a]
c00031f8:	e8 ff eb ff ff       	call   c0001dfc <st_word>
c00031fd:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c0003200:	75 0f                	jne    c0003211 <st_clust.isra.1+0x25>
c0003202:	c1 e9 10             	shr    ecx,0x10
c0003205:	8d 43 14             	lea    eax,[ebx+0x14]
c0003208:	89 ca                	mov    edx,ecx
c000320a:	5b                   	pop    ebx
c000320b:	5e                   	pop    esi
c000320c:	e9 eb eb ff ff       	jmp    c0001dfc <st_word>
c0003211:	5b                   	pop    ebx
c0003212:	5e                   	pop    esi
c0003213:	c3                   	ret    

c0003214 <get_fat.isra.2>:
c0003214:	b9 01 00 00 00       	mov    ecx,0x1
c0003219:	83 fa 01             	cmp    edx,0x1
c000321c:	0f 86 f3 00 00 00    	jbe    c0003315 <get_fat.isra.2+0x101>
c0003222:	3b 50 18             	cmp    edx,DWORD PTR [eax+0x18]
c0003225:	0f 83 ea 00 00 00    	jae    c0003315 <get_fat.isra.2+0x101>
c000322b:	55                   	push   ebp
c000322c:	57                   	push   edi
c000322d:	89 c7                	mov    edi,eax
c000322f:	56                   	push   esi
c0003230:	89 d6                	mov    esi,edx
c0003232:	53                   	push   ebx
c0003233:	83 ec 0c             	sub    esp,0xc
c0003236:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0003239:	83 f8 02             	cmp    eax,0x2
c000323c:	74 78                	je     c00032b6 <get_fat.isra.2+0xa2>
c000323e:	83 f8 03             	cmp    eax,0x3
c0003241:	0f 84 96 00 00 00    	je     c00032dd <get_fat.isra.2+0xc9>
c0003247:	48                   	dec    eax
c0003248:	0f 85 bd 00 00 00    	jne    c000330b <get_fat.isra.2+0xf7>
c000324e:	89 d3                	mov    ebx,edx
c0003250:	89 f8                	mov    eax,edi
c0003252:	d1 eb                	shr    ebx,1
c0003254:	01 d3                	add    ebx,edx
c0003256:	89 da                	mov    edx,ebx
c0003258:	c1 ea 09             	shr    edx,0x9
c000325b:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c000325e:	e8 db f0 ff ff       	call   c000233e <move_window>
c0003263:	85 c0                	test   eax,eax
c0003265:	74 08                	je     c000326f <get_fat.isra.2+0x5b>
c0003267:	83 c9 ff             	or     ecx,0xffffffff
c000326a:	e9 9c 00 00 00       	jmp    c000330b <get_fat.isra.2+0xf7>
c000326f:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0003272:	89 f8                	mov    eax,edi
c0003274:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c000327a:	89 ea                	mov    edx,ebp
c000327c:	8a 5c 1f 34          	mov    bl,BYTE PTR [edi+ebx*1+0x34]
c0003280:	c1 ea 09             	shr    edx,0x9
c0003283:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c0003286:	e8 b3 f0 ff ff       	call   c000233e <move_window>
c000328b:	85 c0                	test   eax,eax
c000328d:	75 d8                	jne    c0003267 <get_fat.isra.2+0x53>
c000328f:	0f b6 c3             	movzx  eax,bl
c0003292:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0003298:	0f b6 5c 2f 34       	movzx  ebx,BYTE PTR [edi+ebp*1+0x34]
c000329d:	c1 e3 08             	shl    ebx,0x8
c00032a0:	09 c3                	or     ebx,eax
c00032a2:	89 d9                	mov    ecx,ebx
c00032a4:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c00032aa:	83 e6 01             	and    esi,0x1
c00032ad:	74 5c                	je     c000330b <get_fat.isra.2+0xf7>
c00032af:	89 d9                	mov    ecx,ebx
c00032b1:	c1 e9 04             	shr    ecx,0x4
c00032b4:	eb 55                	jmp    c000330b <get_fat.isra.2+0xf7>
c00032b6:	c1 ea 08             	shr    edx,0x8
c00032b9:	89 f8                	mov    eax,edi
c00032bb:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c00032be:	e8 7b f0 ff ff       	call   c000233e <move_window>
c00032c3:	85 c0                	test   eax,eax
c00032c5:	75 a0                	jne    c0003267 <get_fat.isra.2+0x53>
c00032c7:	01 f6                	add    esi,esi
c00032c9:	81 e6 fe 01 00 00    	and    esi,0x1fe
c00032cf:	8d 44 37 34          	lea    eax,[edi+esi*1+0x34]
c00032d3:	e8 ff ea ff ff       	call   c0001dd7 <ld_word>
c00032d8:	0f b7 c8             	movzx  ecx,ax
c00032db:	eb 2e                	jmp    c000330b <get_fat.isra.2+0xf7>
c00032dd:	c1 ea 07             	shr    edx,0x7
c00032e0:	89 f8                	mov    eax,edi
c00032e2:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c00032e5:	e8 54 f0 ff ff       	call   c000233e <move_window>
c00032ea:	85 c0                	test   eax,eax
c00032ec:	0f 85 75 ff ff ff    	jne    c0003267 <get_fat.isra.2+0x53>
c00032f2:	c1 e6 02             	shl    esi,0x2
c00032f5:	81 e6 fc 01 00 00    	and    esi,0x1fc
c00032fb:	8d 44 37 34          	lea    eax,[edi+esi*1+0x34]
c00032ff:	e8 e0 ea ff ff       	call   c0001de4 <ld_dword>
c0003304:	25 ff ff ff 0f       	and    eax,0xfffffff
c0003309:	89 c1                	mov    ecx,eax
c000330b:	83 c4 0c             	add    esp,0xc
c000330e:	89 c8                	mov    eax,ecx
c0003310:	5b                   	pop    ebx
c0003311:	5e                   	pop    esi
c0003312:	5f                   	pop    edi
c0003313:	5d                   	pop    ebp
c0003314:	c3                   	ret    
c0003315:	89 c8                	mov    eax,ecx
c0003317:	c3                   	ret    

c0003318 <dir_sdi>:
c0003318:	81 fa ff ff 1f 00    	cmp    edx,0x1fffff
c000331e:	0f 87 b6 00 00 00    	ja     c00033da <dir_sdi+0xc2>
c0003324:	55                   	push   ebp
c0003325:	57                   	push   edi
c0003326:	56                   	push   esi
c0003327:	53                   	push   ebx
c0003328:	89 d3                	mov    ebx,edx
c000332a:	83 ec 1c             	sub    esp,0x1c
c000332d:	f6 c2 1f             	test   dl,0x1f
c0003330:	74 0a                	je     c000333c <dir_sdi+0x24>
c0003332:	b8 02 00 00 00       	mov    eax,0x2
c0003337:	e9 96 00 00 00       	jmp    c00033d2 <dir_sdi+0xba>
c000333c:	89 c6                	mov    esi,eax
c000333e:	8b 38                	mov    edi,DWORD PTR [eax]
c0003340:	89 56 10             	mov    DWORD PTR [esi+0x10],edx
c0003343:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0003346:	85 c9                	test   ecx,ecx
c0003348:	75 23                	jne    c000336d <dir_sdi+0x55>
c000334a:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c000334d:	76 07                	jbe    c0003356 <dir_sdi+0x3e>
c000334f:	8b 47 28             	mov    eax,DWORD PTR [edi+0x28]
c0003352:	85 c0                	test   eax,eax
c0003354:	75 15                	jne    c000336b <dir_sdi+0x53>
c0003356:	89 da                	mov    edx,ebx
c0003358:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c000335c:	c1 ea 05             	shr    edx,0x5
c000335f:	39 c2                	cmp    edx,eax
c0003361:	73 cf                	jae    c0003332 <dir_sdi+0x1a>
c0003363:	8b 47 28             	mov    eax,DWORD PTR [edi+0x28]
c0003366:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c0003369:	eb 3d                	jmp    c00033a8 <dir_sdi+0x90>
c000336b:	89 c1                	mov    ecx,eax
c000336d:	0f b7 6f 0a          	movzx  ebp,WORD PTR [edi+0xa]
c0003371:	c1 e5 09             	shl    ebp,0x9
c0003374:	89 ca                	mov    edx,ecx
c0003376:	39 eb                	cmp    ebx,ebp
c0003378:	72 1c                	jb     c0003396 <dir_sdi+0x7e>
c000337a:	8b 06                	mov    eax,DWORD PTR [esi]
c000337c:	e8 93 fe ff ff       	call   c0003214 <get_fat.isra.2>
c0003381:	89 c1                	mov    ecx,eax
c0003383:	83 f8 ff             	cmp    eax,0xffffffff
c0003386:	74 45                	je     c00033cd <dir_sdi+0xb5>
c0003388:	83 f8 01             	cmp    eax,0x1
c000338b:	76 a5                	jbe    c0003332 <dir_sdi+0x1a>
c000338d:	39 47 18             	cmp    DWORD PTR [edi+0x18],eax
c0003390:	76 a0                	jbe    c0003332 <dir_sdi+0x1a>
c0003392:	29 eb                	sub    ebx,ebp
c0003394:	eb de                	jmp    c0003374 <dir_sdi+0x5c>
c0003396:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000339a:	89 f8                	mov    eax,edi
c000339c:	e8 8d ec ff ff       	call   c000202e <clst2sect>
c00033a1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00033a5:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c00033a8:	8b 56 18             	mov    edx,DWORD PTR [esi+0x18]
c00033ab:	89 4e 14             	mov    DWORD PTR [esi+0x14],ecx
c00033ae:	85 d2                	test   edx,edx
c00033b0:	74 80                	je     c0003332 <dir_sdi+0x1a>
c00033b2:	89 d8                	mov    eax,ebx
c00033b4:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c00033ba:	c1 e8 09             	shr    eax,0x9
c00033bd:	01 d0                	add    eax,edx
c00033bf:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c00033c2:	8d 44 1f 34          	lea    eax,[edi+ebx*1+0x34]
c00033c6:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c00033c9:	31 c0                	xor    eax,eax
c00033cb:	eb 05                	jmp    c00033d2 <dir_sdi+0xba>
c00033cd:	b8 01 00 00 00       	mov    eax,0x1
c00033d2:	83 c4 1c             	add    esp,0x1c
c00033d5:	5b                   	pop    ebx
c00033d6:	5e                   	pop    esi
c00033d7:	5f                   	pop    edi
c00033d8:	5d                   	pop    ebp
c00033d9:	c3                   	ret    
c00033da:	b8 02 00 00 00       	mov    eax,0x2
c00033df:	c3                   	ret    

c00033e0 <create_chain>:
c00033e0:	55                   	push   ebp
c00033e1:	89 c5                	mov    ebp,eax
c00033e3:	57                   	push   edi
c00033e4:	89 d7                	mov    edi,edx
c00033e6:	56                   	push   esi
c00033e7:	53                   	push   ebx
c00033e8:	83 ec 1c             	sub    esp,0x1c
c00033eb:	85 d2                	test   edx,edx
c00033ed:	8b 30                	mov    esi,DWORD PTR [eax]
c00033ef:	75 0e                	jne    c00033ff <create_chain+0x1f>
c00033f1:	8b 4e 10             	mov    ecx,DWORD PTR [esi+0x10]
c00033f4:	85 c9                	test   ecx,ecx
c00033f6:	74 34                	je     c000342c <create_chain+0x4c>
c00033f8:	39 4e 18             	cmp    DWORD PTR [esi+0x18],ecx
c00033fb:	77 34                	ja     c0003431 <create_chain+0x51>
c00033fd:	eb 2d                	jmp    c000342c <create_chain+0x4c>
c00033ff:	89 f0                	mov    eax,esi
c0003401:	e8 0e fe ff ff       	call   c0003214 <get_fat.isra.2>
c0003406:	89 c3                	mov    ebx,eax
c0003408:	83 f8 01             	cmp    eax,0x1
c000340b:	77 0a                	ja     c0003417 <create_chain+0x37>
c000340d:	bb 01 00 00 00       	mov    ebx,0x1
c0003412:	e9 fe 00 00 00       	jmp    c0003515 <create_chain+0x135>
c0003417:	83 f8 ff             	cmp    eax,0xffffffff
c000341a:	0f 84 f2 00 00 00    	je     c0003512 <create_chain+0x132>
c0003420:	89 f9                	mov    ecx,edi
c0003422:	39 46 18             	cmp    DWORD PTR [esi+0x18],eax
c0003425:	76 0a                	jbe    c0003431 <create_chain+0x51>
c0003427:	e9 e9 00 00 00       	jmp    c0003515 <create_chain+0x135>
c000342c:	b9 01 00 00 00       	mov    ecx,0x1
c0003431:	83 7e 14 00          	cmp    DWORD PTR [esi+0x14],0x0
c0003435:	75 07                	jne    c000343e <create_chain+0x5e>
c0003437:	31 db                	xor    ebx,ebx
c0003439:	e9 d7 00 00 00       	jmp    c0003515 <create_chain+0x135>
c000343e:	39 f9                	cmp    ecx,edi
c0003440:	75 46                	jne    c0003488 <create_chain+0xa8>
c0003442:	8d 59 01             	lea    ebx,[ecx+0x1]
c0003445:	39 5e 18             	cmp    DWORD PTR [esi+0x18],ebx
c0003448:	77 05                	ja     c000344f <create_chain+0x6f>
c000344a:	bb 02 00 00 00       	mov    ebx,0x2
c000344f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003453:	89 da                	mov    edx,ebx
c0003455:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0003458:	e8 b7 fd ff ff       	call   c0003214 <get_fat.isra.2>
c000345d:	83 f8 01             	cmp    eax,0x1
c0003460:	74 ab                	je     c000340d <create_chain+0x2d>
c0003462:	83 f8 ff             	cmp    eax,0xffffffff
c0003465:	0f 84 a7 00 00 00    	je     c0003512 <create_chain+0x132>
c000346b:	85 c0                	test   eax,eax
c000346d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003471:	74 11                	je     c0003484 <create_chain+0xa4>
c0003473:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0003476:	83 f8 01             	cmp    eax,0x1
c0003479:	76 0d                	jbe    c0003488 <create_chain+0xa8>
c000347b:	3b 46 18             	cmp    eax,DWORD PTR [esi+0x18]
c000347e:	73 08                	jae    c0003488 <create_chain+0xa8>
c0003480:	89 c1                	mov    ecx,eax
c0003482:	eb 04                	jmp    c0003488 <create_chain+0xa8>
c0003484:	85 db                	test   ebx,ebx
c0003486:	75 3d                	jne    c00034c5 <create_chain+0xe5>
c0003488:	89 cb                	mov    ebx,ecx
c000348a:	43                   	inc    ebx
c000348b:	39 5e 18             	cmp    DWORD PTR [esi+0x18],ebx
c000348e:	77 0a                	ja     c000349a <create_chain+0xba>
c0003490:	83 f9 01             	cmp    ecx,0x1
c0003493:	76 a2                	jbe    c0003437 <create_chain+0x57>
c0003495:	bb 02 00 00 00       	mov    ebx,0x2
c000349a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000349e:	89 da                	mov    edx,ebx
c00034a0:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00034a3:	e8 6c fd ff ff       	call   c0003214 <get_fat.isra.2>
c00034a8:	85 c0                	test   eax,eax
c00034aa:	74 19                	je     c00034c5 <create_chain+0xe5>
c00034ac:	83 f8 01             	cmp    eax,0x1
c00034af:	0f 84 58 ff ff ff    	je     c000340d <create_chain+0x2d>
c00034b5:	40                   	inc    eax
c00034b6:	74 5a                	je     c0003512 <create_chain+0x132>
c00034b8:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00034bc:	39 cb                	cmp    ebx,ecx
c00034be:	75 ca                	jne    c000348a <create_chain+0xaa>
c00034c0:	e9 72 ff ff ff       	jmp    c0003437 <create_chain+0x57>
c00034c5:	83 c9 ff             	or     ecx,0xffffffff
c00034c8:	89 da                	mov    edx,ebx
c00034ca:	89 f0                	mov    eax,esi
c00034cc:	e8 b1 f2 ff ff       	call   c0002782 <put_fat>
c00034d1:	85 c0                	test   eax,eax
c00034d3:	75 36                	jne    c000350b <create_chain+0x12b>
c00034d5:	85 ff                	test   edi,edi
c00034d7:	75 16                	jne    c00034ef <create_chain+0x10f>
c00034d9:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00034dc:	8b 7e 18             	mov    edi,DWORD PTR [esi+0x18]
c00034df:	89 5e 10             	mov    DWORD PTR [esi+0x10],ebx
c00034e2:	8d 57 fe             	lea    edx,[edi-0x2]
c00034e5:	39 d0                	cmp    eax,edx
c00034e7:	77 17                	ja     c0003500 <create_chain+0x120>
c00034e9:	48                   	dec    eax
c00034ea:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c00034ed:	eb 11                	jmp    c0003500 <create_chain+0x120>
c00034ef:	89 d9                	mov    ecx,ebx
c00034f1:	89 fa                	mov    edx,edi
c00034f3:	89 f0                	mov    eax,esi
c00034f5:	e8 88 f2 ff ff       	call   c0002782 <put_fat>
c00034fa:	85 c0                	test   eax,eax
c00034fc:	74 db                	je     c00034d9 <create_chain+0xf9>
c00034fe:	eb 0b                	jmp    c000350b <create_chain+0x12b>
c0003500:	8a 46 04             	mov    al,BYTE PTR [esi+0x4]
c0003503:	83 c8 01             	or     eax,0x1
c0003506:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c0003509:	eb 0a                	jmp    c0003515 <create_chain+0x135>
c000350b:	48                   	dec    eax
c000350c:	0f 85 fb fe ff ff    	jne    c000340d <create_chain+0x2d>
c0003512:	83 cb ff             	or     ebx,0xffffffff
c0003515:	83 c4 1c             	add    esp,0x1c
c0003518:	89 d8                	mov    eax,ebx
c000351a:	5b                   	pop    ebx
c000351b:	5e                   	pop    esi
c000351c:	5f                   	pop    edi
c000351d:	5d                   	pop    ebp
c000351e:	c3                   	ret    

c000351f <remove_chain>:
c000351f:	55                   	push   ebp
c0003520:	57                   	push   edi
c0003521:	56                   	push   esi
c0003522:	89 d6                	mov    esi,edx
c0003524:	53                   	push   ebx
c0003525:	83 ec 0c             	sub    esp,0xc
c0003528:	83 fa 01             	cmp    edx,0x1
c000352b:	8b 18                	mov    ebx,DWORD PTR [eax]
c000352d:	76 6a                	jbe    c0003599 <remove_chain+0x7a>
c000352f:	39 53 18             	cmp    DWORD PTR [ebx+0x18],edx
c0003532:	76 65                	jbe    c0003599 <remove_chain+0x7a>
c0003534:	89 c5                	mov    ebp,eax
c0003536:	89 ca                	mov    edx,ecx
c0003538:	85 c9                	test   ecx,ecx
c000353a:	74 0e                	je     c000354a <remove_chain+0x2b>
c000353c:	83 c9 ff             	or     ecx,0xffffffff
c000353f:	89 d8                	mov    eax,ebx
c0003541:	e8 3c f2 ff ff       	call   c0002782 <put_fat>
c0003546:	85 c0                	test   eax,eax
c0003548:	75 5b                	jne    c00035a5 <remove_chain+0x86>
c000354a:	89 f2                	mov    edx,esi
c000354c:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000354f:	e8 c0 fc ff ff       	call   c0003214 <get_fat.isra.2>
c0003554:	89 c7                	mov    edi,eax
c0003556:	85 c0                	test   eax,eax
c0003558:	75 04                	jne    c000355e <remove_chain+0x3f>
c000355a:	31 c0                	xor    eax,eax
c000355c:	eb 47                	jmp    c00035a5 <remove_chain+0x86>
c000355e:	83 f8 01             	cmp    eax,0x1
c0003561:	74 36                	je     c0003599 <remove_chain+0x7a>
c0003563:	83 f8 ff             	cmp    eax,0xffffffff
c0003566:	74 38                	je     c00035a0 <remove_chain+0x81>
c0003568:	31 c9                	xor    ecx,ecx
c000356a:	89 f2                	mov    edx,esi
c000356c:	89 d8                	mov    eax,ebx
c000356e:	e8 0f f2 ff ff       	call   c0002782 <put_fat>
c0003573:	85 c0                	test   eax,eax
c0003575:	75 2e                	jne    c00035a5 <remove_chain+0x86>
c0003577:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000357a:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000357d:	8d 4a fe             	lea    ecx,[edx-0x2]
c0003580:	39 c8                	cmp    eax,ecx
c0003582:	73 0d                	jae    c0003591 <remove_chain+0x72>
c0003584:	40                   	inc    eax
c0003585:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0003588:	8a 43 04             	mov    al,BYTE PTR [ebx+0x4]
c000358b:	83 c8 01             	or     eax,0x1
c000358e:	88 43 04             	mov    BYTE PTR [ebx+0x4],al
c0003591:	89 fe                	mov    esi,edi
c0003593:	39 fa                	cmp    edx,edi
c0003595:	77 b3                	ja     c000354a <remove_chain+0x2b>
c0003597:	eb c1                	jmp    c000355a <remove_chain+0x3b>
c0003599:	b8 02 00 00 00       	mov    eax,0x2
c000359e:	eb 05                	jmp    c00035a5 <remove_chain+0x86>
c00035a0:	b8 01 00 00 00       	mov    eax,0x1
c00035a5:	83 c4 0c             	add    esp,0xc
c00035a8:	5b                   	pop    ebx
c00035a9:	5e                   	pop    esi
c00035aa:	5f                   	pop    edi
c00035ab:	5d                   	pop    ebp
c00035ac:	c3                   	ret    

c00035ad <dir_next>:
c00035ad:	55                   	push   ebp
c00035ae:	57                   	push   edi
c00035af:	56                   	push   esi
c00035b0:	53                   	push   ebx
c00035b1:	83 ec 1c             	sub    esp,0x1c
c00035b4:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c00035b7:	8b 28                	mov    ebp,DWORD PTR [eax]
c00035b9:	83 c7 20             	add    edi,0x20
c00035bc:	81 ff ff ff 1f 00    	cmp    edi,0x1fffff
c00035c2:	76 07                	jbe    c00035cb <dir_next+0x1e>
c00035c4:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c00035cb:	8b 70 18             	mov    esi,DWORD PTR [eax+0x18]
c00035ce:	b9 04 00 00 00       	mov    ecx,0x4
c00035d3:	85 f6                	test   esi,esi
c00035d5:	0f 84 cd 00 00 00    	je     c00036a8 <dir_next+0xfb>
c00035db:	89 c3                	mov    ebx,eax
c00035dd:	89 d1                	mov    ecx,edx
c00035df:	89 f8                	mov    eax,edi
c00035e1:	25 ff 01 00 00       	and    eax,0x1ff
c00035e6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00035ea:	0f 85 a8 00 00 00    	jne    c0003698 <dir_next+0xeb>
c00035f0:	46                   	inc    esi
c00035f1:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00035f4:	89 73 18             	mov    DWORD PTR [ebx+0x18],esi
c00035f7:	85 d2                	test   edx,edx
c00035f9:	75 22                	jne    c000361d <dir_next+0x70>
c00035fb:	89 fa                	mov    edx,edi
c00035fd:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c0003601:	c1 ea 05             	shr    edx,0x5
c0003604:	39 c2                	cmp    edx,eax
c0003606:	0f 82 8c 00 00 00    	jb     c0003698 <dir_next+0xeb>
c000360c:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0003613:	b9 04 00 00 00       	mov    ecx,0x4
c0003618:	e9 8b 00 00 00       	jmp    c00036a8 <dir_next+0xfb>
c000361d:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0003621:	89 fe                	mov    esi,edi
c0003623:	48                   	dec    eax
c0003624:	c1 ee 09             	shr    esi,0x9
c0003627:	85 f0                	test   eax,esi
c0003629:	75 6d                	jne    c0003698 <dir_next+0xeb>
c000362b:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000362f:	89 e8                	mov    eax,ebp
c0003631:	e8 de fb ff ff       	call   c0003214 <get_fat.isra.2>
c0003636:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000363a:	89 c6                	mov    esi,eax
c000363c:	83 f8 01             	cmp    eax,0x1
c000363f:	77 07                	ja     c0003648 <dir_next+0x9b>
c0003641:	b9 02 00 00 00       	mov    ecx,0x2
c0003646:	eb 60                	jmp    c00036a8 <dir_next+0xfb>
c0003648:	83 f8 ff             	cmp    eax,0xffffffff
c000364b:	75 07                	jne    c0003654 <dir_next+0xa7>
c000364d:	b9 01 00 00 00       	mov    ecx,0x1
c0003652:	eb 54                	jmp    c00036a8 <dir_next+0xfb>
c0003654:	39 45 18             	cmp    DWORD PTR [ebp+0x18],eax
c0003657:	77 30                	ja     c0003689 <dir_next+0xdc>
c0003659:	85 c9                	test   ecx,ecx
c000365b:	74 af                	je     c000360c <dir_next+0x5f>
c000365d:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0003660:	89 d8                	mov    eax,ebx
c0003662:	e8 79 fd ff ff       	call   c00033e0 <create_chain>
c0003667:	b9 07 00 00 00       	mov    ecx,0x7
c000366c:	89 c6                	mov    esi,eax
c000366e:	85 c0                	test   eax,eax
c0003670:	74 36                	je     c00036a8 <dir_next+0xfb>
c0003672:	83 f8 01             	cmp    eax,0x1
c0003675:	74 ca                	je     c0003641 <dir_next+0x94>
c0003677:	83 f8 ff             	cmp    eax,0xffffffff
c000367a:	74 d1                	je     c000364d <dir_next+0xa0>
c000367c:	89 c2                	mov    edx,eax
c000367e:	89 e8                	mov    eax,ebp
c0003680:	e8 54 f2 ff ff       	call   c00028d9 <dir_clear>
c0003685:	85 c0                	test   eax,eax
c0003687:	75 c4                	jne    c000364d <dir_next+0xa0>
c0003689:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c000368c:	89 f2                	mov    edx,esi
c000368e:	89 e8                	mov    eax,ebp
c0003690:	e8 99 e9 ff ff       	call   c000202e <clst2sect>
c0003695:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0003698:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000369c:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c000369f:	8d 44 05 34          	lea    eax,[ebp+eax*1+0x34]
c00036a3:	31 c9                	xor    ecx,ecx
c00036a5:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c00036a8:	83 c4 1c             	add    esp,0x1c
c00036ab:	89 c8                	mov    eax,ecx
c00036ad:	5b                   	pop    ebx
c00036ae:	5e                   	pop    esi
c00036af:	5f                   	pop    edi
c00036b0:	5d                   	pop    ebp
c00036b1:	c3                   	ret    

c00036b2 <dir_alloc>:
c00036b2:	55                   	push   ebp
c00036b3:	89 c5                	mov    ebp,eax
c00036b5:	57                   	push   edi
c00036b6:	89 d7                	mov    edi,edx
c00036b8:	56                   	push   esi
c00036b9:	31 d2                	xor    edx,edx
c00036bb:	53                   	push   ebx
c00036bc:	83 ec 0c             	sub    esp,0xc
c00036bf:	8b 30                	mov    esi,DWORD PTR [eax]
c00036c1:	e8 52 fc ff ff       	call   c0003318 <dir_sdi>
c00036c6:	85 c0                	test   eax,eax
c00036c8:	75 3b                	jne    c0003705 <dir_alloc+0x53>
c00036ca:	31 db                	xor    ebx,ebx
c00036cc:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c00036cf:	89 f0                	mov    eax,esi
c00036d1:	e8 68 ec ff ff       	call   c000233e <move_window>
c00036d6:	85 c0                	test   eax,eax
c00036d8:	75 2b                	jne    c0003705 <dir_alloc+0x53>
c00036da:	8b 55 1c             	mov    edx,DWORD PTR [ebp+0x1c]
c00036dd:	0f b6 12             	movzx  edx,BYTE PTR [edx]
c00036e0:	85 d2                	test   edx,edx
c00036e2:	74 08                	je     c00036ec <dir_alloc+0x3a>
c00036e4:	81 fa e5 00 00 00    	cmp    edx,0xe5
c00036ea:	75 07                	jne    c00036f3 <dir_alloc+0x41>
c00036ec:	43                   	inc    ebx
c00036ed:	39 fb                	cmp    ebx,edi
c00036ef:	75 04                	jne    c00036f5 <dir_alloc+0x43>
c00036f1:	eb 1c                	jmp    c000370f <dir_alloc+0x5d>
c00036f3:	31 db                	xor    ebx,ebx
c00036f5:	ba 01 00 00 00       	mov    edx,0x1
c00036fa:	89 e8                	mov    eax,ebp
c00036fc:	e8 ac fe ff ff       	call   c00035ad <dir_next>
c0003701:	85 c0                	test   eax,eax
c0003703:	74 c7                	je     c00036cc <dir_alloc+0x1a>
c0003705:	83 f8 04             	cmp    eax,0x4
c0003708:	75 05                	jne    c000370f <dir_alloc+0x5d>
c000370a:	b8 07 00 00 00       	mov    eax,0x7
c000370f:	83 c4 0c             	add    esp,0xc
c0003712:	5b                   	pop    ebx
c0003713:	5e                   	pop    esi
c0003714:	5f                   	pop    edi
c0003715:	5d                   	pop    ebp
c0003716:	c3                   	ret    

c0003717 <dir_read>:
c0003717:	55                   	push   ebp
c0003718:	57                   	push   edi
c0003719:	bf ff ff ff ff       	mov    edi,0xffffffff
c000371e:	56                   	push   esi
c000371f:	be 04 00 00 00       	mov    esi,0x4
c0003724:	53                   	push   ebx
c0003725:	89 c3                	mov    ebx,eax
c0003727:	83 ec 1c             	sub    esp,0x1c
c000372a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000372e:	8b 28                	mov    ebp,DWORD PTR [eax]
c0003730:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c0003735:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003738:	85 d2                	test   edx,edx
c000373a:	0f 84 e3 00 00 00    	je     c0003823 <dir_read+0x10c>
c0003740:	89 e8                	mov    eax,ebp
c0003742:	e8 f7 eb ff ff       	call   c000233e <move_window>
c0003747:	89 c6                	mov    esi,eax
c0003749:	85 c0                	test   eax,eax
c000374b:	0f 85 dd 00 00 00    	jne    c000382e <dir_read+0x117>
c0003751:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003754:	0f b6 02             	movzx  eax,BYTE PTR [edx]
c0003757:	88 04 24             	mov    BYTE PTR [esp],al
c000375a:	85 c0                	test   eax,eax
c000375c:	0f 84 c7 00 00 00    	je     c0003829 <dir_read+0x112>
c0003762:	8a 4a 0b             	mov    cl,BYTE PTR [edx+0xb]
c0003765:	83 e1 3f             	and    ecx,0x3f
c0003768:	83 f8 2e             	cmp    eax,0x2e
c000376b:	88 4b 06             	mov    BYTE PTR [ebx+0x6],cl
c000376e:	0f 84 95 00 00 00    	je     c0003809 <dir_read+0xf2>
c0003774:	3d e5 00 00 00       	cmp    eax,0xe5
c0003779:	0f 84 8a 00 00 00    	je     c0003809 <dir_read+0xf2>
c000377f:	0f b6 c9             	movzx  ecx,cl
c0003782:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0003786:	83 e1 df             	and    ecx,0xffffffdf
c0003789:	83 f9 08             	cmp    ecx,0x8
c000378c:	0f 94 c1             	sete   cl
c000378f:	0f b6 c9             	movzx  ecx,cl
c0003792:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c0003796:	75 71                	jne    c0003809 <dir_read+0xf2>
c0003798:	83 7c 24 08 0f       	cmp    DWORD PTR [esp+0x8],0xf
c000379d:	75 4a                	jne    c00037e9 <dir_read+0xd2>
c000379f:	f6 04 24 40          	test   BYTE PTR [esp],0x40
c00037a3:	74 16                	je     c00037bb <dir_read+0xa4>
c00037a5:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c00037a8:	81 24 24 bf 00 00 00 	and    DWORD PTR [esp],0xbf
c00037af:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c00037b3:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00037b6:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00037b9:	eb 0e                	jmp    c00037c9 <dir_read+0xb2>
c00037bb:	89 f9                	mov    ecx,edi
c00037bd:	bf ff ff ff ff       	mov    edi,0xffffffff
c00037c2:	0f b6 c9             	movzx  ecx,cl
c00037c5:	39 c1                	cmp    ecx,eax
c00037c7:	75 45                	jne    c000380e <dir_read+0xf7>
c00037c9:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c00037cd:	bf ff ff ff ff       	mov    edi,0xffffffff
c00037d2:	3a 42 0d             	cmp    al,BYTE PTR [edx+0xd]
c00037d5:	75 37                	jne    c000380e <dir_read+0xf7>
c00037d7:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00037da:	e8 6c e8 ff ff       	call   c000204b <pick_lfn>
c00037df:	85 c0                	test   eax,eax
c00037e1:	74 2b                	je     c000380e <dir_read+0xf7>
c00037e3:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00037e6:	4f                   	dec    edi
c00037e7:	eb 25                	jmp    c000380e <dir_read+0xf7>
c00037e9:	89 f8                	mov    eax,edi
c00037eb:	84 c0                	test   al,al
c00037ed:	75 11                	jne    c0003800 <dir_read+0xe9>
c00037ef:	89 d0                	mov    eax,edx
c00037f1:	e8 32 ea ff ff       	call   c0002228 <sum_sfn>
c00037f6:	38 44 24 07          	cmp    BYTE PTR [esp+0x7],al
c00037fa:	75 04                	jne    c0003800 <dir_read+0xe9>
c00037fc:	31 f6                	xor    esi,esi
c00037fe:	eb 35                	jmp    c0003835 <dir_read+0x11e>
c0003800:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c0003807:	eb 2c                	jmp    c0003835 <dir_read+0x11e>
c0003809:	bf ff ff ff ff       	mov    edi,0xffffffff
c000380e:	31 d2                	xor    edx,edx
c0003810:	89 d8                	mov    eax,ebx
c0003812:	e8 96 fd ff ff       	call   c00035ad <dir_next>
c0003817:	89 c6                	mov    esi,eax
c0003819:	85 c0                	test   eax,eax
c000381b:	0f 84 14 ff ff ff    	je     c0003735 <dir_read+0x1e>
c0003821:	eb 0b                	jmp    c000382e <dir_read+0x117>
c0003823:	85 f6                	test   esi,esi
c0003825:	74 d5                	je     c00037fc <dir_read+0xe5>
c0003827:	eb 05                	jmp    c000382e <dir_read+0x117>
c0003829:	be 04 00 00 00       	mov    esi,0x4
c000382e:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0003835:	83 c4 1c             	add    esp,0x1c
c0003838:	89 f0                	mov    eax,esi
c000383a:	5b                   	pop    ebx
c000383b:	5e                   	pop    esi
c000383c:	5f                   	pop    edi
c000383d:	5d                   	pop    ebp
c000383e:	c3                   	ret    

c000383f <dir_remove>:
c000383f:	57                   	push   edi
c0003840:	56                   	push   esi
c0003841:	53                   	push   ebx
c0003842:	89 c3                	mov    ebx,eax
c0003844:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0003847:	8b 30                	mov    esi,DWORD PTR [eax]
c0003849:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c000384c:	83 fa ff             	cmp    edx,0xffffffff
c000384f:	74 09                	je     c000385a <dir_remove+0x1b>
c0003851:	e8 c2 fa ff ff       	call   c0003318 <dir_sdi>
c0003856:	85 c0                	test   eax,eax
c0003858:	75 34                	jne    c000388e <dir_remove+0x4f>
c000385a:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000385d:	89 f0                	mov    eax,esi
c000385f:	e8 da ea ff ff       	call   c000233e <move_window>
c0003864:	85 c0                	test   eax,eax
c0003866:	75 1c                	jne    c0003884 <dir_remove+0x45>
c0003868:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000386b:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c000386e:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0003872:	39 7b 10             	cmp    DWORD PTR [ebx+0x10],edi
c0003875:	73 17                	jae    c000388e <dir_remove+0x4f>
c0003877:	31 d2                	xor    edx,edx
c0003879:	89 d8                	mov    eax,ebx
c000387b:	e8 2d fd ff ff       	call   c00035ad <dir_next>
c0003880:	85 c0                	test   eax,eax
c0003882:	74 d6                	je     c000385a <dir_remove+0x1b>
c0003884:	83 f8 04             	cmp    eax,0x4
c0003887:	75 05                	jne    c000388e <dir_remove+0x4f>
c0003889:	b8 02 00 00 00       	mov    eax,0x2
c000388e:	5b                   	pop    ebx
c000388f:	5e                   	pop    esi
c0003890:	5f                   	pop    edi
c0003891:	c3                   	ret    

c0003892 <dir_find>:
c0003892:	55                   	push   ebp
c0003893:	31 d2                	xor    edx,edx
c0003895:	57                   	push   edi
c0003896:	56                   	push   esi
c0003897:	53                   	push   ebx
c0003898:	89 c3                	mov    ebx,eax
c000389a:	83 ec 1c             	sub    esp,0x1c
c000389d:	8b 00                	mov    eax,DWORD PTR [eax]
c000389f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00038a3:	89 d8                	mov    eax,ebx
c00038a5:	e8 6e fa ff ff       	call   c0003318 <dir_sdi>
c00038aa:	89 c6                	mov    esi,eax
c00038ac:	85 c0                	test   eax,eax
c00038ae:	0f 85 1d 01 00 00    	jne    c00039d1 <dir_find+0x13f>
c00038b4:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c00038bb:	c6 44 24 0b ff       	mov    BYTE PTR [esp+0xb],0xff
c00038c0:	bf ff ff ff ff       	mov    edi,0xffffffff
c00038c5:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00038c8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00038cc:	e8 6d ea ff ff       	call   c000233e <move_window>
c00038d1:	89 c6                	mov    esi,eax
c00038d3:	85 c0                	test   eax,eax
c00038d5:	0f 85 f6 00 00 00    	jne    c00039d1 <dir_find+0x13f>
c00038db:	8b 6b 1c             	mov    ebp,DWORD PTR [ebx+0x1c]
c00038de:	0f b6 4d 00          	movzx  ecx,BYTE PTR [ebp+0x0]
c00038e2:	88 4c 24 04          	mov    BYTE PTR [esp+0x4],cl
c00038e6:	85 c9                	test   ecx,ecx
c00038e8:	0f 84 de 00 00 00    	je     c00039cc <dir_find+0x13a>
c00038ee:	8a 55 0b             	mov    dl,BYTE PTR [ebp+0xb]
c00038f1:	89 d0                	mov    eax,edx
c00038f3:	83 e0 3f             	and    eax,0x3f
c00038f6:	81 f9 e5 00 00 00    	cmp    ecx,0xe5
c00038fc:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c00038ff:	0f 84 a6 00 00 00    	je     c00039ab <dir_find+0x119>
c0003905:	80 e2 08             	and    dl,0x8
c0003908:	0f b6 c0             	movzx  eax,al
c000390b:	74 0b                	je     c0003918 <dir_find+0x86>
c000390d:	83 f8 0f             	cmp    eax,0xf
c0003910:	0f 85 95 00 00 00    	jne    c00039ab <dir_find+0x119>
c0003916:	eb 05                	jmp    c000391d <dir_find+0x8b>
c0003918:	83 f8 0f             	cmp    eax,0xf
c000391b:	75 62                	jne    c000397f <dir_find+0xed>
c000391d:	f6 43 2b 40          	test   BYTE PTR [ebx+0x2b],0x40
c0003921:	0f 85 90 00 00 00    	jne    c00039b7 <dir_find+0x125>
c0003927:	f6 44 24 04 40       	test   BYTE PTR [esp+0x4],0x40
c000392c:	74 17                	je     c0003945 <dir_find+0xb3>
c000392e:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c0003931:	81 64 24 04 bf 00 00 00 	and    DWORD PTR [esp+0x4],0xbf
c0003939:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000393d:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0003940:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0003943:	eb 13                	jmp    c0003958 <dir_find+0xc6>
c0003945:	89 f8                	mov    eax,edi
c0003947:	bf ff ff ff ff       	mov    edi,0xffffffff
c000394c:	0f b6 d0             	movzx  edx,al
c000394f:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0003954:	39 c2                	cmp    edx,eax
c0003956:	75 5f                	jne    c00039b7 <dir_find+0x125>
c0003958:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c000395c:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003961:	3a 45 0d             	cmp    al,BYTE PTR [ebp+0xd]
c0003964:	75 51                	jne    c00039b7 <dir_find+0x125>
c0003966:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000396a:	89 ea                	mov    edx,ebp
c000396c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000396f:	e8 37 f3 ff ff       	call   c0002cab <cmp_lfn>
c0003974:	85 c0                	test   eax,eax
c0003976:	74 3f                	je     c00039b7 <dir_find+0x125>
c0003978:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c000397c:	4f                   	dec    edi
c000397d:	eb 38                	jmp    c00039b7 <dir_find+0x125>
c000397f:	89 f8                	mov    eax,edi
c0003981:	84 c0                	test   al,al
c0003983:	75 0d                	jne    c0003992 <dir_find+0x100>
c0003985:	89 e8                	mov    eax,ebp
c0003987:	e8 9c e8 ff ff       	call   c0002228 <sum_sfn>
c000398c:	38 44 24 0b          	cmp    BYTE PTR [esp+0xb],al
c0003990:	74 3f                	je     c00039d1 <dir_find+0x13f>
c0003992:	f6 43 2b 01          	test   BYTE PTR [ebx+0x2b],0x1
c0003996:	75 13                	jne    c00039ab <dir_find+0x119>
c0003998:	8d 53 20             	lea    edx,[ebx+0x20]
c000399b:	b9 0b 00 00 00       	mov    ecx,0xb
c00039a0:	89 e8                	mov    eax,ebp
c00039a2:	e8 7c e4 ff ff       	call   c0001e23 <mem_cmp>
c00039a7:	85 c0                	test   eax,eax
c00039a9:	74 26                	je     c00039d1 <dir_find+0x13f>
c00039ab:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c00039b2:	bf ff ff ff ff       	mov    edi,0xffffffff
c00039b7:	31 d2                	xor    edx,edx
c00039b9:	89 d8                	mov    eax,ebx
c00039bb:	e8 ed fb ff ff       	call   c00035ad <dir_next>
c00039c0:	89 c6                	mov    esi,eax
c00039c2:	85 c0                	test   eax,eax
c00039c4:	0f 84 fb fe ff ff    	je     c00038c5 <dir_find+0x33>
c00039ca:	eb 05                	jmp    c00039d1 <dir_find+0x13f>
c00039cc:	be 04 00 00 00       	mov    esi,0x4
c00039d1:	83 c4 1c             	add    esp,0x1c
c00039d4:	89 f0                	mov    eax,esi
c00039d6:	5b                   	pop    ebx
c00039d7:	5e                   	pop    esi
c00039d8:	5f                   	pop    edi
c00039d9:	5d                   	pop    ebp
c00039da:	c3                   	ret    

c00039db <follow_path>:
c00039db:	56                   	push   esi
c00039dc:	53                   	push   ebx
c00039dd:	89 c3                	mov    ebx,eax
c00039df:	83 ec 14             	sub    esp,0x14
c00039e2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00039e6:	8b 30                	mov    esi,DWORD PTR [eax]
c00039e8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00039ec:	0f be 10             	movsx  edx,BYTE PTR [eax]
c00039ef:	83 fa 5c             	cmp    edx,0x5c
c00039f2:	75 07                	jne    c00039fb <follow_path+0x20>
c00039f4:	40                   	inc    eax
c00039f5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00039f9:	eb ed                	jmp    c00039e8 <follow_path+0xd>
c00039fb:	83 fa 2f             	cmp    edx,0x2f
c00039fe:	74 f4                	je     c00039f4 <follow_path+0x19>
c0003a00:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0003a07:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0003a0a:	77 3e                	ja     c0003a4a <follow_path+0x6f>
c0003a0c:	c6 43 2b 80          	mov    BYTE PTR [ebx+0x2b],0x80
c0003a10:	31 d2                	xor    edx,edx
c0003a12:	89 d8                	mov    eax,ebx
c0003a14:	e8 ff f8 ff ff       	call   c0003318 <dir_sdi>
c0003a19:	eb 4f                	jmp    c0003a6a <follow_path+0x8f>
c0003a1b:	89 d8                	mov    eax,ebx
c0003a1d:	e8 70 fe ff ff       	call   c0003892 <dir_find>
c0003a22:	8a 53 2b             	mov    dl,BYTE PTR [ebx+0x2b]
c0003a25:	85 c0                	test   eax,eax
c0003a27:	75 32                	jne    c0003a5b <follow_path+0x80>
c0003a29:	80 e2 04             	and    dl,0x4
c0003a2c:	75 3c                	jne    c0003a6a <follow_path+0x8f>
c0003a2e:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0003a32:	74 31                	je     c0003a65 <follow_path+0x8a>
c0003a34:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0003a37:	25 ff 01 00 00       	and    eax,0x1ff
c0003a3c:	8d 54 06 34          	lea    edx,[esi+eax*1+0x34]
c0003a40:	8a 06                	mov    al,BYTE PTR [esi]
c0003a42:	e8 7c f7 ff ff       	call   c00031c3 <ld_clust.isra.0>
c0003a47:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003a4a:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0003a4e:	89 d8                	mov    eax,ebx
c0003a50:	e8 7f ef ff ff       	call   c00029d4 <create_name>
c0003a55:	85 c0                	test   eax,eax
c0003a57:	74 c2                	je     c0003a1b <follow_path+0x40>
c0003a59:	eb 0f                	jmp    c0003a6a <follow_path+0x8f>
c0003a5b:	83 f8 04             	cmp    eax,0x4
c0003a5e:	75 0a                	jne    c0003a6a <follow_path+0x8f>
c0003a60:	80 e2 04             	and    dl,0x4
c0003a63:	75 05                	jne    c0003a6a <follow_path+0x8f>
c0003a65:	b8 05 00 00 00       	mov    eax,0x5
c0003a6a:	83 c4 14             	add    esp,0x14
c0003a6d:	5b                   	pop    ebx
c0003a6e:	5e                   	pop    esi
c0003a6f:	c3                   	ret    

c0003a70 <dir_register>:
c0003a70:	55                   	push   ebp
c0003a71:	57                   	push   edi
c0003a72:	56                   	push   esi
c0003a73:	be 06 00 00 00       	mov    esi,0x6
c0003a78:	53                   	push   ebx
c0003a79:	83 ec 2c             	sub    esp,0x2c
c0003a7c:	8a 50 2b             	mov    dl,BYTE PTR [eax+0x2b]
c0003a7f:	80 e2 a0             	and    dl,0xa0
c0003a82:	0f 85 66 01 00 00    	jne    c0003bee <dir_register+0x17e>
c0003a88:	8b 38                	mov    edi,DWORD PTR [eax]
c0003a8a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0003a92:	8b 57 0c             	mov    edx,DWORD PTR [edi+0xc]
c0003a95:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003a99:	66 83 3c 4a 00       	cmp    WORD PTR [edx+ecx*2],0x0
c0003a9e:	74 06                	je     c0003aa6 <dir_register+0x36>
c0003aa0:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0003aa4:	eb ef                	jmp    c0003a95 <dir_register+0x25>
c0003aa6:	89 c3                	mov    ebx,eax
c0003aa8:	b9 0c 00 00 00       	mov    ecx,0xc
c0003aad:	8d 40 20             	lea    eax,[eax+0x20]
c0003ab0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003ab4:	89 c2                	mov    edx,eax
c0003ab6:	8d 44 24 14          	lea    eax,[esp+0x14]
c0003aba:	e8 44 e3 ff ff       	call   c0001e03 <mem_cpy>
c0003abf:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c0003ac4:	74 48                	je     c0003b0e <dir_register+0x9e>
c0003ac6:	c6 43 2b 40          	mov    BYTE PTR [ebx+0x2b],0x40
c0003aca:	bd 01 00 00 00       	mov    ebp,0x1
c0003acf:	8b 4f 0c             	mov    ecx,DWORD PTR [edi+0xc]
c0003ad2:	55                   	push   ebp
c0003ad3:	8d 54 24 18          	lea    edx,[esp+0x18]
c0003ad7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003adb:	e8 86 e6 ff ff       	call   c0002166 <gen_numname>
c0003ae0:	58                   	pop    eax
c0003ae1:	89 d8                	mov    eax,ebx
c0003ae3:	e8 aa fd ff ff       	call   c0003892 <dir_find>
c0003ae8:	89 c6                	mov    esi,eax
c0003aea:	85 c0                	test   eax,eax
c0003aec:	75 10                	jne    c0003afe <dir_register+0x8e>
c0003aee:	45                   	inc    ebp
c0003aef:	83 fd 64             	cmp    ebp,0x64
c0003af2:	75 db                	jne    c0003acf <dir_register+0x5f>
c0003af4:	be 07 00 00 00       	mov    esi,0x7
c0003af9:	e9 f0 00 00 00       	jmp    c0003bee <dir_register+0x17e>
c0003afe:	83 f8 04             	cmp    eax,0x4
c0003b01:	0f 85 e7 00 00 00    	jne    c0003bee <dir_register+0x17e>
c0003b07:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0003b0b:	88 43 2b             	mov    BYTE PTR [ebx+0x2b],al
c0003b0e:	bd 01 00 00 00       	mov    ebp,0x1
c0003b13:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c0003b18:	74 13                	je     c0003b2d <dir_register+0xbd>
c0003b1a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003b1e:	b9 0d 00 00 00       	mov    ecx,0xd
c0003b23:	83 c0 0c             	add    eax,0xc
c0003b26:	31 d2                	xor    edx,edx
c0003b28:	f7 f1                	div    ecx
c0003b2a:	8d 68 01             	lea    ebp,[eax+0x1]
c0003b2d:	89 ea                	mov    edx,ebp
c0003b2f:	89 d8                	mov    eax,ebx
c0003b31:	e8 7c fb ff ff       	call   c00036b2 <dir_alloc>
c0003b36:	89 c6                	mov    esi,eax
c0003b38:	85 c0                	test   eax,eax
c0003b3a:	0f 85 ae 00 00 00    	jne    c0003bee <dir_register+0x17e>
c0003b40:	4d                   	dec    ebp
c0003b41:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c0003b45:	74 67                	je     c0003bae <dir_register+0x13e>
c0003b47:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0003b4a:	89 e8                	mov    eax,ebp
c0003b4c:	c1 e0 05             	shl    eax,0x5
c0003b4f:	29 c2                	sub    edx,eax
c0003b51:	89 d8                	mov    eax,ebx
c0003b53:	e8 c0 f7 ff ff       	call   c0003318 <dir_sdi>
c0003b58:	89 c6                	mov    esi,eax
c0003b5a:	85 c0                	test   eax,eax
c0003b5c:	0f 85 8c 00 00 00    	jne    c0003bee <dir_register+0x17e>
c0003b62:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003b66:	e8 bd e6 ff ff       	call   c0002228 <sum_sfn>
c0003b6b:	0f b6 e8             	movzx  ebp,al
c0003b6e:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003b71:	89 f8                	mov    eax,edi
c0003b73:	e8 c6 e7 ff ff       	call   c000233e <move_window>
c0003b78:	89 c6                	mov    esi,eax
c0003b7a:	85 c0                	test   eax,eax
c0003b7c:	75 70                	jne    c0003bee <dir_register+0x17e>
c0003b7e:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c0003b83:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003b86:	83 ec 0c             	sub    esp,0xc
c0003b89:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0003b8c:	55                   	push   ebp
c0003b8d:	e8 39 e5 ff ff       	call   c00020cb <put_lfn>
c0003b92:	31 d2                	xor    edx,edx
c0003b94:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003b98:	89 d8                	mov    eax,ebx
c0003b9a:	e8 0e fa ff ff       	call   c00035ad <dir_next>
c0003b9f:	83 c4 10             	add    esp,0x10
c0003ba2:	89 c6                	mov    esi,eax
c0003ba4:	85 c0                	test   eax,eax
c0003ba6:	75 46                	jne    c0003bee <dir_register+0x17e>
c0003ba8:	ff 4c 24 0c          	dec    DWORD PTR [esp+0xc]
c0003bac:	75 c0                	jne    c0003b6e <dir_register+0xfe>
c0003bae:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003bb1:	89 f8                	mov    eax,edi
c0003bb3:	e8 86 e7 ff ff       	call   c000233e <move_window>
c0003bb8:	89 c6                	mov    esi,eax
c0003bba:	85 c0                	test   eax,eax
c0003bbc:	75 30                	jne    c0003bee <dir_register+0x17e>
c0003bbe:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003bc1:	b9 20 00 00 00       	mov    ecx,0x20
c0003bc6:	31 d2                	xor    edx,edx
c0003bc8:	e8 4b e2 ff ff       	call   c0001e18 <mem_set>
c0003bcd:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003bd0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003bd4:	b9 0b 00 00 00       	mov    ecx,0xb
c0003bd9:	e8 25 e2 ff ff       	call   c0001e03 <mem_cpy>
c0003bde:	8a 43 2b             	mov    al,BYTE PTR [ebx+0x2b]
c0003be1:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003be4:	83 e0 18             	and    eax,0x18
c0003be7:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c0003bea:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003bee:	83 c4 2c             	add    esp,0x2c
c0003bf1:	89 f0                	mov    eax,esi
c0003bf3:	5b                   	pop    ebx
c0003bf4:	5e                   	pop    esi
c0003bf5:	5f                   	pop    edi
c0003bf6:	5d                   	pop    ebp
c0003bf7:	c3                   	ret    

c0003bf8 <f_mount>:
c0003bf8:	53                   	push   ebx
c0003bf9:	83 ec 18             	sub    esp,0x18
c0003bfc:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0003c00:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0003c04:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003c08:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0003c0c:	e8 37 e6 ff ff       	call   c0002248 <get_ldnumber>
c0003c11:	89 c2                	mov    edx,eax
c0003c13:	b8 0b 00 00 00       	mov    eax,0xb
c0003c18:	85 d2                	test   edx,edx
c0003c1a:	78 39                	js     c0003c55 <f_mount+0x5d>
c0003c1c:	8b 04 95 a0 54 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdab60]
c0003c23:	85 c0                	test   eax,eax
c0003c25:	74 03                	je     c0003c2a <f_mount+0x32>
c0003c27:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003c2a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003c2e:	85 c0                	test   eax,eax
c0003c30:	74 03                	je     c0003c35 <f_mount+0x3d>
c0003c32:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003c35:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003c39:	89 04 95 a0 54 02 c0 	mov    DWORD PTR [edx*4-0x3ffdab60],eax
c0003c40:	31 c0                	xor    eax,eax
c0003c42:	84 db                	test   bl,bl
c0003c44:	74 0f                	je     c0003c55 <f_mount+0x5d>
c0003c46:	31 c9                	xor    ecx,ecx
c0003c48:	8d 54 24 20          	lea    edx,[esp+0x20]
c0003c4c:	8d 44 24 24          	lea    eax,[esp+0x24]
c0003c50:	e8 3c e8 ff ff       	call   c0002491 <mount_volume>
c0003c55:	83 c4 18             	add    esp,0x18
c0003c58:	5b                   	pop    ebx
c0003c59:	c3                   	ret    

c0003c5a <f_open>:
c0003c5a:	55                   	push   ebp
c0003c5b:	b8 09 00 00 00       	mov    eax,0x9
c0003c60:	57                   	push   edi
c0003c61:	56                   	push   esi
c0003c62:	53                   	push   ebx
c0003c63:	83 ec 5c             	sub    esp,0x5c
c0003c66:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c0003c6a:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0003c6e:	85 db                	test   ebx,ebx
c0003c70:	0f 84 9f 02 00 00    	je     c0003f15 <f_open+0x2bb>
c0003c76:	89 fd                	mov    ebp,edi
c0003c78:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0003c7c:	83 e5 3f             	and    ebp,0x3f
c0003c7f:	89 e8                	mov    eax,ebp
c0003c81:	89 ee                	mov    esi,ebp
c0003c83:	0f b6 c8             	movzx  ecx,al
c0003c86:	8d 44 24 74          	lea    eax,[esp+0x74]
c0003c8a:	e8 02 e8 ff ff       	call   c0002491 <mount_volume>
c0003c8f:	85 c0                	test   eax,eax
c0003c91:	0f 85 78 02 00 00    	jne    c0003f0f <f_open+0x2b5>
c0003c97:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003c9b:	83 ec 0c             	sub    esp,0xc
c0003c9e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003ca2:	68 00 02 00 00       	push   0x200
c0003ca7:	e8 74 1f 00 00       	call   c0005c20 <ff_memalloc>
c0003cac:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0003cb0:	83 c4 10             	add    esp,0x10
c0003cb3:	b8 11 00 00 00       	mov    eax,0x11
c0003cb8:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0003cbd:	0f 84 52 02 00 00    	je     c0003f15 <f_open+0x2bb>
c0003cc3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003cc7:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003ccb:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0003ccf:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
c0003cd2:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003cd6:	e8 00 fd ff ff       	call   c00039db <follow_path>
c0003cdb:	85 c0                	test   eax,eax
c0003cdd:	75 0c                	jne    c0003ceb <f_open+0x91>
c0003cdf:	f6 44 24 4b 80       	test   BYTE PTR [esp+0x4b],0x80
c0003ce4:	74 05                	je     c0003ceb <f_open+0x91>
c0003ce6:	b8 06 00 00 00       	mov    eax,0x6
c0003ceb:	f7 c7 1c 00 00 00    	test   edi,0x1c
c0003cf1:	0f 84 d5 00 00 00    	je     c0003dcc <f_open+0x172>
c0003cf7:	85 c0                	test   eax,eax
c0003cf9:	74 21                	je     c0003d1c <f_open+0xc2>
c0003cfb:	83 f8 04             	cmp    eax,0x4
c0003cfe:	0f 85 f0 01 00 00    	jne    c0003ef4 <f_open+0x29a>
c0003d04:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003d08:	e8 63 fd ff ff       	call   c0003a70 <dir_register>
c0003d0d:	85 c0                	test   eax,eax
c0003d0f:	0f 85 df 01 00 00    	jne    c0003ef4 <f_open+0x29a>
c0003d15:	83 cd 08             	or     ebp,0x8
c0003d18:	89 ee                	mov    esi,ebp
c0003d1a:	eb 2c                	jmp    c0003d48 <f_open+0xee>
c0003d1c:	8a 54 24 26          	mov    dl,BYTE PTR [esp+0x26]
c0003d20:	b8 07 00 00 00       	mov    eax,0x7
c0003d25:	80 e2 11             	and    dl,0x11
c0003d28:	0f 85 c6 01 00 00    	jne    c0003ef4 <f_open+0x29a>
c0003d2e:	b8 08 00 00 00       	mov    eax,0x8
c0003d33:	f7 c7 04 00 00 00    	test   edi,0x4
c0003d39:	0f 85 b5 01 00 00    	jne    c0003ef4 <f_open+0x29a>
c0003d3f:	83 e7 08             	and    edi,0x8
c0003d42:	0f 84 b1 00 00 00    	je     c0003df9 <f_open+0x19f>
c0003d48:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0003d4c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003d50:	89 ea                	mov    edx,ebp
c0003d52:	8a 00                	mov    al,BYTE PTR [eax]
c0003d54:	e8 6a f4 ff ff       	call   c00031c3 <ld_clust.isra.0>
c0003d59:	ba 00 00 21 50       	mov    edx,0x50210000
c0003d5e:	89 c7                	mov    edi,eax
c0003d60:	8d 45 0e             	lea    eax,[ebp+0xe]
c0003d63:	e8 98 e0 ff ff       	call   c0001e00 <st_dword>
c0003d68:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003d6c:	31 c9                	xor    ecx,ecx
c0003d6e:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c0003d72:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003d76:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0003d7a:	e8 6d f4 ff ff       	call   c00031ec <st_clust.isra.1>
c0003d7f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003d83:	31 d2                	xor    edx,edx
c0003d85:	83 c0 1c             	add    eax,0x1c
c0003d88:	e8 73 e0 ff ff       	call   c0001e00 <st_dword>
c0003d8d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003d91:	85 ff                	test   edi,edi
c0003d93:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003d97:	74 60                	je     c0003df9 <f_open+0x19f>
c0003d99:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003d9d:	31 c9                	xor    ecx,ecx
c0003d9f:	8b 68 30             	mov    ebp,DWORD PTR [eax+0x30]
c0003da2:	89 fa                	mov    edx,edi
c0003da4:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003da8:	e8 72 f7 ff ff       	call   c000351f <remove_chain>
c0003dad:	85 c0                	test   eax,eax
c0003daf:	0f 85 3f 01 00 00    	jne    c0003ef4 <f_open+0x29a>
c0003db5:	89 ea                	mov    edx,ebp
c0003db7:	4f                   	dec    edi
c0003db8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003dbc:	e8 7d e5 ff ff       	call   c000233e <move_window>
c0003dc1:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0003dc5:	85 c0                	test   eax,eax
c0003dc7:	89 7a 10             	mov    DWORD PTR [edx+0x10],edi
c0003dca:	eb 27                	jmp    c0003df3 <f_open+0x199>
c0003dcc:	85 c0                	test   eax,eax
c0003dce:	0f 85 20 01 00 00    	jne    c0003ef4 <f_open+0x29a>
c0003dd4:	8a 54 24 26          	mov    dl,BYTE PTR [esp+0x26]
c0003dd8:	b8 04 00 00 00       	mov    eax,0x4
c0003ddd:	f6 c2 10             	test   dl,0x10
c0003de0:	0f 85 0e 01 00 00    	jne    c0003ef4 <f_open+0x29a>
c0003de6:	83 e7 02             	and    edi,0x2
c0003de9:	74 0e                	je     c0003df9 <f_open+0x19f>
c0003deb:	b8 07 00 00 00       	mov    eax,0x7
c0003df0:	80 e2 01             	and    dl,0x1
c0003df3:	0f 85 fb 00 00 00    	jne    c0003ef4 <f_open+0x29a>
c0003df9:	f7 c6 08 00 00 00    	test   esi,0x8
c0003dff:	74 03                	je     c0003e04 <f_open+0x1aa>
c0003e01:	83 ce 40             	or     esi,0x40
c0003e04:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
c0003e08:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0003e0c:	8b 45 30             	mov    eax,DWORD PTR [ebp+0x30]
c0003e0f:	89 fa                	mov    edx,edi
c0003e11:	89 7b 24             	mov    DWORD PTR [ebx+0x24],edi
c0003e14:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0003e17:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0003e1a:	e8 a4 f3 ff ff       	call   c00031c3 <ld_clust.isra.0>
c0003e1f:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003e22:	8d 47 1c             	lea    eax,[edi+0x1c]
c0003e25:	8d 7b 28             	lea    edi,[ebx+0x28]
c0003e28:	e8 b7 df ff ff       	call   c0001de4 <ld_dword>
c0003e2d:	89 2b                	mov    DWORD PTR [ebx],ebp
c0003e2f:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0003e32:	31 d2                	xor    edx,edx
c0003e34:	66 8b 45 06          	mov    ax,WORD PTR [ebp+0x6]
c0003e38:	b9 00 02 00 00       	mov    ecx,0x200
c0003e3d:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0003e41:	c6 43 11 00          	mov    BYTE PTR [ebx+0x11],0x0
c0003e45:	89 f0                	mov    eax,esi
c0003e47:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0003e4e:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0003e51:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0003e58:	89 f8                	mov    eax,edi
c0003e5a:	e8 b9 df ff ff       	call   c0001e18 <mem_set>
c0003e5f:	83 e6 20             	and    esi,0x20
c0003e62:	75 07                	jne    c0003e6b <f_open+0x211>
c0003e64:	31 c0                	xor    eax,eax
c0003e66:	e9 89 00 00 00       	jmp    c0003ef4 <f_open+0x29a>
c0003e6b:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c0003e6e:	85 ed                	test   ebp,ebp
c0003e70:	74 f2                	je     c0003e64 <f_open+0x20a>
c0003e72:	89 6b 14             	mov    DWORD PTR [ebx+0x14],ebp
c0003e75:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003e79:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0003e7c:	0f b7 70 0a          	movzx  esi,WORD PTR [eax+0xa]
c0003e80:	c1 e6 09             	shl    esi,0x9
c0003e83:	39 ee                	cmp    esi,ebp
c0003e85:	73 1c                	jae    c0003ea3 <f_open+0x249>
c0003e87:	8b 03                	mov    eax,DWORD PTR [ebx]
c0003e89:	29 f5                	sub    ebp,esi
c0003e8b:	e8 84 f3 ff ff       	call   c0003214 <get_fat.isra.2>
c0003e90:	89 c2                	mov    edx,eax
c0003e92:	83 f8 01             	cmp    eax,0x1
c0003e95:	76 10                	jbe    c0003ea7 <f_open+0x24d>
c0003e97:	83 f8 ff             	cmp    eax,0xffffffff
c0003e9a:	75 e7                	jne    c0003e83 <f_open+0x229>
c0003e9c:	b8 01 00 00 00       	mov    eax,0x1
c0003ea1:	eb 09                	jmp    c0003eac <f_open+0x252>
c0003ea3:	31 c0                	xor    eax,eax
c0003ea5:	eb 05                	jmp    c0003eac <f_open+0x252>
c0003ea7:	b8 02 00 00 00       	mov    eax,0x2
c0003eac:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0003eaf:	85 c0                	test   eax,eax
c0003eb1:	75 41                	jne    c0003ef4 <f_open+0x29a>
c0003eb3:	f7 c5 ff 01 00 00    	test   ebp,0x1ff
c0003eb9:	74 a9                	je     c0003e64 <f_open+0x20a>
c0003ebb:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0003ebf:	89 f0                	mov    eax,esi
c0003ec1:	e8 68 e1 ff ff       	call   c000202e <clst2sect>
c0003ec6:	89 c2                	mov    edx,eax
c0003ec8:	b8 02 00 00 00       	mov    eax,0x2
c0003ecd:	85 d2                	test   edx,edx
c0003ecf:	74 23                	je     c0003ef4 <f_open+0x29a>
c0003ed1:	c1 ed 09             	shr    ebp,0x9
c0003ed4:	8d 44 15 00          	lea    eax,[ebp+edx*1+0x0]
c0003ed8:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0003edb:	6a 01                	push   0x1
c0003edd:	50                   	push   eax
c0003ede:	57                   	push   edi
c0003edf:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0003ee3:	50                   	push   eax
c0003ee4:	e8 a3 de ff ff       	call   c0001d8c <disk_read>
c0003ee9:	83 c4 10             	add    esp,0x10
c0003eec:	85 c0                	test   eax,eax
c0003eee:	0f 95 c0             	setne  al
c0003ef1:	0f b6 c0             	movzx  eax,al
c0003ef4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003ef8:	83 ec 0c             	sub    esp,0xc
c0003efb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0003eff:	e8 34 1d 00 00       	call   c0005c38 <ff_memfree>
c0003f04:	83 c4 10             	add    esp,0x10
c0003f07:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003f0b:	85 c0                	test   eax,eax
c0003f0d:	74 06                	je     c0003f15 <f_open+0x2bb>
c0003f0f:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0003f15:	83 c4 5c             	add    esp,0x5c
c0003f18:	5b                   	pop    ebx
c0003f19:	5e                   	pop    esi
c0003f1a:	5f                   	pop    edi
c0003f1b:	5d                   	pop    ebp
c0003f1c:	c3                   	ret    

c0003f1d <f_read>:
c0003f1d:	55                   	push   ebp
c0003f1e:	57                   	push   edi
c0003f1f:	56                   	push   esi
c0003f20:	53                   	push   ebx
c0003f21:	83 ec 2c             	sub    esp,0x2c
c0003f24:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0003f28:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0003f2c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0003f32:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0003f36:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0003f3a:	89 d8                	mov    eax,ebx
c0003f3c:	e8 54 e3 ff ff       	call   c0002295 <validate>
c0003f41:	89 c5                	mov    ebp,eax
c0003f43:	85 c0                	test   eax,eax
c0003f45:	0f 85 c7 01 00 00    	jne    c0004112 <f_read+0x1f5>
c0003f4b:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c0003f4f:	85 ed                	test   ebp,ebp
c0003f51:	0f 85 bb 01 00 00    	jne    c0004112 <f_read+0x1f5>
c0003f57:	f6 43 10 01          	test   BYTE PTR [ebx+0x10],0x1
c0003f5b:	0f 84 ac 01 00 00    	je     c000410d <f_read+0x1f0>
c0003f61:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0003f64:	2b 43 14             	sub    eax,DWORD PTR [ebx+0x14]
c0003f67:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0003f6b:	39 f0                	cmp    eax,esi
c0003f6d:	0f 86 b0 00 00 00    	jbe    c0004023 <f_read+0x106>
c0003f73:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0003f77:	e9 a7 00 00 00       	jmp    c0004023 <f_read+0x106>
c0003f7c:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0003f7f:	a9 ff 01 00 00       	test   eax,0x1ff
c0003f84:	0f 85 56 01 00 00    	jne    c00040e0 <f_read+0x1c3>
c0003f8a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0003f8e:	0f b7 7a 0a          	movzx  edi,WORD PTR [edx+0xa]
c0003f92:	89 c2                	mov    edx,eax
c0003f94:	4f                   	dec    edi
c0003f95:	c1 ea 09             	shr    edx,0x9
c0003f98:	21 d7                	and    edi,edx
c0003f9a:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0003f9e:	0f 84 8f 00 00 00    	je     c0004033 <f_read+0x116>
c0003fa4:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003fa8:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003fab:	89 c8                	mov    eax,ecx
c0003fad:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003fb1:	e8 78 e0 ff ff       	call   c000202e <clst2sect>
c0003fb6:	85 c0                	test   eax,eax
c0003fb8:	0f 84 8d 00 00 00    	je     c000404b <f_read+0x12e>
c0003fbe:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003fc2:	81 7c 24 04 ff 01 00 00 	cmp    DWORD PTR [esp+0x4],0x1ff
c0003fca:	8d 3c 01             	lea    edi,[ecx+eax*1]
c0003fcd:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003fd1:	0f 86 bf 00 00 00    	jbe    c0004096 <f_read+0x179>
c0003fd7:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0003fdb:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0003fdf:	c1 ee 09             	shr    esi,0x9
c0003fe2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003fe6:	01 f2                	add    edx,esi
c0003fe8:	39 c2                	cmp    edx,eax
c0003fea:	76 06                	jbe    c0003ff2 <f_read+0xd5>
c0003fec:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c0003ff0:	89 c6                	mov    esi,eax
c0003ff2:	56                   	push   esi
c0003ff3:	57                   	push   edi
c0003ff4:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0003ff8:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0003ffc:	50                   	push   eax
c0003ffd:	e8 8a dd ff ff       	call   c0001d8c <disk_read>
c0004002:	83 c4 10             	add    esp,0x10
c0004005:	85 c0                	test   eax,eax
c0004007:	75 55                	jne    c000405e <f_read+0x141>
c0004009:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c000400d:	75 65                	jne    c0004074 <f_read+0x157>
c000400f:	c1 e6 09             	shl    esi,0x9
c0004012:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004016:	29 74 24 04          	sub    DWORD PTR [esp+0x4],esi
c000401a:	01 30                	add    DWORD PTR [eax],esi
c000401c:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c0004020:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c0004023:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0004028:	0f 85 4e ff ff ff    	jne    c0003f7c <f_read+0x5f>
c000402e:	e9 df 00 00 00       	jmp    c0004112 <f_read+0x1f5>
c0004033:	85 c0                	test   eax,eax
c0004035:	75 05                	jne    c000403c <f_read+0x11f>
c0004037:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000403a:	eb 0a                	jmp    c0004046 <f_read+0x129>
c000403c:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000403f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0004041:	e8 ce f1 ff ff       	call   c0003214 <get_fat.isra.2>
c0004046:	83 f8 01             	cmp    eax,0x1
c0004049:	77 0e                	ja     c0004059 <f_read+0x13c>
c000404b:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c000404f:	bd 02 00 00 00       	mov    ebp,0x2
c0004054:	e9 b9 00 00 00       	jmp    c0004112 <f_read+0x1f5>
c0004059:	83 f8 ff             	cmp    eax,0xffffffff
c000405c:	75 0e                	jne    c000406c <f_read+0x14f>
c000405e:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c0004062:	bd 01 00 00 00       	mov    ebp,0x1
c0004067:	e9 a6 00 00 00       	jmp    c0004112 <f_read+0x1f5>
c000406c:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000406f:	e9 30 ff ff ff       	jmp    c0003fa4 <f_read+0x87>
c0004074:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0004077:	29 f8                	sub    eax,edi
c0004079:	39 f0                	cmp    eax,esi
c000407b:	73 92                	jae    c000400f <f_read+0xf2>
c000407d:	c1 e0 09             	shl    eax,0x9
c0004080:	8d 53 28             	lea    edx,[ebx+0x28]
c0004083:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c0004087:	b9 00 02 00 00       	mov    ecx,0x200
c000408c:	e8 72 dd ff ff       	call   c0001e03 <mem_cpy>
c0004091:	e9 79 ff ff ff       	jmp    c000400f <f_read+0xf2>
c0004096:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0004099:	39 f8                	cmp    eax,edi
c000409b:	74 40                	je     c00040dd <f_read+0x1c0>
c000409d:	8d 73 28             	lea    esi,[ebx+0x28]
c00040a0:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c00040a4:	74 1e                	je     c00040c4 <f_read+0x1a7>
c00040a6:	6a 01                	push   0x1
c00040a8:	50                   	push   eax
c00040a9:	56                   	push   esi
c00040aa:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00040ae:	50                   	push   eax
c00040af:	e8 ee dc ff ff       	call   c0001da2 <disk_write>
c00040b4:	83 c4 10             	add    esp,0x10
c00040b7:	85 c0                	test   eax,eax
c00040b9:	75 a3                	jne    c000405e <f_read+0x141>
c00040bb:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00040be:	83 e0 7f             	and    eax,0x7f
c00040c1:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00040c4:	6a 01                	push   0x1
c00040c6:	57                   	push   edi
c00040c7:	56                   	push   esi
c00040c8:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00040cc:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00040d0:	50                   	push   eax
c00040d1:	e8 b6 dc ff ff       	call   c0001d8c <disk_read>
c00040d6:	83 c4 10             	add    esp,0x10
c00040d9:	85 c0                	test   eax,eax
c00040db:	75 81                	jne    c000405e <f_read+0x141>
c00040dd:	89 7b 1c             	mov    DWORD PTR [ebx+0x1c],edi
c00040e0:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00040e3:	ba 00 02 00 00       	mov    edx,0x200
c00040e8:	25 ff 01 00 00       	and    eax,0x1ff
c00040ed:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c00040f1:	29 c2                	sub    edx,eax
c00040f3:	39 d6                	cmp    esi,edx
c00040f5:	76 02                	jbe    c00040f9 <f_read+0x1dc>
c00040f7:	89 d6                	mov    esi,edx
c00040f9:	8d 54 03 28          	lea    edx,[ebx+eax*1+0x28]
c00040fd:	89 f1                	mov    ecx,esi
c00040ff:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0004103:	e8 fb dc ff ff       	call   c0001e03 <mem_cpy>
c0004108:	e9 05 ff ff ff       	jmp    c0004012 <f_read+0xf5>
c000410d:	bd 07 00 00 00       	mov    ebp,0x7
c0004112:	83 c4 2c             	add    esp,0x2c
c0004115:	89 e8                	mov    eax,ebp
c0004117:	5b                   	pop    ebx
c0004118:	5e                   	pop    esi
c0004119:	5f                   	pop    edi
c000411a:	5d                   	pop    ebp
c000411b:	c3                   	ret    

c000411c <f_write>:
c000411c:	55                   	push   ebp
c000411d:	57                   	push   edi
c000411e:	56                   	push   esi
c000411f:	53                   	push   ebx
c0004120:	83 ec 2c             	sub    esp,0x2c
c0004123:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004127:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000412b:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0004131:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004135:	89 d8                	mov    eax,ebx
c0004137:	e8 59 e1 ff ff       	call   c0002295 <validate>
c000413c:	89 c5                	mov    ebp,eax
c000413e:	85 c0                	test   eax,eax
c0004140:	0f 85 14 02 00 00    	jne    c000435a <f_write+0x23e>
c0004146:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c000414a:	85 ed                	test   ebp,ebp
c000414c:	0f 85 08 02 00 00    	jne    c000435a <f_write+0x23e>
c0004152:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004156:	0f 84 f9 01 00 00    	je     c0004355 <f_write+0x239>
c000415c:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000415f:	89 c7                	mov    edi,eax
c0004161:	03 7c 24 48          	add    edi,DWORD PTR [esp+0x48]
c0004165:	0f 83 ef 00 00 00    	jae    c000425a <f_write+0x13e>
c000416b:	f7 d0                	not    eax
c000416d:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0004171:	e9 e4 00 00 00       	jmp    c000425a <f_write+0x13e>
c0004176:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0004179:	f7 c2 ff 01 00 00    	test   edx,0x1ff
c000417f:	0f 85 9a 01 00 00    	jne    c000431f <f_write+0x203>
c0004185:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004189:	89 d1                	mov    ecx,edx
c000418b:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c000418f:	c1 e9 09             	shr    ecx,0x9
c0004192:	48                   	dec    eax
c0004193:	21 c8                	and    eax,ecx
c0004195:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004199:	0f 84 c8 00 00 00    	je     c0004267 <f_write+0x14b>
c000419f:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c00041a3:	0f 85 22 01 00 00    	jne    c00042cb <f_write+0x1af>
c00041a9:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00041ad:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00041b0:	89 c8                	mov    eax,ecx
c00041b2:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00041b6:	e8 73 de ff ff       	call   c000202e <clst2sect>
c00041bb:	85 c0                	test   eax,eax
c00041bd:	0f 84 d2 00 00 00    	je     c0004295 <f_write+0x179>
c00041c3:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00041c7:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00041cb:	01 c7                	add    edi,eax
c00041cd:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c00041d5:	0f 86 1c 01 00 00    	jbe    c00042f7 <f_write+0x1db>
c00041db:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00041df:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c00041e3:	c1 ee 09             	shr    esi,0x9
c00041e6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00041ea:	01 f2                	add    edx,esi
c00041ec:	39 c2                	cmp    edx,eax
c00041ee:	76 06                	jbe    c00041f6 <f_write+0xda>
c00041f0:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c00041f4:	89 c6                	mov    esi,eax
c00041f6:	56                   	push   esi
c00041f7:	57                   	push   edi
c00041f8:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00041fc:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0004200:	50                   	push   eax
c0004201:	e8 9c db ff ff       	call   c0001da2 <disk_write>
c0004206:	83 c4 10             	add    esp,0x10
c0004209:	85 c0                	test   eax,eax
c000420b:	0f 85 97 00 00 00    	jne    c00042a8 <f_write+0x18c>
c0004211:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0004214:	29 fa                	sub    edx,edi
c0004216:	39 f2                	cmp    edx,esi
c0004218:	73 1d                	jae    c0004237 <f_write+0x11b>
c000421a:	8d 43 28             	lea    eax,[ebx+0x28]
c000421d:	c1 e2 09             	shl    edx,0x9
c0004220:	b9 00 02 00 00       	mov    ecx,0x200
c0004225:	03 54 24 44          	add    edx,DWORD PTR [esp+0x44]
c0004229:	e8 d5 db ff ff       	call   c0001e03 <mem_cpy>
c000422e:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0004231:	83 e0 7f             	and    eax,0x7f
c0004234:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004237:	c1 e6 09             	shl    esi,0x9
c000423a:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c000423e:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004242:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c0004246:	01 30                	add    DWORD PTR [eax],esi
c0004248:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c000424b:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000424e:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0004251:	39 f0                	cmp    eax,esi
c0004253:	73 02                	jae    c0004257 <f_write+0x13b>
c0004255:	89 f0                	mov    eax,esi
c0004257:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000425a:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c000425f:	0f 85 11 ff ff ff    	jne    c0004176 <f_write+0x5a>
c0004265:	eb 1b                	jmp    c0004282 <f_write+0x166>
c0004267:	85 d2                	test   edx,edx
c0004269:	75 09                	jne    c0004274 <f_write+0x158>
c000426b:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000426e:	85 c0                	test   eax,eax
c0004270:	75 1e                	jne    c0004290 <f_write+0x174>
c0004272:	eb 03                	jmp    c0004277 <f_write+0x15b>
c0004274:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004277:	89 d8                	mov    eax,ebx
c0004279:	e8 62 f1 ff ff       	call   c00033e0 <create_chain>
c000427e:	85 c0                	test   eax,eax
c0004280:	75 0e                	jne    c0004290 <f_write+0x174>
c0004282:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0004285:	83 c8 40             	or     eax,0x40
c0004288:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c000428b:	e9 ca 00 00 00       	jmp    c000435a <f_write+0x23e>
c0004290:	83 f8 01             	cmp    eax,0x1
c0004293:	75 0e                	jne    c00042a3 <f_write+0x187>
c0004295:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c0004299:	bd 02 00 00 00       	mov    ebp,0x2
c000429e:	e9 b7 00 00 00       	jmp    c000435a <f_write+0x23e>
c00042a3:	83 f8 ff             	cmp    eax,0xffffffff
c00042a6:	75 0e                	jne    c00042b6 <f_write+0x19a>
c00042a8:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c00042ac:	bd 01 00 00 00       	mov    ebp,0x1
c00042b1:	e9 a4 00 00 00       	jmp    c000435a <f_write+0x23e>
c00042b6:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00042b9:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c00042bd:	0f 85 dc fe ff ff    	jne    c000419f <f_write+0x83>
c00042c3:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00042c6:	e9 d4 fe ff ff       	jmp    c000419f <f_write+0x83>
c00042cb:	6a 01                	push   0x1
c00042cd:	8d 43 28             	lea    eax,[ebx+0x28]
c00042d0:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00042d3:	50                   	push   eax
c00042d4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00042d8:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00042dc:	50                   	push   eax
c00042dd:	e8 c0 da ff ff       	call   c0001da2 <disk_write>
c00042e2:	83 c4 10             	add    esp,0x10
c00042e5:	85 c0                	test   eax,eax
c00042e7:	75 bf                	jne    c00042a8 <f_write+0x18c>
c00042e9:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00042ec:	83 e0 7f             	and    eax,0x7f
c00042ef:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00042f2:	e9 b2 fe ff ff       	jmp    c00041a9 <f_write+0x8d>
c00042f7:	39 7b 1c             	cmp    DWORD PTR [ebx+0x1c],edi
c00042fa:	74 20                	je     c000431c <f_write+0x200>
c00042fc:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00042ff:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c0004302:	76 18                	jbe    c000431c <f_write+0x200>
c0004304:	6a 01                	push   0x1
c0004306:	8d 43 28             	lea    eax,[ebx+0x28]
c0004309:	57                   	push   edi
c000430a:	50                   	push   eax
c000430b:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c000430f:	50                   	push   eax
c0004310:	e8 77 da ff ff       	call   c0001d8c <disk_read>
c0004315:	83 c4 10             	add    esp,0x10
c0004318:	85 c0                	test   eax,eax
c000431a:	75 8c                	jne    c00042a8 <f_write+0x18c>
c000431c:	89 7b 1c             	mov    DWORD PTR [ebx+0x1c],edi
c000431f:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004322:	ba 00 02 00 00       	mov    edx,0x200
c0004327:	25 ff 01 00 00       	and    eax,0x1ff
c000432c:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0004330:	29 c2                	sub    edx,eax
c0004332:	39 d6                	cmp    esi,edx
c0004334:	76 02                	jbe    c0004338 <f_write+0x21c>
c0004336:	89 d6                	mov    esi,edx
c0004338:	8d 44 03 28          	lea    eax,[ebx+eax*1+0x28]
c000433c:	89 f1                	mov    ecx,esi
c000433e:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0004342:	e8 bc da ff ff       	call   c0001e03 <mem_cpy>
c0004347:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000434a:	83 c8 80             	or     eax,0xffffff80
c000434d:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004350:	e9 e5 fe ff ff       	jmp    c000423a <f_write+0x11e>
c0004355:	bd 07 00 00 00       	mov    ebp,0x7
c000435a:	83 c4 2c             	add    esp,0x2c
c000435d:	89 e8                	mov    eax,ebp
c000435f:	5b                   	pop    ebx
c0004360:	5e                   	pop    esi
c0004361:	5f                   	pop    edi
c0004362:	5d                   	pop    ebp
c0004363:	c3                   	ret    

c0004364 <f_sync>:
c0004364:	56                   	push   esi
c0004365:	53                   	push   ebx
c0004366:	83 ec 14             	sub    esp,0x14
c0004369:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000436d:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004371:	89 d8                	mov    eax,ebx
c0004373:	e8 1d df ff ff       	call   c0002295 <validate>
c0004378:	85 c0                	test   eax,eax
c000437a:	0f 85 a3 00 00 00    	jne    c0004423 <f_sync+0xbf>
c0004380:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c0004383:	f6 c2 40             	test   dl,0x40
c0004386:	0f 84 97 00 00 00    	je     c0004423 <f_sync+0xbf>
c000438c:	80 e2 80             	and    dl,0x80
c000438f:	74 2e                	je     c00043bf <f_sync+0x5b>
c0004391:	6a 01                	push   0x1
c0004393:	8d 43 28             	lea    eax,[ebx+0x28]
c0004396:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0004399:	50                   	push   eax
c000439a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000439e:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00043a2:	50                   	push   eax
c00043a3:	e8 fa d9 ff ff       	call   c0001da2 <disk_write>
c00043a8:	83 c4 10             	add    esp,0x10
c00043ab:	89 c2                	mov    edx,eax
c00043ad:	b8 01 00 00 00       	mov    eax,0x1
c00043b2:	85 d2                	test   edx,edx
c00043b4:	75 6d                	jne    c0004423 <f_sync+0xbf>
c00043b6:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00043b9:	83 e0 7f             	and    eax,0x7f
c00043bc:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00043bf:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00043c2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00043c6:	e8 73 df ff ff       	call   c000233e <move_window>
c00043cb:	85 c0                	test   eax,eax
c00043cd:	75 54                	jne    c0004423 <f_sync+0xbf>
c00043cf:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c00043d2:	8a 46 0b             	mov    al,BYTE PTR [esi+0xb]
c00043d5:	89 f2                	mov    edx,esi
c00043d7:	83 c8 20             	or     eax,0x20
c00043da:	88 46 0b             	mov    BYTE PTR [esi+0xb],al
c00043dd:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c00043e0:	8b 03                	mov    eax,DWORD PTR [ebx]
c00043e2:	e8 05 ee ff ff       	call   c00031ec <st_clust.isra.1>
c00043e7:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00043ea:	8d 46 1c             	lea    eax,[esi+0x1c]
c00043ed:	e8 0e da ff ff       	call   c0001e00 <st_dword>
c00043f2:	8d 46 16             	lea    eax,[esi+0x16]
c00043f5:	ba 00 00 21 50       	mov    edx,0x50210000
c00043fa:	e8 01 da ff ff       	call   c0001e00 <st_dword>
c00043ff:	31 d2                	xor    edx,edx
c0004401:	8d 46 12             	lea    eax,[esi+0x12]
c0004404:	e8 f3 d9 ff ff       	call   c0001dfc <st_word>
c0004409:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000440d:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004411:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004415:	e8 5b e9 ff ff       	call   c0002d75 <sync_fs>
c000441a:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c000441d:	83 e2 bf             	and    edx,0xffffffbf
c0004420:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c0004423:	83 c4 14             	add    esp,0x14
c0004426:	5b                   	pop    ebx
c0004427:	5e                   	pop    esi
c0004428:	c3                   	ret    

c0004429 <f_close>:
c0004429:	53                   	push   ebx
c000442a:	83 ec 24             	sub    esp,0x24
c000442d:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0004431:	53                   	push   ebx
c0004432:	e8 2d ff ff ff       	call   c0004364 <f_sync>
c0004437:	83 c4 10             	add    esp,0x10
c000443a:	85 c0                	test   eax,eax
c000443c:	75 15                	jne    c0004453 <f_close+0x2a>
c000443e:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004442:	89 d8                	mov    eax,ebx
c0004444:	e8 4c de ff ff       	call   c0002295 <validate>
c0004449:	85 c0                	test   eax,eax
c000444b:	75 06                	jne    c0004453 <f_close+0x2a>
c000444d:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0004453:	83 c4 18             	add    esp,0x18
c0004456:	5b                   	pop    ebx
c0004457:	c3                   	ret    

c0004458 <f_lseek>:
c0004458:	55                   	push   ebp
c0004459:	57                   	push   edi
c000445a:	56                   	push   esi
c000445b:	53                   	push   ebx
c000445c:	83 ec 2c             	sub    esp,0x2c
c000445f:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0004463:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0004467:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000446b:	89 d8                	mov    eax,ebx
c000446d:	e8 23 de ff ff       	call   c0002295 <validate>
c0004472:	89 c5                	mov    ebp,eax
c0004474:	85 c0                	test   eax,eax
c0004476:	0f 85 83 01 00 00    	jne    c00045ff <f_lseek+0x1a7>
c000447c:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c0004480:	85 ed                	test   ebp,ebp
c0004482:	0f 85 77 01 00 00    	jne    c00045ff <f_lseek+0x1a7>
c0004488:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000448b:	39 f0                	cmp    eax,esi
c000448d:	73 08                	jae    c0004497 <f_lseek+0x3f>
c000448f:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004493:	75 02                	jne    c0004497 <f_lseek+0x3f>
c0004495:	89 c6                	mov    esi,eax
c0004497:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000449a:	85 f6                	test   esi,esi
c000449c:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00044a3:	75 07                	jne    c00044ac <f_lseek+0x54>
c00044a5:	31 f6                	xor    esi,esi
c00044a7:	e9 e2 00 00 00       	jmp    c000458e <f_lseek+0x136>
c00044ac:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00044b0:	0f b7 78 0a          	movzx  edi,WORD PTR [eax+0xa]
c00044b4:	c1 e7 09             	shl    edi,0x9
c00044b7:	85 c9                	test   ecx,ecx
c00044b9:	74 28                	je     c00044e3 <f_lseek+0x8b>
c00044bb:	49                   	dec    ecx
c00044bc:	31 d2                	xor    edx,edx
c00044be:	8d 46 ff             	lea    eax,[esi-0x1]
c00044c1:	f7 f7                	div    edi
c00044c3:	31 d2                	xor    edx,edx
c00044c5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00044c9:	89 c8                	mov    eax,ecx
c00044cb:	f7 f7                	div    edi
c00044cd:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c00044d1:	72 10                	jb     c00044e3 <f_lseek+0x8b>
c00044d3:	89 f8                	mov    eax,edi
c00044d5:	f7 d8                	neg    eax
c00044d7:	21 c1                	and    ecx,eax
c00044d9:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00044dc:	89 4b 14             	mov    DWORD PTR [ebx+0x14],ecx
c00044df:	29 ce                	sub    esi,ecx
c00044e1:	eb 3c                	jmp    c000451f <f_lseek+0xc7>
c00044e3:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00044e6:	85 c0                	test   eax,eax
c00044e8:	75 32                	jne    c000451c <f_lseek+0xc4>
c00044ea:	31 d2                	xor    edx,edx
c00044ec:	89 d8                	mov    eax,ebx
c00044ee:	e8 ed ee ff ff       	call   c00033e0 <create_chain>
c00044f3:	83 f8 01             	cmp    eax,0x1
c00044f6:	75 0e                	jne    c0004506 <f_lseek+0xae>
c00044f8:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c00044fc:	bd 02 00 00 00       	mov    ebp,0x2
c0004501:	e9 f9 00 00 00       	jmp    c00045ff <f_lseek+0x1a7>
c0004506:	83 f8 ff             	cmp    eax,0xffffffff
c0004509:	75 0e                	jne    c0004519 <f_lseek+0xc1>
c000450b:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c000450f:	bd 01 00 00 00       	mov    ebp,0x1
c0004514:	e9 e6 00 00 00       	jmp    c00045ff <f_lseek+0x1a7>
c0004519:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000451c:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000451f:	85 c0                	test   eax,eax
c0004521:	74 82                	je     c00044a5 <f_lseek+0x4d>
c0004523:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0004526:	39 fe                	cmp    esi,edi
c0004528:	76 3d                	jbe    c0004567 <f_lseek+0x10f>
c000452a:	01 fa                	add    edx,edi
c000452c:	29 fe                	sub    esi,edi
c000452e:	89 53 14             	mov    DWORD PTR [ebx+0x14],edx
c0004531:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004535:	89 c2                	mov    edx,eax
c0004537:	74 0d                	je     c0004546 <f_lseek+0xee>
c0004539:	89 d8                	mov    eax,ebx
c000453b:	e8 a0 ee ff ff       	call   c00033e0 <create_chain>
c0004540:	85 c0                	test   eax,eax
c0004542:	75 09                	jne    c000454d <f_lseek+0xf5>
c0004544:	eb 1f                	jmp    c0004565 <f_lseek+0x10d>
c0004546:	8b 03                	mov    eax,DWORD PTR [ebx]
c0004548:	e8 c7 ec ff ff       	call   c0003214 <get_fat.isra.2>
c000454d:	83 f8 ff             	cmp    eax,0xffffffff
c0004550:	74 b9                	je     c000450b <f_lseek+0xb3>
c0004552:	83 f8 01             	cmp    eax,0x1
c0004555:	76 a1                	jbe    c00044f8 <f_lseek+0xa0>
c0004557:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000455b:	39 42 18             	cmp    DWORD PTR [edx+0x18],eax
c000455e:	76 98                	jbe    c00044f8 <f_lseek+0xa0>
c0004560:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0004563:	eb be                	jmp    c0004523 <f_lseek+0xcb>
c0004565:	31 f6                	xor    esi,esi
c0004567:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c000456a:	f7 c6 ff 01 00 00    	test   esi,0x1ff
c0004570:	0f 84 2f ff ff ff    	je     c00044a5 <f_lseek+0x4d>
c0004576:	89 c2                	mov    edx,eax
c0004578:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000457c:	e8 ad da ff ff       	call   c000202e <clst2sect>
c0004581:	85 c0                	test   eax,eax
c0004583:	0f 84 6f ff ff ff    	je     c00044f8 <f_lseek+0xa0>
c0004589:	c1 ee 09             	shr    esi,0x9
c000458c:	01 c6                	add    esi,eax
c000458e:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004591:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c0004594:	76 0c                	jbe    c00045a2 <f_lseek+0x14a>
c0004596:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c0004599:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000459c:	83 ca 40             	or     edx,0x40
c000459f:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c00045a2:	a9 ff 01 00 00       	test   eax,0x1ff
c00045a7:	74 56                	je     c00045ff <f_lseek+0x1a7>
c00045a9:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00045ac:	39 f0                	cmp    eax,esi
c00045ae:	74 4f                	je     c00045ff <f_lseek+0x1a7>
c00045b0:	8d 7b 28             	lea    edi,[ebx+0x28]
c00045b3:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c00045b7:	74 26                	je     c00045df <f_lseek+0x187>
c00045b9:	6a 01                	push   0x1
c00045bb:	50                   	push   eax
c00045bc:	57                   	push   edi
c00045bd:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00045c1:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00045c5:	50                   	push   eax
c00045c6:	e8 d7 d7 ff ff       	call   c0001da2 <disk_write>
c00045cb:	83 c4 10             	add    esp,0x10
c00045ce:	85 c0                	test   eax,eax
c00045d0:	0f 85 35 ff ff ff    	jne    c000450b <f_lseek+0xb3>
c00045d6:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00045d9:	83 e0 7f             	and    eax,0x7f
c00045dc:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00045df:	6a 01                	push   0x1
c00045e1:	56                   	push   esi
c00045e2:	57                   	push   edi
c00045e3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00045e7:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00045eb:	50                   	push   eax
c00045ec:	e8 9b d7 ff ff       	call   c0001d8c <disk_read>
c00045f1:	83 c4 10             	add    esp,0x10
c00045f4:	85 c0                	test   eax,eax
c00045f6:	0f 85 0f ff ff ff    	jne    c000450b <f_lseek+0xb3>
c00045fc:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c00045ff:	83 c4 2c             	add    esp,0x2c
c0004602:	89 e8                	mov    eax,ebp
c0004604:	5b                   	pop    ebx
c0004605:	5e                   	pop    esi
c0004606:	5f                   	pop    edi
c0004607:	5d                   	pop    ebp
c0004608:	c3                   	ret    

c0004609 <f_opendir>:
c0004609:	56                   	push   esi
c000460a:	b8 09 00 00 00       	mov    eax,0x9
c000460f:	53                   	push   ebx
c0004610:	83 ec 24             	sub    esp,0x24
c0004613:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0004617:	85 db                	test   ebx,ebx
c0004619:	0f 84 af 00 00 00    	je     c00046ce <f_opendir+0xc5>
c000461f:	31 c9                	xor    ecx,ecx
c0004621:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004625:	8d 44 24 34          	lea    eax,[esp+0x34]
c0004629:	e8 63 de ff ff       	call   c0002491 <mount_volume>
c000462e:	85 c0                	test   eax,eax
c0004630:	0f 85 92 00 00 00    	jne    c00046c8 <f_opendir+0xbf>
c0004636:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000463a:	83 ec 0c             	sub    esp,0xc
c000463d:	89 03                	mov    DWORD PTR [ebx],eax
c000463f:	68 00 02 00 00       	push   0x200
c0004644:	e8 d7 15 00 00       	call   c0005c20 <ff_memalloc>
c0004649:	83 c4 10             	add    esp,0x10
c000464c:	89 c6                	mov    esi,eax
c000464e:	b8 11 00 00 00       	mov    eax,0x11
c0004653:	85 f6                	test   esi,esi
c0004655:	74 77                	je     c00046ce <f_opendir+0xc5>
c0004657:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000465b:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000465f:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004662:	89 d8                	mov    eax,ebx
c0004664:	e8 72 f3 ff ff       	call   c00039db <follow_path>
c0004669:	85 c0                	test   eax,eax
c000466b:	75 37                	jne    c00046a4 <f_opendir+0x9b>
c000466d:	f6 43 2b 80          	test   BYTE PTR [ebx+0x2b],0x80
c0004671:	75 1c                	jne    c000468f <f_opendir+0x86>
c0004673:	b8 05 00 00 00       	mov    eax,0x5
c0004678:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c000467c:	74 26                	je     c00046a4 <f_opendir+0x9b>
c000467e:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0004681:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004685:	8a 00                	mov    al,BYTE PTR [eax]
c0004687:	e8 37 eb ff ff       	call   c00031c3 <ld_clust.isra.0>
c000468c:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000468f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004693:	31 d2                	xor    edx,edx
c0004695:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0004699:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c000469d:	89 d8                	mov    eax,ebx
c000469f:	e8 74 ec ff ff       	call   c0003318 <dir_sdi>
c00046a4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00046a8:	83 ec 0c             	sub    esp,0xc
c00046ab:	56                   	push   esi
c00046ac:	e8 87 15 00 00       	call   c0005c38 <ff_memfree>
c00046b1:	83 c4 10             	add    esp,0x10
c00046b4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00046b8:	83 f8 04             	cmp    eax,0x4
c00046bb:	74 06                	je     c00046c3 <f_opendir+0xba>
c00046bd:	85 c0                	test   eax,eax
c00046bf:	74 0d                	je     c00046ce <f_opendir+0xc5>
c00046c1:	eb 05                	jmp    c00046c8 <f_opendir+0xbf>
c00046c3:	b8 05 00 00 00       	mov    eax,0x5
c00046c8:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00046ce:	83 c4 24             	add    esp,0x24
c00046d1:	5b                   	pop    ebx
c00046d2:	5e                   	pop    esi
c00046d3:	c3                   	ret    

c00046d4 <f_closedir>:
c00046d4:	53                   	push   ebx
c00046d5:	83 ec 18             	sub    esp,0x18
c00046d8:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00046dc:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00046e0:	89 d8                	mov    eax,ebx
c00046e2:	e8 ae db ff ff       	call   c0002295 <validate>
c00046e7:	85 c0                	test   eax,eax
c00046e9:	75 06                	jne    c00046f1 <f_closedir+0x1d>
c00046eb:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00046f1:	83 c4 18             	add    esp,0x18
c00046f4:	5b                   	pop    ebx
c00046f5:	c3                   	ret    

c00046f6 <f_readdir>:
c00046f6:	57                   	push   edi
c00046f7:	56                   	push   esi
c00046f8:	53                   	push   ebx
c00046f9:	83 ec 20             	sub    esp,0x20
c00046fc:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0004700:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0004704:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004708:	89 d8                	mov    eax,ebx
c000470a:	e8 86 db ff ff       	call   c0002295 <validate>
c000470f:	85 c0                	test   eax,eax
c0004711:	75 6e                	jne    c0004781 <f_readdir+0x8b>
c0004713:	85 ff                	test   edi,edi
c0004715:	75 0b                	jne    c0004722 <f_readdir+0x2c>
c0004717:	31 d2                	xor    edx,edx
c0004719:	89 d8                	mov    eax,ebx
c000471b:	e8 f8 eb ff ff       	call   c0003318 <dir_sdi>
c0004720:	eb 5f                	jmp    c0004781 <f_readdir+0x8b>
c0004722:	83 ec 0c             	sub    esp,0xc
c0004725:	68 00 02 00 00       	push   0x200
c000472a:	e8 f1 14 00 00       	call   c0005c20 <ff_memalloc>
c000472f:	83 c4 10             	add    esp,0x10
c0004732:	89 c6                	mov    esi,eax
c0004734:	b8 11 00 00 00       	mov    eax,0x11
c0004739:	85 f6                	test   esi,esi
c000473b:	74 44                	je     c0004781 <f_readdir+0x8b>
c000473d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004741:	31 d2                	xor    edx,edx
c0004743:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004746:	89 d8                	mov    eax,ebx
c0004748:	e8 ca ef ff ff       	call   c0003717 <dir_read>
c000474d:	a9 fb ff ff ff       	test   eax,0xfffffffb
c0004752:	75 19                	jne    c000476d <f_readdir+0x77>
c0004754:	89 fa                	mov    edx,edi
c0004756:	89 d8                	mov    eax,ebx
c0004758:	e8 70 e8 ff ff       	call   c0002fcd <get_fileinfo>
c000475d:	31 d2                	xor    edx,edx
c000475f:	89 d8                	mov    eax,ebx
c0004761:	e8 47 ee ff ff       	call   c00035ad <dir_next>
c0004766:	83 f8 04             	cmp    eax,0x4
c0004769:	75 02                	jne    c000476d <f_readdir+0x77>
c000476b:	31 c0                	xor    eax,eax
c000476d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004771:	83 ec 0c             	sub    esp,0xc
c0004774:	56                   	push   esi
c0004775:	e8 be 14 00 00       	call   c0005c38 <ff_memfree>
c000477a:	83 c4 10             	add    esp,0x10
c000477d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004781:	83 c4 20             	add    esp,0x20
c0004784:	5b                   	pop    ebx
c0004785:	5e                   	pop    esi
c0004786:	5f                   	pop    edi
c0004787:	c3                   	ret    

c0004788 <f_stat>:
c0004788:	57                   	push   edi
c0004789:	31 c9                	xor    ecx,ecx
c000478b:	56                   	push   esi
c000478c:	53                   	push   ebx
c000478d:	83 ec 30             	sub    esp,0x30
c0004790:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0004794:	89 e2                	mov    edx,esp
c0004796:	8d 44 24 40          	lea    eax,[esp+0x40]
c000479a:	e8 f2 dc ff ff       	call   c0002491 <mount_volume>
c000479f:	89 c3                	mov    ebx,eax
c00047a1:	85 c0                	test   eax,eax
c00047a3:	75 59                	jne    c00047fe <f_stat+0x76>
c00047a5:	83 ec 0c             	sub    esp,0xc
c00047a8:	bb 11 00 00 00       	mov    ebx,0x11
c00047ad:	68 00 02 00 00       	push   0x200
c00047b2:	e8 69 14 00 00       	call   c0005c20 <ff_memalloc>
c00047b7:	83 c4 10             	add    esp,0x10
c00047ba:	89 c6                	mov    esi,eax
c00047bc:	85 c0                	test   eax,eax
c00047be:	74 3e                	je     c00047fe <f_stat+0x76>
c00047c0:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00047c3:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00047c7:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00047ca:	89 e0                	mov    eax,esp
c00047cc:	e8 0a f2 ff ff       	call   c00039db <follow_path>
c00047d1:	89 c3                	mov    ebx,eax
c00047d3:	85 c0                	test   eax,eax
c00047d5:	75 1b                	jne    c00047f2 <f_stat+0x6a>
c00047d7:	f6 44 24 2b 80       	test   BYTE PTR [esp+0x2b],0x80
c00047dc:	75 0f                	jne    c00047ed <f_stat+0x65>
c00047de:	85 ff                	test   edi,edi
c00047e0:	74 10                	je     c00047f2 <f_stat+0x6a>
c00047e2:	89 fa                	mov    edx,edi
c00047e4:	89 e0                	mov    eax,esp
c00047e6:	e8 e2 e7 ff ff       	call   c0002fcd <get_fileinfo>
c00047eb:	eb 05                	jmp    c00047f2 <f_stat+0x6a>
c00047ed:	bb 06 00 00 00       	mov    ebx,0x6
c00047f2:	83 ec 0c             	sub    esp,0xc
c00047f5:	56                   	push   esi
c00047f6:	e8 3d 14 00 00       	call   c0005c38 <ff_memfree>
c00047fb:	83 c4 10             	add    esp,0x10
c00047fe:	83 c4 30             	add    esp,0x30
c0004801:	89 d8                	mov    eax,ebx
c0004803:	5b                   	pop    ebx
c0004804:	5e                   	pop    esi
c0004805:	5f                   	pop    edi
c0004806:	c3                   	ret    

c0004807 <f_getfree>:
c0004807:	55                   	push   ebp
c0004808:	31 c9                	xor    ecx,ecx
c000480a:	57                   	push   edi
c000480b:	56                   	push   esi
c000480c:	53                   	push   ebx
c000480d:	83 ec 2c             	sub    esp,0x2c
c0004810:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004814:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004818:	e8 74 dc ff ff       	call   c0002491 <mount_volume>
c000481d:	89 c7                	mov    edi,eax
c000481f:	85 c0                	test   eax,eax
c0004821:	0f 85 df 00 00 00    	jne    c0004906 <f_getfree+0xff>
c0004827:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000482b:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000482f:	89 30                	mov    DWORD PTR [eax],esi
c0004831:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0004834:	8b 6e 18             	mov    ebp,DWORD PTR [esi+0x18]
c0004837:	8d 55 fe             	lea    edx,[ebp-0x2]
c000483a:	39 d0                	cmp    eax,edx
c000483c:	77 0b                	ja     c0004849 <f_getfree+0x42>
c000483e:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c0004842:	89 01                	mov    DWORD PTR [ecx],eax
c0004844:	e9 bd 00 00 00       	jmp    c0004906 <f_getfree+0xff>
c0004849:	80 3e 01             	cmp    BYTE PTR [esi],0x1
c000484c:	75 29                	jne    c0004877 <f_getfree+0x70>
c000484e:	bd 02 00 00 00       	mov    ebp,0x2
c0004853:	31 db                	xor    ebx,ebx
c0004855:	89 ea                	mov    edx,ebp
c0004857:	89 f0                	mov    eax,esi
c0004859:	e8 b6 e9 ff ff       	call   c0003214 <get_fat.isra.2>
c000485e:	83 f8 ff             	cmp    eax,0xffffffff
c0004861:	74 7d                	je     c00048e0 <f_getfree+0xd9>
c0004863:	83 f8 01             	cmp    eax,0x1
c0004866:	74 7f                	je     c00048e7 <f_getfree+0xe0>
c0004868:	83 d3 00             	adc    ebx,0x0
c000486b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000486f:	45                   	inc    ebp
c0004870:	39 68 18             	cmp    DWORD PTR [eax+0x18],ebp
c0004873:	77 e0                	ja     c0004855 <f_getfree+0x4e>
c0004875:	eb 79                	jmp    c00048f0 <f_getfree+0xe9>
c0004877:	8b 56 24             	mov    edx,DWORD PTR [esi+0x24]
c000487a:	31 db                	xor    ebx,ebx
c000487c:	31 f6                	xor    esi,esi
c000487e:	85 f6                	test   esi,esi
c0004880:	75 18                	jne    c000489a <f_getfree+0x93>
c0004882:	8d 42 01             	lea    eax,[edx+0x1]
c0004885:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004889:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000488d:	e8 ac da ff ff       	call   c000233e <move_window>
c0004892:	85 c0                	test   eax,eax
c0004894:	75 58                	jne    c00048ee <f_getfree+0xe7>
c0004896:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000489a:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000489e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00048a2:	8d 44 31 34          	lea    eax,[ecx+esi*1+0x34]
c00048a6:	80 39 02             	cmp    BYTE PTR [ecx],0x2
c00048a9:	75 13                	jne    c00048be <f_getfree+0xb7>
c00048ab:	e8 27 d5 ff ff       	call   c0001dd7 <ld_word>
c00048b0:	0f b7 c0             	movzx  eax,ax
c00048b3:	83 f8 01             	cmp    eax,0x1
c00048b6:	83 d3 00             	adc    ebx,0x0
c00048b9:	83 c6 02             	add    esi,0x2
c00048bc:	eb 13                	jmp    c00048d1 <f_getfree+0xca>
c00048be:	e8 21 d5 ff ff       	call   c0001de4 <ld_dword>
c00048c3:	25 ff ff ff 0f       	and    eax,0xfffffff
c00048c8:	83 f8 01             	cmp    eax,0x1
c00048cb:	83 d3 00             	adc    ebx,0x0
c00048ce:	83 c6 04             	add    esi,0x4
c00048d1:	81 e6 ff 01 00 00    	and    esi,0x1ff
c00048d7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00048db:	4d                   	dec    ebp
c00048dc:	75 a0                	jne    c000487e <f_getfree+0x77>
c00048de:	eb 10                	jmp    c00048f0 <f_getfree+0xe9>
c00048e0:	bf 01 00 00 00       	mov    edi,0x1
c00048e5:	eb 09                	jmp    c00048f0 <f_getfree+0xe9>
c00048e7:	bf 02 00 00 00       	mov    edi,0x2
c00048ec:	eb 02                	jmp    c00048f0 <f_getfree+0xe9>
c00048ee:	89 c7                	mov    edi,eax
c00048f0:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00048f4:	89 18                	mov    DWORD PTR [eax],ebx
c00048f6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00048fa:	8a 50 04             	mov    dl,BYTE PTR [eax+0x4]
c00048fd:	89 58 14             	mov    DWORD PTR [eax+0x14],ebx
c0004900:	83 ca 01             	or     edx,0x1
c0004903:	88 50 04             	mov    BYTE PTR [eax+0x4],dl
c0004906:	83 c4 2c             	add    esp,0x2c
c0004909:	89 f8                	mov    eax,edi
c000490b:	5b                   	pop    ebx
c000490c:	5e                   	pop    esi
c000490d:	5f                   	pop    edi
c000490e:	5d                   	pop    ebp
c000490f:	c3                   	ret    

c0004910 <f_truncate>:
c0004910:	56                   	push   esi
c0004911:	53                   	push   ebx
c0004912:	83 ec 14             	sub    esp,0x14
c0004915:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0004919:	8d 54 24 0c          	lea    edx,[esp+0xc]
c000491d:	89 d8                	mov    eax,ebx
c000491f:	e8 71 d9 ff ff       	call   c0002295 <validate>
c0004924:	89 c6                	mov    esi,eax
c0004926:	85 c0                	test   eax,eax
c0004928:	0f 85 c4 00 00 00    	jne    c00049f2 <f_truncate+0xe2>
c000492e:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c0004932:	85 f6                	test   esi,esi
c0004934:	0f 85 b8 00 00 00    	jne    c00049f2 <f_truncate+0xe2>
c000493a:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c000493e:	0f 84 a9 00 00 00    	je     c00049ed <f_truncate+0xdd>
c0004944:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004947:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c000494a:	0f 83 a2 00 00 00    	jae    c00049f2 <f_truncate+0xe2>
c0004950:	85 c0                	test   eax,eax
c0004952:	75 15                	jne    c0004969 <f_truncate+0x59>
c0004954:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0004957:	31 c9                	xor    ecx,ecx
c0004959:	89 d8                	mov    eax,ebx
c000495b:	e8 bf eb ff ff       	call   c000351f <remove_chain>
c0004960:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0004967:	eb 35                	jmp    c000499e <f_truncate+0x8e>
c0004969:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000496c:	8b 03                	mov    eax,DWORD PTR [ebx]
c000496e:	e8 a1 e8 ff ff       	call   c0003214 <get_fat.isra.2>
c0004973:	89 c2                	mov    edx,eax
c0004975:	b8 01 00 00 00       	mov    eax,0x1
c000497a:	83 fa ff             	cmp    edx,0xffffffff
c000497d:	74 1f                	je     c000499e <f_truncate+0x8e>
c000497f:	b8 02 00 00 00       	mov    eax,0x2
c0004984:	83 fa 01             	cmp    edx,0x1
c0004987:	74 15                	je     c000499e <f_truncate+0x8e>
c0004989:	31 c0                	xor    eax,eax
c000498b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000498f:	39 51 18             	cmp    DWORD PTR [ecx+0x18],edx
c0004992:	76 0a                	jbe    c000499e <f_truncate+0x8e>
c0004994:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c0004997:	89 d8                	mov    eax,ebx
c0004999:	e8 81 eb ff ff       	call   c000351f <remove_chain>
c000499e:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00049a1:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00049a4:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c00049a7:	83 ca 40             	or     edx,0x40
c00049aa:	85 c0                	test   eax,eax
c00049ac:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c00049af:	75 35                	jne    c00049e6 <f_truncate+0xd6>
c00049b1:	80 e2 80             	and    dl,0x80
c00049b4:	74 3c                	je     c00049f2 <f_truncate+0xe2>
c00049b6:	6a 01                	push   0x1
c00049b8:	8d 43 28             	lea    eax,[ebx+0x28]
c00049bb:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00049be:	50                   	push   eax
c00049bf:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00049c3:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00049c7:	50                   	push   eax
c00049c8:	e8 d5 d3 ff ff       	call   c0001da2 <disk_write>
c00049cd:	83 c4 10             	add    esp,0x10
c00049d0:	85 c0                	test   eax,eax
c00049d2:	75 0d                	jne    c00049e1 <f_truncate+0xd1>
c00049d4:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00049d7:	31 f6                	xor    esi,esi
c00049d9:	83 e0 7f             	and    eax,0x7f
c00049dc:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00049df:	eb 11                	jmp    c00049f2 <f_truncate+0xe2>
c00049e1:	b8 01 00 00 00       	mov    eax,0x1
c00049e6:	88 43 11             	mov    BYTE PTR [ebx+0x11],al
c00049e9:	89 c6                	mov    esi,eax
c00049eb:	eb 05                	jmp    c00049f2 <f_truncate+0xe2>
c00049ed:	be 07 00 00 00       	mov    esi,0x7
c00049f2:	89 f0                	mov    eax,esi
c00049f4:	83 c4 14             	add    esp,0x14
c00049f7:	5b                   	pop    ebx
c00049f8:	5e                   	pop    esi
c00049f9:	c3                   	ret    

c00049fa <f_unlink>:
c00049fa:	55                   	push   ebp
c00049fb:	b9 02 00 00 00       	mov    ecx,0x2
c0004a00:	57                   	push   edi
c0004a01:	56                   	push   esi
c0004a02:	53                   	push   ebx
c0004a03:	81 ec 8c 00 00 00    	sub    esp,0x8c
c0004a09:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004a0d:	8d 84 24 a0 00 00 00 	lea    eax,[esp+0xa0]
c0004a14:	e8 78 da ff ff       	call   c0002491 <mount_volume>
c0004a19:	85 c0                	test   eax,eax
c0004a1b:	0f 85 f0 00 00 00    	jne    c0004b11 <f_unlink+0x117>
c0004a21:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004a25:	83 ec 0c             	sub    esp,0xc
c0004a28:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004a2c:	68 00 02 00 00       	push   0x200
c0004a31:	e8 ea 11 00 00       	call   c0005c20 <ff_memalloc>
c0004a36:	83 c4 10             	add    esp,0x10
c0004a39:	89 c3                	mov    ebx,eax
c0004a3b:	b8 11 00 00 00       	mov    eax,0x11
c0004a40:	85 db                	test   ebx,ebx
c0004a42:	0f 84 c9 00 00 00    	je     c0004b11 <f_unlink+0x117>
c0004a48:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004a4c:	8b 94 24 a0 00 00 00 	mov    edx,DWORD PTR [esp+0xa0]
c0004a53:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0004a56:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004a5a:	e8 7c ef ff ff       	call   c00039db <follow_path>
c0004a5f:	85 c0                	test   eax,eax
c0004a61:	0f 85 96 00 00 00    	jne    c0004afd <f_unlink+0x103>
c0004a67:	b8 06 00 00 00       	mov    eax,0x6
c0004a6c:	f6 44 24 4b 80       	test   BYTE PTR [esp+0x4b],0x80
c0004a71:	0f 85 86 00 00 00    	jne    c0004afd <f_unlink+0x103>
c0004a77:	0f b6 6c 24 26       	movzx  ebp,BYTE PTR [esp+0x26]
c0004a7c:	f7 c5 01 00 00 00    	test   ebp,0x1
c0004a82:	74 07                	je     c0004a8b <f_unlink+0x91>
c0004a84:	b8 07 00 00 00       	mov    eax,0x7
c0004a89:	eb 72                	jmp    c0004afd <f_unlink+0x103>
c0004a8b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0004a8f:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004a93:	8a 07                	mov    al,BYTE PTR [edi]
c0004a95:	e8 29 e7 ff ff       	call   c00031c3 <ld_clust.isra.0>
c0004a9a:	83 e5 10             	and    ebp,0x10
c0004a9d:	89 c6                	mov    esi,eax
c0004a9f:	75 0f                	jne    c0004ab0 <f_unlink+0xb6>
c0004aa1:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004aa5:	e8 95 ed ff ff       	call   c000383f <dir_remove>
c0004aaa:	85 c0                	test   eax,eax
c0004aac:	74 2f                	je     c0004add <f_unlink+0xe3>
c0004aae:	eb 4d                	jmp    c0004afd <f_unlink+0x103>
c0004ab0:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0004ab4:	31 d2                	xor    edx,edx
c0004ab6:	89 7c 24 50          	mov    DWORD PTR [esp+0x50],edi
c0004aba:	8d 44 24 50          	lea    eax,[esp+0x50]
c0004abe:	e8 55 e8 ff ff       	call   c0003318 <dir_sdi>
c0004ac3:	85 c0                	test   eax,eax
c0004ac5:	75 36                	jne    c0004afd <f_unlink+0x103>
c0004ac7:	31 d2                	xor    edx,edx
c0004ac9:	8d 44 24 50          	lea    eax,[esp+0x50]
c0004acd:	e8 45 ec ff ff       	call   c0003717 <dir_read>
c0004ad2:	85 c0                	test   eax,eax
c0004ad4:	74 ae                	je     c0004a84 <f_unlink+0x8a>
c0004ad6:	83 f8 04             	cmp    eax,0x4
c0004ad9:	75 22                	jne    c0004afd <f_unlink+0x103>
c0004adb:	eb c4                	jmp    c0004aa1 <f_unlink+0xa7>
c0004add:	85 f6                	test   esi,esi
c0004adf:	75 0b                	jne    c0004aec <f_unlink+0xf2>
c0004ae1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ae5:	e8 8b e2 ff ff       	call   c0002d75 <sync_fs>
c0004aea:	eb 11                	jmp    c0004afd <f_unlink+0x103>
c0004aec:	31 c9                	xor    ecx,ecx
c0004aee:	89 f2                	mov    edx,esi
c0004af0:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004af4:	e8 26 ea ff ff       	call   c000351f <remove_chain>
c0004af9:	85 c0                	test   eax,eax
c0004afb:	74 e4                	je     c0004ae1 <f_unlink+0xe7>
c0004afd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004b01:	83 ec 0c             	sub    esp,0xc
c0004b04:	53                   	push   ebx
c0004b05:	e8 2e 11 00 00       	call   c0005c38 <ff_memfree>
c0004b0a:	83 c4 10             	add    esp,0x10
c0004b0d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b11:	81 c4 8c 00 00 00    	add    esp,0x8c
c0004b17:	5b                   	pop    ebx
c0004b18:	5e                   	pop    esi
c0004b19:	5f                   	pop    edi
c0004b1a:	5d                   	pop    ebp
c0004b1b:	c3                   	ret    

c0004b1c <f_mkdir>:
c0004b1c:	57                   	push   edi
c0004b1d:	b9 02 00 00 00       	mov    ecx,0x2
c0004b22:	56                   	push   esi
c0004b23:	53                   	push   ebx
c0004b24:	83 ec 50             	sub    esp,0x50
c0004b27:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004b2b:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004b2f:	e8 5d d9 ff ff       	call   c0002491 <mount_volume>
c0004b34:	89 c3                	mov    ebx,eax
c0004b36:	85 c0                	test   eax,eax
c0004b38:	0f 85 70 01 00 00    	jne    c0004cae <f_mkdir+0x192>
c0004b3e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b42:	bb 11 00 00 00       	mov    ebx,0x11
c0004b47:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0004b4b:	83 ec 0c             	sub    esp,0xc
c0004b4e:	68 00 02 00 00       	push   0x200
c0004b53:	e8 c8 10 00 00       	call   c0005c20 <ff_memalloc>
c0004b58:	83 c4 10             	add    esp,0x10
c0004b5b:	89 c7                	mov    edi,eax
c0004b5d:	85 c0                	test   eax,eax
c0004b5f:	0f 84 49 01 00 00    	je     c0004cae <f_mkdir+0x192>
c0004b65:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b69:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004b6d:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c0004b70:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004b74:	e8 62 ee ff ff       	call   c00039db <follow_path>
c0004b79:	89 c3                	mov    ebx,eax
c0004b7b:	85 c0                	test   eax,eax
c0004b7d:	74 3e                	je     c0004bbd <f_mkdir+0xa1>
c0004b7f:	83 f8 04             	cmp    eax,0x4
c0004b82:	75 3e                	jne    c0004bc2 <f_mkdir+0xa6>
c0004b84:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b88:	31 d2                	xor    edx,edx
c0004b8a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004b8e:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004b92:	e8 49 e8 ff ff       	call   c00033e0 <create_chain>
c0004b97:	89 c6                	mov    esi,eax
c0004b99:	85 c0                	test   eax,eax
c0004b9b:	74 0c                	je     c0004ba9 <f_mkdir+0x8d>
c0004b9d:	bb 02 00 00 00       	mov    ebx,0x2
c0004ba2:	83 f8 01             	cmp    eax,0x1
c0004ba5:	74 07                	je     c0004bae <f_mkdir+0x92>
c0004ba7:	eb 2a                	jmp    c0004bd3 <f_mkdir+0xb7>
c0004ba9:	bb 07 00 00 00       	mov    ebx,0x7
c0004bae:	31 c9                	xor    ecx,ecx
c0004bb0:	89 f2                	mov    edx,esi
c0004bb2:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004bb6:	e8 64 e9 ff ff       	call   c000351f <remove_chain>
c0004bbb:	eb 05                	jmp    c0004bc2 <f_mkdir+0xa6>
c0004bbd:	bb 08 00 00 00       	mov    ebx,0x8
c0004bc2:	83 ec 0c             	sub    esp,0xc
c0004bc5:	57                   	push   edi
c0004bc6:	e8 6d 10 00 00       	call   c0005c38 <ff_memfree>
c0004bcb:	83 c4 10             	add    esp,0x10
c0004bce:	e9 db 00 00 00       	jmp    c0004cae <f_mkdir+0x192>
c0004bd3:	bb 01 00 00 00       	mov    ebx,0x1
c0004bd8:	83 f8 ff             	cmp    eax,0xffffffff
c0004bdb:	74 d1                	je     c0004bae <f_mkdir+0x92>
c0004bdd:	89 f2                	mov    edx,esi
c0004bdf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004be3:	e8 f1 dc ff ff       	call   c00028d9 <dir_clear>
c0004be8:	89 c3                	mov    ebx,eax
c0004bea:	85 c0                	test   eax,eax
c0004bec:	75 c0                	jne    c0004bae <f_mkdir+0x92>
c0004bee:	b9 0b 00 00 00       	mov    ecx,0xb
c0004bf3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004bf7:	ba 20 00 00 00       	mov    edx,0x20
c0004bfc:	83 c0 34             	add    eax,0x34
c0004bff:	e8 14 d2 ff ff       	call   c0001e18 <mem_set>
c0004c04:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c08:	ba 00 00 21 50       	mov    edx,0x50210000
c0004c0d:	c6 40 34 2e          	mov    BYTE PTR [eax+0x34],0x2e
c0004c11:	c6 40 3f 10          	mov    BYTE PTR [eax+0x3f],0x10
c0004c15:	83 c0 4a             	add    eax,0x4a
c0004c18:	e8 e3 d1 ff ff       	call   c0001e00 <st_dword>
c0004c1d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c21:	89 f1                	mov    ecx,esi
c0004c23:	8d 50 34             	lea    edx,[eax+0x34]
c0004c26:	e8 c1 e5 ff ff       	call   c00031ec <st_clust.isra.1>
c0004c2b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c2f:	b9 20 00 00 00       	mov    ecx,0x20
c0004c34:	8d 50 34             	lea    edx,[eax+0x34]
c0004c37:	83 c0 54             	add    eax,0x54
c0004c3a:	e8 c4 d1 ff ff       	call   c0001e03 <mem_cpy>
c0004c3f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c43:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0004c47:	8d 50 54             	lea    edx,[eax+0x54]
c0004c4a:	c6 40 55 2e          	mov    BYTE PTR [eax+0x55],0x2e
c0004c4e:	e8 99 e5 ff ff       	call   c00031ec <st_clust.isra.1>
c0004c53:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c57:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004c5b:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004c5f:	e8 0c ee ff ff       	call   c0003a70 <dir_register>
c0004c64:	89 c3                	mov    ebx,eax
c0004c66:	85 c0                	test   eax,eax
c0004c68:	0f 85 40 ff ff ff    	jne    c0004bae <f_mkdir+0x92>
c0004c6e:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004c72:	ba 00 00 21 50       	mov    edx,0x50210000
c0004c77:	83 c0 16             	add    eax,0x16
c0004c7a:	e8 81 d1 ff ff       	call   c0001e00 <st_dword>
c0004c7f:	89 f1                	mov    ecx,esi
c0004c81:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004c85:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c89:	e8 5e e5 ff ff       	call   c00031ec <st_clust.isra.1>
c0004c8e:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004c92:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c0004c96:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c9a:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004c9e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004ca2:	e8 ce e0 ff ff       	call   c0002d75 <sync_fs>
c0004ca7:	89 c3                	mov    ebx,eax
c0004ca9:	e9 14 ff ff ff       	jmp    c0004bc2 <f_mkdir+0xa6>
c0004cae:	83 c4 50             	add    esp,0x50
c0004cb1:	89 d8                	mov    eax,ebx
c0004cb3:	5b                   	pop    ebx
c0004cb4:	5e                   	pop    esi
c0004cb5:	5f                   	pop    edi
c0004cb6:	c3                   	ret    

c0004cb7 <f_rename>:
c0004cb7:	57                   	push   edi
c0004cb8:	56                   	push   esi
c0004cb9:	53                   	push   ebx
c0004cba:	81 ec a0 00 00 00    	sub    esp,0xa0
c0004cc0:	8d 84 24 b4 00 00 00 	lea    eax,[esp+0xb4]
c0004cc7:	e8 7c d5 ff ff       	call   c0002248 <get_ldnumber>
c0004ccc:	b9 02 00 00 00       	mov    ecx,0x2
c0004cd1:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004cd5:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c0004cdc:	e8 b0 d7 ff ff       	call   c0002491 <mount_volume>
c0004ce1:	85 c0                	test   eax,eax
c0004ce3:	0f 85 7c 01 00 00    	jne    c0004e65 <f_rename+0x1ae>
c0004ce9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ced:	83 ec 0c             	sub    esp,0xc
c0004cf0:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0004cf4:	68 00 02 00 00       	push   0x200
c0004cf9:	e8 22 0f 00 00       	call   c0005c20 <ff_memalloc>
c0004cfe:	83 c4 10             	add    esp,0x10
c0004d01:	89 c6                	mov    esi,eax
c0004d03:	b8 11 00 00 00       	mov    eax,0x11
c0004d08:	85 f6                	test   esi,esi
c0004d0a:	0f 84 55 01 00 00    	je     c0004e65 <f_rename+0x1ae>
c0004d10:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004d14:	8b 94 24 b0 00 00 00 	mov    edx,DWORD PTR [esp+0xb0]
c0004d1b:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004d1e:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004d22:	e8 b4 ec ff ff       	call   c00039db <follow_path>
c0004d27:	85 c0                	test   eax,eax
c0004d29:	0f 85 22 01 00 00    	jne    c0004e51 <f_rename+0x19a>
c0004d2f:	8a 54 24 6b          	mov    dl,BYTE PTR [esp+0x6b]
c0004d33:	b8 06 00 00 00       	mov    eax,0x6
c0004d38:	80 e2 a0             	and    dl,0xa0
c0004d3b:	0f 85 10 01 00 00    	jne    c0004e51 <f_rename+0x19a>
c0004d41:	b9 20 00 00 00       	mov    ecx,0x20
c0004d46:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004d4a:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004d4e:	e8 b0 d0 ff ff       	call   c0001e03 <mem_cpy>
c0004d53:	b9 30 00 00 00       	mov    ecx,0x30
c0004d58:	8d 54 24 40          	lea    edx,[esp+0x40]
c0004d5c:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004d60:	e8 9e d0 ff ff       	call   c0001e03 <mem_cpy>
c0004d65:	8b 94 24 b4 00 00 00 	mov    edx,DWORD PTR [esp+0xb4]
c0004d6c:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004d70:	e8 66 ec ff ff       	call   c00039db <follow_path>
c0004d75:	85 c0                	test   eax,eax
c0004d77:	75 20                	jne    c0004d99 <f_rename+0xe2>
c0004d79:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0004d7d:	b8 08 00 00 00       	mov    eax,0x8
c0004d82:	39 7c 24 78          	cmp    DWORD PTR [esp+0x78],edi
c0004d86:	0f 85 c5 00 00 00    	jne    c0004e51 <f_rename+0x19a>
c0004d8c:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0004d90:	39 8c 24 80 00 00 00 	cmp    DWORD PTR [esp+0x80],ecx
c0004d97:	eb 03                	jmp    c0004d9c <f_rename+0xe5>
c0004d99:	83 f8 04             	cmp    eax,0x4
c0004d9c:	0f 85 af 00 00 00    	jne    c0004e51 <f_rename+0x19a>
c0004da2:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004da6:	e8 c5 ec ff ff       	call   c0003a70 <dir_register>
c0004dab:	85 c0                	test   eax,eax
c0004dad:	0f 85 9e 00 00 00    	jne    c0004e51 <f_rename+0x19a>
c0004db3:	8b 9c 24 8c 00 00 00 	mov    ebx,DWORD PTR [esp+0x8c]
c0004dba:	b9 13 00 00 00       	mov    ecx,0x13
c0004dbf:	8d 43 0d             	lea    eax,[ebx+0xd]
c0004dc2:	8d 54 24 2d          	lea    edx,[esp+0x2d]
c0004dc6:	e8 38 d0 ff ff       	call   c0001e03 <mem_cpy>
c0004dcb:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c0004dcf:	a8 10                	test   al,0x10
c0004dd1:	75 03                	jne    c0004dd6 <f_rename+0x11f>
c0004dd3:	83 c8 20             	or     eax,0x20
c0004dd6:	88 43 0b             	mov    BYTE PTR [ebx+0xb],al
c0004dd9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ddd:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004de1:	f6 43 0b 10          	test   BYTE PTR [ebx+0xb],0x10
c0004de5:	74 54                	je     c0004e3b <f_rename+0x184>
c0004de7:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0004deb:	39 44 24 48          	cmp    DWORD PTR [esp+0x48],eax
c0004def:	74 4a                	je     c0004e3b <f_rename+0x184>
c0004df1:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0004df5:	89 da                	mov    edx,ebx
c0004df7:	8a 07                	mov    al,BYTE PTR [edi]
c0004df9:	e8 c5 e3 ff ff       	call   c00031c3 <ld_clust.isra.0>
c0004dfe:	89 c2                	mov    edx,eax
c0004e00:	89 f8                	mov    eax,edi
c0004e02:	e8 27 d2 ff ff       	call   c000202e <clst2sect>
c0004e07:	89 c2                	mov    edx,eax
c0004e09:	b8 02 00 00 00       	mov    eax,0x2
c0004e0e:	85 d2                	test   edx,edx
c0004e10:	74 3f                	je     c0004e51 <f_rename+0x19a>
c0004e12:	89 f8                	mov    eax,edi
c0004e14:	e8 25 d5 ff ff       	call   c000233e <move_window>
c0004e19:	85 c0                	test   eax,eax
c0004e1b:	75 34                	jne    c0004e51 <f_rename+0x19a>
c0004e1d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e21:	80 78 55 2e          	cmp    BYTE PTR [eax+0x55],0x2e
c0004e25:	75 14                	jne    c0004e3b <f_rename+0x184>
c0004e27:	8d 50 54             	lea    edx,[eax+0x54]
c0004e2a:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c0004e2e:	e8 b9 e3 ff ff       	call   c00031ec <st_clust.isra.1>
c0004e33:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e37:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004e3b:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004e3f:	e8 fb e9 ff ff       	call   c000383f <dir_remove>
c0004e44:	85 c0                	test   eax,eax
c0004e46:	75 09                	jne    c0004e51 <f_rename+0x19a>
c0004e48:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e4c:	e8 24 df ff ff       	call   c0002d75 <sync_fs>
c0004e51:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004e55:	83 ec 0c             	sub    esp,0xc
c0004e58:	56                   	push   esi
c0004e59:	e8 da 0d 00 00       	call   c0005c38 <ff_memfree>
c0004e5e:	83 c4 10             	add    esp,0x10
c0004e61:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e65:	81 c4 a0 00 00 00    	add    esp,0xa0
c0004e6b:	5b                   	pop    ebx
c0004e6c:	5e                   	pop    esi
c0004e6d:	5f                   	pop    edi
c0004e6e:	c3                   	ret    

c0004e6f <f_chmod>:
c0004e6f:	57                   	push   edi
c0004e70:	b9 02 00 00 00       	mov    ecx,0x2
c0004e75:	56                   	push   esi
c0004e76:	53                   	push   ebx
c0004e77:	83 ec 50             	sub    esp,0x50
c0004e7a:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c0004e7e:	8b 5c 24 68          	mov    ebx,DWORD PTR [esp+0x68]
c0004e82:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004e86:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004e8a:	e8 02 d6 ff ff       	call   c0002491 <mount_volume>
c0004e8f:	85 c0                	test   eax,eax
c0004e91:	0f 85 81 00 00 00    	jne    c0004f18 <f_chmod+0xa9>
c0004e97:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e9b:	83 ec 0c             	sub    esp,0xc
c0004e9e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004ea2:	68 00 02 00 00       	push   0x200
c0004ea7:	e8 74 0d 00 00       	call   c0005c20 <ff_memalloc>
c0004eac:	83 c4 10             	add    esp,0x10
c0004eaf:	89 c6                	mov    esi,eax
c0004eb1:	b8 11 00 00 00       	mov    eax,0x11
c0004eb6:	85 f6                	test   esi,esi
c0004eb8:	74 5e                	je     c0004f18 <f_chmod+0xa9>
c0004eba:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ebe:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004ec2:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004ec5:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004ec9:	e8 0d eb ff ff       	call   c00039db <follow_path>
c0004ece:	85 c0                	test   eax,eax
c0004ed0:	75 32                	jne    c0004f04 <f_chmod+0x95>
c0004ed2:	8a 54 24 4b          	mov    dl,BYTE PTR [esp+0x4b]
c0004ed6:	b8 06 00 00 00       	mov    eax,0x6
c0004edb:	80 e2 a0             	and    dl,0xa0
c0004ede:	75 24                	jne    c0004f04 <f_chmod+0x95>
c0004ee0:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004ee4:	8a 50 0b             	mov    dl,BYTE PTR [eax+0xb]
c0004ee7:	31 d7                	xor    edi,edx
c0004ee9:	21 fb                	and    ebx,edi
c0004eeb:	83 e3 27             	and    ebx,0x27
c0004eee:	31 d3                	xor    ebx,edx
c0004ef0:	88 58 0b             	mov    BYTE PTR [eax+0xb],bl
c0004ef3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ef7:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004efb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004eff:	e8 71 de ff ff       	call   c0002d75 <sync_fs>
c0004f04:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004f08:	83 ec 0c             	sub    esp,0xc
c0004f0b:	56                   	push   esi
c0004f0c:	e8 27 0d 00 00       	call   c0005c38 <ff_memfree>
c0004f11:	83 c4 10             	add    esp,0x10
c0004f14:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004f18:	83 c4 50             	add    esp,0x50
c0004f1b:	5b                   	pop    ebx
c0004f1c:	5e                   	pop    esi
c0004f1d:	5f                   	pop    edi
c0004f1e:	c3                   	ret    

c0004f1f <f_utime>:
c0004f1f:	56                   	push   esi
c0004f20:	b9 02 00 00 00       	mov    ecx,0x2
c0004f25:	53                   	push   ebx
c0004f26:	83 ec 54             	sub    esp,0x54
c0004f29:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c0004f2d:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004f31:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004f35:	e8 57 d5 ff ff       	call   c0002491 <mount_volume>
c0004f3a:	85 c0                	test   eax,eax
c0004f3c:	0f 85 87 00 00 00    	jne    c0004fc9 <f_utime+0xaa>
c0004f42:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004f46:	83 ec 0c             	sub    esp,0xc
c0004f49:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004f4d:	68 00 02 00 00       	push   0x200
c0004f52:	e8 c9 0c 00 00       	call   c0005c20 <ff_memalloc>
c0004f57:	83 c4 10             	add    esp,0x10
c0004f5a:	89 c3                	mov    ebx,eax
c0004f5c:	b8 11 00 00 00       	mov    eax,0x11
c0004f61:	85 db                	test   ebx,ebx
c0004f63:	74 64                	je     c0004fc9 <f_utime+0xaa>
c0004f65:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004f69:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004f6d:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0004f70:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004f74:	e8 62 ea ff ff       	call   c00039db <follow_path>
c0004f79:	85 c0                	test   eax,eax
c0004f7b:	75 38                	jne    c0004fb5 <f_utime+0x96>
c0004f7d:	8a 54 24 4b          	mov    dl,BYTE PTR [esp+0x4b]
c0004f81:	b8 06 00 00 00       	mov    eax,0x6
c0004f86:	80 e2 a0             	and    dl,0xa0
c0004f89:	75 2a                	jne    c0004fb5 <f_utime+0x96>
c0004f8b:	0f b7 46 06          	movzx  eax,WORD PTR [esi+0x6]
c0004f8f:	0f b7 56 04          	movzx  edx,WORD PTR [esi+0x4]
c0004f93:	c1 e2 10             	shl    edx,0x10
c0004f96:	09 c2                	or     edx,eax
c0004f98:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004f9c:	83 c0 16             	add    eax,0x16
c0004f9f:	e8 5c ce ff ff       	call   c0001e00 <st_dword>
c0004fa4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004fa8:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004fac:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004fb0:	e8 c0 dd ff ff       	call   c0002d75 <sync_fs>
c0004fb5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004fb9:	83 ec 0c             	sub    esp,0xc
c0004fbc:	53                   	push   ebx
c0004fbd:	e8 76 0c 00 00       	call   c0005c38 <ff_memfree>
c0004fc2:	83 c4 10             	add    esp,0x10
c0004fc5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004fc9:	83 c4 54             	add    esp,0x54
c0004fcc:	5b                   	pop    ebx
c0004fcd:	5e                   	pop    esi
c0004fce:	c3                   	ret    

c0004fcf <f_getlabel>:
c0004fcf:	55                   	push   ebp
c0004fd0:	31 c9                	xor    ecx,ecx
c0004fd2:	57                   	push   edi
c0004fd3:	56                   	push   esi
c0004fd4:	53                   	push   ebx
c0004fd5:	83 ec 5c             	sub    esp,0x5c
c0004fd8:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004fdc:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004fe0:	e8 ac d4 ff ff       	call   c0002491 <mount_volume>
c0004fe5:	89 c6                	mov    esi,eax
c0004fe7:	85 c0                	test   eax,eax
c0004fe9:	0f 85 27 01 00 00    	jne    c0005116 <f_getlabel+0x147>
c0004fef:	83 7c 24 74 00       	cmp    DWORD PTR [esp+0x74],0x0
c0004ff4:	0f 84 d0 00 00 00    	je     c00050ca <f_getlabel+0xfb>
c0004ffa:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ffe:	31 d2                	xor    edx,edx
c0005000:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0005004:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c000500c:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005010:	e8 03 e3 ff ff       	call   c0003318 <dir_sdi>
c0005015:	85 c0                	test   eax,eax
c0005017:	0f 85 a1 00 00 00    	jne    c00050be <f_getlabel+0xef>
c000501d:	ba 01 00 00 00       	mov    edx,0x1
c0005022:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005026:	e8 ec e6 ff ff       	call   c0003717 <dir_read>
c000502b:	85 c0                	test   eax,eax
c000502d:	0f 85 8b 00 00 00    	jne    c00050be <f_getlabel+0xef>
c0005033:	31 db                	xor    ebx,ebx
c0005035:	31 c9                	xor    ecx,ecx
c0005037:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c000503b:	8d 79 01             	lea    edi,[ecx+0x1]
c000503e:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0005043:	0f b6 54 0d 00       	movzx  edx,BYTE PTR [ebp+ecx*1+0x0]
c0005048:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000504c:	e8 06 ce ff ff       	call   c0001e57 <dbc_1st>
c0005051:	85 c0                	test   eax,eax
c0005053:	74 16                	je     c000506b <f_getlabel+0x9c>
c0005055:	83 ff 0b             	cmp    edi,0xb
c0005058:	74 11                	je     c000506b <f_getlabel+0x9c>
c000505a:	0f b6 54 3d 00       	movzx  edx,BYTE PTR [ebp+edi*1+0x0]
c000505f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005063:	8d 79 02             	lea    edi,[ecx+0x2]
c0005066:	c1 e0 08             	shl    eax,0x8
c0005069:	09 c2                	or     edx,eax
c000506b:	0f b7 d2             	movzx  edx,dx
c000506e:	50                   	push   eax
c000506f:	50                   	push   eax
c0005070:	68 b5 01 00 00       	push   0x1b5
c0005075:	52                   	push   edx
c0005076:	e8 75 0c 00 00       	call   c0005cf0 <ff_oem2uni>
c000507b:	83 c4 10             	add    esp,0x10
c000507e:	0f b7 c0             	movzx  eax,ax
c0005081:	85 c0                	test   eax,eax
c0005083:	74 22                	je     c00050a7 <f_getlabel+0xd8>
c0005085:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0005089:	b9 04 00 00 00       	mov    ecx,0x4
c000508e:	01 da                	add    edx,ebx
c0005090:	e8 a0 ce ff ff       	call   c0001f35 <put_utf>
c0005095:	0f b6 c0             	movzx  eax,al
c0005098:	85 c0                	test   eax,eax
c000509a:	74 0b                	je     c00050a7 <f_getlabel+0xd8>
c000509c:	01 c3                	add    ebx,eax
c000509e:	83 ff 0b             	cmp    edi,0xb
c00050a1:	74 06                	je     c00050a9 <f_getlabel+0xda>
c00050a3:	89 f9                	mov    ecx,edi
c00050a5:	eb 90                	jmp    c0005037 <f_getlabel+0x68>
c00050a7:	31 db                	xor    ebx,ebx
c00050a9:	03 5c 24 74          	add    ebx,DWORD PTR [esp+0x74]
c00050ad:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c00050b0:	39 5c 24 74          	cmp    DWORD PTR [esp+0x74],ebx
c00050b4:	74 14                	je     c00050ca <f_getlabel+0xfb>
c00050b6:	4b                   	dec    ebx
c00050b7:	80 3b 20             	cmp    BYTE PTR [ebx],0x20
c00050ba:	74 f1                	je     c00050ad <f_getlabel+0xde>
c00050bc:	eb 0c                	jmp    c00050ca <f_getlabel+0xfb>
c00050be:	83 f8 04             	cmp    eax,0x4
c00050c1:	75 51                	jne    c0005114 <f_getlabel+0x145>
c00050c3:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c00050c7:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00050ca:	83 7c 24 78 00       	cmp    DWORD PTR [esp+0x78],0x0
c00050cf:	74 45                	je     c0005116 <f_getlabel+0x147>
c00050d1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00050d5:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c00050d8:	e8 61 d2 ff ff       	call   c000233e <move_window>
c00050dd:	89 c6                	mov    esi,eax
c00050df:	85 c0                	test   eax,eax
c00050e1:	75 33                	jne    c0005116 <f_getlabel+0x147>
c00050e3:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00050e7:	b8 43 00 00 00       	mov    eax,0x43
c00050ec:	0f b6 0a             	movzx  ecx,BYTE PTR [edx]
c00050ef:	83 f9 03             	cmp    ecx,0x3
c00050f2:	74 0f                	je     c0005103 <f_getlabel+0x134>
c00050f4:	31 c0                	xor    eax,eax
c00050f6:	83 f9 04             	cmp    ecx,0x4
c00050f9:	0f 94 c0             	sete   al
c00050fc:	48                   	dec    eax
c00050fd:	83 e0 c3             	and    eax,0xffffffc3
c0005100:	83 c0 64             	add    eax,0x64
c0005103:	8d 44 02 34          	lea    eax,[edx+eax*1+0x34]
c0005107:	e8 d8 cc ff ff       	call   c0001de4 <ld_dword>
c000510c:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0005110:	89 07                	mov    DWORD PTR [edi],eax
c0005112:	eb 02                	jmp    c0005116 <f_getlabel+0x147>
c0005114:	89 c6                	mov    esi,eax
c0005116:	83 c4 5c             	add    esp,0x5c
c0005119:	89 f0                	mov    eax,esi
c000511b:	5b                   	pop    ebx
c000511c:	5e                   	pop    esi
c000511d:	5f                   	pop    edi
c000511e:	5d                   	pop    ebp
c000511f:	c3                   	ret    

c0005120 <f_setlabel>:
c0005120:	57                   	push   edi
c0005121:	b9 02 00 00 00       	mov    ecx,0x2
c0005126:	56                   	push   esi
c0005127:	53                   	push   ebx
c0005128:	83 ec 50             	sub    esp,0x50
c000512b:	8d 54 24 04          	lea    edx,[esp+0x4]
c000512f:	8d 44 24 60          	lea    eax,[esp+0x60]
c0005133:	e8 59 d3 ff ff       	call   c0002491 <mount_volume>
c0005138:	89 c6                	mov    esi,eax
c000513a:	85 c0                	test   eax,eax
c000513c:	0f 85 65 01 00 00    	jne    c00052a7 <f_setlabel+0x187>
c0005142:	b9 0b 00 00 00       	mov    ecx,0xb
c0005147:	ba 20 00 00 00       	mov    edx,0x20
c000514c:	8d 44 24 0a          	lea    eax,[esp+0xa]
c0005150:	31 db                	xor    ebx,ebx
c0005152:	e8 c1 cc ff ff       	call   c0001e18 <mem_set>
c0005157:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000515b:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c000515e:	76 5d                	jbe    c00051bd <f_setlabel+0x9d>
c0005160:	8d 44 24 60          	lea    eax,[esp+0x60]
c0005164:	e8 f4 cc ff ff       	call   c0001e5d <tchar2uni>
c0005169:	3d ff ff 00 00       	cmp    eax,0xffff
c000516e:	76 0a                	jbe    c000517a <f_setlabel+0x5a>
c0005170:	be 06 00 00 00       	mov    esi,0x6
c0005175:	e9 2d 01 00 00       	jmp    c00052a7 <f_setlabel+0x187>
c000517a:	83 ec 0c             	sub    esp,0xc
c000517d:	50                   	push   eax
c000517e:	e8 e5 0b 00 00       	call   c0005d68 <ff_wtoupper>
c0005183:	5a                   	pop    edx
c0005184:	59                   	pop    ecx
c0005185:	68 b5 01 00 00       	push   0x1b5
c000518a:	50                   	push   eax
c000518b:	e8 c0 0a 00 00       	call   c0005c50 <ff_uni2oem>
c0005190:	83 c4 10             	add    esp,0x10
c0005193:	0f b7 f0             	movzx  esi,ax
c0005196:	89 f7                	mov    edi,esi
c0005198:	85 f6                	test   esi,esi
c000519a:	74 d4                	je     c0005170 <f_setlabel+0x50>
c000519c:	89 f2                	mov    edx,esi
c000519e:	b8 b0 ff 01 c0       	mov    eax,0xc001ffb0
c00051a3:	e8 9e cc ff ff       	call   c0001e46 <chk_chr>
c00051a8:	85 c0                	test   eax,eax
c00051aa:	75 c4                	jne    c0005170 <f_setlabel+0x50>
c00051ac:	81 fe ff 00 00 00    	cmp    esi,0xff
c00051b2:	0f 87 c9 00 00 00    	ja     c0005281 <f_setlabel+0x161>
c00051b8:	e9 e0 00 00 00       	jmp    c000529d <f_setlabel+0x17d>
c00051bd:	80 7c 24 0a e5       	cmp    BYTE PTR [esp+0xa],0xe5
c00051c2:	74 ac                	je     c0005170 <f_setlabel+0x50>
c00051c4:	85 db                	test   ebx,ebx
c00051c6:	74 0e                	je     c00051d6 <f_setlabel+0xb6>
c00051c8:	8d 43 ff             	lea    eax,[ebx-0x1]
c00051cb:	80 7c 1c 09 20       	cmp    BYTE PTR [esp+ebx*1+0x9],0x20
c00051d0:	75 04                	jne    c00051d6 <f_setlabel+0xb6>
c00051d2:	89 c3                	mov    ebx,eax
c00051d4:	eb ee                	jmp    c00051c4 <f_setlabel+0xa4>
c00051d6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00051da:	31 d2                	xor    edx,edx
c00051dc:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00051e0:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c00051e8:	8d 44 24 20          	lea    eax,[esp+0x20]
c00051ec:	e8 27 e1 ff ff       	call   c0003318 <dir_sdi>
c00051f1:	89 c6                	mov    esi,eax
c00051f3:	85 c0                	test   eax,eax
c00051f5:	0f 85 ac 00 00 00    	jne    c00052a7 <f_setlabel+0x187>
c00051fb:	ba 01 00 00 00       	mov    edx,0x1
c0005200:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005204:	e8 0e e5 ff ff       	call   c0003717 <dir_read>
c0005209:	85 c0                	test   eax,eax
c000520b:	75 18                	jne    c0005225 <f_setlabel+0x105>
c000520d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0005211:	85 db                	test   ebx,ebx
c0005213:	74 0b                	je     c0005220 <f_setlabel+0x100>
c0005215:	b9 0b 00 00 00       	mov    ecx,0xb
c000521a:	8d 54 24 0a          	lea    edx,[esp+0xa]
c000521e:	eb 47                	jmp    c0005267 <f_setlabel+0x147>
c0005220:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c0005223:	eb 47                	jmp    c000526c <f_setlabel+0x14c>
c0005225:	83 f8 04             	cmp    eax,0x4
c0005228:	75 53                	jne    c000527d <f_setlabel+0x15d>
c000522a:	85 db                	test   ebx,ebx
c000522c:	74 79                	je     c00052a7 <f_setlabel+0x187>
c000522e:	ba 01 00 00 00       	mov    edx,0x1
c0005233:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005237:	e8 76 e4 ff ff       	call   c00036b2 <dir_alloc>
c000523c:	89 c6                	mov    esi,eax
c000523e:	85 c0                	test   eax,eax
c0005240:	75 65                	jne    c00052a7 <f_setlabel+0x187>
c0005242:	b9 20 00 00 00       	mov    ecx,0x20
c0005247:	31 d2                	xor    edx,edx
c0005249:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000524d:	e8 c6 cb ff ff       	call   c0001e18 <mem_set>
c0005252:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0005256:	b9 0b 00 00 00       	mov    ecx,0xb
c000525b:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c000525f:	8d 54 24 0a          	lea    edx,[esp+0xa]
c0005263:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0005267:	e8 97 cb ff ff       	call   c0001e03 <mem_cpy>
c000526c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005270:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005274:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005278:	e8 f8 da ff ff       	call   c0002d75 <sync_fs>
c000527d:	89 c6                	mov    esi,eax
c000527f:	eb 26                	jmp    c00052a7 <f_setlabel+0x187>
c0005281:	83 fb 09             	cmp    ebx,0x9
c0005284:	0f 87 e6 fe ff ff    	ja     c0005170 <f_setlabel+0x50>
c000528a:	89 f0                	mov    eax,esi
c000528c:	88 64 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],ah
c0005290:	43                   	inc    ebx
c0005291:	89 f8                	mov    eax,edi
c0005293:	88 44 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],al
c0005297:	43                   	inc    ebx
c0005298:	e9 ba fe ff ff       	jmp    c0005157 <f_setlabel+0x37>
c000529d:	83 fb 0a             	cmp    ebx,0xa
c00052a0:	76 ef                	jbe    c0005291 <f_setlabel+0x171>
c00052a2:	e9 c9 fe ff ff       	jmp    c0005170 <f_setlabel+0x50>
c00052a7:	83 c4 50             	add    esp,0x50
c00052aa:	89 f0                	mov    eax,esi
c00052ac:	5b                   	pop    ebx
c00052ad:	5e                   	pop    esi
c00052ae:	5f                   	pop    edi
c00052af:	c3                   	ret    

c00052b0 <f_expand>:
c00052b0:	55                   	push   ebp
c00052b1:	57                   	push   edi
c00052b2:	56                   	push   esi
c00052b3:	53                   	push   ebx
c00052b4:	83 ec 2c             	sub    esp,0x2c
c00052b7:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00052bb:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00052bf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00052c3:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00052c7:	89 d8                	mov    eax,ebx
c00052c9:	e8 c7 cf ff ff       	call   c0002295 <validate>
c00052ce:	89 c6                	mov    esi,eax
c00052d0:	85 c0                	test   eax,eax
c00052d2:	0f 85 3b 01 00 00    	jne    c0005413 <f_expand+0x163>
c00052d8:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c00052dc:	85 f6                	test   esi,esi
c00052de:	0f 85 2f 01 00 00    	jne    c0005413 <f_expand+0x163>
c00052e4:	83 7c 24 44 00       	cmp    DWORD PTR [esp+0x44],0x0
c00052e9:	75 0a                	jne    c00052f5 <f_expand+0x45>
c00052eb:	be 07 00 00 00       	mov    esi,0x7
c00052f0:	e9 1e 01 00 00       	jmp    c0005413 <f_expand+0x163>
c00052f5:	83 7b 0c 00          	cmp    DWORD PTR [ebx+0xc],0x0
c00052f9:	75 f0                	jne    c00052eb <f_expand+0x3b>
c00052fb:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c00052ff:	74 ea                	je     c00052eb <f_expand+0x3b>
c0005301:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
c0005305:	0f b7 4d 0a          	movzx  ecx,WORD PTR [ebp+0xa]
c0005309:	c1 e1 09             	shl    ecx,0x9
c000530c:	8d 41 ff             	lea    eax,[ecx-0x1]
c000530f:	85 44 24 44          	test   DWORD PTR [esp+0x44],eax
c0005313:	0f 95 c0             	setne  al
c0005316:	31 d2                	xor    edx,edx
c0005318:	0f b6 c0             	movzx  eax,al
c000531b:	89 c7                	mov    edi,eax
c000531d:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005321:	f7 f1                	div    ecx
c0005323:	01 f8                	add    eax,edi
c0005325:	8b 7d 10             	mov    edi,DWORD PTR [ebp+0x10]
c0005328:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000532c:	83 ff 01             	cmp    edi,0x1
c000532f:	76 05                	jbe    c0005336 <f_expand+0x86>
c0005331:	39 7d 18             	cmp    DWORD PTR [ebp+0x18],edi
c0005334:	77 05                	ja     c000533b <f_expand+0x8b>
c0005336:	bf 02 00 00 00       	mov    edi,0x2
c000533b:	89 3c 24             	mov    DWORD PTR [esp],edi
c000533e:	89 fd                	mov    ebp,edi
c0005340:	31 c9                	xor    ecx,ecx
c0005342:	89 ea                	mov    edx,ebp
c0005344:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005348:	8b 03                	mov    eax,DWORD PTR [ebx]
c000534a:	45                   	inc    ebp
c000534b:	e8 c4 de ff ff       	call   c0003214 <get_fat.isra.2>
c0005350:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0005354:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0005358:	39 6a 18             	cmp    DWORD PTR [edx+0x18],ebp
c000535b:	77 05                	ja     c0005362 <f_expand+0xb2>
c000535d:	bd 02 00 00 00       	mov    ebp,0x2
c0005362:	83 f8 01             	cmp    eax,0x1
c0005365:	74 20                	je     c0005387 <f_expand+0xd7>
c0005367:	83 f8 ff             	cmp    eax,0xffffffff
c000536a:	74 25                	je     c0005391 <f_expand+0xe1>
c000536c:	85 c0                	test   eax,eax
c000536e:	75 09                	jne    c0005379 <f_expand+0xc9>
c0005370:	41                   	inc    ecx
c0005371:	39 4c 24 04          	cmp    DWORD PTR [esp+0x4],ecx
c0005375:	75 07                	jne    c000537e <f_expand+0xce>
c0005377:	eb 1f                	jmp    c0005398 <f_expand+0xe8>
c0005379:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000537c:	31 c9                	xor    ecx,ecx
c000537e:	39 fd                	cmp    ebp,edi
c0005380:	75 c0                	jne    c0005342 <f_expand+0x92>
c0005382:	e9 64 ff ff ff       	jmp    c00052eb <f_expand+0x3b>
c0005387:	be 02 00 00 00       	mov    esi,0x2
c000538c:	e9 82 00 00 00       	jmp    c0005413 <f_expand+0x163>
c0005391:	be 01 00 00 00       	mov    esi,0x1
c0005396:	eb 7b                	jmp    c0005413 <f_expand+0x163>
c0005398:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c000539d:	74 2b                	je     c00053ca <f_expand+0x11a>
c000539f:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00053a2:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c00053a6:	85 ed                	test   ebp,ebp
c00053a8:	74 24                	je     c00053ce <f_expand+0x11e>
c00053aa:	83 c9 ff             	or     ecx,0xffffffff
c00053ad:	83 fd 01             	cmp    ebp,0x1
c00053b0:	74 03                	je     c00053b5 <f_expand+0x105>
c00053b2:	8d 4f 01             	lea    ecx,[edi+0x1]
c00053b5:	89 fa                	mov    edx,edi
c00053b7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00053bb:	e8 c2 d3 ff ff       	call   c0002782 <put_fat>
c00053c0:	85 c0                	test   eax,eax
c00053c2:	75 4d                	jne    c0005411 <f_expand+0x161>
c00053c4:	89 f8                	mov    eax,edi
c00053c6:	4d                   	dec    ebp
c00053c7:	47                   	inc    edi
c00053c8:	eb dc                	jmp    c00053a6 <f_expand+0xf6>
c00053ca:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00053cd:	48                   	dec    eax
c00053ce:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00053d2:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c00053d7:	89 42 10             	mov    DWORD PTR [edx+0x10],eax
c00053da:	74 37                	je     c0005413 <f_expand+0x163>
c00053dc:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00053df:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00053e2:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00053e6:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c00053e9:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00053ec:	83 c8 40             	or     eax,0x40
c00053ef:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00053f2:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c00053f5:	8b 5a 18             	mov    ebx,DWORD PTR [edx+0x18]
c00053f8:	8d 4b fe             	lea    ecx,[ebx-0x2]
c00053fb:	39 c8                	cmp    eax,ecx
c00053fd:	77 14                	ja     c0005413 <f_expand+0x163>
c00053ff:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c0005403:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0005406:	8a 42 04             	mov    al,BYTE PTR [edx+0x4]
c0005409:	83 c8 01             	or     eax,0x1
c000540c:	88 42 04             	mov    BYTE PTR [edx+0x4],al
c000540f:	eb 02                	jmp    c0005413 <f_expand+0x163>
c0005411:	89 c6                	mov    esi,eax
c0005413:	83 c4 2c             	add    esp,0x2c
c0005416:	89 f0                	mov    eax,esi
c0005418:	5b                   	pop    ebx
c0005419:	5e                   	pop    esi
c000541a:	5f                   	pop    edi
c000541b:	5d                   	pop    ebp
c000541c:	c3                   	ret    

c000541d <f_mkfs>:
c000541d:	55                   	push   ebp
c000541e:	57                   	push   edi
c000541f:	56                   	push   esi
c0005420:	be 0b 00 00 00       	mov    esi,0xb
c0005425:	53                   	push   ebx
c0005426:	83 ec 5c             	sub    esp,0x5c
c0005429:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c000542d:	8b 6c 24 78          	mov    ebp,DWORD PTR [esp+0x78]
c0005431:	8d 44 24 70          	lea    eax,[esp+0x70]
c0005435:	e8 0e ce ff ff       	call   c0002248 <get_ldnumber>
c000543a:	85 c0                	test   eax,eax
c000543c:	0f 88 d1 07 00 00    	js     c0005c13 <f_mkfs+0x7f6>
c0005442:	8b 14 85 a0 54 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdab60]
c0005449:	85 d2                	test   edx,edx
c000544b:	74 03                	je     c0005450 <f_mkfs+0x33>
c000544d:	c6 02 00             	mov    BYTE PTR [edx],0x0
c0005450:	85 db                	test   ebx,ebx
c0005452:	75 05                	jne    c0005459 <f_mkfs+0x3c>
c0005454:	bb a0 ff 01 c0       	mov    ebx,0xc001ffa0
c0005459:	83 ec 0c             	sub    esp,0xc
c000545c:	0f b6 c0             	movzx  eax,al
c000545f:	be 03 00 00 00       	mov    esi,0x3
c0005464:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005468:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000546c:	e8 18 c9 ff ff       	call   c0001d89 <disk_initialize>
c0005471:	83 c4 10             	add    esp,0x10
c0005474:	a8 01                	test   al,0x1
c0005476:	0f 85 97 07 00 00    	jne    c0005c13 <f_mkfs+0x7f6>
c000547c:	be 0a 00 00 00       	mov    esi,0xa
c0005481:	a8 04                	test   al,0x4
c0005483:	0f 85 8a 07 00 00    	jne    c0005c13 <f_mkfs+0x7f6>
c0005489:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000548c:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0005490:	85 c0                	test   eax,eax
c0005492:	75 20                	jne    c00054b4 <f_mkfs+0x97>
c0005494:	51                   	push   ecx
c0005495:	8d 44 24 44          	lea    eax,[esp+0x44]
c0005499:	50                   	push   eax
c000549a:	6a 03                	push   0x3
c000549c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00054a0:	e8 13 c9 ff ff       	call   c0001db8 <disk_ioctl>
c00054a5:	83 c4 10             	add    esp,0x10
c00054a8:	85 c0                	test   eax,eax
c00054aa:	74 08                	je     c00054b4 <f_mkfs+0x97>
c00054ac:	c7 44 24 40 01 00 00 00 	mov    DWORD PTR [esp+0x40],0x1
c00054b4:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00054b8:	8d 42 ff             	lea    eax,[edx-0x1]
c00054bb:	3d ff 7f 00 00       	cmp    eax,0x7fff
c00054c0:	77 04                	ja     c00054c6 <f_mkfs+0xa9>
c00054c2:	85 c2                	test   edx,eax
c00054c4:	74 08                	je     c00054ce <f_mkfs+0xb1>
c00054c6:	c7 44 24 40 01 00 00 00 	mov    DWORD PTR [esp+0x40],0x1
c00054ce:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c00054d1:	88 44 24 2c          	mov    BYTE PTR [esp+0x2c],al
c00054d5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00054d9:	48                   	dec    eax
c00054da:	3c 01                	cmp    al,0x1
c00054dc:	76 05                	jbe    c00054e3 <f_mkfs+0xc6>
c00054de:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c00054e3:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00054e6:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00054ea:	48                   	dec    eax
c00054eb:	3d ff 7f 00 00       	cmp    eax,0x7fff
c00054f0:	77 07                	ja     c00054f9 <f_mkfs+0xdc>
c00054f2:	f6 44 24 14 0f       	test   BYTE PTR [esp+0x14],0xf
c00054f7:	74 08                	je     c0005501 <f_mkfs+0xe4>
c00054f9:	c7 44 24 14 00 02 00 00 	mov    DWORD PTR [esp+0x14],0x200
c0005501:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c0005504:	81 ff 00 00 00 01    	cmp    edi,0x1000000
c000550a:	77 07                	ja     c0005513 <f_mkfs+0xf6>
c000550c:	8d 47 ff             	lea    eax,[edi-0x1]
c000550f:	85 f8                	test   eax,edi
c0005511:	74 02                	je     c0005515 <f_mkfs+0xf8>
c0005513:	31 ff                	xor    edi,edi
c0005515:	81 7c 24 7c ff 01 00 00 	cmp    DWORD PTR [esp+0x7c],0x1ff
c000551d:	77 0a                	ja     c0005529 <f_mkfs+0x10c>
c000551f:	be 11 00 00 00       	mov    esi,0x11
c0005524:	e9 ea 06 00 00       	jmp    c0005c13 <f_mkfs+0x7f6>
c0005529:	8b 33                	mov    esi,DWORD PTR [ebx]
c000552b:	85 ed                	test   ebp,ebp
c000552d:	89 eb                	mov    ebx,ebp
c000552f:	75 1e                	jne    c000554f <f_mkfs+0x132>
c0005531:	83 ec 0c             	sub    esp,0xc
c0005534:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c000553b:	25 00 fe ff ff       	and    eax,0xfffffe00
c0005540:	50                   	push   eax
c0005541:	e8 da 06 00 00       	call   c0005c20 <ff_memalloc>
c0005546:	83 c4 10             	add    esp,0x10
c0005549:	89 c3                	mov    ebx,eax
c000554b:	85 c0                	test   eax,eax
c000554d:	74 d0                	je     c000551f <f_mkfs+0x102>
c000554f:	c7 44 24 44 00 00 00 00 	mov    DWORD PTR [esp+0x44],0x0
c0005557:	52                   	push   edx
c0005558:	8d 44 24 48          	lea    eax,[esp+0x48]
c000555c:	50                   	push   eax
c000555d:	6a 01                	push   0x1
c000555f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005563:	e8 50 c8 ff ff       	call   c0001db8 <disk_ioctl>
c0005568:	83 c4 10             	add    esp,0x10
c000556b:	85 c0                	test   eax,eax
c000556d:	0f 85 49 06 00 00    	jne    c0005bbc <f_mkfs+0x79f>
c0005573:	89 f0                	mov    eax,esi
c0005575:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000557d:	83 e0 08             	and    eax,0x8
c0005580:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0005584:	75 18                	jne    c000559e <f_mkfs+0x181>
c0005586:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000558a:	83 f8 3f             	cmp    eax,0x3f
c000558d:	76 0f                	jbe    c000559e <f_mkfs+0x181>
c000558f:	83 e8 3f             	sub    eax,0x3f
c0005592:	c7 44 24 10 3f 00 00 00 	mov    DWORD PTR [esp+0x10],0x3f
c000559a:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000559e:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00055a2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00055a6:	83 f8 7f             	cmp    eax,0x7f
c00055a9:	0f 86 5b 02 00 00    	jbe    c000580a <f_mkfs+0x3ed>
c00055af:	b9 80 00 00 00       	mov    ecx,0x80
c00055b4:	81 ff ff 01 01 00    	cmp    edi,0x101ff
c00055ba:	77 05                	ja     c00055c1 <f_mkfs+0x1a4>
c00055bc:	c1 ef 09             	shr    edi,0x9
c00055bf:	89 f9                	mov    ecx,edi
c00055c1:	89 f0                	mov    eax,esi
c00055c3:	89 f7                	mov    edi,esi
c00055c5:	83 e0 01             	and    eax,0x1
c00055c8:	83 e7 02             	and    edi,0x2
c00055cb:	0f b6 c0             	movzx  eax,al
c00055ce:	89 7c 24 38          	mov    DWORD PTR [esp+0x38],edi
c00055d2:	74 0a                	je     c00055de <f_mkfs+0x1c1>
c00055d4:	85 c0                	test   eax,eax
c00055d6:	0f 84 4f 01 00 00    	je     c000572b <f_mkfs+0x30e>
c00055dc:	eb 37                	jmp    c0005615 <f_mkfs+0x1f8>
c00055de:	be 13 00 00 00       	mov    esi,0x13
c00055e3:	85 c0                	test   eax,eax
c00055e5:	75 2e                	jne    c0005615 <f_mkfs+0x1f8>
c00055e7:	e9 e7 05 00 00       	jmp    c0005bd3 <f_mkfs+0x7b6>
c00055ec:	83 f8 02             	cmp    eax,0x2
c00055ef:	0f 85 0d 02 00 00    	jne    c0005802 <f_mkfs+0x3e5>
c00055f5:	81 fe f5 ff 00 00    	cmp    esi,0xfff5
c00055fb:	0f 86 e4 01 00 00    	jbe    c00057e5 <f_mkfs+0x3c8>
c0005601:	85 c9                	test   ecx,ecx
c0005603:	0f 85 dc 05 00 00    	jne    c0005be5 <f_mkfs+0x7c8>
c0005609:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c000560c:	83 f9 40             	cmp    ecx,0x40
c000560f:	0f 87 e0 05 00 00    	ja     c0005bf5 <f_mkfs+0x7d8>
c0005615:	89 cf                	mov    edi,ecx
c0005617:	85 c9                	test   ecx,ecx
c0005619:	75 1c                	jne    c0005637 <f_mkfs+0x21a>
c000561b:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000561f:	b8 80 ff 01 c0       	mov    eax,0xc001ff80
c0005624:	c1 ee 0c             	shr    esi,0xc
c0005627:	bf 01 00 00 00       	mov    edi,0x1
c000562c:	0f b7 10             	movzx  edx,WORD PTR [eax]
c000562f:	85 d2                	test   edx,edx
c0005631:	0f 85 63 01 00 00    	jne    c000579a <f_mkfs+0x37d>
c0005637:	31 d2                	xor    edx,edx
c0005639:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000563d:	f7 f7                	div    edi
c000563f:	3d f5 0f 00 00       	cmp    eax,0xff5
c0005644:	0f 86 62 01 00 00    	jbe    c00057ac <f_mkfs+0x38f>
c000564a:	83 c0 02             	add    eax,0x2
c000564d:	c6 44 24 0b 02       	mov    BYTE PTR [esp+0xb],0x2
c0005652:	01 c0                	add    eax,eax
c0005654:	05 ff 01 00 00       	add    eax,0x1ff
c0005659:	c7 44 24 24 01 00 00 00 	mov    DWORD PTR [esp+0x24],0x1
c0005661:	c1 e8 09             	shr    eax,0x9
c0005664:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005668:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000566c:	c1 e0 05             	shl    eax,0x5
c000566f:	c1 e8 09             	shr    eax,0x9
c0005672:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0005676:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c000567b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000567f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005683:	03 44 24 24          	add    eax,DWORD PTR [esp+0x24]
c0005687:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000568b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000568f:	0f af 44 24 28       	imul   eax,DWORD PTR [esp+0x28]
c0005694:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c0005698:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c000569c:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00056a0:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00056a4:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00056a8:	8d 74 10 ff          	lea    esi,[eax+edx*1-0x1]
c00056ac:	f7 d8                	neg    eax
c00056ae:	21 c6                	and    esi,eax
c00056b0:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c00056b5:	29 d6                	sub    esi,edx
c00056b7:	83 f8 03             	cmp    eax,0x3
c00056ba:	0f 85 ff 00 00 00    	jne    c00057bf <f_mkfs+0x3a2>
c00056c0:	01 74 24 24          	add    DWORD PTR [esp+0x24],esi
c00056c4:	01 74 24 20          	add    DWORD PTR [esp+0x20],esi
c00056c8:	89 f8                	mov    eax,edi
c00056ca:	c1 e0 04             	shl    eax,0x4
c00056cd:	2b 44 24 10          	sub    eax,DWORD PTR [esp+0x10]
c00056d1:	03 44 24 34          	add    eax,DWORD PTR [esp+0x34]
c00056d5:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c00056d9:	0f 82 2b 01 00 00    	jb     c000580a <f_mkfs+0x3ed>
c00056df:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00056e3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00056e7:	2b 44 24 30          	sub    eax,DWORD PTR [esp+0x30]
c00056eb:	0f af 54 24 28       	imul   edx,DWORD PTR [esp+0x28]
c00056f0:	2b 44 24 24          	sub    eax,DWORD PTR [esp+0x24]
c00056f4:	29 d0                	sub    eax,edx
c00056f6:	31 d2                	xor    edx,edx
c00056f8:	f7 f7                	div    edi
c00056fa:	89 c6                	mov    esi,eax
c00056fc:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005701:	83 f8 03             	cmp    eax,0x3
c0005704:	0f 85 e2 fe ff ff    	jne    c00055ec <f_mkfs+0x1cf>
c000570a:	81 fe f5 ff 00 00    	cmp    esi,0xfff5
c0005710:	0f 87 03 01 00 00    	ja     c0005819 <f_mkfs+0x3fc>
c0005716:	85 c9                	test   ecx,ecx
c0005718:	0f 85 ec 00 00 00    	jne    c000580a <f_mkfs+0x3ed>
c000571e:	83 ff 01             	cmp    edi,0x1
c0005721:	0f 86 e3 00 00 00    	jbe    c000580a <f_mkfs+0x3ed>
c0005727:	d1 ef                	shr    edi,1
c0005729:	89 f9                	mov    ecx,edi
c000572b:	89 ce                	mov    esi,ecx
c000572d:	85 c9                	test   ecx,ecx
c000572f:	75 25                	jne    c0005756 <f_mkfs+0x339>
c0005731:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0005735:	b8 90 ff 01 c0       	mov    eax,0xc001ff90
c000573a:	c1 ee 11             	shr    esi,0x11
c000573d:	b9 01 00 00 00       	mov    ecx,0x1
c0005742:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0005745:	85 d2                	test   edx,edx
c0005747:	74 0b                	je     c0005754 <f_mkfs+0x337>
c0005749:	83 c0 02             	add    eax,0x2
c000574c:	39 f2                	cmp    edx,esi
c000574e:	77 04                	ja     c0005754 <f_mkfs+0x337>
c0005750:	01 c9                	add    ecx,ecx
c0005752:	eb ee                	jmp    c0005742 <f_mkfs+0x325>
c0005754:	31 f6                	xor    esi,esi
c0005756:	31 d2                	xor    edx,edx
c0005758:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000575c:	f7 f1                	div    ecx
c000575e:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c0005765:	2d f6 ff 00 00       	sub    eax,0xfff6
c000576a:	c1 ea 09             	shr    edx,0x9
c000576d:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c0005772:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0005776:	0f 87 8e 00 00 00    	ja     c000580a <f_mkfs+0x3ed>
c000577c:	89 cf                	mov    edi,ecx
c000577e:	c7 44 24 30 00 00 00 00 	mov    DWORD PTR [esp+0x30],0x0
c0005786:	89 f1                	mov    ecx,esi
c0005788:	c7 44 24 24 20 00 00 00 	mov    DWORD PTR [esp+0x24],0x20
c0005790:	c6 44 24 0b 03       	mov    BYTE PTR [esp+0xb],0x3
c0005795:	e9 dc fe ff ff       	jmp    c0005676 <f_mkfs+0x259>
c000579a:	83 c0 02             	add    eax,0x2
c000579d:	39 f2                	cmp    edx,esi
c000579f:	0f 87 92 fe ff ff    	ja     c0005637 <f_mkfs+0x21a>
c00057a5:	01 ff                	add    edi,edi
c00057a7:	e9 80 fe ff ff       	jmp    c000562c <f_mkfs+0x20f>
c00057ac:	8d 04 40             	lea    eax,[eax+eax*2]
c00057af:	c6 44 24 0b 01       	mov    BYTE PTR [esp+0xb],0x1
c00057b4:	40                   	inc    eax
c00057b5:	d1 e8                	shr    eax,1
c00057b7:	83 c0 03             	add    eax,0x3
c00057ba:	e9 95 fe ff ff       	jmp    c0005654 <f_mkfs+0x237>
c00057bf:	31 d2                	xor    edx,edx
c00057c1:	89 f0                	mov    eax,esi
c00057c3:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c00057c7:	85 d2                	test   edx,edx
c00057c9:	74 09                	je     c00057d4 <f_mkfs+0x3b7>
c00057cb:	4e                   	dec    esi
c00057cc:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c00057d0:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c00057d4:	89 f0                	mov    eax,esi
c00057d6:	31 d2                	xor    edx,edx
c00057d8:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c00057dc:	01 44 24 18          	add    DWORD PTR [esp+0x18],eax
c00057e0:	e9 e3 fe ff ff       	jmp    c00056c8 <f_mkfs+0x2ab>
c00057e5:	81 fe f5 0f 00 00    	cmp    esi,0xff5
c00057eb:	77 2c                	ja     c0005819 <f_mkfs+0x3fc>
c00057ed:	85 c9                	test   ecx,ecx
c00057ef:	75 19                	jne    c000580a <f_mkfs+0x3ed>
c00057f1:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c00057f4:	81 f9 80 00 00 00    	cmp    ecx,0x80
c00057fa:	0f 86 15 fe ff ff    	jbe    c0005615 <f_mkfs+0x1f8>
c0005800:	eb 08                	jmp    c000580a <f_mkfs+0x3ed>
c0005802:	81 fe f5 0f 00 00    	cmp    esi,0xff5
c0005808:	76 0a                	jbe    c0005814 <f_mkfs+0x3f7>
c000580a:	be 0e 00 00 00       	mov    esi,0xe
c000580f:	e9 bf 03 00 00       	jmp    c0005bd3 <f_mkfs+0x7b6>
c0005814:	c6 44 24 0b 01       	mov    BYTE PTR [esp+0xb],0x1
c0005819:	31 d2                	xor    edx,edx
c000581b:	b9 00 02 00 00       	mov    ecx,0x200
c0005820:	89 d8                	mov    eax,ebx
c0005822:	e8 f1 c5 ff ff       	call   c0001e18 <mem_set>
c0005827:	b9 0b 00 00 00       	mov    ecx,0xb
c000582c:	ba 32 ff 01 c0       	mov    edx,0xc001ff32
c0005831:	89 d8                	mov    eax,ebx
c0005833:	e8 cb c5 ff ff       	call   c0001e03 <mem_cpy>
c0005838:	8d 43 0b             	lea    eax,[ebx+0xb]
c000583b:	ba 00 02 00 00       	mov    edx,0x200
c0005840:	e8 b7 c5 ff ff       	call   c0001dfc <st_word>
c0005845:	89 f8                	mov    eax,edi
c0005847:	0f b7 54 24 24       	movzx  edx,WORD PTR [esp+0x24]
c000584c:	88 43 0d             	mov    BYTE PTR [ebx+0xd],al
c000584f:	8d 43 0e             	lea    eax,[ebx+0xe]
c0005852:	e8 a5 c5 ff ff       	call   c0001dfc <st_word>
c0005857:	8a 44 24 2c          	mov    al,BYTE PTR [esp+0x2c]
c000585b:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c000585e:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005863:	83 f8 03             	cmp    eax,0x3
c0005866:	75 08                	jne    c0005870 <f_mkfs+0x453>
c0005868:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0005870:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0005874:	8d 43 11             	lea    eax,[ebx+0x11]
c0005877:	e8 80 c5 ff ff       	call   c0001dfc <st_word>
c000587c:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0005880:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0005886:	77 0a                	ja     c0005892 <f_mkfs+0x475>
c0005888:	8d 43 13             	lea    eax,[ebx+0x13]
c000588b:	e8 6c c5 ff ff       	call   c0001dfc <st_word>
c0005890:	eb 08                	jmp    c000589a <f_mkfs+0x47d>
c0005892:	8d 43 20             	lea    eax,[ebx+0x20]
c0005895:	e8 66 c5 ff ff       	call   c0001e00 <st_dword>
c000589a:	8d 43 18             	lea    eax,[ebx+0x18]
c000589d:	ba 3f 00 00 00       	mov    edx,0x3f
c00058a2:	c6 43 15 f8          	mov    BYTE PTR [ebx+0x15],0xf8
c00058a6:	e8 51 c5 ff ff       	call   c0001dfc <st_word>
c00058ab:	8d 43 1a             	lea    eax,[ebx+0x1a]
c00058ae:	ba ff 00 00 00       	mov    edx,0xff
c00058b3:	e8 44 c5 ff ff       	call   c0001dfc <st_word>
c00058b8:	8d 43 1c             	lea    eax,[ebx+0x1c]
c00058bb:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00058bf:	e8 3c c5 ff ff       	call   c0001e00 <st_dword>
c00058c4:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c00058c9:	83 f8 03             	cmp    eax,0x3
c00058cc:	75 57                	jne    c0005925 <f_mkfs+0x508>
c00058ce:	8d 43 43             	lea    eax,[ebx+0x43]
c00058d1:	ba 00 00 21 50       	mov    edx,0x50210000
c00058d6:	e8 25 c5 ff ff       	call   c0001e00 <st_dword>
c00058db:	8d 43 24             	lea    eax,[ebx+0x24]
c00058de:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00058e2:	e8 19 c5 ff ff       	call   c0001e00 <st_dword>
c00058e7:	8d 43 2c             	lea    eax,[ebx+0x2c]
c00058ea:	ba 02 00 00 00       	mov    edx,0x2
c00058ef:	e8 0c c5 ff ff       	call   c0001e00 <st_dword>
c00058f4:	8d 43 30             	lea    eax,[ebx+0x30]
c00058f7:	ba 01 00 00 00       	mov    edx,0x1
c00058fc:	e8 fb c4 ff ff       	call   c0001dfc <st_word>
c0005901:	8d 43 32             	lea    eax,[ebx+0x32]
c0005904:	ba 06 00 00 00       	mov    edx,0x6
c0005909:	e8 ee c4 ff ff       	call   c0001dfc <st_word>
c000590e:	c6 43 40 80          	mov    BYTE PTR [ebx+0x40],0x80
c0005912:	c6 43 42 29          	mov    BYTE PTR [ebx+0x42],0x29
c0005916:	8d 43 47             	lea    eax,[ebx+0x47]
c0005919:	b9 13 00 00 00       	mov    ecx,0x13
c000591e:	ba 3e ff 01 c0       	mov    edx,0xc001ff3e
c0005923:	eb 2f                	jmp    c0005954 <f_mkfs+0x537>
c0005925:	8d 43 27             	lea    eax,[ebx+0x27]
c0005928:	ba 00 00 21 50       	mov    edx,0x50210000
c000592d:	e8 ce c4 ff ff       	call   c0001e00 <st_dword>
c0005932:	0f b7 54 24 18       	movzx  edx,WORD PTR [esp+0x18]
c0005937:	8d 43 16             	lea    eax,[ebx+0x16]
c000593a:	e8 bd c4 ff ff       	call   c0001dfc <st_word>
c000593f:	c6 43 24 80          	mov    BYTE PTR [ebx+0x24],0x80
c0005943:	c6 43 26 29          	mov    BYTE PTR [ebx+0x26],0x29
c0005947:	8d 43 2b             	lea    eax,[ebx+0x2b]
c000594a:	b9 13 00 00 00       	mov    ecx,0x13
c000594f:	ba 52 ff 01 c0       	mov    edx,0xc001ff52
c0005954:	e8 aa c4 ff ff       	call   c0001e03 <mem_cpy>
c0005959:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c000595f:	ba 55 aa 00 00       	mov    edx,0xaa55
c0005964:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005968:	e8 8f c4 ff ff       	call   c0001dfc <st_word>
c000596d:	6a 01                	push   0x1
c000596f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005973:	53                   	push   ebx
c0005974:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005978:	e8 25 c4 ff ff       	call   c0001da2 <disk_write>
c000597d:	83 c4 10             	add    esp,0x10
c0005980:	85 c0                	test   eax,eax
c0005982:	0f 85 34 02 00 00    	jne    c0005bbc <f_mkfs+0x79f>
c0005988:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c000598d:	83 f8 03             	cmp    eax,0x3
c0005990:	0f 85 98 00 00 00    	jne    c0005a2e <f_mkfs+0x611>
c0005996:	6a 01                	push   0x1
c0005998:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000599c:	83 c0 06             	add    eax,0x6
c000599f:	50                   	push   eax
c00059a0:	53                   	push   ebx
c00059a1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00059a5:	e8 f8 c3 ff ff       	call   c0001da2 <disk_write>
c00059aa:	b9 00 02 00 00       	mov    ecx,0x200
c00059af:	31 d2                	xor    edx,edx
c00059b1:	89 d8                	mov    eax,ebx
c00059b3:	e8 60 c4 ff ff       	call   c0001e18 <mem_set>
c00059b8:	ba 52 52 61 41       	mov    edx,0x41615252
c00059bd:	89 d8                	mov    eax,ebx
c00059bf:	e8 3c c4 ff ff       	call   c0001e00 <st_dword>
c00059c4:	8d 83 e4 01 00 00    	lea    eax,[ebx+0x1e4]
c00059ca:	ba 72 72 41 61       	mov    edx,0x61417272
c00059cf:	e8 2c c4 ff ff       	call   c0001e00 <st_dword>
c00059d4:	8d 56 ff             	lea    edx,[esi-0x1]
c00059d7:	8d 83 e8 01 00 00    	lea    eax,[ebx+0x1e8]
c00059dd:	e8 1e c4 ff ff       	call   c0001e00 <st_dword>
c00059e2:	8d 83 ec 01 00 00    	lea    eax,[ebx+0x1ec]
c00059e8:	ba 02 00 00 00       	mov    edx,0x2
c00059ed:	e8 0e c4 ff ff       	call   c0001e00 <st_dword>
c00059f2:	ba 55 aa 00 00       	mov    edx,0xaa55
c00059f7:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c00059fd:	e8 fa c3 ff ff       	call   c0001dfc <st_word>
c0005a02:	6a 01                	push   0x1
c0005a04:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0005a08:	83 c0 07             	add    eax,0x7
c0005a0b:	50                   	push   eax
c0005a0c:	53                   	push   ebx
c0005a0d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0005a11:	e8 8c c3 ff ff       	call   c0001da2 <disk_write>
c0005a16:	83 c4 20             	add    esp,0x20
c0005a19:	6a 01                	push   0x1
c0005a1b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005a1f:	40                   	inc    eax
c0005a20:	50                   	push   eax
c0005a21:	53                   	push   ebx
c0005a22:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005a26:	e8 77 c3 ff ff       	call   c0001da2 <disk_write>
c0005a2b:	83 c4 10             	add    esp,0x10
c0005a2e:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c0005a32:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0005a36:	c1 e8 09             	shr    eax,0x9
c0005a39:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c0005a3f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005a43:	31 d2                	xor    edx,edx
c0005a45:	89 d8                	mov    eax,ebx
c0005a47:	e8 cc c3 ff ff       	call   c0001e18 <mem_set>
c0005a4c:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005a51:	31 c9                	xor    ecx,ecx
c0005a53:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c0005a5b:	83 f8 01             	cmp    eax,0x1
c0005a5e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0005a62:	0f 94 c1             	sete   cl
c0005a65:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0005a69:	ff 4c 24 14          	dec    DWORD PTR [esp+0x14]
c0005a6d:	81 64 24 14 00 00 00 ff 	and    DWORD PTR [esp+0x14],0xff000000
c0005a75:	81 44 24 14 f8 ff ff 00 	add    DWORD PTR [esp+0x14],0xfffff8
c0005a7d:	83 7c 24 2c 03       	cmp    DWORD PTR [esp+0x2c],0x3
c0005a82:	75 21                	jne    c0005aa5 <f_mkfs+0x688>
c0005a84:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0005a89:	89 d8                	mov    eax,ebx
c0005a8b:	e8 70 c3 ff ff       	call   c0001e00 <st_dword>
c0005a90:	8d 43 04             	lea    eax,[ebx+0x4]
c0005a93:	83 ca ff             	or     edx,0xffffffff
c0005a96:	e8 65 c3 ff ff       	call   c0001e00 <st_dword>
c0005a9b:	8d 43 08             	lea    eax,[ebx+0x8]
c0005a9e:	ba ff ff ff 0f       	mov    edx,0xfffffff
c0005aa3:	eb 06                	jmp    c0005aab <f_mkfs+0x68e>
c0005aa5:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0005aa9:	89 d8                	mov    eax,ebx
c0005aab:	e8 50 c3 ff ff       	call   c0001e00 <st_dword>
c0005ab0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005ab4:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0005ab8:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0005abc:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005ac0:	39 ce                	cmp    esi,ecx
c0005ac2:	76 02                	jbe    c0005ac6 <f_mkfs+0x6a9>
c0005ac4:	89 ce                	mov    esi,ecx
c0005ac6:	56                   	push   esi
c0005ac7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0005acb:	53                   	push   ebx
c0005acc:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005ad0:	e8 cd c2 ff ff       	call   c0001da2 <disk_write>
c0005ad5:	83 c4 10             	add    esp,0x10
c0005ad8:	85 c0                	test   eax,eax
c0005ada:	0f 85 dc 00 00 00    	jne    c0005bbc <f_mkfs+0x79f>
c0005ae0:	31 d2                	xor    edx,edx
c0005ae2:	b9 00 02 00 00       	mov    ecx,0x200
c0005ae7:	89 d8                	mov    eax,ebx
c0005ae9:	e8 2a c3 ff ff       	call   c0001e18 <mem_set>
c0005aee:	01 74 24 20          	add    DWORD PTR [esp+0x20],esi
c0005af2:	29 74 24 1c          	sub    DWORD PTR [esp+0x1c],esi
c0005af6:	75 c0                	jne    c0005ab8 <f_mkfs+0x69b>
c0005af8:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0005afc:	c7 44 24 24 01 00 00 00 	mov    DWORD PTR [esp+0x24],0x1
c0005b04:	40                   	inc    eax
c0005b05:	39 44 24 28          	cmp    DWORD PTR [esp+0x28],eax
c0005b09:	0f 87 6e ff ff ff    	ja     c0005a7d <f_mkfs+0x660>
c0005b0f:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005b14:	83 f8 03             	cmp    eax,0x3
c0005b17:	74 04                	je     c0005b1d <f_mkfs+0x700>
c0005b19:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0005b1d:	89 fe                	mov    esi,edi
c0005b1f:	3b 7c 24 10          	cmp    edi,DWORD PTR [esp+0x10]
c0005b23:	76 04                	jbe    c0005b29 <f_mkfs+0x70c>
c0005b25:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0005b29:	56                   	push   esi
c0005b2a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0005b2e:	53                   	push   ebx
c0005b2f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005b33:	e8 6a c2 ff ff       	call   c0001da2 <disk_write>
c0005b38:	83 c4 10             	add    esp,0x10
c0005b3b:	85 c0                	test   eax,eax
c0005b3d:	75 7d                	jne    c0005bbc <f_mkfs+0x79f>
c0005b3f:	01 74 24 20          	add    DWORD PTR [esp+0x20],esi
c0005b43:	29 f7                	sub    edi,esi
c0005b45:	75 d6                	jne    c0005b1d <f_mkfs+0x700>
c0005b47:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005b4c:	b9 0c 00 00 00       	mov    ecx,0xc
c0005b51:	83 f8 03             	cmp    eax,0x3
c0005b54:	74 1e                	je     c0005b74 <f_mkfs+0x757>
c0005b56:	b9 06 00 00 00       	mov    ecx,0x6
c0005b5b:	81 7c 24 44 ff ff 00 00 	cmp    DWORD PTR [esp+0x44],0xffff
c0005b63:	77 0f                	ja     c0005b74 <f_mkfs+0x757>
c0005b65:	b9 04 00 00 00       	mov    ecx,0x4
c0005b6a:	83 f8 02             	cmp    eax,0x2
c0005b6d:	74 05                	je     c0005b74 <f_mkfs+0x757>
c0005b6f:	b9 01 00 00 00       	mov    ecx,0x1
c0005b74:	83 7c 24 3c 00       	cmp    DWORD PTR [esp+0x3c],0x0
c0005b79:	75 2a                	jne    c0005ba5 <f_mkfs+0x788>
c0005b7b:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005b7f:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c0005b87:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0005b8b:	83 ec 0c             	sub    esp,0xc
c0005b8e:	53                   	push   ebx
c0005b8f:	8d 54 24 58          	lea    edx,[esp+0x58]
c0005b93:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005b97:	e8 89 d2 ff ff       	call   c0002e25 <create_partition>
c0005b9c:	83 c4 10             	add    esp,0x10
c0005b9f:	89 c6                	mov    esi,eax
c0005ba1:	85 c0                	test   eax,eax
c0005ba3:	75 2e                	jne    c0005bd3 <f_mkfs+0x7b6>
c0005ba5:	31 f6                	xor    esi,esi
c0005ba7:	50                   	push   eax
c0005ba8:	6a 00                	push   0x0
c0005baa:	6a 00                	push   0x0
c0005bac:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005bb0:	e8 03 c2 ff ff       	call   c0001db8 <disk_ioctl>
c0005bb5:	83 c4 10             	add    esp,0x10
c0005bb8:	85 c0                	test   eax,eax
c0005bba:	74 17                	je     c0005bd3 <f_mkfs+0x7b6>
c0005bbc:	85 ed                	test   ebp,ebp
c0005bbe:	75 0c                	jne    c0005bcc <f_mkfs+0x7af>
c0005bc0:	83 ec 0c             	sub    esp,0xc
c0005bc3:	53                   	push   ebx
c0005bc4:	e8 6f 00 00 00       	call   c0005c38 <ff_memfree>
c0005bc9:	83 c4 10             	add    esp,0x10
c0005bcc:	be 01 00 00 00       	mov    esi,0x1
c0005bd1:	eb 40                	jmp    c0005c13 <f_mkfs+0x7f6>
c0005bd3:	85 ed                	test   ebp,ebp
c0005bd5:	75 3c                	jne    c0005c13 <f_mkfs+0x7f6>
c0005bd7:	83 ec 0c             	sub    esp,0xc
c0005bda:	53                   	push   ebx
c0005bdb:	e8 58 00 00 00       	call   c0005c38 <ff_memfree>
c0005be0:	83 c4 10             	add    esp,0x10
c0005be3:	eb 2e                	jmp    c0005c13 <f_mkfs+0x7f6>
c0005be5:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c0005bea:	0f 85 3b fb ff ff    	jne    c000572b <f_mkfs+0x30e>
c0005bf0:	e9 15 fc ff ff       	jmp    c000580a <f_mkfs+0x3ed>
c0005bf5:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c0005bfa:	0f 85 31 fb ff ff    	jne    c0005731 <f_mkfs+0x314>
c0005c00:	89 cf                	mov    edi,ecx
c0005c02:	81 f9 80 00 00 00    	cmp    ecx,0x80
c0005c08:	0f 86 29 fa ff ff    	jbe    c0005637 <f_mkfs+0x21a>
c0005c0e:	e9 f7 fb ff ff       	jmp    c000580a <f_mkfs+0x3ed>
c0005c13:	83 c4 5c             	add    esp,0x5c
c0005c16:	89 f0                	mov    eax,esi
c0005c18:	5b                   	pop    ebx
c0005c19:	5e                   	pop    esi
c0005c1a:	5f                   	pop    edi
c0005c1b:	5d                   	pop    ebp
c0005c1c:	c3                   	ret    
c0005c1d:	66 90                	xchg   ax,ax
c0005c1f:	90                   	nop

c0005c20 <ff_memalloc>:
c0005c20:	83 ec 0c             	sub    esp,0xc
c0005c23:	83 ec 0c             	sub    esp,0xc
c0005c26:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005c2a:	e8 87 1e 00 00       	call   c0007ab6 <malloc>
c0005c2f:	83 c4 10             	add    esp,0x10
c0005c32:	83 c4 0c             	add    esp,0xc
c0005c35:	c3                   	ret    
c0005c36:	66 90                	xchg   ax,ax

c0005c38 <ff_memfree>:
c0005c38:	83 ec 0c             	sub    esp,0xc
c0005c3b:	83 ec 0c             	sub    esp,0xc
c0005c3e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005c42:	e8 7f 1e 00 00       	call   c0007ac6 <free>
c0005c47:	83 c4 10             	add    esp,0x10
c0005c4a:	90                   	nop
c0005c4b:	83 c4 0c             	add    esp,0xc
c0005c4e:	c3                   	ret    
c0005c4f:	90                   	nop

c0005c50 <ff_uni2oem>:
c0005c50:	83 ec 14             	sub    esp,0x14
c0005c53:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005c57:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005c5b:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005c62:	c7 44 24 0c 80 03 02 c0 	mov    DWORD PTR [esp+0xc],0xc0020380
c0005c6a:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c0005c6f:	77 0b                	ja     c0005c7c <ff_uni2oem+0x2c>
c0005c71:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005c75:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005c7a:	eb 68                	jmp    c0005ce4 <ff_uni2oem+0x94>
c0005c7c:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c0005c84:	77 5e                	ja     c0005ce4 <ff_uni2oem+0x94>
c0005c86:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0005c8a:	3d b5 01 00 00       	cmp    eax,0x1b5
c0005c8f:	75 53                	jne    c0005ce4 <ff_uni2oem+0x94>
c0005c91:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005c98:	eb 12                	jmp    c0005cac <ff_uni2oem+0x5c>
c0005c9a:	66 90                	xchg   ax,ax
c0005c9c:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005ca1:	83 c0 01             	add    eax,0x1
c0005ca4:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005ca9:	8d 76 00             	lea    esi,[esi+0x0]
c0005cac:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0005cb1:	83 f8 7f             	cmp    eax,0x7f
c0005cb4:	77 1e                	ja     c0005cd4 <ff_uni2oem+0x84>
c0005cb6:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0005cbb:	01 c0                	add    eax,eax
c0005cbd:	89 c2                	mov    edx,eax
c0005cbf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005cc3:	01 d0                	add    eax,edx
c0005cc5:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005cc8:	0f b7 c0             	movzx  eax,ax
c0005ccb:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0005ccf:	75 cb                	jne    c0005c9c <ff_uni2oem+0x4c>
c0005cd1:	8d 76 00             	lea    esi,[esi+0x0]
c0005cd4:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005cd9:	83 e8 80             	sub    eax,0xffffff80
c0005cdc:	0f b6 c0             	movzx  eax,al
c0005cdf:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005ce4:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005ce9:	83 c4 14             	add    esp,0x14
c0005cec:	c3                   	ret    
c0005ced:	8d 76 00             	lea    esi,[esi+0x0]

c0005cf0 <ff_oem2uni>:
c0005cf0:	83 ec 18             	sub    esp,0x18
c0005cf3:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0005cf7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005cfb:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c0005d00:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005d04:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c0005d0b:	c7 44 24 10 80 03 02 c0 	mov    DWORD PTR [esp+0x10],0xc0020380
c0005d13:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005d18:	83 f8 7f             	cmp    eax,0x7f
c0005d1b:	77 0b                	ja     c0005d28 <ff_oem2uni+0x38>
c0005d1d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005d21:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0005d26:	eb 34                	jmp    c0005d5c <ff_oem2uni+0x6c>
c0005d28:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0005d2c:	3d b5 01 00 00       	cmp    eax,0x1b5
c0005d31:	75 29                	jne    c0005d5c <ff_oem2uni+0x6c>
c0005d33:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005d38:	3d ff 00 00 00       	cmp    eax,0xff
c0005d3d:	77 1d                	ja     c0005d5c <ff_oem2uni+0x6c>
c0005d3f:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005d44:	05 80 ff ff 7f       	add    eax,0x7fffff80
c0005d49:	01 c0                	add    eax,eax
c0005d4b:	89 c2                	mov    edx,eax
c0005d4d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005d51:	01 d0                	add    eax,edx
c0005d53:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005d56:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0005d5b:	90                   	nop
c0005d5c:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c0005d61:	83 c4 18             	add    esp,0x18
c0005d64:	c3                   	ret    
c0005d65:	8d 76 00             	lea    esi,[esi+0x0]

c0005d68 <ff_wtoupper>:
c0005d68:	83 ec 10             	sub    esp,0x10
c0005d6b:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0005d73:	0f 87 ab 01 00 00    	ja     c0005f24 <ff_wtoupper+0x1bc>
c0005d79:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005d7d:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005d82:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0005d87:	3d ff 0f 00 00       	cmp    eax,0xfff
c0005d8c:	77 0a                	ja     c0005d98 <ff_wtoupper+0x30>
c0005d8e:	b8 80 01 02 c0       	mov    eax,0xc0020180
c0005d93:	eb 0b                	jmp    c0005da0 <ff_wtoupper+0x38>
c0005d95:	8d 76 00             	lea    esi,[esi+0x0]
c0005d98:	b8 c0 00 02 c0       	mov    eax,0xc00200c0
c0005d9d:	8d 76 00             	lea    esi,[esi+0x0]
c0005da0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005da4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005da8:	8d 50 02             	lea    edx,[eax+0x2]
c0005dab:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005daf:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005db2:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0005db7:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0005dbc:	85 c0                	test   eax,eax
c0005dbe:	0f 84 54 01 00 00    	je     c0005f18 <ff_wtoupper+0x1b0>
c0005dc4:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0005dc9:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0005dce:	39 c2                	cmp    edx,eax
c0005dd0:	0f 82 42 01 00 00    	jb     c0005f18 <ff_wtoupper+0x1b0>
c0005dd6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005dda:	8d 50 02             	lea    edx,[eax+0x2]
c0005ddd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005de1:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005de4:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0005de9:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c0005dee:	c1 e8 08             	shr    eax,0x8
c0005df1:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c0005df6:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0005dfb:	0f b6 c0             	movzx  eax,al
c0005dfe:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0005e03:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0005e08:	0f b7 4c 24 08       	movzx  ecx,WORD PTR [esp+0x8]
c0005e0d:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c0005e12:	01 ca                	add    edx,ecx
c0005e14:	39 d0                	cmp    eax,edx
c0005e16:	0f 8d d8 00 00 00    	jge    c0005ef4 <ff_wtoupper+0x18c>
c0005e1c:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005e21:	83 f8 08             	cmp    eax,0x8
c0005e24:	0f 87 ea 00 00 00    	ja     c0005f14 <ff_wtoupper+0x1ac>
c0005e2a:	8b 04 85 80 00 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdff80]
c0005e31:	ff e0                	jmp    eax
c0005e33:	90                   	nop
c0005e34:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0005e39:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0005e3e:	29 c2                	sub    edx,eax
c0005e40:	89 d0                	mov    eax,edx
c0005e42:	01 c0                	add    eax,eax
c0005e44:	89 c2                	mov    edx,eax
c0005e46:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005e4a:	01 d0                	add    eax,edx
c0005e4c:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005e4f:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005e54:	e9 97 00 00 00       	jmp    c0005ef0 <ff_wtoupper+0x188>
c0005e59:	8d 76 00             	lea    esi,[esi+0x0]
c0005e5c:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0005e61:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005e65:	89 d1                	mov    ecx,edx
c0005e67:	29 c1                	sub    ecx,eax
c0005e69:	89 c8                	mov    eax,ecx
c0005e6b:	83 e0 01             	and    eax,0x1
c0005e6e:	89 c2                	mov    edx,eax
c0005e70:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005e75:	29 d0                	sub    eax,edx
c0005e77:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005e7c:	eb 72                	jmp    c0005ef0 <ff_wtoupper+0x188>
c0005e7e:	66 90                	xchg   ax,ax
c0005e80:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005e85:	83 e8 10             	sub    eax,0x10
c0005e88:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005e8d:	eb 61                	jmp    c0005ef0 <ff_wtoupper+0x188>
c0005e8f:	90                   	nop
c0005e90:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005e95:	83 e8 20             	sub    eax,0x20
c0005e98:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005e9d:	eb 51                	jmp    c0005ef0 <ff_wtoupper+0x188>
c0005e9f:	90                   	nop
c0005ea0:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005ea5:	83 e8 30             	sub    eax,0x30
c0005ea8:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005ead:	eb 41                	jmp    c0005ef0 <ff_wtoupper+0x188>
c0005eaf:	90                   	nop
c0005eb0:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005eb5:	83 e8 1a             	sub    eax,0x1a
c0005eb8:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005ebd:	eb 31                	jmp    c0005ef0 <ff_wtoupper+0x188>
c0005ebf:	90                   	nop
c0005ec0:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005ec5:	83 c0 08             	add    eax,0x8
c0005ec8:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005ecd:	eb 21                	jmp    c0005ef0 <ff_wtoupper+0x188>
c0005ecf:	90                   	nop
c0005ed0:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005ed5:	83 e8 50             	sub    eax,0x50
c0005ed8:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005edd:	eb 11                	jmp    c0005ef0 <ff_wtoupper+0x188>
c0005edf:	90                   	nop
c0005ee0:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005ee5:	2d 60 1c 00 00       	sub    eax,0x1c60
c0005eea:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005eef:	90                   	nop
c0005ef0:	eb 22                	jmp    c0005f14 <ff_wtoupper+0x1ac>
c0005ef2:	66 90                	xchg   ax,ax
c0005ef4:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005ef9:	85 c0                	test   eax,eax
c0005efb:	0f 85 a3 fe ff ff    	jne    c0005da4 <ff_wtoupper+0x3c>
c0005f01:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c0005f06:	01 c0                	add    eax,eax
c0005f08:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0005f0c:	e9 93 fe ff ff       	jmp    c0005da4 <ff_wtoupper+0x3c>
c0005f11:	8d 76 00             	lea    esi,[esi+0x0]
c0005f14:	90                   	nop
c0005f15:	8d 76 00             	lea    esi,[esi+0x0]
c0005f18:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0005f1d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005f21:	8d 76 00             	lea    esi,[esi+0x0]
c0005f24:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005f28:	83 c4 10             	add    esp,0x10
c0005f2b:	c3                   	ret    

c0005f2c <utf2ucs>:
c0005f2c:	57                   	push   edi
c0005f2d:	31 c9                	xor    ecx,ecx
c0005f2f:	56                   	push   esi
c0005f30:	89 d7                	mov    edi,edx
c0005f32:	53                   	push   ebx
c0005f33:	0f be 1c 0f          	movsx  ebx,BYTE PTR [edi+ecx*1]
c0005f37:	88 5c 48 01          	mov    BYTE PTR [eax+ecx*2+0x1],bl
c0005f3b:	89 de                	mov    esi,ebx
c0005f3d:	c1 fe 08             	sar    esi,0x8
c0005f40:	89 f2                	mov    edx,esi
c0005f42:	88 14 48             	mov    BYTE PTR [eax+ecx*2],dl
c0005f45:	41                   	inc    ecx
c0005f46:	85 db                	test   ebx,ebx
c0005f48:	75 e9                	jne    c0005f33 <utf2ucs+0x7>
c0005f4a:	5b                   	pop    ebx
c0005f4b:	5e                   	pop    esi
c0005f4c:	5f                   	pop    edi
c0005f4d:	c3                   	ret    

c0005f4e <ucs2utfn>:
c0005f4e:	83 e1 fe             	and    ecx,0xfffffffe
c0005f51:	01 d1                	add    ecx,edx
c0005f53:	39 d1                	cmp    ecx,edx
c0005f55:	75 04                	jne    c0005f5b <ucs2utfn+0xd>
c0005f57:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0005f5a:	c3                   	ret    
c0005f5b:	57                   	push   edi
c0005f5c:	56                   	push   esi
c0005f5d:	53                   	push   ebx
c0005f5e:	0f be 1a             	movsx  ebx,BYTE PTR [edx]
c0005f61:	83 c2 02             	add    edx,0x2
c0005f64:	89 de                	mov    esi,ebx
c0005f66:	0f be 5a ff          	movsx  ebx,BYTE PTR [edx-0x1]
c0005f6a:	c1 e6 08             	shl    esi,0x8
c0005f6d:	09 f3                	or     ebx,esi
c0005f6f:	83 fb 3b             	cmp    ebx,0x3b
c0005f72:	74 50                	je     c0005fc4 <ucs2utfn+0x76>
c0005f74:	83 fb 7f             	cmp    ebx,0x7f
c0005f77:	7f 05                	jg     c0005f7e <ucs2utfn+0x30>
c0005f79:	88 18                	mov    BYTE PTR [eax],bl
c0005f7b:	40                   	inc    eax
c0005f7c:	eb 42                	jmp    c0005fc0 <ucs2utfn+0x72>
c0005f7e:	89 de                	mov    esi,ebx
c0005f80:	89 df                	mov    edi,ebx
c0005f82:	c1 fe 06             	sar    esi,0x6
c0005f85:	83 e7 3f             	and    edi,0x3f
c0005f88:	83 cf 80             	or     edi,0xffffff80
c0005f8b:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0005f91:	7f 12                	jg     c0005fa5 <ucs2utfn+0x57>
c0005f93:	83 ce c0             	or     esi,0xffffffc0
c0005f96:	83 c0 02             	add    eax,0x2
c0005f99:	89 f3                	mov    ebx,esi
c0005f9b:	88 58 fe             	mov    BYTE PTR [eax-0x2],bl
c0005f9e:	89 fb                	mov    ebx,edi
c0005fa0:	88 58 ff             	mov    BYTE PTR [eax-0x1],bl
c0005fa3:	eb 1b                	jmp    c0005fc0 <ucs2utfn+0x72>
c0005fa5:	c1 fb 0c             	sar    ebx,0xc
c0005fa8:	83 e6 3f             	and    esi,0x3f
c0005fab:	83 cb e0             	or     ebx,0xffffffe0
c0005fae:	83 ce 80             	or     esi,0xffffff80
c0005fb1:	88 18                	mov    BYTE PTR [eax],bl
c0005fb3:	89 f3                	mov    ebx,esi
c0005fb5:	83 c0 03             	add    eax,0x3
c0005fb8:	88 58 fe             	mov    BYTE PTR [eax-0x2],bl
c0005fbb:	89 fb                	mov    ebx,edi
c0005fbd:	88 58 ff             	mov    BYTE PTR [eax-0x1],bl
c0005fc0:	39 d1                	cmp    ecx,edx
c0005fc2:	75 9a                	jne    c0005f5e <ucs2utfn+0x10>
c0005fc4:	5b                   	pop    ebx
c0005fc5:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0005fc8:	5e                   	pop    esi
c0005fc9:	5f                   	pop    edi
c0005fca:	c3                   	ret    

c0005fcb <isjoliet>:
c0005fcb:	31 d2                	xor    edx,edx
c0005fcd:	80 38 25             	cmp    BYTE PTR [eax],0x25
c0005fd0:	75 26                	jne    c0005ff8 <isjoliet+0x2d>
c0005fd2:	80 78 01 2f          	cmp    BYTE PTR [eax+0x1],0x2f
c0005fd6:	75 20                	jne    c0005ff8 <isjoliet+0x2d>
c0005fd8:	0f be 40 02          	movsx  eax,BYTE PTR [eax+0x2]
c0005fdc:	ba 02 00 00 00       	mov    edx,0x2
c0005fe1:	83 f8 43             	cmp    eax,0x43
c0005fe4:	74 12                	je     c0005ff8 <isjoliet+0x2d>
c0005fe6:	ba 03 00 00 00       	mov    edx,0x3
c0005feb:	83 f8 45             	cmp    eax,0x45
c0005fee:	74 08                	je     c0005ff8 <isjoliet+0x2d>
c0005ff0:	31 d2                	xor    edx,edx
c0005ff2:	83 f8 40             	cmp    eax,0x40
c0005ff5:	0f 94 c2             	sete   dl
c0005ff8:	89 d0                	mov    eax,edx
c0005ffa:	c3                   	ret    

c0005ffb <htohl_32>:
c0005ffb:	8b 00                	mov    eax,DWORD PTR [eax]
c0005ffd:	c3                   	ret    

c0005ffe <iso_733>:
c0005ffe:	eb fb                	jmp    c0005ffb <htohl_32>

c0006000 <bgrad_cache>:
c0006000:	83 fa 0e             	cmp    edx,0xe
c0006003:	77 16                	ja     c000601b <bgrad_cache+0x1b>
c0006005:	53                   	push   ebx
c0006006:	8b 0c 90             	mov    ecx,DWORD PTR [eax+edx*4]
c0006009:	8b 5c 90 04          	mov    ebx,DWORD PTR [eax+edx*4+0x4]
c000600d:	89 1c 90             	mov    DWORD PTR [eax+edx*4],ebx
c0006010:	42                   	inc    edx
c0006011:	83 fa 0f             	cmp    edx,0xf
c0006014:	75 f3                	jne    c0006009 <bgrad_cache+0x9>
c0006016:	89 48 3c             	mov    DWORD PTR [eax+0x3c],ecx
c0006019:	5b                   	pop    ebx
c000601a:	c3                   	ret    
c000601b:	c3                   	ret    

c000601c <ucscompare>:
c000601c:	55                   	push   ebp
c000601d:	57                   	push   edi
c000601e:	89 c7                	mov    edi,eax
c0006020:	56                   	push   esi
c0006021:	89 d6                	mov    esi,edx
c0006023:	53                   	push   ebx
c0006024:	31 d2                	xor    edx,edx
c0006026:	83 ec 1c             	sub    esp,0x1c
c0006029:	0f be 1c 16          	movsx  ebx,BYTE PTR [esi+edx*1]
c000602d:	0f be 44 16 01       	movsx  eax,BYTE PTR [esi+edx*1+0x1]
c0006032:	c1 e3 08             	shl    ebx,0x8
c0006035:	09 c3                	or     ebx,eax
c0006037:	39 ca                	cmp    edx,ecx
c0006039:	7d 42                	jge    c000607d <ucscompare+0x61>
c000603b:	0f be 04 17          	movsx  eax,BYTE PTR [edi+edx*1]
c000603f:	0f be 6c 17 01       	movsx  ebp,BYTE PTR [edi+edx*1+0x1]
c0006044:	c1 e0 08             	shl    eax,0x8
c0006047:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000604b:	09 e8                	or     eax,ebp
c000604d:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0006051:	83 f8 3b             	cmp    eax,0x3b
c0006054:	74 27                	je     c000607d <ucscompare+0x61>
c0006056:	83 ec 0c             	sub    esp,0xc
c0006059:	50                   	push   eax
c000605a:	e8 f1 a8 ff ff       	call   c0000950 <tolower>
c000605f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0006062:	89 c5                	mov    ebp,eax
c0006064:	e8 e7 a8 ff ff       	call   c0000950 <tolower>
c0006069:	83 c4 10             	add    esp,0x10
c000606c:	39 c5                	cmp    ebp,eax
c000606e:	75 20                	jne    c0006090 <ucscompare+0x74>
c0006070:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0006074:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0006078:	83 c2 02             	add    edx,0x2
c000607b:	eb ac                	jmp    c0006029 <ucscompare+0xd>
c000607d:	85 db                	test   ebx,ebx
c000607f:	0f 95 c2             	setne  dl
c0006082:	31 c0                	xor    eax,eax
c0006084:	83 fb 2f             	cmp    ebx,0x2f
c0006087:	0f 95 c0             	setne  al
c000608a:	21 d0                	and    eax,edx
c000608c:	f7 d8                	neg    eax
c000608e:	eb 03                	jmp    c0006093 <ucscompare+0x77>
c0006090:	83 c8 ff             	or     eax,0xffffffff
c0006093:	83 c4 1c             	add    esp,0x1c
c0006096:	5b                   	pop    ebx
c0006097:	5e                   	pop    esi
c0006098:	5f                   	pop    edi
c0006099:	5d                   	pop    ebp
c000609a:	c3                   	ret    

c000609b <fncompare>:
c000609b:	55                   	push   ebp
c000609c:	57                   	push   edi
c000609d:	89 c7                	mov    edi,eax
c000609f:	56                   	push   esi
c00060a0:	89 ce                	mov    esi,ecx
c00060a2:	53                   	push   ebx
c00060a3:	31 db                	xor    ebx,ebx
c00060a5:	83 ec 1c             	sub    esp,0x1c
c00060a8:	39 d3                	cmp    ebx,edx
c00060aa:	7d 45                	jge    c00060f1 <fncompare+0x56>
c00060ac:	0f be 04 1f          	movsx  eax,BYTE PTR [edi+ebx*1]
c00060b0:	83 f8 3b             	cmp    eax,0x3b
c00060b3:	74 3c                	je     c00060f1 <fncompare+0x56>
c00060b5:	83 f8 2e             	cmp    eax,0x2e
c00060b8:	75 0e                	jne    c00060c8 <fncompare+0x2d>
c00060ba:	8d 4a ff             	lea    ecx,[edx-0x1]
c00060bd:	39 d9                	cmp    ecx,ebx
c00060bf:	74 30                	je     c00060f1 <fncompare+0x56>
c00060c1:	80 7c 1f 01 3b       	cmp    BYTE PTR [edi+ebx*1+0x1],0x3b
c00060c6:	74 29                	je     c00060f1 <fncompare+0x56>
c00060c8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00060cc:	83 ec 0c             	sub    esp,0xc
c00060cf:	50                   	push   eax
c00060d0:	e8 7b a8 ff ff       	call   c0000950 <tolower>
c00060d5:	89 c5                	mov    ebp,eax
c00060d7:	0f be 04 1e          	movsx  eax,BYTE PTR [esi+ebx*1]
c00060db:	89 04 24             	mov    DWORD PTR [esp],eax
c00060de:	e8 6d a8 ff ff       	call   c0000950 <tolower>
c00060e3:	83 c4 10             	add    esp,0x10
c00060e6:	39 c5                	cmp    ebp,eax
c00060e8:	75 1e                	jne    c0006108 <fncompare+0x6d>
c00060ea:	43                   	inc    ebx
c00060eb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00060ef:	eb b7                	jmp    c00060a8 <fncompare+0xd>
c00060f1:	0f be 14 1e          	movsx  edx,BYTE PTR [esi+ebx*1]
c00060f5:	85 d2                	test   edx,edx
c00060f7:	0f 95 c1             	setne  cl
c00060fa:	31 c0                	xor    eax,eax
c00060fc:	83 fa 2f             	cmp    edx,0x2f
c00060ff:	0f 95 c0             	setne  al
c0006102:	21 c8                	and    eax,ecx
c0006104:	f7 d8                	neg    eax
c0006106:	eb 03                	jmp    c000610b <fncompare+0x70>
c0006108:	83 c8 ff             	or     eax,0xffffffff
c000610b:	83 c4 1c             	add    esp,0x1c
c000610e:	5b                   	pop    ebx
c000610f:	5e                   	pop    esi
c0006110:	5f                   	pop    edi
c0006111:	5d                   	pop    ebp
c0006112:	c3                   	ret    

c0006113 <bclear_cache>:
c0006113:	83 ec 18             	sub    esp,0x18
c0006116:	68 80 04 02 c0       	push   0xc0020480
c000611b:	e8 f8 3c 01 00       	call   c0019e18 <iso_kprintf>
c0006120:	83 c4 10             	add    esp,0x10
c0006123:	31 c0                	xor    eax,eax
c0006125:	8b 14 85 20 50 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdafe0]
c000612c:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c0006132:	8b 14 85 80 50 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdaf80]
c0006139:	40                   	inc    eax
c000613a:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c0006140:	83 f8 10             	cmp    eax,0x10
c0006143:	75 e0                	jne    c0006125 <bclear_cache+0x12>
c0006145:	83 c4 0c             	add    esp,0xc
c0006148:	c3                   	ret    

c0006149 <bclear>:
c0006149:	eb c8                	jmp    c0006113 <bclear_cache>

c000614b <iso_break_all>:
c000614b:	83 ec 18             	sub    esp,0x18
c000614e:	68 8e 04 02 c0       	push   0xc002048e
c0006153:	e8 c0 3c 01 00       	call   c0019e18 <iso_kprintf>
c0006158:	83 c4 10             	add    esp,0x10
c000615b:	31 c0                	xor    eax,eax
c000615d:	c7 80 d0 55 02 c0 01 00 00 00 	mov    DWORD PTR [eax-0x3ffdaa30],0x1
c0006167:	05 94 00 00 00       	add    eax,0x94
c000616c:	3d 40 09 00 00       	cmp    eax,0x940
c0006171:	75 ea                	jne    c000615d <iso_break_all+0x12>
c0006173:	83 c4 0c             	add    esp,0xc
c0006176:	c3                   	ret    

c0006177 <isoReadDiscSector>:
c0006177:	83 ec 0c             	sub    esp,0xc
c000617a:	0f be 05 60 50 02 c0 	movsx  eax,BYTE PTR ds:0xc0025060
c0006181:	50                   	push   eax
c0006182:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0006186:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000618a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000618e:	e8 29 3c 01 00       	call   c0019dbc <isoReadDiscSectorHelper>
c0006193:	83 c4 1c             	add    esp,0x1c
c0006196:	c3                   	ret    

c0006197 <bread_cache>:
c0006197:	55                   	push   ebp
c0006198:	57                   	push   edi
c0006199:	89 d7                	mov    edi,edx
c000619b:	56                   	push   esi
c000619c:	ba 0f 00 00 00       	mov    edx,0xf
c00061a1:	53                   	push   ebx
c00061a2:	89 c6                	mov    esi,eax
c00061a4:	83 ec 0c             	sub    esp,0xc
c00061a7:	8b 04 96             	mov    eax,DWORD PTR [esi+edx*4]
c00061aa:	39 38                	cmp    DWORD PTR [eax],edi
c00061ac:	74 3c                	je     c00061ea <bread_cache+0x53>
c00061ae:	4a                   	dec    edx
c00061af:	83 fa ff             	cmp    edx,0xffffffff
c00061b2:	75 f3                	jne    c00061a7 <bread_cache+0x10>
c00061b4:	31 db                	xor    ebx,ebx
c00061b6:	8b 04 9e             	mov    eax,DWORD PTR [esi+ebx*4]
c00061b9:	83 38 ff             	cmp    DWORD PTR [eax],0xffffffff
c00061bc:	74 08                	je     c00061c6 <bread_cache+0x2f>
c00061be:	43                   	inc    ebx
c00061bf:	83 fb 10             	cmp    ebx,0x10
c00061c2:	75 f2                	jne    c00061b6 <bread_cache+0x1f>
c00061c4:	31 db                	xor    ebx,ebx
c00061c6:	8d 2c 9e             	lea    ebp,[esi+ebx*4]
c00061c9:	50                   	push   eax
c00061ca:	6a 01                	push   0x1
c00061cc:	57                   	push   edi
c00061cd:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00061d0:	83 c0 04             	add    eax,0x4
c00061d3:	50                   	push   eax
c00061d4:	e8 9e ff ff ff       	call   c0006177 <isoReadDiscSector>
c00061d9:	83 c4 10             	add    esp,0x10
c00061dc:	83 c9 ff             	or     ecx,0xffffffff
c00061df:	85 c0                	test   eax,eax
c00061e1:	78 13                	js     c00061f6 <bread_cache+0x5f>
c00061e3:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00061e6:	89 da                	mov    edx,ebx
c00061e8:	89 38                	mov    DWORD PTR [eax],edi
c00061ea:	89 f0                	mov    eax,esi
c00061ec:	e8 0f fe ff ff       	call   c0006000 <bgrad_cache>
c00061f1:	b9 0f 00 00 00       	mov    ecx,0xf
c00061f6:	83 c4 0c             	add    esp,0xc
c00061f9:	89 c8                	mov    eax,ecx
c00061fb:	5b                   	pop    ebx
c00061fc:	5e                   	pop    esi
c00061fd:	5f                   	pop    edi
c00061fe:	5d                   	pop    ebp
c00061ff:	c3                   	ret    

c0006200 <biread>:
c0006200:	89 c2                	mov    edx,eax
c0006202:	b8 80 50 02 c0       	mov    eax,0xc0025080
c0006207:	eb 8e                	jmp    c0006197 <bread_cache>

c0006209 <bdread>:
c0006209:	89 c2                	mov    edx,eax
c000620b:	b8 20 50 02 c0       	mov    eax,0xc0025020
c0006210:	eb 85                	jmp    c0006197 <bread_cache>

c0006212 <strnicmp>:
c0006212:	55                   	push   ebp
c0006213:	57                   	push   edi
c0006214:	31 ff                	xor    edi,edi
c0006216:	56                   	push   esi
c0006217:	53                   	push   ebx
c0006218:	83 ec 0c             	sub    esp,0xc
c000621b:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000621f:	3b 7c 24 28          	cmp    edi,DWORD PTR [esp+0x28]
c0006223:	74 43                	je     c0006268 <strnicmp+0x56>
c0006225:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0006229:	0f be 04 38          	movsx  eax,BYTE PTR [eax+edi*1]
c000622d:	85 c0                	test   eax,eax
c000622f:	74 37                	je     c0006268 <strnicmp+0x56>
c0006231:	0f be 14 3e          	movsx  edx,BYTE PTR [esi+edi*1]
c0006235:	85 d2                	test   edx,edx
c0006237:	74 2f                	je     c0006268 <strnicmp+0x56>
c0006239:	39 d0                	cmp    eax,edx
c000623b:	8d 6f 01             	lea    ebp,[edi+0x1]
c000623e:	75 04                	jne    c0006244 <strnicmp+0x32>
c0006240:	89 ef                	mov    edi,ebp
c0006242:	eb db                	jmp    c000621f <strnicmp+0xd>
c0006244:	83 ec 0c             	sub    esp,0xc
c0006247:	50                   	push   eax
c0006248:	e8 03 a7 ff ff       	call   c0000950 <tolower>
c000624d:	89 c3                	mov    ebx,eax
c000624f:	0f be 04 3e          	movsx  eax,BYTE PTR [esi+edi*1]
c0006253:	89 ef                	mov    edi,ebp
c0006255:	89 04 24             	mov    DWORD PTR [esp],eax
c0006258:	e8 f3 a6 ff ff       	call   c0000950 <tolower>
c000625d:	83 c4 10             	add    esp,0x10
c0006260:	29 c3                	sub    ebx,eax
c0006262:	89 d8                	mov    eax,ebx
c0006264:	74 b9                	je     c000621f <strnicmp+0xd>
c0006266:	eb 02                	jmp    c000626a <strnicmp+0x58>
c0006268:	31 c0                	xor    eax,eax
c000626a:	83 c4 0c             	add    esp,0xc
c000626d:	5b                   	pop    ebx
c000626e:	5e                   	pop    esi
c000626f:	5f                   	pop    edi
c0006270:	5d                   	pop    ebp
c0006271:	c3                   	ret    

c0006272 <find_object>:
c0006272:	55                   	push   ebp
c0006273:	57                   	push   edi
c0006274:	89 c7                	mov    edi,eax
c0006276:	56                   	push   esi
c0006277:	53                   	push   ebx
c0006278:	89 d3                	mov    ebx,edx
c000627a:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0006280:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c0006287:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000628b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000628f:	83 3d b4 5e 02 c0 00 	cmp    DWORD PTR ds:0xc0025eb4,0x0
c0006296:	74 0b                	je     c00062a3 <find_object+0x31>
c0006298:	89 fa                	mov    edx,edi
c000629a:	8d 44 24 20          	lea    eax,[esp+0x20]
c000629e:	e8 89 fc ff ff       	call   c0005f2c <utf2ucs>
c00062a3:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c00062a6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00062aa:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00062af:	7e 11                	jle    c00062c2 <find_object+0x50>
c00062b1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00062b5:	e8 46 ff ff ff       	call   c0006200 <biread>
c00062ba:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00062be:	85 c0                	test   eax,eax
c00062c0:	79 07                	jns    c00062c9 <find_object+0x57>
c00062c2:	31 db                	xor    ebx,ebx
c00062c4:	e9 56 01 00 00       	jmp    c000641f <find_object+0x1ad>
c00062c9:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00062d1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00062d5:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00062d9:	8b 04 85 80 50 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdaf80]
c00062e0:	8d 5c 08 04          	lea    ebx,[eax+ecx*1+0x4]
c00062e4:	0f b6 33             	movzx  esi,BYTE PTR [ebx]
c00062e7:	85 f6                	test   esi,esi
c00062e9:	75 0e                	jne    c00062f9 <find_object+0x87>
c00062eb:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c00062ef:	81 6c 24 0c 00 08 00 00 	sub    DWORD PTR [esp+0xc],0x800
c00062f7:	eb b1                	jmp    c00062aa <find_object+0x38>
c00062f9:	8b 2d b4 5e 02 c0    	mov    ebp,DWORD PTR ds:0xc0025eb4
c00062ff:	0f b6 4b 20          	movzx  ecx,BYTE PTR [ebx+0x20]
c0006303:	85 ed                	test   ebp,ebp
c0006305:	89 c8                	mov    eax,ecx
c0006307:	74 2b                	je     c0006334 <find_object+0xc2>
c0006309:	8d 43 21             	lea    eax,[ebx+0x21]
c000630c:	8d 54 24 20          	lea    edx,[esp+0x20]
c0006310:	e8 07 fd ff ff       	call   c000601c <ucscompare>
c0006315:	85 c0                	test   eax,eax
c0006317:	0f 84 bf 00 00 00    	je     c00063dc <find_object+0x16a>
c000631d:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
c0006320:	01 44 24 08          	add    DWORD PTR [esp+0x8],eax
c0006324:	81 7c 24 08 ff 07 00 00 	cmp    DWORD PTR [esp+0x8],0x7ff
c000632c:	0f 8e da 00 00 00    	jle    c000640c <find_object+0x19a>
c0006332:	eb b7                	jmp    c00062eb <find_object+0x79>
c0006334:	29 ce                	sub    esi,ecx
c0006336:	8d 54 0b 21          	lea    edx,[ebx+ecx*1+0x21]
c000633a:	a8 01                	test   al,0x1
c000633c:	74 05                	je     c0006343 <find_object+0xd1>
c000633e:	83 ee 21             	sub    esi,0x21
c0006341:	eb 5a                	jmp    c000639d <find_object+0x12b>
c0006343:	42                   	inc    edx
c0006344:	83 ee 22             	sub    esi,0x22
c0006347:	eb 54                	jmp    c000639d <find_object+0x12b>
c0006349:	8a 42 03             	mov    al,BYTE PTR [edx+0x3]
c000634c:	48                   	dec    eax
c000634d:	3c 01                	cmp    al,0x1
c000634f:	77 51                	ja     c00063a2 <find_object+0x130>
c0006351:	50                   	push   eax
c0006352:	6a 02                	push   0x2
c0006354:	68 9d 04 02 c0       	push   0xc002049d
c0006359:	52                   	push   edx
c000635a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000635e:	e8 7d a4 ff ff       	call   c00007e0 <strncmp>
c0006363:	83 c4 10             	add    esp,0x10
c0006366:	85 c0                	test   eax,eax
c0006368:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000636c:	75 27                	jne    c0006395 <find_object+0x123>
c000636e:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c0006372:	8d 68 fb             	lea    ebp,[eax-0x5]
c0006375:	50                   	push   eax
c0006376:	8d 42 05             	lea    eax,[edx+0x5]
c0006379:	55                   	push   ebp
c000637a:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000637e:	50                   	push   eax
c000637f:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0006383:	50                   	push   eax
c0006384:	e8 f7 a2 ff ff       	call   c0000680 <strncpy>
c0006389:	c6 44 2c 30 00       	mov    BYTE PTR [esp+ebp*1+0x30],0x0
c000638e:	83 c4 10             	add    esp,0x10
c0006391:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0006395:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c0006399:	29 c6                	sub    esi,eax
c000639b:	01 c2                	add    edx,eax
c000639d:	83 fe 03             	cmp    esi,0x3
c00063a0:	7f a7                	jg     c0006349 <find_object+0xd7>
c00063a2:	85 ed                	test   ebp,ebp
c00063a4:	7e 40                	jle    c00063e6 <find_object+0x174>
c00063a6:	51                   	push   ecx
c00063a7:	51                   	push   ecx
c00063a8:	6a 2f                	push   0x2f
c00063aa:	57                   	push   edi
c00063ab:	e8 f0 a3 ff ff       	call   c00007a0 <strchr>
c00063b0:	83 c4 10             	add    esp,0x10
c00063b3:	85 c0                	test   eax,eax
c00063b5:	74 04                	je     c00063bb <find_object+0x149>
c00063b7:	29 f8                	sub    eax,edi
c00063b9:	eb 0c                	jmp    c00063c7 <find_object+0x155>
c00063bb:	83 ec 0c             	sub    esp,0xc
c00063be:	57                   	push   edi
c00063bf:	e8 ac a1 ff ff       	call   c0000570 <strlen>
c00063c4:	83 c4 10             	add    esp,0x10
c00063c7:	52                   	push   edx
c00063c8:	50                   	push   eax
c00063c9:	57                   	push   edi
c00063ca:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00063ce:	50                   	push   eax
c00063cf:	e8 3e fe ff ff       	call   c0006212 <strnicmp>
c00063d4:	83 c4 10             	add    esp,0x10
c00063d7:	e9 39 ff ff ff       	jmp    c0006315 <find_object+0xa3>
c00063dc:	0f b6 43 19          	movzx  eax,BYTE PTR [ebx+0x19]
c00063e0:	3b 44 24 10          	cmp    eax,DWORD PTR [esp+0x10]
c00063e4:	eb 1e                	jmp    c0006404 <find_object+0x192>
c00063e6:	0f b6 53 20          	movzx  edx,BYTE PTR [ebx+0x20]
c00063ea:	8d 43 21             	lea    eax,[ebx+0x21]
c00063ed:	89 f9                	mov    ecx,edi
c00063ef:	e8 a7 fc ff ff       	call   c000609b <fncompare>
c00063f4:	85 c0                	test   eax,eax
c00063f6:	0f 85 21 ff ff ff    	jne    c000631d <find_object+0xab>
c00063fc:	0f b6 43 19          	movzx  eax,BYTE PTR [ebx+0x19]
c0006400:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c0006404:	0f 85 13 ff ff ff    	jne    c000631d <find_object+0xab>
c000640a:	eb 13                	jmp    c000641f <find_object+0x1ad>
c000640c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0006410:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c0006414:	0f 8f b7 fe ff ff    	jg     c00062d1 <find_object+0x5f>
c000641a:	e9 cc fe ff ff       	jmp    c00062eb <find_object+0x79>
c000641f:	81 c4 2c 01 00 00    	add    esp,0x12c
c0006425:	89 d8                	mov    eax,ebx
c0006427:	5b                   	pop    ebx
c0006428:	5e                   	pop    esi
c0006429:	5f                   	pop    edi
c000642a:	5d                   	pop    ebp
c000642b:	c3                   	ret    

c000642c <find_object_path>:
c000642c:	55                   	push   ebp
c000642d:	57                   	push   edi
c000642e:	89 d7                	mov    edi,edx
c0006430:	56                   	push   esi
c0006431:	89 c6                	mov    esi,eax
c0006433:	53                   	push   ebx
c0006434:	89 cb                	mov    ebx,ecx
c0006436:	83 ec 0c             	sub    esp,0xc
c0006439:	50                   	push   eax
c000643a:	50                   	push   eax
c000643b:	6a 2f                	push   0x2f
c000643d:	56                   	push   esi
c000643e:	e8 5d a3 ff ff       	call   c00007a0 <strchr>
c0006443:	83 c4 10             	add    esp,0x10
c0006446:	89 c5                	mov    ebp,eax
c0006448:	85 c0                	test   eax,eax
c000644a:	74 3a                	je     c0006486 <find_object_path+0x5a>
c000644c:	39 ee                	cmp    esi,ebp
c000644e:	74 31                	je     c0006481 <find_object_path+0x55>
c0006450:	8d 43 0a             	lea    eax,[ebx+0xa]
c0006453:	e8 a6 fb ff ff       	call   c0005ffe <iso_733>
c0006458:	89 c2                	mov    edx,eax
c000645a:	8d 43 02             	lea    eax,[ebx+0x2]
c000645d:	e8 9c fb ff ff       	call   c0005ffe <iso_733>
c0006462:	83 ec 0c             	sub    esp,0xc
c0006465:	89 c1                	mov    ecx,eax
c0006467:	52                   	push   edx
c0006468:	89 f0                	mov    eax,esi
c000646a:	ba 01 00 00 00       	mov    edx,0x1
c000646f:	e8 fe fd ff ff       	call   c0006272 <find_object>
c0006474:	83 c4 10             	add    esp,0x10
c0006477:	89 c3                	mov    ebx,eax
c0006479:	85 c0                	test   eax,eax
c000647b:	75 04                	jne    c0006481 <find_object_path+0x55>
c000647d:	31 db                	xor    ebx,ebx
c000647f:	eb 36                	jmp    c00064b7 <find_object_path+0x8b>
c0006481:	8d 75 01             	lea    esi,[ebp+0x1]
c0006484:	eb b3                	jmp    c0006439 <find_object_path+0xd>
c0006486:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c0006489:	74 28                	je     c00064b3 <find_object_path+0x87>
c000648b:	8d 43 0a             	lea    eax,[ebx+0xa]
c000648e:	e8 6b fb ff ff       	call   c0005ffe <iso_733>
c0006493:	89 c2                	mov    edx,eax
c0006495:	8d 43 02             	lea    eax,[ebx+0x2]
c0006498:	e8 61 fb ff ff       	call   c0005ffe <iso_733>
c000649d:	83 ec 0c             	sub    esp,0xc
c00064a0:	89 c1                	mov    ecx,eax
c00064a2:	52                   	push   edx
c00064a3:	89 f0                	mov    eax,esi
c00064a5:	89 fa                	mov    edx,edi
c00064a7:	e8 c6 fd ff ff       	call   c0006272 <find_object>
c00064ac:	83 c4 10             	add    esp,0x10
c00064af:	89 c3                	mov    ebx,eax
c00064b1:	eb 04                	jmp    c00064b7 <find_object_path+0x8b>
c00064b3:	85 ff                	test   edi,edi
c00064b5:	74 c6                	je     c000647d <find_object_path+0x51>
c00064b7:	83 c4 0c             	add    esp,0xc
c00064ba:	89 d8                	mov    eax,ebx
c00064bc:	5b                   	pop    ebx
c00064bd:	5e                   	pop    esi
c00064be:	5f                   	pop    edi
c00064bf:	5d                   	pop    ebp
c00064c0:	c3                   	ret    

c00064c1 <stricmp>:
c00064c1:	57                   	push   edi
c00064c2:	56                   	push   esi
c00064c3:	31 f6                	xor    esi,esi
c00064c5:	53                   	push   ebx
c00064c6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00064ca:	83 ec 0c             	sub    esp,0xc
c00064cd:	0f b6 3c 30          	movzx  edi,BYTE PTR [eax+esi*1]
c00064d1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00064d5:	0f b6 04 30          	movzx  eax,BYTE PTR [eax+esi*1]
c00064d9:	50                   	push   eax
c00064da:	e8 51 a4 ff ff       	call   c0000930 <toupper>
c00064df:	89 04 24             	mov    DWORD PTR [esp],eax
c00064e2:	e8 69 a4 ff ff       	call   c0000950 <tolower>
c00064e7:	89 3c 24             	mov    DWORD PTR [esp],edi
c00064ea:	89 c3                	mov    ebx,eax
c00064ec:	e8 3f a4 ff ff       	call   c0000930 <toupper>
c00064f1:	89 04 24             	mov    DWORD PTR [esp],eax
c00064f4:	e8 57 a4 ff ff       	call   c0000950 <tolower>
c00064f9:	83 c4 10             	add    esp,0x10
c00064fc:	39 c3                	cmp    ebx,eax
c00064fe:	75 05                	jne    c0006505 <stricmp+0x44>
c0006500:	46                   	inc    esi
c0006501:	85 db                	test   ebx,ebx
c0006503:	75 c1                	jne    c00064c6 <stricmp+0x5>
c0006505:	29 c3                	sub    ebx,eax
c0006507:	89 d8                	mov    eax,ebx
c0006509:	5b                   	pop    ebx
c000650a:	5e                   	pop    esi
c000650b:	5f                   	pop    edi
c000650c:	c3                   	ret    

c000650d <iso_open>:
c000650d:	57                   	push   edi
c000650e:	31 c0                	xor    eax,eax
c0006510:	56                   	push   esi
c0006511:	b9 80 5e 02 c0       	mov    ecx,0xc0025e80
c0006516:	53                   	push   ebx
c0006517:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000651c:	0f 95 c0             	setne  al
c000651f:	89 c2                	mov    edx,eax
c0006521:	89 c6                	mov    esi,eax
c0006523:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006527:	e8 00 ff ff ff       	call   c000642c <find_object_path>
c000652c:	83 ca ff             	or     edx,0xffffffff
c000652f:	85 c0                	test   eax,eax
c0006531:	74 5e                	je     c0006591 <iso_open+0x84>
c0006533:	89 c1                	mov    ecx,eax
c0006535:	31 d2                	xor    edx,edx
c0006537:	69 fa 94 00 00 00    	imul   edi,edx,0x94
c000653d:	83 bf 40 55 02 c0 00 	cmp    DWORD PTR [edi-0x3ffdaac0],0x0
c0006544:	75 42                	jne    c0006588 <iso_open+0x7b>
c0006546:	8d 41 02             	lea    eax,[ecx+0x2]
c0006549:	c7 87 40 55 02 c0 ff ff ff ff 	mov    DWORD PTR [edi-0x3ffdaac0],0xffffffff
c0006553:	e8 a6 fa ff ff       	call   c0005ffe <iso_733>
c0006558:	89 b7 44 55 02 c0    	mov    DWORD PTR [edi-0x3ffdaabc],esi
c000655e:	89 87 40 55 02 c0    	mov    DWORD PTR [edi-0x3ffdaac0],eax
c0006564:	c7 87 48 55 02 c0 00 00 00 00 	mov    DWORD PTR [edi-0x3ffdaab8],0x0
c000656e:	8d 41 0a             	lea    eax,[ecx+0xa]
c0006571:	e8 88 fa ff ff       	call   c0005ffe <iso_733>
c0006576:	c7 87 d0 55 02 c0 00 00 00 00 	mov    DWORD PTR [edi-0x3ffdaa30],0x0
c0006580:	89 87 4c 55 02 c0    	mov    DWORD PTR [edi-0x3ffdaab4],eax
c0006586:	eb 09                	jmp    c0006591 <iso_open+0x84>
c0006588:	42                   	inc    edx
c0006589:	83 fa 10             	cmp    edx,0x10
c000658c:	75 a9                	jne    c0006537 <iso_open+0x2a>
c000658e:	83 ca ff             	or     edx,0xffffffff
c0006591:	5b                   	pop    ebx
c0006592:	89 d0                	mov    eax,edx
c0006594:	5e                   	pop    esi
c0006595:	5f                   	pop    edi
c0006596:	c3                   	ret    

c0006597 <iso_close>:
c0006597:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000659b:	83 f8 0f             	cmp    eax,0xf
c000659e:	7f 10                	jg     c00065b0 <iso_close+0x19>
c00065a0:	69 c0 94 00 00 00    	imul   eax,eax,0x94
c00065a6:	c7 80 40 55 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdaac0],0x0
c00065b0:	e9 5e fb ff ff       	jmp    c0006113 <bclear_cache>

c00065b5 <iso_read>:
c00065b5:	55                   	push   ebp
c00065b6:	57                   	push   edi
c00065b7:	56                   	push   esi
c00065b8:	53                   	push   ebx
c00065b9:	83 ec 1c             	sub    esp,0x1c
c00065bc:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00065c0:	83 fd 0f             	cmp    ebp,0xf
c00065c3:	7e 0a                	jle    c00065cf <iso_read+0x1a>
c00065c5:	83 c8 ff             	or     eax,0xffffffff
c00065c8:	89 c2                	mov    edx,eax
c00065ca:	e9 f4 00 00 00       	jmp    c00066c3 <iso_read+0x10e>
c00065cf:	69 ed 94 00 00 00    	imul   ebp,ebp,0x94
c00065d5:	83 bd 40 55 02 c0 00 	cmp    DWORD PTR [ebp-0x3ffdaac0],0x0
c00065dc:	74 e7                	je     c00065c5 <iso_read+0x10>
c00065de:	8b 95 d0 55 02 c0    	mov    edx,DWORD PTR [ebp-0x3ffdaa30]
c00065e4:	85 d2                	test   edx,edx
c00065e6:	75 dd                	jne    c00065c5 <iso_read+0x10>
c00065e8:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c00065ed:	0f 84 cd 00 00 00    	je     c00066c0 <iso_read+0x10b>
c00065f3:	8b 85 48 55 02 c0    	mov    eax,DWORD PTR [ebp-0x3ffdaab8]
c00065f9:	8b 8d 4c 55 02 c0    	mov    ecx,DWORD PTR [ebp-0x3ffdaab4]
c00065ff:	29 c1                	sub    ecx,eax
c0006601:	3b 4c 24 38          	cmp    ecx,DWORD PTR [esp+0x38]
c0006605:	76 04                	jbe    c000660b <iso_read+0x56>
c0006607:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000660b:	85 c9                	test   ecx,ecx
c000660d:	0f 84 ad 00 00 00    	je     c00066c0 <iso_read+0x10b>
c0006613:	89 c6                	mov    esi,eax
c0006615:	bb 00 08 00 00       	mov    ebx,0x800
c000661a:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0006620:	c1 e8 0b             	shr    eax,0xb
c0006623:	29 f3                	sub    ebx,esi
c0006625:	03 85 40 55 02 c0    	add    eax,DWORD PTR [ebp-0x3ffdaac0]
c000662b:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0006631:	7e 3f                	jle    c0006672 <iso_read+0xbd>
c0006633:	81 fb 00 08 00 00    	cmp    ebx,0x800
c0006639:	75 37                	jne    c0006672 <iso_read+0xbd>
c000663b:	be 20 00 00 00       	mov    esi,0x20
c0006640:	81 f9 ff 07 01 00    	cmp    ecx,0x107ff
c0006646:	7f 05                	jg     c000664d <iso_read+0x98>
c0006648:	89 ce                	mov    esi,ecx
c000664a:	c1 fe 0b             	sar    esi,0xb
c000664d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0006651:	89 f3                	mov    ebx,esi
c0006653:	c1 e3 0b             	shl    ebx,0xb
c0006656:	52                   	push   edx
c0006657:	56                   	push   esi
c0006658:	50                   	push   eax
c0006659:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000665d:	e8 15 fb ff ff       	call   c0006177 <isoReadDiscSector>
c0006662:	83 c4 10             	add    esp,0x10
c0006665:	85 c0                	test   eax,eax
c0006667:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000666b:	7f 3e                	jg     c00066ab <iso_read+0xf6>
c000666d:	e9 53 ff ff ff       	jmp    c00065c5 <iso_read+0x10>
c0006672:	39 cb                	cmp    ebx,ecx
c0006674:	7e 02                	jle    c0006678 <iso_read+0xc3>
c0006676:	89 cb                	mov    ebx,ecx
c0006678:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000667c:	e8 88 fb ff ff       	call   c0006209 <bdread>
c0006681:	85 c0                	test   eax,eax
c0006683:	0f 88 3c ff ff ff    	js     c00065c5 <iso_read+0x10>
c0006689:	8b 0c 85 20 50 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdafe0]
c0006690:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0006694:	8b 85 48 55 02 c0    	mov    eax,DWORD PTR [ebp-0x3ffdaab8]
c000669a:	25 ff 07 00 00       	and    eax,0x7ff
c000669f:	8d 74 01 04          	lea    esi,[ecx+eax*1+0x4]
c00066a3:	89 d9                	mov    ecx,ebx
c00066a5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00066a7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00066ab:	01 5c 24 34          	add    DWORD PTR [esp+0x34],ebx
c00066af:	01 9d 48 55 02 c0    	add    DWORD PTR [ebp-0x3ffdaab8],ebx
c00066b5:	29 5c 24 38          	sub    DWORD PTR [esp+0x38],ebx
c00066b9:	01 da                	add    edx,ebx
c00066bb:	e9 28 ff ff ff       	jmp    c00065e8 <iso_read+0x33>
c00066c0:	89 d0                	mov    eax,edx
c00066c2:	99                   	cdq    
c00066c3:	83 c4 1c             	add    esp,0x1c
c00066c6:	5b                   	pop    ebx
c00066c7:	5e                   	pop    esi
c00066c8:	5f                   	pop    edi
c00066c9:	5d                   	pop    ebp
c00066ca:	c3                   	ret    

c00066cb <iso_seek>:
c00066cb:	55                   	push   ebp
c00066cc:	83 c8 ff             	or     eax,0xffffffff
c00066cf:	57                   	push   edi
c00066d0:	89 c2                	mov    edx,eax
c00066d2:	56                   	push   esi
c00066d3:	53                   	push   ebx
c00066d4:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00066d8:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00066dc:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00066e0:	83 fe 0f             	cmp    esi,0xf
c00066e3:	7f 65                	jg     c000674a <iso_seek+0x7f>
c00066e5:	69 ee 94 00 00 00    	imul   ebp,esi,0x94
c00066eb:	8d 8d 40 55 02 c0    	lea    ecx,[ebp-0x3ffdaac0]
c00066f1:	83 bd 40 55 02 c0 00 	cmp    DWORD PTR [ebp-0x3ffdaac0],0x0
c00066f8:	74 50                	je     c000674a <iso_seek+0x7f>
c00066fa:	83 b9 90 00 00 00 00 	cmp    DWORD PTR [ecx+0x90],0x0
c0006701:	75 47                	jne    c000674a <iso_seek+0x7f>
c0006703:	83 fb 01             	cmp    ebx,0x1
c0006706:	74 0e                	je     c0006716 <iso_seek+0x4b>
c0006708:	83 fb 02             	cmp    ebx,0x2
c000670b:	74 0e                	je     c000671b <iso_seek+0x50>
c000670d:	85 db                	test   ebx,ebx
c000670f:	75 39                	jne    c000674a <iso_seek+0x7f>
c0006711:	89 79 08             	mov    DWORD PTR [ecx+0x8],edi
c0006714:	eb 0d                	jmp    c0006723 <iso_seek+0x58>
c0006716:	01 79 08             	add    DWORD PTR [ecx+0x8],edi
c0006719:	eb 08                	jmp    c0006723 <iso_seek+0x58>
c000671b:	8b 41 0c             	mov    eax,DWORD PTR [ecx+0xc]
c000671e:	01 f8                	add    eax,edi
c0006720:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c0006723:	69 c6 94 00 00 00    	imul   eax,esi,0x94
c0006729:	8b 88 4c 55 02 c0    	mov    ecx,DWORD PTR [eax-0x3ffdaab4]
c000672f:	05 40 55 02 c0       	add    eax,0xc0025540
c0006734:	39 48 08             	cmp    DWORD PTR [eax+0x8],ecx
c0006737:	76 03                	jbe    c000673c <iso_seek+0x71>
c0006739:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c000673c:	69 d6 94 00 00 00    	imul   edx,esi,0x94
c0006742:	8b 82 48 55 02 c0    	mov    eax,DWORD PTR [edx-0x3ffdaab8]
c0006748:	31 d2                	xor    edx,edx
c000674a:	5b                   	pop    ebx
c000674b:	5e                   	pop    esi
c000674c:	5f                   	pop    edi
c000674d:	5d                   	pop    ebp
c000674e:	c3                   	ret    

c000674f <iso_tell>:
c000674f:	83 c8 ff             	or     eax,0xffffffff
c0006752:	53                   	push   ebx
c0006753:	89 c2                	mov    edx,eax
c0006755:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0006759:	83 f9 0f             	cmp    ecx,0xf
c000675c:	7f 20                	jg     c000677e <iso_tell+0x2f>
c000675e:	69 d9 94 00 00 00    	imul   ebx,ecx,0x94
c0006764:	83 bb 40 55 02 c0 00 	cmp    DWORD PTR [ebx-0x3ffdaac0],0x0
c000676b:	74 11                	je     c000677e <iso_tell+0x2f>
c000676d:	83 bb d0 55 02 c0 00 	cmp    DWORD PTR [ebx-0x3ffdaa30],0x0
c0006774:	75 08                	jne    c000677e <iso_tell+0x2f>
c0006776:	8b 83 48 55 02 c0    	mov    eax,DWORD PTR [ebx-0x3ffdaab8]
c000677c:	31 d2                	xor    edx,edx
c000677e:	5b                   	pop    ebx
c000677f:	c3                   	ret    

c0006780 <iso_total>:
c0006780:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0006784:	83 c8 ff             	or     eax,0xffffffff
c0006787:	83 fa 0f             	cmp    edx,0xf
c000678a:	7f 1e                	jg     c00067aa <iso_total+0x2a>
c000678c:	69 d2 94 00 00 00    	imul   edx,edx,0x94
c0006792:	83 ba 40 55 02 c0 00 	cmp    DWORD PTR [edx-0x3ffdaac0],0x0
c0006799:	74 0f                	je     c00067aa <iso_total+0x2a>
c000679b:	83 ba d0 55 02 c0 00 	cmp    DWORD PTR [edx-0x3ffdaa30],0x0
c00067a2:	75 06                	jne    c00067aa <iso_total+0x2a>
c00067a4:	8b 82 4c 55 02 c0    	mov    eax,DWORD PTR [edx-0x3ffdaab4]
c00067aa:	c3                   	ret    

c00067ab <fn_postprocess>:
c00067ab:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00067af:	89 d0                	mov    eax,edx
c00067b1:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c00067b4:	83 f9 3b             	cmp    ecx,0x3b
c00067b7:	74 07                	je     c00067c0 <fn_postprocess+0x15>
c00067b9:	85 c9                	test   ecx,ecx
c00067bb:	74 03                	je     c00067c0 <fn_postprocess+0x15>
c00067bd:	40                   	inc    eax
c00067be:	eb f1                	jmp    c00067b1 <fn_postprocess+0x6>
c00067c0:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00067c3:	39 d0                	cmp    eax,edx
c00067c5:	76 0a                	jbe    c00067d1 <fn_postprocess+0x26>
c00067c7:	80 78 ff 2e          	cmp    BYTE PTR [eax-0x1],0x2e
c00067cb:	75 04                	jne    c00067d1 <fn_postprocess+0x26>
c00067cd:	c6 40 ff 00          	mov    BYTE PTR [eax-0x1],0x0
c00067d1:	c3                   	ret    

c00067d2 <iso_readdir>:
c00067d2:	55                   	push   ebp
c00067d3:	57                   	push   edi
c00067d4:	56                   	push   esi
c00067d5:	53                   	push   ebx
c00067d6:	83 ec 1c             	sub    esp,0x1c
c00067d9:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00067dd:	83 fb 0f             	cmp    ebx,0xf
c00067e0:	7f 28                	jg     c000680a <iso_readdir+0x38>
c00067e2:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c00067e8:	8d b8 40 55 02 c0    	lea    edi,[eax-0x3ffdaac0]
c00067ee:	83 b8 40 55 02 c0 00 	cmp    DWORD PTR [eax-0x3ffdaac0],0x0
c00067f5:	74 13                	je     c000680a <iso_readdir+0x38>
c00067f7:	83 7f 04 00          	cmp    DWORD PTR [edi+0x4],0x0
c00067fb:	74 0d                	je     c000680a <iso_readdir+0x38>
c00067fd:	83 bf 90 00 00 00 00 	cmp    DWORD PTR [edi+0x90],0x0
c0006804:	0f 84 b1 00 00 00    	je     c00068bb <iso_readdir+0xe9>
c000680a:	83 ec 0c             	sub    esp,0xc
c000680d:	68 a0 04 02 c0       	push   0xc00204a0
c0006812:	e8 01 36 01 00       	call   c0019e18 <iso_kprintf>
c0006817:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000681a:	e8 15 36 01 00       	call   c0019e34 <iso_kprintfd>
c000681f:	69 db 94 00 00 00    	imul   ebx,ebx,0x94
c0006825:	c7 04 24 a5 04 02 c0 	mov    DWORD PTR [esp],0xc00204a5
c000682c:	e8 e7 35 01 00       	call   c0019e18 <iso_kprintf>
c0006831:	5d                   	pop    ebp
c0006832:	ff b3 40 55 02 c0    	push   DWORD PTR [ebx-0x3ffdaac0]
c0006838:	e8 f7 35 01 00       	call   c0019e34 <iso_kprintfd>
c000683d:	c7 04 24 ab 04 02 c0 	mov    DWORD PTR [esp],0xc00204ab
c0006844:	e8 cf 35 01 00       	call   c0019e18 <iso_kprintf>
c0006849:	58                   	pop    eax
c000684a:	ff b3 44 55 02 c0    	push   DWORD PTR [ebx-0x3ffdaabc]
c0006850:	e8 df 35 01 00       	call   c0019e34 <iso_kprintfd>
c0006855:	c7 04 24 b1 04 02 c0 	mov    DWORD PTR [esp],0xc00204b1
c000685c:	e8 b7 35 01 00       	call   c0019e18 <iso_kprintf>
c0006861:	58                   	pop    eax
c0006862:	ff b3 d0 55 02 c0    	push   DWORD PTR [ebx-0x3ffdaa30]
c0006868:	e8 c7 35 01 00       	call   c0019e34 <iso_kprintfd>
c000686d:	83 c4 10             	add    esp,0x10
c0006870:	eb 42                	jmp    c00068b4 <iso_readdir+0xe2>
c0006872:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c0006875:	8b 34 85 80 50 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffdaf80]
c000687c:	89 d1                	mov    ecx,edx
c000687e:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0006884:	8d 74 0e 04          	lea    esi,[esi+ecx*1+0x4]
c0006888:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c000688b:	75 35                	jne    c00068c2 <iso_readdir+0xf0>
c000688d:	81 e2 00 f8 ff ff    	and    edx,0xfffff800
c0006893:	81 c2 00 08 00 00    	add    edx,0x800
c0006899:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c000689c:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c000689f:	3b 57 0c             	cmp    edx,DWORD PTR [edi+0xc]
c00068a2:	73 1e                	jae    c00068c2 <iso_readdir+0xf0>
c00068a4:	c1 ea 0b             	shr    edx,0xb
c00068a7:	8b 07                	mov    eax,DWORD PTR [edi]
c00068a9:	01 d0                	add    eax,edx
c00068ab:	e8 50 f9 ff ff       	call   c0006200 <biread>
c00068b0:	85 c0                	test   eax,eax
c00068b2:	79 be                	jns    c0006872 <iso_readdir+0xa0>
c00068b4:	31 c0                	xor    eax,eax
c00068b6:	e9 66 01 00 00       	jmp    c0006a21 <iso_readdir+0x24f>
c00068bb:	31 f6                	xor    esi,esi
c00068bd:	83 c8 ff             	or     eax,0xffffffff
c00068c0:	eb da                	jmp    c000689c <iso_readdir+0xca>
c00068c2:	69 d3 94 00 00 00    	imul   edx,ebx,0x94
c00068c8:	8b ba 48 55 02 c0    	mov    edi,DWORD PTR [edx-0x3ffdaab8]
c00068ce:	81 c2 40 55 02 c0    	add    edx,0xc0025540
c00068d4:	3b 7a 0c             	cmp    edi,DWORD PTR [edx+0xc]
c00068d7:	73 db                	jae    c00068b4 <iso_readdir+0xe2>
c00068d9:	80 7e 21 00          	cmp    BYTE PTR [esi+0x21],0x0
c00068dd:	75 34                	jne    c0006913 <iso_readdir+0x141>
c00068df:	80 7e 20 01          	cmp    BYTE PTR [esi+0x20],0x1
c00068e3:	75 2e                	jne    c0006913 <iso_readdir+0x141>
c00068e5:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c00068e8:	8b 34 85 80 50 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffdaf80]
c00068ef:	01 f9                	add    ecx,edi
c00068f1:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c00068f4:	89 c8                	mov    eax,ecx
c00068f6:	25 ff 07 00 00       	and    eax,0x7ff
c00068fb:	0f b6 44 06 04       	movzx  eax,BYTE PTR [esi+eax*1+0x4]
c0006900:	01 c8                	add    eax,ecx
c0006902:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c0006905:	25 ff 07 00 00       	and    eax,0x7ff
c000690a:	8d 74 06 04          	lea    esi,[esi+eax*1+0x4]
c000690e:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c0006911:	74 a1                	je     c00068b4 <iso_readdir+0xe2>
c0006913:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c0006919:	0f b6 4e 20          	movzx  ecx,BYTE PTR [esi+0x20]
c000691d:	8d 56 21             	lea    edx,[esi+0x21]
c0006920:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0006924:	8d a8 58 55 02 c0    	lea    ebp,[eax-0x3ffdaaa8]
c000692a:	83 3d b4 5e 02 c0 00 	cmp    DWORD PTR ds:0xc0025eb4,0x0
c0006931:	74 0c                	je     c000693f <iso_readdir+0x16d>
c0006933:	89 e8                	mov    eax,ebp
c0006935:	e8 14 f6 ff ff       	call   c0005f4e <ucs2utfn>
c000693a:	e9 a6 00 00 00       	jmp    c00069e5 <iso_readdir+0x213>
c000693f:	57                   	push   edi
c0006940:	51                   	push   ecx
c0006941:	52                   	push   edx
c0006942:	55                   	push   ebp
c0006943:	e8 38 9d ff ff       	call   c0000680 <strncpy>
c0006948:	0f b6 46 20          	movzx  eax,BYTE PTR [esi+0x20]
c000694c:	69 cb 94 00 00 00    	imul   ecx,ebx,0x94
c0006952:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0006955:	c6 84 01 58 55 02 c0 00 	mov    BYTE PTR [ecx+eax*1-0x3ffdaaa8],0x0
c000695d:	e8 49 fe ff ff       	call   c00067ab <fn_postprocess>
c0006962:	0f b6 56 20          	movzx  edx,BYTE PTR [esi+0x20]
c0006966:	0f b6 06             	movzx  eax,BYTE PTR [esi]
c0006969:	83 c4 10             	add    esp,0x10
c000696c:	29 d0                	sub    eax,edx
c000696e:	8d 7c 16 21          	lea    edi,[esi+edx*1+0x21]
c0006972:	f6 46 20 01          	test   BYTE PTR [esi+0x20],0x1
c0006976:	74 05                	je     c000697d <iso_readdir+0x1ab>
c0006978:	83 e8 21             	sub    eax,0x21
c000697b:	eb 04                	jmp    c0006981 <iso_readdir+0x1af>
c000697d:	47                   	inc    edi
c000697e:	83 e8 22             	sub    eax,0x22
c0006981:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0006985:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c000698b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000698f:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c0006994:	7e 4f                	jle    c00069e5 <iso_readdir+0x213>
c0006996:	8a 47 03             	mov    al,BYTE PTR [edi+0x3]
c0006999:	48                   	dec    eax
c000699a:	3c 01                	cmp    al,0x1
c000699c:	77 47                	ja     c00069e5 <iso_readdir+0x213>
c000699e:	52                   	push   edx
c000699f:	6a 02                	push   0x2
c00069a1:	68 9d 04 02 c0       	push   0xc002049d
c00069a6:	57                   	push   edi
c00069a7:	e8 34 9e ff ff       	call   c00007e0 <strncmp>
c00069ac:	83 c4 10             	add    esp,0x10
c00069af:	85 c0                	test   eax,eax
c00069b1:	75 26                	jne    c00069d9 <iso_readdir+0x207>
c00069b3:	50                   	push   eax
c00069b4:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c00069b8:	83 e8 05             	sub    eax,0x5
c00069bb:	50                   	push   eax
c00069bc:	8d 47 05             	lea    eax,[edi+0x5]
c00069bf:	50                   	push   eax
c00069c0:	55                   	push   ebp
c00069c1:	e8 ba 9c ff ff       	call   c0000680 <strncpy>
c00069c6:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00069ca:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c00069ce:	83 c4 10             	add    esp,0x10
c00069d1:	c6 84 08 53 55 02 c0 00 	mov    BYTE PTR [eax+ecx*1-0x3ffdaaad],0x0
c00069d9:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c00069dd:	29 44 24 04          	sub    DWORD PTR [esp+0x4],eax
c00069e1:	01 c7                	add    edi,eax
c00069e3:	eb aa                	jmp    c000698f <iso_readdir+0x1bd>
c00069e5:	83 c8 ff             	or     eax,0xffffffff
c00069e8:	f6 46 19 02          	test   BYTE PTR [esi+0x19],0x2
c00069ec:	89 c2                	mov    edx,eax
c00069ee:	75 0a                	jne    c00069fa <iso_readdir+0x228>
c00069f0:	8d 46 0a             	lea    eax,[esi+0xa]
c00069f3:	e8 06 f6 ff ff       	call   c0005ffe <iso_733>
c00069f8:	31 d2                	xor    edx,edx
c00069fa:	69 db 94 00 00 00    	imul   ebx,ebx,0x94
c0006a00:	89 83 50 55 02 c0    	mov    DWORD PTR [ebx-0x3ffdaab0],eax
c0006a06:	89 93 54 55 02 c0    	mov    DWORD PTR [ebx-0x3ffdaaac],edx
c0006a0c:	81 c3 40 55 02 c0    	add    ebx,0xc0025540
c0006a12:	0f b6 06             	movzx  eax,BYTE PTR [esi]
c0006a15:	01 43 08             	add    DWORD PTR [ebx+0x8],eax
c0006a18:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006a1c:	05 50 55 02 c0       	add    eax,0xc0025550
c0006a21:	83 c4 1c             	add    esp,0x1c
c0006a24:	5b                   	pop    ebx
c0006a25:	5e                   	pop    esi
c0006a26:	5f                   	pop    edi
c0006a27:	5d                   	pop    ebp
c0006a28:	c3                   	ret    

c0006a29 <iso_reset>:
c0006a29:	83 ec 18             	sub    esp,0x18
c0006a2c:	68 ba 04 02 c0       	push   0xc00204ba
c0006a31:	e8 e2 33 01 00       	call   c0019e18 <iso_kprintf>
c0006a36:	e8 10 f7 ff ff       	call   c000614b <iso_break_all>
c0006a3b:	e8 09 f7 ff ff       	call   c0006149 <bclear>
c0006a40:	31 c0                	xor    eax,eax
c0006a42:	83 c4 1c             	add    esp,0x1c
c0006a45:	c3                   	ret    

c0006a46 <init_percd>:
c0006a46:	57                   	push   edi
c0006a47:	56                   	push   esi
c0006a48:	53                   	push   ebx
c0006a49:	bb 01 00 00 00       	mov    ebx,0x1
c0006a4e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006a52:	a2 60 50 02 c0       	mov    ds:0xc0025060,al
c0006a57:	e8 cd ff ff ff       	call   c0006a29 <iso_reset>
c0006a5c:	c7 05 b4 5e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025eb4,0x0
c0006a66:	a1 ac 5e 02 c0       	mov    eax,ds:0xc0025eac
c0006a6b:	8d 44 03 10          	lea    eax,[ebx+eax*1+0x10]
c0006a6f:	e8 8c f7 ff ff       	call   c0006200 <biread>
c0006a74:	89 c6                	mov    esi,eax
c0006a76:	85 c0                	test   eax,eax
c0006a78:	0f 88 ba 00 00 00    	js     c0006b38 <init_percd+0xf2>
c0006a7e:	8b 04 85 80 50 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdaf80]
c0006a85:	83 c0 04             	add    eax,0x4
c0006a88:	52                   	push   edx
c0006a89:	6a 06                	push   0x6
c0006a8b:	68 c5 04 02 c0       	push   0xc00204c5
c0006a90:	50                   	push   eax
c0006a91:	e8 ea 98 ff ff       	call   c0000380 <memcmp>
c0006a96:	83 c4 10             	add    esp,0x10
c0006a99:	85 c0                	test   eax,eax
c0006a9b:	74 08                	je     c0006aa5 <init_percd+0x5f>
c0006a9d:	43                   	inc    ebx
c0006a9e:	83 fb 04             	cmp    ebx,0x4
c0006aa1:	75 c3                	jne    c0006a66 <init_percd+0x20>
c0006aa3:	eb 1a                	jmp    c0006abf <init_percd+0x79>
c0006aa5:	8b 04 b5 80 50 02 c0 	mov    eax,DWORD PTR [esi*4-0x3ffdaf80]
c0006aac:	83 c0 5c             	add    eax,0x5c
c0006aaf:	e8 17 f5 ff ff       	call   c0005fcb <isjoliet>
c0006ab4:	a3 b4 5e 02 c0       	mov    ds:0xc0025eb4,eax
c0006ab9:	85 c0                	test   eax,eax
c0006abb:	74 e0                	je     c0006a9d <init_percd+0x57>
c0006abd:	eb 3e                	jmp    c0006afd <init_percd+0xb7>
c0006abf:	83 3d b4 5e 02 c0 00 	cmp    DWORD PTR ds:0xc0025eb4,0x0
c0006ac6:	75 35                	jne    c0006afd <init_percd+0xb7>
c0006ac8:	a1 ac 5e 02 c0       	mov    eax,ds:0xc0025eac
c0006acd:	83 c0 10             	add    eax,0x10
c0006ad0:	e8 2b f7 ff ff       	call   c0006200 <biread>
c0006ad5:	89 c6                	mov    esi,eax
c0006ad7:	85 c0                	test   eax,eax
c0006ad9:	78 5f                	js     c0006b3a <init_percd+0xf4>
c0006adb:	83 cb ff             	or     ebx,0xffffffff
c0006ade:	50                   	push   eax
c0006adf:	8b 04 b5 80 50 02 c0 	mov    eax,DWORD PTR [esi*4-0x3ffdaf80]
c0006ae6:	6a 06                	push   0x6
c0006ae8:	83 c0 04             	add    eax,0x4
c0006aeb:	68 cc 04 02 c0       	push   0xc00204cc
c0006af0:	50                   	push   eax
c0006af1:	e8 8a 98 ff ff       	call   c0000380 <memcmp>
c0006af6:	83 c4 10             	add    esp,0x10
c0006af9:	85 c0                	test   eax,eax
c0006afb:	75 3d                	jne    c0006b3a <init_percd+0xf4>
c0006afd:	8b 34 b5 80 50 02 c0 	mov    esi,DWORD PTR [esi*4-0x3ffdaf80]
c0006b04:	bf 80 5e 02 c0       	mov    edi,0xc0025e80
c0006b09:	81 c6 a0 00 00 00    	add    esi,0xa0
c0006b0f:	b9 22 00 00 00       	mov    ecx,0x22
c0006b14:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0006b16:	b8 82 5e 02 c0       	mov    eax,0xc0025e82
c0006b1b:	31 db                	xor    ebx,ebx
c0006b1d:	e8 dc f4 ff ff       	call   c0005ffe <iso_733>
c0006b22:	a3 a8 5e 02 c0       	mov    ds:0xc0025ea8,eax
c0006b27:	b8 8a 5e 02 c0       	mov    eax,0xc0025e8a
c0006b2c:	e8 cd f4 ff ff       	call   c0005ffe <iso_733>
c0006b31:	a3 a4 5e 02 c0       	mov    ds:0xc0025ea4,eax
c0006b36:	eb 02                	jmp    c0006b3a <init_percd+0xf4>
c0006b38:	89 c3                	mov    ebx,eax
c0006b3a:	89 d8                	mov    eax,ebx
c0006b3c:	5b                   	pop    ebx
c0006b3d:	5e                   	pop    esi
c0006b3e:	5f                   	pop    edi
c0006b3f:	c3                   	ret    

c0006b40 <iso_ioctl>:
c0006b40:	83 ec 18             	sub    esp,0x18
c0006b43:	68 d3 04 02 c0       	push   0xc00204d3
c0006b48:	e8 cb 32 01 00       	call   c0019e18 <iso_kprintf>
c0006b4d:	e8 d7 fe ff ff       	call   c0006a29 <iso_reset>
c0006b52:	31 c0                	xor    eax,eax
c0006b54:	83 c4 1c             	add    esp,0x1c
c0006b57:	c3                   	ret    

c0006b58 <fs_iso9660_init>:
c0006b58:	53                   	push   ebx
c0006b59:	31 db                	xor    ebx,ebx
c0006b5b:	83 ec 14             	sub    esp,0x14
c0006b5e:	68 de 04 02 c0       	push   0xc00204de
c0006b63:	e8 b0 32 01 00       	call   c0019e18 <iso_kprintf>
c0006b68:	83 c4 0c             	add    esp,0xc
c0006b6b:	68 40 09 00 00       	push   0x940
c0006b70:	6a 00                	push   0x0
c0006b72:	68 40 55 02 c0       	push   0xc0025540
c0006b77:	e8 74 99 ff ff       	call   c00004f0 <memset>
c0006b7c:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0006b83:	c7 05 40 55 02 c0 ff ff ff ff 	mov    DWORD PTR ds:0xc0025540,0xffffffff
c0006b8d:	e8 24 0f 00 00       	call   c0007ab6 <malloc>
c0006b92:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0006b99:	a3 b0 5e 02 c0       	mov    ds:0xc0025eb0,eax
c0006b9e:	e8 13 0f 00 00       	call   c0007ab6 <malloc>
c0006ba3:	83 c4 10             	add    esp,0x10
c0006ba6:	a3 20 55 02 c0       	mov    ds:0xc0025520,eax
c0006bab:	83 ec 0c             	sub    esp,0xc
c0006bae:	68 04 08 00 00       	push   0x804
c0006bb3:	e8 fe 0e 00 00       	call   c0007ab6 <malloc>
c0006bb8:	89 04 9d 80 50 02 c0 	mov    DWORD PTR [ebx*4-0x3ffdaf80],eax
c0006bbf:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0006bc5:	c7 04 24 04 08 00 00 	mov    DWORD PTR [esp],0x804
c0006bcc:	e8 e5 0e 00 00       	call   c0007ab6 <malloc>
c0006bd1:	83 c4 10             	add    esp,0x10
c0006bd4:	89 04 9d 20 50 02 c0 	mov    DWORD PTR [ebx*4-0x3ffdafe0],eax
c0006bdb:	43                   	inc    ebx
c0006bdc:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0006be2:	83 fb 10             	cmp    ebx,0x10
c0006be5:	75 c4                	jne    c0006bab <fs_iso9660_init+0x53>
c0006be7:	31 c0                	xor    eax,eax
c0006be9:	83 c4 08             	add    esp,0x8
c0006bec:	5b                   	pop    ebx
c0006bed:	c3                   	ret    

c0006bee <fs_iso9660_shutdown>:
c0006bee:	53                   	push   ebx
c0006bef:	31 db                	xor    ebx,ebx
c0006bf1:	83 ec 08             	sub    esp,0x8
c0006bf4:	83 ec 0c             	sub    esp,0xc
c0006bf7:	ff 34 9d 80 50 02 c0 	push   DWORD PTR [ebx*4-0x3ffdaf80]
c0006bfe:	e8 c3 0e 00 00       	call   c0007ac6 <free>
c0006c03:	58                   	pop    eax
c0006c04:	ff 34 9d 20 50 02 c0 	push   DWORD PTR [ebx*4-0x3ffdafe0]
c0006c0b:	43                   	inc    ebx
c0006c0c:	e8 b5 0e 00 00       	call   c0007ac6 <free>
c0006c11:	83 c4 10             	add    esp,0x10
c0006c14:	83 fb 10             	cmp    ebx,0x10
c0006c17:	75 db                	jne    c0006bf4 <fs_iso9660_shutdown+0x6>
c0006c19:	a1 b0 5e 02 c0       	mov    eax,ds:0xc0025eb0
c0006c1e:	85 c0                	test   eax,eax
c0006c20:	74 0c                	je     c0006c2e <fs_iso9660_shutdown+0x40>
c0006c22:	83 ec 0c             	sub    esp,0xc
c0006c25:	50                   	push   eax
c0006c26:	e8 9b 0e 00 00       	call   c0007ac6 <free>
c0006c2b:	83 c4 10             	add    esp,0x10
c0006c2e:	a1 20 55 02 c0       	mov    eax,ds:0xc0025520
c0006c33:	85 c0                	test   eax,eax
c0006c35:	74 0c                	je     c0006c43 <fs_iso9660_shutdown+0x55>
c0006c37:	83 ec 0c             	sub    esp,0xc
c0006c3a:	50                   	push   eax
c0006c3b:	e8 86 0e 00 00       	call   c0007ac6 <free>
c0006c40:	83 c4 10             	add    esp,0x10
c0006c43:	c7 05 20 55 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025520,0x0
c0006c4d:	c7 05 b0 5e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025eb0,0x0
c0006c57:	31 c0                	xor    eax,eax
c0006c59:	83 c4 08             	add    esp,0x8
c0006c5c:	5b                   	pop    ebx
c0006c5d:	c3                   	ret    

c0006c5e <Computer::close(int, int, void*)>:
c0006c5e:	57                   	push   edi
c0006c5f:	56                   	push   esi
c0006c60:	53                   	push   ebx
c0006c61:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0006c65:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0006c69:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0006c6d:	e8 ed 9d 00 00       	call   c0010a5f <KeExecuteAtexit()>
c0006c72:	83 ec 0c             	sub    esp,0xc
c0006c75:	8b 83 68 01 00 00    	mov    eax,DWORD PTR [ebx+0x168]
c0006c7b:	50                   	push   eax
c0006c7c:	e8 7f 5a 00 00       	call   c000c700 <Device::closeAll()>
c0006c81:	8b 83 68 01 00 00    	mov    eax,DWORD PTR [ebx+0x168]
c0006c87:	83 c4 10             	add    esp,0x10
c0006c8a:	8b 10                	mov    edx,DWORD PTR [eax]
c0006c8c:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c0006c90:	c7 44 24 18 0f 27 00 00 	mov    DWORD PTR [esp+0x18],0x270f
c0006c98:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0006c9c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0006ca0:	5b                   	pop    ebx
c0006ca1:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0006ca4:	5e                   	pop    esi
c0006ca5:	5f                   	pop    edi
c0006ca6:	ff e0                	jmp    eax

c0006ca8 <Krnl::firstTask()>:
c0006ca8:	53                   	push   ebx
c0006ca9:	83 ec 14             	sub    esp,0x14
c0006cac:	fb                   	sti    
c0006cad:	68 ef 04 02 c0       	push   0xc00204ef
c0006cb2:	e8 5f 9e 00 00       	call   c0010b16 <KeSetBootMessage(char const*)>
c0006cb7:	c7 04 24 24 07 00 00 	mov    DWORD PTR [esp],0x724
c0006cbe:	e8 f3 0d 00 00       	call   c0007ab6 <malloc>
c0006cc3:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0006cca:	89 c3                	mov    ebx,eax
c0006ccc:	a1 90 a4 02 c0       	mov    eax,ds:0xc002a490
c0006cd1:	50                   	push   eax
c0006cd2:	68 08 05 02 c0       	push   0xc0020508
c0006cd7:	6a 01                	push   0x1
c0006cd9:	53                   	push   ebx
c0006cda:	e8 59 e9 00 00       	call   c0015638 <Process::Process(bool, char const*, Process*, char**)>
c0006cdf:	83 c4 20             	add    esp,0x20
c0006ce2:	68 ff 00 00 00       	push   0xff
c0006ce7:	6a 00                	push   0x0
c0006ce9:	68 ff 74 00 c0       	push   0xc00074ff
c0006cee:	53                   	push   ebx
c0006cef:	e8 68 eb 00 00       	call   c001585c <Process::createThread(void (*)(void*), void*, int)>
c0006cf4:	8b 15 90 a4 02 c0    	mov    edx,DWORD PTR ds:0xc002a490
c0006cfa:	6a 7a                	push   0x7a
c0006cfc:	6a 00                	push   0x0
c0006cfe:	68 44 63 01 c0       	push   0xc0016344
c0006d03:	52                   	push   edx
c0006d04:	e8 53 eb 00 00       	call   c001585c <Process::createThread(void (*)(void*), void*, int)>
c0006d09:	83 c4 20             	add    esp,0x20
c0006d0c:	a3 48 a4 02 c0       	mov    ds:0xc002a448,eax
c0006d11:	c6 05 bd 5e 02 c0 01 	mov    BYTE PTR ds:0xc0025ebd,0x1
c0006d18:	e8 89 a6 00 00       	call   c00113a6 <KeInitRand()>
c0006d1d:	83 ec 0c             	sub    esp,0xc
c0006d20:	68 04 06 02 c0       	push   0xc0020604
c0006d25:	e8 ec 9d 00 00       	call   c0010b16 <KeSetBootMessage(char const*)>
c0006d2a:	e8 38 fa 00 00       	call   c0016767 <Vm::initialise8086()>
c0006d2f:	e8 c4 47 00 00       	call   c000b4f8 <Fs::initVFS()>
c0006d34:	e8 cb 41 00 00       	call   c000af04 <KeInitialiseSymlinks()>
c0006d39:	c7 04 24 15 05 02 c0 	mov    DWORD PTR [esp],0xc0020515
c0006d40:	e8 d1 9d 00 00       	call   c0010b16 <KeSetBootMessage(char const*)>
c0006d45:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0006d4a:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c0006d50:	8b 10                	mov    edx,DWORD PTR [eax]
c0006d52:	6a 00                	push   0x0
c0006d54:	6a 00                	push   0x0
c0006d56:	6a 00                	push   0x0
c0006d58:	50                   	push   eax
c0006d59:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0006d5c:	83 c4 14             	add    esp,0x14
c0006d5f:	68 04 06 02 c0       	push   0xc0020604
c0006d64:	e8 ad 9d 00 00       	call   c0010b16 <KeSetBootMessage(char const*)>
c0006d69:	e8 e2 a2 00 00       	call   c0011050 <KeLoadSystemEnv()>
c0006d6e:	e8 3f a5 00 00       	call   c00112b2 <KeSetupPowerManager()>
c0006d73:	83 c4 0c             	add    esp,0xc
c0006d76:	6a 3a                	push   0x3a
c0006d78:	68 2f 05 02 c0       	push   0xc002052f
c0006d7d:	68 38 05 02 c0       	push   0xc0020538
c0006d82:	e8 fd ca 00 00       	call   c0013884 <Reg::readIntWithDefault(char*, char*, int)>
c0006d87:	89 04 24             	mov    DWORD PTR [esp],eax
c0006d8a:	e8 d1 52 00 00       	call   c000c060 <User::loadClockSettings(int)>
c0006d8f:	c7 04 24 28 06 02 c0 	mov    DWORD PTR [esp],0xc0020628
c0006d96:	e8 7b 9d 00 00       	call   c0010b16 <KeSetBootMessage(char const*)>
c0006d9b:	59                   	pop    ecx
c0006d9c:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0006da1:	8b 98 68 01 00 00    	mov    ebx,DWORD PTR [eax+0x168]
c0006da7:	53                   	push   ebx
c0006da8:	e8 51 59 00 00       	call   c000c6fe <Device::loadDriversForAll()>
c0006dad:	c7 04 24 40 05 02 c0 	mov    DWORD PTR [esp],0xc0020540
c0006db4:	e8 5d 9d 00 00       	call   c0010b16 <KeSetBootMessage(char const*)>
c0006db9:	58                   	pop    eax
c0006dba:	8b 1d b8 5e 02 c0    	mov    ebx,DWORD PTR ds:0xc0025eb8
c0006dc0:	5a                   	pop    edx
c0006dc1:	6a 01                	push   0x1
c0006dc3:	68 51 05 02 c0       	push   0xc0020551
c0006dc8:	e8 81 e2 00 00       	call   c001504e <Thr::loadDLL(char const*, bool)>
c0006dcd:	59                   	pop    ecx
c0006dce:	5a                   	pop    edx
c0006dcf:	53                   	push   ebx
c0006dd0:	50                   	push   eax
c0006dd1:	e8 a9 e4 00 00       	call   c001527f <Thr::executeDLL(unsigned long, void*)>
c0006dd6:	83 c4 10             	add    esp,0x10
c0006dd9:	83 ec 0c             	sub    esp,0xc
c0006ddc:	6a 02                	push   0x2
c0006dde:	e8 dd ee 00 00       	call   c0015cc0 <blockTask(TaskState)>
c0006de3:	83 c4 10             	add    esp,0x10
c0006de6:	eb f1                	jmp    c0006dd9 <Krnl::firstTask()+0x131>

c0006de8 <Computer::Computer()>:
c0006de8:	83 ec 0c             	sub    esp,0xc
c0006deb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006def:	83 ec 08             	sub    esp,0x8
c0006df2:	68 6d 05 02 c0       	push   0xc002056d
c0006df7:	50                   	push   eax
c0006df8:	e8 7d 59 00 00       	call   c000c77a <Device::Device(char const*)>
c0006dfd:	83 c4 10             	add    esp,0x10
c0006e00:	ba 74 06 02 c0       	mov    edx,0xc0020674
c0006e05:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e09:	89 10                	mov    DWORD PTR [eax],edx
c0006e0b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e0f:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c0006e19:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e1d:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c0006e27:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e2b:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c0006e31:	83 ca 04             	or     edx,0x4
c0006e34:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c0006e3a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e3e:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0006e44:	0f b6 d0             	movzx  edx,al
c0006e47:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e4b:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c0006e52:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e56:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0006e5c:	0f b6 d0             	movzx  edx,al
c0006e5f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e63:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0006e68:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e6c:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0006e72:	8d 50 01             	lea    edx,[eax+0x1]
c0006e75:	88 d1                	mov    cl,dl
c0006e77:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0006e7b:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c0006e81:	0f b6 d0             	movzx  edx,al
c0006e84:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e88:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0006e8c:	83 e1 3f             	and    ecx,0x3f
c0006e8f:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0006e93:	90                   	nop
c0006e94:	83 c4 0c             	add    esp,0xc
c0006e97:	c3                   	ret    

c0006e98 <Computer::setBootMessage(char const*)>:
c0006e98:	c3                   	ret    
c0006e99:	90                   	nop

c0006e9a <Computer::detectFeatures()>:
c0006e9a:	55                   	push   ebp
c0006e9b:	57                   	push   edi
c0006e9c:	56                   	push   esi
c0006e9d:	53                   	push   ebx
c0006e9e:	83 ec 1c             	sub    esp,0x1c
c0006ea1:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0006ea5:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c0006eab:	81 e2 04 00 fc ff    	and    edx,0xfffc0004
c0006eb1:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c0006eb7:	e8 3d 93 ff ff       	call   c00001f9 <detectCPUID>
c0006ebc:	31 d2                	xor    edx,edx
c0006ebe:	85 c0                	test   eax,eax
c0006ec0:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006ec6:	0f 95 c2             	setne  dl
c0006ec9:	83 e0 fd             	and    eax,0xfffffffd
c0006ecc:	d1 e2                	shl    edx,1
c0006ece:	09 d0                	or     eax,edx
c0006ed0:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006ed6:	a8 02                	test   al,0x2
c0006ed8:	75 51                	jne    c0006f2b <Computer::detectFeatures()+0x91>
c0006eda:	f6 05 d1 5e 02 c0 04 	test   BYTE PTR ds:0xc0025ed1,0x4
c0006ee1:	74 0f                	je     c0006ef2 <Computer::detectFeatures()+0x58>
c0006ee3:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006ee9:	83 e0 fb             	and    eax,0xfffffffb
c0006eec:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006ef2:	e8 ef 7e 01 00       	call   c001ede6 <x87Detect>
c0006ef7:	83 e0 01             	and    eax,0x1
c0006efa:	c1 e0 04             	shl    eax,0x4
c0006efd:	89 c2                	mov    edx,eax
c0006eff:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006f05:	83 e0 ef             	and    eax,0xffffffef
c0006f08:	09 d0                	or     eax,edx
c0006f0a:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006f10:	88 c2                	mov    dl,al
c0006f12:	a8 10                	test   al,0x10
c0006f14:	0f 85 33 01 00 00    	jne    c000704d <Computer::detectFeatures()+0x1b3>
c0006f1a:	80 e2 80             	and    dl,0x80
c0006f1d:	0f 85 4c 01 00 00    	jne    c000706f <Computer::detectFeatures()+0x1d5>
c0006f23:	83 c4 1c             	add    esp,0x1c
c0006f26:	5b                   	pop    ebx
c0006f27:	5e                   	pop    esi
c0006f28:	5f                   	pop    edi
c0006f29:	5d                   	pop    ebp
c0006f2a:	c3                   	ret    
c0006f2b:	83 ec 0c             	sub    esp,0xc
c0006f2e:	6a 20                	push   0x20
c0006f30:	e8 3f 90 00 00       	call   c000ff74 <CPU::cpuidCheckEDX(unsigned int)>
c0006f35:	83 e0 01             	and    eax,0x1
c0006f38:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0006f3f:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006f45:	83 e0 f7             	and    eax,0xfffffff7
c0006f48:	09 d0                	or     eax,edx
c0006f4a:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006f50:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c0006f57:	e8 18 90 00 00       	call   c000ff74 <CPU::cpuidCheckEDX(unsigned int)>
c0006f5c:	89 c2                	mov    edx,eax
c0006f5e:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c0006f64:	83 e2 01             	and    edx,0x1
c0006f67:	83 e0 fe             	and    eax,0xfffffffe
c0006f6a:	09 d0                	or     eax,edx
c0006f6c:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c0006f72:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c0006f79:	e8 f6 8f 00 00       	call   c000ff74 <CPU::cpuidCheckEDX(unsigned int)>
c0006f7e:	89 c2                	mov    edx,eax
c0006f80:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c0006f86:	c1 e2 07             	shl    edx,0x7
c0006f89:	83 e0 7f             	and    eax,0x7f
c0006f8c:	09 d0                	or     eax,edx
c0006f8e:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c0006f94:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c0006f9b:	e8 d4 8f 00 00       	call   c000ff74 <CPU::cpuidCheckEDX(unsigned int)>
c0006fa0:	83 c4 10             	add    esp,0x10
c0006fa3:	83 e0 01             	and    eax,0x1
c0006fa6:	c1 e0 05             	shl    eax,0x5
c0006fa9:	89 c2                	mov    edx,eax
c0006fab:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006fb1:	83 e0 df             	and    eax,0xffffffdf
c0006fb4:	09 d0                	or     eax,edx
c0006fb6:	f7 05 d0 5e 02 c0 01 04 00 00 	test   DWORD PTR ds:0xc0025ed0,0x401
c0006fc0:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006fc6:	0f 84 c9 00 00 00    	je     c0007095 <Computer::detectFeatures()+0x1fb>
c0006fcc:	83 e0 fe             	and    eax,0xfffffffe
c0006fcf:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006fd5:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006fdb:	89 c2                	mov    edx,eax
c0006fdd:	83 e2 09             	and    edx,0x9
c0006fe0:	83 fa 01             	cmp    edx,0x1
c0006fe3:	75 09                	jne    c0006fee <Computer::detectFeatures()+0x154>
c0006fe5:	83 e0 fe             	and    eax,0xfffffffe
c0006fe8:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006fee:	83 ec 0c             	sub    esp,0xc
c0006ff1:	8d 44 24 18          	lea    eax,[esp+0x18]
c0006ff5:	50                   	push   eax
c0006ff6:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c0006ffa:	55                   	push   ebp
c0006ffb:	8d 7c 24 18          	lea    edi,[esp+0x18]
c0006fff:	57                   	push   edi
c0007000:	8d 74 24 18          	lea    esi,[esp+0x18]
c0007004:	56                   	push   esi
c0007005:	68 00 00 00 80       	push   0x80000000
c000700a:	e8 e1 8e 00 00       	call   c000fef0 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000700f:	83 c4 20             	add    esp,0x20
c0007012:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c0007019:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000701d:	0f 86 b7 fe ff ff    	jbe    c0006eda <Computer::detectFeatures()+0x40>
c0007023:	83 ec 0c             	sub    esp,0xc
c0007026:	50                   	push   eax
c0007027:	55                   	push   ebp
c0007028:	57                   	push   edi
c0007029:	56                   	push   esi
c000702a:	68 01 00 00 80       	push   0x80000001
c000702f:	e8 bc 8e 00 00       	call   c000fef0 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0007034:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c000703a:	83 c4 20             	add    esp,0x20
c000703d:	25 bf ff fc ff       	and    eax,0xfffcffbf
c0007042:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0007048:	e9 8d fe ff ff       	jmp    c0006eda <Computer::detectFeatures()+0x40>
c000704d:	e8 4e 7d 01 00       	call   c001eda0 <absolutelyNoChanceInHell>
c0007052:	8a 93 6c 01 00 00    	mov    dl,BYTE PTR [ebx+0x16c]
c0007058:	c1 e0 07             	shl    eax,0x7
c000705b:	83 e2 7f             	and    edx,0x7f
c000705e:	09 c2                	or     edx,eax
c0007060:	88 93 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],dl
c0007066:	80 e2 80             	and    dl,0x80
c0007069:	0f 84 b4 fe ff ff    	je     c0006f23 <Computer::detectFeatures()+0x89>
c000706f:	e8 9c 79 01 00       	call   c001ea10 <avxDetect>
c0007074:	83 e0 01             	and    eax,0x1
c0007077:	c1 e0 05             	shl    eax,0x5
c000707a:	89 c2                	mov    edx,eax
c000707c:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c0007082:	83 e0 df             	and    eax,0xffffffdf
c0007085:	09 d0                	or     eax,edx
c0007087:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c000708d:	83 c4 1c             	add    esp,0x1c
c0007090:	5b                   	pop    ebx
c0007091:	5e                   	pop    esi
c0007092:	5f                   	pop    edi
c0007093:	5d                   	pop    ebp
c0007094:	c3                   	ret    
c0007095:	83 ec 0c             	sub    esp,0xc
c0007098:	68 00 02 00 00       	push   0x200
c000709d:	e8 d2 8e 00 00       	call   c000ff74 <CPU::cpuidCheckEDX(unsigned int)>
c00070a2:	83 c4 10             	add    esp,0x10
c00070a5:	89 c2                	mov    edx,eax
c00070a7:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c00070ad:	83 e2 01             	and    edx,0x1
c00070b0:	83 e0 fe             	and    eax,0xfffffffe
c00070b3:	09 d0                	or     eax,edx
c00070b5:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c00070bb:	e9 15 ff ff ff       	jmp    c0006fd5 <Computer::detectFeatures()+0x13b>

c00070c0 <Computer::displayFeatures()>:
c00070c0:	c3                   	ret    
c00070c1:	90                   	nop

c00070c2 <Computer::rdmsr(unsigned int)>:
c00070c2:	83 ec 0c             	sub    esp,0xc
c00070c5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00070c9:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c00070d0:	74 0a                	je     c00070dc <Computer::rdmsr(unsigned int)+0x1a>
c00070d2:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00070d6:	0f 32                	rdmsr  
c00070d8:	83 c4 0c             	add    esp,0xc
c00070db:	c3                   	ret    
c00070dc:	83 ec 0c             	sub    esp,0xc
c00070df:	68 76 05 02 c0       	push   0xc0020576
c00070e4:	e8 04 a1 00 00       	call   c00111ed <KePanic(char const*)>
c00070e9:	83 c4 10             	add    esp,0x10
c00070ec:	eb e4                	jmp    c00070d2 <Computer::rdmsr(unsigned int)+0x10>

c00070ee <Computer::wrmsr(unsigned int, unsigned long long)>:
c00070ee:	57                   	push   edi
c00070ef:	56                   	push   esi
c00070f0:	83 ec 04             	sub    esp,0x4
c00070f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00070f7:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00070fb:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00070ff:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c0007106:	74 10                	je     c0007118 <Computer::wrmsr(unsigned int, unsigned long long)+0x2a>
c0007108:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000710c:	89 f0                	mov    eax,esi
c000710e:	89 fa                	mov    edx,edi
c0007110:	0f 30                	wrmsr  
c0007112:	83 c4 04             	add    esp,0x4
c0007115:	5e                   	pop    esi
c0007116:	5f                   	pop    edi
c0007117:	c3                   	ret    
c0007118:	83 ec 0c             	sub    esp,0xc
c000711b:	68 7c 05 02 c0       	push   0xc002057c
c0007120:	e8 c8 a0 00 00       	call   c00111ed <KePanic(char const*)>
c0007125:	83 c4 10             	add    esp,0x10
c0007128:	eb de                	jmp    c0007108 <Computer::wrmsr(unsigned int, unsigned long long)+0x1a>

c000712a <Computer::shutdown()>:
c000712a:	83 ec 0c             	sub    esp,0xc
c000712d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007131:	8b 10                	mov    edx,DWORD PTR [eax]
c0007133:	6a 00                	push   0x0
c0007135:	6a 00                	push   0x0
c0007137:	6a 00                	push   0x0
c0007139:	50                   	push   eax
c000713a:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000713d:	83 c4 1c             	add    esp,0x1c
c0007140:	c3                   	ret    
c0007141:	90                   	nop

c0007142 <Computer::restart()>:
c0007142:	83 ec 0c             	sub    esp,0xc
c0007145:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007149:	8b 10                	mov    edx,DWORD PTR [eax]
c000714b:	6a 00                	push   0x0
c000714d:	6a 00                	push   0x0
c000714f:	6a 01                	push   0x1
c0007151:	50                   	push   eax
c0007152:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0007155:	83 c4 1c             	add    esp,0x1c
c0007158:	c3                   	ret    
c0007159:	90                   	nop

c000715a <Computer::sleep()>:
c000715a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000715e:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c0007164:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0007168:	e9 1f 88 00 00       	jmp    c000f98c <ACPI::sleep()>
c000716d:	90                   	nop

c000716e <Computer::nmiEnabled()>:
c000716e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007172:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c0007178:	c3                   	ret    
c0007179:	90                   	nop

c000717a <Computer::readCMOS(unsigned char)>:
c000717a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000717e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007182:	80 ba 58 01 00 00 00 	cmp    BYTE PTR [edx+0x158],0x0
c0007189:	75 09                	jne    c0007194 <Computer::readCMOS(unsigned char)+0x1a>
c000718b:	b2 80                	mov    dl,0x80
c000718d:	09 d0                	or     eax,edx
c000718f:	e6 70                	out    0x70,al
c0007191:	e4 71                	in     al,0x71
c0007193:	c3                   	ret    
c0007194:	31 d2                	xor    edx,edx
c0007196:	eb f5                	jmp    c000718d <Computer::readCMOS(unsigned char)+0x13>

c0007198 <Computer::enableNMI(bool)>:
c0007198:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000719c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00071a0:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c00071a6:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c00071ae:	eb ca                	jmp    c000717a <Computer::readCMOS(unsigned char)>

c00071b0 <Computer::open(int, int, void*)>:
c00071b0:	56                   	push   esi
c00071b1:	53                   	push   ebx
c00071b2:	83 ec 10             	sub    esp,0x10
c00071b5:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00071b9:	f6 05 d0 5e 02 c0 04 	test   BYTE PTR ds:0xc0025ed0,0x4
c00071c0:	68 82 05 02 c0       	push   0xc0020582
c00071c5:	0f 94 05 c0 2e 02 c0 	sete   BYTE PTR ds:0xc0022ec0
c00071cc:	e8 45 99 00 00       	call   c0010b16 <KeSetBootMessage(char const*)>
c00071d1:	c7 04 24 64 12 00 00 	mov    DWORD PTR [esp],0x1264
c00071d8:	e8 d9 08 00 00       	call   c0007ab6 <malloc>
c00071dd:	89 04 24             	mov    DWORD PTR [esp],eax
c00071e0:	89 c6                	mov    esi,eax
c00071e2:	e8 19 83 00 00       	call   c000f500 <ACPI::ACPI()>
c00071e7:	89 b3 68 01 00 00    	mov    DWORD PTR [ebx+0x168],esi
c00071ed:	58                   	pop    eax
c00071ee:	5a                   	pop    edx
c00071ef:	56                   	push   esi
c00071f0:	53                   	push   ebx
c00071f1:	e8 ec 53 00 00       	call   c000c5e2 <Device::addChild(Device*)>
c00071f6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00071f9:	e8 9c fc ff ff       	call   c0006e9a <Computer::detectFeatures()>
c00071fe:	59                   	pop    ecx
c00071ff:	5e                   	pop    esi
c0007200:	6a 01                	push   0x1
c0007202:	53                   	push   ebx
c0007203:	e8 90 ff ff ff       	call   c0007198 <Computer::enableNMI(bool)>
c0007208:	c7 04 24 9a 05 02 c0 	mov    DWORD PTR [esp],0xc002059a
c000720f:	e8 02 99 00 00       	call   c0010b16 <KeSetBootMessage(char const*)>
c0007214:	c7 04 24 94 11 00 00 	mov    DWORD PTR [esp],0x1194
c000721b:	e8 96 08 00 00       	call   c0007ab6 <malloc>
c0007220:	89 04 24             	mov    DWORD PTR [esp],eax
c0007223:	89 c6                	mov    esi,eax
c0007225:	e8 02 8e 00 00       	call   c001002c <CPU::CPU()>
c000722a:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c0007230:	58                   	pop    eax
c0007231:	5a                   	pop    edx
c0007232:	56                   	push   esi
c0007233:	53                   	push   ebx
c0007234:	e8 a9 53 00 00       	call   c000c5e2 <Device::addChild(Device*)>
c0007239:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000723f:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0007243:	8b 10                	mov    edx,DWORD PTR [eax]
c0007245:	51                   	push   ecx
c0007246:	6a 00                	push   0x0
c0007248:	6a 00                	push   0x0
c000724a:	50                   	push   eax
c000724b:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000724e:	83 c4 14             	add    esp,0x14
c0007251:	68 48 06 02 c0       	push   0xc0020648
c0007256:	e8 bb 98 00 00       	call   c0010b16 <KeSetBootMessage(char const*)>
c000725b:	e8 44 07 01 00       	call   c00179a4 <HalInitialiseCoprocessor()>
c0007260:	c7 04 24 b4 05 02 c0 	mov    DWORD PTR [esp],0xc00205b4
c0007267:	e8 aa 98 00 00       	call   c0010b16 <KeSetBootMessage(char const*)>
c000726c:	c7 04 24 a8 6c 00 c0 	mov    DWORD PTR [esp],0xc0006ca8
c0007273:	e8 10 e7 00 00       	call   c0015988 <setupMultitasking(void (*)())>
c0007278:	83 c4 14             	add    esp,0x14
c000727b:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0007280:	5b                   	pop    ebx
c0007281:	5e                   	pop    esi
c0007282:	c3                   	ret    
c0007283:	90                   	nop

c0007284 <Computer::disableNMI()>:
c0007284:	6a 00                	push   0x0
c0007286:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000728a:	50                   	push   eax
c000728b:	e8 08 ff ff ff       	call   c0007198 <Computer::enableNMI(bool)>
c0007290:	5a                   	pop    edx
c0007291:	59                   	pop    ecx
c0007292:	c3                   	ret    
c0007293:	90                   	nop

c0007294 <Computer::writeCMOS(unsigned char, unsigned char)>:
c0007294:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0007298:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000729c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00072a0:	80 b9 58 01 00 00 00 	cmp    BYTE PTR [ecx+0x158],0x0
c00072a7:	75 0b                	jne    c00072b4 <Computer::writeCMOS(unsigned char, unsigned char)+0x20>
c00072a9:	b1 80                	mov    cl,0x80
c00072ab:	09 c8                	or     eax,ecx
c00072ad:	e6 70                	out    0x70,al
c00072af:	88 d0                	mov    al,dl
c00072b1:	e6 71                	out    0x71,al
c00072b3:	c3                   	ret    
c00072b4:	31 c9                	xor    ecx,ecx
c00072b6:	eb f3                	jmp    c00072ab <Computer::writeCMOS(unsigned char, unsigned char)+0x17>

c00072b8 <Computer::handleNMI()>:
c00072b8:	56                   	push   esi
c00072b9:	53                   	push   ebx
c00072ba:	83 ec 10             	sub    esp,0x10
c00072bd:	e4 92                	in     al,0x92
c00072bf:	89 c6                	mov    esi,eax
c00072c1:	e4 61                	in     al,0x61
c00072c3:	68 cf 05 02 c0       	push   0xc00205cf
c00072c8:	88 c3                	mov    bl,al
c00072ca:	e8 76 36 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c00072cf:	83 c4 10             	add    esp,0x10
c00072d2:	83 e6 10             	and    esi,0x10
c00072d5:	75 10                	jne    c00072e7 <Computer::handleNMI()+0x2f>
c00072d7:	f6 c3 40             	test   bl,0x40
c00072da:	75 20                	jne    c00072fc <Computer::handleNMI()+0x44>
c00072dc:	80 e3 80             	and    bl,0x80
c00072df:	75 30                	jne    c0007311 <Computer::handleNMI()+0x59>
c00072e1:	83 c4 04             	add    esp,0x4
c00072e4:	5b                   	pop    ebx
c00072e5:	5e                   	pop    esi
c00072e6:	c3                   	ret    
c00072e7:	83 ec 0c             	sub    esp,0xc
c00072ea:	68 e0 05 02 c0       	push   0xc00205e0
c00072ef:	e8 f9 9e 00 00       	call   c00111ed <KePanic(char const*)>
c00072f4:	83 c4 10             	add    esp,0x10
c00072f7:	f6 c3 40             	test   bl,0x40
c00072fa:	74 e0                	je     c00072dc <Computer::handleNMI()+0x24>
c00072fc:	83 ec 0c             	sub    esp,0xc
c00072ff:	68 ed 05 02 c0       	push   0xc00205ed
c0007304:	e8 e4 9e 00 00       	call   c00111ed <KePanic(char const*)>
c0007309:	83 c4 10             	add    esp,0x10
c000730c:	80 e3 80             	and    bl,0x80
c000730f:	74 d0                	je     c00072e1 <Computer::handleNMI()+0x29>
c0007311:	c7 44 24 10 f7 05 02 c0 	mov    DWORD PTR [esp+0x10],0xc00205f7
c0007319:	83 c4 04             	add    esp,0x4
c000731c:	5b                   	pop    ebx
c000731d:	5e                   	pop    esi
c000731e:	e9 ca 9e 00 00       	jmp    c00111ed <KePanic(char const*)>
c0007323:	90                   	nop

c0007324 <GDTEntry::setBase(unsigned int)>:
c0007324:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007328:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000732c:	89 c1                	mov    ecx,eax
c000732e:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c0007332:	c1 e9 10             	shr    ecx,0x10
c0007335:	c1 e8 18             	shr    eax,0x18
c0007338:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c000733b:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c000733e:	c3                   	ret    
c000733f:	90                   	nop

c0007340 <GDTEntry::setLimit(unsigned int)>:
c0007340:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0007344:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007348:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c000734b:	66 89 01             	mov    WORD PTR [ecx],ax
c000734e:	83 e2 f0             	and    edx,0xfffffff0
c0007351:	c1 e8 10             	shr    eax,0x10
c0007354:	83 e0 0f             	and    eax,0xf
c0007357:	09 d0                	or     eax,edx
c0007359:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c000735c:	c3                   	ret    
c000735d:	90                   	nop

c000735e <GDT::GDT()>:
c000735e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007362:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0007368:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000736c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0007372:	90                   	nop
c0007373:	c3                   	ret    

c0007374 <GDT::addEntry(GDTEntry)>:
c0007374:	53                   	push   ebx
c0007375:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007379:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000737d:	8b 02                	mov    eax,DWORD PTR [edx]
c000737f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0007383:	89 4c c2 04          	mov    DWORD PTR [edx+eax*8+0x4],ecx
c0007387:	89 5c c2 08          	mov    DWORD PTR [edx+eax*8+0x8],ebx
c000738b:	8d 48 01             	lea    ecx,[eax+0x1]
c000738e:	c1 e0 03             	shl    eax,0x3
c0007391:	89 0a                	mov    DWORD PTR [edx],ecx
c0007393:	5b                   	pop    ebx
c0007394:	c3                   	ret    
c0007395:	90                   	nop

c0007396 <GDT::getNumberOfEntries()>:
c0007396:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000739a:	8b 00                	mov    eax,DWORD PTR [eax]
c000739c:	c3                   	ret    
c000739d:	90                   	nop

c000739e <GDT::flush()>:
c000739e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00073a2:	8b 10                	mov    edx,DWORD PTR [eax]
c00073a4:	83 c0 04             	add    eax,0x4
c00073a7:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c00073ae:	a3 c2 5e 02 c0       	mov    ds:0xc0025ec2,eax
c00073b3:	66 89 15 c0 5e 02 c0 	mov    WORD PTR ds:0xc0025ec0,dx
c00073ba:	e9 9b 8f ff ff       	jmp    c000035a <loadGDT>
c00073bf:	90                   	nop

c00073c0 <GDT::setup()>:
c00073c0:	57                   	push   edi
c00073c1:	56                   	push   esi
c00073c2:	53                   	push   ebx
c00073c3:	83 ec 30             	sub    esp,0x30
c00073c6:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00073ca:	6a 00                	push   0x0
c00073cc:	8d 74 24 14          	lea    esi,[esp+0x14]
c00073d0:	56                   	push   esi
c00073d1:	e8 4e ff ff ff       	call   c0007324 <GDTEntry::setBase(unsigned int)>
c00073d6:	6a 00                	push   0x0
c00073d8:	56                   	push   esi
c00073d9:	e8 62 ff ff ff       	call   c0007340 <GDTEntry::setLimit(unsigned int)>
c00073de:	81 64 24 24 ff 00 0f ff 	and    DWORD PTR [esp+0x24],0xff0f00ff
c00073e6:	6a 00                	push   0x0
c00073e8:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c00073ec:	56                   	push   esi
c00073ed:	e8 32 ff ff ff       	call   c0007324 <GDTEntry::setBase(unsigned int)>
c00073f2:	68 ff ff ff 00       	push   0xffffff
c00073f7:	56                   	push   esi
c00073f8:	e8 43 ff ff ff       	call   c0007340 <GDTEntry::setLimit(unsigned int)>
c00073fd:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0007401:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0007405:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0007409:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c000740d:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c0007412:	0d 00 9a c0 00       	or     eax,0xc09a00
c0007417:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000741b:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000741f:	89 f8                	mov    eax,edi
c0007421:	89 fa                	mov    edx,edi
c0007423:	80 e4 f7             	and    ah,0xf7
c0007426:	80 ce 60             	or     dh,0x60
c0007429:	89 c7                	mov    edi,eax
c000742b:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000742f:	80 cc 60             	or     ah,0x60
c0007432:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0007436:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000743a:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000743e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007442:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007446:	83 c4 20             	add    esp,0x20
c0007449:	6a 00                	push   0x0
c000744b:	8d 44 24 24          	lea    eax,[esp+0x24]
c000744f:	50                   	push   eax
c0007450:	e8 cf fe ff ff       	call   c0007324 <GDTEntry::setBase(unsigned int)>
c0007455:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c0007459:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c000745d:	89 7c 24 34          	mov    DWORD PTR [esp+0x34],edi
c0007461:	83 e0 3f             	and    eax,0x3f
c0007464:	88 44 24 2e          	mov    BYTE PTR [esp+0x2e],al
c0007468:	6a 00                	push   0x0
c000746a:	8d 44 24 34          	lea    eax,[esp+0x34]
c000746e:	50                   	push   eax
c000746f:	e8 b0 fe ff ff       	call   c0007324 <GDTEntry::setBase(unsigned int)>
c0007474:	8a 44 24 3e          	mov    al,BYTE PTR [esp+0x3e]
c0007478:	83 e0 3f             	and    eax,0x3f
c000747b:	88 44 24 3e          	mov    BYTE PTR [esp+0x3e],al
c000747f:	83 c4 0c             	add    esp,0xc
c0007482:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007486:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000748a:	53                   	push   ebx
c000748b:	e8 e4 fe ff ff       	call   c0007374 <GDT::addEntry(GDTEntry)>
c0007490:	83 c4 0c             	add    esp,0xc
c0007493:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007497:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000749b:	53                   	push   ebx
c000749c:	e8 d3 fe ff ff       	call   c0007374 <GDT::addEntry(GDTEntry)>
c00074a1:	83 c4 0c             	add    esp,0xc
c00074a4:	57                   	push   edi
c00074a5:	56                   	push   esi
c00074a6:	53                   	push   ebx
c00074a7:	e8 c8 fe ff ff       	call   c0007374 <GDT::addEntry(GDTEntry)>
c00074ac:	83 c4 0c             	add    esp,0xc
c00074af:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c00074b3:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c00074b7:	53                   	push   ebx
c00074b8:	e8 b7 fe ff ff       	call   c0007374 <GDT::addEntry(GDTEntry)>
c00074bd:	83 c4 0c             	add    esp,0xc
c00074c0:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00074c4:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00074c8:	53                   	push   ebx
c00074c9:	e8 a6 fe ff ff       	call   c0007374 <GDT::addEntry(GDTEntry)>
c00074ce:	83 c4 0c             	add    esp,0xc
c00074d1:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00074d5:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00074d9:	53                   	push   ebx
c00074da:	e8 95 fe ff ff       	call   c0007374 <GDT::addEntry(GDTEntry)>
c00074df:	83 c4 0c             	add    esp,0xc
c00074e2:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00074e6:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00074ea:	53                   	push   ebx
c00074eb:	e8 84 fe ff ff       	call   c0007374 <GDT::addEntry(GDTEntry)>
c00074f0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00074f3:	e8 a6 fe ff ff       	call   c000739e <GDT::flush()>
c00074f8:	83 c4 40             	add    esp,0x40
c00074fb:	5b                   	pop    ebx
c00074fc:	5e                   	pop    esi
c00074fd:	5f                   	pop    edi
c00074fe:	c3                   	ret    

c00074ff <idleFunction(void*)>:
c00074ff:	83 ec 0c             	sub    esp,0xc
c0007502:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c0007507:	48                   	dec    eax
c0007508:	a3 68 a4 02 c0       	mov    ds:0xc002a468,eax
c000750d:	75 01                	jne    c0007510 <idleFunction(void*)+0x11>
c000750f:	fb                   	sti    
c0007510:	e8 5b 01 01 00       	call   c0017670 <HalSystemIdle()>
c0007515:	e8 88 7e 01 00       	call   c001f3a2 <idleCommon()>
c000751a:	eb f4                	jmp    c0007510 <idleFunction(void*)+0x11>

c000751c <IDTEntry::IDTEntry(bool)>:
c000751c:	53                   	push   ebx
c000751d:	83 ec 04             	sub    esp,0x4
c0007520:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007524:	88 04 24             	mov    BYTE PTR [esp],al
c0007527:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000752b:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c0007531:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007535:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c0007539:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000753d:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c0007540:	83 e2 f0             	and    edx,0xfffffff0
c0007543:	83 ca 0e             	or     edx,0xe
c0007546:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0007549:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000754d:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c0007550:	83 e2 ef             	and    edx,0xffffffef
c0007553:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0007556:	0f b6 04 24          	movzx  eax,BYTE PTR [esp]
c000755a:	85 c0                	test   eax,eax
c000755c:	74 06                	je     c0007564 <IDTEntry::IDTEntry(bool)+0x48>
c000755e:	b2 03                	mov    dl,0x3
c0007560:	eb 06                	jmp    c0007568 <IDTEntry::IDTEntry(bool)+0x4c>
c0007562:	66 90                	xchg   ax,ax
c0007564:	b2 00                	mov    dl,0x0
c0007566:	66 90                	xchg   ax,ax
c0007568:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000756c:	83 e2 03             	and    edx,0x3
c000756f:	89 d3                	mov    ebx,edx
c0007571:	c1 e3 05             	shl    ebx,0x5
c0007574:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c0007577:	83 e2 9f             	and    edx,0xffffff9f
c000757a:	88 d1                	mov    cl,dl
c000757c:	88 da                	mov    dl,bl
c000757e:	09 ca                	or     edx,ecx
c0007580:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0007583:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007587:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000758a:	83 ca 80             	or     edx,0xffffff80
c000758d:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0007590:	90                   	nop
c0007591:	83 c4 04             	add    esp,0x4
c0007594:	5b                   	pop    ebx
c0007595:	c3                   	ret    

c0007596 <IDTEntry::setOffset(unsigned int)>:
c0007596:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000759a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000759e:	66 89 02             	mov    WORD PTR [edx],ax
c00075a1:	c1 e8 10             	shr    eax,0x10
c00075a4:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c00075a8:	c3                   	ret    
c00075a9:	90                   	nop
c00075aa:	66 90                	xchg   ax,ax

c00075ac <IDT::IDT()>:
c00075ac:	90                   	nop
c00075ad:	c3                   	ret    

c00075ae <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c00075ae:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00075b2:	83 c0 30             	add    eax,0x30
c00075b5:	c3                   	ret    

c00075b6 <IDT::addEntry(IDTEntry, int)>:
c00075b6:	53                   	push   ebx
c00075b7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00075bb:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00075bf:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00075c3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00075c7:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c00075ca:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c00075ce:	5b                   	pop    ebx
c00075cf:	c3                   	ret    

c00075d0 <IDT::addEntry(int, void (*)(), bool)>:
c00075d0:	53                   	push   ebx
c00075d1:	83 ec 10             	sub    esp,0x10
c00075d4:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c00075d9:	50                   	push   eax
c00075da:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c00075de:	53                   	push   ebx
c00075df:	e8 38 ff ff ff       	call   c000751c <IDTEntry::IDTEntry(bool)>
c00075e4:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00075e8:	53                   	push   ebx
c00075e9:	e8 a8 ff ff ff       	call   c0007596 <IDTEntry::setOffset(unsigned int)>
c00075ee:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00075f2:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00075f6:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00075fa:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00075fe:	e8 b3 ff ff ff       	call   c00075b6 <IDT::addEntry(IDTEntry, int)>
c0007603:	83 c4 30             	add    esp,0x30
c0007606:	5b                   	pop    ebx
c0007607:	c3                   	ret    

c0007608 <IDT::flush()>:
c0007608:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000760c:	66 c7 05 c8 5e 02 c0 ff 07 	mov    WORD PTR ds:0xc0025ec8,0x7ff
c0007615:	a3 ca 5e 02 c0       	mov    ds:0xc0025eca,eax
c000761a:	0f 01 1d c8 5e 02 c0 	lidtd  ds:0xc0025ec8
c0007621:	c3                   	ret    

c0007622 <IDT::setup()>:
c0007622:	57                   	push   edi
c0007623:	56                   	push   esi
c0007624:	53                   	push   ebx
c0007625:	83 ec 10             	sub    esp,0x10
c0007628:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000762c:	6a 00                	push   0x0
c000762e:	68 a0 ea 01 c0       	push   0xc001eaa0
c0007633:	6a 00                	push   0x0
c0007635:	53                   	push   ebx
c0007636:	e8 95 ff ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c000763b:	6a 00                	push   0x0
c000763d:	68 b0 ea 01 c0       	push   0xc001eab0
c0007642:	6a 01                	push   0x1
c0007644:	53                   	push   ebx
c0007645:	e8 86 ff ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c000764a:	83 c4 20             	add    esp,0x20
c000764d:	6a 00                	push   0x0
c000764f:	68 ba ea 01 c0       	push   0xc001eaba
c0007654:	6a 02                	push   0x2
c0007656:	53                   	push   ebx
c0007657:	e8 74 ff ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c000765c:	6a 00                	push   0x0
c000765e:	68 c4 ea 01 c0       	push   0xc001eac4
c0007663:	6a 03                	push   0x3
c0007665:	53                   	push   ebx
c0007666:	e8 65 ff ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c000766b:	83 c4 20             	add    esp,0x20
c000766e:	6a 00                	push   0x0
c0007670:	68 ce ea 01 c0       	push   0xc001eace
c0007675:	6a 04                	push   0x4
c0007677:	53                   	push   ebx
c0007678:	e8 53 ff ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c000767d:	6a 00                	push   0x0
c000767f:	68 d8 ea 01 c0       	push   0xc001ead8
c0007684:	6a 05                	push   0x5
c0007686:	53                   	push   ebx
c0007687:	e8 44 ff ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c000768c:	83 c4 20             	add    esp,0x20
c000768f:	6a 00                	push   0x0
c0007691:	68 e2 ea 01 c0       	push   0xc001eae2
c0007696:	6a 06                	push   0x6
c0007698:	53                   	push   ebx
c0007699:	e8 32 ff ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c000769e:	6a 00                	push   0x0
c00076a0:	68 ec ea 01 c0       	push   0xc001eaec
c00076a5:	6a 07                	push   0x7
c00076a7:	53                   	push   ebx
c00076a8:	e8 23 ff ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00076ad:	83 c4 20             	add    esp,0x20
c00076b0:	6a 00                	push   0x0
c00076b2:	68 f6 ea 01 c0       	push   0xc001eaf6
c00076b7:	6a 08                	push   0x8
c00076b9:	53                   	push   ebx
c00076ba:	e8 11 ff ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00076bf:	6a 00                	push   0x0
c00076c1:	68 fe ea 01 c0       	push   0xc001eafe
c00076c6:	6a 09                	push   0x9
c00076c8:	53                   	push   ebx
c00076c9:	e8 02 ff ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00076ce:	83 c4 20             	add    esp,0x20
c00076d1:	6a 00                	push   0x0
c00076d3:	68 08 eb 01 c0       	push   0xc001eb08
c00076d8:	6a 0a                	push   0xa
c00076da:	53                   	push   ebx
c00076db:	e8 f0 fe ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00076e0:	6a 00                	push   0x0
c00076e2:	68 10 eb 01 c0       	push   0xc001eb10
c00076e7:	6a 0b                	push   0xb
c00076e9:	53                   	push   ebx
c00076ea:	e8 e1 fe ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00076ef:	83 c4 20             	add    esp,0x20
c00076f2:	6a 00                	push   0x0
c00076f4:	68 18 eb 01 c0       	push   0xc001eb18
c00076f9:	6a 0c                	push   0xc
c00076fb:	53                   	push   ebx
c00076fc:	e8 cf fe ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c0007701:	6a 00                	push   0x0
c0007703:	68 20 eb 01 c0       	push   0xc001eb20
c0007708:	6a 0d                	push   0xd
c000770a:	53                   	push   ebx
c000770b:	e8 c0 fe ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c0007710:	83 c4 20             	add    esp,0x20
c0007713:	6a 00                	push   0x0
c0007715:	68 3a eb 01 c0       	push   0xc001eb3a
c000771a:	6a 0e                	push   0xe
c000771c:	53                   	push   ebx
c000771d:	e8 ae fe ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c0007722:	6a 00                	push   0x0
c0007724:	68 42 eb 01 c0       	push   0xc001eb42
c0007729:	6a 0f                	push   0xf
c000772b:	53                   	push   ebx
c000772c:	e8 9f fe ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c0007731:	83 c4 20             	add    esp,0x20
c0007734:	6a 00                	push   0x0
c0007736:	68 4c eb 01 c0       	push   0xc001eb4c
c000773b:	6a 10                	push   0x10
c000773d:	53                   	push   ebx
c000773e:	e8 8d fe ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c0007743:	6a 00                	push   0x0
c0007745:	68 56 eb 01 c0       	push   0xc001eb56
c000774a:	6a 11                	push   0x11
c000774c:	53                   	push   ebx
c000774d:	e8 7e fe ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c0007752:	83 c4 20             	add    esp,0x20
c0007755:	6a 00                	push   0x0
c0007757:	68 60 eb 01 c0       	push   0xc001eb60
c000775c:	6a 12                	push   0x12
c000775e:	53                   	push   ebx
c000775f:	e8 6c fe ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c0007764:	6a 01                	push   0x1
c0007766:	68 fa eb 01 c0       	push   0xc001ebfa
c000776b:	6a 60                	push   0x60
c000776d:	53                   	push   ebx
c000776e:	e8 5d fe ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c0007773:	83 c4 20             	add    esp,0x20
c0007776:	6a 00                	push   0x0
c0007778:	68 01 ec 01 c0       	push   0xc001ec01
c000777d:	6a 20                	push   0x20
c000777f:	53                   	push   ebx
c0007780:	e8 4b fe ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c0007785:	6a 00                	push   0x0
c0007787:	68 ec eb 01 c0       	push   0xc001ebec
c000778c:	6a 21                	push   0x21
c000778e:	53                   	push   ebx
c000778f:	e8 3c fe ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c0007794:	83 c4 20             	add    esp,0x20
c0007797:	6a 00                	push   0x0
c0007799:	68 f3 eb 01 c0       	push   0xc001ebf3
c000779e:	6a 22                	push   0x22
c00077a0:	53                   	push   ebx
c00077a1:	e8 2a fe ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00077a6:	6a 00                	push   0x0
c00077a8:	68 6a eb 01 c0       	push   0xc001eb6a
c00077ad:	6a 23                	push   0x23
c00077af:	53                   	push   ebx
c00077b0:	e8 1b fe ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00077b5:	83 c4 20             	add    esp,0x20
c00077b8:	6a 00                	push   0x0
c00077ba:	68 74 eb 01 c0       	push   0xc001eb74
c00077bf:	6a 24                	push   0x24
c00077c1:	53                   	push   ebx
c00077c2:	e8 09 fe ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00077c7:	6a 00                	push   0x0
c00077c9:	68 7e eb 01 c0       	push   0xc001eb7e
c00077ce:	6a 25                	push   0x25
c00077d0:	53                   	push   ebx
c00077d1:	e8 fa fd ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00077d6:	83 c4 20             	add    esp,0x20
c00077d9:	6a 00                	push   0x0
c00077db:	68 88 eb 01 c0       	push   0xc001eb88
c00077e0:	6a 26                	push   0x26
c00077e2:	53                   	push   ebx
c00077e3:	e8 e8 fd ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00077e8:	6a 00                	push   0x0
c00077ea:	68 92 eb 01 c0       	push   0xc001eb92
c00077ef:	6a 27                	push   0x27
c00077f1:	53                   	push   ebx
c00077f2:	e8 d9 fd ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00077f7:	83 c4 20             	add    esp,0x20
c00077fa:	6a 00                	push   0x0
c00077fc:	68 9c eb 01 c0       	push   0xc001eb9c
c0007801:	6a 28                	push   0x28
c0007803:	53                   	push   ebx
c0007804:	e8 c7 fd ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c0007809:	6a 00                	push   0x0
c000780b:	68 a6 eb 01 c0       	push   0xc001eba6
c0007810:	6a 29                	push   0x29
c0007812:	53                   	push   ebx
c0007813:	e8 b8 fd ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c0007818:	83 c4 20             	add    esp,0x20
c000781b:	6a 00                	push   0x0
c000781d:	68 b0 eb 01 c0       	push   0xc001ebb0
c0007822:	6a 2a                	push   0x2a
c0007824:	53                   	push   ebx
c0007825:	e8 a6 fd ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c000782a:	6a 00                	push   0x0
c000782c:	68 ba eb 01 c0       	push   0xc001ebba
c0007831:	6a 2b                	push   0x2b
c0007833:	53                   	push   ebx
c0007834:	e8 97 fd ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c0007839:	83 c4 20             	add    esp,0x20
c000783c:	6a 00                	push   0x0
c000783e:	68 c4 eb 01 c0       	push   0xc001ebc4
c0007843:	6a 2c                	push   0x2c
c0007845:	53                   	push   ebx
c0007846:	e8 85 fd ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c000784b:	6a 00                	push   0x0
c000784d:	68 ce eb 01 c0       	push   0xc001ebce
c0007852:	6a 2d                	push   0x2d
c0007854:	53                   	push   ebx
c0007855:	e8 76 fd ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c000785a:	83 c4 20             	add    esp,0x20
c000785d:	6a 00                	push   0x0
c000785f:	68 d8 eb 01 c0       	push   0xc001ebd8
c0007864:	6a 2e                	push   0x2e
c0007866:	53                   	push   ebx
c0007867:	e8 64 fd ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c000786c:	6a 00                	push   0x0
c000786e:	68 e2 eb 01 c0       	push   0xc001ebe2
c0007873:	6a 2f                	push   0x2f
c0007875:	53                   	push   ebx
c0007876:	e8 55 fd ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c000787b:	83 c4 20             	add    esp,0x20
c000787e:	6a 00                	push   0x0
c0007880:	68 3c ed 01 c0       	push   0xc001ed3c
c0007885:	6a 30                	push   0x30
c0007887:	53                   	push   ebx
c0007888:	e8 43 fd ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c000788d:	6a 00                	push   0x0
c000788f:	68 46 ed 01 c0       	push   0xc001ed46
c0007894:	6a 31                	push   0x31
c0007896:	53                   	push   ebx
c0007897:	e8 34 fd ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c000789c:	83 c4 20             	add    esp,0x20
c000789f:	6a 00                	push   0x0
c00078a1:	68 50 ed 01 c0       	push   0xc001ed50
c00078a6:	6a 32                	push   0x32
c00078a8:	53                   	push   ebx
c00078a9:	e8 22 fd ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00078ae:	6a 00                	push   0x0
c00078b0:	68 5a ed 01 c0       	push   0xc001ed5a
c00078b5:	6a 33                	push   0x33
c00078b7:	53                   	push   ebx
c00078b8:	e8 13 fd ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00078bd:	83 c4 20             	add    esp,0x20
c00078c0:	6a 00                	push   0x0
c00078c2:	68 64 ed 01 c0       	push   0xc001ed64
c00078c7:	6a 34                	push   0x34
c00078c9:	53                   	push   ebx
c00078ca:	e8 01 fd ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00078cf:	6a 00                	push   0x0
c00078d1:	68 6e ed 01 c0       	push   0xc001ed6e
c00078d6:	6a 35                	push   0x35
c00078d8:	53                   	push   ebx
c00078d9:	e8 f2 fc ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00078de:	83 c4 20             	add    esp,0x20
c00078e1:	6a 00                	push   0x0
c00078e3:	68 78 ed 01 c0       	push   0xc001ed78
c00078e8:	6a 36                	push   0x36
c00078ea:	53                   	push   ebx
c00078eb:	e8 e0 fc ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00078f0:	6a 00                	push   0x0
c00078f2:	68 82 ed 01 c0       	push   0xc001ed82
c00078f7:	6a 37                	push   0x37
c00078f9:	53                   	push   ebx
c00078fa:	e8 d1 fc ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00078ff:	83 c4 1c             	add    esp,0x1c
c0007902:	6a 03                	push   0x3
c0007904:	6a 02                	push   0x2
c0007906:	ff 35 b0 5f 02 c0    	push   DWORD PTR ds:0xc0025fb0
c000790c:	e8 13 25 00 00       	call   c0009e24 <VAS::allocatePages(int, int)>
c0007911:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0007918:	89 c6                	mov    esi,eax
c000791a:	e8 97 01 00 00       	call   c0007ab6 <malloc>
c000791f:	81 c6 00 20 00 00    	add    esi,0x2000
c0007925:	89 04 24             	mov    DWORD PTR [esp],eax
c0007928:	89 c7                	mov    edi,eax
c000792a:	e8 15 16 00 00       	call   c0008f44 <TSS::TSS()>
c000792f:	83 c4 0c             	add    esp,0xc
c0007932:	68 f6 ea 01 c0       	push   0xc001eaf6
c0007937:	56                   	push   esi
c0007938:	57                   	push   edi
c0007939:	e8 4a 16 00 00       	call   c0008f88 <TSS::setup(unsigned long, unsigned long)>
c000793e:	89 c6                	mov    esi,eax
c0007940:	58                   	pop    eax
c0007941:	5a                   	pop    edx
c0007942:	6a 00                	push   0x0
c0007944:	8d 44 24 14          	lea    eax,[esp+0x14]
c0007948:	50                   	push   eax
c0007949:	e8 ce fb ff ff       	call   c000751c <IDTEntry::IDTEntry(bool)>
c000794e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0007952:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c0007957:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c000795e:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c0007964:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007968:	80 ce 05             	or     dh,0x5
c000796b:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c000796e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0007972:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0007976:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c0007979:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000797c:	e8 87 fc ff ff       	call   c0007608 <IDT::flush()>
c0007981:	83 c4 20             	add    esp,0x20
c0007984:	5b                   	pop    ebx
c0007985:	5e                   	pop    esi
c0007986:	5f                   	pop    edi
c0007987:	c3                   	ret    

c0007988 <sbrk>:
c0007988:	55                   	push   ebp
c0007989:	57                   	push   edi
c000798a:	56                   	push   esi
c000798b:	53                   	push   ebx
c000798c:	83 ec 1c             	sub    esp,0x1c
c000798f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0007993:	85 c0                	test   eax,eax
c0007995:	74 61                	je     c00079f8 <sbrk+0x70>
c0007997:	78 66                	js     c00079ff <sbrk+0x77>
c0007999:	8b 15 ac 2e 02 c0    	mov    edx,DWORD PTR ds:0xc0022eac
c000799f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00079a3:	05 ff 0f 00 00       	add    eax,0xfff
c00079a8:	89 c5                	mov    ebp,eax
c00079aa:	78 6b                	js     c0007a17 <sbrk+0x8f>
c00079ac:	c1 fd 0c             	sar    ebp,0xc
c00079af:	bb 00 00 00 00       	mov    ebx,0x0
c00079b4:	8b 35 b0 5f 02 c0    	mov    esi,DWORD PTR ds:0xc0025fb0
c00079ba:	8b 3d ac 2e 02 c0    	mov    edi,DWORD PTR ds:0xc0022eac
c00079c0:	e8 fa 03 00 00       	call   c0007dbf <Phys::allocatePage()>
c00079c5:	68 01 04 00 00       	push   0x401
c00079ca:	57                   	push   edi
c00079cb:	50                   	push   eax
c00079cc:	56                   	push   esi
c00079cd:	e8 4e 23 00 00       	call   c0009d20 <VAS::mapPage(unsigned long, unsigned long, int)>
c00079d2:	81 05 ac 2e 02 c0 00 10 00 00 	add    DWORD PTR ds:0xc0022eac,0x1000
c00079dc:	83 c3 01             	add    ebx,0x1
c00079df:	83 c4 10             	add    esp,0x10
c00079e2:	39 dd                	cmp    ebp,ebx
c00079e4:	75 ce                	jne    c00079b4 <sbrk+0x2c>
c00079e6:	0f 20 d8             	mov    eax,cr3
c00079e9:	0f 22 d8             	mov    cr3,eax
c00079ec:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00079f0:	83 c4 1c             	add    esp,0x1c
c00079f3:	5b                   	pop    ebx
c00079f4:	5e                   	pop    esi
c00079f5:	5f                   	pop    edi
c00079f6:	5d                   	pop    ebp
c00079f7:	c3                   	ret    
c00079f8:	a1 ac 2e 02 c0       	mov    eax,ds:0xc0022eac
c00079fd:	eb f1                	jmp    c00079f0 <sbrk+0x68>
c00079ff:	83 ec 08             	sub    esp,0x8
c0007a02:	50                   	push   eax
c0007a03:	68 98 06 02 c0       	push   0xc0020698
c0007a08:	e8 38 2f 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0007a0d:	83 c4 10             	add    esp,0x10
c0007a10:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0007a15:	eb d9                	jmp    c00079f0 <sbrk+0x68>
c0007a17:	8d a8 ff 0f 00 00    	lea    ebp,[eax+0xfff]
c0007a1d:	eb 8d                	jmp    c00079ac <sbrk+0x24>

c0007a1f <mmap>:
c0007a1f:	83 ec 18             	sub    esp,0x18
c0007a22:	68 c8 06 02 c0       	push   0xc00206c8
c0007a27:	e8 c1 97 00 00       	call   c00111ed <KePanic(char const*)>
c0007a2c:	b8 00 00 00 00       	mov    eax,0x0
c0007a31:	83 c4 1c             	add    esp,0x1c
c0007a34:	c3                   	ret    

c0007a35 <munmap>:
c0007a35:	83 ec 18             	sub    esp,0x18
c0007a38:	68 cd 06 02 c0       	push   0xc00206cd
c0007a3d:	e8 ab 97 00 00       	call   c00111ed <KePanic(char const*)>
c0007a42:	b8 00 00 00 00       	mov    eax,0x0
c0007a47:	83 c4 1c             	add    esp,0x1c
c0007a4a:	c3                   	ret    

c0007a4b <liballoc_lock()>:
c0007a4b:	fa                   	cli    
c0007a4c:	83 05 68 a4 02 c0 01 	add    DWORD PTR ds:0xc002a468,0x1
c0007a53:	b8 00 00 00 00       	mov    eax,0x0
c0007a58:	c3                   	ret    

c0007a59 <liballoc_unlock()>:
c0007a59:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c0007a5e:	83 e8 01             	sub    eax,0x1
c0007a61:	a3 68 a4 02 c0       	mov    ds:0xc002a468,eax
c0007a66:	75 01                	jne    c0007a69 <liballoc_unlock()+0x10>
c0007a68:	fb                   	sti    
c0007a69:	b8 00 00 00 00       	mov    eax,0x0
c0007a6e:	c3                   	ret    

c0007a6f <liballoc_alloc(int)>:
c0007a6f:	83 ec 10             	sub    esp,0x10
c0007a72:	6a 01                	push   0x1
c0007a74:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007a78:	ff 35 b0 5f 02 c0    	push   DWORD PTR ds:0xc0025fb0
c0007a7e:	e8 a1 23 00 00       	call   c0009e24 <VAS::allocatePages(int, int)>
c0007a83:	83 c4 1c             	add    esp,0x1c
c0007a86:	c3                   	ret    

c0007a87 <liballoc_free(void*, int)>:
c0007a87:	83 ec 14             	sub    esp,0x14
c0007a8a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007a8e:	ff 35 b0 5f 02 c0    	push   DWORD PTR ds:0xc0025fb0
c0007a94:	e8 cf 1f 00 00       	call   c0009a68 <VAS::freeAllocatedPages(unsigned long)>
c0007a99:	b8 00 00 00 00       	mov    eax,0x0
c0007a9e:	83 c4 1c             	add    esp,0x1c
c0007aa1:	c3                   	ret    

c0007aa2 <realloc>:
c0007aa2:	83 ec 14             	sub    esp,0x14
c0007aa5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007aa9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007aad:	e8 36 9b ff ff       	call   c00015e8 <dlrealloc>
c0007ab2:	83 c4 1c             	add    esp,0x1c
c0007ab5:	c3                   	ret    

c0007ab6 <malloc>:
c0007ab6:	83 ec 18             	sub    esp,0x18
c0007ab9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007abd:	e8 e9 95 ff ff       	call   c00010ab <dlmalloc>
c0007ac2:	83 c4 1c             	add    esp,0x1c
c0007ac5:	c3                   	ret    

c0007ac6 <free>:
c0007ac6:	83 ec 18             	sub    esp,0x18
c0007ac9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007acd:	e8 81 92 ff ff       	call   c0000d53 <dlfree>
c0007ad2:	83 c4 1c             	add    esp,0x1c
c0007ad5:	c3                   	ret    

c0007ad6 <rfree>:
c0007ad6:	83 ec 18             	sub    esp,0x18
c0007ad9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007add:	e8 71 92 ff ff       	call   c0000d53 <dlfree>
c0007ae2:	83 c4 1c             	add    esp,0x1c
c0007ae5:	c3                   	ret    

c0007ae6 <calloc>:
c0007ae6:	56                   	push   esi
c0007ae7:	53                   	push   ebx
c0007ae8:	83 ec 10             	sub    esp,0x10
c0007aeb:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0007aef:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c0007af4:	53                   	push   ebx
c0007af5:	e8 bc ff ff ff       	call   c0007ab6 <malloc>
c0007afa:	89 c6                	mov    esi,eax
c0007afc:	83 c4 0c             	add    esp,0xc
c0007aff:	53                   	push   ebx
c0007b00:	6a 00                	push   0x0
c0007b02:	50                   	push   eax
c0007b03:	e8 e8 89 ff ff       	call   c00004f0 <memset>
c0007b08:	89 f0                	mov    eax,esi
c0007b0a:	83 c4 14             	add    esp,0x14
c0007b0d:	5b                   	pop    ebx
c0007b0e:	5e                   	pop    esi
c0007b0f:	c3                   	ret    

c0007b10 <KeEntryPoint>:
c0007b10:	57                   	push   edi
c0007b11:	bf f9 03 00 00       	mov    edi,0x3f9
c0007b16:	56                   	push   esi
c0007b17:	89 fa                	mov    edx,edi
c0007b19:	53                   	push   ebx
c0007b1a:	31 f6                	xor    esi,esi
c0007b1c:	83 ec 2c             	sub    esp,0x2c
c0007b1f:	a1 00 05 00 00       	mov    eax,ds:0x500
c0007b24:	a3 d0 5e 02 c0       	mov    ds:0xc0025ed0,eax
c0007b29:	89 f0                	mov    eax,esi
c0007b2b:	ee                   	out    dx,al
c0007b2c:	bb fb 03 00 00       	mov    ebx,0x3fb
c0007b31:	b0 80                	mov    al,0x80
c0007b33:	89 da                	mov    edx,ebx
c0007b35:	ee                   	out    dx,al
c0007b36:	b1 03                	mov    cl,0x3
c0007b38:	ba f8 03 00 00       	mov    edx,0x3f8
c0007b3d:	88 c8                	mov    al,cl
c0007b3f:	ee                   	out    dx,al
c0007b40:	89 f0                	mov    eax,esi
c0007b42:	89 fa                	mov    edx,edi
c0007b44:	ee                   	out    dx,al
c0007b45:	88 c8                	mov    al,cl
c0007b47:	89 da                	mov    edx,ebx
c0007b49:	ee                   	out    dx,al
c0007b4a:	b0 c7                	mov    al,0xc7
c0007b4c:	ba fa 03 00 00       	mov    edx,0x3fa
c0007b51:	ee                   	out    dx,al
c0007b52:	b0 0b                	mov    al,0xb
c0007b54:	ba fc 03 00 00       	mov    edx,0x3fc
c0007b59:	ee                   	out    dx,al
c0007b5a:	68 d4 06 02 c0       	push   0xc00206d4
c0007b5f:	e8 e1 2d 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0007b64:	e8 31 8f 00 00       	call   c0010a9a <KeDisplaySplashScreen()>
c0007b69:	a1 24 05 00 00       	mov    eax,ds:0x524
c0007b6e:	05 ff 0f 00 00       	add    eax,0xfff
c0007b73:	25 00 f0 ff ff       	and    eax,0xfffff000
c0007b78:	89 04 24             	mov    DWORD PTR [esp],eax
c0007b7b:	e8 ad 03 00 00       	call   c0007f2d <Phys::physicalMemorySetup(unsigned int)>
c0007b80:	e8 66 1c 00 00       	call   c00097eb <Virt::virtualMemorySetup()>
c0007b85:	e8 7f 8e 00 00       	call   c0010a09 <KeInitialiseAtexit()>
c0007b8a:	58                   	pop    eax
c0007b8b:	8d 5c 24 18          	lea    ebx,[esp+0x18]
c0007b8f:	53                   	push   ebx
c0007b90:	e8 53 1f 00 00       	call   c0009ae8 <VAS::VAS()>
c0007b95:	89 1d b0 5f 02 c0    	mov    DWORD PTR ds:0xc0025fb0,ebx
c0007b9b:	e8 9a 77 01 00       	call   c001f33a <_init>
c0007ba0:	c7 04 24 70 01 00 00 	mov    DWORD PTR [esp],0x170
c0007ba7:	e8 0a ff ff ff       	call   c0007ab6 <malloc>
c0007bac:	89 04 24             	mov    DWORD PTR [esp],eax
c0007baf:	89 c6                	mov    esi,eax
c0007bb1:	e8 32 f2 ff ff       	call   c0006de8 <Computer::Computer()>
c0007bb6:	53                   	push   ebx
c0007bb7:	89 35 b8 5e 02 c0    	mov    DWORD PTR ds:0xc0025eb8,esi
c0007bbd:	6a 00                	push   0x0
c0007bbf:	6a 00                	push   0x0
c0007bc1:	56                   	push   esi
c0007bc2:	e8 e9 f5 ff ff       	call   c00071b0 <Computer::open(int, int, void*)>
c0007bc7:	83 c4 14             	add    esp,0x14
c0007bca:	53                   	push   ebx
c0007bcb:	e8 e2 1f 00 00       	call   c0009bb2 <VAS::~VAS()>
c0007bd0:	83 c4 30             	add    esp,0x30
c0007bd3:	5b                   	pop    ebx
c0007bd4:	5e                   	pop    esi
c0007bd5:	5f                   	pop    edi
c0007bd6:	c3                   	ret    

c0007bd7 <Phys::allocateDMA(unsigned long)>:
c0007bd7:	55                   	push   ebp
c0007bd8:	31 ed                	xor    ebp,ebp
c0007bda:	57                   	push   edi
c0007bdb:	56                   	push   esi
c0007bdc:	53                   	push   ebx
c0007bdd:	31 db                	xor    ebx,ebx
c0007bdf:	83 ec 1c             	sub    esp,0x1c
c0007be2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0007be6:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0007bee:	8d b8 ff 0f 00 00    	lea    edi,[eax+0xfff]
c0007bf4:	31 c0                	xor    eax,eax
c0007bf6:	c1 ef 0c             	shr    edi,0xc
c0007bf9:	eb 1b                	jmp    c0007c16 <Phys::allocateDMA(unsigned long)+0x3f>
c0007bfb:	85 c0                	test   eax,eax
c0007bfd:	75 06                	jne    c0007c05 <Phys::allocateDMA(unsigned long)+0x2e>
c0007bff:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0007c03:	89 dd                	mov    ebp,ebx
c0007c05:	8d 70 01             	lea    esi,[eax+0x1]
c0007c08:	39 f7                	cmp    edi,esi
c0007c0a:	74 37                	je     c0007c43 <Phys::allocateDMA(unsigned long)+0x6c>
c0007c0c:	89 f0                	mov    eax,esi
c0007c0e:	83 c3 01             	add    ebx,0x1
c0007c11:	83 fb 0f             	cmp    ebx,0xf
c0007c14:	7f 13                	jg     c0007c29 <Phys::allocateDMA(unsigned long)+0x52>
c0007c16:	80 bb ec 5e 02 c0 00 	cmp    BYTE PTR [ebx-0x3ffda114],0x0
c0007c1d:	74 dc                	je     c0007bfb <Phys::allocateDMA(unsigned long)+0x24>
c0007c1f:	31 c0                	xor    eax,eax
c0007c21:	83 c3 01             	add    ebx,0x1
c0007c24:	83 fb 0f             	cmp    ebx,0xf
c0007c27:	7e ed                	jle    c0007c16 <Phys::allocateDMA(unsigned long)+0x3f>
c0007c29:	83 ec 0c             	sub    esp,0xc
c0007c2c:	68 ec 06 02 c0       	push   0xc00206ec
c0007c31:	e8 b7 95 00 00       	call   c00111ed <KePanic(char const*)>
c0007c36:	83 c4 10             	add    esp,0x10
c0007c39:	31 c0                	xor    eax,eax
c0007c3b:	83 c4 1c             	add    esp,0x1c
c0007c3e:	5b                   	pop    ebx
c0007c3f:	5e                   	pop    esi
c0007c40:	5f                   	pop    edi
c0007c41:	5d                   	pop    ebp
c0007c42:	c3                   	ret    
c0007c43:	89 e9                	mov    ecx,ebp
c0007c45:	c1 f9 04             	sar    ecx,0x4
c0007c48:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0007c4c:	8d 4c 3d 00          	lea    ecx,[ebp+edi*1+0x0]
c0007c50:	89 ca                	mov    edx,ecx
c0007c52:	83 ea 01             	sub    edx,0x1
c0007c55:	79 03                	jns    c0007c5a <Phys::allocateDMA(unsigned long)+0x83>
c0007c57:	8d 51 0e             	lea    edx,[ecx+0xe]
c0007c5a:	c1 fa 04             	sar    edx,0x4
c0007c5d:	39 54 24 0c          	cmp    DWORD PTR [esp+0xc],edx
c0007c61:	74 08                	je     c0007c6b <Phys::allocateDMA(unsigned long)+0x94>
c0007c63:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0007c67:	31 c0                	xor    eax,eax
c0007c69:	eb b6                	jmp    c0007c21 <Phys::allocateDMA(unsigned long)+0x4a>
c0007c6b:	85 f6                	test   esi,esi
c0007c6d:	74 17                	je     c0007c86 <Phys::allocateDMA(unsigned long)+0xaf>
c0007c6f:	8d 95 ec 5e 02 c0    	lea    edx,[ebp-0x3ffda114]
c0007c75:	8d 84 05 ed 5e 02 c0 	lea    eax,[ebp+eax*1-0x3ffda113]
c0007c7c:	c6 02 01             	mov    BYTE PTR [edx],0x1
c0007c7f:	83 c2 01             	add    edx,0x1
c0007c82:	39 d0                	cmp    eax,edx
c0007c84:	75 f6                	jne    c0007c7c <Phys::allocateDMA(unsigned long)+0xa5>
c0007c86:	a1 e4 5e 02 c0       	mov    eax,ds:0xc0025ee4
c0007c8b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0007c8f:	01 f8                	add    eax,edi
c0007c91:	85 d2                	test   edx,edx
c0007c93:	a3 e4 5e 02 c0       	mov    ds:0xc0025ee4,eax
c0007c98:	74 17                	je     c0007cb1 <Phys::allocateDMA(unsigned long)+0xda>
c0007c9a:	83 ec 0c             	sub    esp,0xc
c0007c9d:	68 ec 06 02 c0       	push   0xc00206ec
c0007ca2:	e8 46 95 00 00       	call   c00111ed <KePanic(char const*)>
c0007ca7:	83 c4 10             	add    esp,0x10
c0007caa:	89 f0                	mov    eax,esi
c0007cac:	e9 5d ff ff ff       	jmp    c0007c0e <Phys::allocateDMA(unsigned long)+0x37>
c0007cb1:	c1 e5 0c             	shl    ebp,0xc
c0007cb4:	8d 85 00 00 01 c2    	lea    eax,[ebp-0x3dff0000]
c0007cba:	e9 7c ff ff ff       	jmp    c0007c3b <Phys::allocateDMA(unsigned long)+0x64>

c0007cbf <Phys::freeDMA(unsigned long, unsigned long)>:
c0007cbf:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007cc3:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c0007cc9:	a1 e4 5e 02 c0       	mov    eax,ds:0xc0025ee4
c0007cce:	c1 ea 0c             	shr    edx,0xc
c0007cd1:	29 d0                	sub    eax,edx
c0007cd3:	a3 e4 5e 02 c0       	mov    ds:0xc0025ee4,eax
c0007cd8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007cdc:	05 00 00 ff 3d       	add    eax,0x3dff0000
c0007ce1:	c1 e8 0c             	shr    eax,0xc
c0007ce4:	85 d2                	test   edx,edx
c0007ce6:	74 11                	je     c0007cf9 <Phys::freeDMA(unsigned long, unsigned long)+0x3a>
c0007ce8:	05 ec 5e 02 c0       	add    eax,0xc0025eec
c0007ced:	01 c2                	add    edx,eax
c0007cef:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0007cf2:	83 c0 01             	add    eax,0x1
c0007cf5:	39 d0                	cmp    eax,edx
c0007cf7:	75 f6                	jne    c0007cef <Phys::freeDMA(unsigned long, unsigned long)+0x30>
c0007cf9:	c3                   	ret    

c0007cfa <Phys::setPageState(unsigned long, bool)>:
c0007cfa:	57                   	push   edi
c0007cfb:	56                   	push   esi
c0007cfc:	8b 35 b0 2e 02 c0    	mov    esi,DWORD PTR ds:0xc0022eb0
c0007d02:	53                   	push   ebx
c0007d03:	bb fe ff ff ff       	mov    ebx,0xfffffffe
c0007d08:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0007d0c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0007d10:	0f b6 c0             	movzx  eax,al
c0007d13:	89 ca                	mov    edx,ecx
c0007d15:	83 e1 07             	and    ecx,0x7
c0007d18:	c1 ea 03             	shr    edx,0x3
c0007d1b:	d3 c3                	rol    ebx,cl
c0007d1d:	01 d6                	add    esi,edx
c0007d1f:	d3 e0                	shl    eax,cl
c0007d21:	0f b6 3e             	movzx  edi,BYTE PTR [esi]
c0007d24:	21 fb                	and    ebx,edi
c0007d26:	88 1e                	mov    BYTE PTR [esi],bl
c0007d28:	8b 1d b0 2e 02 c0    	mov    ebx,DWORD PTR ds:0xc0022eb0
c0007d2e:	01 da                	add    edx,ebx
c0007d30:	8a 0a                	mov    cl,BYTE PTR [edx]
c0007d32:	09 c8                	or     eax,ecx
c0007d34:	88 02                	mov    BYTE PTR [edx],al
c0007d36:	5b                   	pop    ebx
c0007d37:	5e                   	pop    esi
c0007d38:	5f                   	pop    edi
c0007d39:	c3                   	ret    

c0007d3a <Phys::getPageState(unsigned long)>:
c0007d3a:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0007d3e:	8b 15 b0 2e 02 c0    	mov    edx,DWORD PTR ds:0xc0022eb0
c0007d44:	89 c8                	mov    eax,ecx
c0007d46:	83 e1 07             	and    ecx,0x7
c0007d49:	c1 e8 03             	shr    eax,0x3
c0007d4c:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
c0007d50:	d3 f8                	sar    eax,cl
c0007d52:	83 e0 01             	and    eax,0x1
c0007d55:	c3                   	ret    

c0007d56 <Phys::freePage(unsigned long)>:
c0007d56:	53                   	push   ebx
c0007d57:	83 ec 08             	sub    esp,0x8
c0007d5a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007d5e:	8d 90 00 00 ff ff    	lea    edx,[eax-0x10000]
c0007d64:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0007d6a:	76 41                	jbe    c0007dad <Phys::freePage(unsigned long)+0x57>
c0007d6c:	c1 e8 0c             	shr    eax,0xc
c0007d6f:	50                   	push   eax
c0007d70:	89 c3                	mov    ebx,eax
c0007d72:	e8 c3 ff ff ff       	call   c0007d3a <Phys::getPageState(unsigned long)>
c0007d77:	5a                   	pop    edx
c0007d78:	84 c0                	test   al,al
c0007d7a:	74 20                	je     c0007d9c <Phys::freePage(unsigned long)+0x46>
c0007d7c:	83 ec 08             	sub    esp,0x8
c0007d7f:	a1 e4 5e 02 c0       	mov    eax,ds:0xc0025ee4
c0007d84:	6a 00                	push   0x0
c0007d86:	83 e8 01             	sub    eax,0x1
c0007d89:	53                   	push   ebx
c0007d8a:	a3 e4 5e 02 c0       	mov    ds:0xc0025ee4,eax
c0007d8f:	e8 66 ff ff ff       	call   c0007cfa <Phys::setPageState(unsigned long, bool)>
c0007d94:	83 c4 10             	add    esp,0x10
c0007d97:	83 c4 08             	add    esp,0x8
c0007d9a:	5b                   	pop    ebx
c0007d9b:	c3                   	ret    
c0007d9c:	c7 44 24 10 91 07 02 c0 	mov    DWORD PTR [esp+0x10],0xc0020791
c0007da4:	83 c4 08             	add    esp,0x8
c0007da7:	5b                   	pop    ebx
c0007da8:	e9 40 94 00 00       	jmp    c00111ed <KePanic(char const*)>
c0007dad:	68 00 10 00 00       	push   0x1000
c0007db2:	50                   	push   eax
c0007db3:	e8 07 ff ff ff       	call   c0007cbf <Phys::freeDMA(unsigned long, unsigned long)>
c0007db8:	59                   	pop    ecx
c0007db9:	5b                   	pop    ebx
c0007dba:	83 c4 08             	add    esp,0x8
c0007dbd:	5b                   	pop    ebx
c0007dbe:	c3                   	ret    

c0007dbf <Phys::allocatePage()>:
c0007dbf:	56                   	push   esi
c0007dc0:	53                   	push   ebx
c0007dc1:	83 ec 14             	sub    esp,0x14
c0007dc4:	8b 35 d8 5e 02 c0    	mov    esi,DWORD PTR ds:0xc0025ed8
c0007dca:	89 f3                	mov    ebx,esi
c0007dcc:	eb 0a                	jmp    c0007dd8 <Phys::allocatePage()+0x19>
c0007dce:	89 1d d8 5e 02 c0    	mov    DWORD PTR ds:0xc0025ed8,ebx
c0007dd4:	39 de                	cmp    esi,ebx
c0007dd6:	74 26                	je     c0007dfe <Phys::allocatePage()+0x3f>
c0007dd8:	53                   	push   ebx
c0007dd9:	e8 5c ff ff ff       	call   c0007d3a <Phys::getPageState(unsigned long)>
c0007dde:	5a                   	pop    edx
c0007ddf:	84 c0                	test   al,al
c0007de1:	74 67                	je     c0007e4a <Phys::allocatePage()+0x8b>
c0007de3:	83 c3 01             	add    ebx,0x1
c0007de6:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c0007dec:	75 e0                	jne    c0007dce <Phys::allocatePage()+0xf>
c0007dee:	31 db                	xor    ebx,ebx
c0007df0:	c7 05 d8 5e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025ed8,0x0
c0007dfa:	39 de                	cmp    esi,ebx
c0007dfc:	75 da                	jne    c0007dd8 <Phys::allocatePage()+0x19>
c0007dfe:	83 ec 0c             	sub    esp,0xc
c0007e01:	a0 fc 5e 02 c0       	mov    al,ds:0xc0025efc
c0007e06:	83 f0 01             	xor    eax,0x1
c0007e09:	a2 fc 5e 02 c0       	mov    ds:0xc0025efc,al
c0007e0e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0007e13:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0007e16:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0007e1c:	50                   	push   eax
c0007e1d:	e8 a8 27 00 00       	call   c000a5ca <VAS::scanForEviction()>
c0007e22:	83 c4 10             	add    esp,0x10
c0007e25:	85 c0                	test   eax,eax
c0007e27:	75 48                	jne    c0007e71 <Phys::allocatePage()+0xb2>
c0007e29:	83 ec 0c             	sub    esp,0xc
c0007e2c:	68 14 07 02 c0       	push   0xc0020714
c0007e31:	e8 b7 93 00 00       	call   c00111ed <KePanic(char const*)>
c0007e36:	83 c4 10             	add    esp,0x10
c0007e39:	8b 1d d8 5e 02 c0    	mov    ebx,DWORD PTR ds:0xc0025ed8
c0007e3f:	53                   	push   ebx
c0007e40:	e8 f5 fe ff ff       	call   c0007d3a <Phys::getPageState(unsigned long)>
c0007e45:	5a                   	pop    edx
c0007e46:	84 c0                	test   al,al
c0007e48:	75 99                	jne    c0007de3 <Phys::allocatePage()+0x24>
c0007e4a:	6a 01                	push   0x1
c0007e4c:	53                   	push   ebx
c0007e4d:	e8 a8 fe ff ff       	call   c0007cfa <Phys::setPageState(unsigned long, bool)>
c0007e52:	8b 15 e4 5e 02 c0    	mov    edx,DWORD PTR ds:0xc0025ee4
c0007e58:	a1 d8 5e 02 c0       	mov    eax,ds:0xc0025ed8
c0007e5d:	83 c2 01             	add    edx,0x1
c0007e60:	59                   	pop    ecx
c0007e61:	89 15 e4 5e 02 c0    	mov    DWORD PTR ds:0xc0025ee4,edx
c0007e67:	c1 e0 0c             	shl    eax,0xc
c0007e6a:	5b                   	pop    ebx
c0007e6b:	83 c4 14             	add    esp,0x14
c0007e6e:	5b                   	pop    ebx
c0007e6f:	5e                   	pop    esi
c0007e70:	c3                   	ret    
c0007e71:	83 ec 08             	sub    esp,0x8
c0007e74:	89 c2                	mov    edx,eax
c0007e76:	6a 01                	push   0x1
c0007e78:	c1 ea 0c             	shr    edx,0xc
c0007e7b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007e7f:	52                   	push   edx
c0007e80:	e8 75 fe ff ff       	call   c0007cfa <Phys::setPageState(unsigned long, bool)>
c0007e85:	83 c4 10             	add    esp,0x10
c0007e88:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007e8c:	eb dd                	jmp    c0007e6b <Phys::allocatePage()+0xac>

c0007e8e <Phys::allocateContiguousPages(int)>:
c0007e8e:	57                   	push   edi
c0007e8f:	56                   	push   esi
c0007e90:	53                   	push   ebx
c0007e91:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0007e95:	fa                   	cli    
c0007e96:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c0007e9b:	31 db                	xor    ebx,ebx
c0007e9d:	83 c0 01             	add    eax,0x1
c0007ea0:	a3 68 a4 02 c0       	mov    ds:0xc002a468,eax
c0007ea5:	85 db                	test   ebx,ebx
c0007ea7:	75 11                	jne    c0007eba <Phys::allocateContiguousPages(int)+0x2c>
c0007ea9:	e8 11 ff ff ff       	call   c0007dbf <Phys::allocatePage()>
c0007eae:	83 fe 01             	cmp    esi,0x1
c0007eb1:	89 c7                	mov    edi,eax
c0007eb3:	74 21                	je     c0007ed6 <Phys::allocateContiguousPages(int)+0x48>
c0007eb5:	bb 01 00 00 00       	mov    ebx,0x1
c0007eba:	e8 00 ff ff ff       	call   c0007dbf <Phys::allocatePage()>
c0007ebf:	89 da                	mov    edx,ebx
c0007ec1:	c1 e2 0c             	shl    edx,0xc
c0007ec4:	01 fa                	add    edx,edi
c0007ec6:	39 c2                	cmp    edx,eax
c0007ec8:	74 22                	je     c0007eec <Phys::allocateContiguousPages(int)+0x5e>
c0007eca:	bb 01 00 00 00       	mov    ebx,0x1
c0007ecf:	89 c7                	mov    edi,eax
c0007ed1:	83 fe 01             	cmp    esi,0x1
c0007ed4:	75 e4                	jne    c0007eba <Phys::allocateContiguousPages(int)+0x2c>
c0007ed6:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c0007edb:	83 e8 01             	sub    eax,0x1
c0007ede:	a3 68 a4 02 c0       	mov    ds:0xc002a468,eax
c0007ee3:	75 01                	jne    c0007ee6 <Phys::allocateContiguousPages(int)+0x58>
c0007ee5:	fb                   	sti    
c0007ee6:	89 f8                	mov    eax,edi
c0007ee8:	5b                   	pop    ebx
c0007ee9:	5e                   	pop    esi
c0007eea:	5f                   	pop    edi
c0007eeb:	c3                   	ret    
c0007eec:	83 c3 01             	add    ebx,0x1
c0007eef:	39 f3                	cmp    ebx,esi
c0007ef1:	75 b2                	jne    c0007ea5 <Phys::allocateContiguousPages(int)+0x17>
c0007ef3:	eb e1                	jmp    c0007ed6 <Phys::allocateContiguousPages(int)+0x48>

c0007ef5 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c0007ef5:	56                   	push   esi
c0007ef6:	53                   	push   ebx
c0007ef7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0007efb:	39 1d dc 5e 02 c0    	cmp    DWORD PTR ds:0xc0025edc,ebx
c0007f01:	73 06                	jae    c0007f09 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c0007f03:	89 1d dc 5e 02 c0    	mov    DWORD PTR ds:0xc0025edc,ebx
c0007f09:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007f0d:	c1 eb 0c             	shr    ebx,0xc
c0007f10:	c1 e8 0c             	shr    eax,0xc
c0007f13:	39 d8                	cmp    eax,ebx
c0007f15:	73 13                	jae    c0007f2a <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c0007f17:	6a 00                	push   0x0
c0007f19:	8d 70 01             	lea    esi,[eax+0x1]
c0007f1c:	50                   	push   eax
c0007f1d:	e8 d8 fd ff ff       	call   c0007cfa <Phys::setPageState(unsigned long, bool)>
c0007f22:	5a                   	pop    edx
c0007f23:	89 f0                	mov    eax,esi
c0007f25:	59                   	pop    ecx
c0007f26:	39 f3                	cmp    ebx,esi
c0007f28:	75 ed                	jne    c0007f17 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c0007f2a:	5b                   	pop    ebx
c0007f2b:	5e                   	pop    esi
c0007f2c:	c3                   	ret    

c0007f2d <Phys::physicalMemorySetup(unsigned int)>:
c0007f2d:	55                   	push   ebp
c0007f2e:	57                   	push   edi
c0007f2f:	56                   	push   esi
c0007f30:	53                   	push   ebx
c0007f31:	83 ec 40             	sub    esp,0x40
c0007f34:	6a 10                	push   0x10
c0007f36:	6a 00                	push   0x0
c0007f38:	68 ec 5e 02 c0       	push   0xc0025eec
c0007f3d:	e8 ae 85 ff ff       	call   c00004f0 <memset>
c0007f42:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0007f46:	25 00 f0 ff ff       	and    eax,0xfffff000
c0007f4b:	05 00 10 00 00       	add    eax,0x1000
c0007f50:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0007f54:	5b                   	pop    ebx
c0007f55:	31 db                	xor    ebx,ebx
c0007f57:	5e                   	pop    esi
c0007f58:	50                   	push   eax
c0007f59:	68 a7 07 02 c0       	push   0xc00207a7
c0007f5e:	e8 e2 29 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0007f63:	83 c4 10             	add    esp,0x10
c0007f66:	83 ec 08             	sub    esp,0x8
c0007f69:	6a 01                	push   0x1
c0007f6b:	53                   	push   ebx
c0007f6c:	83 c3 01             	add    ebx,0x1
c0007f6f:	e8 86 fd ff ff       	call   c0007cfa <Phys::setPageState(unsigned long, bool)>
c0007f74:	83 c4 10             	add    esp,0x10
c0007f77:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c0007f7d:	75 e7                	jne    c0007f66 <Phys::physicalMemorySetup(unsigned int)+0x39>
c0007f7f:	0f b6 05 14 05 00 c2 	movzx  eax,BYTE PTR ds:0xc2000514
c0007f86:	0f b6 15 13 05 00 c2 	movzx  edx,BYTE PTR ds:0xc2000513
c0007f8d:	c1 e0 08             	shl    eax,0x8
c0007f90:	09 c2                	or     edx,eax
c0007f92:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0007f96:	0f 84 98 01 00 00    	je     c0008134 <Phys::physicalMemorySetup(unsigned int)+0x207>
c0007f9c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0007fa0:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0007fa8:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c0007fad:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007fb1:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0007fb9:	eb 1c                	jmp    c0007fd7 <Phys::physicalMemorySetup(unsigned int)+0xaa>
c0007fbb:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0007fbf:	83 c3 18             	add    ebx,0x18
c0007fc2:	83 c6 01             	add    esi,0x1
c0007fc5:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0007fc9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0007fcd:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c0007fd1:	0f 84 6d 01 00 00    	je     c0008144 <Phys::physicalMemorySetup(unsigned int)+0x217>
c0007fd7:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0007fda:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0007fdd:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0007fe0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007fe4:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0007fe8:	8b 33                	mov    esi,DWORD PTR [ebx]
c0007fea:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c0007fed:	01 f0                	add    eax,esi
c0007fef:	55                   	push   ebp
c0007ff0:	11 fa                	adc    edx,edi
c0007ff2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0007ff6:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0007ffa:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007ffe:	51                   	push   ecx
c0007fff:	56                   	push   esi
c0008000:	68 44 07 02 c0       	push   0xc0020744
c0008005:	e8 3b 29 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000800a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000800e:	83 c4 10             	add    esp,0x10
c0008011:	09 f8                	or     eax,edi
c0008013:	0f 85 2b 01 00 00    	jne    c0008144 <Phys::physicalMemorySetup(unsigned int)+0x217>
c0008019:	83 fd 01             	cmp    ebp,0x1
c000801c:	75 9d                	jne    c0007fbb <Phys::physicalMemorySetup(unsigned int)+0x8e>
c000801e:	ba 00 00 08 00       	mov    edx,0x80000
c0008023:	89 c1                	mov    ecx,eax
c0008025:	39 f2                	cmp    edx,esi
c0008027:	19 f9                	sbb    ecx,edi
c0008029:	0f 82 ab 00 00 00    	jb     c00080da <Phys::physicalMemorySetup(unsigned int)+0x1ad>
c000802f:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c0008033:	89 c1                	mov    ecx,eax
c0008035:	1b 4c 24 0c          	sbb    ecx,DWORD PTR [esp+0xc]
c0008039:	0f 83 9b 00 00 00    	jae    c00080da <Phys::physicalMemorySetup(unsigned int)+0x1ad>
c000803f:	ba 00 00 0a 00       	mov    edx,0xa0000
c0008044:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0008048:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000804c:	39 fa                	cmp    edx,edi
c000804e:	19 e8                	sbb    eax,ebp
c0008050:	0f 82 b0 01 00 00    	jb     c0008206 <Phys::physicalMemorySetup(unsigned int)+0x2d9>
c0008056:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000805a:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000805e:	81 c7 00 00 f8 ff    	add    edi,0xfff80000
c0008064:	ba ff 1f 00 00       	mov    edx,0x1fff
c0008069:	83 d5 ff             	adc    ebp,0xffffffff
c000806c:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c0008070:	31 c0                	xor    eax,eax
c0008072:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c0008076:	39 fa                	cmp    edx,edi
c0008078:	89 c1                	mov    ecx,eax
c000807a:	19 e9                	sbb    ecx,ebp
c000807c:	0f 83 39 ff ff ff    	jae    c0007fbb <Phys::physicalMemorySetup(unsigned int)+0x8e>
c0008082:	be 00 00 08 00       	mov    esi,0x80000
c0008087:	83 ec 04             	sub    esp,0x4
c000808a:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000808e:	57                   	push   edi
c000808f:	56                   	push   esi
c0008090:	68 68 07 02 c0       	push   0xc0020768
c0008095:	e8 ab 28 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000809a:	5d                   	pop    ebp
c000809b:	58                   	pop    eax
c000809c:	57                   	push   edi
c000809d:	56                   	push   esi
c000809e:	e8 52 fe ff ff       	call   c0007ef5 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c00080a3:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00080a7:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00080ab:	83 c4 0c             	add    esp,0xc
c00080ae:	0f ac d0 0c          	shrd   eax,edx,0xc
c00080b2:	8b 15 e8 5e 02 c0    	mov    edx,DWORD PTR ds:0xc0025ee8
c00080b8:	01 d0                	add    eax,edx
c00080ba:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c00080c1:	a3 e8 5e 02 c0       	mov    ds:0xc0025ee8,eax
c00080c6:	52                   	push   edx
c00080c7:	50                   	push   eax
c00080c8:	68 cd 07 02 c0       	push   0xc00207cd
c00080cd:	e8 73 28 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c00080d2:	83 c4 10             	add    esp,0x10
c00080d5:	e9 e1 fe ff ff       	jmp    c0007fbb <Phys::physicalMemorySetup(unsigned int)+0x8e>
c00080da:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c00080de:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00080e2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00080e6:	39 ea                	cmp    edx,ebp
c00080e8:	1b 4c 24 2c          	sbb    ecx,DWORD PTR [esp+0x2c]
c00080ec:	0f 82 c9 fe ff ff    	jb     c0007fbb <Phys::physicalMemorySetup(unsigned int)+0x8e>
c00080f2:	ba ff 1f 00 00       	mov    edx,0x1fff
c00080f7:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c00080fb:	1b 44 24 1c          	sbb    eax,DWORD PTR [esp+0x1c]
c00080ff:	0f 83 b6 fe ff ff    	jae    c0007fbb <Phys::physicalMemorySetup(unsigned int)+0x8e>
c0008105:	39 ee                	cmp    esi,ebp
c0008107:	89 f8                	mov    eax,edi
c0008109:	1b 44 24 2c          	sbb    eax,DWORD PTR [esp+0x2c]
c000810d:	0f 83 74 ff ff ff    	jae    c0008087 <Phys::physicalMemorySetup(unsigned int)+0x15a>
c0008113:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0008117:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000811b:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c000811f:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008123:	1b 54 24 2c          	sbb    edx,DWORD PTR [esp+0x2c]
c0008127:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000812b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000812f:	e9 53 ff ff ff       	jmp    c0008087 <Phys::physicalMemorySetup(unsigned int)+0x15a>
c0008134:	83 ec 0c             	sub    esp,0xc
c0008137:	68 bf 07 02 c0       	push   0xc00207bf
c000813c:	e8 ac 90 00 00       	call   c00111ed <KePanic(char const*)>
c0008141:	83 c4 10             	add    esp,0x10
c0008144:	83 ec 08             	sub    esp,0x8
c0008147:	bb 60 00 00 00       	mov    ebx,0x60
c000814c:	6a 00                	push   0x0
c000814e:	6a 06                	push   0x6
c0008150:	e8 a5 fb ff ff       	call   c0007cfa <Phys::setPageState(unsigned long, bool)>
c0008155:	58                   	pop    eax
c0008156:	5a                   	pop    edx
c0008157:	6a 00                	push   0x0
c0008159:	6a 07                	push   0x7
c000815b:	e8 9a fb ff ff       	call   c0007cfa <Phys::setPageState(unsigned long, bool)>
c0008160:	8b 0d e8 5e 02 c0    	mov    ecx,DWORD PTR ds:0xc0025ee8
c0008166:	83 c4 10             	add    esp,0x10
c0008169:	83 c1 02             	add    ecx,0x2
c000816c:	89 0d e8 5e 02 c0    	mov    DWORD PTR ds:0xc0025ee8,ecx
c0008172:	83 ec 08             	sub    esp,0x8
c0008175:	6a 00                	push   0x0
c0008177:	53                   	push   ebx
c0008178:	83 c3 01             	add    ebx,0x1
c000817b:	e8 7a fb ff ff       	call   c0007cfa <Phys::setPageState(unsigned long, bool)>
c0008180:	83 c4 10             	add    esp,0x10
c0008183:	81 fb 80 00 00 00    	cmp    ebx,0x80
c0008189:	75 e7                	jne    c0008172 <Phys::physicalMemorySetup(unsigned int)+0x245>
c000818b:	a1 e8 5e 02 c0       	mov    eax,ds:0xc0025ee8
c0008190:	bb 40 01 00 00       	mov    ebx,0x140
c0008195:	83 c0 20             	add    eax,0x20
c0008198:	a3 e8 5e 02 c0       	mov    ds:0xc0025ee8,eax
c000819d:	eb 26                	jmp    c00081c5 <Phys::physicalMemorySetup(unsigned int)+0x298>
c000819f:	83 ec 08             	sub    esp,0x8
c00081a2:	6a 00                	push   0x0
c00081a4:	53                   	push   ebx
c00081a5:	83 c3 01             	add    ebx,0x1
c00081a8:	e8 4d fb ff ff       	call   c0007cfa <Phys::setPageState(unsigned long, bool)>
c00081ad:	a1 e8 5e 02 c0       	mov    eax,ds:0xc0025ee8
c00081b2:	83 c4 10             	add    esp,0x10
c00081b5:	83 c0 01             	add    eax,0x1
c00081b8:	81 fb c0 01 00 00    	cmp    ebx,0x1c0
c00081be:	a3 e8 5e 02 c0       	mov    ds:0xc0025ee8,eax
c00081c3:	74 07                	je     c00081cc <Phys::physicalMemorySetup(unsigned int)+0x29f>
c00081c5:	3d ff 03 00 00       	cmp    eax,0x3ff
c00081ca:	7e d3                	jle    c000819f <Phys::physicalMemorySetup(unsigned int)+0x272>
c00081cc:	bb d0 01 00 00       	mov    ebx,0x1d0
c00081d1:	3d ff 07 00 00       	cmp    eax,0x7ff
c00081d6:	7f 26                	jg     c00081fe <Phys::physicalMemorySetup(unsigned int)+0x2d1>
c00081d8:	83 ec 08             	sub    esp,0x8
c00081db:	6a 00                	push   0x0
c00081dd:	53                   	push   ebx
c00081de:	83 c3 01             	add    ebx,0x1
c00081e1:	e8 14 fb ff ff       	call   c0007cfa <Phys::setPageState(unsigned long, bool)>
c00081e6:	a1 e8 5e 02 c0       	mov    eax,ds:0xc0025ee8
c00081eb:	83 c4 10             	add    esp,0x10
c00081ee:	83 c0 01             	add    eax,0x1
c00081f1:	81 fb e0 01 00 00    	cmp    ebx,0x1e0
c00081f7:	a3 e8 5e 02 c0       	mov    ds:0xc0025ee8,eax
c00081fc:	75 d3                	jne    c00081d1 <Phys::physicalMemorySetup(unsigned int)+0x2a4>
c00081fe:	83 c4 3c             	add    esp,0x3c
c0008201:	5b                   	pop    ebx
c0008202:	5e                   	pop    esi
c0008203:	5f                   	pop    edi
c0008204:	5d                   	pop    ebp
c0008205:	c3                   	ret    
c0008206:	c7 44 24 08 00 00 0a 00 	mov    DWORD PTR [esp+0x8],0xa0000
c000820e:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0008216:	e9 3b fe ff ff       	jmp    c0008056 <Phys::physicalMemorySetup(unsigned int)+0x129>
c000821b:	90                   	nop

c000821c <Pipe::isAtty()>:
c000821c:	31 c0                	xor    eax,eax
c000821e:	c3                   	ret    
c000821f:	90                   	nop

c0008220 <Pipe::~Pipe()>:
c0008220:	83 ec 0c             	sub    esp,0xc
c0008223:	ba 2c 08 02 c0       	mov    edx,0xc002082c
c0008228:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000822c:	89 10                	mov    DWORD PTR [eax],edx
c000822e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008232:	83 ec 0c             	sub    esp,0xc
c0008235:	50                   	push   eax
c0008236:	e8 69 11 00 00       	call   c00093a4 <UnixFile::~UnixFile()>
c000823b:	83 c4 10             	add    esp,0x10
c000823e:	90                   	nop
c000823f:	83 c4 0c             	add    esp,0xc
c0008242:	c3                   	ret    
c0008243:	90                   	nop

c0008244 <Pipe::~Pipe()>:
c0008244:	83 ec 0c             	sub    esp,0xc
c0008247:	83 ec 0c             	sub    esp,0xc
c000824a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000824e:	e8 cd ff ff ff       	call   c0008220 <Pipe::~Pipe()>
c0008253:	83 c4 10             	add    esp,0x10
c0008256:	83 ec 08             	sub    esp,0x8
c0008259:	6a 20                	push   0x20
c000825b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000825f:	e8 b4 25 00 00       	call   c000a818 <operator delete(void*, unsigned long)>
c0008264:	83 c4 10             	add    esp,0x10
c0008267:	83 c4 0c             	add    esp,0xc
c000826a:	c3                   	ret    
c000826b:	90                   	nop

c000826c <Pipe::write(unsigned long long, void*, int*)>:
c000826c:	55                   	push   ebp
c000826d:	57                   	push   edi
c000826e:	56                   	push   esi
c000826f:	53                   	push   ebx
c0008270:	83 ec 1c             	sub    esp,0x1c
c0008273:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0008277:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000827b:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c000827e:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0008282:	89 04 24             	mov    DWORD PTR [esp],eax
c0008285:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0008289:	89 d8                	mov    eax,ebx
c000828b:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c000828e:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0008292:	89 d6                	mov    esi,edx
c0008294:	89 d7                	mov    edi,edx
c0008296:	c1 ff 1f             	sar    edi,0x1f
c0008299:	03 34 24             	add    esi,DWORD PTR [esp]
c000829c:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c00082a0:	c1 f8 1f             	sar    eax,0x1f
c00082a3:	39 f3                	cmp    ebx,esi
c00082a5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00082a9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00082ad:	19 f8                	sbb    eax,edi
c00082af:	b8 01 00 00 00       	mov    eax,0x1
c00082b4:	72 6e                	jb     c0008324 <Pipe::write(unsigned long long, void*, int*)+0xb8>
c00082b6:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00082b9:	01 d0                	add    eax,edx
c00082bb:	99                   	cdq    
c00082bc:	f7 fb                	idiv   ebx
c00082be:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00082c2:	29 d3                	sub    ebx,edx
c00082c4:	89 d7                	mov    edi,edx
c00082c6:	89 de                	mov    esi,ebx
c00082c8:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00082cb:	c1 fb 1f             	sar    ebx,0x1f
c00082ce:	39 f2                	cmp    edx,esi
c00082d0:	19 d8                	sbb    eax,ebx
c00082d2:	b8 00 00 00 00       	mov    eax,0x0
c00082d7:	72 04                	jb     c00082dd <Pipe::write(unsigned long long, void*, int*)+0x71>
c00082d9:	89 d0                	mov    eax,edx
c00082db:	29 f0                	sub    eax,esi
c00082dd:	89 d3                	mov    ebx,edx
c00082df:	29 c3                	sub    ebx,eax
c00082e1:	74 0b                	je     c00082ee <Pipe::write(unsigned long long, void*, int*)+0x82>
c00082e3:	03 7d 0c             	add    edi,DWORD PTR [ebp+0xc]
c00082e6:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c00082ea:	89 d9                	mov    ecx,ebx
c00082ec:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00082ee:	85 c0                	test   eax,eax
c00082f0:	74 0d                	je     c00082ff <Pipe::write(unsigned long long, void*, int*)+0x93>
c00082f2:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c00082f6:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c00082f9:	89 de                	mov    esi,ebx
c00082fb:	89 c1                	mov    ecx,eax
c00082fd:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00082ff:	01 55 14             	add    DWORD PTR [ebp+0x14],edx
c0008302:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0008307:	75 10                	jne    c0008319 <Pipe::write(unsigned long long, void*, int*)+0xad>
c0008309:	83 ec 0c             	sub    esp,0xc
c000830c:	68 e9 07 02 c0       	push   0xc00207e9
c0008311:	e8 d7 8e 00 00       	call   c00111ed <KePanic(char const*)>
c0008316:	83 c4 10             	add    esp,0x10
c0008319:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000831d:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0008320:	89 08                	mov    DWORD PTR [eax],ecx
c0008322:	31 c0                	xor    eax,eax
c0008324:	83 c4 1c             	add    esp,0x1c
c0008327:	5b                   	pop    ebx
c0008328:	5e                   	pop    esi
c0008329:	5f                   	pop    edi
c000832a:	5d                   	pop    ebp
c000832b:	c3                   	ret    

c000832c <Pipe::read(unsigned long long, void*, int*)>:
c000832c:	55                   	push   ebp
c000832d:	57                   	push   edi
c000832e:	56                   	push   esi
c000832f:	53                   	push   ebx
c0008330:	83 ec 1c             	sub    esp,0x1c
c0008333:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0008337:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000833b:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000833f:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0008342:	89 c8                	mov    eax,ecx
c0008344:	99                   	cdq    
c0008345:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c0008349:	74 24                	je     c000836f <Pipe::read(unsigned long long, void*, int*)+0x43>
c000834b:	39 f9                	cmp    ecx,edi
c000834d:	89 d1                	mov    ecx,edx
c000834f:	19 f1                	sbb    ecx,esi
c0008351:	73 1c                	jae    c000836f <Pipe::read(unsigned long long, void*, int*)+0x43>
c0008353:	fa                   	cli    
c0008354:	ff 05 68 a4 02 c0    	inc    DWORD PTR ds:0xc002a468
c000835a:	e8 4d d7 00 00       	call   c0015aac <schedule()>
c000835f:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c0008364:	48                   	dec    eax
c0008365:	a3 68 a4 02 c0       	mov    ds:0xc002a468,eax
c000836a:	75 d3                	jne    c000833f <Pipe::read(unsigned long long, void*, int*)+0x13>
c000836c:	fb                   	sti    
c000836d:	eb d0                	jmp    c000833f <Pipe::read(unsigned long long, void*, int*)+0x13>
c000836f:	39 f8                	cmp    eax,edi
c0008371:	89 d1                	mov    ecx,edx
c0008373:	89 3c 24             	mov    DWORD PTR [esp],edi
c0008376:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c000837a:	19 f1                	sbb    ecx,esi
c000837c:	73 07                	jae    c0008385 <Pipe::read(unsigned long long, void*, int*)+0x59>
c000837e:	89 04 24             	mov    DWORD PTR [esp],eax
c0008381:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0008385:	8b 73 10             	mov    esi,DWORD PTR [ebx+0x10]
c0008388:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c000838b:	29 f7                	sub    edi,esi
c000838d:	89 f8                	mov    eax,edi
c000838f:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0008393:	99                   	cdq    
c0008394:	39 3c 24             	cmp    DWORD PTR [esp],edi
c0008397:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000839b:	19 d0                	sbb    eax,edx
c000839d:	73 07                	jae    c00083a6 <Pipe::read(unsigned long long, void*, int*)+0x7a>
c000839f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00083a2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00083a6:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c00083a9:	89 ea                	mov    edx,ebp
c00083ab:	2b 54 24 0c          	sub    edx,DWORD PTR [esp+0xc]
c00083af:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00083b4:	74 0d                	je     c00083c3 <Pipe::read(unsigned long long, void*, int*)+0x97>
c00083b6:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c00083b9:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c00083bd:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00083c1:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00083c3:	85 d2                	test   edx,edx
c00083c5:	74 11                	je     c00083d8 <Pipe::read(unsigned long long, void*, int*)+0xac>
c00083c7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00083cb:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c00083ce:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c00083d2:	89 d1                	mov    ecx,edx
c00083d4:	89 c7                	mov    edi,eax
c00083d6:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00083d8:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00083db:	29 6b 14             	sub    DWORD PTR [ebx+0x14],ebp
c00083de:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c00083e1:	99                   	cdq    
c00083e2:	89 f7                	mov    edi,esi
c00083e4:	03 04 24             	add    eax,DWORD PTR [esp]
c00083e7:	13 54 24 04          	adc    edx,DWORD PTR [esp+0x4]
c00083eb:	c1 ff 1f             	sar    edi,0x1f
c00083ee:	57                   	push   edi
c00083ef:	56                   	push   esi
c00083f0:	52                   	push   edx
c00083f1:	50                   	push   eax
c00083f2:	e8 29 6e 01 00       	call   c001f220 <__umoddi3>
c00083f7:	83 c4 10             	add    esp,0x10
c00083fa:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c00083fd:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0008402:	75 10                	jne    c0008414 <Pipe::read(unsigned long long, void*, int*)+0xe8>
c0008404:	83 ec 0c             	sub    esp,0xc
c0008407:	68 06 08 02 c0       	push   0xc0020806
c000840c:	e8 dc 8d 00 00       	call   c00111ed <KePanic(char const*)>
c0008411:	83 c4 10             	add    esp,0x10
c0008414:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0008418:	8b 14 24             	mov    edx,DWORD PTR [esp]
c000841b:	89 10                	mov    DWORD PTR [eax],edx
c000841d:	83 c4 1c             	add    esp,0x1c
c0008420:	31 c0                	xor    eax,eax
c0008422:	5b                   	pop    ebx
c0008423:	5e                   	pop    esi
c0008424:	5f                   	pop    edi
c0008425:	5d                   	pop    ebp
c0008426:	c3                   	ret    
c0008427:	90                   	nop

c0008428 <Pipe::Pipe(int)>:
c0008428:	83 ec 0c             	sub    esp,0xc
c000842b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000842f:	83 ec 08             	sub    esp,0x8
c0008432:	6a 00                	push   0x0
c0008434:	50                   	push   eax
c0008435:	e8 84 0d 00 00       	call   c00091be <UnixFile::UnixFile(int)>
c000843a:	83 c4 10             	add    esp,0x10
c000843d:	ba 2c 08 02 c0       	mov    edx,0xc002082c
c0008442:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008446:	89 10                	mov    DWORD PTR [eax],edx
c0008448:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000844c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0008450:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0008453:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008457:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c000845e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008462:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c0008469:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000846d:	83 ec 0c             	sub    esp,0xc
c0008470:	50                   	push   eax
c0008471:	e8 40 f6 ff ff       	call   c0007ab6 <malloc>
c0008476:	83 c4 10             	add    esp,0x10
c0008479:	89 c2                	mov    edx,eax
c000847b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000847f:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0008482:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008486:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c000848a:	90                   	nop
c000848b:	83 c4 0c             	add    esp,0xc
c000848e:	c3                   	ret    
c000848f:	90                   	nop

c0008490 <VgaText::isAtty()>:
c0008490:	b0 01                	mov    al,0x1
c0008492:	c3                   	ret    
c0008493:	90                   	nop

c0008494 <VgaText::~VgaText()>:
c0008494:	83 ec 0c             	sub    esp,0xc
c0008497:	ba 74 08 02 c0       	mov    edx,0xc0020874
c000849c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00084a0:	89 10                	mov    DWORD PTR [eax],edx
c00084a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00084a6:	83 ec 0c             	sub    esp,0xc
c00084a9:	50                   	push   eax
c00084aa:	e8 f5 0e 00 00       	call   c00093a4 <UnixFile::~UnixFile()>
c00084af:	83 c4 10             	add    esp,0x10
c00084b2:	90                   	nop
c00084b3:	83 c4 0c             	add    esp,0xc
c00084b6:	c3                   	ret    
c00084b7:	90                   	nop

c00084b8 <VgaText::~VgaText()>:
c00084b8:	83 ec 0c             	sub    esp,0xc
c00084bb:	83 ec 0c             	sub    esp,0xc
c00084be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00084c2:	e8 cd ff ff ff       	call   c0008494 <VgaText::~VgaText()>
c00084c7:	83 c4 10             	add    esp,0x10
c00084ca:	83 ec 08             	sub    esp,0x8
c00084cd:	68 84 01 00 00       	push   0x184
c00084d2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00084d6:	e8 3d 23 00 00       	call   c000a818 <operator delete(void*, unsigned long)>
c00084db:	83 c4 10             	add    esp,0x10
c00084de:	83 c4 0c             	add    esp,0xc
c00084e1:	c3                   	ret    

c00084e2 <VgaText::read(unsigned long long, void*, int*)>:
c00084e2:	83 ec 10             	sub    esp,0x10
c00084e5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00084e9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00084ed:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00084f1:	e8 c6 4f 00 00       	call   c000d4bc <readKeyboard(VgaText*, char*, unsigned long)>
c00084f6:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00084fa:	89 02                	mov    DWORD PTR [edx],eax
c00084fc:	31 c0                	xor    eax,eax
c00084fe:	83 c4 1c             	add    esp,0x1c
c0008501:	c3                   	ret    

c0008502 <setTerminalScrollLock(bool)>:
c0008502:	c3                   	ret    

c0008503 <doTerminalCycle()>:
c0008503:	c3                   	ret    

c0008504 <addToTerminalCycle(VgaText*)>:
c0008504:	c3                   	ret    

c0008505 <scrollTerminalScrollLock(int)>:
c0008505:	c3                   	ret    

c0008506 <VgaText::updateTitle()>:
c0008506:	c3                   	ret    
c0008507:	90                   	nop

c0008508 <VgaText::load()>:
c0008508:	c3                   	ret    
c0008509:	90                   	nop

c000850a <VgaText::updateCursor()>:
c000850a:	83 ec 14             	sub    esp,0x14
c000850d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0008511:	ff 70 18             	push   DWORD PTR [eax+0x18]
c0008514:	ff 70 14             	push   DWORD PTR [eax+0x14]
c0008517:	e8 48 03 01 00       	call   c0018864 <HalConsoleCursorUpdate(int, int)>
c000851c:	83 c4 1c             	add    esp,0x1c
c000851f:	c3                   	ret    

c0008520 <VgaText::doANSI_SGR(int)>:
c0008520:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0008524:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008528:	85 d2                	test   edx,edx
c000852a:	75 0b                	jne    c0008537 <VgaText::doANSI_SGR(int)+0x17>
c000852c:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c000852f:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0008532:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0008535:	eb 59                	jmp    c0008590 <VgaText::doANSI_SGR(int)+0x70>
c0008537:	83 fa 07             	cmp    edx,0x7
c000853a:	75 0b                	jne    c0008547 <VgaText::doANSI_SGR(int)+0x27>
c000853c:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c000853f:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c0008542:	89 48 34             	mov    DWORD PTR [eax+0x34],ecx
c0008545:	eb 49                	jmp    c0008590 <VgaText::doANSI_SGR(int)+0x70>
c0008547:	83 fa 1b             	cmp    edx,0x1b
c000854a:	74 e0                	je     c000852c <VgaText::doANSI_SGR(int)+0xc>
c000854c:	8d 4a e2             	lea    ecx,[edx-0x1e]
c000854f:	83 f9 07             	cmp    ecx,0x7
c0008552:	77 09                	ja     c000855d <VgaText::doANSI_SGR(int)+0x3d>
c0008554:	8b 14 8d e0 2e 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffdd120]
c000855b:	eb 20                	jmp    c000857d <VgaText::doANSI_SGR(int)+0x5d>
c000855d:	8d 4a d8             	lea    ecx,[edx-0x28]
c0008560:	83 f9 07             	cmp    ecx,0x7
c0008563:	77 09                	ja     c000856e <VgaText::doANSI_SGR(int)+0x4e>
c0008565:	8b 14 8d e0 2e 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffdd120]
c000856c:	eb 22                	jmp    c0008590 <VgaText::doANSI_SGR(int)+0x70>
c000856e:	8d 4a a6             	lea    ecx,[edx-0x5a]
c0008571:	83 f9 07             	cmp    ecx,0x7
c0008574:	77 0b                	ja     c0008581 <VgaText::doANSI_SGR(int)+0x61>
c0008576:	8b 14 95 98 2d 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdd268]
c000857d:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0008580:	c3                   	ret    
c0008581:	8d 4a 9c             	lea    ecx,[edx-0x64]
c0008584:	83 f9 07             	cmp    ecx,0x7
c0008587:	77 0a                	ja     c0008593 <VgaText::doANSI_SGR(int)+0x73>
c0008589:	8b 14 95 70 2d 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdd290]
c0008590:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c0008593:	c3                   	ret    

c0008594 <VgaText::setDefaultBgColour(VgaColour)>:
c0008594:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008598:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000859c:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c000859f:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c00085a2:	c3                   	ret    
c00085a3:	90                   	nop

c00085a4 <VgaText::setDefaultFgColour(VgaColour)>:
c00085a4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00085a8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00085ac:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c00085af:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c00085b2:	c3                   	ret    
c00085b3:	90                   	nop

c00085b4 <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c00085b4:	53                   	push   ebx
c00085b5:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00085b9:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00085bd:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00085c1:	51                   	push   ecx
c00085c2:	e8 cd ff ff ff       	call   c0008594 <VgaText::setDefaultBgColour(VgaColour)>
c00085c7:	58                   	pop    eax
c00085c8:	5a                   	pop    edx
c00085c9:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c00085cd:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00085d1:	5b                   	pop    ebx
c00085d2:	eb d0                	jmp    c00085a4 <VgaText::setDefaultFgColour(VgaColour)>

c00085d4 <VgaText::setTitleTextColour(VgaColour)>:
c00085d4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00085d8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00085dc:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c00085df:	c3                   	ret    

c00085e0 <VgaText::setTitleColour(VgaColour)>:
c00085e0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00085e4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00085e8:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00085eb:	c3                   	ret    

c00085ec <VgaText::setTitle(char*)>:
c00085ec:	c3                   	ret    
c00085ed:	90                   	nop

c00085ee <VgaText::combineColours(unsigned char, unsigned char)>:
c00085ee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00085f2:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c00085f7:	83 e0 0f             	and    eax,0xf
c00085fa:	c1 e2 04             	shl    edx,0x4
c00085fd:	09 d0                	or     eax,edx
c00085ff:	c3                   	ret    

c0008600 <VgaText::scrollScreen()>:
c0008600:	55                   	push   ebp
c0008601:	57                   	push   edi
c0008602:	56                   	push   esi
c0008603:	be 01 00 00 00       	mov    esi,0x1
c0008608:	53                   	push   ebx
c0008609:	83 ec 0c             	sub    esp,0xc
c000860c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008610:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c0008613:	69 ce a0 00 00 00    	imul   ecx,esi,0xa0
c0008619:	31 ff                	xor    edi,edi
c000861b:	01 e9                	add    ecx,ebp
c000861d:	8a 01                	mov    al,BYTE PTR [ecx]
c000861f:	83 fe 18             	cmp    esi,0x18
c0008622:	88 81 60 ff ff ff    	mov    BYTE PTR [ecx-0xa0],al
c0008628:	75 20                	jne    c000864a <VgaText::scrollScreen()+0x4a>
c000862a:	f7 c7 01 00 00 00    	test   edi,0x1
c0008630:	74 15                	je     c0008647 <VgaText::scrollScreen()+0x47>
c0008632:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c0008636:	50                   	push   eax
c0008637:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c000863b:	50                   	push   eax
c000863c:	e8 ad ff ff ff       	call   c00085ee <VgaText::combineColours(unsigned char, unsigned char)>
c0008641:	5a                   	pop    edx
c0008642:	5a                   	pop    edx
c0008643:	88 01                	mov    BYTE PTR [ecx],al
c0008645:	eb 03                	jmp    c000864a <VgaText::scrollScreen()+0x4a>
c0008647:	c6 01 20             	mov    BYTE PTR [ecx],0x20
c000864a:	47                   	inc    edi
c000864b:	41                   	inc    ecx
c000864c:	81 ff a0 00 00 00    	cmp    edi,0xa0
c0008652:	75 c9                	jne    c000861d <VgaText::scrollScreen()+0x1d>
c0008654:	46                   	inc    esi
c0008655:	83 fe 19             	cmp    esi,0x19
c0008658:	75 b9                	jne    c0008613 <VgaText::scrollScreen()+0x13>
c000865a:	39 1d 04 5f 02 c0    	cmp    DWORD PTR ds:0xc0025f04,ebx
c0008660:	75 1f                	jne    c0008681 <VgaText::scrollScreen()+0x81>
c0008662:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c0008666:	74 05                	je     c000866d <VgaText::scrollScreen()+0x6d>
c0008668:	ff 4b 5c             	dec    DWORD PTR [ebx+0x5c]
c000866b:	eb 14                	jmp    c0008681 <VgaText::scrollScreen()+0x81>
c000866d:	50                   	push   eax
c000866e:	50                   	push   eax
c000866f:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c0008673:	50                   	push   eax
c0008674:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c0008678:	50                   	push   eax
c0008679:	e8 7a 00 01 00       	call   c00186f8 <HalConsoleScroll(int, int)>
c000867e:	83 c4 10             	add    esp,0x10
c0008681:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0008685:	83 c4 0c             	add    esp,0xc
c0008688:	5b                   	pop    ebx
c0008689:	5e                   	pop    esi
c000868a:	5f                   	pop    edi
c000868b:	5d                   	pop    ebp
c000868c:	e9 79 fe ff ff       	jmp    c000850a <VgaText::updateCursor()>
c0008691:	90                   	nop

c0008692 <VgaText::combineCharAndColour(char, unsigned char)>:
c0008692:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0008697:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c000869c:	c1 e0 08             	shl    eax,0x8
c000869f:	09 d0                	or     eax,edx
c00086a1:	c3                   	ret    

c00086a2 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c00086a2:	55                   	push   ebp
c00086a3:	57                   	push   edi
c00086a4:	56                   	push   esi
c00086a5:	53                   	push   ebx
c00086a6:	83 ec 1c             	sub    esp,0x1c
c00086a9:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00086ad:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00086b1:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c00086b5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00086b9:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c00086bd:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c00086c1:	0f b6 c3             	movzx  eax,bl
c00086c4:	50                   	push   eax
c00086c5:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c00086ca:	50                   	push   eax
c00086cb:	e8 1e ff ff ff       	call   c00085ee <VgaText::combineColours(unsigned char, unsigned char)>
c00086d0:	5a                   	pop    edx
c00086d1:	0f b6 c0             	movzx  eax,al
c00086d4:	59                   	pop    ecx
c00086d5:	0f be 4c 24 34       	movsx  ecx,BYTE PTR [esp+0x34]
c00086da:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00086de:	50                   	push   eax
c00086df:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00086e3:	e8 aa ff ff ff       	call   c0008692 <VgaText::combineCharAndColour(char, unsigned char)>
c00086e8:	5a                   	pop    edx
c00086e9:	6b d7 50             	imul   edx,edi,0x50
c00086ec:	59                   	pop    ecx
c00086ed:	01 f2                	add    edx,esi
c00086ef:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00086f2:	0f b7 d2             	movzx  edx,dx
c00086f5:	66 89 04 51          	mov    WORD PTR [ecx+edx*2],ax
c00086f9:	39 2d 04 5f 02 c0    	cmp    DWORD PTR ds:0xc0025f04,ebp
c00086ff:	75 28                	jne    c0008729 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x87>
c0008701:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008705:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c0008709:	89 74 24 3c          	mov    DWORD PTR [esp+0x3c],esi
c000870d:	89 5c 24 38          	mov    DWORD PTR [esp+0x38],ebx
c0008711:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0008715:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0008719:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000871d:	83 c4 1c             	add    esp,0x1c
c0008720:	5b                   	pop    ebx
c0008721:	5e                   	pop    esi
c0008722:	5f                   	pop    edi
c0008723:	5d                   	pop    ebp
c0008724:	e9 d7 00 01 00       	jmp    c0018800 <HalConsoleWriteCharacter(char, int, int, int, int)>
c0008729:	83 c4 1c             	add    esp,0x1c
c000872c:	5b                   	pop    ebx
c000872d:	5e                   	pop    esi
c000872e:	5f                   	pop    edi
c000872f:	5d                   	pop    ebp
c0008730:	c3                   	ret    
c0008731:	90                   	nop

c0008732 <VgaText::getCursorX()>:
c0008732:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008736:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0008739:	c3                   	ret    

c000873a <VgaText::getCursorY()>:
c000873a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000873e:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0008741:	c3                   	ret    

c0008742 <VgaText::setCursor(int, int)>:
c0008742:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008746:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000874a:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c000874d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0008751:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0008754:	e9 b1 fd ff ff       	jmp    c000850a <VgaText::updateCursor()>

c0008759 <setActiveTerminal(VgaText*)>:
c0008759:	53                   	push   ebx
c000875a:	83 ec 08             	sub    esp,0x8
c000875d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008761:	85 db                	test   ebx,ebx
c0008763:	75 11                	jne    c0008776 <setActiveTerminal(VgaText*)+0x1d>
c0008765:	c7 44 24 10 40 08 02 c0 	mov    DWORD PTR [esp+0x10],0xc0020840
c000876d:	83 c4 08             	add    esp,0x8
c0008770:	5b                   	pop    ebx
c0008771:	e9 77 8a 00 00       	jmp    c00111ed <KePanic(char const*)>
c0008776:	a1 04 5f 02 c0       	mov    eax,ds:0xc0025f04
c000877b:	85 c0                	test   eax,eax
c000877d:	74 0c                	je     c000878b <setActiveTerminal(VgaText*)+0x32>
c000877f:	83 ec 0c             	sub    esp,0xc
c0008782:	50                   	push   eax
c0008783:	e8 82 fd ff ff       	call   c000850a <VgaText::updateCursor()>
c0008788:	83 c4 10             	add    esp,0x10
c000878b:	89 1d 04 5f 02 c0    	mov    DWORD PTR ds:0xc0025f04,ebx
c0008791:	50                   	push   eax
c0008792:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0008795:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0008798:	53                   	push   ebx
c0008799:	e8 a4 ff ff ff       	call   c0008742 <VgaText::setCursor(int, int)>
c000879e:	83 c4 18             	add    esp,0x18
c00087a1:	5b                   	pop    ebx
c00087a2:	c3                   	ret    
c00087a3:	90                   	nop

c00087a4 <VgaText::clearScreen()>:
c00087a4:	57                   	push   edi
c00087a5:	56                   	push   esi
c00087a6:	31 f6                	xor    esi,esi
c00087a8:	53                   	push   ebx
c00087a9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00087ad:	52                   	push   edx
c00087ae:	6a 00                	push   0x0
c00087b0:	6a 00                	push   0x0
c00087b2:	53                   	push   ebx
c00087b3:	e8 8a ff ff ff       	call   c0008742 <VgaText::setCursor(int, int)>
c00087b8:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c00087bf:	83 c4 10             	add    esp,0x10
c00087c2:	39 73 10             	cmp    DWORD PTR [ebx+0x10],esi
c00087c5:	7e 20                	jle    c00087e7 <VgaText::clearScreen()+0x43>
c00087c7:	31 ff                	xor    edi,edi
c00087c9:	50                   	push   eax
c00087ca:	50                   	push   eax
c00087cb:	56                   	push   esi
c00087cc:	57                   	push   edi
c00087cd:	47                   	inc    edi
c00087ce:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00087d1:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c00087d4:	6a 20                	push   0x20
c00087d6:	53                   	push   ebx
c00087d7:	e8 c6 fe ff ff       	call   c00086a2 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c00087dc:	83 c4 20             	add    esp,0x20
c00087df:	83 ff 50             	cmp    edi,0x50
c00087e2:	75 e5                	jne    c00087c9 <VgaText::clearScreen()+0x25>
c00087e4:	46                   	inc    esi
c00087e5:	eb db                	jmp    c00087c2 <VgaText::clearScreen()+0x1e>
c00087e7:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c00087ee:	5b                   	pop    ebx
c00087ef:	5e                   	pop    esi
c00087f0:	5f                   	pop    edi
c00087f1:	c3                   	ret    

c00087f2 <VgaText::setCursorX(int)>:
c00087f2:	83 ec 10             	sub    esp,0x10
c00087f5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00087f9:	ff 70 18             	push   DWORD PTR [eax+0x18]
c00087fc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008800:	50                   	push   eax
c0008801:	e8 3c ff ff ff       	call   c0008742 <VgaText::setCursor(int, int)>
c0008806:	83 c4 1c             	add    esp,0x1c
c0008809:	c3                   	ret    

c000880a <VgaText::setCursorY(int)>:
c000880a:	83 ec 10             	sub    esp,0x10
c000880d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008811:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0008815:	ff 70 14             	push   DWORD PTR [eax+0x14]
c0008818:	50                   	push   eax
c0008819:	e8 24 ff ff ff       	call   c0008742 <VgaText::setCursor(int, int)>
c000881e:	83 c4 1c             	add    esp,0x1c
c0008821:	c3                   	ret    

c0008822 <VgaText::incrementCursor(bool)>:
c0008822:	56                   	push   esi
c0008823:	53                   	push   ebx
c0008824:	51                   	push   ecx
c0008825:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008829:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000882d:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0008830:	40                   	inc    eax
c0008831:	83 f8 50             	cmp    eax,0x50
c0008834:	74 05                	je     c000883b <VgaText::incrementCursor(bool)+0x19>
c0008836:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0008839:	eb 24                	jmp    c000885f <VgaText::incrementCursor(bool)+0x3d>
c000883b:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000883e:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008845:	8d 50 01             	lea    edx,[eax+0x1]
c0008848:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c000884b:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c000884e:	75 0f                	jne    c000885f <VgaText::incrementCursor(bool)+0x3d>
c0008850:	83 ec 0c             	sub    esp,0xc
c0008853:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0008856:	53                   	push   ebx
c0008857:	e8 a4 fd ff ff       	call   c0008600 <VgaText::scrollScreen()>
c000885c:	83 c4 10             	add    esp,0x10
c000885f:	89 f0                	mov    eax,esi
c0008861:	84 c0                	test   al,al
c0008863:	74 0c                	je     c0008871 <VgaText::incrementCursor(bool)+0x4f>
c0008865:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008869:	5a                   	pop    edx
c000886a:	5b                   	pop    ebx
c000886b:	5e                   	pop    esi
c000886c:	e9 99 fc ff ff       	jmp    c000850a <VgaText::updateCursor()>
c0008871:	58                   	pop    eax
c0008872:	5b                   	pop    ebx
c0008873:	5e                   	pop    esi
c0008874:	c3                   	ret    
c0008875:	90                   	nop

c0008876 <VgaText::decrementCursor(bool)>:
c0008876:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000887a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000887e:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0008881:	85 c0                	test   eax,eax
c0008883:	74 04                	je     c0008889 <VgaText::decrementCursor(bool)+0x13>
c0008885:	48                   	dec    eax
c0008886:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0008889:	84 c9                	test   cl,cl
c000888b:	74 09                	je     c0008896 <VgaText::decrementCursor(bool)+0x20>
c000888d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0008891:	e9 74 fc ff ff       	jmp    c000850a <VgaText::updateCursor()>
c0008896:	c3                   	ret    
c0008897:	90                   	nop

c0008898 <VgaText::putchar(char, VgaColour, VgaColour)>:
c0008898:	53                   	push   ebx
c0008899:	83 ec 08             	sub    esp,0x8
c000889c:	0f be 44 24 14       	movsx  eax,BYTE PTR [esp+0x14]
c00088a1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00088a5:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00088a9:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00088ad:	83 f8 07             	cmp    eax,0x7
c00088b0:	75 21                	jne    c00088d3 <VgaText::putchar(char, VgaColour, VgaColour)+0x3b>
c00088b2:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00088ba:	c7 44 24 14 f4 01 00 00 	mov    DWORD PTR [esp+0x14],0x1f4
c00088c2:	c7 44 24 10 b8 01 00 00 	mov    DWORD PTR [esp+0x10],0x1b8
c00088ca:	83 c4 08             	add    esp,0x8
c00088cd:	5b                   	pop    ebx
c00088ce:	e9 34 37 00 00       	jmp    c000c007 <Krnl::beep(int, int, bool)>
c00088d3:	83 f8 0d             	cmp    eax,0xd
c00088d6:	75 09                	jne    c00088e1 <VgaText::putchar(char, VgaColour, VgaColour)+0x49>
c00088d8:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00088df:	eb 2d                	jmp    c000890e <VgaText::putchar(char, VgaColour, VgaColour)+0x76>
c00088e1:	83 f8 0a             	cmp    eax,0xa
c00088e4:	75 31                	jne    c0008917 <VgaText::putchar(char, VgaColour, VgaColour)+0x7f>
c00088e6:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00088e9:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00088f0:	8d 50 01             	lea    edx,[eax+0x1]
c00088f3:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c00088f6:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c00088f9:	75 0f                	jne    c000890a <VgaText::putchar(char, VgaColour, VgaColour)+0x72>
c00088fb:	83 ec 0c             	sub    esp,0xc
c00088fe:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0008901:	53                   	push   ebx
c0008902:	e8 f9 fc ff ff       	call   c0008600 <VgaText::scrollScreen()>
c0008907:	83 c4 10             	add    esp,0x10
c000890a:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000890e:	83 c4 08             	add    esp,0x8
c0008911:	5b                   	pop    ebx
c0008912:	e9 f3 fb ff ff       	jmp    c000850a <VgaText::updateCursor()>
c0008917:	83 f8 08             	cmp    eax,0x8
c000891a:	75 25                	jne    c0008941 <VgaText::putchar(char, VgaColour, VgaColour)+0xa9>
c000891c:	50                   	push   eax
c000891d:	50                   	push   eax
c000891e:	6a 01                	push   0x1
c0008920:	53                   	push   ebx
c0008921:	e8 50 ff ff ff       	call   c0008876 <VgaText::decrementCursor(bool)>
c0008926:	5a                   	pop    edx
c0008927:	59                   	pop    ecx
c0008928:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000892b:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000892e:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008931:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008934:	6a 20                	push   0x20
c0008936:	53                   	push   ebx
c0008937:	e8 66 fd ff ff       	call   c00086a2 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000893c:	83 c4 28             	add    esp,0x28
c000893f:	5b                   	pop    ebx
c0008940:	c3                   	ret    
c0008941:	83 ec 08             	sub    esp,0x8
c0008944:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0008947:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000894a:	51                   	push   ecx
c000894b:	52                   	push   edx
c000894c:	50                   	push   eax
c000894d:	53                   	push   ebx
c000894e:	e8 4f fd ff ff       	call   c00086a2 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0008953:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c0008957:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c000895f:	83 c4 28             	add    esp,0x28
c0008962:	5b                   	pop    ebx
c0008963:	e9 ba fe ff ff       	jmp    c0008822 <VgaText::incrementCursor(bool)>

c0008968 <VgaText::putchar(char)>:
c0008968:	57                   	push   edi
c0008969:	56                   	push   esi
c000896a:	53                   	push   ebx
c000896b:	83 ec 10             	sub    esp,0x10
c000896e:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0008972:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008976:	89 f8                	mov    eax,edi
c0008978:	0f be c0             	movsx  eax,al
c000897b:	83 f8 5b             	cmp    eax,0x5b
c000897e:	75 18                	jne    c0008998 <VgaText::putchar(char)+0x30>
c0008980:	80 7b 40 00          	cmp    BYTE PTR [ebx+0x40],0x0
c0008984:	74 20                	je     c00089a6 <VgaText::putchar(char)+0x3e>
c0008986:	66 c7 43 40 00 01    	mov    WORD PTR [ebx+0x40],0x100
c000898c:	c7 43 54 00 00 00 00 	mov    DWORD PTR [ebx+0x54],0x0
c0008993:	e9 c1 00 00 00       	jmp    c0008a59 <VgaText::putchar(char)+0xf1>
c0008998:	83 f8 1b             	cmp    eax,0x1b
c000899b:	75 09                	jne    c00089a6 <VgaText::putchar(char)+0x3e>
c000899d:	c6 43 40 01          	mov    BYTE PTR [ebx+0x40],0x1
c00089a1:	e9 b3 00 00 00       	jmp    c0008a59 <VgaText::putchar(char)+0xf1>
c00089a6:	8a 4b 41             	mov    cl,BYTE PTR [ebx+0x41]
c00089a9:	84 c9                	test   cl,cl
c00089ab:	0f 84 98 00 00 00    	je     c0008a49 <VgaText::putchar(char)+0xe1>
c00089b1:	8d 77 c0             	lea    esi,[edi-0x40]
c00089b4:	89 f2                	mov    edx,esi
c00089b6:	80 fa 3e             	cmp    dl,0x3e
c00089b9:	77 78                	ja     c0008a33 <VgaText::putchar(char)+0xcb>
c00089bb:	83 f8 6d             	cmp    eax,0x6d
c00089be:	75 47                	jne    c0008a07 <VgaText::putchar(char)+0x9f>
c00089c0:	31 f6                	xor    esi,esi
c00089c2:	31 d2                	xor    edx,edx
c00089c4:	31 c0                	xor    eax,eax
c00089c6:	39 73 54             	cmp    DWORD PTR [ebx+0x54],esi
c00089c9:	7e 2d                	jle    c00089f8 <VgaText::putchar(char)+0x90>
c00089cb:	0f be 54 33 42       	movsx  edx,BYTE PTR [ebx+esi*1+0x42]
c00089d0:	83 fa 3b             	cmp    edx,0x3b
c00089d3:	75 17                	jne    c00089ec <VgaText::putchar(char)+0x84>
c00089d5:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c00089d9:	50                   	push   eax
c00089da:	53                   	push   ebx
c00089db:	e8 40 fb ff ff       	call   c0008520 <VgaText::doANSI_SGR(int)>
c00089e0:	59                   	pop    ecx
c00089e1:	31 d2                	xor    edx,edx
c00089e3:	5f                   	pop    edi
c00089e4:	31 c0                	xor    eax,eax
c00089e6:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c00089ea:	eb 09                	jmp    c00089f5 <VgaText::putchar(char)+0x8d>
c00089ec:	6b c0 0a             	imul   eax,eax,0xa
c00089ef:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c00089f3:	88 ca                	mov    dl,cl
c00089f5:	46                   	inc    esi
c00089f6:	eb ce                	jmp    c00089c6 <VgaText::putchar(char)+0x5e>
c00089f8:	84 d2                	test   dl,dl
c00089fa:	74 2f                	je     c0008a2b <VgaText::putchar(char)+0xc3>
c00089fc:	50                   	push   eax
c00089fd:	53                   	push   ebx
c00089fe:	e8 1d fb ff ff       	call   c0008520 <VgaText::doANSI_SGR(int)>
c0008a03:	58                   	pop    eax
c0008a04:	5a                   	pop    edx
c0008a05:	eb 24                	jmp    c0008a2b <VgaText::putchar(char)+0xc3>
c0008a07:	83 f8 4a             	cmp    eax,0x4a
c0008a0a:	75 1f                	jne    c0008a2b <VgaText::putchar(char)+0xc3>
c0008a0c:	80 7b 42 32          	cmp    BYTE PTR [ebx+0x42],0x32
c0008a10:	75 19                	jne    c0008a2b <VgaText::putchar(char)+0xc3>
c0008a12:	83 ec 0c             	sub    esp,0xc
c0008a15:	53                   	push   ebx
c0008a16:	e8 89 fd ff ff       	call   c00087a4 <VgaText::clearScreen()>
c0008a1b:	83 c4 0c             	add    esp,0xc
c0008a1e:	6a 00                	push   0x0
c0008a20:	6a 00                	push   0x0
c0008a22:	53                   	push   ebx
c0008a23:	e8 1a fd ff ff       	call   c0008742 <VgaText::setCursor(int, int)>
c0008a28:	83 c4 10             	add    esp,0x10
c0008a2b:	66 c7 43 40 00 00    	mov    WORD PTR [ebx+0x40],0x0
c0008a31:	eb 26                	jmp    c0008a59 <VgaText::putchar(char)+0xf1>
c0008a33:	8b 43 54             	mov    eax,DWORD PTR [ebx+0x54]
c0008a36:	83 f8 0e             	cmp    eax,0xe
c0008a39:	7f 1e                	jg     c0008a59 <VgaText::putchar(char)+0xf1>
c0008a3b:	8d 48 01             	lea    ecx,[eax+0x1]
c0008a3e:	89 4b 54             	mov    DWORD PTR [ebx+0x54],ecx
c0008a41:	89 f9                	mov    ecx,edi
c0008a43:	88 4c 03 42          	mov    BYTE PTR [ebx+eax*1+0x42],cl
c0008a47:	eb 10                	jmp    c0008a59 <VgaText::putchar(char)+0xf1>
c0008a49:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008a4c:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008a4f:	50                   	push   eax
c0008a50:	53                   	push   ebx
c0008a51:	e8 42 fe ff ff       	call   c0008898 <VgaText::putchar(char, VgaColour, VgaColour)>
c0008a56:	83 c4 10             	add    esp,0x10
c0008a59:	83 c4 10             	add    esp,0x10
c0008a5c:	5b                   	pop    ebx
c0008a5d:	5e                   	pop    esi
c0008a5e:	5f                   	pop    edi
c0008a5f:	c3                   	ret    

c0008a60 <VgaText::putx(unsigned int)>:
c0008a60:	57                   	push   edi
c0008a61:	b9 11 00 00 00       	mov    ecx,0x11
c0008a66:	56                   	push   esi
c0008a67:	be 4e 08 02 c0       	mov    esi,0xc002084e
c0008a6c:	53                   	push   ebx
c0008a6d:	83 ec 20             	sub    esp,0x20
c0008a70:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0008a74:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c0008a78:	fc                   	cld    
c0008a79:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0008a7b:	be 08 00 00 00       	mov    esi,0x8
c0008a80:	50                   	push   eax
c0008a81:	50                   	push   eax
c0008a82:	89 d8                	mov    eax,ebx
c0008a84:	c1 e3 04             	shl    ebx,0x4
c0008a87:	c1 e8 1c             	shr    eax,0x1c
c0008a8a:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c0008a8f:	50                   	push   eax
c0008a90:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0008a94:	e8 cf fe ff ff       	call   c0008968 <VgaText::putchar(char)>
c0008a99:	83 c4 10             	add    esp,0x10
c0008a9c:	4e                   	dec    esi
c0008a9d:	75 e1                	jne    c0008a80 <VgaText::putx(unsigned int)+0x20>
c0008a9f:	83 c4 20             	add    esp,0x20
c0008aa2:	5b                   	pop    ebx
c0008aa3:	5e                   	pop    esi
c0008aa4:	5f                   	pop    edi
c0008aa5:	c3                   	ret    

c0008aa6 <VgaText::puts(char const*)>:
c0008aa6:	53                   	push   ebx
c0008aa7:	83 ec 08             	sub    esp,0x8
c0008aaa:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0008aae:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0008ab1:	85 c0                	test   eax,eax
c0008ab3:	74 12                	je     c0008ac7 <VgaText::puts(char const*)+0x21>
c0008ab5:	43                   	inc    ebx
c0008ab6:	51                   	push   ecx
c0008ab7:	51                   	push   ecx
c0008ab8:	50                   	push   eax
c0008ab9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008abd:	e8 a6 fe ff ff       	call   c0008968 <VgaText::putchar(char)>
c0008ac2:	83 c4 10             	add    esp,0x10
c0008ac5:	eb e7                	jmp    c0008aae <VgaText::puts(char const*)+0x8>
c0008ac7:	83 c4 08             	add    esp,0x8
c0008aca:	5b                   	pop    ebx
c0008acb:	c3                   	ret    

c0008acc <VgaText::write(unsigned long long, void*, int*)>:
c0008acc:	55                   	push   ebp
c0008acd:	57                   	push   edi
c0008ace:	56                   	push   esi
c0008acf:	53                   	push   ebx
c0008ad0:	83 ec 0c             	sub    esp,0xc
c0008ad3:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0008ad7:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0008adb:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0008adf:	c6 86 81 00 00 00 01 	mov    BYTE PTR [esi+0x81],0x1
c0008ae6:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c0008ae9:	39 eb                	cmp    ebx,ebp
c0008aeb:	74 13                	je     c0008b00 <VgaText::write(unsigned long long, void*, int*)+0x34>
c0008aed:	43                   	inc    ebx
c0008aee:	50                   	push   eax
c0008aef:	50                   	push   eax
c0008af0:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c0008af4:	50                   	push   eax
c0008af5:	56                   	push   esi
c0008af6:	e8 6d fe ff ff       	call   c0008968 <VgaText::putchar(char)>
c0008afb:	83 c4 10             	add    esp,0x10
c0008afe:	eb e9                	jmp    c0008ae9 <VgaText::write(unsigned long long, void*, int*)+0x1d>
c0008b00:	c6 86 81 00 00 00 00 	mov    BYTE PTR [esi+0x81],0x0
c0008b07:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008b0b:	89 38                	mov    DWORD PTR [eax],edi
c0008b0d:	83 c4 0c             	add    esp,0xc
c0008b10:	31 c0                	xor    eax,eax
c0008b12:	5b                   	pop    ebx
c0008b13:	5e                   	pop    esi
c0008b14:	5f                   	pop    edi
c0008b15:	5d                   	pop    ebp
c0008b16:	c3                   	ret    
c0008b17:	90                   	nop

c0008b18 <VgaText::puts(char const*, VgaColour, VgaColour)>:
c0008b18:	55                   	push   ebp
c0008b19:	57                   	push   edi
c0008b1a:	56                   	push   esi
c0008b1b:	53                   	push   ebx
c0008b1c:	83 ec 0c             	sub    esp,0xc
c0008b1f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008b23:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0008b28:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c0008b2f:	50                   	push   eax
c0008b30:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0008b35:	50                   	push   eax
c0008b36:	e8 b3 fa ff ff       	call   c00085ee <VgaText::combineColours(unsigned char, unsigned char)>
c0008b3b:	5a                   	pop    edx
c0008b3c:	6b 73 18 50          	imul   esi,DWORD PTR [ebx+0x18],0x50
c0008b40:	59                   	pop    ecx
c0008b41:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0008b44:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0008b48:	0f b7 f6             	movzx  esi,si
c0008b4b:	0f b6 e8             	movzx  ebp,al
c0008b4e:	01 f6                	add    esi,esi
c0008b50:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0008b53:	0f be 07             	movsx  eax,BYTE PTR [edi]
c0008b56:	85 c0                	test   eax,eax
c0008b58:	0f 84 ef 00 00 00    	je     c0008c4d <VgaText::puts(char const*, VgaColour, VgaColour)+0x135>
c0008b5e:	83 f8 0d             	cmp    eax,0xd
c0008b61:	75 0c                	jne    c0008b6f <VgaText::puts(char const*, VgaColour, VgaColour)+0x57>
c0008b63:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008b6a:	e9 d8 00 00 00       	jmp    c0008c47 <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c0008b6f:	83 f8 0a             	cmp    eax,0xa
c0008b72:	75 44                	jne    c0008bb8 <VgaText::puts(char const*, VgaColour, VgaColour)+0xa0>
c0008b74:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0008b77:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008b7e:	8d 48 01             	lea    ecx,[eax+0x1]
c0008b81:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0008b84:	3b 4b 10             	cmp    ecx,DWORD PTR [ebx+0x10]
c0008b87:	75 0f                	jne    c0008b98 <VgaText::puts(char const*, VgaColour, VgaColour)+0x80>
c0008b89:	83 ec 0c             	sub    esp,0xc
c0008b8c:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0008b8f:	53                   	push   ebx
c0008b90:	e8 6b fa ff ff       	call   c0008600 <VgaText::scrollScreen()>
c0008b95:	83 c4 10             	add    esp,0x10
c0008b98:	83 ec 0c             	sub    esp,0xc
c0008b9b:	53                   	push   ebx
c0008b9c:	e8 69 f9 ff ff       	call   c000850a <VgaText::updateCursor()>
c0008ba1:	6b 73 18 50          	imul   esi,DWORD PTR [ebx+0x18],0x50
c0008ba5:	83 c4 10             	add    esp,0x10
c0008ba8:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0008bab:	0f b7 f6             	movzx  esi,si
c0008bae:	01 f6                	add    esi,esi
c0008bb0:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0008bb3:	e9 8f 00 00 00       	jmp    c0008c47 <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c0008bb8:	83 f8 08             	cmp    eax,0x8
c0008bbb:	75 34                	jne    c0008bf1 <VgaText::puts(char const*, VgaColour, VgaColour)+0xd9>
c0008bbd:	51                   	push   ecx
c0008bbe:	51                   	push   ecx
c0008bbf:	6a 01                	push   0x1
c0008bc1:	53                   	push   ebx
c0008bc2:	e8 af fc ff ff       	call   c0008876 <VgaText::decrementCursor(bool)>
c0008bc7:	5e                   	pop    esi
c0008bc8:	58                   	pop    eax
c0008bc9:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0008bcc:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0008bcf:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008bd2:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008bd5:	6a 20                	push   0x20
c0008bd7:	53                   	push   ebx
c0008bd8:	e8 c5 fa ff ff       	call   c00086a2 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0008bdd:	6b 73 18 50          	imul   esi,DWORD PTR [ebx+0x18],0x50
c0008be1:	83 c4 20             	add    esp,0x20
c0008be4:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0008be7:	0f b7 f6             	movzx  esi,si
c0008bea:	01 f6                	add    esi,esi
c0008bec:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0008bef:	eb 56                	jmp    c0008c47 <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c0008bf1:	52                   	push   edx
c0008bf2:	52                   	push   edx
c0008bf3:	55                   	push   ebp
c0008bf4:	50                   	push   eax
c0008bf5:	e8 98 fa ff ff       	call   c0008692 <VgaText::combineCharAndColour(char, unsigned char)>
c0008bfa:	83 c4 10             	add    esp,0x10
c0008bfd:	66 89 06             	mov    WORD PTR [esi],ax
c0008c00:	39 1d 04 5f 02 c0    	cmp    DWORD PTR ds:0xc0025f04,ebx
c0008c06:	75 1d                	jne    c0008c25 <VgaText::puts(char const*, VgaColour, VgaColour)+0x10d>
c0008c08:	83 ec 0c             	sub    esp,0xc
c0008c0b:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0008c0e:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0008c11:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0008c15:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0008c19:	0f be 07             	movsx  eax,BYTE PTR [edi]
c0008c1c:	50                   	push   eax
c0008c1d:	e8 de fb 00 00       	call   c0018800 <HalConsoleWriteCharacter(char, int, int, int, int)>
c0008c22:	83 c4 20             	add    esp,0x20
c0008c25:	83 c6 02             	add    esi,0x2
c0008c28:	50                   	push   eax
c0008c29:	50                   	push   eax
c0008c2a:	6a 00                	push   0x0
c0008c2c:	53                   	push   ebx
c0008c2d:	e8 f0 fb ff ff       	call   c0008822 <VgaText::incrementCursor(bool)>
c0008c32:	83 c4 10             	add    esp,0x10
c0008c35:	83 7b 14 00          	cmp    DWORD PTR [ebx+0x14],0x0
c0008c39:	75 0c                	jne    c0008c47 <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c0008c3b:	6b 73 18 50          	imul   esi,DWORD PTR [ebx+0x18],0x50
c0008c3f:	0f b7 f6             	movzx  esi,si
c0008c42:	01 f6                	add    esi,esi
c0008c44:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0008c47:	47                   	inc    edi
c0008c48:	e9 06 ff ff ff       	jmp    c0008b53 <VgaText::puts(char const*, VgaColour, VgaColour)+0x3b>
c0008c4d:	83 ec 0c             	sub    esp,0xc
c0008c50:	53                   	push   ebx
c0008c51:	e8 b4 f8 ff ff       	call   c000850a <VgaText::updateCursor()>
c0008c56:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c0008c5d:	83 c4 1c             	add    esp,0x1c
c0008c60:	5b                   	pop    ebx
c0008c61:	5e                   	pop    esi
c0008c62:	5f                   	pop    edi
c0008c63:	5d                   	pop    ebp
c0008c64:	c3                   	ret    
c0008c65:	90                   	nop

c0008c66 <VgaText::VgaText(char const*)>:
c0008c66:	56                   	push   esi
c0008c67:	53                   	push   ebx
c0008c68:	83 ec 04             	sub    esp,0x4
c0008c6b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c6f:	83 ec 08             	sub    esp,0x8
c0008c72:	6a 00                	push   0x0
c0008c74:	50                   	push   eax
c0008c75:	e8 44 05 00 00       	call   c00091be <UnixFile::UnixFile(int)>
c0008c7a:	83 c4 10             	add    esp,0x10
c0008c7d:	ba 74 08 02 c0       	mov    edx,0xc0020874
c0008c82:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c86:	89 10                	mov    DWORD PTR [eax],edx
c0008c88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c8c:	c7 40 38 01 00 00 00 	mov    DWORD PTR [eax+0x38],0x1
c0008c93:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c97:	c7 40 3c 0f 00 00 00 	mov    DWORD PTR [eax+0x3c],0xf
c0008c9e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008ca2:	c6 40 40 00          	mov    BYTE PTR [eax+0x40],0x0
c0008ca6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008caa:	c6 40 41 00          	mov    BYTE PTR [eax+0x41],0x0
c0008cae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cb2:	c7 40 54 00 00 00 00 	mov    DWORD PTR [eax+0x54],0x0
c0008cb9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cbd:	c7 40 5c 00 00 00 00 	mov    DWORD PTR [eax+0x5c],0x0
c0008cc4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cc8:	c6 80 80 00 00 00 00 	mov    BYTE PTR [eax+0x80],0x0
c0008ccf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cd3:	c6 80 81 00 00 00 00 	mov    BYTE PTR [eax+0x81],0x0
c0008cda:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cde:	c7 40 10 19 00 00 00 	mov    DWORD PTR [eax+0x10],0x19
c0008ce5:	83 ec 0c             	sub    esp,0xc
c0008ce8:	6a 01                	push   0x1
c0008cea:	e8 1e 09 00 00       	call   c000960d <Virt::allocateKernelVirtualPages(int)>
c0008cef:	83 c4 10             	add    esp,0x10
c0008cf2:	89 c2                	mov    edx,eax
c0008cf4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cf8:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0008cfb:	8b 1d b0 5f 02 c0    	mov    ebx,DWORD PTR ds:0xc0025fb0
c0008d01:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d05:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0008d08:	89 c6                	mov    esi,eax
c0008d0a:	e8 b0 f0 ff ff       	call   c0007dbf <Phys::allocatePage()>
c0008d0f:	68 05 0c 00 00       	push   0xc05
c0008d14:	56                   	push   esi
c0008d15:	50                   	push   eax
c0008d16:	53                   	push   ebx
c0008d17:	e8 04 10 00 00       	call   c0009d20 <VAS::mapPage(unsigned long, unsigned long, int)>
c0008d1c:	83 c4 10             	add    esp,0x10
c0008d1f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d23:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0008d26:	83 ec 04             	sub    esp,0x4
c0008d29:	68 a0 0f 00 00       	push   0xfa0
c0008d2e:	6a 00                	push   0x0
c0008d30:	50                   	push   eax
c0008d31:	e8 ba 77 ff ff       	call   c00004f0 <memset>
c0008d36:	83 c4 10             	add    esp,0x10
c0008d39:	83 ec 04             	sub    esp,0x4
c0008d3c:	6a 00                	push   0x0
c0008d3e:	6a 07                	push   0x7
c0008d40:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008d44:	e8 6b f8 ff ff       	call   c00085b4 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0008d49:	83 c4 10             	add    esp,0x10
c0008d4c:	83 ec 04             	sub    esp,0x4
c0008d4f:	6a 00                	push   0x0
c0008d51:	6a 00                	push   0x0
c0008d53:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008d57:	e8 e6 f9 ff ff       	call   c0008742 <VgaText::setCursor(int, int)>
c0008d5c:	83 c4 10             	add    esp,0x10
c0008d5f:	83 ec 0c             	sub    esp,0xc
c0008d62:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008d66:	e8 39 fa ff ff       	call   c00087a4 <VgaText::clearScreen()>
c0008d6b:	83 c4 10             	add    esp,0x10
c0008d6e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d72:	c6 40 58 00          	mov    BYTE PTR [eax+0x58],0x0
c0008d76:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d7a:	05 82 00 00 00       	add    eax,0x82
c0008d7f:	83 ec 04             	sub    esp,0x4
c0008d82:	68 80 00 00 00       	push   0x80
c0008d87:	6a 00                	push   0x0
c0008d89:	50                   	push   eax
c0008d8a:	e8 61 77 ff ff       	call   c00004f0 <memset>
c0008d8f:	83 c4 10             	add    esp,0x10
c0008d92:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d96:	05 02 01 00 00       	add    eax,0x102
c0008d9b:	83 ec 04             	sub    esp,0x4
c0008d9e:	68 80 00 00 00       	push   0x80
c0008da3:	6a 00                	push   0x0
c0008da5:	50                   	push   eax
c0008da6:	e8 45 77 ff ff       	call   c00004f0 <memset>
c0008dab:	83 c4 10             	add    esp,0x10
c0008dae:	90                   	nop
c0008daf:	83 c4 04             	add    esp,0x4
c0008db2:	5b                   	pop    ebx
c0008db3:	5e                   	pop    esi
c0008db4:	c3                   	ret    
c0008db5:	90                   	nop

c0008db6 <VgaText::receiveKey(unsigned char)>:
c0008db6:	55                   	push   ebp
c0008db7:	57                   	push   edi
c0008db8:	56                   	push   esi
c0008db9:	53                   	push   ebx
c0008dba:	83 ec 2c             	sub    esp,0x2c
c0008dbd:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0008dc1:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0008dc5:	89 ef                	mov    edi,ebp
c0008dc7:	81 e7 ff 00 00 00    	and    edi,0xff
c0008dcd:	0f 84 66 01 00 00    	je     c0008f39 <VgaText::receiveKey(unsigned char)+0x183>
c0008dd3:	8d b3 82 00 00 00    	lea    esi,[ebx+0x82]
c0008dd9:	83 ff 08             	cmp    edi,0x8
c0008ddc:	75 73                	jne    c0008e51 <VgaText::receiveKey(unsigned char)+0x9b>
c0008dde:	83 ec 0c             	sub    esp,0xc
c0008de1:	56                   	push   esi
c0008de2:	e8 89 77 ff ff       	call   c0000570 <strlen>
c0008de7:	83 c4 10             	add    esp,0x10
c0008dea:	85 c0                	test   eax,eax
c0008dec:	0f 84 02 01 00 00    	je     c0008ef4 <VgaText::receiveKey(unsigned char)+0x13e>
c0008df2:	50                   	push   eax
c0008df3:	50                   	push   eax
c0008df4:	6a 08                	push   0x8
c0008df6:	53                   	push   ebx
c0008df7:	e8 6c fb ff ff       	call   c0008968 <VgaText::putchar(char)>
c0008dfc:	89 34 24             	mov    DWORD PTR [esp],esi
c0008dff:	e8 6c 77 ff ff       	call   c0000570 <strlen>
c0008e04:	83 c4 10             	add    esp,0x10
c0008e07:	0f be 94 03 81 00 00 00 	movsx  edx,BYTE PTR [ebx+eax*1+0x81]
c0008e0f:	83 fa 0d             	cmp    edx,0xd
c0008e12:	89 d0                	mov    eax,edx
c0008e14:	0f 95 c1             	setne  cl
c0008e17:	83 fa 1f             	cmp    edx,0x1f
c0008e1a:	0f 9e c2             	setle  dl
c0008e1d:	0f b6 d2             	movzx  edx,dl
c0008e20:	85 ca                	test   edx,ecx
c0008e22:	74 17                	je     c0008e3b <VgaText::receiveKey(unsigned char)+0x85>
c0008e24:	83 e8 08             	sub    eax,0x8
c0008e27:	3c 02                	cmp    al,0x2
c0008e29:	76 10                	jbe    c0008e3b <VgaText::receiveKey(unsigned char)+0x85>
c0008e2b:	55                   	push   ebp
c0008e2c:	55                   	push   ebp
c0008e2d:	68 5f 08 02 c0       	push   0xc002085f
c0008e32:	53                   	push   ebx
c0008e33:	e8 6e fc ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c0008e38:	83 c4 10             	add    esp,0x10
c0008e3b:	83 ec 0c             	sub    esp,0xc
c0008e3e:	56                   	push   esi
c0008e3f:	e8 2c 77 ff ff       	call   c0000570 <strlen>
c0008e44:	c6 84 03 81 00 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x81],0x0
c0008e4c:	e9 a0 00 00 00       	jmp    c0008ef1 <VgaText::receiveKey(unsigned char)+0x13b>
c0008e51:	83 ec 0c             	sub    esp,0xc
c0008e54:	8d 83 02 01 00 00    	lea    eax,[ebx+0x102]
c0008e5a:	50                   	push   eax
c0008e5b:	e8 10 77 ff ff       	call   c0000570 <strlen>
c0008e60:	89 34 24             	mov    DWORD PTR [esp],esi
c0008e63:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008e67:	e8 04 77 ff ff       	call   c0000570 <strlen>
c0008e6c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0008e70:	83 c4 10             	add    esp,0x10
c0008e73:	8d 44 02 03          	lea    eax,[edx+eax*1+0x3]
c0008e77:	3d 80 00 00 00       	cmp    eax,0x80
c0008e7c:	0f 87 b7 00 00 00    	ja     c0008f39 <VgaText::receiveKey(unsigned char)+0x183>
c0008e82:	8d 45 ff             	lea    eax,[ebp-0x1]
c0008e85:	8d 55 f7             	lea    edx,[ebp-0x9]
c0008e88:	3c 1e                	cmp    al,0x1e
c0008e8a:	0f 96 c0             	setbe  al
c0008e8d:	80 fa 01             	cmp    dl,0x1
c0008e90:	0f 97 c2             	seta   dl
c0008e93:	0f b6 d2             	movzx  edx,dl
c0008e96:	85 c2                	test   edx,eax
c0008e98:	74 2e                	je     c0008ec8 <VgaText::receiveKey(unsigned char)+0x112>
c0008e9a:	83 ff 0d             	cmp    edi,0xd
c0008e9d:	74 29                	je     c0008ec8 <VgaText::receiveKey(unsigned char)+0x112>
c0008e9f:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008ea2:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008ea5:	68 65 08 02 c0       	push   0xc0020865
c0008eaa:	53                   	push   ebx
c0008eab:	e8 68 fc ff ff       	call   c0008b18 <VgaText::puts(char const*, VgaColour, VgaColour)>
c0008eb0:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008eb3:	8d 45 40             	lea    eax,[ebp+0x40]
c0008eb6:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008eb9:	0f b6 c0             	movzx  eax,al
c0008ebc:	50                   	push   eax
c0008ebd:	53                   	push   ebx
c0008ebe:	e8 d5 f9 ff ff       	call   c0008898 <VgaText::putchar(char, VgaColour, VgaColour)>
c0008ec3:	83 c4 20             	add    esp,0x20
c0008ec6:	eb 11                	jmp    c0008ed9 <VgaText::receiveKey(unsigned char)+0x123>
c0008ec8:	89 e8                	mov    eax,ebp
c0008eca:	51                   	push   ecx
c0008ecb:	0f be c0             	movsx  eax,al
c0008ece:	51                   	push   ecx
c0008ecf:	50                   	push   eax
c0008ed0:	53                   	push   ebx
c0008ed1:	e8 92 fa ff ff       	call   c0008968 <VgaText::putchar(char)>
c0008ed6:	83 c4 10             	add    esp,0x10
c0008ed9:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0008ede:	89 e8                	mov    eax,ebp
c0008ee0:	88 44 24 1e          	mov    BYTE PTR [esp+0x1e],al
c0008ee4:	52                   	push   edx
c0008ee5:	52                   	push   edx
c0008ee6:	8d 44 24 26          	lea    eax,[esp+0x26]
c0008eea:	50                   	push   eax
c0008eeb:	56                   	push   esi
c0008eec:	e8 4f 79 ff ff       	call   c0000840 <strcat>
c0008ef1:	83 c4 10             	add    esp,0x10
c0008ef4:	8a 93 80 00 00 00    	mov    dl,BYTE PTR [ebx+0x80]
c0008efa:	b0 01                	mov    al,0x1
c0008efc:	83 ff 1c             	cmp    edi,0x1c
c0008eff:	77 0e                	ja     c0008f0f <VgaText::receiveKey(unsigned char)+0x159>
c0008f01:	b8 08 04 00 10       	mov    eax,0x10000408
c0008f06:	89 f9                	mov    ecx,edi
c0008f08:	d3 e8                	shr    eax,cl
c0008f0a:	f7 d0                	not    eax
c0008f0c:	83 e0 01             	and    eax,0x1
c0008f0f:	84 c0                	test   al,al
c0008f11:	74 04                	je     c0008f17 <VgaText::receiveKey(unsigned char)+0x161>
c0008f13:	84 d2                	test   dl,dl
c0008f15:	74 22                	je     c0008f39 <VgaText::receiveKey(unsigned char)+0x183>
c0008f17:	81 c3 02 01 00 00    	add    ebx,0x102
c0008f1d:	50                   	push   eax
c0008f1e:	50                   	push   eax
c0008f1f:	56                   	push   esi
c0008f20:	53                   	push   ebx
c0008f21:	e8 1a 79 ff ff       	call   c0000840 <strcat>
c0008f26:	83 c4 0c             	add    esp,0xc
c0008f29:	68 80 00 00 00       	push   0x80
c0008f2e:	6a 00                	push   0x0
c0008f30:	56                   	push   esi
c0008f31:	e8 ba 75 ff ff       	call   c00004f0 <memset>
c0008f36:	83 c4 10             	add    esp,0x10
c0008f39:	83 c4 2c             	add    esp,0x2c
c0008f3c:	5b                   	pop    ebx
c0008f3d:	5e                   	pop    esi
c0008f3e:	5f                   	pop    edi
c0008f3f:	5d                   	pop    ebp
c0008f40:	c3                   	ret    
c0008f41:	90                   	nop

c0008f42 <VgaText::doUpdate()>:
c0008f42:	c3                   	ret    
c0008f43:	90                   	nop

c0008f44 <TSS::TSS()>:
c0008f44:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008f48:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0008f4f:	90                   	nop
c0008f50:	c3                   	ret    
c0008f51:	90                   	nop
c0008f52:	66 90                	xchg   ax,ax

c0008f54 <TSS::setESP(unsigned long)>:
c0008f54:	55                   	push   ebp
c0008f55:	89 e5                	mov    ebp,esp
c0008f57:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008f5a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008f5d:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0008f60:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008f63:	90                   	nop
c0008f64:	5d                   	pop    ebp
c0008f65:	c3                   	ret    
c0008f66:	66 90                	xchg   ax,ax

c0008f68 <TSS::flush()>:
c0008f68:	55                   	push   ebp
c0008f69:	89 e5                	mov    ebp,esp
c0008f6b:	83 ec 10             	sub    esp,0x10
c0008f6e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008f71:	8b 00                	mov    eax,DWORD PTR [eax]
c0008f73:	83 c8 03             	or     eax,0x3
c0008f76:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0008f7a:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0008f7e:	66 89 d0             	mov    ax,dx
c0008f81:	0f 00 d8             	ltr    ax
c0008f84:	90                   	nop
c0008f85:	c9                   	leave  
c0008f86:	c3                   	ret    
c0008f87:	90                   	nop

c0008f88 <TSS::setup(unsigned long, unsigned long)>:
c0008f88:	55                   	push   ebp
c0008f89:	89 e5                	mov    ebp,esp
c0008f8b:	83 ec 18             	sub    esp,0x18
c0008f8e:	83 ec 0c             	sub    esp,0xc
c0008f91:	6a 68                	push   0x68
c0008f93:	e8 1e eb ff ff       	call   c0007ab6 <malloc>
c0008f98:	83 c4 10             	add    esp,0x10
c0008f9b:	89 c2                	mov    edx,eax
c0008f9d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fa0:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008fa3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fa6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fa9:	83 ec 04             	sub    esp,0x4
c0008fac:	6a 68                	push   0x68
c0008fae:	6a 00                	push   0x0
c0008fb0:	50                   	push   eax
c0008fb1:	e8 3a 75 ff ff       	call   c00004f0 <memset>
c0008fb6:	83 c4 10             	add    esp,0x10
c0008fb9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fbc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fbf:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c0008fc5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fc8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fcb:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c0008fd1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fd4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fd7:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0008fda:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008fdd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fe0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fe3:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c0008fe9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fec:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fef:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c0008ff5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008ff8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008ffb:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c0009001:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009004:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009007:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c000900d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009010:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009013:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c0009019:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000901c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000901f:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c0009025:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009028:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000902b:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c000902e:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0009031:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009034:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009037:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000903a:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000903d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009040:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009043:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c000904a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000904d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009050:	0f 20 da             	mov    edx,cr3
c0009053:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0009056:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0009059:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c000905c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000905f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009062:	83 ec 08             	sub    esp,0x8
c0009065:	50                   	push   eax
c0009066:	8d 45 ec             	lea    eax,[ebp-0x14]
c0009069:	50                   	push   eax
c000906a:	e8 b5 e2 ff ff       	call   c0007324 <GDTEntry::setBase(unsigned int)>
c000906f:	83 c4 10             	add    esp,0x10
c0009072:	83 ec 08             	sub    esp,0x8
c0009075:	6a 68                	push   0x68
c0009077:	8d 45 ec             	lea    eax,[ebp-0x14]
c000907a:	50                   	push   eax
c000907b:	e8 c0 e2 ff ff       	call   c0007340 <GDTEntry::setLimit(unsigned int)>
c0009080:	83 c4 10             	add    esp,0x10
c0009083:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c0009087:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c000908a:	83 e0 0f             	and    eax,0xf
c000908d:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0009090:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0009093:	83 c8 40             	or     eax,0x40
c0009096:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0009099:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000909e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00090a4:	05 78 01 00 00       	add    eax,0x178
c00090a9:	83 ec 04             	sub    esp,0x4
c00090ac:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c00090af:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c00090b2:	50                   	push   eax
c00090b3:	e8 bc e2 ff ff       	call   c0007374 <GDT::addEntry(GDTEntry)>
c00090b8:	83 c4 10             	add    esp,0x10
c00090bb:	89 c2                	mov    edx,eax
c00090bd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00090c0:	89 10                	mov    DWORD PTR [eax],edx
c00090c2:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c00090c7:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00090cd:	05 78 01 00 00       	add    eax,0x178
c00090d2:	83 ec 0c             	sub    esp,0xc
c00090d5:	50                   	push   eax
c00090d6:	e8 c3 e2 ff ff       	call   c000739e <GDT::flush()>
c00090db:	83 c4 10             	add    esp,0x10
c00090de:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00090e1:	8b 00                	mov    eax,DWORD PTR [eax]
c00090e3:	c9                   	leave  
c00090e4:	c3                   	ret    
c00090e5:	90                   	nop

c00090e6 <ReservedFilename::read(unsigned long long, void*, int*)>:
c00090e6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00090ea:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00090ee:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00090f1:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c00090f6:	75 08                	jne    c0009100 <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c00090f8:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00090fe:	eb 38                	jmp    c0009138 <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c0009100:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0009105:	75 17                	jne    c000911e <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c0009107:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000910c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000910f:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0009115:	8b 10                	mov    edx,DWORD PTR [eax]
c0009117:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000911b:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c000911e:	89 c1                	mov    ecx,eax
c0009120:	83 e1 fd             	and    ecx,0xfffffffd
c0009123:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c0009129:	74 cd                	je     c00090f8 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c000912b:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0009130:	83 e0 ef             	and    eax,0xffffffef
c0009133:	83 f8 08             	cmp    eax,0x8
c0009136:	76 c0                	jbe    c00090f8 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0009138:	31 c0                	xor    eax,eax
c000913a:	c3                   	ret    
c000913b:	90                   	nop

c000913c <ReservedFilename::isAtty()>:
c000913c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009140:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0009143:	31 c0                	xor    eax,eax
c0009145:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c000914b:	74 09                	je     c0009156 <ReservedFilename::isAtty()+0x1a>
c000914d:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c0009153:	0f 94 c0             	sete   al
c0009156:	c3                   	ret    
c0009157:	90                   	nop

c0009158 <ReservedFilename::write(unsigned long long, void*, int*)>:
c0009158:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000915c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009160:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009163:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0009167:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c000916c:	75 08                	jne    c0009176 <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c000916e:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0009174:	eb 3d                	jmp    c00091b3 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0009176:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c000917b:	75 17                	jne    c0009194 <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c000917d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0009182:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0009185:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c000918b:	8b 10                	mov    edx,DWORD PTR [eax]
c000918d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009191:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c0009194:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0009199:	75 04                	jne    c000919f <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c000919b:	89 0a                	mov    DWORD PTR [edx],ecx
c000919d:	eb 14                	jmp    c00091b3 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c000919f:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c00091a4:	74 c8                	je     c000916e <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c00091a6:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c00091ab:	83 e0 ef             	and    eax,0xffffffef
c00091ae:	83 f8 08             	cmp    eax,0x8
c00091b1:	76 bb                	jbe    c000916e <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c00091b3:	31 c0                	xor    eax,eax
c00091b5:	c3                   	ret    

c00091b6 <UnixFile::getFileDescriptor()>:
c00091b6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00091ba:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00091bd:	c3                   	ret    

c00091be <UnixFile::UnixFile(int)>:
c00091be:	53                   	push   ebx
c00091bf:	83 ec 28             	sub    esp,0x28
c00091c2:	ba 3c 09 02 c0       	mov    edx,0xc002093c
c00091c7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00091cb:	89 10                	mov    DWORD PTR [eax],edx
c00091cd:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c00091d5:	0f 8f 90 01 00 00    	jg     c000936b <UnixFile::UnixFile(int)+0x1ad>
c00091db:	a1 20 2f 02 c0       	mov    eax,ds:0xc0022f20
c00091e0:	8d 50 01             	lea    edx,[eax+0x1]
c00091e3:	89 15 20 2f 02 c0    	mov    DWORD PTR ds:0xc0022f20,edx
c00091e9:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00091ed:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00091f0:	83 ec 08             	sub    esp,0x8
c00091f3:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c00091f7:	68 98 5f 02 c0       	push   0xc0025f98
c00091fc:	e8 07 62 01 00       	call   c001f408 <LinkedList<UnixFile>::addElement(UnixFile*)>
c0009201:	83 c4 10             	add    esp,0x10
c0009204:	a0 94 5f 02 c0       	mov    al,ds:0xc0025f94
c0009209:	83 f0 01             	xor    eax,0x1
c000920c:	0f b6 c0             	movzx  eax,al
c000920f:	85 c0                	test   eax,eax
c0009211:	0f 84 55 01 00 00    	je     c000936c <UnixFile::UnixFile(int)+0x1ae>
c0009217:	c6 05 94 5f 02 c0 01 	mov    BYTE PTR ds:0xc0025f94,0x1
c000921e:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c0009226:	83 ec 0c             	sub    esp,0xc
c0009229:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000922d:	e8 84 e8 ff ff       	call   c0007ab6 <malloc>
c0009232:	83 c4 10             	add    esp,0x10
c0009235:	89 c3                	mov    ebx,eax
c0009237:	83 ec 08             	sub    esp,0x8
c000923a:	68 03 ff ff 0f       	push   0xfffff03
c000923f:	53                   	push   ebx
c0009240:	e8 2d 01 00 00       	call   c0009372 <ReservedFilename::ReservedFilename(int)>
c0009245:	83 c4 10             	add    esp,0x10
c0009248:	89 1d 8c 5f 02 c0    	mov    DWORD PTR ds:0xc0025f8c,ebx
c000924e:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c0009256:	83 ec 0c             	sub    esp,0xc
c0009259:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000925d:	e8 54 e8 ff ff       	call   c0007ab6 <malloc>
c0009262:	83 c4 10             	add    esp,0x10
c0009265:	89 c3                	mov    ebx,eax
c0009267:	83 ec 08             	sub    esp,0x8
c000926a:	68 01 ff ff 0f       	push   0xfffff01
c000926f:	53                   	push   ebx
c0009270:	e8 fd 00 00 00       	call   c0009372 <ReservedFilename::ReservedFilename(int)>
c0009275:	83 c4 10             	add    esp,0x10
c0009278:	89 1d 90 5f 02 c0    	mov    DWORD PTR ds:0xc0025f90,ebx
c000927e:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c0009286:	83 ec 0c             	sub    esp,0xc
c0009289:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000928d:	e8 24 e8 ff ff       	call   c0007ab6 <malloc>
c0009292:	83 c4 10             	add    esp,0x10
c0009295:	89 c3                	mov    ebx,eax
c0009297:	83 ec 08             	sub    esp,0x8
c000929a:	68 00 ff ff 0f       	push   0xfffff00
c000929f:	53                   	push   ebx
c00092a0:	e8 cd 00 00 00       	call   c0009372 <ReservedFilename::ReservedFilename(int)>
c00092a5:	83 c4 10             	add    esp,0x10
c00092a8:	89 1d 84 5f 02 c0    	mov    DWORD PTR ds:0xc0025f84,ebx
c00092ae:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c00092b6:	83 ec 0c             	sub    esp,0xc
c00092b9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00092bd:	e8 f4 e7 ff ff       	call   c0007ab6 <malloc>
c00092c2:	83 c4 10             	add    esp,0x10
c00092c5:	89 c3                	mov    ebx,eax
c00092c7:	83 ec 08             	sub    esp,0x8
c00092ca:	68 02 ff ff 0f       	push   0xfffff02
c00092cf:	53                   	push   ebx
c00092d0:	e8 9d 00 00 00       	call   c0009372 <ReservedFilename::ReservedFilename(int)>
c00092d5:	83 c4 10             	add    esp,0x10
c00092d8:	89 1d 88 5f 02 c0    	mov    DWORD PTR ds:0xc0025f88,ebx
c00092de:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00092e6:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c00092eb:	7f 7f                	jg     c000936c <UnixFile::UnixFile(int)+0x1ae>
c00092ed:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c00092f5:	83 ec 0c             	sub    esp,0xc
c00092f8:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00092fc:	e8 b5 e7 ff ff       	call   c0007ab6 <malloc>
c0009301:	83 c4 10             	add    esp,0x10
c0009304:	89 c3                	mov    ebx,eax
c0009306:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000930a:	05 10 ff ff 0f       	add    eax,0xfffff10
c000930f:	83 ec 08             	sub    esp,0x8
c0009312:	50                   	push   eax
c0009313:	53                   	push   ebx
c0009314:	e8 59 00 00 00       	call   c0009372 <ReservedFilename::ReservedFilename(int)>
c0009319:	83 c4 10             	add    esp,0x10
c000931c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009320:	89 1c 85 60 5f 02 c0 	mov    DWORD PTR [eax*4-0x3ffda0a0],ebx
c0009327:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c000932f:	83 ec 0c             	sub    esp,0xc
c0009332:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009336:	e8 7b e7 ff ff       	call   c0007ab6 <malloc>
c000933b:	83 c4 10             	add    esp,0x10
c000933e:	89 c3                	mov    ebx,eax
c0009340:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009344:	05 20 ff ff 0f       	add    eax,0xfffff20
c0009349:	83 ec 08             	sub    esp,0x8
c000934c:	50                   	push   eax
c000934d:	53                   	push   ebx
c000934e:	e8 1f 00 00 00       	call   c0009372 <ReservedFilename::ReservedFilename(int)>
c0009353:	83 c4 10             	add    esp,0x10
c0009356:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000935a:	89 1c 85 20 5f 02 c0 	mov    DWORD PTR [eax*4-0x3ffda0e0],ebx
c0009361:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0009366:	e9 7b ff ff ff       	jmp    c00092e6 <UnixFile::UnixFile(int)+0x128>
c000936b:	90                   	nop
c000936c:	83 c4 28             	add    esp,0x28
c000936f:	5b                   	pop    ebx
c0009370:	c3                   	ret    
c0009371:	90                   	nop

c0009372 <ReservedFilename::ReservedFilename(int)>:
c0009372:	83 ec 0c             	sub    esp,0xc
c0009375:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009379:	83 ec 08             	sub    esp,0x8
c000937c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009380:	50                   	push   eax
c0009381:	e8 38 fe ff ff       	call   c00091be <UnixFile::UnixFile(int)>
c0009386:	83 c4 10             	add    esp,0x10
c0009389:	ba 58 09 02 c0       	mov    edx,0xc0020958
c000938e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009392:	89 10                	mov    DWORD PTR [eax],edx
c0009394:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009398:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000939c:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000939f:	90                   	nop
c00093a0:	83 c4 0c             	add    esp,0xc
c00093a3:	c3                   	ret    

c00093a4 <UnixFile::~UnixFile()>:
c00093a4:	83 ec 1c             	sub    esp,0x1c
c00093a7:	ba 3c 09 02 c0       	mov    edx,0xc002093c
c00093ac:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00093b0:	89 10                	mov    DWORD PTR [eax],edx
c00093b2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00093b6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00093b9:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c00093be:	7f 76                	jg     c0009436 <UnixFile::~UnixFile()+0x92>
c00093c0:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00093c8:	83 ec 0c             	sub    esp,0xc
c00093cb:	68 98 5f 02 c0       	push   0xc0025f98
c00093d0:	e8 07 61 01 00       	call   c001f4dc <LinkedList<UnixFile>::getFirstElement()>
c00093d5:	83 c4 10             	add    esp,0x10
c00093d8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00093dc:	83 ec 0c             	sub    esp,0xc
c00093df:	68 98 5f 02 c0       	push   0xc0025f98
c00093e4:	e8 fb 60 01 00       	call   c001f4e4 <LinkedList<UnixFile>::removeFirst()>
c00093e9:	83 c4 10             	add    esp,0x10
c00093ec:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00093f0:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c00093f4:	74 43                	je     c0009439 <UnixFile::~UnixFile()+0x95>
c00093f6:	83 ec 08             	sub    esp,0x8
c00093f9:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00093fd:	68 98 5f 02 c0       	push   0xc0025f98
c0009402:	e8 01 60 01 00       	call   c001f408 <LinkedList<UnixFile>::addElement(UnixFile*)>
c0009407:	83 c4 10             	add    esp,0x10
c000940a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000940e:	8d 50 01             	lea    edx,[eax+0x1]
c0009411:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009415:	3d 20 a1 07 00       	cmp    eax,0x7a120
c000941a:	0f 94 c0             	sete   al
c000941d:	0f b6 c0             	movzx  eax,al
c0009420:	85 c0                	test   eax,eax
c0009422:	74 a4                	je     c00093c8 <UnixFile::~UnixFile()+0x24>
c0009424:	83 ec 0c             	sub    esp,0xc
c0009427:	68 14 09 02 c0       	push   0xc0020914
c000942c:	e8 bc 7d 00 00       	call   c00111ed <KePanic(char const*)>
c0009431:	83 c4 10             	add    esp,0x10
c0009434:	eb 92                	jmp    c00093c8 <UnixFile::~UnixFile()+0x24>
c0009436:	90                   	nop
c0009437:	eb 01                	jmp    c000943a <UnixFile::~UnixFile()+0x96>
c0009439:	90                   	nop
c000943a:	90                   	nop
c000943b:	83 c4 1c             	add    esp,0x1c
c000943e:	c3                   	ret    
c000943f:	90                   	nop

c0009440 <UnixFile::~UnixFile()>:
c0009440:	83 ec 0c             	sub    esp,0xc
c0009443:	83 ec 0c             	sub    esp,0xc
c0009446:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000944a:	e8 55 ff ff ff       	call   c00093a4 <UnixFile::~UnixFile()>
c000944f:	83 c4 10             	add    esp,0x10
c0009452:	83 ec 08             	sub    esp,0x8
c0009455:	6a 0c                	push   0xc
c0009457:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000945b:	e8 b8 13 00 00       	call   c000a818 <operator delete(void*, unsigned long)>
c0009460:	83 c4 10             	add    esp,0x10
c0009463:	83 c4 0c             	add    esp,0xc
c0009466:	c3                   	ret    
c0009467:	90                   	nop

c0009468 <ReservedFilename::~ReservedFilename()>:
c0009468:	83 ec 0c             	sub    esp,0xc
c000946b:	ba 58 09 02 c0       	mov    edx,0xc0020958
c0009470:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009474:	89 10                	mov    DWORD PTR [eax],edx
c0009476:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000947a:	83 ec 0c             	sub    esp,0xc
c000947d:	50                   	push   eax
c000947e:	e8 21 ff ff ff       	call   c00093a4 <UnixFile::~UnixFile()>
c0009483:	83 c4 10             	add    esp,0x10
c0009486:	90                   	nop
c0009487:	83 c4 0c             	add    esp,0xc
c000948a:	c3                   	ret    
c000948b:	90                   	nop

c000948c <ReservedFilename::~ReservedFilename()>:
c000948c:	83 ec 0c             	sub    esp,0xc
c000948f:	83 ec 0c             	sub    esp,0xc
c0009492:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009496:	e8 cd ff ff ff       	call   c0009468 <ReservedFilename::~ReservedFilename()>
c000949b:	83 c4 10             	add    esp,0x10
c000949e:	83 ec 08             	sub    esp,0x8
c00094a1:	6a 0c                	push   0xc
c00094a3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00094a7:	e8 6c 13 00 00       	call   c000a818 <operator delete(void*, unsigned long)>
c00094ac:	83 c4 10             	add    esp,0x10
c00094af:	83 c4 0c             	add    esp,0xc
c00094b2:	c3                   	ret    

c00094b3 <KeGetFileFromDescriptor(int)>:
c00094b3:	53                   	push   ebx
c00094b4:	83 ec 08             	sub    esp,0x8
c00094b7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00094bb:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c00094c1:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c00094c7:	7f 2c                	jg     c00094f5 <KeGetFileFromDescriptor(int)+0x42>
c00094c9:	83 ec 0c             	sub    esp,0xc
c00094cc:	68 98 5f 02 c0       	push   0xc0025f98
c00094d1:	e8 06 60 01 00       	call   c001f4dc <LinkedList<UnixFile>::getFirstElement()>
c00094d6:	83 c4 10             	add    esp,0x10
c00094d9:	85 c0                	test   eax,eax
c00094db:	75 04                	jne    c00094e1 <KeGetFileFromDescriptor(int)+0x2e>
c00094dd:	31 c0                	xor    eax,eax
c00094df:	eb 6e                	jmp    c000954f <KeGetFileFromDescriptor(int)+0x9c>
c00094e1:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c00094e4:	74 69                	je     c000954f <KeGetFileFromDescriptor(int)+0x9c>
c00094e6:	52                   	push   edx
c00094e7:	52                   	push   edx
c00094e8:	50                   	push   eax
c00094e9:	68 98 5f 02 c0       	push   0xc0025f98
c00094ee:	e8 93 60 01 00       	call   c001f586 <LinkedList<UnixFile>::getNext(UnixFile*)>
c00094f3:	eb e1                	jmp    c00094d6 <KeGetFileFromDescriptor(int)+0x23>
c00094f5:	a1 8c 5f 02 c0       	mov    eax,ds:0xc0025f8c
c00094fa:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c0009500:	74 4d                	je     c000954f <KeGetFileFromDescriptor(int)+0x9c>
c0009502:	a1 90 5f 02 c0       	mov    eax,ds:0xc0025f90
c0009507:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c000950d:	74 40                	je     c000954f <KeGetFileFromDescriptor(int)+0x9c>
c000950f:	a1 88 5f 02 c0       	mov    eax,ds:0xc0025f88
c0009514:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c000951a:	74 33                	je     c000954f <KeGetFileFromDescriptor(int)+0x9c>
c000951c:	a1 84 5f 02 c0       	mov    eax,ds:0xc0025f84
c0009521:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c0009527:	74 26                	je     c000954f <KeGetFileFromDescriptor(int)+0x9c>
c0009529:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c000952f:	83 f8 08             	cmp    eax,0x8
c0009532:	77 09                	ja     c000953d <KeGetFileFromDescriptor(int)+0x8a>
c0009534:	8b 04 85 60 5f 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffda0a0]
c000953b:	eb 12                	jmp    c000954f <KeGetFileFromDescriptor(int)+0x9c>
c000953d:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c0009543:	83 fb 08             	cmp    ebx,0x8
c0009546:	77 95                	ja     c00094dd <KeGetFileFromDescriptor(int)+0x2a>
c0009548:	8b 04 9d 20 5f 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffda0e0]
c000954f:	83 c4 08             	add    esp,0x8
c0009552:	5b                   	pop    ebx
c0009553:	c3                   	ret    

c0009554 <__static_initialization_and_destruction_0(int, int)>:
c0009554:	83 ec 0c             	sub    esp,0xc
c0009557:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000955c:	75 34                	jne    c0009592 <__static_initialization_and_destruction_0(int, int)+0x3e>
c000955e:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0009566:	75 2a                	jne    c0009592 <__static_initialization_and_destruction_0(int, int)+0x3e>
c0009568:	83 ec 0c             	sub    esp,0xc
c000956b:	68 98 5f 02 c0       	push   0xc0025f98
c0009570:	e8 51 5e 01 00       	call   c001f3c6 <LinkedList<UnixFile>::LinkedList()>
c0009575:	83 c4 10             	add    esp,0x10
c0009578:	83 ec 04             	sub    esp,0x4
c000957b:	68 a8 2e 02 c0       	push   0xc0022ea8
c0009580:	68 98 5f 02 c0       	push   0xc0025f98
c0009585:	68 c4 f3 01 c0       	push   0xc001f3c4
c000958a:	e8 39 12 00 00       	call   c000a7c8 <__cxa_atexit>
c000958f:	83 c4 10             	add    esp,0x10
c0009592:	90                   	nop
c0009593:	83 c4 0c             	add    esp,0xc
c0009596:	c3                   	ret    

c0009597 <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c0009597:	83 ec 0c             	sub    esp,0xc
c000959a:	83 ec 08             	sub    esp,0x8
c000959d:	68 ff ff 00 00       	push   0xffff
c00095a2:	6a 01                	push   0x1
c00095a4:	e8 ab ff ff ff       	call   c0009554 <__static_initialization_and_destruction_0(int, int)>
c00095a9:	83 c4 10             	add    esp,0x10
c00095ac:	83 c4 0c             	add    esp,0xc
c00095af:	c3                   	ret    

c00095b0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c00095b0:	53                   	push   ebx
c00095b1:	8b 15 28 2f 02 c0    	mov    edx,DWORD PTR ds:0xc0022f28
c00095b7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00095bb:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00095bf:	8d 98 00 80 f3 ff    	lea    ebx,[eax-0xc8000]
c00095c5:	89 d8                	mov    eax,ebx
c00095c7:	d1 e8                	shr    eax,1
c00095c9:	01 d0                	add    eax,edx
c00095cb:	80 e3 01             	and    bl,0x1
c00095ce:	8a 10                	mov    dl,BYTE PTR [eax]
c00095d0:	75 09                	jne    c00095db <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x2b>
c00095d2:	83 e2 f0             	and    edx,0xfffffff0
c00095d5:	09 ca                	or     edx,ecx
c00095d7:	88 10                	mov    BYTE PTR [eax],dl
c00095d9:	5b                   	pop    ebx
c00095da:	c3                   	ret    
c00095db:	83 e2 0f             	and    edx,0xf
c00095de:	0f b6 c9             	movzx  ecx,cl
c00095e1:	c1 e1 04             	shl    ecx,0x4
c00095e4:	09 ca                	or     edx,ecx
c00095e6:	88 10                	mov    BYTE PTR [eax],dl
c00095e8:	5b                   	pop    ebx
c00095e9:	c3                   	ret    

c00095ea <Virt::getPageState(unsigned long)>:
c00095ea:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00095ee:	8b 0d 28 2f 02 c0    	mov    ecx,DWORD PTR ds:0xc0022f28
c00095f4:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c00095fa:	89 d0                	mov    eax,edx
c00095fc:	d1 e8                	shr    eax,1
c00095fe:	80 e2 01             	and    dl,0x1
c0009601:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c0009604:	74 03                	je     c0009609 <Virt::getPageState(unsigned long)+0x1f>
c0009606:	c1 e8 04             	shr    eax,0x4
c0009609:	83 e0 0f             	and    eax,0xf
c000960c:	c3                   	ret    

c000960d <Virt::allocateKernelVirtualPages(int)>:
c000960d:	55                   	push   ebp
c000960e:	31 ed                	xor    ebp,ebp
c0009610:	57                   	push   edi
c0009611:	31 ff                	xor    edi,edi
c0009613:	56                   	push   esi
c0009614:	53                   	push   ebx
c0009615:	31 db                	xor    ebx,ebx
c0009617:	83 ec 0c             	sub    esp,0xc
c000961a:	8b 35 24 2f 02 c0    	mov    esi,DWORD PTR ds:0xc0022f24
c0009620:	56                   	push   esi
c0009621:	e8 c4 ff ff ff       	call   c00095ea <Virt::getPageState(unsigned long)>
c0009626:	5a                   	pop    edx
c0009627:	84 c0                	test   al,al
c0009629:	75 41                	jne    c000966c <Virt::allocateKernelVirtualPages(int)+0x5f>
c000962b:	85 db                	test   ebx,ebx
c000962d:	75 02                	jne    c0009631 <Virt::allocateKernelVirtualPages(int)+0x24>
c000962f:	89 f5                	mov    ebp,esi
c0009631:	83 c3 01             	add    ebx,0x1
c0009634:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c0009638:	74 5f                	je     c0009699 <Virt::allocateKernelVirtualPages(int)+0x8c>
c000963a:	83 c6 01             	add    esi,0x1
c000963d:	81 fe ff ff 0e 00    	cmp    esi,0xeffff
c0009643:	76 34                	jbe    c0009679 <Virt::allocateKernelVirtualPages(int)+0x6c>
c0009645:	c7 05 24 2f 02 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc0022f24,0xc8000
c000964f:	f7 c7 01 00 00 00    	test   edi,0x1
c0009655:	75 2a                	jne    c0009681 <Virt::allocateKernelVirtualPages(int)+0x74>
c0009657:	be 00 80 0c 00       	mov    esi,0xc8000
c000965c:	bf 01 00 00 00       	mov    edi,0x1
c0009661:	56                   	push   esi
c0009662:	e8 83 ff ff ff       	call   c00095ea <Virt::getPageState(unsigned long)>
c0009667:	5a                   	pop    edx
c0009668:	84 c0                	test   al,al
c000966a:	74 bf                	je     c000962b <Virt::allocateKernelVirtualPages(int)+0x1e>
c000966c:	31 db                	xor    ebx,ebx
c000966e:	83 c6 01             	add    esi,0x1
c0009671:	81 fe ff ff 0e 00    	cmp    esi,0xeffff
c0009677:	77 cc                	ja     c0009645 <Virt::allocateKernelVirtualPages(int)+0x38>
c0009679:	89 35 24 2f 02 c0    	mov    DWORD PTR ds:0xc0022f24,esi
c000967f:	eb 9f                	jmp    c0009620 <Virt::allocateKernelVirtualPages(int)+0x13>
c0009681:	83 ec 0c             	sub    esp,0xc
c0009684:	68 6c 09 02 c0       	push   0xc002096c
c0009689:	e8 5f 7b 00 00       	call   c00111ed <KePanic(char const*)>
c000968e:	8b 35 24 2f 02 c0    	mov    esi,DWORD PTR ds:0xc0022f24
c0009694:	83 c4 10             	add    esp,0x10
c0009697:	eb 87                	jmp    c0009620 <Virt::allocateKernelVirtualPages(int)+0x13>
c0009699:	89 2d 24 2f 02 c0    	mov    DWORD PTR ds:0xc0022f24,ebp
c000969f:	83 fb 01             	cmp    ebx,0x1
c00096a2:	74 6f                	je     c0009713 <Virt::allocateKernelVirtualPages(int)+0x106>
c00096a4:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00096a8:	85 c9                	test   ecx,ecx
c00096aa:	74 49                	je     c00096f5 <Virt::allocateKernelVirtualPages(int)+0xe8>
c00096ac:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00096b0:	89 e8                	mov    eax,ebp
c00096b2:	31 db                	xor    ebx,ebx
c00096b4:	8d 79 ff             	lea    edi,[ecx-0x1]
c00096b7:	eb 18                	jmp    c00096d1 <Virt::allocateKernelVirtualPages(int)+0xc4>
c00096b9:	6a 01                	push   0x1
c00096bb:	83 c3 01             	add    ebx,0x1
c00096be:	50                   	push   eax
c00096bf:	e8 ec fe ff ff       	call   c00095b0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00096c4:	58                   	pop    eax
c00096c5:	5a                   	pop    edx
c00096c6:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c00096ca:	74 29                	je     c00096f5 <Virt::allocateKernelVirtualPages(int)+0xe8>
c00096cc:	a1 24 2f 02 c0       	mov    eax,ds:0xc0022f24
c00096d1:	8d 50 01             	lea    edx,[eax+0x1]
c00096d4:	85 db                	test   ebx,ebx
c00096d6:	89 15 24 2f 02 c0    	mov    DWORD PTR ds:0xc0022f24,edx
c00096dc:	74 24                	je     c0009702 <Virt::allocateKernelVirtualPages(int)+0xf5>
c00096de:	39 df                	cmp    edi,ebx
c00096e0:	75 d7                	jne    c00096b9 <Virt::allocateKernelVirtualPages(int)+0xac>
c00096e2:	6a 03                	push   0x3
c00096e4:	83 c3 01             	add    ebx,0x1
c00096e7:	50                   	push   eax
c00096e8:	e8 c3 fe ff ff       	call   c00095b0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00096ed:	59                   	pop    ecx
c00096ee:	5e                   	pop    esi
c00096ef:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c00096f3:	75 d7                	jne    c00096cc <Virt::allocateKernelVirtualPages(int)+0xbf>
c00096f5:	83 c4 0c             	add    esp,0xc
c00096f8:	89 e8                	mov    eax,ebp
c00096fa:	5b                   	pop    ebx
c00096fb:	c1 e0 0c             	shl    eax,0xc
c00096fe:	5e                   	pop    esi
c00096ff:	5f                   	pop    edi
c0009700:	5d                   	pop    ebp
c0009701:	c3                   	ret    
c0009702:	6a 02                	push   0x2
c0009704:	bb 01 00 00 00       	mov    ebx,0x1
c0009709:	50                   	push   eax
c000970a:	e8 a1 fe ff ff       	call   c00095b0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000970f:	58                   	pop    eax
c0009710:	5a                   	pop    edx
c0009711:	eb b9                	jmp    c00096cc <Virt::allocateKernelVirtualPages(int)+0xbf>
c0009713:	6a 04                	push   0x4
c0009715:	8d 45 01             	lea    eax,[ebp+0x1]
c0009718:	55                   	push   ebp
c0009719:	a3 24 2f 02 c0       	mov    ds:0xc0022f24,eax
c000971e:	e8 8d fe ff ff       	call   c00095b0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009723:	5b                   	pop    ebx
c0009724:	89 e8                	mov    eax,ebp
c0009726:	5e                   	pop    esi
c0009727:	c1 e0 0c             	shl    eax,0xc
c000972a:	83 c4 0c             	add    esp,0xc
c000972d:	5b                   	pop    ebx
c000972e:	5e                   	pop    esi
c000972f:	5f                   	pop    edi
c0009730:	5d                   	pop    ebp
c0009731:	c3                   	ret    

c0009732 <Virt::freeSwapfilePage(unsigned long)>:
c0009732:	53                   	push   ebx
c0009733:	8b 15 ac 5f 02 c0    	mov    edx,DWORD PTR ds:0xc0025fac
c0009739:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000973d:	b8 01 00 00 00       	mov    eax,0x1
c0009742:	89 cb                	mov    ebx,ecx
c0009744:	d3 e0                	shl    eax,cl
c0009746:	c1 eb 05             	shr    ebx,0x5
c0009749:	f7 d0                	not    eax
c000974b:	8b 0c 9a             	mov    ecx,DWORD PTR [edx+ebx*4]
c000974e:	21 c1                	and    ecx,eax
c0009750:	89 0c 9a             	mov    DWORD PTR [edx+ebx*4],ecx
c0009753:	5b                   	pop    ebx
c0009754:	c3                   	ret    

c0009755 <Virt::swapIDToSector(unsigned long)>:
c0009755:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009759:	8b 15 2c 2f 02 c0    	mov    edx,DWORD PTR ds:0xc0022f2c
c000975f:	8b 0d 34 2f 02 c0    	mov    ecx,DWORD PTR ds:0xc0022f34
c0009765:	0f af c2             	imul   eax,edx
c0009768:	01 c8                	add    eax,ecx
c000976a:	c3                   	ret    

c000976b <Virt::allocateSwapfilePage()>:
c000976b:	55                   	push   ebp
c000976c:	31 d2                	xor    edx,edx
c000976e:	57                   	push   edi
c000976f:	56                   	push   esi
c0009770:	53                   	push   ebx
c0009771:	83 ec 0c             	sub    esp,0xc
c0009774:	8b 0d 2c 2f 02 c0    	mov    ecx,DWORD PTR ds:0xc0022f2c
c000977a:	a1 30 2f 02 c0       	mov    eax,ds:0xc0022f30
c000977f:	f7 f1                	div    ecx
c0009781:	39 0d 30 2f 02 c0    	cmp    DWORD PTR ds:0xc0022f30,ecx
c0009787:	72 2f                	jb     c00097b8 <Virt::allocateSwapfilePage()+0x4d>
c0009789:	8b 35 ac 5f 02 c0    	mov    esi,DWORD PTR ds:0xc0025fac
c000978f:	8b 16                	mov    edx,DWORD PTR [esi]
c0009791:	f6 c2 01             	test   dl,0x1
c0009794:	74 3e                	je     c00097d4 <Virt::allocateSwapfilePage()+0x69>
c0009796:	31 c9                	xor    ecx,ecx
c0009798:	bf 01 00 00 00       	mov    edi,0x1
c000979d:	eb 12                	jmp    c00097b1 <Virt::allocateSwapfilePage()+0x46>
c000979f:	89 fd                	mov    ebp,edi
c00097a1:	89 ca                	mov    edx,ecx
c00097a3:	d3 e5                	shl    ebp,cl
c00097a5:	c1 ea 05             	shr    edx,0x5
c00097a8:	8d 1c 96             	lea    ebx,[esi+edx*4]
c00097ab:	8b 13                	mov    edx,DWORD PTR [ebx]
c00097ad:	85 ea                	test   edx,ebp
c00097af:	74 2c                	je     c00097dd <Virt::allocateSwapfilePage()+0x72>
c00097b1:	83 c1 01             	add    ecx,0x1
c00097b4:	39 c8                	cmp    eax,ecx
c00097b6:	77 e7                	ja     c000979f <Virt::allocateSwapfilePage()+0x34>
c00097b8:	83 ec 0c             	sub    esp,0xc
c00097bb:	68 00 0c 02 c0       	push   0xc0020c00
c00097c0:	e8 28 7a 00 00       	call   c00111ed <KePanic(char const*)>
c00097c5:	83 c4 10             	add    esp,0x10
c00097c8:	31 c9                	xor    ecx,ecx
c00097ca:	83 c4 0c             	add    esp,0xc
c00097cd:	89 c8                	mov    eax,ecx
c00097cf:	5b                   	pop    ebx
c00097d0:	5e                   	pop    esi
c00097d1:	5f                   	pop    edi
c00097d2:	5d                   	pop    ebp
c00097d3:	c3                   	ret    
c00097d4:	89 f3                	mov    ebx,esi
c00097d6:	bd 01 00 00 00       	mov    ebp,0x1
c00097db:	31 c9                	xor    ecx,ecx
c00097dd:	09 ea                	or     edx,ebp
c00097df:	89 c8                	mov    eax,ecx
c00097e1:	89 13                	mov    DWORD PTR [ebx],edx
c00097e3:	83 c4 0c             	add    esp,0xc
c00097e6:	5b                   	pop    ebx
c00097e7:	5e                   	pop    esi
c00097e8:	5f                   	pop    edi
c00097e9:	5d                   	pop    ebp
c00097ea:	c3                   	ret    

c00097eb <Virt::virtualMemorySetup()>:
c00097eb:	53                   	push   ebx
c00097ec:	bb 00 80 0c 00       	mov    ebx,0xc8000
c00097f1:	6a 0f                	push   0xf
c00097f3:	53                   	push   ebx
c00097f4:	83 c3 01             	add    ebx,0x1
c00097f7:	e8 b4 fd ff ff       	call   c00095b0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00097fc:	58                   	pop    eax
c00097fd:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c0009803:	5a                   	pop    edx
c0009804:	75 eb                	jne    c00097f1 <Virt::virtualMemorySetup()+0x6>
c0009806:	bb 00 80 0c 00       	mov    ebx,0xc8000
c000980b:	6a 00                	push   0x0
c000980d:	53                   	push   ebx
c000980e:	83 c3 01             	add    ebx,0x1
c0009811:	e8 9a fd ff ff       	call   c00095b0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009816:	59                   	pop    ecx
c0009817:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c000981d:	58                   	pop    eax
c000981e:	75 eb                	jne    c000980b <Virt::virtualMemorySetup()+0x20>
c0009820:	bb 00 00 0d 00       	mov    ebx,0xd0000
c0009825:	6a 0f                	push   0xf
c0009827:	53                   	push   ebx
c0009828:	83 c3 01             	add    ebx,0x1
c000982b:	e8 80 fd ff ff       	call   c00095b0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009830:	58                   	pop    eax
c0009831:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c0009837:	5a                   	pop    edx
c0009838:	75 eb                	jne    c0009825 <Virt::virtualMemorySetup()+0x3a>
c000983a:	5b                   	pop    ebx
c000983b:	c3                   	ret    

c000983c <Virt::setupPageSwapping(int)>:
c000983c:	53                   	push   ebx
c000983d:	83 ec 0c             	sub    esp,0xc
c0009840:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0009844:	a1 e8 94 02 c0       	mov    eax,ds:0xc00294e8
c0009849:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000984f:	8b 10                	mov    edx,DWORD PTR [eax]
c0009851:	53                   	push   ebx
c0009852:	c1 e3 0b             	shl    ebx,0xb
c0009855:	68 17 0c 02 c0       	push   0xc0020c17
c000985a:	50                   	push   eax
c000985b:	ff 52 60             	call   DWORD PTR [edx+0x60]
c000985e:	89 1d 30 2f 02 c0    	mov    DWORD PTR ds:0xc0022f30,ebx
c0009864:	c6 05 38 2f 02 c0 43 	mov    BYTE PTR ds:0xc0022f38,0x43
c000986b:	c1 eb 08             	shr    ebx,0x8
c000986e:	a3 34 2f 02 c0       	mov    ds:0xc0022f34,eax
c0009873:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0009876:	c7 05 2c 2f 02 c0 08 00 00 00 	mov    DWORD PTR ds:0xc0022f2c,0x8
c0009880:	e8 31 e2 ff ff       	call   c0007ab6 <malloc>
c0009885:	83 c4 0c             	add    esp,0xc
c0009888:	89 c1                	mov    ecx,eax
c000988a:	a3 ac 5f 02 c0       	mov    ds:0xc0025fac,eax
c000988f:	31 d2                	xor    edx,edx
c0009891:	a1 30 2f 02 c0       	mov    eax,ds:0xc0022f30
c0009896:	f7 35 2c 2f 02 c0    	div    DWORD PTR ds:0xc0022f2c
c000989c:	c1 e8 05             	shr    eax,0x5
c000989f:	50                   	push   eax
c00098a0:	6a 00                	push   0x0
c00098a2:	51                   	push   ecx
c00098a3:	e8 48 6c ff ff       	call   c00004f0 <memset>
c00098a8:	83 c4 18             	add    esp,0x18
c00098ab:	5b                   	pop    ebx
c00098ac:	c3                   	ret    
c00098ad:	90                   	nop

c00098ae <VAS::setCPUSpecific(unsigned long)>:
c00098ae:	c3                   	ret    
c00098af:	90                   	nop

c00098b0 <VAS::VAS(VAS*)>:
c00098b0:	83 ec 0c             	sub    esp,0xc
c00098b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00098b7:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00098be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00098c2:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00098c9:	83 ec 0c             	sub    esp,0xc
c00098cc:	68 8c 09 02 c0       	push   0xc002098c
c00098d1:	e8 17 79 00 00       	call   c00111ed <KePanic(char const*)>
c00098d6:	83 c4 10             	add    esp,0x10
c00098d9:	90                   	nop
c00098da:	83 c4 0c             	add    esp,0xc
c00098dd:	c3                   	ret    

c00098de <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c00098de:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00098e2:	0f b6 4c 24 08       	movzx  ecx,BYTE PTR [esp+0x8]
c00098e7:	89 c2                	mov    edx,eax
c00098e9:	c1 e8 0a             	shr    eax,0xa
c00098ec:	c1 ea 16             	shr    edx,0x16
c00098ef:	83 f9 01             	cmp    ecx,0x1
c00098f2:	19 c9                	sbb    ecx,ecx
c00098f4:	c1 e2 0c             	shl    edx,0xc
c00098f7:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c00098fd:	25 fc 0f 00 00       	and    eax,0xffc
c0009902:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c0009909:	01 d0                	add    eax,edx
c000990b:	c3                   	ret    

c000990c <VAS::getPageTableEntry(unsigned long)>:
c000990c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009910:	89 ca                	mov    edx,ecx
c0009912:	c1 e9 0a             	shr    ecx,0xa
c0009915:	c1 ea 16             	shr    edx,0x16
c0009918:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c000991e:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c0009924:	c1 e0 0c             	shl    eax,0xc
c0009927:	8d 04 08             	lea    eax,[eax+ecx*1]
c000992a:	c3                   	ret    

c000992b <Virt::freeKernelVirtualPages(unsigned long)>:
c000992b:	55                   	push   ebp
c000992c:	57                   	push   edi
c000992d:	bf 01 00 00 00       	mov    edi,0x1
c0009932:	56                   	push   esi
c0009933:	53                   	push   ebx
c0009934:	83 ec 1c             	sub    esp,0x1c
c0009937:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000993b:	c1 ee 0c             	shr    esi,0xc
c000993e:	eb 48                	jmp    c0009988 <Virt::freeKernelVirtualPages(unsigned long)+0x5d>
c0009940:	83 ec 08             	sub    esp,0x8
c0009943:	a1 b0 5f 02 c0       	mov    eax,ds:0xc0025fb0
c0009948:	55                   	push   ebp
c0009949:	50                   	push   eax
c000994a:	e8 bd ff ff ff       	call   c000990c <VAS::getPageTableEntry(unsigned long)>
c000994f:	83 c4 10             	add    esp,0x10
c0009952:	8b 10                	mov    edx,DWORD PTR [eax]
c0009954:	f6 c6 04             	test   dh,0x4
c0009957:	75 70                	jne    c00099c9 <Virt::freeKernelVirtualPages(unsigned long)+0x9e>
c0009959:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000995f:	83 fb 04             	cmp    ebx,0x4
c0009962:	0f 84 8a 00 00 00    	je     c00099f2 <Virt::freeKernelVirtualPages(unsigned long)+0xc7>
c0009968:	83 fb 02             	cmp    ebx,0x2
c000996b:	0f 84 9a 00 00 00    	je     c0009a0b <Virt::freeKernelVirtualPages(unsigned long)+0xe0>
c0009971:	83 fb 03             	cmp    ebx,0x3
c0009974:	0f 84 be 00 00 00    	je     c0009a38 <Virt::freeKernelVirtualPages(unsigned long)+0x10d>
c000997a:	83 fb 01             	cmp    ebx,0x1
c000997d:	0f 84 a2 00 00 00    	je     c0009a25 <Virt::freeKernelVirtualPages(unsigned long)+0xfa>
c0009983:	83 c6 01             	add    esi,0x1
c0009986:	31 ff                	xor    edi,edi
c0009988:	56                   	push   esi
c0009989:	89 f5                	mov    ebp,esi
c000998b:	e8 5a fc ff ff       	call   c00095ea <Virt::getPageState(unsigned long)>
c0009990:	c1 e5 0c             	shl    ebp,0xc
c0009993:	0f b6 d8             	movzx  ebx,al
c0009996:	5a                   	pop    edx
c0009997:	85 db                	test   ebx,ebx
c0009999:	75 a5                	jne    c0009940 <Virt::freeKernelVirtualPages(unsigned long)+0x15>
c000999b:	83 ec 0c             	sub    esp,0xc
c000999e:	68 2e 0c 02 c0       	push   0xc0020c2e
c00099a3:	e8 45 78 00 00       	call   c00111ed <KePanic(char const*)>
c00099a8:	5a                   	pop    edx
c00099a9:	59                   	pop    ecx
c00099aa:	55                   	push   ebp
c00099ab:	8b 2d b0 5f 02 c0    	mov    ebp,DWORD PTR ds:0xc0025fb0
c00099b1:	55                   	push   ebp
c00099b2:	e8 55 ff ff ff       	call   c000990c <VAS::getPageTableEntry(unsigned long)>
c00099b7:	83 c4 10             	add    esp,0x10
c00099ba:	8b 10                	mov    edx,DWORD PTR [eax]
c00099bc:	f6 c6 04             	test   dh,0x4
c00099bf:	75 08                	jne    c00099c9 <Virt::freeKernelVirtualPages(unsigned long)+0x9e>
c00099c1:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00099c7:	eb ba                	jmp    c0009983 <Virt::freeKernelVirtualPages(unsigned long)+0x58>
c00099c9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00099cd:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c00099d3:	83 ec 0c             	sub    esp,0xc
c00099d6:	52                   	push   edx
c00099d7:	e8 7a e3 ff ff       	call   c0007d56 <Phys::freePage(unsigned long)>
c00099dc:	83 c4 10             	add    esp,0x10
c00099df:	83 fb 04             	cmp    ebx,0x4
c00099e2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00099e6:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00099ec:	0f 85 76 ff ff ff    	jne    c0009968 <Virt::freeKernelVirtualPages(unsigned long)+0x3d>
c00099f2:	83 e7 01             	and    edi,0x1
c00099f5:	75 46                	jne    c0009a3d <Virt::freeKernelVirtualPages(unsigned long)+0x112>
c00099f7:	c7 44 24 30 b0 09 02 c0 	mov    DWORD PTR [esp+0x30],0xc00209b0
c00099ff:	83 c4 1c             	add    esp,0x1c
c0009a02:	5b                   	pop    ebx
c0009a03:	5e                   	pop    esi
c0009a04:	5f                   	pop    edi
c0009a05:	5d                   	pop    ebp
c0009a06:	e9 e2 77 00 00       	jmp    c00111ed <KePanic(char const*)>
c0009a0b:	83 e7 01             	and    edi,0x1
c0009a0e:	75 15                	jne    c0009a25 <Virt::freeKernelVirtualPages(unsigned long)+0xfa>
c0009a10:	83 ec 0c             	sub    esp,0xc
c0009a13:	68 4a 0c 02 c0       	push   0xc0020c4a
c0009a18:	e8 d0 77 00 00       	call   c00111ed <KePanic(char const*)>
c0009a1d:	83 c4 10             	add    esp,0x10
c0009a20:	e9 5e ff ff ff       	jmp    c0009983 <Virt::freeKernelVirtualPages(unsigned long)+0x58>
c0009a25:	83 ec 08             	sub    esp,0x8
c0009a28:	6a 00                	push   0x0
c0009a2a:	56                   	push   esi
c0009a2b:	e8 80 fb ff ff       	call   c00095b0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009a30:	83 c4 10             	add    esp,0x10
c0009a33:	e9 4b ff ff ff       	jmp    c0009983 <Virt::freeKernelVirtualPages(unsigned long)+0x58>
c0009a38:	83 e7 01             	and    edi,0x1
c0009a3b:	75 16                	jne    c0009a53 <Virt::freeKernelVirtualPages(unsigned long)+0x128>
c0009a3d:	83 ec 08             	sub    esp,0x8
c0009a40:	6a 00                	push   0x0
c0009a42:	56                   	push   esi
c0009a43:	e8 68 fb ff ff       	call   c00095b0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009a48:	83 c4 10             	add    esp,0x10
c0009a4b:	83 c4 1c             	add    esp,0x1c
c0009a4e:	5b                   	pop    ebx
c0009a4f:	5e                   	pop    esi
c0009a50:	5f                   	pop    edi
c0009a51:	5d                   	pop    ebp
c0009a52:	c3                   	ret    
c0009a53:	c7 44 24 30 66 0c 02 c0 	mov    DWORD PTR [esp+0x30],0xc0020c66
c0009a5b:	83 c4 1c             	add    esp,0x1c
c0009a5e:	5b                   	pop    ebx
c0009a5f:	5e                   	pop    esi
c0009a60:	5f                   	pop    edi
c0009a61:	5d                   	pop    ebp
c0009a62:	e9 86 77 00 00       	jmp    c00111ed <KePanic(char const*)>
c0009a67:	90                   	nop

c0009a68 <VAS::freeAllocatedPages(unsigned long)>:
c0009a68:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009a6c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009a70:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c0009a74:	74 09                	je     c0009a7f <VAS::freeAllocatedPages(unsigned long)+0x17>
c0009a76:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009a7a:	e9 ac fe ff ff       	jmp    c000992b <Virt::freeKernelVirtualPages(unsigned long)>
c0009a7f:	c7 44 24 04 d4 09 02 c0 	mov    DWORD PTR [esp+0x4],0xc00209d4
c0009a87:	e9 b9 0e 00 00       	jmp    c000a945 <Dbg::kprintf(char const*, ...)>

c0009a8c <VAS::virtualToPhysical(unsigned long)>:
c0009a8c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009a90:	50                   	push   eax
c0009a91:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009a95:	52                   	push   edx
c0009a96:	e8 71 fe ff ff       	call   c000990c <VAS::getPageTableEntry(unsigned long)>
c0009a9b:	59                   	pop    ecx
c0009a9c:	8b 00                	mov    eax,DWORD PTR [eax]
c0009a9e:	5a                   	pop    edx
c0009a9f:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009aa4:	c3                   	ret    
c0009aa5:	90                   	nop

c0009aa6 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>:
c0009aa6:	55                   	push   ebp
c0009aa7:	57                   	push   edi
c0009aa8:	56                   	push   esi
c0009aa9:	53                   	push   ebx
c0009aaa:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0009aae:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0009ab2:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0009ab6:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0009aba:	85 db                	test   ebx,ebx
c0009abc:	7e 24                	jle    c0009ae2 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)+0x3c>
c0009abe:	c1 e3 0c             	shl    ebx,0xc
c0009ac1:	01 f3                	add    ebx,esi
c0009ac3:	56                   	push   esi
c0009ac4:	81 c6 00 10 00 00    	add    esi,0x1000
c0009aca:	55                   	push   ebp
c0009acb:	e8 3c fe ff ff       	call   c000990c <VAS::getPageTableEntry(unsigned long)>
c0009ad0:	5a                   	pop    edx
c0009ad1:	59                   	pop    ecx
c0009ad2:	8b 08                	mov    ecx,DWORD PTR [eax]
c0009ad4:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0009ad8:	21 f9                	and    ecx,edi
c0009ada:	09 d1                	or     ecx,edx
c0009adc:	39 f3                	cmp    ebx,esi
c0009ade:	89 08                	mov    DWORD PTR [eax],ecx
c0009ae0:	75 e1                	jne    c0009ac3 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)+0x1d>
c0009ae2:	5b                   	pop    ebx
c0009ae3:	5e                   	pop    esi
c0009ae4:	5f                   	pop    edi
c0009ae5:	5d                   	pop    ebp
c0009ae6:	c3                   	ret    
c0009ae7:	90                   	nop

c0009ae8 <VAS::VAS()>:
c0009ae8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009aec:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0009af3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009af7:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0009afe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009b02:	a3 b0 5f 02 c0       	mov    ds:0xc0025fb0,eax
c0009b07:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009b0b:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c0009b0f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009b13:	c6 00 01             	mov    BYTE PTR [eax],0x1
c0009b16:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009b1a:	c7 40 0c 00 10 00 c2 	mov    DWORD PTR [eax+0xc],0xc2001000
c0009b21:	ba 7d 40 02 c0       	mov    edx,0xc002407d
c0009b26:	b8 00 40 02 c0       	mov    eax,0xc0024000
c0009b2b:	29 c2                	sub    edx,eax
c0009b2d:	89 d0                	mov    eax,edx
c0009b2f:	05 ff 0f 00 00       	add    eax,0xfff
c0009b34:	c1 e8 0c             	shr    eax,0xc
c0009b37:	89 c2                	mov    edx,eax
c0009b39:	b8 00 40 02 c0       	mov    eax,0xc0024000
c0009b3e:	6a 04                	push   0x4
c0009b40:	6a ff                	push   0xffffffff
c0009b42:	52                   	push   edx
c0009b43:	50                   	push   eax
c0009b44:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009b48:	e8 59 ff ff ff       	call   c0009aa6 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c0009b4d:	83 c4 14             	add    esp,0x14
c0009b50:	90                   	nop
c0009b51:	c3                   	ret    

c0009b52 <VAS::setToWriteCombining(unsigned long, int)>:
c0009b52:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0009b57:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009b5d:	f6 80 8c 11 00 00 20 	test   BYTE PTR [eax+0x118c],0x20
c0009b64:	75 01                	jne    c0009b67 <VAS::setToWriteCombining(unsigned long, int)+0x15>
c0009b66:	c3                   	ret    
c0009b67:	68 80 00 00 00       	push   0x80
c0009b6c:	6a ff                	push   0xffffffff
c0009b6e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0009b72:	50                   	push   eax
c0009b73:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0009b77:	52                   	push   edx
c0009b78:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0009b7c:	51                   	push   ecx
c0009b7d:	e8 24 ff ff ff       	call   c0009aa6 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c0009b82:	83 c4 14             	add    esp,0x14
c0009b85:	c3                   	ret    

c0009b86 <VAS::mapOtherVASIn(bool, VAS*)>:
c0009b86:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009b8a:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0009b8d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009b91:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0009b94:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0009b99:	83 f8 01             	cmp    eax,0x1
c0009b9c:	19 c0                	sbb    eax,eax
c0009b9e:	83 ca 03             	or     edx,0x3
c0009ba1:	83 e0 fc             	and    eax,0xfffffffc
c0009ba4:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c0009bab:	0f 20 d8             	mov    eax,cr3
c0009bae:	0f 22 d8             	mov    cr3,eax
c0009bb1:	c3                   	ret    

c0009bb2 <VAS::~VAS()>:
c0009bb2:	83 ec 2c             	sub    esp,0x2c
c0009bb5:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0009bbd:	fa                   	cli    
c0009bbe:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c0009bc3:	83 c0 01             	add    eax,0x1
c0009bc6:	a3 68 a4 02 c0       	mov    ds:0xc002a468,eax
c0009bcb:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0009bd0:	8b 00                	mov    eax,DWORD PTR [eax]
c0009bd2:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0009bd5:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0009bdb:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0009bdf:	6a 01                	push   0x1
c0009be1:	50                   	push   eax
c0009be2:	e8 9f ff ff ff       	call   c0009b86 <VAS::mapOtherVASIn(bool, VAS*)>
c0009be7:	83 c4 0c             	add    esp,0xc
c0009bea:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0009bf2:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c0009bfa:	0f 8f d8 00 00 00    	jg     c0009cd8 <VAS::~VAS()+0x126>
c0009c00:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009c04:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009c07:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0009c0b:	c1 e2 02             	shl    edx,0x2
c0009c0e:	01 d0                	add    eax,edx
c0009c10:	8b 00                	mov    eax,DWORD PTR [eax]
c0009c12:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009c16:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009c1a:	83 e0 01             	and    eax,0x1
c0009c1d:	0f 84 ab 00 00 00    	je     c0009cce <VAS::~VAS()+0x11c>
c0009c23:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0009c2b:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c0009c33:	7f 74                	jg     c0009ca9 <VAS::~VAS()+0xf7>
c0009c35:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009c39:	c1 e0 0a             	shl    eax,0xa
c0009c3c:	89 c2                	mov    edx,eax
c0009c3e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0009c42:	01 d0                	add    eax,edx
c0009c44:	c1 e0 0c             	shl    eax,0xc
c0009c47:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009c4b:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0009c50:	8b 00                	mov    eax,DWORD PTR [eax]
c0009c52:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0009c55:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0009c5b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009c5f:	6a 01                	push   0x1
c0009c61:	50                   	push   eax
c0009c62:	e8 77 fc ff ff       	call   c00098de <VAS::getForeignPageTableEntry(bool, unsigned long)>
c0009c67:	83 c4 0c             	add    esp,0xc
c0009c6a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009c6e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009c72:	8b 00                	mov    eax,DWORD PTR [eax]
c0009c74:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009c78:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009c7c:	25 01 04 00 00       	and    eax,0x401
c0009c81:	3d 01 04 00 00       	cmp    eax,0x401
c0009c86:	75 1a                	jne    c0009ca2 <VAS::~VAS()+0xf0>
c0009c88:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009c8c:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009c91:	83 ec 0c             	sub    esp,0xc
c0009c94:	50                   	push   eax
c0009c95:	e8 bc e0 ff ff       	call   c0007d56 <Phys::freePage(unsigned long)>
c0009c9a:	83 c4 10             	add    esp,0x10
c0009c9d:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0009ca2:	83 44 24 14 01       	add    DWORD PTR [esp+0x14],0x1
c0009ca7:	eb 82                	jmp    c0009c2b <VAS::~VAS()+0x79>
c0009ca9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009cad:	25 00 04 00 00       	and    eax,0x400
c0009cb2:	74 1a                	je     c0009cce <VAS::~VAS()+0x11c>
c0009cb4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009cb8:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009cbd:	83 ec 0c             	sub    esp,0xc
c0009cc0:	50                   	push   eax
c0009cc1:	e8 90 e0 ff ff       	call   c0007d56 <Phys::freePage(unsigned long)>
c0009cc6:	83 c4 10             	add    esp,0x10
c0009cc9:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0009cce:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c0009cd3:	e9 1a ff ff ff       	jmp    c0009bf2 <VAS::~VAS()+0x40>
c0009cd8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009cdc:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009cdf:	83 ec 0c             	sub    esp,0xc
c0009ce2:	50                   	push   eax
c0009ce3:	e8 43 fc ff ff       	call   c000992b <Virt::freeKernelVirtualPages(unsigned long)>
c0009ce8:	83 c4 10             	add    esp,0x10
c0009ceb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009cef:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0009cf2:	83 ec 0c             	sub    esp,0xc
c0009cf5:	50                   	push   eax
c0009cf6:	e8 5b e0 ff ff       	call   c0007d56 <Phys::freePage(unsigned long)>
c0009cfb:	83 c4 10             	add    esp,0x10
c0009cfe:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0009d03:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c0009d08:	83 e8 01             	sub    eax,0x1
c0009d0b:	a3 68 a4 02 c0       	mov    ds:0xc002a468,eax
c0009d10:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c0009d15:	85 c0                	test   eax,eax
c0009d17:	75 01                	jne    c0009d1a <VAS::~VAS()+0x168>
c0009d19:	fb                   	sti    
c0009d1a:	90                   	nop
c0009d1b:	83 c4 2c             	add    esp,0x2c
c0009d1e:	c3                   	ret    
c0009d1f:	90                   	nop

c0009d20 <VAS::mapPage(unsigned long, unsigned long, int)>:
c0009d20:	55                   	push   ebp
c0009d21:	57                   	push   edi
c0009d22:	56                   	push   esi
c0009d23:	53                   	push   ebx
c0009d24:	83 ec 1c             	sub    esp,0x1c
c0009d27:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0009d2b:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0009d2f:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c0009d35:	77 08                	ja     c0009d3f <VAS::mapPage(unsigned long, unsigned long, int)+0x1f>
c0009d37:	0f 20 d8             	mov    eax,cr3
c0009d3a:	39 47 10             	cmp    DWORD PTR [edi+0x10],eax
c0009d3d:	75 49                	jne    c0009d88 <VAS::mapPage(unsigned long, unsigned long, int)+0x68>
c0009d3f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009d43:	09 d8                	or     eax,ebx
c0009d45:	a9 ff 0f 00 00       	test   eax,0xfff
c0009d4a:	75 59                	jne    c0009da5 <VAS::mapPage(unsigned long, unsigned long, int)+0x85>
c0009d4c:	89 de                	mov    esi,ebx
c0009d4e:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0009d51:	c1 ee 16             	shr    esi,0x16
c0009d54:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c0009d5b:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c0009d5f:	74 56                	je     c0009db7 <VAS::mapPage(unsigned long, unsigned long, int)+0x97>
c0009d61:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0009d65:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0009d69:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c0009d6f:	c1 eb 0a             	shr    ebx,0xa
c0009d72:	c1 e6 0c             	shl    esi,0xc
c0009d75:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c0009d7b:	09 d0                	or     eax,edx
c0009d7d:	89 04 33             	mov    DWORD PTR [ebx+esi*1],eax
c0009d80:	83 c4 1c             	add    esp,0x1c
c0009d83:	5b                   	pop    ebx
c0009d84:	5e                   	pop    esi
c0009d85:	5f                   	pop    edi
c0009d86:	5d                   	pop    ebp
c0009d87:	c3                   	ret    
c0009d88:	83 ec 0c             	sub    esp,0xc
c0009d8b:	68 f8 09 02 c0       	push   0xc00209f8
c0009d90:	e8 b0 0b 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0009d95:	83 c4 10             	add    esp,0x10
c0009d98:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009d9c:	09 d8                	or     eax,ebx
c0009d9e:	a9 ff 0f 00 00       	test   eax,0xfff
c0009da3:	74 a7                	je     c0009d4c <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c0009da5:	83 ec 0c             	sub    esp,0xc
c0009da8:	68 60 0a 02 c0       	push   0xc0020a60
c0009dad:	e8 3b 74 00 00       	call   c00111ed <KePanic(char const*)>
c0009db2:	83 c4 10             	add    esp,0x10
c0009db5:	eb 95                	jmp    c0009d4c <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c0009db7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009dbb:	e8 ff df ff ff       	call   c0007dbf <Phys::allocatePage()>
c0009dc0:	83 ec 0c             	sub    esp,0xc
c0009dc3:	89 c5                	mov    ebp,eax
c0009dc5:	8b 0d b0 5f 02 c0    	mov    ecx,DWORD PTR ds:0xc0025fb0
c0009dcb:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0009dcf:	6a 01                	push   0x1
c0009dd1:	e8 37 f8 ff ff       	call   c000960d <Virt::allocateKernelVirtualPages(int)>
c0009dd6:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0009ddd:	6a 01                	push   0x1
c0009ddf:	50                   	push   eax
c0009de0:	55                   	push   ebp
c0009de1:	81 cd 07 04 00 00    	or     ebp,0x407
c0009de7:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0009deb:	51                   	push   ecx
c0009dec:	e8 29 01 00 00       	call   c0009f1a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0009df1:	83 c4 1c             	add    esp,0x1c
c0009df4:	68 00 10 00 00       	push   0x1000
c0009df9:	6a 00                	push   0x0
c0009dfb:	50                   	push   eax
c0009dfc:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009e00:	e8 eb 66 ff ff       	call   c00004f0 <memset>
c0009e05:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0009e09:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009e0c:	e8 1a fb ff ff       	call   c000992b <Virt::freeKernelVirtualPages(unsigned long)>
c0009e11:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0009e15:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0009e18:	83 c4 10             	add    esp,0x10
c0009e1b:	89 2c 10             	mov    DWORD PTR [eax+edx*1],ebp
c0009e1e:	e9 3e ff ff ff       	jmp    c0009d61 <VAS::mapPage(unsigned long, unsigned long, int)+0x41>
c0009e23:	90                   	nop

c0009e24 <VAS::allocatePages(int, int)>:
c0009e24:	55                   	push   ebp
c0009e25:	57                   	push   edi
c0009e26:	56                   	push   esi
c0009e27:	53                   	push   ebx
c0009e28:	83 ec 1c             	sub    esp,0x1c
c0009e2b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0009e2f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0009e33:	80 7e 01 00          	cmp    BYTE PTR [esi+0x1],0x0
c0009e37:	75 71                	jne    c0009eaa <VAS::allocatePages(int, int)+0x86>
c0009e39:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0009e3c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009e40:	85 c0                	test   eax,eax
c0009e42:	74 4d                	je     c0009e91 <VAS::allocatePages(int, int)+0x6d>
c0009e44:	89 dd                	mov    ebp,ebx
c0009e46:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009e4a:	c1 e5 0c             	shl    ebp,0xc
c0009e4d:	01 c5                	add    ebp,eax
c0009e4f:	85 db                	test   ebx,ebx
c0009e51:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c0009e54:	7e 29                	jle    c0009e7f <VAS::allocatePages(int, int)+0x5b>
c0009e56:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0009e5a:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0009e5e:	81 cf 00 04 00 00    	or     edi,0x400
c0009e64:	e8 56 df ff ff       	call   c0007dbf <Phys::allocatePage()>
c0009e69:	57                   	push   edi
c0009e6a:	53                   	push   ebx
c0009e6b:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009e71:	50                   	push   eax
c0009e72:	56                   	push   esi
c0009e73:	e8 a8 fe ff ff       	call   c0009d20 <VAS::mapPage(unsigned long, unsigned long, int)>
c0009e78:	83 c4 10             	add    esp,0x10
c0009e7b:	39 dd                	cmp    ebp,ebx
c0009e7d:	75 e5                	jne    c0009e64 <VAS::allocatePages(int, int)+0x40>
c0009e7f:	0f 20 d8             	mov    eax,cr3
c0009e82:	0f 22 d8             	mov    cr3,eax
c0009e85:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009e89:	83 c4 1c             	add    esp,0x1c
c0009e8c:	5b                   	pop    ebx
c0009e8d:	5e                   	pop    esi
c0009e8e:	5f                   	pop    edi
c0009e8f:	5d                   	pop    ebp
c0009e90:	c3                   	ret    
c0009e91:	83 ec 0c             	sub    esp,0xc
c0009e94:	68 84 0a 02 c0       	push   0xc0020a84
c0009e99:	e8 4f 73 00 00       	call   c00111ed <KePanic(char const*)>
c0009e9e:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0009ea1:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009ea5:	83 c4 10             	add    esp,0x10
c0009ea8:	eb 9a                	jmp    c0009e44 <VAS::allocatePages(int, int)+0x20>
c0009eaa:	83 ec 0c             	sub    esp,0xc
c0009ead:	53                   	push   ebx
c0009eae:	e8 5a f7 ff ff       	call   c000960d <Virt::allocateKernelVirtualPages(int)>
c0009eb3:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009eb7:	83 c4 10             	add    esp,0x10
c0009eba:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c0009ebf:	77 37                	ja     c0009ef8 <VAS::allocatePages(int, int)+0xd4>
c0009ec1:	85 db                	test   ebx,ebx
c0009ec3:	7e ba                	jle    c0009e7f <VAS::allocatePages(int, int)+0x5b>
c0009ec5:	c1 e3 0c             	shl    ebx,0xc
c0009ec8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009ecc:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0009ed0:	8d 2c 03             	lea    ebp,[ebx+eax*1]
c0009ed3:	81 cf 00 04 00 00    	or     edi,0x400
c0009ed9:	89 c3                	mov    ebx,eax
c0009edb:	e8 df de ff ff       	call   c0007dbf <Phys::allocatePage()>
c0009ee0:	57                   	push   edi
c0009ee1:	53                   	push   ebx
c0009ee2:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009ee8:	50                   	push   eax
c0009ee9:	56                   	push   esi
c0009eea:	e8 31 fe ff ff       	call   c0009d20 <VAS::mapPage(unsigned long, unsigned long, int)>
c0009eef:	83 c4 10             	add    esp,0x10
c0009ef2:	39 dd                	cmp    ebp,ebx
c0009ef4:	75 e5                	jne    c0009edb <VAS::allocatePages(int, int)+0xb7>
c0009ef6:	eb 87                	jmp    c0009e7f <VAS::allocatePages(int, int)+0x5b>
c0009ef8:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0009efd:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009f03:	f6 80 8c 11 00 00 10 	test   BYTE PTR [eax+0x118c],0x10
c0009f0a:	74 b5                	je     c0009ec1 <VAS::allocatePages(int, int)+0x9d>
c0009f0c:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0009f10:	80 ce 01             	or     dh,0x1
c0009f13:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0009f17:	eb a8                	jmp    c0009ec1 <VAS::allocatePages(int, int)+0x9d>
c0009f19:	90                   	nop

c0009f1a <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c0009f1a:	55                   	push   ebp
c0009f1b:	57                   	push   edi
c0009f1c:	56                   	push   esi
c0009f1d:	53                   	push   ebx
c0009f1e:	83 ec 0c             	sub    esp,0xc
c0009f21:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0009f25:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0009f29:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0009f2d:	85 db                	test   ebx,ebx
c0009f2f:	7e 2f                	jle    c0009f60 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x46>
c0009f31:	c1 e3 0c             	shl    ebx,0xc
c0009f34:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0009f38:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0009f3c:	01 d3                	add    ebx,edx
c0009f3e:	55                   	push   ebp
c0009f3f:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0009f43:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0009f47:	29 c2                	sub    edx,eax
c0009f49:	01 f2                	add    edx,esi
c0009f4b:	52                   	push   edx
c0009f4c:	56                   	push   esi
c0009f4d:	81 c6 00 10 00 00    	add    esi,0x1000
c0009f53:	57                   	push   edi
c0009f54:	e8 c7 fd ff ff       	call   c0009d20 <VAS::mapPage(unsigned long, unsigned long, int)>
c0009f59:	83 c4 10             	add    esp,0x10
c0009f5c:	39 de                	cmp    esi,ebx
c0009f5e:	75 de                	jne    c0009f3e <VAS::mapRange(unsigned long, unsigned long, int, int)+0x24>
c0009f60:	0f 20 d8             	mov    eax,cr3
c0009f63:	0f 22 d8             	mov    cr3,eax
c0009f66:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0009f6a:	83 c4 0c             	add    esp,0xc
c0009f6d:	5b                   	pop    ebx
c0009f6e:	5e                   	pop    esi
c0009f6f:	5f                   	pop    edi
c0009f70:	5d                   	pop    ebp
c0009f71:	c3                   	ret    

c0009f72 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c0009f72:	55                   	push   ebp
c0009f73:	57                   	push   edi
c0009f74:	56                   	push   esi
c0009f75:	53                   	push   ebx
c0009f76:	83 ec 1c             	sub    esp,0x1c
c0009f79:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0009f7d:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0009f81:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0009f85:	09 f8                	or     eax,edi
c0009f87:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0009f8b:	a9 ff 0f 00 00       	test   eax,0xfff
c0009f90:	75 4f                	jne    c0009fe1 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x6f>
c0009f92:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0009f96:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0009f99:	c1 eb 16             	shr    ebx,0x16
c0009f9c:	8d 3c 9d 00 00 00 00 	lea    edi,[ebx*4+0x0]
c0009fa3:	f6 04 38 01          	test   BYTE PTR [eax+edi*1],0x1
c0009fa7:	74 52                	je     c0009ffb <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x89>
c0009fa9:	0f b6 f2             	movzx  esi,dl
c0009fac:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0009fb0:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c0009fb4:	c1 e8 0a             	shr    eax,0xa
c0009fb7:	83 fe 01             	cmp    esi,0x1
c0009fba:	19 d2                	sbb    edx,edx
c0009fbc:	c1 e3 0c             	shl    ebx,0xc
c0009fbf:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
c0009fc5:	25 fc 0f 00 00       	and    eax,0xffc
c0009fca:	01 d8                	add    eax,ebx
c0009fcc:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0009fd0:	09 d9                	or     ecx,ebx
c0009fd2:	89 8c 02 00 00 c0 c2 	mov    DWORD PTR [edx+eax*1-0x3d400000],ecx
c0009fd9:	83 c4 1c             	add    esp,0x1c
c0009fdc:	5b                   	pop    ebx
c0009fdd:	5e                   	pop    esi
c0009fde:	5f                   	pop    edi
c0009fdf:	5d                   	pop    ebp
c0009fe0:	c3                   	ret    
c0009fe1:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009fe5:	83 ec 0c             	sub    esp,0xc
c0009fe8:	68 b0 0a 02 c0       	push   0xc0020ab0
c0009fed:	e8 fb 71 00 00       	call   c00111ed <KePanic(char const*)>
c0009ff2:	83 c4 10             	add    esp,0x10
c0009ff5:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009ff9:	eb 97                	jmp    c0009f92 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x20>
c0009ffb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009fff:	e8 bb dd ff ff       	call   c0007dbf <Phys::allocatePage()>
c000a004:	83 ec 0c             	sub    esp,0xc
c000a007:	89 c5                	mov    ebp,eax
c000a009:	8b 0d b0 5f 02 c0    	mov    ecx,DWORD PTR ds:0xc0025fb0
c000a00f:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000a013:	6a 01                	push   0x1
c000a015:	e8 f3 f5 ff ff       	call   c000960d <Virt::allocateKernelVirtualPages(int)>
c000a01a:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c000a021:	6a 01                	push   0x1
c000a023:	50                   	push   eax
c000a024:	55                   	push   ebp
c000a025:	81 cd 07 04 00 00    	or     ebp,0x407
c000a02b:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c000a02f:	51                   	push   ecx
c000a030:	e8 e5 fe ff ff       	call   c0009f1a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a035:	83 c4 1c             	add    esp,0x1c
c000a038:	68 00 10 00 00       	push   0x1000
c000a03d:	6a 00                	push   0x0
c000a03f:	50                   	push   eax
c000a040:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a044:	e8 a7 64 ff ff       	call   c00004f0 <memset>
c000a049:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000a04d:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a050:	e8 d6 f8 ff ff       	call   c000992b <Virt::freeKernelVirtualPages(unsigned long)>
c000a055:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000a058:	83 c4 10             	add    esp,0x10
c000a05b:	89 2c 38             	mov    DWORD PTR [eax+edi*1],ebp
c000a05e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000a062:	e9 42 ff ff ff       	jmp    c0009fa9 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x37>
c000a067:	90                   	nop

c000a068 <VAS::VAS(bool)>:
c000a068:	53                   	push   ebx
c000a069:	83 ec 28             	sub    esp,0x28
c000a06c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000a070:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c000a074:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a078:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000a07f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a083:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c000a08a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a08e:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c000a092:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c000a095:	e8 25 dd ff ff       	call   c0007dbf <Phys::allocatePage()>
c000a09a:	89 c2                	mov    edx,eax
c000a09c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a0a0:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000a0a3:	8b 1d b0 5f 02 c0    	mov    ebx,DWORD PTR ds:0xc0025fb0
c000a0a9:	83 ec 0c             	sub    esp,0xc
c000a0ac:	6a 01                	push   0x1
c000a0ae:	e8 5a f5 ff ff       	call   c000960d <Virt::allocateKernelVirtualPages(int)>
c000a0b3:	83 c4 10             	add    esp,0x10
c000a0b6:	89 c2                	mov    edx,eax
c000a0b8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a0bc:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000a0bf:	83 ec 0c             	sub    esp,0xc
c000a0c2:	6a 03                	push   0x3
c000a0c4:	6a 01                	push   0x1
c000a0c6:	52                   	push   edx
c000a0c7:	50                   	push   eax
c000a0c8:	53                   	push   ebx
c000a0c9:	e8 4c fe ff ff       	call   c0009f1a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a0ce:	83 c4 20             	add    esp,0x20
c000a0d1:	89 c2                	mov    edx,eax
c000a0d3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a0d7:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000a0da:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000a0e2:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c000a0ea:	7f 1d                	jg     c000a109 <VAS::VAS(bool)+0xa1>
c000a0ec:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a0f0:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a0f3:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000a0f7:	c1 e2 02             	shl    edx,0x2
c000a0fa:	01 d0                	add    eax,edx
c000a0fc:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c000a102:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c000a107:	eb d9                	jmp    c000a0e2 <VAS::VAS(bool)+0x7a>
c000a109:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c000a111:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c000a119:	7f 7e                	jg     c000a199 <VAS::VAS(bool)+0x131>
c000a11b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a11f:	2d 00 02 00 00       	sub    eax,0x200
c000a124:	c1 e0 0c             	shl    eax,0xc
c000a127:	83 c8 05             	or     eax,0x5
c000a12a:	89 c2                	mov    edx,eax
c000a12c:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000a131:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a137:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c000a13d:	83 e0 10             	and    eax,0x10
c000a140:	0f b6 c0             	movzx  eax,al
c000a143:	85 c0                	test   eax,eax
c000a145:	74 07                	je     c000a14e <VAS::VAS(bool)+0xe6>
c000a147:	b8 00 01 00 00       	mov    eax,0x100
c000a14c:	eb 05                	jmp    c000a153 <VAS::VAS(bool)+0xeb>
c000a14e:	b8 00 00 00 00       	mov    eax,0x0
c000a153:	09 d0                	or     eax,edx
c000a155:	89 c1                	mov    ecx,eax
c000a157:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a15b:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a15e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000a162:	c1 e2 02             	shl    edx,0x2
c000a165:	01 d0                	add    eax,edx
c000a167:	89 ca                	mov    edx,ecx
c000a169:	89 10                	mov    DWORD PTR [eax],edx
c000a16b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a16f:	2d 40 03 00 00       	sub    eax,0x340
c000a174:	83 f8 7f             	cmp    eax,0x7f
c000a177:	77 16                	ja     c000a18f <VAS::VAS(bool)+0x127>
c000a179:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a17d:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a180:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000a184:	c1 e2 02             	shl    edx,0x2
c000a187:	01 d0                	add    eax,edx
c000a189:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c000a18f:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c000a194:	e9 78 ff ff ff       	jmp    c000a111 <VAS::VAS(bool)+0xa9>
c000a199:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000a19e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a1a4:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c000a1aa:	83 e0 10             	and    eax,0x10
c000a1ad:	0f b6 c0             	movzx  eax,al
c000a1b0:	85 c0                	test   eax,eax
c000a1b2:	74 07                	je     c000a1bb <VAS::VAS(bool)+0x153>
c000a1b4:	b8 03 41 00 00       	mov    eax,0x4103
c000a1b9:	eb 05                	jmp    c000a1c0 <VAS::VAS(bool)+0x158>
c000a1bb:	b8 03 40 00 00       	mov    eax,0x4003
c000a1c0:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000a1c4:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c000a1c7:	81 c2 20 0c 00 00    	add    edx,0xc20
c000a1cd:	89 02                	mov    DWORD PTR [edx],eax
c000a1cf:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a1d3:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000a1d6:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000a1db:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a1e1:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c000a1e7:	83 e0 10             	and    eax,0x10
c000a1ea:	0f b6 c0             	movzx  eax,al
c000a1ed:	85 c0                	test   eax,eax
c000a1ef:	74 07                	je     c000a1f8 <VAS::VAS(bool)+0x190>
c000a1f1:	b8 00 01 00 00       	mov    eax,0x100
c000a1f6:	eb 05                	jmp    c000a1fd <VAS::VAS(bool)+0x195>
c000a1f8:	b8 00 00 00 00       	mov    eax,0x0
c000a1fd:	09 c2                	or     edx,eax
c000a1ff:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a203:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a206:	05 fc 0f 00 00       	add    eax,0xffc
c000a20b:	83 ca 03             	or     edx,0x3
c000a20e:	89 10                	mov    DWORD PTR [eax],edx
c000a210:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000a215:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a21b:	83 ec 0c             	sub    esp,0xc
c000a21e:	50                   	push   eax
c000a21f:	e8 52 26 00 00       	call   c000c876 <Device::getName()>
c000a224:	83 c4 10             	add    esp,0x10
c000a227:	83 ec 08             	sub    esp,0x8
c000a22a:	68 80 0c 02 c0       	push   0xc0020c80
c000a22f:	50                   	push   eax
c000a230:	e8 1b 65 ff ff       	call   c0000750 <strcmp>
c000a235:	83 c4 10             	add    esp,0x10
c000a238:	85 c0                	test   eax,eax
c000a23a:	0f 94 c0             	sete   al
c000a23d:	0f b6 c0             	movzx  eax,al
c000a240:	85 c0                	test   eax,eax
c000a242:	74 68                	je     c000a2ac <VAS::VAS(bool)+0x244>
c000a244:	fa                   	cli    
c000a245:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000a24a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a250:	05 7c 09 00 00       	add    eax,0x97c
c000a255:	83 ec 0c             	sub    esp,0xc
c000a258:	50                   	push   eax
c000a259:	e8 50 d3 ff ff       	call   c00075ae <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000a25e:	83 c4 10             	add    esp,0x10
c000a261:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a266:	89 c3                	mov    ebx,eax
c000a268:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000a26d:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a273:	05 7c 09 00 00       	add    eax,0x97c
c000a278:	83 ec 0c             	sub    esp,0xc
c000a27b:	50                   	push   eax
c000a27c:	e8 2d d3 ff ff       	call   c00075ae <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000a281:	83 c4 10             	add    esp,0x10
c000a284:	83 ec 08             	sub    esp,0x8
c000a287:	50                   	push   eax
c000a288:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a28c:	e8 7b f6 ff ff       	call   c000990c <VAS::getPageTableEntry(unsigned long)>
c000a291:	83 c4 10             	add    esp,0x10
c000a294:	8b 00                	mov    eax,DWORD PTR [eax]
c000a296:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a29b:	6a 11                	push   0x11
c000a29d:	53                   	push   ebx
c000a29e:	50                   	push   eax
c000a29f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a2a3:	e8 78 fa ff ff       	call   c0009d20 <VAS::mapPage(unsigned long, unsigned long, int)>
c000a2a8:	83 c4 10             	add    esp,0x10
c000a2ab:	fb                   	sti    
c000a2ac:	90                   	nop
c000a2ad:	83 c4 28             	add    esp,0x28
c000a2b0:	5b                   	pop    ebx
c000a2b1:	c3                   	ret    

c000a2b2 <VAS::evict(unsigned long)>:
c000a2b2:	55                   	push   ebp
c000a2b3:	57                   	push   edi
c000a2b4:	56                   	push   esi
c000a2b5:	53                   	push   ebx
c000a2b6:	83 ec 1c             	sub    esp,0x1c
c000a2b9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a2bd:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000a2c1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a2c5:	e8 a1 f4 ff ff       	call   c000976b <Virt::allocateSwapfilePage()>
c000a2ca:	89 c7                	mov    edi,eax
c000a2cc:	a1 2c 2f 02 c0       	mov    eax,ds:0xc0022f2c
c000a2d1:	85 c0                	test   eax,eax
c000a2d3:	7e 40                	jle    c000a315 <VAS::evict(unsigned long)+0x63>
c000a2d5:	89 ee                	mov    esi,ebp
c000a2d7:	31 db                	xor    ebx,ebx
c000a2d9:	83 ec 0c             	sub    esp,0xc
c000a2dc:	57                   	push   edi
c000a2dd:	e8 73 f4 ff ff       	call   c0009755 <Virt::swapIDToSector(unsigned long)>
c000a2e2:	89 34 24             	mov    DWORD PTR [esp],esi
c000a2e5:	01 d8                	add    eax,ebx
c000a2e7:	6a 01                	push   0x1
c000a2e9:	31 d2                	xor    edx,edx
c000a2eb:	83 c3 01             	add    ebx,0x1
c000a2ee:	52                   	push   edx
c000a2ef:	81 c6 00 02 00 00    	add    esi,0x200
c000a2f5:	50                   	push   eax
c000a2f6:	0f be 05 38 2f 02 c0 	movsx  eax,BYTE PTR ds:0xc0022f38
c000a2fd:	8b 04 85 dc 93 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6c24]
c000a304:	50                   	push   eax
c000a305:	e8 26 37 00 00       	call   c000da30 <LogicalDisk::write(unsigned long long, int, void*)>
c000a30a:	83 c4 20             	add    esp,0x20
c000a30d:	39 1d 2c 2f 02 c0    	cmp    DWORD PTR ds:0xc0022f2c,ebx
c000a313:	7f c4                	jg     c000a2d9 <VAS::evict(unsigned long)+0x27>
c000a315:	83 ec 08             	sub    esp,0x8
c000a318:	c1 e7 0c             	shl    edi,0xc
c000a31b:	55                   	push   ebp
c000a31c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a320:	50                   	push   eax
c000a321:	e8 e6 f5 ff ff       	call   c000990c <VAS::getPageTableEntry(unsigned long)>
c000a326:	8b 10                	mov    edx,DWORD PTR [eax]
c000a328:	89 d3                	mov    ebx,edx
c000a32a:	81 e2 fe 07 00 00    	and    edx,0x7fe
c000a330:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000a336:	09 d7                	or     edi,edx
c000a338:	89 38                	mov    DWORD PTR [eax],edi
c000a33a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000a33d:	8b 15 a8 5f 02 c0    	mov    edx,DWORD PTR ds:0xc0025fa8
c000a343:	83 c2 01             	add    edx,0x1
c000a346:	89 15 a8 5f 02 c0    	mov    DWORD PTR ds:0xc0025fa8,edx
c000a34c:	e8 05 da ff ff       	call   c0007d56 <Phys::freePage(unsigned long)>
c000a351:	0f 20 d8             	mov    eax,cr3
c000a354:	0f 22 d8             	mov    cr3,eax
c000a357:	8b 0d a8 5f 02 c0    	mov    ecx,DWORD PTR ds:0xc0025fa8
c000a35d:	51                   	push   ecx
c000a35e:	55                   	push   ebp
c000a35f:	53                   	push   ebx
c000a360:	68 d4 0a 02 c0       	push   0xc0020ad4
c000a365:	e8 db 05 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000a36a:	a1 a4 5f 02 c0       	mov    eax,ds:0xc0025fa4
c000a36f:	c7 44 24 50 8e 0c 02 c0 	mov    DWORD PTR [esp+0x50],0xc0020c8e
c000a377:	8d 50 01             	lea    edx,[eax+0x1]
c000a37a:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c000a37e:	89 15 a4 5f 02 c0    	mov    DWORD PTR ds:0xc0025fa4,edx
c000a384:	83 c4 3c             	add    esp,0x3c
c000a387:	5b                   	pop    ebx
c000a388:	5e                   	pop    esi
c000a389:	5f                   	pop    edi
c000a38a:	5d                   	pop    ebp
c000a38b:	e9 b5 05 00 00       	jmp    c000a945 <Dbg::kprintf(char const*, ...)>

c000a390 <VAS::tryLoadBackOffDisk(unsigned long)>:
c000a390:	55                   	push   ebp
c000a391:	57                   	push   edi
c000a392:	56                   	push   esi
c000a393:	53                   	push   ebx
c000a394:	81 ec 1c 10 00 00    	sub    esp,0x101c
c000a39a:	8b b4 24 34 10 00 00 	mov    esi,DWORD PTR [esp+0x1034]
c000a3a1:	89 f3                	mov    ebx,esi
c000a3a3:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000a3a9:	81 fe ff ff bf ff    	cmp    esi,0xffbfffff
c000a3af:	77 22                	ja     c000a3d3 <VAS::tryLoadBackOffDisk(unsigned long)+0x43>
c000a3b1:	83 ec 08             	sub    esp,0x8
c000a3b4:	56                   	push   esi
c000a3b5:	68 b1 0c 02 c0       	push   0xc0020cb1
c000a3ba:	e8 86 05 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000a3bf:	83 c4 10             	add    esp,0x10
c000a3c2:	85 db                	test   ebx,ebx
c000a3c4:	75 2a                	jne    c000a3f0 <VAS::tryLoadBackOffDisk(unsigned long)+0x60>
c000a3c6:	31 c0                	xor    eax,eax
c000a3c8:	81 c4 1c 10 00 00    	add    esp,0x101c
c000a3ce:	5b                   	pop    ebx
c000a3cf:	5e                   	pop    esi
c000a3d0:	5f                   	pop    edi
c000a3d1:	5d                   	pop    ebp
c000a3d2:	c3                   	ret    
c000a3d3:	83 ec 0c             	sub    esp,0xc
c000a3d6:	68 9f 0c 02 c0       	push   0xc0020c9f
c000a3db:	e8 0d 6e 00 00       	call   c00111ed <KePanic(char const*)>
c000a3e0:	5f                   	pop    edi
c000a3e1:	5d                   	pop    ebp
c000a3e2:	56                   	push   esi
c000a3e3:	68 b1 0c 02 c0       	push   0xc0020cb1
c000a3e8:	e8 58 05 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000a3ed:	83 c4 10             	add    esp,0x10
c000a3f0:	83 ec 08             	sub    esp,0x8
c000a3f3:	53                   	push   ebx
c000a3f4:	8b 8c 24 3c 10 00 00 	mov    ecx,DWORD PTR [esp+0x103c]
c000a3fb:	51                   	push   ecx
c000a3fc:	e8 0b f5 ff ff       	call   c000990c <VAS::getPageTableEntry(unsigned long)>
c000a401:	83 c4 10             	add    esp,0x10
c000a404:	89 c2                	mov    edx,eax
c000a406:	85 c0                	test   eax,eax
c000a408:	74 bc                	je     c000a3c6 <VAS::tryLoadBackOffDisk(unsigned long)+0x36>
c000a40a:	8b 28                	mov    ebp,DWORD PTR [eax]
c000a40c:	f7 c5 00 02 00 00    	test   ebp,0x200
c000a412:	0f 85 c0 00 00 00    	jne    c000a4d8 <VAS::tryLoadBackOffDisk(unsigned long)+0x148>
c000a418:	89 e8                	mov    eax,ebp
c000a41a:	25 01 04 00 00       	and    eax,0x401
c000a41f:	3d 00 04 00 00       	cmp    eax,0x400
c000a424:	75 a0                	jne    c000a3c6 <VAS::tryLoadBackOffDisk(unsigned long)+0x36>
c000a426:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a42a:	c1 ed 0c             	shr    ebp,0xc
c000a42d:	e8 8d d9 ff ff       	call   c0007dbf <Phys::allocatePage()>
c000a432:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000a436:	8b 0a                	mov    ecx,DWORD PTR [edx]
c000a438:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c000a43e:	09 c1                	or     ecx,eax
c000a440:	81 c9 01 08 00 00    	or     ecx,0x801
c000a446:	89 0a                	mov    DWORD PTR [edx],ecx
c000a448:	8b 15 2c 2f 02 c0    	mov    edx,DWORD PTR ds:0xc0022f2c
c000a44e:	85 d2                	test   edx,edx
c000a450:	7e 40                	jle    c000a492 <VAS::tryLoadBackOffDisk(unsigned long)+0x102>
c000a452:	89 df                	mov    edi,ebx
c000a454:	31 f6                	xor    esi,esi
c000a456:	83 ec 0c             	sub    esp,0xc
c000a459:	55                   	push   ebp
c000a45a:	e8 f6 f2 ff ff       	call   c0009755 <Virt::swapIDToSector(unsigned long)>
c000a45f:	89 3c 24             	mov    DWORD PTR [esp],edi
c000a462:	01 f0                	add    eax,esi
c000a464:	6a 01                	push   0x1
c000a466:	31 d2                	xor    edx,edx
c000a468:	83 c6 01             	add    esi,0x1
c000a46b:	52                   	push   edx
c000a46c:	81 c7 00 02 00 00    	add    edi,0x200
c000a472:	50                   	push   eax
c000a473:	0f be 05 38 2f 02 c0 	movsx  eax,BYTE PTR ds:0xc0022f38
c000a47a:	8b 04 85 dc 93 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6c24]
c000a481:	50                   	push   eax
c000a482:	e8 3d 35 00 00       	call   c000d9c4 <LogicalDisk::read(unsigned long long, int, void*)>
c000a487:	83 c4 20             	add    esp,0x20
c000a48a:	39 35 2c 2f 02 c0    	cmp    DWORD PTR ds:0xc0022f2c,esi
c000a490:	7f c4                	jg     c000a456 <VAS::tryLoadBackOffDisk(unsigned long)+0xc6>
c000a492:	83 ec 04             	sub    esp,0x4
c000a495:	a1 a8 5f 02 c0       	mov    eax,ds:0xc0025fa8
c000a49a:	83 e8 01             	sub    eax,0x1
c000a49d:	50                   	push   eax
c000a49e:	a3 a8 5f 02 c0       	mov    ds:0xc0025fa8,eax
c000a4a3:	53                   	push   ebx
c000a4a4:	68 c4 0c 02 c0       	push   0xc0020cc4
c000a4a9:	e8 97 04 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000a4ae:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000a4b1:	e8 7c f2 ff ff       	call   c0009732 <Virt::freeSwapfilePage(unsigned long)>
c000a4b6:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c000a4bb:	83 c4 10             	add    esp,0x10
c000a4be:	83 e8 01             	sub    eax,0x1
c000a4c1:	a3 68 a4 02 c0       	mov    ds:0xc002a468,eax
c000a4c6:	85 c0                	test   eax,eax
c000a4c8:	75 01                	jne    c000a4cb <VAS::tryLoadBackOffDisk(unsigned long)+0x13b>
c000a4ca:	fb                   	sti    
c000a4cb:	0f 20 d8             	mov    eax,cr3
c000a4ce:	0f 22 d8             	mov    cr3,eax
c000a4d1:	b0 01                	mov    al,0x1
c000a4d3:	e9 f0 fe ff ff       	jmp    c000a3c8 <VAS::tryLoadBackOffDisk(unsigned long)+0x38>
c000a4d8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a4dc:	bd 00 10 00 00       	mov    ebp,0x1000
c000a4e1:	83 ec 0c             	sub    esp,0xc
c000a4e4:	89 de                	mov    esi,ebx
c000a4e6:	68 04 0b 02 c0       	push   0xc0020b04
c000a4eb:	e8 55 04 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000a4f0:	8d 7c 24 20          	lea    edi,[esp+0x20]
c000a4f4:	e8 c6 d8 ff ff       	call   c0007dbf <Phys::allocatePage()>
c000a4f9:	89 e9                	mov    ecx,ebp
c000a4fb:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000a4fd:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000a501:	8b 0a                	mov    ecx,DWORD PTR [edx]
c000a503:	81 e1 ff 0d 00 00    	and    ecx,0xdff
c000a509:	09 c8                	or     eax,ecx
c000a50b:	83 c8 02             	or     eax,0x2
c000a50e:	89 02                	mov    DWORD PTR [edx],eax
c000a510:	0f 20 d8             	mov    eax,cr3
c000a513:	0f 22 d8             	mov    cr3,eax
c000a516:	8d 74 24 20          	lea    esi,[esp+0x20]
c000a51a:	89 df                	mov    edi,ebx
c000a51c:	89 e9                	mov    ecx,ebp
c000a51e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000a520:	b0 01                	mov    al,0x1
c000a522:	83 c4 10             	add    esp,0x10
c000a525:	e9 9e fe ff ff       	jmp    c000a3c8 <VAS::tryLoadBackOffDisk(unsigned long)+0x38>

c000a52a <VAS::allocateSharedMemoryWithKernel(unsigned long, unsigned long*)>:
c000a52a:	55                   	push   ebp
c000a52b:	57                   	push   edi
c000a52c:	56                   	push   esi
c000a52d:	53                   	push   ebx
c000a52e:	83 ec 28             	sub    esp,0x28
c000a531:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c000a535:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000a539:	50                   	push   eax
c000a53a:	e8 ce f0 ff ff       	call   c000960d <Virt::allocateKernelVirtualPages(int)>
c000a53f:	83 c4 0c             	add    esp,0xc
c000a542:	89 c5                	mov    ebp,eax
c000a544:	6a 07                	push   0x7
c000a546:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000a54a:	52                   	push   edx
c000a54b:	56                   	push   esi
c000a54c:	e8 d3 f8 ff ff       	call   c0009e24 <VAS::allocatePages(int, int)>
c000a551:	83 c4 10             	add    esp,0x10
c000a554:	89 c7                	mov    edi,eax
c000a556:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000a55a:	85 c9                	test   ecx,ecx
c000a55c:	74 2f                	je     c000a58d <VAS::allocateSharedMemoryWithKernel(unsigned long, unsigned long*)+0x63>
c000a55e:	31 db                	xor    ebx,ebx
c000a560:	e8 5a d8 ff ff       	call   c0007dbf <Phys::allocatePage()>
c000a565:	83 c3 01             	add    ebx,0x1
c000a568:	6a 03                	push   0x3
c000a56a:	55                   	push   ebp
c000a56b:	50                   	push   eax
c000a56c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a570:	56                   	push   esi
c000a571:	e8 aa f7 ff ff       	call   c0009d20 <VAS::mapPage(unsigned long, unsigned long, int)>
c000a576:	6a 07                	push   0x7
c000a578:	57                   	push   edi
c000a579:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000a57d:	50                   	push   eax
c000a57e:	56                   	push   esi
c000a57f:	e8 9c f7 ff ff       	call   c0009d20 <VAS::mapPage(unsigned long, unsigned long, int)>
c000a584:	83 c4 20             	add    esp,0x20
c000a587:	39 5c 24 34          	cmp    DWORD PTR [esp+0x34],ebx
c000a58b:	75 d3                	jne    c000a560 <VAS::allocateSharedMemoryWithKernel(unsigned long, unsigned long*)+0x36>
c000a58d:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000a591:	89 28                	mov    DWORD PTR [eax],ebp
c000a593:	83 c4 1c             	add    esp,0x1c
c000a596:	89 f8                	mov    eax,edi
c000a598:	5b                   	pop    ebx
c000a599:	5e                   	pop    esi
c000a59a:	5f                   	pop    edi
c000a59b:	5d                   	pop    ebp
c000a59c:	c3                   	ret    
c000a59d:	90                   	nop

c000a59e <VAS::freeSharedMemoryWithKernel(unsigned long, unsigned long)>:
c000a59e:	53                   	push   ebx
c000a59f:	83 ec 14             	sub    esp,0x14
c000a5a2:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c000a5a6:	68 24 0b 02 c0       	push   0xc0020b24
c000a5ab:	e8 95 03 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000a5b0:	c7 04 24 84 0b 02 c0 	mov    DWORD PTR [esp],0xc0020b84
c000a5b7:	e8 89 03 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000a5bc:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c000a5c0:	83 c4 18             	add    esp,0x18
c000a5c3:	5b                   	pop    ebx
c000a5c4:	e9 62 f3 ff ff       	jmp    c000992b <Virt::freeKernelVirtualPages(unsigned long)>
c000a5c9:	90                   	nop

c000a5ca <VAS::scanForEviction()>:
c000a5ca:	57                   	push   edi
c000a5cb:	56                   	push   esi
c000a5cc:	31 f6                	xor    esi,esi
c000a5ce:	53                   	push   ebx
c000a5cf:	83 ec 10             	sub    esp,0x10
c000a5d2:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000a5d6:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c000a5d9:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c000a5df:	75 0e                	jne    c000a5ef <VAS::scanForEviction()+0x25>
c000a5e1:	89 da                	mov    edx,ebx
c000a5e3:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000a5e6:	c1 ea 16             	shr    edx,0x16
c000a5e9:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c000a5ed:	74 57                	je     c000a646 <VAS::scanForEviction()+0x7c>
c000a5ef:	53                   	push   ebx
c000a5f0:	57                   	push   edi
c000a5f1:	e8 16 f3 ff ff       	call   c000990c <VAS::getPageTableEntry(unsigned long)>
c000a5f6:	5a                   	pop    edx
c000a5f7:	8b 10                	mov    edx,DWORD PTR [eax]
c000a5f9:	59                   	pop    ecx
c000a5fa:	89 d1                	mov    ecx,edx
c000a5fc:	c1 e9 0c             	shr    ecx,0xc
c000a5ff:	74 10                	je     c000a611 <VAS::scanForEviction()+0x47>
c000a601:	89 d1                	mov    ecx,edx
c000a603:	81 e1 01 08 00 00    	and    ecx,0x801
c000a609:	81 f9 01 08 00 00    	cmp    ecx,0x801
c000a60f:	74 40                	je     c000a651 <VAS::scanForEviction()+0x87>
c000a611:	81 c3 00 10 00 00    	add    ebx,0x1000
c000a617:	81 fb ff ff ff fe    	cmp    ebx,0xfeffffff
c000a61d:	76 2d                	jbe    c000a64c <VAS::scanForEviction()+0x82>
c000a61f:	83 c6 01             	add    esi,0x1
c000a622:	c7 47 08 00 00 00 00 	mov    DWORD PTR [edi+0x8],0x0
c000a629:	83 fe 03             	cmp    esi,0x3
c000a62c:	74 32                	je     c000a660 <VAS::scanForEviction()+0x96>
c000a62e:	31 db                	xor    ebx,ebx
c000a630:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c000a636:	75 b7                	jne    c000a5ef <VAS::scanForEviction()+0x25>
c000a638:	89 da                	mov    edx,ebx
c000a63a:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000a63d:	c1 ea 16             	shr    edx,0x16
c000a640:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c000a644:	75 a9                	jne    c000a5ef <VAS::scanForEviction()+0x25>
c000a646:	81 c3 00 00 40 00    	add    ebx,0x400000
c000a64c:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c000a64f:	eb 88                	jmp    c000a5d9 <VAS::scanForEviction()+0xf>
c000a651:	f6 c2 20             	test   dl,0x20
c000a654:	74 13                	je     c000a669 <VAS::scanForEviction()+0x9f>
c000a656:	83 e2 df             	and    edx,0xffffffdf
c000a659:	89 10                	mov    DWORD PTR [eax],edx
c000a65b:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c000a65e:	eb b1                	jmp    c000a611 <VAS::scanForEviction()+0x47>
c000a660:	83 c4 10             	add    esp,0x10
c000a663:	31 c0                	xor    eax,eax
c000a665:	5b                   	pop    ebx
c000a666:	5e                   	pop    esi
c000a667:	5f                   	pop    edi
c000a668:	c3                   	ret    
c000a669:	83 ec 08             	sub    esp,0x8
c000a66c:	89 d0                	mov    eax,edx
c000a66e:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a673:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000a677:	53                   	push   ebx
c000a678:	68 d9 0c 02 c0       	push   0xc0020cd9
c000a67d:	e8 c3 02 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000a682:	58                   	pop    eax
c000a683:	8b 4f 08             	mov    ecx,DWORD PTR [edi+0x8]
c000a686:	5a                   	pop    edx
c000a687:	51                   	push   ecx
c000a688:	57                   	push   edi
c000a689:	e8 24 fc ff ff       	call   c000a2b2 <VAS::evict(unsigned long)>
c000a68e:	5b                   	pop    ebx
c000a68f:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000a692:	5e                   	pop    esi
c000a693:	50                   	push   eax
c000a694:	68 ed 0c 02 c0       	push   0xc0020ced
c000a699:	e8 a7 02 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000a69e:	58                   	pop    eax
c000a69f:	5a                   	pop    edx
c000a6a0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000a6a4:	50                   	push   eax
c000a6a5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a6a9:	68 00 0d 02 c0       	push   0xc0020d00
c000a6ae:	e8 92 02 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000a6b3:	8b 4f 08             	mov    ecx,DWORD PTR [edi+0x8]
c000a6b6:	83 c4 10             	add    esp,0x10
c000a6b9:	81 c1 00 10 00 00    	add    ecx,0x1000
c000a6bf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a6c3:	89 4f 08             	mov    DWORD PTR [edi+0x8],ecx
c000a6c6:	83 c4 10             	add    esp,0x10
c000a6c9:	5b                   	pop    ebx
c000a6ca:	5e                   	pop    esi
c000a6cb:	5f                   	pop    edi
c000a6cc:	c3                   	ret    

c000a6cd <mapVASFirstTime>:
c000a6cd:	55                   	push   ebp
c000a6ce:	57                   	push   edi
c000a6cf:	56                   	push   esi
c000a6d0:	53                   	push   ebx
c000a6d1:	83 ec 0c             	sub    esp,0xc
c000a6d4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000a6d9:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000a6dc:	83 fa 01             	cmp    edx,0x1
c000a6df:	0f 84 cb 00 00 00    	je     c000a7b0 <mapVASFirstTime+0xe3>
c000a6e5:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c000a6e8:	8b 68 38             	mov    ebp,DWORD PTR [eax+0x38]
c000a6eb:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c000a6f0:	c1 e5 15             	shl    ebp,0x15
c000a6f3:	bf 00 90 e7 01       	mov    edi,0x1e79000
c000a6f8:	8b b2 12 05 00 00    	mov    esi,DWORD PTR [edx+0x512]
c000a6fe:	29 eb                	sub    ebx,ebp
c000a700:	29 ef                	sub    edi,ebp
c000a702:	e8 b8 d6 ff ff       	call   c0007dbf <Phys::allocatePage()>
c000a707:	83 ec 0c             	sub    esp,0xc
c000a70a:	68 03 04 00 00       	push   0x403
c000a70f:	6a 01                	push   0x1
c000a711:	53                   	push   ebx
c000a712:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000a718:	50                   	push   eax
c000a719:	56                   	push   esi
c000a71a:	e8 fb f7 ff ff       	call   c0009f1a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a71f:	83 c4 20             	add    esp,0x20
c000a722:	39 fb                	cmp    ebx,edi
c000a724:	75 dc                	jne    c000a702 <mapVASFirstTime+0x35>
c000a726:	bb 00 f0 ff 01       	mov    ebx,0x1fff000
c000a72b:	bf 00 f0 fd 01       	mov    edi,0x1fdf000
c000a730:	29 eb                	sub    ebx,ebp
c000a732:	29 ef                	sub    edi,ebp
c000a734:	e8 86 d6 ff ff       	call   c0007dbf <Phys::allocatePage()>
c000a739:	0f b6 56 01          	movzx  edx,BYTE PTR [esi+0x1]
c000a73d:	83 fa 01             	cmp    edx,0x1
c000a740:	19 d2                	sbb    edx,edx
c000a742:	83 ec 0c             	sub    esp,0xc
c000a745:	83 e2 04             	and    edx,0x4
c000a748:	81 c2 03 04 00 00    	add    edx,0x403
c000a74e:	52                   	push   edx
c000a74f:	6a 01                	push   0x1
c000a751:	53                   	push   ebx
c000a752:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000a758:	50                   	push   eax
c000a759:	56                   	push   esi
c000a75a:	e8 bb f7 ff ff       	call   c0009f1a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a75f:	83 c4 20             	add    esp,0x20
c000a762:	39 df                	cmp    edi,ebx
c000a764:	75 ce                	jne    c000a734 <mapVASFirstTime+0x67>
c000a766:	83 ec 0c             	sub    esp,0xc
c000a769:	bb 7c 50 02 c0       	mov    ebx,0xc002507c
c000a76e:	6a 04                	push   0x4
c000a770:	81 eb 00 40 02 c0    	sub    ebx,0xc0024000
c000a776:	6a ff                	push   0xffffffff
c000a778:	c1 eb 0c             	shr    ebx,0xc
c000a77b:	53                   	push   ebx
c000a77c:	68 00 40 02 c0       	push   0xc0024000
c000a781:	56                   	push   esi
c000a782:	e8 1f f3 ff ff       	call   c0009aa6 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c000a787:	83 c4 14             	add    esp,0x14
c000a78a:	a1 b0 5f 02 c0       	mov    eax,ds:0xc0025fb0
c000a78f:	6a 04                	push   0x4
c000a791:	6a ff                	push   0xffffffff
c000a793:	53                   	push   ebx
c000a794:	68 00 40 02 c0       	push   0xc0024000
c000a799:	50                   	push   eax
c000a79a:	e8 07 f3 ff ff       	call   c0009aa6 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c000a79f:	0f 20 d8             	mov    eax,cr3
c000a7a2:	0f 22 d8             	mov    cr3,eax
c000a7a5:	83 c4 20             	add    esp,0x20
c000a7a8:	83 c4 0c             	add    esp,0xc
c000a7ab:	5b                   	pop    ebx
c000a7ac:	5e                   	pop    esi
c000a7ad:	5f                   	pop    edi
c000a7ae:	5d                   	pop    ebp
c000a7af:	c3                   	ret    
c000a7b0:	83 ec 0c             	sub    esp,0xc
c000a7b3:	68 0d 0d 02 c0       	push   0xc0020d0d
c000a7b8:	e8 88 01 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000a7bd:	83 c4 10             	add    esp,0x10
c000a7c0:	83 c4 0c             	add    esp,0xc
c000a7c3:	5b                   	pop    ebx
c000a7c4:	5e                   	pop    esi
c000a7c5:	5f                   	pop    edi
c000a7c6:	5d                   	pop    ebp
c000a7c7:	c3                   	ret    

c000a7c8 <__cxa_atexit>:
c000a7c8:	31 c0                	xor    eax,eax
c000a7ca:	c3                   	ret    

c000a7cb <__cxa_finalize>:
c000a7cb:	c3                   	ret    

c000a7cc <__stack_chk_fail>:
c000a7cc:	55                   	push   ebp
c000a7cd:	89 e5                	mov    ebp,esp
c000a7cf:	83 ec 10             	sub    esp,0x10
c000a7d2:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000a7d5:	68 26 0d 02 c0       	push   0xc0020d26
c000a7da:	e8 66 01 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000a7df:	58                   	pop    eax
c000a7e0:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000a7e3:	5a                   	pop    edx
c000a7e4:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000a7e7:	68 26 0d 02 c0       	push   0xc0020d26
c000a7ec:	e8 54 01 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000a7f1:	c7 04 24 2e 0d 02 c0 	mov    DWORD PTR [esp],0xc0020d2e
c000a7f8:	e8 f0 69 00 00       	call   c00111ed <KePanic(char const*)>
c000a7fd:	83 c4 10             	add    esp,0x10
c000a800:	c9                   	leave  
c000a801:	c3                   	ret    

c000a802 <__cxa_pure_virtual>:
c000a802:	83 ec 18             	sub    esp,0x18
c000a805:	68 46 0d 02 c0       	push   0xc0020d46
c000a80a:	e8 de 69 00 00       	call   c00111ed <KePanic(char const*)>
c000a80f:	83 c4 1c             	add    esp,0x1c
c000a812:	c3                   	ret    

c000a813 <operator new[](unsigned long)>:
c000a813:	e9 9e d2 ff ff       	jmp    c0007ab6 <malloc>

c000a818 <operator delete(void*, unsigned long)>:
c000a818:	e9 b9 d2 ff ff       	jmp    c0007ad6 <rfree>

c000a81d <operator delete[](void*)>:
c000a81d:	e9 b4 d2 ff ff       	jmp    c0007ad6 <rfree>

c000a822 <operator delete[](void*, unsigned long)>:
c000a822:	e9 af d2 ff ff       	jmp    c0007ad6 <rfree>

c000a827 <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c000a827:	55                   	push   ebp
c000a828:	57                   	push   edi
c000a829:	56                   	push   esi
c000a82a:	be 4f 08 02 c0       	mov    esi,0xc002084f
c000a82f:	53                   	push   ebx
c000a830:	83 ec 20             	sub    esp,0x20
c000a833:	a0 4e 08 02 c0       	mov    al,ds:0xc002084e
c000a838:	8d 7c 24 10          	lea    edi,[esp+0x10]
c000a83c:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000a840:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000a844:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000a848:	b8 10 00 00 00       	mov    eax,0x10
c000a84d:	f7 c7 02 00 00 00    	test   edi,0x2
c000a853:	75 60                	jne    c000a8b5 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x8e>
c000a855:	89 c1                	mov    ecx,eax
c000a857:	c1 e9 02             	shr    ecx,0x2
c000a85a:	fc                   	cld    
c000a85b:	31 d2                	xor    edx,edx
c000a85d:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000a85f:	a8 02                	test   al,0x2
c000a861:	74 0b                	je     c000a86e <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x47>
c000a863:	66 8b 16             	mov    dx,WORD PTR [esi]
c000a866:	66 89 17             	mov    WORD PTR [edi],dx
c000a869:	ba 02 00 00 00       	mov    edx,0x2
c000a86e:	a8 01                	test   al,0x1
c000a870:	74 06                	je     c000a878 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x51>
c000a872:	8a 04 16             	mov    al,BYTE PTR [esi+edx*1]
c000a875:	88 04 17             	mov    BYTE PTR [edi+edx*1],al
c000a878:	89 ee                	mov    esi,ebp
c000a87a:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000a87e:	eb 02                	jmp    c000a882 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x5b>
c000a880:	89 c6                	mov    esi,eax
c000a882:	31 d2                	xor    edx,edx
c000a884:	83 c1 01             	add    ecx,0x1
c000a887:	89 f0                	mov    eax,esi
c000a889:	f7 f3                	div    ebx
c000a88b:	39 de                	cmp    esi,ebx
c000a88d:	73 f1                	jae    c000a880 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x59>
c000a88f:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c000a892:	eb 02                	jmp    c000a896 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x6f>
c000a894:	89 c5                	mov    ebp,eax
c000a896:	31 d2                	xor    edx,edx
c000a898:	83 e9 01             	sub    ecx,0x1
c000a89b:	89 e8                	mov    eax,ebp
c000a89d:	f7 f3                	div    ebx
c000a89f:	39 dd                	cmp    ebp,ebx
c000a8a1:	8a 54 14 0f          	mov    dl,BYTE PTR [esp+edx*1+0xf]
c000a8a5:	88 11                	mov    BYTE PTR [ecx],dl
c000a8a7:	73 eb                	jae    c000a894 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x6d>
c000a8a9:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000a8ad:	83 c4 20             	add    esp,0x20
c000a8b0:	5b                   	pop    ebx
c000a8b1:	5e                   	pop    esi
c000a8b2:	5f                   	pop    edi
c000a8b3:	5d                   	pop    ebp
c000a8b4:	c3                   	ret    
c000a8b5:	66 8b 16             	mov    dx,WORD PTR [esi]
c000a8b8:	83 c7 02             	add    edi,0x2
c000a8bb:	66 89 57 fe          	mov    WORD PTR [edi-0x2],dx
c000a8bf:	83 c6 02             	add    esi,0x2
c000a8c2:	83 e8 02             	sub    eax,0x2
c000a8c5:	eb 8e                	jmp    c000a855 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x2e>

c000a8c7 <Dbg::logc(char)>:
c000a8c7:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a8cb:	f6 05 d0 5e 02 c0 10 	test   BYTE PTR ds:0xc0025ed0,0x10
c000a8d2:	75 12                	jne    c000a8e6 <Dbg::logc(char)+0x1f>
c000a8d4:	ba fd 03 00 00       	mov    edx,0x3fd
c000a8d9:	ec                   	in     al,dx
c000a8da:	a8 20                	test   al,0x20
c000a8dc:	74 fb                	je     c000a8d9 <Dbg::logc(char)+0x12>
c000a8de:	ba f8 03 00 00       	mov    edx,0x3f8
c000a8e3:	88 c8                	mov    al,cl
c000a8e5:	ee                   	out    dx,al
c000a8e6:	c3                   	ret    

c000a8e7 <Dbg::logs(char*)>:
c000a8e7:	53                   	push   ebx
c000a8e8:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000a8ec:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000a8ef:	85 c0                	test   eax,eax
c000a8f1:	74 11                	je     c000a904 <Dbg::logs(char*)+0x1d>
c000a8f3:	83 c3 01             	add    ebx,0x1
c000a8f6:	50                   	push   eax
c000a8f7:	e8 cb ff ff ff       	call   c000a8c7 <Dbg::logc(char)>
c000a8fc:	58                   	pop    eax
c000a8fd:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000a900:	85 c0                	test   eax,eax
c000a902:	75 ef                	jne    c000a8f3 <Dbg::logs(char*)+0xc>
c000a904:	5b                   	pop    ebx
c000a905:	c3                   	ret    

c000a906 <Dbg::logWriteInt(unsigned int)>:
c000a906:	83 ec 10             	sub    esp,0x10
c000a909:	6a 0a                	push   0xa
c000a90b:	8d 44 24 08          	lea    eax,[esp+0x8]
c000a90f:	50                   	push   eax
c000a910:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a914:	50                   	push   eax
c000a915:	e8 0d ff ff ff       	call   c000a827 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000a91a:	50                   	push   eax
c000a91b:	e8 c7 ff ff ff       	call   c000a8e7 <Dbg::logs(char*)>
c000a920:	83 c4 20             	add    esp,0x20
c000a923:	c3                   	ret    

c000a924 <Dbg::logWriteIntBase(unsigned int, int)>:
c000a924:	83 ec 10             	sub    esp,0x10
c000a927:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a92b:	50                   	push   eax
c000a92c:	8d 44 24 08          	lea    eax,[esp+0x8]
c000a930:	50                   	push   eax
c000a931:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000a935:	52                   	push   edx
c000a936:	e8 ec fe ff ff       	call   c000a827 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000a93b:	50                   	push   eax
c000a93c:	e8 a6 ff ff ff       	call   c000a8e7 <Dbg::logs(char*)>
c000a941:	83 c4 20             	add    esp,0x20
c000a944:	c3                   	ret    

c000a945 <Dbg::kprintf(char const*, ...)>:
c000a945:	55                   	push   ebp
c000a946:	57                   	push   edi
c000a947:	56                   	push   esi
c000a948:	53                   	push   ebx
c000a949:	83 ec 0c             	sub    esp,0xc
c000a94c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000a950:	f6 05 d0 5e 02 c0 10 	test   BYTE PTR ds:0xc0025ed0,0x10
c000a957:	74 08                	je     c000a961 <Dbg::kprintf(char const*, ...)+0x1c>
c000a959:	83 c4 0c             	add    esp,0xc
c000a95c:	5b                   	pop    ebx
c000a95d:	5e                   	pop    esi
c000a95e:	5f                   	pop    edi
c000a95f:	5d                   	pop    ebp
c000a960:	c3                   	ret    
c000a961:	8d 44 24 24          	lea    eax,[esp+0x24]
c000a965:	31 ff                	xor    edi,edi
c000a967:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000a96b:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000a96e:	85 c0                	test   eax,eax
c000a970:	74 e7                	je     c000a959 <Dbg::kprintf(char const*, ...)+0x14>
c000a972:	8d 77 01             	lea    esi,[edi+0x1]
c000a975:	83 f8 25             	cmp    eax,0x25
c000a978:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c000a97b:	75 47                	jne    c000a9c4 <Dbg::kprintf(char const*, ...)+0x7f>
c000a97d:	83 c7 02             	add    edi,0x2
c000a980:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c000a983:	8d 34 3b             	lea    esi,[ebx+edi*1]
c000a986:	83 e8 25             	sub    eax,0x25
c000a989:	0f b6 c0             	movzx  eax,al
c000a98c:	83 f8 53             	cmp    eax,0x53
c000a98f:	0f 87 ce 00 00 00    	ja     c000aa63 <Dbg::kprintf(char const*, ...)+0x11e>
c000a995:	ff 24 85 5c 0d 02 c0 	jmp    DWORD PTR [eax*4-0x3ffdf2a4]
c000a99c:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a9a0:	89 c8                	mov    eax,ecx
c000a9a2:	83 c1 04             	add    ecx,0x4
c000a9a5:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000a9a9:	8b 28                	mov    ebp,DWORD PTR [eax]
c000a9ab:	55                   	push   ebp
c000a9ac:	e8 55 ff ff ff       	call   c000a906 <Dbg::logWriteInt(unsigned int)>
c000a9b1:	58                   	pop    eax
c000a9b2:	0f be 06             	movsx  eax,BYTE PTR [esi]
c000a9b5:	85 c0                	test   eax,eax
c000a9b7:	74 a0                	je     c000a959 <Dbg::kprintf(char const*, ...)+0x14>
c000a9b9:	8d 77 01             	lea    esi,[edi+0x1]
c000a9bc:	83 f8 25             	cmp    eax,0x25
c000a9bf:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c000a9c2:	74 b9                	je     c000a97d <Dbg::kprintf(char const*, ...)+0x38>
c000a9c4:	50                   	push   eax
c000a9c5:	89 f7                	mov    edi,esi
c000a9c7:	e8 fb fe ff ff       	call   c000a8c7 <Dbg::logc(char)>
c000a9cc:	89 ee                	mov    esi,ebp
c000a9ce:	58                   	pop    eax
c000a9cf:	eb e1                	jmp    c000a9b2 <Dbg::kprintf(char const*, ...)+0x6d>
c000a9d1:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a9d5:	89 c8                	mov    eax,ecx
c000a9d7:	83 c1 04             	add    ecx,0x4
c000a9da:	8b 00                	mov    eax,DWORD PTR [eax]
c000a9dc:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000a9e0:	50                   	push   eax
c000a9e1:	e8 01 ff ff ff       	call   c000a8e7 <Dbg::logs(char*)>
c000a9e6:	58                   	pop    eax
c000a9e7:	eb c9                	jmp    c000a9b2 <Dbg::kprintf(char const*, ...)+0x6d>
c000a9e9:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000a9ed:	89 d0                	mov    eax,edx
c000a9ef:	83 c2 04             	add    edx,0x4
c000a9f2:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a9f6:	8b 00                	mov    eax,DWORD PTR [eax]
c000a9f8:	50                   	push   eax
c000a9f9:	e8 08 ff ff ff       	call   c000a906 <Dbg::logWriteInt(unsigned int)>
c000a9fe:	58                   	pop    eax
c000a9ff:	eb b1                	jmp    c000a9b2 <Dbg::kprintf(char const*, ...)+0x6d>
c000aa01:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000aa05:	89 d0                	mov    eax,edx
c000aa07:	83 c2 04             	add    edx,0x4
c000aa0a:	0f be 00             	movsx  eax,BYTE PTR [eax]
c000aa0d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aa11:	50                   	push   eax
c000aa12:	e8 b0 fe ff ff       	call   c000a8c7 <Dbg::logc(char)>
c000aa17:	58                   	pop    eax
c000aa18:	eb 98                	jmp    c000a9b2 <Dbg::kprintf(char const*, ...)+0x6d>
c000aa1a:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000aa1e:	89 c8                	mov    eax,ecx
c000aa20:	83 c1 04             	add    ecx,0x4
c000aa23:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000aa27:	6a 10                	push   0x10
c000aa29:	8b 08                	mov    ecx,DWORD PTR [eax]
c000aa2b:	51                   	push   ecx
c000aa2c:	e8 f3 fe ff ff       	call   c000a924 <Dbg::logWriteIntBase(unsigned int, int)>
c000aa31:	5d                   	pop    ebp
c000aa32:	58                   	pop    eax
c000aa33:	e9 7a ff ff ff       	jmp    c000a9b2 <Dbg::kprintf(char const*, ...)+0x6d>
c000aa38:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000aa3c:	89 d0                	mov    eax,edx
c000aa3e:	83 c2 08             	add    edx,0x8
c000aa41:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aa45:	6a 10                	push   0x10
c000aa47:	8b 00                	mov    eax,DWORD PTR [eax]
c000aa49:	50                   	push   eax
c000aa4a:	e8 d5 fe ff ff       	call   c000a924 <Dbg::logWriteIntBase(unsigned int, int)>
c000aa4f:	58                   	pop    eax
c000aa50:	5a                   	pop    edx
c000aa51:	e9 5c ff ff ff       	jmp    c000a9b2 <Dbg::kprintf(char const*, ...)+0x6d>
c000aa56:	6a 25                	push   0x25
c000aa58:	e8 6a fe ff ff       	call   c000a8c7 <Dbg::logc(char)>
c000aa5d:	5a                   	pop    edx
c000aa5e:	e9 4f ff ff ff       	jmp    c000a9b2 <Dbg::kprintf(char const*, ...)+0x6d>
c000aa63:	6a 25                	push   0x25
c000aa65:	e8 5d fe ff ff       	call   c000a8c7 <Dbg::logc(char)>
c000aa6a:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c000aa6e:	50                   	push   eax
c000aa6f:	e8 53 fe ff ff       	call   c000a8c7 <Dbg::logc(char)>
c000aa74:	5a                   	pop    edx
c000aa75:	59                   	pop    ecx
c000aa76:	e9 37 ff ff ff       	jmp    c000a9b2 <Dbg::kprintf(char const*, ...)+0x6d>
c000aa7b:	90                   	nop

c000aa7c <KiUbsanPrintDetails(char const*, void*)>:
c000aa7c:	83 ec 1c             	sub    esp,0x1c
c000aa7f:	83 ec 08             	sub    esp,0x8
c000aa82:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000aa86:	68 ac 0e 02 c0       	push   0xc0020eac
c000aa8b:	e8 b5 fe ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000aa90:	83 c4 10             	add    esp,0x10
c000aa93:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000aa97:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000aa9b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000aa9f:	8b 00                	mov    eax,DWORD PTR [eax]
c000aaa1:	83 ec 08             	sub    esp,0x8
c000aaa4:	50                   	push   eax
c000aaa5:	68 c0 0e 02 c0       	push   0xc0020ec0
c000aaaa:	e8 96 fe ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000aaaf:	83 c4 10             	add    esp,0x10
c000aab2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000aab6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000aab9:	83 ec 08             	sub    esp,0x8
c000aabc:	50                   	push   eax
c000aabd:	68 ca 0e 02 c0       	push   0xc0020eca
c000aac2:	e8 7e fe ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000aac7:	83 c4 10             	add    esp,0x10
c000aaca:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000aace:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000aad1:	83 ec 08             	sub    esp,0x8
c000aad4:	50                   	push   eax
c000aad5:	68 d4 0e 02 c0       	push   0xc0020ed4
c000aada:	e8 66 fe ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000aadf:	83 c4 10             	add    esp,0x10
c000aae2:	90                   	nop
c000aae3:	83 c4 1c             	add    esp,0x1c
c000aae6:	c3                   	ret    
c000aae7:	90                   	nop

c000aae8 <__ubsan_handle_type_mismatch_v1>:
c000aae8:	83 ec 0c             	sub    esp,0xc
c000aaeb:	83 ec 08             	sub    esp,0x8
c000aaee:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000aaf2:	68 18 10 02 c0       	push   0xc0021018
c000aaf7:	e8 80 ff ff ff       	call   c000aa7c <KiUbsanPrintDetails(char const*, void*)>
c000aafc:	83 c4 10             	add    esp,0x10
c000aaff:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000ab04:	75 16                	jne    c000ab1c <__ubsan_handle_type_mismatch_v1+0x34>
c000ab06:	83 ec 0c             	sub    esp,0xc
c000ab09:	68 de 0e 02 c0       	push   0xc0020ede
c000ab0e:	e8 32 fe ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000ab13:	83 c4 10             	add    esp,0x10
c000ab16:	e9 91 00 00 00       	jmp    c000abac <__ubsan_handle_type_mismatch_v1+0xc4>
c000ab1b:	90                   	nop
c000ab1c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab20:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000ab23:	85 c0                	test   eax,eax
c000ab25:	74 29                	je     c000ab50 <__ubsan_handle_type_mismatch_v1+0x68>
c000ab27:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab2b:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000ab2e:	83 e8 01             	sub    eax,0x1
c000ab31:	23 44 24 14          	and    eax,DWORD PTR [esp+0x14]
c000ab35:	75 19                	jne    c000ab50 <__ubsan_handle_type_mismatch_v1+0x68>
c000ab37:	83 ec 08             	sub    esp,0x8
c000ab3a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ab3e:	68 38 10 02 c0       	push   0xc0021038
c000ab43:	e8 fd fd ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000ab48:	83 c4 10             	add    esp,0x10
c000ab4b:	eb 5f                	jmp    c000abac <__ubsan_handle_type_mismatch_v1+0xc4>
c000ab4d:	8d 76 00             	lea    esi,[esi+0x0]
c000ab50:	83 ec 0c             	sub    esp,0xc
c000ab53:	68 f3 0e 02 c0       	push   0xc0020ef3
c000ab58:	e8 e8 fd ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000ab5d:	83 c4 10             	add    esp,0x10
c000ab60:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab64:	8a 40 14             	mov    al,BYTE PTR [eax+0x14]
c000ab67:	0f b6 c0             	movzx  eax,al
c000ab6a:	83 ec 08             	sub    esp,0x8
c000ab6d:	50                   	push   eax
c000ab6e:	68 0d 0f 02 c0       	push   0xc0020f0d
c000ab73:	e8 cd fd ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000ab78:	83 c4 10             	add    esp,0x10
c000ab7b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab7f:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000ab82:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c000ab85:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000ab89:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab8d:	8a 40 14             	mov    al,BYTE PTR [eax+0x14]
c000ab90:	0f b6 c0             	movzx  eax,al
c000ab93:	8b 04 85 40 2f 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd0c0]
c000ab9a:	51                   	push   ecx
c000ab9b:	52                   	push   edx
c000ab9c:	50                   	push   eax
c000ab9d:	68 60 10 02 c0       	push   0xc0021060
c000aba2:	e8 9e fd ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000aba7:	83 c4 10             	add    esp,0x10
c000abaa:	66 90                	xchg   ax,ax
c000abac:	83 ec 0c             	sub    esp,0xc
c000abaf:	68 18 10 02 c0       	push   0xc0021018
c000abb4:	e8 34 66 00 00       	call   c00111ed <KePanic(char const*)>
c000abb9:	83 c4 10             	add    esp,0x10
c000abbc:	90                   	nop
c000abbd:	83 c4 0c             	add    esp,0xc
c000abc0:	c3                   	ret    
c000abc1:	8d 76 00             	lea    esi,[esi+0x0]

c000abc4 <__ubsan_handle_pointer_overflow>:
c000abc4:	83 ec 0c             	sub    esp,0xc
c000abc7:	83 ec 08             	sub    esp,0x8
c000abca:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000abce:	68 a8 10 02 c0       	push   0xc00210a8
c000abd3:	e8 a4 fe ff ff       	call   c000aa7c <KiUbsanPrintDetails(char const*, void*)>
c000abd8:	83 c4 10             	add    esp,0x10
c000abdb:	83 ec 0c             	sub    esp,0xc
c000abde:	68 a8 10 02 c0       	push   0xc00210a8
c000abe3:	e8 05 66 00 00       	call   c00111ed <KePanic(char const*)>
c000abe8:	83 c4 10             	add    esp,0x10
c000abeb:	90                   	nop
c000abec:	83 c4 0c             	add    esp,0xc
c000abef:	c3                   	ret    

c000abf0 <__ubsan_handle_out_of_bounds>:
c000abf0:	83 ec 0c             	sub    esp,0xc
c000abf3:	83 ec 08             	sub    esp,0x8
c000abf6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000abfa:	68 18 0f 02 c0       	push   0xc0020f18
c000abff:	e8 78 fe ff ff       	call   c000aa7c <KiUbsanPrintDetails(char const*, void*)>
c000ac04:	83 c4 10             	add    esp,0x10
c000ac07:	83 ec 0c             	sub    esp,0xc
c000ac0a:	68 18 0f 02 c0       	push   0xc0020f18
c000ac0f:	e8 d9 65 00 00       	call   c00111ed <KePanic(char const*)>
c000ac14:	83 c4 10             	add    esp,0x10
c000ac17:	90                   	nop
c000ac18:	83 c4 0c             	add    esp,0xc
c000ac1b:	c3                   	ret    

c000ac1c <__ubsan_handle_add_overflow>:
c000ac1c:	83 ec 0c             	sub    esp,0xc
c000ac1f:	83 ec 08             	sub    esp,0x8
c000ac22:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ac26:	68 35 0f 02 c0       	push   0xc0020f35
c000ac2b:	e8 4c fe ff ff       	call   c000aa7c <KiUbsanPrintDetails(char const*, void*)>
c000ac30:	83 c4 10             	add    esp,0x10
c000ac33:	83 ec 0c             	sub    esp,0xc
c000ac36:	68 35 0f 02 c0       	push   0xc0020f35
c000ac3b:	e8 ad 65 00 00       	call   c00111ed <KePanic(char const*)>
c000ac40:	83 c4 10             	add    esp,0x10
c000ac43:	90                   	nop
c000ac44:	83 c4 0c             	add    esp,0xc
c000ac47:	c3                   	ret    

c000ac48 <__ubsan_handle_load_invalid_value>:
c000ac48:	83 ec 0c             	sub    esp,0xc
c000ac4b:	83 ec 08             	sub    esp,0x8
c000ac4e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ac52:	68 c8 10 02 c0       	push   0xc00210c8
c000ac57:	e8 20 fe ff ff       	call   c000aa7c <KiUbsanPrintDetails(char const*, void*)>
c000ac5c:	83 c4 10             	add    esp,0x10
c000ac5f:	83 ec 0c             	sub    esp,0xc
c000ac62:	68 c8 10 02 c0       	push   0xc00210c8
c000ac67:	e8 81 65 00 00       	call   c00111ed <KePanic(char const*)>
c000ac6c:	83 c4 10             	add    esp,0x10
c000ac6f:	90                   	nop
c000ac70:	83 c4 0c             	add    esp,0xc
c000ac73:	c3                   	ret    

c000ac74 <__ubsan_handle_divrem_overflow>:
c000ac74:	83 ec 0c             	sub    esp,0xc
c000ac77:	83 ec 08             	sub    esp,0x8
c000ac7a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ac7e:	68 ec 10 02 c0       	push   0xc00210ec
c000ac83:	e8 f4 fd ff ff       	call   c000aa7c <KiUbsanPrintDetails(char const*, void*)>
c000ac88:	83 c4 10             	add    esp,0x10
c000ac8b:	83 ec 0c             	sub    esp,0xc
c000ac8e:	68 ec 10 02 c0       	push   0xc00210ec
c000ac93:	e8 55 65 00 00       	call   c00111ed <KePanic(char const*)>
c000ac98:	83 c4 10             	add    esp,0x10
c000ac9b:	90                   	nop
c000ac9c:	83 c4 0c             	add    esp,0xc
c000ac9f:	c3                   	ret    

c000aca0 <__ubsan_handle_mul_overflow>:
c000aca0:	83 ec 0c             	sub    esp,0xc
c000aca3:	83 ec 08             	sub    esp,0x8
c000aca6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000acaa:	68 51 0f 02 c0       	push   0xc0020f51
c000acaf:	e8 c8 fd ff ff       	call   c000aa7c <KiUbsanPrintDetails(char const*, void*)>
c000acb4:	83 c4 10             	add    esp,0x10
c000acb7:	83 ec 0c             	sub    esp,0xc
c000acba:	68 51 0f 02 c0       	push   0xc0020f51
c000acbf:	e8 29 65 00 00       	call   c00111ed <KePanic(char const*)>
c000acc4:	83 c4 10             	add    esp,0x10
c000acc7:	90                   	nop
c000acc8:	83 c4 0c             	add    esp,0xc
c000accb:	c3                   	ret    

c000accc <__ubsan_handle_sub_overflow>:
c000accc:	83 ec 0c             	sub    esp,0xc
c000accf:	83 ec 08             	sub    esp,0x8
c000acd2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000acd6:	68 6d 0f 02 c0       	push   0xc0020f6d
c000acdb:	e8 9c fd ff ff       	call   c000aa7c <KiUbsanPrintDetails(char const*, void*)>
c000ace0:	83 c4 10             	add    esp,0x10
c000ace3:	83 ec 0c             	sub    esp,0xc
c000ace6:	68 6d 0f 02 c0       	push   0xc0020f6d
c000aceb:	e8 fd 64 00 00       	call   c00111ed <KePanic(char const*)>
c000acf0:	83 c4 10             	add    esp,0x10
c000acf3:	90                   	nop
c000acf4:	83 c4 0c             	add    esp,0xc
c000acf7:	c3                   	ret    

c000acf8 <__ubsan_handle_shift_out_of_bounds>:
c000acf8:	83 ec 0c             	sub    esp,0xc
c000acfb:	83 ec 08             	sub    esp,0x8
c000acfe:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ad02:	68 0c 11 02 c0       	push   0xc002110c
c000ad07:	e8 70 fd ff ff       	call   c000aa7c <KiUbsanPrintDetails(char const*, void*)>
c000ad0c:	83 c4 10             	add    esp,0x10
c000ad0f:	83 ec 0c             	sub    esp,0xc
c000ad12:	68 0c 11 02 c0       	push   0xc002110c
c000ad17:	e8 d1 64 00 00       	call   c00111ed <KePanic(char const*)>
c000ad1c:	83 c4 10             	add    esp,0x10
c000ad1f:	90                   	nop
c000ad20:	83 c4 0c             	add    esp,0xc
c000ad23:	c3                   	ret    

c000ad24 <__ubsan_handle_negate_overflow>:
c000ad24:	83 ec 0c             	sub    esp,0xc
c000ad27:	83 ec 08             	sub    esp,0x8
c000ad2a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ad2e:	68 30 11 02 c0       	push   0xc0021130
c000ad33:	e8 44 fd ff ff       	call   c000aa7c <KiUbsanPrintDetails(char const*, void*)>
c000ad38:	83 c4 10             	add    esp,0x10
c000ad3b:	83 ec 0c             	sub    esp,0xc
c000ad3e:	68 30 11 02 c0       	push   0xc0021130
c000ad43:	e8 a5 64 00 00       	call   c00111ed <KePanic(char const*)>
c000ad48:	83 c4 10             	add    esp,0x10
c000ad4b:	90                   	nop
c000ad4c:	83 c4 0c             	add    esp,0xc
c000ad4f:	c3                   	ret    

c000ad50 <KiCreateLinkID()>:
c000ad50:	55                   	push   ebp
c000ad51:	57                   	push   edi
c000ad52:	56                   	push   esi
c000ad53:	53                   	push   ebx
c000ad54:	31 db                	xor    ebx,ebx
c000ad56:	83 ec 1c             	sub    esp,0x1c
c000ad59:	e8 dd 65 00 00       	call   c001133b <KeRand()>
c000ad5e:	43                   	inc    ebx
c000ad5f:	8b 2d 60 70 02 c0    	mov    ebp,DWORD PTR ds:0xc0027060
c000ad65:	31 d2                	xor    edx,edx
c000ad67:	8d 4d 01             	lea    ecx,[ebp+0x1]
c000ad6a:	0f a4 c2 1b          	shld   edx,eax,0x1b
c000ad6e:	89 0d 60 70 02 c0    	mov    DWORD PTR ds:0xc0027060,ecx
c000ad74:	c1 e0 1b             	shl    eax,0x1b
c000ad77:	89 d7                	mov    edi,edx
c000ad79:	89 c6                	mov    esi,eax
c000ad7b:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c000ad7f:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000ad87:	81 fb 9a 02 00 00    	cmp    ebx,0x29a
c000ad8d:	75 10                	jne    c000ad9f <KiCreateLinkID()+0x4f>
c000ad8f:	83 ec 0c             	sub    esp,0xc
c000ad92:	68 4f 11 02 c0       	push   0xc002114f
c000ad97:	e8 51 64 00 00       	call   c00111ed <KePanic(char const*)>
c000ad9c:	83 c4 10             	add    esp,0x10
c000ad9f:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c000ada3:	75 04                	jne    c000ada9 <KiCreateLinkID()+0x59>
c000ada5:	39 f5                	cmp    ebp,esi
c000ada7:	74 b0                	je     c000ad59 <KiCreateLinkID()+0x9>
c000ada9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000adad:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000adb1:	31 f0                	xor    eax,esi
c000adb3:	83 c4 1c             	add    esp,0x1c
c000adb6:	31 fa                	xor    edx,edi
c000adb8:	5b                   	pop    ebx
c000adb9:	5e                   	pop    esi
c000adba:	5f                   	pop    edi
c000adbb:	5d                   	pop    ebp
c000adbc:	c3                   	ret    

c000adbd <KiFlushSymlinkChanges()>:
c000adbd:	56                   	push   esi
c000adbe:	53                   	push   ebx
c000adbf:	83 ec 20             	sub    esp,0x20
c000adc2:	68 14 01 00 00       	push   0x114
c000adc7:	e8 ea cc ff ff       	call   c0007ab6 <malloc>
c000adcc:	83 c4 0c             	add    esp,0xc
c000adcf:	89 c3                	mov    ebx,eax
c000add1:	ff 35 90 a4 02 c0    	push   DWORD PTR ds:0xc002a490
c000add7:	68 58 11 02 c0       	push   0xc0021158
c000addc:	50                   	push   eax
c000addd:	e8 f6 08 00 00       	call   c000b6d8 <File::File(char const*, Process*)>
c000ade2:	83 c4 10             	add    esp,0x10
c000ade5:	85 db                	test   ebx,ebx
c000ade7:	75 10                	jne    c000adf9 <KiFlushSymlinkChanges()+0x3c>
c000ade9:	83 ec 0c             	sub    esp,0xc
c000adec:	68 76 11 02 c0       	push   0xc0021176
c000adf1:	e8 f7 63 00 00       	call   c00111ed <KePanic(char const*)>
c000adf6:	83 c4 10             	add    esp,0x10
c000adf9:	50                   	push   eax
c000adfa:	50                   	push   eax
c000adfb:	6a 04                	push   0x4
c000adfd:	53                   	push   ebx
c000adfe:	e8 91 09 00 00       	call   c000b794 <File::open(FileOpenMode)>
c000ae03:	83 c4 10             	add    esp,0x10
c000ae06:	85 c0                	test   eax,eax
c000ae08:	74 10                	je     c000ae1a <KiFlushSymlinkChanges()+0x5d>
c000ae0a:	83 ec 0c             	sub    esp,0xc
c000ae0d:	68 90 11 02 c0       	push   0xc0021190
c000ae12:	e8 d6 63 00 00       	call   c00111ed <KePanic(char const*)>
c000ae17:	83 c4 10             	add    esp,0x10
c000ae1a:	31 f6                	xor    esi,esi
c000ae1c:	39 35 c0 5f 02 c0    	cmp    DWORD PTR ds:0xc0025fc0,esi
c000ae22:	7e 40                	jle    c000ae64 <KiFlushSymlinkChanges()+0xa7>
c000ae24:	83 ec 0c             	sub    esp,0xc
c000ae27:	8b 13                	mov    edx,DWORD PTR [ebx]
c000ae29:	8d 44 24 18          	lea    eax,[esp+0x18]
c000ae2d:	50                   	push   eax
c000ae2e:	89 f0                	mov    eax,esi
c000ae30:	c1 e0 08             	shl    eax,0x8
c000ae33:	05 60 60 02 c0       	add    eax,0xc0026060
c000ae38:	50                   	push   eax
c000ae39:	6a 00                	push   0x0
c000ae3b:	68 00 01 00 00       	push   0x100
c000ae40:	53                   	push   ebx
c000ae41:	ff 52 10             	call   DWORD PTR [edx+0x10]
c000ae44:	83 c4 20             	add    esp,0x20
c000ae47:	81 7c 24 0c 00 01 00 00 	cmp    DWORD PTR [esp+0xc],0x100
c000ae4f:	74 10                	je     c000ae61 <KiFlushSymlinkChanges()+0xa4>
c000ae51:	83 ec 0c             	sub    esp,0xc
c000ae54:	68 aa 11 02 c0       	push   0xc00211aa
c000ae59:	e8 8f 63 00 00       	call   c00111ed <KePanic(char const*)>
c000ae5e:	83 c4 10             	add    esp,0x10
c000ae61:	46                   	inc    esi
c000ae62:	eb b8                	jmp    c000ae1c <KiFlushSymlinkChanges()+0x5f>
c000ae64:	83 ec 0c             	sub    esp,0xc
c000ae67:	c7 05 c0 5f 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025fc0,0x0
c000ae71:	53                   	push   ebx
c000ae72:	e8 7b 09 00 00       	call   c000b7f2 <File::close()>
c000ae77:	83 c4 10             	add    esp,0x10
c000ae7a:	85 db                	test   ebx,ebx
c000ae7c:	74 0c                	je     c000ae8a <KiFlushSymlinkChanges()+0xcd>
c000ae7e:	83 ec 0c             	sub    esp,0xc
c000ae81:	8b 03                	mov    eax,DWORD PTR [ebx]
c000ae83:	53                   	push   ebx
c000ae84:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000ae87:	83 c4 10             	add    esp,0x10
c000ae8a:	83 c4 14             	add    esp,0x14
c000ae8d:	5b                   	pop    ebx
c000ae8e:	5e                   	pop    esi
c000ae8f:	c3                   	ret    

c000ae90 <KiDeinitialiseSymlinks(void*)>:
c000ae90:	e9 28 ff ff ff       	jmp    c000adbd <KiFlushSymlinkChanges()>

c000ae95 <KeRegisterSymlink(char const*, unsigned long long)>:
c000ae95:	53                   	push   ebx
c000ae96:	83 ec 0c             	sub    esp,0xc
c000ae99:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000ae9d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000aea1:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000aea5:	a1 c0 5f 02 c0       	mov    eax,ds:0xc0025fc0
c000aeaa:	68 00 01 00 00       	push   0x100
c000aeaf:	89 14 c5 e0 5f 02 c0 	mov    DWORD PTR [eax*8-0x3ffda020],edx
c000aeb6:	6a 00                	push   0x0
c000aeb8:	89 0c c5 e4 5f 02 c0 	mov    DWORD PTR [eax*8-0x3ffda01c],ecx
c000aebf:	c1 e0 08             	shl    eax,0x8
c000aec2:	05 60 60 02 c0       	add    eax,0xc0026060
c000aec7:	50                   	push   eax
c000aec8:	e8 23 56 ff ff       	call   c00004f0 <memset>
c000aecd:	58                   	pop    eax
c000aece:	a1 c0 5f 02 c0       	mov    eax,ds:0xc0025fc0
c000aed3:	5a                   	pop    edx
c000aed4:	c1 e0 08             	shl    eax,0x8
c000aed7:	53                   	push   ebx
c000aed8:	05 60 60 02 c0       	add    eax,0xc0026060
c000aedd:	50                   	push   eax
c000aede:	e8 5d 57 ff ff       	call   c0000640 <strcpy>
c000aee3:	a1 c0 5f 02 c0       	mov    eax,ds:0xc0025fc0
c000aee8:	83 c4 10             	add    esp,0x10
c000aeeb:	40                   	inc    eax
c000aeec:	a3 c0 5f 02 c0       	mov    ds:0xc0025fc0,eax
c000aef1:	83 f8 0f             	cmp    eax,0xf
c000aef4:	7e 09                	jle    c000aeff <KeRegisterSymlink(char const*, unsigned long long)+0x6a>
c000aef6:	83 c4 08             	add    esp,0x8
c000aef9:	5b                   	pop    ebx
c000aefa:	e9 be fe ff ff       	jmp    c000adbd <KiFlushSymlinkChanges()>
c000aeff:	83 c4 08             	add    esp,0x8
c000af02:	5b                   	pop    ebx
c000af03:	c3                   	ret    

c000af04 <KeInitialiseSymlinks()>:
c000af04:	53                   	push   ebx
c000af05:	83 ec 10             	sub    esp,0x10
c000af08:	c7 05 c0 5f 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025fc0,0x0
c000af12:	6a 00                	push   0x0
c000af14:	68 90 ae 00 c0       	push   0xc000ae90
c000af19:	e8 0d 5b 00 00       	call   c0010a2b <KeRegisterAtexit(void (*)(void*), void*)>
c000af1e:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c000af25:	e8 8c cb ff ff       	call   c0007ab6 <malloc>
c000af2a:	83 c4 0c             	add    esp,0xc
c000af2d:	89 c3                	mov    ebx,eax
c000af2f:	ff 35 90 a4 02 c0    	push   DWORD PTR ds:0xc002a490
c000af35:	68 58 11 02 c0       	push   0xc0021158
c000af3a:	50                   	push   eax
c000af3b:	e8 98 07 00 00       	call   c000b6d8 <File::File(char const*, Process*)>
c000af40:	83 c4 10             	add    esp,0x10
c000af43:	85 db                	test   ebx,ebx
c000af45:	75 10                	jne    c000af57 <KeInitialiseSymlinks()+0x53>
c000af47:	83 ec 0c             	sub    esp,0xc
c000af4a:	68 c4 11 02 c0       	push   0xc00211c4
c000af4f:	e8 99 62 00 00       	call   c00111ed <KePanic(char const*)>
c000af54:	83 c4 10             	add    esp,0x10
c000af57:	83 ec 0c             	sub    esp,0xc
c000af5a:	53                   	push   ebx
c000af5b:	e8 f8 0a 00 00       	call   c000ba58 <File::exists()>
c000af60:	83 c4 10             	add    esp,0x10
c000af63:	84 c0                	test   al,al
c000af65:	75 2d                	jne    c000af94 <KeInitialiseSymlinks()+0x90>
c000af67:	51                   	push   ecx
c000af68:	51                   	push   ecx
c000af69:	6a 02                	push   0x2
c000af6b:	53                   	push   ebx
c000af6c:	e8 23 08 00 00       	call   c000b794 <File::open(FileOpenMode)>
c000af71:	83 c4 10             	add    esp,0x10
c000af74:	85 c0                	test   eax,eax
c000af76:	74 10                	je     c000af88 <KeInitialiseSymlinks()+0x84>
c000af78:	83 ec 0c             	sub    esp,0xc
c000af7b:	68 c4 11 02 c0       	push   0xc00211c4
c000af80:	e8 68 62 00 00       	call   c00111ed <KePanic(char const*)>
c000af85:	83 c4 10             	add    esp,0x10
c000af88:	83 ec 0c             	sub    esp,0xc
c000af8b:	53                   	push   ebx
c000af8c:	e8 61 08 00 00       	call   c000b7f2 <File::close()>
c000af91:	83 c4 10             	add    esp,0x10
c000af94:	85 db                	test   ebx,ebx
c000af96:	74 0c                	je     c000afa4 <KeInitialiseSymlinks()+0xa0>
c000af98:	83 ec 0c             	sub    esp,0xc
c000af9b:	8b 03                	mov    eax,DWORD PTR [ebx]
c000af9d:	53                   	push   ebx
c000af9e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000afa1:	83 c4 10             	add    esp,0x10
c000afa4:	83 c4 08             	add    esp,0x8
c000afa7:	5b                   	pop    ebx
c000afa8:	c3                   	ret    

c000afa9 <KiIsSymlinkRegistered(char const*)>:
c000afa9:	31 c0                	xor    eax,eax
c000afab:	31 d2                	xor    edx,edx
c000afad:	c3                   	ret    

c000afae <KeDereferenceSymlink(char const*, char*)>:
c000afae:	55                   	push   ebp
c000afaf:	57                   	push   edi
c000afb0:	56                   	push   esi
c000afb1:	53                   	push   ebx
c000afb2:	83 ec 50             	sub    esp,0x50
c000afb5:	8b 6c 24 64          	mov    ebp,DWORD PTR [esp+0x64]
c000afb9:	55                   	push   ebp
c000afba:	e8 ea ff ff ff       	call   c000afa9 <KiIsSymlinkRegistered(char const*)>
c000afbf:	5b                   	pop    ebx
c000afc0:	5e                   	pop    esi
c000afc1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000afc5:	09 d0                	or     eax,edx
c000afc7:	75 07                	jne    c000afd0 <KeDereferenceSymlink(char const*, char*)+0x22>
c000afc9:	31 ed                	xor    ebp,ebp
c000afcb:	e9 86 01 00 00       	jmp    c000b156 <KeDereferenceSymlink(char const*, char*)+0x1a8>
c000afd0:	83 ec 0c             	sub    esp,0xc
c000afd3:	89 d7                	mov    edi,edx
c000afd5:	68 14 01 00 00       	push   0x114
c000afda:	e8 d7 ca ff ff       	call   c0007ab6 <malloc>
c000afdf:	83 c4 0c             	add    esp,0xc
c000afe2:	89 c3                	mov    ebx,eax
c000afe4:	ff 35 90 a4 02 c0    	push   DWORD PTR ds:0xc002a490
c000afea:	55                   	push   ebp
c000afeb:	50                   	push   eax
c000afec:	e8 e7 06 00 00       	call   c000b6d8 <File::File(char const*, Process*)>
c000aff1:	83 c4 10             	add    esp,0x10
c000aff4:	85 db                	test   ebx,ebx
c000aff6:	0f 84 41 01 00 00    	je     c000b13d <KeDereferenceSymlink(char const*, char*)+0x18f>
c000affc:	51                   	push   ecx
c000affd:	51                   	push   ecx
c000affe:	6a 01                	push   0x1
c000b000:	53                   	push   ebx
c000b001:	e8 8e 07 00 00       	call   c000b794 <File::open(FileOpenMode)>
c000b006:	83 c4 10             	add    esp,0x10
c000b009:	85 c0                	test   eax,eax
c000b00b:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b00d:	74 09                	je     c000b018 <KeDereferenceSymlink(char const*, char*)+0x6a>
c000b00f:	83 ec 0c             	sub    esp,0xc
c000b012:	53                   	push   ebx
c000b013:	e9 1f 01 00 00       	jmp    c000b137 <KeDereferenceSymlink(char const*, char*)+0x189>
c000b018:	83 ec 0c             	sub    esp,0xc
c000b01b:	8d 74 24 28          	lea    esi,[esp+0x28]
c000b01f:	56                   	push   esi
c000b020:	8d 6c 24 47          	lea    ebp,[esp+0x47]
c000b024:	55                   	push   ebp
c000b025:	6a 00                	push   0x0
c000b027:	6a 08                	push   0x8
c000b029:	53                   	push   ebx
c000b02a:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000b02d:	83 c4 20             	add    esp,0x20
c000b030:	85 c0                	test   eax,eax
c000b032:	0f 85 f1 00 00 00    	jne    c000b129 <KeDereferenceSymlink(char const*, char*)+0x17b>
c000b038:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c000b03d:	0f 85 e6 00 00 00    	jne    c000b129 <KeDereferenceSymlink(char const*, char*)+0x17b>
c000b043:	52                   	push   edx
c000b044:	52                   	push   edx
c000b045:	68 df 11 02 c0       	push   0xc00211df
c000b04a:	55                   	push   ebp
c000b04b:	e8 00 57 ff ff       	call   c0000750 <strcmp>
c000b050:	83 c4 10             	add    esp,0x10
c000b053:	89 c5                	mov    ebp,eax
c000b055:	85 c0                	test   eax,eax
c000b057:	0f 85 cc 00 00 00    	jne    c000b129 <KeDereferenceSymlink(char const*, char*)+0x17b>
c000b05d:	83 ec 0c             	sub    esp,0xc
c000b060:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b062:	56                   	push   esi
c000b063:	8d 4c 24 30          	lea    ecx,[esp+0x30]
c000b067:	51                   	push   ecx
c000b068:	6a 00                	push   0x0
c000b06a:	6a 08                	push   0x8
c000b06c:	53                   	push   ebx
c000b06d:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000b070:	83 c4 20             	add    esp,0x20
c000b073:	85 c0                	test   eax,eax
c000b075:	0f 85 ae 00 00 00    	jne    c000b129 <KeDereferenceSymlink(char const*, char*)+0x17b>
c000b07b:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c000b080:	0f 85 a3 00 00 00    	jne    c000b129 <KeDereferenceSymlink(char const*, char*)+0x17b>
c000b086:	39 7c 24 24          	cmp    DWORD PTR [esp+0x24],edi
c000b08a:	0f 85 39 ff ff ff    	jne    c000afc9 <KeDereferenceSymlink(char const*, char*)+0x1b>
c000b090:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b094:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c000b098:	0f 85 2b ff ff ff    	jne    c000afc9 <KeDereferenceSymlink(char const*, char*)+0x1b>
c000b09e:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c000b0a6:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000b0ae:	50                   	push   eax
c000b0af:	8d 44 24 1f          	lea    eax,[esp+0x1f]
c000b0b3:	50                   	push   eax
c000b0b4:	8d 44 24 30          	lea    eax,[esp+0x30]
c000b0b8:	50                   	push   eax
c000b0b9:	53                   	push   ebx
c000b0ba:	e8 d7 09 00 00       	call   c000ba96 <File::stat(unsigned long long*, bool*)>
c000b0bf:	83 c4 10             	add    esp,0x10
c000b0c2:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c000b0c7:	85 c0                	test   eax,eax
c000b0c9:	75 5e                	jne    c000b129 <KeDereferenceSymlink(char const*, char*)+0x17b>
c000b0cb:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c000b0cf:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c000b0d3:	b9 0f 00 00 00       	mov    ecx,0xf
c000b0d8:	89 c2                	mov    edx,eax
c000b0da:	39 f1                	cmp    ecx,esi
c000b0dc:	19 fa                	sbb    edx,edi
c000b0de:	73 49                	jae    c000b129 <KeDereferenceSymlink(char const*, char*)+0x17b>
c000b0e0:	83 c6 f0             	add    esi,0xfffffff0
c000b0e3:	b9 ff 00 00 00       	mov    ecx,0xff
c000b0e8:	83 d7 ff             	adc    edi,0xffffffff
c000b0eb:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c000b0ef:	39 f1                	cmp    ecx,esi
c000b0f1:	89 7c 24 2c          	mov    DWORD PTR [esp+0x2c],edi
c000b0f5:	19 f8                	sbb    eax,edi
c000b0f7:	72 44                	jb     c000b13d <KeDereferenceSymlink(char const*, char*)+0x18f>
c000b0f9:	83 ec 0c             	sub    esp,0xc
c000b0fc:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b0fe:	8d 4c 24 28          	lea    ecx,[esp+0x28]
c000b102:	51                   	push   ecx
c000b103:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c000b107:	57                   	push   edi
c000b108:	56                   	push   esi
c000b109:	53                   	push   ebx
c000b10a:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000b10d:	83 c4 20             	add    esp,0x20
c000b110:	85 c0                	test   eax,eax
c000b112:	75 15                	jne    c000b129 <KeDereferenceSymlink(char const*, char*)+0x17b>
c000b114:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b118:	89 c7                	mov    edi,eax
c000b11a:	c1 ff 1f             	sar    edi,0x1f
c000b11d:	3b 7c 24 2c          	cmp    edi,DWORD PTR [esp+0x2c]
c000b121:	75 06                	jne    c000b129 <KeDereferenceSymlink(char const*, char*)+0x17b>
c000b123:	3b 44 24 28          	cmp    eax,DWORD PTR [esp+0x28]
c000b127:	74 19                	je     c000b142 <KeDereferenceSymlink(char const*, char*)+0x194>
c000b129:	83 ec 0c             	sub    esp,0xc
c000b12c:	53                   	push   ebx
c000b12d:	e8 c0 06 00 00       	call   c000b7f2 <File::close()>
c000b132:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b134:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b137:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b13a:	83 c4 10             	add    esp,0x10
c000b13d:	83 cd ff             	or     ebp,0xffffffff
c000b140:	eb 14                	jmp    c000b156 <KeDereferenceSymlink(char const*, char*)+0x1a8>
c000b142:	83 ec 0c             	sub    esp,0xc
c000b145:	53                   	push   ebx
c000b146:	e8 a7 06 00 00       	call   c000b7f2 <File::close()>
c000b14b:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b14d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b150:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b153:	83 c4 10             	add    esp,0x10
c000b156:	83 c4 4c             	add    esp,0x4c
c000b159:	89 e8                	mov    eax,ebp
c000b15b:	5b                   	pop    ebx
c000b15c:	5e                   	pop    esi
c000b15d:	5f                   	pop    edi
c000b15e:	5d                   	pop    ebp
c000b15f:	c3                   	ret    

c000b160 <KeCreateSymlink(char const*, char const*)>:
c000b160:	55                   	push   ebp
c000b161:	57                   	push   edi
c000b162:	56                   	push   esi
c000b163:	53                   	push   ebx
c000b164:	83 ec 38             	sub    esp,0x38
c000b167:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c000b16b:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c000b16f:	68 14 01 00 00       	push   0x114
c000b174:	e8 3d c9 ff ff       	call   c0007ab6 <malloc>
c000b179:	83 c4 0c             	add    esp,0xc
c000b17c:	89 c3                	mov    ebx,eax
c000b17e:	ff 35 90 a4 02 c0    	push   DWORD PTR ds:0xc002a490
c000b184:	56                   	push   esi
c000b185:	50                   	push   eax
c000b186:	e8 4d 05 00 00       	call   c000b6d8 <File::File(char const*, Process*)>
c000b18b:	83 c4 10             	add    esp,0x10
c000b18e:	b8 01 00 00 00       	mov    eax,0x1
c000b193:	85 db                	test   ebx,ebx
c000b195:	0f 84 e9 00 00 00    	je     c000b284 <KeCreateSymlink(char const*, char const*)+0x124>
c000b19b:	57                   	push   edi
c000b19c:	57                   	push   edi
c000b19d:	6a 02                	push   0x2
c000b19f:	53                   	push   ebx
c000b1a0:	e8 ef 05 00 00       	call   c000b794 <File::open(FileOpenMode)>
c000b1a5:	83 c4 10             	add    esp,0x10
c000b1a8:	85 c0                	test   eax,eax
c000b1aa:	74 0b                	je     c000b1b7 <KeCreateSymlink(char const*, char const*)+0x57>
c000b1ac:	83 ec 0c             	sub    esp,0xc
c000b1af:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b1b1:	53                   	push   ebx
c000b1b2:	e9 c2 00 00 00       	jmp    c000b279 <KeCreateSymlink(char const*, char const*)+0x119>
c000b1b7:	e8 94 fb ff ff       	call   c000ad50 <KiCreateLinkID()>
c000b1bc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b1c0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b1c4:	51                   	push   ecx
c000b1c5:	52                   	push   edx
c000b1c6:	50                   	push   eax
c000b1c7:	56                   	push   esi
c000b1c8:	be e7 11 02 c0       	mov    esi,0xc00211e7
c000b1cd:	e8 c3 fc ff ff       	call   c000ae95 <KeRegisterSymlink(char const*, unsigned long long)>
c000b1d2:	8d 7c 24 27          	lea    edi,[esp+0x27]
c000b1d6:	b9 09 00 00 00       	mov    ecx,0x9
c000b1db:	fc                   	cld    
c000b1dc:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000b1de:	5e                   	pop    esi
c000b1df:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b1e1:	8d 74 24 10          	lea    esi,[esp+0x10]
c000b1e5:	56                   	push   esi
c000b1e6:	8d 54 24 27          	lea    edx,[esp+0x27]
c000b1ea:	52                   	push   edx
c000b1eb:	6a 00                	push   0x0
c000b1ed:	6a 08                	push   0x8
c000b1ef:	53                   	push   ebx
c000b1f0:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000b1f3:	83 c4 20             	add    esp,0x20
c000b1f6:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c000b1fb:	75 6e                	jne    c000b26b <KeCreateSymlink(char const*, char const*)+0x10b>
c000b1fd:	85 c0                	test   eax,eax
c000b1ff:	75 6a                	jne    c000b26b <KeCreateSymlink(char const*, char const*)+0x10b>
c000b201:	83 ec 0c             	sub    esp,0xc
c000b204:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b206:	56                   	push   esi
c000b207:	8d 54 24 18          	lea    edx,[esp+0x18]
c000b20b:	52                   	push   edx
c000b20c:	6a 00                	push   0x0
c000b20e:	6a 08                	push   0x8
c000b210:	53                   	push   ebx
c000b211:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000b214:	83 c4 20             	add    esp,0x20
c000b217:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c000b21c:	75 4d                	jne    c000b26b <KeCreateSymlink(char const*, char const*)+0x10b>
c000b21e:	85 c0                	test   eax,eax
c000b220:	75 49                	jne    c000b26b <KeCreateSymlink(char const*, char const*)+0x10b>
c000b222:	83 ec 0c             	sub    esp,0xc
c000b225:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b227:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c000b22a:	55                   	push   ebp
c000b22b:	e8 40 53 ff ff       	call   c0000570 <strlen>
c000b230:	89 34 24             	mov    DWORD PTR [esp],esi
c000b233:	31 d2                	xor    edx,edx
c000b235:	55                   	push   ebp
c000b236:	52                   	push   edx
c000b237:	50                   	push   eax
c000b238:	53                   	push   ebx
c000b239:	ff d7                	call   edi
c000b23b:	83 c4 14             	add    esp,0x14
c000b23e:	89 c6                	mov    esi,eax
c000b240:	55                   	push   ebp
c000b241:	e8 2a 53 ff ff       	call   c0000570 <strlen>
c000b246:	83 c4 10             	add    esp,0x10
c000b249:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c000b24d:	75 1c                	jne    c000b26b <KeCreateSymlink(char const*, char const*)+0x10b>
c000b24f:	85 f6                	test   esi,esi
c000b251:	75 18                	jne    c000b26b <KeCreateSymlink(char const*, char const*)+0x10b>
c000b253:	83 ec 0c             	sub    esp,0xc
c000b256:	53                   	push   ebx
c000b257:	e8 96 05 00 00       	call   c000b7f2 <File::close()>
c000b25c:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b25e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b261:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b264:	83 c4 10             	add    esp,0x10
c000b267:	31 c0                	xor    eax,eax
c000b269:	eb 19                	jmp    c000b284 <KeCreateSymlink(char const*, char const*)+0x124>
c000b26b:	83 ec 0c             	sub    esp,0xc
c000b26e:	53                   	push   ebx
c000b26f:	e8 7e 05 00 00       	call   c000b7f2 <File::close()>
c000b274:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b276:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b279:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b27c:	83 c4 10             	add    esp,0x10
c000b27f:	b8 01 00 00 00       	mov    eax,0x1
c000b284:	83 c4 2c             	add    esp,0x2c
c000b287:	5b                   	pop    ebx
c000b288:	5e                   	pop    esi
c000b289:	5f                   	pop    edi
c000b28a:	5d                   	pop    ebp
c000b28b:	c3                   	ret    

c000b28c <File::read(unsigned long long, void*, int*)>:
c000b28c:	53                   	push   ebx
c000b28d:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000b291:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000b295:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000b29c:	83 f8 19             	cmp    eax,0x19
c000b29f:	77 35                	ja     c000b2d6 <File::read(unsigned long long, void*, int*)+0x4a>
c000b2a1:	8b 04 85 e0 94 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6b20]
c000b2a8:	85 c0                	test   eax,eax
c000b2aa:	74 2a                	je     c000b2d6 <File::read(unsigned long long, void*, int*)+0x4a>
c000b2ac:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000b2b2:	85 c0                	test   eax,eax
c000b2b4:	74 20                	je     c000b2d6 <File::read(unsigned long long, void*, int*)+0x4a>
c000b2b6:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b2ba:	74 21                	je     c000b2dd <File::read(unsigned long long, void*, int*)+0x51>
c000b2bc:	8b 08                	mov    ecx,DWORD PTR [eax]
c000b2be:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000b2c2:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000b2c8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b2cc:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b2d0:	5b                   	pop    ebx
c000b2d1:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c000b2d4:	ff e0                	jmp    eax
c000b2d6:	b8 0b 00 00 00       	mov    eax,0xb
c000b2db:	eb 05                	jmp    c000b2e2 <File::read(unsigned long long, void*, int*)+0x56>
c000b2dd:	b8 05 00 00 00       	mov    eax,0x5
c000b2e2:	5b                   	pop    ebx
c000b2e3:	c3                   	ret    

c000b2e4 <File::write(unsigned long long, void*, int*)>:
c000b2e4:	53                   	push   ebx
c000b2e5:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000b2e9:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000b2ed:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000b2f4:	83 f8 19             	cmp    eax,0x19
c000b2f7:	77 35                	ja     c000b32e <File::write(unsigned long long, void*, int*)+0x4a>
c000b2f9:	8b 04 85 e0 94 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6b20]
c000b300:	85 c0                	test   eax,eax
c000b302:	74 2a                	je     c000b32e <File::write(unsigned long long, void*, int*)+0x4a>
c000b304:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000b30a:	85 c0                	test   eax,eax
c000b30c:	74 20                	je     c000b32e <File::write(unsigned long long, void*, int*)+0x4a>
c000b30e:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b312:	74 21                	je     c000b335 <File::write(unsigned long long, void*, int*)+0x51>
c000b314:	8b 08                	mov    ecx,DWORD PTR [eax]
c000b316:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000b31a:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000b320:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b324:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b328:	5b                   	pop    ebx
c000b329:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c000b32c:	ff e0                	jmp    eax
c000b32e:	b8 0b 00 00 00       	mov    eax,0xb
c000b333:	eb 05                	jmp    c000b33a <File::write(unsigned long long, void*, int*)+0x56>
c000b335:	b8 05 00 00 00       	mov    eax,0x5
c000b33a:	5b                   	pop    ebx
c000b33b:	c3                   	ret    

c000b33c <Directory::read(unsigned long long, void*, int*)>:
c000b33c:	53                   	push   ebx
c000b33d:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000b341:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000b345:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000b34c:	83 f8 19             	cmp    eax,0x19
c000b34f:	77 35                	ja     c000b386 <Directory::read(unsigned long long, void*, int*)+0x4a>
c000b351:	8b 04 85 e0 94 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6b20]
c000b358:	85 c0                	test   eax,eax
c000b35a:	74 2a                	je     c000b386 <Directory::read(unsigned long long, void*, int*)+0x4a>
c000b35c:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000b362:	85 c0                	test   eax,eax
c000b364:	74 20                	je     c000b386 <Directory::read(unsigned long long, void*, int*)+0x4a>
c000b366:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b36a:	74 21                	je     c000b38d <Directory::read(unsigned long long, void*, int*)+0x51>
c000b36c:	8b 08                	mov    ecx,DWORD PTR [eax]
c000b36e:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000b372:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000b378:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b37c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b380:	5b                   	pop    ebx
c000b381:	8b 41 54             	mov    eax,DWORD PTR [ecx+0x54]
c000b384:	ff e0                	jmp    eax
c000b386:	b8 0b 00 00 00       	mov    eax,0xb
c000b38b:	eb 05                	jmp    c000b392 <Directory::read(unsigned long long, void*, int*)+0x56>
c000b38d:	b8 05 00 00 00       	mov    eax,0x5
c000b392:	5b                   	pop    ebx
c000b393:	c3                   	ret    

c000b394 <Directory::write(unsigned long long, void*, int*)>:
c000b394:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b398:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c000b39f:	b8 0b 00 00 00       	mov    eax,0xb
c000b3a4:	83 fa 19             	cmp    edx,0x19
c000b3a7:	77 18                	ja     c000b3c1 <Directory::write(unsigned long long, void*, int*)+0x2d>
c000b3a9:	8b 14 95 e0 94 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd6b20]
c000b3b0:	85 d2                	test   edx,edx
c000b3b2:	74 0d                	je     c000b3c1 <Directory::write(unsigned long long, void*, int*)+0x2d>
c000b3b4:	83 ba 74 01 00 00 01 	cmp    DWORD PTR [edx+0x174],0x1
c000b3bb:	19 c0                	sbb    eax,eax
c000b3bd:	83 e0 0a             	and    eax,0xa
c000b3c0:	40                   	inc    eax
c000b3c1:	c3                   	ret    

c000b3c2 <File::isAtty()>:
c000b3c2:	31 c0                	xor    eax,eax
c000b3c4:	c3                   	ret    
c000b3c5:	90                   	nop

c000b3c6 <Directory::isAtty()>:
c000b3c6:	31 c0                	xor    eax,eax
c000b3c8:	c3                   	ret    
c000b3c9:	90                   	nop

c000b3ca <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c000b3ca:	b8 0a 00 00 00       	mov    eax,0xa
c000b3cf:	c3                   	ret    

c000b3d0 <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c000b3d0:	b8 0a 00 00 00       	mov    eax,0xa
c000b3d5:	c3                   	ret    

c000b3d6 <Filesystem::allocateSwapfile(char const*, int)>:
c000b3d6:	31 c0                	xor    eax,eax
c000b3d8:	31 d2                	xor    edx,edx
c000b3da:	c3                   	ret    
c000b3db:	90                   	nop

c000b3dc <File::~File()>:
c000b3dc:	83 ec 0c             	sub    esp,0xc
c000b3df:	ba 64 12 02 c0       	mov    edx,0xc0021264
c000b3e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b3e8:	89 10                	mov    DWORD PTR [eax],edx
c000b3ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b3ee:	83 ec 0c             	sub    esp,0xc
c000b3f1:	50                   	push   eax
c000b3f2:	e8 ad df ff ff       	call   c00093a4 <UnixFile::~UnixFile()>
c000b3f7:	83 c4 10             	add    esp,0x10
c000b3fa:	90                   	nop
c000b3fb:	83 c4 0c             	add    esp,0xc
c000b3fe:	c3                   	ret    
c000b3ff:	90                   	nop

c000b400 <File::~File()>:
c000b400:	83 ec 0c             	sub    esp,0xc
c000b403:	83 ec 0c             	sub    esp,0xc
c000b406:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b40a:	e8 cd ff ff ff       	call   c000b3dc <File::~File()>
c000b40f:	83 c4 10             	add    esp,0x10
c000b412:	83 ec 08             	sub    esp,0x8
c000b415:	68 14 01 00 00       	push   0x114
c000b41a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b41e:	e8 f5 f3 ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c000b423:	83 c4 10             	add    esp,0x10
c000b426:	83 c4 0c             	add    esp,0xc
c000b429:	c3                   	ret    

c000b42a <Directory::~Directory()>:
c000b42a:	83 ec 0c             	sub    esp,0xc
c000b42d:	ba 80 12 02 c0       	mov    edx,0xc0021280
c000b432:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b436:	89 10                	mov    DWORD PTR [eax],edx
c000b438:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b43c:	83 ec 0c             	sub    esp,0xc
c000b43f:	50                   	push   eax
c000b440:	e8 5f df ff ff       	call   c00093a4 <UnixFile::~UnixFile()>
c000b445:	83 c4 10             	add    esp,0x10
c000b448:	90                   	nop
c000b449:	83 c4 0c             	add    esp,0xc
c000b44c:	c3                   	ret    
c000b44d:	90                   	nop

c000b44e <Directory::~Directory()>:
c000b44e:	83 ec 0c             	sub    esp,0xc
c000b451:	83 ec 0c             	sub    esp,0xc
c000b454:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b458:	e8 cd ff ff ff       	call   c000b42a <Directory::~Directory()>
c000b45d:	83 c4 10             	add    esp,0x10
c000b460:	83 ec 08             	sub    esp,0x8
c000b463:	68 14 01 00 00       	push   0x114
c000b468:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b46c:	e8 a7 f3 ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c000b471:	83 c4 10             	add    esp,0x10
c000b474:	83 c4 0c             	add    esp,0xc
c000b477:	c3                   	ret    

c000b478 <Filesystem::Filesystem()>:
c000b478:	ba f8 11 02 c0       	mov    edx,0xc00211f8
c000b47d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b481:	89 10                	mov    DWORD PTR [eax],edx
c000b483:	8b 15 64 70 02 c0    	mov    edx,DWORD PTR ds:0xc0027064
c000b489:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b48d:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000b490:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b494:	a3 64 70 02 c0       	mov    ds:0xc0027064,eax
c000b499:	90                   	nop
c000b49a:	c3                   	ret    
c000b49b:	90                   	nop

c000b49c <Filesystem::~Filesystem()>:
c000b49c:	ba f8 11 02 c0       	mov    edx,0xc00211f8
c000b4a1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b4a5:	89 10                	mov    DWORD PTR [eax],edx
c000b4a7:	90                   	nop
c000b4a8:	c3                   	ret    
c000b4a9:	90                   	nop

c000b4aa <Filesystem::~Filesystem()>:
c000b4aa:	83 ec 0c             	sub    esp,0xc
c000b4ad:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b4b1:	e8 e6 ff ff ff       	call   c000b49c <Filesystem::~Filesystem()>
c000b4b6:	83 c4 04             	add    esp,0x4
c000b4b9:	83 ec 08             	sub    esp,0x8
c000b4bc:	6a 08                	push   0x8
c000b4be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b4c2:	e8 51 f3 ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c000b4c7:	83 c4 10             	add    esp,0x10
c000b4ca:	83 c4 0c             	add    esp,0xc
c000b4cd:	c3                   	ret    

c000b4ce <Fs::getcwd(Process*, char*, int)>:
c000b4ce:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000b4d2:	31 c0                	xor    eax,eax
c000b4d4:	8d 0c 02             	lea    ecx,[edx+eax*1]
c000b4d7:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000b4db:	7d 15                	jge    c000b4f2 <Fs::getcwd(Process*, char*, int)+0x24>
c000b4dd:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000b4e1:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c000b4e8:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c000b4eb:	84 c9                	test   cl,cl
c000b4ed:	74 06                	je     c000b4f5 <Fs::getcwd(Process*, char*, int)+0x27>
c000b4ef:	40                   	inc    eax
c000b4f0:	eb e2                	jmp    c000b4d4 <Fs::getcwd(Process*, char*, int)+0x6>
c000b4f2:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c000b4f5:	31 c0                	xor    eax,eax
c000b4f7:	c3                   	ret    

c000b4f8 <Fs::initVFS()>:
c000b4f8:	83 ec 18             	sub    esp,0x18
c000b4fb:	6a 08                	push   0x8
c000b4fd:	e8 b4 c5 ff ff       	call   c0007ab6 <malloc>
c000b502:	89 04 24             	mov    DWORD PTR [esp],eax
c000b505:	e8 0e e1 00 00       	call   c0019618 <FAT::FAT()>
c000b50a:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000b511:	e8 a0 c5 ff ff       	call   c0007ab6 <malloc>
c000b516:	89 04 24             	mov    DWORD PTR [esp],eax
c000b519:	e8 26 f0 00 00       	call   c001a544 <ISO9660::ISO9660()>
c000b51e:	83 c4 1c             	add    esp,0x1c
c000b521:	c3                   	ret    

c000b522 <Fs::standardiseFiles(char*, char const*, char const*)>:
c000b522:	55                   	push   ebp
c000b523:	57                   	push   edi
c000b524:	56                   	push   esi
c000b525:	53                   	push   ebx
c000b526:	81 ec 10 04 00 00    	sub    esp,0x410
c000b52c:	8b bc 24 28 04 00 00 	mov    edi,DWORD PTR [esp+0x428]
c000b533:	8b 9c 24 24 04 00 00 	mov    ebx,DWORD PTR [esp+0x424]
c000b53a:	8b ac 24 2c 04 00 00 	mov    ebp,DWORD PTR [esp+0x42c]
c000b541:	68 00 04 00 00       	push   0x400
c000b546:	6a 00                	push   0x0
c000b548:	8d 74 24 0c          	lea    esi,[esp+0xc]
c000b54c:	56                   	push   esi
c000b54d:	e8 9e 4f ff ff       	call   c00004f0 <memset>
c000b552:	83 c4 10             	add    esp,0x10
c000b555:	80 7f 01 3a          	cmp    BYTE PTR [edi+0x1],0x3a
c000b559:	75 0b                	jne    c000b566 <Fs::standardiseFiles(char*, char const*, char const*)+0x44>
c000b55b:	50                   	push   eax
c000b55c:	50                   	push   eax
c000b55d:	57                   	push   edi
c000b55e:	56                   	push   esi
c000b55f:	e8 dc 50 ff ff       	call   c0000640 <strcpy>
c000b564:	eb 44                	jmp    c000b5aa <Fs::standardiseFiles(char*, char const*, char const*)+0x88>
c000b566:	0f be 07             	movsx  eax,BYTE PTR [edi]
c000b569:	83 f8 5c             	cmp    eax,0x5c
c000b56c:	74 05                	je     c000b573 <Fs::standardiseFiles(char*, char const*, char const*)+0x51>
c000b56e:	83 f8 2f             	cmp    eax,0x2f
c000b571:	75 18                	jne    c000b58b <Fs::standardiseFiles(char*, char const*, char const*)+0x69>
c000b573:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c000b576:	3c 60                	cmp    al,0x60
c000b578:	7e 03                	jle    c000b57d <Fs::standardiseFiles(char*, char const*, char const*)+0x5b>
c000b57a:	83 e8 20             	sub    eax,0x20
c000b57d:	88 04 24             	mov    BYTE PTR [esp],al
c000b580:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c000b587:	50                   	push   eax
c000b588:	50                   	push   eax
c000b589:	eb 18                	jmp    c000b5a3 <Fs::standardiseFiles(char*, char const*, char const*)+0x81>
c000b58b:	50                   	push   eax
c000b58c:	50                   	push   eax
c000b58d:	55                   	push   ebp
c000b58e:	56                   	push   esi
c000b58f:	e8 ac 50 ff ff       	call   c0000640 <strcpy>
c000b594:	5a                   	pop    edx
c000b595:	59                   	pop    ecx
c000b596:	68 98 21 02 c0       	push   0xc0022198
c000b59b:	56                   	push   esi
c000b59c:	e8 9f 52 ff ff       	call   c0000840 <strcat>
c000b5a1:	5d                   	pop    ebp
c000b5a2:	58                   	pop    eax
c000b5a3:	57                   	push   edi
c000b5a4:	56                   	push   esi
c000b5a5:	e8 96 52 ff ff       	call   c0000840 <strcat>
c000b5aa:	83 c4 10             	add    esp,0x10
c000b5ad:	8a 04 24             	mov    al,BYTE PTR [esp]
c000b5b0:	3c 60                	cmp    al,0x60
c000b5b2:	7e 03                	jle    c000b5b7 <Fs::standardiseFiles(char*, char const*, char const*)+0x95>
c000b5b4:	83 e8 20             	sub    eax,0x20
c000b5b7:	88 04 24             	mov    BYTE PTR [esp],al
c000b5ba:	88 03                	mov    BYTE PTR [ebx],al
c000b5bc:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c000b5c3:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c000b5c9:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c000b5cd:	bf 03 00 00 00       	mov    edi,0x3
c000b5d2:	b8 03 00 00 00       	mov    eax,0x3
c000b5d7:	0f be 2c 3c          	movsx  ebp,BYTE PTR [esp+edi*1]
c000b5db:	89 ea                	mov    edx,ebp
c000b5dd:	85 ed                	test   ebp,ebp
c000b5df:	0f 84 97 00 00 00    	je     c000b67c <Fs::standardiseFiles(char*, char const*, char const*)+0x15a>
c000b5e5:	8d 4f 01             	lea    ecx,[edi+0x1]
c000b5e8:	83 fd 5c             	cmp    ebp,0x5c
c000b5eb:	74 05                	je     c000b5f2 <Fs::standardiseFiles(char*, char const*, char const*)+0xd0>
c000b5ed:	83 fd 2f             	cmp    ebp,0x2f
c000b5f0:	75 12                	jne    c000b604 <Fs::standardiseFiles(char*, char const*, char const*)+0xe2>
c000b5f2:	89 c5                	mov    ebp,eax
c000b5f4:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c000b5f9:	74 09                	je     c000b604 <Fs::standardiseFiles(char*, char const*, char const*)+0xe2>
c000b5fb:	40                   	inc    eax
c000b5fc:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c000b600:	89 cf                	mov    edi,ecx
c000b602:	eb d3                	jmp    c000b5d7 <Fs::standardiseFiles(char*, char const*, char const*)+0xb5>
c000b604:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c000b609:	0f be ea             	movsx  ebp,dl
c000b60c:	75 5e                	jne    c000b66c <Fs::standardiseFiles(char*, char const*, char const*)+0x14a>
c000b60e:	83 fd 2e             	cmp    ebp,0x2e
c000b611:	75 59                	jne    c000b66c <Fs::standardiseFiles(char*, char const*, char const*)+0x14a>
c000b613:	80 3c 0c 2e          	cmp    BYTE PTR [esp+ecx*1],0x2e
c000b617:	0f be 6c 3c 02       	movsx  ebp,BYTE PTR [esp+edi*1+0x2]
c000b61c:	74 18                	je     c000b636 <Fs::standardiseFiles(char*, char const*, char const*)+0x114>
c000b61e:	83 fd 2e             	cmp    ebp,0x2e
c000b621:	74 53                	je     c000b676 <Fs::standardiseFiles(char*, char const*, char const*)+0x154>
c000b623:	89 f9                	mov    ecx,edi
c000b625:	41                   	inc    ecx
c000b626:	0f be 14 0e          	movsx  edx,BYTE PTR [esi+ecx*1]
c000b62a:	83 fa 2f             	cmp    edx,0x2f
c000b62d:	74 f6                	je     c000b625 <Fs::standardiseFiles(char*, char const*, char const*)+0x103>
c000b62f:	83 fa 5c             	cmp    edx,0x5c
c000b632:	74 f1                	je     c000b625 <Fs::standardiseFiles(char*, char const*, char const*)+0x103>
c000b634:	eb ca                	jmp    c000b600 <Fs::standardiseFiles(char*, char const*, char const*)+0xde>
c000b636:	83 fd 2e             	cmp    ebp,0x2e
c000b639:	74 3b                	je     c000b676 <Fs::standardiseFiles(char*, char const*, char const*)+0x154>
c000b63b:	83 f8 03             	cmp    eax,0x3
c000b63e:	74 c0                	je     c000b600 <Fs::standardiseFiles(char*, char const*, char const*)+0xde>
c000b640:	41                   	inc    ecx
c000b641:	0f be 14 0e          	movsx  edx,BYTE PTR [esi+ecx*1]
c000b645:	83 fa 2f             	cmp    edx,0x2f
c000b648:	74 f6                	je     c000b640 <Fs::standardiseFiles(char*, char const*, char const*)+0x11e>
c000b64a:	83 fa 5c             	cmp    edx,0x5c
c000b64d:	74 f1                	je     c000b640 <Fs::standardiseFiles(char*, char const*, char const*)+0x11e>
c000b64f:	48                   	dec    eax
c000b650:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000b654:	75 06                	jne    c000b65c <Fs::standardiseFiles(char*, char const*, char const*)+0x13a>
c000b656:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000b65a:	eb f3                	jmp    c000b64f <Fs::standardiseFiles(char*, char const*, char const*)+0x12d>
c000b65c:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000b660:	74 07                	je     c000b669 <Fs::standardiseFiles(char*, char const*, char const*)+0x147>
c000b662:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000b666:	48                   	dec    eax
c000b667:	eb f3                	jmp    c000b65c <Fs::standardiseFiles(char*, char const*, char const*)+0x13a>
c000b669:	40                   	inc    eax
c000b66a:	eb 94                	jmp    c000b600 <Fs::standardiseFiles(char*, char const*, char const*)+0xde>
c000b66c:	83 fd 2f             	cmp    ebp,0x2f
c000b66f:	74 8f                	je     c000b600 <Fs::standardiseFiles(char*, char const*, char const*)+0xde>
c000b671:	83 fd 5c             	cmp    ebp,0x5c
c000b674:	74 8a                	je     c000b600 <Fs::standardiseFiles(char*, char const*, char const*)+0xde>
c000b676:	88 14 03             	mov    BYTE PTR [ebx+eax*1],dl
c000b679:	40                   	inc    eax
c000b67a:	eb 84                	jmp    c000b600 <Fs::standardiseFiles(char*, char const*, char const*)+0xde>
c000b67c:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000b680:	83 ec 0c             	sub    esp,0xc
c000b683:	53                   	push   ebx
c000b684:	e8 e7 4e ff ff       	call   c0000570 <strlen>
c000b689:	83 c4 10             	add    esp,0x10
c000b68c:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c000b691:	75 26                	jne    c000b6b9 <Fs::standardiseFiles(char*, char const*, char const*)+0x197>
c000b693:	83 ec 0c             	sub    esp,0xc
c000b696:	53                   	push   ebx
c000b697:	e8 d4 4e ff ff       	call   c0000570 <strlen>
c000b69c:	83 c4 10             	add    esp,0x10
c000b69f:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c000b6a4:	74 26                	je     c000b6cc <Fs::standardiseFiles(char*, char const*, char const*)+0x1aa>
c000b6a6:	83 ec 0c             	sub    esp,0xc
c000b6a9:	53                   	push   ebx
c000b6aa:	e8 c1 4e ff ff       	call   c0000570 <strlen>
c000b6af:	83 c4 10             	add    esp,0x10
c000b6b2:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c000b6b7:	eb c7                	jmp    c000b680 <Fs::standardiseFiles(char*, char const*, char const*)+0x15e>
c000b6b9:	83 ec 0c             	sub    esp,0xc
c000b6bc:	53                   	push   ebx
c000b6bd:	e8 ae 4e ff ff       	call   c0000570 <strlen>
c000b6c2:	83 c4 10             	add    esp,0x10
c000b6c5:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c000b6ca:	74 c7                	je     c000b693 <Fs::standardiseFiles(char*, char const*, char const*)+0x171>
c000b6cc:	81 c4 0c 04 00 00    	add    esp,0x40c
c000b6d2:	5b                   	pop    ebx
c000b6d3:	5e                   	pop    esi
c000b6d4:	5f                   	pop    edi
c000b6d5:	5d                   	pop    ebp
c000b6d6:	c3                   	ret    
c000b6d7:	90                   	nop

c000b6d8 <File::File(char const*, Process*)>:
c000b6d8:	83 ec 0c             	sub    esp,0xc
c000b6db:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b6df:	83 ec 08             	sub    esp,0x8
c000b6e2:	6a 00                	push   0x0
c000b6e4:	50                   	push   eax
c000b6e5:	e8 d4 da ff ff       	call   c00091be <UnixFile::UnixFile(int)>
c000b6ea:	83 c4 10             	add    esp,0x10
c000b6ed:	ba 64 12 02 c0       	mov    edx,0xc0021264
c000b6f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b6f6:	89 10                	mov    DWORD PTR [eax],edx
c000b6f8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000b6fc:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c000b702:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b706:	83 c0 0d             	add    eax,0xd
c000b709:	83 ec 04             	sub    esp,0x4
c000b70c:	52                   	push   edx
c000b70d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b711:	50                   	push   eax
c000b712:	e8 0b fe ff ff       	call   c000b522 <Fs::standardiseFiles(char*, char const*, char const*)>
c000b717:	83 c4 10             	add    esp,0x10
c000b71a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b71e:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000b721:	83 e8 41             	sub    eax,0x41
c000b724:	88 c2                	mov    dl,al
c000b726:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b72a:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000b730:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b734:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000b738:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b73c:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000b742:	0f b6 c0             	movzx  eax,al
c000b745:	8b 04 85 e0 94 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6b20]
c000b74c:	85 c0                	test   eax,eax
c000b74e:	74 3e                	je     c000b78e <File::File(char const*, Process*)+0xb6>
c000b750:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b754:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000b75a:	0f b6 c0             	movzx  eax,al
c000b75d:	8b 04 85 e0 94 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6b20]
c000b764:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000b76a:	85 c0                	test   eax,eax
c000b76c:	75 20                	jne    c000b78e <File::File(char const*, Process*)+0xb6>
c000b76e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b772:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000b778:	0f b6 c0             	movzx  eax,al
c000b77b:	8b 04 85 e0 94 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6b20]
c000b782:	83 ec 0c             	sub    esp,0xc
c000b785:	50                   	push   eax
c000b786:	e8 77 21 00 00       	call   c000d902 <LogicalDisk::mount()>
c000b78b:	83 c4 10             	add    esp,0x10
c000b78e:	90                   	nop
c000b78f:	83 c4 0c             	add    esp,0xc
c000b792:	c3                   	ret    
c000b793:	90                   	nop

c000b794 <File::open(FileOpenMode)>:
c000b794:	53                   	push   ebx
c000b795:	b8 0b 00 00 00       	mov    eax,0xb
c000b79a:	83 ec 08             	sub    esp,0x8
c000b79d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000b7a1:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000b7a8:	83 fa 19             	cmp    edx,0x19
c000b7ab:	77 40                	ja     c000b7ed <File::open(FileOpenMode)+0x59>
c000b7ad:	8b 14 95 e0 94 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd6b20]
c000b7b4:	85 d2                	test   edx,edx
c000b7b6:	74 35                	je     c000b7ed <File::open(FileOpenMode)+0x59>
c000b7b8:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000b7be:	85 d2                	test   edx,edx
c000b7c0:	74 2b                	je     c000b7ed <File::open(FileOpenMode)+0x59>
c000b7c2:	b8 06 00 00 00       	mov    eax,0x6
c000b7c7:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000b7cb:	75 20                	jne    c000b7ed <File::open(FileOpenMode)+0x59>
c000b7cd:	8b 02                	mov    eax,DWORD PTR [edx]
c000b7cf:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000b7d5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7d9:	51                   	push   ecx
c000b7da:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000b7dd:	51                   	push   ecx
c000b7de:	52                   	push   edx
c000b7df:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000b7e2:	83 c4 10             	add    esp,0x10
c000b7e5:	85 c0                	test   eax,eax
c000b7e7:	75 04                	jne    c000b7ed <File::open(FileOpenMode)+0x59>
c000b7e9:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000b7ed:	83 c4 08             	add    esp,0x8
c000b7f0:	5b                   	pop    ebx
c000b7f1:	c3                   	ret    

c000b7f2 <File::close()>:
c000b7f2:	53                   	push   ebx
c000b7f3:	b8 0b 00 00 00       	mov    eax,0xb
c000b7f8:	83 ec 08             	sub    esp,0x8
c000b7fb:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b7ff:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b806:	83 f9 19             	cmp    ecx,0x19
c000b809:	77 41                	ja     c000b84c <File::close()+0x5a>
c000b80b:	8b 1c 8d e0 94 02 c0 	mov    ebx,DWORD PTR [ecx*4-0x3ffd6b20]
c000b812:	85 db                	test   ebx,ebx
c000b814:	74 36                	je     c000b84c <File::close()+0x5a>
c000b816:	83 bb 74 01 00 00 00 	cmp    DWORD PTR [ebx+0x174],0x0
c000b81d:	74 2d                	je     c000b84c <File::close()+0x5a>
c000b81f:	b8 05 00 00 00       	mov    eax,0x5
c000b824:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b828:	74 22                	je     c000b84c <File::close()+0x5a>
c000b82a:	c6 42 0c 00          	mov    BYTE PTR [edx+0xc],0x0
c000b82e:	8b 04 8d e0 94 02 c0 	mov    eax,DWORD PTR [ecx*4-0x3ffd6b20]
c000b835:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000b83b:	53                   	push   ebx
c000b83c:	53                   	push   ebx
c000b83d:	8b 08                	mov    ecx,DWORD PTR [eax]
c000b83f:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c000b845:	50                   	push   eax
c000b846:	ff 51 1c             	call   DWORD PTR [ecx+0x1c]
c000b849:	83 c4 10             	add    esp,0x10
c000b84c:	83 c4 08             	add    esp,0x8
c000b84f:	5b                   	pop    ebx
c000b850:	c3                   	ret    
c000b851:	90                   	nop

c000b852 <File::seek(unsigned long long)>:
c000b852:	56                   	push   esi
c000b853:	53                   	push   ebx
c000b854:	b8 0b 00 00 00       	mov    eax,0xb
c000b859:	51                   	push   ecx
c000b85a:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000b85e:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000b862:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c000b869:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000b86d:	83 fa 19             	cmp    edx,0x19
c000b870:	77 31                	ja     c000b8a3 <File::seek(unsigned long long)+0x51>
c000b872:	8b 14 95 e0 94 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd6b20]
c000b879:	85 d2                	test   edx,edx
c000b87b:	74 26                	je     c000b8a3 <File::seek(unsigned long long)+0x51>
c000b87d:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000b883:	85 d2                	test   edx,edx
c000b885:	74 1c                	je     c000b8a3 <File::seek(unsigned long long)+0x51>
c000b887:	b8 05 00 00 00       	mov    eax,0x5
c000b88c:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c000b890:	74 11                	je     c000b8a3 <File::seek(unsigned long long)+0x51>
c000b892:	8b 02                	mov    eax,DWORD PTR [edx]
c000b894:	53                   	push   ebx
c000b895:	51                   	push   ecx
c000b896:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c000b89c:	52                   	push   edx
c000b89d:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000b8a0:	83 c4 10             	add    esp,0x10
c000b8a3:	5a                   	pop    edx
c000b8a4:	5b                   	pop    ebx
c000b8a5:	5e                   	pop    esi
c000b8a6:	c3                   	ret    
c000b8a7:	90                   	nop

c000b8a8 <File::truncate(unsigned long long)>:
c000b8a8:	56                   	push   esi
c000b8a9:	53                   	push   ebx
c000b8aa:	b8 0b 00 00 00       	mov    eax,0xb
c000b8af:	51                   	push   ecx
c000b8b0:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000b8b4:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000b8b8:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c000b8bf:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000b8c3:	83 fa 19             	cmp    edx,0x19
c000b8c6:	77 31                	ja     c000b8f9 <File::truncate(unsigned long long)+0x51>
c000b8c8:	8b 14 95 e0 94 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd6b20]
c000b8cf:	85 d2                	test   edx,edx
c000b8d1:	74 26                	je     c000b8f9 <File::truncate(unsigned long long)+0x51>
c000b8d3:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000b8d9:	85 d2                	test   edx,edx
c000b8db:	74 1c                	je     c000b8f9 <File::truncate(unsigned long long)+0x51>
c000b8dd:	b8 05 00 00 00       	mov    eax,0x5
c000b8e2:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c000b8e6:	74 11                	je     c000b8f9 <File::truncate(unsigned long long)+0x51>
c000b8e8:	8b 02                	mov    eax,DWORD PTR [edx]
c000b8ea:	53                   	push   ebx
c000b8eb:	51                   	push   ecx
c000b8ec:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c000b8f2:	52                   	push   edx
c000b8f3:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c000b8f6:	83 c4 10             	add    esp,0x10
c000b8f9:	5a                   	pop    edx
c000b8fa:	5b                   	pop    ebx
c000b8fb:	5e                   	pop    esi
c000b8fc:	c3                   	ret    
c000b8fd:	90                   	nop

c000b8fe <File::tell(unsigned long long*)>:
c000b8fe:	83 ec 0c             	sub    esp,0xc
c000b901:	b8 0b 00 00 00       	mov    eax,0xb
c000b906:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000b90a:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000b911:	83 fa 19             	cmp    edx,0x19
c000b914:	77 34                	ja     c000b94a <File::tell(unsigned long long*)+0x4c>
c000b916:	8b 14 95 e0 94 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd6b20]
c000b91d:	85 d2                	test   edx,edx
c000b91f:	74 29                	je     c000b94a <File::tell(unsigned long long*)+0x4c>
c000b921:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000b927:	85 d2                	test   edx,edx
c000b929:	74 1f                	je     c000b94a <File::tell(unsigned long long*)+0x4c>
c000b92b:	b8 05 00 00 00       	mov    eax,0x5
c000b930:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000b934:	74 14                	je     c000b94a <File::tell(unsigned long long*)+0x4c>
c000b936:	50                   	push   eax
c000b937:	8b 02                	mov    eax,DWORD PTR [edx]
c000b939:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000b93d:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000b943:	52                   	push   edx
c000b944:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000b947:	83 c4 10             	add    esp,0x10
c000b94a:	83 c4 0c             	add    esp,0xc
c000b94d:	c3                   	ret    

c000b94e <File::rewind()>:
c000b94e:	83 ec 10             	sub    esp,0x10
c000b951:	6a 00                	push   0x0
c000b953:	6a 00                	push   0x0
c000b955:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b959:	e8 f4 fe ff ff       	call   c000b852 <File::seek(unsigned long long)>
c000b95e:	83 c4 1c             	add    esp,0x1c
c000b961:	c3                   	ret    

c000b962 <File::unlink()>:
c000b962:	83 ec 0c             	sub    esp,0xc
c000b965:	b8 0b 00 00 00       	mov    eax,0xb
c000b96a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b96e:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b975:	83 f9 19             	cmp    ecx,0x19
c000b978:	77 2f                	ja     c000b9a9 <File::unlink()+0x47>
c000b97a:	8b 0c 8d e0 94 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd6b20]
c000b981:	85 c9                	test   ecx,ecx
c000b983:	74 24                	je     c000b9a9 <File::unlink()+0x47>
c000b985:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000b98b:	85 c9                	test   ecx,ecx
c000b98d:	74 1a                	je     c000b9a9 <File::unlink()+0x47>
c000b98f:	b8 06 00 00 00       	mov    eax,0x6
c000b994:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b998:	75 0f                	jne    c000b9a9 <File::unlink()+0x47>
c000b99a:	83 c2 0d             	add    edx,0xd
c000b99d:	50                   	push   eax
c000b99e:	50                   	push   eax
c000b99f:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b9a1:	52                   	push   edx
c000b9a2:	51                   	push   ecx
c000b9a3:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c000b9a6:	83 c4 10             	add    esp,0x10
c000b9a9:	83 c4 0c             	add    esp,0xc
c000b9ac:	c3                   	ret    
c000b9ad:	90                   	nop

c000b9ae <File::rename(char const*)>:
c000b9ae:	83 ec 0c             	sub    esp,0xc
c000b9b1:	b8 0b 00 00 00       	mov    eax,0xb
c000b9b6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b9ba:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b9c1:	83 f9 19             	cmp    ecx,0x19
c000b9c4:	77 32                	ja     c000b9f8 <File::rename(char const*)+0x4a>
c000b9c6:	8b 0c 8d e0 94 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd6b20]
c000b9cd:	85 c9                	test   ecx,ecx
c000b9cf:	74 27                	je     c000b9f8 <File::rename(char const*)+0x4a>
c000b9d1:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000b9d7:	85 c9                	test   ecx,ecx
c000b9d9:	74 1d                	je     c000b9f8 <File::rename(char const*)+0x4a>
c000b9db:	b8 06 00 00 00       	mov    eax,0x6
c000b9e0:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b9e4:	75 12                	jne    c000b9f8 <File::rename(char const*)+0x4a>
c000b9e6:	83 c2 0d             	add    edx,0xd
c000b9e9:	50                   	push   eax
c000b9ea:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b9ec:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000b9f0:	52                   	push   edx
c000b9f1:	51                   	push   ecx
c000b9f2:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000b9f5:	83 c4 10             	add    esp,0x10
c000b9f8:	83 c4 0c             	add    esp,0xc
c000b9fb:	c3                   	ret    

c000b9fc <File::chfatattr(unsigned char, unsigned char)>:
c000b9fc:	57                   	push   edi
c000b9fd:	b8 0b 00 00 00       	mov    eax,0xb
c000ba02:	56                   	push   esi
c000ba03:	53                   	push   ebx
c000ba04:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ba08:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000ba0c:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000ba13:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000ba17:	83 f9 19             	cmp    ecx,0x19
c000ba1a:	77 37                	ja     c000ba53 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000ba1c:	8b 0c 8d e0 94 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd6b20]
c000ba23:	85 c9                	test   ecx,ecx
c000ba25:	74 2c                	je     c000ba53 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000ba27:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000ba2d:	85 c9                	test   ecx,ecx
c000ba2f:	74 22                	je     c000ba53 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000ba31:	b8 06 00 00 00       	mov    eax,0x6
c000ba36:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000ba3a:	75 17                	jne    c000ba53 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000ba3c:	8b 39                	mov    edi,DWORD PTR [ecx]
c000ba3e:	89 f0                	mov    eax,esi
c000ba40:	83 c2 0d             	add    edx,0xd
c000ba43:	0f b6 f0             	movzx  esi,al
c000ba46:	0f b6 db             	movzx  ebx,bl
c000ba49:	56                   	push   esi
c000ba4a:	53                   	push   ebx
c000ba4b:	52                   	push   edx
c000ba4c:	51                   	push   ecx
c000ba4d:	ff 57 38             	call   DWORD PTR [edi+0x38]
c000ba50:	83 c4 10             	add    esp,0x10
c000ba53:	5b                   	pop    ebx
c000ba54:	5e                   	pop    esi
c000ba55:	5f                   	pop    edi
c000ba56:	c3                   	ret    
c000ba57:	90                   	nop

c000ba58 <File::exists()>:
c000ba58:	83 ec 0c             	sub    esp,0xc
c000ba5b:	31 c0                	xor    eax,eax
c000ba5d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ba61:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000ba68:	83 f9 19             	cmp    ecx,0x19
c000ba6b:	77 24                	ja     c000ba91 <File::exists()+0x39>
c000ba6d:	8b 0c 8d e0 94 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd6b20]
c000ba74:	85 c9                	test   ecx,ecx
c000ba76:	74 19                	je     c000ba91 <File::exists()+0x39>
c000ba78:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000ba7e:	85 c9                	test   ecx,ecx
c000ba80:	74 0f                	je     c000ba91 <File::exists()+0x39>
c000ba82:	83 c2 0d             	add    edx,0xd
c000ba85:	50                   	push   eax
c000ba86:	50                   	push   eax
c000ba87:	8b 01                	mov    eax,DWORD PTR [ecx]
c000ba89:	52                   	push   edx
c000ba8a:	51                   	push   ecx
c000ba8b:	ff 50 48             	call   DWORD PTR [eax+0x48]
c000ba8e:	83 c4 10             	add    esp,0x10
c000ba91:	83 c4 0c             	add    esp,0xc
c000ba94:	c3                   	ret    
c000ba95:	90                   	nop

c000ba96 <File::stat(unsigned long long*, bool*)>:
c000ba96:	56                   	push   esi
c000ba97:	53                   	push   ebx
c000ba98:	50                   	push   eax
c000ba99:	b8 0b 00 00 00       	mov    eax,0xb
c000ba9e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000baa2:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000baa6:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000baad:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000bab1:	83 f9 19             	cmp    ecx,0x19
c000bab4:	77 3d                	ja     c000baf3 <File::stat(unsigned long long*, bool*)+0x5d>
c000bab6:	8b 0c 8d e0 94 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd6b20]
c000babd:	85 c9                	test   ecx,ecx
c000babf:	74 32                	je     c000baf3 <File::stat(unsigned long long*, bool*)+0x5d>
c000bac1:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000bac7:	85 c9                	test   ecx,ecx
c000bac9:	74 28                	je     c000baf3 <File::stat(unsigned long long*, bool*)+0x5d>
c000bacb:	8b 01                	mov    eax,DWORD PTR [ecx]
c000bacd:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000bad1:	74 13                	je     c000bae6 <File::stat(unsigned long long*, bool*)+0x50>
c000bad3:	83 ec 04             	sub    esp,0x4
c000bad6:	56                   	push   esi
c000bad7:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c000badd:	51                   	push   ecx
c000bade:	ff 50 30             	call   DWORD PTR [eax+0x30]
c000bae1:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000bae4:	eb 0a                	jmp    c000baf0 <File::stat(unsigned long long*, bool*)+0x5a>
c000bae6:	53                   	push   ebx
c000bae7:	83 c2 0d             	add    edx,0xd
c000baea:	56                   	push   esi
c000baeb:	52                   	push   edx
c000baec:	51                   	push   ecx
c000baed:	ff 50 34             	call   DWORD PTR [eax+0x34]
c000baf0:	83 c4 10             	add    esp,0x10
c000baf3:	5a                   	pop    edx
c000baf4:	5b                   	pop    ebx
c000baf5:	5e                   	pop    esi
c000baf6:	c3                   	ret    

c000baf7 <Fs::setcwd(Process*, char*)>:
c000baf7:	55                   	push   ebp
c000baf8:	57                   	push   edi
c000baf9:	56                   	push   esi
c000bafa:	53                   	push   ebx
c000bafb:	81 ec 20 02 00 00    	sub    esp,0x220
c000bb01:	8b ac 24 34 02 00 00 	mov    ebp,DWORD PTR [esp+0x234]
c000bb08:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c000bb0e:	57                   	push   edi
c000bb0f:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c000bb16:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c000bb1a:	56                   	push   esi
c000bb1b:	e8 02 fa ff ff       	call   c000b522 <Fs::standardiseFiles(char*, char const*, char const*)>
c000bb20:	89 34 24             	mov    DWORD PTR [esp],esi
c000bb23:	e8 48 4a ff ff       	call   c0000570 <strlen>
c000bb28:	83 c4 10             	add    esp,0x10
c000bb2b:	83 f8 02             	cmp    eax,0x2
c000bb2e:	77 15                	ja     c000bb45 <Fs::setcwd(Process*, char*)+0x4e>
c000bb30:	0f be 5c 24 10       	movsx  ebx,BYTE PTR [esp+0x10]
c000bb35:	83 eb 41             	sub    ebx,0x41
c000bb38:	8b 04 9d e0 94 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd6b20]
c000bb3f:	85 c0                	test   eax,eax
c000bb41:	75 1c                	jne    c000bb5f <Fs::setcwd(Process*, char*)+0x68>
c000bb43:	eb 2f                	jmp    c000bb74 <Fs::setcwd(Process*, char*)+0x7d>
c000bb45:	83 ec 0c             	sub    esp,0xc
c000bb48:	56                   	push   esi
c000bb49:	e8 22 4a ff ff       	call   c0000570 <strlen>
c000bb4e:	83 c4 10             	add    esp,0x10
c000bb51:	83 f8 03             	cmp    eax,0x3
c000bb54:	75 57                	jne    c000bbad <Fs::setcwd(Process*, char*)+0xb6>
c000bb56:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c000bb5b:	75 50                	jne    c000bbad <Fs::setcwd(Process*, char*)+0xb6>
c000bb5d:	eb d1                	jmp    c000bb30 <Fs::setcwd(Process*, char*)+0x39>
c000bb5f:	83 b8 74 01 00 00 00 	cmp    DWORD PTR [eax+0x174],0x0
c000bb66:	75 0c                	jne    c000bb74 <Fs::setcwd(Process*, char*)+0x7d>
c000bb68:	83 ec 0c             	sub    esp,0xc
c000bb6b:	50                   	push   eax
c000bb6c:	e8 91 1d 00 00       	call   c000d902 <LogicalDisk::mount()>
c000bb71:	83 c4 10             	add    esp,0x10
c000bb74:	b8 03 00 00 00       	mov    eax,0x3
c000bb79:	83 fb 19             	cmp    ebx,0x19
c000bb7c:	0f 87 c6 00 00 00    	ja     c000bc48 <Fs::setcwd(Process*, char*)+0x151>
c000bb82:	8b 14 9d e0 94 02 c0 	mov    edx,DWORD PTR [ebx*4-0x3ffd6b20]
c000bb89:	b8 05 00 00 00       	mov    eax,0x5
c000bb8e:	85 d2                	test   edx,edx
c000bb90:	0f 84 b2 00 00 00    	je     c000bc48 <Fs::setcwd(Process*, char*)+0x151>
c000bb96:	b8 06 00 00 00       	mov    eax,0x6
c000bb9b:	83 ba 74 01 00 00 00 	cmp    DWORD PTR [edx+0x174],0x0
c000bba2:	0f 85 92 00 00 00    	jne    c000bc3a <Fs::setcwd(Process*, char*)+0x143>
c000bba8:	e9 9b 00 00 00       	jmp    c000bc48 <Fs::setcwd(Process*, char*)+0x151>
c000bbad:	83 ec 0c             	sub    esp,0xc
c000bbb0:	68 14 01 00 00       	push   0x114
c000bbb5:	e8 fc be ff ff       	call   c0007ab6 <malloc>
c000bbba:	83 c4 0c             	add    esp,0xc
c000bbbd:	89 c3                	mov    ebx,eax
c000bbbf:	55                   	push   ebp
c000bbc0:	56                   	push   esi
c000bbc1:	50                   	push   eax
c000bbc2:	e8 11 fb ff ff       	call   c000b6d8 <File::File(char const*, Process*)>
c000bbc7:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c000bbcc:	83 c4 0c             	add    esp,0xc
c000bbcf:	8d 44 24 0b          	lea    eax,[esp+0xb]
c000bbd3:	50                   	push   eax
c000bbd4:	8d 44 24 10          	lea    eax,[esp+0x10]
c000bbd8:	50                   	push   eax
c000bbd9:	53                   	push   ebx
c000bbda:	e8 b7 fe ff ff       	call   c000ba96 <File::stat(unsigned long long*, bool*)>
c000bbdf:	83 c4 10             	add    esp,0x10
c000bbe2:	83 f8 02             	cmp    eax,0x2
c000bbe5:	74 27                	je     c000bc0e <Fs::setcwd(Process*, char*)+0x117>
c000bbe7:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000bbec:	75 1c                	jne    c000bc0a <Fs::setcwd(Process*, char*)+0x113>
c000bbee:	b8 02 00 00 00       	mov    eax,0x2
c000bbf3:	85 db                	test   ebx,ebx
c000bbf5:	74 51                	je     c000bc48 <Fs::setcwd(Process*, char*)+0x151>
c000bbf7:	83 ec 0c             	sub    esp,0xc
c000bbfa:	8b 03                	mov    eax,DWORD PTR [ebx]
c000bbfc:	53                   	push   ebx
c000bbfd:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000bc00:	83 c4 10             	add    esp,0x10
c000bc03:	b8 02 00 00 00       	mov    eax,0x2
c000bc08:	eb 3e                	jmp    c000bc48 <Fs::setcwd(Process*, char*)+0x151>
c000bc0a:	85 c0                	test   eax,eax
c000bc0c:	74 1c                	je     c000bc2a <Fs::setcwd(Process*, char*)+0x133>
c000bc0e:	b8 01 00 00 00       	mov    eax,0x1
c000bc13:	85 db                	test   ebx,ebx
c000bc15:	74 31                	je     c000bc48 <Fs::setcwd(Process*, char*)+0x151>
c000bc17:	83 ec 0c             	sub    esp,0xc
c000bc1a:	8b 03                	mov    eax,DWORD PTR [ebx]
c000bc1c:	53                   	push   ebx
c000bc1d:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000bc20:	83 c4 10             	add    esp,0x10
c000bc23:	b8 01 00 00 00       	mov    eax,0x1
c000bc28:	eb 1e                	jmp    c000bc48 <Fs::setcwd(Process*, char*)+0x151>
c000bc2a:	85 db                	test   ebx,ebx
c000bc2c:	74 0c                	je     c000bc3a <Fs::setcwd(Process*, char*)+0x143>
c000bc2e:	83 ec 0c             	sub    esp,0xc
c000bc31:	8b 03                	mov    eax,DWORD PTR [ebx]
c000bc33:	53                   	push   ebx
c000bc34:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000bc37:	83 c4 10             	add    esp,0x10
c000bc3a:	50                   	push   eax
c000bc3b:	50                   	push   eax
c000bc3c:	56                   	push   esi
c000bc3d:	57                   	push   edi
c000bc3e:	e8 fd 49 ff ff       	call   c0000640 <strcpy>
c000bc43:	83 c4 10             	add    esp,0x10
c000bc46:	31 c0                	xor    eax,eax
c000bc48:	81 c4 1c 02 00 00    	add    esp,0x21c
c000bc4e:	5b                   	pop    ebx
c000bc4f:	5e                   	pop    esi
c000bc50:	5f                   	pop    edi
c000bc51:	5d                   	pop    ebp
c000bc52:	c3                   	ret    
c000bc53:	90                   	nop

c000bc54 <Directory::Directory(char const*, Process*)>:
c000bc54:	83 ec 0c             	sub    esp,0xc
c000bc57:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bc5b:	83 ec 08             	sub    esp,0x8
c000bc5e:	6a 00                	push   0x0
c000bc60:	50                   	push   eax
c000bc61:	e8 58 d5 ff ff       	call   c00091be <UnixFile::UnixFile(int)>
c000bc66:	83 c4 10             	add    esp,0x10
c000bc69:	ba 80 12 02 c0       	mov    edx,0xc0021280
c000bc6e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bc72:	89 10                	mov    DWORD PTR [eax],edx
c000bc74:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000bc78:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c000bc7e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bc82:	83 c0 0d             	add    eax,0xd
c000bc85:	83 ec 04             	sub    esp,0x4
c000bc88:	52                   	push   edx
c000bc89:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bc8d:	50                   	push   eax
c000bc8e:	e8 8f f8 ff ff       	call   c000b522 <Fs::standardiseFiles(char*, char const*, char const*)>
c000bc93:	83 c4 10             	add    esp,0x10
c000bc96:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bc9a:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000bc9d:	83 e8 41             	sub    eax,0x41
c000bca0:	88 c2                	mov    dl,al
c000bca2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bca6:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000bcac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bcb0:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000bcb4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bcb8:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000bcbe:	0f b6 c0             	movzx  eax,al
c000bcc1:	8b 04 85 e0 94 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6b20]
c000bcc8:	85 c0                	test   eax,eax
c000bcca:	74 3e                	je     c000bd0a <Directory::Directory(char const*, Process*)+0xb6>
c000bccc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bcd0:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000bcd6:	0f b6 c0             	movzx  eax,al
c000bcd9:	8b 04 85 e0 94 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6b20]
c000bce0:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000bce6:	85 c0                	test   eax,eax
c000bce8:	75 20                	jne    c000bd0a <Directory::Directory(char const*, Process*)+0xb6>
c000bcea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bcee:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000bcf4:	0f b6 c0             	movzx  eax,al
c000bcf7:	8b 04 85 e0 94 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6b20]
c000bcfe:	83 ec 0c             	sub    esp,0xc
c000bd01:	50                   	push   eax
c000bd02:	e8 fb 1b 00 00       	call   c000d902 <LogicalDisk::mount()>
c000bd07:	83 c4 10             	add    esp,0x10
c000bd0a:	90                   	nop
c000bd0b:	83 c4 0c             	add    esp,0xc
c000bd0e:	c3                   	ret    
c000bd0f:	90                   	nop

c000bd10 <Directory::open()>:
c000bd10:	53                   	push   ebx
c000bd11:	b8 0b 00 00 00       	mov    eax,0xb
c000bd16:	83 ec 08             	sub    esp,0x8
c000bd19:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000bd1d:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000bd24:	83 fa 19             	cmp    edx,0x19
c000bd27:	77 3d                	ja     c000bd66 <Directory::open()+0x56>
c000bd29:	8b 14 95 e0 94 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd6b20]
c000bd30:	85 d2                	test   edx,edx
c000bd32:	74 32                	je     c000bd66 <Directory::open()+0x56>
c000bd34:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000bd3a:	85 d2                	test   edx,edx
c000bd3c:	74 28                	je     c000bd66 <Directory::open()+0x56>
c000bd3e:	b8 06 00 00 00       	mov    eax,0x6
c000bd43:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000bd47:	75 1d                	jne    c000bd66 <Directory::open()+0x56>
c000bd49:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000bd4f:	50                   	push   eax
c000bd50:	8b 02                	mov    eax,DWORD PTR [edx]
c000bd52:	51                   	push   ecx
c000bd53:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000bd56:	51                   	push   ecx
c000bd57:	52                   	push   edx
c000bd58:	ff 50 50             	call   DWORD PTR [eax+0x50]
c000bd5b:	83 c4 10             	add    esp,0x10
c000bd5e:	85 c0                	test   eax,eax
c000bd60:	75 04                	jne    c000bd66 <Directory::open()+0x56>
c000bd62:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000bd66:	83 c4 08             	add    esp,0x8
c000bd69:	5b                   	pop    ebx
c000bd6a:	c3                   	ret    
c000bd6b:	90                   	nop

c000bd6c <Directory::close()>:
c000bd6c:	53                   	push   ebx
c000bd6d:	b8 0b 00 00 00       	mov    eax,0xb
c000bd72:	83 ec 08             	sub    esp,0x8
c000bd75:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bd79:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000bd80:	83 f9 19             	cmp    ecx,0x19
c000bd83:	77 41                	ja     c000bdc6 <Directory::close()+0x5a>
c000bd85:	8b 1c 8d e0 94 02 c0 	mov    ebx,DWORD PTR [ecx*4-0x3ffd6b20]
c000bd8c:	85 db                	test   ebx,ebx
c000bd8e:	74 36                	je     c000bdc6 <Directory::close()+0x5a>
c000bd90:	83 bb 74 01 00 00 00 	cmp    DWORD PTR [ebx+0x174],0x0
c000bd97:	74 2d                	je     c000bdc6 <Directory::close()+0x5a>
c000bd99:	b8 05 00 00 00       	mov    eax,0x5
c000bd9e:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000bda2:	74 22                	je     c000bdc6 <Directory::close()+0x5a>
c000bda4:	c6 42 0c 00          	mov    BYTE PTR [edx+0xc],0x0
c000bda8:	8b 04 8d e0 94 02 c0 	mov    eax,DWORD PTR [ecx*4-0x3ffd6b20]
c000bdaf:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000bdb5:	53                   	push   ebx
c000bdb6:	53                   	push   ebx
c000bdb7:	8b 08                	mov    ecx,DWORD PTR [eax]
c000bdb9:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c000bdbf:	50                   	push   eax
c000bdc0:	ff 51 20             	call   DWORD PTR [ecx+0x20]
c000bdc3:	83 c4 10             	add    esp,0x10
c000bdc6:	83 c4 08             	add    esp,0x8
c000bdc9:	5b                   	pop    ebx
c000bdca:	c3                   	ret    
c000bdcb:	90                   	nop

c000bdcc <Directory::unlink()>:
c000bdcc:	83 ec 0c             	sub    esp,0xc
c000bdcf:	b8 0b 00 00 00       	mov    eax,0xb
c000bdd4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bdd8:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000bddf:	83 f9 19             	cmp    ecx,0x19
c000bde2:	77 2f                	ja     c000be13 <Directory::unlink()+0x47>
c000bde4:	8b 0c 8d e0 94 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd6b20]
c000bdeb:	85 c9                	test   ecx,ecx
c000bded:	74 24                	je     c000be13 <Directory::unlink()+0x47>
c000bdef:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000bdf5:	85 c9                	test   ecx,ecx
c000bdf7:	74 1a                	je     c000be13 <Directory::unlink()+0x47>
c000bdf9:	b8 06 00 00 00       	mov    eax,0x6
c000bdfe:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000be02:	75 0f                	jne    c000be13 <Directory::unlink()+0x47>
c000be04:	83 c2 0d             	add    edx,0xd
c000be07:	50                   	push   eax
c000be08:	50                   	push   eax
c000be09:	8b 01                	mov    eax,DWORD PTR [ecx]
c000be0b:	52                   	push   edx
c000be0c:	51                   	push   ecx
c000be0d:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c000be10:	83 c4 10             	add    esp,0x10
c000be13:	83 c4 0c             	add    esp,0xc
c000be16:	c3                   	ret    
c000be17:	90                   	nop

c000be18 <Directory::rename(char const*)>:
c000be18:	83 ec 0c             	sub    esp,0xc
c000be1b:	b8 0b 00 00 00       	mov    eax,0xb
c000be20:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000be24:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000be2b:	83 f9 19             	cmp    ecx,0x19
c000be2e:	77 32                	ja     c000be62 <Directory::rename(char const*)+0x4a>
c000be30:	8b 0c 8d e0 94 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd6b20]
c000be37:	85 c9                	test   ecx,ecx
c000be39:	74 27                	je     c000be62 <Directory::rename(char const*)+0x4a>
c000be3b:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000be41:	85 c9                	test   ecx,ecx
c000be43:	74 1d                	je     c000be62 <Directory::rename(char const*)+0x4a>
c000be45:	b8 06 00 00 00       	mov    eax,0x6
c000be4a:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000be4e:	75 12                	jne    c000be62 <Directory::rename(char const*)+0x4a>
c000be50:	83 c2 0d             	add    edx,0xd
c000be53:	50                   	push   eax
c000be54:	8b 01                	mov    eax,DWORD PTR [ecx]
c000be56:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000be5a:	52                   	push   edx
c000be5b:	51                   	push   ecx
c000be5c:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000be5f:	83 c4 10             	add    esp,0x10
c000be62:	83 c4 0c             	add    esp,0xc
c000be65:	c3                   	ret    

c000be66 <Directory::exists()>:
c000be66:	83 ec 0c             	sub    esp,0xc
c000be69:	31 c0                	xor    eax,eax
c000be6b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000be6f:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000be76:	83 f9 19             	cmp    ecx,0x19
c000be79:	77 24                	ja     c000be9f <Directory::exists()+0x39>
c000be7b:	8b 0c 8d e0 94 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd6b20]
c000be82:	85 c9                	test   ecx,ecx
c000be84:	74 19                	je     c000be9f <Directory::exists()+0x39>
c000be86:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000be8c:	85 c9                	test   ecx,ecx
c000be8e:	74 0f                	je     c000be9f <Directory::exists()+0x39>
c000be90:	83 c2 0d             	add    edx,0xd
c000be93:	50                   	push   eax
c000be94:	50                   	push   eax
c000be95:	8b 01                	mov    eax,DWORD PTR [ecx]
c000be97:	52                   	push   edx
c000be98:	51                   	push   ecx
c000be99:	ff 50 48             	call   DWORD PTR [eax+0x48]
c000be9c:	83 c4 10             	add    esp,0x10
c000be9f:	83 c4 0c             	add    esp,0xc
c000bea2:	c3                   	ret    
c000bea3:	90                   	nop

c000bea4 <Directory::read(dirent*)>:
c000bea4:	83 ec 1c             	sub    esp,0x1c
c000bea7:	b8 0b 00 00 00       	mov    eax,0xb
c000beac:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000beb0:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000beb7:	83 f9 19             	cmp    ecx,0x19
c000beba:	77 30                	ja     c000beec <Directory::read(dirent*)+0x48>
c000bebc:	8b 0c 8d e0 94 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd6b20]
c000bec3:	85 c9                	test   ecx,ecx
c000bec5:	74 25                	je     c000beec <Directory::read(dirent*)+0x48>
c000bec7:	83 b9 74 01 00 00 00 	cmp    DWORD PTR [ecx+0x174],0x0
c000bece:	74 1c                	je     c000beec <Directory::read(dirent*)+0x48>
c000bed0:	83 ec 0c             	sub    esp,0xc
c000bed3:	8b 02                	mov    eax,DWORD PTR [edx]
c000bed5:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c000bed9:	51                   	push   ecx
c000beda:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bede:	6a 00                	push   0x0
c000bee0:	68 10 01 00 00       	push   0x110
c000bee5:	52                   	push   edx
c000bee6:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000bee9:	83 c4 20             	add    esp,0x20
c000beec:	83 c4 1c             	add    esp,0x1c
c000beef:	c3                   	ret    

c000bef0 <Directory::create()>:
c000bef0:	83 ec 0c             	sub    esp,0xc
c000bef3:	b8 0b 00 00 00       	mov    eax,0xb
c000bef8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000befc:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000bf03:	83 f9 19             	cmp    ecx,0x19
c000bf06:	77 2f                	ja     c000bf37 <Directory::create()+0x47>
c000bf08:	8b 0c 8d e0 94 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd6b20]
c000bf0f:	85 c9                	test   ecx,ecx
c000bf11:	74 24                	je     c000bf37 <Directory::create()+0x47>
c000bf13:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000bf19:	85 c9                	test   ecx,ecx
c000bf1b:	74 1a                	je     c000bf37 <Directory::create()+0x47>
c000bf1d:	b8 06 00 00 00       	mov    eax,0x6
c000bf22:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000bf26:	75 0f                	jne    c000bf37 <Directory::create()+0x47>
c000bf28:	83 c2 0d             	add    edx,0xd
c000bf2b:	50                   	push   eax
c000bf2c:	50                   	push   eax
c000bf2d:	8b 01                	mov    eax,DWORD PTR [ecx]
c000bf2f:	52                   	push   edx
c000bf30:	51                   	push   ecx
c000bf31:	ff 50 40             	call   DWORD PTR [eax+0x40]
c000bf34:	83 c4 10             	add    esp,0x10
c000bf37:	83 c4 0c             	add    esp,0xc
c000bf3a:	c3                   	ret    
c000bf3b:	90                   	nop

c000bf3c <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c000bf3c:	b8 0a 00 00 00       	mov    eax,0xa
c000bf41:	c3                   	ret    
c000bf42:	66 90                	xchg   ax,ax

c000bf44 <Bus::Bus(char const*)>:
c000bf44:	83 ec 0c             	sub    esp,0xc
c000bf47:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bf4b:	83 ec 08             	sub    esp,0x8
c000bf4e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf52:	50                   	push   eax
c000bf53:	e8 22 08 00 00       	call   c000c77a <Device::Device(char const*)>
c000bf58:	83 c4 10             	add    esp,0x10
c000bf5b:	ba 9c 12 02 c0       	mov    edx,0xc002129c
c000bf60:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bf64:	89 10                	mov    DWORD PTR [eax],edx
c000bf66:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bf6a:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000bf74:	90                   	nop
c000bf75:	83 c4 0c             	add    esp,0xc
c000bf78:	c3                   	ret    
c000bf79:	90                   	nop
c000bf7a:	66 90                	xchg   ax,ax

c000bf7c <Bus::~Bus()>:
c000bf7c:	83 ec 0c             	sub    esp,0xc
c000bf7f:	ba 9c 12 02 c0       	mov    edx,0xc002129c
c000bf84:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bf88:	89 10                	mov    DWORD PTR [eax],edx
c000bf8a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bf8e:	83 ec 0c             	sub    esp,0xc
c000bf91:	50                   	push   eax
c000bf92:	e8 4d 05 00 00       	call   c000c4e4 <Device::~Device()>
c000bf97:	83 c4 10             	add    esp,0x10
c000bf9a:	90                   	nop
c000bf9b:	83 c4 0c             	add    esp,0xc
c000bf9e:	c3                   	ret    
c000bf9f:	90                   	nop

c000bfa0 <Bus::~Bus()>:
c000bfa0:	83 ec 0c             	sub    esp,0xc
c000bfa3:	83 ec 0c             	sub    esp,0xc
c000bfa6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bfaa:	e8 cd ff ff ff       	call   c000bf7c <Bus::~Bus()>
c000bfaf:	83 c4 10             	add    esp,0x10
c000bfb2:	83 ec 08             	sub    esp,0x8
c000bfb5:	68 58 01 00 00       	push   0x158
c000bfba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bfbe:	e8 55 e8 ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c000bfc3:	83 c4 10             	add    esp,0x10
c000bfc6:	83 c4 0c             	add    esp,0xc
c000bfc9:	c3                   	ret    

c000bfca <beepThread(void*)>:
c000bfca:	83 ec 0c             	sub    esp,0xc
c000bfcd:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c000bfd2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bfd6:	48                   	dec    eax
c000bfd7:	a3 68 a4 02 c0       	mov    ds:0xc002a468,eax
c000bfdc:	75 01                	jne    c000bfdf <beepThread(void*)+0x15>
c000bfde:	fb                   	sti    
c000bfdf:	83 ec 0c             	sub    esp,0xc
c000bfe2:	6b c2 0a             	imul   eax,edx,0xa
c000bfe5:	50                   	push   eax
c000bfe6:	e8 f1 9d 00 00       	call   c0015ddc <milliTenthSleep(unsigned int)>
c000bfeb:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000bff2:	e8 40 bd 00 00       	call   c0017d37 <HalMakeBeep(int)>
c000bff7:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c000bfff:	83 c4 1c             	add    esp,0x1c
c000c002:	e9 b9 9c 00 00       	jmp    c0015cc0 <blockTask(TaskState)>

c000c007 <Krnl::beep(int, int, bool)>:
c000c007:	56                   	push   esi
c000c008:	53                   	push   ebx
c000c009:	83 ec 10             	sub    esp,0x10
c000c00c:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000c010:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000c014:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c018:	e8 1a bd 00 00       	call   c0017d37 <HalMakeBeep(int)>
c000c01d:	83 c4 10             	add    esp,0x10
c000c020:	89 f0                	mov    eax,esi
c000c022:	84 c0                	test   al,al
c000c024:	74 1e                	je     c000c044 <Krnl::beep(int, int, bool)+0x3d>
c000c026:	83 ec 0c             	sub    esp,0xc
c000c029:	6b db 0a             	imul   ebx,ebx,0xa
c000c02c:	53                   	push   ebx
c000c02d:	e8 aa 9d 00 00       	call   c0015ddc <milliTenthSleep(unsigned int)>
c000c032:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c000c03a:	83 c4 14             	add    esp,0x14
c000c03d:	5b                   	pop    ebx
c000c03e:	5e                   	pop    esi
c000c03f:	e9 f3 bc 00 00       	jmp    c0017d37 <HalMakeBeep(int)>
c000c044:	68 e6 00 00 00       	push   0xe6
c000c049:	53                   	push   ebx
c000c04a:	68 ca bf 00 c0       	push   0xc000bfca
c000c04f:	ff 35 90 a4 02 c0    	push   DWORD PTR ds:0xc002a490
c000c055:	e8 02 98 00 00       	call   c001585c <Process::createThread(void (*)(void*), void*, int)>
c000c05a:	83 c4 14             	add    esp,0x14
c000c05d:	5b                   	pop    ebx
c000c05e:	5e                   	pop    esi
c000c05f:	c3                   	ret    

c000c060 <User::loadClockSettings(int)>:
c000c060:	53                   	push   ebx
c000c061:	83 ec 14             	sub    esp,0x14
c000c064:	68 14 01 00 00       	push   0x114
c000c069:	e8 48 ba ff ff       	call   c0007ab6 <malloc>
c000c06e:	83 c4 0c             	add    esp,0xc
c000c071:	89 c3                	mov    ebx,eax
c000c073:	ff 35 90 a4 02 c0    	push   DWORD PTR ds:0xc002a490
c000c079:	68 c0 12 02 c0       	push   0xc00212c0
c000c07e:	50                   	push   eax
c000c07f:	e8 54 f6 ff ff       	call   c000b6d8 <File::File(char const*, Process*)>
c000c084:	58                   	pop    eax
c000c085:	5a                   	pop    edx
c000c086:	6a 01                	push   0x1
c000c088:	53                   	push   ebx
c000c089:	e8 06 f7 ff ff       	call   c000b794 <File::open(FileOpenMode)>
c000c08e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000c091:	e8 5c f7 ff ff       	call   c000b7f2 <File::close()>
c000c096:	83 c4 10             	add    esp,0x10
c000c099:	85 db                	test   ebx,ebx
c000c09b:	74 0f                	je     c000c0ac <User::loadClockSettings(int)+0x4c>
c000c09d:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c09f:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000c0a3:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000c0a6:	83 c4 08             	add    esp,0x8
c000c0a9:	5b                   	pop    ebx
c000c0aa:	ff e0                	jmp    eax
c000c0ac:	83 c4 08             	add    esp,0x8
c000c0af:	5b                   	pop    ebx
c000c0b0:	c3                   	ret    
c000c0b1:	90                   	nop

c000c0b2 <Clock::Clock(char const*)>:
c000c0b2:	83 ec 0c             	sub    esp,0xc
c000c0b5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c0b9:	83 ec 08             	sub    esp,0x8
c000c0bc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0c0:	50                   	push   eax
c000c0c1:	e8 b4 06 00 00       	call   c000c77a <Device::Device(char const*)>
c000c0c6:	83 c4 10             	add    esp,0x10
c000c0c9:	ba e8 12 02 c0       	mov    edx,0xc00212e8
c000c0ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c0d2:	89 10                	mov    DWORD PTR [eax],edx
c000c0d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c0d8:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c000c0e2:	90                   	nop
c000c0e3:	83 c4 0c             	add    esp,0xc
c000c0e6:	c3                   	ret    
c000c0e7:	90                   	nop

c000c0e8 <Clock::~Clock()>:
c000c0e8:	83 ec 0c             	sub    esp,0xc
c000c0eb:	ba e8 12 02 c0       	mov    edx,0xc00212e8
c000c0f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c0f4:	89 10                	mov    DWORD PTR [eax],edx
c000c0f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c0fa:	83 ec 0c             	sub    esp,0xc
c000c0fd:	50                   	push   eax
c000c0fe:	e8 e1 03 00 00       	call   c000c4e4 <Device::~Device()>
c000c103:	83 c4 10             	add    esp,0x10
c000c106:	90                   	nop
c000c107:	83 c4 0c             	add    esp,0xc
c000c10a:	c3                   	ret    
c000c10b:	90                   	nop

c000c10c <Clock::~Clock()>:
c000c10c:	83 ec 0c             	sub    esp,0xc
c000c10f:	83 ec 0c             	sub    esp,0xc
c000c112:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c116:	e8 cd ff ff ff       	call   c000c0e8 <Clock::~Clock()>
c000c11b:	83 c4 10             	add    esp,0x10
c000c11e:	83 ec 08             	sub    esp,0x8
c000c121:	68 58 01 00 00       	push   0x158
c000c126:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c12a:	e8 e9 e6 ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c000c12f:	83 c4 10             	add    esp,0x10
c000c132:	83 c4 0c             	add    esp,0xc
c000c135:	c3                   	ret    

c000c136 <Clock::timeInSecondsLocal()>:
c000c136:	53                   	push   ebx
c000c137:	83 ec 14             	sub    esp,0x14
c000c13a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000c13e:	8b 10                	mov    edx,DWORD PTR [eax]
c000c140:	50                   	push   eax
c000c141:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000c144:	0f b6 0d 68 70 02 c0 	movzx  ecx,BYTE PTR ds:0xc0027068
c000c14b:	03 0d 6c 70 02 c0    	add    ecx,DWORD PTR ds:0xc002706c
c000c151:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000c157:	89 cb                	mov    ebx,ecx
c000c159:	c1 fb 1f             	sar    ebx,0x1f
c000c15c:	01 c8                	add    eax,ecx
c000c15e:	11 da                	adc    edx,ebx
c000c160:	83 c4 10             	add    esp,0x10
c000c163:	31 c9                	xor    ecx,ecx
c000c165:	80 3d 69 70 02 c0 00 	cmp    BYTE PTR ds:0xc0027069,0x0
c000c16c:	74 05                	je     c000c173 <Clock::timeInSecondsLocal()+0x3d>
c000c16e:	b9 08 07 00 00       	mov    ecx,0x708
c000c173:	31 db                	xor    ebx,ebx
c000c175:	01 c8                	add    eax,ecx
c000c177:	11 da                	adc    edx,ebx
c000c179:	83 c4 08             	add    esp,0x8
c000c17c:	5b                   	pop    ebx
c000c17d:	c3                   	ret    

c000c17e <Clock::setTimeInSecondsLocal(unsigned long long)>:
c000c17e:	57                   	push   edi
c000c17f:	56                   	push   esi
c000c180:	53                   	push   ebx
c000c181:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000c185:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000c189:	8b 01                	mov    eax,DWORD PTR [ecx]
c000c18b:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000c18f:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c000c192:	0f b6 05 68 70 02 c0 	movzx  eax,BYTE PTR ds:0xc0027068
c000c199:	03 05 6c 70 02 c0    	add    eax,DWORD PTR ds:0xc002706c
c000c19f:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c000c1a5:	99                   	cdq    
c000c1a6:	29 c6                	sub    esi,eax
c000c1a8:	19 d7                	sbb    edi,edx
c000c1aa:	89 f0                	mov    eax,esi
c000c1ac:	89 fa                	mov    edx,edi
c000c1ae:	31 f6                	xor    esi,esi
c000c1b0:	80 3d 69 70 02 c0 00 	cmp    BYTE PTR ds:0xc0027069,0x0
c000c1b7:	74 05                	je     c000c1be <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c000c1b9:	be 08 07 00 00       	mov    esi,0x708
c000c1be:	31 ff                	xor    edi,edi
c000c1c0:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c000c1c4:	29 f0                	sub    eax,esi
c000c1c6:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c1ca:	19 fa                	sbb    edx,edi
c000c1cc:	89 d8                	mov    eax,ebx
c000c1ce:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c1d2:	5b                   	pop    ebx
c000c1d3:	5e                   	pop    esi
c000c1d4:	5f                   	pop    edi
c000c1d5:	ff e0                	jmp    eax

c000c1d7 <datetimeToSeconds(datetime_t)>:
c000c1d7:	55                   	push   ebp
c000c1d8:	57                   	push   edi
c000c1d9:	56                   	push   esi
c000c1da:	53                   	push   ebx
c000c1db:	83 ec 0c             	sub    esp,0xc
c000c1de:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000c1e2:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c000c1e6:	89 d6                	mov    esi,edx
c000c1e8:	0f b6 c7             	movzx  eax,bh
c000c1eb:	c1 ee 10             	shr    esi,0x10
c000c1ee:	6b e8 3c             	imul   ebp,eax,0x3c
c000c1f1:	81 ee 6c 07 00 00    	sub    esi,0x76c
c000c1f7:	0f b6 ce             	movzx  ecx,dh
c000c1fa:	89 df                	mov    edi,ebx
c000c1fc:	49                   	dec    ecx
c000c1fd:	c1 ef 10             	shr    edi,0x10
c000c200:	0f b6 db             	movzx  ebx,bl
c000c203:	89 f8                	mov    eax,edi
c000c205:	69 db 10 0e 00 00    	imul   ebx,ebx,0xe10
c000c20b:	0f b6 f8             	movzx  edi,al
c000c20e:	0f b6 d2             	movzx  edx,dl
c000c211:	8d 44 3d 00          	lea    eax,[ebp+edi*1+0x0]
c000c215:	01 d8                	add    eax,ebx
c000c217:	0f b7 de             	movzx  ebx,si
c000c21a:	89 04 24             	mov    DWORD PTR [esp],eax
c000c21d:	c1 f8 1f             	sar    eax,0x1f
c000c220:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000c224:	0f b6 c1             	movzx  eax,cl
c000c227:	8b 0c 85 20 13 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdece0]
c000c22e:	83 f8 01             	cmp    eax,0x1
c000c231:	8d 4c 0a ff          	lea    ecx,[edx+ecx*1-0x1]
c000c235:	76 27                	jbe    c000c25e <datetimeToSeconds(datetime_t)+0x87>
c000c237:	83 e6 03             	and    esi,0x3
c000c23a:	75 22                	jne    c000c25e <datetimeToSeconds(datetime_t)+0x87>
c000c23c:	31 d2                	xor    edx,edx
c000c23e:	be 64 00 00 00       	mov    esi,0x64
c000c243:	89 d8                	mov    eax,ebx
c000c245:	f7 f6                	div    esi
c000c247:	85 d2                	test   edx,edx
c000c249:	75 12                	jne    c000c25d <datetimeToSeconds(datetime_t)+0x86>
c000c24b:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c000c251:	be 90 01 00 00       	mov    esi,0x190
c000c256:	99                   	cdq    
c000c257:	f7 fe                	idiv   esi
c000c259:	85 d2                	test   edx,edx
c000c25b:	75 01                	jne    c000c25e <datetimeToSeconds(datetime_t)+0x87>
c000c25d:	41                   	inc    ecx
c000c25e:	83 fb 46             	cmp    ebx,0x46
c000c261:	76 48                	jbe    c000c2ab <datetimeToSeconds(datetime_t)+0xd4>
c000c263:	be 46 00 00 00       	mov    esi,0x46
c000c268:	bf 64 00 00 00       	mov    edi,0x64
c000c26d:	bd 90 01 00 00       	mov    ebp,0x190
c000c272:	b8 6d 01 00 00       	mov    eax,0x16d
c000c277:	f7 c6 03 00 00 00    	test   esi,0x3
c000c27d:	75 23                	jne    c000c2a2 <datetimeToSeconds(datetime_t)+0xcb>
c000c27f:	89 f0                	mov    eax,esi
c000c281:	99                   	cdq    
c000c282:	f7 ff                	idiv   edi
c000c284:	b8 6e 01 00 00       	mov    eax,0x16e
c000c289:	85 d2                	test   edx,edx
c000c28b:	75 15                	jne    c000c2a2 <datetimeToSeconds(datetime_t)+0xcb>
c000c28d:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c000c293:	99                   	cdq    
c000c294:	f7 fd                	idiv   ebp
c000c296:	83 fa 01             	cmp    edx,0x1
c000c299:	19 c0                	sbb    eax,eax
c000c29b:	f7 d0                	not    eax
c000c29d:	05 6e 01 00 00       	add    eax,0x16e
c000c2a2:	01 c1                	add    ecx,eax
c000c2a4:	46                   	inc    esi
c000c2a5:	39 de                	cmp    esi,ebx
c000c2a7:	7c c9                	jl     c000c272 <datetimeToSeconds(datetime_t)+0x9b>
c000c2a9:	eb 34                	jmp    c000c2df <datetimeToSeconds(datetime_t)+0x108>
c000c2ab:	74 32                	je     c000c2df <datetimeToSeconds(datetime_t)+0x108>
c000c2ad:	b8 45 00 00 00       	mov    eax,0x45
c000c2b2:	89 c2                	mov    edx,eax
c000c2b4:	83 e2 03             	and    edx,0x3
c000c2b7:	39 d8                	cmp    eax,ebx
c000c2b9:	7e 0f                	jle    c000c2ca <datetimeToSeconds(datetime_t)+0xf3>
c000c2bb:	83 fa 01             	cmp    edx,0x1
c000c2be:	19 d2                	sbb    edx,edx
c000c2c0:	48                   	dec    eax
c000c2c1:	8d 8c 11 93 fe ff ff 	lea    ecx,[ecx+edx*1-0x16d]
c000c2c8:	eb e8                	jmp    c000c2b2 <datetimeToSeconds(datetime_t)+0xdb>
c000c2ca:	b8 6d 01 00 00       	mov    eax,0x16d
c000c2cf:	85 d2                	test   edx,edx
c000c2d1:	75 0a                	jne    c000c2dd <datetimeToSeconds(datetime_t)+0x106>
c000c2d3:	83 fb 01             	cmp    ebx,0x1
c000c2d6:	19 c0                	sbb    eax,eax
c000c2d8:	05 6e 01 00 00       	add    eax,0x16e
c000c2dd:	29 c1                	sub    ecx,eax
c000c2df:	b8 80 51 01 00       	mov    eax,0x15180
c000c2e4:	f7 e9                	imul   ecx
c000c2e6:	03 04 24             	add    eax,DWORD PTR [esp]
c000c2e9:	13 54 24 04          	adc    edx,DWORD PTR [esp+0x4]
c000c2ed:	83 c4 0c             	add    esp,0xc
c000c2f0:	5b                   	pop    ebx
c000c2f1:	5e                   	pop    esi
c000c2f2:	5f                   	pop    edi
c000c2f3:	5d                   	pop    ebp
c000c2f4:	c3                   	ret    
c000c2f5:	90                   	nop

c000c2f6 <Clock::setTimeInDatetimeLocal(datetime_t)>:
c000c2f6:	57                   	push   edi
c000c2f7:	56                   	push   esi
c000c2f8:	53                   	push   ebx
c000c2f9:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000c2fd:	8b 06                	mov    eax,DWORD PTR [esi]
c000c2ff:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c000c302:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000c306:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000c30a:	e8 c8 fe ff ff       	call   c000c1d7 <datetimeToSeconds(datetime_t)>
c000c30f:	59                   	pop    ecx
c000c310:	0f b6 0d 68 70 02 c0 	movzx  ecx,BYTE PTR ds:0xc0027068
c000c317:	5b                   	pop    ebx
c000c318:	03 0d 6c 70 02 c0    	add    ecx,DWORD PTR ds:0xc002706c
c000c31e:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000c324:	89 cb                	mov    ebx,ecx
c000c326:	c1 fb 1f             	sar    ebx,0x1f
c000c329:	29 c8                	sub    eax,ecx
c000c32b:	19 da                	sbb    edx,ebx
c000c32d:	31 c9                	xor    ecx,ecx
c000c32f:	80 3d 69 70 02 c0 00 	cmp    BYTE PTR ds:0xc0027069,0x0
c000c336:	74 05                	je     c000c33d <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c000c338:	b9 08 07 00 00       	mov    ecx,0x708
c000c33d:	31 db                	xor    ebx,ebx
c000c33f:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c000c343:	29 c8                	sub    eax,ecx
c000c345:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c349:	19 da                	sbb    edx,ebx
c000c34b:	89 f8                	mov    eax,edi
c000c34d:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c351:	5b                   	pop    ebx
c000c352:	5e                   	pop    esi
c000c353:	5f                   	pop    edi
c000c354:	ff e0                	jmp    eax

c000c356 <secondsToDatetime(unsigned long long)>:
c000c356:	55                   	push   ebp
c000c357:	57                   	push   edi
c000c358:	56                   	push   esi
c000c359:	53                   	push   ebx
c000c35a:	83 ec 1c             	sub    esp,0x1c
c000c35d:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000c361:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000c365:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000c369:	6a 00                	push   0x0
c000c36b:	68 80 51 01 00       	push   0x15180
c000c370:	55                   	push   ebp
c000c371:	57                   	push   edi
c000c372:	e8 a9 2d 01 00       	call   c001f120 <__udivdi3>
c000c377:	83 c4 10             	add    esp,0x10
c000c37a:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c000c380:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c384:	6a 00                	push   0x0
c000c386:	68 80 51 01 00       	push   0x15180
c000c38b:	55                   	push   ebp
c000c38c:	57                   	push   edi
c000c38d:	bf 10 0e 00 00       	mov    edi,0xe10
c000c392:	e8 89 2e 01 00       	call   c001f220 <__umoddi3>
c000c397:	83 c4 10             	add    esp,0x10
c000c39a:	99                   	cdq    
c000c39b:	f7 ff                	idiv   edi
c000c39d:	bf 3c 00 00 00       	mov    edi,0x3c
c000c3a2:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c000c3a5:	89 d0                	mov    eax,edx
c000c3a7:	99                   	cdq    
c000c3a8:	f7 ff                	idiv   edi
c000c3aa:	85 db                	test   ebx,ebx
c000c3ac:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c000c3af:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c000c3b2:	79 11                	jns    c000c3c5 <secondsToDatetime(unsigned long long)+0x6f>
c000c3b4:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000c3b8:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c000c3be:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c000c3c3:	eb 07                	jmp    c000c3cc <secondsToDatetime(unsigned long long)+0x76>
c000c3c5:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c000c3ca:	89 d8                	mov    eax,ebx
c000c3cc:	bf b4 05 00 00       	mov    edi,0x5b4
c000c3d1:	99                   	cdq    
c000c3d2:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c000c3d7:	f7 f9                	idiv   ecx
c000c3d9:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c000c3de:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c3e2:	31 d2                	xor    edx,edx
c000c3e4:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c000c3ec:	01 c3                	add    ebx,eax
c000c3ee:	89 d8                	mov    eax,ebx
c000c3f0:	f7 f1                	div    ecx
c000c3f2:	31 d2                	xor    edx,edx
c000c3f4:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c000c3f7:	89 d8                	mov    eax,ebx
c000c3f9:	f7 f7                	div    edi
c000c3fb:	31 d2                	xor    edx,edx
c000c3fd:	29 c1                	sub    ecx,eax
c000c3ff:	89 d8                	mov    eax,ebx
c000c401:	f7 f5                	div    ebp
c000c403:	bd 6d 01 00 00       	mov    ebp,0x16d
c000c408:	29 c1                	sub    ecx,eax
c000c40a:	31 d2                	xor    edx,edx
c000c40c:	89 c8                	mov    eax,ecx
c000c40e:	f7 f5                	div    ebp
c000c410:	bd 94 8e 00 00       	mov    ebp,0x8e94
c000c415:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000c419:	31 d2                	xor    edx,edx
c000c41b:	89 c8                	mov    eax,ecx
c000c41d:	f7 f5                	div    ebp
c000c41f:	31 d2                	xor    edx,edx
c000c421:	01 c3                	add    ebx,eax
c000c423:	89 c8                	mov    eax,ecx
c000c425:	f7 f7                	div    edi
c000c427:	bf 99 00 00 00       	mov    edi,0x99
c000c42c:	29 c3                	sub    ebx,eax
c000c42e:	31 d2                	xor    edx,edx
c000c430:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c000c438:	29 c3                	sub    ebx,eax
c000c43a:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000c43d:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c000c440:	bb 05 00 00 00       	mov    ebx,0x5
c000c445:	83 c1 02             	add    ecx,0x2
c000c448:	89 c8                	mov    eax,ecx
c000c44a:	f7 f7                	div    edi
c000c44c:	31 d2                	xor    edx,edx
c000c44e:	89 c7                	mov    edi,eax
c000c450:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c000c456:	83 c0 02             	add    eax,0x2
c000c459:	f7 f3                	div    ebx
c000c45b:	89 eb                	mov    ebx,ebp
c000c45d:	29 c3                	sub    ebx,eax
c000c45f:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c000c465:	88 1e                	mov    BYTE PTR [esi],bl
c000c467:	19 c0                	sbb    eax,eax
c000c469:	31 d2                	xor    edx,edx
c000c46b:	83 e0 0c             	and    eax,0xc
c000c46e:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c000c472:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c000c47a:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000c47e:	83 f9 01             	cmp    ecx,0x1
c000c481:	0f 96 c2             	setbe  dl
c000c484:	41                   	inc    ecx
c000c485:	01 d0                	add    eax,edx
c000c487:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c000c48a:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c000c48e:	83 c4 1c             	add    esp,0x1c
c000c491:	89 f0                	mov    eax,esi
c000c493:	5b                   	pop    ebx
c000c494:	5e                   	pop    esi
c000c495:	5f                   	pop    edi
c000c496:	5d                   	pop    ebp
c000c497:	c2 04 00             	ret    0x4

c000c49a <Clock::timeInDatetimeLocal()>:
c000c49a:	53                   	push   ebx
c000c49b:	83 ec 14             	sub    esp,0x14
c000c49e:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000c4a2:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000c4a6:	e8 8b fc ff ff       	call   c000c136 <Clock::timeInSecondsLocal()>
c000c4ab:	83 c4 0c             	add    esp,0xc
c000c4ae:	52                   	push   edx
c000c4af:	50                   	push   eax
c000c4b0:	53                   	push   ebx
c000c4b1:	e8 a0 fe ff ff       	call   c000c356 <secondsToDatetime(unsigned long long)>
c000c4b6:	89 d8                	mov    eax,ebx
c000c4b8:	83 c4 14             	add    esp,0x14
c000c4bb:	5b                   	pop    ebx
c000c4bc:	c2 04 00             	ret    0x4
c000c4bf:	90                   	nop

c000c4c0 <Device::hibernate()>:
c000c4c0:	c3                   	ret    
c000c4c1:	90                   	nop

c000c4c2 <Device::wake()>:
c000c4c2:	c3                   	ret    
c000c4c3:	90                   	nop

c000c4c4 <Device::detect()>:
c000c4c4:	c3                   	ret    
c000c4c5:	90                   	nop

c000c4c6 <Device::disableLegacy()>:
c000c4c6:	c3                   	ret    
c000c4c7:	90                   	nop

c000c4c8 <Device::powerSaving(PowerSavingLevel)>:
c000c4c8:	c3                   	ret    
c000c4c9:	90                   	nop

c000c4ca <DriverlessDevice::close(int, int, void*)>:
c000c4ca:	31 c0                	xor    eax,eax
c000c4cc:	c3                   	ret    
c000c4cd:	90                   	nop

c000c4ce <DriverlessDevice::detect()>:
c000c4ce:	c3                   	ret    
c000c4cf:	90                   	nop

c000c4d0 <DriverlessDevice::open(int, int, void*)>:
c000c4d0:	83 ec 18             	sub    esp,0x18
c000c4d3:	68 50 13 02 c0       	push   0xc0021350
c000c4d8:	e8 10 4d 00 00       	call   c00111ed <KePanic(char const*)>
c000c4dd:	83 c8 ff             	or     eax,0xffffffff
c000c4e0:	83 c4 1c             	add    esp,0x1c
c000c4e3:	c3                   	ret    

c000c4e4 <Device::~Device()>:
c000c4e4:	ba b0 13 02 c0       	mov    edx,0xc00213b0
c000c4e9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c4ed:	89 10                	mov    DWORD PTR [eax],edx
c000c4ef:	90                   	nop
c000c4f0:	c3                   	ret    
c000c4f1:	90                   	nop

c000c4f2 <Device::~Device()>:
c000c4f2:	83 ec 0c             	sub    esp,0xc
c000c4f5:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000c4f9:	e8 e6 ff ff ff       	call   c000c4e4 <Device::~Device()>
c000c4fe:	83 c4 04             	add    esp,0x4
c000c501:	83 ec 08             	sub    esp,0x8
c000c504:	68 58 01 00 00       	push   0x158
c000c509:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c50d:	e8 06 e3 ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c000c512:	83 c4 10             	add    esp,0x10
c000c515:	83 c4 0c             	add    esp,0xc
c000c518:	c3                   	ret    
c000c519:	90                   	nop

c000c51a <Device::findAndLoadDriver()>:
c000c51a:	c7 44 24 04 6e 13 02 c0 	mov    DWORD PTR [esp+0x4],0xc002136e
c000c522:	e9 1e e4 ff ff       	jmp    c000a945 <Dbg::kprintf(char const*, ...)>
c000c527:	90                   	nop

c000c528 <Device::preOpenPCI(PCIDeviceInfo)>:
c000c528:	57                   	push   edi
c000c529:	b9 09 00 00 00       	mov    ecx,0x9
c000c52e:	56                   	push   esi
c000c52f:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000c533:	8d 74 24 10          	lea    esi,[esp+0x10]
c000c537:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c000c541:	81 c7 18 01 00 00    	add    edi,0x118
c000c547:	fc                   	cld    
c000c548:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000c54a:	5e                   	pop    esi
c000c54b:	5f                   	pop    edi
c000c54c:	c3                   	ret    
c000c54d:	90                   	nop

c000c54e <Device::preOpenACPI(void*, char*, char*)>:
c000c54e:	57                   	push   edi
c000c54f:	b9 1e 00 00 00       	mov    ecx,0x1e
c000c554:	56                   	push   esi
c000c555:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c559:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c55d:	c7 80 14 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x114],0x3
c000c567:	89 90 18 01 00 00    	mov    DWORD PTR [eax+0x118],edx
c000c56d:	8d b8 1c 01 00 00    	lea    edi,[eax+0x11c]
c000c573:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000c577:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000c579:	b9 0e 00 00 00       	mov    ecx,0xe
c000c57e:	8d b8 3a 01 00 00    	lea    edi,[eax+0x13a]
c000c584:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000c588:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000c58a:	5e                   	pop    esi
c000c58b:	5f                   	pop    edi
c000c58c:	c3                   	ret    
c000c58d:	90                   	nop

c000c58e <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000c58e:	53                   	push   ebx
c000c58f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c593:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000c597:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000c59b:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000c59f:	0f b6 c0             	movzx  eax,al
c000c5a2:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c000c5a6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c5aa:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000c5ae:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000c5b2:	5b                   	pop    ebx
c000c5b3:	e9 a8 05 00 00       	jmp    c000cb60 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)>

c000c5b8 <Device::getParent()>:
c000c5b8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c5bc:	8b 80 c8 00 00 00    	mov    eax,DWORD PTR [eax+0xc8]
c000c5c2:	c3                   	ret    
c000c5c3:	90                   	nop

c000c5c4 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c000c5c4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c5c8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c5cc:	0f b6 4c 24 10       	movzx  ecx,BYTE PTR [esp+0x10]
c000c5d1:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000c5d5:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000c5d9:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000c5dd:	e9 e6 06 00 00       	jmp    c000ccc8 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)>

c000c5e2 <Device::addChild(Device*)>:
c000c5e2:	53                   	push   ebx
c000c5e3:	83 ec 08             	sub    esp,0x8
c000c5e6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c5ea:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000c5ee:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c000c5f4:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c000c5fa:	8b 13                	mov    edx,DWORD PTR [ebx]
c000c5fc:	85 d2                	test   edx,edx
c000c5fe:	74 04                	je     c000c604 <Device::addChild(Device*)+0x22>
c000c600:	89 d3                	mov    ebx,edx
c000c602:	eb f6                	jmp    c000c5fa <Device::addChild(Device*)+0x18>
c000c604:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000c607:	83 ec 0c             	sub    esp,0xc
c000c60a:	6a 08                	push   0x8
c000c60c:	e8 a5 b4 ff ff       	call   c0007ab6 <malloc>
c000c611:	89 03                	mov    DWORD PTR [ebx],eax
c000c613:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000c619:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000c620:	83 c4 18             	add    esp,0x18
c000c623:	5b                   	pop    ebx
c000c624:	c3                   	ret    
c000c625:	90                   	nop

c000c626 <Device::removeAllChildren()>:
c000c626:	56                   	push   esi
c000c627:	53                   	push   ebx
c000c628:	52                   	push   edx
c000c629:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000c62d:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c000c633:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000c636:	74 17                	je     c000c64f <Device::removeAllChildren()+0x29>
c000c638:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000c63b:	85 c0                	test   eax,eax
c000c63d:	74 0c                	je     c000c64b <Device::removeAllChildren()+0x25>
c000c63f:	83 ec 0c             	sub    esp,0xc
c000c642:	8b 10                	mov    edx,DWORD PTR [eax]
c000c644:	50                   	push   eax
c000c645:	ff 52 04             	call   DWORD PTR [edx+0x4]
c000c648:	83 c4 10             	add    esp,0x10
c000c64b:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000c64d:	eb e4                	jmp    c000c633 <Device::removeAllChildren()+0xd>
c000c64f:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000c655:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000c65b:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000c661:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000c668:	58                   	pop    eax
c000c669:	5b                   	pop    ebx
c000c66a:	5e                   	pop    esi
c000c66b:	c3                   	ret    

c000c66c <Device::hibernateAll()>:
c000c66c:	53                   	push   ebx
c000c66d:	83 ec 14             	sub    esp,0x14
c000c670:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000c674:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c676:	53                   	push   ebx
c000c677:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000c67a:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000c680:	83 c4 10             	add    esp,0x10
c000c683:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000c686:	74 0f                	je     c000c697 <Device::hibernateAll()+0x2b>
c000c688:	83 ec 0c             	sub    esp,0xc
c000c68b:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000c68e:	e8 d9 ff ff ff       	call   c000c66c <Device::hibernateAll()>
c000c693:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000c695:	eb e9                	jmp    c000c680 <Device::hibernateAll()+0x14>
c000c697:	83 c4 08             	add    esp,0x8
c000c69a:	5b                   	pop    ebx
c000c69b:	c3                   	ret    

c000c69c <Device::wakeAll()>:
c000c69c:	53                   	push   ebx
c000c69d:	83 ec 14             	sub    esp,0x14
c000c6a0:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000c6a4:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c6a6:	53                   	push   ebx
c000c6a7:	ff 50 14             	call   DWORD PTR [eax+0x14]
c000c6aa:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000c6b0:	83 c4 10             	add    esp,0x10
c000c6b3:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000c6b6:	74 0f                	je     c000c6c7 <Device::wakeAll()+0x2b>
c000c6b8:	83 ec 0c             	sub    esp,0xc
c000c6bb:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000c6be:	e8 d9 ff ff ff       	call   c000c69c <Device::wakeAll()>
c000c6c3:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000c6c5:	eb e9                	jmp    c000c6b0 <Device::wakeAll()+0x14>
c000c6c7:	83 c4 08             	add    esp,0x8
c000c6ca:	5b                   	pop    ebx
c000c6cb:	c3                   	ret    

c000c6cc <Device::detectAll()>:
c000c6cc:	53                   	push   ebx
c000c6cd:	83 ec 14             	sub    esp,0x14
c000c6d0:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000c6d4:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c6d6:	53                   	push   ebx
c000c6d7:	ff 50 18             	call   DWORD PTR [eax+0x18]
c000c6da:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000c6e0:	83 c4 10             	add    esp,0x10
c000c6e3:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000c6e6:	74 0f                	je     c000c6f7 <Device::detectAll()+0x2b>
c000c6e8:	83 ec 0c             	sub    esp,0xc
c000c6eb:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000c6ee:	e8 d9 ff ff ff       	call   c000c6cc <Device::detectAll()>
c000c6f3:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000c6f5:	eb e9                	jmp    c000c6e0 <Device::detectAll()+0x14>
c000c6f7:	83 c4 08             	add    esp,0x8
c000c6fa:	5b                   	pop    ebx
c000c6fb:	c3                   	ret    

c000c6fc <Device::disableLegacyAll()>:
c000c6fc:	c3                   	ret    
c000c6fd:	90                   	nop

c000c6fe <Device::loadDriversForAll()>:
c000c6fe:	c3                   	ret    
c000c6ff:	90                   	nop

c000c700 <Device::closeAll()>:
c000c700:	53                   	push   ebx
c000c701:	83 ec 08             	sub    esp,0x8
c000c704:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000c708:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c70a:	6a 00                	push   0x0
c000c70c:	6a 00                	push   0x0
c000c70e:	6a 00                	push   0x0
c000c710:	53                   	push   ebx
c000c711:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000c714:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000c71a:	83 c4 10             	add    esp,0x10
c000c71d:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000c720:	74 0f                	je     c000c731 <Device::closeAll()+0x31>
c000c722:	83 ec 0c             	sub    esp,0xc
c000c725:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000c728:	e8 d3 ff ff ff       	call   c000c700 <Device::closeAll()>
c000c72d:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000c72f:	eb e9                	jmp    c000c71a <Device::closeAll()+0x1a>
c000c731:	83 c4 08             	add    esp,0x8
c000c734:	5b                   	pop    ebx
c000c735:	c3                   	ret    

c000c736 <Device::powerSavingAll(PowerSavingLevel)>:
c000c736:	56                   	push   esi
c000c737:	53                   	push   ebx
c000c738:	83 ec 0c             	sub    esp,0xc
c000c73b:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000c73f:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000c743:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c745:	56                   	push   esi
c000c746:	53                   	push   ebx
c000c747:	ff 50 20             	call   DWORD PTR [eax+0x20]
c000c74a:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000c750:	83 c4 10             	add    esp,0x10
c000c753:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000c756:	74 0f                	je     c000c767 <Device::powerSavingAll(PowerSavingLevel)+0x31>
c000c758:	52                   	push   edx
c000c759:	52                   	push   edx
c000c75a:	56                   	push   esi
c000c75b:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000c75e:	e8 d3 ff ff ff       	call   c000c736 <Device::powerSavingAll(PowerSavingLevel)>
c000c763:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000c765:	eb e9                	jmp    c000c750 <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c000c767:	58                   	pop    eax
c000c768:	5b                   	pop    ebx
c000c769:	5e                   	pop    esi
c000c76a:	c3                   	ret    
c000c76b:	90                   	nop

c000c76c <Device::setName(char const*)>:
c000c76c:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c000c774:	e9 c7 3e ff ff       	jmp    c0000640 <strcpy>
c000c779:	90                   	nop

c000c77a <Device::Device(char const*)>:
c000c77a:	83 ec 1c             	sub    esp,0x1c
c000c77d:	ba b0 13 02 c0       	mov    edx,0xc00213b0
c000c782:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c786:	89 10                	mov    DWORD PTR [eax],edx
c000c788:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c78c:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c000c796:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c79a:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000c7a4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c7a8:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000c7b2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c7b6:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000c7c0:	83 ec 08             	sub    esp,0x8
c000c7c3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c7c7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c7cb:	e8 9c ff ff ff       	call   c000c76c <Device::setName(char const*)>
c000c7d0:	83 c4 10             	add    esp,0x10
c000c7d3:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c000c7db:	83 ec 0c             	sub    esp,0xc
c000c7de:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000c7e2:	e8 cf b2 ff ff       	call   c0007ab6 <malloc>
c000c7e7:	83 c4 10             	add    esp,0x10
c000c7ea:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000c7f0:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000c7f7:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000c7fb:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c000c801:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c805:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000c80b:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000c811:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c815:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000c81b:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000c822:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c826:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c000c82d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c831:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c000c838:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c83c:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000c846:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c84a:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000c854:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c858:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000c862:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c866:	c7 80 10 01 00 00 14 00 00 00 	mov    DWORD PTR [eax+0x110],0x14
c000c870:	90                   	nop
c000c871:	83 c4 1c             	add    esp,0x1c
c000c874:	c3                   	ret    
c000c875:	90                   	nop

c000c876 <Device::getName()>:
c000c876:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c87a:	05 d0 00 00 00       	add    eax,0xd0
c000c87f:	c3                   	ret    

c000c880 <DriverlessDevice::DriverlessDevice(char const*)>:
c000c880:	83 ec 0c             	sub    esp,0xc
c000c883:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c887:	83 ec 08             	sub    esp,0x8
c000c88a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c88e:	50                   	push   eax
c000c88f:	e8 e6 fe ff ff       	call   c000c77a <Device::Device(char const*)>
c000c894:	83 c4 10             	add    esp,0x10
c000c897:	ba dc 13 02 c0       	mov    edx,0xc00213dc
c000c89c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c8a0:	89 10                	mov    DWORD PTR [eax],edx
c000c8a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c8a6:	c7 80 10 01 00 00 13 00 00 00 	mov    DWORD PTR [eax+0x110],0x13
c000c8b0:	90                   	nop
c000c8b1:	83 c4 0c             	add    esp,0xc
c000c8b4:	c3                   	ret    
c000c8b5:	90                   	nop

c000c8b6 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c000c8b6:	57                   	push   edi
c000c8b7:	56                   	push   esi
c000c8b8:	53                   	push   ebx
c000c8b9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000c8bd:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000c8c1:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000c8c5:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c000c8cb:	75 0c                	jne    c000c8d9 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c000c8cd:	52                   	push   edx
c000c8ce:	52                   	push   edx
c000c8cf:	53                   	push   ebx
c000c8d0:	56                   	push   esi
c000c8d1:	e8 fc 2c 01 00       	call   c001f5d2 <LinkedList<Device>::addElement(Device*)>
c000c8d6:	83 c4 10             	add    esp,0x10
c000c8d9:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000c8df:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000c8e2:	74 12                	je     c000c8f6 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c000c8e4:	50                   	push   eax
c000c8e5:	57                   	push   edi
c000c8e6:	56                   	push   esi
c000c8e7:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000c8ea:	e8 c7 ff ff ff       	call   c000c8b6 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000c8ef:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000c8f1:	83 c4 10             	add    esp,0x10
c000c8f4:	eb e9                	jmp    c000c8df <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c000c8f6:	5b                   	pop    ebx
c000c8f7:	5e                   	pop    esi
c000c8f8:	5f                   	pop    edi
c000c8f9:	c3                   	ret    

c000c8fa <getDevicesOfType(DeviceType)>:
c000c8fa:	53                   	push   ebx
c000c8fb:	83 ec 14             	sub    esp,0x14
c000c8fe:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000c902:	53                   	push   ebx
c000c903:	e8 a6 2d 01 00       	call   c001f6ae <LinkedList<Device>::LinkedList()>
c000c908:	83 c4 0c             	add    esp,0xc
c000c90b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000c90f:	53                   	push   ebx
c000c910:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c000c916:	e8 9b ff ff ff       	call   c000c8b6 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000c91b:	89 d8                	mov    eax,ebx
c000c91d:	83 c4 18             	add    esp,0x18
c000c920:	5b                   	pop    ebx
c000c921:	c2 04 00             	ret    0x4

c000c924 <HardDiskController::HardDiskController(char const*)>:
c000c924:	83 ec 0c             	sub    esp,0xc
c000c927:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c92b:	83 ec 08             	sub    esp,0x8
c000c92e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c932:	50                   	push   eax
c000c933:	e8 42 fe ff ff       	call   c000c77a <Device::Device(char const*)>
c000c938:	83 c4 10             	add    esp,0x10
c000c93b:	ba 08 14 02 c0       	mov    edx,0xc0021408
c000c940:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c944:	89 10                	mov    DWORD PTR [eax],edx
c000c946:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c94a:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c000c954:	90                   	nop
c000c955:	83 c4 0c             	add    esp,0xc
c000c958:	c3                   	ret    
c000c959:	90                   	nop
c000c95a:	66 90                	xchg   ax,ax

c000c95c <HardDiskController::~HardDiskController()>:
c000c95c:	83 ec 0c             	sub    esp,0xc
c000c95f:	ba 08 14 02 c0       	mov    edx,0xc0021408
c000c964:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c968:	89 10                	mov    DWORD PTR [eax],edx
c000c96a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c96e:	83 ec 0c             	sub    esp,0xc
c000c971:	50                   	push   eax
c000c972:	e8 6d fb ff ff       	call   c000c4e4 <Device::~Device()>
c000c977:	83 c4 10             	add    esp,0x10
c000c97a:	90                   	nop
c000c97b:	83 c4 0c             	add    esp,0xc
c000c97e:	c3                   	ret    
c000c97f:	90                   	nop

c000c980 <HardDiskController::~HardDiskController()>:
c000c980:	83 ec 0c             	sub    esp,0xc
c000c983:	83 ec 0c             	sub    esp,0xc
c000c986:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c98a:	e8 cd ff ff ff       	call   c000c95c <HardDiskController::~HardDiskController()>
c000c98f:	83 c4 10             	add    esp,0x10
c000c992:	83 ec 08             	sub    esp,0x8
c000c995:	68 58 01 00 00       	push   0x158
c000c99a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c99e:	e8 75 de ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c000c9a3:	83 c4 10             	add    esp,0x10
c000c9a6:	83 c4 0c             	add    esp,0xc
c000c9a9:	c3                   	ret    

c000c9aa <PhysicalDisk::eject()>:
c000c9aa:	83 c8 ff             	or     eax,0xffffffff
c000c9ad:	c3                   	ret    

c000c9ae <PhysicalDisk::PhysicalDisk(char const*, int)>:
c000c9ae:	83 ec 0c             	sub    esp,0xc
c000c9b1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c9b5:	83 ec 08             	sub    esp,0x8
c000c9b8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c9bc:	50                   	push   eax
c000c9bd:	e8 b8 fd ff ff       	call   c000c77a <Device::Device(char const*)>
c000c9c2:	83 c4 10             	add    esp,0x10
c000c9c5:	ba 34 14 02 c0       	mov    edx,0xc0021434
c000c9ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c9ce:	89 10                	mov    DWORD PTR [eax],edx
c000c9d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c9d4:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000c9db:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c9df:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c000c9e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c9ea:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c000c9f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c9f8:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000c9fc:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c000ca02:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ca06:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c000ca10:	90                   	nop
c000ca11:	83 c4 0c             	add    esp,0xc
c000ca14:	c3                   	ret    
c000ca15:	90                   	nop

c000ca16 <PhysicalDisk::startCache()>:
c000ca16:	56                   	push   esi
c000ca17:	53                   	push   ebx
c000ca18:	83 ec 10             	sub    esp,0x10
c000ca1b:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000ca1f:	6a 44                	push   0x44
c000ca21:	e8 90 b0 ff ff       	call   c0007ab6 <malloc>
c000ca26:	89 c6                	mov    esi,eax
c000ca28:	58                   	pop    eax
c000ca29:	5a                   	pop    edx
c000ca2a:	53                   	push   ebx
c000ca2b:	56                   	push   esi
c000ca2c:	e8 7b 17 00 00       	call   c000e1ac <VCache::VCache(PhysicalDisk*)>
c000ca31:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c000ca37:	83 c4 14             	add    esp,0x14
c000ca3a:	5b                   	pop    ebx
c000ca3b:	5e                   	pop    esi
c000ca3c:	c3                   	ret    
c000ca3d:	90                   	nop

c000ca3e <PhysicalDisk::~PhysicalDisk()>:
c000ca3e:	83 ec 0c             	sub    esp,0xc
c000ca41:	ba 34 14 02 c0       	mov    edx,0xc0021434
c000ca46:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ca4a:	89 10                	mov    DWORD PTR [eax],edx
c000ca4c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ca50:	83 ec 0c             	sub    esp,0xc
c000ca53:	50                   	push   eax
c000ca54:	e8 8b fa ff ff       	call   c000c4e4 <Device::~Device()>
c000ca59:	83 c4 10             	add    esp,0x10
c000ca5c:	90                   	nop
c000ca5d:	83 c4 0c             	add    esp,0xc
c000ca60:	c3                   	ret    
c000ca61:	90                   	nop

c000ca62 <PhysicalDisk::~PhysicalDisk()>:
c000ca62:	83 ec 0c             	sub    esp,0xc
c000ca65:	83 ec 0c             	sub    esp,0xc
c000ca68:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca6c:	e8 cd ff ff ff       	call   c000ca3e <PhysicalDisk::~PhysicalDisk()>
c000ca71:	83 c4 10             	add    esp,0x10
c000ca74:	83 ec 08             	sub    esp,0x8
c000ca77:	68 6c 01 00 00       	push   0x16c
c000ca7c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca80:	e8 93 dd ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c000ca85:	83 c4 10             	add    esp,0x10
c000ca88:	83 c4 0c             	add    esp,0xc
c000ca8b:	c3                   	ret    

c000ca8c <int_handler>:
c000ca8c:	55                   	push   ebp
c000ca8d:	57                   	push   edi
c000ca8e:	56                   	push   esi
c000ca8f:	53                   	push   ebx
c000ca90:	83 ec 0c             	sub    esp,0xc
c000ca93:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000ca97:	80 3d 28 9c 02 c0 00 	cmp    BYTE PTR ds:0xc0029c28,0x0
c000ca9e:	74 0b                	je     c000caab <int_handler+0x1f>
c000caa0:	fa                   	cli    
c000caa1:	f4                   	hlt    
c000caa2:	80 3d 28 9c 02 c0 00 	cmp    BYTE PTR ds:0xc0029c28,0x0
c000caa9:	75 f5                	jne    c000caa0 <int_handler+0x14>
c000caab:	8b 77 30             	mov    esi,DWORD PTR [edi+0x30]
c000caae:	8d 46 e0             	lea    eax,[esi-0x20]
c000cab1:	83 f8 17             	cmp    eax,0x17
c000cab4:	76 40                	jbe    c000caf6 <int_handler+0x6a>
c000cab6:	c1 e6 04             	shl    esi,0x4
c000cab9:	31 db                	xor    ebx,ebx
c000cabb:	8d ae 80 80 02 c0    	lea    ebp,[esi-0x3ffd7f80]
c000cac1:	81 c6 80 70 02 c0    	add    esi,0xc0027080
c000cac7:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c000cacb:	85 c0                	test   eax,eax
c000cacd:	74 13                	je     c000cae2 <int_handler+0x56>
c000cacf:	8b 14 9e             	mov    edx,DWORD PTR [esi+ebx*4]
c000cad2:	83 7f 30 60          	cmp    DWORD PTR [edi+0x30],0x60
c000cad6:	74 2c                	je     c000cb04 <int_handler+0x78>
c000cad8:	83 ec 08             	sub    esp,0x8
c000cadb:	52                   	push   edx
c000cadc:	57                   	push   edi
c000cadd:	ff d0                	call   eax
c000cadf:	83 c4 10             	add    esp,0x10
c000cae2:	83 c3 01             	add    ebx,0x1
c000cae5:	83 fb 04             	cmp    ebx,0x4
c000cae8:	75 dd                	jne    c000cac7 <int_handler+0x3b>
c000caea:	83 c4 0c             	add    esp,0xc
c000caed:	31 c0                	xor    eax,eax
c000caef:	5b                   	pop    ebx
c000caf0:	31 d2                	xor    edx,edx
c000caf2:	5e                   	pop    esi
c000caf3:	5f                   	pop    edi
c000caf4:	5d                   	pop    ebp
c000caf5:	c3                   	ret    
c000caf6:	83 ec 0c             	sub    esp,0xc
c000caf9:	50                   	push   eax
c000cafa:	e8 75 b2 00 00       	call   c0017d74 <HalEndOfInterrupt(int)>
c000caff:	83 c4 10             	add    esp,0x10
c000cb02:	eb b2                	jmp    c000cab6 <int_handler+0x2a>
c000cb04:	83 ec 08             	sub    esp,0x8
c000cb07:	52                   	push   edx
c000cb08:	57                   	push   edi
c000cb09:	ff d0                	call   eax
c000cb0b:	83 c4 10             	add    esp,0x10
c000cb0e:	83 c4 0c             	add    esp,0xc
c000cb11:	5b                   	pop    ebx
c000cb12:	5e                   	pop    esi
c000cb13:	5f                   	pop    edi
c000cb14:	5d                   	pop    ebp
c000cb15:	c3                   	ret    

c000cb16 <installISRHandler(int, void (*)(regs*, void*), void*)>:
c000cb16:	56                   	push   esi
c000cb17:	31 c0                	xor    eax,eax
c000cb19:	53                   	push   ebx
c000cb1a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000cb1e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000cb22:	89 ca                	mov    edx,ecx
c000cb24:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000cb28:	c1 e2 04             	shl    edx,0x4
c000cb2b:	83 bc 82 80 80 02 c0 00 	cmp    DWORD PTR [edx+eax*4-0x3ffd7f80],0x0
c000cb33:	74 17                	je     c000cb4c <installISRHandler(int, void (*)(regs*, void*), void*)+0x36>
c000cb35:	83 c0 01             	add    eax,0x1
c000cb38:	83 f8 04             	cmp    eax,0x4
c000cb3b:	75 ee                	jne    c000cb2b <installISRHandler(int, void (*)(regs*, void*), void*)+0x15>
c000cb3d:	c7 44 24 0c 64 14 02 c0 	mov    DWORD PTR [esp+0xc],0xc0021464
c000cb45:	5b                   	pop    ebx
c000cb46:	5e                   	pop    esi
c000cb47:	e9 a1 46 00 00       	jmp    c00111ed <KePanic(char const*)>
c000cb4c:	8d 04 88             	lea    eax,[eax+ecx*4]
c000cb4f:	89 1c 85 80 80 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7f80],ebx
c000cb56:	89 34 85 80 70 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8f80],esi
c000cb5d:	5b                   	pop    ebx
c000cb5e:	5e                   	pop    esi
c000cb5f:	c3                   	ret    

c000cb60 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000cb60:	57                   	push   edi
c000cb61:	8b 15 b8 5e 02 c0    	mov    edx,DWORD PTR ds:0xc0025eb8
c000cb67:	56                   	push   esi
c000cb68:	53                   	push   ebx
c000cb69:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000cb6d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000cb71:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c000cb78:	74 54                	je     c000cbce <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x6e>
c000cb7a:	89 c7                	mov    edi,eax
c000cb7c:	84 c0                	test   al,al
c000cb7e:	74 1d                	je     c000cb9d <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3d>
c000cb80:	83 fe 0f             	cmp    esi,0xf
c000cb83:	0f 8f d5 00 00 00    	jg     c000cc5e <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xfe>
c000cb89:	0f b6 b6 68 2f 02 c0 	movzx  esi,BYTE PTR [esi-0x3ffdd098]
c000cb90:	0f b7 bc 36 20 98 02 c0 	movzx  edi,WORD PTR [esi+esi*1-0x3ffd67e0]
c000cb98:	d1 ef                	shr    edi,1
c000cb9a:	83 e7 01             	and    edi,0x1
c000cb9d:	83 ec 08             	sub    esp,0x8
c000cba0:	a1 60 ae 02 c0       	mov    eax,ds:0xc002ae60
c000cba5:	31 db                	xor    ebx,ebx
c000cba7:	50                   	push   eax
c000cba8:	68 71 14 02 c0       	push   0xc0021471
c000cbad:	e8 93 dd ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000cbb2:	83 c4 10             	add    esp,0x10
c000cbb5:	a1 60 ae 02 c0       	mov    eax,ds:0xc002ae60
c000cbba:	85 c0                	test   eax,eax
c000cbbc:	7f 55                	jg     c000cc13 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xb3>
c000cbbe:	83 ec 0c             	sub    esp,0xc
c000cbc1:	68 88 14 02 c0       	push   0xc0021488
c000cbc6:	e8 22 46 00 00       	call   c00111ed <KePanic(char const*)>
c000cbcb:	83 c4 10             	add    esp,0x10
c000cbce:	8d 7e 20             	lea    edi,[esi+0x20]
c000cbd1:	89 f8                	mov    eax,edi
c000cbd3:	31 d2                	xor    edx,edx
c000cbd5:	c1 e0 04             	shl    eax,0x4
c000cbd8:	8b 8c 90 80 80 02 c0 	mov    ecx,DWORD PTR [eax+edx*4-0x3ffd7f80]
c000cbdf:	85 c9                	test   ecx,ecx
c000cbe1:	0f 84 8e 00 00 00    	je     c000cc75 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x115>
c000cbe7:	83 c2 01             	add    edx,0x1
c000cbea:	83 fa 04             	cmp    edx,0x4
c000cbed:	75 e9                	jne    c000cbd8 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x78>
c000cbef:	83 ec 0c             	sub    esp,0xc
c000cbf2:	68 dc 14 02 c0       	push   0xc00214dc
c000cbf7:	e8 f1 45 00 00       	call   c00111ed <KePanic(char const*)>
c000cbfc:	83 c4 10             	add    esp,0x10
c000cbff:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000cc04:	5b                   	pop    ebx
c000cc05:	5e                   	pop    esi
c000cc06:	5f                   	pop    edi
c000cc07:	c3                   	ret    
c000cc08:	83 c3 01             	add    ebx,0x1
c000cc0b:	39 1d 60 ae 02 c0    	cmp    DWORD PTR ds:0xc002ae60,ebx
c000cc11:	7e ab                	jle    c000cbbe <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x5e>
c000cc13:	83 ec 08             	sub    esp,0x8
c000cc16:	8b 04 9d 80 ae 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd5180]
c000cc1d:	56                   	push   esi
c000cc1e:	50                   	push   eax
c000cc1f:	e8 da 18 01 00       	call   c001e4fe <IOAPIC::handlesGSIWithNumber(unsigned int)>
c000cc24:	83 c4 10             	add    esp,0x10
c000cc27:	84 c0                	test   al,al
c000cc29:	74 dd                	je     c000cc08 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xa8>
c000cc2b:	83 ec 04             	sub    esp,0x4
c000cc2e:	89 f8                	mov    eax,edi
c000cc30:	8b 1c 9d 80 ae 02 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffd5180]
c000cc37:	0f b6 f8             	movzx  edi,al
c000cc3a:	57                   	push   edi
c000cc3b:	8d 7e 20             	lea    edi,[esi+0x20]
c000cc3e:	6a 00                	push   0x0
c000cc40:	89 f8                	mov    eax,edi
c000cc42:	0f b6 c0             	movzx  eax,al
c000cc45:	50                   	push   eax
c000cc46:	89 f0                	mov    eax,esi
c000cc48:	6a 00                	push   0x0
c000cc4a:	0f b6 c0             	movzx  eax,al
c000cc4d:	6a 00                	push   0x0
c000cc4f:	50                   	push   eax
c000cc50:	53                   	push   ebx
c000cc51:	e8 14 1a 01 00       	call   c001e66a <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c000cc56:	83 c4 20             	add    esp,0x20
c000cc59:	e9 73 ff ff ff       	jmp    c000cbd1 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x71>
c000cc5e:	83 ec 0c             	sub    esp,0xc
c000cc61:	31 ff                	xor    edi,edi
c000cc63:	68 a4 14 02 c0       	push   0xc00214a4
c000cc68:	e8 80 45 00 00       	call   c00111ed <KePanic(char const*)>
c000cc6d:	83 c4 10             	add    esp,0x10
c000cc70:	e9 28 ff ff ff       	jmp    c000cb9d <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3d>
c000cc75:	8d 04 ba             	lea    eax,[edx+edi*4]
c000cc78:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000cc7c:	89 14 85 80 80 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7f80],edx
c000cc83:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000cc87:	5b                   	pop    ebx
c000cc88:	89 14 85 80 70 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8f80],edx
c000cc8f:	89 f0                	mov    eax,esi
c000cc91:	5e                   	pop    esi
c000cc92:	5f                   	pop    edi
c000cc93:	c3                   	ret    

c000cc94 <uninstallISRHandler(int, void (*)(regs*, void*))>:
c000cc94:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cc98:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000cc9c:	c1 e0 04             	shl    eax,0x4
c000cc9f:	8d 50 10             	lea    edx,[eax+0x10]
c000cca2:	39 88 80 80 02 c0    	cmp    DWORD PTR [eax-0x3ffd7f80],ecx
c000cca8:	74 08                	je     c000ccb2 <uninstallISRHandler(int, void (*)(regs*, void*))+0x1e>
c000ccaa:	83 c0 04             	add    eax,0x4
c000ccad:	39 d0                	cmp    eax,edx
c000ccaf:	75 f1                	jne    c000cca2 <uninstallISRHandler(int, void (*)(regs*, void*))+0xe>
c000ccb1:	c3                   	ret    
c000ccb2:	c7 80 80 80 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd7f80],0x0
c000ccbc:	c7 80 80 70 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd8f80],0x0
c000ccc6:	eb e2                	jmp    c000ccaa <uninstallISRHandler(int, void (*)(regs*, void*))+0x16>

c000ccc8 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c000ccc8:	53                   	push   ebx
c000ccc9:	83 ec 08             	sub    esp,0x8
c000cccc:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000ccd0:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c000ccd5:	74 0e                	je     c000cce5 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c000ccd7:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000ccdc:	f6 80 6c 01 00 00 01 	test   BYTE PTR [eax+0x16c],0x1
c000cce3:	75 37                	jne    c000cd1c <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x54>
c000cce5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cce9:	83 c0 20             	add    eax,0x20
c000ccec:	c1 e0 04             	shl    eax,0x4
c000ccef:	8d 50 10             	lea    edx,[eax+0x10]
c000ccf2:	39 98 80 80 02 c0    	cmp    DWORD PTR [eax-0x3ffd7f80],ebx
c000ccf8:	74 0c                	je     c000cd06 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x3e>
c000ccfa:	83 c0 04             	add    eax,0x4
c000ccfd:	39 d0                	cmp    eax,edx
c000ccff:	75 f1                	jne    c000ccf2 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2a>
c000cd01:	83 c4 08             	add    esp,0x8
c000cd04:	5b                   	pop    ebx
c000cd05:	c3                   	ret    
c000cd06:	c7 80 80 80 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd7f80],0x0
c000cd10:	c7 80 80 70 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd8f80],0x0
c000cd1a:	eb de                	jmp    c000ccfa <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x32>
c000cd1c:	83 7c 24 10 0f       	cmp    DWORD PTR [esp+0x10],0xf
c000cd21:	7f 11                	jg     c000cd34 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x6c>
c000cd23:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cd27:	0f b6 80 68 2f 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffdd098]
c000cd2e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cd32:	eb b1                	jmp    c000cce5 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c000cd34:	83 ec 0c             	sub    esp,0xc
c000cd37:	68 95 14 02 c0       	push   0xc0021495
c000cd3c:	e8 ac 44 00 00       	call   c00111ed <KePanic(char const*)>
c000cd41:	83 c4 10             	add    esp,0x10
c000cd44:	eb 9f                	jmp    c000cce5 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>

c000cd46 <setupINTS()>:
c000cd46:	31 c0                	xor    eax,eax
c000cd48:	c7 80 80 80 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd7f80],0x0
c000cd52:	c7 80 80 70 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd8f80],0x0
c000cd5c:	c7 80 84 80 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd7f7c],0x0
c000cd66:	c7 80 84 70 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd8f7c],0x0
c000cd70:	c7 80 88 80 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd7f78],0x0
c000cd7a:	c7 80 88 70 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd8f78],0x0
c000cd84:	c7 80 8c 80 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd7f74],0x0
c000cd8e:	c7 80 8c 70 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd8f74],0x0
c000cd98:	83 c0 10             	add    eax,0x10
c000cd9b:	3d 00 10 00 00       	cmp    eax,0x1000
c000cda0:	75 a6                	jne    c000cd48 <setupINTS()+0x2>
c000cda2:	c3                   	ret    

c000cda3 <convertLegacyIRQNumber(int)>:
c000cda3:	83 ec 0c             	sub    esp,0xc
c000cda6:	8b 15 b8 5e 02 c0    	mov    edx,DWORD PTR ds:0xc0025eb8
c000cdac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cdb0:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c000cdb7:	74 0c                	je     c000cdc5 <convertLegacyIRQNumber(int)+0x22>
c000cdb9:	83 f8 0f             	cmp    eax,0xf
c000cdbc:	7f 0b                	jg     c000cdc9 <convertLegacyIRQNumber(int)+0x26>
c000cdbe:	0f b6 80 68 2f 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffdd098]
c000cdc5:	83 c4 0c             	add    esp,0xc
c000cdc8:	c3                   	ret    
c000cdc9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cdcd:	83 ec 0c             	sub    esp,0xc
c000cdd0:	68 a4 14 02 c0       	push   0xc00214a4
c000cdd5:	e8 13 44 00 00       	call   c00111ed <KePanic(char const*)>
c000cdda:	83 c4 10             	add    esp,0x10
c000cddd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cde1:	83 c4 0c             	add    esp,0xc
c000cde4:	c3                   	ret    
c000cde5:	90                   	nop

c000cde6 <startGUI(void*)>:
c000cde6:	55                   	push   ebp
c000cde7:	89 e5                	mov    ebp,esp
c000cde9:	53                   	push   ebx
c000cdea:	83 ec 04             	sub    esp,0x4
c000cded:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c000cdf2:	83 e8 01             	sub    eax,0x1
c000cdf5:	a3 68 a4 02 c0       	mov    ds:0xc002a468,eax
c000cdfa:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c000cdff:	85 c0                	test   eax,eax
c000ce01:	75 01                	jne    c000ce04 <startGUI(void*)+0x1e>
c000ce03:	fb                   	sti    
c000ce04:	8b 1d b8 5e 02 c0    	mov    ebx,DWORD PTR ds:0xc0025eb8
c000ce0a:	83 ec 08             	sub    esp,0x8
c000ce0d:	6a 01                	push   0x1
c000ce0f:	68 01 15 02 c0       	push   0xc0021501
c000ce14:	e8 35 82 00 00       	call   c001504e <Thr::loadDLL(char const*, bool)>
c000ce19:	83 c4 10             	add    esp,0x10
c000ce1c:	83 ec 08             	sub    esp,0x8
c000ce1f:	53                   	push   ebx
c000ce20:	50                   	push   eax
c000ce21:	e8 59 84 00 00       	call   c001527f <Thr::executeDLL(unsigned long, void*)>
c000ce26:	83 c4 10             	add    esp,0x10
c000ce29:	8b 1d b8 5e 02 c0    	mov    ebx,DWORD PTR ds:0xc0025eb8
c000ce2f:	83 ec 08             	sub    esp,0x8
c000ce32:	6a 01                	push   0x1
c000ce34:	68 1b 15 02 c0       	push   0xc002151b
c000ce39:	e8 10 82 00 00       	call   c001504e <Thr::loadDLL(char const*, bool)>
c000ce3e:	83 c4 10             	add    esp,0x10
c000ce41:	83 ec 08             	sub    esp,0x8
c000ce44:	53                   	push   ebx
c000ce45:	50                   	push   eax
c000ce46:	e8 34 84 00 00       	call   c001527f <Thr::executeDLL(unsigned long, void*)>
c000ce4b:	83 c4 10             	add    esp,0x10
c000ce4e:	90                   	nop
c000ce4f:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000ce52:	c9                   	leave  
c000ce53:	c3                   	ret    

c000ce54 <startGUIVESA(void*)>:
c000ce54:	55                   	push   ebp
c000ce55:	89 e5                	mov    ebp,esp
c000ce57:	53                   	push   ebx
c000ce58:	83 ec 04             	sub    esp,0x4
c000ce5b:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c000ce60:	83 e8 01             	sub    eax,0x1
c000ce63:	a3 68 a4 02 c0       	mov    ds:0xc002a468,eax
c000ce68:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c000ce6d:	85 c0                	test   eax,eax
c000ce6f:	75 01                	jne    c000ce72 <startGUIVESA(void*)+0x1e>
c000ce71:	fb                   	sti    
c000ce72:	8b 1d b8 5e 02 c0    	mov    ebx,DWORD PTR ds:0xc0025eb8
c000ce78:	83 ec 08             	sub    esp,0x8
c000ce7b:	6a 01                	push   0x1
c000ce7d:	68 39 15 02 c0       	push   0xc0021539
c000ce82:	e8 c7 81 00 00       	call   c001504e <Thr::loadDLL(char const*, bool)>
c000ce87:	83 c4 10             	add    esp,0x10
c000ce8a:	83 ec 08             	sub    esp,0x8
c000ce8d:	53                   	push   ebx
c000ce8e:	50                   	push   eax
c000ce8f:	e8 eb 83 00 00       	call   c001527f <Thr::executeDLL(unsigned long, void*)>
c000ce94:	83 c4 10             	add    esp,0x10
c000ce97:	8b 1d b8 5e 02 c0    	mov    ebx,DWORD PTR ds:0xc0025eb8
c000ce9d:	83 ec 08             	sub    esp,0x8
c000cea0:	6a 01                	push   0x1
c000cea2:	68 1b 15 02 c0       	push   0xc002151b
c000cea7:	e8 a2 81 00 00       	call   c001504e <Thr::loadDLL(char const*, bool)>
c000ceac:	83 c4 10             	add    esp,0x10
c000ceaf:	83 ec 08             	sub    esp,0x8
c000ceb2:	53                   	push   ebx
c000ceb3:	50                   	push   eax
c000ceb4:	e8 c6 83 00 00       	call   c001527f <Thr::executeDLL(unsigned long, void*)>
c000ceb9:	83 c4 10             	add    esp,0x10
c000cebc:	90                   	nop
c000cebd:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000cec0:	c9                   	leave  
c000cec1:	c3                   	ret    

c000cec2 <sendKeyToTerminal(unsigned char)>:
c000cec2:	55                   	push   ebp
c000cec3:	89 e5                	mov    ebp,esp
c000cec5:	83 ec 28             	sub    esp,0x28
c000cec8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cecb:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c000cece:	a1 04 5f 02 c0       	mov    eax,ds:0xc0025f04
c000ced3:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
c000ced7:	83 ec 08             	sub    esp,0x8
c000ceda:	52                   	push   edx
c000cedb:	50                   	push   eax
c000cedc:	e8 d5 be ff ff       	call   c0008db6 <VgaText::receiveKey(unsigned char)>
c000cee1:	83 c4 10             	add    esp,0x10
c000cee4:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c000cee8:	83 f8 0a             	cmp    eax,0xa
c000ceeb:	74 16                	je     c000cf03 <sendKeyToTerminal(unsigned char)+0x41>
c000ceed:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c000cef1:	83 f8 03             	cmp    eax,0x3
c000cef4:	74 0d                	je     c000cf03 <sendKeyToTerminal(unsigned char)+0x41>
c000cef6:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c000cefa:	83 f8 1c             	cmp    eax,0x1c
c000cefd:	0f 85 97 00 00 00    	jne    c000cf9a <sendKeyToTerminal(unsigned char)+0xd8>
c000cf03:	fa                   	cli    
c000cf04:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c000cf09:	83 c0 01             	add    eax,0x1
c000cf0c:	a3 68 a4 02 c0       	mov    ds:0xc002a468,eax
c000cf11:	a1 64 a4 02 c0       	mov    eax,ds:0xc002a464
c000cf16:	83 c0 01             	add    eax,0x1
c000cf19:	a3 64 a4 02 c0       	mov    ds:0xc002a464,eax
c000cf1e:	a1 80 90 02 c0       	mov    eax,ds:0xc0029080
c000cf23:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000cf26:	c7 05 80 90 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029080,0x0
c000cf30:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c000cf34:	74 1f                	je     c000cf55 <sendKeyToTerminal(unsigned char)+0x93>
c000cf36:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000cf39:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c000cf3c:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000cf3f:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000cf42:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000cf45:	83 ec 0c             	sub    esp,0xc
c000cf48:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000cf4b:	e8 74 90 00 00       	call   c0015fc4 <unblockTask(ThreadControlBlock*)>
c000cf50:	83 c4 10             	add    esp,0x10
c000cf53:	eb db                	jmp    c000cf30 <sendKeyToTerminal(unsigned char)+0x6e>
c000cf55:	a1 64 a4 02 c0       	mov    eax,ds:0xc002a464
c000cf5a:	83 e8 01             	sub    eax,0x1
c000cf5d:	a3 64 a4 02 c0       	mov    ds:0xc002a464,eax
c000cf62:	a1 64 a4 02 c0       	mov    eax,ds:0xc002a464
c000cf67:	85 c0                	test   eax,eax
c000cf69:	75 18                	jne    c000cf83 <sendKeyToTerminal(unsigned char)+0xc1>
c000cf6b:	a1 60 a4 02 c0       	mov    eax,ds:0xc002a460
c000cf70:	85 c0                	test   eax,eax
c000cf72:	74 0f                	je     c000cf83 <sendKeyToTerminal(unsigned char)+0xc1>
c000cf74:	c7 05 60 a4 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002a460,0x0
c000cf7e:	e8 29 8b 00 00       	call   c0015aac <schedule()>
c000cf83:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c000cf88:	83 e8 01             	sub    eax,0x1
c000cf8b:	a3 68 a4 02 c0       	mov    ds:0xc002a468,eax
c000cf90:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c000cf95:	85 c0                	test   eax,eax
c000cf97:	75 01                	jne    c000cf9a <sendKeyToTerminal(unsigned char)+0xd8>
c000cf99:	fb                   	sti    
c000cf9a:	90                   	nop
c000cf9b:	c9                   	leave  
c000cf9c:	c3                   	ret    

c000cf9d <sendKeyboardToken(KeyboardToken)>:
c000cf9d:	55                   	push   ebp
c000cf9e:	89 e5                	mov    ebp,esp
c000cfa0:	83 ec 18             	sub    esp,0x18
c000cfa3:	e8 95 42 00 00       	call   c001123d <KeUserIOReceived()>
c000cfa8:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c000cfab:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cfae:	0f b7 c0             	movzx  eax,ax
c000cfb1:	83 f2 01             	xor    edx,0x1
c000cfb4:	88 90 a0 90 02 c0    	mov    BYTE PTR [eax-0x3ffd6f60],dl
c000cfba:	a1 88 90 02 c0       	mov    eax,ds:0xc0029088
c000cfbf:	85 c0                	test   eax,eax
c000cfc1:	74 24                	je     c000cfe7 <sendKeyboardToken(KeyboardToken)+0x4a>
c000cfc3:	8b 0d 88 90 02 c0    	mov    ecx,DWORD PTR ds:0xc0029088
c000cfc9:	83 ec 04             	sub    esp,0x4
c000cfcc:	68 a0 90 02 c0       	push   0xc00290a0
c000cfd1:	83 ec 08             	sub    esp,0x8
c000cfd4:	89 e2                	mov    edx,esp
c000cfd6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cfd9:	89 02                	mov    DWORD PTR [edx],eax
c000cfdb:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000cfde:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c000cfe2:	ff d1                	call   ecx
c000cfe4:	83 c4 10             	add    esp,0x10
c000cfe7:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c000cfeb:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c000cfee:	a0 a8 94 02 c0       	mov    al,ds:0xc00294a8
c000cff3:	0f b6 d2             	movzx  edx,dl
c000cff6:	0f b6 c0             	movzx  eax,al
c000cff9:	39 c2                	cmp    edx,eax
c000cffb:	74 1c                	je     c000d019 <sendKeyboardToken(KeyboardToken)+0x7c>
c000cffd:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c000d000:	a2 a8 94 02 c0       	mov    ds:0xc00294a8,al
c000d005:	a0 a8 94 02 c0       	mov    al,ds:0xc00294a8
c000d00a:	0f b6 c0             	movzx  eax,al
c000d00d:	83 ec 0c             	sub    esp,0xc
c000d010:	50                   	push   eax
c000d011:	e8 ec b4 ff ff       	call   c0008502 <setTerminalScrollLock(bool)>
c000d016:	83 c4 10             	add    esp,0x10
c000d019:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c000d01c:	0f b6 c0             	movzx  eax,al
c000d01f:	85 c0                	test   eax,eax
c000d021:	0f 84 da 00 00 00    	je     c000d101 <sendKeyboardToken(KeyboardToken)+0x164>
c000d027:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d02a:	0f b7 c0             	movzx  eax,ax
c000d02d:	3d 18 03 00 00       	cmp    eax,0x318
c000d032:	75 06                	jne    c000d03a <sendKeyboardToken(KeyboardToken)+0x9d>
c000d034:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c000d03a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d03d:	0f b7 c0             	movzx  eax,ax
c000d040:	3d 19 03 00 00       	cmp    eax,0x319
c000d045:	75 06                	jne    c000d04d <sendKeyboardToken(KeyboardToken)+0xb0>
c000d047:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c000d04d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d050:	0f b7 c0             	movzx  eax,ax
c000d053:	3d 1a 03 00 00       	cmp    eax,0x31a
c000d058:	75 06                	jne    c000d060 <sendKeyboardToken(KeyboardToken)+0xc3>
c000d05a:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c000d060:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d063:	0f b7 c0             	movzx  eax,ax
c000d066:	3d 1b 03 00 00       	cmp    eax,0x31b
c000d06b:	75 06                	jne    c000d073 <sendKeyboardToken(KeyboardToken)+0xd6>
c000d06d:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c000d073:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d076:	0f b7 c0             	movzx  eax,ax
c000d079:	3d 1c 03 00 00       	cmp    eax,0x31c
c000d07e:	75 06                	jne    c000d086 <sendKeyboardToken(KeyboardToken)+0xe9>
c000d080:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c000d086:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d089:	0f b7 c0             	movzx  eax,ax
c000d08c:	3d 1d 03 00 00       	cmp    eax,0x31d
c000d091:	75 06                	jne    c000d099 <sendKeyboardToken(KeyboardToken)+0xfc>
c000d093:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000d099:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d09c:	0f b7 c0             	movzx  eax,ax
c000d09f:	3d 1e 03 00 00       	cmp    eax,0x31e
c000d0a4:	75 06                	jne    c000d0ac <sendKeyboardToken(KeyboardToken)+0x10f>
c000d0a6:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c000d0ac:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d0af:	0f b7 c0             	movzx  eax,ax
c000d0b2:	3d 1f 03 00 00       	cmp    eax,0x31f
c000d0b7:	75 06                	jne    c000d0bf <sendKeyboardToken(KeyboardToken)+0x122>
c000d0b9:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c000d0bf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d0c2:	0f b7 c0             	movzx  eax,ax
c000d0c5:	3d 20 03 00 00       	cmp    eax,0x320
c000d0ca:	75 06                	jne    c000d0d2 <sendKeyboardToken(KeyboardToken)+0x135>
c000d0cc:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c000d0d2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d0d5:	0f b7 c0             	movzx  eax,ax
c000d0d8:	3d 21 03 00 00       	cmp    eax,0x321
c000d0dd:	75 06                	jne    c000d0e5 <sendKeyboardToken(KeyboardToken)+0x148>
c000d0df:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c000d0e5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d0e8:	0f b7 c0             	movzx  eax,ax
c000d0eb:	3d 22 03 00 00       	cmp    eax,0x322
c000d0f0:	0f 85 f1 00 00 00    	jne    c000d1e7 <sendKeyboardToken(KeyboardToken)+0x24a>
c000d0f6:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c000d0fc:	e9 e6 00 00 00       	jmp    c000d1e7 <sendKeyboardToken(KeyboardToken)+0x24a>
c000d101:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d104:	0f b7 c0             	movzx  eax,ax
c000d107:	3d 18 03 00 00       	cmp    eax,0x318
c000d10c:	75 0a                	jne    c000d118 <sendKeyboardToken(KeyboardToken)+0x17b>
c000d10e:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c000d114:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d118:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d11b:	0f b7 c0             	movzx  eax,ax
c000d11e:	3d 19 03 00 00       	cmp    eax,0x319
c000d123:	75 0a                	jne    c000d12f <sendKeyboardToken(KeyboardToken)+0x192>
c000d125:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c000d12b:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d12f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d132:	0f b7 c0             	movzx  eax,ax
c000d135:	3d 1a 03 00 00       	cmp    eax,0x31a
c000d13a:	75 0a                	jne    c000d146 <sendKeyboardToken(KeyboardToken)+0x1a9>
c000d13c:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c000d142:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d146:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d149:	0f b7 c0             	movzx  eax,ax
c000d14c:	3d 1b 03 00 00       	cmp    eax,0x31b
c000d151:	75 0a                	jne    c000d15d <sendKeyboardToken(KeyboardToken)+0x1c0>
c000d153:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c000d159:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d15d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d160:	0f b7 c0             	movzx  eax,ax
c000d163:	3d 1c 03 00 00       	cmp    eax,0x31c
c000d168:	75 0a                	jne    c000d174 <sendKeyboardToken(KeyboardToken)+0x1d7>
c000d16a:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c000d170:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d174:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d177:	0f b7 c0             	movzx  eax,ax
c000d17a:	3d 1d 03 00 00       	cmp    eax,0x31d
c000d17f:	75 0a                	jne    c000d18b <sendKeyboardToken(KeyboardToken)+0x1ee>
c000d181:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000d187:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d18b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d18e:	0f b7 c0             	movzx  eax,ax
c000d191:	3d 1e 03 00 00       	cmp    eax,0x31e
c000d196:	75 0a                	jne    c000d1a2 <sendKeyboardToken(KeyboardToken)+0x205>
c000d198:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c000d19e:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d1a2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d1a5:	0f b7 c0             	movzx  eax,ax
c000d1a8:	3d 1f 03 00 00       	cmp    eax,0x31f
c000d1ad:	75 0a                	jne    c000d1b9 <sendKeyboardToken(KeyboardToken)+0x21c>
c000d1af:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c000d1b5:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d1b9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d1bc:	0f b7 c0             	movzx  eax,ax
c000d1bf:	3d 20 03 00 00       	cmp    eax,0x320
c000d1c4:	75 0a                	jne    c000d1d0 <sendKeyboardToken(KeyboardToken)+0x233>
c000d1c6:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c000d1cc:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d1d0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d1d3:	0f b7 c0             	movzx  eax,ax
c000d1d6:	3d 21 03 00 00       	cmp    eax,0x321
c000d1db:	75 0a                	jne    c000d1e7 <sendKeyboardToken(KeyboardToken)+0x24a>
c000d1dd:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c000d1e3:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d1e7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d1ea:	0f b7 c0             	movzx  eax,ax
c000d1ed:	3d 00 02 00 00       	cmp    eax,0x200
c000d1f2:	75 2f                	jne    c000d223 <sendKeyboardToken(KeyboardToken)+0x286>
c000d1f4:	a0 a0 94 02 c0       	mov    al,ds:0xc00294a0
c000d1f9:	83 f0 01             	xor    eax,0x1
c000d1fc:	0f b6 c0             	movzx  eax,al
c000d1ff:	85 c0                	test   eax,eax
c000d201:	74 20                	je     c000d223 <sendKeyboardToken(KeyboardToken)+0x286>
c000d203:	a1 90 a4 02 c0       	mov    eax,ds:0xc002a490
c000d208:	6a 01                	push   0x1
c000d20a:	6a 00                	push   0x0
c000d20c:	68 e6 cd 00 c0       	push   0xc000cde6
c000d211:	50                   	push   eax
c000d212:	e8 45 86 00 00       	call   c001585c <Process::createThread(void (*)(void*), void*, int)>
c000d217:	83 c4 10             	add    esp,0x10
c000d21a:	c6 05 a0 94 02 c0 01 	mov    BYTE PTR ds:0xc00294a0,0x1
c000d221:	eb 3a                	jmp    c000d25d <sendKeyboardToken(KeyboardToken)+0x2c0>
c000d223:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d226:	0f b7 c0             	movzx  eax,ax
c000d229:	3d 01 02 00 00       	cmp    eax,0x201
c000d22e:	75 2d                	jne    c000d25d <sendKeyboardToken(KeyboardToken)+0x2c0>
c000d230:	a0 a0 94 02 c0       	mov    al,ds:0xc00294a0
c000d235:	83 f0 01             	xor    eax,0x1
c000d238:	0f b6 c0             	movzx  eax,al
c000d23b:	85 c0                	test   eax,eax
c000d23d:	74 1e                	je     c000d25d <sendKeyboardToken(KeyboardToken)+0x2c0>
c000d23f:	a1 90 a4 02 c0       	mov    eax,ds:0xc002a490
c000d244:	6a 01                	push   0x1
c000d246:	6a 00                	push   0x0
c000d248:	68 54 ce 00 c0       	push   0xc000ce54
c000d24d:	50                   	push   eax
c000d24e:	e8 09 86 00 00       	call   c001585c <Process::createThread(void (*)(void*), void*, int)>
c000d253:	83 c4 10             	add    esp,0x10
c000d256:	c6 05 a0 94 02 c0 01 	mov    BYTE PTR ds:0xc00294a0,0x1
c000d25d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d260:	0f b7 c0             	movzx  eax,ax
c000d263:	3d 25 03 00 00       	cmp    eax,0x325
c000d268:	75 06                	jne    c000d270 <sendKeyboardToken(KeyboardToken)+0x2d3>
c000d26a:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c000d270:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d273:	0f b7 c0             	movzx  eax,ax
c000d276:	3d 24 03 00 00       	cmp    eax,0x324
c000d27b:	75 06                	jne    c000d283 <sendKeyboardToken(KeyboardToken)+0x2e6>
c000d27d:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c000d283:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d286:	0f b7 c0             	movzx  eax,ax
c000d289:	3d 23 03 00 00       	cmp    eax,0x323
c000d28e:	75 06                	jne    c000d296 <sendKeyboardToken(KeyboardToken)+0x2f9>
c000d290:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c000d296:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d299:	0f b7 c0             	movzx  eax,ax
c000d29c:	3d 26 03 00 00       	cmp    eax,0x326
c000d2a1:	75 06                	jne    c000d2a9 <sendKeyboardToken(KeyboardToken)+0x30c>
c000d2a3:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c000d2a9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d2ac:	0f b7 c0             	movzx  eax,ax
c000d2af:	3d 27 03 00 00       	cmp    eax,0x327
c000d2b4:	75 06                	jne    c000d2bc <sendKeyboardToken(KeyboardToken)+0x31f>
c000d2b6:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c000d2bc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d2bf:	0f b7 c0             	movzx  eax,ax
c000d2c2:	3d 22 03 00 00       	cmp    eax,0x322
c000d2c7:	75 06                	jne    c000d2cf <sendKeyboardToken(KeyboardToken)+0x332>
c000d2c9:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c000d2cf:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c000d2d3:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000d2d6:	83 f0 01             	xor    eax,0x1
c000d2d9:	0f b6 c0             	movzx  eax,al
c000d2dc:	85 c0                	test   eax,eax
c000d2de:	74 7c                	je     c000d35c <sendKeyboardToken(KeyboardToken)+0x3bf>
c000d2e0:	a0 a1 91 02 c0       	mov    al,ds:0xc00291a1
c000d2e5:	0f b6 c0             	movzx  eax,al
c000d2e8:	85 c0                	test   eax,eax
c000d2ea:	74 43                	je     c000d32f <sendKeyboardToken(KeyboardToken)+0x392>
c000d2ec:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000d2f0:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
c000d2f4:	85 c0                	test   eax,eax
c000d2f6:	74 2b                	je     c000d323 <sendKeyboardToken(KeyboardToken)+0x386>
c000d2f8:	8b 15 a4 94 02 c0    	mov    edx,DWORD PTR ds:0xc00294a4
c000d2fe:	89 d0                	mov    eax,edx
c000d300:	c1 e0 02             	shl    eax,0x2
c000d303:	01 d0                	add    eax,edx
c000d305:	01 c0                	add    eax,eax
c000d307:	a3 a4 94 02 c0       	mov    ds:0xc00294a4,eax
c000d30c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d30f:	0f b7 c0             	movzx  eax,ax
c000d312:	8d 50 d0             	lea    edx,[eax-0x30]
c000d315:	a1 a4 94 02 c0       	mov    eax,ds:0xc00294a4
c000d31a:	01 d0                	add    eax,edx
c000d31c:	a3 a4 94 02 c0       	mov    ds:0xc00294a4,eax
c000d321:	eb 71                	jmp    c000d394 <sendKeyboardToken(KeyboardToken)+0x3f7>
c000d323:	c7 05 a4 94 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00294a4,0x0
c000d32d:	eb 65                	jmp    c000d394 <sendKeyboardToken(KeyboardToken)+0x3f7>
c000d32f:	a1 a4 94 02 c0       	mov    eax,ds:0xc00294a4
c000d334:	85 c0                	test   eax,eax
c000d336:	74 18                	je     c000d350 <sendKeyboardToken(KeyboardToken)+0x3b3>
c000d338:	a1 a4 94 02 c0       	mov    eax,ds:0xc00294a4
c000d33d:	0f b6 c0             	movzx  eax,al
c000d340:	83 ec 0c             	sub    esp,0xc
c000d343:	50                   	push   eax
c000d344:	e8 79 fb ff ff       	call   c000cec2 <sendKeyToTerminal(unsigned char)>
c000d349:	83 c4 10             	add    esp,0x10
c000d34c:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000d350:	c7 05 a4 94 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00294a4,0x0
c000d35a:	eb 38                	jmp    c000d394 <sendKeyboardToken(KeyboardToken)+0x3f7>
c000d35c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d35f:	0f b7 c0             	movzx  eax,ax
c000d362:	3d 01 01 00 00       	cmp    eax,0x101
c000d367:	75 2b                	jne    c000d394 <sendKeyboardToken(KeyboardToken)+0x3f7>
c000d369:	a1 a4 94 02 c0       	mov    eax,ds:0xc00294a4
c000d36e:	85 c0                	test   eax,eax
c000d370:	74 18                	je     c000d38a <sendKeyboardToken(KeyboardToken)+0x3ed>
c000d372:	a1 a4 94 02 c0       	mov    eax,ds:0xc00294a4
c000d377:	0f b6 c0             	movzx  eax,al
c000d37a:	83 ec 0c             	sub    esp,0xc
c000d37d:	50                   	push   eax
c000d37e:	e8 3f fb ff ff       	call   c000cec2 <sendKeyToTerminal(unsigned char)>
c000d383:	83 c4 10             	add    esp,0x10
c000d386:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000d38a:	c7 05 a4 94 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00294a4,0x0
c000d394:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000d397:	83 f0 01             	xor    eax,0x1
c000d39a:	0f b6 c0             	movzx  eax,al
c000d39d:	85 c0                	test   eax,eax
c000d39f:	74 5a                	je     c000d3fb <sendKeyboardToken(KeyboardToken)+0x45e>
c000d3a1:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000d3a4:	83 f0 01             	xor    eax,0x1
c000d3a7:	0f b6 c0             	movzx  eax,al
c000d3aa:	85 c0                	test   eax,eax
c000d3ac:	74 4d                	je     c000d3fb <sendKeyboardToken(KeyboardToken)+0x45e>
c000d3ae:	a0 a0 91 02 c0       	mov    al,ds:0xc00291a0
c000d3b3:	83 f0 01             	xor    eax,0x1
c000d3b6:	0f b6 c0             	movzx  eax,al
c000d3b9:	85 c0                	test   eax,eax
c000d3bb:	74 3e                	je     c000d3fb <sendKeyboardToken(KeyboardToken)+0x45e>
c000d3bd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d3c0:	0f b7 c0             	movzx  eax,ax
c000d3c3:	83 f8 1f             	cmp    eax,0x1f
c000d3c6:	76 0b                	jbe    c000d3d3 <sendKeyboardToken(KeyboardToken)+0x436>
c000d3c8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d3cb:	0f b7 c0             	movzx  eax,ax
c000d3ce:	83 f8 7e             	cmp    eax,0x7e
c000d3d1:	76 16                	jbe    c000d3e9 <sendKeyboardToken(KeyboardToken)+0x44c>
c000d3d3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d3d6:	0f b7 c0             	movzx  eax,ax
c000d3d9:	83 f8 0a             	cmp    eax,0xa
c000d3dc:	74 0b                	je     c000d3e9 <sendKeyboardToken(KeyboardToken)+0x44c>
c000d3de:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d3e1:	0f b7 c0             	movzx  eax,ax
c000d3e4:	83 f8 08             	cmp    eax,0x8
c000d3e7:	75 12                	jne    c000d3fb <sendKeyboardToken(KeyboardToken)+0x45e>
c000d3e9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d3ec:	0f b6 c0             	movzx  eax,al
c000d3ef:	83 ec 0c             	sub    esp,0xc
c000d3f2:	50                   	push   eax
c000d3f3:	e8 ca fa ff ff       	call   c000cec2 <sendKeyToTerminal(unsigned char)>
c000d3f8:	83 c4 10             	add    esp,0x10
c000d3fb:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000d3fe:	83 f0 01             	xor    eax,0x1
c000d401:	0f b6 c0             	movzx  eax,al
c000d404:	85 c0                	test   eax,eax
c000d406:	74 5d                	je     c000d465 <sendKeyboardToken(KeyboardToken)+0x4c8>
c000d408:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000d40b:	83 f0 01             	xor    eax,0x1
c000d40e:	0f b6 c0             	movzx  eax,al
c000d411:	85 c0                	test   eax,eax
c000d413:	74 50                	je     c000d465 <sendKeyboardToken(KeyboardToken)+0x4c8>
c000d415:	a0 a0 91 02 c0       	mov    al,ds:0xc00291a0
c000d41a:	0f b6 c0             	movzx  eax,al
c000d41d:	85 c0                	test   eax,eax
c000d41f:	74 44                	je     c000d465 <sendKeyboardToken(KeyboardToken)+0x4c8>
c000d421:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d424:	0f b7 c0             	movzx  eax,ax
c000d427:	83 f8 3f             	cmp    eax,0x3f
c000d42a:	76 39                	jbe    c000d465 <sendKeyboardToken(KeyboardToken)+0x4c8>
c000d42c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d42f:	0f b7 c0             	movzx  eax,ax
c000d432:	83 f8 7f             	cmp    eax,0x7f
c000d435:	77 2e                	ja     c000d465 <sendKeyboardToken(KeyboardToken)+0x4c8>
c000d437:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d43a:	88 c2                	mov    dl,al
c000d43c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d43f:	0f b7 c0             	movzx  eax,ax
c000d442:	83 f8 5f             	cmp    eax,0x5f
c000d445:	76 04                	jbe    c000d44b <sendKeyboardToken(KeyboardToken)+0x4ae>
c000d447:	b0 20                	mov    al,0x20
c000d449:	eb 02                	jmp    c000d44d <sendKeyboardToken(KeyboardToken)+0x4b0>
c000d44b:	b0 00                	mov    al,0x0
c000d44d:	89 d1                	mov    ecx,edx
c000d44f:	29 c1                	sub    ecx,eax
c000d451:	89 c8                	mov    eax,ecx
c000d453:	83 e8 40             	sub    eax,0x40
c000d456:	0f b6 c0             	movzx  eax,al
c000d459:	83 ec 0c             	sub    esp,0xc
c000d45c:	50                   	push   eax
c000d45d:	e8 60 fa ff ff       	call   c000cec2 <sendKeyToTerminal(unsigned char)>
c000d462:	83 c4 10             	add    esp,0x10
c000d465:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d468:	0f b7 c0             	movzx  eax,ax
c000d46b:	3d 00 03 00 00       	cmp    eax,0x300
c000d470:	75 12                	jne    c000d484 <sendKeyboardToken(KeyboardToken)+0x4e7>
c000d472:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000d475:	83 f0 01             	xor    eax,0x1
c000d478:	0f b6 c0             	movzx  eax,al
c000d47b:	85 c0                	test   eax,eax
c000d47d:	74 05                	je     c000d484 <sendKeyboardToken(KeyboardToken)+0x4e7>
c000d47f:	e8 7f b0 ff ff       	call   c0008503 <doTerminalCycle()>
c000d484:	90                   	nop
c000d485:	c9                   	leave  
c000d486:	c3                   	ret    

c000d487 <clearInternalKeybuffer(VgaText*)>:
c000d487:	55                   	push   ebp
c000d488:	89 e5                	mov    ebp,esp
c000d48a:	83 ec 08             	sub    esp,0x8
c000d48d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d490:	05 02 01 00 00       	add    eax,0x102
c000d495:	83 ec 0c             	sub    esp,0xc
c000d498:	50                   	push   eax
c000d499:	e8 d2 30 ff ff       	call   c0000570 <strlen>
c000d49e:	83 c4 10             	add    esp,0x10
c000d4a1:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000d4a4:	81 c2 02 01 00 00    	add    edx,0x102
c000d4aa:	83 ec 04             	sub    esp,0x4
c000d4ad:	50                   	push   eax
c000d4ae:	6a 00                	push   0x0
c000d4b0:	52                   	push   edx
c000d4b1:	e8 3a 30 ff ff       	call   c00004f0 <memset>
c000d4b6:	83 c4 10             	add    esp,0x10
c000d4b9:	90                   	nop
c000d4ba:	c9                   	leave  
c000d4bb:	c3                   	ret    

c000d4bc <readKeyboard(VgaText*, char*, unsigned long)>:
c000d4bc:	55                   	push   ebp
c000d4bd:	89 e5                	mov    ebp,esp
c000d4bf:	83 ec 18             	sub    esp,0x18
c000d4c2:	a1 88 90 02 c0       	mov    eax,ds:0xc0029088
c000d4c7:	85 c0                	test   eax,eax
c000d4c9:	74 2a                	je     c000d4f5 <readKeyboard(VgaText*, char*, unsigned long)+0x39>
c000d4cb:	66 c7 45 ec 00 00    	mov    WORD PTR [ebp-0x14],0x0
c000d4d1:	8b 0d 88 90 02 c0    	mov    ecx,DWORD PTR ds:0xc0029088
c000d4d7:	83 ec 04             	sub    esp,0x4
c000d4da:	68 a0 90 02 c0       	push   0xc00290a0
c000d4df:	83 ec 08             	sub    esp,0x8
c000d4e2:	89 e2                	mov    edx,esp
c000d4e4:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c000d4e7:	89 02                	mov    DWORD PTR [edx],eax
c000d4e9:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000d4ec:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c000d4f0:	ff d1                	call   ecx
c000d4f2:	83 c4 10             	add    esp,0x10
c000d4f5:	fb                   	sti    
c000d4f6:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c000d4fd:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c000d501:	0f 84 0d 01 00 00    	je     c000d614 <readKeyboard(VgaText*, char*, unsigned long)+0x158>
c000d507:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d50a:	8a 80 02 01 00 00    	mov    al,BYTE PTR [eax+0x102]
c000d510:	0f be c0             	movsx  eax,al
c000d513:	85 c0                	test   eax,eax
c000d515:	75 2c                	jne    c000d543 <readKeyboard(VgaText*, char*, unsigned long)+0x87>
c000d517:	fa                   	cli    
c000d518:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c000d51d:	83 c0 01             	add    eax,0x1
c000d520:	a3 68 a4 02 c0       	mov    ds:0xc002a468,eax
c000d525:	e8 82 85 00 00       	call   c0015aac <schedule()>
c000d52a:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c000d52f:	83 e8 01             	sub    eax,0x1
c000d532:	a3 68 a4 02 c0       	mov    ds:0xc002a468,eax
c000d537:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c000d53c:	85 c0                	test   eax,eax
c000d53e:	75 c7                	jne    c000d507 <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c000d540:	fb                   	sti    
c000d541:	eb c4                	jmp    c000d507 <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c000d543:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000d546:	8d 50 01             	lea    edx,[eax+0x1]
c000d549:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000d54c:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000d54f:	8a 92 02 01 00 00    	mov    dl,BYTE PTR [edx+0x102]
c000d555:	88 10                	mov    BYTE PTR [eax],dl
c000d557:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d55a:	8a 80 02 01 00 00    	mov    al,BYTE PTR [eax+0x102]
c000d560:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c000d563:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000d567:	83 f8 03             	cmp    eax,0x3
c000d56a:	75 1e                	jne    c000d58a <readKeyboard(VgaText*, char*, unsigned long)+0xce>
c000d56c:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000d571:	8b 00                	mov    eax,DWORD PTR [eax]
c000d573:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000d576:	8b 80 20 07 00 00    	mov    eax,DWORD PTR [eax+0x720]
c000d57c:	83 ec 08             	sub    esp,0x8
c000d57f:	6a 02                	push   0x2
c000d581:	50                   	push   eax
c000d582:	e8 07 41 00 00       	call   c001168e <KeRaiseSignal(SigHandlerBlock*, int)>
c000d587:	83 c4 10             	add    esp,0x10
c000d58a:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000d58e:	83 f8 1c             	cmp    eax,0x1c
c000d591:	75 1e                	jne    c000d5b1 <readKeyboard(VgaText*, char*, unsigned long)+0xf5>
c000d593:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000d598:	8b 00                	mov    eax,DWORD PTR [eax]
c000d59a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000d59d:	8b 80 20 07 00 00    	mov    eax,DWORD PTR [eax+0x720]
c000d5a3:	83 ec 08             	sub    esp,0x8
c000d5a6:	6a 09                	push   0x9
c000d5a8:	50                   	push   eax
c000d5a9:	e8 e0 40 00 00       	call   c001168e <KeRaiseSignal(SigHandlerBlock*, int)>
c000d5ae:	83 c4 10             	add    esp,0x10
c000d5b1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d5b4:	05 02 01 00 00       	add    eax,0x102
c000d5b9:	83 ec 0c             	sub    esp,0xc
c000d5bc:	50                   	push   eax
c000d5bd:	e8 ae 2f ff ff       	call   c0000570 <strlen>
c000d5c2:	83 c4 10             	add    esp,0x10
c000d5c5:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000d5c8:	81 c2 02 01 00 00    	add    edx,0x102
c000d5ce:	8d 4a 01             	lea    ecx,[edx+0x1]
c000d5d1:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000d5d4:	81 c2 02 01 00 00    	add    edx,0x102
c000d5da:	83 ec 04             	sub    esp,0x4
c000d5dd:	50                   	push   eax
c000d5de:	51                   	push   ecx
c000d5df:	52                   	push   edx
c000d5e0:	e8 eb 2d ff ff       	call   c00003d0 <memmove>
c000d5e5:	83 c4 10             	add    esp,0x10
c000d5e8:	83 6d 10 01          	sub    DWORD PTR [ebp+0x10],0x1
c000d5ec:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
c000d5f0:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000d5f4:	83 f8 0a             	cmp    eax,0xa
c000d5f7:	74 16                	je     c000d60f <readKeyboard(VgaText*, char*, unsigned long)+0x153>
c000d5f9:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000d5fd:	83 f8 03             	cmp    eax,0x3
c000d600:	74 0d                	je     c000d60f <readKeyboard(VgaText*, char*, unsigned long)+0x153>
c000d602:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000d606:	83 f8 1c             	cmp    eax,0x1c
c000d609:	0f 85 ee fe ff ff    	jne    c000d4fd <readKeyboard(VgaText*, char*, unsigned long)+0x41>
c000d60f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000d612:	eb 03                	jmp    c000d617 <readKeyboard(VgaText*, char*, unsigned long)+0x15b>
c000d614:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000d617:	c9                   	leave  
c000d618:	c3                   	ret    
c000d619:	90                   	nop

c000d61a <Keyboard::Keyboard(char const*)>:
c000d61a:	83 ec 0c             	sub    esp,0xc
c000d61d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d621:	83 ec 08             	sub    esp,0x8
c000d624:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d628:	50                   	push   eax
c000d629:	e8 4c f1 ff ff       	call   c000c77a <Device::Device(char const*)>
c000d62e:	83 c4 10             	add    esp,0x10
c000d631:	ba 5c 15 02 c0       	mov    edx,0xc002155c
c000d636:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d63a:	89 10                	mov    DWORD PTR [eax],edx
c000d63c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d640:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c000d64a:	c6 05 84 90 02 c0 01 	mov    BYTE PTR ds:0xc0029084,0x1
c000d651:	90                   	nop
c000d652:	83 c4 0c             	add    esp,0xc
c000d655:	c3                   	ret    

c000d656 <Keyboard::~Keyboard()>:
c000d656:	83 ec 0c             	sub    esp,0xc
c000d659:	ba 5c 15 02 c0       	mov    edx,0xc002155c
c000d65e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d662:	89 10                	mov    DWORD PTR [eax],edx
c000d664:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d668:	83 ec 0c             	sub    esp,0xc
c000d66b:	50                   	push   eax
c000d66c:	e8 73 ee ff ff       	call   c000c4e4 <Device::~Device()>
c000d671:	83 c4 10             	add    esp,0x10
c000d674:	90                   	nop
c000d675:	83 c4 0c             	add    esp,0xc
c000d678:	c3                   	ret    
c000d679:	90                   	nop

c000d67a <Keyboard::~Keyboard()>:
c000d67a:	83 ec 0c             	sub    esp,0xc
c000d67d:	83 ec 0c             	sub    esp,0xc
c000d680:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d684:	e8 cd ff ff ff       	call   c000d656 <Keyboard::~Keyboard()>
c000d689:	83 c4 10             	add    esp,0x10
c000d68c:	83 ec 08             	sub    esp,0x8
c000d68f:	68 5c 01 00 00       	push   0x15c
c000d694:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d698:	e8 7b d1 ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c000d69d:	83 c4 10             	add    esp,0x10
c000d6a0:	83 c4 0c             	add    esp,0xc
c000d6a3:	c3                   	ret    

c000d6a4 <LogicalDisk::close(int, int, void*)>:
c000d6a4:	83 c8 ff             	or     eax,0xffffffff
c000d6a7:	c3                   	ret    

c000d6a8 <LogicalDisk::~LogicalDisk()>:
c000d6a8:	83 ec 0c             	sub    esp,0xc
c000d6ab:	ba d4 15 02 c0       	mov    edx,0xc00215d4
c000d6b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d6b4:	89 10                	mov    DWORD PTR [eax],edx
c000d6b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d6ba:	83 ec 0c             	sub    esp,0xc
c000d6bd:	50                   	push   eax
c000d6be:	e8 21 ee ff ff       	call   c000c4e4 <Device::~Device()>
c000d6c3:	83 c4 10             	add    esp,0x10
c000d6c6:	90                   	nop
c000d6c7:	83 c4 0c             	add    esp,0xc
c000d6ca:	c3                   	ret    
c000d6cb:	90                   	nop

c000d6cc <LogicalDisk::~LogicalDisk()>:
c000d6cc:	83 ec 0c             	sub    esp,0xc
c000d6cf:	83 ec 0c             	sub    esp,0xc
c000d6d2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d6d6:	e8 cd ff ff ff       	call   c000d6a8 <LogicalDisk::~LogicalDisk()>
c000d6db:	83 c4 10             	add    esp,0x10
c000d6de:	83 ec 08             	sub    esp,0x8
c000d6e1:	68 78 01 00 00       	push   0x178
c000d6e6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d6ea:	e8 29 d1 ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c000d6ef:	83 c4 10             	add    esp,0x10
c000d6f2:	83 c4 0c             	add    esp,0xc
c000d6f5:	c3                   	ret    

c000d6f6 <LogicalDisk::open(int, int, void*)>:
c000d6f6:	83 ec 18             	sub    esp,0x18
c000d6f9:	68 88 15 02 c0       	push   0xc0021588
c000d6fe:	e8 ea 3a 00 00       	call   c00111ed <KePanic(char const*)>
c000d703:	83 c8 ff             	or     eax,0xffffffff
c000d706:	83 c4 1c             	add    esp,0x1c
c000d709:	c3                   	ret    

c000d70a <LogicalDisk::absoluteToRelative(unsigned long long)>:
c000d70a:	53                   	push   ebx
c000d70b:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000d70f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d713:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d717:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c000d71d:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c000d723:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c000d729:	77 10                	ja     c000d73b <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c000d72b:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c000d731:	89 d3                	mov    ebx,edx
c000d733:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c000d739:	72 05                	jb     c000d740 <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c000d73b:	83 c8 ff             	or     eax,0xffffffff
c000d73e:	89 c2                	mov    edx,eax
c000d740:	5b                   	pop    ebx
c000d741:	c3                   	ret    

c000d742 <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c000d742:	56                   	push   esi
c000d743:	83 c8 ff             	or     eax,0xffffffff
c000d746:	53                   	push   ebx
c000d747:	89 c2                	mov    edx,eax
c000d749:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000d74d:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000d751:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000d755:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000d75b:	77 27                	ja     c000d784 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c000d75d:	89 d8                	mov    eax,ebx
c000d75f:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c000d765:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c000d76b:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000d770:	89 c2                	mov    edx,eax
c000d772:	73 10                	jae    c000d784 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c000d774:	89 c8                	mov    eax,ecx
c000d776:	89 da                	mov    edx,ebx
c000d778:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c000d77e:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c000d784:	5b                   	pop    ebx
c000d785:	5e                   	pop    esi
c000d786:	c3                   	ret    
c000d787:	90                   	nop

c000d788 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c000d788:	83 ec 1c             	sub    esp,0x1c
c000d78b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d78f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d793:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d797:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000d79b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000d79f:	89 04 24             	mov    DWORD PTR [esp],eax
c000d7a2:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000d7a6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000d7aa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d7ae:	83 ec 08             	sub    esp,0x8
c000d7b1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d7b5:	50                   	push   eax
c000d7b6:	e8 bf ef ff ff       	call   c000c77a <Device::Device(char const*)>
c000d7bb:	83 c4 10             	add    esp,0x10
c000d7be:	ba d4 15 02 c0       	mov    edx,0xc00215d4
c000d7c3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d7c7:	89 10                	mov    DWORD PTR [eax],edx
c000d7c9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d7cd:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000d7d4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d7d8:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c000d7df:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d7e3:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000d7ea:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d7ee:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c000d7f8:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000d7fc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d800:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d804:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c000d80a:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c000d810:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000d814:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000d817:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000d81b:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c000d821:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c000d827:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d82b:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000d82f:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c000d835:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d839:	c7 80 74 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x174],0x0
c000d843:	90                   	nop
c000d844:	83 c4 1c             	add    esp,0x1c
c000d847:	c3                   	ret    

c000d848 <LogicalDisk::assignDriveLetter()>:
c000d848:	55                   	push   ebp
c000d849:	57                   	push   edi
c000d84a:	56                   	push   esi
c000d84b:	53                   	push   ebx
c000d84c:	83 ec 14             	sub    esp,0x14
c000d84f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000d853:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c000d859:	b0 41                	mov    al,0x41
c000d85b:	8a 93 69 01 00 00    	mov    dl,BYTE PTR [ebx+0x169]
c000d861:	84 d2                	test   dl,dl
c000d863:	75 02                	jne    c000d867 <LogicalDisk::assignDriveLetter()+0x1f>
c000d865:	b0 43                	mov    al,0x43
c000d867:	8b 3d c0 94 02 c0    	mov    edi,DWORD PTR ds:0xc00294c0
c000d86d:	0f b6 ca             	movzx  ecx,dl
c000d870:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c000d874:	0f be e8             	movsx  ebp,al
c000d877:	8b 3d c4 94 02 c0    	mov    edi,DWORD PTR ds:0xc00294c4
c000d87d:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000d881:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000d885:	3c 43                	cmp    al,0x43
c000d887:	75 10                	jne    c000d899 <LogicalDisk::assignDriveLetter()+0x51>
c000d889:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c000d890:	75 5a                	jne    c000d8ec <LogicalDisk::assignDriveLetter()+0xa4>
c000d892:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000d897:	75 53                	jne    c000d8ec <LogicalDisk::assignDriveLetter()+0xa4>
c000d899:	8d 75 bf             	lea    esi,[ebp-0x41]
c000d89c:	ba 01 00 00 00       	mov    edx,0x1
c000d8a1:	89 34 24             	mov    DWORD PTR [esp],esi
c000d8a4:	8a 0c 24             	mov    cl,BYTE PTR [esp]
c000d8a7:	d3 e2                	shl    edx,cl
c000d8a9:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000d8ad:	89 d7                	mov    edi,edx
c000d8af:	89 d6                	mov    esi,edx
c000d8b1:	c1 ff 1f             	sar    edi,0x1f
c000d8b4:	23 54 24 04          	and    edx,DWORD PTR [esp+0x4]
c000d8b8:	21 f9                	and    ecx,edi
c000d8ba:	09 d1                	or     ecx,edx
c000d8bc:	75 2e                	jne    c000d8ec <LogicalDisk::assignDriveLetter()+0xa4>
c000d8be:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c000d8c2:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000d8c6:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c000d8cc:	09 f2                	or     edx,esi
c000d8ce:	8b 34 24             	mov    esi,DWORD PTR [esp]
c000d8d1:	89 15 c0 94 02 c0    	mov    DWORD PTR ds:0xc00294c0,edx
c000d8d7:	89 1c b5 e0 94 02 c0 	mov    DWORD PTR [esi*4-0x3ffd6b20],ebx
c000d8de:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000d8e2:	09 fa                	or     edx,edi
c000d8e4:	89 15 c4 94 02 c0    	mov    DWORD PTR ds:0xc00294c4,edx
c000d8ea:	eb 0d                	jmp    c000d8f9 <LogicalDisk::assignDriveLetter()+0xb1>
c000d8ec:	8d 50 01             	lea    edx,[eax+0x1]
c000d8ef:	45                   	inc    ebp
c000d8f0:	88 d0                	mov    al,dl
c000d8f2:	80 fa 5b             	cmp    dl,0x5b
c000d8f5:	75 8e                	jne    c000d885 <LogicalDisk::assignDriveLetter()+0x3d>
c000d8f7:	31 c0                	xor    eax,eax
c000d8f9:	83 c4 14             	add    esp,0x14
c000d8fc:	5b                   	pop    ebx
c000d8fd:	5e                   	pop    esi
c000d8fe:	5f                   	pop    edi
c000d8ff:	5d                   	pop    ebp
c000d900:	c3                   	ret    
c000d901:	90                   	nop

c000d902 <LogicalDisk::mount()>:
c000d902:	56                   	push   esi
c000d903:	53                   	push   ebx
c000d904:	53                   	push   ebx
c000d905:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000d909:	8b 1d 64 70 02 c0    	mov    ebx,DWORD PTR ds:0xc0027064
c000d90f:	c7 86 74 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x174],0x0
c000d919:	85 db                	test   ebx,ebx
c000d91b:	74 27                	je     c000d944 <LogicalDisk::mount()+0x42>
c000d91d:	51                   	push   ecx
c000d91e:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c000d925:	8b 13                	mov    edx,DWORD PTR [ebx]
c000d927:	83 e8 41             	sub    eax,0x41
c000d92a:	50                   	push   eax
c000d92b:	56                   	push   esi
c000d92c:	53                   	push   ebx
c000d92d:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000d930:	83 c4 10             	add    esp,0x10
c000d933:	84 c0                	test   al,al
c000d935:	74 08                	je     c000d93f <LogicalDisk::mount()+0x3d>
c000d937:	89 9e 74 01 00 00    	mov    DWORD PTR [esi+0x174],ebx
c000d93d:	eb 07                	jmp    c000d946 <LogicalDisk::mount()+0x44>
c000d93f:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c000d942:	eb d5                	jmp    c000d919 <LogicalDisk::mount()+0x17>
c000d944:	31 c0                	xor    eax,eax
c000d946:	5a                   	pop    edx
c000d947:	5b                   	pop    ebx
c000d948:	5e                   	pop    esi
c000d949:	c3                   	ret    

c000d94a <LogicalDisk::unmount()>:
c000d94a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d94e:	c7 80 74 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x174],0x0
c000d958:	c3                   	ret    
c000d959:	90                   	nop

c000d95a <LogicalDisk::eject()>:
c000d95a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d95e:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c000d964:	8b 10                	mov    edx,DWORD PTR [eax]
c000d966:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000d96a:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
c000d96d:	90                   	nop

c000d96e <LogicalDisk::unassignDriveLetter()>:
c000d96e:	57                   	push   edi
c000d96f:	56                   	push   esi
c000d970:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d974:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c000d97b:	85 c9                	test   ecx,ecx
c000d97d:	75 0f                	jne    c000d98e <LogicalDisk::unassignDriveLetter()+0x20>
c000d97f:	c7 44 24 0c ac 15 02 c0 	mov    DWORD PTR [esp+0xc],0xc00215ac
c000d987:	5e                   	pop    esi
c000d988:	5f                   	pop    edi
c000d989:	e9 5f 38 00 00       	jmp    c00111ed <KePanic(char const*)>
c000d98e:	83 e9 41             	sub    ecx,0x41
c000d991:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c000d998:	b8 01 00 00 00       	mov    eax,0x1
c000d99d:	c7 04 8d e0 94 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffd6b20],0x0
c000d9a8:	d3 e0                	shl    eax,cl
c000d9aa:	89 c7                	mov    edi,eax
c000d9ac:	f7 d0                	not    eax
c000d9ae:	c1 ff 1f             	sar    edi,0x1f
c000d9b1:	21 05 c0 94 02 c0    	and    DWORD PTR ds:0xc00294c0,eax
c000d9b7:	89 fe                	mov    esi,edi
c000d9b9:	f7 d6                	not    esi
c000d9bb:	21 35 c4 94 02 c0    	and    DWORD PTR ds:0xc00294c4,esi
c000d9c1:	5e                   	pop    esi
c000d9c2:	5f                   	pop    edi
c000d9c3:	c3                   	ret    

c000d9c4 <LogicalDisk::read(unsigned long long, int, void*)>:
c000d9c4:	57                   	push   edi
c000d9c5:	56                   	push   esi
c000d9c6:	53                   	push   ebx
c000d9c7:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000d9cb:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000d9cf:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000d9d3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000d9d7:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000d9dd:	77 41                	ja     c000da20 <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c000d9df:	99                   	cdq    
c000d9e0:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000d9e6:	01 c8                	add    eax,ecx
c000d9e8:	11 da                	adc    edx,ebx
c000d9ea:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000d9f0:	19 d7                	sbb    edi,edx
c000d9f2:	72 33                	jb     c000da27 <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c000d9f4:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000d9fa:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000da00:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000da04:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000da08:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000da0e:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000da14:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000da18:	5b                   	pop    ebx
c000da19:	5e                   	pop    esi
c000da1a:	5f                   	pop    edi
c000da1b:	e9 c6 0a 00 00       	jmp    c000e4e6 <VCache::read(unsigned long long, int, void*)>
c000da20:	b8 05 00 00 00       	mov    eax,0x5
c000da25:	eb 05                	jmp    c000da2c <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c000da27:	b8 07 00 00 00       	mov    eax,0x7
c000da2c:	5b                   	pop    ebx
c000da2d:	5e                   	pop    esi
c000da2e:	5f                   	pop    edi
c000da2f:	c3                   	ret    

c000da30 <LogicalDisk::write(unsigned long long, int, void*)>:
c000da30:	57                   	push   edi
c000da31:	56                   	push   esi
c000da32:	53                   	push   ebx
c000da33:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000da37:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000da3b:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000da3f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000da43:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000da49:	77 41                	ja     c000da8c <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c000da4b:	99                   	cdq    
c000da4c:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000da52:	01 c8                	add    eax,ecx
c000da54:	11 da                	adc    edx,ebx
c000da56:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000da5c:	19 d7                	sbb    edi,edx
c000da5e:	72 33                	jb     c000da93 <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c000da60:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000da66:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000da6c:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000da70:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000da74:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000da7a:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000da80:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000da84:	5b                   	pop    ebx
c000da85:	5e                   	pop    esi
c000da86:	5f                   	pop    edi
c000da87:	e9 6c 09 00 00       	jmp    c000e3f8 <VCache::write(unsigned long long, int, void*)>
c000da8c:	b8 05 00 00 00       	mov    eax,0x5
c000da91:	eb 05                	jmp    c000da98 <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c000da93:	b8 07 00 00 00       	mov    eax,0x7
c000da98:	5b                   	pop    ebx
c000da99:	5e                   	pop    esi
c000da9a:	5f                   	pop    edi
c000da9b:	c3                   	ret    

c000da9c <Mouse::Mouse(char const*)>:
c000da9c:	83 ec 0c             	sub    esp,0xc
c000da9f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000daa3:	83 ec 08             	sub    esp,0x8
c000daa6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000daaa:	50                   	push   eax
c000daab:	e8 ca ec ff ff       	call   c000c77a <Device::Device(char const*)>
c000dab0:	83 c4 10             	add    esp,0x10
c000dab3:	ba 00 16 02 c0       	mov    edx,0xc0021600
c000dab8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dabc:	89 10                	mov    DWORD PTR [eax],edx
c000dabe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dac2:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c000dacc:	90                   	nop
c000dacd:	83 c4 0c             	add    esp,0xc
c000dad0:	c3                   	ret    
c000dad1:	90                   	nop
c000dad2:	66 90                	xchg   ax,ax

c000dad4 <Mouse::~Mouse()>:
c000dad4:	83 ec 0c             	sub    esp,0xc
c000dad7:	ba 00 16 02 c0       	mov    edx,0xc0021600
c000dadc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dae0:	89 10                	mov    DWORD PTR [eax],edx
c000dae2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dae6:	83 ec 0c             	sub    esp,0xc
c000dae9:	50                   	push   eax
c000daea:	e8 f5 e9 ff ff       	call   c000c4e4 <Device::~Device()>
c000daef:	83 c4 10             	add    esp,0x10
c000daf2:	90                   	nop
c000daf3:	83 c4 0c             	add    esp,0xc
c000daf6:	c3                   	ret    
c000daf7:	90                   	nop

c000daf8 <Mouse::~Mouse()>:
c000daf8:	83 ec 0c             	sub    esp,0xc
c000dafb:	83 ec 0c             	sub    esp,0xc
c000dafe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db02:	e8 cd ff ff ff       	call   c000dad4 <Mouse::~Mouse()>
c000db07:	83 c4 10             	add    esp,0x10
c000db0a:	83 ec 08             	sub    esp,0x8
c000db0d:	68 58 01 00 00       	push   0x158
c000db12:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db16:	e8 fd cc ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c000db1b:	83 c4 10             	add    esp,0x10
c000db1e:	83 c4 0c             	add    esp,0xc
c000db21:	c3                   	ret    

c000db22 <NIC::getMAC()>:
c000db22:	31 c0                	xor    eax,eax
c000db24:	31 d2                	xor    edx,edx
c000db26:	c3                   	ret    
c000db27:	90                   	nop

c000db28 <NIC::write(int, unsigned char*, int*)>:
c000db28:	b8 01 00 00 00       	mov    eax,0x1
c000db2d:	c3                   	ret    

c000db2e <NIC::NIC(char const*)>:
c000db2e:	83 ec 0c             	sub    esp,0xc
c000db31:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000db35:	83 ec 08             	sub    esp,0x8
c000db38:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db3c:	50                   	push   eax
c000db3d:	e8 38 ec ff ff       	call   c000c77a <Device::Device(char const*)>
c000db42:	83 c4 10             	add    esp,0x10
c000db45:	ba 2c 16 02 c0       	mov    edx,0xc002162c
c000db4a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000db4e:	89 10                	mov    DWORD PTR [eax],edx
c000db50:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000db54:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c000db5e:	90                   	nop
c000db5f:	83 c4 0c             	add    esp,0xc
c000db62:	c3                   	ret    
c000db63:	90                   	nop

c000db64 <NIC::~NIC()>:
c000db64:	83 ec 0c             	sub    esp,0xc
c000db67:	ba 2c 16 02 c0       	mov    edx,0xc002162c
c000db6c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000db70:	89 10                	mov    DWORD PTR [eax],edx
c000db72:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000db76:	83 ec 0c             	sub    esp,0xc
c000db79:	50                   	push   eax
c000db7a:	e8 65 e9 ff ff       	call   c000c4e4 <Device::~Device()>
c000db7f:	83 c4 10             	add    esp,0x10
c000db82:	90                   	nop
c000db83:	83 c4 0c             	add    esp,0xc
c000db86:	c3                   	ret    
c000db87:	90                   	nop

c000db88 <NIC::~NIC()>:
c000db88:	83 ec 0c             	sub    esp,0xc
c000db8b:	83 ec 0c             	sub    esp,0xc
c000db8e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db92:	e8 cd ff ff ff       	call   c000db64 <NIC::~NIC()>
c000db97:	83 c4 10             	add    esp,0x10
c000db9a:	83 ec 08             	sub    esp,0x8
c000db9d:	68 58 01 00 00       	push   0x158
c000dba2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dba6:	e8 6d cc ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c000dbab:	83 c4 10             	add    esp,0x10
c000dbae:	83 c4 0c             	add    esp,0xc
c000dbb1:	c3                   	ret    

c000dbb2 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c000dbb2:	55                   	push   ebp
c000dbb3:	57                   	push   edi
c000dbb4:	56                   	push   esi
c000dbb5:	53                   	push   ebx
c000dbb6:	81 ec 28 01 00 00    	sub    esp,0x128
c000dbbc:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c000dbc3:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c000dbca:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c000dbd1:	8b 94 24 44 01 00 00 	mov    edx,DWORD PTR [esp+0x144]
c000dbd8:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000dbdc:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000dbe0:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000dbe7:	e8 8a ec ff ff       	call   c000c876 <Device::getName()>
c000dbec:	5a                   	pop    edx
c000dbed:	59                   	pop    ecx
c000dbee:	50                   	push   eax
c000dbef:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c000dbf3:	55                   	push   ebp
c000dbf4:	e8 47 2a ff ff       	call   c0000640 <strcpy>
c000dbf9:	5b                   	pop    ebx
c000dbfa:	58                   	pop    eax
c000dbfb:	68 58 16 02 c0       	push   0xc0021658
c000dc00:	55                   	push   ebp
c000dc01:	e8 3a 2c ff ff       	call   c0000840 <strcat>
c000dc06:	c7 04 24 78 01 00 00 	mov    DWORD PTR [esp],0x178
c000dc0d:	e8 a4 9e ff ff       	call   c0007ab6 <malloc>
c000dc12:	83 c4 0c             	add    esp,0xc
c000dc15:	89 c3                	mov    ebx,eax
c000dc17:	57                   	push   edi
c000dc18:	56                   	push   esi
c000dc19:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000dc1d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000dc21:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c000dc28:	55                   	push   ebp
c000dc29:	50                   	push   eax
c000dc2a:	e8 59 fb ff ff       	call   c000d788 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c000dc2f:	83 c4 14             	add    esp,0x14
c000dc32:	53                   	push   ebx
c000dc33:	e8 10 fc ff ff       	call   c000d848 <LogicalDisk::assignDriveLetter()>
c000dc38:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000dc3b:	e8 c2 fc ff ff       	call   c000d902 <LogicalDisk::mount()>
c000dc40:	58                   	pop    eax
c000dc41:	5a                   	pop    edx
c000dc42:	53                   	push   ebx
c000dc43:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000dc4a:	e8 93 e9 ff ff       	call   c000c5e2 <Device::addChild(Device*)>
c000dc4f:	81 c4 2c 01 00 00    	add    esp,0x12c
c000dc55:	5b                   	pop    ebx
c000dc56:	5e                   	pop    esi
c000dc57:	5f                   	pop    edi
c000dc58:	5d                   	pop    ebp
c000dc59:	c3                   	ret    

c000dc5a <createPartitionsForDisk(PhysicalDisk*)>:
c000dc5a:	55                   	push   ebp
c000dc5b:	57                   	push   edi
c000dc5c:	56                   	push   esi
c000dc5d:	53                   	push   ebx
c000dc5e:	81 ec 5c 02 00 00    	sub    esp,0x25c
c000dc64:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c000dc6b:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c000dc71:	3d 00 02 00 00       	cmp    eax,0x200
c000dc76:	74 27                	je     c000dc9f <createPartitionsForDisk(PhysicalDisk*)+0x45>
c000dc78:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c000dc7e:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c000dc84:	83 ec 10             	sub    esp,0x10
c000dc87:	0f a4 f7 0a          	shld   edi,esi,0xa
c000dc8b:	99                   	cdq    
c000dc8c:	c1 e6 0a             	shl    esi,0xa
c000dc8f:	52                   	push   edx
c000dc90:	89 fd                	mov    ebp,edi
c000dc92:	50                   	push   eax
c000dc93:	55                   	push   ebp
c000dc94:	56                   	push   esi
c000dc95:	e8 86 14 01 00       	call   c001f120 <__udivdi3>
c000dc9a:	e9 b9 00 00 00       	jmp    c000dd58 <createPartitionsForDisk(PhysicalDisk*)+0xfe>
c000dc9f:	83 ec 0c             	sub    esp,0xc
c000dca2:	8b 03                	mov    eax,DWORD PTR [ebx]
c000dca4:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c000dca8:	56                   	push   esi
c000dca9:	6a 01                	push   0x1
c000dcab:	6a 00                	push   0x0
c000dcad:	6a 00                	push   0x0
c000dcaf:	53                   	push   ebx
c000dcb0:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000dcb3:	83 c4 20             	add    esp,0x20
c000dcb6:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c000dcbe:	75 0a                	jne    c000dcca <createPartitionsForDisk(PhysicalDisk*)+0x70>
c000dcc0:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c000dcc8:	74 2c                	je     c000dcf6 <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c000dcca:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000dcd0:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000dcd6:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000dcdc:	83 ec 10             	sub    esp,0x10
c000dcdf:	0f a4 c2 0a          	shld   edx,eax,0xa
c000dce3:	89 f7                	mov    edi,esi
c000dce5:	c1 e0 0a             	shl    eax,0xa
c000dce8:	c1 ff 1f             	sar    edi,0x1f
c000dceb:	57                   	push   edi
c000dcec:	56                   	push   esi
c000dced:	52                   	push   edx
c000dcee:	50                   	push   eax
c000dcef:	e8 2c 14 01 00       	call   c001f120 <__udivdi3>
c000dcf4:	eb 62                	jmp    c000dd58 <createPartitionsForDisk(PhysicalDisk*)+0xfe>
c000dcf6:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c000dcfd:	8a 94 24 1e 02 00 00 	mov    dl,BYTE PTR [esp+0x21e]
c000dd04:	89 cf                	mov    edi,ecx
c000dd06:	83 e2 7f             	and    edx,0x7f
c000dd09:	83 e7 7f             	and    edi,0x7f
c000dd0c:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c000dd13:	8d 0c 17             	lea    ecx,[edi+edx*1]
c000dd16:	83 e0 7f             	and    eax,0x7f
c000dd19:	8d 14 01             	lea    edx,[ecx+eax*1]
c000dd1c:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c000dd23:	83 e0 7f             	and    eax,0x7f
c000dd26:	01 d0                	add    eax,edx
c000dd28:	89 c5                	mov    ebp,eax
c000dd2a:	84 c0                	test   al,al
c000dd2c:	74 41                	je     c000dd6f <createPartitionsForDisk(PhysicalDisk*)+0x115>
c000dd2e:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000dd34:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000dd3a:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000dd40:	83 ec 10             	sub    esp,0x10
c000dd43:	0f a4 c2 0a          	shld   edx,eax,0xa
c000dd47:	89 f7                	mov    edi,esi
c000dd49:	c1 e0 0a             	shl    eax,0xa
c000dd4c:	c1 ff 1f             	sar    edi,0x1f
c000dd4f:	57                   	push   edi
c000dd50:	56                   	push   esi
c000dd51:	52                   	push   edx
c000dd52:	50                   	push   eax
c000dd53:	e8 c8 13 01 00       	call   c001f120 <__udivdi3>
c000dd58:	83 c4 14             	add    esp,0x14
c000dd5b:	52                   	push   edx
c000dd5c:	50                   	push   eax
c000dd5d:	6a 00                	push   0x0
c000dd5f:	6a 00                	push   0x0
c000dd61:	53                   	push   ebx
c000dd62:	e8 4b fe ff ff       	call   c000dbb2 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000dd67:	83 c4 20             	add    esp,0x20
c000dd6a:	e9 73 01 00 00       	jmp    c000dee2 <createPartitionsForDisk(PhysicalDisk*)+0x288>
c000dd6f:	89 f0                	mov    eax,esi
c000dd71:	31 c9                	xor    ecx,ecx
c000dd73:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c000dd7a:	75 02                	jne    c000dd7e <createPartitionsForDisk(PhysicalDisk*)+0x124>
c000dd7c:	89 cd                	mov    ebp,ecx
c000dd7e:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c000dd85:	0f b6 b0 c8 01 00 00 	movzx  esi,BYTE PTR [eax+0x1c8]
c000dd8c:	c1 e2 08             	shl    edx,0x8
c000dd8f:	c1 e6 10             	shl    esi,0x10
c000dd92:	c7 44 cc 14 00 00 00 00 	mov    DWORD PTR [esp+ecx*8+0x14],0x0
c000dd9a:	09 f2                	or     edx,esi
c000dd9c:	c7 44 cc 34 00 00 00 00 	mov    DWORD PTR [esp+ecx*8+0x34],0x0
c000dda4:	0f b6 b0 c6 01 00 00 	movzx  esi,BYTE PTR [eax+0x1c6]
c000ddab:	83 c0 10             	add    eax,0x10
c000ddae:	09 f2                	or     edx,esi
c000ddb0:	0f b6 b0 b9 01 00 00 	movzx  esi,BYTE PTR [eax+0x1b9]
c000ddb7:	c1 e6 18             	shl    esi,0x18
c000ddba:	09 f2                	or     edx,esi
c000ddbc:	0f b6 b0 bc 01 00 00 	movzx  esi,BYTE PTR [eax+0x1bc]
c000ddc3:	89 54 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],edx
c000ddc7:	c1 e6 10             	shl    esi,0x10
c000ddca:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c000ddd1:	c1 e2 08             	shl    edx,0x8
c000ddd4:	09 f2                	or     edx,esi
c000ddd6:	0f b6 b0 ba 01 00 00 	movzx  esi,BYTE PTR [eax+0x1ba]
c000dddd:	09 f2                	or     edx,esi
c000dddf:	0f b6 b0 bd 01 00 00 	movzx  esi,BYTE PTR [eax+0x1bd]
c000dde6:	c1 e6 18             	shl    esi,0x18
c000dde9:	09 f2                	or     edx,esi
c000ddeb:	89 54 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],edx
c000ddef:	41                   	inc    ecx
c000ddf0:	83 f9 04             	cmp    ecx,0x4
c000ddf3:	0f 85 7a ff ff ff    	jne    c000dd73 <createPartitionsForDisk(PhysicalDisk*)+0x119>
c000ddf9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ddfd:	83 f0 01             	xor    eax,0x1
c000de00:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000de04:	75 4f                	jne    c000de55 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c000de06:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000de0a:	83 f0 01             	xor    eax,0x1
c000de0d:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c000de11:	75 42                	jne    c000de55 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c000de13:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000de1b:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000de23:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000de29:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000de2f:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000de35:	0f a4 c2 0a          	shld   edx,eax,0xa
c000de39:	89 f7                	mov    edi,esi
c000de3b:	c1 e0 0a             	shl    eax,0xa
c000de3e:	c1 ff 1f             	sar    edi,0x1f
c000de41:	57                   	push   edi
c000de42:	56                   	push   esi
c000de43:	52                   	push   edx
c000de44:	50                   	push   eax
c000de45:	e8 d6 12 01 00       	call   c001f120 <__udivdi3>
c000de4a:	83 c4 10             	add    esp,0x10
c000de4d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000de51:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000de55:	89 e8                	mov    eax,ebp
c000de57:	0f b6 e8             	movzx  ebp,al
c000de5a:	85 ed                	test   ebp,ebp
c000de5c:	74 50                	je     c000deae <createPartitionsForDisk(PhysicalDisk*)+0x254>
c000de5e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000de62:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000de66:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000de6a:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000de6e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000de72:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000de76:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c000de7a:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c000de7e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000de82:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000de86:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000de8a:	89 74 ec 10          	mov    DWORD PTR [esp+ebp*8+0x10],esi
c000de8e:	89 7c ec 14          	mov    DWORD PTR [esp+ebp*8+0x14],edi
c000de92:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c000de96:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c000de9a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000de9e:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c000dea2:	89 7c 24 34          	mov    DWORD PTR [esp+0x34],edi
c000dea6:	89 44 ec 30          	mov    DWORD PTR [esp+ebp*8+0x30],eax
c000deaa:	89 54 ec 34          	mov    DWORD PTR [esp+ebp*8+0x34],edx
c000deae:	31 ed                	xor    ebp,ebp
c000deb0:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c000deb4:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c000deb8:	89 f8                	mov    eax,edi
c000deba:	09 f0                	or     eax,esi
c000debc:	74 1e                	je     c000dedc <createPartitionsForDisk(PhysicalDisk*)+0x282>
c000debe:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c000dec2:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c000dec6:	89 d1                	mov    ecx,edx
c000dec8:	09 c1                	or     ecx,eax
c000deca:	74 10                	je     c000dedc <createPartitionsForDisk(PhysicalDisk*)+0x282>
c000decc:	83 ec 0c             	sub    esp,0xc
c000decf:	57                   	push   edi
c000ded0:	56                   	push   esi
c000ded1:	52                   	push   edx
c000ded2:	50                   	push   eax
c000ded3:	53                   	push   ebx
c000ded4:	e8 d9 fc ff ff       	call   c000dbb2 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000ded9:	83 c4 20             	add    esp,0x20
c000dedc:	45                   	inc    ebp
c000dedd:	83 fd 04             	cmp    ebp,0x4
c000dee0:	75 ce                	jne    c000deb0 <createPartitionsForDisk(PhysicalDisk*)+0x256>
c000dee2:	81 c4 5c 02 00 00    	add    esp,0x25c
c000dee8:	5b                   	pop    ebx
c000dee9:	5e                   	pop    esi
c000deea:	5f                   	pop    edi
c000deeb:	5d                   	pop    ebp
c000deec:	c3                   	ret    
c000deed:	66 90                	xchg   ax,ax
c000deef:	90                   	nop

c000def0 <Serial::Serial(char const*)>:
c000def0:	83 ec 0c             	sub    esp,0xc
c000def3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000def7:	83 ec 08             	sub    esp,0x8
c000defa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000defe:	50                   	push   eax
c000deff:	e8 76 e8 ff ff       	call   c000c77a <Device::Device(char const*)>
c000df04:	83 c4 10             	add    esp,0x10
c000df07:	ba 6c 16 02 c0       	mov    edx,0xc002166c
c000df0c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df10:	89 10                	mov    DWORD PTR [eax],edx
c000df12:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df16:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c000df20:	90                   	nop
c000df21:	83 c4 0c             	add    esp,0xc
c000df24:	c3                   	ret    
c000df25:	90                   	nop
c000df26:	66 90                	xchg   ax,ax

c000df28 <Serial::~Serial()>:
c000df28:	83 ec 0c             	sub    esp,0xc
c000df2b:	ba 6c 16 02 c0       	mov    edx,0xc002166c
c000df30:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df34:	89 10                	mov    DWORD PTR [eax],edx
c000df36:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df3a:	83 ec 0c             	sub    esp,0xc
c000df3d:	50                   	push   eax
c000df3e:	e8 a1 e5 ff ff       	call   c000c4e4 <Device::~Device()>
c000df43:	83 c4 10             	add    esp,0x10
c000df46:	90                   	nop
c000df47:	83 c4 0c             	add    esp,0xc
c000df4a:	c3                   	ret    
c000df4b:	90                   	nop

c000df4c <Serial::~Serial()>:
c000df4c:	83 ec 0c             	sub    esp,0xc
c000df4f:	83 ec 0c             	sub    esp,0xc
c000df52:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000df56:	e8 cd ff ff ff       	call   c000df28 <Serial::~Serial()>
c000df5b:	83 c4 10             	add    esp,0x10
c000df5e:	83 ec 08             	sub    esp,0x8
c000df61:	68 58 01 00 00       	push   0x158
c000df66:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000df6a:	e8 a9 c8 ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c000df6f:	83 c4 10             	add    esp,0x10
c000df72:	83 c4 0c             	add    esp,0xc
c000df75:	c3                   	ret    
c000df76:	66 90                	xchg   ax,ax

c000df78 <Timer::Timer(char const*)>:
c000df78:	83 ec 0c             	sub    esp,0xc
c000df7b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df7f:	83 ec 08             	sub    esp,0x8
c000df82:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000df86:	50                   	push   eax
c000df87:	e8 ee e7 ff ff       	call   c000c77a <Device::Device(char const*)>
c000df8c:	83 c4 10             	add    esp,0x10
c000df8f:	ba b0 16 02 c0       	mov    edx,0xc00216b0
c000df94:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df98:	89 10                	mov    DWORD PTR [eax],edx
c000df9a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df9e:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c000dfa8:	90                   	nop
c000dfa9:	83 c4 0c             	add    esp,0xc
c000dfac:	c3                   	ret    
c000dfad:	90                   	nop
c000dfae:	66 90                	xchg   ax,ax

c000dfb0 <Timer::~Timer()>:
c000dfb0:	83 ec 0c             	sub    esp,0xc
c000dfb3:	ba b0 16 02 c0       	mov    edx,0xc00216b0
c000dfb8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dfbc:	89 10                	mov    DWORD PTR [eax],edx
c000dfbe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dfc2:	83 ec 0c             	sub    esp,0xc
c000dfc5:	50                   	push   eax
c000dfc6:	e8 19 e5 ff ff       	call   c000c4e4 <Device::~Device()>
c000dfcb:	83 c4 10             	add    esp,0x10
c000dfce:	90                   	nop
c000dfcf:	83 c4 0c             	add    esp,0xc
c000dfd2:	c3                   	ret    
c000dfd3:	90                   	nop

c000dfd4 <Timer::~Timer()>:
c000dfd4:	83 ec 0c             	sub    esp,0xc
c000dfd7:	83 ec 0c             	sub    esp,0xc
c000dfda:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dfde:	e8 cd ff ff ff       	call   c000dfb0 <Timer::~Timer()>
c000dfe3:	83 c4 10             	add    esp,0x10
c000dfe6:	83 ec 08             	sub    esp,0x8
c000dfe9:	68 5c 01 00 00       	push   0x15c
c000dfee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dff2:	e8 21 c8 ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c000dff7:	83 c4 10             	add    esp,0x10
c000dffa:	83 c4 0c             	add    esp,0xc
c000dffd:	c3                   	ret    

c000dffe <Timer::read()>:
c000dffe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e002:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000e008:	c3                   	ret    

c000e009 <setupTimer(int)>:
c000e009:	53                   	push   ebx
c000e00a:	83 ec 14             	sub    esp,0x14
c000e00d:	68 5c 01 00 00       	push   0x15c
c000e012:	e8 9f 9a ff ff       	call   c0007ab6 <malloc>
c000e017:	89 04 24             	mov    DWORD PTR [esp],eax
c000e01a:	89 c3                	mov    ebx,eax
c000e01c:	e8 67 09 01 00       	call   c001e988 <PIT::PIT()>
c000e021:	58                   	pop    eax
c000e022:	5a                   	pop    edx
c000e023:	53                   	push   ebx
c000e024:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c000e02a:	e8 b3 e5 ff ff       	call   c000c5e2 <Device::addChild(Device*)>
c000e02f:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e031:	6a 00                	push   0x0
c000e033:	6a 00                	push   0x0
c000e035:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000e039:	53                   	push   ebx
c000e03a:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000e03d:	89 d8                	mov    eax,ebx
c000e03f:	83 c4 28             	add    esp,0x28
c000e042:	5b                   	pop    ebx
c000e043:	c3                   	ret    

c000e044 <timerHandler(unsigned int)>:
c000e044:	56                   	push   esi
c000e045:	53                   	push   ebx
c000e046:	51                   	push   ecx
c000e047:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e04b:	01 05 4c 95 02 c0    	add    DWORD PTR ds:0xc002954c,eax
c000e051:	80 3d bd 5e 02 c0 00 	cmp    BYTE PTR ds:0xc0025ebd,0x0
c000e058:	0f 84 4a 01 00 00    	je     c000e1a8 <timerHandler(unsigned int)+0x164>
c000e05e:	fa                   	cli    
c000e05f:	ff 05 68 a4 02 c0    	inc    DWORD PTR ds:0xc002a468
c000e065:	83 ec 0c             	sub    esp,0xc
c000e068:	ff 05 64 a4 02 c0    	inc    DWORD PTR ds:0xc002a464
c000e06e:	68 78 a4 02 c0       	push   0xc002a478
c000e073:	e8 78 16 01 00       	call   c001f6f0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000e078:	83 c4 10             	add    esp,0x10
c000e07b:	84 c0                	test   al,al
c000e07d:	0f 85 a1 00 00 00    	jne    c000e124 <timerHandler(unsigned int)+0xe0>
c000e083:	83 ec 0c             	sub    esp,0xc
c000e086:	68 78 a4 02 c0       	push   0xc002a478
c000e08b:	e8 7c 16 01 00       	call   c001f70c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000e090:	83 c4 10             	add    esp,0x10
c000e093:	89 c6                	mov    esi,eax
c000e095:	8d 76 00             	lea    esi,[esi+0x0]
c000e098:	83 ec 0c             	sub    esp,0xc
c000e09b:	68 78 a4 02 c0       	push   0xc002a478
c000e0a0:	e8 67 16 01 00       	call   c001f70c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000e0a5:	c7 04 24 78 a4 02 c0 	mov    DWORD PTR [esp],0xc002a478
c000e0ac:	89 c3                	mov    ebx,eax
c000e0ae:	e8 61 16 01 00       	call   c001f714 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c000e0b3:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000e0b6:	83 c4 10             	add    esp,0x10
c000e0b9:	3b 05 4c 95 02 c0    	cmp    eax,DWORD PTR ds:0xc002954c
c000e0bf:	77 23                	ja     c000e0e4 <timerHandler(unsigned int)+0xa0>
c000e0c1:	83 ec 0c             	sub    esp,0xc
c000e0c4:	53                   	push   ebx
c000e0c5:	e8 fa 7e 00 00       	call   c0015fc4 <unblockTask(ThreadControlBlock*)>
c000e0ca:	83 c4 10             	add    esp,0x10
c000e0cd:	39 de                	cmp    esi,ebx
c000e0cf:	75 27                	jne    c000e0f8 <timerHandler(unsigned int)+0xb4>
c000e0d1:	83 ec 0c             	sub    esp,0xc
c000e0d4:	68 78 a4 02 c0       	push   0xc002a478
c000e0d9:	e8 2e 16 01 00       	call   c001f70c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000e0de:	89 c6                	mov    esi,eax
c000e0e0:	eb 12                	jmp    c000e0f4 <timerHandler(unsigned int)+0xb0>
c000e0e2:	66 90                	xchg   ax,ax
c000e0e4:	52                   	push   edx
c000e0e5:	52                   	push   edx
c000e0e6:	53                   	push   ebx
c000e0e7:	68 78 a4 02 c0       	push   0xc002a478
c000e0ec:	e8 df 16 01 00       	call   c001f7d0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c000e0f1:	8d 76 00             	lea    esi,[esi+0x0]
c000e0f4:	83 c4 10             	add    esp,0x10
c000e0f7:	90                   	nop
c000e0f8:	83 ec 0c             	sub    esp,0xc
c000e0fb:	68 78 a4 02 c0       	push   0xc002a478
c000e100:	e8 eb 15 01 00       	call   c001f6f0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000e105:	83 c4 10             	add    esp,0x10
c000e108:	84 c0                	test   al,al
c000e10a:	75 18                	jne    c000e124 <timerHandler(unsigned int)+0xe0>
c000e10c:	83 ec 0c             	sub    esp,0xc
c000e10f:	68 78 a4 02 c0       	push   0xc002a478
c000e114:	e8 f3 15 01 00       	call   c001f70c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000e119:	83 c4 10             	add    esp,0x10
c000e11c:	39 f0                	cmp    eax,esi
c000e11e:	0f 85 74 ff ff ff    	jne    c000e098 <timerHandler(unsigned int)+0x54>
c000e124:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000e129:	83 78 34 00          	cmp    DWORD PTR [eax+0x34],0x0
c000e12d:	74 41                	je     c000e170 <timerHandler(unsigned int)+0x12c>
c000e12f:	80 3d bc 5e 02 c0 00 	cmp    BYTE PTR ds:0xc0025ebc,0x0
c000e136:	74 38                	je     c000e170 <timerHandler(unsigned int)+0x12c>
c000e138:	fa                   	cli    
c000e139:	ff 05 68 a4 02 c0    	inc    DWORD PTR ds:0xc002a468
c000e13f:	a1 4c 95 02 c0       	mov    eax,ds:0xc002954c
c000e144:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000e14a:	29 42 34             	sub    DWORD PTR [edx+0x34],eax
c000e14d:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000e153:	3b 42 34             	cmp    eax,DWORD PTR [edx+0x34]
c000e156:	72 08                	jb     c000e160 <timerHandler(unsigned int)+0x11c>
c000e158:	e8 4f 79 00 00       	call   c0015aac <schedule()>
c000e15d:	8d 76 00             	lea    esi,[esi+0x0]
c000e160:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c000e165:	48                   	dec    eax
c000e166:	a3 68 a4 02 c0       	mov    ds:0xc002a468,eax
c000e16b:	75 03                	jne    c000e170 <timerHandler(unsigned int)+0x12c>
c000e16d:	fb                   	sti    
c000e16e:	66 90                	xchg   ax,ax
c000e170:	a1 64 a4 02 c0       	mov    eax,ds:0xc002a464
c000e175:	48                   	dec    eax
c000e176:	a3 64 a4 02 c0       	mov    ds:0xc002a464,eax
c000e17b:	75 1b                	jne    c000e198 <timerHandler(unsigned int)+0x154>
c000e17d:	83 3d 60 a4 02 c0 00 	cmp    DWORD PTR ds:0xc002a460,0x0
c000e184:	74 12                	je     c000e198 <timerHandler(unsigned int)+0x154>
c000e186:	c7 05 60 a4 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002a460,0x0
c000e190:	e8 17 79 00 00       	call   c0015aac <schedule()>
c000e195:	8d 76 00             	lea    esi,[esi+0x0]
c000e198:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c000e19d:	48                   	dec    eax
c000e19e:	a3 68 a4 02 c0       	mov    ds:0xc002a468,eax
c000e1a3:	75 03                	jne    c000e1a8 <timerHandler(unsigned int)+0x164>
c000e1a5:	fb                   	sti    
c000e1a6:	66 90                	xchg   ax,ax
c000e1a8:	58                   	pop    eax
c000e1a9:	5b                   	pop    ebx
c000e1aa:	5e                   	pop    esi
c000e1ab:	c3                   	ret    

c000e1ac <VCache::VCache(PhysicalDisk*)>:
c000e1ac:	53                   	push   ebx
c000e1ad:	83 ec 18             	sub    esp,0x18
c000e1b0:	ba e0 16 02 c0       	mov    edx,0xc00216e0
c000e1b5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e1b9:	89 10                	mov    DWORD PTR [eax],edx
c000e1bb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e1bf:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c000e1c6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e1ca:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c000e1d1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e1d5:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c000e1dc:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c000e1e3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e1e7:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c000e1ee:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c000e1f5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e1f9:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c000e200:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e204:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000e208:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e20c:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
c000e213:	c7 40 34 00 00 00 00 	mov    DWORD PTR [eax+0x34],0x0
c000e21a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e21e:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000e222:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e226:	c6 40 3d 00          	mov    BYTE PTR [eax+0x3d],0x0
c000e22a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e22e:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000e232:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e236:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c000e23d:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c000e245:	83 ec 0c             	sub    esp,0xc
c000e248:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e24c:	e8 65 98 ff ff       	call   c0007ab6 <malloc>
c000e251:	83 c4 10             	add    esp,0x10
c000e254:	89 c3                	mov    ebx,eax
c000e256:	83 ec 0c             	sub    esp,0xc
c000e259:	53                   	push   ebx
c000e25a:	e8 e9 75 00 00       	call   c0015848 <Mutex::Mutex()>
c000e25f:	83 c4 10             	add    esp,0x10
c000e262:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e266:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000e269:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e26d:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000e271:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000e274:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e278:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c000e27f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000e283:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c000e289:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e28d:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000e290:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000e294:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c000e29a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000e2a0:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000e2a4:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c000e2a7:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c000e2aa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e2ae:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000e2b2:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000e2b6:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000e2bc:	05 00 02 00 00       	add    eax,0x200
c000e2c1:	c1 e0 03             	shl    eax,0x3
c000e2c4:	83 ec 0c             	sub    esp,0xc
c000e2c7:	50                   	push   eax
c000e2c8:	e8 e9 97 ff ff       	call   c0007ab6 <malloc>
c000e2cd:	83 c4 10             	add    esp,0x10
c000e2d0:	89 c2                	mov    edx,eax
c000e2d2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e2d6:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000e2d9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e2dd:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c000e2e4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e2e8:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000e2ec:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000e2f0:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c000e2f6:	89 d0                	mov    eax,edx
c000e2f8:	c1 e0 02             	shl    eax,0x2
c000e2fb:	01 d0                	add    eax,edx
c000e2fd:	c1 e0 04             	shl    eax,0x4
c000e300:	83 ec 0c             	sub    esp,0xc
c000e303:	50                   	push   eax
c000e304:	e8 ad 97 ff ff       	call   c0007ab6 <malloc>
c000e309:	83 c4 10             	add    esp,0x10
c000e30c:	89 c2                	mov    edx,eax
c000e30e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e312:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c000e315:	90                   	nop
c000e316:	83 c4 18             	add    esp,0x18
c000e319:	5b                   	pop    ebx
c000e31a:	c3                   	ret    
c000e31b:	90                   	nop

c000e31c <VCache::invalidateReadBuffer()>:
c000e31c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e320:	66 c7 40 3c 00 00    	mov    WORD PTR [eax+0x3c],0x0
c000e326:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000e32a:	c3                   	ret    
c000e32b:	90                   	nop

c000e32c <VCache::writeWriteBuffer()>:
c000e32c:	53                   	push   ebx
c000e32d:	83 ec 08             	sub    esp,0x8
c000e330:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e334:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000e338:	74 1e                	je     c000e358 <VCache::writeWriteBuffer()+0x2c>
c000e33a:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000e33d:	83 ec 0c             	sub    esp,0xc
c000e340:	8b 10                	mov    edx,DWORD PTR [eax]
c000e342:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c000e345:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c000e348:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c000e34b:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000e34e:	50                   	push   eax
c000e34f:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c000e352:	83 c4 20             	add    esp,0x20
c000e355:	8d 76 00             	lea    esi,[esi+0x0]
c000e358:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000e35f:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c000e366:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c000e36a:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c000e371:	83 c4 08             	add    esp,0x8
c000e374:	5b                   	pop    ebx
c000e375:	c3                   	ret    
c000e376:	66 90                	xchg   ax,ax

c000e378 <VCache::~VCache()>:
c000e378:	83 ec 0c             	sub    esp,0xc
c000e37b:	ba e0 16 02 c0       	mov    edx,0xc00216e0
c000e380:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e384:	89 10                	mov    DWORD PTR [eax],edx
c000e386:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e38a:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c000e38d:	0f b6 c0             	movzx  eax,al
c000e390:	85 c0                	test   eax,eax
c000e392:	74 10                	je     c000e3a4 <VCache::~VCache()+0x2c>
c000e394:	83 ec 0c             	sub    esp,0xc
c000e397:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e39b:	e8 8c ff ff ff       	call   c000e32c <VCache::writeWriteBuffer()>
c000e3a0:	83 c4 10             	add    esp,0x10
c000e3a3:	90                   	nop
c000e3a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e3a8:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000e3ab:	83 ec 0c             	sub    esp,0xc
c000e3ae:	50                   	push   eax
c000e3af:	e8 12 97 ff ff       	call   c0007ac6 <free>
c000e3b4:	83 c4 10             	add    esp,0x10
c000e3b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e3bb:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000e3be:	83 ec 0c             	sub    esp,0xc
c000e3c1:	50                   	push   eax
c000e3c2:	e8 ff 96 ff ff       	call   c0007ac6 <free>
c000e3c7:	83 c4 10             	add    esp,0x10
c000e3ca:	90                   	nop
c000e3cb:	83 c4 0c             	add    esp,0xc
c000e3ce:	c3                   	ret    
c000e3cf:	90                   	nop

c000e3d0 <VCache::~VCache()>:
c000e3d0:	83 ec 0c             	sub    esp,0xc
c000e3d3:	83 ec 0c             	sub    esp,0xc
c000e3d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e3da:	e8 99 ff ff ff       	call   c000e378 <VCache::~VCache()>
c000e3df:	83 c4 10             	add    esp,0x10
c000e3e2:	83 ec 08             	sub    esp,0x8
c000e3e5:	6a 44                	push   0x44
c000e3e7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e3eb:	e8 28 c4 ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c000e3f0:	83 c4 10             	add    esp,0x10
c000e3f3:	83 c4 0c             	add    esp,0xc
c000e3f6:	c3                   	ret    
c000e3f7:	90                   	nop

c000e3f8 <VCache::write(unsigned long long, int, void*)>:
c000e3f8:	55                   	push   ebp
c000e3f9:	57                   	push   edi
c000e3fa:	56                   	push   esi
c000e3fb:	53                   	push   ebx
c000e3fc:	83 ec 1c             	sub    esp,0x1c
c000e3ff:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000e403:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e407:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000e40b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e40f:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000e413:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000e417:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c000e41b:	74 07                	je     c000e424 <VCache::write(unsigned long long, int, void*)+0x2c>
c000e41d:	53                   	push   ebx
c000e41e:	e8 f9 fe ff ff       	call   c000e31c <VCache::invalidateReadBuffer()>
c000e423:	58                   	pop    eax
c000e424:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000e428:	74 62                	je     c000e48c <VCache::write(unsigned long long, int, void*)+0x94>
c000e42a:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c000e42d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000e431:	99                   	cdq    
c000e432:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e436:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c000e439:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c000e43c:	31 c1                	xor    ecx,eax
c000e43e:	89 d0                	mov    eax,edx
c000e440:	89 ca                	mov    edx,ecx
c000e442:	31 e8                	xor    eax,ebp
c000e444:	09 c2                	or     edx,eax
c000e446:	75 38                	jne    c000e480 <VCache::write(unsigned long long, int, void*)+0x88>
c000e448:	83 ff 01             	cmp    edi,0x1
c000e44b:	75 33                	jne    c000e480 <VCache::write(unsigned long long, int, void*)+0x88>
c000e44d:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000e450:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000e454:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000e45a:	8b 7b 28             	mov    edi,DWORD PTR [ebx+0x28]
c000e45d:	0f af c8             	imul   ecx,eax
c000e460:	01 cf                	add    edi,ecx
c000e462:	89 c1                	mov    ecx,eax
c000e464:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e466:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c000e469:	40                   	inc    eax
c000e46a:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c000e46d:	83 f8 50             	cmp    eax,0x50
c000e470:	75 6a                	jne    c000e4dc <VCache::write(unsigned long long, int, void*)+0xe4>
c000e472:	83 ec 0c             	sub    esp,0xc
c000e475:	53                   	push   ebx
c000e476:	e8 b1 fe ff ff       	call   c000e32c <VCache::writeWriteBuffer()>
c000e47b:	83 c4 10             	add    esp,0x10
c000e47e:	eb 5c                	jmp    c000e4dc <VCache::write(unsigned long long, int, void*)+0xe4>
c000e480:	83 ec 0c             	sub    esp,0xc
c000e483:	53                   	push   ebx
c000e484:	e8 a3 fe ff ff       	call   c000e32c <VCache::writeWriteBuffer()>
c000e489:	83 c4 10             	add    esp,0x10
c000e48c:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000e48f:	83 ff 4f             	cmp    edi,0x4f
c000e492:	7f 20                	jg     c000e4b4 <VCache::write(unsigned long long, int, void*)+0xbc>
c000e494:	89 7b 24             	mov    DWORD PTR [ebx+0x24],edi
c000e497:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000e49b:	89 6b 20             	mov    DWORD PTR [ebx+0x20],ebp
c000e49e:	89 53 1c             	mov    DWORD PTR [ebx+0x1c],edx
c000e4a1:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c000e4a5:	8b 7b 28             	mov    edi,DWORD PTR [ebx+0x28]
c000e4a8:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000e4ae:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e4b0:	eb 2a                	jmp    c000e4dc <VCache::write(unsigned long long, int, void*)+0xe4>
c000e4b2:	66 90                	xchg   ax,ax
c000e4b4:	8b 10                	mov    edx,DWORD PTR [eax]
c000e4b6:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c000e4ba:	89 7c 24 3c          	mov    DWORD PTR [esp+0x3c],edi
c000e4be:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000e4c2:	89 6c 24 38          	mov    DWORD PTR [esp+0x38],ebp
c000e4c6:	89 74 24 34          	mov    DWORD PTR [esp+0x34],esi
c000e4ca:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000e4ce:	8b 42 2c             	mov    eax,DWORD PTR [edx+0x2c]
c000e4d1:	83 c4 1c             	add    esp,0x1c
c000e4d4:	5b                   	pop    ebx
c000e4d5:	5e                   	pop    esi
c000e4d6:	5f                   	pop    edi
c000e4d7:	5d                   	pop    ebp
c000e4d8:	ff e0                	jmp    eax
c000e4da:	66 90                	xchg   ax,ax
c000e4dc:	83 c4 1c             	add    esp,0x1c
c000e4df:	31 c0                	xor    eax,eax
c000e4e1:	5b                   	pop    ebx
c000e4e2:	5e                   	pop    esi
c000e4e3:	5f                   	pop    edi
c000e4e4:	5d                   	pop    ebp
c000e4e5:	c3                   	ret    

c000e4e6 <VCache::read(unsigned long long, int, void*)>:
c000e4e6:	55                   	push   ebp
c000e4e7:	57                   	push   edi
c000e4e8:	56                   	push   esi
c000e4e9:	53                   	push   ebx
c000e4ea:	83 ec 1c             	sub    esp,0x1c
c000e4ed:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c000e4f1:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e4f5:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000e4f9:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000e4fd:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c000e501:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000e505:	80 7f 2c 00          	cmp    BYTE PTR [edi+0x2c],0x0
c000e509:	74 0d                	je     c000e518 <VCache::read(unsigned long long, int, void*)+0x32>
c000e50b:	83 ec 0c             	sub    esp,0xc
c000e50e:	57                   	push   edi
c000e50f:	e8 18 fe ff ff       	call   c000e32c <VCache::writeWriteBuffer()>
c000e514:	83 c4 10             	add    esp,0x10
c000e517:	90                   	nop
c000e518:	83 fd 01             	cmp    ebp,0x1
c000e51b:	0f 85 93 00 00 00    	jne    c000e5b4 <VCache::read(unsigned long long, int, void*)+0xce>
c000e521:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000e524:	89 04 24             	mov    DWORD PTR [esp],eax
c000e527:	80 b8 68 01 00 00 00 	cmp    BYTE PTR [eax+0x168],0x0
c000e52e:	0f 85 80 00 00 00    	jne    c000e5b4 <VCache::read(unsigned long long, int, void*)+0xce>
c000e534:	8b 6f 40             	mov    ebp,DWORD PTR [edi+0x40]
c000e537:	89 e9                	mov    ecx,ebp
c000e539:	f7 d9                	neg    ecx
c000e53b:	89 c8                	mov    eax,ecx
c000e53d:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000e541:	c1 f8 1f             	sar    eax,0x1f
c000e544:	21 d9                	and    ecx,ebx
c000e546:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e54a:	89 c8                	mov    eax,ecx
c000e54c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000e550:	21 f1                	and    ecx,esi
c000e552:	80 7f 3c 00          	cmp    BYTE PTR [edi+0x3c],0x0
c000e556:	89 ca                	mov    edx,ecx
c000e558:	74 2e                	je     c000e588 <VCache::read(unsigned long long, int, void*)+0xa2>
c000e55a:	39 4f 34             	cmp    DWORD PTR [edi+0x34],ecx
c000e55d:	75 29                	jne    c000e588 <VCache::read(unsigned long long, int, void*)+0xa2>
c000e55f:	39 47 30             	cmp    DWORD PTR [edi+0x30],eax
c000e562:	75 24                	jne    c000e588 <VCache::read(unsigned long long, int, void*)+0xa2>
c000e564:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000e567:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000e56d:	8b 47 40             	mov    eax,DWORD PTR [edi+0x40]
c000e570:	8d 70 ff             	lea    esi,[eax-0x1]
c000e573:	21 f3                	and    ebx,esi
c000e575:	0f af d9             	imul   ebx,ecx
c000e578:	03 5f 38             	add    ebx,DWORD PTR [edi+0x38]
c000e57b:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c000e57f:	89 de                	mov    esi,ebx
c000e581:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e583:	31 c0                	xor    eax,eax
c000e585:	eb 61                	jmp    c000e5e8 <VCache::read(unsigned long long, int, void*)+0x102>
c000e587:	90                   	nop
c000e588:	83 ec 0c             	sub    esp,0xc
c000e58b:	c6 47 3c 01          	mov    BYTE PTR [edi+0x3c],0x1
c000e58f:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000e593:	89 47 30             	mov    DWORD PTR [edi+0x30],eax
c000e596:	89 57 34             	mov    DWORD PTR [edi+0x34],edx
c000e599:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000e59b:	ff 77 38             	push   DWORD PTR [edi+0x38]
c000e59e:	55                   	push   ebp
c000e59f:	52                   	push   edx
c000e5a0:	50                   	push   eax
c000e5a1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e5a5:	ff 51 28             	call   DWORD PTR [ecx+0x28]
c000e5a8:	83 c4 20             	add    esp,0x20
c000e5ab:	85 c0                	test   eax,eax
c000e5ad:	75 39                	jne    c000e5e8 <VCache::read(unsigned long long, int, void*)+0x102>
c000e5af:	eb b3                	jmp    c000e564 <VCache::read(unsigned long long, int, void*)+0x7e>
c000e5b1:	8d 76 00             	lea    esi,[esi+0x0]
c000e5b4:	83 ec 0c             	sub    esp,0xc
c000e5b7:	57                   	push   edi
c000e5b8:	e8 5f fd ff ff       	call   c000e31c <VCache::invalidateReadBuffer()>
c000e5bd:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000e5c0:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000e5c4:	8b 10                	mov    edx,DWORD PTR [eax]
c000e5c6:	89 6c 24 4c          	mov    DWORD PTR [esp+0x4c],ebp
c000e5ca:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c000e5ce:	89 74 24 48          	mov    DWORD PTR [esp+0x48],esi
c000e5d2:	89 4c 24 50          	mov    DWORD PTR [esp+0x50],ecx
c000e5d6:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000e5da:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c000e5dd:	83 c4 2c             	add    esp,0x2c
c000e5e0:	5b                   	pop    ebx
c000e5e1:	5e                   	pop    esi
c000e5e2:	5f                   	pop    edi
c000e5e3:	5d                   	pop    ebp
c000e5e4:	ff e0                	jmp    eax
c000e5e6:	66 90                	xchg   ax,ax
c000e5e8:	83 c4 1c             	add    esp,0x1c
c000e5eb:	5b                   	pop    ebx
c000e5ec:	5e                   	pop    esi
c000e5ed:	5f                   	pop    edi
c000e5ee:	5d                   	pop    ebp
c000e5ef:	c3                   	ret    

c000e5f0 <Video::putrect(int, int, int, int, unsigned int)>:
c000e5f0:	55                   	push   ebp
c000e5f1:	57                   	push   edi
c000e5f2:	56                   	push   esi
c000e5f3:	53                   	push   ebx
c000e5f4:	83 ec 1c             	sub    esp,0x1c
c000e5f7:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000e5fb:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e5ff:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c000e603:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c000e607:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000e60b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e60f:	01 df                	add    edi,ebx
c000e611:	39 fb                	cmp    ebx,edi
c000e613:	7d 1f                	jge    c000e634 <Video::putrect(int, int, int, int, unsigned int)+0x44>
c000e615:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000e619:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c000e61d:	7d 12                	jge    c000e631 <Video::putrect(int, int, int, int, unsigned int)+0x41>
c000e61f:	8b 16                	mov    edx,DWORD PTR [esi]
c000e621:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000e625:	53                   	push   ebx
c000e626:	55                   	push   ebp
c000e627:	45                   	inc    ebp
c000e628:	56                   	push   esi
c000e629:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000e62c:	83 c4 10             	add    esp,0x10
c000e62f:	eb e8                	jmp    c000e619 <Video::putrect(int, int, int, int, unsigned int)+0x29>
c000e631:	43                   	inc    ebx
c000e632:	eb dd                	jmp    c000e611 <Video::putrect(int, int, int, int, unsigned int)+0x21>
c000e634:	83 c4 1c             	add    esp,0x1c
c000e637:	5b                   	pop    ebx
c000e638:	5e                   	pop    esi
c000e639:	5f                   	pop    edi
c000e63a:	5d                   	pop    ebp
c000e63b:	c3                   	ret    

c000e63c <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c000e63c:	55                   	push   ebp
c000e63d:	57                   	push   edi
c000e63e:	31 ff                	xor    edi,edi
c000e640:	56                   	push   esi
c000e641:	53                   	push   ebx
c000e642:	83 ec 1c             	sub    esp,0x1c
c000e645:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c000e649:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000e64d:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c000e654:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c000e659:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e65d:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c000e661:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000e665:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c000e668:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000e66c:	01 f9                	add    ecx,edi
c000e66e:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c000e672:	7d 2f                	jge    c000e6a3 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c000e674:	31 f6                	xor    esi,esi
c000e676:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000e67a:	01 f2                	add    edx,esi
c000e67c:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c000e680:	7d 1a                	jge    c000e69c <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c000e682:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000e685:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c000e688:	46                   	inc    esi
c000e689:	51                   	push   ecx
c000e68a:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000e68e:	52                   	push   edx
c000e68f:	55                   	push   ebp
c000e690:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000e693:	83 c4 10             	add    esp,0x10
c000e696:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000e69a:	eb da                	jmp    c000e676 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c000e69c:	47                   	inc    edi
c000e69d:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c000e6a1:	eb c5                	jmp    c000e668 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c000e6a3:	83 c4 1c             	add    esp,0x1c
c000e6a6:	5b                   	pop    ebx
c000e6a7:	5e                   	pop    esi
c000e6a8:	5f                   	pop    edi
c000e6a9:	5d                   	pop    ebp
c000e6aa:	c3                   	ret    
c000e6ab:	90                   	nop

c000e6ac <Video::blit(unsigned int*, int, int, int, int)>:
c000e6ac:	55                   	push   ebp
c000e6ad:	57                   	push   edi
c000e6ae:	56                   	push   esi
c000e6af:	53                   	push   ebx
c000e6b0:	83 ec 1c             	sub    esp,0x1c
c000e6b3:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e6b7:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000e6bb:	85 c0                	test   eax,eax
c000e6bd:	79 02                	jns    c000e6c1 <Video::blit(unsigned int*, int, int, int, int)+0x15>
c000e6bf:	31 c0                	xor    eax,eax
c000e6c1:	c1 e0 02             	shl    eax,0x2
c000e6c4:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000e6c8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e6cc:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000e6d0:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c000e6d4:	39 d8                	cmp    eax,ebx
c000e6d6:	7e 49                	jle    c000e721 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c000e6d8:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c000e6de:	7c 41                	jl     c000e721 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c000e6e0:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c000e6e4:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000e6e8:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000e6ec:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c000e6f0:	39 f9                	cmp    ecx,edi
c000e6f2:	7e 22                	jle    c000e716 <Video::blit(unsigned int*, int, int, int, int)+0x6a>
c000e6f4:	83 c5 04             	add    ebp,0x4
c000e6f7:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c000e6fd:	7c 14                	jl     c000e713 <Video::blit(unsigned int*, int, int, int, int)+0x67>
c000e6ff:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000e701:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c000e704:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000e708:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000e70c:	56                   	push   esi
c000e70d:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c000e710:	83 c4 10             	add    esp,0x10
c000e713:	47                   	inc    edi
c000e714:	eb d2                	jmp    c000e6e8 <Video::blit(unsigned int*, int, int, int, int)+0x3c>
c000e716:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e71a:	43                   	inc    ebx
c000e71b:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c000e71f:	eb ab                	jmp    c000e6cc <Video::blit(unsigned int*, int, int, int, int)+0x20>
c000e721:	83 c4 1c             	add    esp,0x1c
c000e724:	5b                   	pop    ebx
c000e725:	5e                   	pop    esi
c000e726:	5f                   	pop    edi
c000e727:	5d                   	pop    ebp
c000e728:	c3                   	ret    
c000e729:	90                   	nop

c000e72a <Video::clearScreen(unsigned int)>:
c000e72a:	57                   	push   edi
c000e72b:	56                   	push   esi
c000e72c:	53                   	push   ebx
c000e72d:	31 db                	xor    ebx,ebx
c000e72f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000e733:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c000e739:	7e 1f                	jle    c000e75a <Video::clearScreen(unsigned int)+0x30>
c000e73b:	31 ff                	xor    edi,edi
c000e73d:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c000e743:	7e 12                	jle    c000e757 <Video::clearScreen(unsigned int)+0x2d>
c000e745:	8b 06                	mov    eax,DWORD PTR [esi]
c000e747:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e74b:	53                   	push   ebx
c000e74c:	57                   	push   edi
c000e74d:	47                   	inc    edi
c000e74e:	56                   	push   esi
c000e74f:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000e752:	83 c4 10             	add    esp,0x10
c000e755:	eb e6                	jmp    c000e73d <Video::clearScreen(unsigned int)+0x13>
c000e757:	43                   	inc    ebx
c000e758:	eb d9                	jmp    c000e733 <Video::clearScreen(unsigned int)+0x9>
c000e75a:	5b                   	pop    ebx
c000e75b:	5e                   	pop    esi
c000e75c:	5f                   	pop    edi
c000e75d:	c3                   	ret    

c000e75e <Video::putpixel(int, int, unsigned int)>:
c000e75e:	c7 44 24 04 e8 16 02 c0 	mov    DWORD PTR [esp+0x4],0xc00216e8
c000e766:	e9 82 2a 00 00       	jmp    c00111ed <KePanic(char const*)>
c000e76b:	90                   	nop

c000e76c <Video::readPixelApprox(int, int)>:
c000e76c:	83 ec 18             	sub    esp,0x18
c000e76f:	68 09 17 02 c0       	push   0xc0021709
c000e774:	e8 74 2a 00 00       	call   c00111ed <KePanic(char const*)>
c000e779:	31 c0                	xor    eax,eax
c000e77b:	83 c4 1c             	add    esp,0x1c
c000e77e:	c3                   	ret    
c000e77f:	90                   	nop

c000e780 <Video::Video(char const*)>:
c000e780:	83 ec 0c             	sub    esp,0xc
c000e783:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e787:	83 ec 08             	sub    esp,0x8
c000e78a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e78e:	50                   	push   eax
c000e78f:	e8 e6 df ff ff       	call   c000c77a <Device::Device(char const*)>
c000e794:	83 c4 10             	add    esp,0x10
c000e797:	ba 84 17 02 c0       	mov    edx,0xc0021784
c000e79c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7a0:	89 10                	mov    DWORD PTR [eax],edx
c000e7a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7a6:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c000e7b0:	90                   	nop
c000e7b1:	83 c4 0c             	add    esp,0xc
c000e7b4:	c3                   	ret    
c000e7b5:	90                   	nop

c000e7b6 <Video::~Video()>:
c000e7b6:	83 ec 0c             	sub    esp,0xc
c000e7b9:	ba 84 17 02 c0       	mov    edx,0xc0021784
c000e7be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7c2:	89 10                	mov    DWORD PTR [eax],edx
c000e7c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7c8:	83 ec 0c             	sub    esp,0xc
c000e7cb:	50                   	push   eax
c000e7cc:	e8 13 dd ff ff       	call   c000c4e4 <Device::~Device()>
c000e7d1:	83 c4 10             	add    esp,0x10
c000e7d4:	90                   	nop
c000e7d5:	83 c4 0c             	add    esp,0xc
c000e7d8:	c3                   	ret    
c000e7d9:	90                   	nop

c000e7da <Video::~Video()>:
c000e7da:	83 ec 0c             	sub    esp,0xc
c000e7dd:	83 ec 0c             	sub    esp,0xc
c000e7e0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e7e4:	e8 cd ff ff ff       	call   c000e7b6 <Video::~Video()>
c000e7e9:	83 c4 10             	add    esp,0x10
c000e7ec:	83 ec 08             	sub    esp,0x8
c000e7ef:	68 64 01 00 00       	push   0x164
c000e7f4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e7f8:	e8 1b c0 ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c000e7fd:	83 c4 10             	add    esp,0x10
c000e800:	83 c4 0c             	add    esp,0xc
c000e803:	c3                   	ret    

c000e804 <Video::isMonochrome()>:
c000e804:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e808:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c000e80e:	c3                   	ret    
c000e80f:	90                   	nop

c000e810 <Video::getWidth()>:
c000e810:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e814:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000e81a:	c3                   	ret    
c000e81b:	90                   	nop

c000e81c <Video::getHeight()>:
c000e81c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e820:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000e826:	c3                   	ret    
c000e827:	90                   	nop

c000e828 <Video::drawCursor(int, int, unsigned int*, int)>:
c000e828:	55                   	push   ebp
c000e829:	57                   	push   edi
c000e82a:	56                   	push   esi
c000e82b:	53                   	push   ebx
c000e82c:	83 ec 2c             	sub    esp,0x2c
c000e82f:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000e833:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000e837:	83 f8 01             	cmp    eax,0x1
c000e83a:	19 c9                	sbb    ecx,ecx
c000e83c:	31 db                	xor    ebx,ebx
c000e83e:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000e842:	89 cd                	mov    ebp,ecx
c000e844:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c000e84c:	f7 d5                	not    ebp
c000e84e:	81 e5 ff ff ff 00    	and    ebp,0xffffff
c000e854:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000e858:	01 d8                	add    eax,ebx
c000e85a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e85e:	56                   	push   esi
c000e85f:	e8 b8 ff ff ff       	call   c000e81c <Video::getHeight()>
c000e864:	59                   	pop    ecx
c000e865:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000e869:	7e 70                	jle    c000e8db <Video::drawCursor(int, int, unsigned int*, int)+0xb3>
c000e86b:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000e86f:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c000e873:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c000e876:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000e87a:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000e87e:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c000e885:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e889:	89 f8                	mov    eax,edi
c000e88b:	83 c0 20             	add    eax,0x20
c000e88e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e892:	56                   	push   esi
c000e893:	e8 78 ff ff ff       	call   c000e810 <Video::getWidth()>
c000e898:	5a                   	pop    edx
c000e899:	39 c7                	cmp    edi,eax
c000e89b:	7d 34                	jge    c000e8d1 <Video::drawCursor(int, int, unsigned int*, int)+0xa9>
c000e89d:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c000e8a2:	74 05                	je     c000e8a9 <Video::drawCursor(int, int, unsigned int*, int)+0x81>
c000e8a4:	8b 06                	mov    eax,DWORD PTR [esi]
c000e8a6:	55                   	push   ebp
c000e8a7:	eb 0d                	jmp    c000e8b6 <Video::drawCursor(int, int, unsigned int*, int)+0x8e>
c000e8a9:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c000e8ae:	74 12                	je     c000e8c2 <Video::drawCursor(int, int, unsigned int*, int)+0x9a>
c000e8b0:	8b 06                	mov    eax,DWORD PTR [esi]
c000e8b2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e8b6:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000e8ba:	57                   	push   edi
c000e8bb:	56                   	push   esi
c000e8bc:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000e8bf:	83 c4 10             	add    esp,0x10
c000e8c2:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c000e8c6:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c000e8ca:	47                   	inc    edi
c000e8cb:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c000e8cf:	75 c1                	jne    c000e892 <Video::drawCursor(int, int, unsigned int*, int)+0x6a>
c000e8d1:	43                   	inc    ebx
c000e8d2:	83 fb 20             	cmp    ebx,0x20
c000e8d5:	0f 85 79 ff ff ff    	jne    c000e854 <Video::drawCursor(int, int, unsigned int*, int)+0x2c>
c000e8db:	83 c4 2c             	add    esp,0x2c
c000e8de:	5b                   	pop    ebx
c000e8df:	5e                   	pop    esi
c000e8e0:	5f                   	pop    edi
c000e8e1:	5d                   	pop    ebp
c000e8e2:	c3                   	ret    
c000e8e3:	90                   	nop

c000e8e4 <Video::tgaParse(unsigned char*, int, int*, int*)>:
c000e8e4:	55                   	push   ebp
c000e8e5:	57                   	push   edi
c000e8e6:	56                   	push   esi
c000e8e7:	53                   	push   ebx
c000e8e8:	83 ec 28             	sub    esp,0x28
c000e8eb:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000e8ef:	0f b6 43 0c          	movzx  eax,BYTE PTR [ebx+0xc]
c000e8f3:	0f b6 73 0d          	movzx  esi,BYTE PTR [ebx+0xd]
c000e8f7:	0f b6 53 0e          	movzx  edx,BYTE PTR [ebx+0xe]
c000e8fb:	c1 e6 08             	shl    esi,0x8
c000e8fe:	01 c6                	add    esi,eax
c000e900:	0f b6 43 0f          	movzx  eax,BYTE PTR [ebx+0xf]
c000e904:	c1 e0 08             	shl    eax,0x8
c000e907:	01 d0                	add    eax,edx
c000e909:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e90d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e911:	0f af c6             	imul   eax,esi
c000e914:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c000e91b:	50                   	push   eax
c000e91c:	e8 95 91 ff ff       	call   c0007ab6 <malloc>
c000e921:	83 c4 10             	add    esp,0x10
c000e924:	89 c7                	mov    edi,eax
c000e926:	85 c0                	test   eax,eax
c000e928:	75 10                	jne    c000e93a <Video::tgaParse(unsigned char*, int, int*, int*)+0x56>
c000e92a:	83 ec 0c             	sub    esp,0xc
c000e92d:	68 34 17 02 c0       	push   0xc0021734
c000e932:	e8 b6 28 00 00       	call   c00111ed <KePanic(char const*)>
c000e937:	83 c4 10             	add    esp,0x10
c000e93a:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000e93e:	ba 12 00 00 00       	mov    edx,0x12
c000e943:	85 c0                	test   eax,eax
c000e945:	74 11                	je     c000e958 <Video::tgaParse(unsigned char*, int, int*, int*)+0x74>
c000e947:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c000e94b:	0f b7 4b 05          	movzx  ecx,WORD PTR [ebx+0x5]
c000e94f:	c1 fa 03             	sar    edx,0x3
c000e952:	0f af d1             	imul   edx,ecx
c000e955:	83 c2 12             	add    edx,0x12
c000e958:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c000e95c:	74 04                	je     c000e962 <Video::tgaParse(unsigned char*, int, int*, int*)+0x7e>
c000e95e:	85 f6                	test   esi,esi
c000e960:	75 12                	jne    c000e974 <Video::tgaParse(unsigned char*, int, int*, int*)+0x90>
c000e962:	83 ec 0c             	sub    esp,0xc
c000e965:	68 44 17 02 c0       	push   0xc0021744
c000e96a:	e8 d6 bf ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000e96f:	e9 b8 00 00 00       	jmp    c000ea2c <Video::tgaParse(unsigned char*, int, int*, int*)+0x148>
c000e974:	0f b6 4b 02          	movzx  ecx,BYTE PTR [ebx+0x2]
c000e978:	83 f9 02             	cmp    ecx,0x2
c000e97b:	0f 85 96 00 00 00    	jne    c000ea17 <Video::tgaParse(unsigned char*, int, int*, int*)+0x133>
c000e981:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c000e986:	75 0e                	jne    c000e996 <Video::tgaParse(unsigned char*, int, int*, int*)+0xb2>
c000e988:	85 c0                	test   eax,eax
c000e98a:	75 0a                	jne    c000e996 <Video::tgaParse(unsigned char*, int, int*, int*)+0xb2>
c000e98c:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000e98f:	83 e8 18             	sub    eax,0x18
c000e992:	a8 f7                	test   al,0xf7
c000e994:	74 0a                	je     c000e9a0 <Video::tgaParse(unsigned char*, int, int*, int*)+0xbc>
c000e996:	83 ec 0c             	sub    esp,0xc
c000e999:	68 59 17 02 c0       	push   0xc0021759
c000e99e:	eb 7f                	jmp    c000ea1f <Video::tgaParse(unsigned char*, int, int*, int*)+0x13b>
c000e9a0:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000e9a8:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c000e9b0:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c000e9b4:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000e9bc:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c000e9c0:	75 0c                	jne    c000e9ce <Video::tgaParse(unsigned char*, int, int*, int*)+0xea>
c000e9c2:	0f b6 44 13 03       	movzx  eax,BYTE PTR [ebx+edx*1+0x3]
c000e9c7:	c1 e0 18             	shl    eax,0x18
c000e9ca:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e9ce:	45                   	inc    ebp
c000e9cf:	0f b6 4c 13 02       	movzx  ecx,BYTE PTR [ebx+edx*1+0x2]
c000e9d4:	c1 e1 10             	shl    ecx,0x10
c000e9d7:	89 c8                	mov    eax,ecx
c000e9d9:	0f b6 4c 13 01       	movzx  ecx,BYTE PTR [ebx+edx*1+0x1]
c000e9de:	c1 e1 08             	shl    ecx,0x8
c000e9e1:	09 c1                	or     ecx,eax
c000e9e3:	0f b6 04 13          	movzx  eax,BYTE PTR [ebx+edx*1]
c000e9e7:	09 c1                	or     ecx,eax
c000e9e9:	0b 4c 24 08          	or     ecx,DWORD PTR [esp+0x8]
c000e9ed:	89 4c af fc          	mov    DWORD PTR [edi+ebp*4-0x4],ecx
c000e9f1:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c000e9f5:	c1 f8 03             	sar    eax,0x3
c000e9f8:	01 c2                	add    edx,eax
c000e9fa:	89 e8                	mov    eax,ebp
c000e9fc:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c000ea00:	39 c6                	cmp    esi,eax
c000ea02:	7f b0                	jg     c000e9b4 <Video::tgaParse(unsigned char*, int, int*, int*)+0xd0>
c000ea04:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000ea08:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000ea0c:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c000ea0f:	7e 22                	jle    c000ea33 <Video::tgaParse(unsigned char*, int, int*, int*)+0x14f>
c000ea11:	89 6c 24 04          	mov    DWORD PTR [esp+0x4],ebp
c000ea15:	eb 99                	jmp    c000e9b0 <Video::tgaParse(unsigned char*, int, int*, int*)+0xcc>
c000ea17:	50                   	push   eax
c000ea18:	50                   	push   eax
c000ea19:	51                   	push   ecx
c000ea1a:	68 67 17 02 c0       	push   0xc0021767
c000ea1f:	e8 21 bf ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000ea24:	89 3c 24             	mov    DWORD PTR [esp],edi
c000ea27:	e8 9a 90 ff ff       	call   c0007ac6 <free>
c000ea2c:	83 c4 10             	add    esp,0x10
c000ea2f:	31 ff                	xor    edi,edi
c000ea31:	eb 0f                	jmp    c000ea42 <Video::tgaParse(unsigned char*, int, int*, int*)+0x15e>
c000ea33:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000ea37:	89 30                	mov    DWORD PTR [eax],esi
c000ea39:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ea3d:	8b 34 24             	mov    esi,DWORD PTR [esp]
c000ea40:	89 30                	mov    DWORD PTR [eax],esi
c000ea42:	83 c4 1c             	add    esp,0x1c
c000ea45:	89 f8                	mov    eax,edi
c000ea47:	5b                   	pop    ebx
c000ea48:	5e                   	pop    esi
c000ea49:	5f                   	pop    edi
c000ea4a:	5d                   	pop    ebp
c000ea4b:	c3                   	ret    

c000ea4c <Video::putTGA(int, int, unsigned char*, int)>:
c000ea4c:	55                   	push   ebp
c000ea4d:	57                   	push   edi
c000ea4e:	56                   	push   esi
c000ea4f:	53                   	push   ebx
c000ea50:	83 ec 28             	sub    esp,0x28
c000ea53:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c000ea57:	8d 44 24 18          	lea    eax,[esp+0x18]
c000ea5b:	50                   	push   eax
c000ea5c:	8d 44 24 18          	lea    eax,[esp+0x18]
c000ea60:	50                   	push   eax
c000ea61:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000ea65:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000ea69:	56                   	push   esi
c000ea6a:	e8 75 fe ff ff       	call   c000e8e4 <Video::tgaParse(unsigned char*, int, int*, int*)>
c000ea6f:	83 c4 20             	add    esp,0x20
c000ea72:	85 c0                	test   eax,eax
c000ea74:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000ea78:	74 35                	je     c000eaaf <Video::putTGA(int, int, unsigned char*, int)+0x63>
c000ea7a:	89 c7                	mov    edi,eax
c000ea7c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000ea80:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000ea84:	39 d8                	cmp    eax,ebx
c000ea86:	7e 27                	jle    c000eaaf <Video::putTGA(int, int, unsigned char*, int)+0x63>
c000ea88:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000ea8c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000ea90:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000ea94:	39 e8                	cmp    eax,ebp
c000ea96:	7e 14                	jle    c000eaac <Video::putTGA(int, int, unsigned char*, int)+0x60>
c000ea98:	8b 06                	mov    eax,DWORD PTR [esi]
c000ea9a:	83 c7 04             	add    edi,0x4
c000ea9d:	ff 77 fc             	push   DWORD PTR [edi-0x4]
c000eaa0:	53                   	push   ebx
c000eaa1:	55                   	push   ebp
c000eaa2:	45                   	inc    ebp
c000eaa3:	56                   	push   esi
c000eaa4:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000eaa7:	83 c4 10             	add    esp,0x10
c000eaaa:	eb e0                	jmp    c000ea8c <Video::putTGA(int, int, unsigned char*, int)+0x40>
c000eaac:	43                   	inc    ebx
c000eaad:	eb cd                	jmp    c000ea7c <Video::putTGA(int, int, unsigned char*, int)+0x30>
c000eaaf:	83 c4 1c             	add    esp,0x1c
c000eab2:	5b                   	pop    ebx
c000eab3:	5e                   	pop    esi
c000eab4:	5f                   	pop    edi
c000eab5:	5d                   	pop    ebp
c000eab6:	c3                   	ret    
c000eab7:	90                   	nop

c000eab8 <ACPI::close(int, int, void*)>:
c000eab8:	83 ec 1c             	sub    esp,0x1c
c000eabb:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c000eac3:	74 0b                	je     c000ead0 <ACPI::close(int, int, void*)+0x18>
c000eac5:	b8 00 00 00 00       	mov    eax,0x0
c000eaca:	e9 99 00 00 00       	jmp    c000eb68 <ACPI::close(int, int, void*)+0xb0>
c000eacf:	90                   	nop
c000ead0:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c000ead5:	75 29                	jne    c000eb00 <ACPI::close(int, int, void*)+0x48>
c000ead7:	a1 68 95 02 c0       	mov    eax,ds:0xc0029568
c000eadc:	85 c0                	test   eax,eax
c000eade:	74 08                	je     c000eae8 <ACPI::close(int, int, void*)+0x30>
c000eae0:	a1 68 95 02 c0       	mov    eax,ds:0xc0029568
c000eae5:	ff d0                	call   eax
c000eae7:	90                   	nop
c000eae8:	83 ec 0c             	sub    esp,0xc
c000eaeb:	68 c8 17 02 c0       	push   0xc00217c8
c000eaf0:	e8 f8 26 00 00       	call   c00111ed <KePanic(char const*)>
c000eaf5:	83 c4 10             	add    esp,0x10
c000eaf8:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000eafd:	eb 69                	jmp    c000eb68 <ACPI::close(int, int, void*)+0xb0>
c000eaff:	90                   	nop
c000eb00:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c000eb05:	75 59                	jne    c000eb60 <ACPI::close(int, int, void*)+0xa8>
c000eb07:	a1 64 95 02 c0       	mov    eax,ds:0xc0029564
c000eb0c:	85 c0                	test   eax,eax
c000eb0e:	74 08                	je     c000eb18 <ACPI::close(int, int, void*)+0x60>
c000eb10:	a1 64 95 02 c0       	mov    eax,ds:0xc0029564
c000eb15:	ff d0                	call   eax
c000eb17:	90                   	nop
c000eb18:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c000eb1d:	8d 76 00             	lea    esi,[esi+0x0]
c000eb20:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c000eb25:	83 e0 02             	and    eax,0x2
c000eb28:	74 1e                	je     c000eb48 <ACPI::close(int, int, void*)+0x90>
c000eb2a:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c000eb31:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000eb35:	89 c2                	mov    edx,eax
c000eb37:	ec                   	in     al,dx
c000eb38:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000eb3c:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c000eb40:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000eb44:	eb da                	jmp    c000eb20 <ACPI::close(int, int, void*)+0x68>
c000eb46:	66 90                	xchg   ax,ax
c000eb48:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c000eb4f:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c000eb54:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c000eb58:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000eb5c:	ee                   	out    dx,al
c000eb5d:	8d 76 00             	lea    esi,[esi+0x0]
c000eb60:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000eb65:	8d 76 00             	lea    esi,[esi+0x0]
c000eb68:	83 c4 1c             	add    esp,0x1c
c000eb6b:	c3                   	ret    

c000eb6c <findRSDP()>:
c000eb6c:	83 ec 1c             	sub    esp,0x1c
c000eb6f:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000eb74:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000eb7a:	83 e0 04             	and    eax,0x4
c000eb7d:	0f b6 c0             	movzx  eax,al
c000eb80:	85 c0                	test   eax,eax
c000eb82:	75 08                	jne    c000eb8c <findRSDP()+0x20>
c000eb84:	b8 00 00 00 00       	mov    eax,0x0
c000eb89:	eb 75                	jmp    c000ec00 <findRSDP()+0x94>
c000eb8b:	90                   	nop
c000eb8c:	a1 e8 5e 02 c0       	mov    eax,ds:0xc0025ee8
c000eb91:	3d ff 07 00 00       	cmp    eax,0x7ff
c000eb96:	7f 1c                	jg     c000ebb4 <findRSDP()+0x48>
c000eb98:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000eb9d:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000eba3:	83 e2 fb             	and    edx,0xfffffffb
c000eba6:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000ebac:	b8 00 00 00 00       	mov    eax,0x0
c000ebb1:	eb 4d                	jmp    c000ec00 <findRSDP()+0x94>
c000ebb3:	90                   	nop
c000ebb4:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c000ebbc:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c000ebc4:	77 32                	ja     c000ebf8 <findRSDP()+0x8c>
c000ebc6:	83 ec 04             	sub    esp,0x4
c000ebc9:	6a 08                	push   0x8
c000ebcb:	68 63 18 02 c0       	push   0xc0021863
c000ebd0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ebd4:	e8 a7 17 ff ff       	call   c0000380 <memcmp>
c000ebd9:	83 c4 10             	add    esp,0x10
c000ebdc:	85 c0                	test   eax,eax
c000ebde:	0f 94 c0             	sete   al
c000ebe1:	0f b6 c0             	movzx  eax,al
c000ebe4:	85 c0                	test   eax,eax
c000ebe6:	74 08                	je     c000ebf0 <findRSDP()+0x84>
c000ebe8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ebec:	eb 12                	jmp    c000ec00 <findRSDP()+0x94>
c000ebee:	66 90                	xchg   ax,ax
c000ebf0:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c000ebf5:	eb c5                	jmp    c000ebbc <findRSDP()+0x50>
c000ebf7:	90                   	nop
c000ebf8:	b8 00 00 00 00       	mov    eax,0x0
c000ebfd:	8d 76 00             	lea    esi,[esi+0x0]
c000ec00:	83 c4 1c             	add    esp,0x1c
c000ec03:	c3                   	ret    

c000ec04 <loadACPITables(unsigned char*)>:
c000ec04:	57                   	push   edi
c000ec05:	56                   	push   esi
c000ec06:	53                   	push   ebx
c000ec07:	83 ec 60             	sub    esp,0x60
c000ec0a:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000ec0f:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000ec15:	83 e0 04             	and    eax,0x4
c000ec18:	0f b6 c0             	movzx  eax,al
c000ec1b:	85 c0                	test   eax,eax
c000ec1d:	0f 84 41 02 00 00    	je     c000ee64 <loadACPITables(unsigned char*)+0x260>
c000ec23:	a0 80 97 02 c0       	mov    al,ds:0xc0029780
c000ec28:	0f b6 c0             	movzx  eax,al
c000ec2b:	85 c0                	test   eax,eax
c000ec2d:	74 79                	je     c000eca8 <loadACPITables(unsigned char*)+0xa4>
c000ec2f:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000ec33:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000ec37:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000ec3b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000ec3e:	83 e8 24             	sub    eax,0x24
c000ec41:	c1 e8 03             	shr    eax,0x3
c000ec44:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000ec48:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c000ec50:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000ec54:	3b 44 24 4c          	cmp    eax,DWORD PTR [esp+0x4c]
c000ec58:	0f 8d ba 00 00 00    	jge    c000ed18 <loadACPITables(unsigned char*)+0x114>
c000ec5e:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000ec62:	83 c0 24             	add    eax,0x24
c000ec65:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000ec69:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000ec6d:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000ec71:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000ec75:	c1 e0 03             	shl    eax,0x3
c000ec78:	01 44 24 44          	add    DWORD PTR [esp+0x44],eax
c000ec7c:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000ec80:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000ec83:	8b 00                	mov    eax,DWORD PTR [eax]
c000ec85:	89 c1                	mov    ecx,eax
c000ec87:	a1 6c 95 02 c0       	mov    eax,ds:0xc002956c
c000ec8c:	8d 50 01             	lea    edx,[eax+0x1]
c000ec8f:	89 15 6c 95 02 c0    	mov    DWORD PTR ds:0xc002956c,edx
c000ec95:	89 ca                	mov    edx,ecx
c000ec97:	89 14 c5 84 95 02 c0 	mov    DWORD PTR [eax*8-0x3ffd6a7c],edx
c000ec9e:	83 44 24 5c 01       	add    DWORD PTR [esp+0x5c],0x1
c000eca3:	eb ab                	jmp    c000ec50 <loadACPITables(unsigned char*)+0x4c>
c000eca5:	8d 76 00             	lea    esi,[esi+0x0]
c000eca8:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000ecac:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000ecb0:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ecb4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000ecb7:	83 e8 24             	sub    eax,0x24
c000ecba:	c1 e8 02             	shr    eax,0x2
c000ecbd:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000ecc1:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c000ecc9:	8d 76 00             	lea    esi,[esi+0x0]
c000eccc:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000ecd0:	3b 44 24 3c          	cmp    eax,DWORD PTR [esp+0x3c]
c000ecd4:	7d 42                	jge    c000ed18 <loadACPITables(unsigned char*)+0x114>
c000ecd6:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000ecda:	83 c0 24             	add    eax,0x24
c000ecdd:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ece1:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000ece5:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000ece9:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000eced:	c1 e0 02             	shl    eax,0x2
c000ecf0:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c000ecf4:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000ecf8:	8b 08                	mov    ecx,DWORD PTR [eax]
c000ecfa:	a1 6c 95 02 c0       	mov    eax,ds:0xc002956c
c000ecff:	8d 50 01             	lea    edx,[eax+0x1]
c000ed02:	89 15 6c 95 02 c0    	mov    DWORD PTR ds:0xc002956c,edx
c000ed08:	89 ca                	mov    edx,ecx
c000ed0a:	89 14 c5 84 95 02 c0 	mov    DWORD PTR [eax*8-0x3ffd6a7c],edx
c000ed11:	83 44 24 58 01       	add    DWORD PTR [esp+0x58],0x1
c000ed16:	eb b4                	jmp    c000eccc <loadACPITables(unsigned char*)+0xc8>
c000ed18:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000ed20:	a1 6c 95 02 c0       	mov    eax,ds:0xc002956c
c000ed25:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c000ed29:	0f 8d 39 01 00 00    	jge    c000ee68 <loadACPITables(unsigned char*)+0x264>
c000ed2f:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000ed33:	8b 04 c5 84 95 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd6a7c]
c000ed3a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000ed3e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ed42:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000ed46:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ed4a:	25 ff 0f 00 00       	and    eax,0xfff
c000ed4f:	89 c6                	mov    esi,eax
c000ed51:	8b 1d b0 5f 02 c0    	mov    ebx,DWORD PTR ds:0xc0025fb0
c000ed57:	83 ec 0c             	sub    esp,0xc
c000ed5a:	6a 01                	push   0x1
c000ed5c:	e8 ac a8 ff ff       	call   c000960d <Virt::allocateKernelVirtualPages(int)>
c000ed61:	83 c4 10             	add    esp,0x10
c000ed64:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000ed68:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000ed6e:	83 ec 0c             	sub    esp,0xc
c000ed71:	6a 01                	push   0x1
c000ed73:	6a 01                	push   0x1
c000ed75:	50                   	push   eax
c000ed76:	52                   	push   edx
c000ed77:	53                   	push   ebx
c000ed78:	e8 9d b1 ff ff       	call   c0009f1a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000ed7d:	83 c4 20             	add    esp,0x20
c000ed80:	09 f0                	or     eax,esi
c000ed82:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000ed86:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000ed8a:	c1 e0 03             	shl    eax,0x3
c000ed8d:	05 80 95 02 c0       	add    eax,0xc0029580
c000ed92:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000ed96:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ed9a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ed9e:	c7 44 24 14 04 00 00 00 	mov    DWORD PTR [esp+0x14],0x4
c000eda6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000edaa:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000edae:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000edb2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000edb6:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000edba:	89 c6                	mov    esi,eax
c000edbc:	89 d7                	mov    edi,edx
c000edbe:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000edc0:	89 c8                	mov    eax,ecx
c000edc2:	89 fa                	mov    edx,edi
c000edc4:	89 f3                	mov    ebx,esi
c000edc6:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000edca:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000edce:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000edd2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000edd6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000edd9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000eddd:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ede1:	05 00 10 00 00       	add    eax,0x1000
c000ede6:	c1 e8 0c             	shr    eax,0xc
c000ede9:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000eded:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000edf1:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000edf5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000edf9:	25 ff 0f 00 00       	and    eax,0xfff
c000edfe:	89 c6                	mov    esi,eax
c000ee00:	8b 1d b0 5f 02 c0    	mov    ebx,DWORD PTR ds:0xc0025fb0
c000ee06:	83 ec 0c             	sub    esp,0xc
c000ee09:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000ee0d:	e8 fb a7 ff ff       	call   c000960d <Virt::allocateKernelVirtualPages(int)>
c000ee12:	83 c4 10             	add    esp,0x10
c000ee15:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000ee19:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000ee1f:	83 ec 0c             	sub    esp,0xc
c000ee22:	6a 01                	push   0x1
c000ee24:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ee28:	50                   	push   eax
c000ee29:	52                   	push   edx
c000ee2a:	53                   	push   ebx
c000ee2b:	e8 ea b0 ff ff       	call   c0009f1a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000ee30:	83 c4 20             	add    esp,0x20
c000ee33:	09 f0                	or     eax,esi
c000ee35:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000ee39:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ee3d:	83 ec 0c             	sub    esp,0xc
c000ee40:	50                   	push   eax
c000ee41:	e8 e5 aa ff ff       	call   c000992b <Virt::freeKernelVirtualPages(unsigned long)>
c000ee46:	83 c4 10             	add    esp,0x10
c000ee49:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000ee4d:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000ee51:	89 14 c5 84 95 02 c0 	mov    DWORD PTR [eax*8-0x3ffd6a7c],edx
c000ee58:	83 44 24 54 01       	add    DWORD PTR [esp+0x54],0x1
c000ee5d:	e9 be fe ff ff       	jmp    c000ed20 <loadACPITables(unsigned char*)+0x11c>
c000ee62:	66 90                	xchg   ax,ax
c000ee64:	90                   	nop
c000ee65:	8d 76 00             	lea    esi,[esi+0x0]
c000ee68:	83 c4 60             	add    esp,0x60
c000ee6b:	5b                   	pop    ebx
c000ee6c:	5e                   	pop    esi
c000ee6d:	5f                   	pop    edi
c000ee6e:	c3                   	ret    
c000ee6f:	90                   	nop

c000ee70 <findRSDT(unsigned char*)>:
c000ee70:	57                   	push   edi
c000ee71:	56                   	push   esi
c000ee72:	53                   	push   ebx
c000ee73:	83 ec 50             	sub    esp,0x50
c000ee76:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000ee7b:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000ee81:	83 e0 04             	and    eax,0x4
c000ee84:	0f b6 c0             	movzx  eax,al
c000ee87:	85 c0                	test   eax,eax
c000ee89:	75 0d                	jne    c000ee98 <findRSDT(unsigned char*)+0x28>
c000ee8b:	b8 00 00 00 00       	mov    eax,0x0
c000ee90:	e9 2b 01 00 00       	jmp    c000efc0 <findRSDT(unsigned char*)+0x150>
c000ee95:	8d 76 00             	lea    esi,[esi+0x0]
c000ee98:	89 e0                	mov    eax,esp
c000ee9a:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000ee9e:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000eea2:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000eea6:	c7 44 24 34 24 00 00 00 	mov    DWORD PTR [esp+0x34],0x24
c000eeae:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000eeb2:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000eeb6:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000eeba:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000eebe:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000eec2:	89 c6                	mov    esi,eax
c000eec4:	89 d7                	mov    edi,edx
c000eec6:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000eec8:	89 c8                	mov    eax,ecx
c000eeca:	89 fa                	mov    edx,edi
c000eecc:	89 f3                	mov    ebx,esi
c000eece:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c000eed2:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000eed6:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000eeda:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000eede:	88 44 24 4b          	mov    BYTE PTR [esp+0x4b],al
c000eee2:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c000eeea:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000eeee:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000eef2:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000eef6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eefa:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000eefe:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000ef02:	25 ff 0f 00 00       	and    eax,0xfff
c000ef07:	89 c6                	mov    esi,eax
c000ef09:	8b 1d b0 5f 02 c0    	mov    ebx,DWORD PTR ds:0xc0025fb0
c000ef0f:	83 ec 0c             	sub    esp,0xc
c000ef12:	6a 02                	push   0x2
c000ef14:	e8 f4 a6 ff ff       	call   c000960d <Virt::allocateKernelVirtualPages(int)>
c000ef19:	83 c4 10             	add    esp,0x10
c000ef1c:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000ef20:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000ef26:	83 ec 0c             	sub    esp,0xc
c000ef29:	6a 01                	push   0x1
c000ef2b:	6a 02                	push   0x2
c000ef2d:	50                   	push   eax
c000ef2e:	52                   	push   edx
c000ef2f:	53                   	push   ebx
c000ef30:	e8 e5 af ff ff       	call   c0009f1a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000ef35:	83 c4 20             	add    esp,0x20
c000ef38:	09 f0                	or     eax,esi
c000ef3a:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000ef3e:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ef42:	25 ff 0f 00 00       	and    eax,0xfff
c000ef47:	89 c6                	mov    esi,eax
c000ef49:	8b 1d b0 5f 02 c0    	mov    ebx,DWORD PTR ds:0xc0025fb0
c000ef4f:	83 ec 0c             	sub    esp,0xc
c000ef52:	6a 02                	push   0x2
c000ef54:	e8 b4 a6 ff ff       	call   c000960d <Virt::allocateKernelVirtualPages(int)>
c000ef59:	83 c4 10             	add    esp,0x10
c000ef5c:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000ef60:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000ef66:	83 ec 0c             	sub    esp,0xc
c000ef69:	6a 01                	push   0x1
c000ef6b:	6a 02                	push   0x2
c000ef6d:	50                   	push   eax
c000ef6e:	52                   	push   edx
c000ef6f:	53                   	push   ebx
c000ef70:	e8 a5 af ff ff       	call   c0009f1a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000ef75:	83 c4 20             	add    esp,0x20
c000ef78:	09 f0                	or     eax,esi
c000ef7a:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000ef7e:	0f b6 44 24 4b       	movzx  eax,BYTE PTR [esp+0x4b]
c000ef83:	85 c0                	test   eax,eax
c000ef85:	75 11                	jne    c000ef98 <findRSDT(unsigned char*)+0x128>
c000ef87:	c6 05 80 97 02 c0 00 	mov    BYTE PTR ds:0xc0029780,0x0
c000ef8e:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ef92:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000ef96:	eb 24                	jmp    c000efbc <findRSDT(unsigned char*)+0x14c>
c000ef98:	0f b6 44 24 4b       	movzx  eax,BYTE PTR [esp+0x4b]
c000ef9d:	83 f8 02             	cmp    eax,0x2
c000efa0:	75 12                	jne    c000efb4 <findRSDT(unsigned char*)+0x144>
c000efa2:	c6 05 80 97 02 c0 01 	mov    BYTE PTR ds:0xc0029780,0x1
c000efa9:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000efad:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000efb1:	eb 09                	jmp    c000efbc <findRSDT(unsigned char*)+0x14c>
c000efb3:	90                   	nop
c000efb4:	b8 00 00 00 00       	mov    eax,0x0
c000efb9:	eb 05                	jmp    c000efc0 <findRSDT(unsigned char*)+0x150>
c000efbb:	90                   	nop
c000efbc:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000efc0:	83 c4 50             	add    esp,0x50
c000efc3:	5b                   	pop    ebx
c000efc4:	5e                   	pop    esi
c000efc5:	5f                   	pop    edi
c000efc6:	c3                   	ret    
c000efc7:	90                   	nop

c000efc8 <findDataTable(unsigned char*, char*)>:
c000efc8:	83 ec 1c             	sub    esp,0x1c
c000efcb:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000efd0:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000efd6:	83 e0 04             	and    eax,0x4
c000efd9:	0f b6 c0             	movzx  eax,al
c000efdc:	85 c0                	test   eax,eax
c000efde:	75 08                	jne    c000efe8 <findDataTable(unsigned char*, char*)+0x20>
c000efe0:	b8 00 00 00 00       	mov    eax,0x0
c000efe5:	eb 5d                	jmp    c000f044 <findDataTable(unsigned char*, char*)+0x7c>
c000efe7:	90                   	nop
c000efe8:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000eff0:	a1 6c 95 02 c0       	mov    eax,ds:0xc002956c
c000eff5:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c000eff9:	7d 41                	jge    c000f03c <findDataTable(unsigned char*, char*)+0x74>
c000effb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000efff:	c1 e0 03             	shl    eax,0x3
c000f002:	05 80 95 02 c0       	add    eax,0xc0029580
c000f007:	83 ec 04             	sub    esp,0x4
c000f00a:	6a 04                	push   0x4
c000f00c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f010:	50                   	push   eax
c000f011:	e8 6a 13 ff ff       	call   c0000380 <memcmp>
c000f016:	83 c4 10             	add    esp,0x10
c000f019:	85 c0                	test   eax,eax
c000f01b:	0f 94 c0             	sete   al
c000f01e:	0f b6 c0             	movzx  eax,al
c000f021:	85 c0                	test   eax,eax
c000f023:	74 0f                	je     c000f034 <findDataTable(unsigned char*, char*)+0x6c>
c000f025:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f029:	8b 04 c5 84 95 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd6a7c]
c000f030:	eb 12                	jmp    c000f044 <findDataTable(unsigned char*, char*)+0x7c>
c000f032:	66 90                	xchg   ax,ax
c000f034:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c000f039:	eb b5                	jmp    c000eff0 <findDataTable(unsigned char*, char*)+0x28>
c000f03b:	90                   	nop
c000f03c:	b8 00 00 00 00       	mov    eax,0x0
c000f041:	8d 76 00             	lea    esi,[esi+0x0]
c000f044:	83 c4 1c             	add    esp,0x1c
c000f047:	c3                   	ret    

c000f048 <scanMADT()>:
c000f048:	53                   	push   ebx
c000f049:	83 ec 38             	sub    esp,0x38
c000f04c:	a1 d0 5e 02 c0       	mov    eax,ds:0xc0025ed0
c000f051:	25 00 04 00 00       	and    eax,0x400
c000f056:	74 14                	je     c000f06c <scanMADT()+0x24>
c000f058:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000f05d:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000f063:	83 e2 fb             	and    edx,0xfffffffb
c000f066:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000f06c:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000f071:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000f077:	83 e0 04             	and    eax,0x4
c000f07a:	0f b6 c0             	movzx  eax,al
c000f07d:	85 c0                	test   eax,eax
c000f07f:	0f 84 6b 04 00 00    	je     c000f4f0 <scanMADT()+0x4a8>
c000f085:	e8 e2 fa ff ff       	call   c000eb6c <findRSDP()>
c000f08a:	a3 8c 97 02 c0       	mov    ds:0xc002978c,eax
c000f08f:	a1 8c 97 02 c0       	mov    eax,ds:0xc002978c
c000f094:	85 c0                	test   eax,eax
c000f096:	75 1c                	jne    c000f0b4 <scanMADT()+0x6c>
c000f098:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000f09d:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000f0a3:	83 e2 fb             	and    edx,0xfffffffb
c000f0a6:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000f0ac:	e9 47 04 00 00       	jmp    c000f4f8 <scanMADT()+0x4b0>
c000f0b1:	8d 76 00             	lea    esi,[esi+0x0]
c000f0b4:	a1 8c 97 02 c0       	mov    eax,ds:0xc002978c
c000f0b9:	83 ec 0c             	sub    esp,0xc
c000f0bc:	50                   	push   eax
c000f0bd:	e8 ae fd ff ff       	call   c000ee70 <findRSDT(unsigned char*)>
c000f0c2:	83 c4 10             	add    esp,0x10
c000f0c5:	a3 88 97 02 c0       	mov    ds:0xc0029788,eax
c000f0ca:	a1 88 97 02 c0       	mov    eax,ds:0xc0029788
c000f0cf:	85 c0                	test   eax,eax
c000f0d1:	75 19                	jne    c000f0ec <scanMADT()+0xa4>
c000f0d3:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000f0d8:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000f0de:	83 e2 fb             	and    edx,0xfffffffb
c000f0e1:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000f0e7:	e9 0c 04 00 00       	jmp    c000f4f8 <scanMADT()+0x4b0>
c000f0ec:	a1 88 97 02 c0       	mov    eax,ds:0xc0029788
c000f0f1:	83 ec 0c             	sub    esp,0xc
c000f0f4:	50                   	push   eax
c000f0f5:	e8 0a fb ff ff       	call   c000ec04 <loadACPITables(unsigned char*)>
c000f0fa:	83 c4 10             	add    esp,0x10
c000f0fd:	a1 88 97 02 c0       	mov    eax,ds:0xc0029788
c000f102:	83 ec 08             	sub    esp,0x8
c000f105:	68 6c 18 02 c0       	push   0xc002186c
c000f10a:	50                   	push   eax
c000f10b:	e8 b8 fe ff ff       	call   c000efc8 <findDataTable(unsigned char*, char*)>
c000f110:	83 c4 10             	add    esp,0x10
c000f113:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000f117:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c000f11c:	75 1a                	jne    c000f138 <scanMADT()+0xf0>
c000f11e:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000f123:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000f129:	83 e2 fe             	and    edx,0xfffffffe
c000f12c:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000f132:	e9 c1 03 00 00       	jmp    c000f4f8 <scanMADT()+0x4b0>
c000f137:	90                   	nop
c000f138:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000f140:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f144:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000f147:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c000f14b:	0f 87 a7 03 00 00    	ja     c000f4f8 <scanMADT()+0x4b0>
c000f151:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c000f159:	0f 87 99 03 00 00    	ja     c000f4f8 <scanMADT()+0x4b0>
c000f15f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f163:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000f167:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f16b:	8d 50 01             	lea    edx,[eax+0x1]
c000f16e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f172:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f176:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000f17a:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c000f17e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f182:	8d 50 01             	lea    edx,[eax+0x1]
c000f185:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f189:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f18d:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000f191:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c000f195:	0f b6 44 24 22       	movzx  eax,BYTE PTR [esp+0x22]
c000f19a:	83 f8 02             	cmp    eax,0x2
c000f19d:	0f 86 51 03 00 00    	jbe    c000f4f4 <scanMADT()+0x4ac>
c000f1a3:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000f1a8:	85 c0                	test   eax,eax
c000f1aa:	75 58                	jne    c000f204 <scanMADT()+0x1bc>
c000f1ac:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f1b0:	8d 50 01             	lea    edx,[eax+0x1]
c000f1b3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f1b7:	8a 15 80 99 02 c0    	mov    dl,BYTE PTR ds:0xc0029980
c000f1bd:	0f b6 d2             	movzx  edx,dl
c000f1c0:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000f1c4:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000f1c8:	88 82 c0 99 02 c0    	mov    BYTE PTR [edx-0x3ffd6640],al
c000f1ce:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f1d2:	8d 50 01             	lea    edx,[eax+0x1]
c000f1d5:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f1d9:	8a 15 80 99 02 c0    	mov    dl,BYTE PTR ds:0xc0029980
c000f1df:	8d 4a 01             	lea    ecx,[edx+0x1]
c000f1e2:	88 0d 80 99 02 c0    	mov    BYTE PTR ds:0xc0029980,cl
c000f1e8:	0f b6 d2             	movzx  edx,dl
c000f1eb:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000f1ef:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000f1f3:	88 82 a0 99 02 c0    	mov    BYTE PTR [edx-0x3ffd6660],al
c000f1f9:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000f1fe:	e9 d9 02 00 00       	jmp    c000f4dc <scanMADT()+0x494>
c000f203:	90                   	nop
c000f204:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000f209:	83 f8 01             	cmp    eax,0x1
c000f20c:	0f 85 1a 01 00 00    	jne    c000f32c <scanMADT()+0x2e4>
c000f212:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f216:	8d 50 01             	lea    edx,[eax+0x1]
c000f219:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f21d:	8a 15 40 98 02 c0    	mov    dl,BYTE PTR ds:0xc0029840
c000f223:	0f b6 d2             	movzx  edx,dl
c000f226:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000f22a:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000f22e:	88 82 60 98 02 c0    	mov    BYTE PTR [edx-0x3ffd67a0],al
c000f234:	83 44 24 2c 01       	add    DWORD PTR [esp+0x2c],0x1
c000f239:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f23d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f241:	01 d0                	add    eax,edx
c000f243:	83 c0 2c             	add    eax,0x2c
c000f246:	8a 00                	mov    al,BYTE PTR [eax]
c000f248:	0f b6 d0             	movzx  edx,al
c000f24b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f24f:	8d 48 01             	lea    ecx,[eax+0x1]
c000f252:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f256:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000f25a:	0f b6 c0             	movzx  eax,al
c000f25d:	c1 e0 08             	shl    eax,0x8
c000f260:	89 d1                	mov    ecx,edx
c000f262:	09 c1                	or     ecx,eax
c000f264:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f268:	8d 50 02             	lea    edx,[eax+0x2]
c000f26b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f26f:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000f273:	0f b6 c0             	movzx  eax,al
c000f276:	c1 e0 10             	shl    eax,0x10
c000f279:	09 c1                	or     ecx,eax
c000f27b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f27f:	8d 50 03             	lea    edx,[eax+0x3]
c000f282:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f286:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000f28a:	0f b6 c0             	movzx  eax,al
c000f28d:	c1 e0 18             	shl    eax,0x18
c000f290:	09 c1                	or     ecx,eax
c000f292:	89 ca                	mov    edx,ecx
c000f294:	a0 40 98 02 c0       	mov    al,ds:0xc0029840
c000f299:	0f b6 c0             	movzx  eax,al
c000f29c:	89 14 85 80 98 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6780],edx
c000f2a3:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000f2a8:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f2ac:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f2b0:	01 d0                	add    eax,edx
c000f2b2:	83 c0 2c             	add    eax,0x2c
c000f2b5:	8a 00                	mov    al,BYTE PTR [eax]
c000f2b7:	0f b6 d0             	movzx  edx,al
c000f2ba:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f2be:	8d 48 01             	lea    ecx,[eax+0x1]
c000f2c1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f2c5:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000f2c9:	0f b6 c0             	movzx  eax,al
c000f2cc:	c1 e0 08             	shl    eax,0x8
c000f2cf:	89 d1                	mov    ecx,edx
c000f2d1:	09 c1                	or     ecx,eax
c000f2d3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f2d7:	8d 50 02             	lea    edx,[eax+0x2]
c000f2da:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f2de:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000f2e2:	0f b6 c0             	movzx  eax,al
c000f2e5:	c1 e0 10             	shl    eax,0x10
c000f2e8:	09 c1                	or     ecx,eax
c000f2ea:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f2ee:	8d 50 03             	lea    edx,[eax+0x3]
c000f2f1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f2f5:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000f2f9:	0f b6 c0             	movzx  eax,al
c000f2fc:	c1 e0 18             	shl    eax,0x18
c000f2ff:	09 c1                	or     ecx,eax
c000f301:	89 ca                	mov    edx,ecx
c000f303:	a0 40 98 02 c0       	mov    al,ds:0xc0029840
c000f308:	0f b6 c0             	movzx  eax,al
c000f30b:	89 14 85 00 99 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6700],edx
c000f312:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000f317:	a0 40 98 02 c0       	mov    al,ds:0xc0029840
c000f31c:	83 c0 01             	add    eax,0x1
c000f31f:	a2 40 98 02 c0       	mov    ds:0xc0029840,al
c000f324:	e9 b3 01 00 00       	jmp    c000f4dc <scanMADT()+0x494>
c000f329:	8d 76 00             	lea    esi,[esi+0x0]
c000f32c:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000f331:	83 f8 02             	cmp    eax,0x2
c000f334:	0f 85 ea 00 00 00    	jne    c000f424 <scanMADT()+0x3dc>
c000f33a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f33e:	8d 50 01             	lea    edx,[eax+0x1]
c000f341:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f345:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f349:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000f34d:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c000f351:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f355:	8d 50 01             	lea    edx,[eax+0x1]
c000f358:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f35c:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f360:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000f364:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c000f368:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f36c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f370:	01 d0                	add    eax,edx
c000f372:	83 c0 2c             	add    eax,0x2c
c000f375:	8a 00                	mov    al,BYTE PTR [eax]
c000f377:	0f b6 d0             	movzx  edx,al
c000f37a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f37e:	8d 48 01             	lea    ecx,[eax+0x1]
c000f381:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f385:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000f389:	0f b6 c0             	movzx  eax,al
c000f38c:	c1 e0 08             	shl    eax,0x8
c000f38f:	89 d1                	mov    ecx,edx
c000f391:	09 c1                	or     ecx,eax
c000f393:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f397:	8d 50 02             	lea    edx,[eax+0x2]
c000f39a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f39e:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000f3a2:	0f b6 c0             	movzx  eax,al
c000f3a5:	c1 e0 10             	shl    eax,0x10
c000f3a8:	09 c1                	or     ecx,eax
c000f3aa:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f3ae:	8d 50 03             	lea    edx,[eax+0x3]
c000f3b1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f3b5:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000f3b9:	0f b6 c0             	movzx  eax,al
c000f3bc:	c1 e0 18             	shl    eax,0x18
c000f3bf:	09 c8                	or     eax,ecx
c000f3c1:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000f3c5:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000f3ca:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f3ce:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f3d2:	01 d0                	add    eax,edx
c000f3d4:	83 c0 2c             	add    eax,0x2c
c000f3d7:	8a 00                	mov    al,BYTE PTR [eax]
c000f3d9:	0f b6 c0             	movzx  eax,al
c000f3dc:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000f3e0:	8d 4a 01             	lea    ecx,[edx+0x1]
c000f3e3:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f3e7:	8a 54 0a 2c          	mov    dl,BYTE PTR [edx+ecx*1+0x2c]
c000f3eb:	0f b6 d2             	movzx  edx,dl
c000f3ee:	c1 e2 08             	shl    edx,0x8
c000f3f1:	09 d0                	or     eax,edx
c000f3f3:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c000f3f8:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c000f3fd:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c000f402:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f406:	88 90 68 2f 02 c0    	mov    BYTE PTR [eax-0x3ffdd098],dl
c000f40c:	0f b6 54 24 20       	movzx  edx,BYTE PTR [esp+0x20]
c000f411:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c000f416:	66 89 84 12 20 98 02 c0 	mov    WORD PTR [edx+edx*1-0x3ffd67e0],ax
c000f41e:	e9 b9 00 00 00       	jmp    c000f4dc <scanMADT()+0x494>
c000f423:	90                   	nop
c000f424:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000f429:	83 f8 04             	cmp    eax,0x4
c000f42c:	0f 85 9a 00 00 00    	jne    c000f4cc <scanMADT()+0x484>
c000f432:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f436:	8d 50 01             	lea    edx,[eax+0x1]
c000f439:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f43d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f441:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000f445:	0f b6 c0             	movzx  eax,al
c000f448:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000f44c:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f450:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f454:	01 d0                	add    eax,edx
c000f456:	83 c0 2c             	add    eax,0x2c
c000f459:	8a 00                	mov    al,BYTE PTR [eax]
c000f45b:	0f b6 d0             	movzx  edx,al
c000f45e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f462:	8d 48 01             	lea    ecx,[eax+0x1]
c000f465:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f469:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000f46d:	0f b6 c0             	movzx  eax,al
c000f470:	c1 e0 08             	shl    eax,0x8
c000f473:	09 d0                	or     eax,edx
c000f475:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000f479:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c000f47e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f482:	8d 50 01             	lea    edx,[eax+0x1]
c000f485:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f489:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f48d:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000f491:	0f b6 c0             	movzx  eax,al
c000f494:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000f498:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f49c:	c1 e0 08             	shl    eax,0x8
c000f49f:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000f4a3:	89 c1                	mov    ecx,eax
c000f4a5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f4a9:	c1 e0 18             	shl    eax,0x18
c000f4ac:	89 c3                	mov    ebx,eax
c000f4ae:	a1 90 97 02 c0       	mov    eax,ds:0xc0029790
c000f4b3:	8d 50 01             	lea    edx,[eax+0x1]
c000f4b6:	89 15 90 97 02 c0    	mov    DWORD PTR ds:0xc0029790,edx
c000f4bc:	09 d9                	or     ecx,ebx
c000f4be:	89 ca                	mov    edx,ecx
c000f4c0:	89 14 85 a0 97 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6860],edx
c000f4c7:	eb 13                	jmp    c000f4dc <scanMADT()+0x494>
c000f4c9:	8d 76 00             	lea    esi,[esi+0x0]
c000f4cc:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000f4d1:	83 f8 05             	cmp    eax,0x5
c000f4d4:	75 06                	jne    c000f4dc <scanMADT()+0x494>
c000f4d6:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c000f4db:	90                   	nop
c000f4dc:	0f b6 54 24 22       	movzx  edx,BYTE PTR [esp+0x22]
c000f4e1:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000f4e5:	01 d0                	add    eax,edx
c000f4e7:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000f4eb:	e9 50 fc ff ff       	jmp    c000f140 <scanMADT()+0xf8>
c000f4f0:	90                   	nop
c000f4f1:	eb 05                	jmp    c000f4f8 <scanMADT()+0x4b0>
c000f4f3:	90                   	nop
c000f4f4:	90                   	nop
c000f4f5:	8d 76 00             	lea    esi,[esi+0x0]
c000f4f8:	83 c4 38             	add    esp,0x38
c000f4fb:	5b                   	pop    ebx
c000f4fc:	c3                   	ret    
c000f4fd:	90                   	nop
c000f4fe:	66 90                	xchg   ax,ax

c000f500 <ACPI::ACPI()>:
c000f500:	83 ec 0c             	sub    esp,0xc
c000f503:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f507:	83 ec 08             	sub    esp,0x8
c000f50a:	68 71 18 02 c0       	push   0xc0021871
c000f50f:	50                   	push   eax
c000f510:	e8 65 d2 ff ff       	call   c000c77a <Device::Device(char const*)>
c000f515:	83 c4 10             	add    esp,0x10
c000f518:	ba e0 19 02 c0       	mov    edx,0xc00219e0
c000f51d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f521:	89 10                	mov    DWORD PTR [eax],edx
c000f523:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f527:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c000f52e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f532:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c000f53c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f540:	c7 80 60 12 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1260],0x0
c000f54a:	e8 f9 fa ff ff       	call   c000f048 <scanMADT()>
c000f54f:	90                   	nop
c000f550:	83 c4 0c             	add    esp,0xc
c000f553:	c3                   	ret    

c000f554 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c000f554:	83 ec 2c             	sub    esp,0x2c
c000f557:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000f55b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000f55f:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000f563:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c000f567:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c000f56c:	88 d0                	mov    al,dl
c000f56e:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000f572:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000f577:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000f57f:	90                   	nop
c000f580:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000f584:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000f58a:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c000f58e:	0f 8d b0 00 00 00    	jge    c000f644 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xf0>
c000f594:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000f598:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000f59c:	83 c2 2a             	add    edx,0x2a
c000f59f:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c000f5a3:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c000f5a8:	0f b7 c0             	movzx  eax,ax
c000f5ab:	39 c2                	cmp    edx,eax
c000f5ad:	0f 85 85 00 00 00    	jne    c000f638 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xe4>
c000f5b3:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000f5b7:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000f5bb:	83 c2 2a             	add    edx,0x2a
c000f5be:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c000f5c2:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c000f5c7:	0f b6 c0             	movzx  eax,al
c000f5ca:	39 c2                	cmp    edx,eax
c000f5cc:	75 6a                	jne    c000f638 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xe4>
c000f5ce:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c000f5d3:	85 c0                	test   eax,eax
c000f5d5:	74 3d                	je     c000f614 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xc0>
c000f5d7:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000f5db:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000f5df:	83 c2 2a             	add    edx,0x2a
c000f5e2:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c000f5e6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f5ea:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000f5ed:	39 c2                	cmp    edx,eax
c000f5ef:	74 13                	je     c000f604 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xb0>
c000f5f1:	83 ec 0c             	sub    esp,0xc
c000f5f4:	68 ec 17 02 c0       	push   0xc00217ec
c000f5f9:	e8 ef 1b 00 00       	call   c00111ed <KePanic(char const*)>
c000f5fe:	83 c4 10             	add    esp,0x10
c000f601:	8d 76 00             	lea    esi,[esi+0x0]
c000f604:	83 ec 0c             	sub    esp,0xc
c000f607:	68 76 18 02 c0       	push   0xc0021876
c000f60c:	e8 dc 1b 00 00       	call   c00111ed <KePanic(char const*)>
c000f611:	83 c4 10             	add    esp,0x10
c000f614:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000f618:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000f61c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000f620:	83 c2 2a             	add    edx,0x2a
c000f623:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c000f627:	8b 02                	mov    eax,DWORD PTR [edx]
c000f629:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c000f62c:	89 01                	mov    DWORD PTR [ecx],eax
c000f62e:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000f631:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000f636:	66 90                	xchg   ax,ax
c000f638:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c000f63d:	e9 3e ff ff ff       	jmp    c000f580 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2c>
c000f642:	66 90                	xchg   ax,ax
c000f644:	90                   	nop
c000f645:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f649:	83 c4 2c             	add    esp,0x2c
c000f64c:	c2 04 00             	ret    0x4
c000f64f:	90                   	nop

c000f650 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c000f650:	83 ec 1c             	sub    esp,0x1c
c000f653:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f657:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000f65b:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000f65f:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c000f664:	88 c8                	mov    al,cl
c000f666:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c000f66a:	88 d0                	mov    al,dl
c000f66c:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000f670:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f674:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000f67a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f67e:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c000f681:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c000f685:	88 54 c8 0f          	mov    BYTE PTR [eax+ecx*8+0xf],dl
c000f689:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f68d:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000f693:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000f697:	8d 48 2a             	lea    ecx,[eax+0x2a]
c000f69a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f69e:	66 89 44 ca 0c       	mov    WORD PTR [edx+ecx*8+0xc],ax
c000f6a3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f6a7:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000f6ad:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c000f6b1:	83 c0 01             	add    eax,0x1
c000f6b4:	88 c1                	mov    cl,al
c000f6b6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f6ba:	83 c2 2a             	add    edx,0x2a
c000f6bd:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c000f6c1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f6c5:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000f6cb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f6cf:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c000f6d2:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000f6d6:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c000f6da:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f6de:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000f6e4:	8d 50 01             	lea    edx,[eax+0x1]
c000f6e7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f6eb:	89 90 5c 11 00 00    	mov    DWORD PTR [eax+0x115c],edx
c000f6f1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f6f5:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000f6fb:	3d 00 02 00 00       	cmp    eax,0x200
c000f700:	75 12                	jne    c000f714 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xc4>
c000f702:	83 ec 0c             	sub    esp,0xc
c000f705:	68 85 18 02 c0       	push   0xc0021885
c000f70a:	e8 de 1a 00 00       	call   c00111ed <KePanic(char const*)>
c000f70f:	83 c4 10             	add    esp,0x10
c000f712:	66 90                	xchg   ax,ax
c000f714:	90                   	nop
c000f715:	83 c4 1c             	add    esp,0x1c
c000f718:	c3                   	ret    
c000f719:	90                   	nop
c000f71a:	66 90                	xchg   ax,ax

c000f71c <ACPI::setScreenBrightnessLevel(void*, int)>:
c000f71c:	b8 00 00 00 00       	mov    eax,0x0
c000f721:	c3                   	ret    
c000f722:	66 90                	xchg   ax,ax

c000f724 <ACPI::detectPCI()>:
c000f724:	53                   	push   ebx
c000f725:	83 ec 28             	sub    esp,0x28
c000f728:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000f72d:	c6 44 24 1e 00       	mov    BYTE PTR [esp+0x1e],0x0
c000f732:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000f737:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000f73d:	83 e0 04             	and    eax,0x4
c000f740:	0f b6 c0             	movzx  eax,al
c000f743:	85 c0                	test   eax,eax
c000f745:	74 2d                	je     c000f774 <ACPI::detectPCI()+0x50>
c000f747:	a1 88 97 02 c0       	mov    eax,ds:0xc0029788
c000f74c:	83 ec 08             	sub    esp,0x8
c000f74f:	68 a2 18 02 c0       	push   0xc00218a2
c000f754:	50                   	push   eax
c000f755:	e8 6e f8 ff ff       	call   c000efc8 <findDataTable(unsigned char*, char*)>
c000f75a:	83 c4 10             	add    esp,0x10
c000f75d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000f761:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000f766:	74 0c                	je     c000f774 <ACPI::detectPCI()+0x50>
c000f768:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000f76d:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000f772:	66 90                	xchg   ax,ax
c000f774:	c7 44 24 14 5f 0c 00 00 	mov    DWORD PTR [esp+0x14],0xc5f
c000f77c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f780:	8a 00                	mov    al,BYTE PTR [eax]
c000f782:	0f b6 c0             	movzx  eax,al
c000f785:	83 f8 01             	cmp    eax,0x1
c000f788:	75 0e                	jne    c000f798 <ACPI::detectPCI()+0x74>
c000f78a:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000f78f:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000f794:	eb 2e                	jmp    c000f7c4 <ACPI::detectPCI()+0xa0>
c000f796:	66 90                	xchg   ax,ax
c000f798:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f79c:	8a 00                	mov    al,BYTE PTR [eax]
c000f79e:	0f b6 c0             	movzx  eax,al
c000f7a1:	83 f8 02             	cmp    eax,0x2
c000f7a4:	75 1e                	jne    c000f7c4 <ACPI::detectPCI()+0xa0>
c000f7a6:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000f7ab:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c000f7b0:	85 c0                	test   eax,eax
c000f7b2:	74 10                	je     c000f7c4 <ACPI::detectPCI()+0xa0>
c000f7b4:	83 ec 0c             	sub    esp,0xc
c000f7b7:	68 1c 18 02 c0       	push   0xc002181c
c000f7bc:	e8 2c 1a 00 00       	call   c00111ed <KePanic(char const*)>
c000f7c1:	83 c4 10             	add    esp,0x10
c000f7c4:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c000f7c8:	83 f0 01             	xor    eax,0x1
c000f7cb:	0f b6 c0             	movzx  eax,al
c000f7ce:	85 c0                	test   eax,eax
c000f7d0:	74 46                	je     c000f818 <ACPI::detectPCI()+0xf4>
c000f7d2:	e8 59 09 ff ff       	call   c0000130 <manualPCIProbe>
c000f7d7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000f7db:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000f7e0:	75 0e                	jne    c000f7f0 <ACPI::detectPCI()+0xcc>
c000f7e2:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000f7e7:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000f7ec:	eb 2a                	jmp    c000f818 <ACPI::detectPCI()+0xf4>
c000f7ee:	66 90                	xchg   ax,ax
c000f7f0:	83 7c 24 10 02       	cmp    DWORD PTR [esp+0x10],0x2
c000f7f5:	75 21                	jne    c000f818 <ACPI::detectPCI()+0xf4>
c000f7f7:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000f7fc:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c000f801:	85 c0                	test   eax,eax
c000f803:	74 13                	je     c000f818 <ACPI::detectPCI()+0xf4>
c000f805:	83 ec 0c             	sub    esp,0xc
c000f808:	68 1c 18 02 c0       	push   0xc002181c
c000f80d:	e8 db 19 00 00       	call   c00111ed <KePanic(char const*)>
c000f812:	83 c4 10             	add    esp,0x10
c000f815:	8d 76 00             	lea    esi,[esi+0x0]
c000f818:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c000f81d:	85 c0                	test   eax,eax
c000f81f:	0f 84 87 00 00 00    	je     c000f8ac <ACPI::detectPCI()+0x188>
c000f825:	83 ec 0c             	sub    esp,0xc
c000f828:	68 a7 18 02 c0       	push   0xc00218a7
c000f82d:	e8 e4 12 00 00       	call   c0010b16 <KeSetBootMessage(char const*)>
c000f832:	83 c4 10             	add    esp,0x10
c000f835:	c7 44 24 04 5c 01 00 00 	mov    DWORD PTR [esp+0x4],0x15c
c000f83d:	83 ec 0c             	sub    esp,0xc
c000f840:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000f844:	e8 6d 82 ff ff       	call   c0007ab6 <malloc>
c000f849:	83 c4 10             	add    esp,0x10
c000f84c:	89 c3                	mov    ebx,eax
c000f84e:	83 ec 0c             	sub    esp,0xc
c000f851:	53                   	push   ebx
c000f852:	e8 2d b3 00 00       	call   c001ab84 <PCI::PCI()>
c000f857:	83 c4 10             	add    esp,0x10
c000f85a:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000f85e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f862:	83 ec 08             	sub    esp,0x8
c000f865:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000f869:	50                   	push   eax
c000f86a:	e8 73 cd ff ff       	call   c000c5e2 <Device::addChild(Device*)>
c000f86f:	83 c4 10             	add    esp,0x10
c000f872:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f876:	8b 00                	mov    eax,DWORD PTR [eax]
c000f878:	83 c0 08             	add    eax,0x8
c000f87b:	8b 00                	mov    eax,DWORD PTR [eax]
c000f87d:	0f b6 54 24 1e       	movzx  edx,BYTE PTR [esp+0x1e]
c000f882:	85 d2                	test   edx,edx
c000f884:	74 0a                	je     c000f890 <ACPI::detectPCI()+0x16c>
c000f886:	ba 01 00 00 00       	mov    edx,0x1
c000f88b:	eb 0b                	jmp    c000f898 <ACPI::detectPCI()+0x174>
c000f88d:	8d 76 00             	lea    esi,[esi+0x0]
c000f890:	ba 02 00 00 00       	mov    edx,0x2
c000f895:	8d 76 00             	lea    esi,[esi+0x0]
c000f898:	6a 00                	push   0x0
c000f89a:	6a 00                	push   0x0
c000f89c:	52                   	push   edx
c000f89d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f8a1:	ff d0                	call   eax
c000f8a3:	83 c4 10             	add    esp,0x10
c000f8a6:	e9 91 00 00 00       	jmp    c000f93c <ACPI::detectPCI()+0x218>
c000f8ab:	90                   	nop
c000f8ac:	83 ec 0c             	sub    esp,0xc
c000f8af:	68 bf 18 02 c0       	push   0xc00218bf
c000f8b4:	e8 5d 12 00 00       	call   c0010b16 <KeSetBootMessage(char const*)>
c000f8b9:	83 c4 10             	add    esp,0x10
c000f8bc:	c7 04 24 70 02 00 00 	mov    DWORD PTR [esp],0x270
c000f8c3:	83 ec 0c             	sub    esp,0xc
c000f8c6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000f8ca:	e8 e7 81 ff ff       	call   c0007ab6 <malloc>
c000f8cf:	83 c4 10             	add    esp,0x10
c000f8d2:	89 c3                	mov    ebx,eax
c000f8d4:	83 ec 0c             	sub    esp,0xc
c000f8d7:	53                   	push   ebx
c000f8d8:	e8 41 be 00 00       	call   c001b71e <IDE::IDE()>
c000f8dd:	83 c4 10             	add    esp,0x10
c000f8e0:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000f8e4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f8e8:	83 ec 08             	sub    esp,0x8
c000f8eb:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000f8ef:	50                   	push   eax
c000f8f0:	e8 ed cc ff ff       	call   c000c5e2 <Device::addChild(Device*)>
c000f8f5:	83 c4 10             	add    esp,0x10
c000f8f8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f8fc:	c7 80 14 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x114],0x1
c000f906:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f90a:	66 c7 80 18 01 00 00 f0 01 	mov    WORD PTR [eax+0x118],0x1f0
c000f913:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f917:	66 c7 80 1a 01 00 00 70 01 	mov    WORD PTR [eax+0x11a],0x170
c000f920:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f924:	8b 00                	mov    eax,DWORD PTR [eax]
c000f926:	83 c0 08             	add    eax,0x8
c000f929:	8b 00                	mov    eax,DWORD PTR [eax]
c000f92b:	6a 00                	push   0x0
c000f92d:	6a 00                	push   0x0
c000f92f:	6a 00                	push   0x0
c000f931:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000f935:	ff d0                	call   eax
c000f937:	83 c4 10             	add    esp,0x10
c000f93a:	66 90                	xchg   ax,ax
c000f93c:	90                   	nop
c000f93d:	83 c4 28             	add    esp,0x28
c000f940:	5b                   	pop    ebx
c000f941:	c3                   	ret    
c000f942:	66 90                	xchg   ax,ax

c000f944 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c000f944:	83 ec 1c             	sub    esp,0x1c
c000f947:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000f94b:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000f94e:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000f952:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000f957:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c000f95c:	83 ec 08             	sub    esp,0x8
c000f95f:	52                   	push   edx
c000f960:	50                   	push   eax
c000f961:	e8 14 78 ff ff       	call   c000717a <Computer::readCMOS(unsigned char)>
c000f966:	83 c4 10             	add    esp,0x10
c000f969:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c000f96d:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000f972:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c000f977:	83 ec 04             	sub    esp,0x4
c000f97a:	6a 01                	push   0x1
c000f97c:	52                   	push   edx
c000f97d:	50                   	push   eax
c000f97e:	e8 11 79 ff ff       	call   c0007294 <Computer::writeCMOS(unsigned char, unsigned char)>
c000f983:	83 c4 10             	add    esp,0x10
c000f986:	90                   	nop
c000f987:	83 c4 1c             	add    esp,0x1c
c000f98a:	c3                   	ret    
c000f98b:	90                   	nop

c000f98c <ACPI::sleep()>:
c000f98c:	83 ec 0c             	sub    esp,0xc
c000f98f:	a1 60 95 02 c0       	mov    eax,ds:0xc0029560
c000f994:	85 c0                	test   eax,eax
c000f996:	74 08                	je     c000f9a0 <ACPI::sleep()+0x14>
c000f998:	a1 60 95 02 c0       	mov    eax,ds:0xc0029560
c000f99d:	ff d0                	call   eax
c000f99f:	90                   	nop
c000f9a0:	90                   	nop
c000f9a1:	83 c4 0c             	add    esp,0xc
c000f9a4:	c3                   	ret    
c000f9a5:	90                   	nop
c000f9a6:	66 90                	xchg   ax,ax

c000f9a8 <ACPI::open(int, int, void*)>:
c000f9a8:	57                   	push   edi
c000f9a9:	56                   	push   esi
c000f9aa:	53                   	push   ebx
c000f9ab:	81 ec 70 01 00 00    	sub    esp,0x170
c000f9b1:	83 ec 0c             	sub    esp,0xc
c000f9b4:	ff b4 24 8c 01 00 00 	push   DWORD PTR [esp+0x18c]
c000f9bb:	e8 64 fd ff ff       	call   c000f724 <ACPI::detectPCI()>
c000f9c0:	83 c4 10             	add    esp,0x10
c000f9c3:	83 ec 0c             	sub    esp,0xc
c000f9c6:	68 44 18 02 c0       	push   0xc0021844
c000f9cb:	e8 46 11 00 00       	call   c0010b16 <KeSetBootMessage(char const*)>
c000f9d0:	83 c4 10             	add    esp,0x10
c000f9d3:	b8 4c 05 00 00       	mov    eax,0x54c
c000f9d8:	8a 00                	mov    al,BYTE PTR [eax]
c000f9da:	88 84 24 6e 01 00 00 	mov    BYTE PTR [esp+0x16e],al
c000f9e1:	0f b6 84 24 6e 01 00 00 	movzx  eax,BYTE PTR [esp+0x16e]
c000f9e9:	83 f8 01             	cmp    eax,0x1
c000f9ec:	75 12                	jne    c000fa00 <ACPI::open(int, int, void*)+0x58>
c000f9ee:	83 ec 0c             	sub    esp,0xc
c000f9f1:	68 d4 18 02 c0       	push   0xc00218d4
c000f9f6:	e8 d9 4b 00 00       	call   c00145d4 <Thr::loadKernelSymbolTable(char const*)>
c000f9fb:	83 c4 10             	add    esp,0x10
c000f9fe:	eb 34                	jmp    c000fa34 <ACPI::open(int, int, void*)+0x8c>
c000fa00:	0f b6 84 24 6e 01 00 00 	movzx  eax,BYTE PTR [esp+0x16e]
c000fa08:	3d bb 00 00 00       	cmp    eax,0xbb
c000fa0d:	75 15                	jne    c000fa24 <ACPI::open(int, int, void*)+0x7c>
c000fa0f:	83 ec 0c             	sub    esp,0xc
c000fa12:	68 f2 18 02 c0       	push   0xc00218f2
c000fa17:	e8 b8 4b 00 00       	call   c00145d4 <Thr::loadKernelSymbolTable(char const*)>
c000fa1c:	83 c4 10             	add    esp,0x10
c000fa1f:	eb 13                	jmp    c000fa34 <ACPI::open(int, int, void*)+0x8c>
c000fa21:	8d 76 00             	lea    esi,[esi+0x0]
c000fa24:	83 ec 0c             	sub    esp,0xc
c000fa27:	68 10 19 02 c0       	push   0xc0021910
c000fa2c:	e8 bc 17 00 00       	call   c00111ed <KePanic(char const*)>
c000fa31:	83 c4 10             	add    esp,0x10
c000fa34:	c6 84 24 6f 01 00 00 00 	mov    BYTE PTR [esp+0x16f],0x0
c000fa3c:	c7 84 24 44 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x144],0x114
c000fa47:	83 ec 0c             	sub    esp,0xc
c000fa4a:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c000fa51:	e8 60 80 ff ff       	call   c0007ab6 <malloc>
c000fa56:	83 c4 10             	add    esp,0x10
c000fa59:	89 c3                	mov    ebx,eax
c000fa5b:	a1 90 a4 02 c0       	mov    eax,ds:0xc002a490
c000fa60:	83 ec 04             	sub    esp,0x4
c000fa63:	50                   	push   eax
c000fa64:	68 2a 19 02 c0       	push   0xc002192a
c000fa69:	53                   	push   ebx
c000fa6a:	e8 69 bc ff ff       	call   c000b6d8 <File::File(char const*, Process*)>
c000fa6f:	83 c4 10             	add    esp,0x10
c000fa72:	89 9c 24 68 01 00 00 	mov    DWORD PTR [esp+0x168],ebx
c000fa79:	83 ec 08             	sub    esp,0x8
c000fa7c:	6a 01                	push   0x1
c000fa7e:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c000fa85:	e8 0a bd ff ff       	call   c000b794 <File::open(FileOpenMode)>
c000fa8a:	83 c4 10             	add    esp,0x10
c000fa8d:	89 84 24 64 01 00 00 	mov    DWORD PTR [esp+0x164],eax
c000fa94:	83 bc 24 64 01 00 00 00 	cmp    DWORD PTR [esp+0x164],0x0
c000fa9c:	75 16                	jne    c000fab4 <ACPI::open(int, int, void*)+0x10c>
c000fa9e:	83 ec 0c             	sub    esp,0xc
c000faa1:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c000faa8:	e8 45 bd ff ff       	call   c000b7f2 <File::close()>
c000faad:	83 c4 10             	add    esp,0x10
c000fab0:	eb 0a                	jmp    c000fabc <ACPI::open(int, int, void*)+0x114>
c000fab2:	66 90                	xchg   ax,ax
c000fab4:	c6 84 24 6f 01 00 00 01 	mov    BYTE PTR [esp+0x16f],0x1
c000fabc:	83 bc 24 68 01 00 00 00 	cmp    DWORD PTR [esp+0x168],0x0
c000fac4:	74 1e                	je     c000fae4 <ACPI::open(int, int, void*)+0x13c>
c000fac6:	8b 84 24 68 01 00 00 	mov    eax,DWORD PTR [esp+0x168]
c000facd:	8b 00                	mov    eax,DWORD PTR [eax]
c000facf:	83 c0 08             	add    eax,0x8
c000fad2:	8b 00                	mov    eax,DWORD PTR [eax]
c000fad4:	83 ec 0c             	sub    esp,0xc
c000fad7:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c000fade:	ff d0                	call   eax
c000fae0:	83 c4 10             	add    esp,0x10
c000fae3:	90                   	nop
c000fae4:	8a 84 24 6f 01 00 00 	mov    al,BYTE PTR [esp+0x16f]
c000faeb:	83 f0 01             	xor    eax,0x1
c000faee:	0f b6 c0             	movzx  eax,al
c000faf1:	85 c0                	test   eax,eax
c000faf3:	74 43                	je     c000fb38 <ACPI::open(int, int, void*)+0x190>
c000faf5:	83 ec 0c             	sub    esp,0xc
c000faf8:	68 48 19 02 c0       	push   0xc0021948
c000fafd:	e8 14 10 00 00       	call   c0010b16 <KeSetBootMessage(char const*)>
c000fb02:	83 c4 10             	add    esp,0x10
c000fb05:	83 ec 04             	sub    esp,0x4
c000fb08:	6a 0c                	push   0xc
c000fb0a:	68 63 19 02 c0       	push   0xc0021963
c000fb0f:	68 74 19 02 c0       	push   0xc0021974
c000fb14:	e8 6b 3d 00 00       	call   c0013884 <Reg::readIntWithDefault(char*, char*, int)>
c000fb19:	83 c4 10             	add    esp,0x10
c000fb1c:	89 84 24 60 01 00 00 	mov    DWORD PTR [esp+0x160],eax
c000fb23:	83 ec 0c             	sub    esp,0xc
c000fb26:	ff b4 24 6c 01 00 00 	push   DWORD PTR [esp+0x16c]
c000fb2d:	e8 0a 9d ff ff       	call   c000983c <Virt::setupPageSwapping(int)>
c000fb32:	83 c4 10             	add    esp,0x10
c000fb35:	8d 76 00             	lea    esi,[esi+0x0]
c000fb38:	83 ec 0c             	sub    esp,0xc
c000fb3b:	68 15 05 02 c0       	push   0xc0020515
c000fb40:	e8 d1 0f 00 00       	call   c0010b16 <KeSetBootMessage(char const*)>
c000fb45:	83 c4 10             	add    esp,0x10
c000fb48:	8d 84 24 30 01 00 00 	lea    eax,[esp+0x130]
c000fb4f:	83 ec 08             	sub    esp,0x8
c000fb52:	6a 13                	push   0x13
c000fb54:	50                   	push   eax
c000fb55:	e8 a0 cd ff ff       	call   c000c8fa <getDevicesOfType(DeviceType)>
c000fb5a:	83 c4 0c             	add    esp,0xc
c000fb5d:	8d 76 00             	lea    esi,[esi+0x0]
c000fb60:	83 ec 0c             	sub    esp,0xc
c000fb63:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000fb6a:	50                   	push   eax
c000fb6b:	e8 90 fd 00 00       	call   c001f900 <LinkedList<Device>::isEmpty()>
c000fb70:	83 c4 10             	add    esp,0x10
c000fb73:	83 f0 01             	xor    eax,0x1
c000fb76:	0f b6 c0             	movzx  eax,al
c000fb79:	85 c0                	test   eax,eax
c000fb7b:	0f 84 47 01 00 00    	je     c000fcc8 <ACPI::open(int, int, void*)+0x320>
c000fb81:	83 ec 0c             	sub    esp,0xc
c000fb84:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000fb8b:	50                   	push   eax
c000fb8c:	e8 8b fd 00 00       	call   c001f91c <LinkedList<Device>::getFirstElement()>
c000fb91:	83 c4 10             	add    esp,0x10
c000fb94:	89 84 24 5c 01 00 00 	mov    DWORD PTR [esp+0x15c],eax
c000fb9b:	83 ec 0c             	sub    esp,0xc
c000fb9e:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000fba5:	50                   	push   eax
c000fba6:	e8 79 fd 00 00       	call   c001f924 <LinkedList<Device>::removeFirst()>
c000fbab:	83 c4 10             	add    esp,0x10
c000fbae:	8b 84 24 5c 01 00 00 	mov    eax,DWORD PTR [esp+0x15c]
c000fbb5:	89 84 24 58 01 00 00 	mov    DWORD PTR [esp+0x158],eax
c000fbbc:	8b 94 24 58 01 00 00 	mov    edx,DWORD PTR [esp+0x158]
c000fbc3:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000fbc7:	8d 9a 18 01 00 00    	lea    ebx,[edx+0x118]
c000fbcd:	ba 09 00 00 00       	mov    edx,0x9
c000fbd2:	fc                   	cld    
c000fbd3:	89 c7                	mov    edi,eax
c000fbd5:	89 de                	mov    esi,ebx
c000fbd7:	89 d1                	mov    ecx,edx
c000fbd9:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000fbdb:	83 ec 08             	sub    esp,0x8
c000fbde:	8d 44 24 38          	lea    eax,[esp+0x38]
c000fbe2:	50                   	push   eax
c000fbe3:	83 ec 24             	sub    esp,0x24
c000fbe6:	89 e0                	mov    eax,esp
c000fbe8:	89 c3                	mov    ebx,eax
c000fbea:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c000fbee:	ba 09 00 00 00       	mov    edx,0x9
c000fbf3:	89 df                	mov    edi,ebx
c000fbf5:	89 c6                	mov    esi,eax
c000fbf7:	89 d1                	mov    ecx,edx
c000fbf9:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000fbfb:	e8 6e b4 00 00       	call   c001b06e <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>
c000fc00:	83 c4 30             	add    esp,0x30
c000fc03:	89 84 24 54 01 00 00 	mov    DWORD PTR [esp+0x154],eax
c000fc0a:	83 bc 24 54 01 00 00 00 	cmp    DWORD PTR [esp+0x154],0x0
c000fc12:	0f 84 48 ff ff ff    	je     c000fb60 <ACPI::open(int, int, void*)+0x1b8>
c000fc18:	c7 84 24 40 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x140],0x114
c000fc23:	83 ec 0c             	sub    esp,0xc
c000fc26:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c000fc2d:	e8 84 7e ff ff       	call   c0007ab6 <malloc>
c000fc32:	83 c4 10             	add    esp,0x10
c000fc35:	89 c3                	mov    ebx,eax
c000fc37:	a1 90 a4 02 c0       	mov    eax,ds:0xc002a490
c000fc3c:	83 ec 04             	sub    esp,0x4
c000fc3f:	50                   	push   eax
c000fc40:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c000fc47:	53                   	push   ebx
c000fc48:	e8 8b ba ff ff       	call   c000b6d8 <File::File(char const*, Process*)>
c000fc4d:	83 c4 10             	add    esp,0x10
c000fc50:	89 9c 24 50 01 00 00 	mov    DWORD PTR [esp+0x150],ebx
c000fc57:	83 ec 0c             	sub    esp,0xc
c000fc5a:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c000fc61:	e8 f2 bd ff ff       	call   c000ba58 <File::exists()>
c000fc66:	83 c4 10             	add    esp,0x10
c000fc69:	0f b6 c0             	movzx  eax,al
c000fc6c:	85 c0                	test   eax,eax
c000fc6e:	74 28                	je     c000fc98 <ACPI::open(int, int, void*)+0x2f0>
c000fc70:	83 ec 08             	sub    esp,0x8
c000fc73:	6a 01                	push   0x1
c000fc75:	ff b4 24 60 01 00 00 	push   DWORD PTR [esp+0x160]
c000fc7c:	e8 cd 53 00 00       	call   c001504e <Thr::loadDLL(char const*, bool)>
c000fc81:	83 c4 10             	add    esp,0x10
c000fc84:	83 ec 08             	sub    esp,0x8
c000fc87:	ff b4 24 60 01 00 00 	push   DWORD PTR [esp+0x160]
c000fc8e:	50                   	push   eax
c000fc8f:	e8 eb 55 00 00       	call   c001527f <Thr::executeDLL(unsigned long, void*)>
c000fc94:	83 c4 10             	add    esp,0x10
c000fc97:	90                   	nop
c000fc98:	83 bc 24 50 01 00 00 00 	cmp    DWORD PTR [esp+0x150],0x0
c000fca0:	0f 84 ba fe ff ff    	je     c000fb60 <ACPI::open(int, int, void*)+0x1b8>
c000fca6:	8b 84 24 50 01 00 00 	mov    eax,DWORD PTR [esp+0x150]
c000fcad:	8b 00                	mov    eax,DWORD PTR [eax]
c000fcaf:	83 c0 08             	add    eax,0x8
c000fcb2:	8b 00                	mov    eax,DWORD PTR [eax]
c000fcb4:	83 ec 0c             	sub    esp,0xc
c000fcb7:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c000fcbe:	ff d0                	call   eax
c000fcc0:	83 c4 10             	add    esp,0x10
c000fcc3:	e9 98 fe ff ff       	jmp    c000fb60 <ACPI::open(int, int, void*)+0x1b8>
c000fcc8:	83 ec 0c             	sub    esp,0xc
c000fccb:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000fcd2:	50                   	push   eax
c000fcd3:	e8 24 fc 00 00       	call   c001f8fc <LinkedList<Device>::~LinkedList()>
c000fcd8:	83 c4 10             	add    esp,0x10
c000fcdb:	8b 1d b8 5e 02 c0    	mov    ebx,DWORD PTR ds:0xc0025eb8
c000fce1:	83 ec 08             	sub    esp,0x8
c000fce4:	6a 01                	push   0x1
c000fce6:	68 7b 19 02 c0       	push   0xc002197b
c000fceb:	e8 5e 53 00 00       	call   c001504e <Thr::loadDLL(char const*, bool)>
c000fcf0:	83 c4 10             	add    esp,0x10
c000fcf3:	83 ec 08             	sub    esp,0x8
c000fcf6:	53                   	push   ebx
c000fcf7:	50                   	push   eax
c000fcf8:	e8 82 55 00 00       	call   c001527f <Thr::executeDLL(unsigned long, void*)>
c000fcfd:	83 c4 10             	add    esp,0x10
c000fd00:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000fd05:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000fd0b:	83 e0 04             	and    eax,0x4
c000fd0e:	0f b6 c0             	movzx  eax,al
c000fd11:	85 c0                	test   eax,eax
c000fd13:	0f 84 1b 01 00 00    	je     c000fe34 <ACPI::open(int, int, void*)+0x48c>
c000fd19:	83 ec 0c             	sub    esp,0xc
c000fd1c:	68 98 19 02 c0       	push   0xc0021998
c000fd21:	e8 f0 0d 00 00       	call   c0010b16 <KeSetBootMessage(char const*)>
c000fd26:	83 c4 10             	add    esp,0x10
c000fd29:	c7 84 24 3c 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x13c],0x114
c000fd34:	83 ec 0c             	sub    esp,0xc
c000fd37:	ff b4 24 48 01 00 00 	push   DWORD PTR [esp+0x148]
c000fd3e:	e8 73 7d ff ff       	call   c0007ab6 <malloc>
c000fd43:	83 c4 10             	add    esp,0x10
c000fd46:	89 c3                	mov    ebx,eax
c000fd48:	a1 90 a4 02 c0       	mov    eax,ds:0xc002a490
c000fd4d:	83 ec 04             	sub    esp,0x4
c000fd50:	50                   	push   eax
c000fd51:	68 b5 19 02 c0       	push   0xc00219b5
c000fd56:	53                   	push   ebx
c000fd57:	e8 7c b9 ff ff       	call   c000b6d8 <File::File(char const*, Process*)>
c000fd5c:	83 c4 10             	add    esp,0x10
c000fd5f:	89 9c 24 4c 01 00 00 	mov    DWORD PTR [esp+0x14c],ebx
c000fd66:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c000fd6e:	74 20                	je     c000fd90 <ACPI::open(int, int, void*)+0x3e8>
c000fd70:	83 ec 0c             	sub    esp,0xc
c000fd73:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c000fd7a:	e8 d9 bc ff ff       	call   c000ba58 <File::exists()>
c000fd7f:	83 c4 10             	add    esp,0x10
c000fd82:	0f b6 c0             	movzx  eax,al
c000fd85:	85 c0                	test   eax,eax
c000fd87:	74 07                	je     c000fd90 <ACPI::open(int, int, void*)+0x3e8>
c000fd89:	b0 01                	mov    al,0x1
c000fd8b:	eb 07                	jmp    c000fd94 <ACPI::open(int, int, void*)+0x3ec>
c000fd8d:	8d 76 00             	lea    esi,[esi+0x0]
c000fd90:	b0 00                	mov    al,0x0
c000fd92:	66 90                	xchg   ax,ax
c000fd94:	0f b6 c0             	movzx  eax,al
c000fd97:	85 c0                	test   eax,eax
c000fd99:	74 25                	je     c000fdc0 <ACPI::open(int, int, void*)+0x418>
c000fd9b:	83 ec 08             	sub    esp,0x8
c000fd9e:	6a 01                	push   0x1
c000fda0:	68 b5 19 02 c0       	push   0xc00219b5
c000fda5:	e8 a4 52 00 00       	call   c001504e <Thr::loadDLL(char const*, bool)>
c000fdaa:	83 c4 10             	add    esp,0x10
c000fdad:	83 ec 08             	sub    esp,0x8
c000fdb0:	ff b4 24 88 01 00 00 	push   DWORD PTR [esp+0x188]
c000fdb7:	50                   	push   eax
c000fdb8:	e8 c2 54 00 00       	call   c001527f <Thr::executeDLL(unsigned long, void*)>
c000fdbd:	83 c4 10             	add    esp,0x10
c000fdc0:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c000fdc8:	74 2a                	je     c000fdf4 <ACPI::open(int, int, void*)+0x44c>
c000fdca:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c000fdd2:	74 20                	je     c000fdf4 <ACPI::open(int, int, void*)+0x44c>
c000fdd4:	8b 84 24 4c 01 00 00 	mov    eax,DWORD PTR [esp+0x14c]
c000fddb:	8b 00                	mov    eax,DWORD PTR [eax]
c000fddd:	83 c0 08             	add    eax,0x8
c000fde0:	8b 00                	mov    eax,DWORD PTR [eax]
c000fde2:	83 ec 0c             	sub    esp,0xc
c000fde5:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c000fdec:	ff d0                	call   eax
c000fdee:	83 c4 10             	add    esp,0x10
c000fdf1:	8d 76 00             	lea    esi,[esi+0x0]
c000fdf4:	a1 88 97 02 c0       	mov    eax,ds:0xc0029788
c000fdf9:	83 ec 08             	sub    esp,0x8
c000fdfc:	68 d2 19 02 c0       	push   0xc00219d2
c000fe01:	50                   	push   eax
c000fe02:	e8 c1 f1 ff ff       	call   c000efc8 <findDataTable(unsigned char*, char*)>
c000fe07:	83 c4 10             	add    esp,0x10
c000fe0a:	89 84 24 48 01 00 00 	mov    DWORD PTR [esp+0x148],eax
c000fe11:	83 bc 24 48 01 00 00 00 	cmp    DWORD PTR [esp+0x148],0x0
c000fe19:	74 19                	je     c000fe34 <ACPI::open(int, int, void*)+0x48c>
c000fe1b:	83 ec 08             	sub    esp,0x8
c000fe1e:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c000fe25:	ff b4 24 8c 01 00 00 	push   DWORD PTR [esp+0x18c]
c000fe2c:	e8 13 fb ff ff       	call   c000f944 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c000fe31:	83 c4 10             	add    esp,0x10
c000fe34:	b8 00 00 00 00       	mov    eax,0x0
c000fe39:	81 c4 70 01 00 00    	add    esp,0x170
c000fe3f:	5b                   	pop    ebx
c000fe40:	5e                   	pop    esi
c000fe41:	5f                   	pop    edi
c000fe42:	c3                   	ret    
c000fe43:	90                   	nop

c000fe44 <CPU::close(int, int, void*)>:
c000fe44:	31 c0                	xor    eax,eax
c000fe46:	c3                   	ret    
c000fe47:	90                   	nop

c000fe48 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>:
c000fe48:	60                   	pusha  
c000fe49:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000fe4d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fe51:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000fe55:	9c                   	pushf  
c000fe56:	fa                   	cli    
c000fe57:	0f 09                	wbinvd 
c000fe59:	0f 30                	wrmsr  
c000fe5b:	9d                   	popf   
c000fe5c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000fe60:	89 02                	mov    DWORD PTR [edx],eax
c000fe62:	61                   	popa   
c000fe63:	c3                   	ret    

c000fe64 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>:
c000fe64:	60                   	pusha  
c000fe65:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000fe69:	9c                   	pushf  
c000fe6a:	fa                   	cli    
c000fe6b:	0f 09                	wbinvd 
c000fe6d:	31 c0                	xor    eax,eax
c000fe6f:	31 d2                	xor    edx,edx
c000fe71:	0f 32                	rdmsr  
c000fe73:	9d                   	popf   
c000fe74:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000fe78:	89 02                	mov    DWORD PTR [edx],eax
c000fe7a:	61                   	popa   
c000fe7b:	c3                   	ret    

c000fe7c <CPU::AMD_K6_writeback(int, int, int)>:
c000fe7c:	56                   	push   esi
c000fe7d:	53                   	push   ebx
c000fe7e:	83 ec 10             	sub    esp,0x10
c000fe81:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fe85:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c000fe8a:	75 5d                	jne    c000fee9 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c000fe8c:	83 f8 08             	cmp    eax,0x8
c000fe8f:	75 09                	jne    c000fe9a <CPU::AMD_K6_writeback(int, int, int)+0x1e>
c000fe91:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c000fe96:	7e 13                	jle    c000feab <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c000fe98:	eb 30                	jmp    c000feca <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c000fe9a:	83 f8 06             	cmp    eax,0x6
c000fe9d:	7c 4a                	jl     c000fee9 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c000fe9f:	83 f8 07             	cmp    eax,0x7
c000fea2:	7e 07                	jle    c000feab <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c000fea4:	83 f8 09             	cmp    eax,0x9
c000fea7:	74 21                	je     c000feca <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c000fea9:	eb 3e                	jmp    c000fee9 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c000feab:	89 e6                	mov    esi,esp
c000fead:	8b 1d dc 5e 02 c0    	mov    ebx,DWORD PTR ds:0xc0025edc
c000feb3:	56                   	push   esi
c000feb4:	c1 eb 15             	shr    ebx,0x15
c000feb7:	68 82 00 00 c0       	push   0xc0000082
c000febc:	83 e3 7e             	and    ebx,0x7e
c000febf:	e8 a0 ff ff ff       	call   c000fe64 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c000fec4:	56                   	push   esi
c000fec5:	6a 00                	push   0x0
c000fec7:	53                   	push   ebx
c000fec8:	eb 12                	jmp    c000fedc <CPU::AMD_K6_writeback(int, int, int)+0x60>
c000feca:	89 e3                	mov    ebx,esp
c000fecc:	53                   	push   ebx
c000fecd:	68 82 00 00 c0       	push   0xc0000082
c000fed2:	e8 8d ff ff ff       	call   c000fe64 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c000fed7:	53                   	push   ebx
c000fed8:	6a 00                	push   0x0
c000feda:	6a 00                	push   0x0
c000fedc:	68 82 00 00 c0       	push   0xc0000082
c000fee1:	e8 62 ff ff ff       	call   c000fe48 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>
c000fee6:	83 c4 18             	add    esp,0x18
c000fee9:	83 c4 10             	add    esp,0x10
c000feec:	5b                   	pop    ebx
c000feed:	5e                   	pop    esi
c000feee:	c3                   	ret    
c000feef:	90                   	nop

c000fef0 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c000fef0:	55                   	push   ebp
c000fef1:	57                   	push   edi
c000fef2:	56                   	push   esi
c000fef3:	53                   	push   ebx
c000fef4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000fef8:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000fefc:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000ff00:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c000ff04:	39 05 78 2f 02 c0    	cmp    DWORD PTR ds:0xc0022f78,eax
c000ff0a:	75 23                	jne    c000ff2f <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c000ff0c:	a1 ec 99 02 c0       	mov    eax,ds:0xc00299ec
c000ff11:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000ff15:	89 06                	mov    DWORD PTR [esi],eax
c000ff17:	a1 e8 99 02 c0       	mov    eax,ds:0xc00299e8
c000ff1c:	89 07                	mov    DWORD PTR [edi],eax
c000ff1e:	a1 e4 99 02 c0       	mov    eax,ds:0xc00299e4
c000ff23:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000ff26:	a1 e0 99 02 c0       	mov    eax,ds:0xc00299e0
c000ff2b:	89 02                	mov    DWORD PTR [edx],eax
c000ff2d:	eb 3f                	jmp    c000ff6e <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c000ff2f:	31 c9                	xor    ecx,ecx
c000ff31:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ff35:	0f a2                	cpuid  
c000ff37:	89 06                	mov    DWORD PTR [esi],eax
c000ff39:	89 1f                	mov    DWORD PTR [edi],ebx
c000ff3b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000ff3f:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c000ff42:	89 10                	mov    DWORD PTR [eax],edx
c000ff44:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ff48:	a3 78 2f 02 c0       	mov    ds:0xc0022f78,eax
c000ff4d:	8b 06                	mov    eax,DWORD PTR [esi]
c000ff4f:	a3 ec 99 02 c0       	mov    ds:0xc00299ec,eax
c000ff54:	8b 07                	mov    eax,DWORD PTR [edi]
c000ff56:	a3 e8 99 02 c0       	mov    ds:0xc00299e8,eax
c000ff5b:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000ff5e:	a3 e4 99 02 c0       	mov    ds:0xc00299e4,eax
c000ff63:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000ff67:	8b 00                	mov    eax,DWORD PTR [eax]
c000ff69:	a3 e0 99 02 c0       	mov    ds:0xc00299e0,eax
c000ff6e:	5b                   	pop    ebx
c000ff6f:	5e                   	pop    esi
c000ff70:	5f                   	pop    edi
c000ff71:	5d                   	pop    ebp
c000ff72:	c3                   	ret    
c000ff73:	90                   	nop

c000ff74 <CPU::cpuidCheckEDX(unsigned int)>:
c000ff74:	83 ec 10             	sub    esp,0x10
c000ff77:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000ff7b:	50                   	push   eax
c000ff7c:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000ff80:	50                   	push   eax
c000ff81:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000ff85:	50                   	push   eax
c000ff86:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000ff8a:	50                   	push   eax
c000ff8b:	6a 01                	push   0x1
c000ff8d:	e8 5e ff ff ff       	call   c000fef0 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000ff92:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ff96:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c000ff9a:	0f 95 c0             	setne  al
c000ff9d:	83 c4 24             	add    esp,0x24
c000ffa0:	c3                   	ret    
c000ffa1:	90                   	nop

c000ffa2 <CPU::cpuidCheckECX(unsigned int)>:
c000ffa2:	83 ec 10             	sub    esp,0x10
c000ffa5:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000ffa9:	50                   	push   eax
c000ffaa:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000ffae:	50                   	push   eax
c000ffaf:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000ffb3:	50                   	push   eax
c000ffb4:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000ffb8:	50                   	push   eax
c000ffb9:	6a 01                	push   0x1
c000ffbb:	e8 30 ff ff ff       	call   c000fef0 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000ffc0:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ffc4:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c000ffc8:	0f 95 c0             	setne  al
c000ffcb:	83 c4 24             	add    esp,0x24
c000ffce:	c3                   	ret    
c000ffcf:	90                   	nop

c000ffd0 <CPU::cpuidCheckExtendedEBX(unsigned int)>:
c000ffd0:	83 ec 10             	sub    esp,0x10
c000ffd3:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000ffd7:	50                   	push   eax
c000ffd8:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000ffdc:	50                   	push   eax
c000ffdd:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000ffe1:	50                   	push   eax
c000ffe2:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000ffe6:	50                   	push   eax
c000ffe7:	6a 07                	push   0x7
c000ffe9:	e8 02 ff ff ff       	call   c000fef0 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000ffee:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000fff2:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c000fff6:	0f 95 c0             	setne  al
c000fff9:	83 c4 24             	add    esp,0x24
c000fffc:	c3                   	ret    
c000fffd:	90                   	nop

c000fffe <CPU::cpuidCheckExtendedECX(unsigned int)>:
c000fffe:	83 ec 10             	sub    esp,0x10
c0010001:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0010005:	50                   	push   eax
c0010006:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001000a:	50                   	push   eax
c001000b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001000f:	50                   	push   eax
c0010010:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0010014:	50                   	push   eax
c0010015:	6a 07                	push   0x7
c0010017:	e8 d4 fe ff ff       	call   c000fef0 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001001c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0010020:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c0010024:	0f 95 c0             	setne  al
c0010027:	83 c4 24             	add    esp,0x24
c001002a:	c3                   	ret    
c001002b:	90                   	nop

c001002c <CPU::CPU()>:
c001002c:	83 ec 0c             	sub    esp,0xc
c001002f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010033:	83 ec 08             	sub    esp,0x8
c0010036:	68 f5 1a 02 c0       	push   0xc0021af5
c001003b:	50                   	push   eax
c001003c:	e8 39 c7 ff ff       	call   c000c77a <Device::Device(char const*)>
c0010041:	83 c4 10             	add    esp,0x10
c0010044:	ba 88 1b 02 c0       	mov    edx,0xc0021b88
c0010049:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001004d:	89 10                	mov    DWORD PTR [eax],edx
c001004f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010053:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c001005d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010061:	05 78 01 00 00       	add    eax,0x178
c0010066:	83 ec 0c             	sub    esp,0xc
c0010069:	50                   	push   eax
c001006a:	e8 ef 72 ff ff       	call   c000735e <GDT::GDT()>
c001006f:	83 c4 10             	add    esp,0x10
c0010072:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010076:	05 7c 09 00 00       	add    eax,0x97c
c001007b:	83 ec 0c             	sub    esp,0xc
c001007e:	50                   	push   eax
c001007f:	e8 28 75 ff ff       	call   c00075ac <IDT::IDT()>
c0010084:	83 c4 10             	add    esp,0x10
c0010087:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001008b:	05 7c 11 00 00       	add    eax,0x117c
c0010090:	83 ec 0c             	sub    esp,0xc
c0010093:	50                   	push   eax
c0010094:	e8 ab 8e ff ff       	call   c0008f44 <TSS::TSS()>
c0010099:	83 c4 10             	add    esp,0x10
c001009c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00100a0:	c6 80 90 11 00 00 00 	mov    BYTE PTR [eax+0x1190],0x0
c00100a7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00100ab:	c7 80 10 01 00 00 11 00 00 00 	mov    DWORD PTR [eax+0x110],0x11
c00100b5:	90                   	nop
c00100b6:	83 c4 0c             	add    esp,0xc
c00100b9:	c3                   	ret    

c00100ba <CPU::displayFeatures()>:
c00100ba:	c3                   	ret    
c00100bb:	90                   	nop

c00100bc <CPU::detectFeatures()>:
c00100bc:	55                   	push   ebp
c00100bd:	57                   	push   edi
c00100be:	56                   	push   esi
c00100bf:	53                   	push   ebx
c00100c0:	83 ec 30             	sub    esp,0x30
c00100c3:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c00100c7:	81 a3 8c 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x118c],0xfff80700
c00100d1:	c6 83 90 11 00 00 01 	mov    BYTE PTR [ebx+0x1190],0x1
c00100d8:	8d ab 5f 01 00 00    	lea    ebp,[ebx+0x15f]
c00100de:	6a 0d                	push   0xd
c00100e0:	6a 00                	push   0x0
c00100e2:	55                   	push   ebp
c00100e3:	e8 08 04 ff ff       	call   c00004f0 <memset>
c00100e8:	83 c4 10             	add    esp,0x10
c00100eb:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c00100f0:	f6 80 6c 01 00 00 02 	test   BYTE PTR [eax+0x16c],0x2
c00100f7:	0f 84 db 05 00 00    	je     c00106d8 <CPU::detectFeatures()+0x61c>
c00100fd:	83 ec 0c             	sub    esp,0xc
c0010100:	89 ef                	mov    edi,ebp
c0010102:	6a 10                	push   0x10
c0010104:	e8 6b fe ff ff       	call   c000ff74 <CPU::cpuidCheckEDX(unsigned int)>
c0010109:	83 e0 01             	and    eax,0x1
c001010c:	8d 14 00             	lea    edx,[eax+eax*1]
c001010f:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c0010115:	83 e0 fd             	and    eax,0xfffffffd
c0010118:	09 d0                	or     eax,edx
c001011a:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c0010120:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c0010127:	e8 48 fe ff ff       	call   c000ff74 <CPU::cpuidCheckEDX(unsigned int)>
c001012c:	83 e0 01             	and    eax,0x1
c001012f:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0010136:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c001013c:	83 e0 fb             	and    eax,0xfffffffb
c001013f:	09 d0                	or     eax,edx
c0010141:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c0010147:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c001014e:	e8 21 fe ff ff       	call   c000ff74 <CPU::cpuidCheckEDX(unsigned int)>
c0010153:	83 e0 01             	and    eax,0x1
c0010156:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c001015d:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c0010163:	83 e0 f7             	and    eax,0xfffffff7
c0010166:	09 d0                	or     eax,edx
c0010168:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c001016e:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c0010175:	e8 fa fd ff ff       	call   c000ff74 <CPU::cpuidCheckEDX(unsigned int)>
c001017a:	83 e0 01             	and    eax,0x1
c001017d:	c1 e0 04             	shl    eax,0x4
c0010180:	89 c2                	mov    edx,eax
c0010182:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c0010188:	83 e0 ef             	and    eax,0xffffffef
c001018b:	09 d0                	or     eax,edx
c001018d:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c0010193:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c001019a:	e8 d5 fd ff ff       	call   c000ff74 <CPU::cpuidCheckEDX(unsigned int)>
c001019f:	83 e0 01             	and    eax,0x1
c00101a2:	c1 e0 05             	shl    eax,0x5
c00101a5:	89 c2                	mov    edx,eax
c00101a7:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c00101ad:	83 e0 df             	and    eax,0xffffffdf
c00101b0:	09 d0                	or     eax,edx
c00101b2:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c00101b8:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00101bf:	e8 b0 fd ff ff       	call   c000ff74 <CPU::cpuidCheckEDX(unsigned int)>
c00101c4:	83 e0 01             	and    eax,0x1
c00101c7:	8d 14 00             	lea    edx,[eax+eax*1]
c00101ca:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c00101d0:	83 e0 fd             	and    eax,0xfffffffd
c00101d3:	09 d0                	or     eax,edx
c00101d5:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c00101db:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c00101e2:	e8 8d fd ff ff       	call   c000ff74 <CPU::cpuidCheckEDX(unsigned int)>
c00101e7:	83 e0 01             	and    eax,0x1
c00101ea:	c1 e0 06             	shl    eax,0x6
c00101ed:	89 c2                	mov    edx,eax
c00101ef:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c00101f5:	83 e0 bf             	and    eax,0xffffffbf
c00101f8:	09 d0                	or     eax,edx
c00101fa:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c0010200:	58                   	pop    eax
c0010201:	8d 44 24 28          	lea    eax,[esp+0x28]
c0010205:	50                   	push   eax
c0010206:	8d 44 24 28          	lea    eax,[esp+0x28]
c001020a:	50                   	push   eax
c001020b:	8d 74 24 28          	lea    esi,[esp+0x28]
c001020f:	56                   	push   esi
c0010210:	8d 44 24 28          	lea    eax,[esp+0x28]
c0010214:	50                   	push   eax
c0010215:	6a 00                	push   0x0
c0010217:	e8 d4 fc ff ff       	call   c000fef0 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001021c:	b8 04 00 00 00       	mov    eax,0x4
c0010221:	89 c1                	mov    ecx,eax
c0010223:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010225:	8d bb 63 01 00 00    	lea    edi,[ebx+0x163]
c001022b:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c001022f:	89 c1                	mov    ecx,eax
c0010231:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010233:	8d bb 67 01 00 00    	lea    edi,[ebx+0x167]
c0010239:	8d 74 24 38          	lea    esi,[esp+0x38]
c001023d:	89 c1                	mov    ecx,eax
c001023f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010241:	83 c4 18             	add    esp,0x18
c0010244:	68 04 1a 02 c0       	push   0xc0021a04
c0010249:	55                   	push   ebp
c001024a:	e8 01 05 ff ff       	call   c0000750 <strcmp>
c001024f:	83 c4 10             	add    esp,0x10
c0010252:	85 c0                	test   eax,eax
c0010254:	75 0f                	jne    c0010265 <CPU::detectFeatures()+0x1a9>
c0010256:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c0010260:	e9 22 02 00 00       	jmp    c0010487 <CPU::detectFeatures()+0x3cb>
c0010265:	50                   	push   eax
c0010266:	50                   	push   eax
c0010267:	68 11 1a 02 c0       	push   0xc0021a11
c001026c:	55                   	push   ebp
c001026d:	e8 de 04 ff ff       	call   c0000750 <strcmp>
c0010272:	83 c4 10             	add    esp,0x10
c0010275:	85 c0                	test   eax,eax
c0010277:	74 dd                	je     c0010256 <CPU::detectFeatures()+0x19a>
c0010279:	50                   	push   eax
c001027a:	50                   	push   eax
c001027b:	68 1e 1a 02 c0       	push   0xc0021a1e
c0010280:	55                   	push   ebp
c0010281:	e8 ca 04 ff ff       	call   c0000750 <strcmp>
c0010286:	83 c4 10             	add    esp,0x10
c0010289:	85 c0                	test   eax,eax
c001028b:	74 2a                	je     c00102b7 <CPU::detectFeatures()+0x1fb>
c001028d:	50                   	push   eax
c001028e:	50                   	push   eax
c001028f:	68 2b 1a 02 c0       	push   0xc0021a2b
c0010294:	55                   	push   ebp
c0010295:	e8 b6 04 ff ff       	call   c0000750 <strcmp>
c001029a:	83 c4 10             	add    esp,0x10
c001029d:	85 c0                	test   eax,eax
c001029f:	74 16                	je     c00102b7 <CPU::detectFeatures()+0x1fb>
c00102a1:	50                   	push   eax
c00102a2:	50                   	push   eax
c00102a3:	68 38 1a 02 c0       	push   0xc0021a38
c00102a8:	55                   	push   ebp
c00102a9:	e8 a2 04 ff ff       	call   c0000750 <strcmp>
c00102ae:	83 c4 10             	add    esp,0x10
c00102b1:	85 c0                	test   eax,eax
c00102b3:	74 48                	je     c00102fd <CPU::detectFeatures()+0x241>
c00102b5:	eb 0f                	jmp    c00102c6 <CPU::detectFeatures()+0x20a>
c00102b7:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c00102c1:	e9 c1 01 00 00       	jmp    c0010487 <CPU::detectFeatures()+0x3cb>
c00102c6:	50                   	push   eax
c00102c7:	50                   	push   eax
c00102c8:	68 45 1a 02 c0       	push   0xc0021a45
c00102cd:	55                   	push   ebp
c00102ce:	e8 7d 04 ff ff       	call   c0000750 <strcmp>
c00102d3:	83 c4 10             	add    esp,0x10
c00102d6:	85 c0                	test   eax,eax
c00102d8:	74 23                	je     c00102fd <CPU::detectFeatures()+0x241>
c00102da:	57                   	push   edi
c00102db:	57                   	push   edi
c00102dc:	68 52 1a 02 c0       	push   0xc0021a52
c00102e1:	55                   	push   ebp
c00102e2:	e8 69 04 ff ff       	call   c0000750 <strcmp>
c00102e7:	83 c4 10             	add    esp,0x10
c00102ea:	85 c0                	test   eax,eax
c00102ec:	75 1e                	jne    c001030c <CPU::detectFeatures()+0x250>
c00102ee:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c00102f8:	e9 8a 01 00 00       	jmp    c0010487 <CPU::detectFeatures()+0x3cb>
c00102fd:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c0010307:	e9 7b 01 00 00       	jmp    c0010487 <CPU::detectFeatures()+0x3cb>
c001030c:	56                   	push   esi
c001030d:	56                   	push   esi
c001030e:	68 5f 1a 02 c0       	push   0xc0021a5f
c0010313:	55                   	push   ebp
c0010314:	e8 37 04 ff ff       	call   c0000750 <strcmp>
c0010319:	83 c4 10             	add    esp,0x10
c001031c:	85 c0                	test   eax,eax
c001031e:	75 0f                	jne    c001032f <CPU::detectFeatures()+0x273>
c0010320:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c001032a:	e9 58 01 00 00       	jmp    c0010487 <CPU::detectFeatures()+0x3cb>
c001032f:	51                   	push   ecx
c0010330:	51                   	push   ecx
c0010331:	68 1e 1a 02 c0       	push   0xc0021a1e
c0010336:	55                   	push   ebp
c0010337:	e8 14 04 ff ff       	call   c0000750 <strcmp>
c001033c:	83 c4 10             	add    esp,0x10
c001033f:	85 c0                	test   eax,eax
c0010341:	75 0f                	jne    c0010352 <CPU::detectFeatures()+0x296>
c0010343:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c001034d:	e9 35 01 00 00       	jmp    c0010487 <CPU::detectFeatures()+0x3cb>
c0010352:	52                   	push   edx
c0010353:	52                   	push   edx
c0010354:	68 6c 1a 02 c0       	push   0xc0021a6c
c0010359:	55                   	push   ebp
c001035a:	e8 f1 03 ff ff       	call   c0000750 <strcmp>
c001035f:	83 c4 10             	add    esp,0x10
c0010362:	85 c0                	test   eax,eax
c0010364:	75 0f                	jne    c0010375 <CPU::detectFeatures()+0x2b9>
c0010366:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c0010370:	e9 12 01 00 00       	jmp    c0010487 <CPU::detectFeatures()+0x3cb>
c0010375:	50                   	push   eax
c0010376:	50                   	push   eax
c0010377:	68 79 1a 02 c0       	push   0xc0021a79
c001037c:	55                   	push   ebp
c001037d:	e8 ce 03 ff ff       	call   c0000750 <strcmp>
c0010382:	83 c4 10             	add    esp,0x10
c0010385:	85 c0                	test   eax,eax
c0010387:	75 0f                	jne    c0010398 <CPU::detectFeatures()+0x2dc>
c0010389:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c0010393:	e9 ef 00 00 00       	jmp    c0010487 <CPU::detectFeatures()+0x3cb>
c0010398:	50                   	push   eax
c0010399:	50                   	push   eax
c001039a:	68 86 1a 02 c0       	push   0xc0021a86
c001039f:	55                   	push   ebp
c00103a0:	e8 ab 03 ff ff       	call   c0000750 <strcmp>
c00103a5:	83 c4 10             	add    esp,0x10
c00103a8:	85 c0                	test   eax,eax
c00103aa:	75 0f                	jne    c00103bb <CPU::detectFeatures()+0x2ff>
c00103ac:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c00103b6:	e9 cc 00 00 00       	jmp    c0010487 <CPU::detectFeatures()+0x3cb>
c00103bb:	50                   	push   eax
c00103bc:	50                   	push   eax
c00103bd:	68 93 1a 02 c0       	push   0xc0021a93
c00103c2:	55                   	push   ebp
c00103c3:	e8 88 03 ff ff       	call   c0000750 <strcmp>
c00103c8:	83 c4 10             	add    esp,0x10
c00103cb:	85 c0                	test   eax,eax
c00103cd:	75 0f                	jne    c00103de <CPU::detectFeatures()+0x322>
c00103cf:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c00103d9:	e9 a9 00 00 00       	jmp    c0010487 <CPU::detectFeatures()+0x3cb>
c00103de:	50                   	push   eax
c00103df:	50                   	push   eax
c00103e0:	68 a0 1a 02 c0       	push   0xc0021aa0
c00103e5:	55                   	push   ebp
c00103e6:	e8 65 03 ff ff       	call   c0000750 <strcmp>
c00103eb:	83 c4 10             	add    esp,0x10
c00103ee:	85 c0                	test   eax,eax
c00103f0:	75 0f                	jne    c0010401 <CPU::detectFeatures()+0x345>
c00103f2:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c00103fc:	e9 86 00 00 00       	jmp    c0010487 <CPU::detectFeatures()+0x3cb>
c0010401:	50                   	push   eax
c0010402:	50                   	push   eax
c0010403:	68 ad 1a 02 c0       	push   0xc0021aad
c0010408:	55                   	push   ebp
c0010409:	e8 42 03 ff ff       	call   c0000750 <strcmp>
c001040e:	83 c4 10             	add    esp,0x10
c0010411:	85 c0                	test   eax,eax
c0010413:	75 0c                	jne    c0010421 <CPU::detectFeatures()+0x365>
c0010415:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c001041f:	eb 66                	jmp    c0010487 <CPU::detectFeatures()+0x3cb>
c0010421:	50                   	push   eax
c0010422:	50                   	push   eax
c0010423:	68 ba 1a 02 c0       	push   0xc0021aba
c0010428:	55                   	push   ebp
c0010429:	e8 22 03 ff ff       	call   c0000750 <strcmp>
c001042e:	83 c4 10             	add    esp,0x10
c0010431:	85 c0                	test   eax,eax
c0010433:	75 0c                	jne    c0010441 <CPU::detectFeatures()+0x385>
c0010435:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c001043f:	eb 46                	jmp    c0010487 <CPU::detectFeatures()+0x3cb>
c0010441:	57                   	push   edi
c0010442:	57                   	push   edi
c0010443:	68 c7 1a 02 c0       	push   0xc0021ac7
c0010448:	55                   	push   ebp
c0010449:	e8 02 03 ff ff       	call   c0000750 <strcmp>
c001044e:	83 c4 10             	add    esp,0x10
c0010451:	85 c0                	test   eax,eax
c0010453:	74 e0                	je     c0010435 <CPU::detectFeatures()+0x379>
c0010455:	56                   	push   esi
c0010456:	56                   	push   esi
c0010457:	68 d4 1a 02 c0       	push   0xc0021ad4
c001045c:	55                   	push   ebp
c001045d:	e8 ee 02 ff ff       	call   c0000750 <strcmp>
c0010462:	83 c4 10             	add    esp,0x10
c0010465:	85 c0                	test   eax,eax
c0010467:	74 cc                	je     c0010435 <CPU::detectFeatures()+0x379>
c0010469:	51                   	push   ecx
c001046a:	51                   	push   ecx
c001046b:	68 e1 1a 02 c0       	push   0xc0021ae1
c0010470:	55                   	push   ebp
c0010471:	e8 da 02 ff ff       	call   c0000750 <strcmp>
c0010476:	83 c4 10             	add    esp,0x10
c0010479:	85 c0                	test   eax,eax
c001047b:	74 b8                	je     c0010435 <CPU::detectFeatures()+0x379>
c001047d:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c0010487:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c001048c:	0f 86 be 00 00 00    	jbe    c0010550 <CPU::detectFeatures()+0x494>
c0010492:	83 ec 0c             	sub    esp,0xc
c0010495:	68 80 00 00 00       	push   0x80
c001049a:	e8 31 fb ff ff       	call   c000ffd0 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c001049f:	83 e0 01             	and    eax,0x1
c00104a2:	c1 e0 06             	shl    eax,0x6
c00104a5:	89 c2                	mov    edx,eax
c00104a7:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c00104ad:	83 e0 bf             	and    eax,0xffffffbf
c00104b0:	09 d0                	or     eax,edx
c00104b2:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c00104b8:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c00104bf:	e8 0c fb ff ff       	call   c000ffd0 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c00104c4:	83 e0 01             	and    eax,0x1
c00104c7:	c1 e0 04             	shl    eax,0x4
c00104ca:	89 c2                	mov    edx,eax
c00104cc:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c00104d2:	83 e0 ef             	and    eax,0xffffffef
c00104d5:	09 d0                	or     eax,edx
c00104d7:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c00104dd:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c00104e4:	e8 e7 fa ff ff       	call   c000ffd0 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c00104e9:	89 c2                	mov    edx,eax
c00104eb:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c00104f1:	c1 e2 07             	shl    edx,0x7
c00104f4:	83 e0 7f             	and    eax,0x7f
c00104f7:	09 d0                	or     eax,edx
c00104f9:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c00104ff:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0010506:	e8 f3 fa ff ff       	call   c000fffe <CPU::cpuidCheckExtendedECX(unsigned int)>
c001050b:	83 e0 01             	and    eax,0x1
c001050e:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0010515:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c001051b:	83 e0 f7             	and    eax,0xfffffff7
c001051e:	09 d0                	or     eax,edx
c0010520:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c0010526:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c001052d:	e8 cc fa ff ff       	call   c000fffe <CPU::cpuidCheckExtendedECX(unsigned int)>
c0010532:	83 c4 10             	add    esp,0x10
c0010535:	83 e0 01             	and    eax,0x1
c0010538:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c001053f:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c0010545:	83 e0 fb             	and    eax,0xfffffffb
c0010548:	09 d0                	or     eax,edx
c001054a:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c0010550:	83 ec 0c             	sub    esp,0xc
c0010553:	8d 44 24 28          	lea    eax,[esp+0x28]
c0010557:	50                   	push   eax
c0010558:	8d 44 24 28          	lea    eax,[esp+0x28]
c001055c:	50                   	push   eax
c001055d:	8d 7c 24 28          	lea    edi,[esp+0x28]
c0010561:	57                   	push   edi
c0010562:	8d 74 24 28          	lea    esi,[esp+0x28]
c0010566:	56                   	push   esi
c0010567:	6a 01                	push   0x1
c0010569:	e8 82 f9 ff ff       	call   c000fef0 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001056e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0010572:	8a 93 5c 01 00 00    	mov    dl,BYTE PTR [ebx+0x15c]
c0010578:	89 c1                	mov    ecx,eax
c001057a:	83 e2 f0             	and    edx,0xfffffff0
c001057d:	83 e1 0f             	and    ecx,0xf
c0010580:	09 ca                	or     edx,ecx
c0010582:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c0010588:	89 c2                	mov    edx,eax
c001058a:	c1 ea 04             	shr    edx,0x4
c001058d:	83 e2 0f             	and    edx,0xf
c0010590:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0010594:	89 d1                	mov    ecx,edx
c0010596:	83 c4 20             	add    esp,0x20
c0010599:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c001059f:	c1 e1 06             	shl    ecx,0x6
c00105a2:	81 e2 3f c0 ff ff    	and    edx,0xffffc03f
c00105a8:	09 ca                	or     edx,ecx
c00105aa:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c00105b1:	89 c2                	mov    edx,eax
c00105b3:	8a 8b 5d 01 00 00    	mov    cl,BYTE PTR [ebx+0x15d]
c00105b9:	c1 ea 08             	shr    edx,0x8
c00105bc:	83 e1 3f             	and    ecx,0x3f
c00105bf:	83 e2 0f             	and    edx,0xf
c00105c2:	89 d5                	mov    ebp,edx
c00105c4:	83 e5 03             	and    ebp,0x3
c00105c7:	c1 e5 06             	shl    ebp,0x6
c00105ca:	09 e9                	or     ecx,ebp
c00105cc:	89 d5                	mov    ebp,edx
c00105ce:	88 8b 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],cl
c00105d4:	c1 ed 02             	shr    ebp,0x2
c00105d7:	8a 8b 5e 01 00 00    	mov    cl,BYTE PTR [ebx+0x15e]
c00105dd:	83 e1 c0             	and    ecx,0xffffffc0
c00105e0:	09 e9                	or     ecx,ebp
c00105e2:	89 c5                	mov    ebp,eax
c00105e4:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c00105ea:	c1 ed 08             	shr    ebp,0x8
c00105ed:	8a 8b 5c 01 00 00    	mov    cl,BYTE PTR [ebx+0x15c]
c00105f3:	83 e5 30             	and    ebp,0x30
c00105f6:	83 e1 cf             	and    ecx,0xffffffcf
c00105f9:	09 e9                	or     ecx,ebp
c00105fb:	83 fa 06             	cmp    edx,0x6
c00105fe:	88 8b 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],cl
c0010604:	74 05                	je     c001060b <CPU::detectFeatures()+0x54f>
c0010606:	83 fa 0f             	cmp    edx,0xf
c0010609:	75 64                	jne    c001066f <CPU::detectFeatures()+0x5b3>
c001060b:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c0010611:	89 c1                	mov    ecx,eax
c0010613:	81 e5 3f c0 ff ff    	and    ebp,0xffffc03f
c0010619:	c1 e9 10             	shr    ecx,0x10
c001061c:	c1 e1 04             	shl    ecx,0x4
c001061f:	0b 4c 24 0c          	or     ecx,DWORD PTR [esp+0xc]
c0010623:	0f b6 c9             	movzx  ecx,cl
c0010626:	c1 e1 06             	shl    ecx,0x6
c0010629:	09 e9                	or     ecx,ebp
c001062b:	83 fa 0f             	cmp    edx,0xf
c001062e:	66 89 8b 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],cx
c0010635:	75 38                	jne    c001066f <CPU::detectFeatures()+0x5b3>
c0010637:	c1 e8 14             	shr    eax,0x14
c001063a:	83 c0 0f             	add    eax,0xf
c001063d:	0f b6 c0             	movzx  eax,al
c0010640:	89 c2                	mov    edx,eax
c0010642:	c1 e8 02             	shr    eax,0x2
c0010645:	83 e2 03             	and    edx,0x3
c0010648:	89 d1                	mov    ecx,edx
c001064a:	8a 93 5d 01 00 00    	mov    dl,BYTE PTR [ebx+0x15d]
c0010650:	c1 e1 06             	shl    ecx,0x6
c0010653:	83 e2 3f             	and    edx,0x3f
c0010656:	09 ca                	or     edx,ecx
c0010658:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c001065e:	8a 93 5e 01 00 00    	mov    dl,BYTE PTR [ebx+0x15e]
c0010664:	83 e2 c0             	and    edx,0xffffffc0
c0010667:	09 d0                	or     eax,edx
c0010669:	88 83 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],al
c001066f:	83 ec 0c             	sub    esp,0xc
c0010672:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c0010678:	83 c8 07             	or     eax,0x7
c001067b:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c0010681:	8d 44 24 28          	lea    eax,[esp+0x28]
c0010685:	50                   	push   eax
c0010686:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c001068a:	55                   	push   ebp
c001068b:	57                   	push   edi
c001068c:	56                   	push   esi
c001068d:	68 00 00 00 80       	push   0x80000000
c0010692:	e8 59 f8 ff ff       	call   c000fef0 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0010697:	83 c4 20             	add    esp,0x20
c001069a:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c00106a2:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00106a6:	76 1e                	jbe    c00106c6 <CPU::detectFeatures()+0x60a>
c00106a8:	83 ec 0c             	sub    esp,0xc
c00106ab:	50                   	push   eax
c00106ac:	55                   	push   ebp
c00106ad:	57                   	push   edi
c00106ae:	56                   	push   esi
c00106af:	68 01 00 00 80       	push   0x80000001
c00106b4:	e8 37 f8 ff ff       	call   c000fef0 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00106b9:	81 a3 8c 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x118c],0xfffe5fff
c00106c3:	83 c4 20             	add    esp,0x20
c00106c6:	52                   	push   edx
c00106c7:	52                   	push   edx
c00106c8:	68 ed 1a 02 c0       	push   0xc0021aed
c00106cd:	53                   	push   ebx
c00106ce:	e8 99 c0 ff ff       	call   c000c76c <Device::setName(char const*)>
c00106d3:	83 c4 10             	add    esp,0x10
c00106d6:	eb 69                	jmp    c0010741 <CPU::detectFeatures()+0x685>
c00106d8:	50                   	push   eax
c00106d9:	50                   	push   eax
c00106da:	68 52 1a 02 c0       	push   0xc0021a52
c00106df:	55                   	push   ebp
c00106e0:	e8 5b ff fe ff       	call   c0000640 <strcpy>
c00106e5:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c00106ef:	e8 cf fa fe ff       	call   c00001c3 <is486>
c00106f4:	83 c4 10             	add    esp,0x10
c00106f7:	85 c0                	test   eax,eax
c00106f9:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c00106ff:	74 1f                	je     c0010720 <CPU::detectFeatures()+0x664>
c0010701:	83 c8 07             	or     eax,0x7
c0010704:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c001070a:	0f 20 c0             	mov    eax,cr0
c001070d:	83 e0 14             	and    eax,0x14
c0010710:	83 f8 04             	cmp    eax,0x4
c0010713:	75 10                	jne    c0010725 <CPU::detectFeatures()+0x669>
c0010715:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c001071b:	83 e0 fd             	and    eax,0xfffffffd
c001071e:	eb 1b                	jmp    c001073b <CPU::detectFeatures()+0x67f>
c0010720:	83 e0 f8             	and    eax,0xfffffff8
c0010723:	eb df                	jmp    c0010704 <CPU::detectFeatures()+0x648>
c0010725:	e8 74 fa fe ff       	call   c000019e <hasLegacyFPU>
c001072a:	83 e0 01             	and    eax,0x1
c001072d:	8d 14 00             	lea    edx,[eax+eax*1]
c0010730:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c0010736:	83 e0 fd             	and    eax,0xfffffffd
c0010739:	09 d0                	or     eax,edx
c001073b:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c0010741:	f6 83 8e 11 00 00 02 	test   BYTE PTR [ebx+0x118e],0x2
c0010748:	74 17                	je     c0010761 <CPU::detectFeatures()+0x6a5>
c001074a:	8b 15 b8 5e 02 c0    	mov    edx,DWORD PTR ds:0xc0025eb8
c0010750:	8a 82 6c 01 00 00    	mov    al,BYTE PTR [edx+0x16c]
c0010756:	83 c8 10             	or     eax,0x10
c0010759:	88 82 6c 01 00 00    	mov    BYTE PTR [edx+0x16c],al
c001075f:	eb 20                	jmp    c0010781 <CPU::detectFeatures()+0x6c5>
c0010761:	e8 38 fa fe ff       	call   c000019e <hasLegacyFPU>
c0010766:	83 e0 01             	and    eax,0x1
c0010769:	8d 14 00             	lea    edx,[eax+eax*1]
c001076c:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c0010772:	83 e0 fd             	and    eax,0xfffffffd
c0010775:	09 d0                	or     eax,edx
c0010777:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c001077d:	a8 02                	test   al,0x2
c001077f:	75 c9                	jne    c001074a <CPU::detectFeatures()+0x68e>
c0010781:	c6 83 90 11 00 00 00 	mov    BYTE PTR [ebx+0x1190],0x0
c0010788:	83 c4 2c             	add    esp,0x2c
c001078b:	5b                   	pop    ebx
c001078c:	5e                   	pop    esi
c001078d:	5f                   	pop    edi
c001078e:	5d                   	pop    ebp
c001078f:	c3                   	ret    

c0010790 <CPU::setupSMEP()>:
c0010790:	0f 20 e0             	mov    eax,cr4
c0010793:	0d 00 00 10 00       	or     eax,0x100000
c0010798:	0f 22 e0             	mov    cr4,eax
c001079b:	c3                   	ret    

c001079c <CPU::setupUMIP()>:
c001079c:	0f 20 e0             	mov    eax,cr4
c001079f:	80 cc 08             	or     ah,0x8
c00107a2:	0f 22 e0             	mov    cr4,eax
c00107a5:	c3                   	ret    

c00107a6 <CPU::setupTSC()>:
c00107a6:	0f 20 e0             	mov    eax,cr4
c00107a9:	83 c8 04             	or     eax,0x4
c00107ac:	0f 22 e0             	mov    cr4,eax
c00107af:	c3                   	ret    

c00107b0 <CPU::setupLargePages()>:
c00107b0:	0f 20 e0             	mov    eax,cr4
c00107b3:	83 c8 10             	or     eax,0x10
c00107b6:	0f 22 e0             	mov    cr4,eax
c00107b9:	c3                   	ret    

c00107ba <CPU::setupPAT()>:
c00107ba:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c00107bf:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c00107c6:	74 2c                	je     c00107f4 <CPU::setupPAT()+0x3a>
c00107c8:	53                   	push   ebx
c00107c9:	83 ec 10             	sub    esp,0x10
c00107cc:	68 77 02 00 00       	push   0x277
c00107d1:	50                   	push   eax
c00107d2:	e8 eb 68 ff ff       	call   c00070c2 <Computer::rdmsr(unsigned int)>
c00107d7:	83 e2 f8             	and    edx,0xfffffff8
c00107da:	83 ca 01             	or     edx,0x1
c00107dd:	52                   	push   edx
c00107de:	50                   	push   eax
c00107df:	68 77 02 00 00       	push   0x277
c00107e4:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c00107ea:	e8 ff 68 ff ff       	call   c00070ee <Computer::wrmsr(unsigned int, unsigned long long)>
c00107ef:	83 c4 28             	add    esp,0x28
c00107f2:	5b                   	pop    ebx
c00107f3:	c3                   	ret    
c00107f4:	c3                   	ret    
c00107f5:	90                   	nop

c00107f6 <CPU::setupMTRR()>:
c00107f6:	c3                   	ret    
c00107f7:	90                   	nop

c00107f8 <CPU::setupGlobalPages()>:
c00107f8:	0f 20 e0             	mov    eax,cr4
c00107fb:	0c 80                	or     al,0x80
c00107fd:	0f 22 e0             	mov    cr4,eax
c0010800:	c3                   	ret    
c0010801:	90                   	nop

c0010802 <CPU::allowUsermodeDataAccess()>:
c0010802:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010806:	f6 80 8d 11 00 00 10 	test   BYTE PTR [eax+0x118d],0x10
c001080d:	74 03                	je     c0010812 <CPU::allowUsermodeDataAccess()+0x10>
c001080f:	0f 01 cb             	stac   
c0010812:	c3                   	ret    
c0010813:	90                   	nop

c0010814 <CPU::prohibitUsermodeDataAccess()>:
c0010814:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010818:	f6 80 8d 11 00 00 10 	test   BYTE PTR [eax+0x118d],0x10
c001081f:	74 03                	je     c0010824 <CPU::prohibitUsermodeDataAccess()+0x10>
c0010821:	0f 01 ca             	clac   
c0010824:	c3                   	ret    
c0010825:	90                   	nop

c0010826 <CPU::setupSMAP()>:
c0010826:	0f 20 e0             	mov    eax,cr4
c0010829:	0d 00 00 20 00       	or     eax,0x200000
c001082e:	0f 22 e0             	mov    cr4,eax
c0010831:	eb e1                	jmp    c0010814 <CPU::prohibitUsermodeDataAccess()>
c0010833:	90                   	nop

c0010834 <CPU::setupFeatures()>:
c0010834:	53                   	push   ebx
c0010835:	83 ec 08             	sub    esp,0x8
c0010838:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001083c:	f6 83 8d 11 00 00 08 	test   BYTE PTR [ebx+0x118d],0x8
c0010843:	74 18                	je     c001085d <CPU::setupFeatures()+0x29>
c0010845:	83 ec 0c             	sub    esp,0xc
c0010848:	68 f9 1a 02 c0       	push   0xc0021af9
c001084d:	e8 f3 a0 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0010852:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010855:	e8 42 ff ff ff       	call   c001079c <CPU::setupUMIP()>
c001085a:	83 c4 10             	add    esp,0x10
c001085d:	f6 83 8c 11 00 00 02 	test   BYTE PTR [ebx+0x118c],0x2
c0010864:	74 18                	je     c001087e <CPU::setupFeatures()+0x4a>
c0010866:	83 ec 0c             	sub    esp,0xc
c0010869:	68 03 1b 02 c0       	push   0xc0021b03
c001086e:	e8 d2 a0 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0010873:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010876:	e8 2b ff ff ff       	call   c00107a6 <CPU::setupTSC()>
c001087b:	83 c4 10             	add    esp,0x10
c001087e:	f6 83 8c 11 00 00 08 	test   BYTE PTR [ebx+0x118c],0x8
c0010885:	74 18                	je     c001089f <CPU::setupFeatures()+0x6b>
c0010887:	83 ec 0c             	sub    esp,0xc
c001088a:	68 0c 1b 02 c0       	push   0xc0021b0c
c001088f:	e8 b1 a0 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0010894:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010897:	e8 14 ff ff ff       	call   c00107b0 <CPU::setupLargePages()>
c001089c:	83 c4 10             	add    esp,0x10
c001089f:	f6 83 8c 11 00 00 10 	test   BYTE PTR [ebx+0x118c],0x10
c00108a6:	74 18                	je     c00108c0 <CPU::setupFeatures()+0x8c>
c00108a8:	83 ec 0c             	sub    esp,0xc
c00108ab:	68 15 1b 02 c0       	push   0xc0021b15
c00108b0:	e8 90 a0 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c00108b5:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00108b8:	e8 3b ff ff ff       	call   c00107f8 <CPU::setupGlobalPages()>
c00108bd:	83 c4 10             	add    esp,0x10
c00108c0:	f6 83 8c 11 00 00 20 	test   BYTE PTR [ebx+0x118c],0x20
c00108c7:	74 18                	je     c00108e1 <CPU::setupFeatures()+0xad>
c00108c9:	83 ec 0c             	sub    esp,0xc
c00108cc:	68 27 1b 02 c0       	push   0xc0021b27
c00108d1:	e8 6f a0 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c00108d6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00108d9:	e8 dc fe ff ff       	call   c00107ba <CPU::setupPAT()>
c00108de:	83 c4 10             	add    esp,0x10
c00108e1:	f6 83 8e 11 00 00 01 	test   BYTE PTR [ebx+0x118e],0x1
c00108e8:	74 11                	je     c00108fb <CPU::setupFeatures()+0xc7>
c00108ea:	c7 44 24 10 30 1b 02 c0 	mov    DWORD PTR [esp+0x10],0xc0021b30
c00108f2:	83 c4 08             	add    esp,0x8
c00108f5:	5b                   	pop    ebx
c00108f6:	e9 4a a0 ff ff       	jmp    c000a945 <Dbg::kprintf(char const*, ...)>
c00108fb:	83 c4 08             	add    esp,0x8
c00108fe:	5b                   	pop    ebx
c00108ff:	c3                   	ret    

c0010900 <CPU::open(int, int, void*)>:
c0010900:	55                   	push   ebp
c0010901:	57                   	push   edi
c0010902:	56                   	push   esi
c0010903:	53                   	push   ebx
c0010904:	83 ec 18             	sub    esp,0x18
c0010907:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001090b:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001090f:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0010913:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c0010919:	89 bb 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edi
c001091f:	8d ab 7c 11 00 00    	lea    ebp,[ebx+0x117c]
c0010925:	50                   	push   eax
c0010926:	e8 95 6a ff ff       	call   c00073c0 <GDT::setup()>
c001092b:	83 c4 0c             	add    esp,0xc
c001092e:	6a 00                	push   0x0
c0010930:	68 ef be ad de       	push   0xdeadbeef
c0010935:	55                   	push   ebp
c0010936:	e8 4d 86 ff ff       	call   c0008f88 <TSS::setup(unsigned long, unsigned long)>
c001093b:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001093e:	e8 25 86 ff ff       	call   c0008f68 <TSS::flush()>
c0010943:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c0010949:	89 04 24             	mov    DWORD PTR [esp],eax
c001094c:	e8 d1 6c ff ff       	call   c0007622 <IDT::setup()>
c0010951:	b8 00 04 00 00       	mov    eax,0x400
c0010956:	0f 23 f8             	mov    db7,eax
c0010959:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c0010963:	e8 57 74 ff ff       	call   c0007dbf <Phys::allocatePage()>
c0010968:	83 c4 10             	add    esp,0x10
c001096b:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0010971:	85 f6                	test   esi,esi
c0010973:	89 38                	mov    DWORD PTR [eax],edi
c0010975:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001097b:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c001097e:	74 10                	je     c0010990 <CPU::open(int, int, void*)+0x90>
c0010980:	50                   	push   eax
c0010981:	50                   	push   eax
c0010982:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0010988:	56                   	push   esi
c0010989:	e8 20 8f ff ff       	call   c00098ae <VAS::setCPUSpecific(unsigned long)>
c001098e:	eb 0d                	jmp    c001099d <CPU::open(int, int, void*)+0x9d>
c0010990:	83 ec 0c             	sub    esp,0xc
c0010993:	68 3a 1b 02 c0       	push   0xc0021b3a
c0010998:	e8 50 08 00 00       	call   c00111ed <KePanic(char const*)>
c001099d:	83 c4 10             	add    esp,0x10
c00109a0:	83 ec 0c             	sub    esp,0xc
c00109a3:	68 48 1b 02 c0       	push   0xc0021b48
c00109a8:	e8 69 01 00 00       	call   c0010b16 <KeSetBootMessage(char const*)>
c00109ad:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00109b0:	e8 07 f7 ff ff       	call   c00100bc <CPU::detectFeatures()>
c00109b5:	c7 04 24 6b 1b 02 c0 	mov    DWORD PTR [esp],0xc0021b6b
c00109bc:	e8 55 01 00 00       	call   c0010b16 <KeSetBootMessage(char const*)>
c00109c1:	e8 bb 71 00 00       	call   c0017b81 <HalInitialise()>
c00109c6:	a1 d0 5e 02 c0       	mov    eax,ds:0xc0025ed0
c00109cb:	83 e0 10             	and    eax,0x10
c00109ce:	83 f8 01             	cmp    eax,0x1
c00109d1:	19 c0                	sbb    eax,eax
c00109d3:	83 e0 46             	and    eax,0x46
c00109d6:	83 c0 1e             	add    eax,0x1e
c00109d9:	89 04 24             	mov    DWORD PTR [esp],eax
c00109dc:	e8 28 d6 ff ff       	call   c000e009 <setupTimer(int)>
c00109e1:	83 c4 10             	add    esp,0x10
c00109e4:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c00109ea:	f6 05 d0 5e 02 c0 20 	test   BYTE PTR ds:0xc0025ed0,0x20
c00109f1:	74 0c                	je     c00109ff <CPU::open(int, int, void*)+0xff>
c00109f3:	83 ec 0c             	sub    esp,0xc
c00109f6:	53                   	push   ebx
c00109f7:	e8 38 fe ff ff       	call   c0010834 <CPU::setupFeatures()>
c00109fc:	83 c4 10             	add    esp,0x10
c00109ff:	83 c4 0c             	add    esp,0xc
c0010a02:	31 c0                	xor    eax,eax
c0010a04:	5b                   	pop    ebx
c0010a05:	5e                   	pop    esi
c0010a06:	5f                   	pop    edi
c0010a07:	5d                   	pop    ebp
c0010a08:	c3                   	ret    

c0010a09 <KeInitialiseAtexit()>:
c0010a09:	83 ec 10             	sub    esp,0x10
c0010a0c:	c7 05 00 9a 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029a00,0x0
c0010a16:	68 00 01 00 00       	push   0x100
c0010a1b:	6a 00                	push   0x0
c0010a1d:	68 20 9b 02 c0       	push   0xc0029b20
c0010a22:	e8 c9 fa fe ff       	call   c00004f0 <memset>
c0010a27:	83 c4 1c             	add    esp,0x1c
c0010a2a:	c3                   	ret    

c0010a2b <KeRegisterAtexit(void (*)(void*), void*)>:
c0010a2b:	a1 00 9a 02 c0       	mov    eax,ds:0xc0029a00
c0010a30:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0010a34:	89 14 85 20 9b 02 c0 	mov    DWORD PTR [eax*4-0x3ffd64e0],edx
c0010a3b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010a3f:	89 14 85 20 9a 02 c0 	mov    DWORD PTR [eax*4-0x3ffd65e0],edx
c0010a46:	40                   	inc    eax
c0010a47:	a3 00 9a 02 c0       	mov    ds:0xc0029a00,eax
c0010a4c:	83 f8 3f             	cmp    eax,0x3f
c0010a4f:	7e 0d                	jle    c0010a5e <KeRegisterAtexit(void (*)(void*), void*)+0x33>
c0010a51:	c7 44 24 04 ac 1b 02 c0 	mov    DWORD PTR [esp+0x4],0xc0021bac
c0010a59:	e9 8f 07 00 00       	jmp    c00111ed <KePanic(char const*)>
c0010a5e:	c3                   	ret    

c0010a5f <KeExecuteAtexit()>:
c0010a5f:	53                   	push   ebx
c0010a60:	31 db                	xor    ebx,ebx
c0010a62:	83 ec 08             	sub    esp,0x8
c0010a65:	39 1d 00 9a 02 c0    	cmp    DWORD PTR ds:0xc0029a00,ebx
c0010a6b:	7e 28                	jle    c0010a95 <KeExecuteAtexit()+0x36>
c0010a6d:	8b 04 9d 20 9b 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd64e0]
c0010a74:	85 c0                	test   eax,eax
c0010a76:	74 1a                	je     c0010a92 <KeExecuteAtexit()+0x33>
c0010a78:	83 ec 0c             	sub    esp,0xc
c0010a7b:	ff 34 9d 20 9a 02 c0 	push   DWORD PTR [ebx*4-0x3ffd65e0]
c0010a82:	ff d0                	call   eax
c0010a84:	c7 04 9d 20 9b 02 c0 00 00 00 00 	mov    DWORD PTR [ebx*4-0x3ffd64e0],0x0
c0010a8f:	83 c4 10             	add    esp,0x10
c0010a92:	43                   	inc    ebx
c0010a93:	eb d0                	jmp    c0010a65 <KeExecuteAtexit()+0x6>
c0010a95:	83 c4 08             	add    esp,0x8
c0010a98:	5b                   	pop    ebx
c0010a99:	c3                   	ret    

c0010a9a <KeDisplaySplashScreen()>:
c0010a9a:	55                   	push   ebp
c0010a9b:	bd 05 00 00 00       	mov    ebp,0x5
c0010aa0:	57                   	push   edi
c0010aa1:	bf 0a 00 00 00       	mov    edi,0xa
c0010aa6:	56                   	push   esi
c0010aa7:	31 f6                	xor    esi,esi
c0010aa9:	53                   	push   ebx
c0010aaa:	31 db                	xor    ebx,ebx
c0010aac:	83 ec 0c             	sub    esp,0xc
c0010aaf:	0f b6 96 80 2f 02 c0 	movzx  edx,BYTE PTR [esi-0x3ffdd080]
c0010ab6:	89 d0                	mov    eax,edx
c0010ab8:	85 d2                	test   edx,edx
c0010aba:	74 52                	je     c0010b0e <KeDisplaySplashScreen()+0x74>
c0010abc:	80 bb b6 2f 02 c0 db 	cmp    BYTE PTR [ebx-0x3ffdd04a],0xdb
c0010ac3:	75 13                	jne    c0010ad8 <KeDisplaySplashScreen()+0x3e>
c0010ac5:	0f b6 8b b5 2f 02 c0 	movzx  ecx,BYTE PTR [ebx-0x3ffdd04b]
c0010acc:	83 e1 fe             	and    ecx,0xfffffffe
c0010acf:	81 f9 ba 00 00 00    	cmp    ecx,0xba
c0010ad5:	75 01                	jne    c0010ad8 <KeDisplaySplashScreen()+0x3e>
c0010ad7:	47                   	inc    edi
c0010ad8:	83 fa 0d             	cmp    edx,0xd
c0010adb:	74 28                	je     c0010b05 <KeDisplaySplashScreen()+0x6b>
c0010add:	83 fa 0a             	cmp    edx,0xa
c0010ae0:	75 0a                	jne    c0010aec <KeDisplaySplashScreen()+0x52>
c0010ae2:	45                   	inc    ebp
c0010ae3:	bf 0a 00 00 00       	mov    edi,0xa
c0010ae8:	31 db                	xor    ebx,ebx
c0010aea:	eb 19                	jmp    c0010b05 <KeDisplaySplashScreen()+0x6b>
c0010aec:	83 ec 0c             	sub    esp,0xc
c0010aef:	8d 14 1f             	lea    edx,[edi+ebx*1]
c0010af2:	55                   	push   ebp
c0010af3:	0f be c0             	movsx  eax,al
c0010af6:	52                   	push   edx
c0010af7:	43                   	inc    ebx
c0010af8:	6a 00                	push   0x0
c0010afa:	6a 0e                	push   0xe
c0010afc:	50                   	push   eax
c0010afd:	e8 fe 7c 00 00       	call   c0018800 <HalConsoleWriteCharacter(char, int, int, int, int)>
c0010b02:	83 c4 20             	add    esp,0x20
c0010b05:	46                   	inc    esi
c0010b06:	81 fe 42 01 00 00    	cmp    esi,0x142
c0010b0c:	75 a1                	jne    c0010aaf <KeDisplaySplashScreen()+0x15>
c0010b0e:	83 c4 0c             	add    esp,0xc
c0010b11:	5b                   	pop    ebx
c0010b12:	5e                   	pop    esi
c0010b13:	5f                   	pop    edi
c0010b14:	5d                   	pop    ebp
c0010b15:	c3                   	ret    

c0010b16 <KeSetBootMessage(char const*)>:
c0010b16:	57                   	push   edi
c0010b17:	56                   	push   esi
c0010b18:	53                   	push   ebx
c0010b19:	81 ec a4 00 00 00    	sub    esp,0xa4
c0010b1f:	8b 9c 24 b4 00 00 00 	mov    ebx,DWORD PTR [esp+0xb4]
c0010b26:	68 9e 00 00 00       	push   0x9e
c0010b2b:	6a 00                	push   0x0
c0010b2d:	8d 74 24 0e          	lea    esi,[esp+0xe]
c0010b31:	56                   	push   esi
c0010b32:	e8 b9 f9 fe ff       	call   c00004f0 <memset>
c0010b37:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010b3a:	e8 31 fa fe ff       	call   c0000570 <strlen>
c0010b3f:	ba 50 00 00 00       	mov    edx,0x50
c0010b44:	83 c4 10             	add    esp,0x10
c0010b47:	29 c2                	sub    edx,eax
c0010b49:	31 c9                	xor    ecx,ecx
c0010b4b:	83 e2 fe             	and    edx,0xfffffffe
c0010b4e:	01 f2                	add    edx,esi
c0010b50:	66 0f be 04 0b       	movsx  ax,BYTE PTR [ebx+ecx*1]
c0010b55:	84 c0                	test   al,al
c0010b57:	74 0a                	je     c0010b63 <KeSetBootMessage(char const*)+0x4d>
c0010b59:	80 cc 0f             	or     ah,0xf
c0010b5c:	66 89 04 4a          	mov    WORD PTR [edx+ecx*2],ax
c0010b60:	41                   	inc    ecx
c0010b61:	eb ed                	jmp    c0010b50 <KeSetBootMessage(char const*)+0x3a>
c0010b63:	bf 80 8c 0b c2       	mov    edi,0xc20b8c80
c0010b68:	b9 9e 00 00 00       	mov    ecx,0x9e
c0010b6d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010b6f:	81 c4 a0 00 00 00    	add    esp,0xa0
c0010b75:	5b                   	pop    ebx
c0010b76:	5e                   	pop    esi
c0010b77:	5f                   	pop    edi
c0010b78:	c3                   	ret    
c0010b79:	66 90                	xchg   ax,ax
c0010b7b:	90                   	nop

c0010b7c <Krnl::handlePowerButton()>:
c0010b7c:	83 ec 0c             	sub    esp,0xc
c0010b7f:	e8 c4 06 00 00       	call   c0011248 <KeHandlePowerButton()>
c0010b84:	90                   	nop
c0010b85:	83 c4 0c             	add    esp,0xc
c0010b88:	c3                   	ret    
c0010b89:	8d 76 00             	lea    esi,[esi+0x0]

c0010b8c <Krnl::handleSleepButton()>:
c0010b8c:	83 ec 0c             	sub    esp,0xc
c0010b8f:	e8 e9 06 00 00       	call   c001127d <KeHandleSleepButton()>
c0010b94:	90                   	nop
c0010b95:	83 c4 0c             	add    esp,0xc
c0010b98:	c3                   	ret    
c0010b99:	90                   	nop

c0010b9a <EnvVarContainer::getEnv(char const*)>:
c0010b9a:	57                   	push   edi
c0010b9b:	56                   	push   esi
c0010b9c:	53                   	push   ebx
c0010b9d:	31 db                	xor    ebx,ebx
c0010b9f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0010ba3:	39 1e                	cmp    DWORD PTR [esi],ebx
c0010ba5:	7e 2b                	jle    c0010bd2 <EnvVarContainer::getEnv(char const*)+0x38>
c0010ba7:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c0010bae:	50                   	push   eax
c0010baf:	50                   	push   eax
c0010bb0:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0010bb3:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c0010bb6:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0010bba:	e8 91 fb fe ff       	call   c0000750 <strcmp>
c0010bbf:	83 c4 10             	add    esp,0x10
c0010bc2:	85 c0                	test   eax,eax
c0010bc4:	75 09                	jne    c0010bcf <EnvVarContainer::getEnv(char const*)+0x35>
c0010bc6:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0010bc9:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c0010bcd:	eb 05                	jmp    c0010bd4 <EnvVarContainer::getEnv(char const*)+0x3a>
c0010bcf:	43                   	inc    ebx
c0010bd0:	eb d1                	jmp    c0010ba3 <EnvVarContainer::getEnv(char const*)+0x9>
c0010bd2:	31 c0                	xor    eax,eax
c0010bd4:	5b                   	pop    ebx
c0010bd5:	5e                   	pop    esi
c0010bd6:	5f                   	pop    edi
c0010bd7:	c3                   	ret    

c0010bd8 <EnvVarContainer::setEnv(char const*, char const*)>:
c0010bd8:	55                   	push   ebp
c0010bd9:	57                   	push   edi
c0010bda:	56                   	push   esi
c0010bdb:	53                   	push   ebx
c0010bdc:	83 ec 28             	sub    esp,0x28
c0010bdf:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0010be3:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c0010be7:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0010beb:	56                   	push   esi
c0010bec:	e8 7f f9 fe ff       	call   c0000570 <strlen>
c0010bf1:	40                   	inc    eax
c0010bf2:	89 04 24             	mov    DWORD PTR [esp],eax
c0010bf5:	e8 bc 6e ff ff       	call   c0007ab6 <malloc>
c0010bfa:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010bfd:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0010c01:	e8 6a f9 fe ff       	call   c0000570 <strlen>
c0010c06:	40                   	inc    eax
c0010c07:	89 04 24             	mov    DWORD PTR [esp],eax
c0010c0a:	e8 a7 6e ff ff       	call   c0007ab6 <malloc>
c0010c0f:	89 34 24             	mov    DWORD PTR [esp],esi
c0010c12:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0010c16:	e8 55 f9 fe ff       	call   c0000570 <strlen>
c0010c1b:	83 c4 0c             	add    esp,0xc
c0010c1e:	40                   	inc    eax
c0010c1f:	50                   	push   eax
c0010c20:	6a 00                	push   0x0
c0010c22:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0010c26:	e8 c5 f8 fe ff       	call   c00004f0 <memset>
c0010c2b:	89 34 24             	mov    DWORD PTR [esp],esi
c0010c2e:	e8 3d f9 fe ff       	call   c0000570 <strlen>
c0010c33:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0010c37:	8d 48 01             	lea    ecx,[eax+0x1]
c0010c3a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010c3c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010c3f:	89 de                	mov    esi,ebx
c0010c41:	e8 2a f9 fe ff       	call   c0000570 <strlen>
c0010c46:	83 c4 0c             	add    esp,0xc
c0010c49:	40                   	inc    eax
c0010c4a:	50                   	push   eax
c0010c4b:	6a 00                	push   0x0
c0010c4d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010c51:	e8 9a f8 fe ff       	call   c00004f0 <memset>
c0010c56:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010c59:	e8 12 f9 fe ff       	call   c0000570 <strlen>
c0010c5e:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0010c62:	8d 48 01             	lea    ecx,[eax+0x1]
c0010c65:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010c67:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0010c6a:	40                   	inc    eax
c0010c6b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0010c6e:	c1 e0 03             	shl    eax,0x3
c0010c71:	5a                   	pop    edx
c0010c72:	59                   	pop    ecx
c0010c73:	50                   	push   eax
c0010c74:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0010c77:	e8 26 6e ff ff       	call   c0007aa2 <realloc>
c0010c7c:	8d 74 24 18          	lea    esi,[esp+0x18]
c0010c80:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0010c83:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0010c86:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c0010c8a:	b9 08 00 00 00       	mov    ecx,0x8
c0010c8f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010c91:	83 c4 2c             	add    esp,0x2c
c0010c94:	5b                   	pop    ebx
c0010c95:	5e                   	pop    esi
c0010c96:	5f                   	pop    edi
c0010c97:	5d                   	pop    ebp
c0010c98:	c3                   	ret    
c0010c99:	90                   	nop

c0010c9a <EnvVarContainer::deleteEnv(char const*)>:
c0010c9a:	c3                   	ret    
c0010c9b:	90                   	nop

c0010c9c <EnvVarContainer::loadFrom(char const*, char const*)>:
c0010c9c:	55                   	push   ebp
c0010c9d:	57                   	push   edi
c0010c9e:	56                   	push   esi
c0010c9f:	53                   	push   ebx
c0010ca0:	81 ec 38 01 00 00    	sub    esp,0x138
c0010ca6:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c0010cad:	8b b4 24 54 01 00 00 	mov    esi,DWORD PTR [esp+0x154]
c0010cb4:	68 14 01 00 00       	push   0x114
c0010cb9:	e8 f8 6d ff ff       	call   c0007ab6 <malloc>
c0010cbe:	83 c4 0c             	add    esp,0xc
c0010cc1:	89 c3                	mov    ebx,eax
c0010cc3:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0010cc6:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0010ccd:	50                   	push   eax
c0010cce:	e8 05 aa ff ff       	call   c000b6d8 <File::File(char const*, Process*)>
c0010cd3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010cd6:	e8 7d ad ff ff       	call   c000ba58 <File::exists()>
c0010cdb:	83 c4 10             	add    esp,0x10
c0010cde:	84 c0                	test   al,al
c0010ce0:	75 31                	jne    c0010d13 <EnvVarContainer::loadFrom(char const*, char const*)+0x77>
c0010ce2:	50                   	push   eax
c0010ce3:	50                   	push   eax
c0010ce4:	6a 12                	push   0x12
c0010ce6:	53                   	push   ebx
c0010ce7:	e8 a8 aa ff ff       	call   c000b794 <File::open(FileOpenMode)>
c0010cec:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010cee:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0010cf1:	89 34 24             	mov    DWORD PTR [esp],esi
c0010cf4:	e8 77 f8 fe ff       	call   c0000570 <strlen>
c0010cf9:	5a                   	pop    edx
c0010cfa:	31 d2                	xor    edx,edx
c0010cfc:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0010d00:	51                   	push   ecx
c0010d01:	56                   	push   esi
c0010d02:	52                   	push   edx
c0010d03:	50                   	push   eax
c0010d04:	53                   	push   ebx
c0010d05:	ff d7                	call   edi
c0010d07:	83 c4 14             	add    esp,0x14
c0010d0a:	53                   	push   ebx
c0010d0b:	e8 e2 aa ff ff       	call   c000b7f2 <File::close()>
c0010d10:	83 c4 10             	add    esp,0x10
c0010d13:	56                   	push   esi
c0010d14:	31 f6                	xor    esi,esi
c0010d16:	68 00 01 00 00       	push   0x100
c0010d1b:	6a 00                	push   0x0
c0010d1d:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0010d21:	50                   	push   eax
c0010d22:	e8 c9 f7 fe ff       	call   c00004f0 <memset>
c0010d27:	5f                   	pop    edi
c0010d28:	58                   	pop    eax
c0010d29:	6a 01                	push   0x1
c0010d2b:	53                   	push   ebx
c0010d2c:	e8 63 aa ff ff       	call   c000b794 <File::open(FileOpenMode)>
c0010d31:	83 c4 10             	add    esp,0x10
c0010d34:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0010d3c:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0010d44:	83 ec 0c             	sub    esp,0xc
c0010d47:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010d49:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0010d4d:	51                   	push   ecx
c0010d4e:	8d 54 24 23          	lea    edx,[esp+0x23]
c0010d52:	52                   	push   edx
c0010d53:	6a 00                	push   0x0
c0010d55:	6a 01                	push   0x1
c0010d57:	53                   	push   ebx
c0010d58:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0010d5b:	0f be 44 24 33       	movsx  eax,BYTE PTR [esp+0x33]
c0010d60:	83 c4 20             	add    esp,0x20
c0010d63:	89 c2                	mov    edx,eax
c0010d65:	85 c0                	test   eax,eax
c0010d67:	0f 84 36 01 00 00    	je     c0010ea3 <EnvVarContainer::loadFrom(char const*, char const*)+0x207>
c0010d6d:	83 f8 0d             	cmp    eax,0xd
c0010d70:	0f 84 22 01 00 00    	je     c0010e98 <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c0010d76:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0010d7b:	0f 84 f0 00 00 00    	je     c0010e71 <EnvVarContainer::loadFrom(char const*, char const*)+0x1d5>
c0010d81:	83 f8 0a             	cmp    eax,0xa
c0010d84:	74 13                	je     c0010d99 <EnvVarContainer::loadFrom(char const*, char const*)+0xfd>
c0010d86:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0010d8b:	74 0c                	je     c0010d99 <EnvVarContainer::loadFrom(char const*, char const*)+0xfd>
c0010d8d:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0010d93:	0f 8e f6 00 00 00    	jle    c0010e8f <EnvVarContainer::loadFrom(char const*, char const*)+0x1f3>
c0010d99:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010d9d:	83 ec 0c             	sub    esp,0xc
c0010da0:	8d 78 01             	lea    edi,[eax+0x1]
c0010da3:	57                   	push   edi
c0010da4:	e8 0d 6d ff ff       	call   c0007ab6 <malloc>
c0010da9:	2b 74 24 18          	sub    esi,DWORD PTR [esp+0x18]
c0010dad:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0010db1:	8d 56 04             	lea    edx,[esi+0x4]
c0010db4:	89 14 24             	mov    DWORD PTR [esp],edx
c0010db7:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0010dbb:	e8 f6 6c ff ff       	call   c0007ab6 <malloc>
c0010dc0:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0010dc4:	83 c4 0c             	add    esp,0xc
c0010dc7:	57                   	push   edi
c0010dc8:	6a 00                	push   0x0
c0010dca:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0010dce:	e8 1d f7 fe ff       	call   c00004f0 <memset>
c0010dd3:	8d 74 24 30          	lea    esi,[esp+0x30]
c0010dd7:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0010ddb:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0010ddf:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010de1:	83 c4 0c             	add    esp,0xc
c0010de4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0010de8:	52                   	push   edx
c0010de9:	6a 00                	push   0x0
c0010deb:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0010def:	e8 fc f6 fe ff       	call   c00004f0 <memset>
c0010df4:	8d 74 24 30          	lea    esi,[esp+0x30]
c0010df8:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c0010dfc:	89 34 24             	mov    DWORD PTR [esp],esi
c0010dff:	e8 6c f7 fe ff       	call   c0000570 <strlen>
c0010e04:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c0010e08:	89 c1                	mov    ecx,eax
c0010e0a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010e0c:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0010e0f:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0010e12:	40                   	inc    eax
c0010e13:	83 c4 10             	add    esp,0x10
c0010e16:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0010e19:	85 d2                	test   edx,edx
c0010e1b:	75 0c                	jne    c0010e29 <EnvVarContainer::loadFrom(char const*, char const*)+0x18d>
c0010e1d:	83 ec 0c             	sub    esp,0xc
c0010e20:	6a 08                	push   0x8
c0010e22:	e8 8f 6c ff ff       	call   c0007ab6 <malloc>
c0010e27:	eb 0c                	jmp    c0010e35 <EnvVarContainer::loadFrom(char const*, char const*)+0x199>
c0010e29:	c1 e0 03             	shl    eax,0x3
c0010e2c:	51                   	push   ecx
c0010e2d:	51                   	push   ecx
c0010e2e:	50                   	push   eax
c0010e2f:	52                   	push   edx
c0010e30:	e8 6d 6c ff ff       	call   c0007aa2 <realloc>
c0010e35:	83 c4 10             	add    esp,0x10
c0010e38:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0010e3b:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0010e3e:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c0010e41:	8d 74 24 18          	lea    esi,[esp+0x18]
c0010e45:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c0010e49:	b9 08 00 00 00       	mov    ecx,0x8
c0010e4e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010e50:	31 f6                	xor    esi,esi
c0010e52:	50                   	push   eax
c0010e53:	68 00 01 00 00       	push   0x100
c0010e58:	6a 00                	push   0x0
c0010e5a:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0010e5e:	50                   	push   eax
c0010e5f:	e8 8c f6 fe ff       	call   c00004f0 <memset>
c0010e64:	83 c4 10             	add    esp,0x10
c0010e67:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0010e6f:	eb 27                	jmp    c0010e98 <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c0010e71:	83 f8 3d             	cmp    eax,0x3d
c0010e74:	74 1e                	je     c0010e94 <EnvVarContainer::loadFrom(char const*, char const*)+0x1f8>
c0010e76:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0010e7c:	7f 07                	jg     c0010e85 <EnvVarContainer::loadFrom(char const*, char const*)+0x1e9>
c0010e7e:	88 54 34 20          	mov    BYTE PTR [esp+esi*1+0x20],dl
c0010e82:	46                   	inc    esi
c0010e83:	eb 13                	jmp    c0010e98 <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c0010e85:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c0010e8d:	eb 09                	jmp    c0010e98 <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c0010e8f:	83 f8 3d             	cmp    eax,0x3d
c0010e92:	75 ea                	jne    c0010e7e <EnvVarContainer::loadFrom(char const*, char const*)+0x1e2>
c0010e94:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0010e98:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0010e9d:	0f 85 99 fe ff ff    	jne    c0010d3c <EnvVarContainer::loadFrom(char const*, char const*)+0xa0>
c0010ea3:	83 ec 0c             	sub    esp,0xc
c0010ea6:	53                   	push   ebx
c0010ea7:	e8 46 a9 ff ff       	call   c000b7f2 <File::close()>
c0010eac:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010eae:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010eb1:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0010eb4:	81 c4 3c 01 00 00    	add    esp,0x13c
c0010eba:	5b                   	pop    ebx
c0010ebb:	5e                   	pop    esi
c0010ebc:	5f                   	pop    edi
c0010ebd:	5d                   	pop    ebp
c0010ebe:	c3                   	ret    
c0010ebf:	90                   	nop

c0010ec0 <EnvVarContainer::__loadSystem()>:
c0010ec0:	83 ec 10             	sub    esp,0x10
c0010ec3:	68 e0 30 02 c0       	push   0xc00230e0
c0010ec8:	68 c5 1b 02 c0       	push   0xc0021bc5
c0010ecd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010ed1:	e8 c6 fd ff ff       	call   c0010c9c <EnvVarContainer::loadFrom(char const*, char const*)>
c0010ed6:	83 c4 1c             	add    esp,0x1c
c0010ed9:	c3                   	ret    

c0010eda <EnvVarContainer::__loadUser()>:
c0010eda:	c3                   	ret    
c0010edb:	90                   	nop

c0010edc <EnvVarContainer::EnvVarContainer(Process*)>:
c0010edc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010ee0:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0010ee6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010eea:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010eee:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0010ef1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010ef5:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0010efc:	90                   	nop
c0010efd:	c3                   	ret    

c0010efe <EnvVarContainer::~EnvVarContainer()>:
c0010efe:	83 ec 0c             	sub    esp,0xc
c0010f01:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010f05:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010f08:	85 c0                	test   eax,eax
c0010f0a:	74 1d                	je     c0010f29 <EnvVarContainer::~EnvVarContainer()+0x2b>
c0010f0c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010f10:	8b 00                	mov    eax,DWORD PTR [eax]
c0010f12:	85 c0                	test   eax,eax
c0010f14:	74 13                	je     c0010f29 <EnvVarContainer::~EnvVarContainer()+0x2b>
c0010f16:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010f1a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010f1d:	83 ec 0c             	sub    esp,0xc
c0010f20:	50                   	push   eax
c0010f21:	e8 a0 6b ff ff       	call   c0007ac6 <free>
c0010f26:	83 c4 10             	add    esp,0x10
c0010f29:	90                   	nop
c0010f2a:	83 c4 0c             	add    esp,0xc
c0010f2d:	c3                   	ret    

c0010f2e <KeGetEnv(Process*, char const*)>:
c0010f2e:	53                   	push   ebx
c0010f2f:	83 ec 08             	sub    esp,0x8
c0010f32:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010f36:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0010f3a:	39 05 90 a4 02 c0    	cmp    DWORD PTR ds:0xc002a490,eax
c0010f40:	74 04                	je     c0010f46 <KeGetEnv(Process*, char const*)+0x18>
c0010f42:	85 c0                	test   eax,eax
c0010f44:	75 0b                	jne    c0010f51 <KeGetEnv(Process*, char const*)+0x23>
c0010f46:	a1 20 9c 02 c0       	mov    eax,ds:0xc0029c20
c0010f4b:	85 c0                	test   eax,eax
c0010f4d:	75 19                	jne    c0010f68 <KeGetEnv(Process*, char const*)+0x3a>
c0010f4f:	eb 27                	jmp    c0010f78 <KeGetEnv(Process*, char const*)+0x4a>
c0010f51:	52                   	push   edx
c0010f52:	52                   	push   edx
c0010f53:	53                   	push   ebx
c0010f54:	ff b0 1a 07 00 00    	push   DWORD PTR [eax+0x71a]
c0010f5a:	e8 3b fc ff ff       	call   c0010b9a <EnvVarContainer::getEnv(char const*)>
c0010f5f:	83 c4 10             	add    esp,0x10
c0010f62:	85 c0                	test   eax,eax
c0010f64:	75 28                	jne    c0010f8e <KeGetEnv(Process*, char const*)+0x60>
c0010f66:	eb de                	jmp    c0010f46 <KeGetEnv(Process*, char const*)+0x18>
c0010f68:	52                   	push   edx
c0010f69:	52                   	push   edx
c0010f6a:	53                   	push   ebx
c0010f6b:	50                   	push   eax
c0010f6c:	e8 29 fc ff ff       	call   c0010b9a <EnvVarContainer::getEnv(char const*)>
c0010f71:	83 c4 10             	add    esp,0x10
c0010f74:	85 c0                	test   eax,eax
c0010f76:	75 16                	jne    c0010f8e <KeGetEnv(Process*, char const*)+0x60>
c0010f78:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c0010f7c:	a1 24 9c 02 c0       	mov    eax,ds:0xc0029c24
c0010f81:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0010f85:	83 c4 08             	add    esp,0x8
c0010f88:	5b                   	pop    ebx
c0010f89:	e9 0c fc ff ff       	jmp    c0010b9a <EnvVarContainer::getEnv(char const*)>
c0010f8e:	83 c4 08             	add    esp,0x8
c0010f91:	5b                   	pop    ebx
c0010f92:	c3                   	ret    

c0010f93 <KeSetEnvSystem(char const*, char const*)>:
c0010f93:	83 ec 10             	sub    esp,0x10
c0010f96:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010f9a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010f9e:	ff 35 24 9c 02 c0    	push   DWORD PTR ds:0xc0029c24
c0010fa4:	e8 2f fc ff ff       	call   c0010bd8 <EnvVarContainer::setEnv(char const*, char const*)>
c0010fa9:	83 c4 1c             	add    esp,0x1c
c0010fac:	c3                   	ret    

c0010fad <KeSetEnvUser(char const*, char const*)>:
c0010fad:	a1 20 9c 02 c0       	mov    eax,ds:0xc0029c20
c0010fb2:	85 c0                	test   eax,eax
c0010fb4:	74 15                	je     c0010fcb <KeSetEnvUser(char const*, char const*)+0x1e>
c0010fb6:	83 ec 10             	sub    esp,0x10
c0010fb9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010fbd:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010fc1:	50                   	push   eax
c0010fc2:	e8 11 fc ff ff       	call   c0010bd8 <EnvVarContainer::setEnv(char const*, char const*)>
c0010fc7:	83 c4 1c             	add    esp,0x1c
c0010fca:	c3                   	ret    
c0010fcb:	c3                   	ret    

c0010fcc <KeSetEnvProcess(Process*, char const*, char const*)>:
c0010fcc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010fd0:	8b 80 1a 07 00 00    	mov    eax,DWORD PTR [eax+0x71a]
c0010fd6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0010fda:	e9 f9 fb ff ff       	jmp    c0010bd8 <EnvVarContainer::setEnv(char const*, char const*)>

c0010fdf <KeDeleteEnvSystem(char const*)>:
c0010fdf:	c3                   	ret    

c0010fe0 <KeDeleteEnvUser(char const*)>:
c0010fe0:	c3                   	ret    

c0010fe1 <KeDeleteEnvProcess(Process*, char const*)>:
c0010fe1:	c3                   	ret    

c0010fe2 <KeNewProcessEnv(Process*)>:
c0010fe2:	83 ec 28             	sub    esp,0x28
c0010fe5:	6a 0c                	push   0xc
c0010fe7:	e8 ca 6a ff ff       	call   c0007ab6 <malloc>
c0010fec:	5a                   	pop    edx
c0010fed:	59                   	pop    ecx
c0010fee:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0010ff2:	50                   	push   eax
c0010ff3:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0010ff7:	e8 e0 fe ff ff       	call   c0010edc <EnvVarContainer::EnvVarContainer(Process*)>
c0010ffc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011000:	83 c4 2c             	add    esp,0x2c
c0011003:	c3                   	ret    

c0011004 <KeCopyProcessEnv(Process*, Process*)>:
c0011004:	57                   	push   edi
c0011005:	56                   	push   esi
c0011006:	53                   	push   ebx
c0011007:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001100b:	83 ec 0c             	sub    esp,0xc
c001100e:	8b b8 1a 07 00 00    	mov    edi,DWORD PTR [eax+0x71a]
c0011014:	6a 0c                	push   0xc
c0011016:	e8 9b 6a ff ff       	call   c0007ab6 <malloc>
c001101b:	89 c3                	mov    ebx,eax
c001101d:	58                   	pop    eax
c001101e:	5a                   	pop    edx
c001101f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011023:	53                   	push   ebx
c0011024:	e8 b3 fe ff ff       	call   c0010edc <EnvVarContainer::EnvVarContainer(Process*)>
c0011029:	8b 07                	mov    eax,DWORD PTR [edi]
c001102b:	89 03                	mov    DWORD PTR [ebx],eax
c001102d:	c1 e0 03             	shl    eax,0x3
c0011030:	89 04 24             	mov    DWORD PTR [esp],eax
c0011033:	e8 7e 6a ff ff       	call   c0007ab6 <malloc>
c0011038:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c001103b:	8b 0f                	mov    ecx,DWORD PTR [edi]
c001103d:	8b 77 04             	mov    esi,DWORD PTR [edi+0x4]
c0011040:	c1 e1 03             	shl    ecx,0x3
c0011043:	89 c7                	mov    edi,eax
c0011045:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0011047:	83 c4 10             	add    esp,0x10
c001104a:	89 d8                	mov    eax,ebx
c001104c:	5b                   	pop    ebx
c001104d:	5e                   	pop    esi
c001104e:	5f                   	pop    edi
c001104f:	c3                   	ret    

c0011050 <KeLoadSystemEnv()>:
c0011050:	53                   	push   ebx
c0011051:	83 ec 14             	sub    esp,0x14
c0011054:	6a 0c                	push   0xc
c0011056:	e8 5b 6a ff ff       	call   c0007ab6 <malloc>
c001105b:	89 c3                	mov    ebx,eax
c001105d:	58                   	pop    eax
c001105e:	5a                   	pop    edx
c001105f:	ff 35 90 a4 02 c0    	push   DWORD PTR ds:0xc002a490
c0011065:	53                   	push   ebx
c0011066:	e8 71 fe ff ff       	call   c0010edc <EnvVarContainer::EnvVarContainer(Process*)>
c001106b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001106e:	89 1d 24 9c 02 c0    	mov    DWORD PTR ds:0xc0029c24,ebx
c0011074:	e8 47 fe ff ff       	call   c0010ec0 <EnvVarContainer::__loadSystem()>
c0011079:	83 c4 18             	add    esp,0x18
c001107c:	5b                   	pop    ebx
c001107d:	c3                   	ret    

c001107e <KeLoadUserEnv()>:
c001107e:	53                   	push   ebx
c001107f:	83 ec 14             	sub    esp,0x14
c0011082:	6a 0c                	push   0xc
c0011084:	e8 2d 6a ff ff       	call   c0007ab6 <malloc>
c0011089:	89 c3                	mov    ebx,eax
c001108b:	58                   	pop    eax
c001108c:	5a                   	pop    edx
c001108d:	ff 35 90 a4 02 c0    	push   DWORD PTR ds:0xc002a490
c0011093:	53                   	push   ebx
c0011094:	e8 43 fe ff ff       	call   c0010edc <EnvVarContainer::EnvVarContainer(Process*)>
c0011099:	89 1d 20 9c 02 c0    	mov    DWORD PTR ds:0xc0029c20,ebx
c001109f:	83 c4 18             	add    esp,0x18
c00110a2:	5b                   	pop    ebx
c00110a3:	c3                   	ret    

c00110a4 <KeFlushEnv()>:
c00110a4:	c3                   	ret    

c00110a5 <KeGetProcessTotalEnvCount(Process*)>:
c00110a5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00110a9:	8b 15 20 9c 02 c0    	mov    edx,DWORD PTR ds:0xc0029c20
c00110af:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c00110b5:	a1 24 9c 02 c0       	mov    eax,ds:0xc0029c24
c00110ba:	8b 00                	mov    eax,DWORD PTR [eax]
c00110bc:	03 01                	add    eax,DWORD PTR [ecx]
c00110be:	85 d2                	test   edx,edx
c00110c0:	74 02                	je     c00110c4 <KeGetProcessTotalEnvCount(Process*)+0x1f>
c00110c2:	03 02                	add    eax,DWORD PTR [edx]
c00110c4:	c3                   	ret    

c00110c5 <KeGetProcessEnvPair(Process*, int)>:
c00110c5:	57                   	push   edi
c00110c6:	56                   	push   esi
c00110c7:	8b 35 20 9c 02 c0    	mov    esi,DWORD PTR ds:0xc0029c20
c00110cd:	53                   	push   ebx
c00110ce:	85 f6                	test   esi,esi
c00110d0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00110d4:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00110d8:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c00110de:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00110e2:	8b 01                	mov    eax,DWORD PTR [ecx]
c00110e4:	75 16                	jne    c00110fc <KeGetProcessEnvPair(Process*, int)+0x37>
c00110e6:	39 c2                	cmp    edx,eax
c00110e8:	7c 16                	jl     c0011100 <KeGetProcessEnvPair(Process*, int)+0x3b>
c00110ea:	8b 0d 24 9c 02 c0    	mov    ecx,DWORD PTR ds:0xc0029c24
c00110f0:	8b 31                	mov    esi,DWORD PTR [ecx]
c00110f2:	01 c6                	add    esi,eax
c00110f4:	39 d6                	cmp    esi,edx
c00110f6:	7e 3c                	jle    c0011134 <KeGetProcessEnvPair(Process*, int)+0x6f>
c00110f8:	29 c2                	sub    edx,eax
c00110fa:	eb 04                	jmp    c0011100 <KeGetProcessEnvPair(Process*, int)+0x3b>
c00110fc:	39 c2                	cmp    edx,eax
c00110fe:	7d 05                	jge    c0011105 <KeGetProcessEnvPair(Process*, int)+0x40>
c0011100:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c0011103:	eb 20                	jmp    c0011125 <KeGetProcessEnvPair(Process*, int)+0x60>
c0011105:	8b 3e                	mov    edi,DWORD PTR [esi]
c0011107:	8d 0c 07             	lea    ecx,[edi+eax*1]
c001110a:	39 d1                	cmp    ecx,edx
c001110c:	7e 04                	jle    c0011112 <KeGetProcessEnvPair(Process*, int)+0x4d>
c001110e:	29 c2                	sub    edx,eax
c0011110:	eb 10                	jmp    c0011122 <KeGetProcessEnvPair(Process*, int)+0x5d>
c0011112:	8b 35 24 9c 02 c0    	mov    esi,DWORD PTR ds:0xc0029c24
c0011118:	03 0e                	add    ecx,DWORD PTR [esi]
c001111a:	39 d1                	cmp    ecx,edx
c001111c:	7e 16                	jle    c0011134 <KeGetProcessEnvPair(Process*, int)+0x6f>
c001111e:	29 c2                	sub    edx,eax
c0011120:	29 fa                	sub    edx,edi
c0011122:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0011125:	8d 14 d0             	lea    edx,[eax+edx*8]
c0011128:	8b 02                	mov    eax,DWORD PTR [edx]
c001112a:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c001112d:	89 03                	mov    DWORD PTR [ebx],eax
c001112f:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0011132:	eb 1d                	jmp    c0011151 <KeGetProcessEnvPair(Process*, int)+0x8c>
c0011134:	83 ec 0c             	sub    esp,0xc
c0011137:	68 e7 1b 02 c0       	push   0xc0021be7
c001113c:	e8 ac 00 00 00       	call   c00111ed <KePanic(char const*)>
c0011141:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0011147:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001114e:	83 c4 10             	add    esp,0x10
c0011151:	89 d8                	mov    eax,ebx
c0011153:	5b                   	pop    ebx
c0011154:	5e                   	pop    esi
c0011155:	5f                   	pop    edi
c0011156:	c2 04 00             	ret    0x4

c0011159 <CPU::current()>:
c0011159:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c001115e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011164:	c3                   	ret    

c0011165 <operator new(unsigned long)>:
c0011165:	e9 4c 69 ff ff       	jmp    c0007ab6 <malloc>

c001116a <operator delete(void*)>:
c001116a:	e9 67 69 ff ff       	jmp    c0007ad6 <rfree>

c001116f <disableIRQs()>:
c001116f:	fa                   	cli    
c0011170:	c3                   	ret    

c0011171 <enableIRQs()>:
c0011171:	fb                   	sti    
c0011172:	c3                   	ret    

c0011173 <lockScheduler()>:
c0011173:	fa                   	cli    
c0011174:	ff 05 68 a4 02 c0    	inc    DWORD PTR ds:0xc002a468
c001117a:	c3                   	ret    

c001117b <unlockScheduler()>:
c001117b:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c0011180:	48                   	dec    eax
c0011181:	a3 68 a4 02 c0       	mov    ds:0xc002a468,eax
c0011186:	75 01                	jne    c0011189 <unlockScheduler()+0xe>
c0011188:	fb                   	sti    
c0011189:	c3                   	ret    

c001118a <lockStuff()>:
c001118a:	fa                   	cli    
c001118b:	ff 05 68 a4 02 c0    	inc    DWORD PTR ds:0xc002a468
c0011191:	ff 05 64 a4 02 c0    	inc    DWORD PTR ds:0xc002a464
c0011197:	c3                   	ret    

c0011198 <unlockStuff()>:
c0011198:	83 ec 0c             	sub    esp,0xc
c001119b:	a1 64 a4 02 c0       	mov    eax,ds:0xc002a464
c00111a0:	48                   	dec    eax
c00111a1:	a3 64 a4 02 c0       	mov    ds:0xc002a464,eax
c00111a6:	75 18                	jne    c00111c0 <unlockStuff()+0x28>
c00111a8:	83 3d 60 a4 02 c0 00 	cmp    DWORD PTR ds:0xc002a460,0x0
c00111af:	74 0f                	je     c00111c0 <unlockStuff()+0x28>
c00111b1:	c7 05 60 a4 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002a460,0x0
c00111bb:	e8 ec 48 00 00       	call   c0015aac <schedule()>
c00111c0:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c00111c5:	48                   	dec    eax
c00111c6:	a3 68 a4 02 c0       	mov    ds:0xc002a468,eax
c00111cb:	75 01                	jne    c00111ce <unlockStuff()+0x36>
c00111cd:	fb                   	sti    
c00111ce:	83 c4 0c             	add    esp,0xc
c00111d1:	c3                   	ret    

c00111d2 <Virt::getAKernelVAS()>:
c00111d2:	a1 b0 5f 02 c0       	mov    eax,ds:0xc0025fb0
c00111d7:	c3                   	ret    

c00111d8 <__not_memcpy>:
c00111d8:	57                   	push   edi
c00111d9:	56                   	push   esi
c00111da:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00111de:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00111e2:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00111e6:	89 c7                	mov    edi,eax
c00111e8:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00111ea:	5e                   	pop    esi
c00111eb:	5f                   	pop    edi
c00111ec:	c3                   	ret    

c00111ed <KePanic(char const*)>:
c00111ed:	c6 05 28 9c 02 c0 01 	mov    BYTE PTR ds:0xc0029c28,0x1
c00111f4:	e9 59 68 00 00       	jmp    c0017a52 <HalPanic(char const*)>

c00111f9 <KePowerThread(void*)>:
c00111f9:	83 ec 0c             	sub    esp,0xc
c00111fc:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c0011201:	48                   	dec    eax
c0011202:	a3 68 a4 02 c0       	mov    ds:0xc002a468,eax
c0011207:	75 01                	jne    c001120a <KePowerThread(void*)+0x11>
c0011209:	fb                   	sti    
c001120a:	83 ec 0c             	sub    esp,0xc
c001120d:	c6 05 40 9c 02 c0 00 	mov    BYTE PTR ds:0xc0029c40,0x0
c0011214:	6a 0a                	push   0xa
c0011216:	e8 d5 4b 00 00       	call   c0015df0 <sleep(unsigned int)>
c001121b:	83 05 84 9c 02 c0 0a 	add    DWORD PTR ds:0xc0029c84,0xa
c0011222:	83 c4 10             	add    esp,0x10
c0011225:	eb e3                	jmp    c001120a <KePowerThread(void*)+0x11>

c0011227 <KeChangePowerSettings(PowerSettings)>:
c0011227:	57                   	push   edi
c0011228:	b9 09 00 00 00       	mov    ecx,0x9
c001122d:	56                   	push   esi
c001122e:	bf 60 9c 02 c0       	mov    edi,0xc0029c60
c0011233:	fc                   	cld    
c0011234:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0011238:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001123a:	5e                   	pop    esi
c001123b:	5f                   	pop    edi
c001123c:	c3                   	ret    

c001123d <KeUserIOReceived()>:
c001123d:	c7 05 84 9c 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029c84,0x0
c0011247:	c3                   	ret    

c0011248 <KeHandlePowerButton()>:
c0011248:	83 ec 0c             	sub    esp,0xc
c001124b:	a1 60 9c 02 c0       	mov    eax,ds:0xc0029c60
c0011250:	83 f8 02             	cmp    eax,0x2
c0011253:	75 10                	jne    c0011265 <KeHandlePowerButton()+0x1d>
c0011255:	83 ec 0c             	sub    esp,0xc
c0011258:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c001125e:	e8 c7 5e ff ff       	call   c000712a <Computer::shutdown()>
c0011263:	eb 11                	jmp    c0011276 <KeHandlePowerButton()+0x2e>
c0011265:	48                   	dec    eax
c0011266:	75 11                	jne    c0011279 <KeHandlePowerButton()+0x31>
c0011268:	83 ec 0c             	sub    esp,0xc
c001126b:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0011271:	e8 e4 5e ff ff       	call   c000715a <Computer::sleep()>
c0011276:	83 c4 10             	add    esp,0x10
c0011279:	83 c4 0c             	add    esp,0xc
c001127c:	c3                   	ret    

c001127d <KeHandleSleepButton()>:
c001127d:	83 ec 0c             	sub    esp,0xc
c0011280:	a1 64 9c 02 c0       	mov    eax,ds:0xc0029c64
c0011285:	83 f8 02             	cmp    eax,0x2
c0011288:	75 10                	jne    c001129a <KeHandleSleepButton()+0x1d>
c001128a:	83 ec 0c             	sub    esp,0xc
c001128d:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0011293:	e8 92 5e ff ff       	call   c000712a <Computer::shutdown()>
c0011298:	eb 11                	jmp    c00112ab <KeHandleSleepButton()+0x2e>
c001129a:	48                   	dec    eax
c001129b:	75 11                	jne    c00112ae <KeHandleSleepButton()+0x31>
c001129d:	83 ec 0c             	sub    esp,0xc
c00112a0:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c00112a6:	e8 af 5e ff ff       	call   c000715a <Computer::sleep()>
c00112ab:	83 c4 10             	add    esp,0x10
c00112ae:	83 c4 0c             	add    esp,0xc
c00112b1:	c3                   	ret    

c00112b2 <KeSetupPowerManager()>:
c00112b2:	83 ec 0c             	sub    esp,0xc
c00112b5:	c7 05 84 9c 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029c84,0x0
c00112bf:	68 f0 00 00 00       	push   0xf0
c00112c4:	c6 05 40 9c 02 c0 00 	mov    BYTE PTR ds:0xc0029c40,0x0
c00112cb:	6a 00                	push   0x0
c00112cd:	68 f9 11 01 c0       	push   0xc00111f9
c00112d2:	ff 35 90 a4 02 c0    	push   DWORD PTR ds:0xc002a490
c00112d8:	e8 7f 45 00 00       	call   c001585c <Process::createThread(void (*)(void*), void*, int)>
c00112dd:	c7 05 60 9c 02 c0 02 00 00 00 	mov    DWORD PTR ds:0xc0029c60,0x2
c00112e7:	c7 05 64 9c 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0029c64,0x1
c00112f1:	c7 05 68 9c 02 c0 03 00 00 00 	mov    DWORD PTR ds:0xc0029c68,0x3
c00112fb:	c7 05 6c 9c 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029c6c,0x0
c0011305:	c7 05 78 9c 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029c78,0x0
c001130f:	c7 05 70 9c 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029c70,0x0
c0011319:	c7 05 7c 9c 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029c7c,0x0
c0011323:	c7 05 74 9c 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc0029c74,0x3c
c001132d:	c7 05 80 9c 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc0029c80,0x3c
c0011337:	83 c4 1c             	add    esp,0x1c
c001133a:	c3                   	ret    

c001133b <KeRand()>:
c001133b:	69 05 88 9c 02 c0 75 28 00 00 	imul   eax,DWORD PTR ds:0xc0029c88,0x2875
c0011345:	69 0d 8c 9c 02 c0 75 b1 e7 a2 	imul   ecx,DWORD PTR ds:0xc0029c8c,0xa2e7b175
c001134f:	53                   	push   ebx
c0011350:	01 c1                	add    ecx,eax
c0011352:	b8 75 b1 e7 a2       	mov    eax,0xa2e7b175
c0011357:	f7 25 88 9c 02 c0    	mul    DWORD PTR ds:0xc0029c88
c001135d:	01 ca                	add    edx,ecx
c001135f:	05 ef 04 b5 00       	add    eax,0xb504ef
c0011364:	83 d2 00             	adc    edx,0x0
c0011367:	a3 88 9c 02 c0       	mov    ds:0xc0029c88,eax
c001136c:	0f b7 da             	movzx  ebx,dx
c001136f:	89 da                	mov    edx,ebx
c0011371:	89 1d 8c 9c 02 c0    	mov    DWORD PTR ds:0xc0029c8c,ebx
c0011377:	0f ac d0 0e          	shrd   eax,edx,0xe
c001137b:	5b                   	pop    ebx
c001137c:	c3                   	ret    

c001137d <KeSeedRand(unsigned int)>:
c001137d:	53                   	push   ebx
c001137e:	83 ec 08             	sub    esp,0x8
c0011381:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011385:	e8 e7 69 00 00       	call   c0017d71 <HalGetRand()>
c001138a:	c7 05 8c 9c 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029c8c,0x0
c0011394:	31 d8                	xor    eax,ebx
c0011396:	a3 88 9c 02 c0       	mov    ds:0xc0029c88,eax
c001139b:	e8 9b ff ff ff       	call   c001133b <KeRand()>
c00113a0:	83 c4 08             	add    esp,0x8
c00113a3:	5b                   	pop    ebx
c00113a4:	eb 95                	jmp    c001133b <KeRand()>

c00113a6 <KeInitRand()>:
c00113a6:	83 ec 0c             	sub    esp,0xc
c00113a9:	e8 b8 67 00 00       	call   c0017b66 <HalQueryPerformanceCounter()>
c00113ae:	0f 20 da             	mov    edx,cr3
c00113b1:	0f 22 da             	mov    cr3,edx
c00113b4:	0f 20 da             	mov    edx,cr3
c00113b7:	0f 22 da             	mov    cr3,edx
c00113ba:	0f 20 da             	mov    edx,cr3
c00113bd:	0f 22 da             	mov    cr3,edx
c00113c0:	0f 20 da             	mov    edx,cr3
c00113c3:	0f 22 da             	mov    cr3,edx
c00113c6:	83 ec 0c             	sub    esp,0xc
c00113c9:	35 03 8a 95 38       	xor    eax,0x38958a03
c00113ce:	50                   	push   eax
c00113cf:	e8 a9 ff ff ff       	call   c001137d <KeSeedRand(unsigned int)>
c00113d4:	83 c4 1c             	add    esp,0x1c
c00113d7:	c3                   	ret    

c00113d8 <KeResolveCompatibilitySymbol(char*)>:
c00113d8:	83 ec 0c             	sub    esp,0xc
c00113db:	83 ec 08             	sub    esp,0x8
c00113de:	68 01 1c 02 c0       	push   0xc0021c01
c00113e3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00113e7:	e8 64 f3 fe ff       	call   c0000750 <strcmp>
c00113ec:	83 c4 10             	add    esp,0x10
c00113ef:	85 c0                	test   eax,eax
c00113f1:	0f 94 c0             	sete   al
c00113f4:	0f b6 c0             	movzx  eax,al
c00113f7:	85 c0                	test   eax,eax
c00113f9:	74 0d                	je     c0011408 <KeResolveCompatibilitySymbol(char*)+0x30>
c00113fb:	b8 b8 5e 02 c0       	mov    eax,0xc0025eb8
c0011400:	e9 8b 01 00 00       	jmp    c0011590 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0011405:	8d 76 00             	lea    esi,[esi+0x0]
c0011408:	83 ec 08             	sub    esp,0x8
c001140b:	68 0a 1c 02 c0       	push   0xc0021c0a
c0011410:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011414:	e8 37 f3 fe ff       	call   c0000750 <strcmp>
c0011419:	83 c4 10             	add    esp,0x10
c001141c:	85 c0                	test   eax,eax
c001141e:	0f 94 c0             	sete   al
c0011421:	0f b6 c0             	movzx  eax,al
c0011424:	85 c0                	test   eax,eax
c0011426:	74 0c                	je     c0011434 <KeResolveCompatibilitySymbol(char*)+0x5c>
c0011428:	b8 20 f1 01 c0       	mov    eax,0xc001f120
c001142d:	e9 5e 01 00 00       	jmp    c0011590 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0011432:	66 90                	xchg   ax,ax
c0011434:	83 ec 08             	sub    esp,0x8
c0011437:	68 14 1c 02 c0       	push   0xc0021c14
c001143c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011440:	e8 0b f3 fe ff       	call   c0000750 <strcmp>
c0011445:	83 c4 10             	add    esp,0x10
c0011448:	85 c0                	test   eax,eax
c001144a:	0f 94 c0             	sete   al
c001144d:	0f b6 c0             	movzx  eax,al
c0011450:	85 c0                	test   eax,eax
c0011452:	74 0c                	je     c0011460 <KeResolveCompatibilitySymbol(char*)+0x88>
c0011454:	b8 54 ee 01 c0       	mov    eax,0xc001ee54
c0011459:	e9 32 01 00 00       	jmp    c0011590 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c001145e:	66 90                	xchg   ax,ax
c0011460:	83 ec 08             	sub    esp,0x8
c0011463:	68 1d 1c 02 c0       	push   0xc0021c1d
c0011468:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001146c:	e8 df f2 fe ff       	call   c0000750 <strcmp>
c0011471:	83 c4 10             	add    esp,0x10
c0011474:	85 c0                	test   eax,eax
c0011476:	0f 94 c0             	sete   al
c0011479:	0f b6 c0             	movzx  eax,al
c001147c:	85 c0                	test   eax,eax
c001147e:	74 0c                	je     c001148c <KeResolveCompatibilitySymbol(char*)+0xb4>
c0011480:	b8 ed 11 01 c0       	mov    eax,0xc00111ed
c0011485:	e9 06 01 00 00       	jmp    c0011590 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c001148a:	66 90                	xchg   ax,ax
c001148c:	83 ec 08             	sub    esp,0x8
c001148f:	68 30 1c 02 c0       	push   0xc0021c30
c0011494:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011498:	e8 b3 f2 fe ff       	call   c0000750 <strcmp>
c001149d:	83 c4 10             	add    esp,0x10
c00114a0:	85 c0                	test   eax,eax
c00114a2:	0f 94 c0             	sete   al
c00114a5:	0f b6 c0             	movzx  eax,al
c00114a8:	85 c0                	test   eax,eax
c00114aa:	74 0c                	je     c00114b8 <KeResolveCompatibilitySymbol(char*)+0xe0>
c00114ac:	b8 16 0b 01 c0       	mov    eax,0xc0010b16
c00114b1:	e9 da 00 00 00       	jmp    c0011590 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c00114b6:	66 90                	xchg   ax,ax
c00114b8:	83 ec 08             	sub    esp,0x8
c00114bb:	68 4d 1c 02 c0       	push   0xc0021c4d
c00114c0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00114c4:	e8 87 f2 fe ff       	call   c0000750 <strcmp>
c00114c9:	83 c4 10             	add    esp,0x10
c00114cc:	85 c0                	test   eax,eax
c00114ce:	0f 94 c0             	sete   al
c00114d1:	0f b6 c0             	movzx  eax,al
c00114d4:	85 c0                	test   eax,eax
c00114d6:	74 0c                	je     c00114e4 <KeResolveCompatibilitySymbol(char*)+0x10c>
c00114d8:	b8 20 f2 01 c0       	mov    eax,0xc001f220
c00114dd:	e9 ae 00 00 00       	jmp    c0011590 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c00114e2:	66 90                	xchg   ax,ax
c00114e4:	83 ec 08             	sub    esp,0x8
c00114e7:	68 57 1c 02 c0       	push   0xc0021c57
c00114ec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00114f0:	e8 5b f2 fe ff       	call   c0000750 <strcmp>
c00114f5:	83 c4 10             	add    esp,0x10
c00114f8:	85 c0                	test   eax,eax
c00114fa:	0f 94 c0             	sete   al
c00114fd:	0f b6 c0             	movzx  eax,al
c0011500:	85 c0                	test   eax,eax
c0011502:	74 0c                	je     c0011510 <KeResolveCompatibilitySymbol(char*)+0x138>
c0011504:	b8 a0 ef 01 c0       	mov    eax,0xc001efa0
c0011509:	e9 82 00 00 00       	jmp    c0011590 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c001150e:	66 90                	xchg   ax,ax
c0011510:	83 ec 08             	sub    esp,0x8
c0011513:	68 60 1c 02 c0       	push   0xc0021c60
c0011518:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001151c:	e8 2f f2 fe ff       	call   c0000750 <strcmp>
c0011521:	83 c4 10             	add    esp,0x10
c0011524:	85 c0                	test   eax,eax
c0011526:	0f 94 c0             	sete   al
c0011529:	0f b6 c0             	movzx  eax,al
c001152c:	85 c0                	test   eax,eax
c001152e:	74 08                	je     c0011538 <KeResolveCompatibilitySymbol(char*)+0x160>
c0011530:	b8 bc 5e 02 c0       	mov    eax,0xc0025ebc
c0011535:	eb 59                	jmp    c0011590 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0011537:	90                   	nop
c0011538:	83 ec 08             	sub    esp,0x8
c001153b:	68 78 1c 02 c0       	push   0xc0021c78
c0011540:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011544:	e8 07 f2 fe ff       	call   c0000750 <strcmp>
c0011549:	83 c4 10             	add    esp,0x10
c001154c:	85 c0                	test   eax,eax
c001154e:	0f 94 c0             	sete   al
c0011551:	0f b6 c0             	movzx  eax,al
c0011554:	85 c0                	test   eax,eax
c0011556:	74 08                	je     c0011560 <KeResolveCompatibilitySymbol(char*)+0x188>
c0011558:	b8 bc 5e 02 c0       	mov    eax,0xc0025ebc
c001155d:	eb 31                	jmp    c0011590 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c001155f:	90                   	nop
c0011560:	83 ec 08             	sub    esp,0x8
c0011563:	68 85 1c 02 c0       	push   0xc0021c85
c0011568:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001156c:	e8 df f1 fe ff       	call   c0000750 <strcmp>
c0011571:	83 c4 10             	add    esp,0x10
c0011574:	85 c0                	test   eax,eax
c0011576:	0f 94 c0             	sete   al
c0011579:	0f b6 c0             	movzx  eax,al
c001157c:	85 c0                	test   eax,eax
c001157e:	74 08                	je     c0011588 <KeResolveCompatibilitySymbol(char*)+0x1b0>
c0011580:	b8 bd 5e 02 c0       	mov    eax,0xc0025ebd
c0011585:	eb 09                	jmp    c0011590 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0011587:	90                   	nop
c0011588:	b8 00 00 00 00       	mov    eax,0x0
c001158d:	8d 76 00             	lea    esi,[esi+0x0]
c0011590:	83 c4 0c             	add    esp,0xc
c0011593:	c3                   	ret    

c0011594 <KiSigKill(int)>:
c0011594:	83 ec 0c             	sub    esp,0xc
c0011597:	6a 00                	push   0x0
c0011599:	6a 00                	push   0x0
c001159b:	6a ff                	push   0xffffffff
c001159d:	6a 01                	push   0x1
c001159f:	e8 ae 2a 01 00       	call   c0024052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c00115a4:	83 c4 1c             	add    esp,0x1c
c00115a7:	c3                   	ret    

c00115a8 <KiDefaultSignalHandlerIgnore(int)>:
c00115a8:	c3                   	ret    

c00115a9 <KiDefaultSignalHandlerPause(int)>:
c00115a9:	57                   	push   edi
c00115aa:	b9 07 00 00 00       	mov    ecx,0x7
c00115af:	56                   	push   esi
c00115b0:	be ce 1c 02 c0       	mov    esi,0xc0021cce
c00115b5:	83 ec 24             	sub    esp,0x24
c00115b8:	8d 7c 24 04          	lea    edi,[esp+0x4]
c00115bc:	fc                   	cld    
c00115bd:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00115bf:	8d 44 24 04          	lea    eax,[esp+0x4]
c00115c3:	50                   	push   eax
c00115c4:	6a 00                	push   0x0
c00115c6:	6a 00                	push   0x0
c00115c8:	6a 27                	push   0x27
c00115ca:	e8 83 2a 01 00       	call   c0024052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c00115cf:	83 c4 34             	add    esp,0x34
c00115d2:	5e                   	pop    esi
c00115d3:	5f                   	pop    edi
c00115d4:	c3                   	ret    

c00115d5 <KiDefaultSignalHandlerResume(int)>:
c00115d5:	57                   	push   edi
c00115d6:	b9 1d 00 00 00       	mov    ecx,0x1d
c00115db:	56                   	push   esi
c00115dc:	be ea 1c 02 c0       	mov    esi,0xc0021cea
c00115e1:	83 ec 24             	sub    esp,0x24
c00115e4:	8d 7c 24 03          	lea    edi,[esp+0x3]
c00115e8:	fc                   	cld    
c00115e9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00115eb:	8d 44 24 03          	lea    eax,[esp+0x3]
c00115ef:	50                   	push   eax
c00115f0:	6a 00                	push   0x0
c00115f2:	6a 00                	push   0x0
c00115f4:	6a 27                	push   0x27
c00115f6:	e8 57 2a 01 00       	call   c0024052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c00115fb:	83 c4 34             	add    esp,0x34
c00115fe:	5e                   	pop    esi
c00115ff:	5f                   	pop    edi
c0011600:	c3                   	ret    

c0011601 <KeDeinitSignals(SigHandlerBlock*)>:
c0011601:	e9 c0 64 ff ff       	jmp    c0007ac6 <free>

c0011606 <KeInitSignals()>:
c0011606:	53                   	push   ebx
c0011607:	83 ec 14             	sub    esp,0x14
c001160a:	68 c8 00 00 00       	push   0xc8
c001160f:	e8 a2 64 ff ff       	call   c0007ab6 <malloc>
c0011614:	83 c4 0c             	add    esp,0xc
c0011617:	c7 80 bc 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xbc],0x0
c0011621:	c7 80 c0 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc0],0x0
c001162b:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c0011632:	89 c3                	mov    ebx,eax
c0011634:	6a 20                	push   0x20
c0011636:	8d 80 9c 00 00 00    	lea    eax,[eax+0x9c]
c001163c:	6a 00                	push   0x0
c001163e:	50                   	push   eax
c001163f:	e8 ac ee fe ff       	call   c00004f0 <memset>
c0011644:	83 c4 0c             	add    esp,0xc
c0011647:	6a 44                	push   0x44
c0011649:	6a 00                	push   0x0
c001164b:	53                   	push   ebx
c001164c:	e8 9f ee fe ff       	call   c00004f0 <memset>
c0011651:	89 d8                	mov    eax,ebx
c0011653:	83 c4 18             	add    esp,0x18
c0011656:	5b                   	pop    ebx
c0011657:	c3                   	ret    

c0011658 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)>:
c0011658:	53                   	push   ebx
c0011659:	b8 01 00 00 00       	mov    eax,0x1
c001165e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0011662:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0011666:	83 f9 10             	cmp    ecx,0x10
c0011669:	7f 21                	jg     c001168c <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)+0x34>
c001166b:	8d 1c 8a             	lea    ebx,[edx+ecx*4]
c001166e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011672:	89 03                	mov    DWORD PTR [ebx],eax
c0011674:	b8 01 00 00 00       	mov    eax,0x1
c0011679:	d3 e0                	shl    eax,cl
c001167b:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c001167f:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0011682:	c6 84 0a 88 00 00 00 00 	mov    BYTE PTR [edx+ecx*1+0x88],0x0
c001168a:	31 c0                	xor    eax,eax
c001168c:	5b                   	pop    ebx
c001168d:	c3                   	ret    

c001168e <KeRaiseSignal(SigHandlerBlock*, int)>:
c001168e:	55                   	push   ebp
c001168f:	57                   	push   edi
c0011690:	bf 08 00 00 00       	mov    edi,0x8
c0011695:	56                   	push   esi
c0011696:	53                   	push   ebx
c0011697:	83 ec 18             	sub    esp,0x18
c001169a:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001169e:	68 07 1d 02 c0       	push   0xc0021d07
c00116a3:	e8 9d 92 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c00116a8:	c6 83 c4 00 00 00 01 	mov    BYTE PTR [ebx+0xc4],0x1
c00116af:	8b ab bc 00 00 00    	mov    ebp,DWORD PTR [ebx+0xbc]
c00116b5:	83 c4 10             	add    esp,0x10
c00116b8:	31 c9                	xor    ecx,ecx
c00116ba:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c00116be:	99                   	cdq    
c00116bf:	f7 ff                	idiv   edi
c00116c1:	8d 42 24             	lea    eax,[edx+0x24]
c00116c4:	8b 74 83 0c          	mov    esi,DWORD PTR [ebx+eax*4+0xc]
c00116c8:	85 f6                	test   esi,esi
c00116ca:	75 1a                	jne    c00116e6 <KeRaiseSignal(SigHandlerBlock*, int)+0x58>
c00116cc:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c00116d0:	89 4c 83 0c          	mov    DWORD PTR [ebx+eax*4+0xc],ecx
c00116d4:	50                   	push   eax
c00116d5:	50                   	push   eax
c00116d6:	52                   	push   edx
c00116d7:	68 18 1d 02 c0       	push   0xc0021d18
c00116dc:	e8 64 92 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c00116e1:	83 c4 10             	add    esp,0x10
c00116e4:	eb 1b                	jmp    c0011701 <KeRaiseSignal(SigHandlerBlock*, int)+0x73>
c00116e6:	41                   	inc    ecx
c00116e7:	83 f9 08             	cmp    ecx,0x8
c00116ea:	75 ce                	jne    c00116ba <KeRaiseSignal(SigHandlerBlock*, int)+0x2c>
c00116ec:	83 ec 0c             	sub    esp,0xc
c00116ef:	be 01 00 00 00       	mov    esi,0x1
c00116f4:	68 39 1d 02 c0       	push   0xc0021d39
c00116f9:	e8 47 92 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c00116fe:	83 c4 10             	add    esp,0x10
c0011701:	83 c4 0c             	add    esp,0xc
c0011704:	89 f0                	mov    eax,esi
c0011706:	5b                   	pop    ebx
c0011707:	5e                   	pop    esi
c0011708:	5f                   	pop    edi
c0011709:	5d                   	pop    ebp
c001170a:	c3                   	ret    

c001170b <KeCheckSignal(SigHandlerBlock*, int*)>:
c001170b:	55                   	push   ebp
c001170c:	57                   	push   edi
c001170d:	56                   	push   esi
c001170e:	53                   	push   ebx
c001170f:	51                   	push   ecx
c0011710:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0011714:	85 db                	test   ebx,ebx
c0011716:	0f 84 bc 00 00 00    	je     c00117d8 <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c001171c:	80 bb c4 00 00 00 00 	cmp    BYTE PTR [ebx+0xc4],0x0
c0011723:	0f 84 af 00 00 00    	je     c00117d8 <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c0011729:	31 c9                	xor    ecx,ecx
c001172b:	bf 08 00 00 00       	mov    edi,0x8
c0011730:	8b b3 bc 00 00 00    	mov    esi,DWORD PTR [ebx+0xbc]
c0011736:	8d 04 0e             	lea    eax,[esi+ecx*1]
c0011739:	99                   	cdq    
c001173a:	f7 ff                	idiv   edi
c001173c:	8b ac 93 9c 00 00 00 	mov    ebp,DWORD PTR [ebx+edx*4+0x9c]
c0011743:	85 ed                	test   ebp,ebp
c0011745:	0f 84 9e 00 00 00    	je     c00117e9 <KeCheckSignal(SigHandlerBlock*, int*)+0xde>
c001174b:	89 e9                	mov    ecx,ebp
c001174d:	8b 83 c0 00 00 00    	mov    eax,DWORD PTR [ebx+0xc0]
c0011753:	bf 01 00 00 00       	mov    edi,0x1
c0011758:	89 04 24             	mov    DWORD PTR [esp],eax
c001175b:	d3 e7                	shl    edi,cl
c001175d:	31 c9                	xor    ecx,ecx
c001175f:	b8 01 00 00 00       	mov    eax,0x1
c0011764:	d3 e0                	shl    eax,cl
c0011766:	85 04 24             	test   DWORD PTR [esp],eax
c0011769:	74 06                	je     c0011771 <KeCheckSignal(SigHandlerBlock*, int*)+0x66>
c001176b:	85 7c 8b 44          	test   DWORD PTR [ebx+ecx*4+0x44],edi
c001176f:	75 67                	jne    c00117d8 <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c0011771:	41                   	inc    ecx
c0011772:	83 f9 11             	cmp    ecx,0x11
c0011775:	75 e8                	jne    c001175f <KeCheckSignal(SigHandlerBlock*, int*)+0x54>
c0011777:	46                   	inc    esi
c0011778:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001177b:	89 b3 bc 00 00 00    	mov    DWORD PTR [ebx+0xbc],esi
c0011781:	09 f8                	or     eax,edi
c0011783:	c7 84 93 9c 00 00 00 00 00 00 00 	mov    DWORD PTR [ebx+edx*4+0x9c],0x0
c001178e:	89 83 c0 00 00 00    	mov    DWORD PTR [ebx+0xc0],eax
c0011794:	c6 83 c4 00 00 00 00 	mov    BYTE PTR [ebx+0xc4],0x0
c001179b:	31 c0                	xor    eax,eax
c001179d:	83 bc 83 9c 00 00 00 00 	cmp    DWORD PTR [ebx+eax*4+0x9c],0x0
c00117a5:	74 09                	je     c00117b0 <KeCheckSignal(SigHandlerBlock*, int*)+0xa5>
c00117a7:	c6 83 c4 00 00 00 01 	mov    BYTE PTR [ebx+0xc4],0x1
c00117ae:	eb 06                	jmp    c00117b6 <KeCheckSignal(SigHandlerBlock*, int*)+0xab>
c00117b0:	40                   	inc    eax
c00117b1:	83 f8 08             	cmp    eax,0x8
c00117b4:	75 e7                	jne    c001179d <KeCheckSignal(SigHandlerBlock*, int*)+0x92>
c00117b6:	8b 04 ab             	mov    eax,DWORD PTR [ebx+ebp*4]
c00117b9:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00117bd:	83 fd 09             	cmp    ebp,0x9
c00117c0:	89 2a                	mov    DWORD PTR [edx],ebp
c00117c2:	75 07                	jne    c00117cb <KeCheckSignal(SigHandlerBlock*, int*)+0xc0>
c00117c4:	b8 94 15 01 c0       	mov    eax,0xc0011594
c00117c9:	eb 31                	jmp    c00117fc <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c00117cb:	83 f8 01             	cmp    eax,0x1
c00117ce:	75 0c                	jne    c00117dc <KeCheckSignal(SigHandlerBlock*, int*)+0xd1>
c00117d0:	f7 d7                	not    edi
c00117d2:	21 bb c0 00 00 00    	and    DWORD PTR [ebx+0xc0],edi
c00117d8:	31 c0                	xor    eax,eax
c00117da:	eb 20                	jmp    c00117fc <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c00117dc:	85 c0                	test   eax,eax
c00117de:	75 1c                	jne    c00117fc <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c00117e0:	8b 04 ad 40 31 02 c0 	mov    eax,DWORD PTR [ebp*4-0x3ffdcec0]
c00117e7:	eb 13                	jmp    c00117fc <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c00117e9:	46                   	inc    esi
c00117ea:	41                   	inc    ecx
c00117eb:	89 b3 bc 00 00 00    	mov    DWORD PTR [ebx+0xbc],esi
c00117f1:	83 f9 08             	cmp    ecx,0x8
c00117f4:	0f 85 36 ff ff ff    	jne    c0011730 <KeCheckSignal(SigHandlerBlock*, int*)+0x25>
c00117fa:	eb dc                	jmp    c00117d8 <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c00117fc:	5a                   	pop    edx
c00117fd:	5b                   	pop    ebx
c00117fe:	5e                   	pop    esi
c00117ff:	5f                   	pop    edi
c0011800:	5d                   	pop    ebp
c0011801:	c3                   	ret    

c0011802 <KiCheckSignalZ>:
c0011802:	83 ec 10             	sub    esp,0x10
c0011805:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0011809:	50                   	push   eax
c001180a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001180f:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011812:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c0011818:	e8 ee fe ff ff       	call   c001170b <KeCheckSignal(SigHandlerBlock*, int*)>
c001181d:	5a                   	pop    edx
c001181e:	31 d2                	xor    edx,edx
c0011820:	59                   	pop    ecx
c0011821:	85 c0                	test   eax,eax
c0011823:	74 19                	je     c001183e <KiCheckSignalZ+0x3c>
c0011825:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001182b:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c001182e:	89 02                	mov    DWORD PTR [edx],eax
c0011830:	c7 42 04 00 00 00 00 	mov    DWORD PTR [edx+0x4],0x0
c0011837:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001183b:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c001183e:	89 d0                	mov    eax,edx
c0011840:	83 c4 10             	add    esp,0x10
c0011843:	c3                   	ret    

c0011844 <KeCompleteSignal(SigHandlerBlock*, int)>:
c0011844:	56                   	push   esi
c0011845:	53                   	push   ebx
c0011846:	bb 01 00 00 00       	mov    ebx,0x1
c001184b:	52                   	push   edx
c001184c:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0011850:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0011854:	d3 e3                	shl    ebx,cl
c0011856:	83 f9 10             	cmp    ecx,0x10
c0011859:	7f 08                	jg     c0011863 <KeCompleteSignal(SigHandlerBlock*, int)+0x1f>
c001185b:	85 9e c0 00 00 00    	test   DWORD PTR [esi+0xc0],ebx
c0011861:	75 10                	jne    c0011873 <KeCompleteSignal(SigHandlerBlock*, int)+0x2f>
c0011863:	83 ec 0c             	sub    esp,0xc
c0011866:	68 4a 1d 02 c0       	push   0xc0021d4a
c001186b:	e8 7d f9 ff ff       	call   c00111ed <KePanic(char const*)>
c0011870:	83 c4 10             	add    esp,0x10
c0011873:	f7 d3                	not    ebx
c0011875:	21 9e c0 00 00 00    	and    DWORD PTR [esi+0xc0],ebx
c001187b:	58                   	pop    eax
c001187c:	5b                   	pop    ebx
c001187d:	5e                   	pop    esi
c001187e:	c3                   	ret    

c001187f <KiFinishSignalZ>:
c001187f:	53                   	push   ebx
c0011880:	83 ec 10             	sub    esp,0x10
c0011883:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0011887:	ff 73 08             	push   DWORD PTR [ebx+0x8]
c001188a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001188f:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011892:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c0011898:	e8 a7 ff ff ff       	call   c0011844 <KeCompleteSignal(SigHandlerBlock*, int)>
c001189d:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00118a3:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00118aa:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c00118b1:	83 c4 18             	add    esp,0x18
c00118b4:	5b                   	pop    ebx
c00118b5:	c3                   	ret    

c00118b6 <SysSeekDir(regs*)>:
c00118b6:	31 c0                	xor    eax,eax
c00118b8:	31 d2                	xor    edx,edx
c00118ba:	c3                   	ret    

c00118bb <SysTellDir(regs*)>:
c00118bb:	31 c0                	xor    eax,eax
c00118bd:	31 d2                	xor    edx,edx
c00118bf:	c3                   	ret    

c00118c0 <SysVerify(regs*)>:
c00118c0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00118c4:	31 d2                	xor    edx,edx
c00118c6:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00118c9:	c3                   	ret    

c00118ca <SysGetArgc(regs*)>:
c00118ca:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00118cf:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00118d2:	8b 80 16 05 00 00    	mov    eax,DWORD PTR [eax+0x516]
c00118d8:	89 c2                	mov    edx,eax
c00118da:	c1 fa 1f             	sar    edx,0x1f
c00118dd:	c3                   	ret    

c00118de <SysTTYName(regs*)>:
c00118de:	b8 01 00 00 00       	mov    eax,0x1
c00118e3:	31 d2                	xor    edx,edx
c00118e5:	c3                   	ret    

c00118e6 <SysFormatDisk(regs*)>:
c00118e6:	56                   	push   esi
c00118e7:	53                   	push   ebx
c00118e8:	83 ec 04             	sub    esp,0x4
c00118eb:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00118ef:	8b 1d 64 70 02 c0    	mov    ebx,DWORD PTR ds:0xc0027064
c00118f5:	eb 28                	jmp    c001191f <SysFormatDisk(regs*)+0x39>
c00118f7:	83 ec 0c             	sub    esp,0xc
c00118fa:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c00118fd:	8b 4e 28             	mov    ecx,DWORD PTR [esi+0x28]
c0011900:	8b 13                	mov    edx,DWORD PTR [ebx]
c0011902:	51                   	push   ecx
c0011903:	8b 4e 24             	mov    ecx,DWORD PTR [esi+0x24]
c0011906:	51                   	push   ecx
c0011907:	50                   	push   eax
c0011908:	8b 04 85 e0 94 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6b20]
c001190f:	50                   	push   eax
c0011910:	53                   	push   ebx
c0011911:	ff 52 4c             	call   DWORD PTR [edx+0x4c]
c0011914:	83 c4 20             	add    esp,0x20
c0011917:	83 f8 08             	cmp    eax,0x8
c001191a:	75 14                	jne    c0011930 <SysFormatDisk(regs*)+0x4a>
c001191c:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c001191f:	85 db                	test   ebx,ebx
c0011921:	75 d4                	jne    c00118f7 <SysFormatDisk(regs*)+0x11>
c0011923:	83 c4 04             	add    esp,0x4
c0011926:	b8 03 00 00 00       	mov    eax,0x3
c001192b:	31 d2                	xor    edx,edx
c001192d:	5b                   	pop    ebx
c001192e:	5e                   	pop    esi
c001192f:	c3                   	ret    
c0011930:	85 c0                	test   eax,eax
c0011932:	74 1f                	je     c0011953 <SysFormatDisk(regs*)+0x6d>
c0011934:	83 f8 09             	cmp    eax,0x9
c0011937:	74 0d                	je     c0011946 <SysFormatDisk(regs*)+0x60>
c0011939:	83 c4 04             	add    esp,0x4
c001193c:	b8 02 00 00 00       	mov    eax,0x2
c0011941:	31 d2                	xor    edx,edx
c0011943:	5b                   	pop    ebx
c0011944:	5e                   	pop    esi
c0011945:	c3                   	ret    
c0011946:	83 c4 04             	add    esp,0x4
c0011949:	b8 01 00 00 00       	mov    eax,0x1
c001194e:	31 d2                	xor    edx,edx
c0011950:	5b                   	pop    ebx
c0011951:	5e                   	pop    esi
c0011952:	c3                   	ret    
c0011953:	83 c4 04             	add    esp,0x4
c0011956:	31 c0                	xor    eax,eax
c0011958:	31 d2                	xor    edx,edx
c001195a:	5b                   	pop    ebx
c001195b:	5e                   	pop    esi
c001195c:	c3                   	ret    

c001195d <SysSetDiskVolumeLabel(regs*)>:
c001195d:	56                   	push   esi
c001195e:	53                   	push   ebx
c001195f:	83 ec 04             	sub    esp,0x4
c0011962:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0011966:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0011969:	83 f8 19             	cmp    eax,0x19
c001196c:	77 33                	ja     c00119a1 <SysSetDiskVolumeLabel(regs*)+0x44>
c001196e:	8b 0c 85 e0 94 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd6b20]
c0011975:	85 c9                	test   ecx,ecx
c0011977:	74 28                	je     c00119a1 <SysSetDiskVolumeLabel(regs*)+0x44>
c0011979:	8b 5a 24             	mov    ebx,DWORD PTR [edx+0x24]
c001197c:	85 db                	test   ebx,ebx
c001197e:	74 21                	je     c00119a1 <SysSetDiskVolumeLabel(regs*)+0x44>
c0011980:	8b 91 74 01 00 00    	mov    edx,DWORD PTR [ecx+0x174]
c0011986:	85 d2                	test   edx,edx
c0011988:	74 17                	je     c00119a1 <SysSetDiskVolumeLabel(regs*)+0x44>
c001198a:	8b 32                	mov    esi,DWORD PTR [edx]
c001198c:	53                   	push   ebx
c001198d:	50                   	push   eax
c001198e:	51                   	push   ecx
c001198f:	52                   	push   edx
c0011990:	ff 56 5c             	call   DWORD PTR [esi+0x5c]
c0011993:	83 c4 10             	add    esp,0x10
c0011996:	89 c2                	mov    edx,eax
c0011998:	83 c4 04             	add    esp,0x4
c001199b:	c1 fa 1f             	sar    edx,0x1f
c001199e:	5b                   	pop    ebx
c001199f:	5e                   	pop    esi
c00119a0:	c3                   	ret    
c00119a1:	83 c4 04             	add    esp,0x4
c00119a4:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c00119a9:	ba ff ff ff ff       	mov    edx,0xffffffff
c00119ae:	5b                   	pop    ebx
c00119af:	5e                   	pop    esi
c00119b0:	c3                   	ret    

c00119b1 <SysGetDiskVolumeLabel(regs*)>:
c00119b1:	57                   	push   edi
c00119b2:	56                   	push   esi
c00119b3:	53                   	push   ebx
c00119b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00119b8:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c00119bb:	83 fa 19             	cmp    edx,0x19
c00119be:	77 3c                	ja     c00119fc <SysGetDiskVolumeLabel(regs*)+0x4b>
c00119c0:	8b 0c 95 e0 94 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffd6b20]
c00119c7:	85 c9                	test   ecx,ecx
c00119c9:	74 31                	je     c00119fc <SysGetDiskVolumeLabel(regs*)+0x4b>
c00119cb:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c00119ce:	85 db                	test   ebx,ebx
c00119d0:	74 2a                	je     c00119fc <SysGetDiskVolumeLabel(regs*)+0x4b>
c00119d2:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c00119d5:	85 f6                	test   esi,esi
c00119d7:	74 23                	je     c00119fc <SysGetDiskVolumeLabel(regs*)+0x4b>
c00119d9:	8b 81 74 01 00 00    	mov    eax,DWORD PTR [ecx+0x174]
c00119df:	85 c0                	test   eax,eax
c00119e1:	74 19                	je     c00119fc <SysGetDiskVolumeLabel(regs*)+0x4b>
c00119e3:	83 ec 0c             	sub    esp,0xc
c00119e6:	8b 38                	mov    edi,DWORD PTR [eax]
c00119e8:	56                   	push   esi
c00119e9:	53                   	push   ebx
c00119ea:	52                   	push   edx
c00119eb:	51                   	push   ecx
c00119ec:	50                   	push   eax
c00119ed:	ff 57 58             	call   DWORD PTR [edi+0x58]
c00119f0:	83 c4 20             	add    esp,0x20
c00119f3:	89 c2                	mov    edx,eax
c00119f5:	5b                   	pop    ebx
c00119f6:	c1 fa 1f             	sar    edx,0x1f
c00119f9:	5e                   	pop    esi
c00119fa:	5f                   	pop    edi
c00119fb:	c3                   	ret    
c00119fc:	5b                   	pop    ebx
c00119fd:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0011a02:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011a07:	5e                   	pop    esi
c0011a08:	5f                   	pop    edi
c0011a09:	c3                   	ret    

c0011a0a <SysShutdown(regs*)>:
c0011a0a:	83 ec 0c             	sub    esp,0xc
c0011a0d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011a11:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0011a14:	85 c0                	test   eax,eax
c0011a16:	74 18                	je     c0011a30 <SysShutdown(regs*)+0x26>
c0011a18:	83 f8 01             	cmp    eax,0x1
c0011a1b:	74 38                	je     c0011a55 <SysShutdown(regs*)+0x4b>
c0011a1d:	83 f8 02             	cmp    eax,0x2
c0011a20:	74 24                	je     c0011a46 <SysShutdown(regs*)+0x3c>
c0011a22:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011a27:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011a2c:	83 c4 0c             	add    esp,0xc
c0011a2f:	c3                   	ret    
c0011a30:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0011a35:	8b 10                	mov    edx,DWORD PTR [eax]
c0011a37:	6a 00                	push   0x0
c0011a39:	6a 00                	push   0x0
c0011a3b:	6a 00                	push   0x0
c0011a3d:	50                   	push   eax
c0011a3e:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0011a41:	83 c4 10             	add    esp,0x10
c0011a44:	eb dc                	jmp    c0011a22 <SysShutdown(regs*)+0x18>
c0011a46:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0011a4b:	8b 10                	mov    edx,DWORD PTR [eax]
c0011a4d:	6a 00                	push   0x0
c0011a4f:	6a 00                	push   0x0
c0011a51:	6a 01                	push   0x1
c0011a53:	eb e8                	jmp    c0011a3d <SysShutdown(regs*)+0x33>
c0011a55:	a1 60 95 02 c0       	mov    eax,ds:0xc0029560
c0011a5a:	85 c0                	test   eax,eax
c0011a5c:	74 02                	je     c0011a60 <SysShutdown(regs*)+0x56>
c0011a5e:	ff d0                	call   eax
c0011a60:	31 c0                	xor    eax,eax
c0011a62:	31 d2                	xor    edx,edx
c0011a64:	83 c4 0c             	add    esp,0xc
c0011a67:	c3                   	ret    

c0011a68 <SysRealpath(regs*)>:
c0011a68:	83 ec 0c             	sub    esp,0xc
c0011a6b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011a6f:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0011a72:	85 d2                	test   edx,edx
c0011a74:	74 07                	je     c0011a7d <SysRealpath(regs*)+0x15>
c0011a76:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0011a79:	85 c0                	test   eax,eax
c0011a7b:	75 0b                	jne    c0011a88 <SysRealpath(regs*)+0x20>
c0011a7d:	b8 01 00 00 00       	mov    eax,0x1
c0011a82:	31 d2                	xor    edx,edx
c0011a84:	83 c4 0c             	add    esp,0xc
c0011a87:	c3                   	ret    
c0011a88:	83 ec 04             	sub    esp,0x4
c0011a8b:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0011a91:	8b 49 3c             	mov    ecx,DWORD PTR [ecx+0x3c]
c0011a94:	81 c1 0c 01 00 00    	add    ecx,0x10c
c0011a9a:	51                   	push   ecx
c0011a9b:	52                   	push   edx
c0011a9c:	50                   	push   eax
c0011a9d:	e8 80 9a ff ff       	call   c000b522 <Fs::standardiseFiles(char*, char const*, char const*)>
c0011aa2:	83 c4 10             	add    esp,0x10
c0011aa5:	31 c0                	xor    eax,eax
c0011aa7:	31 d2                	xor    edx,edx
c0011aa9:	83 c4 0c             	add    esp,0xc
c0011aac:	c3                   	ret    

c0011aad <SysReadDir(regs*)>:
c0011aad:	53                   	push   ebx
c0011aae:	83 ec 18             	sub    esp,0x18
c0011ab1:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011ab5:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0011ab8:	83 f8 02             	cmp    eax,0x2
c0011abb:	76 61                	jbe    c0011b1e <SysReadDir(regs*)+0x71>
c0011abd:	81 7b 20 00 ff ff 0f 	cmp    DWORD PTR [ebx+0x20],0xfffff00
c0011ac4:	77 49                	ja     c0011b0f <SysReadDir(regs*)+0x62>
c0011ac6:	83 ec 0c             	sub    esp,0xc
c0011ac9:	50                   	push   eax
c0011aca:	e8 e4 79 ff ff       	call   c00094b3 <KeGetFileFromDescriptor(int)>
c0011acf:	83 c4 10             	add    esp,0x10
c0011ad2:	85 c0                	test   eax,eax
c0011ad4:	74 39                	je     c0011b0f <SysReadDir(regs*)+0x62>
c0011ad6:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011ade:	83 ec 0c             	sub    esp,0xc
c0011ae1:	8b 10                	mov    edx,DWORD PTR [eax]
c0011ae3:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0011ae7:	51                   	push   ecx
c0011ae8:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c0011aeb:	51                   	push   ecx
c0011aec:	6a 00                	push   0x0
c0011aee:	68 10 01 00 00       	push   0x110
c0011af3:	50                   	push   eax
c0011af4:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0011af7:	83 c4 20             	add    esp,0x20
c0011afa:	85 c0                	test   eax,eax
c0011afc:	74 29                	je     c0011b27 <SysReadDir(regs*)+0x7a>
c0011afe:	83 f8 07             	cmp    eax,0x7
c0011b01:	74 1b                	je     c0011b1e <SysReadDir(regs*)+0x71>
c0011b03:	b8 02 00 00 00       	mov    eax,0x2
c0011b08:	31 d2                	xor    edx,edx
c0011b0a:	83 c4 18             	add    esp,0x18
c0011b0d:	5b                   	pop    ebx
c0011b0e:	c3                   	ret    
c0011b0f:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011b14:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011b19:	83 c4 18             	add    esp,0x18
c0011b1c:	5b                   	pop    ebx
c0011b1d:	c3                   	ret    
c0011b1e:	b8 01 00 00 00       	mov    eax,0x1
c0011b23:	31 d2                	xor    edx,edx
c0011b25:	eb e3                	jmp    c0011b0a <SysReadDir(regs*)+0x5d>
c0011b27:	31 c0                	xor    eax,eax
c0011b29:	31 d2                	xor    edx,edx
c0011b2b:	eb dd                	jmp    c0011b0a <SysReadDir(regs*)+0x5d>

c0011b2d <SysIsATTY(regs*)>:
c0011b2d:	83 ec 0c             	sub    esp,0xc
c0011b30:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011b34:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0011b37:	83 f8 02             	cmp    eax,0x2
c0011b3a:	76 07                	jbe    c0011b43 <SysIsATTY(regs*)+0x16>
c0011b3c:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0011b41:	75 26                	jne    c0011b69 <SysIsATTY(regs*)+0x3c>
c0011b43:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011b48:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011b4b:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0011b51:	85 c0                	test   eax,eax
c0011b53:	74 24                	je     c0011b79 <SysIsATTY(regs*)+0x4c>
c0011b55:	83 ec 0c             	sub    esp,0xc
c0011b58:	8b 10                	mov    edx,DWORD PTR [eax]
c0011b5a:	50                   	push   eax
c0011b5b:	ff 12                	call   DWORD PTR [edx]
c0011b5d:	31 d2                	xor    edx,edx
c0011b5f:	0f b6 c0             	movzx  eax,al
c0011b62:	83 c4 10             	add    esp,0x10
c0011b65:	83 c4 0c             	add    esp,0xc
c0011b68:	c3                   	ret    
c0011b69:	83 ec 0c             	sub    esp,0xc
c0011b6c:	50                   	push   eax
c0011b6d:	e8 41 79 ff ff       	call   c00094b3 <KeGetFileFromDescriptor(int)>
c0011b72:	83 c4 10             	add    esp,0x10
c0011b75:	85 c0                	test   eax,eax
c0011b77:	75 dc                	jne    c0011b55 <SysIsATTY(regs*)+0x28>
c0011b79:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011b7e:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011b83:	83 c4 0c             	add    esp,0xc
c0011b86:	c3                   	ret    

c0011b87 <SysSeek(regs*)>:
c0011b87:	53                   	push   ebx
c0011b88:	83 ec 08             	sub    esp,0x8
c0011b8b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011b8f:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011b92:	8d 50 fd             	lea    edx,[eax-0x3]
c0011b95:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c0011b9b:	77 32                	ja     c0011bcf <SysSeek(regs*)+0x48>
c0011b9d:	83 ec 0c             	sub    esp,0xc
c0011ba0:	50                   	push   eax
c0011ba1:	e8 0d 79 ff ff       	call   c00094b3 <KeGetFileFromDescriptor(int)>
c0011ba6:	83 c4 0c             	add    esp,0xc
c0011ba9:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0011bac:	31 db                	xor    ebx,ebx
c0011bae:	53                   	push   ebx
c0011baf:	51                   	push   ecx
c0011bb0:	50                   	push   eax
c0011bb1:	e8 9c 9c ff ff       	call   c000b852 <File::seek(unsigned long long)>
c0011bb6:	83 c4 10             	add    esp,0x10
c0011bb9:	85 c0                	test   eax,eax
c0011bbb:	0f 95 c0             	setne  al
c0011bbe:	31 d2                	xor    edx,edx
c0011bc0:	0f b6 c0             	movzx  eax,al
c0011bc3:	f7 d8                	neg    eax
c0011bc5:	83 d2 00             	adc    edx,0x0
c0011bc8:	83 c4 08             	add    esp,0x8
c0011bcb:	f7 da                	neg    edx
c0011bcd:	5b                   	pop    ebx
c0011bce:	c3                   	ret    
c0011bcf:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011bd4:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011bd9:	83 c4 08             	add    esp,0x8
c0011bdc:	5b                   	pop    ebx
c0011bdd:	c3                   	ret    

c0011bde <SysTell(regs*)>:
c0011bde:	53                   	push   ebx
c0011bdf:	83 ec 08             	sub    esp,0x8
c0011be2:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011be6:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011be9:	83 f8 02             	cmp    eax,0x2
c0011bec:	76 4e                	jbe    c0011c3c <SysTell(regs*)+0x5e>
c0011bee:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0011bf3:	76 19                	jbe    c0011c0e <SysTell(regs*)+0x30>
c0011bf5:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0011bf8:	31 d2                	xor    edx,edx
c0011bfa:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0011c00:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011c07:	31 c0                	xor    eax,eax
c0011c09:	83 c4 08             	add    esp,0x8
c0011c0c:	5b                   	pop    ebx
c0011c0d:	c3                   	ret    
c0011c0e:	83 ec 0c             	sub    esp,0xc
c0011c11:	50                   	push   eax
c0011c12:	e8 9c 78 ff ff       	call   c00094b3 <KeGetFileFromDescriptor(int)>
c0011c17:	5a                   	pop    edx
c0011c18:	8b 5b 28             	mov    ebx,DWORD PTR [ebx+0x28]
c0011c1b:	59                   	pop    ecx
c0011c1c:	53                   	push   ebx
c0011c1d:	50                   	push   eax
c0011c1e:	e8 db 9c ff ff       	call   c000b8fe <File::tell(unsigned long long*)>
c0011c23:	83 c4 10             	add    esp,0x10
c0011c26:	85 c0                	test   eax,eax
c0011c28:	0f 95 c0             	setne  al
c0011c2b:	31 d2                	xor    edx,edx
c0011c2d:	0f b6 c0             	movzx  eax,al
c0011c30:	f7 d8                	neg    eax
c0011c32:	83 d2 00             	adc    edx,0x0
c0011c35:	83 c4 08             	add    esp,0x8
c0011c38:	f7 da                	neg    edx
c0011c3a:	5b                   	pop    ebx
c0011c3b:	c3                   	ret    
c0011c3c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011c41:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011c46:	83 c4 08             	add    esp,0x8
c0011c49:	5b                   	pop    ebx
c0011c4a:	c3                   	ret    

c0011c4b <SysSize(regs*)>:
c0011c4b:	53                   	push   ebx
c0011c4c:	83 ec 18             	sub    esp,0x18
c0011c4f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011c53:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011c56:	83 f8 02             	cmp    eax,0x2
c0011c59:	76 54                	jbe    c0011caf <SysSize(regs*)+0x64>
c0011c5b:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0011c60:	76 19                	jbe    c0011c7b <SysSize(regs*)+0x30>
c0011c62:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0011c65:	31 d2                	xor    edx,edx
c0011c67:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0011c6d:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011c74:	31 c0                	xor    eax,eax
c0011c76:	83 c4 18             	add    esp,0x18
c0011c79:	5b                   	pop    ebx
c0011c7a:	c3                   	ret    
c0011c7b:	83 ec 0c             	sub    esp,0xc
c0011c7e:	50                   	push   eax
c0011c7f:	e8 2f 78 ff ff       	call   c00094b3 <KeGetFileFromDescriptor(int)>
c0011c84:	83 c4 0c             	add    esp,0xc
c0011c87:	8d 54 24 13          	lea    edx,[esp+0x13]
c0011c8b:	52                   	push   edx
c0011c8c:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0011c8f:	52                   	push   edx
c0011c90:	50                   	push   eax
c0011c91:	e8 00 9e ff ff       	call   c000ba96 <File::stat(unsigned long long*, bool*)>
c0011c96:	83 c4 10             	add    esp,0x10
c0011c99:	85 c0                	test   eax,eax
c0011c9b:	0f 95 c0             	setne  al
c0011c9e:	31 d2                	xor    edx,edx
c0011ca0:	0f b6 c0             	movzx  eax,al
c0011ca3:	f7 d8                	neg    eax
c0011ca5:	83 d2 00             	adc    edx,0x0
c0011ca8:	83 c4 18             	add    esp,0x18
c0011cab:	f7 da                	neg    edx
c0011cad:	5b                   	pop    ebx
c0011cae:	c3                   	ret    
c0011caf:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011cb4:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011cb9:	83 c4 18             	add    esp,0x18
c0011cbc:	5b                   	pop    ebx
c0011cbd:	c3                   	ret    

c0011cbe <SysSizeFromFilename(regs*)>:
c0011cbe:	57                   	push   edi
c0011cbf:	56                   	push   esi
c0011cc0:	53                   	push   ebx
c0011cc1:	83 ec 20             	sub    esp,0x20
c0011cc4:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0011cc8:	8b 5e 20             	mov    ebx,DWORD PTR [esi+0x20]
c0011ccb:	83 fb 02             	cmp    ebx,0x2
c0011cce:	0f 86 8a 00 00 00    	jbe    c0011d5e <SysSizeFromFilename(regs*)+0xa0>
c0011cd4:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c0011cda:	76 1b                	jbe    c0011cf7 <SysSizeFromFilename(regs*)+0x39>
c0011cdc:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0011cdf:	31 d2                	xor    edx,edx
c0011ce1:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0011ce7:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011cee:	83 c4 20             	add    esp,0x20
c0011cf1:	31 c0                	xor    eax,eax
c0011cf3:	5b                   	pop    ebx
c0011cf4:	5e                   	pop    esi
c0011cf5:	5f                   	pop    edi
c0011cf6:	c3                   	ret    
c0011cf7:	83 ec 0c             	sub    esp,0xc
c0011cfa:	68 14 01 00 00       	push   0x114
c0011cff:	e8 b2 5d ff ff       	call   c0007ab6 <malloc>
c0011d04:	83 c4 0c             	add    esp,0xc
c0011d07:	89 c7                	mov    edi,eax
c0011d09:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011d0e:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011d11:	50                   	push   eax
c0011d12:	53                   	push   ebx
c0011d13:	57                   	push   edi
c0011d14:	e8 bf 99 ff ff       	call   c000b6d8 <File::File(char const*, Process*)>
c0011d19:	83 c4 0c             	add    esp,0xc
c0011d1c:	8d 44 24 23          	lea    eax,[esp+0x23]
c0011d20:	50                   	push   eax
c0011d21:	8b 56 28             	mov    edx,DWORD PTR [esi+0x28]
c0011d24:	52                   	push   edx
c0011d25:	57                   	push   edi
c0011d26:	e8 6b 9d ff ff       	call   c000ba96 <File::stat(unsigned long long*, bool*)>
c0011d2b:	83 c4 10             	add    esp,0x10
c0011d2e:	85 ff                	test   edi,edi
c0011d30:	74 14                	je     c0011d46 <SysSizeFromFilename(regs*)+0x88>
c0011d32:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011d36:	8b 17                	mov    edx,DWORD PTR [edi]
c0011d38:	83 ec 0c             	sub    esp,0xc
c0011d3b:	57                   	push   edi
c0011d3c:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0011d3f:	83 c4 10             	add    esp,0x10
c0011d42:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011d46:	85 c0                	test   eax,eax
c0011d48:	0f 95 c0             	setne  al
c0011d4b:	31 d2                	xor    edx,edx
c0011d4d:	0f b6 c0             	movzx  eax,al
c0011d50:	f7 d8                	neg    eax
c0011d52:	83 d2 00             	adc    edx,0x0
c0011d55:	83 c4 20             	add    esp,0x20
c0011d58:	f7 da                	neg    edx
c0011d5a:	5b                   	pop    ebx
c0011d5b:	5e                   	pop    esi
c0011d5c:	5f                   	pop    edi
c0011d5d:	c3                   	ret    
c0011d5e:	83 c4 20             	add    esp,0x20
c0011d61:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011d66:	5b                   	pop    ebx
c0011d67:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011d6c:	5e                   	pop    esi
c0011d6d:	5f                   	pop    edi
c0011d6e:	c3                   	ret    

c0011d6f <SysClose(regs*)>:
c0011d6f:	53                   	push   ebx
c0011d70:	83 ec 08             	sub    esp,0x8
c0011d73:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011d77:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0011d7a:	83 f8 02             	cmp    eax,0x2
c0011d7d:	76 41                	jbe    c0011dc0 <SysClose(regs*)+0x51>
c0011d7f:	8d 90 00 01 00 f0    	lea    edx,[eax-0xfffff00]
c0011d85:	83 fa 01             	cmp    edx,0x1
c0011d88:	76 2d                	jbe    c0011db7 <SysClose(regs*)+0x48>
c0011d8a:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0011d8f:	77 2f                	ja     c0011dc0 <SysClose(regs*)+0x51>
c0011d91:	83 ec 0c             	sub    esp,0xc
c0011d94:	50                   	push   eax
c0011d95:	e8 19 77 ff ff       	call   c00094b3 <KeGetFileFromDescriptor(int)>
c0011d9a:	89 c3                	mov    ebx,eax
c0011d9c:	89 04 24             	mov    DWORD PTR [esp],eax
c0011d9f:	e8 4e 9a ff ff       	call   c000b7f2 <File::close()>
c0011da4:	83 c4 10             	add    esp,0x10
c0011da7:	85 db                	test   ebx,ebx
c0011da9:	74 0c                	je     c0011db7 <SysClose(regs*)+0x48>
c0011dab:	83 ec 0c             	sub    esp,0xc
c0011dae:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011db0:	53                   	push   ebx
c0011db1:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011db4:	83 c4 10             	add    esp,0x10
c0011db7:	31 c0                	xor    eax,eax
c0011db9:	31 d2                	xor    edx,edx
c0011dbb:	83 c4 08             	add    esp,0x8
c0011dbe:	5b                   	pop    ebx
c0011dbf:	c3                   	ret    
c0011dc0:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011dc5:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011dca:	83 c4 08             	add    esp,0x8
c0011dcd:	5b                   	pop    ebx
c0011dce:	c3                   	ret    

c0011dcf <SysOpenDir(regs*)>:
c0011dcf:	56                   	push   esi
c0011dd0:	53                   	push   ebx
c0011dd1:	83 ec 04             	sub    esp,0x4
c0011dd4:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011dd8:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c0011ddb:	85 c9                	test   ecx,ecx
c0011ddd:	74 5d                	je     c0011e3c <SysOpenDir(regs*)+0x6d>
c0011ddf:	83 ec 0c             	sub    esp,0xc
c0011de2:	68 14 01 00 00       	push   0x114
c0011de7:	e8 ca 5c ff ff       	call   c0007ab6 <malloc>
c0011dec:	83 c4 0c             	add    esp,0xc
c0011def:	89 c6                	mov    esi,eax
c0011df1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011df6:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011df9:	50                   	push   eax
c0011dfa:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0011dfd:	52                   	push   edx
c0011dfe:	56                   	push   esi
c0011dff:	e8 50 9e ff ff       	call   c000bc54 <Directory::Directory(char const*, Process*)>
c0011e04:	83 c4 10             	add    esp,0x10
c0011e07:	85 f6                	test   esi,esi
c0011e09:	74 31                	je     c0011e3c <SysOpenDir(regs*)+0x6d>
c0011e0b:	83 ec 0c             	sub    esp,0xc
c0011e0e:	56                   	push   esi
c0011e0f:	e8 fc 9e ff ff       	call   c000bd10 <Directory::open()>
c0011e14:	83 c4 10             	add    esp,0x10
c0011e17:	85 c0                	test   eax,eax
c0011e19:	75 21                	jne    c0011e3c <SysOpenDir(regs*)+0x6d>
c0011e1b:	83 ec 0c             	sub    esp,0xc
c0011e1e:	56                   	push   esi
c0011e1f:	e8 92 73 ff ff       	call   c00091b6 <UnixFile::getFileDescriptor()>
c0011e24:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0011e27:	83 c4 10             	add    esp,0x10
c0011e2a:	89 02                	mov    DWORD PTR [edx],eax
c0011e2c:	c1 f8 1f             	sar    eax,0x1f
c0011e2f:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0011e32:	83 c4 04             	add    esp,0x4
c0011e35:	31 c0                	xor    eax,eax
c0011e37:	31 d2                	xor    edx,edx
c0011e39:	5b                   	pop    ebx
c0011e3a:	5e                   	pop    esi
c0011e3b:	c3                   	ret    
c0011e3c:	83 c4 04             	add    esp,0x4
c0011e3f:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011e44:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011e49:	5b                   	pop    ebx
c0011e4a:	5e                   	pop    esi
c0011e4b:	c3                   	ret    

c0011e4c <SysMakeDir(regs*)>:
c0011e4c:	56                   	push   esi
c0011e4d:	53                   	push   ebx
c0011e4e:	83 ec 10             	sub    esp,0x10
c0011e51:	68 14 01 00 00       	push   0x114
c0011e56:	e8 5b 5c ff ff       	call   c0007ab6 <malloc>
c0011e5b:	83 c4 0c             	add    esp,0xc
c0011e5e:	89 c3                	mov    ebx,eax
c0011e60:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011e65:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011e68:	50                   	push   eax
c0011e69:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0011e6d:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c0011e70:	52                   	push   edx
c0011e71:	53                   	push   ebx
c0011e72:	e8 dd 9d ff ff       	call   c000bc54 <Directory::Directory(char const*, Process*)>
c0011e77:	83 c4 10             	add    esp,0x10
c0011e7a:	85 db                	test   ebx,ebx
c0011e7c:	74 2c                	je     c0011eaa <SysMakeDir(regs*)+0x5e>
c0011e7e:	83 ec 0c             	sub    esp,0xc
c0011e81:	53                   	push   ebx
c0011e82:	e8 69 a0 ff ff       	call   c000bef0 <Directory::create()>
c0011e87:	89 c6                	mov    esi,eax
c0011e89:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011e8b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011e8e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011e91:	83 c4 10             	add    esp,0x10
c0011e94:	31 c0                	xor    eax,eax
c0011e96:	85 f6                	test   esi,esi
c0011e98:	0f 95 c0             	setne  al
c0011e9b:	31 d2                	xor    edx,edx
c0011e9d:	f7 d8                	neg    eax
c0011e9f:	83 d2 00             	adc    edx,0x0
c0011ea2:	83 c4 04             	add    esp,0x4
c0011ea5:	f7 da                	neg    edx
c0011ea7:	5b                   	pop    ebx
c0011ea8:	5e                   	pop    esi
c0011ea9:	c3                   	ret    
c0011eaa:	83 c4 04             	add    esp,0x4
c0011ead:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011eb2:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011eb7:	5b                   	pop    ebx
c0011eb8:	5e                   	pop    esi
c0011eb9:	c3                   	ret    

c0011eba <SysCloseDir(regs*)>:
c0011eba:	53                   	push   ebx
c0011ebb:	83 ec 08             	sub    esp,0x8
c0011ebe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011ec2:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0011ec5:	8d 50 fd             	lea    edx,[eax-0x3]
c0011ec8:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c0011ece:	77 2f                	ja     c0011eff <SysCloseDir(regs*)+0x45>
c0011ed0:	83 ec 0c             	sub    esp,0xc
c0011ed3:	50                   	push   eax
c0011ed4:	e8 da 75 ff ff       	call   c00094b3 <KeGetFileFromDescriptor(int)>
c0011ed9:	89 c3                	mov    ebx,eax
c0011edb:	89 04 24             	mov    DWORD PTR [esp],eax
c0011ede:	e8 89 9e ff ff       	call   c000bd6c <Directory::close()>
c0011ee3:	83 c4 10             	add    esp,0x10
c0011ee6:	85 db                	test   ebx,ebx
c0011ee8:	74 0c                	je     c0011ef6 <SysCloseDir(regs*)+0x3c>
c0011eea:	83 ec 0c             	sub    esp,0xc
c0011eed:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011eef:	53                   	push   ebx
c0011ef0:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011ef3:	83 c4 10             	add    esp,0x10
c0011ef6:	31 c0                	xor    eax,eax
c0011ef8:	31 d2                	xor    edx,edx
c0011efa:	83 c4 08             	add    esp,0x8
c0011efd:	5b                   	pop    ebx
c0011efe:	c3                   	ret    
c0011eff:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011f04:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011f09:	83 c4 08             	add    esp,0x8
c0011f0c:	5b                   	pop    ebx
c0011f0d:	c3                   	ret    

c0011f0e <SysWait(regs*)>:
c0011f0e:	83 ec 10             	sub    esp,0x10
c0011f11:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0011f15:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0011f18:	52                   	push   edx
c0011f19:	8b 48 24             	mov    ecx,DWORD PTR [eax+0x24]
c0011f1c:	51                   	push   ecx
c0011f1d:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0011f20:	50                   	push   eax
c0011f21:	e8 d2 3d 00 00       	call   c0015cf8 <waitTask(int, int*, int)>
c0011f26:	83 c4 1c             	add    esp,0x1c
c0011f29:	89 c2                	mov    edx,eax
c0011f2b:	c1 fa 1f             	sar    edx,0x1f
c0011f2e:	c3                   	ret    

c0011f2f <SysNotImpl(regs*)>:
c0011f2f:	83 ec 18             	sub    esp,0x18
c0011f32:	68 5b 1d 02 c0       	push   0xc0021d5b
c0011f37:	e8 b1 f2 ff ff       	call   c00111ed <KePanic(char const*)>
c0011f3c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011f41:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011f46:	83 c4 1c             	add    esp,0x1c
c0011f49:	c3                   	ret    

c0011f4a <SysPanic(regs*)>:
c0011f4a:	83 ec 18             	sub    esp,0x18
c0011f4d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011f51:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0011f54:	50                   	push   eax
c0011f55:	e8 93 f2 ff ff       	call   c00111ed <KePanic(char const*)>
c0011f5a:	b8 01 00 00 00       	mov    eax,0x1
c0011f5f:	31 d2                	xor    edx,edx
c0011f61:	83 c4 1c             	add    esp,0x1c
c0011f64:	c3                   	ret    

c0011f65 <SysRmdir(regs*)>:
c0011f65:	56                   	push   esi
c0011f66:	53                   	push   ebx
c0011f67:	83 ec 20             	sub    esp,0x20
c0011f6a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011f6e:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0011f71:	68 14 01 00 00       	push   0x114
c0011f76:	e8 3b 5b ff ff       	call   c0007ab6 <malloc>
c0011f7b:	83 c4 0c             	add    esp,0xc
c0011f7e:	89 c3                	mov    ebx,eax
c0011f80:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011f85:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011f88:	50                   	push   eax
c0011f89:	56                   	push   esi
c0011f8a:	53                   	push   ebx
c0011f8b:	e8 48 97 ff ff       	call   c000b6d8 <File::File(char const*, Process*)>
c0011f90:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011f93:	e8 ca 99 ff ff       	call   c000b962 <File::unlink()>
c0011f98:	83 c4 10             	add    esp,0x10
c0011f9b:	85 db                	test   ebx,ebx
c0011f9d:	74 14                	je     c0011fb3 <SysRmdir(regs*)+0x4e>
c0011f9f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011fa3:	8b 13                	mov    edx,DWORD PTR [ebx]
c0011fa5:	83 ec 0c             	sub    esp,0xc
c0011fa8:	53                   	push   ebx
c0011fa9:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0011fac:	83 c4 10             	add    esp,0x10
c0011faf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011fb3:	85 c0                	test   eax,eax
c0011fb5:	0f 95 c0             	setne  al
c0011fb8:	31 d2                	xor    edx,edx
c0011fba:	0f b6 c0             	movzx  eax,al
c0011fbd:	f7 d8                	neg    eax
c0011fbf:	83 d2 00             	adc    edx,0x0
c0011fc2:	83 c4 14             	add    esp,0x14
c0011fc5:	f7 da                	neg    edx
c0011fc7:	5b                   	pop    ebx
c0011fc8:	5e                   	pop    esi
c0011fc9:	c3                   	ret    

c0011fca <SysUnlink(regs*)>:
c0011fca:	56                   	push   esi
c0011fcb:	53                   	push   ebx
c0011fcc:	83 ec 20             	sub    esp,0x20
c0011fcf:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011fd3:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0011fd6:	68 14 01 00 00       	push   0x114
c0011fdb:	e8 d6 5a ff ff       	call   c0007ab6 <malloc>
c0011fe0:	83 c4 0c             	add    esp,0xc
c0011fe3:	89 c3                	mov    ebx,eax
c0011fe5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011fea:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011fed:	50                   	push   eax
c0011fee:	56                   	push   esi
c0011fef:	53                   	push   ebx
c0011ff0:	e8 e3 96 ff ff       	call   c000b6d8 <File::File(char const*, Process*)>
c0011ff5:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011ff8:	e8 65 99 ff ff       	call   c000b962 <File::unlink()>
c0011ffd:	83 c4 10             	add    esp,0x10
c0012000:	85 db                	test   ebx,ebx
c0012002:	74 14                	je     c0012018 <SysUnlink(regs*)+0x4e>
c0012004:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012008:	8b 13                	mov    edx,DWORD PTR [ebx]
c001200a:	83 ec 0c             	sub    esp,0xc
c001200d:	53                   	push   ebx
c001200e:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0012011:	83 c4 10             	add    esp,0x10
c0012014:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012018:	85 c0                	test   eax,eax
c001201a:	0f 95 c0             	setne  al
c001201d:	31 d2                	xor    edx,edx
c001201f:	0f b6 c0             	movzx  eax,al
c0012022:	f7 d8                	neg    eax
c0012024:	83 d2 00             	adc    edx,0x0
c0012027:	83 c4 14             	add    esp,0x14
c001202a:	f7 da                	neg    edx
c001202c:	5b                   	pop    ebx
c001202d:	5e                   	pop    esi
c001202e:	c3                   	ret    

c001202f <SysGetArgv(regs*)>:
c001202f:	83 ec 0c             	sub    esp,0xc
c0012032:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012036:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0012039:	85 c0                	test   eax,eax
c001203b:	78 2c                	js     c0012069 <SysGetArgv(regs*)+0x3a>
c001203d:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0012043:	8b 49 3c             	mov    ecx,DWORD PTR [ecx+0x3c]
c0012046:	3b 81 16 05 00 00    	cmp    eax,DWORD PTR [ecx+0x516]
c001204c:	7d 1b                	jge    c0012069 <SysGetArgv(regs*)+0x3a>
c001204e:	8b 84 81 1a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x51a]
c0012055:	85 c0                	test   eax,eax
c0012057:	74 18                	je     c0012071 <SysGetArgv(regs*)+0x42>
c0012059:	83 ec 08             	sub    esp,0x8
c001205c:	50                   	push   eax
c001205d:	8b 42 24             	mov    eax,DWORD PTR [edx+0x24]
c0012060:	50                   	push   eax
c0012061:	e8 da e5 fe ff       	call   c0000640 <strcpy>
c0012066:	83 c4 10             	add    esp,0x10
c0012069:	31 c0                	xor    eax,eax
c001206b:	31 d2                	xor    edx,edx
c001206d:	83 c4 0c             	add    esp,0xc
c0012070:	c3                   	ret    
c0012071:	b8 01 00 00 00       	mov    eax,0x1
c0012076:	31 d2                	xor    edx,edx
c0012078:	83 c4 0c             	add    esp,0xc
c001207b:	c3                   	ret    

c001207c <SysUSleep(regs*)>:
c001207c:	83 ec 1c             	sub    esp,0x1c
c001207f:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0012083:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c0012086:	8b 51 28             	mov    edx,DWORD PTR [ecx+0x28]
c0012089:	6a 00                	push   0x0
c001208b:	6a 64                	push   0x64
c001208d:	52                   	push   edx
c001208e:	50                   	push   eax
c001208f:	e8 8c d0 00 00       	call   c001f120 <__udivdi3>
c0012094:	83 c4 14             	add    esp,0x14
c0012097:	50                   	push   eax
c0012098:	e8 3f 3d 00 00       	call   c0015ddc <milliTenthSleep(unsigned int)>
c001209d:	31 c0                	xor    eax,eax
c001209f:	31 d2                	xor    edx,edx
c00120a1:	83 c4 1c             	add    esp,0x1c
c00120a4:	c3                   	ret    

c00120a5 <SysSpawn(regs*)>:
c00120a5:	56                   	push   esi
c00120a6:	53                   	push   ebx
c00120a7:	83 ec 04             	sub    esp,0x4
c00120aa:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00120ae:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c00120b1:	85 f6                	test   esi,esi
c00120b3:	75 0a                	jne    c00120bf <SysSpawn(regs*)+0x1a>
c00120b5:	83 c4 04             	add    esp,0x4
c00120b8:	31 c0                	xor    eax,eax
c00120ba:	31 d2                	xor    edx,edx
c00120bc:	5b                   	pop    ebx
c00120bd:	5e                   	pop    esi
c00120be:	c3                   	ret    
c00120bf:	83 ec 0c             	sub    esp,0xc
c00120c2:	68 24 07 00 00       	push   0x724
c00120c7:	e8 ea 59 ff ff       	call   c0007ab6 <malloc>
c00120cc:	83 c4 10             	add    esp,0x10
c00120cf:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c00120d2:	89 c6                	mov    esi,eax
c00120d4:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00120d7:	85 c9                	test   ecx,ecx
c00120d9:	75 39                	jne    c0012114 <SysSpawn(regs*)+0x6f>
c00120db:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00120e0:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00120e3:	52                   	push   edx
c00120e4:	50                   	push   eax
c00120e5:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00120e8:	50                   	push   eax
c00120e9:	56                   	push   esi
c00120ea:	e8 3d 33 00 00       	call   c001542c <Process::Process(char const*, Process*, char**)>
c00120ef:	83 c4 10             	add    esp,0x10
c00120f2:	80 be 1e 07 00 00 00 	cmp    BYTE PTR [esi+0x71e],0x0
c00120f9:	75 ba                	jne    c00120b5 <SysSpawn(regs*)+0x10>
c00120fb:	83 ec 0c             	sub    esp,0xc
c00120fe:	56                   	push   esi
c00120ff:	e8 64 38 00 00       	call   c0015968 <Process::createUserThread()>
c0012104:	8b 06                	mov    eax,DWORD PTR [esi]
c0012106:	83 c4 10             	add    esp,0x10
c0012109:	89 c2                	mov    edx,eax
c001210b:	83 c4 04             	add    esp,0x4
c001210e:	c1 fa 1f             	sar    edx,0x1f
c0012111:	5b                   	pop    ebx
c0012112:	5e                   	pop    esi
c0012113:	c3                   	ret    
c0012114:	31 c0                	xor    eax,eax
c0012116:	eb cb                	jmp    c00120e3 <SysSpawn(regs*)+0x3e>

c0012118 <SysGetEnv(regs*)>:
c0012118:	57                   	push   edi
c0012119:	56                   	push   esi
c001211a:	53                   	push   ebx
c001211b:	83 ec 1c             	sub    esp,0x1c
c001211e:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0012122:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012127:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c001212a:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c001212d:	8b 48 3c             	mov    ecx,DWORD PTR [eax+0x3c]
c0012130:	51                   	push   ecx
c0012131:	e8 6f ef ff ff       	call   c00110a5 <KeGetProcessTotalEnvCount(Process*)>
c0012136:	83 c4 10             	add    esp,0x10
c0012139:	39 c7                	cmp    edi,eax
c001213b:	7c 14                	jl     c0012151 <SysGetEnv(regs*)+0x39>
c001213d:	85 f6                	test   esi,esi
c001213f:	75 0b                	jne    c001214c <SysGetEnv(regs*)+0x34>
c0012141:	83 c4 10             	add    esp,0x10
c0012144:	31 c0                	xor    eax,eax
c0012146:	5b                   	pop    ebx
c0012147:	31 d2                	xor    edx,edx
c0012149:	5e                   	pop    esi
c001214a:	5f                   	pop    edi
c001214b:	c3                   	ret    
c001214c:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001214f:	eb f0                	jmp    c0012141 <SysGetEnv(regs*)+0x29>
c0012151:	8d 44 24 08          	lea    eax,[esp+0x8]
c0012155:	83 ec 04             	sub    esp,0x4
c0012158:	57                   	push   edi
c0012159:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001215f:	8b 7a 3c             	mov    edi,DWORD PTR [edx+0x3c]
c0012162:	57                   	push   edi
c0012163:	50                   	push   eax
c0012164:	e8 5c ef ff ff       	call   c00110c5 <KeGetProcessEnvPair(Process*, int)>
c0012169:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c001216c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012170:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0012174:	83 c4 0c             	add    esp,0xc
c0012177:	85 d2                	test   edx,edx
c0012179:	75 23                	jne    c001219e <SysGetEnv(regs*)+0x86>
c001217b:	83 ec 0c             	sub    esp,0xc
c001217e:	50                   	push   eax
c001217f:	e8 ec e3 fe ff       	call   c0000570 <strlen>
c0012184:	89 3c 24             	mov    DWORD PTR [esp],edi
c0012187:	89 c3                	mov    ebx,eax
c0012189:	e8 e2 e3 fe ff       	call   c0000570 <strlen>
c001218e:	83 c4 10             	add    esp,0x10
c0012191:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c0012195:	83 c4 10             	add    esp,0x10
c0012198:	31 d2                	xor    edx,edx
c001219a:	5b                   	pop    ebx
c001219b:	5e                   	pop    esi
c001219c:	5f                   	pop    edi
c001219d:	c3                   	ret    
c001219e:	83 ec 08             	sub    esp,0x8
c00121a1:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00121a4:	50                   	push   eax
c00121a5:	56                   	push   esi
c00121a6:	e8 95 e4 fe ff       	call   c0000640 <strcpy>
c00121ab:	58                   	pop    eax
c00121ac:	5a                   	pop    edx
c00121ad:	68 75 1d 02 c0       	push   0xc0021d75
c00121b2:	56                   	push   esi
c00121b3:	e8 88 e6 fe ff       	call   c0000840 <strcat>
c00121b8:	59                   	pop    ecx
c00121b9:	5b                   	pop    ebx
c00121ba:	57                   	push   edi
c00121bb:	56                   	push   esi
c00121bc:	e8 7f e6 fe ff       	call   c0000840 <strcat>
c00121c1:	83 c4 10             	add    esp,0x10
c00121c4:	e9 78 ff ff ff       	jmp    c0012141 <SysGetEnv(regs*)+0x29>

c00121c9 <SysSetFatAttrib(regs*)>:
c00121c9:	57                   	push   edi
c00121ca:	56                   	push   esi
c00121cb:	53                   	push   ebx
c00121cc:	83 ec 1c             	sub    esp,0x1c
c00121cf:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c00121d3:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c00121d6:	68 14 01 00 00       	push   0x114
c00121db:	e8 d6 58 ff ff       	call   c0007ab6 <malloc>
c00121e0:	83 c4 0c             	add    esp,0xc
c00121e3:	89 c3                	mov    ebx,eax
c00121e5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00121ea:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00121ed:	50                   	push   eax
c00121ee:	57                   	push   edi
c00121ef:	53                   	push   ebx
c00121f0:	e8 e3 94 ff ff       	call   c000b6d8 <File::File(char const*, Process*)>
c00121f5:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c00121f8:	83 c4 0c             	add    esp,0xc
c00121fb:	0f b6 d4             	movzx  edx,ah
c00121fe:	0f b6 c0             	movzx  eax,al
c0012201:	52                   	push   edx
c0012202:	50                   	push   eax
c0012203:	53                   	push   ebx
c0012204:	e8 f3 97 ff ff       	call   c000b9fc <File::chfatattr(unsigned char, unsigned char)>
c0012209:	83 c4 10             	add    esp,0x10
c001220c:	85 db                	test   ebx,ebx
c001220e:	74 14                	je     c0012224 <SysSetFatAttrib(regs*)+0x5b>
c0012210:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012214:	8b 13                	mov    edx,DWORD PTR [ebx]
c0012216:	83 ec 0c             	sub    esp,0xc
c0012219:	53                   	push   ebx
c001221a:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001221d:	83 c4 10             	add    esp,0x10
c0012220:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012224:	85 c0                	test   eax,eax
c0012226:	0f 95 c0             	setne  al
c0012229:	31 d2                	xor    edx,edx
c001222b:	0f b6 c0             	movzx  eax,al
c001222e:	f7 d8                	neg    eax
c0012230:	83 d2 00             	adc    edx,0x0
c0012233:	83 c4 10             	add    esp,0x10
c0012236:	f7 da                	neg    edx
c0012238:	5b                   	pop    ebx
c0012239:	5e                   	pop    esi
c001223a:	5f                   	pop    edi
c001223b:	c3                   	ret    

c001223c <SysPipe(regs*)>:
c001223c:	57                   	push   edi
c001223d:	56                   	push   esi
c001223e:	53                   	push   ebx
c001223f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012243:	83 ec 0c             	sub    esp,0xc
c0012246:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c0012249:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c001224c:	6a 20                	push   0x20
c001224e:	e8 63 58 ff ff       	call   c0007ab6 <malloc>
c0012253:	89 c3                	mov    ebx,eax
c0012255:	58                   	pop    eax
c0012256:	5a                   	pop    edx
c0012257:	68 00 50 00 00       	push   0x5000
c001225c:	53                   	push   ebx
c001225d:	e8 c6 61 ff ff       	call   c0008428 <Pipe::Pipe(int)>
c0012262:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0012265:	e8 4c 6f ff ff       	call   c00091b6 <UnixFile::getFileDescriptor()>
c001226a:	89 07                	mov    DWORD PTR [edi],eax
c001226c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001226f:	e8 42 6f ff ff       	call   c00091b6 <UnixFile::getFileDescriptor()>
c0012274:	83 c4 10             	add    esp,0x10
c0012277:	89 06                	mov    DWORD PTR [esi],eax
c0012279:	31 d2                	xor    edx,edx
c001227b:	5b                   	pop    ebx
c001227c:	31 c0                	xor    eax,eax
c001227e:	5e                   	pop    esi
c001227f:	5f                   	pop    edi
c0012280:	c3                   	ret    

c0012281 <SysGetUnixTime(regs*)>:
c0012281:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0012286:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001228c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012290:	e9 a1 9e ff ff       	jmp    c000c136 <Clock::timeInSecondsLocal()>

c0012295 <string_ends_with(char const*, char const*)>:
c0012295:	57                   	push   edi
c0012296:	56                   	push   esi
c0012297:	53                   	push   ebx
c0012298:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001229c:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00122a0:	83 ec 0c             	sub    esp,0xc
c00122a3:	53                   	push   ebx
c00122a4:	e8 c7 e2 fe ff       	call   c0000570 <strlen>
c00122a9:	89 3c 24             	mov    DWORD PTR [esp],edi
c00122ac:	89 c6                	mov    esi,eax
c00122ae:	e8 bd e2 fe ff       	call   c0000570 <strlen>
c00122b3:	83 c4 10             	add    esp,0x10
c00122b6:	39 c6                	cmp    esi,eax
c00122b8:	7d 06                	jge    c00122c0 <string_ends_with(char const*, char const*)+0x2b>
c00122ba:	5b                   	pop    ebx
c00122bb:	31 c0                	xor    eax,eax
c00122bd:	5e                   	pop    esi
c00122be:	5f                   	pop    edi
c00122bf:	c3                   	ret    
c00122c0:	83 ec 08             	sub    esp,0x8
c00122c3:	29 c6                	sub    esi,eax
c00122c5:	57                   	push   edi
c00122c6:	01 f3                	add    ebx,esi
c00122c8:	53                   	push   ebx
c00122c9:	e8 82 e4 fe ff       	call   c0000750 <strcmp>
c00122ce:	83 c4 10             	add    esp,0x10
c00122d1:	85 c0                	test   eax,eax
c00122d3:	5b                   	pop    ebx
c00122d4:	0f 94 c0             	sete   al
c00122d7:	5e                   	pop    esi
c00122d8:	0f b6 c0             	movzx  eax,al
c00122db:	5f                   	pop    edi
c00122dc:	c3                   	ret    

c00122dd <SysOpen(regs*)>:
c00122dd:	56                   	push   esi
c00122de:	53                   	push   ebx
c00122df:	81 ec 04 01 00 00    	sub    esp,0x104
c00122e5:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c00122ec:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00122ef:	85 c0                	test   eax,eax
c00122f1:	0f 84 bd 01 00 00    	je     c00124b4 <SysOpen(regs*)+0x1d7>
c00122f7:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00122fa:	85 c0                	test   eax,eax
c00122fc:	0f 84 b2 01 00 00    	je     c00124b4 <SysOpen(regs*)+0x1d7>
c0012302:	83 ec 04             	sub    esp,0x4
c0012305:	68 77 1d 02 c0       	push   0xc0021d77
c001230a:	50                   	push   eax
c001230b:	8d 74 24 0c          	lea    esi,[esp+0xc]
c001230f:	56                   	push   esi
c0012310:	e8 0d 92 ff ff       	call   c000b522 <Fs::standardiseFiles(char*, char const*, char const*)>
c0012315:	89 34 24             	mov    DWORD PTR [esp],esi
c0012318:	e8 53 e2 fe ff       	call   c0000570 <strlen>
c001231d:	83 c4 10             	add    esp,0x10
c0012320:	83 e8 01             	sub    eax,0x1
c0012323:	74 21                	je     c0012346 <SysOpen(regs*)+0x69>
c0012325:	0f be 14 04          	movsx  edx,BYTE PTR [esp+eax*1]
c0012329:	eb 12                	jmp    c001233d <SysOpen(regs*)+0x60>
c001232b:	83 fa 3a             	cmp    edx,0x3a
c001232e:	74 12                	je     c0012342 <SysOpen(regs*)+0x65>
c0012330:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c0012334:	83 e8 01             	sub    eax,0x1
c0012337:	74 0d                	je     c0012346 <SysOpen(regs*)+0x69>
c0012339:	0f be 14 06          	movsx  edx,BYTE PTR [esi+eax*1]
c001233d:	83 fa 2e             	cmp    edx,0x2e
c0012340:	75 e9                	jne    c001232b <SysOpen(regs*)+0x4e>
c0012342:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c0012346:	83 ec 08             	sub    esp,0x8
c0012349:	68 7b 1d 02 c0       	push   0xc0021d7b
c001234e:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0012351:	50                   	push   eax
c0012352:	e8 3e ff ff ff       	call   c0012295 <string_ends_with(char const*, char const*)>
c0012357:	83 c4 10             	add    esp,0x10
c001235a:	85 c0                	test   eax,eax
c001235c:	74 1d                	je     c001237b <SysOpen(regs*)+0x9e>
c001235e:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0012361:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c0012367:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001236e:	81 c4 04 01 00 00    	add    esp,0x104
c0012374:	31 c0                	xor    eax,eax
c0012376:	31 d2                	xor    edx,edx
c0012378:	5b                   	pop    ebx
c0012379:	5e                   	pop    esi
c001237a:	c3                   	ret    
c001237b:	83 ec 08             	sub    esp,0x8
c001237e:	68 80 1d 02 c0       	push   0xc0021d80
c0012383:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0012386:	50                   	push   eax
c0012387:	e8 09 ff ff ff       	call   c0012295 <string_ends_with(char const*, char const*)>
c001238c:	83 c4 10             	add    esp,0x10
c001238f:	85 c0                	test   eax,eax
c0012391:	75 cb                	jne    c001235e <SysOpen(regs*)+0x81>
c0012393:	83 ec 08             	sub    esp,0x8
c0012396:	68 7c 1d 02 c0       	push   0xc0021d7c
c001239b:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001239e:	50                   	push   eax
c001239f:	e8 ac e3 fe ff       	call   c0000750 <strcmp>
c00123a4:	83 c4 10             	add    esp,0x10
c00123a7:	85 c0                	test   eax,eax
c00123a9:	74 b3                	je     c001235e <SysOpen(regs*)+0x81>
c00123ab:	83 ec 08             	sub    esp,0x8
c00123ae:	68 7b 1d 02 c0       	push   0xc0021d7b
c00123b3:	56                   	push   esi
c00123b4:	e8 dc fe ff ff       	call   c0012295 <string_ends_with(char const*, char const*)>
c00123b9:	83 c4 10             	add    esp,0x10
c00123bc:	85 c0                	test   eax,eax
c00123be:	75 9e                	jne    c001235e <SysOpen(regs*)+0x81>
c00123c0:	83 ec 08             	sub    esp,0x8
c00123c3:	68 85 1d 02 c0       	push   0xc0021d85
c00123c8:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00123cb:	50                   	push   eax
c00123cc:	e8 c4 fe ff ff       	call   c0012295 <string_ends_with(char const*, char const*)>
c00123d1:	83 c4 10             	add    esp,0x10
c00123d4:	85 c0                	test   eax,eax
c00123d6:	0f 85 eb 00 00 00    	jne    c00124c7 <SysOpen(regs*)+0x1ea>
c00123dc:	83 ec 08             	sub    esp,0x8
c00123df:	68 8a 1d 02 c0       	push   0xc0021d8a
c00123e4:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00123e7:	50                   	push   eax
c00123e8:	e8 a8 fe ff ff       	call   c0012295 <string_ends_with(char const*, char const*)>
c00123ed:	83 c4 10             	add    esp,0x10
c00123f0:	85 c0                	test   eax,eax
c00123f2:	0f 85 cf 00 00 00    	jne    c00124c7 <SysOpen(regs*)+0x1ea>
c00123f8:	83 ec 08             	sub    esp,0x8
c00123fb:	68 86 1d 02 c0       	push   0xc0021d86
c0012400:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c0012403:	51                   	push   ecx
c0012404:	e8 47 e3 fe ff       	call   c0000750 <strcmp>
c0012409:	83 c4 10             	add    esp,0x10
c001240c:	85 c0                	test   eax,eax
c001240e:	0f 84 b3 00 00 00    	je     c00124c7 <SysOpen(regs*)+0x1ea>
c0012414:	83 ec 08             	sub    esp,0x8
c0012417:	68 85 1d 02 c0       	push   0xc0021d85
c001241c:	56                   	push   esi
c001241d:	e8 73 fe ff ff       	call   c0012295 <string_ends_with(char const*, char const*)>
c0012422:	83 c4 10             	add    esp,0x10
c0012425:	85 c0                	test   eax,eax
c0012427:	0f 85 9a 00 00 00    	jne    c00124c7 <SysOpen(regs*)+0x1ea>
c001242d:	83 ec 0c             	sub    esp,0xc
c0012430:	68 14 01 00 00       	push   0x114
c0012435:	e8 7c 56 ff ff       	call   c0007ab6 <malloc>
c001243a:	83 c4 0c             	add    esp,0xc
c001243d:	89 c6                	mov    esi,eax
c001243f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012444:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0012447:	50                   	push   eax
c0012448:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c001244b:	52                   	push   edx
c001244c:	56                   	push   esi
c001244d:	e8 86 92 ff ff       	call   c000b6d8 <File::File(char const*, Process*)>
c0012452:	83 c4 10             	add    esp,0x10
c0012455:	85 f6                	test   esi,esi
c0012457:	74 5b                	je     c00124b4 <SysOpen(regs*)+0x1d7>
c0012459:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c001245c:	0f b6 c2             	movzx  eax,dl
c001245f:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c0012462:	89 d0                	mov    eax,edx
c0012464:	83 e0 01             	and    eax,0x1
c0012467:	f6 c2 02             	test   dl,0x2
c001246a:	74 03                	je     c001246f <SysOpen(regs*)+0x192>
c001246c:	83 c8 02             	or     eax,0x2
c001246f:	f6 c2 04             	test   dl,0x4
c0012472:	74 03                	je     c0012477 <SysOpen(regs*)+0x19a>
c0012474:	83 c8 04             	or     eax,0x4
c0012477:	f6 c2 08             	test   dl,0x8
c001247a:	74 03                	je     c001247f <SysOpen(regs*)+0x1a2>
c001247c:	83 c8 0a             	or     eax,0xa
c001247f:	80 e2 10             	and    dl,0x10
c0012482:	74 03                	je     c0012487 <SysOpen(regs*)+0x1aa>
c0012484:	83 c8 12             	or     eax,0x12
c0012487:	83 ec 08             	sub    esp,0x8
c001248a:	50                   	push   eax
c001248b:	56                   	push   esi
c001248c:	e8 03 93 ff ff       	call   c000b794 <File::open(FileOpenMode)>
c0012491:	83 c4 10             	add    esp,0x10
c0012494:	85 c0                	test   eax,eax
c0012496:	75 1c                	jne    c00124b4 <SysOpen(regs*)+0x1d7>
c0012498:	83 ec 0c             	sub    esp,0xc
c001249b:	56                   	push   esi
c001249c:	e8 15 6d ff ff       	call   c00091b6 <UnixFile::getFileDescriptor()>
c00124a1:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00124a4:	83 c4 10             	add    esp,0x10
c00124a7:	89 02                	mov    DWORD PTR [edx],eax
c00124a9:	c1 f8 1f             	sar    eax,0x1f
c00124ac:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00124af:	e9 ba fe ff ff       	jmp    c001236e <SysOpen(regs*)+0x91>
c00124b4:	81 c4 04 01 00 00    	add    esp,0x104
c00124ba:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00124bf:	ba ff ff ff ff       	mov    edx,0xffffffff
c00124c4:	5b                   	pop    ebx
c00124c5:	5e                   	pop    esi
c00124c6:	c3                   	ret    
c00124c7:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00124ca:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c00124d0:	e9 92 fe ff ff       	jmp    c0012367 <SysOpen(regs*)+0x8a>

c00124d5 <KeSystemCall(regs*, void*)>:
c00124d5:	53                   	push   ebx
c00124d6:	83 ec 08             	sub    esp,0x8
c00124d9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00124dd:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00124e0:	83 f8 3b             	cmp    eax,0x3b
c00124e3:	77 16                	ja     c00124fb <KeSystemCall(regs*, void*)+0x26>
c00124e5:	8b 14 85 a0 31 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdce60]
c00124ec:	85 d2                	test   edx,edx
c00124ee:	74 0b                	je     c00124fb <KeSystemCall(regs*, void*)+0x26>
c00124f0:	83 ec 0c             	sub    esp,0xc
c00124f3:	53                   	push   ebx
c00124f4:	ff d2                	call   edx
c00124f6:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00124f9:	eb 0d                	jmp    c0012508 <KeSystemCall(regs*, void*)+0x33>
c00124fb:	52                   	push   edx
c00124fc:	52                   	push   edx
c00124fd:	50                   	push   eax
c00124fe:	68 8f 1d 02 c0       	push   0xc0021d8f
c0012503:	e8 3d 84 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0012508:	83 c4 10             	add    esp,0x10
c001250b:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0012510:	31 d2                	xor    edx,edx
c0012512:	83 c4 08             	add    esp,0x8
c0012515:	5b                   	pop    ebx
c0012516:	c3                   	ret    
c0012517:	90                   	nop

c0012518 <KeSwitchEndian16(unsigned short)>:
c0012518:	83 ec 04             	sub    esp,0x4
c001251b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001251f:	66 89 04 24          	mov    WORD PTR [esp],ax
c0012523:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0012527:	c1 f8 08             	sar    eax,0x8
c001252a:	89 c2                	mov    edx,eax
c001252c:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0012530:	c1 e0 08             	shl    eax,0x8
c0012533:	09 d0                	or     eax,edx
c0012535:	83 c4 04             	add    esp,0x4
c0012538:	c3                   	ret    
c0012539:	8d 76 00             	lea    esi,[esi+0x0]

c001253c <KeSwitchEndian32(unsigned int)>:
c001253c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012540:	c1 e8 18             	shr    eax,0x18
c0012543:	89 c2                	mov    edx,eax
c0012545:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012549:	c1 e0 08             	shl    eax,0x8
c001254c:	25 00 00 ff 00       	and    eax,0xff0000
c0012551:	09 c2                	or     edx,eax
c0012553:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012557:	c1 e8 08             	shr    eax,0x8
c001255a:	25 00 ff 00 00       	and    eax,0xff00
c001255f:	09 c2                	or     edx,eax
c0012561:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012565:	c1 e0 18             	shl    eax,0x18
c0012568:	09 d0                	or     eax,edx
c001256a:	c3                   	ret    
c001256b:	90                   	nop

c001256c <EthernetCRC32(unsigned char*, int)>:
c001256c:	83 ec 10             	sub    esp,0x10
c001256f:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0012574:	75 0a                	jne    c0012580 <EthernetCRC32(unsigned char*, int)+0x14>
c0012576:	b8 00 00 00 00       	mov    eax,0x0
c001257b:	e9 8c 00 00 00       	jmp    c001260c <EthernetCRC32(unsigned char*, int)+0xa0>
c0012580:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0012585:	7f 09                	jg     c0012590 <EthernetCRC32(unsigned char*, int)+0x24>
c0012587:	b8 00 00 00 00       	mov    eax,0x0
c001258c:	eb 7e                	jmp    c001260c <EthernetCRC32(unsigned char*, int)+0xa0>
c001258e:	66 90                	xchg   ax,ax
c0012590:	c7 44 24 04 ff ff ff ff 	mov    DWORD PTR [esp+0x4],0xffffffff
c0012598:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00125a0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00125a4:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c00125a8:	7d 5a                	jge    c0012604 <EthernetCRC32(unsigned char*, int)+0x98>
c00125aa:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00125ae:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00125b2:	01 d0                	add    eax,edx
c00125b4:	8a 00                	mov    al,BYTE PTR [eax]
c00125b6:	0f b6 c0             	movzx  eax,al
c00125b9:	31 44 24 04          	xor    DWORD PTR [esp+0x4],eax
c00125bd:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00125c5:	8d 76 00             	lea    esi,[esi+0x0]
c00125c8:	83 7c 24 0c 07       	cmp    DWORD PTR [esp+0xc],0x7
c00125cd:	7f 2d                	jg     c00125fc <EthernetCRC32(unsigned char*, int)+0x90>
c00125cf:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00125d3:	83 e0 01             	and    eax,0x1
c00125d6:	74 10                	je     c00125e8 <EthernetCRC32(unsigned char*, int)+0x7c>
c00125d8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00125dc:	d1 e8                	shr    eax,1
c00125de:	35 20 83 b8 ed       	xor    eax,0xedb88320
c00125e3:	eb 0b                	jmp    c00125f0 <EthernetCRC32(unsigned char*, int)+0x84>
c00125e5:	8d 76 00             	lea    esi,[esi+0x0]
c00125e8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00125ec:	d1 e8                	shr    eax,1
c00125ee:	66 90                	xchg   ax,ax
c00125f0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00125f4:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c00125f9:	eb cd                	jmp    c00125c8 <EthernetCRC32(unsigned char*, int)+0x5c>
c00125fb:	90                   	nop
c00125fc:	83 44 24 08 01       	add    DWORD PTR [esp+0x8],0x1
c0012601:	eb 9d                	jmp    c00125a0 <EthernetCRC32(unsigned char*, int)+0x34>
c0012603:	90                   	nop
c0012604:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012608:	f7 d0                	not    eax
c001260a:	66 90                	xchg   ax,ax
c001260c:	83 c4 10             	add    esp,0x10
c001260f:	c3                   	ret    

c0012610 <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)>:
c0012610:	83 ec 2c             	sub    esp,0x2c
c0012613:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012617:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c001261c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012620:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0012624:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012628:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001262b:	0f b7 c0             	movzx  eax,ax
c001262e:	3d 06 08 00 00       	cmp    eax,0x806
c0012633:	75 13                	jne    c0012648 <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)+0x38>
c0012635:	83 ec 0c             	sub    esp,0xc
c0012638:	68 a3 1d 02 c0       	push   0xc0021da3
c001263d:	e8 03 83 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0012642:	83 c4 10             	add    esp,0x10
c0012645:	eb 25                	jmp    c001266c <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)+0x5c>
c0012647:	90                   	nop
c0012648:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001264c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001264f:	0f b7 c0             	movzx  eax,ax
c0012652:	3d 00 08 00 00       	cmp    eax,0x800
c0012657:	75 13                	jne    c001266c <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)+0x5c>
c0012659:	83 ec 0c             	sub    esp,0xc
c001265c:	68 b9 1d 02 c0       	push   0xc0021db9
c0012661:	e8 df 82 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0012666:	83 c4 10             	add    esp,0x10
c0012669:	8d 76 00             	lea    esi,[esi+0x0]
c001266c:	90                   	nop
c001266d:	83 c4 2c             	add    esp,0x2c
c0012670:	c3                   	ret    

c0012671 <CmOpen(char const*)>:
c0012671:	57                   	push   edi
c0012672:	56                   	push   esi
c0012673:	53                   	push   ebx
c0012674:	83 ec 1c             	sub    esp,0x1c
c0012677:	6a 30                	push   0x30
c0012679:	e8 38 54 ff ff       	call   c0007ab6 <malloc>
c001267e:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0012685:	89 c3                	mov    ebx,eax
c0012687:	e8 2a 54 ff ff       	call   c0007ab6 <malloc>
c001268c:	83 c4 0c             	add    esp,0xc
c001268f:	89 c6                	mov    esi,eax
c0012691:	ff 35 90 a4 02 c0    	push   DWORD PTR ds:0xc002a490
c0012697:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001269b:	50                   	push   eax
c001269c:	e8 37 90 ff ff       	call   c000b6d8 <File::File(char const*, Process*)>
c00126a1:	83 c4 0c             	add    esp,0xc
c00126a4:	89 33                	mov    DWORD PTR [ebx],esi
c00126a6:	8d 44 24 07          	lea    eax,[esp+0x7]
c00126aa:	50                   	push   eax
c00126ab:	8d 44 24 10          	lea    eax,[esp+0x10]
c00126af:	50                   	push   eax
c00126b0:	56                   	push   esi
c00126b1:	e8 e0 93 ff ff       	call   c000ba96 <File::stat(unsigned long long*, bool*)>
c00126b6:	5a                   	pop    edx
c00126b7:	59                   	pop    ecx
c00126b8:	6a 01                	push   0x1
c00126ba:	ff 33                	push   DWORD PTR [ebx]
c00126bc:	e8 d3 90 ff ff       	call   c000b794 <File::open(FileOpenMode)>
c00126c1:	5e                   	pop    esi
c00126c2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00126c6:	e8 eb 53 ff ff       	call   c0007ab6 <malloc>
c00126cb:	5a                   	pop    edx
c00126cc:	89 c7                	mov    edi,eax
c00126ce:	8d 74 24 10          	lea    esi,[esp+0x10]
c00126d2:	8b 03                	mov    eax,DWORD PTR [ebx]
c00126d4:	8b 10                	mov    edx,DWORD PTR [eax]
c00126d6:	56                   	push   esi
c00126d7:	57                   	push   edi
c00126d8:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00126dc:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00126e0:	50                   	push   eax
c00126e1:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00126e4:	83 c4 14             	add    esp,0x14
c00126e7:	ff 33                	push   DWORD PTR [ebx]
c00126e9:	e8 04 91 ff ff       	call   c000b7f2 <File::close()>
c00126ee:	59                   	pop    ecx
c00126ef:	58                   	pop    eax
c00126f0:	6a 13                	push   0x13
c00126f2:	ff 33                	push   DWORD PTR [ebx]
c00126f4:	e8 9b 90 ff ff       	call   c000b794 <File::open(FileOpenMode)>
c00126f9:	8b 03                	mov    eax,DWORD PTR [ebx]
c00126fb:	8b 10                	mov    edx,DWORD PTR [eax]
c00126fd:	89 34 24             	mov    DWORD PTR [esp],esi
c0012700:	57                   	push   edi
c0012701:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0012705:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0012709:	50                   	push   eax
c001270a:	ff 52 10             	call   DWORD PTR [edx+0x10]
c001270d:	83 c4 14             	add    esp,0x14
c0012710:	57                   	push   edi
c0012711:	e8 b0 53 ff ff       	call   c0007ac6 <free>
c0012716:	83 c4 10             	add    esp,0x10
c0012719:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c001271c:	75 10                	jne    c001272e <CmOpen(char const*)+0xbd>
c001271e:	83 ec 0c             	sub    esp,0xc
c0012721:	68 ce 1d 02 c0       	push   0xc0021dce
c0012726:	e8 c2 ea ff ff       	call   c00111ed <KePanic(char const*)>
c001272b:	83 c4 10             	add    esp,0x10
c001272e:	8d 7b 05             	lea    edi,[ebx+0x5]
c0012731:	50                   	push   eax
c0012732:	6a 00                	push   0x0
c0012734:	6a 00                	push   0x0
c0012736:	ff 33                	push   DWORD PTR [ebx]
c0012738:	e8 15 91 ff ff       	call   c000b852 <File::seek(unsigned long long)>
c001273d:	8b 03                	mov    eax,DWORD PTR [ebx]
c001273f:	8b 10                	mov    edx,DWORD PTR [eax]
c0012741:	89 34 24             	mov    DWORD PTR [esp],esi
c0012744:	57                   	push   edi
c0012745:	6a 00                	push   0x0
c0012747:	6a 2b                	push   0x2b
c0012749:	50                   	push   eax
c001274a:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001274d:	83 c4 1c             	add    esp,0x1c
c0012750:	6a 00                	push   0x0
c0012752:	6a 00                	push   0x0
c0012754:	ff 33                	push   DWORD PTR [ebx]
c0012756:	e8 f7 90 ff ff       	call   c000b852 <File::seek(unsigned long long)>
c001275b:	83 c4 0c             	add    esp,0xc
c001275e:	6a 08                	push   0x8
c0012760:	68 df 1d 02 c0       	push   0xc0021ddf
c0012765:	57                   	push   edi
c0012766:	e8 15 dc fe ff       	call   c0000380 <memcmp>
c001276b:	83 c4 10             	add    esp,0x10
c001276e:	85 c0                	test   eax,eax
c0012770:	74 10                	je     c0012782 <CmOpen(char const*)+0x111>
c0012772:	83 ec 0c             	sub    esp,0xc
c0012775:	68 e8 1d 02 c0       	push   0xc0021de8
c001277a:	e8 6e ea ff ff       	call   c00111ed <KePanic(char const*)>
c001277f:	83 c4 10             	add    esp,0x10
c0012782:	c6 43 04 01          	mov    BYTE PTR [ebx+0x4],0x1
c0012786:	89 d8                	mov    eax,ebx
c0012788:	83 c4 10             	add    esp,0x10
c001278b:	5b                   	pop    ebx
c001278c:	5e                   	pop    esi
c001278d:	5f                   	pop    edi
c001278e:	c3                   	ret    

c001278f <CmClose(Reghive_Tag*)>:
c001278f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012793:	80 78 04 00          	cmp    BYTE PTR [eax+0x4],0x0
c0012797:	74 0b                	je     c00127a4 <CmClose(Reghive_Tag*)+0x15>
c0012799:	8b 00                	mov    eax,DWORD PTR [eax]
c001279b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001279f:	e9 4e 90 ff ff       	jmp    c000b7f2 <File::close()>
c00127a4:	c3                   	ret    

c00127a5 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>:
c00127a5:	53                   	push   ebx
c00127a6:	83 ec 18             	sub    esp,0x18
c00127a9:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00127ad:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c00127b1:	74 29                	je     c00127dc <CmReadExtent(Reghive_Tag*, int, unsigned char*)+0x37>
c00127b3:	50                   	push   eax
c00127b4:	6b 44 24 28 2b       	imul   eax,DWORD PTR [esp+0x28],0x2b
c00127b9:	99                   	cdq    
c00127ba:	52                   	push   edx
c00127bb:	50                   	push   eax
c00127bc:	ff 33                	push   DWORD PTR [ebx]
c00127be:	e8 8f 90 ff ff       	call   c000b852 <File::seek(unsigned long long)>
c00127c3:	5a                   	pop    edx
c00127c4:	8b 03                	mov    eax,DWORD PTR [ebx]
c00127c6:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c00127ca:	8b 10                	mov    edx,DWORD PTR [eax]
c00127cc:	51                   	push   ecx
c00127cd:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c00127d1:	6a 00                	push   0x0
c00127d3:	6a 2b                	push   0x2b
c00127d5:	50                   	push   eax
c00127d6:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00127d9:	83 c4 20             	add    esp,0x20
c00127dc:	83 c4 18             	add    esp,0x18
c00127df:	5b                   	pop    ebx
c00127e0:	c3                   	ret    

c00127e1 <CmGetString(Reghive_Tag*, int, char*)>:
c00127e1:	55                   	push   ebp
c00127e2:	57                   	push   edi
c00127e3:	56                   	push   esi
c00127e4:	53                   	push   ebx
c00127e5:	31 db                	xor    ebx,ebx
c00127e7:	83 ec 70             	sub    esp,0x70
c00127ea:	8b ac 24 84 00 00 00 	mov    ebp,DWORD PTR [esp+0x84]
c00127f1:	8d 44 24 0e          	lea    eax,[esp+0xe]
c00127f5:	50                   	push   eax
c00127f6:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c00127fd:	55                   	push   ebp
c00127fe:	e8 a2 ff ff ff       	call   c00127a5 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012803:	83 c4 10             	add    esp,0x10
c0012806:	0f b6 44 1c 22       	movzx  eax,BYTE PTR [esp+ebx*1+0x22]
c001280b:	c1 e0 08             	shl    eax,0x8
c001280e:	89 c2                	mov    edx,eax
c0012810:	0f b6 44 1c 21       	movzx  eax,BYTE PTR [esp+ebx*1+0x21]
c0012815:	09 d0                	or     eax,edx
c0012817:	0f b6 54 1c 20       	movzx  edx,BYTE PTR [esp+ebx*1+0x20]
c001281c:	c1 e0 08             	shl    eax,0x8
c001281f:	09 d0                	or     eax,edx
c0012821:	74 25                	je     c0012848 <CmGetString(Reghive_Tag*, int, char*)+0x67>
c0012823:	6b fb 0d             	imul   edi,ebx,0xd
c0012826:	52                   	push   edx
c0012827:	8d 54 24 39          	lea    edx,[esp+0x39]
c001282b:	52                   	push   edx
c001282c:	50                   	push   eax
c001282d:	55                   	push   ebp
c001282e:	e8 72 ff ff ff       	call   c00127a5 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012833:	8d 74 24 49          	lea    esi,[esp+0x49]
c0012837:	03 bc 24 98 00 00 00 	add    edi,DWORD PTR [esp+0x98]
c001283e:	b9 27 00 00 00       	mov    ecx,0x27
c0012843:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0012845:	83 c4 10             	add    esp,0x10
c0012848:	83 c3 03             	add    ebx,0x3
c001284b:	83 fb 15             	cmp    ebx,0x15
c001284e:	75 b6                	jne    c0012806 <CmGetString(Reghive_Tag*, int, char*)+0x25>
c0012850:	83 c4 6c             	add    esp,0x6c
c0012853:	5b                   	pop    ebx
c0012854:	5e                   	pop    esi
c0012855:	5f                   	pop    edi
c0012856:	5d                   	pop    ebp
c0012857:	c3                   	ret    

c0012858 <CmEnterDirectory(Reghive_Tag*, int)>:
c0012858:	83 ec 40             	sub    esp,0x40
c001285b:	8d 44 24 09          	lea    eax,[esp+0x9]
c001285f:	50                   	push   eax
c0012860:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012864:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012868:	e8 38 ff ff ff       	call   c00127a5 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c001286d:	83 c4 10             	add    esp,0x10
c0012870:	83 c8 ff             	or     eax,0xffffffff
c0012873:	80 7c 24 05 4e       	cmp    BYTE PTR [esp+0x5],0x4e
c0012878:	75 19                	jne    c0012893 <CmEnterDirectory(Reghive_Tag*, int)+0x3b>
c001287a:	0f b6 54 24 1b       	movzx  edx,BYTE PTR [esp+0x1b]
c001287f:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0012884:	c1 e0 08             	shl    eax,0x8
c0012887:	09 c2                	or     edx,eax
c0012889:	0f b6 44 24 1d       	movzx  eax,BYTE PTR [esp+0x1d]
c001288e:	c1 e0 10             	shl    eax,0x10
c0012891:	09 d0                	or     eax,edx
c0012893:	83 c4 3c             	add    esp,0x3c
c0012896:	c3                   	ret    

c0012897 <CmGetNext(Reghive_Tag*, int)>:
c0012897:	83 ec 40             	sub    esp,0x40
c001289a:	8d 44 24 09          	lea    eax,[esp+0x9]
c001289e:	50                   	push   eax
c001289f:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00128a3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00128a7:	e8 f9 fe ff ff       	call   c00127a5 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c00128ac:	0f b6 54 24 16       	movzx  edx,BYTE PTR [esp+0x16]
c00128b1:	0f b6 44 24 17       	movzx  eax,BYTE PTR [esp+0x17]
c00128b6:	c1 e0 08             	shl    eax,0x8
c00128b9:	09 c2                	or     edx,eax
c00128bb:	0f b6 44 24 18       	movzx  eax,BYTE PTR [esp+0x18]
c00128c0:	83 c4 4c             	add    esp,0x4c
c00128c3:	c1 e0 10             	shl    eax,0x10
c00128c6:	09 d0                	or     eax,edx
c00128c8:	c3                   	ret    

c00128c9 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>:
c00128c9:	53                   	push   ebx
c00128ca:	83 ec 18             	sub    esp,0x18
c00128cd:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00128d1:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c00128d5:	74 29                	je     c0012900 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)+0x37>
c00128d7:	50                   	push   eax
c00128d8:	6b 44 24 28 2b       	imul   eax,DWORD PTR [esp+0x28],0x2b
c00128dd:	99                   	cdq    
c00128de:	52                   	push   edx
c00128df:	50                   	push   eax
c00128e0:	ff 33                	push   DWORD PTR [ebx]
c00128e2:	e8 6b 8f ff ff       	call   c000b852 <File::seek(unsigned long long)>
c00128e7:	5a                   	pop    edx
c00128e8:	8b 03                	mov    eax,DWORD PTR [ebx]
c00128ea:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c00128ee:	8b 10                	mov    edx,DWORD PTR [eax]
c00128f0:	51                   	push   ecx
c00128f1:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c00128f5:	6a 00                	push   0x0
c00128f7:	6a 2b                	push   0x2b
c00128f9:	50                   	push   eax
c00128fa:	ff 52 10             	call   DWORD PTR [edx+0x10]
c00128fd:	83 c4 20             	add    esp,0x20
c0012900:	83 c4 18             	add    esp,0x18
c0012903:	5b                   	pop    ebx
c0012904:	c3                   	ret    

c0012905 <CmFreeExtent(Reghive_Tag*, int)>:
c0012905:	53                   	push   ebx
c0012906:	83 ec 3c             	sub    esp,0x3c
c0012909:	6a 2b                	push   0x2b
c001290b:	6a 00                	push   0x0
c001290d:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c0012911:	53                   	push   ebx
c0012912:	e8 d9 db fe ff       	call   c00004f0 <memset>
c0012917:	83 c4 0c             	add    esp,0xc
c001291a:	53                   	push   ebx
c001291b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001291f:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012923:	e8 a1 ff ff ff       	call   c00128c9 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0012928:	83 c4 48             	add    esp,0x48
c001292b:	5b                   	pop    ebx
c001292c:	c3                   	ret    

c001292d <CmUpdateHeader(Reghive_Tag*)>:
c001292d:	83 ec 0c             	sub    esp,0xc
c0012930:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012934:	80 78 04 00          	cmp    BYTE PTR [eax+0x4],0x0
c0012938:	74 10                	je     c001294a <CmUpdateHeader(Reghive_Tag*)+0x1d>
c001293a:	52                   	push   edx
c001293b:	8d 50 05             	lea    edx,[eax+0x5]
c001293e:	52                   	push   edx
c001293f:	6a 00                	push   0x0
c0012941:	50                   	push   eax
c0012942:	e8 82 ff ff ff       	call   c00128c9 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0012947:	83 c4 10             	add    esp,0x10
c001294a:	83 c4 0c             	add    esp,0xc
c001294d:	c3                   	ret    

c001294e <CmExpand(Reghive_Tag*, int)>:
c001294e:	57                   	push   edi
c001294f:	56                   	push   esi
c0012950:	83 ce ff             	or     esi,0xffffffff
c0012953:	53                   	push   ebx
c0012954:	83 ec 30             	sub    esp,0x30
c0012957:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001295b:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c001295f:	74 5f                	je     c00129c0 <CmExpand(Reghive_Tag*, int)+0x72>
c0012961:	31 d2                	xor    edx,edx
c0012963:	31 f6                	xor    esi,esi
c0012965:	50                   	push   eax
c0012966:	6b 43 0d 2b          	imul   eax,DWORD PTR [ebx+0xd],0x2b
c001296a:	52                   	push   edx
c001296b:	50                   	push   eax
c001296c:	ff 33                	push   DWORD PTR [ebx]
c001296e:	e8 df 8e ff ff       	call   c000b852 <File::seek(unsigned long long)>
c0012973:	83 c4 0c             	add    esp,0xc
c0012976:	6a 2b                	push   0x2b
c0012978:	6a 00                	push   0x0
c001297a:	8d 7c 24 11          	lea    edi,[esp+0x11]
c001297e:	57                   	push   edi
c001297f:	e8 6c db fe ff       	call   c00004f0 <memset>
c0012984:	83 c4 10             	add    esp,0x10
c0012987:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c001298b:	7d 1b                	jge    c00129a8 <CmExpand(Reghive_Tag*, int)+0x5a>
c001298d:	83 ec 0c             	sub    esp,0xc
c0012990:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012992:	8d 4c 24 0c          	lea    ecx,[esp+0xc]
c0012996:	8b 10                	mov    edx,DWORD PTR [eax]
c0012998:	46                   	inc    esi
c0012999:	51                   	push   ecx
c001299a:	57                   	push   edi
c001299b:	6a 00                	push   0x0
c001299d:	6a 2b                	push   0x2b
c001299f:	50                   	push   eax
c00129a0:	ff 52 10             	call   DWORD PTR [edx+0x10]
c00129a3:	83 c4 20             	add    esp,0x20
c00129a6:	eb df                	jmp    c0012987 <CmExpand(Reghive_Tag*, int)+0x39>
c00129a8:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00129ac:	8b 73 0d             	mov    esi,DWORD PTR [ebx+0xd]
c00129af:	83 ec 0c             	sub    esp,0xc
c00129b2:	01 f2                	add    edx,esi
c00129b4:	89 53 0d             	mov    DWORD PTR [ebx+0xd],edx
c00129b7:	53                   	push   ebx
c00129b8:	e8 70 ff ff ff       	call   c001292d <CmUpdateHeader(Reghive_Tag*)>
c00129bd:	83 c4 10             	add    esp,0x10
c00129c0:	83 c4 30             	add    esp,0x30
c00129c3:	89 f0                	mov    eax,esi
c00129c5:	5b                   	pop    ebx
c00129c6:	5e                   	pop    esi
c00129c7:	5f                   	pop    edi
c00129c8:	c3                   	ret    

c00129c9 <CmFindUnusedExtent(Reghive_Tag*)>:
c00129c9:	55                   	push   ebp
c00129ca:	57                   	push   edi
c00129cb:	56                   	push   esi
c00129cc:	53                   	push   ebx
c00129cd:	83 cb ff             	or     ebx,0xffffffff
c00129d0:	83 ec 1c             	sub    esp,0x1c
c00129d3:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00129d7:	80 7d 04 00          	cmp    BYTE PTR [ebp+0x4],0x0
c00129db:	74 68                	je     c0012a45 <CmFindUnusedExtent(Reghive_Tag*)+0x7c>
c00129dd:	be 2b 00 00 00       	mov    esi,0x2b
c00129e2:	51                   	push   ecx
c00129e3:	31 ff                	xor    edi,edi
c00129e5:	6a 00                	push   0x0
c00129e7:	31 db                	xor    ebx,ebx
c00129e9:	6a 00                	push   0x0
c00129eb:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c00129ee:	e8 5f 8e ff ff       	call   c000b852 <File::seek(unsigned long long)>
c00129f3:	83 c4 10             	add    esp,0x10
c00129f6:	39 5d 0d             	cmp    DWORD PTR [ebp+0xd],ebx
c00129f9:	76 3b                	jbe    c0012a36 <CmFindUnusedExtent(Reghive_Tag*)+0x6d>
c00129fb:	83 ec 0c             	sub    esp,0xc
c00129fe:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012a01:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0012a05:	8b 10                	mov    edx,DWORD PTR [eax]
c0012a07:	51                   	push   ecx
c0012a08:	8d 4c 24 1b          	lea    ecx,[esp+0x1b]
c0012a0c:	51                   	push   ecx
c0012a0d:	6a 00                	push   0x0
c0012a0f:	6a 01                	push   0x1
c0012a11:	50                   	push   eax
c0012a12:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0012a15:	83 c4 20             	add    esp,0x20
c0012a18:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0012a1d:	74 26                	je     c0012a45 <CmFindUnusedExtent(Reghive_Tag*)+0x7c>
c0012a1f:	43                   	inc    ebx
c0012a20:	52                   	push   edx
c0012a21:	57                   	push   edi
c0012a22:	56                   	push   esi
c0012a23:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c0012a26:	e8 27 8e ff ff       	call   c000b852 <File::seek(unsigned long long)>
c0012a2b:	83 c6 2b             	add    esi,0x2b
c0012a2e:	83 d7 00             	adc    edi,0x0
c0012a31:	83 c4 10             	add    esp,0x10
c0012a34:	eb c0                	jmp    c00129f6 <CmFindUnusedExtent(Reghive_Tag*)+0x2d>
c0012a36:	50                   	push   eax
c0012a37:	50                   	push   eax
c0012a38:	6a 40                	push   0x40
c0012a3a:	55                   	push   ebp
c0012a3b:	e8 0e ff ff ff       	call   c001294e <CmExpand(Reghive_Tag*, int)>
c0012a40:	83 c4 10             	add    esp,0x10
c0012a43:	89 c3                	mov    ebx,eax
c0012a45:	83 c4 1c             	add    esp,0x1c
c0012a48:	89 d8                	mov    eax,ebx
c0012a4a:	5b                   	pop    ebx
c0012a4b:	5e                   	pop    esi
c0012a4c:	5f                   	pop    edi
c0012a4d:	5d                   	pop    ebp
c0012a4e:	c3                   	ret    

c0012a4f <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>:
c0012a4f:	55                   	push   ebp
c0012a50:	57                   	push   edi
c0012a51:	56                   	push   esi
c0012a52:	53                   	push   ebx
c0012a53:	81 ec 88 00 00 00    	sub    esp,0x88
c0012a59:	8b 9c 24 a0 00 00 00 	mov    ebx,DWORD PTR [esp+0xa0]
c0012a60:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0012a67:	e8 5d ff ff ff       	call   c00129c9 <CmFindUnusedExtent(Reghive_Tag*)>
c0012a6c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0012a70:	83 c4 0c             	add    esp,0xc
c0012a73:	6a 2b                	push   0x2b
c0012a75:	6a 00                	push   0x0
c0012a77:	8d 6c 24 26          	lea    ebp,[esp+0x26]
c0012a7b:	55                   	push   ebp
c0012a7c:	e8 6f da fe ff       	call   c00004f0 <memset>
c0012a81:	83 c4 10             	add    esp,0x10
c0012a84:	85 db                	test   ebx,ebx
c0012a86:	74 12                	je     c0012a9a <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x4b>
c0012a88:	51                   	push   ecx
c0012a89:	55                   	push   ebp
c0012a8a:	53                   	push   ebx
c0012a8b:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0012a92:	e8 0e fd ff ff       	call   c00127a5 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012a97:	83 c4 10             	add    esp,0x10
c0012a9a:	8d 7c 24 45          	lea    edi,[esp+0x45]
c0012a9e:	8b b4 24 9c 00 00 00 	mov    esi,DWORD PTR [esp+0x9c]
c0012aa5:	b9 2b 00 00 00       	mov    ecx,0x2b
c0012aaa:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0012aac:	85 db                	test   ebx,ebx
c0012aae:	74 49                	je     c0012af9 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xaa>
c0012ab0:	0f b6 4c 24 1b       	movzx  ecx,BYTE PTR [esp+0x1b]
c0012ab5:	0f b7 44 24 1c       	movzx  eax,WORD PTR [esp+0x1c]
c0012aba:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0012abe:	c1 e0 08             	shl    eax,0x8
c0012ac1:	81 e2 ff ff ff 00    	and    edx,0xffffff
c0012ac7:	09 c8                	or     eax,ecx
c0012ac9:	74 11                	je     c0012adc <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x8d>
c0012acb:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c0012acf:	88 64 24 47          	mov    BYTE PTR [esp+0x47],ah
c0012ad3:	c1 e8 10             	shr    eax,0x10
c0012ad6:	88 44 24 48          	mov    BYTE PTR [esp+0x48],al
c0012ada:	eb 0f                	jmp    c0012aeb <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x9c>
c0012adc:	c6 44 24 46 00       	mov    BYTE PTR [esp+0x46],0x0
c0012ae1:	c6 44 24 47 00       	mov    BYTE PTR [esp+0x47],0x0
c0012ae6:	c6 44 24 48 00       	mov    BYTE PTR [esp+0x48],0x0
c0012aeb:	88 54 24 1b          	mov    BYTE PTR [esp+0x1b],dl
c0012aef:	c1 ea 08             	shr    edx,0x8
c0012af2:	66 89 54 24 1c       	mov    WORD PTR [esp+0x1c],dx
c0012af7:	eb 0f                	jmp    c0012b08 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xb9>
c0012af9:	c6 44 24 46 00       	mov    BYTE PTR [esp+0x46],0x0
c0012afe:	c6 44 24 47 00       	mov    BYTE PTR [esp+0x47],0x0
c0012b03:	c6 44 24 48 00       	mov    BYTE PTR [esp+0x48],0x0
c0012b08:	52                   	push   edx
c0012b09:	8d 44 24 49          	lea    eax,[esp+0x49]
c0012b0d:	50                   	push   eax
c0012b0e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012b12:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0012b19:	e8 ab fd ff ff       	call   c00128c9 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0012b1e:	83 c4 10             	add    esp,0x10
c0012b21:	85 db                	test   ebx,ebx
c0012b23:	74 12                	je     c0012b37 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xe8>
c0012b25:	50                   	push   eax
c0012b26:	55                   	push   ebp
c0012b27:	53                   	push   ebx
c0012b28:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0012b2f:	e8 95 fd ff ff       	call   c00128c9 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0012b34:	83 c4 10             	add    esp,0x10
c0012b37:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012b3b:	83 c4 7c             	add    esp,0x7c
c0012b3e:	5b                   	pop    ebx
c0012b3f:	5e                   	pop    esi
c0012b40:	5f                   	pop    edi
c0012b41:	5d                   	pop    ebp
c0012b42:	c3                   	ret    

c0012b43 <CmSetString(Reghive_Tag*, int, char const*)>:
c0012b43:	55                   	push   ebp
c0012b44:	57                   	push   edi
c0012b45:	56                   	push   esi
c0012b46:	53                   	push   ebx
c0012b47:	bb 27 00 00 00       	mov    ebx,0x27
c0012b4c:	81 ec 88 00 00 00    	sub    esp,0x88
c0012b52:	8b b4 24 9c 00 00 00 	mov    esi,DWORD PTR [esp+0x9c]
c0012b59:	ff b4 24 a4 00 00 00 	push   DWORD PTR [esp+0xa4]
c0012b60:	e8 0b da fe ff       	call   c0000570 <strlen>
c0012b65:	8d 48 26             	lea    ecx,[eax+0x26]
c0012b68:	89 c8                	mov    eax,ecx
c0012b6a:	99                   	cdq    
c0012b6b:	f7 fb                	idiv   ebx
c0012b6d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0012b71:	83 c4 10             	add    esp,0x10
c0012b74:	81 f9 37 01 00 00    	cmp    ecx,0x137
c0012b7a:	7e 10                	jle    c0012b8c <CmSetString(Reghive_Tag*, int, char const*)+0x49>
c0012b7c:	83 ec 0c             	sub    esp,0xc
c0012b7f:	68 f9 1d 02 c0       	push   0xc0021df9
c0012b84:	e8 64 e6 ff ff       	call   c00111ed <KePanic(char const*)>
c0012b89:	83 c4 10             	add    esp,0x10
c0012b8c:	31 ff                	xor    edi,edi
c0012b8e:	50                   	push   eax
c0012b8f:	8d 5c 24 1e          	lea    ebx,[esp+0x1e]
c0012b93:	53                   	push   ebx
c0012b94:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0012b9b:	56                   	push   esi
c0012b9c:	e8 04 fc ff ff       	call   c00127a5 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012ba1:	83 c4 10             	add    esp,0x10
c0012ba4:	0f b6 53 18          	movzx  edx,BYTE PTR [ebx+0x18]
c0012ba8:	89 d0                	mov    eax,edx
c0012baa:	0f b6 53 17          	movzx  edx,BYTE PTR [ebx+0x17]
c0012bae:	c1 e0 08             	shl    eax,0x8
c0012bb1:	09 c2                	or     edx,eax
c0012bb3:	0f b6 43 16          	movzx  eax,BYTE PTR [ebx+0x16]
c0012bb7:	c1 e2 08             	shl    edx,0x8
c0012bba:	09 c2                	or     edx,eax
c0012bbc:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c0012bc0:	7e 76                	jle    c0012c38 <CmSetString(Reghive_Tag*, int, char const*)+0xf5>
c0012bc2:	85 d2                	test   edx,edx
c0012bc4:	75 25                	jne    c0012beb <CmSetString(Reghive_Tag*, int, char const*)+0xa8>
c0012bc6:	c6 44 24 45 13       	mov    BYTE PTR [esp+0x45],0x13
c0012bcb:	8d 44 24 45          	lea    eax,[esp+0x45]
c0012bcf:	50                   	push   eax
c0012bd0:	6a 00                	push   0x0
c0012bd2:	6a 00                	push   0x0
c0012bd4:	56                   	push   esi
c0012bd5:	e8 75 fe ff ff       	call   c0012a4f <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c0012bda:	83 c4 10             	add    esp,0x10
c0012bdd:	89 c2                	mov    edx,eax
c0012bdf:	88 43 16             	mov    BYTE PTR [ebx+0x16],al
c0012be2:	88 63 17             	mov    BYTE PTR [ebx+0x17],ah
c0012be5:	c1 f8 10             	sar    eax,0x10
c0012be8:	88 43 18             	mov    BYTE PTR [ebx+0x18],al
c0012beb:	55                   	push   ebp
c0012bec:	8d 6c 24 49          	lea    ebp,[esp+0x49]
c0012bf0:	55                   	push   ebp
c0012bf1:	52                   	push   edx
c0012bf2:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0012bf6:	56                   	push   esi
c0012bf7:	e8 a9 fb ff ff       	call   c00127a5 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012bfc:	83 c4 0c             	add    esp,0xc
c0012bff:	6a 27                	push   0x27
c0012c01:	6a 00                	push   0x0
c0012c03:	8d 4c 24 55          	lea    ecx,[esp+0x55]
c0012c07:	51                   	push   ecx
c0012c08:	e8 e3 d8 fe ff       	call   c00004f0 <memset>
c0012c0d:	83 c4 0c             	add    esp,0xc
c0012c10:	6b c7 27             	imul   eax,edi,0x27
c0012c13:	6a 27                	push   0x27
c0012c15:	03 84 24 a0 00 00 00 	add    eax,DWORD PTR [esp+0xa0]
c0012c1c:	50                   	push   eax
c0012c1d:	8d 4c 24 55          	lea    ecx,[esp+0x55]
c0012c21:	51                   	push   ecx
c0012c22:	e8 59 da fe ff       	call   c0000680 <strncpy>
c0012c27:	83 c4 0c             	add    esp,0xc
c0012c2a:	55                   	push   ebp
c0012c2b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0012c2f:	52                   	push   edx
c0012c30:	56                   	push   esi
c0012c31:	e8 93 fc ff ff       	call   c00128c9 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0012c36:	eb 19                	jmp    c0012c51 <CmSetString(Reghive_Tag*, int, char const*)+0x10e>
c0012c38:	85 d2                	test   edx,edx
c0012c3a:	74 18                	je     c0012c54 <CmSetString(Reghive_Tag*, int, char const*)+0x111>
c0012c3c:	51                   	push   ecx
c0012c3d:	51                   	push   ecx
c0012c3e:	52                   	push   edx
c0012c3f:	56                   	push   esi
c0012c40:	e8 c0 fc ff ff       	call   c0012905 <CmFreeExtent(Reghive_Tag*, int)>
c0012c45:	c6 43 16 00          	mov    BYTE PTR [ebx+0x16],0x0
c0012c49:	c6 43 17 00          	mov    BYTE PTR [ebx+0x17],0x0
c0012c4d:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c0012c51:	83 c4 10             	add    esp,0x10
c0012c54:	47                   	inc    edi
c0012c55:	83 c3 03             	add    ebx,0x3
c0012c58:	83 ff 07             	cmp    edi,0x7
c0012c5b:	0f 85 43 ff ff ff    	jne    c0012ba4 <CmSetString(Reghive_Tag*, int, char const*)+0x61>
c0012c61:	50                   	push   eax
c0012c62:	8d 44 24 1e          	lea    eax,[esp+0x1e]
c0012c66:	50                   	push   eax
c0012c67:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0012c6e:	56                   	push   esi
c0012c6f:	e8 55 fc ff ff       	call   c00128c9 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0012c74:	81 c4 8c 00 00 00    	add    esp,0x8c
c0012c7a:	5b                   	pop    ebx
c0012c7b:	5e                   	pop    esi
c0012c7c:	5f                   	pop    edi
c0012c7d:	5d                   	pop    ebp
c0012c7e:	c3                   	ret    

c0012c7f <CmGetMatch(char*, char*, bool, bool*)>:
c0012c7f:	56                   	push   esi
c0012c80:	53                   	push   ebx
c0012c81:	50                   	push   eax
c0012c82:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0012c86:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0012c8b:	74 25                	je     c0012cb2 <CmGetMatch(char*, char*, bool, bool*)+0x33>
c0012c8d:	c6 06 01             	mov    BYTE PTR [esi],0x1
c0012c90:	31 db                	xor    ebx,ebx
c0012c92:	50                   	push   eax
c0012c93:	50                   	push   eax
c0012c94:	8d 04 9d a0 32 02 c0 	lea    eax,[ebx*4-0x3ffdcd60]
c0012c9b:	50                   	push   eax
c0012c9c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012ca0:	e8 ab da fe ff       	call   c0000750 <strcmp>
c0012ca5:	83 c4 10             	add    esp,0x10
c0012ca8:	85 c0                	test   eax,eax
c0012caa:	74 2e                	je     c0012cda <CmGetMatch(char*, char*, bool, bool*)+0x5b>
c0012cac:	43                   	inc    ebx
c0012cad:	83 fb 3f             	cmp    ebx,0x3f
c0012cb0:	75 e0                	jne    c0012c92 <CmGetMatch(char*, char*, bool, bool*)+0x13>
c0012cb2:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0012cb5:	31 db                	xor    ebx,ebx
c0012cb7:	8d 04 9d a0 32 02 c0 	lea    eax,[ebx*4-0x3ffdcd60]
c0012cbe:	51                   	push   ecx
c0012cbf:	51                   	push   ecx
c0012cc0:	50                   	push   eax
c0012cc1:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0012cc5:	e8 86 da fe ff       	call   c0000750 <strcmp>
c0012cca:	83 c4 10             	add    esp,0x10
c0012ccd:	85 c0                	test   eax,eax
c0012ccf:	74 09                	je     c0012cda <CmGetMatch(char*, char*, bool, bool*)+0x5b>
c0012cd1:	43                   	inc    ebx
c0012cd2:	83 fb 3f             	cmp    ebx,0x3f
c0012cd5:	75 e0                	jne    c0012cb7 <CmGetMatch(char*, char*, bool, bool*)+0x38>
c0012cd7:	83 cb ff             	or     ebx,0xffffffff
c0012cda:	89 d8                	mov    eax,ebx
c0012cdc:	5a                   	pop    edx
c0012cdd:	5b                   	pop    ebx
c0012cde:	5e                   	pop    esi
c0012cdf:	c3                   	ret    

c0012ce0 <CmAddShift(unsigned int*, int*, unsigned char, int)>:
c0012ce0:	55                   	push   ebp
c0012ce1:	31 c0                	xor    eax,eax
c0012ce3:	57                   	push   edi
c0012ce4:	56                   	push   esi
c0012ce5:	53                   	push   ebx
c0012ce6:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0012cea:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0012cee:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0012cf0:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0012cf4:	8d 2c 31             	lea    ebp,[ecx+esi*1]
c0012cf7:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0012cfb:	83 fd 1f             	cmp    ebp,0x1f
c0012cfe:	7f 0b                	jg     c0012d0b <CmAddShift(unsigned int*, int*, unsigned char, int)+0x2b>
c0012d00:	0f b6 c2             	movzx  eax,dl
c0012d03:	d3 e0                	shl    eax,cl
c0012d05:	09 07                	or     DWORD PTR [edi],eax
c0012d07:	b0 01                	mov    al,0x1
c0012d09:	01 33                	add    DWORD PTR [ebx],esi
c0012d0b:	5b                   	pop    ebx
c0012d0c:	5e                   	pop    esi
c0012d0d:	5f                   	pop    edi
c0012d0e:	5d                   	pop    ebp
c0012d0f:	c3                   	ret    

c0012d10 <CmGetShift(unsigned int*, int*, int, bool*)>:
c0012d10:	57                   	push   edi
c0012d11:	56                   	push   esi
c0012d12:	53                   	push   ebx
c0012d13:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0012d17:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0012d1b:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0012d1f:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0012d23:	39 0b                	cmp    DWORD PTR [ebx],ecx
c0012d25:	7c 17                	jl     c0012d3e <CmGetShift(unsigned int*, int*, int, bool*)+0x2e>
c0012d27:	8b 17                	mov    edx,DWORD PTR [edi]
c0012d29:	b8 01 00 00 00       	mov    eax,0x1
c0012d2e:	d3 e0                	shl    eax,cl
c0012d30:	48                   	dec    eax
c0012d31:	21 d0                	and    eax,edx
c0012d33:	d3 ea                	shr    edx,cl
c0012d35:	89 17                	mov    DWORD PTR [edi],edx
c0012d37:	29 0b                	sub    DWORD PTR [ebx],ecx
c0012d39:	c6 06 01             	mov    BYTE PTR [esi],0x1
c0012d3c:	eb 05                	jmp    c0012d43 <CmGetShift(unsigned int*, int*, int, bool*)+0x33>
c0012d3e:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0012d41:	31 c0                	xor    eax,eax
c0012d43:	5b                   	pop    ebx
c0012d44:	5e                   	pop    esi
c0012d45:	5f                   	pop    edi
c0012d46:	c3                   	ret    

c0012d47 <CmGetInteger(Reghive_Tag*, int, unsigned long long*)>:
c0012d47:	83 ec 40             	sub    esp,0x40
c0012d4a:	8d 44 24 09          	lea    eax,[esp+0x9]
c0012d4e:	50                   	push   eax
c0012d4f:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012d53:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012d57:	e8 49 fa ff ff       	call   c00127a5 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012d5c:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0012d60:	8b 54 24 2b          	mov    edx,DWORD PTR [esp+0x2b]
c0012d64:	8b 4c 24 2f          	mov    ecx,DWORD PTR [esp+0x2f]
c0012d68:	89 10                	mov    DWORD PTR [eax],edx
c0012d6a:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0012d6d:	83 c4 4c             	add    esp,0x4c
c0012d70:	c3                   	ret    

c0012d71 <CmSetInteger(Reghive_Tag*, int, unsigned long long)>:
c0012d71:	55                   	push   ebp
c0012d72:	57                   	push   edi
c0012d73:	56                   	push   esi
c0012d74:	53                   	push   ebx
c0012d75:	83 ec 40             	sub    esp,0x40
c0012d78:	8b 74 24 58          	mov    esi,DWORD PTR [esp+0x58]
c0012d7c:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c0012d80:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c0012d84:	8d 5c 24 09          	lea    ebx,[esp+0x9]
c0012d88:	53                   	push   ebx
c0012d89:	56                   	push   esi
c0012d8a:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0012d8e:	e8 12 fa ff ff       	call   c00127a5 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012d93:	89 7c 24 2b          	mov    DWORD PTR [esp+0x2b],edi
c0012d97:	89 6c 24 2f          	mov    DWORD PTR [esp+0x2f],ebp
c0012d9b:	83 c4 0c             	add    esp,0xc
c0012d9e:	53                   	push   ebx
c0012d9f:	56                   	push   esi
c0012da0:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0012da4:	e8 20 fb ff ff       	call   c00128c9 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0012da9:	83 c4 4c             	add    esp,0x4c
c0012dac:	5b                   	pop    ebx
c0012dad:	5e                   	pop    esi
c0012dae:	5f                   	pop    edi
c0012daf:	5d                   	pop    ebp
c0012db0:	c3                   	ret    

c0012db1 <CmConvertFromInternalFilename(unsigned char const*, char*)>:
c0012db1:	55                   	push   ebp
c0012db2:	57                   	push   edi
c0012db3:	56                   	push   esi
c0012db4:	31 f6                	xor    esi,esi
c0012db6:	53                   	push   ebx
c0012db7:	31 db                	xor    ebx,ebx
c0012db9:	83 ec 40             	sub    esp,0x40
c0012dbc:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0012dc4:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0012dcc:	6a 12                	push   0x12
c0012dce:	68 ee 00 00 00       	push   0xee
c0012dd3:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c0012dd7:	e8 14 d7 fe ff       	call   c00004f0 <memset>
c0012ddc:	83 c4 10             	add    esp,0x10
c0012ddf:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0012de3:	6a 08                	push   0x8
c0012de5:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0012de9:	0f b6 04 18          	movzx  eax,BYTE PTR [eax+ebx*1]
c0012ded:	50                   	push   eax
c0012dee:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c0012df2:	55                   	push   ebp
c0012df3:	57                   	push   edi
c0012df4:	e8 e7 fe ff ff       	call   c0012ce0 <CmAddShift(unsigned int*, int*, unsigned char, int)>
c0012df9:	83 c4 10             	add    esp,0x10
c0012dfc:	8d 44 24 0f          	lea    eax,[esp+0xf]
c0012e00:	50                   	push   eax
c0012e01:	6a 06                	push   0x6
c0012e03:	55                   	push   ebp
c0012e04:	57                   	push   edi
c0012e05:	e8 06 ff ff ff       	call   c0012d10 <CmGetShift(unsigned int*, int*, int, bool*)>
c0012e0a:	83 c4 10             	add    esp,0x10
c0012e0d:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0012e12:	74 07                	je     c0012e1b <CmConvertFromInternalFilename(unsigned char const*, char*)+0x6a>
c0012e14:	46                   	inc    esi
c0012e15:	88 44 34 17          	mov    BYTE PTR [esp+esi*1+0x17],al
c0012e19:	eb e1                	jmp    c0012dfc <CmConvertFromInternalFilename(unsigned char const*, char*)+0x4b>
c0012e1b:	43                   	inc    ebx
c0012e1c:	83 fb 12             	cmp    ebx,0x12
c0012e1f:	75 c2                	jne    c0012de3 <CmConvertFromInternalFilename(unsigned char const*, char*)+0x32>
c0012e21:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0012e25:	31 db                	xor    ebx,ebx
c0012e27:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0012e2a:	50                   	push   eax
c0012e2b:	50                   	push   eax
c0012e2c:	0f b6 44 1c 20       	movzx  eax,BYTE PTR [esp+ebx*1+0x20]
c0012e31:	43                   	inc    ebx
c0012e32:	8d 04 85 a0 32 02 c0 	lea    eax,[eax*4-0x3ffdcd60]
c0012e39:	50                   	push   eax
c0012e3a:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c0012e3e:	e8 fd d9 fe ff       	call   c0000840 <strcat>
c0012e43:	83 c4 10             	add    esp,0x10
c0012e46:	83 fb 18             	cmp    ebx,0x18
c0012e49:	75 df                	jne    c0012e2a <CmConvertFromInternalFilename(unsigned char const*, char*)+0x79>
c0012e4b:	83 c4 3c             	add    esp,0x3c
c0012e4e:	31 c0                	xor    eax,eax
c0012e50:	5b                   	pop    ebx
c0012e51:	5e                   	pop    esi
c0012e52:	5f                   	pop    edi
c0012e53:	5d                   	pop    ebp
c0012e54:	c3                   	ret    

c0012e55 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>:
c0012e55:	83 ec 40             	sub    esp,0x40
c0012e58:	8d 44 24 09          	lea    eax,[esp+0x9]
c0012e5c:	50                   	push   eax
c0012e5d:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012e61:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012e65:	e8 3b f9 ff ff       	call   c00127a5 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012e6a:	58                   	pop    eax
c0012e6b:	5a                   	pop    edx
c0012e6c:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c0012e70:	8d 44 24 15          	lea    eax,[esp+0x15]
c0012e74:	50                   	push   eax
c0012e75:	e8 37 ff ff ff       	call   c0012db1 <CmConvertFromInternalFilename(unsigned char const*, char*)>
c0012e7a:	0f b6 44 24 15       	movzx  eax,BYTE PTR [esp+0x15]
c0012e7f:	83 c4 4c             	add    esp,0x4c
c0012e82:	c3                   	ret    

c0012e83 <CmConvertToInternalFilename(char const*, unsigned char*)>:
c0012e83:	55                   	push   ebp
c0012e84:	57                   	push   edi
c0012e85:	56                   	push   esi
c0012e86:	53                   	push   ebx
c0012e87:	31 db                	xor    ebx,ebx
c0012e89:	83 ec 70             	sub    esp,0x70
c0012e8c:	8b bc 24 84 00 00 00 	mov    edi,DWORD PTR [esp+0x84]
c0012e93:	6a 30                	push   0x30
c0012e95:	6a 00                	push   0x0
c0012e97:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c0012e9b:	56                   	push   esi
c0012e9c:	e8 4f d6 fe ff       	call   c00004f0 <memset>
c0012ea1:	83 c4 10             	add    esp,0x10
c0012ea4:	83 ec 0c             	sub    esp,0xc
c0012ea7:	57                   	push   edi
c0012ea8:	e8 c3 d6 fe ff       	call   c0000570 <strlen>
c0012ead:	83 c4 10             	add    esp,0x10
c0012eb0:	39 d8                	cmp    eax,ebx
c0012eb2:	76 16                	jbe    c0012eca <CmConvertToInternalFilename(char const*, unsigned char*)+0x47>
c0012eb4:	83 ec 0c             	sub    esp,0xc
c0012eb7:	0f be 04 1f          	movsx  eax,BYTE PTR [edi+ebx*1]
c0012ebb:	50                   	push   eax
c0012ebc:	e8 6f da fe ff       	call   c0000930 <toupper>
c0012ec1:	83 c4 10             	add    esp,0x10
c0012ec4:	88 04 1e             	mov    BYTE PTR [esi+ebx*1],al
c0012ec7:	43                   	inc    ebx
c0012ec8:	eb da                	jmp    c0012ea4 <CmConvertToInternalFilename(char const*, unsigned char*)+0x21>
c0012eca:	31 f6                	xor    esi,esi
c0012ecc:	52                   	push   edx
c0012ecd:	31 ff                	xor    edi,edi
c0012ecf:	6a 18                	push   0x18
c0012ed1:	6a 3f                	push   0x3f
c0012ed3:	8d 44 24 24          	lea    eax,[esp+0x24]
c0012ed7:	50                   	push   eax
c0012ed8:	e8 13 d6 fe ff       	call   c00004f0 <memset>
c0012edd:	83 c4 10             	add    esp,0x10
c0012ee0:	8a 44 34 30          	mov    al,BYTE PTR [esp+esi*1+0x30]
c0012ee4:	8d 5c 24 10          	lea    ebx,[esp+0x10]
c0012ee8:	84 c0                	test   al,al
c0012eea:	0f 84 b0 00 00 00    	je     c0012fa0 <CmConvertToInternalFilename(char const*, unsigned char*)+0x11d>
c0012ef0:	88 44 24 14          	mov    BYTE PTR [esp+0x14],al
c0012ef4:	c6 44 24 16 00       	mov    BYTE PTR [esp+0x16],0x0
c0012ef9:	88 44 24 10          	mov    BYTE PTR [esp+0x10],al
c0012efd:	c6 44 24 11 00       	mov    BYTE PTR [esp+0x11],0x0
c0012f02:	8d 6e 01             	lea    ebp,[esi+0x1]
c0012f05:	83 ec 0c             	sub    esp,0xc
c0012f08:	8a 54 2c 3c          	mov    dl,BYTE PTR [esp+ebp*1+0x3c]
c0012f0c:	88 54 24 21          	mov    BYTE PTR [esp+0x21],dl
c0012f10:	53                   	push   ebx
c0012f11:	e8 5a d6 fe ff       	call   c0000570 <strlen>
c0012f16:	83 c4 10             	add    esp,0x10
c0012f19:	85 c0                	test   eax,eax
c0012f1b:	8d 44 24 0f          	lea    eax,[esp+0xf]
c0012f1f:	74 0b                	je     c0012f2c <CmConvertToInternalFilename(char const*, unsigned char*)+0xa9>
c0012f21:	50                   	push   eax
c0012f22:	6a 01                	push   0x1
c0012f24:	53                   	push   ebx
c0012f25:	8d 44 24 20          	lea    eax,[esp+0x20]
c0012f29:	50                   	push   eax
c0012f2a:	eb 0a                	jmp    c0012f36 <CmConvertToInternalFilename(char const*, unsigned char*)+0xb3>
c0012f2c:	50                   	push   eax
c0012f2d:	6a 00                	push   0x0
c0012f2f:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0012f33:	50                   	push   eax
c0012f34:	6a 00                	push   0x0
c0012f36:	e8 44 fd ff ff       	call   c0012c7f <CmGetMatch(char*, char*, bool, bool*)>
c0012f3b:	83 c4 10             	add    esp,0x10
c0012f3e:	83 f8 ff             	cmp    eax,0xffffffff
c0012f41:	75 1a                	jne    c0012f5d <CmConvertToInternalFilename(char const*, unsigned char*)+0xda>
c0012f43:	83 ec 0c             	sub    esp,0xc
c0012f46:	68 0e 1e 02 c0       	push   0xc0021e0e
c0012f4b:	e8 9d e2 ff ff       	call   c00111ed <KePanic(char const*)>
c0012f50:	83 c4 10             	add    esp,0x10
c0012f53:	b8 02 00 00 00       	mov    eax,0x2
c0012f58:	e9 bc 00 00 00       	jmp    c0013019 <CmConvertToInternalFilename(char const*, unsigned char*)+0x196>
c0012f5d:	83 ff 18             	cmp    edi,0x18
c0012f60:	75 1a                	jne    c0012f7c <CmConvertToInternalFilename(char const*, unsigned char*)+0xf9>
c0012f62:	83 ec 0c             	sub    esp,0xc
c0012f65:	68 23 1e 02 c0       	push   0xc0021e23
c0012f6a:	e8 7e e2 ff ff       	call   c00111ed <KePanic(char const*)>
c0012f6f:	83 c4 10             	add    esp,0x10
c0012f72:	b8 01 00 00 00       	mov    eax,0x1
c0012f77:	e9 9d 00 00 00       	jmp    c0013019 <CmConvertToInternalFilename(char const*, unsigned char*)+0x196>
c0012f7c:	47                   	inc    edi
c0012f7d:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0012f82:	88 44 3c 17          	mov    BYTE PTR [esp+edi*1+0x17],al
c0012f86:	74 02                	je     c0012f8a <CmConvertToInternalFilename(char const*, unsigned char*)+0x107>
c0012f88:	89 ee                	mov    esi,ebp
c0012f8a:	83 ec 0c             	sub    esp,0xc
c0012f8d:	53                   	push   ebx
c0012f8e:	e8 dd d5 fe ff       	call   c0000570 <strlen>
c0012f93:	83 c4 10             	add    esp,0x10
c0012f96:	85 c0                	test   eax,eax
c0012f98:	74 06                	je     c0012fa0 <CmConvertToInternalFilename(char const*, unsigned char*)+0x11d>
c0012f9a:	46                   	inc    esi
c0012f9b:	e9 40 ff ff ff       	jmp    c0012ee0 <CmConvertToInternalFilename(char const*, unsigned char*)+0x5d>
c0012fa0:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0012fa8:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0012fb0:	31 f6                	xor    esi,esi
c0012fb2:	50                   	push   eax
c0012fb3:	31 ff                	xor    edi,edi
c0012fb5:	6a 12                	push   0x12
c0012fb7:	68 ee 00 00 00       	push   0xee
c0012fbc:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c0012fc3:	e8 28 d5 fe ff       	call   c00004f0 <memset>
c0012fc8:	83 c4 10             	add    esp,0x10
c0012fcb:	83 fe 17             	cmp    esi,0x17
c0012fce:	8d 6c 24 14          	lea    ebp,[esp+0x14]
c0012fd2:	7e 26                	jle    c0012ffa <CmConvertToInternalFilename(char const*, unsigned char*)+0x177>
c0012fd4:	8d 44 24 0f          	lea    eax,[esp+0xf]
c0012fd8:	50                   	push   eax
c0012fd9:	6a 08                	push   0x8
c0012fdb:	55                   	push   ebp
c0012fdc:	53                   	push   ebx
c0012fdd:	e8 2e fd ff ff       	call   c0012d10 <CmGetShift(unsigned int*, int*, int, bool*)>
c0012fe2:	83 c4 10             	add    esp,0x10
c0012fe5:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0012fea:	74 26                	je     c0013012 <CmConvertToInternalFilename(char const*, unsigned char*)+0x18f>
c0012fec:	8b 8c 24 84 00 00 00 	mov    ecx,DWORD PTR [esp+0x84]
c0012ff3:	4e                   	dec    esi
c0012ff4:	88 04 39             	mov    BYTE PTR [ecx+edi*1],al
c0012ff7:	47                   	inc    edi
c0012ff8:	eb 1c                	jmp    c0013016 <CmConvertToInternalFilename(char const*, unsigned char*)+0x193>
c0012ffa:	6a 06                	push   0x6
c0012ffc:	0f b6 44 34 1c       	movzx  eax,BYTE PTR [esp+esi*1+0x1c]
c0013001:	50                   	push   eax
c0013002:	55                   	push   ebp
c0013003:	53                   	push   ebx
c0013004:	e8 d7 fc ff ff       	call   c0012ce0 <CmAddShift(unsigned int*, int*, unsigned char, int)>
c0013009:	83 c4 10             	add    esp,0x10
c001300c:	84 c0                	test   al,al
c001300e:	75 06                	jne    c0013016 <CmConvertToInternalFilename(char const*, unsigned char*)+0x193>
c0013010:	eb c2                	jmp    c0012fd4 <CmConvertToInternalFilename(char const*, unsigned char*)+0x151>
c0013012:	31 c0                	xor    eax,eax
c0013014:	eb 03                	jmp    c0013019 <CmConvertToInternalFilename(char const*, unsigned char*)+0x196>
c0013016:	46                   	inc    esi
c0013017:	eb b2                	jmp    c0012fcb <CmConvertToInternalFilename(char const*, unsigned char*)+0x148>
c0013019:	83 c4 6c             	add    esp,0x6c
c001301c:	5b                   	pop    ebx
c001301d:	5e                   	pop    esi
c001301e:	5f                   	pop    edi
c001301f:	5d                   	pop    ebp
c0013020:	c3                   	ret    

c0013021 <CmCreateString(Reghive_Tag*, int, char const*)>:
c0013021:	53                   	push   ebx
c0013022:	83 ec 3c             	sub    esp,0x3c
c0013025:	6a 2b                	push   0x2b
c0013027:	6a 00                	push   0x0
c0013029:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c001302d:	53                   	push   ebx
c001302e:	e8 bd d4 fe ff       	call   c00004f0 <memset>
c0013033:	58                   	pop    eax
c0013034:	5a                   	pop    edx
c0013035:	8d 44 24 11          	lea    eax,[esp+0x11]
c0013039:	50                   	push   eax
c001303a:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c001303e:	e8 40 fe ff ff       	call   c0012e83 <CmConvertToInternalFilename(char const*, unsigned char*)>
c0013043:	c6 44 24 15 c1       	mov    BYTE PTR [esp+0x15],0xc1
c0013048:	83 c4 0c             	add    esp,0xc
c001304b:	6a 15                	push   0x15
c001304d:	6a 00                	push   0x0
c001304f:	8d 44 24 27          	lea    eax,[esp+0x27]
c0013053:	50                   	push   eax
c0013054:	e8 97 d4 fe ff       	call   c00004f0 <memset>
c0013059:	53                   	push   ebx
c001305a:	6a 00                	push   0x0
c001305c:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0013060:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0013064:	e8 e6 f9 ff ff       	call   c0012a4f <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c0013069:	83 c4 58             	add    esp,0x58
c001306c:	5b                   	pop    ebx
c001306d:	c3                   	ret    

c001306e <CmFindInDirectory(Reghive_Tag*, int, char const*)>:
c001306e:	56                   	push   esi
c001306f:	53                   	push   ebx
c0013070:	83 ec 48             	sub    esp,0x48
c0013073:	6a 12                	push   0x12
c0013075:	68 ff 00 00 00       	push   0xff
c001307a:	8d 74 24 0f          	lea    esi,[esp+0xf]
c001307e:	56                   	push   esi
c001307f:	e8 6c d4 fe ff       	call   c00004f0 <memset>
c0013084:	5a                   	pop    edx
c0013085:	59                   	pop    ecx
c0013086:	56                   	push   esi
c0013087:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c001308b:	e8 f3 fd ff ff       	call   c0012e83 <CmConvertToInternalFilename(char const*, unsigned char*)>
c0013090:	83 c4 10             	add    esp,0x10
c0013093:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c0013097:	85 db                	test   ebx,ebx
c0013099:	74 42                	je     c00130dd <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x6f>
c001309b:	50                   	push   eax
c001309c:	8d 44 24 19          	lea    eax,[esp+0x19]
c00130a0:	50                   	push   eax
c00130a1:	53                   	push   ebx
c00130a2:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00130a6:	e8 fa f6 ff ff       	call   c00127a5 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c00130ab:	83 c4 0c             	add    esp,0xc
c00130ae:	6a 12                	push   0x12
c00130b0:	8d 44 24 21          	lea    eax,[esp+0x21]
c00130b4:	50                   	push   eax
c00130b5:	56                   	push   esi
c00130b6:	e8 c5 d2 fe ff       	call   c0000380 <memcmp>
c00130bb:	83 c4 10             	add    esp,0x10
c00130be:	85 c0                	test   eax,eax
c00130c0:	74 1e                	je     c00130e0 <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x72>
c00130c2:	0f b6 44 24 16       	movzx  eax,BYTE PTR [esp+0x16]
c00130c7:	0f b6 5c 24 17       	movzx  ebx,BYTE PTR [esp+0x17]
c00130cc:	c1 e3 08             	shl    ebx,0x8
c00130cf:	09 d8                	or     eax,ebx
c00130d1:	0f b6 5c 24 18       	movzx  ebx,BYTE PTR [esp+0x18]
c00130d6:	c1 e3 10             	shl    ebx,0x10
c00130d9:	09 c3                	or     ebx,eax
c00130db:	eb ba                	jmp    c0013097 <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x29>
c00130dd:	83 cb ff             	or     ebx,0xffffffff
c00130e0:	89 d8                	mov    eax,ebx
c00130e2:	83 c4 44             	add    esp,0x44
c00130e5:	5b                   	pop    ebx
c00130e6:	5e                   	pop    esi
c00130e7:	c3                   	ret    

c00130e8 <CmCreateInteger(Reghive_Tag*, int, char const*, unsigned long long, int)>:
c00130e8:	57                   	push   edi
c00130e9:	56                   	push   esi
c00130ea:	53                   	push   ebx
c00130eb:	83 ec 34             	sub    esp,0x34
c00130ee:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c00130f2:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c00130f6:	6a 2b                	push   0x2b
c00130f8:	6a 00                	push   0x0
c00130fa:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c00130fe:	53                   	push   ebx
c00130ff:	e8 ec d3 fe ff       	call   c00004f0 <memset>
c0013104:	58                   	pop    eax
c0013105:	5a                   	pop    edx
c0013106:	8d 44 24 11          	lea    eax,[esp+0x11]
c001310a:	50                   	push   eax
c001310b:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c001310f:	e8 6f fd ff ff       	call   c0012e83 <CmConvertToInternalFilename(char const*, unsigned char*)>
c0013114:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c0013118:	89 74 24 2b          	mov    DWORD PTR [esp+0x2b],esi
c001311c:	89 7c 24 2f          	mov    DWORD PTR [esp+0x2f],edi
c0013120:	88 44 24 15          	mov    BYTE PTR [esp+0x15],al
c0013124:	53                   	push   ebx
c0013125:	6a 00                	push   0x0
c0013127:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001312b:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001312f:	e8 1b f9 ff ff       	call   c0012a4f <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c0013134:	83 c4 50             	add    esp,0x50
c0013137:	5b                   	pop    ebx
c0013138:	5e                   	pop    esi
c0013139:	5f                   	pop    edi
c001313a:	c3                   	ret    

c001313b <CmCreateDirectory(Reghive_Tag*, int, char const*)>:
c001313b:	55                   	push   ebp
c001313c:	57                   	push   edi
c001313d:	56                   	push   esi
c001313e:	53                   	push   ebx
c001313f:	83 ec 40             	sub    esp,0x40
c0013142:	8b 6c 24 58          	mov    ebp,DWORD PTR [esp+0x58]
c0013146:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c001314a:	6a 2b                	push   0x2b
c001314c:	6a 00                	push   0x0
c001314e:	8d 74 24 11          	lea    esi,[esp+0x11]
c0013152:	56                   	push   esi
c0013153:	e8 98 d3 fe ff       	call   c00004f0 <memset>
c0013158:	5f                   	pop    edi
c0013159:	89 ef                	mov    edi,ebp
c001315b:	58                   	pop    eax
c001315c:	8d 44 24 11          	lea    eax,[esp+0x11]
c0013160:	50                   	push   eax
c0013161:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c0013165:	e8 19 fd ff ff       	call   c0012e83 <CmConvertToInternalFilename(char const*, unsigned char*)>
c001316a:	c6 44 24 15 4e       	mov    BYTE PTR [esp+0x15],0x4e
c001316f:	c6 44 24 2b 00       	mov    BYTE PTR [esp+0x2b],0x0
c0013174:	c6 44 24 2c 00       	mov    BYTE PTR [esp+0x2c],0x0
c0013179:	c6 44 24 2d 00       	mov    BYTE PTR [esp+0x2d],0x0
c001317e:	83 c4 10             	add    esp,0x10
c0013181:	85 ed                	test   ebp,ebp
c0013183:	74 14                	je     c0013199 <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x5e>
c0013185:	51                   	push   ecx
c0013186:	51                   	push   ecx
c0013187:	57                   	push   edi
c0013188:	53                   	push   ebx
c0013189:	e8 09 f7 ff ff       	call   c0012897 <CmGetNext(Reghive_Tag*, int)>
c001318e:	83 c4 10             	add    esp,0x10
c0013191:	85 c0                	test   eax,eax
c0013193:	74 04                	je     c0013199 <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x5e>
c0013195:	89 c7                	mov    edi,eax
c0013197:	eb e8                	jmp    c0013181 <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x46>
c0013199:	56                   	push   esi
c001319a:	6a 00                	push   0x0
c001319c:	57                   	push   edi
c001319d:	53                   	push   ebx
c001319e:	e8 ac f8 ff ff       	call   c0012a4f <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c00131a3:	83 c4 0c             	add    esp,0xc
c00131a6:	89 c7                	mov    edi,eax
c00131a8:	56                   	push   esi
c00131a9:	50                   	push   eax
c00131aa:	53                   	push   ebx
c00131ab:	e8 f5 f5 ff ff       	call   c00127a5 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c00131b0:	58                   	pop    eax
c00131b1:	5a                   	pop    edx
c00131b2:	6a 6c                	push   0x6c
c00131b4:	6a 00                	push   0x0
c00131b6:	6a 00                	push   0x0
c00131b8:	68 34 1e 02 c0       	push   0xc0021e34
c00131bd:	57                   	push   edi
c00131be:	53                   	push   ebx
c00131bf:	e8 24 ff ff ff       	call   c00130e8 <CmCreateInteger(Reghive_Tag*, int, char const*, unsigned long long, int)>
c00131c4:	88 44 24 3b          	mov    BYTE PTR [esp+0x3b],al
c00131c8:	88 64 24 3c          	mov    BYTE PTR [esp+0x3c],ah
c00131cc:	c1 e8 10             	shr    eax,0x10
c00131cf:	88 44 24 3d          	mov    BYTE PTR [esp+0x3d],al
c00131d3:	83 c4 1c             	add    esp,0x1c
c00131d6:	56                   	push   esi
c00131d7:	57                   	push   edi
c00131d8:	53                   	push   ebx
c00131d9:	e8 eb f6 ff ff       	call   c00128c9 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c00131de:	0f b6 54 24 2b       	movzx  edx,BYTE PTR [esp+0x2b]
c00131e3:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00131e8:	c1 e0 08             	shl    eax,0x8
c00131eb:	09 c2                	or     edx,eax
c00131ed:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c00131f2:	83 c4 4c             	add    esp,0x4c
c00131f5:	c1 e0 10             	shl    eax,0x10
c00131f8:	5b                   	pop    ebx
c00131f9:	09 d0                	or     eax,edx
c00131fb:	5e                   	pop    esi
c00131fc:	5f                   	pop    edi
c00131fd:	5d                   	pop    ebp
c00131fe:	c3                   	ret    

c00131ff <zStrtok(char*, char const*)>:
c00131ff:	55                   	push   ebp
c0013200:	57                   	push   edi
c0013201:	56                   	push   esi
c0013202:	53                   	push   ebx
c0013203:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013207:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001320b:	85 db                	test   ebx,ebx
c001320d:	74 2f                	je     c001323e <zStrtok(char*, char const*)+0x3f>
c001320f:	85 c0                	test   eax,eax
c0013211:	75 09                	jne    c001321c <zStrtok(char*, char const*)+0x1d>
c0013213:	a1 90 9c 02 c0       	mov    eax,ds:0xc0029c90
c0013218:	85 c0                	test   eax,eax
c001321a:	74 50                	je     c001326c <zStrtok(char*, char const*)+0x6d>
c001321c:	31 c9                	xor    ecx,ecx
c001321e:	80 3c 08 00          	cmp    BYTE PTR [eax+ecx*1],0x0
c0013222:	74 03                	je     c0013227 <zStrtok(char*, char const*)+0x28>
c0013224:	41                   	inc    ecx
c0013225:	eb f7                	jmp    c001321e <zStrtok(char*, char const*)+0x1f>
c0013227:	31 d2                	xor    edx,edx
c0013229:	39 ca                	cmp    edx,ecx
c001322b:	74 15                	je     c0013242 <zStrtok(char*, char const*)+0x43>
c001322d:	0f be 34 10          	movsx  esi,BYTE PTR [eax+edx*1]
c0013231:	0f be 2b             	movsx  ebp,BYTE PTR [ebx]
c0013234:	8d 3c 10             	lea    edi,[eax+edx*1]
c0013237:	39 ee                	cmp    esi,ebp
c0013239:	74 13                	je     c001324e <zStrtok(char*, char const*)+0x4f>
c001323b:	42                   	inc    edx
c001323c:	eb eb                	jmp    c0013229 <zStrtok(char*, char const*)+0x2a>
c001323e:	31 c0                	xor    eax,eax
c0013240:	eb 2a                	jmp    c001326c <zStrtok(char*, char const*)+0x6d>
c0013242:	c7 05 90 9c 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029c90,0x0
c001324c:	eb 1e                	jmp    c001326c <zStrtok(char*, char const*)+0x6d>
c001324e:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0013251:	39 ce                	cmp    esi,ecx
c0013253:	75 0a                	jne    c001325f <zStrtok(char*, char const*)+0x60>
c0013255:	40                   	inc    eax
c0013256:	a3 90 9c 02 c0       	mov    ds:0xc0029c90,eax
c001325b:	89 d8                	mov    eax,ebx
c001325d:	eb 0d                	jmp    c001326c <zStrtok(char*, char const*)+0x6d>
c001325f:	8d 54 10 01          	lea    edx,[eax+edx*1+0x1]
c0013263:	c6 07 00             	mov    BYTE PTR [edi],0x0
c0013266:	89 15 90 9c 02 c0    	mov    DWORD PTR ds:0xc0029c90,edx
c001326c:	5b                   	pop    ebx
c001326d:	5e                   	pop    esi
c001326e:	5f                   	pop    edi
c001326f:	5d                   	pop    ebp
c0013270:	c3                   	ret    

c0013271 <CmFindObjectFromPath(Reghive_Tag*, char const*)>:
c0013271:	57                   	push   edi
c0013272:	56                   	push   esi
c0013273:	53                   	push   ebx
c0013274:	81 ec 08 01 00 00    	sub    esp,0x108
c001327a:	8b bc 24 18 01 00 00 	mov    edi,DWORD PTR [esp+0x118]
c0013281:	ff b4 24 1c 01 00 00 	push   DWORD PTR [esp+0x11c]
c0013288:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c001328c:	53                   	push   ebx
c001328d:	e8 ae d3 fe ff       	call   c0000640 <strcpy>
c0013292:	59                   	pop    ecx
c0013293:	5e                   	pop    esi
c0013294:	68 98 21 02 c0       	push   0xc0022198
c0013299:	53                   	push   ebx
c001329a:	bb 01 00 00 00       	mov    ebx,0x1
c001329f:	e8 5b ff ff ff       	call   c00131ff <zStrtok(char*, char const*)>
c00132a4:	83 c4 10             	add    esp,0x10
c00132a7:	85 c0                	test   eax,eax
c00132a9:	74 3b                	je     c00132e6 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c00132ab:	52                   	push   edx
c00132ac:	50                   	push   eax
c00132ad:	6a 01                	push   0x1
c00132af:	57                   	push   edi
c00132b0:	e8 b9 fd ff ff       	call   c001306e <CmFindInDirectory(Reghive_Tag*, int, char const*)>
c00132b5:	59                   	pop    ecx
c00132b6:	89 c3                	mov    ebx,eax
c00132b8:	5e                   	pop    esi
c00132b9:	68 98 21 02 c0       	push   0xc0022198
c00132be:	6a 00                	push   0x0
c00132c0:	e8 3a ff ff ff       	call   c00131ff <zStrtok(char*, char const*)>
c00132c5:	83 c4 10             	add    esp,0x10
c00132c8:	89 c6                	mov    esi,eax
c00132ca:	85 c0                	test   eax,eax
c00132cc:	74 18                	je     c00132e6 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c00132ce:	52                   	push   edx
c00132cf:	52                   	push   edx
c00132d0:	53                   	push   ebx
c00132d1:	57                   	push   edi
c00132d2:	e8 81 f5 ff ff       	call   c0012858 <CmEnterDirectory(Reghive_Tag*, int)>
c00132d7:	83 c4 10             	add    esp,0x10
c00132da:	89 c3                	mov    ebx,eax
c00132dc:	83 f8 ff             	cmp    eax,0xffffffff
c00132df:	74 05                	je     c00132e6 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c00132e1:	50                   	push   eax
c00132e2:	56                   	push   esi
c00132e3:	53                   	push   ebx
c00132e4:	eb c9                	jmp    c00132af <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x3e>
c00132e6:	81 c4 00 01 00 00    	add    esp,0x100
c00132ec:	89 d8                	mov    eax,ebx
c00132ee:	5b                   	pop    ebx
c00132ef:	5e                   	pop    esi
c00132f0:	5f                   	pop    edi
c00132f1:	c3                   	ret    

c00132f2 <CmDisplayTree(Reghive_Tag*, int, int)>:
c00132f2:	55                   	push   ebp
c00132f3:	57                   	push   edi
c00132f4:	56                   	push   esi
c00132f5:	53                   	push   ebx
c00132f6:	83 ec 5c             	sub    esp,0x5c
c00132f9:	8b 74 24 70          	mov    esi,DWORD PTR [esp+0x70]
c00132fd:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0013301:	85 db                	test   ebx,ebx
c0013303:	0f 8e 84 00 00 00    	jle    c001338d <CmDisplayTree(Reghive_Tag*, int, int)+0x9b>
c0013309:	31 ed                	xor    ebp,ebp
c001330b:	57                   	push   edi
c001330c:	6a 32                	push   0x32
c001330e:	6a 00                	push   0x0
c0013310:	8d 7c 24 2a          	lea    edi,[esp+0x2a]
c0013314:	57                   	push   edi
c0013315:	e8 d6 d1 fe ff       	call   c00004f0 <memset>
c001331a:	83 c4 0c             	add    esp,0xc
c001331d:	57                   	push   edi
c001331e:	53                   	push   ebx
c001331f:	56                   	push   esi
c0013320:	e8 30 fb ff ff       	call   c0012e55 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c0013325:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0013329:	83 c4 10             	add    esp,0x10
c001332c:	3b 6c 24 78          	cmp    ebp,DWORD PTR [esp+0x78]
c0013330:	7d 13                	jge    c0013345 <CmDisplayTree(Reghive_Tag*, int, int)+0x53>
c0013332:	83 ec 0c             	sub    esp,0xc
c0013335:	45                   	inc    ebp
c0013336:	68 3f 25 02 c0       	push   0xc002253f
c001333b:	e8 05 76 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0013340:	83 c4 10             	add    esp,0x10
c0013343:	eb e7                	jmp    c001332c <CmDisplayTree(Reghive_Tag*, int, int)+0x3a>
c0013345:	51                   	push   ecx
c0013346:	57                   	push   edi
c0013347:	53                   	push   ebx
c0013348:	68 3a 1e 02 c0       	push   0xc0021e3a
c001334d:	e8 f3 75 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0013352:	83 c4 10             	add    esp,0x10
c0013355:	83 7c 24 0c 4e       	cmp    DWORD PTR [esp+0xc],0x4e
c001335a:	75 1e                	jne    c001337a <CmDisplayTree(Reghive_Tag*, int, int)+0x88>
c001335c:	52                   	push   edx
c001335d:	52                   	push   edx
c001335e:	53                   	push   ebx
c001335f:	56                   	push   esi
c0013360:	e8 f3 f4 ff ff       	call   c0012858 <CmEnterDirectory(Reghive_Tag*, int)>
c0013365:	83 c4 0c             	add    esp,0xc
c0013368:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c001336c:	8d 51 04             	lea    edx,[ecx+0x4]
c001336f:	52                   	push   edx
c0013370:	50                   	push   eax
c0013371:	56                   	push   esi
c0013372:	e8 7b ff ff ff       	call   c00132f2 <CmDisplayTree(Reghive_Tag*, int, int)>
c0013377:	83 c4 10             	add    esp,0x10
c001337a:	50                   	push   eax
c001337b:	50                   	push   eax
c001337c:	53                   	push   ebx
c001337d:	56                   	push   esi
c001337e:	e8 14 f5 ff ff       	call   c0012897 <CmGetNext(Reghive_Tag*, int)>
c0013383:	83 c4 10             	add    esp,0x10
c0013386:	89 c3                	mov    ebx,eax
c0013388:	e9 74 ff ff ff       	jmp    c0013301 <CmDisplayTree(Reghive_Tag*, int, int)+0xf>
c001338d:	83 c4 5c             	add    esp,0x5c
c0013390:	5b                   	pop    ebx
c0013391:	5e                   	pop    esi
c0013392:	5f                   	pop    edi
c0013393:	5d                   	pop    ebp
c0013394:	c3                   	ret    

c0013395 <CmSplitFinalSlashInPlace(char*)>:
c0013395:	53                   	push   ebx
c0013396:	83 ec 14             	sub    esp,0x14
c0013399:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001339d:	53                   	push   ebx
c001339e:	e8 cd d1 fe ff       	call   c0000570 <strlen>
c00133a3:	83 c4 10             	add    esp,0x10
c00133a6:	48                   	dec    eax
c00133a7:	85 c0                	test   eax,eax
c00133a9:	74 15                	je     c00133c0 <CmSplitFinalSlashInPlace(char*)+0x2b>
c00133ab:	8d 14 03             	lea    edx,[ebx+eax*1]
c00133ae:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c00133b2:	75 09                	jne    c00133bd <CmSplitFinalSlashInPlace(char*)+0x28>
c00133b4:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00133b7:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c00133bb:	eb 05                	jmp    c00133c2 <CmSplitFinalSlashInPlace(char*)+0x2d>
c00133bd:	48                   	dec    eax
c00133be:	eb e7                	jmp    c00133a7 <CmSplitFinalSlashInPlace(char*)+0x12>
c00133c0:	31 c0                	xor    eax,eax
c00133c2:	83 c4 08             	add    esp,0x8
c00133c5:	5b                   	pop    ebx
c00133c6:	c3                   	ret    

c00133c7 <Reg::findLineFromLoadedData(char*, char*, char*)>:
c00133c7:	55                   	push   ebp
c00133c8:	57                   	push   edi
c00133c9:	56                   	push   esi
c00133ca:	53                   	push   ebx
c00133cb:	81 ec 2c 01 00 00    	sub    esp,0x12c
c00133d1:	8b 9c 24 44 01 00 00 	mov    ebx,DWORD PTR [esp+0x144]
c00133d8:	8a 13                	mov    dl,BYTE PTR [ebx]
c00133da:	8d 6b 01             	lea    ebp,[ebx+0x1]
c00133dd:	80 fa 40             	cmp    dl,0x40
c00133e0:	75 1c                	jne    c00133fe <Reg::findLineFromLoadedData(char*, char*, char*)+0x37>
c00133e2:	0f be 0b             	movsx  ecx,BYTE PTR [ebx]
c00133e5:	85 c9                	test   ecx,ecx
c00133e7:	0f 84 09 01 00 00    	je     c00134f6 <Reg::findLineFromLoadedData(char*, char*, char*)+0x12f>
c00133ed:	8d 43 01             	lea    eax,[ebx+0x1]
c00133f0:	83 f9 3a             	cmp    ecx,0x3a
c00133f3:	74 04                	je     c00133f9 <Reg::findLineFromLoadedData(char*, char*, char*)+0x32>
c00133f5:	89 c3                	mov    ebx,eax
c00133f7:	eb e9                	jmp    c00133e2 <Reg::findLineFromLoadedData(char*, char*, char*)+0x1b>
c00133f9:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c00133fc:	89 c3                	mov    ebx,eax
c00133fe:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0013402:	50                   	push   eax
c0013403:	6a 40                	push   0x40
c0013405:	6a 00                	push   0x0
c0013407:	8d 44 24 24          	lea    eax,[esp+0x24]
c001340b:	50                   	push   eax
c001340c:	e8 df d0 fe ff       	call   c00004f0 <memset>
c0013411:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c0013418:	31 c0                	xor    eax,eax
c001341a:	83 c4 10             	add    esp,0x10
c001341d:	0f be 74 24 0c       	movsx  esi,BYTE PTR [esp+0xc]
c0013422:	0f be 17             	movsx  edx,BYTE PTR [edi]
c0013425:	89 d1                	mov    ecx,edx
c0013427:	85 d2                	test   edx,edx
c0013429:	0f 84 c7 00 00 00    	je     c00134f6 <Reg::findLineFromLoadedData(char*, char*, char*)+0x12f>
c001342f:	3d c7 00 00 00       	cmp    eax,0xc7
c0013434:	0f 8f bc 00 00 00    	jg     c00134f6 <Reg::findLineFromLoadedData(char*, char*, char*)+0x12f>
c001343a:	83 fa 0a             	cmp    edx,0xa
c001343d:	0f 85 a4 00 00 00    	jne    c00134e7 <Reg::findLineFromLoadedData(char*, char*, char*)+0x120>
c0013443:	c6 44 04 58 00       	mov    BYTE PTR [esp+eax*1+0x58],0x0
c0013448:	0f be 4c 24 58       	movsx  ecx,BYTE PTR [esp+0x58]
c001344d:	89 c8                	mov    eax,ecx
c001344f:	a8 df                	test   al,0xdf
c0013451:	0f 94 c2             	sete   dl
c0013454:	83 f9 23             	cmp    ecx,0x23
c0013457:	0f 94 44 24 0c       	sete   BYTE PTR [esp+0xc]
c001345c:	0b 54 24 0c          	or     edx,DWORD PTR [esp+0xc]
c0013460:	80 e2 01             	and    dl,0x1
c0013463:	75 4a                	jne    c00134af <Reg::findLineFromLoadedData(char*, char*, char*)+0xe8>
c0013465:	83 e8 09             	sub    eax,0x9
c0013468:	3c 01                	cmp    al,0x1
c001346a:	76 43                	jbe    c00134af <Reg::findLineFromLoadedData(char*, char*, char*)+0xe8>
c001346c:	83 f9 5b             	cmp    ecx,0x5b
c001346f:	75 42                	jne    c00134b3 <Reg::findLineFromLoadedData(char*, char*, char*)+0xec>
c0013471:	83 fe 40             	cmp    esi,0x40
c0013474:	75 39                	jne    c00134af <Reg::findLineFromLoadedData(char*, char*, char*)+0xe8>
c0013476:	83 ec 0c             	sub    esp,0xc
c0013479:	8d 54 24 65          	lea    edx,[esp+0x65]
c001347d:	52                   	push   edx
c001347e:	e8 ed d0 fe ff       	call   c0000570 <strlen>
c0013483:	83 c4 10             	add    esp,0x10
c0013486:	83 f8 3f             	cmp    eax,0x3f
c0013489:	77 6b                	ja     c00134f6 <Reg::findLineFromLoadedData(char*, char*, char*)+0x12f>
c001348b:	50                   	push   eax
c001348c:	50                   	push   eax
c001348d:	8d 54 24 61          	lea    edx,[esp+0x61]
c0013491:	52                   	push   edx
c0013492:	8d 54 24 24          	lea    edx,[esp+0x24]
c0013496:	52                   	push   edx
c0013497:	e8 a4 d1 fe ff       	call   c0000640 <strcpy>
c001349c:	58                   	pop    eax
c001349d:	8d 54 24 24          	lea    edx,[esp+0x24]
c00134a1:	52                   	push   edx
c00134a2:	e8 c9 d0 fe ff       	call   c0000570 <strlen>
c00134a7:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c00134ac:	83 c4 10             	add    esp,0x10
c00134af:	31 d2                	xor    edx,edx
c00134b1:	eb 3b                	jmp    c00134ee <Reg::findLineFromLoadedData(char*, char*, char*)+0x127>
c00134b3:	83 fe 40             	cmp    esi,0x40
c00134b6:	74 06                	je     c00134be <Reg::findLineFromLoadedData(char*, char*, char*)+0xf7>
c00134b8:	8d 44 24 58          	lea    eax,[esp+0x58]
c00134bc:	eb 20                	jmp    c00134de <Reg::findLineFromLoadedData(char*, char*, char*)+0x117>
c00134be:	50                   	push   eax
c00134bf:	50                   	push   eax
c00134c0:	55                   	push   ebp
c00134c1:	8d 44 24 24          	lea    eax,[esp+0x24]
c00134c5:	50                   	push   eax
c00134c6:	e8 85 d2 fe ff       	call   c0000750 <strcmp>
c00134cb:	83 c4 10             	add    esp,0x10
c00134ce:	85 c0                	test   eax,eax
c00134d0:	75 dd                	jne    c00134af <Reg::findLineFromLoadedData(char*, char*, char*)+0xe8>
c00134d2:	eb e4                	jmp    c00134b8 <Reg::findLineFromLoadedData(char*, char*, char*)+0xf1>
c00134d4:	8d 50 01             	lea    edx,[eax+0x1]
c00134d7:	83 f9 3d             	cmp    ecx,0x3d
c00134da:	74 1e                	je     c00134fa <Reg::findLineFromLoadedData(char*, char*, char*)+0x133>
c00134dc:	89 d0                	mov    eax,edx
c00134de:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c00134e1:	85 c9                	test   ecx,ecx
c00134e3:	75 ef                	jne    c00134d4 <Reg::findLineFromLoadedData(char*, char*, char*)+0x10d>
c00134e5:	eb 0f                	jmp    c00134f6 <Reg::findLineFromLoadedData(char*, char*, char*)+0x12f>
c00134e7:	8d 50 01             	lea    edx,[eax+0x1]
c00134ea:	88 4c 04 58          	mov    BYTE PTR [esp+eax*1+0x58],cl
c00134ee:	47                   	inc    edi
c00134ef:	89 d0                	mov    eax,edx
c00134f1:	e9 2c ff ff ff       	jmp    c0013422 <Reg::findLineFromLoadedData(char*, char*, char*)+0x5b>
c00134f6:	31 c0                	xor    eax,eax
c00134f8:	eb 33                	jmp    c001352d <Reg::findLineFromLoadedData(char*, char*, char*)+0x166>
c00134fa:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00134fe:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0013501:	50                   	push   eax
c0013502:	50                   	push   eax
c0013503:	8d 44 24 60          	lea    eax,[esp+0x60]
c0013507:	50                   	push   eax
c0013508:	53                   	push   ebx
c0013509:	e8 42 d2 fe ff       	call   c0000750 <strcmp>
c001350e:	83 c4 10             	add    esp,0x10
c0013511:	85 c0                	test   eax,eax
c0013513:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0013517:	75 96                	jne    c00134af <Reg::findLineFromLoadedData(char*, char*, char*)+0xe8>
c0013519:	51                   	push   ecx
c001351a:	51                   	push   ecx
c001351b:	52                   	push   edx
c001351c:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c0013523:	e8 18 d1 fe ff       	call   c0000640 <strcpy>
c0013528:	83 c4 10             	add    esp,0x10
c001352b:	b0 01                	mov    al,0x1
c001352d:	81 c4 2c 01 00 00    	add    esp,0x12c
c0013533:	5b                   	pop    ebx
c0013534:	5e                   	pop    esi
c0013535:	5f                   	pop    edi
c0013536:	5d                   	pop    ebp
c0013537:	c3                   	ret    

c0013538 <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c0013538:	57                   	push   edi
c0013539:	56                   	push   esi
c001353a:	53                   	push   ebx
c001353b:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0013541:	8b b4 24 3c 01 00 00 	mov    esi,DWORD PTR [esp+0x13c]
c0013548:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c001354f:	53                   	push   ebx
c0013550:	e8 1b d0 fe ff       	call   c0000570 <strlen>
c0013555:	89 34 24             	mov    DWORD PTR [esp],esi
c0013558:	89 c7                	mov    edi,eax
c001355a:	e8 11 d0 fe ff       	call   c0000570 <strlen>
c001355f:	83 c4 10             	add    esp,0x10
c0013562:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c0013566:	3d ff 00 00 00       	cmp    eax,0xff
c001356b:	0f 87 d3 00 00 00    	ja     c0013644 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c0013571:	57                   	push   edi
c0013572:	57                   	push   edi
c0013573:	56                   	push   esi
c0013574:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0013578:	56                   	push   esi
c0013579:	e8 c2 d0 fe ff       	call   c0000640 <strcpy>
c001357e:	58                   	pop    eax
c001357f:	5a                   	pop    edx
c0013580:	68 98 21 02 c0       	push   0xc0022198
c0013585:	56                   	push   esi
c0013586:	e8 b5 d2 fe ff       	call   c0000840 <strcat>
c001358b:	59                   	pop    ecx
c001358c:	5f                   	pop    edi
c001358d:	53                   	push   ebx
c001358e:	56                   	push   esi
c001358f:	e8 ac d2 fe ff       	call   c0000840 <strcat>
c0013594:	58                   	pop    eax
c0013595:	5a                   	pop    edx
c0013596:	68 44 1e 02 c0       	push   0xc0021e44
c001359b:	56                   	push   esi
c001359c:	e8 9f d2 fe ff       	call   c0000840 <strcat>
c00135a1:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c00135a8:	e8 09 45 ff ff       	call   c0007ab6 <malloc>
c00135ad:	83 c4 0c             	add    esp,0xc
c00135b0:	89 c3                	mov    ebx,eax
c00135b2:	ff 35 90 a4 02 c0    	push   DWORD PTR ds:0xc002a490
c00135b8:	56                   	push   esi
c00135b9:	50                   	push   eax
c00135ba:	e8 19 81 ff ff       	call   c000b6d8 <File::File(char const*, Process*)>
c00135bf:	83 c4 10             	add    esp,0x10
c00135c2:	85 db                	test   ebx,ebx
c00135c4:	74 7e                	je     c0013644 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c00135c6:	51                   	push   ecx
c00135c7:	51                   	push   ecx
c00135c8:	6a 01                	push   0x1
c00135ca:	53                   	push   ebx
c00135cb:	e8 c4 81 ff ff       	call   c000b794 <File::open(FileOpenMode)>
c00135d0:	83 c4 10             	add    esp,0x10
c00135d3:	85 c0                	test   eax,eax
c00135d5:	74 08                	je     c00135df <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa7>
c00135d7:	83 ec 0c             	sub    esp,0xc
c00135da:	8b 03                	mov    eax,DWORD PTR [ebx]
c00135dc:	53                   	push   ebx
c00135dd:	eb 5f                	jmp    c001363e <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c00135df:	52                   	push   edx
c00135e0:	8d 44 24 17          	lea    eax,[esp+0x17]
c00135e4:	50                   	push   eax
c00135e5:	8d 44 24 20          	lea    eax,[esp+0x20]
c00135e9:	50                   	push   eax
c00135ea:	53                   	push   ebx
c00135eb:	e8 a6 84 ff ff       	call   c000ba96 <File::stat(unsigned long long*, bool*)>
c00135f0:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00135f4:	83 c4 10             	add    esp,0x10
c00135f7:	89 c1                	mov    ecx,eax
c00135f9:	0b 4c 24 1c          	or     ecx,DWORD PTR [esp+0x1c]
c00135fd:	74 31                	je     c0013630 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c00135ff:	83 ec 0c             	sub    esp,0xc
c0013602:	50                   	push   eax
c0013603:	e8 ae 44 ff ff       	call   c0007ab6 <malloc>
c0013608:	89 c6                	mov    esi,eax
c001360a:	58                   	pop    eax
c001360b:	8b 03                	mov    eax,DWORD PTR [ebx]
c001360d:	8d 54 24 20          	lea    edx,[esp+0x20]
c0013611:	52                   	push   edx
c0013612:	56                   	push   esi
c0013613:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0013617:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001361b:	53                   	push   ebx
c001361c:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001361f:	83 c4 20             	add    esp,0x20
c0013622:	85 c0                	test   eax,eax
c0013624:	75 0a                	jne    c0013630 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c0013626:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001362a:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c001362e:	74 18                	je     c0013648 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x110>
c0013630:	83 ec 0c             	sub    esp,0xc
c0013633:	53                   	push   ebx
c0013634:	e8 b9 81 ff ff       	call   c000b7f2 <File::close()>
c0013639:	8b 03                	mov    eax,DWORD PTR [ebx]
c001363b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001363e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013641:	83 c4 10             	add    esp,0x10
c0013644:	31 c0                	xor    eax,eax
c0013646:	eb 3b                	jmp    c0013683 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x14b>
c0013648:	83 ec 0c             	sub    esp,0xc
c001364b:	53                   	push   ebx
c001364c:	e8 a1 81 ff ff       	call   c000b7f2 <File::close()>
c0013651:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013653:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013656:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013659:	83 c4 0c             	add    esp,0xc
c001365c:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c0013663:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001366a:	56                   	push   esi
c001366b:	e8 57 fd ff ff       	call   c00133c7 <Reg::findLineFromLoadedData(char*, char*, char*)>
c0013670:	89 34 24             	mov    DWORD PTR [esp],esi
c0013673:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0013677:	e8 4a 44 ff ff       	call   c0007ac6 <free>
c001367c:	83 c4 10             	add    esp,0x10
c001367f:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0013683:	81 c4 20 01 00 00    	add    esp,0x120
c0013689:	5b                   	pop    ebx
c001368a:	5e                   	pop    esi
c001368b:	5f                   	pop    edi
c001368c:	c3                   	ret    

c001368d <Reg::getLine(char*, char*, char*)>:
c001368d:	57                   	push   edi
c001368e:	56                   	push   esi
c001368f:	53                   	push   ebx
c0013690:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013694:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0013698:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001369c:	57                   	push   edi
c001369d:	56                   	push   esi
c001369e:	53                   	push   ebx
c001369f:	68 49 1e 02 c0       	push   0xc0021e49
c00136a4:	e8 8f fe ff ff       	call   c0013538 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c00136a9:	83 c4 10             	add    esp,0x10
c00136ac:	84 c0                	test   al,al
c00136ae:	75 10                	jne    c00136c0 <Reg::getLine(char*, char*, char*)+0x33>
c00136b0:	57                   	push   edi
c00136b1:	56                   	push   esi
c00136b2:	53                   	push   ebx
c00136b3:	68 6e 1e 02 c0       	push   0xc0021e6e
c00136b8:	e8 7b fe ff ff       	call   c0013538 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c00136bd:	83 c4 10             	add    esp,0x10
c00136c0:	5b                   	pop    ebx
c00136c1:	5e                   	pop    esi
c00136c2:	5f                   	pop    edi
c00136c3:	c3                   	ret    

c00136c4 <Reg::readInt(char*, char*, int*)>:
c00136c4:	55                   	push   ebp
c00136c5:	57                   	push   edi
c00136c6:	56                   	push   esi
c00136c7:	53                   	push   ebx
c00136c8:	81 ec f0 00 00 00    	sub    esp,0xf0
c00136ce:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c00136d2:	55                   	push   ebp
c00136d3:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c00136da:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c00136e1:	e8 a7 ff ff ff       	call   c001368d <Reg::getLine(char*, char*, char*)>
c00136e6:	83 c4 10             	add    esp,0x10
c00136e9:	84 c0                	test   al,al
c00136eb:	0f 84 b6 00 00 00    	je     c00137a7 <Reg::readInt(char*, char*, int*)+0xe3>
c00136f1:	0f be 54 24 18       	movsx  edx,BYTE PTR [esp+0x18]
c00136f6:	83 fa 2b             	cmp    edx,0x2b
c00136f9:	74 0c                	je     c0013707 <Reg::readInt(char*, char*, int*)+0x43>
c00136fb:	83 fa 2d             	cmp    edx,0x2d
c00136fe:	75 0e                	jne    c001370e <Reg::readInt(char*, char*, int*)+0x4a>
c0013700:	ba 01 00 00 00       	mov    edx,0x1
c0013705:	eb 0b                	jmp    c0013712 <Reg::readInt(char*, char*, int*)+0x4e>
c0013707:	ba 01 00 00 00       	mov    edx,0x1
c001370c:	eb 02                	jmp    c0013710 <Reg::readInt(char*, char*, int*)+0x4c>
c001370e:	31 d2                	xor    edx,edx
c0013710:	31 c0                	xor    eax,eax
c0013712:	be 0a 00 00 00       	mov    esi,0xa
c0013717:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c001371c:	75 21                	jne    c001373f <Reg::readInt(char*, char*, int*)+0x7b>
c001371e:	0f be 4c 14 19       	movsx  ecx,BYTE PTR [esp+edx*1+0x19]
c0013723:	83 f9 78             	cmp    ecx,0x78
c0013726:	75 0a                	jne    c0013732 <Reg::readInt(char*, char*, int*)+0x6e>
c0013728:	83 c2 02             	add    edx,0x2
c001372b:	be 10 00 00 00       	mov    esi,0x10
c0013730:	eb 0d                	jmp    c001373f <Reg::readInt(char*, char*, int*)+0x7b>
c0013732:	83 f9 62             	cmp    ecx,0x62
c0013735:	75 08                	jne    c001373f <Reg::readInt(char*, char*, int*)+0x7b>
c0013737:	83 c2 02             	add    edx,0x2
c001373a:	be 02 00 00 00       	mov    esi,0x2
c001373f:	01 d5                	add    ebp,edx
c0013741:	31 d2                	xor    edx,edx
c0013743:	0f be 4d 00          	movsx  ecx,BYTE PTR [ebp+0x0]
c0013747:	83 f9 0d             	cmp    ecx,0xd
c001374a:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c001374e:	0f 94 c3             	sete   bl
c0013751:	85 c9                	test   ecx,ecx
c0013753:	89 df                	mov    edi,ebx
c0013755:	0f 94 c3             	sete   bl
c0013758:	09 df                	or     edi,ebx
c001375a:	89 fb                	mov    ebx,edi
c001375c:	83 e7 01             	and    edi,0x1
c001375f:	75 35                	jne    c0013796 <Reg::readInt(char*, char*, int*)+0xd2>
c0013761:	0f af d6             	imul   edx,esi
c0013764:	83 fe 10             	cmp    esi,0x10
c0013767:	75 26                	jne    c001378f <Reg::readInt(char*, char*, int*)+0xcb>
c0013769:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001376d:	83 ef 41             	sub    edi,0x41
c0013770:	89 fb                	mov    ebx,edi
c0013772:	80 fb 05             	cmp    bl,0x5
c0013775:	77 06                	ja     c001377d <Reg::readInt(char*, char*, int*)+0xb9>
c0013777:	8d 54 0a c9          	lea    edx,[edx+ecx*1-0x37]
c001377b:	eb 16                	jmp    c0013793 <Reg::readInt(char*, char*, int*)+0xcf>
c001377d:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0013781:	83 eb 61             	sub    ebx,0x61
c0013784:	80 fb 05             	cmp    bl,0x5
c0013787:	77 06                	ja     c001378f <Reg::readInt(char*, char*, int*)+0xcb>
c0013789:	8d 54 0a a9          	lea    edx,[edx+ecx*1-0x57]
c001378d:	eb 04                	jmp    c0013793 <Reg::readInt(char*, char*, int*)+0xcf>
c001378f:	8d 54 0a d0          	lea    edx,[edx+ecx*1-0x30]
c0013793:	45                   	inc    ebp
c0013794:	eb ad                	jmp    c0013743 <Reg::readInt(char*, char*, int*)+0x7f>
c0013796:	84 c0                	test   al,al
c0013798:	74 02                	je     c001379c <Reg::readInt(char*, char*, int*)+0xd8>
c001379a:	f7 da                	neg    edx
c001379c:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c00137a3:	89 10                	mov    DWORD PTR [eax],edx
c00137a5:	88 d8                	mov    al,bl
c00137a7:	81 c4 ec 00 00 00    	add    esp,0xec
c00137ad:	5b                   	pop    ebx
c00137ae:	5e                   	pop    esi
c00137af:	5f                   	pop    edi
c00137b0:	5d                   	pop    ebp
c00137b1:	c3                   	ret    

c00137b2 <Reg::readString(char*, char*, char*, int)>:
c00137b2:	57                   	push   edi
c00137b3:	56                   	push   esi
c00137b4:	53                   	push   ebx
c00137b5:	81 ec d4 00 00 00    	sub    esp,0xd4
c00137bb:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c00137c2:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c00137c6:	57                   	push   edi
c00137c7:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c00137ce:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c00137d5:	e8 b3 fe ff ff       	call   c001368d <Reg::getLine(char*, char*, char*)>
c00137da:	83 c4 10             	add    esp,0x10
c00137dd:	89 c6                	mov    esi,eax
c00137df:	84 c0                	test   al,al
c00137e1:	74 44                	je     c0013827 <Reg::readString(char*, char*, char*, int)+0x75>
c00137e3:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c00137ea:	31 c0                	xor    eax,eax
c00137ec:	4a                   	dec    edx
c00137ed:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c00137f0:	84 c9                	test   cl,cl
c00137f2:	74 0f                	je     c0013803 <Reg::readString(char*, char*, char*, int)+0x51>
c00137f4:	39 c2                	cmp    edx,eax
c00137f6:	7e 0b                	jle    c0013803 <Reg::readString(char*, char*, char*, int)+0x51>
c00137f8:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c00137fb:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c0013800:	40                   	inc    eax
c0013801:	eb ea                	jmp    c00137ed <Reg::readString(char*, char*, char*, int)+0x3b>
c0013803:	83 ec 0c             	sub    esp,0xc
c0013806:	53                   	push   ebx
c0013807:	e8 64 cd fe ff       	call   c0000570 <strlen>
c001380c:	83 c4 10             	add    esp,0x10
c001380f:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c0013814:	75 11                	jne    c0013827 <Reg::readString(char*, char*, char*, int)+0x75>
c0013816:	83 ec 0c             	sub    esp,0xc
c0013819:	53                   	push   ebx
c001381a:	e8 51 cd fe ff       	call   c0000570 <strlen>
c001381f:	83 c4 10             	add    esp,0x10
c0013822:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c0013827:	81 c4 d0 00 00 00    	add    esp,0xd0
c001382d:	89 f0                	mov    eax,esi
c001382f:	5b                   	pop    ebx
c0013830:	5e                   	pop    esi
c0013831:	5f                   	pop    edi
c0013832:	c3                   	ret    

c0013833 <Reg::readBool(char*, char*, bool*)>:
c0013833:	83 ec 20             	sub    esp,0x20
c0013836:	8d 44 24 10          	lea    eax,[esp+0x10]
c001383a:	50                   	push   eax
c001383b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001383f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013843:	e8 7c fe ff ff       	call   c00136c4 <Reg::readInt(char*, char*, int*)>
c0013848:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001384d:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0013851:	0f 95 02             	setne  BYTE PTR [edx]
c0013854:	83 c4 2c             	add    esp,0x2c
c0013857:	c3                   	ret    

c0013858 <Reg::readBoolWithDefault(char*, char*, bool)>:
c0013858:	53                   	push   ebx
c0013859:	83 ec 1c             	sub    esp,0x1c
c001385c:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c0013860:	8d 44 24 13          	lea    eax,[esp+0x13]
c0013864:	50                   	push   eax
c0013865:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013869:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001386d:	e8 c1 ff ff ff       	call   c0013833 <Reg::readBool(char*, char*, bool*)>
c0013872:	83 c4 10             	add    esp,0x10
c0013875:	84 c0                	test   al,al
c0013877:	74 04                	je     c001387d <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c0013879:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c001387d:	88 d8                	mov    al,bl
c001387f:	83 c4 18             	add    esp,0x18
c0013882:	5b                   	pop    ebx
c0013883:	c3                   	ret    

c0013884 <Reg::readIntWithDefault(char*, char*, int)>:
c0013884:	53                   	push   ebx
c0013885:	83 ec 1c             	sub    esp,0x1c
c0013888:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001388c:	8d 44 24 10          	lea    eax,[esp+0x10]
c0013890:	50                   	push   eax
c0013891:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013895:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013899:	e8 26 fe ff ff       	call   c00136c4 <Reg::readInt(char*, char*, int*)>
c001389e:	83 c4 10             	add    esp,0x10
c00138a1:	84 c0                	test   al,al
c00138a3:	74 04                	je     c00138a9 <Reg::readIntWithDefault(char*, char*, int)+0x25>
c00138a5:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00138a9:	89 d8                	mov    eax,ebx
c00138ab:	83 c4 18             	add    esp,0x18
c00138ae:	5b                   	pop    ebx
c00138af:	c3                   	ret    

c00138b0 <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c00138b0:	57                   	push   edi
c00138b1:	56                   	push   esi
c00138b2:	56                   	push   esi
c00138b3:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00138b7:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00138bb:	56                   	push   esi
c00138bc:	57                   	push   edi
c00138bd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00138c1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00138c5:	e8 e8 fe ff ff       	call   c00137b2 <Reg::readString(char*, char*, char*, int)>
c00138ca:	83 c4 10             	add    esp,0x10
c00138cd:	84 c0                	test   al,al
c00138cf:	75 1a                	jne    c00138eb <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x3b>
c00138d1:	51                   	push   ecx
c00138d2:	56                   	push   esi
c00138d3:	6a 00                	push   0x0
c00138d5:	57                   	push   edi
c00138d6:	e8 15 cc fe ff       	call   c00004f0 <memset>
c00138db:	8d 4e ff             	lea    ecx,[esi-0x1]
c00138de:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00138e2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00138e4:	83 c4 10             	add    esp,0x10
c00138e7:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c00138eb:	89 f8                	mov    eax,edi
c00138ed:	5a                   	pop    edx
c00138ee:	5e                   	pop    esi
c00138ef:	5f                   	pop    edi
c00138f0:	c3                   	ret    

c00138f1 <SysEject(regs*)>:
c00138f1:	83 ec 0c             	sub    esp,0xc
c00138f4:	83 ca ff             	or     edx,0xffffffff
c00138f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00138fb:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c00138fe:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0013903:	83 e9 41             	sub    ecx,0x41
c0013906:	83 f9 19             	cmp    ecx,0x19
c0013909:	77 18                	ja     c0013923 <SysEject(regs*)+0x32>
c001390b:	8b 0c 8d e0 94 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd6b20]
c0013912:	85 c9                	test   ecx,ecx
c0013914:	74 0d                	je     c0013923 <SysEject(regs*)+0x32>
c0013916:	83 ec 0c             	sub    esp,0xc
c0013919:	51                   	push   ecx
c001391a:	e8 3b a0 ff ff       	call   c000d95a <LogicalDisk::eject()>
c001391f:	83 c4 10             	add    esp,0x10
c0013922:	99                   	cdq    
c0013923:	83 c4 0c             	add    esp,0xc
c0013926:	c3                   	ret    

c0013927 <SysExit(regs*)>:
c0013927:	83 ec 18             	sub    esp,0x18
c001392a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001392e:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0013931:	e8 16 2b 00 00       	call   c001644c <terminateTask(int)>
c0013936:	83 c8 ff             	or     eax,0xffffffff
c0013939:	83 c4 1c             	add    esp,0x1c
c001393c:	89 c2                	mov    edx,eax
c001393e:	c3                   	ret    

c001393f <SysGetCwd(regs*)>:
c001393f:	83 ec 10             	sub    esp,0x10
c0013942:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013946:	ff 70 28             	push   DWORD PTR [eax+0x28]
c0013949:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001394c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013951:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0013954:	e8 75 7b ff ff       	call   c000b4ce <Fs::getcwd(Process*, char*, int)>
c0013959:	83 c4 1c             	add    esp,0x1c
c001395c:	99                   	cdq    
c001395d:	c3                   	ret    

c001395e <SysGetPID(regs*)>:
c001395e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013963:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013966:	8b 00                	mov    eax,DWORD PTR [eax]
c0013968:	99                   	cdq    
c0013969:	c3                   	ret    

c001396a <SysGetRAMData(regs*)>:
c001396a:	8b 0d e8 5e 02 c0    	mov    ecx,DWORD PTR ds:0xc0025ee8
c0013970:	69 05 e4 5e 02 c0 c8 00 00 00 	imul   eax,DWORD PTR ds:0xc0025ee4,0xc8
c001397a:	99                   	cdq    
c001397b:	f7 f9                	idiv   ecx
c001397d:	c1 e0 18             	shl    eax,0x18
c0013980:	09 c8                	or     eax,ecx
c0013982:	99                   	cdq    
c0013983:	c3                   	ret    

c0013984 <SysGetVGAPtr(regs*)>:
c0013984:	55                   	push   ebp
c0013985:	57                   	push   edi
c0013986:	56                   	push   esi
c0013987:	53                   	push   ebx
c0013988:	83 ec 18             	sub    esp,0x18
c001398b:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001398f:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0013992:	e8 81 25 00 00       	call   c0015f18 <Thr::processFromPID(int)>
c0013997:	83 c4 10             	add    esp,0x10
c001399a:	89 c1                	mov    ecx,eax
c001399c:	b8 01 00 00 00       	mov    eax,0x1
c00139a1:	85 c9                	test   ecx,ecx
c00139a3:	74 57                	je     c00139fc <SysGetVGAPtr(regs*)+0x78>
c00139a5:	8b a9 06 05 00 00    	mov    ebp,DWORD PTR [ecx+0x506]
c00139ab:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c00139af:	74 0c                	je     c00139bd <SysGetVGAPtr(regs*)+0x39>
c00139b1:	83 ec 0c             	sub    esp,0xc
c00139b4:	55                   	push   ebp
c00139b5:	e8 9f 4d ff ff       	call   c0008759 <setActiveTerminal(VgaText*)>
c00139ba:	83 c4 10             	add    esp,0x10
c00139bd:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
c00139c0:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c00139c3:	b9 a0 0f 00 00       	mov    ecx,0xfa0
c00139c8:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00139ca:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c00139cd:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00139d0:	89 90 a0 0f 00 00    	mov    DWORD PTR [eax+0xfa0],edx
c00139d6:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00139d9:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c00139dc:	89 90 a4 0f 00 00    	mov    DWORD PTR [eax+0xfa4],edx
c00139e2:	50                   	push   eax
c00139e3:	50                   	push   eax
c00139e4:	68 89 1e 02 c0       	push   0xc0021e89
c00139e9:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00139ec:	05 a8 0f 00 00       	add    eax,0xfa8
c00139f1:	50                   	push   eax
c00139f2:	e8 49 cc fe ff       	call   c0000640 <strcpy>
c00139f7:	83 c4 10             	add    esp,0x10
c00139fa:	31 c0                	xor    eax,eax
c00139fc:	83 c4 0c             	add    esp,0xc
c00139ff:	31 d2                	xor    edx,edx
c0013a01:	5b                   	pop    ebx
c0013a02:	5e                   	pop    esi
c0013a03:	5f                   	pop    edi
c0013a04:	5d                   	pop    ebp
c0013a05:	c3                   	ret    
c0013a06:	66 90                	xchg   ax,ax

c0013a08 <SysKill(regs*)>:
c0013a08:	53                   	push   ebx
c0013a09:	83 ec 08             	sub    esp,0x8
c0013a0c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013a10:	83 7b 28 ff          	cmp    DWORD PTR [ebx+0x28],0xffffffff
c0013a14:	75 16                	jne    c0013a2c <SysKill(regs*)+0x24>
c0013a16:	83 ec 0c             	sub    esp,0xc
c0013a19:	68 93 1e 02 c0       	push   0xc0021e93
c0013a1e:	e8 ca d7 ff ff       	call   c00111ed <KePanic(char const*)>
c0013a23:	83 c4 10             	add    esp,0x10
c0013a26:	e9 89 00 00 00       	jmp    c0013ab4 <SysKill(regs*)+0xac>
c0013a2b:	90                   	nop
c0013a2c:	83 ec 0c             	sub    esp,0xc
c0013a2f:	68 84 a4 02 c0       	push   0xc002a484
c0013a34:	e8 d3 bc 00 00       	call   c001f70c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0013a39:	8d 76 00             	lea    esi,[esi+0x0]
c0013a3c:	83 c4 10             	add    esp,0x10
c0013a3f:	85 c0                	test   eax,eax
c0013a41:	74 19                	je     c0013a5c <SysKill(regs*)+0x54>
c0013a43:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c0013a46:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0013a49:	39 0a                	cmp    DWORD PTR [edx],ecx
c0013a4b:	74 33                	je     c0013a80 <SysKill(regs*)+0x78>
c0013a4d:	52                   	push   edx
c0013a4e:	52                   	push   edx
c0013a4f:	50                   	push   eax
c0013a50:	68 84 a4 02 c0       	push   0xc002a484
c0013a55:	e8 d2 bf 00 00       	call   c001fa2c <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c0013a5a:	eb e0                	jmp    c0013a3c <SysKill(regs*)+0x34>
c0013a5c:	83 ec 0c             	sub    esp,0xc
c0013a5f:	68 78 a4 02 c0       	push   0xc002a478
c0013a64:	e8 a3 bc 00 00       	call   c001f70c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0013a69:	8d 76 00             	lea    esi,[esi+0x0]
c0013a6c:	83 c4 10             	add    esp,0x10
c0013a6f:	85 c0                	test   eax,eax
c0013a71:	74 41                	je     c0013ab4 <SysKill(regs*)+0xac>
c0013a73:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c0013a76:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0013a79:	39 0a                	cmp    DWORD PTR [edx],ecx
c0013a7b:	75 27                	jne    c0013aa4 <SysKill(regs*)+0x9c>
c0013a7d:	8d 76 00             	lea    esi,[esi+0x0]
c0013a80:	51                   	push   ecx
c0013a81:	51                   	push   ecx
c0013a82:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0013a85:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013a8a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013a8d:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c0013a93:	e8 f6 db ff ff       	call   c001168e <KeRaiseSignal(SigHandlerBlock*, int)>
c0013a98:	83 c4 10             	add    esp,0x10
c0013a9b:	31 c0                	xor    eax,eax
c0013a9d:	31 d2                	xor    edx,edx
c0013a9f:	eb 1b                	jmp    c0013abc <SysKill(regs*)+0xb4>
c0013aa1:	8d 76 00             	lea    esi,[esi+0x0]
c0013aa4:	52                   	push   edx
c0013aa5:	52                   	push   edx
c0013aa6:	50                   	push   eax
c0013aa7:	68 78 a4 02 c0       	push   0xc002a478
c0013aac:	e8 7b bf 00 00       	call   c001fa2c <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c0013ab1:	eb b9                	jmp    c0013a6c <SysKill(regs*)+0x64>
c0013ab3:	90                   	nop
c0013ab4:	83 c8 ff             	or     eax,0xffffffff
c0013ab7:	89 c2                	mov    edx,eax
c0013ab9:	8d 76 00             	lea    esi,[esi+0x0]
c0013abc:	83 c4 08             	add    esp,0x8
c0013abf:	5b                   	pop    ebx
c0013ac0:	c3                   	ret    

c0013ac1 <SysLoadDLL(regs*)>:
c0013ac1:	56                   	push   esi
c0013ac2:	53                   	push   ebx
c0013ac3:	31 d2                	xor    edx,edx
c0013ac5:	51                   	push   ecx
c0013ac6:	b8 01 00 00 00       	mov    eax,0x1
c0013acb:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013acf:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c0013ad3:	0f 84 8c 00 00 00    	je     c0013b65 <SysLoadDLL(regs*)+0xa4>
c0013ad9:	83 ec 0c             	sub    esp,0xc
c0013adc:	68 14 01 00 00       	push   0x114
c0013ae1:	e8 d0 3f ff ff       	call   c0007ab6 <malloc>
c0013ae6:	83 c4 0c             	add    esp,0xc
c0013ae9:	89 c3                	mov    ebx,eax
c0013aeb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013af0:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0013af3:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0013af6:	53                   	push   ebx
c0013af7:	e8 dc 7b ff ff       	call   c000b6d8 <File::File(char const*, Process*)>
c0013afc:	83 c4 10             	add    esp,0x10
c0013aff:	31 d2                	xor    edx,edx
c0013b01:	b8 02 00 00 00       	mov    eax,0x2
c0013b06:	85 db                	test   ebx,ebx
c0013b08:	74 5b                	je     c0013b65 <SysLoadDLL(regs*)+0xa4>
c0013b0a:	83 ec 0c             	sub    esp,0xc
c0013b0d:	53                   	push   ebx
c0013b0e:	e8 45 7f ff ff       	call   c000ba58 <File::exists()>
c0013b13:	83 c4 10             	add    esp,0x10
c0013b16:	84 c0                	test   al,al
c0013b18:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013b1a:	75 11                	jne    c0013b2d <SysLoadDLL(regs*)+0x6c>
c0013b1c:	83 ec 0c             	sub    esp,0xc
c0013b1f:	53                   	push   ebx
c0013b20:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013b23:	83 c4 10             	add    esp,0x10
c0013b26:	b8 03 00 00 00       	mov    eax,0x3
c0013b2b:	eb 36                	jmp    c0013b63 <SysLoadDLL(regs*)+0xa2>
c0013b2d:	83 ec 0c             	sub    esp,0xc
c0013b30:	53                   	push   ebx
c0013b31:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013b34:	58                   	pop    eax
c0013b35:	5a                   	pop    edx
c0013b36:	6a 00                	push   0x0
c0013b38:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0013b3b:	e8 0e 15 00 00       	call   c001504e <Thr::loadDLL(char const*, bool)>
c0013b40:	83 c4 10             	add    esp,0x10
c0013b43:	89 c1                	mov    ecx,eax
c0013b45:	31 d2                	xor    edx,edx
c0013b47:	b8 04 00 00 00       	mov    eax,0x4
c0013b4c:	85 c9                	test   ecx,ecx
c0013b4e:	74 15                	je     c0013b65 <SysLoadDLL(regs*)+0xa4>
c0013b50:	53                   	push   ebx
c0013b51:	53                   	push   ebx
c0013b52:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0013b58:	51                   	push   ecx
c0013b59:	e8 21 17 00 00       	call   c001527f <Thr::executeDLL(unsigned long, void*)>
c0013b5e:	83 c4 10             	add    esp,0x10
c0013b61:	31 c0                	xor    eax,eax
c0013b63:	31 d2                	xor    edx,edx
c0013b65:	59                   	pop    ecx
c0013b66:	5b                   	pop    ebx
c0013b67:	5e                   	pop    esi
c0013b68:	c3                   	ret    

c0013b69 <SysRead(regs*)>:
c0013b69:	57                   	push   edi
c0013b6a:	56                   	push   esi
c0013b6b:	53                   	push   ebx
c0013b6c:	83 ec 10             	sub    esp,0x10
c0013b6f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0013b73:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0013b76:	83 f8 02             	cmp    eax,0x2
c0013b79:	77 10                	ja     c0013b8b <SysRead(regs*)+0x22>
c0013b7b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013b80:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013b83:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c0013b89:	eb 0e                	jmp    c0013b99 <SysRead(regs*)+0x30>
c0013b8b:	83 ec 0c             	sub    esp,0xc
c0013b8e:	50                   	push   eax
c0013b8f:	e8 1f 59 ff ff       	call   c00094b3 <KeGetFileFromDescriptor(int)>
c0013b94:	83 c4 10             	add    esp,0x10
c0013b97:	89 c1                	mov    ecx,eax
c0013b99:	83 c8 ff             	or     eax,0xffffffff
c0013b9c:	85 c9                	test   ecx,ecx
c0013b9e:	89 c2                	mov    edx,eax
c0013ba0:	74 28                	je     c0013bca <SysRead(regs*)+0x61>
c0013ba2:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0013baa:	31 ff                	xor    edi,edi
c0013bac:	83 ec 0c             	sub    esp,0xc
c0013baf:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013bb1:	8d 54 24 18          	lea    edx,[esp+0x18]
c0013bb5:	52                   	push   edx
c0013bb6:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0013bb9:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c0013bbc:	57                   	push   edi
c0013bbd:	56                   	push   esi
c0013bbe:	51                   	push   ecx
c0013bbf:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013bc2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0013bc6:	83 c4 20             	add    esp,0x20
c0013bc9:	99                   	cdq    
c0013bca:	83 c4 10             	add    esp,0x10
c0013bcd:	5b                   	pop    ebx
c0013bce:	5e                   	pop    esi
c0013bcf:	5f                   	pop    edi
c0013bd0:	c3                   	ret    

c0013bd1 <SysRegisterSignal(regs*)>:
c0013bd1:	83 ec 18             	sub    esp,0x18
c0013bd4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013bd8:	6a 00                	push   0x0
c0013bda:	6a 00                	push   0x0
c0013bdc:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0013bdf:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0013be2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013be7:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013bea:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c0013bf0:	e8 63 da ff ff       	call   c0011658 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)>
c0013bf5:	83 c4 2c             	add    esp,0x2c
c0013bf8:	99                   	cdq    
c0013bf9:	c3                   	ret    

c0013bfa <SysRegistryGetTypeFromPath(regs*)>:
c0013bfa:	57                   	push   edi
c0013bfb:	56                   	push   esi
c0013bfc:	53                   	push   ebx
c0013bfd:	81 ec 38 01 00 00    	sub    esp,0x138
c0013c03:	8b 9c 24 48 01 00 00 	mov    ebx,DWORD PTR [esp+0x148]
c0013c0a:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0013c0d:	68 b4 1e 02 c0       	push   0xc0021eb4
c0013c12:	e8 2e 6d ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0013c17:	5a                   	pop    edx
c0013c18:	59                   	pop    ecx
c0013c19:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0013c1c:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0013c1f:	e8 4d f6 ff ff       	call   c0013271 <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c0013c24:	5f                   	pop    edi
c0013c25:	89 c6                	mov    esi,eax
c0013c27:	5a                   	pop    edx
c0013c28:	50                   	push   eax
c0013c29:	68 d4 1e 02 c0       	push   0xc0021ed4
c0013c2e:	e8 12 6d ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0013c33:	83 c4 10             	add    esp,0x10
c0013c36:	85 f6                	test   esi,esi
c0013c38:	74 28                	je     c0013c62 <SysRegistryGetTypeFromPath(regs*)+0x68>
c0013c3a:	50                   	push   eax
c0013c3b:	8d 7c 24 08          	lea    edi,[esp+0x8]
c0013c3f:	57                   	push   edi
c0013c40:	56                   	push   esi
c0013c41:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0013c44:	e8 0c f2 ff ff       	call   c0012e55 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c0013c49:	83 c4 0c             	add    esp,0xc
c0013c4c:	89 c3                	mov    ebx,eax
c0013c4e:	57                   	push   edi
c0013c4f:	50                   	push   eax
c0013c50:	68 dc 1e 02 c0       	push   0xc0021edc
c0013c55:	e8 eb 6c ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0013c5a:	89 d8                	mov    eax,ebx
c0013c5c:	83 c4 10             	add    esp,0x10
c0013c5f:	99                   	cdq    
c0013c60:	eb 05                	jmp    c0013c67 <SysRegistryGetTypeFromPath(regs*)+0x6d>
c0013c62:	83 c8 ff             	or     eax,0xffffffff
c0013c65:	89 c2                	mov    edx,eax
c0013c67:	81 c4 30 01 00 00    	add    esp,0x130
c0013c6d:	5b                   	pop    ebx
c0013c6e:	5e                   	pop    esi
c0013c6f:	5f                   	pop    edi
c0013c70:	c3                   	ret    

c0013c71 <SysRegistryReadExtent(regs*)>:
c0013c71:	83 ec 1c             	sub    esp,0x1c
c0013c74:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0013c78:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c0013c7b:	8b 4a 20             	mov    ecx,DWORD PTR [edx+0x20]
c0013c7e:	85 c0                	test   eax,eax
c0013c80:	79 1f                	jns    c0013ca1 <SysRegistryReadExtent(regs*)+0x30>
c0013c82:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0013c87:	52                   	push   edx
c0013c88:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0013c8c:	52                   	push   edx
c0013c8d:	50                   	push   eax
c0013c8e:	51                   	push   ecx
c0013c8f:	e8 b3 f0 ff ff       	call   c0012d47 <CmGetInteger(Reghive_Tag*, int, unsigned long long*)>
c0013c94:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013c98:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0013c9c:	83 c4 10             	add    esp,0x10
c0013c9f:	eb 14                	jmp    c0013cb5 <SysRegistryReadExtent(regs*)+0x44>
c0013ca1:	83 ec 04             	sub    esp,0x4
c0013ca4:	ff 72 24             	push   DWORD PTR [edx+0x24]
c0013ca7:	50                   	push   eax
c0013ca8:	51                   	push   ecx
c0013ca9:	e8 33 eb ff ff       	call   c00127e1 <CmGetString(Reghive_Tag*, int, char*)>
c0013cae:	83 c4 10             	add    esp,0x10
c0013cb1:	31 c0                	xor    eax,eax
c0013cb3:	31 d2                	xor    edx,edx
c0013cb5:	83 c4 1c             	add    esp,0x1c
c0013cb8:	c3                   	ret    

c0013cb9 <SysRegistryPathToExtentLookup(regs*)>:
c0013cb9:	53                   	push   ebx
c0013cba:	83 ec 10             	sub    esp,0x10
c0013cbd:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013cc1:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0013cc4:	68 f2 1e 02 c0       	push   0xc0021ef2
c0013cc9:	e8 77 6c ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0013cce:	58                   	pop    eax
c0013ccf:	5a                   	pop    edx
c0013cd0:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0013cd3:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0013cd6:	e8 96 f5 ff ff       	call   c0013271 <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c0013cdb:	83 c4 18             	add    esp,0x18
c0013cde:	99                   	cdq    
c0013cdf:	5b                   	pop    ebx
c0013ce0:	c3                   	ret    

c0013ce1 <SysRegistryEnterDirectory(regs*)>:
c0013ce1:	53                   	push   ebx
c0013ce2:	83 ec 10             	sub    esp,0x10
c0013ce5:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013ce9:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0013cec:	68 15 1f 02 c0       	push   0xc0021f15
c0013cf1:	e8 4f 6c ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0013cf6:	58                   	pop    eax
c0013cf7:	5a                   	pop    edx
c0013cf8:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0013cfb:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0013cfe:	e8 55 eb ff ff       	call   c0012858 <CmEnterDirectory(Reghive_Tag*, int)>
c0013d03:	83 c4 18             	add    esp,0x18
c0013d06:	99                   	cdq    
c0013d07:	5b                   	pop    ebx
c0013d08:	c3                   	ret    

c0013d09 <SysRegistryGetNext(regs*)>:
c0013d09:	53                   	push   ebx
c0013d0a:	83 ec 10             	sub    esp,0x10
c0013d0d:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013d11:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0013d14:	68 33 1f 02 c0       	push   0xc0021f33
c0013d19:	e8 27 6c ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0013d1e:	58                   	pop    eax
c0013d1f:	5a                   	pop    edx
c0013d20:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0013d23:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0013d26:	e8 6c eb ff ff       	call   c0012897 <CmGetNext(Reghive_Tag*, int)>
c0013d2b:	83 c4 18             	add    esp,0x18
c0013d2e:	99                   	cdq    
c0013d2f:	5b                   	pop    ebx
c0013d30:	c3                   	ret    

c0013d31 <SysRegistryGetNameAndTypeFromExtent(regs*)>:
c0013d31:	57                   	push   edi
c0013d32:	56                   	push   esi
c0013d33:	53                   	push   ebx
c0013d34:	81 ec 34 01 00 00    	sub    esp,0x134
c0013d3a:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c0013d41:	8d 7c 24 08          	lea    edi,[esp+0x8]
c0013d45:	57                   	push   edi
c0013d46:	ff 76 28             	push   DWORD PTR [esi+0x28]
c0013d49:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0013d4c:	e8 04 f1 ff ff       	call   c0012e55 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c0013d51:	89 c3                	mov    ebx,eax
c0013d53:	58                   	pop    eax
c0013d54:	5a                   	pop    edx
c0013d55:	57                   	push   edi
c0013d56:	ff 76 24             	push   DWORD PTR [esi+0x24]
c0013d59:	e8 e2 c8 fe ff       	call   c0000640 <strcpy>
c0013d5e:	89 d8                	mov    eax,ebx
c0013d60:	81 c4 40 01 00 00    	add    esp,0x140
c0013d66:	99                   	cdq    
c0013d67:	5b                   	pop    ebx
c0013d68:	5e                   	pop    esi
c0013d69:	5f                   	pop    edi
c0013d6a:	c3                   	ret    

c0013d6b <SysRegistryOpen(regs*)>:
c0013d6b:	83 ec 18             	sub    esp,0x18
c0013d6e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013d72:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0013d75:	e8 f7 e8 ff ff       	call   c0012671 <CmOpen(char const*)>
c0013d7a:	83 c4 1c             	add    esp,0x1c
c0013d7d:	99                   	cdq    
c0013d7e:	c3                   	ret    

c0013d7f <SysRegistryClose(regs*)>:
c0013d7f:	83 ec 18             	sub    esp,0x18
c0013d82:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013d86:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0013d89:	e8 01 ea ff ff       	call   c001278f <CmClose(Reghive_Tag*)>
c0013d8e:	31 c0                	xor    eax,eax
c0013d90:	31 d2                	xor    edx,edx
c0013d92:	83 c4 1c             	add    esp,0x1c
c0013d95:	c3                   	ret    

c0013d96 <SysSbrk(regs*)>:
c0013d96:	56                   	push   esi
c0013d97:	53                   	push   ebx
c0013d98:	50                   	push   eax
c0013d99:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013d9e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013da2:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013da5:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c0013da8:	8b 88 12 05 00 00    	mov    ecx,DWORD PTR [eax+0x512]
c0013dae:	85 db                	test   ebx,ebx
c0013db0:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c0013db3:	74 02                	je     c0013db7 <SysSbrk(regs*)+0x21>
c0013db5:	79 06                	jns    c0013dbd <SysSbrk(regs*)+0x27>
c0013db7:	89 f0                	mov    eax,esi
c0013db9:	31 d2                	xor    edx,edx
c0013dbb:	eb 2a                	jmp    c0013de7 <SysSbrk(regs*)+0x51>
c0013dbd:	83 c8 ff             	or     eax,0xffffffff
c0013dc0:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c0013dc6:	89 c2                	mov    edx,eax
c0013dc8:	77 1d                	ja     c0013de7 <SysSbrk(regs*)+0x51>
c0013dca:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c0013dd0:	50                   	push   eax
c0013dd1:	c1 ea 0c             	shr    edx,0xc
c0013dd4:	68 07 0c 00 00       	push   0xc07
c0013dd9:	52                   	push   edx
c0013dda:	51                   	push   ecx
c0013ddb:	e8 44 60 ff ff       	call   c0009e24 <VAS::allocatePages(int, int)>
c0013de0:	89 f0                	mov    eax,esi
c0013de2:	31 d2                	xor    edx,edx
c0013de4:	83 c4 10             	add    esp,0x10
c0013de7:	59                   	pop    ecx
c0013de8:	5b                   	pop    ebx
c0013de9:	5e                   	pop    esi
c0013dea:	c3                   	ret    

c0013deb <SysSetCwd(regs*)>:
c0013deb:	83 ec 14             	sub    esp,0x14
c0013dee:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013df2:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0013df5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013dfa:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0013dfd:	e8 f5 7c ff ff       	call   c000baf7 <Fs::setcwd(Process*, char*)>
c0013e02:	83 c4 1c             	add    esp,0x1c
c0013e05:	99                   	cdq    
c0013e06:	c3                   	ret    

c0013e07 <SysSetTime(regs*)>:
c0013e07:	55                   	push   ebp
c0013e08:	31 c9                	xor    ecx,ecx
c0013e0a:	57                   	push   edi
c0013e0b:	bd 0c 00 00 00       	mov    ebp,0xc
c0013e10:	56                   	push   esi
c0013e11:	53                   	push   ebx
c0013e12:	31 db                	xor    ebx,ebx
c0013e14:	83 ec 10             	sub    esp,0x10
c0013e17:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0013e1b:	8b 72 20             	mov    esi,DWORD PTR [edx+0x20]
c0013e1e:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c0013e21:	8b 7a 24             	mov    edi,DWORD PTR [edx+0x24]
c0013e24:	89 c2                	mov    edx,eax
c0013e26:	81 ef 6c 07 00 00    	sub    edi,0x76c
c0013e2c:	83 e2 1f             	and    edx,0x1f
c0013e2f:	c1 e7 10             	shl    edi,0x10
c0013e32:	42                   	inc    edx
c0013e33:	c1 e8 05             	shr    eax,0x5
c0013e36:	88 d1                	mov    cl,dl
c0013e38:	31 d2                	xor    edx,edx
c0013e3a:	f7 f5                	div    ebp
c0013e3c:	89 dd                	mov    ebp,ebx
c0013e3e:	88 d5                	mov    ch,dl
c0013e40:	81 e5 ff ff 00 ff    	and    ebp,0xff00ffff
c0013e46:	0f b7 c1             	movzx  eax,cx
c0013e49:	31 d2                	xor    edx,edx
c0013e4b:	09 f8                	or     eax,edi
c0013e4d:	bf 3c 00 00 00       	mov    edi,0x3c
c0013e52:	89 c1                	mov    ecx,eax
c0013e54:	89 f0                	mov    eax,esi
c0013e56:	f7 f7                	div    edi
c0013e58:	c1 e2 10             	shl    edx,0x10
c0013e5b:	09 d5                	or     ebp,edx
c0013e5d:	31 d2                	xor    edx,edx
c0013e5f:	89 eb                	mov    ebx,ebp
c0013e61:	f7 f7                	div    edi
c0013e63:	bf 10 0e 00 00       	mov    edi,0xe10
c0013e68:	88 d7                	mov    bh,dl
c0013e6a:	89 f0                	mov    eax,esi
c0013e6c:	31 d2                	xor    edx,edx
c0013e6e:	f7 f7                	div    edi
c0013e70:	bf 18 00 00 00       	mov    edi,0x18
c0013e75:	31 d2                	xor    edx,edx
c0013e77:	f7 f7                	div    edi
c0013e79:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0013e7e:	88 d3                	mov    bl,dl
c0013e80:	53                   	push   ebx
c0013e81:	51                   	push   ecx
c0013e82:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c0013e88:	e8 69 84 ff ff       	call   c000c2f6 <Clock::setTimeInDatetimeLocal(datetime_t)>
c0013e8d:	83 c4 1c             	add    esp,0x1c
c0013e90:	83 f0 01             	xor    eax,0x1
c0013e93:	5b                   	pop    ebx
c0013e94:	0f b6 c0             	movzx  eax,al
c0013e97:	5e                   	pop    esi
c0013e98:	31 d2                	xor    edx,edx
c0013e9a:	5f                   	pop    edi
c0013e9b:	5d                   	pop    ebp
c0013e9c:	c3                   	ret    

c0013e9d <SysTimezone(regs*)>:
c0013e9d:	53                   	push   ebx
c0013e9e:	83 ec 08             	sub    esp,0x8
c0013ea1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013ea5:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c0013ea9:	75 17                	jne    c0013ec2 <SysTimezone(regs*)+0x25>
c0013eab:	83 ec 0c             	sub    esp,0xc
c0013eae:	68 4a 1f 02 c0       	push   0xc0021f4a
c0013eb3:	e8 8d 6a ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0013eb8:	83 c8 ff             	or     eax,0xffffffff
c0013ebb:	83 c4 10             	add    esp,0x10
c0013ebe:	89 c2                	mov    edx,eax
c0013ec0:	eb 20                	jmp    c0013ee2 <SysTimezone(regs*)+0x45>
c0013ec2:	83 ec 0c             	sub    esp,0xc
c0013ec5:	68 5f 1f 02 c0       	push   0xc0021f5f
c0013eca:	e8 76 6a ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0013ecf:	58                   	pop    eax
c0013ed0:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0013ed3:	e8 88 81 ff ff       	call   c000c060 <User::loadClockSettings(int)>
c0013ed8:	83 c4 10             	add    esp,0x10
c0013edb:	b8 01 00 00 00       	mov    eax,0x1
c0013ee0:	31 d2                	xor    edx,edx
c0013ee2:	83 c4 08             	add    esp,0x8
c0013ee5:	5b                   	pop    ebx
c0013ee6:	c3                   	ret    

c0013ee7 <SysTruncate(regs*)>:
c0013ee7:	55                   	push   ebp
c0013ee8:	57                   	push   edi
c0013ee9:	31 ff                	xor    edi,edi
c0013eeb:	56                   	push   esi
c0013eec:	53                   	push   ebx
c0013eed:	83 ec 0c             	sub    esp,0xc
c0013ef0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013ef4:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c0013ef7:	8b 68 24             	mov    ebp,DWORD PTR [eax+0x24]
c0013efa:	89 ce                	mov    esi,ecx
c0013efc:	83 78 28 00          	cmp    DWORD PTR [eax+0x28],0x0
c0013f00:	0f 84 9a 00 00 00    	je     c0013fa0 <SysTruncate(regs*)+0xb9>
c0013f06:	83 ec 0c             	sub    esp,0xc
c0013f09:	68 14 01 00 00       	push   0x114
c0013f0e:	e8 a3 3b ff ff       	call   c0007ab6 <malloc>
c0013f13:	83 c4 0c             	add    esp,0xc
c0013f16:	89 c3                	mov    ebx,eax
c0013f18:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013f1d:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0013f20:	55                   	push   ebp
c0013f21:	53                   	push   ebx
c0013f22:	e8 b1 77 ff ff       	call   c000b6d8 <File::File(char const*, Process*)>
c0013f27:	83 c4 10             	add    esp,0x10
c0013f2a:	31 d2                	xor    edx,edx
c0013f2c:	b8 03 00 00 00       	mov    eax,0x3
c0013f31:	85 db                	test   ebx,ebx
c0013f33:	0f 84 a2 00 00 00    	je     c0013fdb <SysTruncate(regs*)+0xf4>
c0013f39:	51                   	push   ecx
c0013f3a:	51                   	push   ecx
c0013f3b:	6a 02                	push   0x2
c0013f3d:	53                   	push   ebx
c0013f3e:	e8 51 78 ff ff       	call   c000b794 <File::open(FileOpenMode)>
c0013f43:	83 c4 10             	add    esp,0x10
c0013f46:	85 c0                	test   eax,eax
c0013f48:	74 13                	je     c0013f5d <SysTruncate(regs*)+0x76>
c0013f4a:	83 ec 0c             	sub    esp,0xc
c0013f4d:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013f4f:	53                   	push   ebx
c0013f50:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013f53:	83 c4 10             	add    esp,0x10
c0013f56:	b8 04 00 00 00       	mov    eax,0x4
c0013f5b:	eb 7c                	jmp    c0013fd9 <SysTruncate(regs*)+0xf2>
c0013f5d:	52                   	push   edx
c0013f5e:	57                   	push   edi
c0013f5f:	56                   	push   esi
c0013f60:	53                   	push   ebx
c0013f61:	e8 42 79 ff ff       	call   c000b8a8 <File::truncate(unsigned long long)>
c0013f66:	83 c4 10             	add    esp,0x10
c0013f69:	85 c0                	test   eax,eax
c0013f6b:	74 1b                	je     c0013f88 <SysTruncate(regs*)+0xa1>
c0013f6d:	83 ec 0c             	sub    esp,0xc
c0013f70:	53                   	push   ebx
c0013f71:	e8 7c 78 ff ff       	call   c000b7f2 <File::close()>
c0013f76:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013f78:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013f7b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013f7e:	83 c4 10             	add    esp,0x10
c0013f81:	b8 05 00 00 00       	mov    eax,0x5
c0013f86:	eb 51                	jmp    c0013fd9 <SysTruncate(regs*)+0xf2>
c0013f88:	83 ec 0c             	sub    esp,0xc
c0013f8b:	53                   	push   ebx
c0013f8c:	e8 61 78 ff ff       	call   c000b7f2 <File::close()>
c0013f91:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013f93:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013f96:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013f99:	83 c4 10             	add    esp,0x10
c0013f9c:	31 c0                	xor    eax,eax
c0013f9e:	eb 39                	jmp    c0013fd9 <SysTruncate(regs*)+0xf2>
c0013fa0:	31 d2                	xor    edx,edx
c0013fa2:	b8 01 00 00 00       	mov    eax,0x1
c0013fa7:	83 fd 02             	cmp    ebp,0x2
c0013faa:	7e 2f                	jle    c0013fdb <SysTruncate(regs*)+0xf4>
c0013fac:	83 ec 0c             	sub    esp,0xc
c0013faf:	51                   	push   ecx
c0013fb0:	e8 fe 54 ff ff       	call   c00094b3 <KeGetFileFromDescriptor(int)>
c0013fb5:	83 c4 10             	add    esp,0x10
c0013fb8:	89 c1                	mov    ecx,eax
c0013fba:	31 d2                	xor    edx,edx
c0013fbc:	b8 02 00 00 00       	mov    eax,0x2
c0013fc1:	85 c9                	test   ecx,ecx
c0013fc3:	74 16                	je     c0013fdb <SysTruncate(regs*)+0xf4>
c0013fc5:	50                   	push   eax
c0013fc6:	57                   	push   edi
c0013fc7:	56                   	push   esi
c0013fc8:	51                   	push   ecx
c0013fc9:	e8 da 78 ff ff       	call   c000b8a8 <File::truncate(unsigned long long)>
c0013fce:	83 c4 10             	add    esp,0x10
c0013fd1:	85 c0                	test   eax,eax
c0013fd3:	0f 95 c0             	setne  al
c0013fd6:	0f b6 c0             	movzx  eax,al
c0013fd9:	31 d2                	xor    edx,edx
c0013fdb:	83 c4 0c             	add    esp,0xc
c0013fde:	5b                   	pop    ebx
c0013fdf:	5e                   	pop    esi
c0013fe0:	5f                   	pop    edi
c0013fe1:	5d                   	pop    ebp
c0013fe2:	c3                   	ret    

c0013fe3 <SysWrite(regs*)>:
c0013fe3:	57                   	push   edi
c0013fe4:	56                   	push   esi
c0013fe5:	53                   	push   ebx
c0013fe6:	83 ec 10             	sub    esp,0x10
c0013fe9:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0013fed:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0013ff0:	83 f8 02             	cmp    eax,0x2
c0013ff3:	77 10                	ja     c0014005 <SysWrite(regs*)+0x22>
c0013ff5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013ffa:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013ffd:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c0014003:	eb 0e                	jmp    c0014013 <SysWrite(regs*)+0x30>
c0014005:	83 ec 0c             	sub    esp,0xc
c0014008:	50                   	push   eax
c0014009:	e8 a5 54 ff ff       	call   c00094b3 <KeGetFileFromDescriptor(int)>
c001400e:	83 c4 10             	add    esp,0x10
c0014011:	89 c1                	mov    ecx,eax
c0014013:	83 c8 ff             	or     eax,0xffffffff
c0014016:	85 c9                	test   ecx,ecx
c0014018:	89 c2                	mov    edx,eax
c001401a:	74 28                	je     c0014044 <SysWrite(regs*)+0x61>
c001401c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0014024:	31 ff                	xor    edi,edi
c0014026:	83 ec 0c             	sub    esp,0xc
c0014029:	8b 01                	mov    eax,DWORD PTR [ecx]
c001402b:	8d 54 24 18          	lea    edx,[esp+0x18]
c001402f:	52                   	push   edx
c0014030:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0014033:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c0014036:	57                   	push   edi
c0014037:	56                   	push   esi
c0014038:	51                   	push   ecx
c0014039:	ff 50 10             	call   DWORD PTR [eax+0x10]
c001403c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0014040:	83 c4 20             	add    esp,0x20
c0014043:	99                   	cdq    
c0014044:	83 c4 10             	add    esp,0x10
c0014047:	5b                   	pop    ebx
c0014048:	5e                   	pop    esi
c0014049:	5f                   	pop    edi
c001404a:	c3                   	ret    

c001404b <SysWsbe(regs*)>:
c001404b:	57                   	push   edi
c001404c:	b9 0b 00 00 00       	mov    ecx,0xb
c0014051:	56                   	push   esi
c0014052:	be 9e 1f 02 c0       	mov    esi,0xc0021f9e
c0014057:	53                   	push   ebx
c0014058:	83 ec 30             	sub    esp,0x30
c001405b:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001405f:	fc                   	cld    
c0014060:	83 ec 0c             	sub    esp,0xc
c0014063:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0014065:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0014069:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001406e:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014071:	8b b0 06 05 00 00    	mov    esi,DWORD PTR [eax+0x506]
c0014077:	8b 06                	mov    eax,DWORD PTR [esi]
c0014079:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c001407c:	57                   	push   edi
c001407d:	e8 ee c4 fe ff       	call   c0000570 <strlen>
c0014082:	5a                   	pop    edx
c0014083:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0014087:	52                   	push   edx
c0014088:	31 d2                	xor    edx,edx
c001408a:	57                   	push   edi
c001408b:	52                   	push   edx
c001408c:	50                   	push   eax
c001408d:	56                   	push   esi
c001408e:	ff d3                	call   ebx
c0014090:	83 c4 14             	add    esp,0x14
c0014093:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0014097:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001409a:	e8 ad 23 00 00       	call   c001644c <terminateTask(int)>
c001409f:	83 c4 40             	add    esp,0x40
c00140a2:	b8 ef be ad de       	mov    eax,0xdeadbeef
c00140a7:	5b                   	pop    ebx
c00140a8:	31 d2                	xor    edx,edx
c00140aa:	5e                   	pop    esi
c00140ab:	5f                   	pop    edi
c00140ac:	c3                   	ret    

c00140ad <SysYield(regs*)>:
c00140ad:	83 ec 0c             	sub    esp,0xc
c00140b0:	fa                   	cli    
c00140b1:	ff 05 68 a4 02 c0    	inc    DWORD PTR ds:0xc002a468
c00140b7:	e8 f0 19 00 00       	call   c0015aac <schedule()>
c00140bc:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c00140c1:	48                   	dec    eax
c00140c2:	a3 68 a4 02 c0       	mov    ds:0xc002a468,eax
c00140c7:	75 01                	jne    c00140ca <SysYield(regs*)+0x1d>
c00140c9:	fb                   	sti    
c00140ca:	31 c0                	xor    eax,eax
c00140cc:	31 d2                	xor    edx,edx
c00140ce:	83 c4 0c             	add    esp,0xc
c00140d1:	c3                   	ret    

c00140d2 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c00140d2:	55                   	push   ebp
c00140d3:	57                   	push   edi
c00140d4:	56                   	push   esi
c00140d5:	53                   	push   ebx
c00140d6:	81 ec 2c 10 00 00    	sub    esp,0x102c
c00140dc:	83 bc 24 50 10 00 00 00 	cmp    DWORD PTR [esp+0x1050],0x0
c00140e4:	0f 95 c0             	setne  al
c00140e7:	31 d2                	xor    edx,edx
c00140e9:	83 bc 24 48 10 00 00 00 	cmp    DWORD PTR [esp+0x1048],0x0
c00140f1:	0f 94 c2             	sete   dl
c00140f4:	85 c2                	test   edx,eax
c00140f6:	74 34                	je     c001412c <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x5a>
c00140f8:	f7 84 24 4c 10 00 00 ff 0f 00 00 	test   DWORD PTR [esp+0x104c],0xfff
c0014103:	74 27                	je     c001412c <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x5a>
c0014105:	8b 84 24 4c 10 00 00 	mov    eax,DWORD PTR [esp+0x104c]
c001410c:	05 00 10 00 00       	add    eax,0x1000
c0014111:	89 c1                	mov    ecx,eax
c0014113:	25 00 f0 ff ff       	and    eax,0xfffff000
c0014118:	81 c9 00 f0 ff ff    	or     ecx,0xfffff000
c001411e:	89 84 24 4c 10 00 00 	mov    DWORD PTR [esp+0x104c],eax
c0014125:	89 8c 24 48 10 00 00 	mov    DWORD PTR [esp+0x1048],ecx
c001412c:	8b 84 24 48 10 00 00 	mov    eax,DWORD PTR [esp+0x1048]
c0014133:	83 ec 0c             	sub    esp,0xc
c0014136:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c001413c:	6a 01                	push   0x1
c001413e:	e8 ca 54 ff ff       	call   c000960d <Virt::allocateKernelVirtualPages(int)>
c0014143:	83 c4 10             	add    esp,0x10
c0014146:	89 c3                	mov    ebx,eax
c0014148:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c001414e:	0f 86 25 01 00 00    	jbe    c0014279 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1a7>
c0014154:	c1 ee 0c             	shr    esi,0xc
c0014157:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c001415e:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0014162:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001416a:	8b bc 24 48 10 00 00 	mov    edi,DWORD PTR [esp+0x1048]
c0014171:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0014175:	03 bc 24 4c 10 00 00 	add    edi,DWORD PTR [esp+0x104c]
c001417c:	29 ef                	sub    edi,ebp
c001417e:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c0014182:	0f 83 f8 00 00 00    	jae    c0014280 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1ae>
c0014188:	81 ff 00 10 00 00    	cmp    edi,0x1000
c001418e:	76 05                	jbe    c0014195 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xc3>
c0014190:	bf 00 10 00 00       	mov    edi,0x1000
c0014195:	83 ec 0c             	sub    esp,0xc
c0014198:	31 d2                	xor    edx,edx
c001419a:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c00141a1:	8b 08                	mov    ecx,DWORD PTR [eax]
c00141a3:	8d 44 24 28          	lea    eax,[esp+0x28]
c00141a7:	50                   	push   eax
c00141a8:	8d 74 24 30          	lea    esi,[esp+0x30]
c00141ac:	56                   	push   esi
c00141ad:	52                   	push   edx
c00141ae:	57                   	push   edi
c00141af:	ff b4 24 60 10 00 00 	push   DWORD PTR [esp+0x1060]
c00141b6:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00141b9:	83 c4 20             	add    esp,0x20
c00141bc:	85 c0                	test   eax,eax
c00141be:	75 06                	jne    c00141c6 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xf4>
c00141c0:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c00141c4:	74 13                	je     c00141d9 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x107>
c00141c6:	83 ec 0c             	sub    esp,0xc
c00141c9:	53                   	push   ebx
c00141ca:	e8 5c 57 ff ff       	call   c000992b <Virt::freeKernelVirtualPages(unsigned long)>
c00141cf:	83 c4 10             	add    esp,0x10
c00141d2:	31 c0                	xor    eax,eax
c00141d4:	e9 7c 01 00 00       	jmp    c0014355 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x283>
c00141d9:	fa                   	cli    
c00141da:	ff 05 68 a4 02 c0    	inc    DWORD PTR ds:0xc002a468
c00141e0:	e8 da 3b ff ff       	call   c0007dbf <Phys::allocatePage()>
c00141e5:	6a 07                	push   0x7
c00141e7:	89 c7                	mov    edi,eax
c00141e9:	53                   	push   ebx
c00141ea:	50                   	push   eax
c00141eb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00141f0:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00141f3:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00141f9:	e8 22 5b ff ff       	call   c0009d20 <VAS::mapPage(unsigned long, unsigned long, int)>
c00141fe:	83 c4 0c             	add    esp,0xc
c0014201:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c0014208:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c001420e:	6a 00                	push   0x0
c0014210:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014215:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014218:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c001421e:	e8 63 59 ff ff       	call   c0009b86 <VAS::mapOtherVASIn(bool, VAS*)>
c0014223:	58                   	pop    eax
c0014224:	5a                   	pop    edx
c0014225:	68 07 0c 00 00       	push   0xc07
c001422a:	55                   	push   ebp
c001422b:	57                   	push   edi
c001422c:	89 df                	mov    edi,ebx
c001422e:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c0014235:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c001423b:	6a 00                	push   0x0
c001423d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014242:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014245:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c001424b:	e8 22 5d ff ff       	call   c0009f72 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c0014250:	b9 00 10 00 00       	mov    ecx,0x1000
c0014255:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0014257:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c001425c:	83 c4 20             	add    esp,0x20
c001425f:	48                   	dec    eax
c0014260:	a3 68 a4 02 c0       	mov    ds:0xc002a468,eax
c0014265:	85 c0                	test   eax,eax
c0014267:	75 01                	jne    c001426a <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x198>
c0014269:	fb                   	sti    
c001426a:	81 c5 00 10 00 00    	add    ebp,0x1000
c0014270:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0014274:	e9 f1 fe ff ff       	jmp    c001416a <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x98>
c0014279:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c0014280:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c0014287:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c001428d:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c0014293:	0f 86 ae 00 00 00    	jbe    c0014347 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x275>
c0014299:	fa                   	cli    
c001429a:	ff 05 68 a4 02 c0    	inc    DWORD PTR ds:0xc002a468
c00142a0:	c1 ee 0c             	shr    esi,0xc
c00142a3:	51                   	push   ecx
c00142a4:	31 ff                	xor    edi,edi
c00142a6:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c00142ad:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00142b3:	6a 00                	push   0x0
c00142b5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00142ba:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00142bd:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00142c3:	e8 be 58 ff ff       	call   c0009b86 <VAS::mapOtherVASIn(bool, VAS*)>
c00142c8:	83 c4 10             	add    esp,0x10
c00142cb:	e8 ef 3a ff ff       	call   c0007dbf <Phys::allocatePage()>
c00142d0:	47                   	inc    edi
c00142d1:	6a 07                	push   0x7
c00142d3:	53                   	push   ebx
c00142d4:	50                   	push   eax
c00142d5:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00142d9:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00142df:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c00142e2:	ff b2 12 05 00 00    	push   DWORD PTR [edx+0x512]
c00142e8:	e8 33 5a ff ff       	call   c0009d20 <VAS::mapPage(unsigned long, unsigned long, int)>
c00142ed:	58                   	pop    eax
c00142ee:	5a                   	pop    edx
c00142ef:	68 07 0c 00 00       	push   0xc07
c00142f4:	55                   	push   ebp
c00142f5:	81 c5 00 10 00 00    	add    ebp,0x1000
c00142fb:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00142ff:	50                   	push   eax
c0014300:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c0014307:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c001430d:	6a 00                	push   0x0
c001430f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014314:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014317:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c001431d:	e8 50 5c ff ff       	call   c0009f72 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c0014322:	83 c4 1c             	add    esp,0x1c
c0014325:	68 00 10 00 00       	push   0x1000
c001432a:	6a 00                	push   0x0
c001432c:	53                   	push   ebx
c001432d:	e8 be c1 fe ff       	call   c00004f0 <memset>
c0014332:	83 c4 10             	add    esp,0x10
c0014335:	39 fe                	cmp    esi,edi
c0014337:	77 92                	ja     c00142cb <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1f9>
c0014339:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c001433e:	48                   	dec    eax
c001433f:	a3 68 a4 02 c0       	mov    ds:0xc002a468,eax
c0014344:	75 01                	jne    c0014347 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x275>
c0014346:	fb                   	sti    
c0014347:	83 ec 0c             	sub    esp,0xc
c001434a:	53                   	push   ebx
c001434b:	e8 db 55 ff ff       	call   c000992b <Virt::freeKernelVirtualPages(unsigned long)>
c0014350:	83 c4 10             	add    esp,0x10
c0014353:	b0 01                	mov    al,0x1
c0014355:	81 c4 2c 10 00 00    	add    esp,0x102c
c001435b:	5b                   	pop    ebx
c001435c:	5e                   	pop    esi
c001435d:	5f                   	pop    edi
c001435e:	5d                   	pop    ebp
c001435f:	c3                   	ret    

c0014360 <Thr::loadProgramIntoMemory(Process*, char const*)>:
c0014360:	55                   	push   ebp
c0014361:	57                   	push   edi
c0014362:	56                   	push   esi
c0014363:	53                   	push   ebx
c0014364:	83 ec 48             	sub    esp,0x48
c0014367:	68 14 01 00 00       	push   0x114
c001436c:	e8 45 37 ff ff       	call   c0007ab6 <malloc>
c0014371:	83 c4 0c             	add    esp,0xc
c0014374:	89 c6                	mov    esi,eax
c0014376:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c001437a:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001437e:	50                   	push   eax
c001437f:	e8 54 73 ff ff       	call   c000b6d8 <File::File(char const*, Process*)>
c0014384:	58                   	pop    eax
c0014385:	5a                   	pop    edx
c0014386:	6a 01                	push   0x1
c0014388:	56                   	push   esi
c0014389:	e8 06 74 ff ff       	call   c000b794 <File::open(FileOpenMode)>
c001438e:	83 c4 10             	add    esp,0x10
c0014391:	85 c0                	test   eax,eax
c0014393:	0f 85 43 01 00 00    	jne    c00144dc <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c0014399:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c00143a1:	83 ec 0c             	sub    esp,0xc
c00143a4:	6a 34                	push   0x34
c00143a6:	e8 0b 37 ff ff       	call   c0007ab6 <malloc>
c00143ab:	89 c3                	mov    ebx,eax
c00143ad:	58                   	pop    eax
c00143ae:	8b 06                	mov    eax,DWORD PTR [esi]
c00143b0:	8d 7c 24 38          	lea    edi,[esp+0x38]
c00143b4:	57                   	push   edi
c00143b5:	53                   	push   ebx
c00143b6:	6a 00                	push   0x0
c00143b8:	6a 34                	push   0x34
c00143ba:	56                   	push   esi
c00143bb:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00143be:	83 c4 20             	add    esp,0x20
c00143c1:	85 c0                	test   eax,eax
c00143c3:	0f 85 13 01 00 00    	jne    c00144dc <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c00143c9:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c00143cf:	0f 85 07 01 00 00    	jne    c00144dc <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c00143d5:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00143d8:	85 c0                	test   eax,eax
c00143da:	0f 84 fc 00 00 00    	je     c00144dc <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c00143e0:	31 d2                	xor    edx,edx
c00143e2:	55                   	push   ebp
c00143e3:	52                   	push   edx
c00143e4:	50                   	push   eax
c00143e5:	56                   	push   esi
c00143e6:	e8 67 74 ff ff       	call   c000b852 <File::seek(unsigned long long)>
c00143eb:	83 c4 10             	add    esp,0x10
c00143ee:	85 c0                	test   eax,eax
c00143f0:	0f 85 e6 00 00 00    	jne    c00144dc <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c00143f6:	83 ec 0c             	sub    esp,0xc
c00143f9:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00143fc:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c0014400:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0014404:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c0014408:	0f af c2             	imul   eax,edx
c001440b:	50                   	push   eax
c001440c:	e8 a5 36 ff ff       	call   c0007ab6 <malloc>
c0014411:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0014413:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0014417:	89 3c 24             	mov    DWORD PTR [esp],edi
c001441a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001441e:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c0014422:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c0014426:	0f af c2             	imul   eax,edx
c0014429:	99                   	cdq    
c001442a:	52                   	push   edx
c001442b:	50                   	push   eax
c001442c:	56                   	push   esi
c001442d:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014430:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0014433:	83 c4 20             	add    esp,0x20
c0014436:	85 c0                	test   eax,eax
c0014438:	0f 84 9e 00 00 00    	je     c00144dc <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c001443e:	31 d2                	xor    edx,edx
c0014440:	51                   	push   ecx
c0014441:	52                   	push   edx
c0014442:	50                   	push   eax
c0014443:	56                   	push   esi
c0014444:	e8 09 74 ff ff       	call   c000b852 <File::seek(unsigned long long)>
c0014449:	83 c4 10             	add    esp,0x10
c001444c:	85 c0                	test   eax,eax
c001444e:	0f 85 88 00 00 00    	jne    c00144dc <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c0014454:	83 ec 0c             	sub    esp,0xc
c0014457:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001445b:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001445f:	31 ed                	xor    ebp,ebp
c0014461:	0f af c2             	imul   eax,edx
c0014464:	50                   	push   eax
c0014465:	e8 4c 36 ff ff       	call   c0007ab6 <malloc>
c001446a:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001446c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0014470:	89 3c 24             	mov    DWORD PTR [esp],edi
c0014473:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014477:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001447b:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001447f:	0f af c2             	imul   eax,edx
c0014482:	99                   	cdq    
c0014483:	52                   	push   edx
c0014484:	50                   	push   eax
c0014485:	56                   	push   esi
c0014486:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014489:	83 c4 20             	add    esp,0x20
c001448c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0014494:	0f b7 fd             	movzx  edi,bp
c0014497:	66 3b 6b 2c          	cmp    bp,WORD PTR [ebx+0x2c]
c001449b:	73 7d                	jae    c001451a <Thr::loadProgramIntoMemory(Process*, char const*)+0x1ba>
c001449d:	c1 e7 05             	shl    edi,0x5
c00144a0:	03 7c 24 0c          	add    edi,DWORD PTR [esp+0xc]
c00144a4:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c00144a7:	75 6b                	jne    c0014514 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b4>
c00144a9:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c00144ac:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00144b0:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c00144b3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00144b7:	52                   	push   edx
c00144b8:	31 d2                	xor    edx,edx
c00144ba:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c00144bd:	52                   	push   edx
c00144be:	50                   	push   eax
c00144bf:	56                   	push   esi
c00144c0:	e8 8d 73 ff ff       	call   c000b852 <File::seek(unsigned long long)>
c00144c5:	83 c4 10             	add    esp,0x10
c00144c8:	85 c0                	test   eax,eax
c00144ca:	74 17                	je     c00144e3 <Thr::loadProgramIntoMemory(Process*, char const*)+0x183>
c00144cc:	83 ec 0c             	sub    esp,0xc
c00144cf:	68 ca 1f 02 c0       	push   0xc0021fca
c00144d4:	e8 6c 64 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c00144d9:	83 c4 10             	add    esp,0x10
c00144dc:	31 c0                	xor    eax,eax
c00144de:	e9 87 00 00 00       	jmp    c001456a <Thr::loadProgramIntoMemory(Process*, char const*)+0x20a>
c00144e3:	83 ec 0c             	sub    esp,0xc
c00144e6:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c00144e9:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c00144ec:	50                   	push   eax
c00144ed:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00144f1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00144f5:	56                   	push   esi
c00144f6:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c00144fa:	e8 d3 fb ff ff       	call   c00140d2 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c00144ff:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0014503:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c0014507:	83 c4 20             	add    esp,0x20
c001450a:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c001450e:	73 04                	jae    c0014514 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b4>
c0014510:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0014514:	45                   	inc    ebp
c0014515:	e9 7a ff ff ff       	jmp    c0014494 <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c001451a:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c001451e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0014522:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0014526:	89 91 0e 05 00 00    	mov    DWORD PTR [ecx+0x50e],edx
c001452c:	83 ec 0c             	sub    esp,0xc
c001452f:	8b 91 12 05 00 00    	mov    edx,DWORD PTR [ecx+0x512]
c0014535:	25 00 f0 ff ff       	and    eax,0xfffff000
c001453a:	05 00 10 00 00       	add    eax,0x1000
c001453f:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0014542:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014546:	e8 7b 35 ff ff       	call   c0007ac6 <free>
c001454b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001454e:	e8 73 35 ff ff       	call   c0007ac6 <free>
c0014553:	58                   	pop    eax
c0014554:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014558:	e8 69 35 ff ff       	call   c0007ac6 <free>
c001455d:	89 34 24             	mov    DWORD PTR [esp],esi
c0014560:	e8 8d 72 ff ff       	call   c000b7f2 <File::close()>
c0014565:	83 c4 10             	add    esp,0x10
c0014568:	b0 01                	mov    al,0x1
c001456a:	83 c4 3c             	add    esp,0x3c
c001456d:	5b                   	pop    ebx
c001456e:	5e                   	pop    esi
c001456f:	5f                   	pop    edi
c0014570:	5d                   	pop    ebp
c0014571:	c3                   	ret    

c0014572 <Thr::runtimeReferenceHelper()>:
c0014572:	83 ec 18             	sub    esp,0x18
c0014575:	68 d2 1f 02 c0       	push   0xc0021fd2
c001457a:	e8 c6 63 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001457f:	fa                   	cli    
c0014580:	83 c4 10             	add    esp,0x10
c0014583:	eb fe                	jmp    c0014583 <Thr::runtimeReferenceHelper()+0x11>

c0014585 <Thr::getAddressOfKernelSymbol(char const*)>:
c0014585:	57                   	push   edi
c0014586:	56                   	push   esi
c0014587:	53                   	push   ebx
c0014588:	31 db                	xor    ebx,ebx
c001458a:	39 1d 40 a4 02 c0    	cmp    DWORD PTR ds:0xc002a440,ebx
c0014590:	7e 3c                	jle    c00145ce <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c0014592:	8b 34 9d c0 a3 02 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffd5c40]
c0014599:	31 ff                	xor    edi,edi
c001459b:	39 3c 9d c0 a2 02 c0 	cmp    DWORD PTR [ebx*4-0x3ffd5d40],edi
c00145a2:	7e 27                	jle    c00145cb <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c00145a4:	50                   	push   eax
c00145a5:	50                   	push   eax
c00145a6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00145aa:	8b 06                	mov    eax,DWORD PTR [esi]
c00145ac:	03 04 9d 40 a3 02 c0 	add    eax,DWORD PTR [ebx*4-0x3ffd5cc0]
c00145b3:	50                   	push   eax
c00145b4:	e8 97 c1 fe ff       	call   c0000750 <strcmp>
c00145b9:	83 c4 10             	add    esp,0x10
c00145bc:	85 c0                	test   eax,eax
c00145be:	75 05                	jne    c00145c5 <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c00145c0:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00145c3:	eb 0b                	jmp    c00145d0 <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c00145c5:	83 c6 10             	add    esi,0x10
c00145c8:	47                   	inc    edi
c00145c9:	eb d0                	jmp    c001459b <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c00145cb:	43                   	inc    ebx
c00145cc:	eb bc                	jmp    c001458a <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c00145ce:	31 c0                	xor    eax,eax
c00145d0:	5b                   	pop    ebx
c00145d1:	5e                   	pop    esi
c00145d2:	5f                   	pop    edi
c00145d3:	c3                   	ret    

c00145d4 <Thr::loadKernelSymbolTable(char const*)>:
c00145d4:	55                   	push   ebp
c00145d5:	57                   	push   edi
c00145d6:	56                   	push   esi
c00145d7:	53                   	push   ebx
c00145d8:	83 ec 68             	sub    esp,0x68
c00145db:	8b 35 90 a4 02 c0    	mov    esi,DWORD PTR ds:0xc002a490
c00145e1:	68 14 01 00 00       	push   0x114
c00145e6:	e8 cb 34 ff ff       	call   c0007ab6 <malloc>
c00145eb:	83 c4 0c             	add    esp,0xc
c00145ee:	89 c3                	mov    ebx,eax
c00145f0:	56                   	push   esi
c00145f1:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c00145f5:	50                   	push   eax
c00145f6:	e8 dd 70 ff ff       	call   c000b6d8 <File::File(char const*, Process*)>
c00145fb:	5e                   	pop    esi
c00145fc:	5f                   	pop    edi
c00145fd:	6a 01                	push   0x1
c00145ff:	53                   	push   ebx
c0014600:	e8 8f 71 ff ff       	call   c000b794 <File::open(FileOpenMode)>
c0014605:	83 c4 10             	add    esp,0x10
c0014608:	85 c0                	test   eax,eax
c001460a:	74 0a                	je     c0014616 <Thr::loadKernelSymbolTable(char const*)+0x42>
c001460c:	83 ec 0c             	sub    esp,0xc
c001460f:	68 f4 1f 02 c0       	push   0xc0021ff4
c0014614:	eb 34                	jmp    c001464a <Thr::loadKernelSymbolTable(char const*)+0x76>
c0014616:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c001461e:	83 ec 0c             	sub    esp,0xc
c0014621:	6a 34                	push   0x34
c0014623:	e8 8e 34 ff ff       	call   c0007ab6 <malloc>
c0014628:	59                   	pop    ecx
c0014629:	89 c7                	mov    edi,eax
c001462b:	8d 74 24 34          	lea    esi,[esp+0x34]
c001462f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014631:	56                   	push   esi
c0014632:	57                   	push   edi
c0014633:	6a 00                	push   0x0
c0014635:	6a 34                	push   0x34
c0014637:	53                   	push   ebx
c0014638:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001463b:	83 c4 20             	add    esp,0x20
c001463e:	85 c0                	test   eax,eax
c0014640:	74 17                	je     c0014659 <Thr::loadKernelSymbolTable(char const*)+0x85>
c0014642:	83 ec 0c             	sub    esp,0xc
c0014645:	68 0b 20 02 c0       	push   0xc002200b
c001464a:	e8 9e cb ff ff       	call   c00111ed <KePanic(char const*)>
c001464f:	83 c4 10             	add    esp,0x10
c0014652:	31 c0                	xor    eax,eax
c0014654:	e9 31 02 00 00       	jmp    c001488a <Thr::loadKernelSymbolTable(char const*)+0x2b6>
c0014659:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c001465f:	75 e1                	jne    c0014642 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0014661:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c0014664:	85 c0                	test   eax,eax
c0014666:	74 da                	je     c0014642 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0014668:	52                   	push   edx
c0014669:	31 d2                	xor    edx,edx
c001466b:	52                   	push   edx
c001466c:	50                   	push   eax
c001466d:	53                   	push   ebx
c001466e:	e8 df 71 ff ff       	call   c000b852 <File::seek(unsigned long long)>
c0014673:	83 c4 10             	add    esp,0x10
c0014676:	85 c0                	test   eax,eax
c0014678:	75 c8                	jne    c0014642 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001467a:	83 ec 0c             	sub    esp,0xc
c001467d:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0014681:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0014685:	31 ed                	xor    ebp,ebp
c0014687:	0f af c2             	imul   eax,edx
c001468a:	50                   	push   eax
c001468b:	e8 26 34 ff ff       	call   c0007ab6 <malloc>
c0014690:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0014692:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014696:	89 34 24             	mov    DWORD PTR [esp],esi
c0014699:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001469d:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c00146a1:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c00146a5:	0f af c2             	imul   eax,edx
c00146a8:	99                   	cdq    
c00146a9:	52                   	push   edx
c00146aa:	50                   	push   eax
c00146ab:	53                   	push   ebx
c00146ac:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00146af:	83 c4 20             	add    esp,0x20
c00146b2:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00146ba:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00146c2:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00146ca:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00146d2:	0f b7 f5             	movzx  esi,bp
c00146d5:	66 3b 6f 30          	cmp    bp,WORD PTR [edi+0x30]
c00146d9:	0f 83 a7 00 00 00    	jae    c0014786 <Thr::loadKernelSymbolTable(char const*)+0x1b2>
c00146df:	6b f6 28             	imul   esi,esi,0x28
c00146e2:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c00146e6:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c00146e9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00146ed:	50                   	push   eax
c00146ee:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00146f2:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c00146f6:	8b 16                	mov    edx,DWORD PTR [esi]
c00146f8:	6b c0 28             	imul   eax,eax,0x28
c00146fb:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c00146ff:	89 d0                	mov    eax,edx
c0014701:	31 d2                	xor    edx,edx
c0014703:	52                   	push   edx
c0014704:	50                   	push   eax
c0014705:	53                   	push   ebx
c0014706:	e8 47 71 ff ff       	call   c000b852 <File::seek(unsigned long long)>
c001470b:	83 c4 0c             	add    esp,0xc
c001470e:	6a 20                	push   0x20
c0014710:	6a 00                	push   0x0
c0014712:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c0014716:	52                   	push   edx
c0014717:	e8 d4 bd fe ff       	call   c00004f0 <memset>
c001471c:	58                   	pop    eax
c001471d:	8b 03                	mov    eax,DWORD PTR [ebx]
c001471f:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c0014723:	51                   	push   ecx
c0014724:	8d 54 24 40          	lea    edx,[esp+0x40]
c0014728:	52                   	push   edx
c0014729:	6a 00                	push   0x0
c001472b:	6a 1f                	push   0x1f
c001472d:	53                   	push   ebx
c001472e:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014731:	83 c4 18             	add    esp,0x18
c0014734:	68 22 20 02 c0       	push   0xc0022022
c0014739:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001473d:	52                   	push   edx
c001473e:	e8 0d c0 fe ff       	call   c0000750 <strcmp>
c0014743:	83 c4 10             	add    esp,0x10
c0014746:	85 c0                	test   eax,eax
c0014748:	75 0f                	jne    c0014759 <Thr::loadKernelSymbolTable(char const*)+0x185>
c001474a:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001474d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014751:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014755:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0014759:	50                   	push   eax
c001475a:	50                   	push   eax
c001475b:	68 2a 20 02 c0       	push   0xc002202a
c0014760:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c0014764:	50                   	push   eax
c0014765:	e8 e6 bf fe ff       	call   c0000750 <strcmp>
c001476a:	83 c4 10             	add    esp,0x10
c001476d:	85 c0                	test   eax,eax
c001476f:	75 0f                	jne    c0014780 <Thr::loadKernelSymbolTable(char const*)+0x1ac>
c0014771:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0014774:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014778:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001477c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0014780:	45                   	inc    ebp
c0014781:	e9 4c ff ff ff       	jmp    c00146d2 <Thr::loadKernelSymbolTable(char const*)+0xfe>
c0014786:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001478b:	75 10                	jne    c001479d <Thr::loadKernelSymbolTable(char const*)+0x1c9>
c001478d:	83 ec 0c             	sub    esp,0xc
c0014790:	68 32 20 02 c0       	push   0xc0022032
c0014795:	e8 53 ca ff ff       	call   c00111ed <KePanic(char const*)>
c001479a:	83 c4 10             	add    esp,0x10
c001479d:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c00147a2:	75 10                	jne    c00147b4 <Thr::loadKernelSymbolTable(char const*)+0x1e0>
c00147a4:	83 ec 0c             	sub    esp,0xc
c00147a7:	68 32 20 02 c0       	push   0xc0022032
c00147ac:	e8 3c ca ff ff       	call   c00111ed <KePanic(char const*)>
c00147b1:	83 c4 10             	add    esp,0x10
c00147b4:	31 d2                	xor    edx,edx
c00147b6:	50                   	push   eax
c00147b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00147bb:	52                   	push   edx
c00147bc:	50                   	push   eax
c00147bd:	53                   	push   ebx
c00147be:	e8 8f 70 ff ff       	call   c000b852 <File::seek(unsigned long long)>
c00147c3:	5a                   	pop    edx
c00147c4:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00147c8:	e8 e9 32 ff ff       	call   c0007ab6 <malloc>
c00147cd:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00147d1:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00147d5:	31 c9                	xor    ecx,ecx
c00147d7:	5e                   	pop    esi
c00147d8:	8b 03                	mov    eax,DWORD PTR [ebx]
c00147da:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c00147de:	55                   	push   ebp
c00147df:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00147e3:	51                   	push   ecx
c00147e4:	52                   	push   edx
c00147e5:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00147e9:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c00147ed:	53                   	push   ebx
c00147ee:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00147f1:	83 c4 14             	add    esp,0x14
c00147f4:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00147f8:	e8 b9 32 ff ff       	call   c0007ab6 <malloc>
c00147fd:	89 c6                	mov    esi,eax
c00147ff:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014801:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0014804:	56                   	push   esi
c0014805:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0014809:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001480d:	51                   	push   ecx
c001480e:	52                   	push   edx
c001480f:	53                   	push   ebx
c0014810:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014813:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0014817:	8b 15 40 a4 02 c0    	mov    edx,DWORD PTR ds:0xc002a440
c001481d:	83 c4 1c             	add    esp,0x1c
c0014820:	c1 e8 04             	shr    eax,0x4
c0014823:	89 04 95 c0 a2 02 c0 	mov    DWORD PTR [edx*4-0x3ffd5d40],eax
c001482a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001482e:	31 d2                	xor    edx,edx
c0014830:	52                   	push   edx
c0014831:	50                   	push   eax
c0014832:	53                   	push   ebx
c0014833:	e8 1a 70 ff ff       	call   c000b852 <File::seek(unsigned long long)>
c0014838:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001483a:	31 d2                	xor    edx,edx
c001483c:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001483f:	56                   	push   esi
c0014840:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0014844:	52                   	push   edx
c0014845:	50                   	push   eax
c0014846:	53                   	push   ebx
c0014847:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001484a:	83 c4 14             	add    esp,0x14
c001484d:	53                   	push   ebx
c001484e:	e8 9f 6f ff ff       	call   c000b7f2 <File::close()>
c0014853:	5d                   	pop    ebp
c0014854:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0014858:	e8 69 32 ff ff       	call   c0007ac6 <free>
c001485d:	89 3c 24             	mov    DWORD PTR [esp],edi
c0014860:	e8 61 32 ff ff       	call   c0007ac6 <free>
c0014865:	a1 40 a4 02 c0       	mov    eax,ds:0xc002a440
c001486a:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001486e:	8d 50 01             	lea    edx,[eax+0x1]
c0014871:	89 0c 85 c0 a3 02 c0 	mov    DWORD PTR [eax*4-0x3ffd5c40],ecx
c0014878:	89 34 85 40 a3 02 c0 	mov    DWORD PTR [eax*4-0x3ffd5cc0],esi
c001487f:	89 15 40 a4 02 c0    	mov    DWORD PTR ds:0xc002a440,edx
c0014885:	83 c4 10             	add    esp,0x10
c0014888:	b0 01                	mov    al,0x1
c001488a:	83 c4 5c             	add    esp,0x5c
c001488d:	5b                   	pop    ebx
c001488e:	5e                   	pop    esi
c001488f:	5f                   	pop    edi
c0014890:	5d                   	pop    ebp
c0014891:	c3                   	ret    

c0014892 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c0014892:	55                   	push   ebp
c0014893:	57                   	push   edi
c0014894:	56                   	push   esi
c0014895:	53                   	push   ebx
c0014896:	81 ec 68 03 00 00    	sub    esp,0x368
c001489c:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c00148a3:	8b 1d 90 a4 02 c0    	mov    ebx,DWORD PTR ds:0xc002a490
c00148a9:	88 44 24 47          	mov    BYTE PTR [esp+0x47],al
c00148ad:	68 14 01 00 00       	push   0x114
c00148b2:	e8 ff 31 ff ff       	call   c0007ab6 <malloc>
c00148b7:	83 c4 0c             	add    esp,0xc
c00148ba:	89 c5                	mov    ebp,eax
c00148bc:	53                   	push   ebx
c00148bd:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c00148c4:	50                   	push   eax
c00148c5:	e8 0e 6e ff ff       	call   c000b6d8 <File::File(char const*, Process*)>
c00148ca:	5e                   	pop    esi
c00148cb:	5f                   	pop    edi
c00148cc:	6a 01                	push   0x1
c00148ce:	55                   	push   ebp
c00148cf:	e8 c0 6e ff ff       	call   c000b794 <File::open(FileOpenMode)>
c00148d4:	83 c4 10             	add    esp,0x10
c00148d7:	85 c0                	test   eax,eax
c00148d9:	0f 85 aa 06 00 00    	jne    c0014f89 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c00148df:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c00148e7:	83 ec 0c             	sub    esp,0xc
c00148ea:	6a 34                	push   0x34
c00148ec:	e8 c5 31 ff ff       	call   c0007ab6 <malloc>
c00148f1:	5b                   	pop    ebx
c00148f2:	89 c7                	mov    edi,eax
c00148f4:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c00148f8:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00148fb:	53                   	push   ebx
c00148fc:	57                   	push   edi
c00148fd:	6a 00                	push   0x0
c00148ff:	6a 34                	push   0x34
c0014901:	55                   	push   ebp
c0014902:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014905:	83 c4 20             	add    esp,0x20
c0014908:	85 c0                	test   eax,eax
c001490a:	0f 85 79 06 00 00    	jne    c0014f89 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c0014910:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c0014916:	0f 85 6d 06 00 00    	jne    c0014f89 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c001491c:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c001491f:	85 c0                	test   eax,eax
c0014921:	0f 84 62 06 00 00    	je     c0014f89 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c0014927:	31 d2                	xor    edx,edx
c0014929:	51                   	push   ecx
c001492a:	52                   	push   edx
c001492b:	50                   	push   eax
c001492c:	55                   	push   ebp
c001492d:	e8 20 6f ff ff       	call   c000b852 <File::seek(unsigned long long)>
c0014932:	83 c4 10             	add    esp,0x10
c0014935:	85 c0                	test   eax,eax
c0014937:	0f 85 4c 06 00 00    	jne    c0014f89 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c001493d:	83 ec 0c             	sub    esp,0xc
c0014940:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
c0014943:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0014947:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001494b:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001494f:	0f af c2             	imul   eax,edx
c0014952:	50                   	push   eax
c0014953:	e8 5e 31 ff ff       	call   c0007ab6 <malloc>
c0014958:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001495b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001495f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014962:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014966:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001496a:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001496e:	0f af c2             	imul   eax,edx
c0014971:	99                   	cdq    
c0014972:	52                   	push   edx
c0014973:	50                   	push   eax
c0014974:	55                   	push   ebp
c0014975:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014978:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c001497b:	83 c4 20             	add    esp,0x20
c001497e:	85 c0                	test   eax,eax
c0014980:	0f 84 03 06 00 00    	je     c0014f89 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c0014986:	52                   	push   edx
c0014987:	31 d2                	xor    edx,edx
c0014989:	52                   	push   edx
c001498a:	50                   	push   eax
c001498b:	55                   	push   ebp
c001498c:	e8 c1 6e ff ff       	call   c000b852 <File::seek(unsigned long long)>
c0014991:	83 c4 10             	add    esp,0x10
c0014994:	85 c0                	test   eax,eax
c0014996:	0f 85 ed 05 00 00    	jne    c0014f89 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c001499c:	83 ec 0c             	sub    esp,0xc
c001499f:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c00149a3:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c00149a7:	31 f6                	xor    esi,esi
c00149a9:	0f af c2             	imul   eax,edx
c00149ac:	50                   	push   eax
c00149ad:	e8 04 31 ff ff       	call   c0007ab6 <malloc>
c00149b2:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c00149b5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00149b9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00149bc:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00149c0:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c00149c4:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c00149c8:	0f af c2             	imul   eax,edx
c00149cb:	99                   	cdq    
c00149cc:	52                   	push   edx
c00149cd:	50                   	push   eax
c00149ce:	55                   	push   ebp
c00149cf:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00149d2:	83 c4 20             	add    esp,0x20
c00149d5:	0f b7 de             	movzx  ebx,si
c00149d8:	66 3b 77 2c          	cmp    si,WORD PTR [edi+0x2c]
c00149dc:	0f 83 87 00 00 00    	jae    c0014a69 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d7>
c00149e2:	c1 e3 05             	shl    ebx,0x5
c00149e5:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c00149e9:	83 3b 01             	cmp    DWORD PTR [ebx],0x1
c00149ec:	75 75                	jne    c0014a63 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d1>
c00149ee:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00149f1:	31 d2                	xor    edx,edx
c00149f3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00149f7:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00149fa:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00149fe:	50                   	push   eax
c00149ff:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0014a02:	52                   	push   edx
c0014a03:	50                   	push   eax
c0014a04:	55                   	push   ebp
c0014a05:	e8 48 6e ff ff       	call   c000b852 <File::seek(unsigned long long)>
c0014a0a:	83 c4 10             	add    esp,0x10
c0014a0d:	85 c0                	test   eax,eax
c0014a0f:	0f 85 74 05 00 00    	jne    c0014f89 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c0014a15:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c0014a1c:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0014a1f:	2b 44 24 24          	sub    eax,DWORD PTR [esp+0x24]
c0014a23:	31 d2                	xor    edx,edx
c0014a25:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0014a29:	83 ec 0c             	sub    esp,0xc
c0014a2c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0014a30:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0014a37:	50                   	push   eax
c0014a38:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0014a3c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014a40:	52                   	push   edx
c0014a41:	50                   	push   eax
c0014a42:	55                   	push   ebp
c0014a43:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014a46:	83 c4 1c             	add    esp,0x1c
c0014a49:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0014a4c:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c0014a4f:	50                   	push   eax
c0014a50:	6a 00                	push   0x0
c0014a52:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014a56:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0014a5a:	50                   	push   eax
c0014a5b:	e8 90 ba fe ff       	call   c00004f0 <memset>
c0014a60:	83 c4 10             	add    esp,0x10
c0014a63:	46                   	inc    esi
c0014a64:	e9 6c ff ff ff       	jmp    c00149d5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x143>
c0014a69:	53                   	push   ebx
c0014a6a:	31 db                	xor    ebx,ebx
c0014a6c:	68 00 01 00 00       	push   0x100
c0014a71:	6a 00                	push   0x0
c0014a73:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c0014a77:	50                   	push   eax
c0014a78:	e8 73 ba fe ff       	call   c00004f0 <memset>
c0014a7d:	83 c4 0c             	add    esp,0xc
c0014a80:	68 00 01 00 00       	push   0x100
c0014a85:	6a 00                	push   0x0
c0014a87:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c0014a8e:	50                   	push   eax
c0014a8f:	e8 5c ba fe ff       	call   c00004f0 <memset>
c0014a94:	83 c4 10             	add    esp,0x10
c0014a97:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0014a9f:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0014aa7:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0014aaf:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0014ab7:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0014abf:	0f b7 f3             	movzx  esi,bx
c0014ac2:	66 3b 5f 30          	cmp    bx,WORD PTR [edi+0x30]
c0014ac6:	0f 83 2d 01 00 00    	jae    c0014bf9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x367>
c0014acc:	6b f6 28             	imul   esi,esi,0x28
c0014acf:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c0014ad3:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0014ad6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0014ada:	52                   	push   edx
c0014adb:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0014adf:	0f b7 57 32          	movzx  edx,WORD PTR [edi+0x32]
c0014ae3:	8b 06                	mov    eax,DWORD PTR [esi]
c0014ae5:	6b d2 28             	imul   edx,edx,0x28
c0014ae8:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c0014aec:	31 d2                	xor    edx,edx
c0014aee:	52                   	push   edx
c0014aef:	50                   	push   eax
c0014af0:	55                   	push   ebp
c0014af1:	e8 5c 6d ff ff       	call   c000b852 <File::seek(unsigned long long)>
c0014af6:	83 c4 0c             	add    esp,0xc
c0014af9:	6a 20                	push   0x20
c0014afb:	6a 00                	push   0x0
c0014afd:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0014b04:	51                   	push   ecx
c0014b05:	e8 e6 b9 fe ff       	call   c00004f0 <memset>
c0014b0a:	59                   	pop    ecx
c0014b0b:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0014b0e:	8d 54 24 58          	lea    edx,[esp+0x58]
c0014b12:	52                   	push   edx
c0014b13:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c0014b1a:	51                   	push   ecx
c0014b1b:	6a 00                	push   0x0
c0014b1d:	6a 1f                	push   0x1f
c0014b1f:	55                   	push   ebp
c0014b20:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014b23:	83 c4 1c             	add    esp,0x1c
c0014b26:	6a 09                	push   0x9
c0014b28:	68 4c 20 02 c0       	push   0xc002204c
c0014b2d:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0014b34:	51                   	push   ecx
c0014b35:	e8 46 b8 fe ff       	call   c0000380 <memcmp>
c0014b3a:	83 c4 10             	add    esp,0x10
c0014b3d:	85 c0                	test   eax,eax
c0014b3f:	75 21                	jne    c0014b62 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2d0>
c0014b41:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014b45:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0014b49:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c0014b4d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0014b51:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0014b54:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c0014b5b:	89 d0                	mov    eax,edx
c0014b5d:	40                   	inc    eax
c0014b5e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014b62:	50                   	push   eax
c0014b63:	6a 09                	push   0x9
c0014b65:	68 56 20 02 c0       	push   0xc0022056
c0014b6a:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0014b71:	50                   	push   eax
c0014b72:	e8 09 b8 fe ff       	call   c0000380 <memcmp>
c0014b77:	83 c4 10             	add    esp,0x10
c0014b7a:	85 c0                	test   eax,eax
c0014b7c:	75 21                	jne    c0014b9f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x30d>
c0014b7e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014b82:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0014b86:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0014b8a:	89 4c 84 50          	mov    DWORD PTR [esp+eax*4+0x50],ecx
c0014b8e:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0014b91:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c0014b98:	89 d0                	mov    eax,edx
c0014b9a:	40                   	inc    eax
c0014b9b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014b9f:	50                   	push   eax
c0014ba0:	50                   	push   eax
c0014ba1:	68 22 20 02 c0       	push   0xc0022022
c0014ba6:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0014bad:	50                   	push   eax
c0014bae:	e8 9d bb fe ff       	call   c0000750 <strcmp>
c0014bb3:	83 c4 10             	add    esp,0x10
c0014bb6:	85 c0                	test   eax,eax
c0014bb8:	75 0f                	jne    c0014bc9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x337>
c0014bba:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0014bbd:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014bc1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0014bc5:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0014bc9:	50                   	push   eax
c0014bca:	50                   	push   eax
c0014bcb:	68 2a 20 02 c0       	push   0xc002202a
c0014bd0:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0014bd7:	50                   	push   eax
c0014bd8:	e8 73 bb fe ff       	call   c0000750 <strcmp>
c0014bdd:	83 c4 10             	add    esp,0x10
c0014be0:	85 c0                	test   eax,eax
c0014be2:	75 0f                	jne    c0014bf3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x361>
c0014be4:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0014be7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014beb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0014bef:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0014bf3:	43                   	inc    ebx
c0014bf4:	e9 c6 fe ff ff       	jmp    c0014abf <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x22d>
c0014bf9:	31 d2                	xor    edx,edx
c0014bfb:	50                   	push   eax
c0014bfc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014c00:	52                   	push   edx
c0014c01:	50                   	push   eax
c0014c02:	55                   	push   ebp
c0014c03:	e8 4a 6c ff ff       	call   c000b852 <File::seek(unsigned long long)>
c0014c08:	58                   	pop    eax
c0014c09:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0014c0d:	e8 a4 2e ff ff       	call   c0007ab6 <malloc>
c0014c12:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0014c15:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0014c19:	31 d2                	xor    edx,edx
c0014c1b:	58                   	pop    eax
c0014c1c:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c0014c20:	53                   	push   ebx
c0014c21:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0014c25:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0014c29:	52                   	push   edx
c0014c2a:	50                   	push   eax
c0014c2b:	55                   	push   ebp
c0014c2c:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014c2f:	83 c4 14             	add    esp,0x14
c0014c32:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0014c36:	e8 7b 2e ff ff       	call   c0007ab6 <malloc>
c0014c3b:	31 d2                	xor    edx,edx
c0014c3d:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0014c41:	83 c4 0c             	add    esp,0xc
c0014c44:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0014c48:	52                   	push   edx
c0014c49:	50                   	push   eax
c0014c4a:	55                   	push   ebp
c0014c4b:	e8 02 6c ff ff       	call   c000b852 <File::seek(unsigned long long)>
c0014c50:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0014c53:	31 d2                	xor    edx,edx
c0014c55:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014c58:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014c5c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0014c60:	52                   	push   edx
c0014c61:	50                   	push   eax
c0014c62:	55                   	push   ebp
c0014c63:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014c66:	83 c4 20             	add    esp,0x20
c0014c69:	0f b6 44 24 3b       	movzx  eax,BYTE PTR [esp+0x3b]
c0014c6e:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0014c76:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0014c7a:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0014c7e:	39 5c 24 04          	cmp    DWORD PTR [esp+0x4],ebx
c0014c82:	0f 84 05 03 00 00    	je     c0014f8d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6fb>
c0014c88:	8b 84 9c 50 01 00 00 	mov    eax,DWORD PTR [esp+ebx*4+0x150]
c0014c8f:	31 d2                	xor    edx,edx
c0014c91:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0014c95:	c1 e8 03             	shr    eax,0x3
c0014c98:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0014c9c:	51                   	push   ecx
c0014c9d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014ca1:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c0014ca5:	52                   	push   edx
c0014ca6:	50                   	push   eax
c0014ca7:	55                   	push   ebp
c0014ca8:	e8 a5 6b ff ff       	call   c000b852 <File::seek(unsigned long long)>
c0014cad:	5b                   	pop    ebx
c0014cae:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014cb2:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c0014cb9:	e8 f8 2d ff ff       	call   c0007ab6 <malloc>
c0014cbe:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0014cc1:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0014cc5:	31 d2                	xor    edx,edx
c0014cc7:	5e                   	pop    esi
c0014cc8:	8d 44 24 58          	lea    eax,[esp+0x58]
c0014ccc:	50                   	push   eax
c0014ccd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014cd1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0014cd5:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c0014cdc:	52                   	push   edx
c0014cdd:	50                   	push   eax
c0014cde:	55                   	push   ebp
c0014cdf:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014ce2:	83 c4 20             	add    esp,0x20
c0014ce5:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0014ced:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0014cf1:	39 5c 24 20          	cmp    DWORD PTR [esp+0x20],ebx
c0014cf5:	0f 8d 76 02 00 00    	jge    c0014f71 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6df>
c0014cfb:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0014cff:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0014d03:	c6 44 24 3a 00       	mov    BYTE PTR [esp+0x3a],0x0
c0014d08:	8b 04 c8             	mov    eax,DWORD PTR [eax+ecx*8]
c0014d0b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0014d0f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0014d13:	8b 44 c8 04          	mov    eax,DWORD PTR [eax+ecx*8+0x4]
c0014d17:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014d1b:	c1 e8 08             	shr    eax,0x8
c0014d1e:	89 c6                	mov    esi,eax
c0014d20:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0014d24:	c1 e6 04             	shl    esi,0x4
c0014d27:	03 74 24 34          	add    esi,DWORD PTR [esp+0x34]
c0014d2b:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0014d2e:	85 db                	test   ebx,ebx
c0014d30:	0f 85 b3 00 00 00    	jne    c0014de9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x557>
c0014d36:	83 ec 0c             	sub    esp,0xc
c0014d39:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0014d3d:	03 06                	add    eax,DWORD PTR [esi]
c0014d3f:	50                   	push   eax
c0014d40:	e8 40 f8 ff ff       	call   c0014585 <Thr::getAddressOfKernelSymbol(char const*)>
c0014d45:	83 c4 10             	add    esp,0x10
c0014d48:	89 c3                	mov    ebx,eax
c0014d4a:	c6 44 24 3a 01       	mov    BYTE PTR [esp+0x3a],0x1
c0014d4f:	85 c0                	test   eax,eax
c0014d51:	0f 85 92 00 00 00    	jne    c0014de9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x557>
c0014d57:	83 ec 0c             	sub    esp,0xc
c0014d5a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0014d5e:	03 06                	add    eax,DWORD PTR [esi]
c0014d60:	50                   	push   eax
c0014d61:	e8 72 c6 ff ff       	call   c00113d8 <KeResolveCompatibilitySymbol(char*)>
c0014d66:	83 c4 10             	add    esp,0x10
c0014d69:	89 c3                	mov    ebx,eax
c0014d6b:	85 c0                	test   eax,eax
c0014d6d:	75 7a                	jne    c0014de9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x557>
c0014d6f:	51                   	push   ecx
c0014d70:	51                   	push   ecx
c0014d71:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0014d75:	03 06                	add    eax,DWORD PTR [esi]
c0014d77:	50                   	push   eax
c0014d78:	68 60 20 02 c0       	push   0xc0022060
c0014d7d:	e8 c3 5b ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0014d82:	58                   	pop    eax
c0014d83:	5a                   	pop    edx
c0014d84:	68 7a 20 02 c0       	push   0xc002207a
c0014d89:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0014d90:	50                   	push   eax
c0014d91:	e8 aa b8 fe ff       	call   c0000640 <strcpy>
c0014d96:	59                   	pop    ecx
c0014d97:	58                   	pop    eax
c0014d98:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0014d9c:	03 06                	add    eax,DWORD PTR [esi]
c0014d9e:	50                   	push   eax
c0014d9f:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0014da6:	50                   	push   eax
c0014da7:	e8 94 ba fe ff       	call   c0000840 <strcat>
c0014dac:	58                   	pop    eax
c0014dad:	5a                   	pop    edx
c0014dae:	68 10 21 02 c0       	push   0xc0022110
c0014db3:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0014dba:	50                   	push   eax
c0014dbb:	e8 80 ba fe ff       	call   c0000840 <strcat>
c0014dc0:	83 c4 10             	add    esp,0x10
c0014dc3:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0014dc8:	0f 84 5d 01 00 00    	je     c0014f2b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x699>
c0014dce:	83 ec 0c             	sub    esp,0xc
c0014dd1:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0014dd8:	50                   	push   eax
c0014dd9:	e8 0f c4 ff ff       	call   c00111ed <KePanic(char const*)>
c0014dde:	83 c4 10             	add    esp,0x10
c0014de1:	8a 44 24 3b          	mov    al,BYTE PTR [esp+0x3b]
c0014de5:	88 44 24 3a          	mov    BYTE PTR [esp+0x3a],al
c0014de9:	0f b6 44 24 18       	movzx  eax,BYTE PTR [esp+0x18]
c0014dee:	83 f8 01             	cmp    eax,0x1
c0014df1:	0f 85 8f 00 00 00    	jne    c0014e86 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5f4>
c0014df7:	8b 8c 24 74 03 00 00 	mov    ecx,DWORD PTR [esp+0x374]
c0014dfe:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0014e02:	2b 4c 24 24          	sub    ecx,DWORD PTR [esp+0x24]
c0014e06:	01 ce                	add    esi,ecx
c0014e08:	81 7c 24 18 01 04 00 00 	cmp    DWORD PTR [esp+0x18],0x401
c0014e10:	0f 94 c0             	sete   al
c0014e13:	81 7c 24 18 01 01 00 00 	cmp    DWORD PTR [esp+0x18],0x101
c0014e1b:	0f 94 c2             	sete   dl
c0014e1e:	09 c2                	or     edx,eax
c0014e20:	8b 06                	mov    eax,DWORD PTR [esi]
c0014e22:	80 7c 24 3a 00       	cmp    BYTE PTR [esp+0x3a],0x0
c0014e27:	0f b6 d2             	movzx  edx,dl
c0014e2a:	74 41                	je     c0014e6d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5db>
c0014e2c:	8d 0c 03             	lea    ecx,[ebx+eax*1]
c0014e2f:	85 d2                	test   edx,edx
c0014e31:	75 15                	jne    c0014e48 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5b6>
c0014e33:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0014e37:	66 83 f8 0c          	cmp    ax,0xc
c0014e3b:	76 05                	jbe    c0014e42 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5b0>
c0014e3d:	b8 0c 00 00 00       	mov    eax,0xc
c0014e42:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c0014e46:	76 37                	jbe    c0014e7f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ed>
c0014e48:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0014e4c:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0014e51:	0f 84 d4 00 00 00    	je     c0014f2b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x699>
c0014e57:	83 ec 0c             	sub    esp,0xc
c0014e5a:	68 91 20 02 c0       	push   0xc0022091
c0014e5f:	e8 89 c3 ff ff       	call   c00111ed <KePanic(char const*)>
c0014e64:	83 c4 10             	add    esp,0x10
c0014e67:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0014e6b:	eb 12                	jmp    c0014e7f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ed>
c0014e6d:	01 c1                	add    ecx,eax
c0014e6f:	85 d2                	test   edx,edx
c0014e71:	75 0c                	jne    c0014e7f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ed>
c0014e73:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0014e77:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c0014e7b:	77 02                	ja     c0014e7f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ed>
c0014e7d:	01 d9                	add    ecx,ebx
c0014e7f:	89 0e                	mov    DWORD PTR [esi],ecx
c0014e81:	e9 e2 00 00 00       	jmp    c0014f68 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d6>
c0014e86:	83 f8 02             	cmp    eax,0x2
c0014e89:	75 77                	jne    c0014f02 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x670>
c0014e8b:	8b b4 24 74 03 00 00 	mov    esi,DWORD PTR [esp+0x374]
c0014e92:	2b 74 24 24          	sub    esi,DWORD PTR [esp+0x24]
c0014e96:	03 74 24 28          	add    esi,DWORD PTR [esp+0x28]
c0014e9a:	81 7c 24 18 01 04 00 00 	cmp    DWORD PTR [esp+0x18],0x401
c0014ea2:	74 21                	je     c0014ec5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x633>
c0014ea4:	81 7c 24 18 01 01 00 00 	cmp    DWORD PTR [esp+0x18],0x101
c0014eac:	74 17                	je     c0014ec5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x633>
c0014eae:	0f b7 57 30          	movzx  edx,WORD PTR [edi+0x30]
c0014eb2:	b8 0a 00 00 00       	mov    eax,0xa
c0014eb7:	83 fa 0e             	cmp    edx,0xe
c0014eba:	77 03                	ja     c0014ebf <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x62d>
c0014ebc:	8d 42 fc             	lea    eax,[edx-0x4]
c0014ebf:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c0014ec3:	76 17                	jbe    c0014edc <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x64a>
c0014ec5:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0014eca:	74 5f                	je     c0014f2b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x699>
c0014ecc:	83 ec 0c             	sub    esp,0xc
c0014ecf:	68 ad 20 02 c0       	push   0xc00220ad
c0014ed4:	e8 14 c3 ff ff       	call   c00111ed <KePanic(char const*)>
c0014ed9:	83 c4 10             	add    esp,0x10
c0014edc:	8b 06                	mov    eax,DWORD PTR [esi]
c0014ede:	80 7c 24 3a 00       	cmp    BYTE PTR [esp+0x3a],0x0
c0014ee3:	74 13                	je     c0014ef8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x666>
c0014ee5:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0014ee9:	2b 94 24 74 03 00 00 	sub    edx,DWORD PTR [esp+0x374]
c0014ef0:	2b 54 24 28          	sub    edx,DWORD PTR [esp+0x28]
c0014ef4:	01 d0                	add    eax,edx
c0014ef6:	eb 04                	jmp    c0014efc <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x66a>
c0014ef8:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c0014efc:	01 c3                	add    ebx,eax
c0014efe:	89 1e                	mov    DWORD PTR [esi],ebx
c0014f00:	eb 66                	jmp    c0014f68 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d6>
c0014f02:	52                   	push   edx
c0014f03:	52                   	push   edx
c0014f04:	50                   	push   eax
c0014f05:	68 c9 20 02 c0       	push   0xc00220c9
c0014f0a:	e8 36 5a ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0014f0f:	83 c4 10             	add    esp,0x10
c0014f12:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0014f17:	74 12                	je     c0014f2b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x699>
c0014f19:	83 ec 0c             	sub    esp,0xc
c0014f1c:	68 d4 20 02 c0       	push   0xc00220d4
c0014f21:	e8 c7 c2 ff ff       	call   c00111ed <KePanic(char const*)>
c0014f26:	83 c4 10             	add    esp,0x10
c0014f29:	eb 3d                	jmp    c0014f68 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d6>
c0014f2b:	83 ec 0c             	sub    esp,0xc
c0014f2e:	55                   	push   ebp
c0014f2f:	e8 be 68 ff ff       	call   c000b7f2 <File::close()>
c0014f34:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0014f37:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0014f3a:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0014f3d:	59                   	pop    ecx
c0014f3e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014f42:	e8 7f 2b ff ff       	call   c0007ac6 <free>
c0014f47:	5b                   	pop    ebx
c0014f48:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0014f4c:	e8 75 2b ff ff       	call   c0007ac6 <free>
c0014f51:	89 3c 24             	mov    DWORD PTR [esp],edi
c0014f54:	e8 6d 2b ff ff       	call   c0007ac6 <free>
c0014f59:	5e                   	pop    esi
c0014f5a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014f5e:	e8 63 2b ff ff       	call   c0007ac6 <free>
c0014f63:	83 c4 10             	add    esp,0x10
c0014f66:	eb 21                	jmp    c0014f89 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c0014f68:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c0014f6c:	e9 7c fd ff ff       	jmp    c0014ced <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x45b>
c0014f71:	83 ec 0c             	sub    esp,0xc
c0014f74:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014f78:	e8 49 2b ff ff       	call   c0007ac6 <free>
c0014f7d:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c0014f81:	83 c4 10             	add    esp,0x10
c0014f84:	e9 f1 fc ff ff       	jmp    c0014c7a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3e8>
c0014f89:	31 c0                	xor    eax,eax
c0014f8b:	eb 33                	jmp    c0014fc0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x72e>
c0014f8d:	83 ec 0c             	sub    esp,0xc
c0014f90:	55                   	push   ebp
c0014f91:	e8 5c 68 ff ff       	call   c000b7f2 <File::close()>
c0014f96:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0014f99:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0014f9c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0014f9f:	58                   	pop    eax
c0014fa0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0014fa4:	e8 1d 2b ff ff       	call   c0007ac6 <free>
c0014fa9:	89 3c 24             	mov    DWORD PTR [esp],edi
c0014fac:	e8 15 2b ff ff       	call   c0007ac6 <free>
c0014fb1:	5a                   	pop    edx
c0014fb2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014fb6:	e8 0b 2b ff ff       	call   c0007ac6 <free>
c0014fbb:	83 c4 10             	add    esp,0x10
c0014fbe:	b0 01                	mov    al,0x1
c0014fc0:	81 c4 5c 03 00 00    	add    esp,0x35c
c0014fc6:	5b                   	pop    ebx
c0014fc7:	5e                   	pop    esi
c0014fc8:	5f                   	pop    edi
c0014fc9:	5d                   	pop    ebp
c0014fca:	c3                   	ret    

c0014fcb <Thr::getDriverBaseFromAddress(unsigned long)>:
c0014fcb:	56                   	push   esi
c0014fcc:	31 d2                	xor    edx,edx
c0014fce:	53                   	push   ebx
c0014fcf:	8b 1d a0 9c 02 c0    	mov    ebx,DWORD PTR ds:0xc0029ca0
c0014fd5:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0014fd9:	39 d3                	cmp    ebx,edx
c0014fdb:	7e 1b                	jle    c0014ff8 <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c0014fdd:	8b 04 95 c0 9e 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd6140]
c0014fe4:	39 c8                	cmp    eax,ecx
c0014fe6:	77 0d                	ja     c0014ff5 <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c0014fe8:	8b 34 95 c0 9c 02 c0 	mov    esi,DWORD PTR [edx*4-0x3ffd6340]
c0014fef:	01 c6                	add    esi,eax
c0014ff1:	39 ce                	cmp    esi,ecx
c0014ff3:	77 05                	ja     c0014ffa <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c0014ff5:	42                   	inc    edx
c0014ff6:	eb e1                	jmp    c0014fd9 <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c0014ff8:	31 c0                	xor    eax,eax
c0014ffa:	5b                   	pop    ebx
c0014ffb:	5e                   	pop    esi
c0014ffc:	c3                   	ret    

c0014ffd <Thr::getDriverNameFromAddress(unsigned long)>:
c0014ffd:	53                   	push   ebx
c0014ffe:	31 c0                	xor    eax,eax
c0015000:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0015004:	8b 1d a0 9c 02 c0    	mov    ebx,DWORD PTR ds:0xc0029ca0
c001500a:	39 c3                	cmp    ebx,eax
c001500c:	7e 22                	jle    c0015030 <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c001500e:	8b 14 85 c0 9e 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd6140]
c0015015:	39 ca                	cmp    edx,ecx
c0015017:	77 14                	ja     c001502d <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c0015019:	03 14 85 c0 9c 02 c0 	add    edx,DWORD PTR [eax*4-0x3ffd6340]
c0015020:	39 ca                	cmp    edx,ecx
c0015022:	76 09                	jbe    c001502d <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c0015024:	8b 04 85 c0 a0 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5f40]
c001502b:	eb 05                	jmp    c0015032 <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c001502d:	40                   	inc    eax
c001502e:	eb da                	jmp    c001500a <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c0015030:	31 c0                	xor    eax,eax
c0015032:	5b                   	pop    ebx
c0015033:	c3                   	ret    

c0015034 <Thr::getDriverOffsetFromAddress(unsigned long)>:
c0015034:	53                   	push   ebx
c0015035:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0015039:	53                   	push   ebx
c001503a:	e8 8c ff ff ff       	call   c0014fcb <Thr::getDriverBaseFromAddress(unsigned long)>
c001503f:	5a                   	pop    edx
c0015040:	31 d2                	xor    edx,edx
c0015042:	85 c0                	test   eax,eax
c0015044:	74 04                	je     c001504a <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c0015046:	89 da                	mov    edx,ebx
c0015048:	29 c2                	sub    edx,eax
c001504a:	89 d0                	mov    eax,edx
c001504c:	5b                   	pop    ebx
c001504d:	c3                   	ret    

c001504e <Thr::loadDLL(char const*, bool)>:
c001504e:	55                   	push   ebp
c001504f:	57                   	push   edi
c0015050:	56                   	push   esi
c0015051:	53                   	push   ebx
c0015052:	81 ec 34 01 00 00    	sub    esp,0x134
c0015058:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c001505f:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c0015066:	56                   	push   esi
c0015067:	68 ec 20 02 c0       	push   0xc00220ec
c001506c:	e8 d4 58 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0015071:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0015078:	e8 39 2a ff ff       	call   c0007ab6 <malloc>
c001507d:	83 c4 0c             	add    esp,0xc
c0015080:	89 c3                	mov    ebx,eax
c0015082:	ff 35 90 a4 02 c0    	push   DWORD PTR ds:0xc002a490
c0015088:	56                   	push   esi
c0015089:	50                   	push   eax
c001508a:	e8 49 66 ff ff       	call   c000b6d8 <File::File(char const*, Process*)>
c001508f:	83 c4 10             	add    esp,0x10
c0015092:	85 db                	test   ebx,ebx
c0015094:	75 3c                	jne    c00150d2 <Thr::loadDLL(char const*, bool)+0x84>
c0015096:	89 f8                	mov    eax,edi
c0015098:	84 c0                	test   al,al
c001509a:	0f 84 d2 01 00 00    	je     c0015272 <Thr::loadDLL(char const*, bool)+0x224>
c00150a0:	55                   	push   ebp
c00150a1:	55                   	push   ebp
c00150a2:	68 fd 20 02 c0       	push   0xc00220fd
c00150a7:	8d 6c 24 2c          	lea    ebp,[esp+0x2c]
c00150ab:	55                   	push   ebp
c00150ac:	e8 8f b5 fe ff       	call   c0000640 <strcpy>
c00150b1:	58                   	pop    eax
c00150b2:	5a                   	pop    edx
c00150b3:	56                   	push   esi
c00150b4:	55                   	push   ebp
c00150b5:	e8 86 b7 fe ff       	call   c0000840 <strcat>
c00150ba:	59                   	pop    ecx
c00150bb:	58                   	pop    eax
c00150bc:	68 10 21 02 c0       	push   0xc0022110
c00150c1:	55                   	push   ebp
c00150c2:	e8 79 b7 fe ff       	call   c0000840 <strcat>
c00150c7:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00150ca:	e8 1e c1 ff ff       	call   c00111ed <KePanic(char const*)>
c00150cf:	83 c4 10             	add    esp,0x10
c00150d2:	51                   	push   ecx
c00150d3:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c00150d7:	50                   	push   eax
c00150d8:	8d 44 24 20          	lea    eax,[esp+0x20]
c00150dc:	50                   	push   eax
c00150dd:	53                   	push   ebx
c00150de:	e8 b3 69 ff ff       	call   c000ba96 <File::stat(unsigned long long*, bool*)>
c00150e3:	83 c4 10             	add    esp,0x10
c00150e6:	85 db                	test   ebx,ebx
c00150e8:	74 0c                	je     c00150f6 <Thr::loadDLL(char const*, bool)+0xa8>
c00150ea:	83 ec 0c             	sub    esp,0xc
c00150ed:	8b 03                	mov    eax,DWORD PTR [ebx]
c00150ef:	53                   	push   ebx
c00150f0:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00150f3:	83 c4 10             	add    esp,0x10
c00150f6:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c00150fb:	75 0a                	jne    c0015107 <Thr::loadDLL(char const*, bool)+0xb9>
c00150fd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015101:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c0015105:	75 3c                	jne    c0015143 <Thr::loadDLL(char const*, bool)+0xf5>
c0015107:	89 f8                	mov    eax,edi
c0015109:	84 c0                	test   al,al
c001510b:	0f 84 49 01 00 00    	je     c001525a <Thr::loadDLL(char const*, bool)+0x20c>
c0015111:	51                   	push   ecx
c0015112:	51                   	push   ecx
c0015113:	68 fd 20 02 c0       	push   0xc00220fd
c0015118:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c001511c:	53                   	push   ebx
c001511d:	e8 1e b5 fe ff       	call   c0000640 <strcpy>
c0015122:	5d                   	pop    ebp
c0015123:	58                   	pop    eax
c0015124:	56                   	push   esi
c0015125:	53                   	push   ebx
c0015126:	e8 15 b7 fe ff       	call   c0000840 <strcat>
c001512b:	58                   	pop    eax
c001512c:	5a                   	pop    edx
c001512d:	68 10 21 02 c0       	push   0xc0022110
c0015132:	53                   	push   ebx
c0015133:	e8 08 b7 fe ff       	call   c0000840 <strcat>
c0015138:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001513b:	e8 ad c0 ff ff       	call   c00111ed <KePanic(char const*)>
c0015140:	83 c4 10             	add    esp,0x10
c0015143:	52                   	push   edx
c0015144:	6a 03                	push   0x3
c0015146:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001514a:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001514e:	05 ff 0f 00 00       	add    eax,0xfff
c0015153:	83 d2 00             	adc    edx,0x0
c0015156:	0f ac d0 0c          	shrd   eax,edx,0xc
c001515a:	50                   	push   eax
c001515b:	ff 35 b0 5f 02 c0    	push   DWORD PTR ds:0xc0025fb0
c0015161:	e8 be 4c ff ff       	call   c0009e24 <VAS::allocatePages(int, int)>
c0015166:	59                   	pop    ecx
c0015167:	89 c3                	mov    ebx,eax
c0015169:	5d                   	pop    ebp
c001516a:	50                   	push   eax
c001516b:	68 b2 07 02 c0       	push   0xc00207b2
c0015170:	e8 d0 57 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0015175:	89 34 24             	mov    DWORD PTR [esp],esi
c0015178:	e8 f3 b3 fe ff       	call   c0000570 <strlen>
c001517d:	8b 2d a0 9c 02 c0    	mov    ebp,DWORD PTR ds:0xc0029ca0
c0015183:	40                   	inc    eax
c0015184:	89 04 24             	mov    DWORD PTR [esp],eax
c0015187:	e8 2a 29 ff ff       	call   c0007ab6 <malloc>
c001518c:	89 04 ad c0 a0 02 c0 	mov    DWORD PTR [ebp*4-0x3ffd5f40],eax
c0015193:	58                   	pop    eax
c0015194:	a1 a0 9c 02 c0       	mov    eax,ds:0xc0029ca0
c0015199:	5a                   	pop    edx
c001519a:	56                   	push   esi
c001519b:	ff 34 85 c0 a0 02 c0 	push   DWORD PTR [eax*4-0x3ffd5f40]
c00151a2:	e8 99 b4 fe ff       	call   c0000640 <strcpy>
c00151a7:	a1 a0 9c 02 c0       	mov    eax,ds:0xc0029ca0
c00151ac:	8d 50 01             	lea    edx,[eax+0x1]
c00151af:	89 1c 85 c0 9e 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6140],ebx
c00151b6:	89 15 a0 9c 02 c0    	mov    DWORD PTR ds:0xc0029ca0,edx
c00151bc:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00151c0:	83 c4 0c             	add    esp,0xc
c00151c3:	89 14 85 c0 9c 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6340],edx
c00151ca:	6a 01                	push   0x1
c00151cc:	53                   	push   ebx
c00151cd:	56                   	push   esi
c00151ce:	e8 bf f6 ff ff       	call   c0014892 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c00151d3:	83 c4 10             	add    esp,0x10
c00151d6:	0f b6 c0             	movzx  eax,al
c00151d9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00151dd:	85 c0                	test   eax,eax
c00151df:	0f 85 89 00 00 00    	jne    c001526e <Thr::loadDLL(char const*, bool)+0x220>
c00151e5:	89 f8                	mov    eax,edi
c00151e7:	84 c0                	test   al,al
c00151e9:	74 73                	je     c001525e <Thr::loadDLL(char const*, bool)+0x210>
c00151eb:	83 ec 0c             	sub    esp,0xc
c00151ee:	68 12 21 02 c0       	push   0xc0022112
c00151f3:	e8 f5 bf ff ff       	call   c00111ed <KePanic(char const*)>
c00151f8:	83 c4 10             	add    esp,0x10
c00151fb:	eb 61                	jmp    c001525e <Thr::loadDLL(char const*, bool)+0x210>
c00151fd:	50                   	push   eax
c00151fe:	50                   	push   eax
c00151ff:	89 e8                	mov    eax,ebp
c0015201:	c1 e0 0c             	shl    eax,0xc
c0015204:	01 d8                	add    eax,ebx
c0015206:	50                   	push   eax
c0015207:	ff 35 b0 5f 02 c0    	push   DWORD PTR ds:0xc0025fb0
c001520d:	e8 fa 46 ff ff       	call   c000990c <VAS::getPageTableEntry(unsigned long)>
c0015212:	83 c4 10             	add    esp,0x10
c0015215:	8b 00                	mov    eax,DWORD PTR [eax]
c0015217:	a8 60                	test   al,0x60
c0015219:	75 11                	jne    c001522c <Thr::loadDLL(char const*, bool)+0x1de>
c001521b:	83 ec 0c             	sub    esp,0xc
c001521e:	25 00 f0 ff ff       	and    eax,0xfffff000
c0015223:	50                   	push   eax
c0015224:	e8 2d 2b ff ff       	call   c0007d56 <Phys::freePage(unsigned long)>
c0015229:	83 c4 10             	add    esp,0x10
c001522c:	45                   	inc    ebp
c001522d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0015231:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0015235:	05 ff 0f 00 00       	add    eax,0xfff
c001523a:	bf 00 00 00 00       	mov    edi,0x0
c001523f:	83 d2 00             	adc    edx,0x0
c0015242:	0f ac d0 0c          	shrd   eax,edx,0xc
c0015246:	c1 ea 0c             	shr    edx,0xc
c0015249:	39 c5                	cmp    ebp,eax
c001524b:	89 d1                	mov    ecx,edx
c001524d:	89 f8                	mov    eax,edi
c001524f:	19 c8                	sbb    eax,ecx
c0015251:	72 aa                	jb     c00151fd <Thr::loadDLL(char const*, bool)+0x1af>
c0015253:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0015258:	75 18                	jne    c0015272 <Thr::loadDLL(char const*, bool)+0x224>
c001525a:	31 db                	xor    ebx,ebx
c001525c:	eb 14                	jmp    c0015272 <Thr::loadDLL(char const*, bool)+0x224>
c001525e:	83 ec 0c             	sub    esp,0xc
c0015261:	68 31 21 02 c0       	push   0xc0022131
c0015266:	e8 82 bf ff ff       	call   c00111ed <KePanic(char const*)>
c001526b:	83 c4 10             	add    esp,0x10
c001526e:	31 ed                	xor    ebp,ebp
c0015270:	eb bb                	jmp    c001522d <Thr::loadDLL(char const*, bool)+0x1df>
c0015272:	81 c4 2c 01 00 00    	add    esp,0x12c
c0015278:	89 d8                	mov    eax,ebx
c001527a:	5b                   	pop    ebx
c001527b:	5e                   	pop    esi
c001527c:	5f                   	pop    edi
c001527d:	5d                   	pop    ebp
c001527e:	c3                   	ret    

c001527f <Thr::executeDLL(unsigned long, void*)>:
c001527f:	56                   	push   esi
c0015280:	53                   	push   ebx
c0015281:	52                   	push   edx
c0015282:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0015286:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001528a:	85 db                	test   ebx,ebx
c001528c:	75 10                	jne    c001529e <Thr::executeDLL(unsigned long, void*)+0x1f>
c001528e:	83 ec 0c             	sub    esp,0xc
c0015291:	68 4d 21 02 c0       	push   0xc002214d
c0015296:	e8 52 bf ff ff       	call   c00111ed <KePanic(char const*)>
c001529b:	83 c4 10             	add    esp,0x10
c001529e:	50                   	push   eax
c001529f:	50                   	push   eax
c00152a0:	53                   	push   ebx
c00152a1:	68 77 21 02 c0       	push   0xc0022177
c00152a6:	e8 9a 56 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c00152ab:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c00152af:	89 d8                	mov    eax,ebx
c00152b1:	83 c4 14             	add    esp,0x14
c00152b4:	5b                   	pop    ebx
c00152b5:	5e                   	pop    esi
c00152b6:	ff e0                	jmp    eax

c00152b8 <userModeEntryPoint(void*)>:
c00152b8:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c00152bd:	83 e8 01             	sub    eax,0x1
c00152c0:	a3 68 a4 02 c0       	mov    ds:0xc002a468,eax
c00152c5:	75 01                	jne    c00152c8 <userModeEntryPoint(void*)+0x10>
c00152c7:	fb                   	sti    
c00152c8:	fb                   	sti    
c00152c9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00152ce:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00152d1:	8b 80 0e 05 00 00    	mov    eax,DWORD PTR [eax+0x50e]
c00152d7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00152db:	e9 5f af fe ff       	jmp    c000023f <goToUsermode>

c00152e0 <changeTSS>:
c00152e0:	83 ec 14             	sub    esp,0x14
c00152e3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00152e8:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c00152eb:	b8 00 00 e8 01       	mov    eax,0x1e80000
c00152f0:	c1 e2 15             	shl    edx,0x15
c00152f3:	29 d0                	sub    eax,edx
c00152f5:	50                   	push   eax
c00152f6:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c00152fb:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0015301:	05 7c 11 00 00       	add    eax,0x117c
c0015306:	50                   	push   eax
c0015307:	e8 48 3c ff ff       	call   c0008f54 <TSS::setESP(unsigned long)>
c001530c:	83 c4 1c             	add    esp,0x1c
c001530f:	c3                   	ret    

c0015310 <switchToThread(ThreadControlBlock*)>:
c0015310:	57                   	push   edi
c0015311:	8b 0d 64 a4 02 c0    	mov    ecx,DWORD PTR ds:0xc002a464
c0015317:	56                   	push   esi
c0015318:	85 c9                	test   ecx,ecx
c001531a:	53                   	push   ebx
c001531b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001531f:	0f 85 8b 00 00 00    	jne    c00153b0 <switchToThread(ThreadControlBlock*)+0xa0>
c0015325:	0f b6 53 40          	movzx  edx,BYTE PTR [ebx+0x40]
c0015329:	81 fa ff 00 00 00    	cmp    edx,0xff
c001532f:	74 7b                	je     c00153ac <switchToThread(ThreadControlBlock*)+0x9c>
c0015331:	b8 00 04 00 00       	mov    eax,0x400
c0015336:	29 d0                	sub    eax,edx
c0015338:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c001533b:	d1 f8                	sar    eax,1
c001533d:	01 d0                	add    eax,edx
c001533f:	90                   	nop
c0015340:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0015343:	e8 1e 28 00 00       	call   c0017b66 <HalQueryPerformanceCounter()>
c0015348:	a3 a8 a4 02 c0       	mov    ds:0xc002a4a8,eax
c001534d:	89 15 ac a4 02 c0    	mov    DWORD PTR ds:0xc002a4ac,edx
c0015353:	89 c6                	mov    esi,eax
c0015355:	89 d7                	mov    edi,edx
c0015357:	2b 35 98 a4 02 c0    	sub    esi,DWORD PTR ds:0xc002a498
c001535d:	a3 98 a4 02 c0       	mov    ds:0xc002a498,eax
c0015362:	1b 3d 9c a4 02 c0    	sbb    edi,DWORD PTR ds:0xc002a49c
c0015368:	89 35 a0 a4 02 c0    	mov    DWORD PTR ds:0xc002a4a0,esi
c001536e:	89 3d a4 a4 02 c0    	mov    DWORD PTR ds:0xc002a4a4,edi
c0015374:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001537a:	89 15 9c a4 02 c0    	mov    DWORD PTR ds:0xc002a49c,edx
c0015380:	8b 41 10             	mov    eax,DWORD PTR [ecx+0x10]
c0015383:	8b 51 14             	mov    edx,DWORD PTR [ecx+0x14]
c0015386:	01 c6                	add    esi,eax
c0015388:	11 d7                	adc    edi,edx
c001538a:	89 71 10             	mov    DWORD PTR [ecx+0x10],esi
c001538d:	83 ec 0c             	sub    esp,0xc
c0015390:	89 79 14             	mov    DWORD PTR [ecx+0x14],edi
c0015393:	53                   	push   ebx
c0015394:	e8 de ae fe ff       	call   c0000277 <switchToThreadASM>
c0015399:	0f 20 c0             	mov    eax,cr0
c001539c:	83 c8 08             	or     eax,0x8
c001539f:	0f 22 c0             	mov    cr0,eax
c00153a2:	83 c4 10             	add    esp,0x10
c00153a5:	5b                   	pop    ebx
c00153a6:	5e                   	pop    esi
c00153a7:	5f                   	pop    edi
c00153a8:	c3                   	ret    
c00153a9:	8d 76 00             	lea    esi,[esi+0x0]
c00153ac:	31 c0                	xor    eax,eax
c00153ae:	eb 90                	jmp    c0015340 <switchToThread(ThreadControlBlock*)+0x30>
c00153b0:	5b                   	pop    ebx
c00153b1:	c7 05 60 a4 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002a460,0x1
c00153bb:	5e                   	pop    esi
c00153bc:	5f                   	pop    edi
c00153bd:	c3                   	ret    
c00153be:	66 90                	xchg   ax,ax

c00153c0 <Process::addArgs(char**)>:
c00153c0:	57                   	push   edi
c00153c1:	56                   	push   esi
c00153c2:	53                   	push   ebx
c00153c3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00153c7:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00153cb:	c7 86 16 05 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x516],0x0
c00153d5:	85 ff                	test   edi,edi
c00153d7:	74 4f                	je     c0015428 <Process::addArgs(char**)+0x68>
c00153d9:	8b 07                	mov    eax,DWORD PTR [edi]
c00153db:	85 c0                	test   eax,eax
c00153dd:	74 49                	je     c0015428 <Process::addArgs(char**)+0x68>
c00153df:	31 db                	xor    ebx,ebx
c00153e1:	8d 76 00             	lea    esi,[esi+0x0]
c00153e4:	83 ec 0c             	sub    esp,0xc
c00153e7:	50                   	push   eax
c00153e8:	e8 83 b1 fe ff       	call   c0000570 <strlen>
c00153ed:	83 c0 01             	add    eax,0x1
c00153f0:	89 04 24             	mov    DWORD PTR [esp],eax
c00153f3:	e8 be 26 ff ff       	call   c0007ab6 <malloc>
c00153f8:	89 84 9e 1a 05 00 00 	mov    DWORD PTR [esi+ebx*4+0x51a],eax
c00153ff:	5a                   	pop    edx
c0015400:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c0015403:	59                   	pop    ecx
c0015404:	83 c3 01             	add    ebx,0x1
c0015407:	52                   	push   edx
c0015408:	50                   	push   eax
c0015409:	e8 32 b2 fe ff       	call   c0000640 <strcpy>
c001540e:	8b 8e 16 05 00 00    	mov    ecx,DWORD PTR [esi+0x516]
c0015414:	83 c4 10             	add    esp,0x10
c0015417:	83 c1 01             	add    ecx,0x1
c001541a:	89 8e 16 05 00 00    	mov    DWORD PTR [esi+0x516],ecx
c0015420:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c0015423:	85 c0                	test   eax,eax
c0015425:	75 bd                	jne    c00153e4 <Process::addArgs(char**)+0x24>
c0015427:	90                   	nop
c0015428:	5b                   	pop    ebx
c0015429:	5e                   	pop    esi
c001542a:	5f                   	pop    edi
c001542b:	c3                   	ret    

c001542c <Process::Process(char const*, Process*, char**)>:
c001542c:	56                   	push   esi
c001542d:	53                   	push   ebx
c001542e:	83 ec 14             	sub    esp,0x14
c0015431:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015435:	05 0c 02 00 00       	add    eax,0x20c
c001543a:	bb 07 00 00 00       	mov    ebx,0x7
c001543f:	89 c6                	mov    esi,eax
c0015441:	8d 76 00             	lea    esi,[esi+0x0]
c0015444:	85 db                	test   ebx,ebx
c0015446:	78 14                	js     c001545c <Process::Process(char const*, Process*, char**)+0x30>
c0015448:	83 ec 0c             	sub    esp,0xc
c001544b:	56                   	push   esi
c001544c:	e8 e7 a5 00 00       	call   c001fa38 <ThreadControlBlock::ThreadControlBlock()>
c0015451:	83 c4 10             	add    esp,0x10
c0015454:	83 c6 5f             	add    esi,0x5f
c0015457:	83 eb 01             	sub    ebx,0x1
c001545a:	eb e8                	jmp    c0015444 <Process::Process(char const*, Process*, char**)+0x18>
c001545c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015460:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c0015467:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001546b:	c6 80 1f 07 00 00 00 	mov    BYTE PTR [eax+0x71f],0x0
c0015472:	83 ec 0c             	sub    esp,0xc
c0015475:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015479:	e8 64 bb ff ff       	call   c0010fe2 <KeNewProcessEnv(Process*)>
c001547e:	83 c4 10             	add    esp,0x10
c0015481:	89 c2                	mov    edx,eax
c0015483:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015487:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c001548d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015491:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c001549a:	a1 a0 33 02 c0       	mov    eax,ds:0xc00233a0
c001549f:	8d 50 01             	lea    edx,[eax+0x1]
c00154a2:	89 15 a0 33 02 c0    	mov    DWORD PTR ds:0xc00233a0,edx
c00154a8:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00154ac:	89 02                	mov    DWORD PTR [edx],eax
c00154ae:	c7 44 24 08 14 00 00 00 	mov    DWORD PTR [esp+0x8],0x14
c00154b6:	83 ec 0c             	sub    esp,0xc
c00154b9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00154bd:	e8 f4 25 ff ff       	call   c0007ab6 <malloc>
c00154c2:	83 c4 10             	add    esp,0x10
c00154c5:	89 c3                	mov    ebx,eax
c00154c7:	83 ec 08             	sub    esp,0x8
c00154ca:	6a 00                	push   0x0
c00154cc:	53                   	push   ebx
c00154cd:	e8 96 4b ff ff       	call   c000a068 <VAS::VAS(bool)>
c00154d2:	83 c4 10             	add    esp,0x10
c00154d5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00154d9:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c00154df:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00154e3:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c00154ed:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00154f1:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00154f5:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c00154fb:	e8 06 c1 ff ff       	call   c0011606 <KeInitSignals()>
c0015500:	89 c2                	mov    edx,eax
c0015502:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015506:	89 90 20 07 00 00    	mov    DWORD PTR [eax+0x720],edx
c001550c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015510:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0015516:	85 c0                	test   eax,eax
c0015518:	74 42                	je     c001555c <Process::Process(char const*, Process*, char**)+0x130>
c001551a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001551e:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0015524:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c001552a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001552e:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c0015534:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015538:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c001553e:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0015544:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015548:	05 0c 01 00 00       	add    eax,0x10c
c001554d:	83 ec 08             	sub    esp,0x8
c0015550:	52                   	push   edx
c0015551:	50                   	push   eax
c0015552:	e8 e9 b0 fe ff       	call   c0000640 <strcpy>
c0015557:	83 c4 10             	add    esp,0x10
c001555a:	eb 64                	jmp    c00155c0 <Process::Process(char const*, Process*, char**)+0x194>
c001555c:	c7 44 24 04 84 01 00 00 	mov    DWORD PTR [esp+0x4],0x184
c0015564:	83 ec 0c             	sub    esp,0xc
c0015567:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001556b:	e8 46 25 ff ff       	call   c0007ab6 <malloc>
c0015570:	83 c4 10             	add    esp,0x10
c0015573:	89 c3                	mov    ebx,eax
c0015575:	83 ec 08             	sub    esp,0x8
c0015578:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001557c:	53                   	push   ebx
c001557d:	e8 e4 36 ff ff       	call   c0008c66 <VgaText::VgaText(char const*)>
c0015582:	83 c4 10             	add    esp,0x10
c0015585:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015589:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c001558f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015593:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015599:	83 ec 0c             	sub    esp,0xc
c001559c:	50                   	push   eax
c001559d:	e8 62 2f ff ff       	call   c0008504 <addToTerminalCycle(VgaText*)>
c00155a2:	83 c4 10             	add    esp,0x10
c00155a5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00155a9:	05 0c 01 00 00       	add    eax,0x10c
c00155ae:	83 ec 08             	sub    esp,0x8
c00155b1:	68 96 21 02 c0       	push   0xc0022196
c00155b6:	50                   	push   eax
c00155b7:	e8 84 b0 fe ff       	call   c0000640 <strcpy>
c00155bc:	83 c4 10             	add    esp,0x10
c00155bf:	90                   	nop
c00155c0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00155c4:	83 c0 0c             	add    eax,0xc
c00155c7:	83 ec 08             	sub    esp,0x8
c00155ca:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00155ce:	50                   	push   eax
c00155cf:	e8 6c b0 fe ff       	call   c0000640 <strcpy>
c00155d4:	83 c4 10             	add    esp,0x10
c00155d7:	83 ec 08             	sub    esp,0x8
c00155da:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00155de:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00155e2:	e8 d9 fd ff ff       	call   c00153c0 <Process::addArgs(char**)>
c00155e7:	83 c4 10             	add    esp,0x10
c00155ea:	83 ec 08             	sub    esp,0x8
c00155ed:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00155f1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00155f5:	e8 66 ed ff ff       	call   c0014360 <Thr::loadProgramIntoMemory(Process*, char const*)>
c00155fa:	83 c4 10             	add    esp,0x10
c00155fd:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0015601:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0015605:	83 f0 01             	xor    eax,0x1
c0015608:	88 c2                	mov    dl,al
c001560a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001560e:	88 90 1e 07 00 00    	mov    BYTE PTR [eax+0x71e],dl
c0015614:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0015619:	83 ec 04             	sub    esp,0x4
c001561c:	50                   	push   eax
c001561d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015621:	68 f0 21 02 c0       	push   0xc00221f0
c0015626:	e8 1a 53 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001562b:	83 c4 10             	add    esp,0x10
c001562e:	90                   	nop
c001562f:	83 c4 14             	add    esp,0x14
c0015632:	5b                   	pop    ebx
c0015633:	5e                   	pop    esi
c0015634:	c3                   	ret    
c0015635:	90                   	nop
c0015636:	66 90                	xchg   ax,ax

c0015638 <Process::Process(bool, char const*, Process*, char**)>:
c0015638:	56                   	push   esi
c0015639:	53                   	push   ebx
c001563a:	83 ec 24             	sub    esp,0x24
c001563d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0015641:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0015645:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015649:	05 0c 02 00 00       	add    eax,0x20c
c001564e:	bb 07 00 00 00       	mov    ebx,0x7
c0015653:	89 c6                	mov    esi,eax
c0015655:	8d 76 00             	lea    esi,[esi+0x0]
c0015658:	85 db                	test   ebx,ebx
c001565a:	78 14                	js     c0015670 <Process::Process(bool, char const*, Process*, char**)+0x38>
c001565c:	83 ec 0c             	sub    esp,0xc
c001565f:	56                   	push   esi
c0015660:	e8 d3 a3 00 00       	call   c001fa38 <ThreadControlBlock::ThreadControlBlock()>
c0015665:	83 c4 10             	add    esp,0x10
c0015668:	83 c6 5f             	add    esi,0x5f
c001566b:	83 eb 01             	sub    ebx,0x1
c001566e:	eb e8                	jmp    c0015658 <Process::Process(bool, char const*, Process*, char**)+0x20>
c0015670:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015674:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c001567b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001567f:	c6 80 1f 07 00 00 00 	mov    BYTE PTR [eax+0x71f],0x0
c0015686:	83 ec 0c             	sub    esp,0xc
c0015689:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001568d:	e8 50 b9 ff ff       	call   c0010fe2 <KeNewProcessEnv(Process*)>
c0015692:	83 c4 10             	add    esp,0x10
c0015695:	89 c2                	mov    edx,eax
c0015697:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001569b:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c00156a1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00156a5:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c00156ae:	a1 a0 33 02 c0       	mov    eax,ds:0xc00233a0
c00156b3:	8d 50 01             	lea    edx,[eax+0x1]
c00156b6:	89 15 a0 33 02 c0    	mov    DWORD PTR ds:0xc00233a0,edx
c00156bc:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00156c0:	89 02                	mov    DWORD PTR [edx],eax
c00156c2:	c7 44 24 1c 14 00 00 00 	mov    DWORD PTR [esp+0x1c],0x14
c00156ca:	83 ec 0c             	sub    esp,0xc
c00156cd:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00156d1:	e8 e0 23 ff ff       	call   c0007ab6 <malloc>
c00156d6:	83 c4 10             	add    esp,0x10
c00156d9:	89 c3                	mov    ebx,eax
c00156db:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00156e0:	83 ec 08             	sub    esp,0x8
c00156e3:	50                   	push   eax
c00156e4:	53                   	push   ebx
c00156e5:	e8 7e 49 ff ff       	call   c000a068 <VAS::VAS(bool)>
c00156ea:	83 c4 10             	add    esp,0x10
c00156ed:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00156f1:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c00156f7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00156fb:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0015705:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015709:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001570d:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c0015713:	e8 ee be ff ff       	call   c0011606 <KeInitSignals()>
c0015718:	89 c2                	mov    edx,eax
c001571a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001571e:	89 90 20 07 00 00    	mov    DWORD PTR [eax+0x720],edx
c0015724:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015728:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c001572e:	85 c0                	test   eax,eax
c0015730:	74 42                	je     c0015774 <Process::Process(bool, char const*, Process*, char**)+0x13c>
c0015732:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015736:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c001573c:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0015742:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015746:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c001574c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015750:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0015756:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001575c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015760:	05 0c 01 00 00       	add    eax,0x10c
c0015765:	83 ec 08             	sub    esp,0x8
c0015768:	52                   	push   edx
c0015769:	50                   	push   eax
c001576a:	e8 d1 ae fe ff       	call   c0000640 <strcpy>
c001576f:	83 c4 10             	add    esp,0x10
c0015772:	eb 64                	jmp    c00157d8 <Process::Process(bool, char const*, Process*, char**)+0x1a0>
c0015774:	c7 44 24 18 84 01 00 00 	mov    DWORD PTR [esp+0x18],0x184
c001577c:	83 ec 0c             	sub    esp,0xc
c001577f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0015783:	e8 2e 23 ff ff       	call   c0007ab6 <malloc>
c0015788:	83 c4 10             	add    esp,0x10
c001578b:	89 c3                	mov    ebx,eax
c001578d:	83 ec 08             	sub    esp,0x8
c0015790:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0015794:	53                   	push   ebx
c0015795:	e8 cc 34 ff ff       	call   c0008c66 <VgaText::VgaText(char const*)>
c001579a:	83 c4 10             	add    esp,0x10
c001579d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00157a1:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c00157a7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00157ab:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00157b1:	83 ec 0c             	sub    esp,0xc
c00157b4:	50                   	push   eax
c00157b5:	e8 4a 2d ff ff       	call   c0008504 <addToTerminalCycle(VgaText*)>
c00157ba:	83 c4 10             	add    esp,0x10
c00157bd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00157c1:	05 0c 01 00 00       	add    eax,0x10c
c00157c6:	83 ec 08             	sub    esp,0x8
c00157c9:	68 96 21 02 c0       	push   0xc0022196
c00157ce:	50                   	push   eax
c00157cf:	e8 6c ae fe ff       	call   c0000640 <strcpy>
c00157d4:	83 c4 10             	add    esp,0x10
c00157d7:	90                   	nop
c00157d8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00157dc:	83 c0 0c             	add    eax,0xc
c00157df:	83 ec 08             	sub    esp,0x8
c00157e2:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00157e6:	50                   	push   eax
c00157e7:	e8 54 ae fe ff       	call   c0000640 <strcpy>
c00157ec:	83 c4 10             	add    esp,0x10
c00157ef:	83 ec 08             	sub    esp,0x8
c00157f2:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00157f6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00157fa:	e8 c1 fb ff ff       	call   c00153c0 <Process::addArgs(char**)>
c00157ff:	83 c4 10             	add    esp,0x10
c0015802:	90                   	nop
c0015803:	83 c4 24             	add    esp,0x24
c0015806:	5b                   	pop    ebx
c0015807:	5e                   	pop    esi
c0015808:	c3                   	ret    
c0015809:	8d 76 00             	lea    esi,[esi+0x0]

c001580c <taskStartupFunction>:
c001580c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015811:	8b 40 41             	mov    eax,DWORD PTR [eax+0x41]
c0015814:	c3                   	ret    
c0015815:	90                   	nop
c0015816:	66 90                	xchg   ax,ax

c0015818 <Semaphore::Semaphore(int)>:
c0015818:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001581c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0015820:	89 10                	mov    DWORD PTR [eax],edx
c0015822:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015826:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001582d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015831:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0015838:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001583c:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0015843:	90                   	nop
c0015844:	c3                   	ret    
c0015845:	90                   	nop
c0015846:	66 90                	xchg   ax,ax

c0015848 <Mutex::Mutex()>:
c0015848:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001584c:	6a 01                	push   0x1
c001584e:	50                   	push   eax
c001584f:	e8 c4 ff ff ff       	call   c0015818 <Semaphore::Semaphore(int)>
c0015854:	83 c4 08             	add    esp,0x8
c0015857:	90                   	nop
c0015858:	c3                   	ret    
c0015859:	90                   	nop
c001585a:	66 90                	xchg   ax,ax

c001585c <Process::createThread(void (*)(void*), void*, int)>:
c001585c:	57                   	push   edi
c001585d:	31 c9                	xor    ecx,ecx
c001585f:	56                   	push   esi
c0015860:	53                   	push   ebx
c0015861:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0015865:	66 8b b3 04 05 00 00 	mov    si,WORD PTR [ebx+0x504]
c001586c:	89 f2                	mov    edx,esi
c001586e:	66 90                	xchg   ax,ax
c0015870:	0f b7 c2             	movzx  eax,dx
c0015873:	80 e2 01             	and    dl,0x1
c0015876:	74 14                	je     c001588c <Process::createThread(void (*)(void*), void*, int)+0x30>
c0015878:	d1 f8                	sar    eax,1
c001587a:	83 c1 01             	add    ecx,0x1
c001587d:	89 c2                	mov    edx,eax
c001587f:	83 f9 10             	cmp    ecx,0x10
c0015882:	75 ec                	jne    c0015870 <Process::createThread(void (*)(void*), void*, int)+0x14>
c0015884:	31 db                	xor    ebx,ebx
c0015886:	89 d8                	mov    eax,ebx
c0015888:	5b                   	pop    ebx
c0015889:	5e                   	pop    esi
c001588a:	5f                   	pop    edi
c001588b:	c3                   	ret    
c001588c:	b8 01 00 00 00       	mov    eax,0x1
c0015891:	d3 e0                	shl    eax,cl
c0015893:	09 c6                	or     esi,eax
c0015895:	8d 04 c9             	lea    eax,[ecx+ecx*8]
c0015898:	66 89 b3 04 05 00 00 	mov    WORD PTR [ebx+0x504],si
c001589f:	01 c0                	add    eax,eax
c00158a1:	01 c8                	add    eax,ecx
c00158a3:	8d 04 80             	lea    eax,[eax+eax*4]
c00158a6:	01 d8                	add    eax,ebx
c00158a8:	80 b8 6a 02 00 00 00 	cmp    BYTE PTR [eax+0x26a],0x0
c00158af:	75 0b                	jne    c00158bc <Process::createThread(void (*)(void*), void*, int)+0x60>
c00158b1:	c7 80 61 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x261],0x0
c00158bb:	90                   	nop
c00158bc:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c00158c2:	83 ec 0c             	sub    esp,0xc
c00158c5:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00158c8:	8d 04 c9             	lea    eax,[ecx+ecx*8]
c00158cb:	01 c0                	add    eax,eax
c00158cd:	01 c8                	add    eax,ecx
c00158cf:	8d 3c 80             	lea    edi,[eax+eax*4]
c00158d2:	8d 04 3b             	lea    eax,[ebx+edi*1]
c00158d5:	89 90 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edx
c00158db:	8d b0 00 02 00 00    	lea    esi,[eax+0x200]
c00158e1:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00158e5:	89 88 44 02 00 00    	mov    DWORD PTR [eax+0x244],ecx
c00158eb:	89 90 4d 02 00 00    	mov    DWORD PTR [eax+0x24d],edx
c00158f1:	89 98 48 02 00 00    	mov    DWORD PTR [eax+0x248],ebx
c00158f7:	89 ca                	mov    edx,ecx
c00158f9:	8d 9c 3b 0c 02 00 00 	lea    ebx,[ebx+edi*1+0x20c]
c0015900:	f7 da                	neg    edx
c0015902:	c1 e2 15             	shl    edx,0x15
c0015905:	81 c2 e0 ff ff 01    	add    edx,0x1ffffe0
c001590b:	89 90 10 02 00 00    	mov    DWORD PTR [eax+0x210],edx
c0015911:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0015915:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c001591f:	88 90 4c 02 00 00    	mov    BYTE PTR [eax+0x24c],dl
c0015925:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0015929:	89 90 18 02 00 00    	mov    DWORD PTR [eax+0x218],edx
c001592f:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c0015939:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c0015943:	68 00 01 00 00       	push   0x100
c0015948:	e8 69 21 ff ff       	call   c0007ab6 <malloc>
c001594d:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c0015950:	58                   	pop    eax
c0015951:	5a                   	pop    edx
c0015952:	53                   	push   ebx
c0015953:	68 84 a4 02 c0       	push   0xc002a484
c0015958:	e8 73 9e 00 00       	call   c001f7d0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001595d:	83 c4 10             	add    esp,0x10
c0015960:	89 d8                	mov    eax,ebx
c0015962:	5b                   	pop    ebx
c0015963:	5e                   	pop    esi
c0015964:	5f                   	pop    edi
c0015965:	c3                   	ret    
c0015966:	66 90                	xchg   ax,ax

c0015968 <Process::createUserThread()>:
c0015968:	83 ec 0c             	sub    esp,0xc
c001596b:	68 80 00 00 00       	push   0x80
c0015970:	6a 00                	push   0x0
c0015972:	68 b8 52 01 c0       	push   0xc00152b8
c0015977:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001597b:	50                   	push   eax
c001597c:	e8 db fe ff ff       	call   c001585c <Process::createThread(void (*)(void*), void*, int)>
c0015981:	83 c4 1c             	add    esp,0x1c
c0015984:	c3                   	ret    
c0015985:	8d 76 00             	lea    esi,[esi+0x0]

c0015988 <setupMultitasking(void (*)())>:
c0015988:	56                   	push   esi
c0015989:	53                   	push   ebx
c001598a:	83 ec 04             	sub    esp,0x4
c001598d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0015991:	eb 11                	jmp    c00159a4 <setupMultitasking(void (*)())+0x1c>
c0015993:	90                   	nop
c0015994:	83 ec 0c             	sub    esp,0xc
c0015997:	68 84 a4 02 c0       	push   0xc002a484
c001599c:	e8 73 9d 00 00       	call   c001f714 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c00159a1:	83 c4 10             	add    esp,0x10
c00159a4:	83 ec 0c             	sub    esp,0xc
c00159a7:	68 84 a4 02 c0       	push   0xc002a484
c00159ac:	e8 3f 9d 00 00       	call   c001f6f0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00159b1:	83 c4 10             	add    esp,0x10
c00159b4:	84 c0                	test   al,al
c00159b6:	74 dc                	je     c0015994 <setupMultitasking(void (*)())+0xc>
c00159b8:	83 ec 0c             	sub    esp,0xc
c00159bb:	68 24 07 00 00       	push   0x724
c00159c0:	e8 f1 20 ff ff       	call   c0007ab6 <malloc>
c00159c5:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00159cc:	89 c3                	mov    ebx,eax
c00159ce:	6a 00                	push   0x0
c00159d0:	68 9a 21 02 c0       	push   0xc002219a
c00159d5:	6a 01                	push   0x1
c00159d7:	50                   	push   eax
c00159d8:	e8 5b fc ff ff       	call   c0015638 <Process::Process(bool, char const*, Process*, char**)>
c00159dd:	83 c4 14             	add    esp,0x14
c00159e0:	8b 83 06 05 00 00    	mov    eax,DWORD PTR [ebx+0x506]
c00159e6:	89 1d 90 a4 02 c0    	mov    DWORD PTR ds:0xc002a490,ebx
c00159ec:	50                   	push   eax
c00159ed:	e8 67 2d ff ff       	call   c0008759 <setActiveTerminal(VgaText*)>
c00159f2:	66 8b 83 04 05 00 00 	mov    ax,WORD PTR [ebx+0x504]
c00159f9:	c7 83 61 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x261],0x0
c0015a03:	83 c8 01             	or     eax,0x1
c0015a06:	66 89 83 04 05 00 00 	mov    WORD PTR [ebx+0x504],ax
c0015a0d:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c0015a13:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0015a16:	c7 83 44 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x244],0x0
c0015a20:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c0015a26:	89 9b 48 02 00 00    	mov    DWORD PTR [ebx+0x248],ebx
c0015a2c:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c0015a36:	c7 83 40 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x240],0x2faf080
c0015a40:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c0015a4a:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c0015a50:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c0015a5a:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c0015a60:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c0015a6a:	c7 04 24 00 01 00 00 	mov    DWORD PTR [esp],0x100
c0015a71:	e8 40 20 ff ff       	call   c0007ab6 <malloc>
c0015a76:	89 83 14 02 00 00    	mov    DWORD PTR [ebx+0x214],eax
c0015a7c:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0015a82:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c0015a88:	5a                   	pop    edx
c0015a89:	59                   	pop    ecx
c0015a8a:	68 96 21 02 c0       	push   0xc0022196
c0015a8f:	50                   	push   eax
c0015a90:	e8 ab ab fe ff       	call   c0000640 <strcpy>
c0015a95:	c6 83 4c 02 00 00 80 	mov    BYTE PTR [ebx+0x24c],0x80
c0015a9c:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0015aa0:	83 c4 14             	add    esp,0x14
c0015aa3:	5b                   	pop    ebx
c0015aa4:	5e                   	pop    esi
c0015aa5:	e9 bf a7 fe ff       	jmp    c0000269 <switchToThreadASMFirstTime>
c0015aaa:	66 90                	xchg   ax,ax

c0015aac <schedule()>:
c0015aac:	8b 15 64 a4 02 c0    	mov    edx,DWORD PTR ds:0xc002a464
c0015ab2:	85 d2                	test   edx,edx
c0015ab4:	74 0e                	je     c0015ac4 <schedule()+0x18>
c0015ab6:	c7 05 60 a4 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002a460,0x1
c0015ac0:	c3                   	ret    
c0015ac1:	8d 76 00             	lea    esi,[esi+0x0]
c0015ac4:	53                   	push   ebx
c0015ac5:	83 ec 14             	sub    esp,0x14
c0015ac8:	68 84 a4 02 c0       	push   0xc002a484
c0015acd:	e8 1e 9c 00 00       	call   c001f6f0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0015ad2:	83 c4 10             	add    esp,0x10
c0015ad5:	84 c0                	test   al,al
c0015ad7:	75 3f                	jne    c0015b18 <schedule()+0x6c>
c0015ad9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015ade:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0015ae1:	83 fa 01             	cmp    edx,0x1
c0015ae4:	74 3a                	je     c0015b20 <schedule()+0x74>
c0015ae6:	66 90                	xchg   ax,ax
c0015ae8:	83 ec 0c             	sub    esp,0xc
c0015aeb:	68 84 a4 02 c0       	push   0xc002a484
c0015af0:	e8 17 9c 00 00       	call   c001f70c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0015af5:	c7 04 24 84 a4 02 c0 	mov    DWORD PTR [esp],0xc002a484
c0015afc:	89 c3                	mov    ebx,eax
c0015afe:	e8 11 9c 00 00       	call   c001f714 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0015b03:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c0015b0a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015b0d:	e8 fe f7 ff ff       	call   c0015310 <switchToThread(ThreadControlBlock*)>
c0015b12:	83 c4 10             	add    esp,0x10
c0015b15:	8d 76 00             	lea    esi,[esi+0x0]
c0015b18:	83 c4 08             	add    esp,0x8
c0015b1b:	5b                   	pop    ebx
c0015b1c:	c3                   	ret    
c0015b1d:	8d 76 00             	lea    esi,[esi+0x0]
c0015b20:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0015b27:	83 ec 08             	sub    esp,0x8
c0015b2a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015b2f:	50                   	push   eax
c0015b30:	68 84 a4 02 c0       	push   0xc002a484
c0015b35:	e8 96 9c 00 00       	call   c001f7d0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0015b3a:	83 c4 10             	add    esp,0x10
c0015b3d:	eb a9                	jmp    c0015ae8 <schedule()+0x3c>
c0015b3f:	90                   	nop

c0015b40 <Semaphore::tryAcquire()>:
c0015b40:	53                   	push   ebx
c0015b41:	83 ec 08             	sub    esp,0x8
c0015b44:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0015b48:	fa                   	cli    
c0015b49:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c0015b4e:	8d 50 01             	lea    edx,[eax+0x1]
c0015b51:	89 15 68 a4 02 c0    	mov    DWORD PTR ds:0xc002a468,edx
c0015b57:	8b 15 64 a4 02 c0    	mov    edx,DWORD PTR ds:0xc002a464
c0015b5d:	8d 5a 01             	lea    ebx,[edx+0x1]
c0015b60:	89 1d 64 a4 02 c0    	mov    DWORD PTR ds:0xc002a464,ebx
c0015b66:	8b 59 0c             	mov    ebx,DWORD PTR [ecx+0xc]
c0015b69:	3b 19                	cmp    ebx,DWORD PTR [ecx]
c0015b6b:	7c 33                	jl     c0015ba0 <Semaphore::tryAcquire()+0x60>
c0015b6d:	89 15 64 a4 02 c0    	mov    DWORD PTR ds:0xc002a464,edx
c0015b73:	85 d2                	test   edx,edx
c0015b75:	75 0d                	jne    c0015b84 <Semaphore::tryAcquire()+0x44>
c0015b77:	8b 15 60 a4 02 c0    	mov    edx,DWORD PTR ds:0xc002a460
c0015b7d:	85 d2                	test   edx,edx
c0015b7f:	75 6f                	jne    c0015bf0 <Semaphore::tryAcquire()+0xb0>
c0015b81:	8d 76 00             	lea    esi,[esi+0x0]
c0015b84:	a3 68 a4 02 c0       	mov    ds:0xc002a468,eax
c0015b89:	85 c0                	test   eax,eax
c0015b8b:	74 0b                	je     c0015b98 <Semaphore::tryAcquire()+0x58>
c0015b8d:	8d 76 00             	lea    esi,[esi+0x0]
c0015b90:	31 c0                	xor    eax,eax
c0015b92:	83 c4 08             	add    esp,0x8
c0015b95:	5b                   	pop    ebx
c0015b96:	c3                   	ret    
c0015b97:	90                   	nop
c0015b98:	fb                   	sti    
c0015b99:	83 c4 08             	add    esp,0x8
c0015b9c:	5b                   	pop    ebx
c0015b9d:	c3                   	ret    
c0015b9e:	66 90                	xchg   ax,ax
c0015ba0:	83 c3 01             	add    ebx,0x1
c0015ba3:	89 15 64 a4 02 c0    	mov    DWORD PTR ds:0xc002a464,edx
c0015ba9:	89 59 0c             	mov    DWORD PTR [ecx+0xc],ebx
c0015bac:	85 d2                	test   edx,edx
c0015bae:	75 24                	jne    c0015bd4 <Semaphore::tryAcquire()+0x94>
c0015bb0:	8b 0d 60 a4 02 c0    	mov    ecx,DWORD PTR ds:0xc002a460
c0015bb6:	85 c9                	test   ecx,ecx
c0015bb8:	74 1a                	je     c0015bd4 <Semaphore::tryAcquire()+0x94>
c0015bba:	c7 05 60 a4 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002a460,0x0
c0015bc4:	e8 e3 fe ff ff       	call   c0015aac <schedule()>
c0015bc9:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c0015bce:	83 e8 01             	sub    eax,0x1
c0015bd1:	8d 76 00             	lea    esi,[esi+0x0]
c0015bd4:	a3 68 a4 02 c0       	mov    ds:0xc002a468,eax
c0015bd9:	85 c0                	test   eax,eax
c0015bdb:	75 0b                	jne    c0015be8 <Semaphore::tryAcquire()+0xa8>
c0015bdd:	fb                   	sti    
c0015bde:	b0 01                	mov    al,0x1
c0015be0:	83 c4 08             	add    esp,0x8
c0015be3:	5b                   	pop    ebx
c0015be4:	c3                   	ret    
c0015be5:	8d 76 00             	lea    esi,[esi+0x0]
c0015be8:	b0 01                	mov    al,0x1
c0015bea:	83 c4 08             	add    esp,0x8
c0015bed:	5b                   	pop    ebx
c0015bee:	c3                   	ret    
c0015bef:	90                   	nop
c0015bf0:	c7 05 60 a4 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002a460,0x0
c0015bfa:	e8 ad fe ff ff       	call   c0015aac <schedule()>
c0015bff:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c0015c04:	83 e8 01             	sub    eax,0x1
c0015c07:	a3 68 a4 02 c0       	mov    ds:0xc002a468,eax
c0015c0c:	85 c0                	test   eax,eax
c0015c0e:	75 80                	jne    c0015b90 <Semaphore::tryAcquire()+0x50>
c0015c10:	eb 86                	jmp    c0015b98 <Semaphore::tryAcquire()+0x58>
c0015c12:	66 90                	xchg   ax,ax

c0015c14 <Semaphore::assertLocked(char const*)>:
c0015c14:	83 ec 0c             	sub    esp,0xc
c0015c17:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015c1b:	fa                   	cli    
c0015c1c:	8b 0d 68 a4 02 c0    	mov    ecx,DWORD PTR ds:0xc002a468
c0015c22:	a1 64 a4 02 c0       	mov    eax,ds:0xc002a464
c0015c27:	83 c1 01             	add    ecx,0x1
c0015c2a:	89 0d 68 a4 02 c0    	mov    DWORD PTR ds:0xc002a468,ecx
c0015c30:	8d 48 01             	lea    ecx,[eax+0x1]
c0015c33:	89 0d 64 a4 02 c0    	mov    DWORD PTR ds:0xc002a464,ecx
c0015c39:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0015c3b:	39 4a 0c             	cmp    DWORD PTR [edx+0xc],ecx
c0015c3e:	7c 28                	jl     c0015c68 <Semaphore::assertLocked(char const*)+0x54>
c0015c40:	a3 64 a4 02 c0       	mov    ds:0xc002a464,eax
c0015c45:	85 c0                	test   eax,eax
c0015c47:	75 0b                	jne    c0015c54 <Semaphore::assertLocked(char const*)+0x40>
c0015c49:	a1 60 a4 02 c0       	mov    eax,ds:0xc002a460
c0015c4e:	85 c0                	test   eax,eax
c0015c50:	75 32                	jne    c0015c84 <Semaphore::assertLocked(char const*)+0x70>
c0015c52:	66 90                	xchg   ax,ax
c0015c54:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c0015c59:	83 e8 01             	sub    eax,0x1
c0015c5c:	a3 68 a4 02 c0       	mov    ds:0xc002a468,eax
c0015c61:	75 01                	jne    c0015c64 <Semaphore::assertLocked(char const*)+0x50>
c0015c63:	fb                   	sti    
c0015c64:	83 c4 0c             	add    esp,0xc
c0015c67:	c3                   	ret    
c0015c68:	83 ec 0c             	sub    esp,0xc
c0015c6b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0015c6f:	52                   	push   edx
c0015c70:	e8 78 b5 ff ff       	call   c00111ed <KePanic(char const*)>
c0015c75:	a1 64 a4 02 c0       	mov    eax,ds:0xc002a464
c0015c7a:	83 c4 10             	add    esp,0x10
c0015c7d:	83 e8 01             	sub    eax,0x1
c0015c80:	eb be                	jmp    c0015c40 <Semaphore::assertLocked(char const*)+0x2c>
c0015c82:	66 90                	xchg   ax,ax
c0015c84:	c7 05 60 a4 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002a460,0x0
c0015c8e:	e8 19 fe ff ff       	call   c0015aac <schedule()>
c0015c93:	eb bf                	jmp    c0015c54 <Semaphore::assertLocked(char const*)+0x40>
c0015c95:	8d 76 00             	lea    esi,[esi+0x0]

c0015c98 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c0015c98:	83 ec 0c             	sub    esp,0xc
c0015c9b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015ca0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015ca4:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0015ca7:	e8 00 fe ff ff       	call   c0015aac <schedule()>
c0015cac:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c0015cb1:	83 e8 01             	sub    eax,0x1
c0015cb4:	a3 68 a4 02 c0       	mov    ds:0xc002a468,eax
c0015cb9:	75 01                	jne    c0015cbc <blockTaskWithSchedulerLockAlreadyHeld(TaskState)+0x24>
c0015cbb:	fb                   	sti    
c0015cbc:	83 c4 0c             	add    esp,0xc
c0015cbf:	c3                   	ret    

c0015cc0 <blockTask(TaskState)>:
c0015cc0:	83 ec 0c             	sub    esp,0xc
c0015cc3:	fa                   	cli    
c0015cc4:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c0015cc9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015ccd:	83 c0 01             	add    eax,0x1
c0015cd0:	a3 68 a4 02 c0       	mov    ds:0xc002a468,eax
c0015cd5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015cda:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0015cdd:	e8 ca fd ff ff       	call   c0015aac <schedule()>
c0015ce2:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c0015ce7:	83 e8 01             	sub    eax,0x1
c0015cea:	a3 68 a4 02 c0       	mov    ds:0xc002a468,eax
c0015cef:	75 03                	jne    c0015cf4 <blockTask(TaskState)+0x34>
c0015cf1:	fb                   	sti    
c0015cf2:	66 90                	xchg   ax,ax
c0015cf4:	83 c4 0c             	add    esp,0xc
c0015cf7:	c3                   	ret    

c0015cf8 <waitTask(int, int*, int)>:
c0015cf8:	83 ec 18             	sub    esp,0x18
c0015cfb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015d00:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0015d04:	89 50 45             	mov    DWORD PTR [eax+0x45],edx
c0015d07:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0015d0b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015d10:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c0015d13:	6a 07                	push   0x7
c0015d15:	e8 a6 ff ff ff       	call   c0015cc0 <blockTask(TaskState)>
c0015d1a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015d1f:	83 c4 10             	add    esp,0x10
c0015d22:	8b 50 49             	mov    edx,DWORD PTR [eax+0x49]
c0015d25:	85 d2                	test   edx,edx
c0015d27:	74 0b                	je     c0015d34 <waitTask(int, int*, int)+0x3c>
c0015d29:	8b 40 4d             	mov    eax,DWORD PTR [eax+0x4d]
c0015d2c:	89 02                	mov    DWORD PTR [edx],eax
c0015d2e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015d33:	90                   	nop
c0015d34:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c0015d37:	83 c4 0c             	add    esp,0xc
c0015d3a:	c3                   	ret    
c0015d3b:	90                   	nop

c0015d3c <milliTenthSleepUntil(unsigned int)>:
c0015d3c:	83 ec 0c             	sub    esp,0xc
c0015d3f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015d43:	39 05 4c 95 02 c0    	cmp    DWORD PTR ds:0xc002954c,eax
c0015d49:	76 05                	jbe    c0015d50 <milliTenthSleepUntil(unsigned int)+0x14>
c0015d4b:	90                   	nop
c0015d4c:	83 c4 0c             	add    esp,0xc
c0015d4f:	c3                   	ret    
c0015d50:	fa                   	cli    
c0015d51:	8b 15 68 a4 02 c0    	mov    edx,DWORD PTR ds:0xc002a468
c0015d57:	83 ec 08             	sub    esp,0x8
c0015d5a:	83 c2 01             	add    edx,0x1
c0015d5d:	8b 0d 64 a4 02 c0    	mov    ecx,DWORD PTR ds:0xc002a464
c0015d63:	89 15 68 a4 02 c0    	mov    DWORD PTR ds:0xc002a468,edx
c0015d69:	83 c1 01             	add    ecx,0x1
c0015d6c:	89 0d 64 a4 02 c0    	mov    DWORD PTR ds:0xc002a464,ecx
c0015d72:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0015d78:	89 42 2c             	mov    DWORD PTR [edx+0x2c],eax
c0015d7b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015d80:	50                   	push   eax
c0015d81:	68 78 a4 02 c0       	push   0xc002a478
c0015d86:	e8 45 9a 00 00       	call   c001f7d0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0015d8b:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0015d92:	e8 29 ff ff ff       	call   c0015cc0 <blockTask(TaskState)>
c0015d97:	a1 64 a4 02 c0       	mov    eax,ds:0xc002a464
c0015d9c:	83 c4 10             	add    esp,0x10
c0015d9f:	83 e8 01             	sub    eax,0x1
c0015da2:	a3 64 a4 02 c0       	mov    ds:0xc002a464,eax
c0015da7:	85 c0                	test   eax,eax
c0015da9:	75 09                	jne    c0015db4 <milliTenthSleepUntil(unsigned int)+0x78>
c0015dab:	a1 60 a4 02 c0       	mov    eax,ds:0xc002a460
c0015db0:	85 c0                	test   eax,eax
c0015db2:	75 14                	jne    c0015dc8 <milliTenthSleepUntil(unsigned int)+0x8c>
c0015db4:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c0015db9:	83 e8 01             	sub    eax,0x1
c0015dbc:	a3 68 a4 02 c0       	mov    ds:0xc002a468,eax
c0015dc1:	75 89                	jne    c0015d4c <milliTenthSleepUntil(unsigned int)+0x10>
c0015dc3:	fb                   	sti    
c0015dc4:	83 c4 0c             	add    esp,0xc
c0015dc7:	c3                   	ret    
c0015dc8:	c7 05 60 a4 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002a460,0x0
c0015dd2:	e8 d5 fc ff ff       	call   c0015aac <schedule()>
c0015dd7:	eb db                	jmp    c0015db4 <milliTenthSleepUntil(unsigned int)+0x78>
c0015dd9:	8d 76 00             	lea    esi,[esi+0x0]

c0015ddc <milliTenthSleep(unsigned int)>:
c0015ddc:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0015de0:	a1 4c 95 02 c0       	mov    eax,ds:0xc002954c
c0015de5:	01 c2                	add    edx,eax
c0015de7:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0015deb:	e9 4c ff ff ff       	jmp    c0015d3c <milliTenthSleepUntil(unsigned int)>

c0015df0 <sleep(unsigned int)>:
c0015df0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015df4:	8d 04 80             	lea    eax,[eax+eax*4]
c0015df7:	8d 04 80             	lea    eax,[eax+eax*4]
c0015dfa:	8d 04 80             	lea    eax,[eax+eax*4]
c0015dfd:	8d 04 80             	lea    eax,[eax+eax*4]
c0015e00:	c1 e0 04             	shl    eax,0x4
c0015e03:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0015e07:	eb d3                	jmp    c0015ddc <milliTenthSleep(unsigned int)>
c0015e09:	90                   	nop
c0015e0a:	66 90                	xchg   ax,ax

c0015e0c <Semaphore::acquire()>:
c0015e0c:	83 ec 0c             	sub    esp,0xc
c0015e0f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015e13:	fa                   	cli    
c0015e14:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c0015e19:	83 c0 01             	add    eax,0x1
c0015e1c:	a3 68 a4 02 c0       	mov    ds:0xc002a468,eax
c0015e21:	a1 64 a4 02 c0       	mov    eax,ds:0xc002a464
c0015e26:	8d 48 01             	lea    ecx,[eax+0x1]
c0015e29:	89 0d 64 a4 02 c0    	mov    DWORD PTR ds:0xc002a464,ecx
c0015e2f:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0015e32:	3b 0a                	cmp    ecx,DWORD PTR [edx]
c0015e34:	7d 2e                	jge    c0015e64 <Semaphore::acquire()+0x58>
c0015e36:	83 c1 01             	add    ecx,0x1
c0015e39:	89 4a 0c             	mov    DWORD PTR [edx+0xc],ecx
c0015e3c:	a3 64 a4 02 c0       	mov    ds:0xc002a464,eax
c0015e41:	85 c0                	test   eax,eax
c0015e43:	75 0b                	jne    c0015e50 <Semaphore::acquire()+0x44>
c0015e45:	a1 60 a4 02 c0       	mov    eax,ds:0xc002a460
c0015e4a:	85 c0                	test   eax,eax
c0015e4c:	75 66                	jne    c0015eb4 <Semaphore::acquire()+0xa8>
c0015e4e:	66 90                	xchg   ax,ax
c0015e50:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c0015e55:	83 e8 01             	sub    eax,0x1
c0015e58:	a3 68 a4 02 c0       	mov    ds:0xc002a468,eax
c0015e5d:	75 01                	jne    c0015e60 <Semaphore::acquire()+0x54>
c0015e5f:	fb                   	sti    
c0015e60:	83 c4 0c             	add    esp,0xc
c0015e63:	c3                   	ret    
c0015e64:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015e69:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0015e70:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c0015e73:	85 c9                	test   ecx,ecx
c0015e75:	74 51                	je     c0015ec8 <Semaphore::acquire()+0xbc>
c0015e77:	8b 42 08             	mov    eax,DWORD PTR [edx+0x8]
c0015e7a:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0015e80:	89 48 20             	mov    DWORD PTR [eax+0x20],ecx
c0015e83:	90                   	nop
c0015e84:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015e89:	83 ec 0c             	sub    esp,0xc
c0015e8c:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c0015e8f:	68 1c 22 02 c0       	push   0xc002221c
c0015e94:	e8 ac 4a ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0015e99:	c7 04 24 05 00 00 00 	mov    DWORD PTR [esp],0x5
c0015ea0:	e8 1b fe ff ff       	call   c0015cc0 <blockTask(TaskState)>
c0015ea5:	a1 64 a4 02 c0       	mov    eax,ds:0xc002a464
c0015eaa:	83 c4 10             	add    esp,0x10
c0015ead:	83 e8 01             	sub    eax,0x1
c0015eb0:	eb 8a                	jmp    c0015e3c <Semaphore::acquire()+0x30>
c0015eb2:	66 90                	xchg   ax,ax
c0015eb4:	c7 05 60 a4 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002a460,0x0
c0015ebe:	e8 e9 fb ff ff       	call   c0015aac <schedule()>
c0015ec3:	eb 8b                	jmp    c0015e50 <Semaphore::acquire()+0x44>
c0015ec5:	8d 76 00             	lea    esi,[esi+0x0]
c0015ec8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015ecd:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0015ed0:	eb b2                	jmp    c0015e84 <Semaphore::acquire()+0x78>
c0015ed2:	66 90                	xchg   ax,ax

c0015ed4 <taskReturned>:
c0015ed4:	83 ec 18             	sub    esp,0x18
c0015ed7:	68 3c 22 02 c0       	push   0xc002223c
c0015edc:	e8 0c b3 ff ff       	call   c00111ed <KePanic(char const*)>
c0015ee1:	83 c4 10             	add    esp,0x10
c0015ee4:	83 ec 0c             	sub    esp,0xc
c0015ee7:	6a 02                	push   0x2
c0015ee9:	e8 d2 fd ff ff       	call   c0015cc0 <blockTask(TaskState)>
c0015eee:	fa                   	cli    
c0015eef:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c0015ef4:	83 c0 01             	add    eax,0x1
c0015ef7:	a3 68 a4 02 c0       	mov    ds:0xc002a468,eax
c0015efc:	e8 ab fb ff ff       	call   c0015aac <schedule()>
c0015f01:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c0015f06:	83 c4 10             	add    esp,0x10
c0015f09:	83 e8 01             	sub    eax,0x1
c0015f0c:	a3 68 a4 02 c0       	mov    ds:0xc002a468,eax
c0015f11:	85 c0                	test   eax,eax
c0015f13:	75 cf                	jne    c0015ee4 <taskReturned+0x10>
c0015f15:	fb                   	sti    
c0015f16:	eb cc                	jmp    c0015ee4 <taskReturned+0x10>

c0015f18 <Thr::processFromPID(int)>:
c0015f18:	57                   	push   edi
c0015f19:	56                   	push   esi
c0015f1a:	53                   	push   ebx
c0015f1b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0015f1f:	fa                   	cli    
c0015f20:	8b 0d 68 a4 02 c0    	mov    ecx,DWORD PTR ds:0xc002a468
c0015f26:	83 ec 0c             	sub    esp,0xc
c0015f29:	83 c1 01             	add    ecx,0x1
c0015f2c:	68 84 a4 02 c0       	push   0xc002a484
c0015f31:	89 0d 68 a4 02 c0    	mov    DWORD PTR ds:0xc002a468,ecx
c0015f37:	e8 d0 97 00 00       	call   c001f70c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0015f3c:	83 c4 10             	add    esp,0x10
c0015f3f:	89 c7                	mov    edi,eax
c0015f41:	eb 15                	jmp    c0015f58 <Thr::processFromPID(int)+0x40>
c0015f43:	90                   	nop
c0015f44:	83 ec 0c             	sub    esp,0xc
c0015f47:	68 84 a4 02 c0       	push   0xc002a484
c0015f4c:	e8 bb 97 00 00       	call   c001f70c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0015f51:	83 c4 10             	add    esp,0x10
c0015f54:	39 f8                	cmp    eax,edi
c0015f56:	74 50                	je     c0015fa8 <Thr::processFromPID(int)+0x90>
c0015f58:	83 ec 0c             	sub    esp,0xc
c0015f5b:	68 84 a4 02 c0       	push   0xc002a484
c0015f60:	e8 a7 97 00 00       	call   c001f70c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0015f65:	c7 04 24 84 a4 02 c0 	mov    DWORD PTR [esp],0xc002a484
c0015f6c:	89 c3                	mov    ebx,eax
c0015f6e:	e8 a1 97 00 00       	call   c001f714 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0015f73:	58                   	pop    eax
c0015f74:	5a                   	pop    edx
c0015f75:	53                   	push   ebx
c0015f76:	68 84 a4 02 c0       	push   0xc002a484
c0015f7b:	e8 50 98 00 00       	call   c001f7d0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0015f80:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0015f83:	83 c4 10             	add    esp,0x10
c0015f86:	39 30                	cmp    DWORD PTR [eax],esi
c0015f88:	75 ba                	jne    c0015f44 <Thr::processFromPID(int)+0x2c>
c0015f8a:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c0015f8f:	83 e8 01             	sub    eax,0x1
c0015f92:	a3 68 a4 02 c0       	mov    ds:0xc002a468,eax
c0015f97:	74 0b                	je     c0015fa4 <Thr::processFromPID(int)+0x8c>
c0015f99:	8d 76 00             	lea    esi,[esi+0x0]
c0015f9c:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0015f9f:	5b                   	pop    ebx
c0015fa0:	5e                   	pop    esi
c0015fa1:	5f                   	pop    edi
c0015fa2:	c3                   	ret    
c0015fa3:	90                   	nop
c0015fa4:	fb                   	sti    
c0015fa5:	eb f5                	jmp    c0015f9c <Thr::processFromPID(int)+0x84>
c0015fa7:	90                   	nop
c0015fa8:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c0015fad:	83 e8 01             	sub    eax,0x1
c0015fb0:	a3 68 a4 02 c0       	mov    ds:0xc002a468,eax
c0015fb5:	75 05                	jne    c0015fbc <Thr::processFromPID(int)+0xa4>
c0015fb7:	fb                   	sti    
c0015fb8:	5b                   	pop    ebx
c0015fb9:	5e                   	pop    esi
c0015fba:	5f                   	pop    edi
c0015fbb:	c3                   	ret    
c0015fbc:	5b                   	pop    ebx
c0015fbd:	31 c0                	xor    eax,eax
c0015fbf:	5e                   	pop    esi
c0015fc0:	5f                   	pop    edi
c0015fc1:	c3                   	ret    
c0015fc2:	66 90                	xchg   ax,ax

c0015fc4 <unblockTask(ThreadControlBlock*)>:
c0015fc4:	53                   	push   ebx
c0015fc5:	83 ec 08             	sub    esp,0x8
c0015fc8:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0015fcc:	fa                   	cli    
c0015fcd:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c0015fd2:	83 c0 01             	add    eax,0x1
c0015fd5:	a3 68 a4 02 c0       	mov    ds:0xc002a468,eax
c0015fda:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0015fdd:	85 c0                	test   eax,eax
c0015fdf:	74 67                	je     c0016048 <unblockTask(ThreadControlBlock*)+0x84>
c0015fe1:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0015fe4:	83 f8 01             	cmp    eax,0x1
c0015fe7:	74 37                	je     c0016020 <unblockTask(ThreadControlBlock*)+0x5c>
c0015fe9:	83 ec 0c             	sub    esp,0xc
c0015fec:	68 84 a4 02 c0       	push   0xc002a484
c0015ff1:	e8 16 97 00 00       	call   c001f70c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0015ff6:	83 c4 10             	add    esp,0x10
c0015ff9:	85 c0                	test   eax,eax
c0015ffb:	75 1b                	jne    c0016018 <unblockTask(ThreadControlBlock*)+0x54>
c0015ffd:	eb 5d                	jmp    c001605c <unblockTask(ThreadControlBlock*)+0x98>
c0015fff:	90                   	nop
c0016000:	83 ec 08             	sub    esp,0x8
c0016003:	50                   	push   eax
c0016004:	68 84 a4 02 c0       	push   0xc002a484
c0016009:	e8 1e 9a 00 00       	call   c001fa2c <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c001600e:	83 c4 10             	add    esp,0x10
c0016011:	85 c0                	test   eax,eax
c0016013:	74 47                	je     c001605c <unblockTask(ThreadControlBlock*)+0x98>
c0016015:	8d 76 00             	lea    esi,[esi+0x0]
c0016018:	39 c3                	cmp    ebx,eax
c001601a:	75 e4                	jne    c0016000 <unblockTask(ThreadControlBlock*)+0x3c>
c001601c:	eb 12                	jmp    c0016030 <unblockTask(ThreadControlBlock*)+0x6c>
c001601e:	66 90                	xchg   ax,ax
c0016020:	83 ec 0c             	sub    esp,0xc
c0016023:	68 b8 21 02 c0       	push   0xc00221b8
c0016028:	e8 18 49 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001602d:	83 c4 10             	add    esp,0x10
c0016030:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c0016035:	83 e8 01             	sub    eax,0x1
c0016038:	a3 68 a4 02 c0       	mov    ds:0xc002a468,eax
c001603d:	75 01                	jne    c0016040 <unblockTask(ThreadControlBlock*)+0x7c>
c001603f:	fb                   	sti    
c0016040:	83 c4 08             	add    esp,0x8
c0016043:	5b                   	pop    ebx
c0016044:	c3                   	ret    
c0016045:	8d 76 00             	lea    esi,[esi+0x0]
c0016048:	83 ec 0c             	sub    esp,0xc
c001604b:	68 a1 21 02 c0       	push   0xc00221a1
c0016050:	e8 f0 48 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0016055:	83 c4 10             	add    esp,0x10
c0016058:	eb d6                	jmp    c0016030 <unblockTask(ThreadControlBlock*)+0x6c>
c001605a:	66 90                	xchg   ax,ax
c001605c:	83 ec 08             	sub    esp,0x8
c001605f:	53                   	push   ebx
c0016060:	68 84 a4 02 c0       	push   0xc002a484
c0016065:	e8 66 97 00 00       	call   c001f7d0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001606a:	83 c4 10             	add    esp,0x10
c001606d:	eb c1                	jmp    c0016030 <unblockTask(ThreadControlBlock*)+0x6c>
c001606f:	90                   	nop

c0016070 <cleanupTerminatedTask(ThreadControlBlock*)>:
c0016070:	55                   	push   ebp
c0016071:	57                   	push   edi
c0016072:	56                   	push   esi
c0016073:	53                   	push   ebx
c0016074:	83 ec 1c             	sub    esp,0x1c
c0016077:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001607b:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001607e:	8b a8 16 05 00 00    	mov    ebp,DWORD PTR [eax+0x516]
c0016084:	85 ed                	test   ebp,ebp
c0016086:	7e 28                	jle    c00160b0 <cleanupTerminatedTask(ThreadControlBlock*)+0x40>
c0016088:	31 f6                	xor    esi,esi
c001608a:	66 90                	xchg   ax,ax
c001608c:	83 ec 0c             	sub    esp,0xc
c001608f:	8b bc b0 1a 05 00 00 	mov    edi,DWORD PTR [eax+esi*4+0x51a]
c0016096:	83 c6 01             	add    esi,0x1
c0016099:	57                   	push   edi
c001609a:	e8 27 1a ff ff       	call   c0007ac6 <free>
c001609f:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00160a2:	83 c4 10             	add    esp,0x10
c00160a5:	39 b0 16 05 00 00    	cmp    DWORD PTR [eax+0x516],esi
c00160ab:	7f df                	jg     c001608c <cleanupTerminatedTask(ThreadControlBlock*)+0x1c>
c00160ad:	8d 76 00             	lea    esi,[esi+0x0]
c00160b0:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c00160ba:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c00160bf:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c00160c2:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c00160c5:	d3 c0                	rol    eax,cl
c00160c7:	66 8b 8a 04 05 00 00 	mov    cx,WORD PTR [edx+0x504]
c00160ce:	21 c8                	and    eax,ecx
c00160d0:	66 89 82 04 05 00 00 	mov    WORD PTR [edx+0x504],ax
c00160d7:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c00160da:	89 f7                	mov    edi,esi
c00160dc:	66 83 be 04 05 00 00 00 	cmp    WORD PTR [esi+0x504],0x0
c00160e4:	0f 85 72 01 00 00    	jne    c001625c <cleanupTerminatedTask(ThreadControlBlock*)+0x1ec>
c00160ea:	8b ae 1a 07 00 00    	mov    ebp,DWORD PTR [esi+0x71a]
c00160f0:	85 ed                	test   ebp,ebp
c00160f2:	74 1c                	je     c0016110 <cleanupTerminatedTask(ThreadControlBlock*)+0xa0>
c00160f4:	83 ec 0c             	sub    esp,0xc
c00160f7:	55                   	push   ebp
c00160f8:	e8 01 ae ff ff       	call   c0010efe <EnvVarContainer::~EnvVarContainer()>
c00160fd:	59                   	pop    ecx
c00160fe:	5e                   	pop    esi
c00160ff:	6a 0c                	push   0xc
c0016101:	55                   	push   ebp
c0016102:	e8 11 47 ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c0016107:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c001610a:	83 c4 10             	add    esp,0x10
c001610d:	89 f7                	mov    edi,esi
c001610f:	90                   	nop
c0016110:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c0016116:	85 c0                	test   eax,eax
c0016118:	0f 84 b2 00 00 00    	je     c00161d0 <cleanupTerminatedTask(ThreadControlBlock*)+0x160>
c001611e:	8b 4b 51             	mov    ecx,DWORD PTR [ebx+0x51]
c0016121:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0016125:	31 c9                	xor    ecx,ecx
c0016127:	eb 17                	jmp    c0016140 <cleanupTerminatedTask(ThreadControlBlock*)+0xd0>
c0016129:	8d 76 00             	lea    esi,[esi+0x0]
c001612c:	83 c1 01             	add    ecx,0x1
c001612f:	83 f9 10             	cmp    ecx,0x10
c0016132:	0f 84 98 00 00 00    	je     c00161d0 <cleanupTerminatedTask(ThreadControlBlock*)+0x160>
c0016138:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c001613e:	66 90                	xchg   ax,ax
c0016140:	0f b7 90 04 05 00 00 	movzx  edx,WORD PTR [eax+0x504]
c0016147:	d3 fa                	sar    edx,cl
c0016149:	80 e2 01             	and    dl,0x1
c001614c:	74 de                	je     c001612c <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c001614e:	8d 14 c9             	lea    edx,[ecx+ecx*8]
c0016151:	01 d2                	add    edx,edx
c0016153:	01 ca                	add    edx,ecx
c0016155:	8d 14 92             	lea    edx,[edx+edx*4]
c0016158:	01 d0                	add    eax,edx
c001615a:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c0016160:	83 fd 07             	cmp    ebp,0x7
c0016163:	75 c7                	jne    c001612c <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c0016165:	05 40 02 00 00       	add    eax,0x240
c001616a:	8b 68 11             	mov    ebp,DWORD PTR [eax+0x11]
c001616d:	83 fd ff             	cmp    ebp,0xffffffff
c0016170:	0f 8c ee 00 00 00    	jl     c0016264 <cleanupTerminatedTask(ThreadControlBlock*)+0x1f4>
c0016176:	0f 84 ac 01 00 00    	je     c0016328 <cleanupTerminatedTask(ThreadControlBlock*)+0x2b8>
c001617c:	85 ed                	test   ebp,ebp
c001617e:	0f 84 90 01 00 00    	je     c0016314 <cleanupTerminatedTask(ThreadControlBlock*)+0x2a4>
c0016184:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c0016186:	75 a4                	jne    c001612c <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c0016188:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c001618e:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0016192:	01 d0                	add    eax,edx
c0016194:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0016198:	83 ec 0c             	sub    esp,0xc
c001619b:	89 b8 59 02 00 00    	mov    DWORD PTR [eax+0x259],edi
c00161a1:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00161a4:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c00161aa:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c00161b1:	50                   	push   eax
c00161b2:	e8 0d fe ff ff       	call   c0015fc4 <unblockTask(ThreadControlBlock*)>
c00161b7:	83 c4 10             	add    esp,0x10
c00161ba:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c00161bd:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00161c1:	89 f7                	mov    edi,esi
c00161c3:	83 c1 01             	add    ecx,0x1
c00161c6:	83 f9 10             	cmp    ecx,0x10
c00161c9:	0f 85 69 ff ff ff    	jne    c0016138 <cleanupTerminatedTask(ThreadControlBlock*)+0xc8>
c00161cf:	90                   	nop
c00161d0:	8b 86 06 05 00 00    	mov    eax,DWORD PTR [esi+0x506]
c00161d6:	85 c0                	test   eax,eax
c00161d8:	74 62                	je     c001623c <cleanupTerminatedTask(ThreadControlBlock*)+0x1cc>
c00161da:	8b 96 0a 05 00 00    	mov    edx,DWORD PTR [esi+0x50a]
c00161e0:	3b 82 06 05 00 00    	cmp    eax,DWORD PTR [edx+0x506]
c00161e6:	74 54                	je     c001623c <cleanupTerminatedTask(ThreadControlBlock*)+0x1cc>
c00161e8:	83 ec 0c             	sub    esp,0xc
c00161eb:	68 84 a4 02 c0       	push   0xc002a484
c00161f0:	e8 17 95 00 00       	call   c001f70c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00161f5:	c7 04 24 84 a4 02 c0 	mov    DWORD PTR [esp],0xc002a484
c00161fc:	89 c7                	mov    edi,eax
c00161fe:	e8 ed 94 00 00       	call   c001f6f0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0016203:	83 c4 10             	add    esp,0x10
c0016206:	84 c0                	test   al,al
c0016208:	0f 84 ce 00 00 00    	je     c00162dc <cleanupTerminatedTask(ThreadControlBlock*)+0x26c>
c001620e:	66 90                	xchg   ax,ax
c0016210:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0016213:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0016219:	85 d2                	test   edx,edx
c001621b:	74 0f                	je     c001622c <cleanupTerminatedTask(ThreadControlBlock*)+0x1bc>
c001621d:	83 ec 0c             	sub    esp,0xc
c0016220:	8b 02                	mov    eax,DWORD PTR [edx]
c0016222:	52                   	push   edx
c0016223:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016226:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0016229:	83 c4 10             	add    esp,0x10
c001622c:	c7 80 06 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x506],0x0
c0016236:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c0016239:	8d 76 00             	lea    esi,[esi+0x0]
c001623c:	8b 9f 12 05 00 00    	mov    ebx,DWORD PTR [edi+0x512]
c0016242:	85 db                	test   ebx,ebx
c0016244:	74 16                	je     c001625c <cleanupTerminatedTask(ThreadControlBlock*)+0x1ec>
c0016246:	83 ec 0c             	sub    esp,0xc
c0016249:	53                   	push   ebx
c001624a:	e8 63 39 ff ff       	call   c0009bb2 <VAS::~VAS()>
c001624f:	58                   	pop    eax
c0016250:	5a                   	pop    edx
c0016251:	6a 14                	push   0x14
c0016253:	53                   	push   ebx
c0016254:	e8 bf 45 ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c0016259:	83 c4 10             	add    esp,0x10
c001625c:	83 c4 1c             	add    esp,0x1c
c001625f:	5b                   	pop    ebx
c0016260:	5e                   	pop    esi
c0016261:	5f                   	pop    edi
c0016262:	5d                   	pop    ebp
c0016263:	c3                   	ret    
c0016264:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0016268:	83 ec 0c             	sub    esp,0xc
c001626b:	68 70 22 02 c0       	push   0xc0022270
c0016270:	e8 78 af ff ff       	call   c00111ed <KePanic(char const*)>
c0016275:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0016278:	83 c4 10             	add    esp,0x10
c001627b:	89 f7                	mov    edi,esi
c001627d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016281:	e9 a6 fe ff ff       	jmp    c001612c <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c0016286:	66 90                	xchg   ax,ax
c0016288:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001628e:	39 82 06 05 00 00    	cmp    DWORD PTR [edx+0x506],eax
c0016294:	75 1e                	jne    c00162b4 <cleanupTerminatedTask(ThreadControlBlock*)+0x244>
c0016296:	83 ec 0c             	sub    esp,0xc
c0016299:	68 d8 22 02 c0       	push   0xc00222d8
c001629e:	e8 a2 46 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c00162a3:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c00162aa:	e8 11 fa ff ff       	call   c0015cc0 <blockTask(TaskState)>
c00162af:	83 c4 10             	add    esp,0x10
c00162b2:	66 90                	xchg   ax,ax
c00162b4:	83 ec 08             	sub    esp,0x8
c00162b7:	56                   	push   esi
c00162b8:	68 84 a4 02 c0       	push   0xc002a484
c00162bd:	e8 0e 95 00 00       	call   c001f7d0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00162c2:	c7 04 24 84 a4 02 c0 	mov    DWORD PTR [esp],0xc002a484
c00162c9:	e8 3e 94 00 00       	call   c001f70c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00162ce:	83 c4 10             	add    esp,0x10
c00162d1:	39 f8                	cmp    eax,edi
c00162d3:	0f 84 37 ff ff ff    	je     c0016210 <cleanupTerminatedTask(ThreadControlBlock*)+0x1a0>
c00162d9:	8d 76 00             	lea    esi,[esi+0x0]
c00162dc:	83 ec 0c             	sub    esp,0xc
c00162df:	68 84 a4 02 c0       	push   0xc002a484
c00162e4:	e8 23 94 00 00       	call   c001f70c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00162e9:	c7 04 24 84 a4 02 c0 	mov    DWORD PTR [esp],0xc002a484
c00162f0:	89 c6                	mov    esi,eax
c00162f2:	e8 1d 94 00 00       	call   c001f714 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c00162f7:	83 c4 10             	add    esp,0x10
c00162fa:	39 f3                	cmp    ebx,esi
c00162fc:	74 b6                	je     c00162b4 <cleanupTerminatedTask(ThreadControlBlock*)+0x244>
c00162fe:	8b 56 3c             	mov    edx,DWORD PTR [esi+0x3c]
c0016301:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0016304:	39 82 0a 05 00 00    	cmp    DWORD PTR [edx+0x50a],eax
c001630a:	75 a8                	jne    c00162b4 <cleanupTerminatedTask(ThreadControlBlock*)+0x244>
c001630c:	e9 77 ff ff ff       	jmp    c0016288 <cleanupTerminatedTask(ThreadControlBlock*)+0x218>
c0016311:	8d 76 00             	lea    esi,[esi+0x0]
c0016314:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0016318:	83 ec 0c             	sub    esp,0xc
c001631b:	68 a4 22 02 c0       	push   0xc00222a4
c0016320:	e9 4b ff ff ff       	jmp    c0016270 <cleanupTerminatedTask(ThreadControlBlock*)+0x200>
c0016325:	8d 76 00             	lea    esi,[esi+0x0]
c0016328:	8b 36                	mov    esi,DWORD PTR [esi]
c001632a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001632e:	89 70 11             	mov    DWORD PTR [eax+0x11],esi
c0016331:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0016334:	8b b8 0a 05 00 00    	mov    edi,DWORD PTR [eax+0x50a]
c001633a:	01 d7                	add    edi,edx
c001633c:	89 f8                	mov    eax,edi
c001633e:	e9 51 fe ff ff       	jmp    c0016194 <cleanupTerminatedTask(ThreadControlBlock*)+0x124>
c0016343:	90                   	nop

c0016344 <cleanerTaskFunction(void*)>:
c0016344:	53                   	push   ebx
c0016345:	83 ec 08             	sub    esp,0x8
c0016348:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c001634d:	83 e8 01             	sub    eax,0x1
c0016350:	a3 68 a4 02 c0       	mov    ds:0xc002a468,eax
c0016355:	75 01                	jne    c0016358 <cleanerTaskFunction(void*)+0x14>
c0016357:	fb                   	sti    
c0016358:	fa                   	cli    
c0016359:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c001635e:	80 3d 4c a4 02 c0 00 	cmp    BYTE PTR ds:0xc002a44c,0x0
c0016365:	8d 50 01             	lea    edx,[eax+0x1]
c0016368:	89 15 68 a4 02 c0    	mov    DWORD PTR ds:0xc002a468,edx
c001636e:	0f 84 c4 00 00 00    	je     c0016438 <cleanerTaskFunction(void*)+0xf4>
c0016374:	a3 68 a4 02 c0       	mov    ds:0xc002a468,eax
c0016379:	85 c0                	test   eax,eax
c001637b:	75 03                	jne    c0016380 <cleanerTaskFunction(void*)+0x3c>
c001637d:	fb                   	sti    
c001637e:	66 90                	xchg   ax,ax
c0016380:	c6 05 4c a4 02 c0 00 	mov    BYTE PTR ds:0xc002a44c,0x0
c0016387:	fa                   	cli    
c0016388:	8b 15 68 a4 02 c0    	mov    edx,DWORD PTR ds:0xc002a468
c001638e:	8b 0d 64 a4 02 c0    	mov    ecx,DWORD PTR ds:0xc002a464
c0016394:	83 c2 01             	add    edx,0x1
c0016397:	83 c1 01             	add    ecx,0x1
c001639a:	89 15 68 a4 02 c0    	mov    DWORD PTR ds:0xc002a468,edx
c00163a0:	89 0d 64 a4 02 c0    	mov    DWORD PTR ds:0xc002a464,ecx
c00163a6:	fa                   	cli    
c00163a7:	8b 1d 68 a4 02 c0    	mov    ebx,DWORD PTR ds:0xc002a468
c00163ad:	83 c3 01             	add    ebx,0x1
c00163b0:	89 1d 68 a4 02 c0    	mov    DWORD PTR ds:0xc002a468,ebx
c00163b6:	eb 28                	jmp    c00163e0 <cleanerTaskFunction(void*)+0x9c>
c00163b8:	83 ec 0c             	sub    esp,0xc
c00163bb:	68 6c a4 02 c0       	push   0xc002a46c
c00163c0:	e8 47 93 00 00       	call   c001f70c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00163c5:	c7 04 24 6c a4 02 c0 	mov    DWORD PTR [esp],0xc002a46c
c00163cc:	89 c3                	mov    ebx,eax
c00163ce:	e8 41 93 00 00       	call   c001f714 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c00163d3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00163d6:	e8 95 fc ff ff       	call   c0016070 <cleanupTerminatedTask(ThreadControlBlock*)>
c00163db:	83 c4 10             	add    esp,0x10
c00163de:	66 90                	xchg   ax,ax
c00163e0:	83 ec 0c             	sub    esp,0xc
c00163e3:	68 6c a4 02 c0       	push   0xc002a46c
c00163e8:	e8 03 93 00 00       	call   c001f6f0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00163ed:	83 c4 10             	add    esp,0x10
c00163f0:	84 c0                	test   al,al
c00163f2:	74 c4                	je     c00163b8 <cleanerTaskFunction(void*)+0x74>
c00163f4:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c00163f9:	83 e8 01             	sub    eax,0x1
c00163fc:	a3 68 a4 02 c0       	mov    ds:0xc002a468,eax
c0016401:	75 01                	jne    c0016404 <cleanerTaskFunction(void*)+0xc0>
c0016403:	fb                   	sti    
c0016404:	a1 64 a4 02 c0       	mov    eax,ds:0xc002a464
c0016409:	83 e8 01             	sub    eax,0x1
c001640c:	a3 64 a4 02 c0       	mov    ds:0xc002a464,eax
c0016411:	0f 85 31 ff ff ff    	jne    c0016348 <cleanerTaskFunction(void*)+0x4>
c0016417:	a1 60 a4 02 c0       	mov    eax,ds:0xc002a460
c001641c:	85 c0                	test   eax,eax
c001641e:	0f 84 24 ff ff ff    	je     c0016348 <cleanerTaskFunction(void*)+0x4>
c0016424:	c7 05 60 a4 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002a460,0x0
c001642e:	e8 79 f6 ff ff       	call   c0015aac <schedule()>
c0016433:	e9 10 ff ff ff       	jmp    c0016348 <cleanerTaskFunction(void*)+0x4>
c0016438:	83 ec 0c             	sub    esp,0xc
c001643b:	6a 02                	push   0x2
c001643d:	e8 56 f8 ff ff       	call   c0015c98 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0016442:	83 c4 10             	add    esp,0x10
c0016445:	e9 36 ff ff ff       	jmp    c0016380 <cleanerTaskFunction(void*)+0x3c>
c001644a:	66 90                	xchg   ax,ax

c001644c <terminateTask(int)>:
c001644c:	83 ec 14             	sub    esp,0x14
c001644f:	fa                   	cli    
c0016450:	8b 15 68 a4 02 c0    	mov    edx,DWORD PTR ds:0xc002a468
c0016456:	8b 0d 64 a4 02 c0    	mov    ecx,DWORD PTR ds:0xc002a464
c001645c:	83 c2 01             	add    edx,0x1
c001645f:	83 c1 01             	add    ecx,0x1
c0016462:	89 15 68 a4 02 c0    	mov    DWORD PTR ds:0xc002a468,edx
c0016468:	89 0d 64 a4 02 c0    	mov    DWORD PTR ds:0xc002a464,ecx
c001646e:	fa                   	cli    
c001646f:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c0016474:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0016478:	83 c0 01             	add    eax,0x1
c001647b:	a3 68 a4 02 c0       	mov    ds:0xc002a468,eax
c0016480:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016485:	89 50 51             	mov    DWORD PTR [eax+0x51],edx
c0016488:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001648d:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0016490:	50                   	push   eax
c0016491:	68 6c a4 02 c0       	push   0xc002a46c
c0016496:	e8 35 93 00 00       	call   c001f7d0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001649b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00164a0:	83 c4 10             	add    esp,0x10
c00164a3:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c00164aa:	a1 48 a4 02 c0       	mov    eax,ds:0xc002a448
c00164af:	85 c0                	test   eax,eax
c00164b1:	74 65                	je     c0016518 <terminateTask(int)+0xcc>
c00164b3:	83 ec 0c             	sub    esp,0xc
c00164b6:	c6 05 4c a4 02 c0 01 	mov    BYTE PTR ds:0xc002a44c,0x1
c00164bd:	50                   	push   eax
c00164be:	e8 01 fb ff ff       	call   c0015fc4 <unblockTask(ThreadControlBlock*)>
c00164c3:	83 c4 10             	add    esp,0x10
c00164c6:	66 90                	xchg   ax,ax
c00164c8:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c00164cd:	83 e8 01             	sub    eax,0x1
c00164d0:	a3 68 a4 02 c0       	mov    ds:0xc002a468,eax
c00164d5:	75 01                	jne    c00164d8 <terminateTask(int)+0x8c>
c00164d7:	fb                   	sti    
c00164d8:	a1 64 a4 02 c0       	mov    eax,ds:0xc002a464
c00164dd:	83 e8 01             	sub    eax,0x1
c00164e0:	a3 64 a4 02 c0       	mov    ds:0xc002a464,eax
c00164e5:	75 09                	jne    c00164f0 <terminateTask(int)+0xa4>
c00164e7:	83 3d 60 a4 02 c0 00 	cmp    DWORD PTR ds:0xc002a460,0x0
c00164ee:	75 3c                	jne    c001652c <terminateTask(int)+0xe0>
c00164f0:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c00164f5:	83 e8 01             	sub    eax,0x1
c00164f8:	a3 68 a4 02 c0       	mov    ds:0xc002a468,eax
c00164fd:	75 01                	jne    c0016500 <terminateTask(int)+0xb4>
c00164ff:	fb                   	sti    
c0016500:	fa                   	cli    
c0016501:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c0016506:	83 c0 01             	add    eax,0x1
c0016509:	a3 68 a4 02 c0       	mov    ds:0xc002a468,eax
c001650e:	66 90                	xchg   ax,ax
c0016510:	e8 97 f5 ff ff       	call   c0015aac <schedule()>
c0016515:	eb d9                	jmp    c00164f0 <terminateTask(int)+0xa4>
c0016517:	90                   	nop
c0016518:	83 ec 0c             	sub    esp,0xc
c001651b:	68 cf 21 02 c0       	push   0xc00221cf
c0016520:	e8 20 44 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0016525:	83 c4 10             	add    esp,0x10
c0016528:	eb 9e                	jmp    c00164c8 <terminateTask(int)+0x7c>
c001652a:	66 90                	xchg   ax,ax
c001652c:	c7 05 60 a4 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002a460,0x0
c0016536:	eb d8                	jmp    c0016510 <terminateTask(int)+0xc4>

c0016538 <Thr::terminateFromIRQ(int)>:
c0016538:	83 ec 18             	sub    esp,0x18
c001653b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001653f:	50                   	push   eax
c0016540:	e8 07 ff ff ff       	call   c001644c <terminateTask(int)>
c0016545:	90                   	nop
c0016546:	66 90                	xchg   ax,ax

c0016548 <Semaphore::release()>:
c0016548:	83 ec 0c             	sub    esp,0xc
c001654b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001654f:	fa                   	cli    
c0016550:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c0016555:	83 c0 01             	add    eax,0x1
c0016558:	a3 68 a4 02 c0       	mov    ds:0xc002a468,eax
c001655d:	a1 64 a4 02 c0       	mov    eax,ds:0xc002a464
c0016562:	8d 48 01             	lea    ecx,[eax+0x1]
c0016565:	89 0d 64 a4 02 c0    	mov    DWORD PTR ds:0xc002a464,ecx
c001656b:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c001656e:	85 c9                	test   ecx,ecx
c0016570:	74 42                	je     c00165b4 <Semaphore::release()+0x6c>
c0016572:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c0016575:	83 ec 0c             	sub    esp,0xc
c0016578:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001657b:	51                   	push   ecx
c001657c:	e8 43 fa ff ff       	call   c0015fc4 <unblockTask(ThreadControlBlock*)>
c0016581:	a1 64 a4 02 c0       	mov    eax,ds:0xc002a464
c0016586:	83 c4 10             	add    esp,0x10
c0016589:	83 e8 01             	sub    eax,0x1
c001658c:	a3 64 a4 02 c0       	mov    ds:0xc002a464,eax
c0016591:	85 c0                	test   eax,eax
c0016593:	75 0b                	jne    c00165a0 <Semaphore::release()+0x58>
c0016595:	a1 60 a4 02 c0       	mov    eax,ds:0xc002a460
c001659a:	85 c0                	test   eax,eax
c001659c:	75 22                	jne    c00165c0 <Semaphore::release()+0x78>
c001659e:	66 90                	xchg   ax,ax
c00165a0:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c00165a5:	83 e8 01             	sub    eax,0x1
c00165a8:	a3 68 a4 02 c0       	mov    ds:0xc002a468,eax
c00165ad:	75 01                	jne    c00165b0 <Semaphore::release()+0x68>
c00165af:	fb                   	sti    
c00165b0:	83 c4 0c             	add    esp,0xc
c00165b3:	c3                   	ret    
c00165b4:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00165b7:	83 e9 01             	sub    ecx,0x1
c00165ba:	89 4a 0c             	mov    DWORD PTR [edx+0xc],ecx
c00165bd:	eb cd                	jmp    c001658c <Semaphore::release()+0x44>
c00165bf:	90                   	nop
c00165c0:	c7 05 60 a4 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002a460,0x0
c00165ca:	e8 dd f4 ff ff       	call   c0015aac <schedule()>
c00165cf:	eb cf                	jmp    c00165a0 <Semaphore::release()+0x58>
c00165d1:	8d 76 00             	lea    esi,[esi+0x0]

c00165d4 <__static_initialization_and_destruction_0(int, int)>:
c00165d4:	83 ec 0c             	sub    esp,0xc
c00165d7:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c00165dc:	0f 85 8e 00 00 00    	jne    c0016670 <__static_initialization_and_destruction_0(int, int)+0x9c>
c00165e2:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c00165ea:	0f 85 80 00 00 00    	jne    c0016670 <__static_initialization_and_destruction_0(int, int)+0x9c>
c00165f0:	83 ec 0c             	sub    esp,0xc
c00165f3:	68 84 a4 02 c0       	push   0xc002a484
c00165f8:	e8 87 94 00 00       	call   c001fa84 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c00165fd:	83 c4 10             	add    esp,0x10
c0016600:	83 ec 04             	sub    esp,0x4
c0016603:	68 a8 2e 02 c0       	push   0xc0022ea8
c0016608:	68 84 a4 02 c0       	push   0xc002a484
c001660d:	68 34 fa 01 c0       	push   0xc001fa34
c0016612:	e8 b1 41 ff ff       	call   c000a7c8 <__cxa_atexit>
c0016617:	83 c4 10             	add    esp,0x10
c001661a:	83 ec 0c             	sub    esp,0xc
c001661d:	68 78 a4 02 c0       	push   0xc002a478
c0016622:	e8 5d 94 00 00       	call   c001fa84 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0016627:	83 c4 10             	add    esp,0x10
c001662a:	83 ec 04             	sub    esp,0x4
c001662d:	68 a8 2e 02 c0       	push   0xc0022ea8
c0016632:	68 78 a4 02 c0       	push   0xc002a478
c0016637:	68 34 fa 01 c0       	push   0xc001fa34
c001663c:	e8 87 41 ff ff       	call   c000a7c8 <__cxa_atexit>
c0016641:	83 c4 10             	add    esp,0x10
c0016644:	83 ec 0c             	sub    esp,0xc
c0016647:	68 6c a4 02 c0       	push   0xc002a46c
c001664c:	e8 33 94 00 00       	call   c001fa84 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0016651:	83 c4 10             	add    esp,0x10
c0016654:	83 ec 04             	sub    esp,0x4
c0016657:	68 a8 2e 02 c0       	push   0xc0022ea8
c001665c:	68 6c a4 02 c0       	push   0xc002a46c
c0016661:	68 34 fa 01 c0       	push   0xc001fa34
c0016666:	e8 5d 41 ff ff       	call   c000a7c8 <__cxa_atexit>
c001666b:	83 c4 10             	add    esp,0x10
c001666e:	66 90                	xchg   ax,ax
c0016670:	90                   	nop
c0016671:	83 c4 0c             	add    esp,0xc
c0016674:	c3                   	ret    
c0016675:	8d 76 00             	lea    esi,[esi+0x0]

c0016678 <_GLOBAL__sub_I__ZN3Thr7nextPIDE>:
c0016678:	83 ec 0c             	sub    esp,0xc
c001667b:	83 ec 08             	sub    esp,0x8
c001667e:	68 ff ff 00 00       	push   0xffff
c0016683:	6a 01                	push   0x1
c0016685:	e8 4a ff ff ff       	call   c00165d4 <__static_initialization_and_destruction_0(int, int)>
c001668a:	83 c4 10             	add    esp,0x10
c001668d:	83 c4 0c             	add    esp,0xc
c0016690:	c3                   	ret    

c0016691 <Vm::inbv(unsigned short)>:
c0016691:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0016695:	66 81 fa fe fe       	cmp    dx,0xfefe
c001669a:	75 06                	jne    c00166a2 <Vm::inbv(unsigned short)+0x11>
c001669c:	a0 cc a4 02 c0       	mov    al,ds:0xc002a4cc
c00166a1:	c3                   	ret    
c00166a2:	ec                   	in     al,dx
c00166a3:	c3                   	ret    

c00166a4 <Vm::outbv(unsigned short, unsigned char)>:
c00166a4:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00166a8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00166ac:	66 81 fa fe fe       	cmp    dx,0xfefe
c00166b1:	75 25                	jne    c00166d8 <Vm::outbv(unsigned short, unsigned char)+0x34>
c00166b3:	8b 0d cc a4 02 c0    	mov    ecx,DWORD PTR ds:0xc002a4cc
c00166b9:	8d 51 01             	lea    edx,[ecx+0x1]
c00166bc:	88 81 e0 a4 02 c0    	mov    BYTE PTR [ecx-0x3ffd5b20],al
c00166c2:	89 15 cc a4 02 c0    	mov    DWORD PTR ds:0xc002a4cc,edx
c00166c8:	83 fa 20             	cmp    edx,0x20
c00166cb:	75 0c                	jne    c00166d9 <Vm::outbv(unsigned short, unsigned char)+0x35>
c00166cd:	c7 05 cc a4 02 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc002a4cc,0x1f
c00166d7:	c3                   	ret    
c00166d8:	ee                   	out    dx,al
c00166d9:	c3                   	ret    

c00166da <Vm::realToLinear(unsigned short, unsigned short)>:
c00166da:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00166df:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00166e4:	c1 e0 04             	shl    eax,0x4
c00166e7:	01 d0                	add    eax,edx
c00166e9:	c3                   	ret    

c00166ea <Vm::getSegment(unsigned int)>:
c00166ea:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00166ee:	c1 e8 10             	shr    eax,0x10
c00166f1:	c3                   	ret    

c00166f2 <Vm::getOffset(unsigned int)>:
c00166f2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00166f6:	c3                   	ret    

c00166f7 <Vm::mainloop2()>:
c00166f7:	83 ec 18             	sub    esp,0x18
c00166fa:	fa                   	cli    
c00166fb:	ff 05 68 a4 02 c0    	inc    DWORD PTR ds:0xc002a468
c0016701:	6a 02                	push   0x2
c0016703:	c6 05 c5 a4 02 c0 01 	mov    BYTE PTR ds:0xc002a4c5,0x1
c001670a:	e8 89 f5 ff ff       	call   c0015c98 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001670f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016714:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c0016718:	52                   	push   edx
c0016719:	0f b7 50 59          	movzx  edx,WORD PTR [eax+0x59]
c001671d:	52                   	push   edx
c001671e:	0f b7 50 57          	movzx  edx,WORD PTR [eax+0x57]
c0016722:	52                   	push   edx
c0016723:	0f b7 40 55          	movzx  eax,WORD PTR [eax+0x55]
c0016727:	50                   	push   eax
c0016728:	e8 e2 9a fe ff       	call   c000020f <goToVM86>
c001672d:	83 c4 2c             	add    esp,0x2c
c0016730:	c3                   	ret    

c0016731 <Vm::mainVm8086Loop(void*)>:
c0016731:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c0016736:	48                   	dec    eax
c0016737:	a3 68 a4 02 c0       	mov    ds:0xc002a468,eax
c001673c:	75 01                	jne    c001673f <Vm::mainVm8086Loop(void*)+0xe>
c001673e:	fb                   	sti    
c001673f:	eb b6                	jmp    c00166f7 <Vm::mainloop2()>

c0016741 <Vm::mainloop3(unsigned long)>:
c0016741:	83 ec 18             	sub    esp,0x18
c0016744:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016748:	fa                   	cli    
c0016749:	ff 05 68 a4 02 c0    	inc    DWORD PTR ds:0xc002a468
c001674f:	6a 02                	push   0x2
c0016751:	c6 05 c4 a4 02 c0 01 	mov    BYTE PTR ds:0xc002a4c4,0x1
c0016758:	a3 c0 a4 02 c0       	mov    ds:0xc002a4c0,eax
c001675d:	e8 36 f5 ff ff       	call   c0015c98 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0016762:	83 c4 1c             	add    esp,0x1c
c0016765:	eb 90                	jmp    c00166f7 <Vm::mainloop2()>

c0016767 <Vm::initialise8086()>:
c0016767:	83 ec 0c             	sub    esp,0xc
c001676a:	68 80 00 00 00       	push   0x80
c001676f:	6a 00                	push   0x0
c0016771:	68 31 67 01 c0       	push   0xc0016731
c0016776:	ff 35 90 a4 02 c0    	push   DWORD PTR ds:0xc002a490
c001677c:	e8 db f0 ff ff       	call   c001585c <Process::createThread(void (*)(void*), void*, int)>
c0016781:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c0016788:	a3 c8 a4 02 c0       	mov    ds:0xc002a4c8,eax
c001678d:	68 00 01 00 00       	push   0x100
c0016792:	a1 90 a4 02 c0       	mov    eax,ds:0xc002a490
c0016797:	6a 00                	push   0x0
c0016799:	6a 00                	push   0x0
c001679b:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00167a1:	e8 74 37 ff ff       	call   c0009f1a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00167a6:	83 c4 2c             	add    esp,0x2c
c00167a9:	c3                   	ret    

c00167aa <Vm::finish8086()>:
c00167aa:	53                   	push   ebx
c00167ab:	83 ec 08             	sub    esp,0x8
c00167ae:	fa                   	cli    
c00167af:	ff 05 68 a4 02 c0    	inc    DWORD PTR ds:0xc002a468
c00167b5:	80 3d c4 a4 02 c0 00 	cmp    BYTE PTR ds:0xc002a4c4,0x0
c00167bc:	75 15                	jne    c00167d3 <Vm::finish8086()+0x29>
c00167be:	e8 e9 f2 ff ff       	call   c0015aac <schedule()>
c00167c3:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c00167c8:	48                   	dec    eax
c00167c9:	a3 68 a4 02 c0       	mov    ds:0xc002a468,eax
c00167ce:	75 de                	jne    c00167ae <Vm::finish8086()+0x4>
c00167d0:	fb                   	sti    
c00167d1:	eb db                	jmp    c00167ae <Vm::finish8086()+0x4>
c00167d3:	83 ec 0c             	sub    esp,0xc
c00167d6:	8b 1d c0 a4 02 c0    	mov    ebx,DWORD PTR ds:0xc002a4c0
c00167dc:	ff 35 c8 a4 02 c0    	push   DWORD PTR ds:0xc002a4c8
c00167e2:	c6 05 c4 a4 02 c0 00 	mov    BYTE PTR ds:0xc002a4c4,0x0
c00167e9:	e8 d6 f7 ff ff       	call   c0015fc4 <unblockTask(ThreadControlBlock*)>
c00167ee:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c00167f3:	83 c4 10             	add    esp,0x10
c00167f6:	8d 50 ff             	lea    edx,[eax-0x1]
c00167f9:	89 15 68 a4 02 c0    	mov    DWORD PTR ds:0xc002a468,edx
c00167ff:	85 d2                	test   edx,edx
c0016801:	75 01                	jne    c0016804 <Vm::finish8086()+0x5a>
c0016803:	fb                   	sti    
c0016804:	89 d8                	mov    eax,ebx
c0016806:	83 c4 08             	add    esp,0x8
c0016809:	5b                   	pop    ebx
c001680a:	c3                   	ret    

c001680b <Vm::getOutput8086(unsigned char*)>:
c001680b:	57                   	push   edi
c001680c:	8b 0d cc a4 02 c0    	mov    ecx,DWORD PTR ds:0xc002a4cc
c0016812:	56                   	push   esi
c0016813:	be e0 a4 02 c0       	mov    esi,0xc002a4e0
c0016818:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001681c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001681e:	a1 cc a4 02 c0       	mov    eax,ds:0xc002a4cc
c0016823:	5e                   	pop    esi
c0016824:	c7 05 cc a4 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002a4cc,0x0
c001682e:	5f                   	pop    edi
c001682f:	c3                   	ret    

c0016830 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)>:
c0016830:	55                   	push   ebp
c0016831:	57                   	push   edi
c0016832:	56                   	push   esi
c0016833:	53                   	push   ebx
c0016834:	83 ec 0c             	sub    esp,0xc
c0016837:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001683b:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001683f:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0016843:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0016847:	fa                   	cli    
c0016848:	ff 05 68 a4 02 c0    	inc    DWORD PTR ds:0xc002a468
c001684e:	80 3d c5 a4 02 c0 00 	cmp    BYTE PTR ds:0xc002a4c5,0x0
c0016855:	75 15                	jne    c001686c <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x3c>
c0016857:	e8 50 f2 ff ff       	call   c0015aac <schedule()>
c001685c:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c0016861:	48                   	dec    eax
c0016862:	a3 68 a4 02 c0       	mov    ds:0xc002a468,eax
c0016867:	75 de                	jne    c0016847 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0016869:	fb                   	sti    
c001686a:	eb db                	jmp    c0016847 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c001686c:	a1 c8 a4 02 c0       	mov    eax,ds:0xc002a4c8
c0016871:	c7 05 cc a4 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002a4cc,0x0
c001687b:	66 89 78 55          	mov    WORD PTR [eax+0x55],di
c001687f:	66 89 70 57          	mov    WORD PTR [eax+0x57],si
c0016883:	66 89 68 59          	mov    WORD PTR [eax+0x59],bp
c0016887:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c001688b:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c001688f:	0f b7 ff             	movzx  edi,di
c0016892:	0f b7 f6             	movzx  esi,si
c0016895:	50                   	push   eax
c0016896:	6a 20                	push   0x20
c0016898:	6a 00                	push   0x0
c001689a:	68 e0 a4 02 c0       	push   0xc002a4e0
c001689f:	e8 4c 9c fe ff       	call   c00004f0 <memset>
c00168a4:	5a                   	pop    edx
c00168a5:	59                   	pop    ecx
c00168a6:	57                   	push   edi
c00168a7:	56                   	push   esi
c00168a8:	e8 2d fe ff ff       	call   c00166da <Vm::realToLinear(unsigned short, unsigned short)>
c00168ad:	83 c4 10             	add    esp,0x10
c00168b0:	89 c7                	mov    edi,eax
c00168b2:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00168b6:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c00168ba:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00168bc:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c00168c1:	c6 05 c5 a4 02 c0 00 	mov    BYTE PTR ds:0xc002a4c5,0x0
c00168c8:	48                   	dec    eax
c00168c9:	a3 68 a4 02 c0       	mov    ds:0xc002a468,eax
c00168ce:	75 01                	jne    c00168d1 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0xa1>
c00168d0:	fb                   	sti    
c00168d1:	83 ec 0c             	sub    esp,0xc
c00168d4:	ff 35 c8 a4 02 c0    	push   DWORD PTR ds:0xc002a4c8
c00168da:	e8 e5 f6 ff ff       	call   c0015fc4 <unblockTask(ThreadControlBlock*)>
c00168df:	83 c4 1c             	add    esp,0x1c
c00168e2:	b0 01                	mov    al,0x1
c00168e4:	5b                   	pop    ebx
c00168e5:	5e                   	pop    esi
c00168e6:	5f                   	pop    edi
c00168e7:	5d                   	pop    ebp
c00168e8:	c3                   	ret    

c00168e9 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c00168e9:	55                   	push   ebp
c00168ea:	57                   	push   edi
c00168eb:	56                   	push   esi
c00168ec:	53                   	push   ebx
c00168ed:	83 ec 34             	sub    esp,0x34
c00168f0:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c00168f4:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c00168f8:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c00168fc:	8b 6c 24 54          	mov    ebp,DWORD PTR [esp+0x54]
c0016900:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0016904:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0016908:	68 00 23 02 c0       	push   0xc0022300
c001690d:	e8 33 40 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0016912:	83 c4 10             	add    esp,0x10
c0016915:	fa                   	cli    
c0016916:	ff 05 68 a4 02 c0    	inc    DWORD PTR ds:0xc002a468
c001691c:	8a 1d c5 a4 02 c0    	mov    bl,BYTE PTR ds:0xc002a4c5
c0016922:	84 db                	test   bl,bl
c0016924:	75 15                	jne    c001693b <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x52>
c0016926:	e8 81 f1 ff ff       	call   c0015aac <schedule()>
c001692b:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c0016930:	48                   	dec    eax
c0016931:	a3 68 a4 02 c0       	mov    ds:0xc002a468,eax
c0016936:	75 dd                	jne    c0016915 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x2c>
c0016938:	fb                   	sti    
c0016939:	eb da                	jmp    c0016915 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x2c>
c001693b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001693f:	a1 c8 a4 02 c0       	mov    eax,ds:0xc002a4c8
c0016944:	c7 05 cc a4 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002a4cc,0x0
c001694e:	66 89 50 5b          	mov    WORD PTR [eax+0x5b],dx
c0016952:	66 89 68 59          	mov    WORD PTR [eax+0x59],bp
c0016956:	66 89 78 55          	mov    WORD PTR [eax+0x55],di
c001695a:	66 89 70 57          	mov    WORD PTR [eax+0x57],si
c001695e:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c0016962:	50                   	push   eax
c0016963:	6a 20                	push   0x20
c0016965:	6a 00                	push   0x0
c0016967:	68 e0 a4 02 c0       	push   0xc002a4e0
c001696c:	e8 7f 9b fe ff       	call   c00004f0 <memset>
c0016971:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0016978:	e8 39 11 ff ff       	call   c0007ab6 <malloc>
c001697d:	83 c4 0c             	add    esp,0xc
c0016980:	89 c5                	mov    ebp,eax
c0016982:	ff 35 90 a4 02 c0    	push   DWORD PTR ds:0xc002a490
c0016988:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001698c:	50                   	push   eax
c001698d:	e8 46 4d ff ff       	call   c000b6d8 <File::File(char const*, Process*)>
c0016992:	83 c4 10             	add    esp,0x10
c0016995:	85 ed                	test   ebp,ebp
c0016997:	75 0a                	jne    c00169a3 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xba>
c0016999:	83 ec 0c             	sub    esp,0xc
c001699c:	68 22 23 02 c0       	push   0xc0022322
c00169a1:	eb 2b                	jmp    c00169ce <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xe5>
c00169a3:	50                   	push   eax
c00169a4:	8d 44 24 17          	lea    eax,[esp+0x17]
c00169a8:	50                   	push   eax
c00169a9:	8d 44 24 20          	lea    eax,[esp+0x20]
c00169ad:	50                   	push   eax
c00169ae:	55                   	push   ebp
c00169af:	e8 e2 50 ff ff       	call   c000ba96 <File::stat(unsigned long long*, bool*)>
c00169b4:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c00169b8:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c00169bc:	83 c4 10             	add    esp,0x10
c00169bf:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c00169c4:	74 27                	je     c00169ed <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x104>
c00169c6:	83 ec 0c             	sub    esp,0xc
c00169c9:	68 36 23 02 c0       	push   0xc0022336
c00169ce:	e8 1a a8 ff ff       	call   c00111ed <KePanic(char const*)>
c00169d3:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c00169d8:	83 c4 10             	add    esp,0x10
c00169db:	48                   	dec    eax
c00169dc:	a3 68 a4 02 c0       	mov    ds:0xc002a468,eax
c00169e1:	85 c0                	test   eax,eax
c00169e3:	75 01                	jne    c00169e6 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xfd>
c00169e5:	fb                   	sti    
c00169e6:	31 db                	xor    ebx,ebx
c00169e8:	e9 90 00 00 00       	jmp    c0016a7d <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x194>
c00169ed:	51                   	push   ecx
c00169ee:	51                   	push   ecx
c00169ef:	6a 01                	push   0x1
c00169f1:	55                   	push   ebp
c00169f2:	e8 9d 4d ff ff       	call   c000b794 <File::open(FileOpenMode)>
c00169f7:	83 c4 10             	add    esp,0x10
c00169fa:	85 c0                	test   eax,eax
c00169fc:	74 26                	je     c0016a24 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x13b>
c00169fe:	83 ec 0c             	sub    esp,0xc
c0016a01:	68 4f 23 02 c0       	push   0xc002234f
c0016a06:	e8 e2 a7 ff ff       	call   c00111ed <KePanic(char const*)>
c0016a0b:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c0016a10:	83 c4 10             	add    esp,0x10
c0016a13:	48                   	dec    eax
c0016a14:	a3 68 a4 02 c0       	mov    ds:0xc002a468,eax
c0016a19:	85 c0                	test   eax,eax
c0016a1b:	75 c9                	jne    c00169e6 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xfd>
c0016a1d:	fb                   	sti    
c0016a1e:	8a 5c 24 0c          	mov    bl,BYTE PTR [esp+0xc]
c0016a22:	eb 59                	jmp    c0016a7d <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x194>
c0016a24:	0f b7 ff             	movzx  edi,di
c0016a27:	50                   	push   eax
c0016a28:	0f b7 f6             	movzx  esi,si
c0016a2b:	50                   	push   eax
c0016a2c:	57                   	push   edi
c0016a2d:	56                   	push   esi
c0016a2e:	e8 a7 fc ff ff       	call   c00166da <Vm::realToLinear(unsigned short, unsigned short)>
c0016a33:	5a                   	pop    edx
c0016a34:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0016a37:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0016a3b:	51                   	push   ecx
c0016a3c:	50                   	push   eax
c0016a3d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0016a41:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0016a45:	55                   	push   ebp
c0016a46:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0016a49:	83 c4 14             	add    esp,0x14
c0016a4c:	55                   	push   ebp
c0016a4d:	e8 a0 4d ff ff       	call   c000b7f2 <File::close()>
c0016a52:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c0016a57:	83 c4 10             	add    esp,0x10
c0016a5a:	48                   	dec    eax
c0016a5b:	c6 05 c5 a4 02 c0 00 	mov    BYTE PTR ds:0xc002a4c5,0x0
c0016a62:	a3 68 a4 02 c0       	mov    ds:0xc002a468,eax
c0016a67:	85 c0                	test   eax,eax
c0016a69:	75 01                	jne    c0016a6c <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x183>
c0016a6b:	fb                   	sti    
c0016a6c:	83 ec 0c             	sub    esp,0xc
c0016a6f:	ff 35 c8 a4 02 c0    	push   DWORD PTR ds:0xc002a4c8
c0016a75:	e8 4a f5 ff ff       	call   c0015fc4 <unblockTask(ThreadControlBlock*)>
c0016a7a:	83 c4 10             	add    esp,0x10
c0016a7d:	83 c4 2c             	add    esp,0x2c
c0016a80:	88 d8                	mov    al,bl
c0016a82:	5b                   	pop    ebx
c0016a83:	5e                   	pop    esi
c0016a84:	5f                   	pop    edi
c0016a85:	5d                   	pop    ebp
c0016a86:	c3                   	ret    

c0016a87 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c0016a87:	57                   	push   edi
c0016a88:	56                   	push   esi
c0016a89:	53                   	push   ebx
c0016a8a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0016a8e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016a92:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0016a96:	83 e8 06             	sub    eax,0x6
c0016a99:	0f b7 c0             	movzx  eax,ax
c0016a9c:	50                   	push   eax
c0016a9d:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c0016aa2:	50                   	push   eax
c0016aa3:	e8 32 fc ff ff       	call   c00166da <Vm::realToLinear(unsigned short, unsigned short)>
c0016aa8:	5a                   	pop    edx
c0016aa9:	8b 73 38             	mov    esi,DWORD PTR [ebx+0x38]
c0016aac:	59                   	pop    ecx
c0016aad:	8b 4b 44             	mov    ecx,DWORD PTR [ebx+0x44]
c0016ab0:	8d 51 fa             	lea    edx,[ecx-0x6]
c0016ab3:	81 e2 ff ff 00 00    	and    edx,0xffff
c0016ab9:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c0016abc:	8d 56 02             	lea    edx,[esi+0x2]
c0016abf:	66 89 10             	mov    WORD PTR [eax],dx
c0016ac2:	66 8b 53 3c          	mov    dx,WORD PTR [ebx+0x3c]
c0016ac6:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c0016aca:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c0016acd:	66 8b 53 40          	mov    dx,WORD PTR [ebx+0x40]
c0016ad1:	0f b6 f1             	movzx  esi,cl
c0016ad4:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c0016ad8:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0016ade:	80 7a 5d 00          	cmp    BYTE PTR [edx+0x5d],0x0
c0016ae2:	0f b6 d5             	movzx  edx,ch
c0016ae5:	74 0a                	je     c0016af1 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x6a>
c0016ae7:	c1 e2 08             	shl    edx,0x8
c0016aea:	09 f2                	or     edx,esi
c0016aec:	80 ce 02             	or     dh,0x2
c0016aef:	eb 08                	jmp    c0016af9 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x72>
c0016af1:	c1 e2 08             	shl    edx,0x8
c0016af4:	09 f2                	or     edx,esi
c0016af6:	80 e6 fd             	and    dh,0xfd
c0016af9:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c0016afd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016b02:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c0016b06:	0f b7 04 bd 02 00 00 00 	movzx  eax,WORD PTR [edi*4+0x2]
c0016b0e:	89 43 3c             	mov    DWORD PTR [ebx+0x3c],eax
c0016b11:	0f b7 04 bd 00 00 00 00 	movzx  eax,WORD PTR [edi*4+0x0]
c0016b19:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0016b1c:	5b                   	pop    ebx
c0016b1d:	5e                   	pop    esi
c0016b1e:	5f                   	pop    edi
c0016b1f:	c3                   	ret    

c0016b20 <Vm::readByteFromReal(unsigned short, unsigned short)>:
c0016b20:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0016b25:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0016b2a:	c1 e0 04             	shl    eax,0x4
c0016b2d:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c0016b30:	c3                   	ret    

c0016b31 <Vm::readWordFromReal(unsigned short, unsigned short)>:
c0016b31:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0016b36:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0016b3b:	c1 e0 04             	shl    eax,0x4
c0016b3e:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c0016b42:	c3                   	ret    

c0016b43 <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c0016b43:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0016b48:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0016b4d:	c1 e0 04             	shl    eax,0x4
c0016b50:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c0016b53:	c3                   	ret    

c0016b54 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c0016b54:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0016b59:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0016b5e:	c1 e0 04             	shl    eax,0x4
c0016b61:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016b65:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c0016b68:	c3                   	ret    

c0016b69 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c0016b69:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0016b6e:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0016b73:	c1 e0 04             	shl    eax,0x4
c0016b76:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016b7a:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c0016b7e:	c3                   	ret    

c0016b7f <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c0016b7f:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0016b84:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0016b89:	c1 e0 04             	shl    eax,0x4
c0016b8c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016b90:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c0016b93:	c3                   	ret    

c0016b94 <Vm::faultHandler(regs*)>:
c0016b94:	55                   	push   ebp
c0016b95:	57                   	push   edi
c0016b96:	56                   	push   esi
c0016b97:	53                   	push   ebx
c0016b98:	83 ec 2c             	sub    esp,0x2c
c0016b9b:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0016b9f:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0016ba2:	0f b7 53 38          	movzx  edx,WORD PTR [ebx+0x38]
c0016ba6:	0f b7 f8             	movzx  edi,ax
c0016ba9:	52                   	push   edx
c0016baa:	0f b7 c0             	movzx  eax,ax
c0016bad:	50                   	push   eax
c0016bae:	e8 27 fb ff ff       	call   c00166da <Vm::realToLinear(unsigned short, unsigned short)>
c0016bb3:	5a                   	pop    edx
c0016bb4:	59                   	pop    ecx
c0016bb5:	89 c1                	mov    ecx,eax
c0016bb7:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0016bba:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016bbe:	0f b7 44 24 10       	movzx  eax,WORD PTR [esp+0x10]
c0016bc3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0016bc7:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0016bca:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0016bce:	0f b7 44 24 14       	movzx  eax,WORD PTR [esp+0x14]
c0016bd3:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0016bd7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016bdb:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0016bdf:	e8 f6 fa ff ff       	call   c00166da <Vm::realToLinear(unsigned short, unsigned short)>
c0016be4:	5e                   	pop    esi
c0016be5:	be 06 00 00 00       	mov    esi,0x6
c0016bea:	5d                   	pop    ebp
c0016beb:	31 ed                	xor    ebp,ebp
c0016bed:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0016bf2:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c0016bf5:	81 fa 9d 00 00 00    	cmp    edx,0x9d
c0016bfb:	0f 84 74 02 00 00    	je     c0016e75 <Vm::faultHandler(regs*)+0x2e1>
c0016c01:	0f 87 94 00 00 00    	ja     c0016c9b <Vm::faultHandler(regs*)+0x107>
c0016c07:	83 fa 66             	cmp    edx,0x66
c0016c0a:	0f 84 e2 01 00 00    	je     c0016df2 <Vm::faultHandler(regs*)+0x25e>
c0016c10:	77 47                	ja     c0016c59 <Vm::faultHandler(regs*)+0xc5>
c0016c12:	83 fa 36             	cmp    edx,0x36
c0016c15:	0f 84 ca 01 00 00    	je     c0016de5 <Vm::faultHandler(regs*)+0x251>
c0016c1b:	77 1a                	ja     c0016c37 <Vm::faultHandler(regs*)+0xa3>
c0016c1d:	83 fa 26             	cmp    edx,0x26
c0016c20:	0f 84 98 01 00 00    	je     c0016dbe <Vm::faultHandler(regs*)+0x22a>
c0016c26:	83 fa 2e             	cmp    edx,0x2e
c0016c29:	0f 85 21 06 00 00    	jne    c0017250 <Vm::faultHandler(regs*)+0x6bc>
c0016c2f:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016c32:	31 f6                	xor    esi,esi
c0016c34:	41                   	inc    ecx
c0016c35:	eb bb                	jmp    c0016bf2 <Vm::faultHandler(regs*)+0x5e>
c0016c37:	83 fa 64             	cmp    edx,0x64
c0016c3a:	0f 84 8b 01 00 00    	je     c0016dcb <Vm::faultHandler(regs*)+0x237>
c0016c40:	0f 87 92 01 00 00    	ja     c0016dd8 <Vm::faultHandler(regs*)+0x244>
c0016c46:	83 fa 3e             	cmp    edx,0x3e
c0016c49:	0f 85 01 06 00 00    	jne    c0017250 <Vm::faultHandler(regs*)+0x6bc>
c0016c4f:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016c52:	be 01 00 00 00       	mov    esi,0x1
c0016c57:	eb db                	jmp    c0016c34 <Vm::faultHandler(regs*)+0xa0>
c0016c59:	83 fa 6d             	cmp    edx,0x6d
c0016c5c:	0f 84 34 03 00 00    	je     c0016f96 <Vm::faultHandler(regs*)+0x402>
c0016c62:	77 17                	ja     c0016c7b <Vm::faultHandler(regs*)+0xe7>
c0016c64:	83 fa 67             	cmp    edx,0x67
c0016c67:	0f 84 92 01 00 00    	je     c0016dff <Vm::faultHandler(regs*)+0x26b>
c0016c6d:	83 fa 6c             	cmp    edx,0x6c
c0016c70:	0f 84 b1 02 00 00    	je     c0016f27 <Vm::faultHandler(regs*)+0x393>
c0016c76:	e9 d5 05 00 00       	jmp    c0017250 <Vm::faultHandler(regs*)+0x6bc>
c0016c7b:	83 fa 6f             	cmp    edx,0x6f
c0016c7e:	0f 84 3d 04 00 00    	je     c00170c1 <Vm::faultHandler(regs*)+0x52d>
c0016c84:	0f 82 9f 03 00 00    	jb     c0017029 <Vm::faultHandler(regs*)+0x495>
c0016c8a:	81 fa 9c 00 00 00    	cmp    edx,0x9c
c0016c90:	0f 84 76 01 00 00    	je     c0016e0c <Vm::faultHandler(regs*)+0x278>
c0016c96:	e9 b5 05 00 00       	jmp    c0017250 <Vm::faultHandler(regs*)+0x6bc>
c0016c9b:	81 fa ec 00 00 00    	cmp    edx,0xec
c0016ca1:	0f 84 51 05 00 00    	je     c00171f8 <Vm::faultHandler(regs*)+0x664>
c0016ca7:	0f 87 a9 00 00 00    	ja     c0016d56 <Vm::faultHandler(regs*)+0x1c2>
c0016cad:	81 fa e4 00 00 00    	cmp    edx,0xe4
c0016cb3:	0f 84 d0 04 00 00    	je     c0017189 <Vm::faultHandler(regs*)+0x5f5>
c0016cb9:	77 78                	ja     c0016d33 <Vm::faultHandler(regs*)+0x19f>
c0016cbb:	81 fa cd 00 00 00    	cmp    edx,0xcd
c0016cc1:	0f 84 0e 02 00 00    	je     c0016ed5 <Vm::faultHandler(regs*)+0x341>
c0016cc7:	81 fa cf 00 00 00    	cmp    edx,0xcf
c0016ccd:	0f 85 7d 05 00 00    	jne    c0017250 <Vm::faultHandler(regs*)+0x6bc>
c0016cd3:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0016cd7:	89 d1                	mov    ecx,edx
c0016cd9:	0f b6 10             	movzx  edx,BYTE PTR [eax]
c0016cdc:	c1 e1 08             	shl    ecx,0x8
c0016cdf:	09 ca                	or     edx,ecx
c0016ce1:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c0016ce4:	0f b6 50 03          	movzx  edx,BYTE PTR [eax+0x3]
c0016ce8:	89 d1                	mov    ecx,edx
c0016cea:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
c0016cee:	c1 e1 08             	shl    ecx,0x8
c0016cf1:	09 ca                	or     edx,ecx
c0016cf3:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c0016cf6:	0f b6 50 05          	movzx  edx,BYTE PTR [eax+0x5]
c0016cfa:	89 d1                	mov    ecx,edx
c0016cfc:	0f b6 50 04          	movzx  edx,BYTE PTR [eax+0x4]
c0016d00:	c1 e1 08             	shl    ecx,0x8
c0016d03:	09 ca                	or     edx,ecx
c0016d05:	81 ca 00 02 02 00    	or     edx,0x20200
c0016d0b:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0016d0e:	0f b6 40 05          	movzx  eax,BYTE PTR [eax+0x5]
c0016d12:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0016d18:	d1 e8                	shr    eax,1
c0016d1a:	83 e0 01             	and    eax,0x1
c0016d1d:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0016d20:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0016d23:	83 c0 06             	add    eax,0x6
c0016d26:	25 ff ff 00 00       	and    eax,0xffff
c0016d2b:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0016d2e:	e9 19 05 00 00       	jmp    c001724c <Vm::faultHandler(regs*)+0x6b8>
c0016d33:	81 fa e6 00 00 00    	cmp    edx,0xe6
c0016d39:	0f 84 8f 04 00 00    	je     c00171ce <Vm::faultHandler(regs*)+0x63a>
c0016d3f:	0f 82 60 04 00 00    	jb     c00171a5 <Vm::faultHandler(regs*)+0x611>
c0016d45:	81 fa e7 00 00 00    	cmp    edx,0xe7
c0016d4b:	0f 84 94 04 00 00    	je     c00171e5 <Vm::faultHandler(regs*)+0x651>
c0016d51:	e9 fa 04 00 00       	jmp    c0017250 <Vm::faultHandler(regs*)+0x6bc>
c0016d56:	81 fa ef 00 00 00    	cmp    edx,0xef
c0016d5c:	0f 84 d7 04 00 00    	je     c0017239 <Vm::faultHandler(regs*)+0x6a5>
c0016d62:	77 2e                	ja     c0016d92 <Vm::faultHandler(regs*)+0x1fe>
c0016d64:	81 fa ed 00 00 00    	cmp    edx,0xed
c0016d6a:	0f 84 a4 04 00 00    	je     c0017214 <Vm::faultHandler(regs*)+0x680>
c0016d70:	81 fa ee 00 00 00    	cmp    edx,0xee
c0016d76:	0f 85 d4 04 00 00    	jne    c0017250 <Vm::faultHandler(regs*)+0x6bc>
c0016d7c:	50                   	push   eax
c0016d7d:	50                   	push   eax
c0016d7e:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c0016d82:	50                   	push   eax
c0016d83:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0016d87:	50                   	push   eax
c0016d88:	e8 17 f9 ff ff       	call   c00166a4 <Vm::outbv(unsigned short, unsigned char)>
c0016d8d:	e9 9f 04 00 00       	jmp    c0017231 <Vm::faultHandler(regs*)+0x69d>
c0016d92:	81 fa fa 00 00 00    	cmp    edx,0xfa
c0016d98:	0f 84 6d 01 00 00    	je     c0016f0b <Vm::faultHandler(regs*)+0x377>
c0016d9e:	81 fa fb 00 00 00    	cmp    edx,0xfb
c0016da4:	0f 84 6f 01 00 00    	je     c0016f19 <Vm::faultHandler(regs*)+0x385>
c0016daa:	81 fa f3 00 00 00    	cmp    edx,0xf3
c0016db0:	0f 85 9a 04 00 00    	jne    c0017250 <Vm::faultHandler(regs*)+0x6bc>
c0016db6:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016db9:	e9 76 fe ff ff       	jmp    c0016c34 <Vm::faultHandler(regs*)+0xa0>
c0016dbe:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016dc1:	be 02 00 00 00       	mov    esi,0x2
c0016dc6:	e9 69 fe ff ff       	jmp    c0016c34 <Vm::faultHandler(regs*)+0xa0>
c0016dcb:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016dce:	be 03 00 00 00       	mov    esi,0x3
c0016dd3:	e9 5c fe ff ff       	jmp    c0016c34 <Vm::faultHandler(regs*)+0xa0>
c0016dd8:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016ddb:	be 04 00 00 00       	mov    esi,0x4
c0016de0:	e9 4f fe ff ff       	jmp    c0016c34 <Vm::faultHandler(regs*)+0xa0>
c0016de5:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016de8:	be 05 00 00 00       	mov    esi,0x5
c0016ded:	e9 42 fe ff ff       	jmp    c0016c34 <Vm::faultHandler(regs*)+0xa0>
c0016df2:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016df5:	bd 01 00 00 00       	mov    ebp,0x1
c0016dfa:	e9 35 fe ff ff       	jmp    c0016c34 <Vm::faultHandler(regs*)+0xa0>
c0016dff:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016e02:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c0016e07:	e9 28 fe ff ff       	jmp    c0016c34 <Vm::faultHandler(regs*)+0xa0>
c0016e0c:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0016e0f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0016e13:	83 e5 01             	and    ebp,0x1
c0016e16:	74 30                	je     c0016e48 <Vm::faultHandler(regs*)+0x2b4>
c0016e18:	83 e9 04             	sub    ecx,0x4
c0016e1b:	81 e2 ff 0d 00 00    	and    edx,0xdff
c0016e21:	81 e1 ff ff 00 00    	and    ecx,0xffff
c0016e27:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c0016e2a:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c0016e2d:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0016e33:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c0016e37:	0f 84 0c 04 00 00    	je     c0017249 <Vm::faultHandler(regs*)+0x6b5>
c0016e3d:	80 ce 02             	or     dh,0x2
c0016e40:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c0016e43:	e9 01 04 00 00       	jmp    c0017249 <Vm::faultHandler(regs*)+0x6b5>
c0016e48:	83 e9 02             	sub    ecx,0x2
c0016e4b:	81 e1 ff ff 00 00    	and    ecx,0xffff
c0016e51:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c0016e54:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c0016e58:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0016e5e:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c0016e62:	74 05                	je     c0016e69 <Vm::faultHandler(regs*)+0x2d5>
c0016e64:	80 ce 02             	or     dh,0x2
c0016e67:	eb 03                	jmp    c0016e6c <Vm::faultHandler(regs*)+0x2d8>
c0016e69:	80 e6 fd             	and    dh,0xfd
c0016e6c:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c0016e70:	e9 d4 03 00 00       	jmp    c0017249 <Vm::faultHandler(regs*)+0x6b5>
c0016e75:	83 e5 01             	and    ebp,0x1
c0016e78:	74 2a                	je     c0016ea4 <Vm::faultHandler(regs*)+0x310>
c0016e7a:	8b 10                	mov    edx,DWORD PTR [eax]
c0016e7c:	81 e2 ff 0d 00 00    	and    edx,0xdff
c0016e82:	81 ca 00 02 02 00    	or     edx,0x20200
c0016e88:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0016e8b:	8b 00                	mov    eax,DWORD PTR [eax]
c0016e8d:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0016e93:	c1 e8 09             	shr    eax,0x9
c0016e96:	83 e0 01             	and    eax,0x1
c0016e99:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0016e9c:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0016e9f:	83 c0 04             	add    eax,0x4
c0016ea2:	eb 24                	jmp    c0016ec8 <Vm::faultHandler(regs*)+0x334>
c0016ea4:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0016ea7:	81 ca 00 02 02 00    	or     edx,0x20200
c0016ead:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0016eb0:	0f b7 00             	movzx  eax,WORD PTR [eax]
c0016eb3:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0016eb9:	c1 e8 09             	shr    eax,0x9
c0016ebc:	83 e0 01             	and    eax,0x1
c0016ebf:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0016ec2:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0016ec5:	83 c0 02             	add    eax,0x2
c0016ec8:	25 ff ff 00 00       	and    eax,0xffff
c0016ecd:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0016ed0:	e9 74 03 00 00       	jmp    c0017249 <Vm::faultHandler(regs*)+0x6b5>
c0016ed5:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0016ed9:	3d ee 00 00 00       	cmp    eax,0xee
c0016ede:	75 10                	jne    c0016ef0 <Vm::faultHandler(regs*)+0x35c>
c0016ee0:	83 ec 0c             	sub    esp,0xc
c0016ee3:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c0016ee6:	e8 56 f8 ff ff       	call   c0016741 <Vm::mainloop3(unsigned long)>
c0016eeb:	e9 44 03 00 00       	jmp    c0017234 <Vm::faultHandler(regs*)+0x6a0>
c0016ef0:	83 ec 0c             	sub    esp,0xc
c0016ef3:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0016ef7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016efb:	51                   	push   ecx
c0016efc:	50                   	push   eax
c0016efd:	53                   	push   ebx
c0016efe:	e8 84 fb ff ff       	call   c0016a87 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c0016f03:	83 c4 20             	add    esp,0x20
c0016f06:	e9 41 03 00 00       	jmp    c001724c <Vm::faultHandler(regs*)+0x6b8>
c0016f0b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016f10:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c0016f14:	e9 30 03 00 00       	jmp    c0017249 <Vm::faultHandler(regs*)+0x6b5>
c0016f19:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016f1e:	c6 40 5d 01          	mov    BYTE PTR [eax+0x5d],0x1
c0016f22:	e9 22 03 00 00       	jmp    c0017249 <Vm::faultHandler(regs*)+0x6b5>
c0016f27:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c0016f2a:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0016f2f:	74 2b                	je     c0016f5c <Vm::faultHandler(regs*)+0x3c8>
c0016f31:	81 7b 10 ff ff 00 00 	cmp    DWORD PTR [ebx+0x10],0xffff
c0016f38:	76 22                	jbe    c0016f5c <Vm::faultHandler(regs*)+0x3c8>
c0016f3a:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0016f3e:	50                   	push   eax
c0016f3f:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0016f43:	50                   	push   eax
c0016f44:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0016f48:	50                   	push   eax
c0016f49:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0016f4d:	50                   	push   eax
c0016f4e:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0016f52:	50                   	push   eax
c0016f53:	6a 6c                	push   0x6c
c0016f55:	6a 6c                	push   0x6c
c0016f57:	e9 bd 01 00 00       	jmp    c0017119 <Vm::faultHandler(regs*)+0x585>
c0016f5c:	83 ec 0c             	sub    esp,0xc
c0016f5f:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0016f63:	0f b7 f6             	movzx  esi,si
c0016f66:	50                   	push   eax
c0016f67:	e8 25 f7 ff ff       	call   c0016691 <Vm::inbv(unsigned short)>
c0016f6c:	83 c4 0c             	add    esp,0xc
c0016f6f:	0f b6 c0             	movzx  eax,al
c0016f72:	50                   	push   eax
c0016f73:	0f b7 43 10          	movzx  eax,WORD PTR [ebx+0x10]
c0016f77:	50                   	push   eax
c0016f78:	56                   	push   esi
c0016f79:	e8 d6 fb ff ff       	call   c0016b54 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c0016f7e:	83 c4 10             	add    esp,0x10
c0016f81:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0016f84:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0016f88:	74 03                	je     c0016f8d <Vm::faultHandler(regs*)+0x3f9>
c0016f8a:	48                   	dec    eax
c0016f8b:	eb 01                	jmp    c0016f8e <Vm::faultHandler(regs*)+0x3fa>
c0016f8d:	40                   	inc    eax
c0016f8e:	0f b7 c0             	movzx  eax,ax
c0016f91:	e9 8b 00 00 00       	jmp    c0017021 <Vm::faultHandler(regs*)+0x48d>
c0016f96:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c0016f99:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0016f9c:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0016fa1:	74 29                	je     c0016fcc <Vm::faultHandler(regs*)+0x438>
c0016fa3:	3d ff ff 00 00       	cmp    eax,0xffff
c0016fa8:	76 22                	jbe    c0016fcc <Vm::faultHandler(regs*)+0x438>
c0016faa:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0016fae:	50                   	push   eax
c0016faf:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0016fb3:	50                   	push   eax
c0016fb4:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0016fb8:	50                   	push   eax
c0016fb9:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0016fbd:	50                   	push   eax
c0016fbe:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0016fc2:	50                   	push   eax
c0016fc3:	6a 6d                	push   0x6d
c0016fc5:	6a 6d                	push   0x6d
c0016fc7:	e9 4d 01 00 00       	jmp    c0017119 <Vm::faultHandler(regs*)+0x585>
c0016fcc:	0f b7 c8             	movzx  ecx,ax
c0016fcf:	0f b7 f6             	movzx  esi,si
c0016fd2:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0016fd5:	83 e5 01             	and    ebp,0x1
c0016fd8:	74 20                	je     c0016ffa <Vm::faultHandler(regs*)+0x466>
c0016fda:	ed                   	in     eax,dx
c0016fdb:	55                   	push   ebp
c0016fdc:	50                   	push   eax
c0016fdd:	51                   	push   ecx
c0016fde:	56                   	push   esi
c0016fdf:	e8 9b fb ff ff       	call   c0016b7f <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c0016fe4:	83 c4 10             	add    esp,0x10
c0016fe7:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0016fea:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0016fee:	74 05                	je     c0016ff5 <Vm::faultHandler(regs*)+0x461>
c0016ff0:	83 e8 04             	sub    eax,0x4
c0016ff3:	eb 27                	jmp    c001701c <Vm::faultHandler(regs*)+0x488>
c0016ff5:	83 c0 04             	add    eax,0x4
c0016ff8:	eb 22                	jmp    c001701c <Vm::faultHandler(regs*)+0x488>
c0016ffa:	66 ed                	in     ax,dx
c0016ffc:	0f b7 c0             	movzx  eax,ax
c0016fff:	57                   	push   edi
c0017000:	50                   	push   eax
c0017001:	51                   	push   ecx
c0017002:	56                   	push   esi
c0017003:	e8 61 fb ff ff       	call   c0016b69 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c0017008:	83 c4 10             	add    esp,0x10
c001700b:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001700e:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0017012:	74 05                	je     c0017019 <Vm::faultHandler(regs*)+0x485>
c0017014:	83 e8 02             	sub    eax,0x2
c0017017:	eb 03                	jmp    c001701c <Vm::faultHandler(regs*)+0x488>
c0017019:	83 c0 02             	add    eax,0x2
c001701c:	25 ff ff 00 00       	and    eax,0xffff
c0017021:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0017024:	e9 20 02 00 00       	jmp    c0017249 <Vm::faultHandler(regs*)+0x6b5>
c0017029:	8d 46 ff             	lea    eax,[esi-0x1]
c001702c:	0f b6 f0             	movzx  esi,al
c001702f:	83 fe 05             	cmp    esi,0x5
c0017032:	77 23                	ja     c0017057 <Vm::faultHandler(regs*)+0x4c3>
c0017034:	ff 24 b5 c4 23 02 c0 	jmp    DWORD PTR [esi*4-0x3ffddc3c]
c001703b:	0f b7 7c 24 14       	movzx  edi,WORD PTR [esp+0x14]
c0017040:	eb 15                	jmp    c0017057 <Vm::faultHandler(regs*)+0x4c3>
c0017042:	0f b7 7b 0c          	movzx  edi,WORD PTR [ebx+0xc]
c0017046:	eb 0f                	jmp    c0017057 <Vm::faultHandler(regs*)+0x4c3>
c0017048:	0f b7 7b 08          	movzx  edi,WORD PTR [ebx+0x8]
c001704c:	eb 09                	jmp    c0017057 <Vm::faultHandler(regs*)+0x4c3>
c001704e:	0f b7 7b 04          	movzx  edi,WORD PTR [ebx+0x4]
c0017052:	eb 03                	jmp    c0017057 <Vm::faultHandler(regs*)+0x4c3>
c0017054:	0f b7 3b             	movzx  edi,WORD PTR [ebx]
c0017057:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001705a:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c001705f:	74 29                	je     c001708a <Vm::faultHandler(regs*)+0x4f6>
c0017061:	3d ff ff 00 00       	cmp    eax,0xffff
c0017066:	76 22                	jbe    c001708a <Vm::faultHandler(regs*)+0x4f6>
c0017068:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001706c:	50                   	push   eax
c001706d:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0017071:	50                   	push   eax
c0017072:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0017076:	50                   	push   eax
c0017077:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001707b:	50                   	push   eax
c001707c:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0017080:	50                   	push   eax
c0017081:	6a 6e                	push   0x6e
c0017083:	6a 6e                	push   0x6e
c0017085:	e9 8f 00 00 00       	jmp    c0017119 <Vm::faultHandler(regs*)+0x585>
c001708a:	0f b7 c0             	movzx  eax,ax
c001708d:	52                   	push   edx
c001708e:	52                   	push   edx
c001708f:	50                   	push   eax
c0017090:	57                   	push   edi
c0017091:	e8 8a fa ff ff       	call   c0016b20 <Vm::readByteFromReal(unsigned short, unsigned short)>
c0017096:	59                   	pop    ecx
c0017097:	0f b6 c0             	movzx  eax,al
c001709a:	5e                   	pop    esi
c001709b:	50                   	push   eax
c001709c:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c00170a0:	50                   	push   eax
c00170a1:	e8 fe f5 ff ff       	call   c00166a4 <Vm::outbv(unsigned short, unsigned char)>
c00170a6:	83 c4 10             	add    esp,0x10
c00170a9:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00170ac:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c00170b0:	74 03                	je     c00170b5 <Vm::faultHandler(regs*)+0x521>
c00170b2:	48                   	dec    eax
c00170b3:	eb 01                	jmp    c00170b6 <Vm::faultHandler(regs*)+0x522>
c00170b5:	40                   	inc    eax
c00170b6:	0f b7 c0             	movzx  eax,ax
c00170b9:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c00170bc:	e9 88 01 00 00       	jmp    c0017249 <Vm::faultHandler(regs*)+0x6b5>
c00170c1:	8d 46 ff             	lea    eax,[esi-0x1]
c00170c4:	0f b6 f0             	movzx  esi,al
c00170c7:	83 fe 05             	cmp    esi,0x5
c00170ca:	77 1e                	ja     c00170ea <Vm::faultHandler(regs*)+0x556>
c00170cc:	ff 24 b5 dc 23 02 c0 	jmp    DWORD PTR [esi*4-0x3ffddc24]
c00170d3:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00170d7:	eb 11                	jmp    c00170ea <Vm::faultHandler(regs*)+0x556>
c00170d9:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c00170dc:	eb 0c                	jmp    c00170ea <Vm::faultHandler(regs*)+0x556>
c00170de:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c00170e1:	eb 07                	jmp    c00170ea <Vm::faultHandler(regs*)+0x556>
c00170e3:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00170e6:	eb 02                	jmp    c00170ea <Vm::faultHandler(regs*)+0x556>
c00170e8:	8b 3b                	mov    edi,DWORD PTR [ebx]
c00170ea:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c00170ed:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c00170f2:	74 37                	je     c001712b <Vm::faultHandler(regs*)+0x597>
c00170f4:	81 fe ff ff 00 00    	cmp    esi,0xffff
c00170fa:	76 2f                	jbe    c001712b <Vm::faultHandler(regs*)+0x597>
c00170fc:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0017100:	50                   	push   eax
c0017101:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0017105:	50                   	push   eax
c0017106:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001710a:	50                   	push   eax
c001710b:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001710f:	50                   	push   eax
c0017110:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0017114:	50                   	push   eax
c0017115:	6a 6f                	push   0x6f
c0017117:	6a 6f                	push   0x6f
c0017119:	68 68 23 02 c0       	push   0xc0022368
c001711e:	e8 22 38 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0017123:	83 c4 20             	add    esp,0x20
c0017126:	e9 83 01 00 00       	jmp    c00172ae <Vm::faultHandler(regs*)+0x71a>
c001712b:	0f b7 d7             	movzx  edx,di
c001712e:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c0017131:	0f b7 c6             	movzx  eax,si
c0017134:	81 e1 00 04 00 00    	and    ecx,0x400
c001713a:	8b 7b 24             	mov    edi,DWORD PTR [ebx+0x24]
c001713d:	83 e5 01             	and    ebp,0x1
c0017140:	74 1d                	je     c001715f <Vm::faultHandler(regs*)+0x5cb>
c0017142:	55                   	push   ebp
c0017143:	55                   	push   ebp
c0017144:	50                   	push   eax
c0017145:	52                   	push   edx
c0017146:	e8 f8 f9 ff ff       	call   c0016b43 <Vm::readDwordFromReal(unsigned short, unsigned short)>
c001714b:	83 c4 10             	add    esp,0x10
c001714e:	89 fa                	mov    edx,edi
c0017150:	ef                   	out    dx,eax
c0017151:	85 c9                	test   ecx,ecx
c0017153:	74 05                	je     c001715a <Vm::faultHandler(regs*)+0x5c6>
c0017155:	83 ee 04             	sub    esi,0x4
c0017158:	eb 21                	jmp    c001717b <Vm::faultHandler(regs*)+0x5e7>
c001715a:	83 c6 04             	add    esi,0x4
c001715d:	eb 1c                	jmp    c001717b <Vm::faultHandler(regs*)+0x5e7>
c001715f:	55                   	push   ebp
c0017160:	55                   	push   ebp
c0017161:	50                   	push   eax
c0017162:	52                   	push   edx
c0017163:	e8 c9 f9 ff ff       	call   c0016b31 <Vm::readWordFromReal(unsigned short, unsigned short)>
c0017168:	83 c4 10             	add    esp,0x10
c001716b:	89 fa                	mov    edx,edi
c001716d:	66 ef                	out    dx,ax
c001716f:	85 c9                	test   ecx,ecx
c0017171:	74 05                	je     c0017178 <Vm::faultHandler(regs*)+0x5e4>
c0017173:	83 ee 02             	sub    esi,0x2
c0017176:	eb 03                	jmp    c001717b <Vm::faultHandler(regs*)+0x5e7>
c0017178:	83 c6 02             	add    esi,0x2
c001717b:	81 e6 ff ff 00 00    	and    esi,0xffff
c0017181:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0017184:	e9 c0 00 00 00       	jmp    c0017249 <Vm::faultHandler(regs*)+0x6b5>
c0017189:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c0017190:	83 ec 0c             	sub    esp,0xc
c0017193:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0017197:	50                   	push   eax
c0017198:	e8 f4 f4 ff ff       	call   c0016691 <Vm::inbv(unsigned short)>
c001719d:	0f b6 c0             	movzx  eax,al
c00171a0:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c00171a3:	eb 3a                	jmp    c00171df <Vm::faultHandler(regs*)+0x64b>
c00171a5:	83 e5 01             	and    ebp,0x1
c00171a8:	74 07                	je     c00171b1 <Vm::faultHandler(regs*)+0x61d>
c00171aa:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c00171ae:	ed                   	in     eax,dx
c00171af:	eb 14                	jmp    c00171c5 <Vm::faultHandler(regs*)+0x631>
c00171b1:	8b 73 2c             	mov    esi,DWORD PTR [ebx+0x2c]
c00171b4:	66 31 f6             	xor    si,si
c00171b7:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c00171ba:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c00171be:	66 ed                	in     ax,dx
c00171c0:	0f b7 c0             	movzx  eax,ax
c00171c3:	09 f0                	or     eax,esi
c00171c5:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00171c8:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c00171cc:	eb 7e                	jmp    c001724c <Vm::faultHandler(regs*)+0x6b8>
c00171ce:	52                   	push   edx
c00171cf:	52                   	push   edx
c00171d0:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c00171d4:	50                   	push   eax
c00171d5:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00171d9:	50                   	push   eax
c00171da:	e8 c5 f4 ff ff       	call   c00166a4 <Vm::outbv(unsigned short, unsigned char)>
c00171df:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c00171e3:	eb 4f                	jmp    c0017234 <Vm::faultHandler(regs*)+0x6a0>
c00171e5:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00171e8:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c00171ec:	83 e5 01             	and    ebp,0x1
c00171ef:	74 03                	je     c00171f4 <Vm::faultHandler(regs*)+0x660>
c00171f1:	ef                   	out    dx,eax
c00171f2:	eb d4                	jmp    c00171c8 <Vm::faultHandler(regs*)+0x634>
c00171f4:	66 ef                	out    dx,ax
c00171f6:	eb d0                	jmp    c00171c8 <Vm::faultHandler(regs*)+0x634>
c00171f8:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c00171ff:	83 ec 0c             	sub    esp,0xc
c0017202:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0017206:	50                   	push   eax
c0017207:	e8 85 f4 ff ff       	call   c0016691 <Vm::inbv(unsigned short)>
c001720c:	0f b6 c0             	movzx  eax,al
c001720f:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c0017212:	eb 1d                	jmp    c0017231 <Vm::faultHandler(regs*)+0x69d>
c0017214:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0017217:	83 e5 01             	and    ebp,0x1
c001721a:	74 03                	je     c001721f <Vm::faultHandler(regs*)+0x68b>
c001721c:	ed                   	in     eax,dx
c001721d:	eb 0d                	jmp    c001722c <Vm::faultHandler(regs*)+0x698>
c001721f:	66 ed                	in     ax,dx
c0017221:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0017224:	0f b7 c0             	movzx  eax,ax
c0017227:	66 31 d2             	xor    dx,dx
c001722a:	09 d0                	or     eax,edx
c001722c:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001722f:	eb 18                	jmp    c0017249 <Vm::faultHandler(regs*)+0x6b5>
c0017231:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0017234:	83 c4 10             	add    esp,0x10
c0017237:	eb 13                	jmp    c001724c <Vm::faultHandler(regs*)+0x6b8>
c0017239:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001723c:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c001723f:	83 e5 01             	and    ebp,0x1
c0017242:	74 03                	je     c0017247 <Vm::faultHandler(regs*)+0x6b3>
c0017244:	ef                   	out    dx,eax
c0017245:	eb 02                	jmp    c0017249 <Vm::faultHandler(regs*)+0x6b5>
c0017247:	66 ef                	out    dx,ax
c0017249:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001724c:	b0 01                	mov    al,0x1
c001724e:	eb 60                	jmp    c00172b0 <Vm::faultHandler(regs*)+0x71c>
c0017250:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0017254:	50                   	push   eax
c0017255:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0017259:	50                   	push   eax
c001725a:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001725e:	50                   	push   eax
c001725f:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0017263:	50                   	push   eax
c0017264:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0017268:	50                   	push   eax
c0017269:	52                   	push   edx
c001726a:	52                   	push   edx
c001726b:	68 95 23 02 c0       	push   0xc0022395
c0017270:	e8 d0 36 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0017275:	83 c4 20             	add    esp,0x20
c0017278:	83 ec 0c             	sub    esp,0xc
c001727b:	6a 60                	push   0x60
c001727d:	e8 0f f4 ff ff       	call   c0016691 <Vm::inbv(unsigned short)>
c0017282:	83 c4 10             	add    esp,0x10
c0017285:	0f b6 d0             	movzx  edx,al
c0017288:	83 fa 1c             	cmp    edx,0x1c
c001728b:	74 05                	je     c0017292 <Vm::faultHandler(regs*)+0x6fe>
c001728d:	83 fa 5a             	cmp    edx,0x5a
c0017290:	75 e6                	jne    c0017278 <Vm::faultHandler(regs*)+0x6e4>
c0017292:	0f b6 c0             	movzx  eax,al
c0017295:	83 f8 1c             	cmp    eax,0x1c
c0017298:	74 05                	je     c001729f <Vm::faultHandler(regs*)+0x70b>
c001729a:	83 f8 5a             	cmp    eax,0x5a
c001729d:	75 0f                	jne    c00172ae <Vm::faultHandler(regs*)+0x71a>
c001729f:	83 ec 0c             	sub    esp,0xc
c00172a2:	6a 60                	push   0x60
c00172a4:	e8 e8 f3 ff ff       	call   c0016691 <Vm::inbv(unsigned short)>
c00172a9:	83 c4 10             	add    esp,0x10
c00172ac:	eb e4                	jmp    c0017292 <Vm::faultHandler(regs*)+0x6fe>
c00172ae:	31 c0                	xor    eax,eax
c00172b0:	83 c4 2c             	add    esp,0x2c
c00172b3:	5b                   	pop    ebx
c00172b4:	5e                   	pop    esi
c00172b5:	5f                   	pop    edi
c00172b6:	5d                   	pop    ebp
c00172b7:	c3                   	ret    

c00172b8 <noCopro(unsigned long)>:
c00172b8:	c3                   	ret    

c00172b9 <nmiHandler(regs*, void*)>:
c00172b9:	83 ec 0c             	sub    esp,0xc
c00172bc:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c00172c1:	83 ec 0c             	sub    esp,0xc
c00172c4:	50                   	push   eax
c00172c5:	e8 ee ff fe ff       	call   c00072b8 <Computer::handleNMI()>
c00172ca:	83 c4 10             	add    esp,0x10
c00172cd:	90                   	nop
c00172ce:	83 c4 0c             	add    esp,0xc
c00172d1:	c3                   	ret    

c00172d2 <doubleFault(regs*, void*)>:
c00172d2:	55                   	push   ebp
c00172d3:	89 e5                	mov    ebp,esp
c00172d5:	83 ec 08             	sub    esp,0x8
c00172d8:	83 ec 0c             	sub    esp,0xc
c00172db:	68 f4 23 02 c0       	push   0xc00223f4
c00172e0:	e8 08 9f ff ff       	call   c00111ed <KePanic(char const*)>
c00172e5:	83 c4 10             	add    esp,0x10
c00172e8:	90                   	nop
c00172e9:	c9                   	leave  
c00172ea:	c3                   	ret    

c00172eb <displayDebugInfo(regs*)>:
c00172eb:	83 ec 1c             	sub    esp,0x1c
c00172ee:	0f 20 c0             	mov    eax,cr0
c00172f1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00172f5:	0f 20 d0             	mov    eax,cr2
c00172f8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00172fc:	0f 20 d8             	mov    eax,cr3
c00172ff:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017303:	0f 20 e0             	mov    eax,cr4
c0017306:	89 04 24             	mov    DWORD PTR [esp],eax
c0017309:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001730d:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0017310:	83 ec 08             	sub    esp,0x8
c0017313:	50                   	push   eax
c0017314:	68 10 24 02 c0       	push   0xc0022410
c0017319:	e8 27 36 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001731e:	83 c4 10             	add    esp,0x10
c0017321:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017325:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0017328:	83 ec 08             	sub    esp,0x8
c001732b:	50                   	push   eax
c001732c:	68 01 24 02 c0       	push   0xc0022401
c0017331:	e8 0f 36 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0017336:	83 c4 10             	add    esp,0x10
c0017339:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001733d:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0017340:	83 ec 08             	sub    esp,0x8
c0017343:	50                   	push   eax
c0017344:	68 0c 24 02 c0       	push   0xc002240c
c0017349:	e8 f7 35 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001734e:	83 c4 10             	add    esp,0x10
c0017351:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017355:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0017358:	83 ec 08             	sub    esp,0x8
c001735b:	50                   	push   eax
c001735c:	68 1b 24 02 c0       	push   0xc002241b
c0017361:	e8 df 35 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0017366:	83 c4 10             	add    esp,0x10
c0017369:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001736d:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c0017370:	83 ec 08             	sub    esp,0x8
c0017373:	50                   	push   eax
c0017374:	68 26 24 02 c0       	push   0xc0022426
c0017379:	e8 c7 35 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001737e:	83 c4 10             	add    esp,0x10
c0017381:	83 ec 08             	sub    esp,0x8
c0017384:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0017388:	68 31 24 02 c0       	push   0xc0022431
c001738d:	e8 b3 35 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0017392:	83 c4 10             	add    esp,0x10
c0017395:	83 ec 08             	sub    esp,0x8
c0017398:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001739c:	68 3c 24 02 c0       	push   0xc002243c
c00173a1:	e8 9f 35 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c00173a6:	83 c4 10             	add    esp,0x10
c00173a9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00173ad:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c00173b0:	c1 e0 05             	shl    eax,0x5
c00173b3:	8d 90 c0 33 02 c0    	lea    edx,[eax-0x3ffdcc40]
c00173b9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00173bd:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c00173c0:	83 ec 04             	sub    esp,0x4
c00173c3:	52                   	push   edx
c00173c4:	50                   	push   eax
c00173c5:	68 47 24 02 c0       	push   0xc0022447
c00173ca:	e8 76 35 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c00173cf:	83 c4 10             	add    esp,0x10
c00173d2:	a1 90 a4 02 c0       	mov    eax,ds:0xc002a490
c00173d7:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00173dd:	83 ec 0c             	sub    esp,0xc
c00173e0:	50                   	push   eax
c00173e1:	e8 73 13 ff ff       	call   c0008759 <setActiveTerminal(VgaText*)>
c00173e6:	83 c4 10             	add    esp,0x10
c00173e9:	a1 90 a4 02 c0       	mov    eax,ds:0xc002a490
c00173ee:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00173f4:	83 ec 08             	sub    esp,0x8
c00173f7:	68 56 24 02 c0       	push   0xc0022456
c00173fc:	50                   	push   eax
c00173fd:	e8 a4 16 ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c0017402:	83 c4 10             	add    esp,0x10
c0017405:	a1 90 a4 02 c0       	mov    eax,ds:0xc002a490
c001740a:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017410:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017414:	8b 52 30             	mov    edx,DWORD PTR [edx+0x30]
c0017417:	83 ec 08             	sub    esp,0x8
c001741a:	52                   	push   edx
c001741b:	50                   	push   eax
c001741c:	e8 3f 16 ff ff       	call   c0008a60 <VgaText::putx(unsigned int)>
c0017421:	83 c4 10             	add    esp,0x10
c0017424:	a1 90 a4 02 c0       	mov    eax,ds:0xc002a490
c0017429:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001742f:	83 ec 08             	sub    esp,0x8
c0017432:	68 64 24 02 c0       	push   0xc0022464
c0017437:	50                   	push   eax
c0017438:	e8 69 16 ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c001743d:	83 c4 10             	add    esp,0x10
c0017440:	a1 90 a4 02 c0       	mov    eax,ds:0xc002a490
c0017445:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001744b:	ba 00 20 00 c2       	mov    edx,0xc2002000
c0017450:	8b 12                	mov    edx,DWORD PTR [edx]
c0017452:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c0017455:	83 c2 0c             	add    edx,0xc
c0017458:	83 ec 08             	sub    esp,0x8
c001745b:	52                   	push   edx
c001745c:	50                   	push   eax
c001745d:	e8 44 16 ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c0017462:	83 c4 10             	add    esp,0x10
c0017465:	a1 90 a4 02 c0       	mov    eax,ds:0xc002a490
c001746a:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017470:	83 ec 08             	sub    esp,0x8
c0017473:	68 6d 24 02 c0       	push   0xc002246d
c0017478:	50                   	push   eax
c0017479:	e8 28 16 ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c001747e:	83 c4 10             	add    esp,0x10
c0017481:	a1 90 a4 02 c0       	mov    eax,ds:0xc002a490
c0017486:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001748c:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017490:	8b 52 38             	mov    edx,DWORD PTR [edx+0x38]
c0017493:	83 ec 08             	sub    esp,0x8
c0017496:	52                   	push   edx
c0017497:	50                   	push   eax
c0017498:	e8 c3 15 ff ff       	call   c0008a60 <VgaText::putx(unsigned int)>
c001749d:	83 c4 10             	add    esp,0x10
c00174a0:	a1 90 a4 02 c0       	mov    eax,ds:0xc002a490
c00174a5:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00174ab:	83 ec 08             	sub    esp,0x8
c00174ae:	68 75 24 02 c0       	push   0xc0022475
c00174b3:	50                   	push   eax
c00174b4:	e8 ed 15 ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c00174b9:	83 c4 10             	add    esp,0x10
c00174bc:	a1 90 a4 02 c0       	mov    eax,ds:0xc002a490
c00174c1:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00174c7:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00174cb:	8b 52 1c             	mov    edx,DWORD PTR [edx+0x1c]
c00174ce:	83 ec 08             	sub    esp,0x8
c00174d1:	52                   	push   edx
c00174d2:	50                   	push   eax
c00174d3:	e8 88 15 ff ff       	call   c0008a60 <VgaText::putx(unsigned int)>
c00174d8:	83 c4 10             	add    esp,0x10
c00174db:	a1 90 a4 02 c0       	mov    eax,ds:0xc002a490
c00174e0:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00174e6:	83 ec 08             	sub    esp,0x8
c00174e9:	68 7d 24 02 c0       	push   0xc002247d
c00174ee:	50                   	push   eax
c00174ef:	e8 b2 15 ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c00174f4:	83 c4 10             	add    esp,0x10
c00174f7:	a1 90 a4 02 c0       	mov    eax,ds:0xc002a490
c00174fc:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017502:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017506:	8b 52 44             	mov    edx,DWORD PTR [edx+0x44]
c0017509:	83 ec 08             	sub    esp,0x8
c001750c:	52                   	push   edx
c001750d:	50                   	push   eax
c001750e:	e8 4d 15 ff ff       	call   c0008a60 <VgaText::putx(unsigned int)>
c0017513:	83 c4 10             	add    esp,0x10
c0017516:	a1 90 a4 02 c0       	mov    eax,ds:0xc002a490
c001751b:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017521:	83 ec 08             	sub    esp,0x8
c0017524:	68 85 24 02 c0       	push   0xc0022485
c0017529:	50                   	push   eax
c001752a:	e8 77 15 ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c001752f:	83 c4 10             	add    esp,0x10
c0017532:	a1 90 a4 02 c0       	mov    eax,ds:0xc002a490
c0017537:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001753d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017541:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c0017544:	83 ec 08             	sub    esp,0x8
c0017547:	52                   	push   edx
c0017548:	50                   	push   eax
c0017549:	e8 12 15 ff ff       	call   c0008a60 <VgaText::putx(unsigned int)>
c001754e:	83 c4 10             	add    esp,0x10
c0017551:	a1 90 a4 02 c0       	mov    eax,ds:0xc002a490
c0017556:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001755c:	83 ec 08             	sub    esp,0x8
c001755f:	68 8d 24 02 c0       	push   0xc002248d
c0017564:	50                   	push   eax
c0017565:	e8 3c 15 ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c001756a:	83 c4 10             	add    esp,0x10
c001756d:	a1 90 a4 02 c0       	mov    eax,ds:0xc002a490
c0017572:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017578:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001757c:	8b 52 34             	mov    edx,DWORD PTR [edx+0x34]
c001757f:	83 ec 08             	sub    esp,0x8
c0017582:	52                   	push   edx
c0017583:	50                   	push   eax
c0017584:	e8 d7 14 ff ff       	call   c0008a60 <VgaText::putx(unsigned int)>
c0017589:	83 c4 10             	add    esp,0x10
c001758c:	a1 90 a4 02 c0       	mov    eax,ds:0xc002a490
c0017591:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017597:	83 ec 08             	sub    esp,0x8
c001759a:	68 95 24 02 c0       	push   0xc0022495
c001759f:	50                   	push   eax
c00175a0:	e8 01 15 ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c00175a5:	83 c4 10             	add    esp,0x10
c00175a8:	a1 90 a4 02 c0       	mov    eax,ds:0xc002a490
c00175ad:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00175b3:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00175b7:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c00175ba:	83 ec 08             	sub    esp,0x8
c00175bd:	52                   	push   edx
c00175be:	50                   	push   eax
c00175bf:	e8 9c 14 ff ff       	call   c0008a60 <VgaText::putx(unsigned int)>
c00175c4:	83 c4 10             	add    esp,0x10
c00175c7:	a1 90 a4 02 c0       	mov    eax,ds:0xc002a490
c00175cc:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00175d2:	83 ec 08             	sub    esp,0x8
c00175d5:	68 9d 24 02 c0       	push   0xc002249d
c00175da:	50                   	push   eax
c00175db:	e8 c6 14 ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c00175e0:	83 c4 10             	add    esp,0x10
c00175e3:	a1 90 a4 02 c0       	mov    eax,ds:0xc002a490
c00175e8:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00175ee:	83 ec 08             	sub    esp,0x8
c00175f1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00175f5:	50                   	push   eax
c00175f6:	e8 65 14 ff ff       	call   c0008a60 <VgaText::putx(unsigned int)>
c00175fb:	83 c4 10             	add    esp,0x10
c00175fe:	a1 90 a4 02 c0       	mov    eax,ds:0xc002a490
c0017603:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017609:	83 ec 08             	sub    esp,0x8
c001760c:	68 a6 24 02 c0       	push   0xc00224a6
c0017611:	50                   	push   eax
c0017612:	e8 8f 14 ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c0017617:	83 c4 10             	add    esp,0x10
c001761a:	a1 90 a4 02 c0       	mov    eax,ds:0xc002a490
c001761f:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017625:	83 ec 08             	sub    esp,0x8
c0017628:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001762c:	50                   	push   eax
c001762d:	e8 2e 14 ff ff       	call   c0008a60 <VgaText::putx(unsigned int)>
c0017632:	83 c4 10             	add    esp,0x10
c0017635:	a1 90 a4 02 c0       	mov    eax,ds:0xc002a490
c001763a:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017640:	83 ec 08             	sub    esp,0x8
c0017643:	68 ae 24 02 c0       	push   0xc00224ae
c0017648:	50                   	push   eax
c0017649:	e8 58 14 ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c001764e:	83 c4 10             	add    esp,0x10
c0017651:	a1 90 a4 02 c0       	mov    eax,ds:0xc002a490
c0017656:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001765c:	83 ec 08             	sub    esp,0x8
c001765f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0017663:	50                   	push   eax
c0017664:	e8 f7 13 ff ff       	call   c0008a60 <VgaText::putx(unsigned int)>
c0017669:	83 c4 10             	add    esp,0x10
c001766c:	fa                   	cli    
c001766d:	f4                   	hlt    
c001766e:	eb fe                	jmp    c001766e <displayDebugInfo(regs*)+0x383>

c0017670 <HalSystemIdle()>:
c0017670:	56                   	push   esi
c0017671:	53                   	push   ebx
c0017672:	83 ec 14             	sub    esp,0x14
c0017675:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c001767a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0017680:	8a 80 8e 11 00 00    	mov    al,BYTE PTR [eax+0x118e]
c0017686:	83 e0 04             	and    eax,0x4
c0017689:	0f b6 c0             	movzx  eax,al
c001768c:	85 c0                	test   eax,eax
c001768e:	0f 95 c0             	setne  al
c0017691:	0f b6 c0             	movzx  eax,al
c0017694:	85 c0                	test   eax,eax
c0017696:	74 4c                	je     c00176e4 <HalSystemIdle()+0x74>
c0017698:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c001769d:	83 ec 08             	sub    esp,0x8
c00176a0:	68 e1 00 00 00       	push   0xe1
c00176a5:	50                   	push   eax
c00176a6:	e8 17 fa fe ff       	call   c00070c2 <Computer::rdmsr(unsigned int)>
c00176ab:	83 c4 10             	add    esp,0x10
c00176ae:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00176b2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00176b6:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c00176bb:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00176bf:	83 e2 02             	and    edx,0x2
c00176c2:	89 d3                	mov    ebx,edx
c00176c4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00176c8:	83 e2 00             	and    edx,0x0
c00176cb:	89 d6                	mov    esi,edx
c00176cd:	56                   	push   esi
c00176ce:	53                   	push   ebx
c00176cf:	68 e1 00 00 00       	push   0xe1
c00176d4:	50                   	push   eax
c00176d5:	e8 14 fa fe ff       	call   c00070ee <Computer::wrmsr(unsigned int, unsigned long long)>
c00176da:	83 c4 10             	add    esp,0x10
c00176dd:	e8 b2 8a fe ff       	call   c0000194 <doTPAUSE>
c00176e2:	eb 01                	jmp    c00176e5 <HalSystemIdle()+0x75>
c00176e4:	f4                   	hlt    
c00176e5:	90                   	nop
c00176e6:	83 c4 14             	add    esp,0x14
c00176e9:	5b                   	pop    ebx
c00176ea:	5e                   	pop    esi
c00176eb:	c3                   	ret    

c00176ec <displayProgramFault(char const*)>:
c00176ec:	83 ec 0c             	sub    esp,0xc
c00176ef:	83 ec 0c             	sub    esp,0xc
c00176f2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00176f6:	e8 4a 32 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c00176fb:	83 c4 10             	add    esp,0x10
c00176fe:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0017703:	8b 00                	mov    eax,DWORD PTR [eax]
c0017705:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0017708:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001770e:	85 c0                	test   eax,eax
c0017710:	74 21                	je     c0017733 <displayProgramFault(char const*)+0x47>
c0017712:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0017717:	8b 00                	mov    eax,DWORD PTR [eax]
c0017719:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001771c:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017722:	6a 04                	push   0x4
c0017724:	6a 0f                	push   0xf
c0017726:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001772a:	50                   	push   eax
c001772b:	e8 e8 13 ff ff       	call   c0008b18 <VgaText::puts(char const*, VgaColour, VgaColour)>
c0017730:	83 c4 10             	add    esp,0x10
c0017733:	90                   	nop
c0017734:	83 c4 0c             	add    esp,0xc
c0017737:	c3                   	ret    

c0017738 <gpFault(regs*, void*)>:
c0017738:	83 ec 1c             	sub    esp,0x1c
c001773b:	c7 05 14 a5 02 c0 94 6b 01 c0 	mov    DWORD PTR ds:0xc002a514,0xc0016b94
c0017745:	a1 14 a5 02 c0       	mov    eax,ds:0xc002a514
c001774a:	85 c0                	test   eax,eax
c001774c:	74 1e                	je     c001776c <gpFault(regs*, void*)+0x34>
c001774e:	a1 14 a5 02 c0       	mov    eax,ds:0xc002a514
c0017753:	83 ec 0c             	sub    esp,0xc
c0017756:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001775a:	ff d0                	call   eax
c001775c:	83 c4 10             	add    esp,0x10
c001775f:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0017763:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0017768:	85 c0                	test   eax,eax
c001776a:	75 2e                	jne    c001779a <gpFault(regs*, void*)+0x62>
c001776c:	83 ec 0c             	sub    esp,0xc
c001776f:	68 b6 24 02 c0       	push   0xc00224b6
c0017774:	e8 73 ff ff ff       	call   c00176ec <displayProgramFault(char const*)>
c0017779:	83 c4 10             	add    esp,0x10
c001777c:	83 ec 0c             	sub    esp,0xc
c001777f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017783:	e8 63 fb ff ff       	call   c00172eb <displayDebugInfo(regs*)>
c0017788:	83 c4 10             	add    esp,0x10
c001778b:	83 ec 0c             	sub    esp,0xc
c001778e:	6a 00                	push   0x0
c0017790:	e8 a3 ed ff ff       	call   c0016538 <Thr::terminateFromIRQ(int)>
c0017795:	83 c4 10             	add    esp,0x10
c0017798:	eb 01                	jmp    c001779b <gpFault(regs*, void*)+0x63>
c001779a:	90                   	nop
c001779b:	83 c4 1c             	add    esp,0x1c
c001779e:	c3                   	ret    

c001779f <pgFault(regs*, void*)>:
c001779f:	83 ec 1c             	sub    esp,0x1c
c00177a2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00177a6:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c00177a9:	0f 20 d0             	mov    eax,cr2
c00177ac:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00177b0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00177b4:	83 ec 04             	sub    esp,0x4
c00177b7:	52                   	push   edx
c00177b8:	50                   	push   eax
c00177b9:	68 94 25 02 c0       	push   0xc0022594
c00177be:	e8 82 31 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c00177c3:	83 c4 10             	add    esp,0x10
c00177c6:	b8 00 20 00 c2       	mov    eax,0xc2002000
c00177cb:	8b 00                	mov    eax,DWORD PTR [eax]
c00177cd:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00177d0:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c00177d6:	0f 20 d2             	mov    edx,cr2
c00177d9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00177dd:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00177e1:	83 ec 08             	sub    esp,0x8
c00177e4:	52                   	push   edx
c00177e5:	50                   	push   eax
c00177e6:	e8 a5 2b ff ff       	call   c000a390 <VAS::tryLoadBackOffDisk(unsigned long)>
c00177eb:	83 c4 10             	add    esp,0x10
c00177ee:	0f b6 c0             	movzx  eax,al
c00177f1:	85 c0                	test   eax,eax
c00177f3:	75 2e                	jne    c0017823 <pgFault(regs*, void*)+0x84>
c00177f5:	83 ec 0c             	sub    esp,0xc
c00177f8:	68 cf 24 02 c0       	push   0xc00224cf
c00177fd:	e8 ea fe ff ff       	call   c00176ec <displayProgramFault(char const*)>
c0017802:	83 c4 10             	add    esp,0x10
c0017805:	83 ec 0c             	sub    esp,0xc
c0017808:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001780c:	e8 da fa ff ff       	call   c00172eb <displayDebugInfo(regs*)>
c0017811:	83 c4 10             	add    esp,0x10
c0017814:	83 ec 0c             	sub    esp,0xc
c0017817:	6a 00                	push   0x0
c0017819:	e8 1a ed ff ff       	call   c0016538 <Thr::terminateFromIRQ(int)>
c001781e:	83 c4 10             	add    esp,0x10
c0017821:	eb 01                	jmp    c0017824 <pgFault(regs*, void*)+0x85>
c0017823:	90                   	nop
c0017824:	83 c4 1c             	add    esp,0x1c
c0017827:	c3                   	ret    

c0017828 <otherISRHandler(regs*, void*)>:
c0017828:	83 ec 0c             	sub    esp,0xc
c001782b:	83 ec 0c             	sub    esp,0xc
c001782e:	68 bc 25 02 c0       	push   0xc00225bc
c0017833:	e8 b4 fe ff ff       	call   c00176ec <displayProgramFault(char const*)>
c0017838:	83 c4 10             	add    esp,0x10
c001783b:	83 ec 0c             	sub    esp,0xc
c001783e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017842:	e8 a4 fa ff ff       	call   c00172eb <displayDebugInfo(regs*)>
c0017847:	83 c4 10             	add    esp,0x10
c001784a:	83 ec 0c             	sub    esp,0xc
c001784d:	6a 00                	push   0x0
c001784f:	e8 e4 ec ff ff       	call   c0016538 <Thr::terminateFromIRQ(int)>
c0017854:	83 c4 10             	add    esp,0x10
c0017857:	90                   	nop
c0017858:	83 c4 0c             	add    esp,0xc
c001785b:	c3                   	ret    

c001785c <opcodeFault(regs*, void*)>:
c001785c:	55                   	push   ebp
c001785d:	89 e5                	mov    ebp,esp
c001785f:	83 ec 08             	sub    esp,0x8
c0017862:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017865:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0017868:	83 ec 08             	sub    esp,0x8
c001786b:	50                   	push   eax
c001786c:	68 da 24 02 c0       	push   0xc00224da
c0017871:	e8 cf 30 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0017876:	83 c4 10             	add    esp,0x10
c0017879:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c001787e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0017884:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c001788a:	0f b6 c0             	movzx  eax,al
c001788d:	85 c0                	test   eax,eax
c001788f:	74 21                	je     c00178b2 <opcodeFault(regs*, void*)+0x56>
c0017891:	83 ec 0c             	sub    esp,0xc
c0017894:	68 e4 25 02 c0       	push   0xc00225e4
c0017899:	e8 a7 30 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001789e:	83 c4 10             	add    esp,0x10
c00178a1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00178a4:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00178a7:	8d 50 19             	lea    edx,[eax+0x19]
c00178aa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00178ad:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00178b0:	eb 2b                	jmp    c00178dd <opcodeFault(regs*, void*)+0x81>
c00178b2:	83 ec 0c             	sub    esp,0xc
c00178b5:	68 e8 24 02 c0       	push   0xc00224e8
c00178ba:	e8 2d fe ff ff       	call   c00176ec <displayProgramFault(char const*)>
c00178bf:	83 c4 10             	add    esp,0x10
c00178c2:	83 ec 0c             	sub    esp,0xc
c00178c5:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00178c8:	e8 1e fa ff ff       	call   c00172eb <displayDebugInfo(regs*)>
c00178cd:	83 c4 10             	add    esp,0x10
c00178d0:	83 ec 0c             	sub    esp,0xc
c00178d3:	6a 00                	push   0x0
c00178d5:	e8 5e ec ff ff       	call   c0016538 <Thr::terminateFromIRQ(int)>
c00178da:	83 c4 10             	add    esp,0x10
c00178dd:	c9                   	leave  
c00178de:	c3                   	ret    

c00178df <i386SaveCoprocessor(void*)>:
c00178df:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00178e3:	83 c0 3f             	add    eax,0x3f
c00178e6:	83 e0 c0             	and    eax,0xffffffc0
c00178e9:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00178ed:	ff 25 10 a5 02 c0    	jmp    DWORD PTR ds:0xc002a510

c00178f3 <i386LoadCoprocessor(void*)>:
c00178f3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00178f7:	83 c0 3f             	add    eax,0x3f
c00178fa:	83 e0 c0             	and    eax,0xffffffc0
c00178fd:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017901:	ff 25 0c a5 02 c0    	jmp    DWORD PTR ds:0xc002a50c

c0017907 <x87EmulHandler(regs*, void*)>:
c0017907:	53                   	push   ebx
c0017908:	83 ec 08             	sub    esp,0x8
c001790b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017910:	80 78 5e 00          	cmp    BYTE PTR [eax+0x5e],0x0
c0017914:	74 10                	je     c0017926 <x87EmulHandler(regs*, void*)+0x1f>
c0017916:	83 ec 0c             	sub    esp,0xc
c0017919:	68 f5 24 02 c0       	push   0xc00224f5
c001791e:	e8 ca 98 ff ff       	call   c00111ed <KePanic(char const*)>
c0017923:	83 c4 10             	add    esp,0x10
c0017926:	0f 20 c0             	mov    eax,cr0
c0017929:	a8 08                	test   al,0x8
c001792b:	74 59                	je     c0017986 <x87EmulHandler(regs*, void*)+0x7f>
c001792d:	0f 06                	clts   
c001792f:	a1 08 a5 02 c0       	mov    eax,ds:0xc002a508
c0017934:	85 c0                	test   eax,eax
c0017936:	74 0e                	je     c0017946 <x87EmulHandler(regs*, void*)+0x3f>
c0017938:	83 ec 0c             	sub    esp,0xc
c001793b:	ff 70 55             	push   DWORD PTR [eax+0x55]
c001793e:	e8 9c ff ff ff       	call   c00178df <i386SaveCoprocessor(void*)>
c0017943:	83 c4 10             	add    esp,0x10
c0017946:	8b 1d 00 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002000
c001794c:	83 7b 55 00          	cmp    DWORD PTR [ebx+0x55],0x0
c0017950:	75 12                	jne    c0017964 <x87EmulHandler(regs*, void*)+0x5d>
c0017952:	83 ec 0c             	sub    esp,0xc
c0017955:	68 40 02 00 00       	push   0x240
c001795a:	e8 57 01 ff ff       	call   c0007ab6 <malloc>
c001795f:	89 43 55             	mov    DWORD PTR [ebx+0x55],eax
c0017962:	eb 10                	jmp    c0017974 <x87EmulHandler(regs*, void*)+0x6d>
c0017964:	83 ec 0c             	sub    esp,0xc
c0017967:	a1 08 a5 02 c0       	mov    eax,ds:0xc002a508
c001796c:	ff 70 55             	push   DWORD PTR [eax+0x55]
c001796f:	e8 7f ff ff ff       	call   c00178f3 <i386LoadCoprocessor(void*)>
c0017974:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017979:	83 c4 10             	add    esp,0x10
c001797c:	a3 08 a5 02 c0       	mov    ds:0xc002a508,eax
c0017981:	83 c4 08             	add    esp,0x8
c0017984:	5b                   	pop    ebx
c0017985:	c3                   	ret    
c0017986:	83 ec 0c             	sub    esp,0xc
c0017989:	68 09 25 02 c0       	push   0xc0022509
c001798e:	e8 b2 2f ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0017993:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001799b:	83 c4 18             	add    esp,0x18
c001799e:	5b                   	pop    ebx
c001799f:	e9 94 eb ff ff       	jmp    c0016538 <Thr::terminateFromIRQ(int)>

c00179a4 <HalInitialiseCoprocessor()>:
c00179a4:	83 ec 10             	sub    esp,0x10
c00179a7:	c7 05 08 a5 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002a508,0x0
c00179b1:	6a 00                	push   0x0
c00179b3:	68 07 79 01 c0       	push   0xc0017907
c00179b8:	6a 07                	push   0x7
c00179ba:	e8 57 51 ff ff       	call   c000cb16 <installISRHandler(int, void (*)(regs*, void*), void*)>
c00179bf:	e8 4c 70 00 00       	call   c001ea10 <avxDetect>
c00179c4:	83 c4 10             	add    esp,0x10
c00179c7:	85 c0                	test   eax,eax
c00179c9:	74 1c                	je     c00179e7 <HalInitialiseCoprocessor()+0x43>
c00179cb:	c7 05 10 a5 02 c0 3a ea 01 c0 	mov    DWORD PTR ds:0xc002a510,0xc001ea3a
c00179d5:	c7 05 0c a5 02 c0 4b ea 01 c0 	mov    DWORD PTR ds:0xc002a50c,0xc001ea4b
c00179df:	83 c4 0c             	add    esp,0xc
c00179e2:	e9 75 70 00 00       	jmp    c001ea5c <avxInit>
c00179e7:	e8 b4 73 00 00       	call   c001eda0 <absolutelyNoChanceInHell>
c00179ec:	85 c0                	test   eax,eax
c00179ee:	74 1c                	je     c0017a0c <HalInitialiseCoprocessor()+0x68>
c00179f0:	c7 05 10 a5 02 c0 b8 ed 01 c0 	mov    DWORD PTR ds:0xc002a510,0xc001edb8
c00179fa:	c7 05 0c a5 02 c0 c0 ed 01 c0 	mov    DWORD PTR ds:0xc002a50c,0xc001edc0
c0017a04:	83 c4 0c             	add    esp,0xc
c0017a07:	e9 bc 73 00 00       	jmp    c001edc8 <sseInit>
c0017a0c:	e8 d5 73 00 00       	call   c001ede6 <x87Detect>
c0017a11:	85 c0                	test   eax,eax
c0017a13:	74 1c                	je     c0017a31 <HalInitialiseCoprocessor()+0x8d>
c0017a15:	c7 05 10 a5 02 c0 01 ee 01 c0 	mov    DWORD PTR ds:0xc002a510,0xc001ee01
c0017a1f:	c7 05 0c a5 02 c0 08 ee 01 c0 	mov    DWORD PTR ds:0xc002a50c,0xc001ee08
c0017a29:	83 c4 0c             	add    esp,0xc
c0017a2c:	e9 de 73 00 00       	jmp    c001ee0f <x87Init>
c0017a31:	c7 05 10 a5 02 c0 b8 72 01 c0 	mov    DWORD PTR ds:0xc002a510,0xc00172b8
c0017a3b:	c7 05 0c a5 02 c0 b8 72 01 c0 	mov    DWORD PTR ds:0xc002a50c,0xc00172b8
c0017a45:	0f 20 c0             	mov    eax,cr0
c0017a48:	83 c8 04             	or     eax,0x4
c0017a4b:	0f 22 c0             	mov    cr0,eax
c0017a4e:	83 c4 0c             	add    esp,0xc
c0017a51:	c3                   	ret    

c0017a52 <HalPanic(char const*)>:
c0017a52:	53                   	push   ebx
c0017a53:	83 ec 10             	sub    esp,0x10
c0017a56:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0017a5a:	fa                   	cli    
c0017a5b:	53                   	push   ebx
c0017a5c:	68 1f 25 02 c0       	push   0xc002251f
c0017a61:	e8 df 2e ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0017a66:	a1 04 a5 02 c0       	mov    eax,ds:0xc002a504
c0017a6b:	83 c4 10             	add    esp,0x10
c0017a6e:	85 c0                	test   eax,eax
c0017a70:	74 09                	je     c0017a7b <HalPanic(char const*)+0x29>
c0017a72:	83 ec 0c             	sub    esp,0xc
c0017a75:	53                   	push   ebx
c0017a76:	ff d0                	call   eax
c0017a78:	83 c4 10             	add    esp,0x10
c0017a7b:	a1 04 5f 02 c0       	mov    eax,ds:0xc0025f04
c0017a80:	85 c0                	test   eax,eax
c0017a82:	0f 84 dc 00 00 00    	je     c0017b64 <HalPanic(char const*)+0x112>
c0017a88:	52                   	push   edx
c0017a89:	6a 01                	push   0x1
c0017a8b:	6a 0f                	push   0xf
c0017a8d:	50                   	push   eax
c0017a8e:	e8 21 0b ff ff       	call   c00085b4 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0017a93:	59                   	pop    ecx
c0017a94:	ff 35 04 5f 02 c0    	push   DWORD PTR ds:0xc0025f04
c0017a9a:	e8 05 0d ff ff       	call   c00087a4 <VgaText::clearScreen()>
c0017a9f:	58                   	pop    eax
c0017aa0:	5a                   	pop    edx
c0017aa1:	68 64 08 02 c0       	push   0xc0020864
c0017aa6:	ff 35 04 5f 02 c0    	push   DWORD PTR ds:0xc0025f04
c0017aac:	e8 3b 0b ff ff       	call   c00085ec <VgaText::setTitle(char*)>
c0017ab1:	83 c4 0c             	add    esp,0xc
c0017ab4:	6a 01                	push   0x1
c0017ab6:	6a 0f                	push   0xf
c0017ab8:	ff 35 04 5f 02 c0    	push   DWORD PTR ds:0xc0025f04
c0017abe:	e8 f1 0a ff ff       	call   c00085b4 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0017ac3:	59                   	pop    ecx
c0017ac4:	58                   	pop    eax
c0017ac5:	68 38 25 02 c0       	push   0xc0022538
c0017aca:	ff 35 04 5f 02 c0    	push   DWORD PTR ds:0xc0025f04
c0017ad0:	e8 d1 0f ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c0017ad5:	83 c4 0c             	add    esp,0xc
c0017ad8:	6a 0f                	push   0xf
c0017ada:	6a 01                	push   0x1
c0017adc:	ff 35 04 5f 02 c0    	push   DWORD PTR ds:0xc0025f04
c0017ae2:	e8 cd 0a ff ff       	call   c00085b4 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0017ae7:	58                   	pop    eax
c0017ae8:	5a                   	pop    edx
c0017ae9:	68 41 25 02 c0       	push   0xc0022541
c0017aee:	ff 35 04 5f 02 c0    	push   DWORD PTR ds:0xc0025f04
c0017af4:	e8 ad 0f ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c0017af9:	83 c4 0c             	add    esp,0xc
c0017afc:	6a 01                	push   0x1
c0017afe:	6a 0f                	push   0xf
c0017b00:	ff 35 04 5f 02 c0    	push   DWORD PTR ds:0xc0025f04
c0017b06:	e8 a9 0a ff ff       	call   c00085b4 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0017b0b:	59                   	pop    ecx
c0017b0c:	58                   	pop    eax
c0017b0d:	68 85 25 02 c0       	push   0xc0022585
c0017b12:	ff 35 04 5f 02 c0    	push   DWORD PTR ds:0xc0025f04
c0017b18:	e8 89 0f ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c0017b1d:	58                   	pop    eax
c0017b1e:	5a                   	pop    edx
c0017b1f:	68 4e 25 02 c0       	push   0xc002254e
c0017b24:	ff 35 04 5f 02 c0    	push   DWORD PTR ds:0xc0025f04
c0017b2a:	e8 77 0f ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c0017b2f:	59                   	pop    ecx
c0017b30:	58                   	pop    eax
c0017b31:	68 88 25 02 c0       	push   0xc0022588
c0017b36:	ff 35 04 5f 02 c0    	push   DWORD PTR ds:0xc0025f04
c0017b3c:	e8 65 0f ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c0017b41:	58                   	pop    eax
c0017b42:	5a                   	pop    edx
c0017b43:	53                   	push   ebx
c0017b44:	ff 35 04 5f 02 c0    	push   DWORD PTR ds:0xc0025f04
c0017b4a:	e8 57 0f ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c0017b4f:	59                   	pop    ecx
c0017b50:	5b                   	pop    ebx
c0017b51:	68 85 25 02 c0       	push   0xc0022585
c0017b56:	ff 35 04 5f 02 c0    	push   DWORD PTR ds:0xc0025f04
c0017b5c:	e8 45 0f ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c0017b61:	83 c4 10             	add    esp,0x10
c0017b64:	eb fe                	jmp    c0017b64 <HalPanic(char const*)+0x112>

c0017b66 <HalQueryPerformanceCounter()>:
c0017b66:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0017b6b:	31 d2                	xor    edx,edx
c0017b6d:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c0017b73:	31 c0                	xor    eax,eax
c0017b75:	f6 81 8c 11 00 00 02 	test   BYTE PTR [ecx+0x118c],0x2
c0017b7c:	74 02                	je     c0017b80 <HalQueryPerformanceCounter()+0x1a>
c0017b7e:	0f 31                	rdtsc  
c0017b80:	c3                   	ret    

c0017b81 <HalInitialise()>:
c0017b81:	53                   	push   ebx
c0017b82:	83 ec 08             	sub    esp,0x8
c0017b85:	e8 bc 51 ff ff       	call   c000cd46 <setupINTS()>
c0017b8a:	80 3d 40 98 02 c0 00 	cmp    BYTE PTR ds:0xc0029840,0x0
c0017b91:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0017b96:	75 0f                	jne    c0017ba7 <HalInitialise()+0x26>
c0017b98:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c0017b9e:	83 e2 fe             	and    edx,0xfffffffe
c0017ba1:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c0017ba7:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c0017bad:	c6 05 00 a5 02 c0 00 	mov    BYTE PTR ds:0xc002a500,0x0
c0017bb4:	83 e2 fe             	and    edx,0xfffffffe
c0017bb7:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c0017bbd:	e8 9e 02 00 00       	call   c0017e60 <picOpen()>
c0017bc2:	80 3d 00 a5 02 c0 00 	cmp    BYTE PTR ds:0xc002a500,0x0
c0017bc9:	74 0a                	je     c0017bd5 <HalInitialise()+0x54>
c0017bcb:	e8 e0 01 00 00       	call   c0017db0 <picDisable()>
c0017bd0:	e8 ad 67 00 00       	call   c001e382 <apicOpen()>
c0017bd5:	bb 0f 00 00 00       	mov    ebx,0xf
c0017bda:	50                   	push   eax
c0017bdb:	6a 00                	push   0x0
c0017bdd:	68 28 78 01 c0       	push   0xc0017828
c0017be2:	6a 00                	push   0x0
c0017be4:	e8 2d 4f ff ff       	call   c000cb16 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017be9:	83 c4 0c             	add    esp,0xc
c0017bec:	6a 00                	push   0x0
c0017bee:	68 28 78 01 c0       	push   0xc0017828
c0017bf3:	6a 01                	push   0x1
c0017bf5:	e8 1c 4f ff ff       	call   c000cb16 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017bfa:	83 c4 0c             	add    esp,0xc
c0017bfd:	6a 00                	push   0x0
c0017bff:	68 b9 72 01 c0       	push   0xc00172b9
c0017c04:	6a 02                	push   0x2
c0017c06:	e8 0b 4f ff ff       	call   c000cb16 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017c0b:	83 c4 0c             	add    esp,0xc
c0017c0e:	6a 00                	push   0x0
c0017c10:	68 28 78 01 c0       	push   0xc0017828
c0017c15:	6a 03                	push   0x3
c0017c17:	e8 fa 4e ff ff       	call   c000cb16 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017c1c:	83 c4 0c             	add    esp,0xc
c0017c1f:	6a 00                	push   0x0
c0017c21:	68 28 78 01 c0       	push   0xc0017828
c0017c26:	6a 04                	push   0x4
c0017c28:	e8 e9 4e ff ff       	call   c000cb16 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017c2d:	83 c4 0c             	add    esp,0xc
c0017c30:	6a 00                	push   0x0
c0017c32:	68 28 78 01 c0       	push   0xc0017828
c0017c37:	6a 05                	push   0x5
c0017c39:	e8 d8 4e ff ff       	call   c000cb16 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017c3e:	83 c4 0c             	add    esp,0xc
c0017c41:	6a 00                	push   0x0
c0017c43:	68 5c 78 01 c0       	push   0xc001785c
c0017c48:	6a 06                	push   0x6
c0017c4a:	e8 c7 4e ff ff       	call   c000cb16 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017c4f:	83 c4 0c             	add    esp,0xc
c0017c52:	6a 00                	push   0x0
c0017c54:	68 d2 72 01 c0       	push   0xc00172d2
c0017c59:	6a 08                	push   0x8
c0017c5b:	e8 b6 4e ff ff       	call   c000cb16 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017c60:	83 c4 0c             	add    esp,0xc
c0017c63:	6a 00                	push   0x0
c0017c65:	68 28 78 01 c0       	push   0xc0017828
c0017c6a:	6a 09                	push   0x9
c0017c6c:	e8 a5 4e ff ff       	call   c000cb16 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017c71:	83 c4 0c             	add    esp,0xc
c0017c74:	6a 00                	push   0x0
c0017c76:	68 28 78 01 c0       	push   0xc0017828
c0017c7b:	6a 0a                	push   0xa
c0017c7d:	e8 94 4e ff ff       	call   c000cb16 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017c82:	83 c4 0c             	add    esp,0xc
c0017c85:	6a 00                	push   0x0
c0017c87:	68 28 78 01 c0       	push   0xc0017828
c0017c8c:	6a 0b                	push   0xb
c0017c8e:	e8 83 4e ff ff       	call   c000cb16 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017c93:	83 c4 0c             	add    esp,0xc
c0017c96:	6a 00                	push   0x0
c0017c98:	68 38 77 01 c0       	push   0xc0017738
c0017c9d:	6a 0d                	push   0xd
c0017c9f:	e8 72 4e ff ff       	call   c000cb16 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017ca4:	83 c4 0c             	add    esp,0xc
c0017ca7:	6a 00                	push   0x0
c0017ca9:	68 9f 77 01 c0       	push   0xc001779f
c0017cae:	6a 0e                	push   0xe
c0017cb0:	e8 61 4e ff ff       	call   c000cb16 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017cb5:	83 c4 10             	add    esp,0x10
c0017cb8:	50                   	push   eax
c0017cb9:	6a 00                	push   0x0
c0017cbb:	68 28 78 01 c0       	push   0xc0017828
c0017cc0:	53                   	push   ebx
c0017cc1:	43                   	inc    ebx
c0017cc2:	e8 4f 4e ff ff       	call   c000cb16 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017cc7:	83 c4 10             	add    esp,0x10
c0017cca:	83 fb 1e             	cmp    ebx,0x1e
c0017ccd:	75 e9                	jne    c0017cb8 <HalInitialise()+0x137>
c0017ccf:	50                   	push   eax
c0017cd0:	6a 00                	push   0x0
c0017cd2:	68 d5 24 01 c0       	push   0xc00124d5
c0017cd7:	6a 60                	push   0x60
c0017cd9:	e8 38 4e ff ff       	call   c000cb16 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017cde:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0017ce3:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c0017ced:	c7 04 24 60 01 00 00 	mov    DWORD PTR [esp],0x160
c0017cf4:	e8 bd fd fe ff       	call   c0007ab6 <malloc>
c0017cf9:	89 04 24             	mov    DWORD PTR [esp],eax
c0017cfc:	89 c3                	mov    ebx,eax
c0017cfe:	e8 3b 09 00 00       	call   c001863e <RTC::RTC()>
c0017d03:	c7 83 14 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x114],0x1
c0017d0d:	5a                   	pop    edx
c0017d0e:	59                   	pop    ecx
c0017d0f:	53                   	push   ebx
c0017d10:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0017d16:	e8 c7 48 ff ff       	call   c000c5e2 <Device::addChild(Device*)>
c0017d1b:	8b 03                	mov    eax,DWORD PTR [ebx]
c0017d1d:	6a 00                	push   0x0
c0017d1f:	6a 00                	push   0x0
c0017d21:	6a 00                	push   0x0
c0017d23:	53                   	push   ebx
c0017d24:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0017d27:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0017d2c:	89 98 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],ebx
c0017d32:	83 c4 28             	add    esp,0x28
c0017d35:	5b                   	pop    ebx
c0017d36:	c3                   	ret    

c0017d37 <HalMakeBeep(int)>:
c0017d37:	53                   	push   ebx
c0017d38:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0017d3c:	85 db                	test   ebx,ebx
c0017d3e:	75 07                	jne    c0017d47 <HalMakeBeep(int)+0x10>
c0017d40:	e4 61                	in     al,0x61
c0017d42:	83 e0 fc             	and    eax,0xfffffffc
c0017d45:	eb 26                	jmp    c0017d6d <HalMakeBeep(int)+0x36>
c0017d47:	b8 dc 34 12 00       	mov    eax,0x1234dc
c0017d4c:	99                   	cdq    
c0017d4d:	f7 fb                	idiv   ebx
c0017d4f:	89 c1                	mov    ecx,eax
c0017d51:	b0 b6                	mov    al,0xb6
c0017d53:	e6 43                	out    0x43,al
c0017d55:	88 c8                	mov    al,cl
c0017d57:	e6 42                	out    0x42,al
c0017d59:	89 c8                	mov    eax,ecx
c0017d5b:	c1 e8 08             	shr    eax,0x8
c0017d5e:	e6 42                	out    0x42,al
c0017d60:	e4 61                	in     al,0x61
c0017d62:	89 c2                	mov    edx,eax
c0017d64:	83 ca 03             	or     edx,0x3
c0017d67:	38 d0                	cmp    al,dl
c0017d69:	74 04                	je     c0017d6f <HalMakeBeep(int)+0x38>
c0017d6b:	88 d0                	mov    al,dl
c0017d6d:	e6 61                	out    0x61,al
c0017d6f:	5b                   	pop    ebx
c0017d70:	c3                   	ret    

c0017d71 <HalGetRand()>:
c0017d71:	31 c0                	xor    eax,eax
c0017d73:	c3                   	ret    

c0017d74 <HalEndOfInterrupt(int)>:
c0017d74:	80 3d 00 a5 02 c0 00 	cmp    BYTE PTR ds:0xc002a500,0x0
c0017d7b:	74 23                	je     c0017da0 <HalEndOfInterrupt(int)+0x2c>
c0017d7d:	83 ec 14             	sub    esp,0x14
c0017d80:	6a 1b                	push   0x1b
c0017d82:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0017d88:	e8 35 f3 fe ff       	call   c00070c2 <Computer::rdmsr(unsigned int)>
c0017d8d:	25 00 f0 ff ff       	and    eax,0xfffff000
c0017d92:	c7 80 b0 00 00 00 01 00 00 00 	mov    DWORD PTR [eax+0xb0],0x1
c0017d9c:	83 c4 1c             	add    esp,0x1c
c0017d9f:	c3                   	ret    
c0017da0:	e9 3f 02 00 00       	jmp    c0017fe4 <picEOI(int)>

c0017da5 <HalRestart()>:
c0017da5:	c3                   	ret    

c0017da6 <HalShutdown()>:
c0017da6:	c3                   	ret    

c0017da7 <HalSleep()>:
c0017da7:	c3                   	ret    

c0017da8 <picIoWait()>:
c0017da8:	eb 00                	jmp    c0017daa <picIoWait()+0x2>
c0017daa:	eb 00                	jmp    c0017dac <picIoWait()+0x4>
c0017dac:	90                   	nop
c0017dad:	c3                   	ret    
c0017dae:	66 90                	xchg   ax,ax

c0017db0 <picDisable()>:
c0017db0:	83 ec 10             	sub    esp,0x10
c0017db3:	66 c7 44 24 0a a1 00 	mov    WORD PTR [esp+0xa],0xa1
c0017dba:	c6 44 24 09 ff       	mov    BYTE PTR [esp+0x9],0xff
c0017dbf:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0017dc3:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0017dc8:	ee                   	out    dx,al
c0017dc9:	66 c7 44 24 0e 21 00 	mov    WORD PTR [esp+0xe],0x21
c0017dd0:	c6 44 24 0d ff       	mov    BYTE PTR [esp+0xd],0xff
c0017dd5:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c0017dd9:	66 8b 54 24 0e       	mov    dx,WORD PTR [esp+0xe]
c0017dde:	ee                   	out    dx,al
c0017ddf:	90                   	nop
c0017de0:	83 c4 10             	add    esp,0x10
c0017de3:	c3                   	ret    

c0017de4 <picGetIRQReg(int)>:
c0017de4:	83 ec 10             	sub    esp,0x10
c0017de7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017deb:	0f b6 c0             	movzx  eax,al
c0017dee:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c0017df5:	88 44 24 01          	mov    BYTE PTR [esp+0x1],al
c0017df9:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c0017dfd:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c0017e02:	ee                   	out    dx,al
c0017e03:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017e07:	0f b6 c0             	movzx  eax,al
c0017e0a:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c0017e11:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c0017e15:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c0017e19:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c0017e1e:	ee                   	out    dx,al
c0017e1f:	66 c7 44 24 0a a0 00 	mov    WORD PTR [esp+0xa],0xa0
c0017e26:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0017e2b:	89 c2                	mov    edx,eax
c0017e2d:	ec                   	in     al,dx
c0017e2e:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0017e32:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0017e36:	0f b6 c0             	movzx  eax,al
c0017e39:	c1 e0 08             	shl    eax,0x8
c0017e3c:	89 c1                	mov    ecx,eax
c0017e3e:	66 c7 44 24 0e 20 00 	mov    WORD PTR [esp+0xe],0x20
c0017e45:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c0017e4a:	89 c2                	mov    edx,eax
c0017e4c:	ec                   	in     al,dx
c0017e4d:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0017e51:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c0017e55:	0f b6 c0             	movzx  eax,al
c0017e58:	09 c8                	or     eax,ecx
c0017e5a:	83 c4 10             	add    esp,0x10
c0017e5d:	c3                   	ret    
c0017e5e:	66 90                	xchg   ax,ax

c0017e60 <picOpen()>:
c0017e60:	83 ec 50             	sub    esp,0x50
c0017e63:	66 c7 44 24 10 21 00 	mov    WORD PTR [esp+0x10],0x21
c0017e6a:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0017e6f:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0017e73:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0017e77:	ee                   	out    dx,al
c0017e78:	66 c7 44 24 14 a1 00 	mov    WORD PTR [esp+0x14],0xa1
c0017e7f:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c0017e84:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c0017e88:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0017e8c:	ee                   	out    dx,al
c0017e8d:	c7 44 24 4c 20 00 00 00 	mov    DWORD PTR [esp+0x4c],0x20
c0017e95:	c7 44 24 48 28 00 00 00 	mov    DWORD PTR [esp+0x48],0x28
c0017e9d:	66 c7 44 24 18 21 00 	mov    WORD PTR [esp+0x18],0x21
c0017ea4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017ea8:	89 c2                	mov    edx,eax
c0017eaa:	ec                   	in     al,dx
c0017eab:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c0017eaf:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c0017eb3:	88 44 24 47          	mov    BYTE PTR [esp+0x47],al
c0017eb7:	66 c7 44 24 1c a1 00 	mov    WORD PTR [esp+0x1c],0xa1
c0017ebe:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017ec2:	89 c2                	mov    edx,eax
c0017ec4:	ec                   	in     al,dx
c0017ec5:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c0017ec9:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c0017ecd:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c0017ed1:	66 c7 44 24 20 20 00 	mov    WORD PTR [esp+0x20],0x20
c0017ed8:	c6 44 24 1f 11       	mov    BYTE PTR [esp+0x1f],0x11
c0017edd:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0017ee1:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017ee5:	ee                   	out    dx,al
c0017ee6:	e8 bd fe ff ff       	call   c0017da8 <picIoWait()>
c0017eeb:	66 c7 44 24 24 a0 00 	mov    WORD PTR [esp+0x24],0xa0
c0017ef2:	c6 44 24 23 11       	mov    BYTE PTR [esp+0x23],0x11
c0017ef7:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c0017efb:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0017eff:	ee                   	out    dx,al
c0017f00:	e8 a3 fe ff ff       	call   c0017da8 <picIoWait()>
c0017f05:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0017f09:	0f b6 c0             	movzx  eax,al
c0017f0c:	66 c7 44 24 28 21 00 	mov    WORD PTR [esp+0x28],0x21
c0017f13:	88 44 24 27          	mov    BYTE PTR [esp+0x27],al
c0017f17:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c0017f1b:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017f1f:	ee                   	out    dx,al
c0017f20:	e8 83 fe ff ff       	call   c0017da8 <picIoWait()>
c0017f25:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0017f29:	0f b6 c0             	movzx  eax,al
c0017f2c:	66 c7 44 24 2c a1 00 	mov    WORD PTR [esp+0x2c],0xa1
c0017f33:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c0017f37:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c0017f3b:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0017f3f:	ee                   	out    dx,al
c0017f40:	e8 63 fe ff ff       	call   c0017da8 <picIoWait()>
c0017f45:	66 c7 44 24 30 21 00 	mov    WORD PTR [esp+0x30],0x21
c0017f4c:	c6 44 24 2f 04       	mov    BYTE PTR [esp+0x2f],0x4
c0017f51:	8a 44 24 2f          	mov    al,BYTE PTR [esp+0x2f]
c0017f55:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0017f59:	ee                   	out    dx,al
c0017f5a:	e8 49 fe ff ff       	call   c0017da8 <picIoWait()>
c0017f5f:	66 c7 44 24 34 a1 00 	mov    WORD PTR [esp+0x34],0xa1
c0017f66:	c6 44 24 33 02       	mov    BYTE PTR [esp+0x33],0x2
c0017f6b:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c0017f6f:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0017f73:	ee                   	out    dx,al
c0017f74:	e8 2f fe ff ff       	call   c0017da8 <picIoWait()>
c0017f79:	66 c7 44 24 38 21 00 	mov    WORD PTR [esp+0x38],0x21
c0017f80:	c6 44 24 37 01       	mov    BYTE PTR [esp+0x37],0x1
c0017f85:	8a 44 24 37          	mov    al,BYTE PTR [esp+0x37]
c0017f89:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0017f8d:	ee                   	out    dx,al
c0017f8e:	e8 15 fe ff ff       	call   c0017da8 <picIoWait()>
c0017f93:	66 c7 44 24 3c a1 00 	mov    WORD PTR [esp+0x3c],0xa1
c0017f9a:	c6 44 24 3b 01       	mov    BYTE PTR [esp+0x3b],0x1
c0017f9f:	8a 44 24 3b          	mov    al,BYTE PTR [esp+0x3b]
c0017fa3:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0017fa7:	ee                   	out    dx,al
c0017fa8:	e8 fb fd ff ff       	call   c0017da8 <picIoWait()>
c0017fad:	0f b6 44 24 47       	movzx  eax,BYTE PTR [esp+0x47]
c0017fb2:	66 c7 44 24 40 21 00 	mov    WORD PTR [esp+0x40],0x21
c0017fb9:	88 44 24 3f          	mov    BYTE PTR [esp+0x3f],al
c0017fbd:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c0017fc1:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0017fc5:	ee                   	out    dx,al
c0017fc6:	0f b6 44 24 46       	movzx  eax,BYTE PTR [esp+0x46]
c0017fcb:	66 c7 44 24 44 a1 00 	mov    WORD PTR [esp+0x44],0xa1
c0017fd2:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c0017fd6:	8a 44 24 43          	mov    al,BYTE PTR [esp+0x43]
c0017fda:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0017fde:	ee                   	out    dx,al
c0017fdf:	90                   	nop
c0017fe0:	83 c4 50             	add    esp,0x50
c0017fe3:	c3                   	ret    

c0017fe4 <picEOI(int)>:
c0017fe4:	83 ec 10             	sub    esp,0x10
c0017fe7:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c0017fec:	75 1e                	jne    c001800c <picEOI(int)+0x28>
c0017fee:	6a 0b                	push   0xb
c0017ff0:	e8 ef fd ff ff       	call   c0017de4 <picGetIRQReg(int)>
c0017ff5:	83 c4 04             	add    esp,0x4
c0017ff8:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c0017ffd:	0f b7 44 24 0e       	movzx  eax,WORD PTR [esp+0xe]
c0018002:	25 80 00 00 00       	and    eax,0x80
c0018007:	74 73                	je     c001807c <picEOI(int)+0x98>
c0018009:	8d 76 00             	lea    esi,[esi+0x0]
c001800c:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c0018011:	75 31                	jne    c0018044 <picEOI(int)+0x60>
c0018013:	6a 0b                	push   0xb
c0018015:	e8 ca fd ff ff       	call   c0017de4 <picGetIRQReg(int)>
c001801a:	83 c4 04             	add    esp,0x4
c001801d:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0018022:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018026:	98                   	cwde   
c0018027:	85 c0                	test   eax,eax
c0018029:	78 19                	js     c0018044 <picEOI(int)+0x60>
c001802b:	66 c7 44 24 0a 20 00 	mov    WORD PTR [esp+0xa],0x20
c0018032:	c6 44 24 09 20       	mov    BYTE PTR [esp+0x9],0x20
c0018037:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001803b:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0018040:	ee                   	out    dx,al
c0018041:	eb 3d                	jmp    c0018080 <picEOI(int)+0x9c>
c0018043:	90                   	nop
c0018044:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c0018049:	7e 19                	jle    c0018064 <picEOI(int)+0x80>
c001804b:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c0018052:	c6 44 24 05 20       	mov    BYTE PTR [esp+0x5],0x20
c0018057:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c001805b:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c0018060:	ee                   	out    dx,al
c0018061:	8d 76 00             	lea    esi,[esi+0x0]
c0018064:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c001806b:	c6 44 24 01 20       	mov    BYTE PTR [esp+0x1],0x20
c0018070:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c0018074:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c0018079:	ee                   	out    dx,al
c001807a:	eb 04                	jmp    c0018080 <picEOI(int)+0x9c>
c001807c:	90                   	nop
c001807d:	8d 76 00             	lea    esi,[esi+0x0]
c0018080:	83 c4 10             	add    esp,0x10
c0018083:	c3                   	ret    

c0018084 <RTC::open(int, int, void*)>:
c0018084:	31 c0                	xor    eax,eax
c0018086:	c3                   	ret    
c0018087:	90                   	nop

c0018088 <RTC::close(int, int, void*)>:
c0018088:	31 c0                	xor    eax,eax
c001808a:	c3                   	ret    
c001808b:	90                   	nop

c001808c <RTC::timeInSecondsUTC()>:
c001808c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018090:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0018096:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001809c:	c3                   	ret    
c001809d:	90                   	nop

c001809e <RTC::timeInDatetimeUTC()>:
c001809e:	53                   	push   ebx
c001809f:	83 ec 14             	sub    esp,0x14
c00180a2:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00180a6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00180aa:	8b 10                	mov    edx,DWORD PTR [eax]
c00180ac:	50                   	push   eax
c00180ad:	ff 52 24             	call   DWORD PTR [edx+0x24]
c00180b0:	83 c4 0c             	add    esp,0xc
c00180b3:	52                   	push   edx
c00180b4:	50                   	push   eax
c00180b5:	53                   	push   ebx
c00180b6:	e8 9b 42 ff ff       	call   c000c356 <secondsToDatetime(unsigned long long)>
c00180bb:	89 d8                	mov    eax,ebx
c00180bd:	83 c4 14             	add    esp,0x14
c00180c0:	5b                   	pop    ebx
c00180c1:	c2 04 00             	ret    0x4

c00180c4 <RTC::setTimeInSecondsUTC(unsigned long long)>:
c00180c4:	56                   	push   esi
c00180c5:	53                   	push   ebx
c00180c6:	83 ec 14             	sub    esp,0x14
c00180c9:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00180cd:	8b 03                	mov    eax,DWORD PTR [ebx]
c00180cf:	8b 70 30             	mov    esi,DWORD PTR [eax+0x30]
c00180d2:	8d 44 24 08          	lea    eax,[esp+0x8]
c00180d6:	52                   	push   edx
c00180d7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00180db:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00180df:	50                   	push   eax
c00180e0:	e8 71 42 ff ff       	call   c000c356 <secondsToDatetime(unsigned long long)>
c00180e5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00180e9:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00180ed:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00180f1:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c00180f5:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00180f9:	89 f0                	mov    eax,esi
c00180fb:	83 c4 20             	add    esp,0x20
c00180fe:	5b                   	pop    ebx
c00180ff:	5e                   	pop    esi
c0018100:	ff e0                	jmp    eax

c0018102 <RTC::~RTC()>:
c0018102:	83 ec 0c             	sub    esp,0xc
c0018105:	ba 24 26 02 c0       	mov    edx,0xc0022624
c001810a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001810e:	89 10                	mov    DWORD PTR [eax],edx
c0018110:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018114:	83 ec 0c             	sub    esp,0xc
c0018117:	50                   	push   eax
c0018118:	e8 cb 3f ff ff       	call   c000c0e8 <Clock::~Clock()>
c001811d:	83 c4 10             	add    esp,0x10
c0018120:	90                   	nop
c0018121:	83 c4 0c             	add    esp,0xc
c0018124:	c3                   	ret    
c0018125:	90                   	nop

c0018126 <RTC::~RTC()>:
c0018126:	83 ec 0c             	sub    esp,0xc
c0018129:	83 ec 0c             	sub    esp,0xc
c001812c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018130:	e8 cd ff ff ff       	call   c0018102 <RTC::~RTC()>
c0018135:	83 c4 10             	add    esp,0x10
c0018138:	83 ec 08             	sub    esp,0x8
c001813b:	68 60 01 00 00       	push   0x160
c0018140:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018144:	e8 cf 26 ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c0018149:	83 c4 10             	add    esp,0x10
c001814c:	83 c4 0c             	add    esp,0xc
c001814f:	c3                   	ret    

c0018150 <RTC::get_update_in_progress_flag()>:
c0018150:	83 ec 14             	sub    esp,0x14
c0018153:	6a 0a                	push   0xa
c0018155:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c001815b:	e8 1a f0 fe ff       	call   c000717a <Computer::readCMOS(unsigned char)>
c0018160:	83 c4 1c             	add    esp,0x1c
c0018163:	0f b6 c0             	movzx  eax,al
c0018166:	c1 e8 07             	shr    eax,0x7
c0018169:	c3                   	ret    

c001816a <RTC::completeRTCRefresh()>:
c001816a:	55                   	push   ebp
c001816b:	57                   	push   edi
c001816c:	56                   	push   esi
c001816d:	53                   	push   ebx
c001816e:	83 ec 3c             	sub    esp,0x3c
c0018171:	8b 1d 4c 95 02 c0    	mov    ebx,DWORD PTR ds:0xc002954c
c0018177:	83 ec 0c             	sub    esp,0xc
c001817a:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001817e:	e8 cd ff ff ff       	call   c0018150 <RTC::get_update_in_progress_flag()>
c0018183:	83 c4 10             	add    esp,0x10
c0018186:	84 c0                	test   al,al
c0018188:	74 0e                	je     c0018198 <RTC::completeRTCRefresh()+0x2e>
c001818a:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c0018190:	3b 05 4c 95 02 c0    	cmp    eax,DWORD PTR ds:0xc002954c
c0018196:	73 df                	jae    c0018177 <RTC::completeRTCRefresh()+0xd>
c0018198:	51                   	push   ecx
c0018199:	51                   	push   ecx
c001819a:	6a 00                	push   0x0
c001819c:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c00181a2:	e8 d3 ef fe ff       	call   c000717a <Computer::readCMOS(unsigned char)>
c00181a7:	5b                   	pop    ebx
c00181a8:	89 c7                	mov    edi,eax
c00181aa:	5e                   	pop    esi
c00181ab:	6a 02                	push   0x2
c00181ad:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c00181b3:	e8 c2 ef fe ff       	call   c000717a <Computer::readCMOS(unsigned char)>
c00181b8:	88 44 24 28          	mov    BYTE PTR [esp+0x28],al
c00181bc:	5d                   	pop    ebp
c00181bd:	58                   	pop    eax
c00181be:	6a 04                	push   0x4
c00181c0:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c00181c6:	e8 af ef fe ff       	call   c000717a <Computer::readCMOS(unsigned char)>
c00181cb:	88 44 24 2c          	mov    BYTE PTR [esp+0x2c],al
c00181cf:	58                   	pop    eax
c00181d0:	5a                   	pop    edx
c00181d1:	6a 07                	push   0x7
c00181d3:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c00181d9:	e8 9c ef fe ff       	call   c000717a <Computer::readCMOS(unsigned char)>
c00181de:	88 44 24 32          	mov    BYTE PTR [esp+0x32],al
c00181e2:	59                   	pop    ecx
c00181e3:	5b                   	pop    ebx
c00181e4:	6a 08                	push   0x8
c00181e6:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c00181ec:	e8 89 ef fe ff       	call   c000717a <Computer::readCMOS(unsigned char)>
c00181f1:	88 44 24 33          	mov    BYTE PTR [esp+0x33],al
c00181f5:	5e                   	pop    esi
c00181f6:	5d                   	pop    ebp
c00181f7:	6a 09                	push   0x9
c00181f9:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c00181ff:	e8 76 ef fe ff       	call   c000717a <Computer::readCMOS(unsigned char)>
c0018204:	0f b6 c0             	movzx  eax,al
c0018207:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001820b:	83 c4 10             	add    esp,0x10
c001820e:	8b 1d 4c 95 02 c0    	mov    ebx,DWORD PTR ds:0xc002954c
c0018214:	83 ec 0c             	sub    esp,0xc
c0018217:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001821b:	e8 30 ff ff ff       	call   c0018150 <RTC::get_update_in_progress_flag()>
c0018220:	83 c4 10             	add    esp,0x10
c0018223:	84 c0                	test   al,al
c0018225:	74 0e                	je     c0018235 <RTC::completeRTCRefresh()+0xcb>
c0018227:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c001822d:	3b 05 4c 95 02 c0    	cmp    eax,DWORD PTR ds:0xc002954c
c0018233:	73 df                	jae    c0018214 <RTC::completeRTCRefresh()+0xaa>
c0018235:	51                   	push   ecx
c0018236:	51                   	push   ecx
c0018237:	6a 00                	push   0x0
c0018239:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c001823f:	e8 36 ef fe ff       	call   c000717a <Computer::readCMOS(unsigned char)>
c0018244:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c0018248:	5b                   	pop    ebx
c0018249:	5e                   	pop    esi
c001824a:	6a 02                	push   0x2
c001824c:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0018252:	e8 23 ef fe ff       	call   c000717a <Computer::readCMOS(unsigned char)>
c0018257:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001825b:	5d                   	pop    ebp
c001825c:	58                   	pop    eax
c001825d:	6a 04                	push   0x4
c001825f:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0018265:	e8 10 ef fe ff       	call   c000717a <Computer::readCMOS(unsigned char)>
c001826a:	88 c3                	mov    bl,al
c001826c:	58                   	pop    eax
c001826d:	5a                   	pop    edx
c001826e:	6a 07                	push   0x7
c0018270:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0018276:	e8 ff ee fe ff       	call   c000717a <Computer::readCMOS(unsigned char)>
c001827b:	59                   	pop    ecx
c001827c:	89 c6                	mov    esi,eax
c001827e:	5d                   	pop    ebp
c001827f:	6a 08                	push   0x8
c0018281:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0018287:	e8 ee ee fe ff       	call   c000717a <Computer::readCMOS(unsigned char)>
c001828c:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c0018290:	58                   	pop    eax
c0018291:	5a                   	pop    edx
c0018292:	6a 09                	push   0x9
c0018294:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c001829a:	e8 db ee fe ff       	call   c000717a <Computer::readCMOS(unsigned char)>
c001829f:	89 f9                	mov    ecx,edi
c00182a1:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c00182a5:	0f b6 e8             	movzx  ebp,al
c00182a8:	83 c4 10             	add    esp,0x10
c00182ab:	38 4c 24 08          	cmp    BYTE PTR [esp+0x8],cl
c00182af:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00182b4:	0f b6 7c 24 0c       	movzx  edi,BYTE PTR [esp+0xc]
c00182b9:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c00182bd:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00182c1:	89 7c 24 2c          	mov    DWORD PTR [esp+0x2c],edi
c00182c5:	0f 94 c0             	sete   al
c00182c8:	0f b6 fb             	movzx  edi,bl
c00182cb:	3a 4c 24 18          	cmp    cl,BYTE PTR [esp+0x18]
c00182cf:	0f b6 4c 24 10       	movzx  ecx,BYTE PTR [esp+0x10]
c00182d4:	0f 94 c2             	sete   dl
c00182d7:	21 d0                	and    eax,edx
c00182d9:	3a 5c 24 1c          	cmp    bl,BYTE PTR [esp+0x1c]
c00182dd:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c00182e1:	0f 94 c2             	sete   dl
c00182e4:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c00182e8:	21 c2                	and    edx,eax
c00182ea:	89 f0                	mov    eax,esi
c00182ec:	0f b6 c0             	movzx  eax,al
c00182ef:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00182f3:	89 f0                	mov    eax,esi
c00182f5:	3a 44 24 22          	cmp    al,BYTE PTR [esp+0x22]
c00182f9:	0f 94 c0             	sete   al
c00182fc:	21 d0                	and    eax,edx
c00182fe:	31 d2                	xor    edx,edx
c0018300:	3a 4c 24 23          	cmp    cl,BYTE PTR [esp+0x23]
c0018304:	0f 94 c2             	sete   dl
c0018307:	85 c2                	test   edx,eax
c0018309:	75 27                	jne    c0018332 <RTC::completeRTCRefresh()+0x1c8>
c001830b:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001830f:	89 6c 24 24          	mov    DWORD PTR [esp+0x24],ebp
c0018313:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c0018317:	88 5c 24 1c          	mov    BYTE PTR [esp+0x1c],bl
c001831b:	89 f0                	mov    eax,esi
c001831d:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0018321:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c0018325:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0018329:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c001832d:	e9 dc fe ff ff       	jmp    c001820e <RTC::completeRTCRefresh()+0xa4>
c0018332:	39 6c 24 24          	cmp    DWORD PTR [esp+0x24],ebp
c0018336:	75 d3                	jne    c001830b <RTC::completeRTCRefresh()+0x1a1>
c0018338:	52                   	push   edx
c0018339:	52                   	push   edx
c001833a:	6a 0b                	push   0xb
c001833c:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0018342:	e8 33 ee fe ff       	call   c000717a <Computer::readCMOS(unsigned char)>
c0018347:	83 c4 10             	add    esp,0x10
c001834a:	a8 04                	test   al,0x4
c001834c:	75 7a                	jne    c00183c8 <RTC::completeRTCRefresh()+0x25e>
c001834e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0018352:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018356:	83 e1 0f             	and    ecx,0xf
c0018359:	c1 ea 04             	shr    edx,0x4
c001835c:	c1 ef 04             	shr    edi,0x4
c001835f:	6b d2 0a             	imul   edx,edx,0xa
c0018362:	83 e6 0f             	and    esi,0xf
c0018365:	01 d1                	add    ecx,edx
c0018367:	c1 ed 04             	shr    ebp,0x4
c001836a:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c001836e:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0018372:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0018376:	c1 ea 04             	shr    edx,0x4
c0018379:	83 e1 0f             	and    ecx,0xf
c001837c:	6b d2 0a             	imul   edx,edx,0xa
c001837f:	6b ed 0a             	imul   ebp,ebp,0xa
c0018382:	01 d1                	add    ecx,edx
c0018384:	89 fa                	mov    edx,edi
c0018386:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c001838a:	83 e2 07             	and    edx,0x7
c001838d:	89 d9                	mov    ecx,ebx
c001838f:	6b d2 0a             	imul   edx,edx,0xa
c0018392:	83 e1 0f             	and    ecx,0xf
c0018395:	83 e3 80             	and    ebx,0xffffff80
c0018398:	01 d1                	add    ecx,edx
c001839a:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001839e:	09 cb                	or     ebx,ecx
c00183a0:	c1 ea 04             	shr    edx,0x4
c00183a3:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00183a7:	6b d2 0a             	imul   edx,edx,0xa
c00183aa:	83 e1 0f             	and    ecx,0xf
c00183ad:	01 d6                	add    esi,edx
c00183af:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00183b3:	c1 ea 04             	shr    edx,0x4
c00183b6:	6b d2 0a             	imul   edx,edx,0xa
c00183b9:	01 d1                	add    ecx,edx
c00183bb:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00183bf:	88 4c 24 10          	mov    BYTE PTR [esp+0x10],cl
c00183c3:	83 e2 0f             	and    edx,0xf
c00183c6:	01 d5                	add    ebp,edx
c00183c8:	a8 02                	test   al,0x2
c00183ca:	75 15                	jne    c00183e1 <RTC::completeRTCRefresh()+0x277>
c00183cc:	f6 c3 80             	test   bl,0x80
c00183cf:	74 10                	je     c00183e1 <RTC::completeRTCRefresh()+0x277>
c00183d1:	83 e3 7f             	and    ebx,0x7f
c00183d4:	b9 18 00 00 00       	mov    ecx,0x18
c00183d9:	8d 43 0c             	lea    eax,[ebx+0xc]
c00183dc:	99                   	cdq    
c00183dd:	f7 f9                	idiv   ecx
c00183df:	88 d3                	mov    bl,dl
c00183e1:	8d bd d0 07 00 00    	lea    edi,[ebp+0x7d0]
c00183e7:	81 ff e3 07 00 00    	cmp    edi,0x7e3
c00183ed:	77 06                	ja     c00183f5 <RTC::completeRTCRefresh()+0x28b>
c00183ef:	8d bd 34 08 00 00    	lea    edi,[ebp+0x834]
c00183f5:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00183fa:	31 c9                	xor    ecx,ecx
c00183fc:	c1 e0 10             	shl    eax,0x10
c00183ff:	89 cd                	mov    ebp,ecx
c0018401:	c1 e7 10             	shl    edi,0x10
c0018404:	31 d2                	xor    edx,edx
c0018406:	81 e5 ff ff 00 ff    	and    ebp,0xff00ffff
c001840c:	09 c5                	or     ebp,eax
c001840e:	89 f0                	mov    eax,esi
c0018410:	89 e9                	mov    ecx,ebp
c0018412:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0018416:	8a 6c 24 0c          	mov    ch,BYTE PTR [esp+0xc]
c001841a:	88 c2                	mov    dl,al
c001841c:	88 d9                	mov    cl,bl
c001841e:	8a 74 24 10          	mov    dh,BYTE PTR [esp+0x10]
c0018422:	0f b7 c2             	movzx  eax,dx
c0018425:	09 f8                	or     eax,edi
c0018427:	89 c2                	mov    edx,eax
c0018429:	50                   	push   eax
c001842a:	50                   	push   eax
c001842b:	51                   	push   ecx
c001842c:	52                   	push   edx
c001842d:	e8 a5 3d ff ff       	call   c000c1d7 <datetimeToSeconds(datetime_t)>
c0018432:	8b 74 24 60          	mov    esi,DWORD PTR [esp+0x60]
c0018436:	89 86 58 01 00 00    	mov    DWORD PTR [esi+0x158],eax
c001843c:	89 96 5c 01 00 00    	mov    DWORD PTR [esi+0x15c],edx
c0018442:	83 c4 4c             	add    esp,0x4c
c0018445:	5b                   	pop    ebx
c0018446:	5e                   	pop    esi
c0018447:	5f                   	pop    edi
c0018448:	5d                   	pop    ebp
c0018449:	c3                   	ret    

c001844a <RTC::setTimeInDatetimeUTC(datetime_t)>:
c001844a:	55                   	push   ebp
c001844b:	57                   	push   edi
c001844c:	56                   	push   esi
c001844d:	53                   	push   ebx
c001844e:	83 ec 30             	sub    esp,0x30
c0018451:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0018455:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c0018459:	6a 00                	push   0x0
c001845b:	6a 00                	push   0x0
c001845d:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0018463:	e8 2c ee fe ff       	call   c0007294 <Computer::writeCMOS(unsigned char, unsigned char)>
c0018468:	83 c4 0c             	add    esp,0xc
c001846b:	6a 00                	push   0x0
c001846d:	6a 02                	push   0x2
c001846f:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0018475:	e8 1a ee fe ff       	call   c0007294 <Computer::writeCMOS(unsigned char, unsigned char)>
c001847a:	31 d2                	xor    edx,edx
c001847c:	89 f9                	mov    ecx,edi
c001847e:	89 f8                	mov    eax,edi
c0018480:	c1 e9 10             	shr    ecx,0x10
c0018483:	0f b6 c4             	movzx  eax,ah
c0018486:	88 4c 24 1c          	mov    BYTE PTR [esp+0x1c],cl
c001848a:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c001848e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0018492:	b9 64 00 00 00       	mov    ecx,0x64
c0018497:	89 f0                	mov    eax,esi
c0018499:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c001849d:	89 f0                	mov    eax,esi
c001849f:	0f b6 c4             	movzx  eax,ah
c00184a2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00184a6:	89 f0                	mov    eax,esi
c00184a8:	c1 e8 10             	shr    eax,0x10
c00184ab:	f7 f1                	div    ecx
c00184ad:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c00184b1:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c00184b5:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c00184b9:	59                   	pop    ecx
c00184ba:	5b                   	pop    ebx
c00184bb:	89 fb                	mov    ebx,edi
c00184bd:	6a 0b                	push   0xb
c00184bf:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c00184c5:	e8 b0 ec fe ff       	call   c000717a <Computer::readCMOS(unsigned char)>
c00184ca:	83 c4 10             	add    esp,0x10
c00184cd:	89 c5                	mov    ebp,eax
c00184cf:	a8 04                	test   al,0x4
c00184d1:	75 6e                	jne    c0018541 <RTC::setTimeInDatetimeUTC(datetime_t)+0xf7>
c00184d3:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00184d7:	31 d2                	xor    edx,edx
c00184d9:	0f b6 c1             	movzx  eax,cl
c00184dc:	b9 0a 00 00 00       	mov    ecx,0xa
c00184e1:	f7 f1                	div    ecx
c00184e3:	c1 e0 04             	shl    eax,0x4
c00184e6:	09 d0                	or     eax,edx
c00184e8:	31 d2                	xor    edx,edx
c00184ea:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00184ee:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c00184f3:	f7 f1                	div    ecx
c00184f5:	c1 e0 04             	shl    eax,0x4
c00184f8:	09 d0                	or     eax,edx
c00184fa:	31 d2                	xor    edx,edx
c00184fc:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0018500:	0f b6 c3             	movzx  eax,bl
c0018503:	f7 f1                	div    ecx
c0018505:	c1 e0 04             	shl    eax,0x4
c0018508:	09 d0                	or     eax,edx
c001850a:	31 d2                	xor    edx,edx
c001850c:	89 c3                	mov    ebx,eax
c001850e:	89 f0                	mov    eax,esi
c0018510:	0f b6 c0             	movzx  eax,al
c0018513:	f7 f1                	div    ecx
c0018515:	c1 e0 04             	shl    eax,0x4
c0018518:	09 d0                	or     eax,edx
c001851a:	31 d2                	xor    edx,edx
c001851c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0018520:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0018525:	f7 f1                	div    ecx
c0018527:	c1 e0 04             	shl    eax,0x4
c001852a:	09 d0                	or     eax,edx
c001852c:	31 d2                	xor    edx,edx
c001852e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0018532:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018536:	f7 f1                	div    ecx
c0018538:	c1 e0 04             	shl    eax,0x4
c001853b:	09 d0                	or     eax,edx
c001853d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0018541:	83 e5 02             	and    ebp,0x2
c0018544:	75 1e                	jne    c0018564 <RTC::setTimeInDatetimeUTC(datetime_t)+0x11a>
c0018546:	0f b6 c3             	movzx  eax,bl
c0018549:	83 f8 0b             	cmp    eax,0xb
c001854c:	76 10                	jbe    c001855e <RTC::setTimeInDatetimeUTC(datetime_t)+0x114>
c001854e:	8d 53 f4             	lea    edx,[ebx-0xc]
c0018551:	88 d3                	mov    bl,dl
c0018553:	84 d2                	test   dl,dl
c0018555:	75 02                	jne    c0018559 <RTC::setTimeInDatetimeUTC(datetime_t)+0x10f>
c0018557:	b3 0c                	mov    bl,0xc
c0018559:	83 cb 80             	or     ebx,0xffffff80
c001855c:	eb 06                	jmp    c0018564 <RTC::setTimeInDatetimeUTC(datetime_t)+0x11a>
c001855e:	85 c0                	test   eax,eax
c0018560:	75 02                	jne    c0018564 <RTC::setTimeInDatetimeUTC(datetime_t)+0x11a>
c0018562:	b3 0c                	mov    bl,0xc
c0018564:	0f b6 db             	movzx  ebx,bl
c0018567:	50                   	push   eax
c0018568:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c001856d:	52                   	push   edx
c001856e:	6a 00                	push   0x0
c0018570:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0018576:	e8 19 ed fe ff       	call   c0007294 <Computer::writeCMOS(unsigned char, unsigned char)>
c001857b:	83 c4 0c             	add    esp,0xc
c001857e:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0018583:	50                   	push   eax
c0018584:	6a 02                	push   0x2
c0018586:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c001858c:	e8 03 ed fe ff       	call   c0007294 <Computer::writeCMOS(unsigned char, unsigned char)>
c0018591:	83 c4 0c             	add    esp,0xc
c0018594:	53                   	push   ebx
c0018595:	6a 04                	push   0x4
c0018597:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c001859d:	e8 f2 ec fe ff       	call   c0007294 <Computer::writeCMOS(unsigned char, unsigned char)>
c00185a2:	83 c4 0c             	add    esp,0xc
c00185a5:	0f b6 54 24 14       	movzx  edx,BYTE PTR [esp+0x14]
c00185aa:	52                   	push   edx
c00185ab:	6a 07                	push   0x7
c00185ad:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c00185b3:	e8 dc ec fe ff       	call   c0007294 <Computer::writeCMOS(unsigned char, unsigned char)>
c00185b8:	83 c4 0c             	add    esp,0xc
c00185bb:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00185c0:	50                   	push   eax
c00185c1:	6a 08                	push   0x8
c00185c3:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c00185c9:	e8 c6 ec fe ff       	call   c0007294 <Computer::writeCMOS(unsigned char, unsigned char)>
c00185ce:	83 c4 0c             	add    esp,0xc
c00185d1:	0f b6 6c 24 18       	movzx  ebp,BYTE PTR [esp+0x18]
c00185d6:	55                   	push   ebp
c00185d7:	6a 09                	push   0x9
c00185d9:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c00185df:	e8 b0 ec fe ff       	call   c0007294 <Computer::writeCMOS(unsigned char, unsigned char)>
c00185e4:	5a                   	pop    edx
c00185e5:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00185e9:	e8 7c fb ff ff       	call   c001816a <RTC::completeRTCRefresh()>
c00185ee:	83 c4 3c             	add    esp,0x3c
c00185f1:	b0 01                	mov    al,0x1
c00185f3:	5b                   	pop    ebx
c00185f4:	5e                   	pop    esi
c00185f5:	5f                   	pop    edi
c00185f6:	5d                   	pop    ebp
c00185f7:	c3                   	ret    

c00185f8 <rtcIRQHandler(regs*, void*)>:
c00185f8:	53                   	push   ebx
c00185f9:	83 ec 10             	sub    esp,0x10
c00185fc:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0018600:	6a 0c                	push   0xc
c0018602:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0018608:	e8 6d eb fe ff       	call   c000717a <Computer::readCMOS(unsigned char)>
c001860d:	83 c4 10             	add    esp,0x10
c0018610:	a8 80                	test   al,0x80
c0018612:	74 24                	je     c0018638 <rtcIRQHandler(regs*, void*)+0x40>
c0018614:	83 83 58 01 00 00 01 	add    DWORD PTR [ebx+0x158],0x1
c001861b:	83 93 5c 01 00 00 00 	adc    DWORD PTR [ebx+0x15c],0x0
c0018622:	66 ff 05 18 a5 02 c0 	inc    WORD PTR ds:0xc002a518
c0018629:	75 0d                	jne    c0018638 <rtcIRQHandler(regs*, void*)+0x40>
c001862b:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001862f:	83 c4 08             	add    esp,0x8
c0018632:	5b                   	pop    ebx
c0018633:	e9 32 fb ff ff       	jmp    c001816a <RTC::completeRTCRefresh()>
c0018638:	83 c4 08             	add    esp,0x8
c001863b:	5b                   	pop    ebx
c001863c:	c3                   	ret    
c001863d:	90                   	nop

c001863e <RTC::RTC()>:
c001863e:	83 ec 1c             	sub    esp,0x1c
c0018641:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018645:	83 ec 08             	sub    esp,0x8
c0018648:	68 07 26 02 c0       	push   0xc0022607
c001864d:	50                   	push   eax
c001864e:	e8 5f 3a ff ff       	call   c000c0b2 <Clock::Clock(char const*)>
c0018653:	83 c4 10             	add    esp,0x10
c0018656:	ba 24 26 02 c0       	mov    edx,0xc0022624
c001865b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001865f:	89 10                	mov    DWORD PTR [eax],edx
c0018661:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018665:	83 ec 0c             	sub    esp,0xc
c0018668:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001866c:	6a 01                	push   0x1
c001866e:	68 f8 85 01 c0       	push   0xc00185f8
c0018673:	6a 08                	push   0x8
c0018675:	50                   	push   eax
c0018676:	e8 13 3f ff ff       	call   c000c58e <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001867b:	83 c4 20             	add    esp,0x20
c001867e:	89 c2                	mov    edx,eax
c0018680:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018684:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001868a:	fa                   	cli    
c001868b:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c0018690:	83 c0 01             	add    eax,0x1
c0018693:	a3 68 a4 02 c0       	mov    ds:0xc002a468,eax
c0018698:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c001869d:	83 ec 08             	sub    esp,0x8
c00186a0:	6a 0b                	push   0xb
c00186a2:	50                   	push   eax
c00186a3:	e8 d2 ea fe ff       	call   c000717a <Computer::readCMOS(unsigned char)>
c00186a8:	83 c4 10             	add    esp,0x10
c00186ab:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00186af:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c00186b4:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c00186b8:	83 ca 10             	or     edx,0x10
c00186bb:	0f b6 d2             	movzx  edx,dl
c00186be:	83 ec 04             	sub    esp,0x4
c00186c1:	52                   	push   edx
c00186c2:	6a 0b                	push   0xb
c00186c4:	50                   	push   eax
c00186c5:	e8 ca eb fe ff       	call   c0007294 <Computer::writeCMOS(unsigned char, unsigned char)>
c00186ca:	83 c4 10             	add    esp,0x10
c00186cd:	83 ec 0c             	sub    esp,0xc
c00186d0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00186d4:	e8 91 fa ff ff       	call   c001816a <RTC::completeRTCRefresh()>
c00186d9:	83 c4 10             	add    esp,0x10
c00186dc:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c00186e1:	83 e8 01             	sub    eax,0x1
c00186e4:	a3 68 a4 02 c0       	mov    ds:0xc002a468,eax
c00186e9:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c00186ee:	85 c0                	test   eax,eax
c00186f0:	75 01                	jne    c00186f3 <RTC::RTC()+0xb5>
c00186f2:	fb                   	sti    
c00186f3:	90                   	nop
c00186f4:	83 c4 1c             	add    esp,0x1c
c00186f7:	c3                   	ret    

c00186f8 <HalConsoleScroll(int, int)>:
c00186f8:	83 ec 10             	sub    esp,0x10
c00186fb:	c7 44 24 04 00 80 0b c2 	mov    DWORD PTR [esp+0x4],0xc20b8000
c0018703:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c001870b:	90                   	nop
c001870c:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c0018711:	0f 8f e1 00 00 00    	jg     c00187f8 <HalConsoleScroll(int, int)+0x100>
c0018717:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001871f:	90                   	nop
c0018720:	81 7c 24 08 9f 00 00 00 	cmp    DWORD PTR [esp+0x8],0x9f
c0018728:	0f 8f be 00 00 00    	jg     c00187ec <HalConsoleScroll(int, int)+0xf4>
c001872e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018732:	89 d0                	mov    eax,edx
c0018734:	c1 e0 02             	shl    eax,0x2
c0018737:	01 d0                	add    eax,edx
c0018739:	c1 e0 05             	shl    eax,0x5
c001873c:	89 c2                	mov    edx,eax
c001873e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018742:	01 d0                	add    eax,edx
c0018744:	89 c2                	mov    edx,eax
c0018746:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001874a:	8d 0c 02             	lea    ecx,[edx+eax*1]
c001874d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018751:	89 d0                	mov    eax,edx
c0018753:	c1 e0 02             	shl    eax,0x2
c0018756:	01 d0                	add    eax,edx
c0018758:	c1 e0 05             	shl    eax,0x5
c001875b:	89 c2                	mov    edx,eax
c001875d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018761:	01 d0                	add    eax,edx
c0018763:	8d 90 60 ff ff ff    	lea    edx,[eax-0xa0]
c0018769:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001876d:	01 c2                	add    edx,eax
c001876f:	8a 01                	mov    al,BYTE PTR [ecx]
c0018771:	88 02                	mov    BYTE PTR [edx],al
c0018773:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c0018778:	75 66                	jne    c00187e0 <HalConsoleScroll(int, int)+0xe8>
c001877a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001877e:	83 e0 01             	and    eax,0x1
c0018781:	74 39                	je     c00187bc <HalConsoleScroll(int, int)+0xc4>
c0018783:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018787:	83 e0 0f             	and    eax,0xf
c001878a:	88 c2                	mov    dl,al
c001878c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018790:	c1 e0 04             	shl    eax,0x4
c0018793:	09 d0                	or     eax,edx
c0018795:	88 c1                	mov    cl,al
c0018797:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001879b:	89 d0                	mov    eax,edx
c001879d:	c1 e0 02             	shl    eax,0x2
c00187a0:	01 d0                	add    eax,edx
c00187a2:	c1 e0 05             	shl    eax,0x5
c00187a5:	89 c2                	mov    edx,eax
c00187a7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00187ab:	01 d0                	add    eax,edx
c00187ad:	89 c2                	mov    edx,eax
c00187af:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00187b3:	01 d0                	add    eax,edx
c00187b5:	88 ca                	mov    dl,cl
c00187b7:	88 10                	mov    BYTE PTR [eax],dl
c00187b9:	eb 25                	jmp    c00187e0 <HalConsoleScroll(int, int)+0xe8>
c00187bb:	90                   	nop
c00187bc:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00187c0:	89 d0                	mov    eax,edx
c00187c2:	c1 e0 02             	shl    eax,0x2
c00187c5:	01 d0                	add    eax,edx
c00187c7:	c1 e0 05             	shl    eax,0x5
c00187ca:	89 c2                	mov    edx,eax
c00187cc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00187d0:	01 d0                	add    eax,edx
c00187d2:	89 c2                	mov    edx,eax
c00187d4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00187d8:	01 d0                	add    eax,edx
c00187da:	c6 00 20             	mov    BYTE PTR [eax],0x20
c00187dd:	8d 76 00             	lea    esi,[esi+0x0]
c00187e0:	83 44 24 08 01       	add    DWORD PTR [esp+0x8],0x1
c00187e5:	e9 36 ff ff ff       	jmp    c0018720 <HalConsoleScroll(int, int)+0x28>
c00187ea:	66 90                	xchg   ax,ax
c00187ec:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c00187f1:	e9 16 ff ff ff       	jmp    c001870c <HalConsoleScroll(int, int)+0x14>
c00187f6:	66 90                	xchg   ax,ax
c00187f8:	90                   	nop
c00187f9:	83 c4 10             	add    esp,0x10
c00187fc:	c3                   	ret    
c00187fd:	8d 76 00             	lea    esi,[esi+0x0]

c0018800 <HalConsoleWriteCharacter(char, int, int, int, int)>:
c0018800:	83 ec 14             	sub    esp,0x14
c0018803:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018807:	88 04 24             	mov    BYTE PTR [esp],al
c001880a:	8a 04 24             	mov    al,BYTE PTR [esp]
c001880d:	0f b6 c0             	movzx  eax,al
c0018810:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0018814:	89 d1                	mov    ecx,edx
c0018816:	83 e1 0f             	and    ecx,0xf
c0018819:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001881d:	c1 e2 04             	shl    edx,0x4
c0018820:	0f b6 d2             	movzx  edx,dl
c0018823:	09 ca                	or     edx,ecx
c0018825:	c1 e2 08             	shl    edx,0x8
c0018828:	09 d0                	or     eax,edx
c001882a:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c001882f:	c7 44 24 0c 00 80 0b c2 	mov    DWORD PTR [esp+0xc],0xc20b8000
c0018837:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001883b:	89 d0                	mov    eax,edx
c001883d:	c1 e0 02             	shl    eax,0x2
c0018840:	01 d0                	add    eax,edx
c0018842:	c1 e0 04             	shl    eax,0x4
c0018845:	89 c2                	mov    edx,eax
c0018847:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001884b:	01 d0                	add    eax,edx
c001884d:	01 c0                	add    eax,eax
c001884f:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0018853:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018857:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c001885c:	66 89 02             	mov    WORD PTR [edx],ax
c001885f:	90                   	nop
c0018860:	83 c4 14             	add    esp,0x14
c0018863:	c3                   	ret    

c0018864 <HalConsoleCursorUpdate(int, int)>:
c0018864:	83 ec 20             	sub    esp,0x20
c0018867:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001886b:	89 c2                	mov    edx,eax
c001886d:	c1 e2 02             	shl    edx,0x2
c0018870:	01 d0                	add    eax,edx
c0018872:	c1 e0 04             	shl    eax,0x4
c0018875:	89 c2                	mov    edx,eax
c0018877:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001887b:	01 d0                	add    eax,edx
c001887d:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c0018882:	66 c7 44 24 10 d4 03 	mov    WORD PTR [esp+0x10],0x3d4
c0018889:	c6 44 24 0f 0f       	mov    BYTE PTR [esp+0xf],0xf
c001888e:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0018892:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0018896:	ee                   	out    dx,al
c0018897:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c001889c:	0f b6 c0             	movzx  eax,al
c001889f:	66 c7 44 24 14 d5 03 	mov    WORD PTR [esp+0x14],0x3d5
c00188a6:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c00188aa:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c00188ae:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00188b2:	ee                   	out    dx,al
c00188b3:	66 c7 44 24 18 d4 03 	mov    WORD PTR [esp+0x18],0x3d4
c00188ba:	c6 44 24 17 0e       	mov    BYTE PTR [esp+0x17],0xe
c00188bf:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c00188c3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00188c7:	ee                   	out    dx,al
c00188c8:	0f b7 44 24 1e       	movzx  eax,WORD PTR [esp+0x1e]
c00188cd:	c1 e8 08             	shr    eax,0x8
c00188d0:	0f b6 c0             	movzx  eax,al
c00188d3:	66 c7 44 24 1c d5 03 	mov    WORD PTR [esp+0x1c],0x3d5
c00188da:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c00188de:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c00188e2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00188e6:	ee                   	out    dx,al
c00188e7:	90                   	nop
c00188e8:	83 c4 20             	add    esp,0x20
c00188eb:	c3                   	ret    

c00188ec <FAT::getName()>:
c00188ec:	b8 58 26 02 c0       	mov    eax,0xc0022658
c00188f1:	c3                   	ret    
c00188f2:	66 90                	xchg   ax,ax

c00188f4 <FAT::tell(void*, unsigned long long*)>:
c00188f4:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00188f9:	75 09                	jne    c0018904 <FAT::tell(void*, unsigned long long*)+0x10>
c00188fb:	b8 04 00 00 00       	mov    eax,0x4
c0018900:	c3                   	ret    
c0018901:	8d 76 00             	lea    esi,[esi+0x0]
c0018904:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0018909:	75 09                	jne    c0018914 <FAT::tell(void*, unsigned long long*)+0x20>
c001890b:	b8 04 00 00 00       	mov    eax,0x4
c0018910:	c3                   	ret    
c0018911:	8d 76 00             	lea    esi,[esi+0x0]
c0018914:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018918:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001891b:	ba 00 00 00 00       	mov    edx,0x0
c0018920:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0018924:	89 01                	mov    DWORD PTR [ecx],eax
c0018926:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0018929:	b8 00 00 00 00       	mov    eax,0x0
c001892e:	c3                   	ret    
c001892f:	90                   	nop

c0018930 <FAT::stat(void*, unsigned long long*)>:
c0018930:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0018935:	75 09                	jne    c0018940 <FAT::stat(void*, unsigned long long*)+0x10>
c0018937:	b8 04 00 00 00       	mov    eax,0x4
c001893c:	c3                   	ret    
c001893d:	8d 76 00             	lea    esi,[esi+0x0]
c0018940:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0018945:	75 09                	jne    c0018950 <FAT::stat(void*, unsigned long long*)+0x20>
c0018947:	b8 04 00 00 00       	mov    eax,0x4
c001894c:	c3                   	ret    
c001894d:	8d 76 00             	lea    esi,[esi+0x0]
c0018950:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018954:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0018957:	ba 00 00 00 00       	mov    edx,0x0
c001895c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0018960:	89 01                	mov    DWORD PTR [ecx],eax
c0018962:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0018965:	b8 00 00 00 00       	mov    eax,0x0
c001896a:	c3                   	ret    
c001896b:	90                   	nop

c001896c <FAT::~FAT()>:
c001896c:	83 ec 0c             	sub    esp,0xc
c001896f:	ba a4 26 02 c0       	mov    edx,0xc00226a4
c0018974:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018978:	89 10                	mov    DWORD PTR [eax],edx
c001897a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001897e:	83 ec 0c             	sub    esp,0xc
c0018981:	50                   	push   eax
c0018982:	e8 15 2b ff ff       	call   c000b49c <Filesystem::~Filesystem()>
c0018987:	83 c4 10             	add    esp,0x10
c001898a:	90                   	nop
c001898b:	83 c4 0c             	add    esp,0xc
c001898e:	c3                   	ret    
c001898f:	90                   	nop

c0018990 <FAT::~FAT()>:
c0018990:	83 ec 0c             	sub    esp,0xc
c0018993:	83 ec 0c             	sub    esp,0xc
c0018996:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001899a:	e8 cd ff ff ff       	call   c001896c <FAT::~FAT()>
c001899f:	83 c4 10             	add    esp,0x10
c00189a2:	83 ec 08             	sub    esp,0x8
c00189a5:	6a 08                	push   0x8
c00189a7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00189ab:	e8 68 1e ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c00189b0:	83 c4 10             	add    esp,0x10
c00189b3:	83 c4 0c             	add    esp,0xc
c00189b6:	c3                   	ret    
c00189b7:	90                   	nop

c00189b8 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c00189b8:	83 ec 1c             	sub    esp,0x1c
c00189bb:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c00189c2:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c00189c7:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00189cb:	8b 04 85 40 a5 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5ac0]
c00189d2:	83 f8 ff             	cmp    eax,0xffffffff
c00189d5:	75 35                	jne    c0018a0c <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x54>
c00189d7:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c00189db:	88 c2                	mov    dl,al
c00189dd:	a1 20 a5 02 c0       	mov    eax,ds:0xc002a520
c00189e2:	01 d0                	add    eax,edx
c00189e4:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c00189e8:	8b 15 20 a5 02 c0    	mov    edx,DWORD PTR ds:0xc002a520
c00189ee:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00189f2:	89 14 85 40 a5 02 c0 	mov    DWORD PTR [eax*4-0x3ffd5ac0],edx
c00189f9:	a1 20 a5 02 c0       	mov    eax,ds:0xc002a520
c00189fe:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018a02:	89 14 85 c0 a5 02 c0 	mov    DWORD PTR [eax*4-0x3ffd5a40],edx
c0018a09:	eb 19                	jmp    c0018a24 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6c>
c0018a0b:	90                   	nop
c0018a0c:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0018a10:	88 c2                	mov    dl,al
c0018a12:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018a16:	8b 04 85 40 a5 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5ac0]
c0018a1d:	01 d0                	add    eax,edx
c0018a1f:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0018a23:	90                   	nop
c0018a24:	83 ec 04             	sub    esp,0x4
c0018a27:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0018a2b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0018a2f:	8d 44 24 15          	lea    eax,[esp+0x15]
c0018a33:	50                   	push   eax
c0018a34:	e8 96 c5 fe ff       	call   c0004fcf <f_getlabel>
c0018a39:	83 c4 10             	add    esp,0x10
c0018a3c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018a40:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0018a45:	75 09                	jne    c0018a50 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x98>
c0018a47:	b8 00 00 00 00       	mov    eax,0x0
c0018a4c:	eb 0a                	jmp    c0018a58 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0xa0>
c0018a4e:	66 90                	xchg   ax,ax
c0018a50:	b8 01 00 00 00       	mov    eax,0x1
c0018a55:	8d 76 00             	lea    esi,[esi+0x0]
c0018a58:	83 c4 1c             	add    esp,0x1c
c0018a5b:	c3                   	ret    

c0018a5c <FAT::setlabel(LogicalDisk*, int, char*)>:
c0018a5c:	57                   	push   edi
c0018a5d:	83 ec 58             	sub    esp,0x58
c0018a60:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c0018a68:	8d 54 24 10          	lea    edx,[esp+0x10]
c0018a6c:	b8 00 00 00 00       	mov    eax,0x0
c0018a71:	b9 0f 00 00 00       	mov    ecx,0xf
c0018a76:	fc                   	cld    
c0018a77:	89 d7                	mov    edi,edx
c0018a79:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0018a7b:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0018a7f:	8b 04 85 40 a5 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5ac0]
c0018a86:	83 f8 ff             	cmp    eax,0xffffffff
c0018a89:	75 35                	jne    c0018ac0 <FAT::setlabel(LogicalDisk*, int, char*)+0x64>
c0018a8b:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0018a8f:	88 c2                	mov    dl,al
c0018a91:	a1 20 a5 02 c0       	mov    eax,ds:0xc002a520
c0018a96:	01 d0                	add    eax,edx
c0018a98:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0018a9c:	8b 15 20 a5 02 c0    	mov    edx,DWORD PTR ds:0xc002a520
c0018aa2:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0018aa6:	89 14 85 40 a5 02 c0 	mov    DWORD PTR [eax*4-0x3ffd5ac0],edx
c0018aad:	a1 20 a5 02 c0       	mov    eax,ds:0xc002a520
c0018ab2:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c0018ab6:	89 14 85 c0 a5 02 c0 	mov    DWORD PTR [eax*4-0x3ffd5a40],edx
c0018abd:	eb 19                	jmp    c0018ad8 <FAT::setlabel(LogicalDisk*, int, char*)+0x7c>
c0018abf:	90                   	nop
c0018ac0:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0018ac4:	88 c2                	mov    dl,al
c0018ac6:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0018aca:	8b 04 85 40 a5 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5ac0]
c0018ad1:	01 d0                	add    eax,edx
c0018ad3:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0018ad7:	90                   	nop
c0018ad8:	83 ec 08             	sub    esp,0x8
c0018adb:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c0018adf:	8d 44 24 18          	lea    eax,[esp+0x18]
c0018ae3:	50                   	push   eax
c0018ae4:	e8 57 7d fe ff       	call   c0000840 <strcat>
c0018ae9:	83 c4 10             	add    esp,0x10
c0018aec:	83 ec 0c             	sub    esp,0xc
c0018aef:	8d 44 24 18          	lea    eax,[esp+0x18]
c0018af3:	50                   	push   eax
c0018af4:	e8 27 c6 fe ff       	call   c0005120 <f_setlabel>
c0018af9:	83 c4 10             	add    esp,0x10
c0018afc:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0018b00:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c0018b05:	75 09                	jne    c0018b10 <FAT::setlabel(LogicalDisk*, int, char*)+0xb4>
c0018b07:	b8 00 00 00 00       	mov    eax,0x0
c0018b0c:	eb 0a                	jmp    c0018b18 <FAT::setlabel(LogicalDisk*, int, char*)+0xbc>
c0018b0e:	66 90                	xchg   ax,ax
c0018b10:	b8 01 00 00 00       	mov    eax,0x1
c0018b15:	8d 76 00             	lea    esi,[esi+0x0]
c0018b18:	83 c4 58             	add    esp,0x58
c0018b1b:	5f                   	pop    edi
c0018b1c:	c3                   	ret    
c0018b1d:	90                   	nop
c0018b1e:	66 90                	xchg   ax,ax

c0018b20 <FAT::format(LogicalDisk*, int, char const*, int)>:
c0018b20:	83 ec 2c             	sub    esp,0x2c
c0018b23:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0018b2b:	83 ec 08             	sub    esp,0x8
c0018b2e:	68 7c 26 02 c0       	push   0xc002267c
c0018b33:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0018b37:	e8 14 7c fe ff       	call   c0000750 <strcmp>
c0018b3c:	83 c4 10             	add    esp,0x10
c0018b3f:	85 c0                	test   eax,eax
c0018b41:	0f 94 c0             	sete   al
c0018b44:	0f b6 c0             	movzx  eax,al
c0018b47:	85 c0                	test   eax,eax
c0018b49:	74 0d                	je     c0018b58 <FAT::format(LogicalDisk*, int, char const*, int)+0x38>
c0018b4b:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0018b53:	e9 c0 00 00 00       	jmp    c0018c18 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c0018b58:	83 ec 08             	sub    esp,0x8
c0018b5b:	68 6e 26 02 c0       	push   0xc002266e
c0018b60:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0018b64:	e8 e7 7b fe ff       	call   c0000750 <strcmp>
c0018b69:	83 c4 10             	add    esp,0x10
c0018b6c:	85 c0                	test   eax,eax
c0018b6e:	0f 94 c0             	sete   al
c0018b71:	0f b6 c0             	movzx  eax,al
c0018b74:	85 c0                	test   eax,eax
c0018b76:	74 10                	je     c0018b88 <FAT::format(LogicalDisk*, int, char const*, int)+0x68>
c0018b78:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0018b80:	e9 93 00 00 00       	jmp    c0018c18 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c0018b85:	8d 76 00             	lea    esi,[esi+0x0]
c0018b88:	83 ec 08             	sub    esp,0x8
c0018b8b:	68 74 26 02 c0       	push   0xc0022674
c0018b90:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0018b94:	e8 b7 7b fe ff       	call   c0000750 <strcmp>
c0018b99:	83 c4 10             	add    esp,0x10
c0018b9c:	85 c0                	test   eax,eax
c0018b9e:	0f 94 c0             	sete   al
c0018ba1:	0f b6 c0             	movzx  eax,al
c0018ba4:	85 c0                	test   eax,eax
c0018ba6:	74 0c                	je     c0018bb4 <FAT::format(LogicalDisk*, int, char const*, int)+0x94>
c0018ba8:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0018bb0:	eb 66                	jmp    c0018c18 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c0018bb2:	66 90                	xchg   ax,ax
c0018bb4:	83 ec 08             	sub    esp,0x8
c0018bb7:	68 1c ff 01 c0       	push   0xc001ff1c
c0018bbc:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0018bc0:	e8 8b 7b fe ff       	call   c0000750 <strcmp>
c0018bc5:	83 c4 10             	add    esp,0x10
c0018bc8:	85 c0                	test   eax,eax
c0018bca:	0f 94 c0             	sete   al
c0018bcd:	0f b6 c0             	movzx  eax,al
c0018bd0:	85 c0                	test   eax,eax
c0018bd2:	74 0c                	je     c0018be0 <FAT::format(LogicalDisk*, int, char const*, int)+0xc0>
c0018bd4:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c0018bdc:	eb 3a                	jmp    c0018c18 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c0018bde:	66 90                	xchg   ax,ax
c0018be0:	83 ec 08             	sub    esp,0x8
c0018be3:	68 7a 26 02 c0       	push   0xc002267a
c0018be8:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0018bec:	e8 5f 7b fe ff       	call   c0000750 <strcmp>
c0018bf1:	83 c4 10             	add    esp,0x10
c0018bf4:	85 c0                	test   eax,eax
c0018bf6:	0f 94 c0             	sete   al
c0018bf9:	0f b6 c0             	movzx  eax,al
c0018bfc:	85 c0                	test   eax,eax
c0018bfe:	74 0c                	je     c0018c0c <FAT::format(LogicalDisk*, int, char const*, int)+0xec>
c0018c00:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c0018c08:	eb 0e                	jmp    c0018c18 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c0018c0a:	66 90                	xchg   ax,ax
c0018c0c:	b8 08 00 00 00       	mov    eax,0x8
c0018c11:	e9 ea 00 00 00       	jmp    c0018d00 <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c0018c16:	66 90                	xchg   ax,ax
c0018c18:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c0018c1f:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c0018c24:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0018c28:	8b 04 85 40 a5 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5ac0]
c0018c2f:	83 f8 ff             	cmp    eax,0xffffffff
c0018c32:	75 34                	jne    c0018c68 <FAT::format(LogicalDisk*, int, char const*, int)+0x148>
c0018c34:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0018c38:	88 c2                	mov    dl,al
c0018c3a:	a1 20 a5 02 c0       	mov    eax,ds:0xc002a520
c0018c3f:	01 d0                	add    eax,edx
c0018c41:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0018c45:	8b 15 20 a5 02 c0    	mov    edx,DWORD PTR ds:0xc002a520
c0018c4b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0018c4f:	89 14 85 40 a5 02 c0 	mov    DWORD PTR [eax*4-0x3ffd5ac0],edx
c0018c56:	a1 20 a5 02 c0       	mov    eax,ds:0xc002a520
c0018c5b:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0018c5f:	89 14 85 c0 a5 02 c0 	mov    DWORD PTR [eax*4-0x3ffd5a40],edx
c0018c66:	eb 18                	jmp    c0018c80 <FAT::format(LogicalDisk*, int, char const*, int)+0x160>
c0018c68:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0018c6c:	88 c2                	mov    dl,al
c0018c6e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0018c72:	8b 04 85 40 a5 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5ac0]
c0018c79:	01 d0                	add    eax,edx
c0018c7b:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0018c7f:	90                   	nop
c0018c80:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0018c84:	88 04 24             	mov    BYTE PTR [esp],al
c0018c87:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0018c8b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018c8f:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0018c97:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c0018c9c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0018ca4:	83 ec 0c             	sub    esp,0xc
c0018ca7:	68 00 20 00 00       	push   0x2000
c0018cac:	e8 05 ee fe ff       	call   c0007ab6 <malloc>
c0018cb1:	83 c4 10             	add    esp,0x10
c0018cb4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0018cb8:	68 00 20 00 00       	push   0x2000
c0018cbd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018cc1:	8d 44 24 08          	lea    eax,[esp+0x8]
c0018cc5:	50                   	push   eax
c0018cc6:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c0018cca:	50                   	push   eax
c0018ccb:	e8 4d c7 fe ff       	call   c000541d <f_mkfs>
c0018cd0:	83 c4 10             	add    esp,0x10
c0018cd3:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0018cd7:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0018cdc:	75 0a                	jne    c0018ce8 <FAT::format(LogicalDisk*, int, char const*, int)+0x1c8>
c0018cde:	b8 00 00 00 00       	mov    eax,0x0
c0018ce3:	eb 1b                	jmp    c0018d00 <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c0018ce5:	8d 76 00             	lea    esi,[esi+0x0]
c0018ce8:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c0018ced:	75 09                	jne    c0018cf8 <FAT::format(LogicalDisk*, int, char const*, int)+0x1d8>
c0018cef:	b8 09 00 00 00       	mov    eax,0x9
c0018cf4:	eb 0a                	jmp    c0018d00 <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c0018cf6:	66 90                	xchg   ax,ax
c0018cf8:	b8 01 00 00 00       	mov    eax,0x1
c0018cfd:	8d 76 00             	lea    esi,[esi+0x0]
c0018d00:	83 c4 2c             	add    esp,0x2c
c0018d03:	c3                   	ret    

c0018d04 <FAT::tryMount(LogicalDisk*, int)>:
c0018d04:	81 ec 4c 03 00 00    	sub    esp,0x34c
c0018d0a:	a1 20 a5 02 c0       	mov    eax,ds:0xc002a520
c0018d0f:	83 f8 14             	cmp    eax,0x14
c0018d12:	75 18                	jne    c0018d2c <FAT::tryMount(LogicalDisk*, int)+0x28>
c0018d14:	83 ec 0c             	sub    esp,0xc
c0018d17:	68 80 26 02 c0       	push   0xc0022680
c0018d1c:	e8 cc 84 ff ff       	call   c00111ed <KePanic(char const*)>
c0018d21:	83 c4 10             	add    esp,0x10
c0018d24:	b0 00                	mov    al,0x0
c0018d26:	e9 ed 01 00 00       	jmp    c0018f18 <FAT::tryMount(LogicalDisk*, int)+0x214>
c0018d2b:	90                   	nop
c0018d2c:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c0018d33:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0018d39:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0018d3f:	3d 00 02 00 00       	cmp    eax,0x200
c0018d44:	74 0a                	je     c0018d50 <FAT::tryMount(LogicalDisk*, int)+0x4c>
c0018d46:	b0 00                	mov    al,0x0
c0018d48:	e9 cb 01 00 00       	jmp    c0018f18 <FAT::tryMount(LogicalDisk*, int)+0x214>
c0018d4d:	8d 76 00             	lea    esi,[esi+0x0]
c0018d50:	c6 84 24 3f 03 00 00 00 	mov    BYTE PTR [esp+0x33f],0x0
c0018d58:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c0018d5f:	8b 04 85 40 a5 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5ac0]
c0018d66:	83 f8 ff             	cmp    eax,0xffffffff
c0018d69:	74 09                	je     c0018d74 <FAT::tryMount(LogicalDisk*, int)+0x70>
c0018d6b:	b0 01                	mov    al,0x1
c0018d6d:	e9 a6 01 00 00       	jmp    c0018f18 <FAT::tryMount(LogicalDisk*, int)+0x214>
c0018d72:	66 90                	xchg   ax,ax
c0018d74:	66 c7 84 24 31 03 00 00 30 3a 	mov    WORD PTR [esp+0x331],0x3a30
c0018d7e:	c6 84 24 33 03 00 00 00 	mov    BYTE PTR [esp+0x333],0x0
c0018d86:	8a 84 24 31 03 00 00 	mov    al,BYTE PTR [esp+0x331]
c0018d8d:	88 c2                	mov    dl,al
c0018d8f:	a1 20 a5 02 c0       	mov    eax,ds:0xc002a520
c0018d94:	01 d0                	add    eax,edx
c0018d96:	88 84 24 31 03 00 00 	mov    BYTE PTR [esp+0x331],al
c0018d9d:	8b 15 20 a5 02 c0    	mov    edx,DWORD PTR ds:0xc002a520
c0018da3:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c0018daa:	89 14 85 40 a5 02 c0 	mov    DWORD PTR [eax*4-0x3ffd5ac0],edx
c0018db1:	a1 20 a5 02 c0       	mov    eax,ds:0xc002a520
c0018db6:	8b 94 24 58 03 00 00 	mov    edx,DWORD PTR [esp+0x358]
c0018dbd:	89 14 85 c0 a5 02 c0 	mov    DWORD PTR [eax*4-0x3ffd5a40],edx
c0018dc4:	83 ec 0c             	sub    esp,0xc
c0018dc7:	68 34 02 00 00       	push   0x234
c0018dcc:	e8 e5 ec fe ff       	call   c0007ab6 <malloc>
c0018dd1:	83 c4 10             	add    esp,0x10
c0018dd4:	89 84 24 38 03 00 00 	mov    DWORD PTR [esp+0x338],eax
c0018ddb:	83 ec 04             	sub    esp,0x4
c0018dde:	6a 00                	push   0x0
c0018de0:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c0018de7:	50                   	push   eax
c0018de8:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c0018def:	e8 04 ae fe ff       	call   c0003bf8 <f_mount>
c0018df4:	83 c4 10             	add    esp,0x10
c0018df7:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c0018dfe:	83 bc 24 34 03 00 00 00 	cmp    DWORD PTR [esp+0x334],0x0
c0018e06:	74 1c                	je     c0018e24 <FAT::tryMount(LogicalDisk*, int)+0x120>
c0018e08:	83 ec 0c             	sub    esp,0xc
c0018e0b:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c0018e12:	e8 bf ec fe ff       	call   c0007ad6 <rfree>
c0018e17:	83 c4 10             	add    esp,0x10
c0018e1a:	b0 00                	mov    al,0x0
c0018e1c:	e9 f7 00 00 00       	jmp    c0018f18 <FAT::tryMount(LogicalDisk*, int)+0x214>
c0018e21:	8d 76 00             	lea    esi,[esi+0x0]
c0018e24:	83 ec 04             	sub    esp,0x4
c0018e27:	68 00 01 00 00       	push   0x100
c0018e2c:	6a 00                	push   0x0
c0018e2e:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c0018e35:	50                   	push   eax
c0018e36:	e8 b5 76 fe ff       	call   c00004f0 <memset>
c0018e3b:	83 c4 10             	add    esp,0x10
c0018e3e:	83 ec 08             	sub    esp,0x8
c0018e41:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c0018e48:	50                   	push   eax
c0018e49:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c0018e50:	50                   	push   eax
c0018e51:	e8 ea 79 fe ff       	call   c0000840 <strcat>
c0018e56:	83 c4 10             	add    esp,0x10
c0018e59:	83 ec 08             	sub    esp,0x8
c0018e5c:	68 8e 26 02 c0       	push   0xc002268e
c0018e61:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c0018e68:	50                   	push   eax
c0018e69:	e8 d2 79 fe ff       	call   c0000840 <strcat>
c0018e6e:	83 c4 10             	add    esp,0x10
c0018e71:	83 ec 04             	sub    esp,0x4
c0018e74:	6a 01                	push   0x1
c0018e76:	8d 84 24 39 02 00 00 	lea    eax,[esp+0x239]
c0018e7d:	50                   	push   eax
c0018e7e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0018e82:	50                   	push   eax
c0018e83:	e8 d2 ad fe ff       	call   c0003c5a <f_open>
c0018e88:	83 c4 10             	add    esp,0x10
c0018e8b:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c0018e92:	8b 84 24 34 03 00 00 	mov    eax,DWORD PTR [esp+0x334]
c0018e99:	85 c0                	test   eax,eax
c0018e9b:	74 0b                	je     c0018ea8 <FAT::tryMount(LogicalDisk*, int)+0x1a4>
c0018e9d:	78 31                	js     c0018ed0 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c0018e9f:	83 e8 04             	sub    eax,0x4
c0018ea2:	83 f8 01             	cmp    eax,0x1
c0018ea5:	77 29                	ja     c0018ed0 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c0018ea7:	90                   	nop
c0018ea8:	c6 84 24 3f 03 00 00 01 	mov    BYTE PTR [esp+0x33f],0x1
c0018eb0:	83 ec 0c             	sub    esp,0xc
c0018eb3:	8d 44 24 14          	lea    eax,[esp+0x14]
c0018eb7:	50                   	push   eax
c0018eb8:	e8 6c b5 fe ff       	call   c0004429 <f_close>
c0018ebd:	83 c4 10             	add    esp,0x10
c0018ec0:	90                   	nop
c0018ec1:	0f b6 84 24 3f 03 00 00 	movzx  eax,BYTE PTR [esp+0x33f]
c0018ec9:	85 c0                	test   eax,eax
c0018ecb:	74 43                	je     c0018f10 <FAT::tryMount(LogicalDisk*, int)+0x20c>
c0018ecd:	eb 31                	jmp    c0018f00 <FAT::tryMount(LogicalDisk*, int)+0x1fc>
c0018ecf:	90                   	nop
c0018ed0:	83 ec 0c             	sub    esp,0xc
c0018ed3:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c0018eda:	e8 f7 eb fe ff       	call   c0007ad6 <rfree>
c0018edf:	83 c4 10             	add    esp,0x10
c0018ee2:	83 ec 04             	sub    esp,0x4
c0018ee5:	6a 00                	push   0x0
c0018ee7:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c0018eee:	50                   	push   eax
c0018eef:	6a 00                	push   0x0
c0018ef1:	e8 02 ad fe ff       	call   c0003bf8 <f_mount>
c0018ef6:	83 c4 10             	add    esp,0x10
c0018ef9:	b0 00                	mov    al,0x0
c0018efb:	eb 1b                	jmp    c0018f18 <FAT::tryMount(LogicalDisk*, int)+0x214>
c0018efd:	8d 76 00             	lea    esi,[esi+0x0]
c0018f00:	a1 20 a5 02 c0       	mov    eax,ds:0xc002a520
c0018f05:	83 c0 01             	add    eax,0x1
c0018f08:	a3 20 a5 02 c0       	mov    ds:0xc002a520,eax
c0018f0d:	8d 76 00             	lea    esi,[esi+0x0]
c0018f10:	8a 84 24 3f 03 00 00 	mov    al,BYTE PTR [esp+0x33f]
c0018f17:	90                   	nop
c0018f18:	81 c4 4c 03 00 00    	add    esp,0x34c
c0018f1e:	c3                   	ret    
c0018f1f:	90                   	nop

c0018f20 <FAT::allocateSwapfile(char const*, int)>:
c0018f20:	55                   	push   ebp
c0018f21:	57                   	push   edi
c0018f22:	56                   	push   esi
c0018f23:	53                   	push   ebx
c0018f24:	81 ec 3c 04 00 00    	sub    esp,0x43c
c0018f2a:	c7 84 24 20 04 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x420],0x114
c0018f35:	83 ec 0c             	sub    esp,0xc
c0018f38:	ff b4 24 2c 04 00 00 	push   DWORD PTR [esp+0x42c]
c0018f3f:	e8 72 eb fe ff       	call   c0007ab6 <malloc>
c0018f44:	83 c4 10             	add    esp,0x10
c0018f47:	89 c7                	mov    edi,eax
c0018f49:	a1 90 a4 02 c0       	mov    eax,ds:0xc002a490
c0018f4e:	83 ec 04             	sub    esp,0x4
c0018f51:	50                   	push   eax
c0018f52:	ff b4 24 5c 04 00 00 	push   DWORD PTR [esp+0x45c]
c0018f59:	57                   	push   edi
c0018f5a:	e8 79 27 ff ff       	call   c000b6d8 <File::File(char const*, Process*)>
c0018f5f:	83 c4 10             	add    esp,0x10
c0018f62:	89 bc 24 2c 04 00 00 	mov    DWORD PTR [esp+0x42c],edi
c0018f69:	83 ec 04             	sub    esp,0x4
c0018f6c:	8d 44 24 13          	lea    eax,[esp+0x13]
c0018f70:	50                   	push   eax
c0018f71:	8d 44 24 18          	lea    eax,[esp+0x18]
c0018f75:	50                   	push   eax
c0018f76:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0018f7d:	e8 14 2b ff ff       	call   c000ba96 <File::stat(unsigned long long*, bool*)>
c0018f82:	83 c4 10             	add    esp,0x10
c0018f85:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c0018f8c:	c1 e0 14             	shl    eax,0x14
c0018f8f:	89 c7                	mov    edi,eax
c0018f91:	89 c5                	mov    ebp,eax
c0018f93:	c1 fd 1f             	sar    ebp,0x1f
c0018f96:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018f9a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0018f9e:	89 f9                	mov    ecx,edi
c0018fa0:	31 c1                	xor    ecx,eax
c0018fa2:	89 cb                	mov    ebx,ecx
c0018fa4:	89 e9                	mov    ecx,ebp
c0018fa6:	31 d1                	xor    ecx,edx
c0018fa8:	89 ce                	mov    esi,ecx
c0018faa:	89 f0                	mov    eax,esi
c0018fac:	09 d8                	or     eax,ebx
c0018fae:	0f 84 9c 00 00 00    	je     c0019050 <FAT::allocateSwapfile(char const*, int)+0x130>
c0018fb4:	83 ec 0c             	sub    esp,0xc
c0018fb7:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0018fbe:	e8 9f 29 ff ff       	call   c000b962 <File::unlink()>
c0018fc3:	83 c4 10             	add    esp,0x10
c0018fc6:	83 ec 08             	sub    esp,0x8
c0018fc9:	6a 12                	push   0x12
c0018fcb:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0018fd2:	e8 bd 27 ff ff       	call   c000b794 <File::open(FileOpenMode)>
c0018fd7:	83 c4 10             	add    esp,0x10
c0018fda:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0018fe1:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c0018fe7:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c0018fee:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c0018ff5:	c1 e0 14             	shl    eax,0x14
c0018ff8:	83 ec 04             	sub    esp,0x4
c0018ffb:	6a 01                	push   0x1
c0018ffd:	50                   	push   eax
c0018ffe:	ff b4 24 34 04 00 00 	push   DWORD PTR [esp+0x434]
c0019005:	e8 a6 c2 fe ff       	call   c00052b0 <f_expand>
c001900a:	83 c4 10             	add    esp,0x10
c001900d:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0019014:	8b 00                	mov    eax,DWORD PTR [eax]
c0019016:	83 c0 10             	add    eax,0x10
c0019019:	8b 00                	mov    eax,DWORD PTR [eax]
c001901b:	83 ec 0c             	sub    esp,0xc
c001901e:	8d 54 24 24          	lea    edx,[esp+0x24]
c0019022:	52                   	push   edx
c0019023:	8d 54 24 30          	lea    edx,[esp+0x30]
c0019027:	52                   	push   edx
c0019028:	6a 00                	push   0x0
c001902a:	68 00 04 00 00       	push   0x400
c001902f:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c0019036:	ff d0                	call   eax
c0019038:	83 c4 20             	add    esp,0x20
c001903b:	83 ec 0c             	sub    esp,0xc
c001903e:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0019045:	e8 a8 27 ff ff       	call   c000b7f2 <File::close()>
c001904a:	83 c4 10             	add    esp,0x10
c001904d:	8d 76 00             	lea    esi,[esi+0x0]
c0019050:	83 ec 08             	sub    esp,0x8
c0019053:	6a 01                	push   0x1
c0019055:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001905c:	e8 33 27 ff ff       	call   c000b794 <File::open(FileOpenMode)>
c0019061:	83 c4 10             	add    esp,0x10
c0019064:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001906b:	8b 00                	mov    eax,DWORD PTR [eax]
c001906d:	83 c0 0c             	add    eax,0xc
c0019070:	8b 00                	mov    eax,DWORD PTR [eax]
c0019072:	83 ec 0c             	sub    esp,0xc
c0019075:	8d 54 24 24          	lea    edx,[esp+0x24]
c0019079:	52                   	push   edx
c001907a:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c001907e:	52                   	push   edx
c001907f:	6a 00                	push   0x0
c0019081:	6a 04                	push   0x4
c0019083:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c001908a:	ff d0                	call   eax
c001908c:	83 c4 20             	add    esp,0x20
c001908f:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0019096:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c001909c:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c00190a3:	8b 84 24 28 04 00 00 	mov    eax,DWORD PTR [esp+0x428]
c00190aa:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c00190ad:	89 84 24 24 04 00 00 	mov    DWORD PTR [esp+0x424],eax
c00190b4:	83 ec 0c             	sub    esp,0xc
c00190b7:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c00190be:	e8 2f 27 ff ff       	call   c000b7f2 <File::close()>
c00190c3:	83 c4 10             	add    esp,0x10
c00190c6:	8b 84 24 24 04 00 00 	mov    eax,DWORD PTR [esp+0x424]
c00190cd:	ba 00 00 00 00       	mov    edx,0x0
c00190d2:	81 c4 3c 04 00 00    	add    esp,0x43c
c00190d8:	5b                   	pop    ebx
c00190d9:	5e                   	pop    esi
c00190da:	5f                   	pop    edi
c00190db:	5d                   	pop    ebp
c00190dc:	c3                   	ret    
c00190dd:	90                   	nop
c00190de:	66 90                	xchg   ax,ax

c00190e0 <FAT::readDir(void*, unsigned long, void*, int*)>:
c00190e0:	57                   	push   edi
c00190e1:	56                   	push   esi
c00190e2:	53                   	push   ebx
c00190e3:	81 ec 50 02 00 00    	sub    esp,0x250
c00190e9:	83 bc 24 64 02 00 00 00 	cmp    DWORD PTR [esp+0x264],0x0
c00190f1:	74 0d                	je     c0019100 <FAT::readDir(void*, unsigned long, void*, int*)+0x20>
c00190f3:	83 bc 24 70 02 00 00 00 	cmp    DWORD PTR [esp+0x270],0x0
c00190fb:	75 0f                	jne    c001910c <FAT::readDir(void*, unsigned long, void*, int*)+0x2c>
c00190fd:	8d 76 00             	lea    esi,[esi+0x0]
c0019100:	b8 04 00 00 00       	mov    eax,0x4
c0019105:	e9 3a 01 00 00       	jmp    c0019244 <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c001910a:	66 90                	xchg   ax,ax
c001910c:	83 ec 08             	sub    esp,0x8
c001910f:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c0019116:	50                   	push   eax
c0019117:	ff b4 24 70 02 00 00 	push   DWORD PTR [esp+0x270]
c001911e:	e8 d3 b5 fe ff       	call   c00046f6 <f_readdir>
c0019123:	83 c4 10             	add    esp,0x10
c0019126:	89 84 24 4c 02 00 00 	mov    DWORD PTR [esp+0x24c],eax
c001912d:	66 c7 44 24 08 00 00 	mov    WORD PTR [esp+0x8],0x0
c0019134:	83 ec 0c             	sub    esp,0xc
c0019137:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c001913e:	83 c0 16             	add    eax,0x16
c0019141:	50                   	push   eax
c0019142:	e8 29 74 fe ff       	call   c0000570 <strlen>
c0019147:	83 c4 10             	add    esp,0x10
c001914a:	ba 00 00 00 00       	mov    edx,0x0
c001914f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019153:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0019157:	8a 84 24 20 01 00 00 	mov    al,BYTE PTR [esp+0x120]
c001915e:	0f b6 c0             	movzx  eax,al
c0019161:	83 e0 10             	and    eax,0x10
c0019164:	74 0a                	je     c0019170 <FAT::readDir(void*, unsigned long, void*, int*)+0x90>
c0019166:	b8 02 00 00 00       	mov    eax,0x2
c001916b:	eb 0b                	jmp    c0019178 <FAT::readDir(void*, unsigned long, void*, int*)+0x98>
c001916d:	8d 76 00             	lea    esi,[esi+0x0]
c0019170:	b8 01 00 00 00       	mov    eax,0x1
c0019175:	8d 76 00             	lea    esi,[esi+0x0]
c0019178:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001917c:	83 ec 08             	sub    esp,0x8
c001917f:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c0019186:	83 c0 16             	add    eax,0x16
c0019189:	50                   	push   eax
c001918a:	8d 44 24 14          	lea    eax,[esp+0x14]
c001918e:	83 c0 10             	add    eax,0x10
c0019191:	50                   	push   eax
c0019192:	e8 a9 74 fe ff       	call   c0000640 <strcpy>
c0019197:	83 c4 10             	add    esp,0x10
c001919a:	8b 84 24 6c 02 00 00 	mov    eax,DWORD PTR [esp+0x26c]
c00191a1:	89 84 24 48 02 00 00 	mov    DWORD PTR [esp+0x248],eax
c00191a8:	8d 44 24 08          	lea    eax,[esp+0x8]
c00191ac:	89 84 24 44 02 00 00 	mov    DWORD PTR [esp+0x244],eax
c00191b3:	8b 84 24 68 02 00 00 	mov    eax,DWORD PTR [esp+0x268]
c00191ba:	89 84 24 40 02 00 00 	mov    DWORD PTR [esp+0x240],eax
c00191c1:	8b 84 24 48 02 00 00 	mov    eax,DWORD PTR [esp+0x248]
c00191c8:	89 84 24 3c 02 00 00 	mov    DWORD PTR [esp+0x23c],eax
c00191cf:	8b 84 24 44 02 00 00 	mov    eax,DWORD PTR [esp+0x244]
c00191d6:	8b 94 24 48 02 00 00 	mov    edx,DWORD PTR [esp+0x248]
c00191dd:	8b 8c 24 40 02 00 00 	mov    ecx,DWORD PTR [esp+0x240]
c00191e4:	89 c6                	mov    esi,eax
c00191e6:	89 d7                	mov    edi,edx
c00191e8:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00191ea:	89 c8                	mov    eax,ecx
c00191ec:	89 fa                	mov    edx,edi
c00191ee:	89 f3                	mov    ebx,esi
c00191f0:	89 9c 24 38 02 00 00 	mov    DWORD PTR [esp+0x238],ebx
c00191f7:	89 94 24 34 02 00 00 	mov    DWORD PTR [esp+0x234],edx
c00191fe:	89 84 24 30 02 00 00 	mov    DWORD PTR [esp+0x230],eax
c0019205:	8b 84 24 70 02 00 00 	mov    eax,DWORD PTR [esp+0x270]
c001920c:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c0019212:	8a 84 24 2e 01 00 00 	mov    al,BYTE PTR [esp+0x12e]
c0019219:	0f be c0             	movsx  eax,al
c001921c:	85 c0                	test   eax,eax
c001921e:	75 08                	jne    c0019228 <FAT::readDir(void*, unsigned long, void*, int*)+0x148>
c0019220:	b8 07 00 00 00       	mov    eax,0x7
c0019225:	eb 1d                	jmp    c0019244 <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c0019227:	90                   	nop
c0019228:	8b 84 24 4c 02 00 00 	mov    eax,DWORD PTR [esp+0x24c]
c001922f:	85 c0                	test   eax,eax
c0019231:	75 09                	jne    c001923c <FAT::readDir(void*, unsigned long, void*, int*)+0x15c>
c0019233:	b8 00 00 00 00       	mov    eax,0x0
c0019238:	eb 0a                	jmp    c0019244 <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c001923a:	66 90                	xchg   ax,ax
c001923c:	b8 01 00 00 00       	mov    eax,0x1
c0019241:	8d 76 00             	lea    esi,[esi+0x0]
c0019244:	81 c4 50 02 00 00    	add    esp,0x250
c001924a:	5b                   	pop    ebx
c001924b:	5e                   	pop    esi
c001924c:	5f                   	pop    edi
c001924d:	c3                   	ret    
c001924e:	66 90                	xchg   ax,ax

c0019250 <FAT::read(void*, unsigned long, void*, int*)>:
c0019250:	83 ec 1c             	sub    esp,0x1c
c0019253:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0019258:	74 0a                	je     c0019264 <FAT::read(void*, unsigned long, void*, int*)+0x14>
c001925a:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c001925f:	75 0b                	jne    c001926c <FAT::read(void*, unsigned long, void*, int*)+0x1c>
c0019261:	8d 76 00             	lea    esi,[esi+0x0]
c0019264:	b8 04 00 00 00       	mov    eax,0x4
c0019269:	eb 41                	jmp    c00192ac <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c001926b:	90                   	nop
c001926c:	8d 44 24 08          	lea    eax,[esp+0x8]
c0019270:	50                   	push   eax
c0019271:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0019275:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0019279:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001927d:	e8 9b ac fe ff       	call   c0003f1d <f_read>
c0019282:	83 c4 10             	add    esp,0x10
c0019285:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019289:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001928d:	89 c2                	mov    edx,eax
c001928f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0019293:	89 10                	mov    DWORD PTR [eax],edx
c0019295:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019299:	85 c0                	test   eax,eax
c001929b:	75 07                	jne    c00192a4 <FAT::read(void*, unsigned long, void*, int*)+0x54>
c001929d:	b8 00 00 00 00       	mov    eax,0x0
c00192a2:	eb 08                	jmp    c00192ac <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c00192a4:	b8 01 00 00 00       	mov    eax,0x1
c00192a9:	8d 76 00             	lea    esi,[esi+0x0]
c00192ac:	83 c4 1c             	add    esp,0x1c
c00192af:	c3                   	ret    

c00192b0 <FAT::write(void*, unsigned long, void*, int*)>:
c00192b0:	83 ec 1c             	sub    esp,0x1c
c00192b3:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c00192b8:	74 0a                	je     c00192c4 <FAT::write(void*, unsigned long, void*, int*)+0x14>
c00192ba:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c00192bf:	75 0b                	jne    c00192cc <FAT::write(void*, unsigned long, void*, int*)+0x1c>
c00192c1:	8d 76 00             	lea    esi,[esi+0x0]
c00192c4:	b8 04 00 00 00       	mov    eax,0x4
c00192c9:	eb 41                	jmp    c001930c <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c00192cb:	90                   	nop
c00192cc:	8d 44 24 08          	lea    eax,[esp+0x8]
c00192d0:	50                   	push   eax
c00192d1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00192d5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00192d9:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00192dd:	e8 3a ae fe ff       	call   c000411c <f_write>
c00192e2:	83 c4 10             	add    esp,0x10
c00192e5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00192e9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00192ed:	89 c2                	mov    edx,eax
c00192ef:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00192f3:	89 10                	mov    DWORD PTR [eax],edx
c00192f5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00192f9:	85 c0                	test   eax,eax
c00192fb:	75 07                	jne    c0019304 <FAT::write(void*, unsigned long, void*, int*)+0x54>
c00192fd:	b8 00 00 00 00       	mov    eax,0x0
c0019302:	eb 08                	jmp    c001930c <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c0019304:	b8 01 00 00 00       	mov    eax,0x1
c0019309:	8d 76 00             	lea    esi,[esi+0x0]
c001930c:	83 c4 1c             	add    esp,0x1c
c001930f:	c3                   	ret    

c0019310 <FAT::close(void*)>:
c0019310:	83 ec 1c             	sub    esp,0x1c
c0019313:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0019318:	75 0a                	jne    c0019324 <FAT::close(void*)+0x14>
c001931a:	b8 04 00 00 00       	mov    eax,0x4
c001931f:	eb 3f                	jmp    c0019360 <FAT::close(void*)+0x50>
c0019321:	8d 76 00             	lea    esi,[esi+0x0]
c0019324:	83 ec 0c             	sub    esp,0xc
c0019327:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001932b:	e8 f9 b0 fe ff       	call   c0004429 <f_close>
c0019330:	83 c4 10             	add    esp,0x10
c0019333:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019337:	83 ec 0c             	sub    esp,0xc
c001933a:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001933e:	e8 83 e7 fe ff       	call   c0007ac6 <free>
c0019343:	83 c4 10             	add    esp,0x10
c0019346:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001934a:	85 c0                	test   eax,eax
c001934c:	75 0a                	jne    c0019358 <FAT::close(void*)+0x48>
c001934e:	b8 00 00 00 00       	mov    eax,0x0
c0019353:	eb 0b                	jmp    c0019360 <FAT::close(void*)+0x50>
c0019355:	8d 76 00             	lea    esi,[esi+0x0]
c0019358:	b8 01 00 00 00       	mov    eax,0x1
c001935d:	8d 76 00             	lea    esi,[esi+0x0]
c0019360:	83 c4 1c             	add    esp,0x1c
c0019363:	c3                   	ret    

c0019364 <FAT::closeDir(void*)>:
c0019364:	83 ec 1c             	sub    esp,0x1c
c0019367:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001936c:	75 0a                	jne    c0019378 <FAT::closeDir(void*)+0x14>
c001936e:	b8 04 00 00 00       	mov    eax,0x4
c0019373:	eb 3f                	jmp    c00193b4 <FAT::closeDir(void*)+0x50>
c0019375:	8d 76 00             	lea    esi,[esi+0x0]
c0019378:	83 ec 0c             	sub    esp,0xc
c001937b:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001937f:	e8 50 b3 fe ff       	call   c00046d4 <f_closedir>
c0019384:	83 c4 10             	add    esp,0x10
c0019387:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001938b:	83 ec 0c             	sub    esp,0xc
c001938e:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019392:	e8 2f e7 fe ff       	call   c0007ac6 <free>
c0019397:	83 c4 10             	add    esp,0x10
c001939a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001939e:	85 c0                	test   eax,eax
c00193a0:	75 0a                	jne    c00193ac <FAT::closeDir(void*)+0x48>
c00193a2:	b8 00 00 00 00       	mov    eax,0x0
c00193a7:	eb 0b                	jmp    c00193b4 <FAT::closeDir(void*)+0x50>
c00193a9:	8d 76 00             	lea    esi,[esi+0x0]
c00193ac:	b8 01 00 00 00       	mov    eax,0x1
c00193b1:	8d 76 00             	lea    esi,[esi+0x0]
c00193b4:	83 c4 1c             	add    esp,0x1c
c00193b7:	c3                   	ret    

c00193b8 <FAT::truncate(void*, unsigned long long)>:
c00193b8:	83 ec 2c             	sub    esp,0x2c
c00193bb:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00193bf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00193c3:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00193c7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00193cb:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c00193d0:	75 0a                	jne    c00193dc <FAT::truncate(void*, unsigned long long)+0x24>
c00193d2:	b8 04 00 00 00       	mov    eax,0x4
c00193d7:	eb 47                	jmp    c0019420 <FAT::truncate(void*, unsigned long long)+0x68>
c00193d9:	8d 76 00             	lea    esi,[esi+0x0]
c00193dc:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00193e0:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c00193e3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00193e7:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00193ef:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00193f3:	83 ec 08             	sub    esp,0x8
c00193f6:	50                   	push   eax
c00193f7:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00193fb:	e8 58 b0 fe ff       	call   c0004458 <f_lseek>
c0019400:	83 c4 10             	add    esp,0x10
c0019403:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0019407:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001940b:	85 c0                	test   eax,eax
c001940d:	75 09                	jne    c0019418 <FAT::truncate(void*, unsigned long long)+0x60>
c001940f:	b8 00 00 00 00       	mov    eax,0x0
c0019414:	eb 0a                	jmp    c0019420 <FAT::truncate(void*, unsigned long long)+0x68>
c0019416:	66 90                	xchg   ax,ax
c0019418:	b8 01 00 00 00       	mov    eax,0x1
c001941d:	8d 76 00             	lea    esi,[esi+0x0]
c0019420:	83 c4 2c             	add    esp,0x2c
c0019423:	c3                   	ret    

c0019424 <FAT::seek(void*, unsigned long long)>:
c0019424:	83 ec 2c             	sub    esp,0x2c
c0019427:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001942b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001942f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0019433:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019437:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c001943c:	75 0a                	jne    c0019448 <FAT::seek(void*, unsigned long long)+0x24>
c001943e:	b8 04 00 00 00       	mov    eax,0x4
c0019443:	eb 33                	jmp    c0019478 <FAT::seek(void*, unsigned long long)+0x54>
c0019445:	8d 76 00             	lea    esi,[esi+0x0]
c0019448:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001944c:	83 ec 08             	sub    esp,0x8
c001944f:	50                   	push   eax
c0019450:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0019454:	e8 ff af fe ff       	call   c0004458 <f_lseek>
c0019459:	83 c4 10             	add    esp,0x10
c001945c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0019460:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019464:	85 c0                	test   eax,eax
c0019466:	75 08                	jne    c0019470 <FAT::seek(void*, unsigned long long)+0x4c>
c0019468:	b8 00 00 00 00       	mov    eax,0x0
c001946d:	eb 09                	jmp    c0019478 <FAT::seek(void*, unsigned long long)+0x54>
c001946f:	90                   	nop
c0019470:	b8 01 00 00 00       	mov    eax,0x1
c0019475:	8d 76 00             	lea    esi,[esi+0x0]
c0019478:	83 c4 2c             	add    esp,0x2c
c001947b:	c3                   	ret    

c001947c <fatWrapperReadDisk>:
c001947c:	53                   	push   ebx
c001947d:	83 ec 18             	sub    esp,0x18
c0019480:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019484:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0019488:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001948d:	8b 0c 85 e0 94 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd6b20]
c0019494:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0019498:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001949c:	ba 00 00 00 00       	mov    edx,0x0
c00194a1:	83 ec 0c             	sub    esp,0xc
c00194a4:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00194a8:	53                   	push   ebx
c00194a9:	52                   	push   edx
c00194aa:	50                   	push   eax
c00194ab:	51                   	push   ecx
c00194ac:	e8 13 45 ff ff       	call   c000d9c4 <LogicalDisk::read(unsigned long long, int, void*)>
c00194b1:	83 c4 20             	add    esp,0x20
c00194b4:	83 c4 18             	add    esp,0x18
c00194b7:	5b                   	pop    ebx
c00194b8:	c3                   	ret    
c00194b9:	8d 76 00             	lea    esi,[esi+0x0]

c00194bc <fatWrapperWriteDisk>:
c00194bc:	53                   	push   ebx
c00194bd:	83 ec 18             	sub    esp,0x18
c00194c0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00194c4:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00194c8:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00194cd:	8b 0c 85 e0 94 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd6b20]
c00194d4:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00194d8:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00194dc:	ba 00 00 00 00       	mov    edx,0x0
c00194e1:	83 ec 0c             	sub    esp,0xc
c00194e4:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00194e8:	53                   	push   ebx
c00194e9:	52                   	push   edx
c00194ea:	50                   	push   eax
c00194eb:	51                   	push   ecx
c00194ec:	e8 3f 45 ff ff       	call   c000da30 <LogicalDisk::write(unsigned long long, int, void*)>
c00194f1:	83 c4 20             	add    esp,0x20
c00194f4:	83 c4 18             	add    esp,0x18
c00194f7:	5b                   	pop    ebx
c00194f8:	c3                   	ret    
c00194f9:	8d 76 00             	lea    esi,[esi+0x0]

c00194fc <fatWrapperIoctl>:
c00194fc:	53                   	push   ebx
c00194fd:	83 ec 28             	sub    esp,0x28
c0019500:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0019504:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0019508:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c001950c:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0019510:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019515:	83 f8 02             	cmp    eax,0x2
c0019518:	75 32                	jne    c001954c <fatWrapperIoctl+0x50>
c001951a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001951e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0019522:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019527:	8b 04 85 e0 94 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6b20]
c001952e:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0019534:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001953a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001953e:	66 89 02             	mov    WORD PTR [edx],ax
c0019541:	b8 00 00 00 00       	mov    eax,0x0
c0019546:	e9 c5 00 00 00       	jmp    c0019610 <fatWrapperIoctl+0x114>
c001954b:	90                   	nop
c001954c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019551:	83 f8 01             	cmp    eax,0x1
c0019554:	75 6a                	jne    c00195c0 <fatWrapperIoctl+0xc4>
c0019556:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001955a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001955e:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019563:	8b 04 85 e0 94 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6b20]
c001956a:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0019570:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c0019576:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c001957c:	89 c8                	mov    eax,ecx
c001957e:	89 da                	mov    edx,ebx
c0019580:	0f a4 c2 0a          	shld   edx,eax,0xa
c0019584:	c1 e0 0a             	shl    eax,0xa
c0019587:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c001958c:	8b 0c 8d e0 94 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd6b20]
c0019593:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c0019599:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c001959f:	89 cb                	mov    ebx,ecx
c00195a1:	c1 fb 1f             	sar    ebx,0x1f
c00195a4:	53                   	push   ebx
c00195a5:	51                   	push   ecx
c00195a6:	52                   	push   edx
c00195a7:	50                   	push   eax
c00195a8:	e8 73 5b 00 00       	call   c001f120 <__udivdi3>
c00195ad:	83 c4 10             	add    esp,0x10
c00195b0:	89 c2                	mov    edx,eax
c00195b2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00195b6:	89 10                	mov    DWORD PTR [eax],edx
c00195b8:	b8 00 00 00 00       	mov    eax,0x0
c00195bd:	eb 51                	jmp    c0019610 <fatWrapperIoctl+0x114>
c00195bf:	90                   	nop
c00195c0:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00195c5:	85 c0                	test   eax,eax
c00195c7:	75 07                	jne    c00195d0 <fatWrapperIoctl+0xd4>
c00195c9:	b8 00 00 00 00       	mov    eax,0x0
c00195ce:	eb 40                	jmp    c0019610 <fatWrapperIoctl+0x114>
c00195d0:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00195d5:	83 f8 03             	cmp    eax,0x3
c00195d8:	75 1a                	jne    c00195f4 <fatWrapperIoctl+0xf8>
c00195da:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00195de:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00195e2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00195e6:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c00195ec:	b8 00 00 00 00       	mov    eax,0x0
c00195f1:	eb 1d                	jmp    c0019610 <fatWrapperIoctl+0x114>
c00195f3:	90                   	nop
c00195f4:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00195f9:	83 f8 04             	cmp    eax,0x4
c00195fc:	75 0a                	jne    c0019608 <fatWrapperIoctl+0x10c>
c00195fe:	b8 00 00 00 00       	mov    eax,0x0
c0019603:	eb 0b                	jmp    c0019610 <fatWrapperIoctl+0x114>
c0019605:	8d 76 00             	lea    esi,[esi+0x0]
c0019608:	b8 04 00 00 00       	mov    eax,0x4
c001960d:	8d 76 00             	lea    esi,[esi+0x0]
c0019610:	83 c4 28             	add    esp,0x28
c0019613:	5b                   	pop    ebx
c0019614:	c3                   	ret    
c0019615:	90                   	nop
c0019616:	66 90                	xchg   ax,ax

c0019618 <FAT::FAT()>:
c0019618:	83 ec 1c             	sub    esp,0x1c
c001961b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001961f:	83 ec 0c             	sub    esp,0xc
c0019622:	50                   	push   eax
c0019623:	e8 50 1e ff ff       	call   c000b478 <Filesystem::Filesystem()>
c0019628:	83 c4 10             	add    esp,0x10
c001962b:	ba a4 26 02 c0       	mov    edx,0xc00226a4
c0019630:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019634:	89 10                	mov    DWORD PTR [eax],edx
c0019636:	c7 05 20 a5 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002a520,0x0
c0019640:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0019648:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c001964d:	7f 19                	jg     c0019668 <FAT::FAT()+0x50>
c001964f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019653:	c7 04 85 40 a5 02 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffd5ac0],0xffffffff
c001965e:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c0019663:	eb e3                	jmp    c0019648 <FAT::FAT()+0x30>
c0019665:	8d 76 00             	lea    esi,[esi+0x0]
c0019668:	90                   	nop
c0019669:	83 c4 1c             	add    esp,0x1c
c001966c:	c3                   	ret    
c001966d:	90                   	nop
c001966e:	66 90                	xchg   ax,ax

c0019670 <FAT::fixFilepath(char*)>:
c0019670:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019674:	8a 00                	mov    al,BYTE PTR [eax]
c0019676:	0f be c0             	movsx  eax,al
c0019679:	83 f8 40             	cmp    eax,0x40
c001967c:	7e 2e                	jle    c00196ac <FAT::fixFilepath(char*)+0x3c>
c001967e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019682:	8a 00                	mov    al,BYTE PTR [eax]
c0019684:	83 e8 41             	sub    eax,0x41
c0019687:	88 c2                	mov    dl,al
c0019689:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001968d:	88 10                	mov    BYTE PTR [eax],dl
c001968f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019693:	8a 00                	mov    al,BYTE PTR [eax]
c0019695:	0f be c0             	movsx  eax,al
c0019698:	8b 04 85 40 a5 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5ac0]
c001969f:	83 c0 30             	add    eax,0x30
c00196a2:	88 c2                	mov    dl,al
c00196a4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00196a8:	88 10                	mov    BYTE PTR [eax],dl
c00196aa:	66 90                	xchg   ax,ax
c00196ac:	90                   	nop
c00196ad:	c3                   	ret    
c00196ae:	66 90                	xchg   ax,ax

c00196b0 <FAT::open(char const*, void**, FileOpenMode)>:
c00196b0:	81 ec 1c 01 00 00    	sub    esp,0x11c
c00196b6:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c00196be:	74 0c                	je     c00196cc <FAT::open(char const*, void**, FileOpenMode)+0x1c>
c00196c0:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c00196c8:	75 0e                	jne    c00196d8 <FAT::open(char const*, void**, FileOpenMode)+0x28>
c00196ca:	66 90                	xchg   ax,ax
c00196cc:	b8 04 00 00 00       	mov    eax,0x4
c00196d1:	e9 46 01 00 00       	jmp    c001981c <FAT::open(char const*, void**, FileOpenMode)+0x16c>
c00196d6:	66 90                	xchg   ax,ax
c00196d8:	83 ec 08             	sub    esp,0x8
c00196db:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00196e2:	8d 44 24 14          	lea    eax,[esp+0x14]
c00196e6:	50                   	push   eax
c00196e7:	e8 54 6f fe ff       	call   c0000640 <strcpy>
c00196ec:	83 c4 10             	add    esp,0x10
c00196ef:	83 ec 08             	sub    esp,0x8
c00196f2:	8d 44 24 10          	lea    eax,[esp+0x10]
c00196f6:	50                   	push   eax
c00196f7:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00196fe:	e8 6d ff ff ff       	call   c0019670 <FAT::fixFilepath(char*)>
c0019703:	83 c4 10             	add    esp,0x10
c0019706:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c001970e:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0019715:	83 e0 01             	and    eax,0x1
c0019718:	74 12                	je     c001972c <FAT::open(char const*, void**, FileOpenMode)+0x7c>
c001971a:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0019721:	83 c8 01             	or     eax,0x1
c0019724:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c001972b:	90                   	nop
c001972c:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0019733:	83 e0 04             	and    eax,0x4
c0019736:	74 24                	je     c001975c <FAT::open(char const*, void**, FileOpenMode)+0xac>
c0019738:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c001973f:	83 c8 30             	or     eax,0x30
c0019742:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0019749:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0019750:	83 c8 02             	or     eax,0x2
c0019753:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c001975a:	66 90                	xchg   ax,ax
c001975c:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0019763:	83 e0 02             	and    eax,0x2
c0019766:	74 14                	je     c001977c <FAT::open(char const*, void**, FileOpenMode)+0xcc>
c0019768:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c001976f:	83 c8 02             	or     eax,0x2
c0019772:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0019779:	8d 76 00             	lea    esi,[esi+0x0]
c001977c:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0019783:	83 e0 08             	and    eax,0x8
c0019786:	74 14                	je     c001979c <FAT::open(char const*, void**, FileOpenMode)+0xec>
c0019788:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c001978f:	83 c8 04             	or     eax,0x4
c0019792:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0019799:	8d 76 00             	lea    esi,[esi+0x0]
c001979c:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c00197a3:	83 e0 10             	and    eax,0x10
c00197a6:	74 14                	je     c00197bc <FAT::open(char const*, void**, FileOpenMode)+0x10c>
c00197a8:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c00197af:	83 c8 08             	or     eax,0x8
c00197b2:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c00197b9:	8d 76 00             	lea    esi,[esi+0x0]
c00197bc:	83 ec 0c             	sub    esp,0xc
c00197bf:	68 28 02 00 00       	push   0x228
c00197c4:	e8 ed e2 fe ff       	call   c0007ab6 <malloc>
c00197c9:	83 c4 10             	add    esp,0x10
c00197cc:	89 c2                	mov    edx,eax
c00197ce:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c00197d5:	89 10                	mov    DWORD PTR [eax],edx
c00197d7:	0f b6 94 24 0f 01 00 00 	movzx  edx,BYTE PTR [esp+0x10f]
c00197df:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c00197e6:	8b 00                	mov    eax,DWORD PTR [eax]
c00197e8:	83 ec 04             	sub    esp,0x4
c00197eb:	52                   	push   edx
c00197ec:	8d 54 24 10          	lea    edx,[esp+0x10]
c00197f0:	52                   	push   edx
c00197f1:	50                   	push   eax
c00197f2:	e8 63 a4 fe ff       	call   c0003c5a <f_open>
c00197f7:	83 c4 10             	add    esp,0x10
c00197fa:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c0019801:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c0019809:	74 09                	je     c0019814 <FAT::open(char const*, void**, FileOpenMode)+0x164>
c001980b:	b8 01 00 00 00       	mov    eax,0x1
c0019810:	eb 0a                	jmp    c001981c <FAT::open(char const*, void**, FileOpenMode)+0x16c>
c0019812:	66 90                	xchg   ax,ax
c0019814:	b8 00 00 00 00       	mov    eax,0x0
c0019819:	8d 76 00             	lea    esi,[esi+0x0]
c001981c:	81 c4 1c 01 00 00    	add    esp,0x11c
c0019822:	c3                   	ret    
c0019823:	90                   	nop

c0019824 <FAT::openDir(char const*, void**)>:
c0019824:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001982a:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0019832:	74 0c                	je     c0019840 <FAT::openDir(char const*, void**)+0x1c>
c0019834:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c001983c:	75 0e                	jne    c001984c <FAT::openDir(char const*, void**)+0x28>
c001983e:	66 90                	xchg   ax,ax
c0019840:	b8 04 00 00 00       	mov    eax,0x4
c0019845:	e9 82 00 00 00       	jmp    c00198cc <FAT::openDir(char const*, void**)+0xa8>
c001984a:	66 90                	xchg   ax,ax
c001984c:	83 ec 08             	sub    esp,0x8
c001984f:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019856:	8d 44 24 18          	lea    eax,[esp+0x18]
c001985a:	50                   	push   eax
c001985b:	e8 e0 6d fe ff       	call   c0000640 <strcpy>
c0019860:	83 c4 10             	add    esp,0x10
c0019863:	83 ec 08             	sub    esp,0x8
c0019866:	8d 44 24 14          	lea    eax,[esp+0x14]
c001986a:	50                   	push   eax
c001986b:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019872:	e8 f9 fd ff ff       	call   c0019670 <FAT::fixFilepath(char*)>
c0019877:	83 c4 10             	add    esp,0x10
c001987a:	83 ec 0c             	sub    esp,0xc
c001987d:	6a 30                	push   0x30
c001987f:	e8 32 e2 fe ff       	call   c0007ab6 <malloc>
c0019884:	83 c4 10             	add    esp,0x10
c0019887:	89 c2                	mov    edx,eax
c0019889:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0019890:	89 10                	mov    DWORD PTR [eax],edx
c0019892:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0019899:	8b 00                	mov    eax,DWORD PTR [eax]
c001989b:	83 ec 08             	sub    esp,0x8
c001989e:	8d 54 24 14          	lea    edx,[esp+0x14]
c00198a2:	52                   	push   edx
c00198a3:	50                   	push   eax
c00198a4:	e8 60 ad fe ff       	call   c0004609 <f_opendir>
c00198a9:	83 c4 10             	add    esp,0x10
c00198ac:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c00198b3:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c00198bb:	74 07                	je     c00198c4 <FAT::openDir(char const*, void**)+0xa0>
c00198bd:	b8 01 00 00 00       	mov    eax,0x1
c00198c2:	eb 08                	jmp    c00198cc <FAT::openDir(char const*, void**)+0xa8>
c00198c4:	b8 00 00 00 00       	mov    eax,0x0
c00198c9:	8d 76 00             	lea    esi,[esi+0x0]
c00198cc:	81 c4 1c 01 00 00    	add    esp,0x11c
c00198d2:	c3                   	ret    
c00198d3:	90                   	nop

c00198d4 <FAT::stat(char const*, unsigned long long*, bool*)>:
c00198d4:	81 ec 2c 02 00 00    	sub    esp,0x22c
c00198da:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c00198e2:	75 0c                	jne    c00198f0 <FAT::stat(char const*, unsigned long long*, bool*)+0x1c>
c00198e4:	b8 04 00 00 00       	mov    eax,0x4
c00198e9:	e9 d6 00 00 00       	jmp    c00199c4 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c00198ee:	66 90                	xchg   ax,ax
c00198f0:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c00198f8:	75 0a                	jne    c0019904 <FAT::stat(char const*, unsigned long long*, bool*)+0x30>
c00198fa:	b8 04 00 00 00       	mov    eax,0x4
c00198ff:	e9 c0 00 00 00       	jmp    c00199c4 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0019904:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c001990c:	75 0a                	jne    c0019918 <FAT::stat(char const*, unsigned long long*, bool*)+0x44>
c001990e:	b8 04 00 00 00       	mov    eax,0x4
c0019913:	e9 ac 00 00 00       	jmp    c00199c4 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0019918:	83 ec 08             	sub    esp,0x8
c001991b:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0019922:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0019929:	50                   	push   eax
c001992a:	e8 11 6d fe ff       	call   c0000640 <strcpy>
c001992f:	83 c4 10             	add    esp,0x10
c0019932:	83 ec 08             	sub    esp,0x8
c0019935:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c001993c:	50                   	push   eax
c001993d:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0019944:	e8 27 fd ff ff       	call   c0019670 <FAT::fixFilepath(char*)>
c0019949:	83 c4 10             	add    esp,0x10
c001994c:	83 ec 08             	sub    esp,0x8
c001994f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0019953:	50                   	push   eax
c0019954:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c001995b:	50                   	push   eax
c001995c:	e8 27 ae fe ff       	call   c0004788 <f_stat>
c0019961:	83 c4 10             	add    esp,0x10
c0019964:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c001996b:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c0019972:	85 c0                	test   eax,eax
c0019974:	74 0a                	je     c0019980 <FAT::stat(char const*, unsigned long long*, bool*)+0xac>
c0019976:	83 f8 04             	cmp    eax,0x4
c0019979:	74 39                	je     c00199b4 <FAT::stat(char const*, unsigned long long*, bool*)+0xe0>
c001997b:	eb 3f                	jmp    c00199bc <FAT::stat(char const*, unsigned long long*, bool*)+0xe8>
c001997d:	8d 76 00             	lea    esi,[esi+0x0]
c0019980:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0019984:	0f b6 c0             	movzx  eax,al
c0019987:	83 e0 10             	and    eax,0x10
c001998a:	0f 95 c2             	setne  dl
c001998d:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c0019994:	88 10                	mov    BYTE PTR [eax],dl
c0019996:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001999a:	ba 00 00 00 00       	mov    edx,0x0
c001999f:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c00199a6:	89 01                	mov    DWORD PTR [ecx],eax
c00199a8:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00199ab:	b8 00 00 00 00       	mov    eax,0x0
c00199b0:	eb 12                	jmp    c00199c4 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c00199b2:	66 90                	xchg   ax,ax
c00199b4:	b8 02 00 00 00       	mov    eax,0x2
c00199b9:	eb 09                	jmp    c00199c4 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c00199bb:	90                   	nop
c00199bc:	b8 01 00 00 00       	mov    eax,0x1
c00199c1:	8d 76 00             	lea    esi,[esi+0x0]
c00199c4:	81 c4 2c 02 00 00    	add    esp,0x22c
c00199ca:	c3                   	ret    
c00199cb:	90                   	nop

c00199cc <FAT::unlink(char const*)>:
c00199cc:	81 ec 1c 01 00 00    	sub    esp,0x11c
c00199d2:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c00199da:	75 08                	jne    c00199e4 <FAT::unlink(char const*)+0x18>
c00199dc:	b8 04 00 00 00       	mov    eax,0x4
c00199e1:	eb 61                	jmp    c0019a44 <FAT::unlink(char const*)+0x78>
c00199e3:	90                   	nop
c00199e4:	83 ec 08             	sub    esp,0x8
c00199e7:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00199ee:	8d 44 24 18          	lea    eax,[esp+0x18]
c00199f2:	50                   	push   eax
c00199f3:	e8 48 6c fe ff       	call   c0000640 <strcpy>
c00199f8:	83 c4 10             	add    esp,0x10
c00199fb:	83 ec 08             	sub    esp,0x8
c00199fe:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019a02:	50                   	push   eax
c0019a03:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019a0a:	e8 61 fc ff ff       	call   c0019670 <FAT::fixFilepath(char*)>
c0019a0f:	83 c4 10             	add    esp,0x10
c0019a12:	83 ec 0c             	sub    esp,0xc
c0019a15:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019a19:	50                   	push   eax
c0019a1a:	e8 db af fe ff       	call   c00049fa <f_unlink>
c0019a1f:	83 c4 10             	add    esp,0x10
c0019a22:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0019a29:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c0019a30:	85 c0                	test   eax,eax
c0019a32:	75 08                	jne    c0019a3c <FAT::unlink(char const*)+0x70>
c0019a34:	b8 00 00 00 00       	mov    eax,0x0
c0019a39:	eb 09                	jmp    c0019a44 <FAT::unlink(char const*)+0x78>
c0019a3b:	90                   	nop
c0019a3c:	b8 01 00 00 00       	mov    eax,0x1
c0019a41:	8d 76 00             	lea    esi,[esi+0x0]
c0019a44:	81 c4 1c 01 00 00    	add    esp,0x11c
c0019a4a:	c3                   	ret    
c0019a4b:	90                   	nop

c0019a4c <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c0019a4c:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0019a52:	8b 94 24 38 01 00 00 	mov    edx,DWORD PTR [esp+0x138]
c0019a59:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c0019a60:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0019a64:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0019a68:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c0019a70:	75 0a                	jne    c0019a7c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x30>
c0019a72:	b8 04 00 00 00       	mov    eax,0x4
c0019a77:	e9 7c 01 00 00       	jmp    c0019bf8 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1ac>
c0019a7c:	83 ec 08             	sub    esp,0x8
c0019a7f:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0019a86:	8d 44 24 24          	lea    eax,[esp+0x24]
c0019a8a:	50                   	push   eax
c0019a8b:	e8 b0 6b fe ff       	call   c0000640 <strcpy>
c0019a90:	83 c4 10             	add    esp,0x10
c0019a93:	83 ec 08             	sub    esp,0x8
c0019a96:	8d 44 24 20          	lea    eax,[esp+0x20]
c0019a9a:	50                   	push   eax
c0019a9b:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0019aa2:	e8 c9 fb ff ff       	call   c0019670 <FAT::fixFilepath(char*)>
c0019aa7:	83 c4 10             	add    esp,0x10
c0019aaa:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c0019ab2:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c0019aba:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019abf:	83 e0 01             	and    eax,0x1
c0019ac2:	74 14                	je     c0019ad8 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x8c>
c0019ac4:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0019acb:	83 c8 01             	or     eax,0x1
c0019ace:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c0019ad5:	8d 76 00             	lea    esi,[esi+0x0]
c0019ad8:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019add:	83 e0 02             	and    eax,0x2
c0019ae0:	74 12                	je     c0019af4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xa8>
c0019ae2:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0019ae9:	83 c8 20             	or     eax,0x20
c0019aec:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c0019af3:	90                   	nop
c0019af4:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019af9:	83 e0 04             	and    eax,0x4
c0019afc:	74 12                	je     c0019b10 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xc4>
c0019afe:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0019b05:	83 c8 04             	or     eax,0x4
c0019b08:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c0019b0f:	90                   	nop
c0019b10:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019b15:	83 e0 08             	and    eax,0x8
c0019b18:	74 12                	je     c0019b2c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xe0>
c0019b1a:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0019b21:	83 c8 02             	or     eax,0x2
c0019b24:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c0019b2b:	90                   	nop
c0019b2c:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019b31:	83 e0 01             	and    eax,0x1
c0019b34:	74 12                	je     c0019b48 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xfc>
c0019b36:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c0019b3d:	83 c8 01             	or     eax,0x1
c0019b40:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c0019b47:	90                   	nop
c0019b48:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019b4d:	83 e0 02             	and    eax,0x2
c0019b50:	74 12                	je     c0019b64 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x118>
c0019b52:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c0019b59:	83 c8 20             	or     eax,0x20
c0019b5c:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c0019b63:	90                   	nop
c0019b64:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019b69:	83 e0 04             	and    eax,0x4
c0019b6c:	74 12                	je     c0019b80 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x134>
c0019b6e:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c0019b75:	83 c8 04             	or     eax,0x4
c0019b78:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c0019b7f:	90                   	nop
c0019b80:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019b85:	83 e0 08             	and    eax,0x8
c0019b88:	74 12                	je     c0019b9c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x150>
c0019b8a:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c0019b91:	83 c8 02             	or     eax,0x2
c0019b94:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c0019b9b:	90                   	nop
c0019b9c:	8a 94 24 1e 01 00 00 	mov    dl,BYTE PTR [esp+0x11e]
c0019ba3:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0019baa:	09 d0                	or     eax,edx
c0019bac:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c0019bb3:	0f b6 94 24 1e 01 00 00 	movzx  edx,BYTE PTR [esp+0x11e]
c0019bbb:	0f b6 84 24 1f 01 00 00 	movzx  eax,BYTE PTR [esp+0x11f]
c0019bc3:	83 ec 04             	sub    esp,0x4
c0019bc6:	52                   	push   edx
c0019bc7:	50                   	push   eax
c0019bc8:	8d 44 24 24          	lea    eax,[esp+0x24]
c0019bcc:	50                   	push   eax
c0019bcd:	e8 9d b2 fe ff       	call   c0004e6f <f_chmod>
c0019bd2:	83 c4 10             	add    esp,0x10
c0019bd5:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c0019bdc:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c0019be3:	85 c0                	test   eax,eax
c0019be5:	75 09                	jne    c0019bf0 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1a4>
c0019be7:	b8 00 00 00 00       	mov    eax,0x0
c0019bec:	eb 0a                	jmp    c0019bf8 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1ac>
c0019bee:	66 90                	xchg   ax,ax
c0019bf0:	b8 01 00 00 00       	mov    eax,0x1
c0019bf5:	8d 76 00             	lea    esi,[esi+0x0]
c0019bf8:	81 c4 2c 01 00 00    	add    esp,0x12c
c0019bfe:	c3                   	ret    
c0019bff:	90                   	nop

c0019c00 <FAT::rename(char const*, char const*)>:
c0019c00:	81 ec 1c 02 00 00    	sub    esp,0x21c
c0019c06:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c0019c0e:	74 0c                	je     c0019c1c <FAT::rename(char const*, char const*)+0x1c>
c0019c10:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c0019c18:	75 0e                	jne    c0019c28 <FAT::rename(char const*, char const*)+0x28>
c0019c1a:	66 90                	xchg   ax,ax
c0019c1c:	b8 04 00 00 00       	mov    eax,0x4
c0019c21:	e9 9e 00 00 00       	jmp    c0019cc4 <FAT::rename(char const*, char const*)+0xc4>
c0019c26:	66 90                	xchg   ax,ax
c0019c28:	83 ec 08             	sub    esp,0x8
c0019c2b:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0019c32:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0019c39:	50                   	push   eax
c0019c3a:	e8 01 6a fe ff       	call   c0000640 <strcpy>
c0019c3f:	83 c4 10             	add    esp,0x10
c0019c42:	83 ec 08             	sub    esp,0x8
c0019c45:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c0019c4c:	50                   	push   eax
c0019c4d:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0019c54:	e8 17 fa ff ff       	call   c0019670 <FAT::fixFilepath(char*)>
c0019c59:	83 c4 10             	add    esp,0x10
c0019c5c:	83 ec 08             	sub    esp,0x8
c0019c5f:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c0019c66:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019c6a:	50                   	push   eax
c0019c6b:	e8 d0 69 fe ff       	call   c0000640 <strcpy>
c0019c70:	83 c4 10             	add    esp,0x10
c0019c73:	83 ec 08             	sub    esp,0x8
c0019c76:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019c7a:	50                   	push   eax
c0019c7b:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0019c82:	e8 e9 f9 ff ff       	call   c0019670 <FAT::fixFilepath(char*)>
c0019c87:	83 c4 10             	add    esp,0x10
c0019c8a:	83 ec 08             	sub    esp,0x8
c0019c8d:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019c91:	50                   	push   eax
c0019c92:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0019c99:	50                   	push   eax
c0019c9a:	e8 18 b0 fe ff       	call   c0004cb7 <f_rename>
c0019c9f:	83 c4 10             	add    esp,0x10
c0019ca2:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c0019ca9:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c0019cb0:	85 c0                	test   eax,eax
c0019cb2:	75 08                	jne    c0019cbc <FAT::rename(char const*, char const*)+0xbc>
c0019cb4:	b8 00 00 00 00       	mov    eax,0x0
c0019cb9:	eb 09                	jmp    c0019cc4 <FAT::rename(char const*, char const*)+0xc4>
c0019cbb:	90                   	nop
c0019cbc:	b8 01 00 00 00       	mov    eax,0x1
c0019cc1:	8d 76 00             	lea    esi,[esi+0x0]
c0019cc4:	81 c4 1c 02 00 00    	add    esp,0x21c
c0019cca:	c3                   	ret    
c0019ccb:	90                   	nop

c0019ccc <FAT::mkdir(char const*)>:
c0019ccc:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0019cd2:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0019cda:	75 08                	jne    c0019ce4 <FAT::mkdir(char const*)+0x18>
c0019cdc:	b8 04 00 00 00       	mov    eax,0x4
c0019ce1:	eb 61                	jmp    c0019d44 <FAT::mkdir(char const*)+0x78>
c0019ce3:	90                   	nop
c0019ce4:	83 ec 08             	sub    esp,0x8
c0019ce7:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019cee:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019cf2:	50                   	push   eax
c0019cf3:	e8 48 69 fe ff       	call   c0000640 <strcpy>
c0019cf8:	83 c4 10             	add    esp,0x10
c0019cfb:	83 ec 08             	sub    esp,0x8
c0019cfe:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019d02:	50                   	push   eax
c0019d03:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019d0a:	e8 61 f9 ff ff       	call   c0019670 <FAT::fixFilepath(char*)>
c0019d0f:	83 c4 10             	add    esp,0x10
c0019d12:	83 ec 0c             	sub    esp,0xc
c0019d15:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019d19:	50                   	push   eax
c0019d1a:	e8 fd ad fe ff       	call   c0004b1c <f_mkdir>
c0019d1f:	83 c4 10             	add    esp,0x10
c0019d22:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0019d29:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c0019d30:	85 c0                	test   eax,eax
c0019d32:	75 08                	jne    c0019d3c <FAT::mkdir(char const*)+0x70>
c0019d34:	b8 00 00 00 00       	mov    eax,0x0
c0019d39:	eb 09                	jmp    c0019d44 <FAT::mkdir(char const*)+0x78>
c0019d3b:	90                   	nop
c0019d3c:	b8 01 00 00 00       	mov    eax,0x1
c0019d41:	8d 76 00             	lea    esi,[esi+0x0]
c0019d44:	81 c4 1c 01 00 00    	add    esp,0x11c
c0019d4a:	c3                   	ret    
c0019d4b:	90                   	nop

c0019d4c <FAT::exists(char const*)>:
c0019d4c:	81 ec 2c 02 00 00    	sub    esp,0x22c
c0019d52:	83 ec 08             	sub    esp,0x8
c0019d55:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0019d5c:	8d 44 24 10          	lea    eax,[esp+0x10]
c0019d60:	50                   	push   eax
c0019d61:	e8 da 68 fe ff       	call   c0000640 <strcpy>
c0019d66:	83 c4 10             	add    esp,0x10
c0019d69:	83 ec 08             	sub    esp,0x8
c0019d6c:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0019d70:	50                   	push   eax
c0019d71:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0019d78:	e8 f3 f8 ff ff       	call   c0019670 <FAT::fixFilepath(char*)>
c0019d7d:	83 c4 10             	add    esp,0x10
c0019d80:	83 ec 08             	sub    esp,0x8
c0019d83:	8d 84 24 0c 01 00 00 	lea    eax,[esp+0x10c]
c0019d8a:	50                   	push   eax
c0019d8b:	8d 44 24 10          	lea    eax,[esp+0x10]
c0019d8f:	50                   	push   eax
c0019d90:	e8 f3 a9 fe ff       	call   c0004788 <f_stat>
c0019d95:	83 c4 10             	add    esp,0x10
c0019d98:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c0019d9f:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c0019da6:	85 c0                	test   eax,eax
c0019da8:	75 06                	jne    c0019db0 <FAT::exists(char const*)+0x64>
c0019daa:	b0 01                	mov    al,0x1
c0019dac:	eb 06                	jmp    c0019db4 <FAT::exists(char const*)+0x68>
c0019dae:	66 90                	xchg   ax,ax
c0019db0:	b0 00                	mov    al,0x0
c0019db2:	66 90                	xchg   ax,ax
c0019db4:	81 c4 2c 02 00 00    	add    esp,0x22c
c0019dba:	c3                   	ret    
c0019dbb:	90                   	nop

c0019dbc <isoReadDiscSectorHelper>:
c0019dbc:	83 ec 2c             	sub    esp,0x2c
c0019dbf:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0019dc3:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0019dc7:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c0019dcc:	83 e8 41             	sub    eax,0x41
c0019dcf:	8b 0c 85 e0 94 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd6b20]
c0019dd6:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0019dda:	ba 00 00 00 00       	mov    edx,0x0
c0019ddf:	83 ec 0c             	sub    esp,0xc
c0019de2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0019de6:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0019dea:	52                   	push   edx
c0019deb:	50                   	push   eax
c0019dec:	51                   	push   ecx
c0019ded:	e8 d2 3b ff ff       	call   c000d9c4 <LogicalDisk::read(unsigned long long, int, void*)>
c0019df2:	83 c4 20             	add    esp,0x20
c0019df5:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0019df9:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0019dfe:	74 0c                	je     c0019e0c <isoReadDiscSectorHelper+0x50>
c0019e00:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019e04:	c1 e0 0b             	shl    eax,0xb
c0019e07:	eb 0b                	jmp    c0019e14 <isoReadDiscSectorHelper+0x58>
c0019e09:	8d 76 00             	lea    esi,[esi+0x0]
c0019e0c:	b8 00 00 00 00       	mov    eax,0x0
c0019e11:	8d 76 00             	lea    esi,[esi+0x0]
c0019e14:	83 c4 2c             	add    esp,0x2c
c0019e17:	c3                   	ret    

c0019e18 <iso_kprintf>:
c0019e18:	83 ec 0c             	sub    esp,0xc
c0019e1b:	83 ec 08             	sub    esp,0x8
c0019e1e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019e22:	68 52 24 02 c0       	push   0xc0022452
c0019e27:	e8 19 0b ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0019e2c:	83 c4 10             	add    esp,0x10
c0019e2f:	90                   	nop
c0019e30:	83 c4 0c             	add    esp,0xc
c0019e33:	c3                   	ret    

c0019e34 <iso_kprintfd>:
c0019e34:	83 ec 0c             	sub    esp,0xc
c0019e37:	83 ec 08             	sub    esp,0x8
c0019e3a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019e3e:	68 fa 0c 02 c0       	push   0xc0020cfa
c0019e43:	e8 fd 0a ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0019e48:	83 c4 10             	add    esp,0x10
c0019e4b:	90                   	nop
c0019e4c:	83 c4 0c             	add    esp,0xc
c0019e4f:	c3                   	ret    

c0019e50 <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c0019e50:	b8 08 00 00 00       	mov    eax,0x8
c0019e55:	c3                   	ret    

c0019e56 <ISO9660::truncate(void*, unsigned long long)>:
c0019e56:	b8 01 00 00 00       	mov    eax,0x1
c0019e5b:	c3                   	ret    

c0019e5c <ISO9660::getName()>:
c0019e5c:	b8 08 27 02 c0       	mov    eax,0xc0022708
c0019e61:	c3                   	ret    

c0019e62 <ISO9660::closeDir(void*)>:
c0019e62:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019e66:	8b 00                	mov    eax,DWORD PTR [eax]
c0019e68:	ff 60 1c             	jmp    DWORD PTR [eax+0x1c]
c0019e6b:	90                   	nop

c0019e6c <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c0019e6c:	b8 01 00 00 00       	mov    eax,0x1
c0019e71:	c3                   	ret    

c0019e72 <ISO9660::unlink(char const*)>:
c0019e72:	b8 01 00 00 00       	mov    eax,0x1
c0019e77:	c3                   	ret    

c0019e78 <ISO9660::write(void*, unsigned long, void*, int*)>:
c0019e78:	b8 03 00 00 00       	mov    eax,0x3
c0019e7d:	c3                   	ret    

c0019e7e <ISO9660::rename(char const*, char const*)>:
c0019e7e:	b8 01 00 00 00       	mov    eax,0x1
c0019e83:	c3                   	ret    

c0019e84 <ISO9660::mkdir(char const*)>:
c0019e84:	b8 01 00 00 00       	mov    eax,0x1
c0019e89:	c3                   	ret    

c0019e8a <ISO9660::~ISO9660()>:
c0019e8a:	83 ec 0c             	sub    esp,0xc
c0019e8d:	ba 48 28 02 c0       	mov    edx,0xc0022848
c0019e92:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019e96:	89 10                	mov    DWORD PTR [eax],edx
c0019e98:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019e9c:	83 ec 0c             	sub    esp,0xc
c0019e9f:	50                   	push   eax
c0019ea0:	e8 f7 15 ff ff       	call   c000b49c <Filesystem::~Filesystem()>
c0019ea5:	83 c4 10             	add    esp,0x10
c0019ea8:	90                   	nop
c0019ea9:	83 c4 0c             	add    esp,0xc
c0019eac:	c3                   	ret    
c0019ead:	90                   	nop

c0019eae <ISO9660::~ISO9660()>:
c0019eae:	83 ec 0c             	sub    esp,0xc
c0019eb1:	83 ec 0c             	sub    esp,0xc
c0019eb4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019eb8:	e8 cd ff ff ff       	call   c0019e8a <ISO9660::~ISO9660()>
c0019ebd:	83 c4 10             	add    esp,0x10
c0019ec0:	83 ec 08             	sub    esp,0x8
c0019ec3:	6a 08                	push   0x8
c0019ec5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019ec9:	e8 4a 09 ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c0019ece:	83 c4 10             	add    esp,0x10
c0019ed1:	83 c4 0c             	add    esp,0xc
c0019ed4:	c3                   	ret    
c0019ed5:	90                   	nop

c0019ed6 <ISO9660::exists(char const*)>:
c0019ed6:	83 ec 18             	sub    esp,0x18
c0019ed9:	68 23 27 02 c0       	push   0xc0022723
c0019ede:	e8 0a 73 ff ff       	call   c00111ed <KePanic(char const*)>
c0019ee3:	31 c0                	xor    eax,eax
c0019ee5:	83 c4 1c             	add    esp,0x1c
c0019ee8:	c3                   	ret    
c0019ee9:	90                   	nop

c0019eea <ISO9660::open(char const*, void**, FileOpenMode)>:
c0019eea:	56                   	push   esi
c0019eeb:	53                   	push   ebx
c0019eec:	53                   	push   ebx
c0019eed:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0019ef1:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0019ef5:	85 db                	test   ebx,ebx
c0019ef7:	0f 84 ca 00 00 00    	je     c0019fc7 <ISO9660::open(char const*, void**, FileOpenMode)+0xdd>
c0019efd:	85 f6                	test   esi,esi
c0019eff:	0f 84 c2 00 00 00    	je     c0019fc7 <ISO9660::open(char const*, void**, FileOpenMode)+0xdd>
c0019f05:	b8 03 00 00 00       	mov    eax,0x3
c0019f0a:	83 7c 24 1c 01       	cmp    DWORD PTR [esp+0x1c],0x1
c0019f0f:	0f 85 b7 00 00 00    	jne    c0019fcc <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c0019f15:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0019f17:	0f be 05 20 a6 02 c0 	movsx  eax,BYTE PTR ds:0xc002a620
c0019f1e:	38 0d 20 a6 02 c0    	cmp    BYTE PTR ds:0xc002a620,cl
c0019f24:	74 1b                	je     c0019f41 <ISO9660::open(char const*, void**, FileOpenMode)+0x57>
c0019f26:	85 c0                	test   eax,eax
c0019f28:	74 10                	je     c0019f3a <ISO9660::open(char const*, void**, FileOpenMode)+0x50>
c0019f2a:	83 ec 0c             	sub    esp,0xc
c0019f2d:	68 41 27 02 c0       	push   0xc0022741
c0019f32:	e8 b6 72 ff ff       	call   c00111ed <KePanic(char const*)>
c0019f37:	83 c4 10             	add    esp,0x10
c0019f3a:	8a 03                	mov    al,BYTE PTR [ebx]
c0019f3c:	a2 20 a6 02 c0       	mov    ds:0xc002a620,al
c0019f41:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0019f44:	8b 04 85 dc 93 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6c24]
c0019f4b:	85 c0                	test   eax,eax
c0019f4d:	74 09                	je     c0019f58 <ISO9660::open(char const*, void**, FileOpenMode)+0x6e>
c0019f4f:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c0019f56:	74 48                	je     c0019fa0 <ISO9660::open(char const*, void**, FileOpenMode)+0xb6>
c0019f58:	83 ec 0c             	sub    esp,0xc
c0019f5b:	68 51 27 02 c0       	push   0xc0022751
c0019f60:	e8 e0 09 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0019f65:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0019f68:	83 c4 10             	add    esp,0x10
c0019f6b:	8b 04 85 dc 93 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6c24]
c0019f72:	85 c0                	test   eax,eax
c0019f74:	74 17                	je     c0019f8d <ISO9660::open(char const*, void**, FileOpenMode)+0xa3>
c0019f76:	83 ec 0c             	sub    esp,0xc
c0019f79:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c0019f80:	68 71 27 02 c0       	push   0xc0022771
c0019f85:	e8 bb 09 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0019f8a:	83 c4 10             	add    esp,0x10
c0019f8d:	83 ec 0c             	sub    esp,0xc
c0019f90:	0f be 05 20 a6 02 c0 	movsx  eax,BYTE PTR ds:0xc002a620
c0019f97:	50                   	push   eax
c0019f98:	e8 a9 ca fe ff       	call   c0006a46 <init_percd>
c0019f9d:	83 c4 10             	add    esp,0x10
c0019fa0:	83 c3 03             	add    ebx,0x3
c0019fa3:	51                   	push   ecx
c0019fa4:	51                   	push   ecx
c0019fa5:	6a 00                	push   0x0
c0019fa7:	53                   	push   ebx
c0019fa8:	e8 60 c5 fe ff       	call   c000650d <iso_open>
c0019fad:	83 c4 10             	add    esp,0x10
c0019fb0:	89 c2                	mov    edx,eax
c0019fb2:	b8 01 00 00 00       	mov    eax,0x1
c0019fb7:	83 fa ff             	cmp    edx,0xffffffff
c0019fba:	74 10                	je     c0019fcc <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c0019fbc:	83 c2 32             	add    edx,0x32
c0019fbf:	31 c0                	xor    eax,eax
c0019fc1:	01 d2                	add    edx,edx
c0019fc3:	89 16                	mov    DWORD PTR [esi],edx
c0019fc5:	eb 05                	jmp    c0019fcc <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c0019fc7:	b8 04 00 00 00       	mov    eax,0x4
c0019fcc:	5a                   	pop    edx
c0019fcd:	5b                   	pop    ebx
c0019fce:	5e                   	pop    esi
c0019fcf:	c3                   	ret    

c0019fd0 <ISO9660::read(void*, unsigned long, void*, int*)>:
c0019fd0:	53                   	push   ebx
c0019fd1:	83 ec 08             	sub    esp,0x8
c0019fd4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0019fd8:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0019fdc:	85 c0                	test   eax,eax
c0019fde:	74 2d                	je     c001a00d <ISO9660::read(void*, unsigned long, void*, int*)+0x3d>
c0019fe0:	85 db                	test   ebx,ebx
c0019fe2:	74 29                	je     c001a00d <ISO9660::read(void*, unsigned long, void*, int*)+0x3d>
c0019fe4:	b9 02 00 00 00       	mov    ecx,0x2
c0019fe9:	52                   	push   edx
c0019fea:	99                   	cdq    
c0019feb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019fef:	f7 f9                	idiv   ecx
c0019ff1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0019ff5:	83 e8 32             	sub    eax,0x32
c0019ff8:	50                   	push   eax
c0019ff9:	e8 b7 c5 fe ff       	call   c00065b5 <iso_read>
c0019ffe:	83 c4 10             	add    esp,0x10
c001a001:	89 03                	mov    DWORD PTR [ebx],eax
c001a003:	09 d0                	or     eax,edx
c001a005:	0f 94 c0             	sete   al
c001a008:	0f b6 c0             	movzx  eax,al
c001a00b:	eb 05                	jmp    c001a012 <ISO9660::read(void*, unsigned long, void*, int*)+0x42>
c001a00d:	b8 04 00 00 00       	mov    eax,0x4
c001a012:	83 c4 08             	add    esp,0x8
c001a015:	5b                   	pop    ebx
c001a016:	c3                   	ret    
c001a017:	90                   	nop

c001a018 <ISO9660::seek(void*, unsigned long long)>:
c001a018:	57                   	push   edi
c001a019:	56                   	push   esi
c001a01a:	b8 04 00 00 00       	mov    eax,0x4
c001a01f:	51                   	push   ecx
c001a020:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001a024:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001a028:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001a02c:	85 d2                	test   edx,edx
c001a02e:	74 26                	je     c001a056 <ISO9660::seek(void*, unsigned long long)+0x3e>
c001a030:	6a 00                	push   0x0
c001a032:	b9 02 00 00 00       	mov    ecx,0x2
c001a037:	57                   	push   edi
c001a038:	89 d0                	mov    eax,edx
c001a03a:	56                   	push   esi
c001a03b:	99                   	cdq    
c001a03c:	f7 f9                	idiv   ecx
c001a03e:	83 e8 32             	sub    eax,0x32
c001a041:	50                   	push   eax
c001a042:	e8 84 c6 fe ff       	call   c00066cb <iso_seek>
c001a047:	83 c4 10             	add    esp,0x10
c001a04a:	31 f0                	xor    eax,esi
c001a04c:	31 fa                	xor    edx,edi
c001a04e:	09 d0                	or     eax,edx
c001a050:	0f 95 c0             	setne  al
c001a053:	0f b6 c0             	movzx  eax,al
c001a056:	5a                   	pop    edx
c001a057:	5e                   	pop    esi
c001a058:	5f                   	pop    edi
c001a059:	c3                   	ret    

c001a05a <ISO9660::tell(void*, unsigned long long*)>:
c001a05a:	53                   	push   ebx
c001a05b:	83 ec 08             	sub    esp,0x8
c001a05e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a062:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001a066:	85 c0                	test   eax,eax
c001a068:	74 24                	je     c001a08e <ISO9660::tell(void*, unsigned long long*)+0x34>
c001a06a:	85 db                	test   ebx,ebx
c001a06c:	74 20                	je     c001a08e <ISO9660::tell(void*, unsigned long long*)+0x34>
c001a06e:	83 ec 0c             	sub    esp,0xc
c001a071:	b9 02 00 00 00       	mov    ecx,0x2
c001a076:	99                   	cdq    
c001a077:	f7 f9                	idiv   ecx
c001a079:	83 e8 32             	sub    eax,0x32
c001a07c:	50                   	push   eax
c001a07d:	e8 cd c6 fe ff       	call   c000674f <iso_tell>
c001a082:	83 c4 10             	add    esp,0x10
c001a085:	89 03                	mov    DWORD PTR [ebx],eax
c001a087:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c001a08a:	31 c0                	xor    eax,eax
c001a08c:	eb 05                	jmp    c001a093 <ISO9660::tell(void*, unsigned long long*)+0x39>
c001a08e:	b8 04 00 00 00       	mov    eax,0x4
c001a093:	83 c4 08             	add    esp,0x8
c001a096:	5b                   	pop    ebx
c001a097:	c3                   	ret    

c001a098 <ISO9660::stat(void*, unsigned long long*)>:
c001a098:	53                   	push   ebx
c001a099:	83 ec 14             	sub    esp,0x14
c001a09c:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001a0a0:	68 95 27 02 c0       	push   0xc0022795
c001a0a5:	e8 9b 08 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001a0aa:	83 c4 10             	add    esp,0x10
c001a0ad:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001a0b2:	74 2c                	je     c001a0e0 <ISO9660::stat(void*, unsigned long long*)+0x48>
c001a0b4:	85 db                	test   ebx,ebx
c001a0b6:	74 28                	je     c001a0e0 <ISO9660::stat(void*, unsigned long long*)+0x48>
c001a0b8:	83 ec 0c             	sub    esp,0xc
c001a0bb:	b9 02 00 00 00       	mov    ecx,0x2
c001a0c0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a0c4:	99                   	cdq    
c001a0c5:	f7 f9                	idiv   ecx
c001a0c7:	83 e8 32             	sub    eax,0x32
c001a0ca:	50                   	push   eax
c001a0cb:	e8 b0 c6 fe ff       	call   c0006780 <iso_total>
c001a0d0:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001a0d7:	89 03                	mov    DWORD PTR [ebx],eax
c001a0d9:	83 c4 10             	add    esp,0x10
c001a0dc:	31 c0                	xor    eax,eax
c001a0de:	eb 05                	jmp    c001a0e5 <ISO9660::stat(void*, unsigned long long*)+0x4d>
c001a0e0:	b8 04 00 00 00       	mov    eax,0x4
c001a0e5:	83 c4 08             	add    esp,0x8
c001a0e8:	5b                   	pop    ebx
c001a0e9:	c3                   	ret    

c001a0ea <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c001a0ea:	55                   	push   ebp
c001a0eb:	57                   	push   edi
c001a0ec:	56                   	push   esi
c001a0ed:	53                   	push   ebx
c001a0ee:	83 ec 18             	sub    esp,0x18
c001a0f1:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001a0f5:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001a0f9:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001a0fd:	68 9d 27 02 c0       	push   0xc002279d
c001a102:	e8 3e 08 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001a107:	83 c4 10             	add    esp,0x10
c001a10a:	85 ff                	test   edi,edi
c001a10c:	0f 94 c0             	sete   al
c001a10f:	85 f6                	test   esi,esi
c001a111:	0f 94 c2             	sete   dl
c001a114:	09 d0                	or     eax,edx
c001a116:	a8 01                	test   al,0x1
c001a118:	0f 85 dd 00 00 00    	jne    c001a1fb <ISO9660::stat(char const*, unsigned long long*, bool*)+0x111>
c001a11e:	85 db                	test   ebx,ebx
c001a120:	0f 84 d5 00 00 00    	je     c001a1fb <ISO9660::stat(char const*, unsigned long long*, bool*)+0x111>
c001a126:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001a129:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c001a12f:	c7 47 04 00 00 00 00 	mov    DWORD PTR [edi+0x4],0x0
c001a136:	0f be 05 20 a6 02 c0 	movsx  eax,BYTE PTR ds:0xc002a620
c001a13d:	8a 0b                	mov    cl,BYTE PTR [ebx]
c001a13f:	38 0d 20 a6 02 c0    	cmp    BYTE PTR ds:0xc002a620,cl
c001a145:	74 1b                	je     c001a162 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x78>
c001a147:	85 c0                	test   eax,eax
c001a149:	74 10                	je     c001a15b <ISO9660::stat(char const*, unsigned long long*, bool*)+0x71>
c001a14b:	83 ec 0c             	sub    esp,0xc
c001a14e:	68 41 27 02 c0       	push   0xc0022741
c001a153:	e8 95 70 ff ff       	call   c00111ed <KePanic(char const*)>
c001a158:	83 c4 10             	add    esp,0x10
c001a15b:	8a 03                	mov    al,BYTE PTR [ebx]
c001a15d:	a2 20 a6 02 c0       	mov    ds:0xc002a620,al
c001a162:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001a165:	8b 04 85 dc 93 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6c24]
c001a16c:	85 c0                	test   eax,eax
c001a16e:	74 09                	je     c001a179 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8f>
c001a170:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c001a177:	74 51                	je     c001a1ca <ISO9660::stat(char const*, unsigned long long*, bool*)+0xe0>
c001a179:	83 ec 0c             	sub    esp,0xc
c001a17c:	68 a5 27 02 c0       	push   0xc00227a5
c001a181:	e8 bf 07 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001a186:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001a189:	83 c4 10             	add    esp,0x10
c001a18c:	83 3c 85 dc 93 02 c0 00 	cmp    DWORD PTR [eax*4-0x3ffd6c24],0x0
c001a194:	74 21                	je     c001a1b7 <ISO9660::stat(char const*, unsigned long long*, bool*)+0xcd>
c001a196:	83 ec 0c             	sub    esp,0xc
c001a199:	68 c5 27 02 c0       	push   0xc00227c5
c001a19e:	e8 a2 07 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001a1a3:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001a1a6:	83 c4 10             	add    esp,0x10
c001a1a9:	8b 04 85 dc 93 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6c24]
c001a1b0:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c001a1b7:	83 ec 0c             	sub    esp,0xc
c001a1ba:	0f be 05 20 a6 02 c0 	movsx  eax,BYTE PTR ds:0xc002a620
c001a1c1:	50                   	push   eax
c001a1c2:	e8 7f c8 fe ff       	call   c0006a46 <init_percd>
c001a1c7:	83 c4 10             	add    esp,0x10
c001a1ca:	83 c3 03             	add    ebx,0x3
c001a1cd:	52                   	push   edx
c001a1ce:	52                   	push   edx
c001a1cf:	6a 00                	push   0x0
c001a1d1:	53                   	push   ebx
c001a1d2:	e8 36 c3 fe ff       	call   c000650d <iso_open>
c001a1d7:	83 c4 10             	add    esp,0x10
c001a1da:	89 c5                	mov    ebp,eax
c001a1dc:	83 f8 ff             	cmp    eax,0xffffffff
c001a1df:	75 21                	jne    c001a202 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x118>
c001a1e1:	50                   	push   eax
c001a1e2:	50                   	push   eax
c001a1e3:	6a 01                	push   0x1
c001a1e5:	53                   	push   ebx
c001a1e6:	e8 22 c3 fe ff       	call   c000650d <iso_open>
c001a1eb:	83 c4 10             	add    esp,0x10
c001a1ee:	ba 02 00 00 00       	mov    edx,0x2
c001a1f3:	40                   	inc    eax
c001a1f4:	74 2b                	je     c001a221 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x137>
c001a1f6:	c6 06 01             	mov    BYTE PTR [esi],0x1
c001a1f9:	eb 24                	jmp    c001a21f <ISO9660::stat(char const*, unsigned long long*, bool*)+0x135>
c001a1fb:	ba 04 00 00 00       	mov    edx,0x4
c001a200:	eb 1f                	jmp    c001a221 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x137>
c001a202:	83 ec 0c             	sub    esp,0xc
c001a205:	50                   	push   eax
c001a206:	e8 75 c5 fe ff       	call   c0006780 <iso_total>
c001a20b:	c7 47 04 00 00 00 00 	mov    DWORD PTR [edi+0x4],0x0
c001a212:	89 07                	mov    DWORD PTR [edi],eax
c001a214:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001a217:	e8 7b c3 fe ff       	call   c0006597 <iso_close>
c001a21c:	83 c4 10             	add    esp,0x10
c001a21f:	31 d2                	xor    edx,edx
c001a221:	83 c4 0c             	add    esp,0xc
c001a224:	89 d0                	mov    eax,edx
c001a226:	5b                   	pop    ebx
c001a227:	5e                   	pop    esi
c001a228:	5f                   	pop    edi
c001a229:	5d                   	pop    ebp
c001a22a:	c3                   	ret    
c001a22b:	90                   	nop

c001a22c <ISO9660::close(void*)>:
c001a22c:	83 ec 0c             	sub    esp,0xc
c001a22f:	b8 04 00 00 00       	mov    eax,0x4
c001a234:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001a238:	85 d2                	test   edx,edx
c001a23a:	74 1b                	je     c001a257 <ISO9660::close(void*)+0x2b>
c001a23c:	83 ec 0c             	sub    esp,0xc
c001a23f:	b9 02 00 00 00       	mov    ecx,0x2
c001a244:	89 d0                	mov    eax,edx
c001a246:	99                   	cdq    
c001a247:	f7 f9                	idiv   ecx
c001a249:	83 e8 32             	sub    eax,0x32
c001a24c:	50                   	push   eax
c001a24d:	e8 45 c3 fe ff       	call   c0006597 <iso_close>
c001a252:	83 c4 10             	add    esp,0x10
c001a255:	31 c0                	xor    eax,eax
c001a257:	83 c4 0c             	add    esp,0xc
c001a25a:	c3                   	ret    
c001a25b:	90                   	nop

c001a25c <ISO9660::openDir(char const*, void**)>:
c001a25c:	56                   	push   esi
c001a25d:	53                   	push   ebx
c001a25e:	50                   	push   eax
c001a25f:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001a263:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001a267:	85 db                	test   ebx,ebx
c001a269:	0f 84 bd 00 00 00    	je     c001a32c <ISO9660::openDir(char const*, void**)+0xd0>
c001a26f:	85 f6                	test   esi,esi
c001a271:	0f 84 b5 00 00 00    	je     c001a32c <ISO9660::openDir(char const*, void**)+0xd0>
c001a277:	8a 13                	mov    dl,BYTE PTR [ebx]
c001a279:	0f be 05 20 a6 02 c0 	movsx  eax,BYTE PTR ds:0xc002a620
c001a280:	38 15 20 a6 02 c0    	cmp    BYTE PTR ds:0xc002a620,dl
c001a286:	74 1b                	je     c001a2a3 <ISO9660::openDir(char const*, void**)+0x47>
c001a288:	85 c0                	test   eax,eax
c001a28a:	74 10                	je     c001a29c <ISO9660::openDir(char const*, void**)+0x40>
c001a28c:	83 ec 0c             	sub    esp,0xc
c001a28f:	68 41 27 02 c0       	push   0xc0022741
c001a294:	e8 54 6f ff ff       	call   c00111ed <KePanic(char const*)>
c001a299:	83 c4 10             	add    esp,0x10
c001a29c:	8a 03                	mov    al,BYTE PTR [ebx]
c001a29e:	a2 20 a6 02 c0       	mov    ds:0xc002a620,al
c001a2a3:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001a2a6:	8b 04 85 dc 93 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6c24]
c001a2ad:	85 c0                	test   eax,eax
c001a2af:	74 10                	je     c001a2c1 <ISO9660::openDir(char const*, void**)+0x65>
c001a2b1:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c001a2b8:	74 1a                	je     c001a2d4 <ISO9660::openDir(char const*, void**)+0x78>
c001a2ba:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c001a2c1:	83 ec 0c             	sub    esp,0xc
c001a2c4:	0f be 05 20 a6 02 c0 	movsx  eax,BYTE PTR ds:0xc002a620
c001a2cb:	50                   	push   eax
c001a2cc:	e8 75 c7 fe ff       	call   c0006a46 <init_percd>
c001a2d1:	83 c4 10             	add    esp,0x10
c001a2d4:	83 c3 03             	add    ebx,0x3
c001a2d7:	50                   	push   eax
c001a2d8:	50                   	push   eax
c001a2d9:	6a 01                	push   0x1
c001a2db:	53                   	push   ebx
c001a2dc:	e8 2c c2 fe ff       	call   c000650d <iso_open>
c001a2e1:	83 c4 10             	add    esp,0x10
c001a2e4:	89 c3                	mov    ebx,eax
c001a2e6:	83 f8 ff             	cmp    eax,0xffffffff
c001a2e9:	a1 90 a4 02 c0       	mov    eax,ds:0xc002a490
c001a2ee:	75 1c                	jne    c001a30c <ISO9660::openDir(char const*, void**)+0xb0>
c001a2f0:	53                   	push   ebx
c001a2f1:	53                   	push   ebx
c001a2f2:	68 e9 27 02 c0       	push   0xc00227e9
c001a2f7:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001a2fd:	e8 a4 e7 fe ff       	call   c0008aa6 <VgaText::puts(char const*)>
c001a302:	83 c4 10             	add    esp,0x10
c001a305:	b8 01 00 00 00       	mov    eax,0x1
c001a30a:	eb 25                	jmp    c001a331 <ISO9660::openDir(char const*, void**)+0xd5>
c001a30c:	01 db                	add    ebx,ebx
c001a30e:	51                   	push   ecx
c001a30f:	83 c3 65             	add    ebx,0x65
c001a312:	51                   	push   ecx
c001a313:	68 fc 27 02 c0       	push   0xc00227fc
c001a318:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001a31e:	e8 83 e7 fe ff       	call   c0008aa6 <VgaText::puts(char const*)>
c001a323:	89 1e                	mov    DWORD PTR [esi],ebx
c001a325:	83 c4 10             	add    esp,0x10
c001a328:	31 c0                	xor    eax,eax
c001a32a:	eb 05                	jmp    c001a331 <ISO9660::openDir(char const*, void**)+0xd5>
c001a32c:	b8 04 00 00 00       	mov    eax,0x4
c001a331:	5a                   	pop    edx
c001a332:	5b                   	pop    ebx
c001a333:	5e                   	pop    esi
c001a334:	c3                   	ret    
c001a335:	90                   	nop

c001a336 <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c001a336:	55                   	push   ebp
c001a337:	57                   	push   edi
c001a338:	56                   	push   esi
c001a339:	53                   	push   ebx
c001a33a:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001a340:	8b bc 24 3c 01 00 00 	mov    edi,DWORD PTR [esp+0x13c]
c001a347:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c001a34e:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c001a356:	0f 84 e7 00 00 00    	je     c001a443 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x10d>
c001a35c:	85 db                	test   ebx,ebx
c001a35e:	0f 84 df 00 00 00    	je     c001a443 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x10d>
c001a364:	83 ec 0c             	sub    esp,0xc
c001a367:	68 0f 28 02 c0       	push   0xc002280f
c001a36c:	e8 d4 05 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001a371:	8b 84 24 44 01 00 00 	mov    eax,DWORD PTR [esp+0x144]
c001a378:	b9 02 00 00 00       	mov    ecx,0x2
c001a37d:	99                   	cdq    
c001a37e:	f7 f9                	idiv   ecx
c001a380:	83 e8 32             	sub    eax,0x32
c001a383:	89 04 24             	mov    DWORD PTR [esp],eax
c001a386:	e8 47 c4 fe ff       	call   c00067d2 <iso_readdir>
c001a38b:	83 c4 10             	add    esp,0x10
c001a38e:	89 c6                	mov    esi,eax
c001a390:	85 c0                	test   eax,eax
c001a392:	75 37                	jne    c001a3cb <ISO9660::readDir(void*, unsigned long, void*, int*)+0x95>
c001a394:	a1 90 a4 02 c0       	mov    eax,ds:0xc002a490
c001a399:	56                   	push   esi
c001a39a:	56                   	push   esi
c001a39b:	68 1a 28 02 c0       	push   0xc002281a
c001a3a0:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001a3a6:	e8 fb e6 fe ff       	call   c0008aa6 <VgaText::puts(char const*)>
c001a3ab:	83 c4 0c             	add    esp,0xc
c001a3ae:	68 10 01 00 00       	push   0x110
c001a3b3:	6a 00                	push   0x0
c001a3b5:	57                   	push   edi
c001a3b6:	e8 35 61 fe ff       	call   c00004f0 <memset>
c001a3bb:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c001a3c1:	83 c4 10             	add    esp,0x10
c001a3c4:	b8 01 00 00 00       	mov    eax,0x1
c001a3c9:	eb 7d                	jmp    c001a448 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x112>
c001a3cb:	66 c7 04 24 00 00    	mov    WORD PTR [esp],0x0
c001a3d1:	8d 68 08             	lea    ebp,[eax+0x8]
c001a3d4:	83 ec 0c             	sub    esp,0xc
c001a3d7:	55                   	push   ebp
c001a3d8:	e8 93 61 fe ff       	call   c0000570 <strlen>
c001a3dd:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001a3e5:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001a3e9:	83 c4 10             	add    esp,0x10
c001a3ec:	83 7e 04 ff          	cmp    DWORD PTR [esi+0x4],0xffffffff
c001a3f0:	75 0a                	jne    c001a3fc <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc6>
c001a3f2:	b8 02 00 00 00       	mov    eax,0x2
c001a3f7:	83 3e ff             	cmp    DWORD PTR [esi],0xffffffff
c001a3fa:	74 05                	je     c001a401 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xcb>
c001a3fc:	b8 01 00 00 00       	mov    eax,0x1
c001a401:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a405:	50                   	push   eax
c001a406:	50                   	push   eax
c001a407:	55                   	push   ebp
c001a408:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001a40c:	8d 74 24 0c          	lea    esi,[esp+0xc]
c001a410:	50                   	push   eax
c001a411:	e8 2a 62 fe ff       	call   c0000640 <strcpy>
c001a416:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c001a41d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a41f:	c7 03 10 01 00 00    	mov    DWORD PTR [ebx],0x110
c001a425:	5a                   	pop    edx
c001a426:	a1 90 a4 02 c0       	mov    eax,ds:0xc002a490
c001a42b:	59                   	pop    ecx
c001a42c:	68 2d 28 02 c0       	push   0xc002282d
c001a431:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001a437:	e8 6a e6 fe ff       	call   c0008aa6 <VgaText::puts(char const*)>
c001a43c:	83 c4 10             	add    esp,0x10
c001a43f:	31 c0                	xor    eax,eax
c001a441:	eb 05                	jmp    c001a448 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x112>
c001a443:	b8 04 00 00 00       	mov    eax,0x4
c001a448:	81 c4 1c 01 00 00    	add    esp,0x11c
c001a44e:	5b                   	pop    ebx
c001a44f:	5e                   	pop    esi
c001a450:	5f                   	pop    edi
c001a451:	5d                   	pop    ebp
c001a452:	c3                   	ret    

c001a453 <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c001a453:	57                   	push   edi
c001a454:	56                   	push   esi
c001a455:	53                   	push   ebx
c001a456:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001a45a:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001a45e:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001a462:	39 35 24 a6 02 c0    	cmp    DWORD PTR ds:0xc002a624,esi
c001a468:	0f be cb             	movsx  ecx,bl
c001a46b:	75 0b                	jne    c001a478 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x25>
c001a46d:	0f be 05 60 36 02 c0 	movsx  eax,BYTE PTR ds:0xc0023660
c001a474:	39 c8                	cmp    eax,ecx
c001a476:	74 47                	je     c001a4bf <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x6c>
c001a478:	83 ec 0c             	sub    esp,0xc
c001a47b:	31 d2                	xor    edx,edx
c001a47d:	68 40 a6 02 c0       	push   0xc002a640
c001a482:	6a 01                	push   0x1
c001a484:	52                   	push   edx
c001a485:	56                   	push   esi
c001a486:	ff 34 8d dc 93 02 c0 	push   DWORD PTR [ecx*4-0x3ffd6c24]
c001a48d:	e8 32 35 ff ff       	call   c000d9c4 <LogicalDisk::read(unsigned long long, int, void*)>
c001a492:	83 c4 20             	add    esp,0x20
c001a495:	85 c0                	test   eax,eax
c001a497:	75 0e                	jne    c001a4a7 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x54>
c001a499:	89 35 24 a6 02 c0    	mov    DWORD PTR ds:0xc002a624,esi
c001a49f:	88 1d 60 36 02 c0    	mov    BYTE PTR ds:0xc0023660,bl
c001a4a5:	eb 18                	jmp    c001a4bf <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x6c>
c001a4a7:	50                   	push   eax
c001a4a8:	68 00 08 00 00       	push   0x800
c001a4ad:	6a 00                	push   0x0
c001a4af:	57                   	push   edi
c001a4b0:	e8 3b 60 fe ff       	call   c00004f0 <memset>
c001a4b5:	83 c4 10             	add    esp,0x10
c001a4b8:	b8 01 00 00 00       	mov    eax,0x1
c001a4bd:	eb 0e                	jmp    c001a4cd <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x7a>
c001a4bf:	be 40 a6 02 c0       	mov    esi,0xc002a640
c001a4c4:	b9 00 08 00 00       	mov    ecx,0x800
c001a4c9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a4cb:	31 c0                	xor    eax,eax
c001a4cd:	5b                   	pop    ebx
c001a4ce:	5e                   	pop    esi
c001a4cf:	5f                   	pop    edi
c001a4d0:	c3                   	ret    
c001a4d1:	90                   	nop

c001a4d2 <ISO9660::tryMount(LogicalDisk*, int)>:
c001a4d2:	53                   	push   ebx
c001a4d3:	81 ec 0c 08 00 00    	sub    esp,0x80c
c001a4d9:	c7 05 24 a6 02 c0 ef be ad de 	mov    DWORD PTR ds:0xc002a624,0xdeadbeef
c001a4e3:	8b 84 24 1c 08 00 00 	mov    eax,DWORD PTR [esp+0x81c]
c001a4ea:	8d 58 41             	lea    ebx,[eax+0x41]
c001a4ed:	0f be db             	movsx  ebx,bl
c001a4f0:	53                   	push   ebx
c001a4f1:	8d 44 24 08          	lea    eax,[esp+0x8]
c001a4f5:	50                   	push   eax
c001a4f6:	6a 10                	push   0x10
c001a4f8:	e8 56 ff ff ff       	call   c001a453 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001a4fd:	83 c4 10             	add    esp,0x10
c001a500:	31 d2                	xor    edx,edx
c001a502:	85 c0                	test   eax,eax
c001a504:	75 33                	jne    c001a539 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001a506:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c001a50b:	75 2c                	jne    c001a539 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001a50d:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c001a512:	75 25                	jne    c001a539 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001a514:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c001a519:	75 1e                	jne    c001a539 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001a51b:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c001a520:	75 17                	jne    c001a539 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001a522:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c001a527:	75 10                	jne    c001a539 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001a529:	83 ec 0c             	sub    esp,0xc
c001a52c:	53                   	push   ebx
c001a52d:	e8 14 c5 fe ff       	call   c0006a46 <init_percd>
c001a532:	83 c4 10             	add    esp,0x10
c001a535:	40                   	inc    eax
c001a536:	0f 95 c2             	setne  dl
c001a539:	88 d0                	mov    al,dl
c001a53b:	81 c4 08 08 00 00    	add    esp,0x808
c001a541:	5b                   	pop    ebx
c001a542:	c3                   	ret    
c001a543:	90                   	nop

c001a544 <ISO9660::ISO9660()>:
c001a544:	83 ec 0c             	sub    esp,0xc
c001a547:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a54b:	83 ec 0c             	sub    esp,0xc
c001a54e:	50                   	push   eax
c001a54f:	e8 24 0f ff ff       	call   c000b478 <Filesystem::Filesystem()>
c001a554:	83 c4 10             	add    esp,0x10
c001a557:	ba 48 28 02 c0       	mov    edx,0xc0022848
c001a55c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a560:	89 10                	mov    DWORD PTR [eax],edx
c001a562:	e8 f1 c5 fe ff       	call   c0006b58 <fs_iso9660_init>
c001a567:	90                   	nop
c001a568:	83 c4 0c             	add    esp,0xc
c001a56b:	c3                   	ret    

c001a56c <SoundCard::beginPlayback()>:
c001a56c:	c7 44 24 04 ac 28 02 c0 	mov    DWORD PTR [esp+0x4],0xc00228ac
c001a574:	e9 74 6c ff ff       	jmp    c00111ed <KePanic(char const*)>
c001a579:	90                   	nop

c001a57a <SoundCard::stopPlayback()>:
c001a57a:	c7 44 24 04 ac 28 02 c0 	mov    DWORD PTR [esp+0x4],0xc00228ac
c001a582:	e9 66 6c ff ff       	jmp    c00111ed <KePanic(char const*)>
c001a587:	90                   	nop

c001a588 <SoundCard::SoundCard(char const*)>:
c001a588:	83 ec 1c             	sub    esp,0x1c
c001a58b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a58f:	83 ec 08             	sub    esp,0x8
c001a592:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a596:	50                   	push   eax
c001a597:	e8 de 21 ff ff       	call   c000c77a <Device::Device(char const*)>
c001a59c:	83 c4 10             	add    esp,0x10
c001a59f:	ba f8 28 02 c0       	mov    edx,0xc00228f8
c001a5a4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a5a8:	89 10                	mov    DWORD PTR [eax],edx
c001a5aa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a5ae:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c001a5b5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a5b9:	c7 80 dc 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1dc],0x0
c001a5c3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a5c7:	c7 80 e0 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e0],0x0
c001a5d1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a5d5:	c7 80 e4 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e4],0x0
c001a5df:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a5e3:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c001a5ed:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001a5f5:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c001a5fa:	7f 1a                	jg     c001a616 <SoundCard::SoundCard(char const*)+0x8e>
c001a5fc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a600:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001a604:	83 c2 54             	add    edx,0x54
c001a607:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c001a60f:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c001a614:	eb df                	jmp    c001a5f5 <SoundCard::SoundCard(char const*)+0x6d>
c001a616:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a61a:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c001a621:	90                   	nop
c001a622:	83 c4 1c             	add    esp,0x1c
c001a625:	c3                   	ret    

c001a626 <SoundCard::~SoundCard()>:
c001a626:	83 ec 0c             	sub    esp,0xc
c001a629:	ba f8 28 02 c0       	mov    edx,0xc00228f8
c001a62e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a632:	89 10                	mov    DWORD PTR [eax],edx
c001a634:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a638:	83 ec 0c             	sub    esp,0xc
c001a63b:	50                   	push   eax
c001a63c:	e8 a3 1e ff ff       	call   c000c4e4 <Device::~Device()>
c001a641:	83 c4 10             	add    esp,0x10
c001a644:	90                   	nop
c001a645:	83 c4 0c             	add    esp,0xc
c001a648:	c3                   	ret    
c001a649:	90                   	nop

c001a64a <SoundCard::~SoundCard()>:
c001a64a:	83 ec 0c             	sub    esp,0xc
c001a64d:	83 ec 0c             	sub    esp,0xc
c001a650:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a654:	e8 cd ff ff ff       	call   c001a626 <SoundCard::~SoundCard()>
c001a659:	83 c4 10             	add    esp,0x10
c001a65c:	83 ec 08             	sub    esp,0x8
c001a65f:	68 e8 01 00 00       	push   0x1e8
c001a664:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a668:	e8 ab 01 ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c001a66d:	83 c4 10             	add    esp,0x10
c001a670:	83 c4 0c             	add    esp,0xc
c001a673:	c3                   	ret    

c001a674 <SoundCard::configureRates(int, int, int)>:
c001a674:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001a678:	31 c0                	xor    eax,eax
c001a67a:	80 ba d8 01 00 00 00 	cmp    BYTE PTR [edx+0x1d8],0x0
c001a681:	75 20                	jne    c001a6a3 <SoundCard::configureRates(int, int, int)+0x2f>
c001a683:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a687:	89 82 e0 01 00 00    	mov    DWORD PTR [edx+0x1e0],eax
c001a68d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a691:	89 82 dc 01 00 00    	mov    DWORD PTR [edx+0x1dc],eax
c001a697:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a69b:	89 82 e4 01 00 00    	mov    DWORD PTR [edx+0x1e4],eax
c001a6a1:	b0 01                	mov    al,0x1
c001a6a3:	c3                   	ret    

c001a6a4 <SoundCard::getSamples16(int, short*)>:
c001a6a4:	55                   	push   ebp
c001a6a5:	57                   	push   edi
c001a6a6:	31 ff                	xor    edi,edi
c001a6a8:	56                   	push   esi
c001a6a9:	53                   	push   ebx
c001a6aa:	31 db                	xor    ebx,ebx
c001a6ac:	83 ec 10             	sub    esp,0x10
c001a6af:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c001a6b3:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001a6b7:	8d 04 36             	lea    eax,[esi+esi*1]
c001a6ba:	50                   	push   eax
c001a6bb:	6a 00                	push   0x0
c001a6bd:	55                   	push   ebp
c001a6be:	e8 2d 5e fe ff       	call   c00004f0 <memset>
c001a6c3:	83 c4 10             	add    esp,0x10
c001a6c6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a6ca:	8b 84 98 58 01 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x158]
c001a6d1:	85 c0                	test   eax,eax
c001a6d3:	74 1b                	je     c001a6f0 <SoundCard::getSamples16(int, short*)+0x4c>
c001a6d5:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c001a6d9:	75 15                	jne    c001a6f0 <SoundCard::getSamples16(int, short*)+0x4c>
c001a6db:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001a6df:	55                   	push   ebp
c001a6e0:	56                   	push   esi
c001a6e1:	50                   	push   eax
c001a6e2:	e8 f1 02 00 00       	call   c001a9d8 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>
c001a6e7:	83 c4 10             	add    esp,0x10
c001a6ea:	39 c7                	cmp    edi,eax
c001a6ec:	7d 02                	jge    c001a6f0 <SoundCard::getSamples16(int, short*)+0x4c>
c001a6ee:	89 c7                	mov    edi,eax
c001a6f0:	43                   	inc    ebx
c001a6f1:	83 fb 20             	cmp    ebx,0x20
c001a6f4:	75 d0                	jne    c001a6c6 <SoundCard::getSamples16(int, short*)+0x22>
c001a6f6:	83 c4 0c             	add    esp,0xc
c001a6f9:	89 f8                	mov    eax,edi
c001a6fb:	5b                   	pop    ebx
c001a6fc:	5e                   	pop    esi
c001a6fd:	5f                   	pop    edi
c001a6fe:	5d                   	pop    ebp
c001a6ff:	c3                   	ret    

c001a700 <SoundCard::getSamples32(int, int*)>:
c001a700:	55                   	push   ebp
c001a701:	57                   	push   edi
c001a702:	31 ff                	xor    edi,edi
c001a704:	56                   	push   esi
c001a705:	31 f6                	xor    esi,esi
c001a707:	53                   	push   ebx
c001a708:	83 ec 10             	sub    esp,0x10
c001a70b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001a70f:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001a713:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001a717:	c1 e0 02             	shl    eax,0x2
c001a71a:	50                   	push   eax
c001a71b:	6a 00                	push   0x0
c001a71d:	55                   	push   ebp
c001a71e:	e8 cd 5d fe ff       	call   c00004f0 <memset>
c001a723:	83 c4 10             	add    esp,0x10
c001a726:	8b 84 bb 58 01 00 00 	mov    eax,DWORD PTR [ebx+edi*4+0x158]
c001a72d:	85 c0                	test   eax,eax
c001a72f:	74 1b                	je     c001a74c <SoundCard::getSamples32(int, int*)+0x4c>
c001a731:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c001a735:	75 15                	jne    c001a74c <SoundCard::getSamples32(int, int*)+0x4c>
c001a737:	53                   	push   ebx
c001a738:	55                   	push   ebp
c001a739:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a73d:	50                   	push   eax
c001a73e:	e8 61 03 00 00       	call   c001aaa4 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>
c001a743:	83 c4 10             	add    esp,0x10
c001a746:	39 c6                	cmp    esi,eax
c001a748:	7d 02                	jge    c001a74c <SoundCard::getSamples32(int, int*)+0x4c>
c001a74a:	89 c6                	mov    esi,eax
c001a74c:	47                   	inc    edi
c001a74d:	83 ff 20             	cmp    edi,0x20
c001a750:	75 d4                	jne    c001a726 <SoundCard::getSamples32(int, int*)+0x26>
c001a752:	85 f6                	test   esi,esi
c001a754:	0f b6 83 d8 01 00 00 	movzx  eax,BYTE PTR [ebx+0x1d8]
c001a75b:	75 0f                	jne    c001a76c <SoundCard::getSamples32(int, int*)+0x6c>
c001a75d:	85 c0                	test   eax,eax
c001a75f:	74 1b                	je     c001a77c <SoundCard::getSamples32(int, int*)+0x7c>
c001a761:	83 ec 0c             	sub    esp,0xc
c001a764:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a766:	53                   	push   ebx
c001a767:	ff 50 28             	call   DWORD PTR [eax+0x28]
c001a76a:	eb 0d                	jmp    c001a779 <SoundCard::getSamples32(int, int*)+0x79>
c001a76c:	85 c0                	test   eax,eax
c001a76e:	75 0c                	jne    c001a77c <SoundCard::getSamples32(int, int*)+0x7c>
c001a770:	83 ec 0c             	sub    esp,0xc
c001a773:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a775:	53                   	push   ebx
c001a776:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001a779:	83 c4 10             	add    esp,0x10
c001a77c:	83 c4 0c             	add    esp,0xc
c001a77f:	89 f0                	mov    eax,esi
c001a781:	5b                   	pop    ebx
c001a782:	5e                   	pop    esi
c001a783:	5f                   	pop    edi
c001a784:	5d                   	pop    ebp
c001a785:	c3                   	ret    

c001a786 <SoundCard::addChannel(SoundPort*)>:
c001a786:	83 ec 0c             	sub    esp,0xc
c001a789:	31 c0                	xor    eax,eax
c001a78b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001a78f:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c001a797:	74 1b                	je     c001a7b4 <SoundCard::addChannel(SoundPort*)+0x2e>
c001a799:	40                   	inc    eax
c001a79a:	83 f8 20             	cmp    eax,0x20
c001a79d:	75 f0                	jne    c001a78f <SoundCard::addChannel(SoundPort*)+0x9>
c001a79f:	83 ec 0c             	sub    esp,0xc
c001a7a2:	68 d1 28 02 c0       	push   0xc00228d1
c001a7a7:	e8 41 6a ff ff       	call   c00111ed <KePanic(char const*)>
c001a7ac:	83 c4 10             	add    esp,0x10
c001a7af:	83 c8 ff             	or     eax,0xffffffff
c001a7b2:	eb 0b                	jmp    c001a7bf <SoundCard::addChannel(SoundPort*)+0x39>
c001a7b4:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001a7b8:	89 8c 82 58 01 00 00 	mov    DWORD PTR [edx+eax*4+0x158],ecx
c001a7bf:	83 c4 0c             	add    esp,0xc
c001a7c2:	c3                   	ret    
c001a7c3:	90                   	nop

c001a7c4 <SoundCard::removeChannel(int)>:
c001a7c4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a7c8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a7cc:	c7 84 90 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x158],0x0
c001a7d7:	c3                   	ret    

c001a7d8 <SoundPort::SoundPort(int, int, int, int)>:
c001a7d8:	83 ec 0c             	sub    esp,0xc
c001a7db:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a7df:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001a7e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a7ea:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c001a7ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a7f2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001a7f6:	89 10                	mov    DWORD PTR [eax],edx
c001a7f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a7fc:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001a800:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001a803:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a807:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001a80b:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001a80e:	83 7c 24 20 ff       	cmp    DWORD PTR [esp+0x20],0xffffffff
c001a813:	75 13                	jne    c001a828 <SoundPort::SoundPort(int, int, int, int)+0x50>
c001a815:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a819:	8b 00                	mov    eax,DWORD PTR [eax]
c001a81b:	05 a0 0f 00 00       	add    eax,0xfa0
c001a820:	01 c0                	add    eax,eax
c001a822:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001a826:	66 90                	xchg   ax,ax
c001a828:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a82c:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001a830:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c001a833:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a837:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c001a83e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a842:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001a845:	c1 e0 02             	shl    eax,0x2
c001a848:	83 ec 0c             	sub    esp,0xc
c001a84b:	50                   	push   eax
c001a84c:	e8 65 d2 fe ff       	call   c0007ab6 <malloc>
c001a851:	83 c4 10             	add    esp,0x10
c001a854:	89 c2                	mov    edx,eax
c001a856:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a85a:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001a85d:	90                   	nop
c001a85e:	83 c4 0c             	add    esp,0xc
c001a861:	c3                   	ret    
c001a862:	66 90                	xchg   ax,ax

c001a864 <SoundPort::~SoundPort()>:
c001a864:	83 ec 0c             	sub    esp,0xc
c001a867:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a86b:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001a86e:	85 c0                	test   eax,eax
c001a870:	74 1e                	je     c001a890 <SoundPort::~SoundPort()+0x2c>
c001a872:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a876:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001a879:	83 ec 0c             	sub    esp,0xc
c001a87c:	50                   	push   eax
c001a87d:	e8 44 d2 fe ff       	call   c0007ac6 <free>
c001a882:	83 c4 10             	add    esp,0x10
c001a885:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a889:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001a890:	90                   	nop
c001a891:	83 c4 0c             	add    esp,0xc
c001a894:	c3                   	ret    
c001a895:	90                   	nop
c001a896:	66 90                	xchg   ax,ax

c001a898 <SoundPort::unpause()>:
c001a898:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a89c:	c6 40 18 00          	mov    BYTE PTR [eax+0x18],0x0
c001a8a0:	c3                   	ret    
c001a8a1:	90                   	nop
c001a8a2:	66 90                	xchg   ax,ax

c001a8a4 <SoundPort::pause()>:
c001a8a4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a8a8:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c001a8ac:	c3                   	ret    
c001a8ad:	90                   	nop
c001a8ae:	66 90                	xchg   ax,ax

c001a8b0 <SoundPort::getBufferUsed()>:
c001a8b0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a8b4:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001a8b7:	c3                   	ret    

c001a8b8 <SoundPort::getBufferSize()>:
c001a8b8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a8bc:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001a8bf:	c3                   	ret    

c001a8c0 <SoundPort::buffer16(short*, int)>:
c001a8c0:	55                   	push   ebp
c001a8c1:	57                   	push   edi
c001a8c2:	56                   	push   esi
c001a8c3:	53                   	push   ebx
c001a8c4:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001a8c8:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c001a8cc:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c001a8cf:	3b 42 10             	cmp    eax,DWORD PTR [edx+0x10]
c001a8d2:	74 68                	je     c001a93c <SoundPort::buffer16(short*, int)+0x7c>
c001a8d4:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001a8d8:	85 c9                	test   ecx,ecx
c001a8da:	7e 60                	jle    c001a93c <SoundPort::buffer16(short*, int)+0x7c>
c001a8dc:	0f bf 4d 00          	movsx  ecx,WORD PTR [ebp+0x0]
c001a8e0:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c001a8e3:	c1 e1 0f             	shl    ecx,0xf
c001a8e6:	8d 70 01             	lea    esi,[eax+0x1]
c001a8e9:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c001a8ec:	89 0c 83             	mov    DWORD PTR [ebx+eax*4],ecx
c001a8ef:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001a8f2:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001a8f5:	74 4d                	je     c001a944 <SoundPort::buffer16(short*, int)+0x84>
c001a8f7:	31 f6                	xor    esi,esi
c001a8f9:	eb 21                	jmp    c001a91c <SoundPort::buffer16(short*, int)+0x5c>
c001a8fb:	90                   	nop
c001a8fc:	0f bf 5c 45 00       	movsx  ebx,WORD PTR [ebp+eax*2+0x0]
c001a901:	8d 79 01             	lea    edi,[ecx+0x1]
c001a904:	c1 e3 0f             	shl    ebx,0xf
c001a907:	89 7a 14             	mov    DWORD PTR [edx+0x14],edi
c001a90a:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c001a90d:	89 1c 8f             	mov    DWORD PTR [edi+ecx*4],ebx
c001a910:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001a913:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001a916:	74 1c                	je     c001a934 <SoundPort::buffer16(short*, int)+0x74>
c001a918:	89 c6                	mov    esi,eax
c001a91a:	66 90                	xchg   ax,ax
c001a91c:	8d 46 01             	lea    eax,[esi+0x1]
c001a91f:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c001a923:	75 d7                	jne    c001a8fc <SoundPort::buffer16(short*, int)+0x3c>
c001a925:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a929:	8d 76 00             	lea    esi,[esi+0x0]
c001a92c:	5b                   	pop    ebx
c001a92d:	5e                   	pop    esi
c001a92e:	5f                   	pop    edi
c001a92f:	5d                   	pop    ebp
c001a930:	c3                   	ret    
c001a931:	8d 76 00             	lea    esi,[esi+0x0]
c001a934:	5b                   	pop    ebx
c001a935:	8d 46 02             	lea    eax,[esi+0x2]
c001a938:	5e                   	pop    esi
c001a939:	5f                   	pop    edi
c001a93a:	5d                   	pop    ebp
c001a93b:	c3                   	ret    
c001a93c:	5b                   	pop    ebx
c001a93d:	31 c0                	xor    eax,eax
c001a93f:	5e                   	pop    esi
c001a940:	5f                   	pop    edi
c001a941:	5d                   	pop    ebp
c001a942:	c3                   	ret    
c001a943:	90                   	nop
c001a944:	b8 01 00 00 00       	mov    eax,0x1
c001a949:	eb e1                	jmp    c001a92c <SoundPort::buffer16(short*, int)+0x6c>
c001a94b:	90                   	nop

c001a94c <SoundPort::buffer32(int*, int)>:
c001a94c:	55                   	push   ebp
c001a94d:	57                   	push   edi
c001a94e:	56                   	push   esi
c001a94f:	53                   	push   ebx
c001a950:	83 ec 04             	sub    esp,0x4
c001a953:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001a957:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a95b:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001a95e:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001a962:	89 04 24             	mov    DWORD PTR [esp],eax
c001a965:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001a968:	74 5a                	je     c001a9c4 <SoundPort::buffer32(int*, int)+0x78>
c001a96a:	85 c0                	test   eax,eax
c001a96c:	7e 56                	jle    c001a9c4 <SoundPort::buffer32(int*, int)+0x78>
c001a96e:	8d 71 01             	lea    esi,[ecx+0x1]
c001a971:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c001a974:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c001a977:	8b 37                	mov    esi,DWORD PTR [edi]
c001a979:	89 34 8b             	mov    DWORD PTR [ebx+ecx*4],esi
c001a97c:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001a97f:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001a982:	74 4c                	je     c001a9d0 <SoundPort::buffer32(int*, int)+0x84>
c001a984:	31 f6                	xor    esi,esi
c001a986:	eb 1c                	jmp    c001a9a4 <SoundPort::buffer32(int*, int)+0x58>
c001a988:	8d 69 01             	lea    ebp,[ecx+0x1]
c001a98b:	89 6a 14             	mov    DWORD PTR [edx+0x14],ebp
c001a98e:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c001a991:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c001a994:	89 44 8d 00          	mov    DWORD PTR [ebp+ecx*4+0x0],eax
c001a998:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001a99b:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001a99e:	74 18                	je     c001a9b8 <SoundPort::buffer32(int*, int)+0x6c>
c001a9a0:	89 de                	mov    esi,ebx
c001a9a2:	66 90                	xchg   ax,ax
c001a9a4:	8d 5e 01             	lea    ebx,[esi+0x1]
c001a9a7:	39 1c 24             	cmp    DWORD PTR [esp],ebx
c001a9aa:	75 dc                	jne    c001a988 <SoundPort::buffer32(int*, int)+0x3c>
c001a9ac:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001a9af:	90                   	nop
c001a9b0:	83 c4 04             	add    esp,0x4
c001a9b3:	5b                   	pop    ebx
c001a9b4:	5e                   	pop    esi
c001a9b5:	5f                   	pop    edi
c001a9b6:	5d                   	pop    ebp
c001a9b7:	c3                   	ret    
c001a9b8:	83 c4 04             	add    esp,0x4
c001a9bb:	8d 46 02             	lea    eax,[esi+0x2]
c001a9be:	5b                   	pop    ebx
c001a9bf:	5e                   	pop    esi
c001a9c0:	5f                   	pop    edi
c001a9c1:	5d                   	pop    ebp
c001a9c2:	c3                   	ret    
c001a9c3:	90                   	nop
c001a9c4:	83 c4 04             	add    esp,0x4
c001a9c7:	31 c0                	xor    eax,eax
c001a9c9:	5b                   	pop    ebx
c001a9ca:	5e                   	pop    esi
c001a9cb:	5f                   	pop    edi
c001a9cc:	5d                   	pop    ebp
c001a9cd:	c3                   	ret    
c001a9ce:	66 90                	xchg   ax,ax
c001a9d0:	b8 01 00 00 00       	mov    eax,0x1
c001a9d5:	eb d9                	jmp    c001a9b0 <SoundPort::buffer32(int*, int)+0x64>
c001a9d7:	90                   	nop

c001a9d8 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>:
c001a9d8:	57                   	push   edi
c001a9d9:	56                   	push   esi
c001a9da:	53                   	push   ebx
c001a9db:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001a9df:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c001a9e3:	8b 86 e0 01 00 00    	mov    eax,DWORD PTR [esi+0x1e0]
c001a9e9:	39 03                	cmp    DWORD PTR [ebx],eax
c001a9eb:	74 13                	je     c001aa00 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x28>
c001a9ed:	83 ec 0c             	sub    esp,0xc
c001a9f0:	68 24 29 02 c0       	push   0xc0022924
c001a9f5:	e8 f3 67 ff ff       	call   c00111ed <KePanic(char const*)>
c001a9fa:	83 c4 10             	add    esp,0x10
c001a9fd:	8d 76 00             	lea    esi,[esi+0x0]
c001aa00:	8b 86 dc 01 00 00    	mov    eax,DWORD PTR [esi+0x1dc]
c001aa06:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c001aa09:	74 11                	je     c001aa1c <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x44>
c001aa0b:	83 ec 0c             	sub    esp,0xc
c001aa0e:	68 63 29 02 c0       	push   0xc0022963
c001aa13:	e8 d5 67 ff ff       	call   c00111ed <KePanic(char const*)>
c001aa18:	83 c4 10             	add    esp,0x10
c001aa1b:	90                   	nop
c001aa1c:	8b 86 e4 01 00 00    	mov    eax,DWORD PTR [esi+0x1e4]
c001aa22:	39 43 08             	cmp    DWORD PTR [ebx+0x8],eax
c001aa25:	74 11                	je     c001aa38 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x60>
c001aa27:	83 ec 0c             	sub    esp,0xc
c001aa2a:	68 63 29 02 c0       	push   0xc0022963
c001aa2f:	e8 b9 67 ff ff       	call   c00111ed <KePanic(char const*)>
c001aa34:	83 c4 10             	add    esp,0x10
c001aa37:	90                   	nop
c001aa38:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c001aa3b:	3b 74 24 14          	cmp    esi,DWORD PTR [esp+0x14]
c001aa3f:	7e 07                	jle    c001aa48 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x70>
c001aa41:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001aa45:	8d 76 00             	lea    esi,[esi+0x0]
c001aa48:	85 f6                	test   esi,esi
c001aa4a:	7e 2c                	jle    c001aa78 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0xa0>
c001aa4c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001aa50:	8d 3c 36             	lea    edi,[esi+esi*1]
c001aa53:	31 c9                	xor    ecx,ecx
c001aa55:	01 d7                	add    edi,edx
c001aa57:	90                   	nop
c001aa58:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c001aa5b:	8b 04 08             	mov    eax,DWORD PTR [eax+ecx*1]
c001aa5e:	85 c0                	test   eax,eax
c001aa60:	79 06                	jns    c001aa68 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x90>
c001aa62:	05 ff 7f 00 00       	add    eax,0x7fff
c001aa67:	90                   	nop
c001aa68:	c1 f8 0f             	sar    eax,0xf
c001aa6b:	83 c1 04             	add    ecx,0x4
c001aa6e:	66 01 02             	add    WORD PTR [edx],ax
c001aa71:	83 c2 02             	add    edx,0x2
c001aa74:	39 d7                	cmp    edi,edx
c001aa76:	75 e0                	jne    c001aa58 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x80>
c001aa78:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c001aa7b:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001aa7e:	83 ec 04             	sub    esp,0x4
c001aa81:	29 f0                	sub    eax,esi
c001aa83:	c1 e0 02             	shl    eax,0x2
c001aa86:	50                   	push   eax
c001aa87:	8d 04 b2             	lea    eax,[edx+esi*4]
c001aa8a:	50                   	push   eax
c001aa8b:	52                   	push   edx
c001aa8c:	e8 3f 59 fe ff       	call   c00003d0 <memmove>
c001aa91:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001aa94:	83 c4 10             	add    esp,0x10
c001aa97:	29 f0                	sub    eax,esi
c001aa99:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c001aa9c:	89 f0                	mov    eax,esi
c001aa9e:	5b                   	pop    ebx
c001aa9f:	5e                   	pop    esi
c001aaa0:	5f                   	pop    edi
c001aaa1:	c3                   	ret    
c001aaa2:	66 90                	xchg   ax,ax

c001aaa4 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>:
c001aaa4:	57                   	push   edi
c001aaa5:	56                   	push   esi
c001aaa6:	53                   	push   ebx
c001aaa7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001aaab:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001aaaf:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001aab3:	8b 87 e0 01 00 00    	mov    eax,DWORD PTR [edi+0x1e0]
c001aab9:	39 06                	cmp    DWORD PTR [esi],eax
c001aabb:	74 13                	je     c001aad0 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x2c>
c001aabd:	83 ec 0c             	sub    esp,0xc
c001aac0:	68 44 29 02 c0       	push   0xc0022944
c001aac5:	e8 23 67 ff ff       	call   c00111ed <KePanic(char const*)>
c001aaca:	83 c4 10             	add    esp,0x10
c001aacd:	8d 76 00             	lea    esi,[esi+0x0]
c001aad0:	8b 87 dc 01 00 00    	mov    eax,DWORD PTR [edi+0x1dc]
c001aad6:	39 46 04             	cmp    DWORD PTR [esi+0x4],eax
c001aad9:	74 11                	je     c001aaec <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x48>
c001aadb:	83 ec 0c             	sub    esp,0xc
c001aade:	68 7f 29 02 c0       	push   0xc002297f
c001aae3:	e8 05 67 ff ff       	call   c00111ed <KePanic(char const*)>
c001aae8:	83 c4 10             	add    esp,0x10
c001aaeb:	90                   	nop
c001aaec:	8b 87 e4 01 00 00    	mov    eax,DWORD PTR [edi+0x1e4]
c001aaf2:	39 46 08             	cmp    DWORD PTR [esi+0x8],eax
c001aaf5:	74 11                	je     c001ab08 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x64>
c001aaf7:	83 ec 0c             	sub    esp,0xc
c001aafa:	68 7f 29 02 c0       	push   0xc002297f
c001aaff:	e8 e9 66 ff ff       	call   c00111ed <KePanic(char const*)>
c001ab04:	83 c4 10             	add    esp,0x10
c001ab07:	90                   	nop
c001ab08:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c001ab0b:	3b 7c 24 14          	cmp    edi,DWORD PTR [esp+0x14]
c001ab0f:	7e 07                	jle    c001ab18 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x74>
c001ab11:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001ab15:	8d 76 00             	lea    esi,[esi+0x0]
c001ab18:	85 ff                	test   edi,edi
c001ab1a:	7e 1c                	jle    c001ab38 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x94>
c001ab1c:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c001ab23:	31 c0                	xor    eax,eax
c001ab25:	8d 76 00             	lea    esi,[esi+0x0]
c001ab28:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c001ab2b:	8b 14 02             	mov    edx,DWORD PTR [edx+eax*1]
c001ab2e:	01 14 03             	add    DWORD PTR [ebx+eax*1],edx
c001ab31:	83 c0 04             	add    eax,0x4
c001ab34:	39 c1                	cmp    ecx,eax
c001ab36:	75 f0                	jne    c001ab28 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x84>
c001ab38:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c001ab3b:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001ab3e:	83 ec 04             	sub    esp,0x4
c001ab41:	29 f8                	sub    eax,edi
c001ab43:	c1 e0 02             	shl    eax,0x2
c001ab46:	50                   	push   eax
c001ab47:	8d 04 ba             	lea    eax,[edx+edi*4]
c001ab4a:	50                   	push   eax
c001ab4b:	52                   	push   edx
c001ab4c:	e8 7f 58 fe ff       	call   c00003d0 <memmove>
c001ab51:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001ab54:	83 c4 10             	add    esp,0x10
c001ab57:	29 f8                	sub    eax,edi
c001ab59:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c001ab5c:	89 f8                	mov    eax,edi
c001ab5e:	5b                   	pop    ebx
c001ab5f:	5e                   	pop    esi
c001ab60:	5f                   	pop    edi
c001ab61:	c3                   	ret    

c001ab62 <PCI::open(int, int, void*)>:
c001ab62:	83 ec 18             	sub    esp,0x18
c001ab65:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001ab69:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001ab6d:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001ab73:	8b 10                	mov    edx,DWORD PTR [eax]
c001ab75:	50                   	push   eax
c001ab76:	ff 52 18             	call   DWORD PTR [edx+0x18]
c001ab79:	31 c0                	xor    eax,eax
c001ab7b:	83 c4 1c             	add    esp,0x1c
c001ab7e:	c3                   	ret    
c001ab7f:	90                   	nop

c001ab80 <PCI::close(int, int, void*)>:
c001ab80:	31 c0                	xor    eax,eax
c001ab82:	c3                   	ret    
c001ab83:	90                   	nop

c001ab84 <PCI::PCI()>:
c001ab84:	83 ec 0c             	sub    esp,0xc
c001ab87:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ab8b:	83 ec 08             	sub    esp,0x8
c001ab8e:	68 9b 29 02 c0       	push   0xc002299b
c001ab93:	50                   	push   eax
c001ab94:	e8 ab 13 ff ff       	call   c000bf44 <Bus::Bus(char const*)>
c001ab99:	83 c4 10             	add    esp,0x10
c001ab9c:	ba 44 2a 02 c0       	mov    edx,0xc0022a44
c001aba1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001aba5:	89 10                	mov    DWORD PTR [eax],edx
c001aba7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001abab:	c7 80 58 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x158],0x1
c001abb5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001abb9:	a3 40 ae 02 c0       	mov    ds:0xc002ae40,eax
c001abbe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001abc2:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001abc8:	0f b6 d0             	movzx  edx,al
c001abcb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001abcf:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c001abd6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001abda:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001abe0:	0f b6 d0             	movzx  edx,al
c001abe3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001abe7:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c001abec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001abf0:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001abf6:	8d 50 01             	lea    edx,[eax+0x1]
c001abf9:	88 d1                	mov    cl,dl
c001abfb:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001abff:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c001ac05:	0f b6 d0             	movzx  edx,al
c001ac08:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ac0c:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001ac10:	83 c9 c0             	or     ecx,0xffffffc0
c001ac13:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001ac17:	90                   	nop
c001ac18:	83 c4 0c             	add    esp,0xc
c001ac1b:	c3                   	ret    

c001ac1c <PCI::readBAR8(unsigned int, int)>:
c001ac1c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001ac20:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ac24:	f6 c2 01             	test   dl,0x1
c001ac27:	74 07                	je     c001ac30 <PCI::readBAR8(unsigned int, int)+0x14>
c001ac29:	83 e2 fc             	and    edx,0xfffffffc
c001ac2c:	01 c2                	add    edx,eax
c001ac2e:	ec                   	in     al,dx
c001ac2f:	c3                   	ret    
c001ac30:	83 e2 f0             	and    edx,0xfffffff0
c001ac33:	8a 04 02             	mov    al,BYTE PTR [edx+eax*1]
c001ac36:	c3                   	ret    
c001ac37:	90                   	nop

c001ac38 <PCI::readBAR16(unsigned int, int)>:
c001ac38:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001ac3c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ac40:	f6 c2 01             	test   dl,0x1
c001ac43:	74 08                	je     c001ac4d <PCI::readBAR16(unsigned int, int)+0x15>
c001ac45:	83 e2 fc             	and    edx,0xfffffffc
c001ac48:	01 c2                	add    edx,eax
c001ac4a:	66 ed                	in     ax,dx
c001ac4c:	c3                   	ret    
c001ac4d:	83 e2 f0             	and    edx,0xfffffff0
c001ac50:	66 8b 04 02          	mov    ax,WORD PTR [edx+eax*1]
c001ac54:	c3                   	ret    
c001ac55:	90                   	nop

c001ac56 <PCI::readBAR32(unsigned int, int)>:
c001ac56:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001ac5a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ac5e:	f6 c2 01             	test   dl,0x1
c001ac61:	74 07                	je     c001ac6a <PCI::readBAR32(unsigned int, int)+0x14>
c001ac63:	83 e2 fc             	and    edx,0xfffffffc
c001ac66:	01 c2                	add    edx,eax
c001ac68:	ed                   	in     eax,dx
c001ac69:	c3                   	ret    
c001ac6a:	83 e2 f0             	and    edx,0xfffffff0
c001ac6d:	8b 04 02             	mov    eax,DWORD PTR [edx+eax*1]
c001ac70:	c3                   	ret    
c001ac71:	90                   	nop

c001ac72 <PCI::writeBAR8(unsigned int, unsigned char, int)>:
c001ac72:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001ac76:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ac7a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001ac7e:	f6 c2 01             	test   dl,0x1
c001ac81:	74 07                	je     c001ac8a <PCI::writeBAR8(unsigned int, unsigned char, int)+0x18>
c001ac83:	83 e2 fc             	and    edx,0xfffffffc
c001ac86:	01 ca                	add    edx,ecx
c001ac88:	ee                   	out    dx,al
c001ac89:	c3                   	ret    
c001ac8a:	83 e2 f0             	and    edx,0xfffffff0
c001ac8d:	88 04 0a             	mov    BYTE PTR [edx+ecx*1],al
c001ac90:	c3                   	ret    
c001ac91:	90                   	nop

c001ac92 <PCI::writeBAR16(unsigned int, unsigned short, int)>:
c001ac92:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001ac96:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ac9a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001ac9e:	f6 c2 01             	test   dl,0x1
c001aca1:	74 08                	je     c001acab <PCI::writeBAR16(unsigned int, unsigned short, int)+0x19>
c001aca3:	83 e2 fc             	and    edx,0xfffffffc
c001aca6:	01 ca                	add    edx,ecx
c001aca8:	66 ef                	out    dx,ax
c001acaa:	c3                   	ret    
c001acab:	83 e2 f0             	and    edx,0xfffffff0
c001acae:	66 89 04 0a          	mov    WORD PTR [edx+ecx*1],ax
c001acb2:	c3                   	ret    
c001acb3:	90                   	nop

c001acb4 <PCI::writeBAR32(unsigned int, unsigned int, int)>:
c001acb4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001acb8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001acbc:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001acc0:	f6 c2 01             	test   dl,0x1
c001acc3:	74 07                	je     c001accc <PCI::writeBAR32(unsigned int, unsigned int, int)+0x18>
c001acc5:	83 e2 fc             	and    edx,0xfffffffc
c001acc8:	01 ca                	add    edx,ecx
c001acca:	ef                   	out    dx,eax
c001accb:	c3                   	ret    
c001accc:	83 e2 f0             	and    edx,0xfffffff0
c001accf:	89 04 0a             	mov    DWORD PTR [edx+ecx*1],eax
c001acd2:	c3                   	ret    
c001acd3:	90                   	nop

c001acd4 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001acd4:	55                   	push   ebp
c001acd5:	57                   	push   edi
c001acd6:	56                   	push   esi
c001acd7:	53                   	push   ebx
c001acd8:	83 ec 0c             	sub    esp,0xc
c001acdb:	0f b6 74 24 2c       	movzx  esi,BYTE PTR [esp+0x2c]
c001ace0:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c001ace4:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c001ace8:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001acec:	83 fe 07             	cmp    esi,0x7
c001acef:	76 10                	jbe    c001ad01 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x2d>
c001acf1:	83 ec 0c             	sub    esp,0xc
c001acf4:	68 a3 29 02 c0       	push   0xc00229a3
c001acf9:	e8 ef 64 ff ff       	call   c00111ed <KePanic(char const*)>
c001acfe:	83 c4 10             	add    esp,0x10
c001ad01:	0f b6 db             	movzx  ebx,bl
c001ad04:	83 fb 0f             	cmp    ebx,0xf
c001ad07:	76 10                	jbe    c001ad19 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x45>
c001ad09:	83 ec 0c             	sub    esp,0xc
c001ad0c:	68 d3 29 02 c0       	push   0xc00229d3
c001ad11:	e8 d7 64 ff ff       	call   c00111ed <KePanic(char const*)>
c001ad16:	83 c4 10             	add    esp,0x10
c001ad19:	8d 04 36             	lea    eax,[esi+esi*1]
c001ad1c:	ba f8 0c 00 00       	mov    edx,0xcf8
c001ad21:	83 c8 f0             	or     eax,0xfffffff0
c001ad24:	ee                   	out    dx,al
c001ad25:	ba fa 0c 00 00       	mov    edx,0xcfa
c001ad2a:	89 e8                	mov    eax,ebp
c001ad2c:	ee                   	out    dx,al
c001ad2d:	83 c4 0c             	add    esp,0xc
c001ad30:	89 d8                	mov    eax,ebx
c001ad32:	89 f9                	mov    ecx,edi
c001ad34:	c1 e0 08             	shl    eax,0x8
c001ad37:	0f b6 d9             	movzx  ebx,cl
c001ad3a:	83 e3 fc             	and    ebx,0xfffffffc
c001ad3d:	09 d8                	or     eax,ebx
c001ad3f:	5b                   	pop    ebx
c001ad40:	0d 00 c0 ff ff       	or     eax,0xffffc000
c001ad45:	5e                   	pop    esi
c001ad46:	5f                   	pop    edi
c001ad47:	5d                   	pop    ebp
c001ad48:	c3                   	ret    
c001ad49:	90                   	nop

c001ad4a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001ad4a:	57                   	push   edi
c001ad4b:	56                   	push   esi
c001ad4c:	53                   	push   ebx
c001ad4d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001ad51:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ad55:	8b be 58 01 00 00    	mov    edi,DWORD PTR [esi+0x158]
c001ad5b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001ad5f:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001ad63:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001ad67:	83 ff 01             	cmp    edi,0x1
c001ad6a:	75 3f                	jne    c001adab <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x61>
c001ad6c:	89 de                	mov    esi,ebx
c001ad6e:	0f b6 c0             	movzx  eax,al
c001ad71:	81 e6 fc 00 00 00    	and    esi,0xfc
c001ad77:	c1 e0 10             	shl    eax,0x10
c001ad7a:	0f b6 c9             	movzx  ecx,cl
c001ad7d:	09 f0                	or     eax,esi
c001ad7f:	c1 e1 08             	shl    ecx,0x8
c001ad82:	0f b6 d2             	movzx  edx,dl
c001ad85:	09 c8                	or     eax,ecx
c001ad87:	c1 e2 0b             	shl    edx,0xb
c001ad8a:	09 d0                	or     eax,edx
c001ad8c:	ba f8 0c 00 00       	mov    edx,0xcf8
c001ad91:	0d 00 00 00 80       	or     eax,0x80000000
c001ad96:	ef                   	out    dx,eax
c001ad97:	ba fc 0c 00 00       	mov    edx,0xcfc
c001ad9c:	ed                   	in     eax,dx
c001ad9d:	83 e3 02             	and    ebx,0x2
c001ada0:	8d 0c dd 00 00 00 00 	lea    ecx,[ebx*8+0x0]
c001ada7:	d3 e8                	shr    eax,cl
c001ada9:	eb 44                	jmp    c001adef <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa5>
c001adab:	83 ff 02             	cmp    edi,0x2
c001adae:	75 2d                	jne    c001addd <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x93>
c001adb0:	83 ec 0c             	sub    esp,0xc
c001adb3:	0f b6 c9             	movzx  ecx,cl
c001adb6:	0f b6 d2             	movzx  edx,dl
c001adb9:	0f b6 fb             	movzx  edi,bl
c001adbc:	0f b6 c0             	movzx  eax,al
c001adbf:	57                   	push   edi
c001adc0:	51                   	push   ecx
c001adc1:	52                   	push   edx
c001adc2:	50                   	push   eax
c001adc3:	56                   	push   esi
c001adc4:	e8 0b ff ff ff       	call   c001acd4 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c001adc9:	89 c2                	mov    edx,eax
c001adcb:	ed                   	in     eax,dx
c001adcc:	83 e3 02             	and    ebx,0x2
c001adcf:	83 c4 20             	add    esp,0x20
c001add2:	8d 0c dd 00 00 00 00 	lea    ecx,[ebx*8+0x0]
c001add9:	d3 e8                	shr    eax,cl
c001addb:	eb 12                	jmp    c001adef <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa5>
c001addd:	83 ec 0c             	sub    esp,0xc
c001ade0:	68 03 2a 02 c0       	push   0xc0022a03
c001ade5:	e8 03 64 ff ff       	call   c00111ed <KePanic(char const*)>
c001adea:	83 c4 10             	add    esp,0x10
c001aded:	31 c0                	xor    eax,eax
c001adef:	5b                   	pop    ebx
c001adf0:	5e                   	pop    esi
c001adf1:	5f                   	pop    edi
c001adf2:	c3                   	ret    
c001adf3:	90                   	nop

c001adf4 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c001adf4:	83 ec 18             	sub    esp,0x18
c001adf7:	6a 00                	push   0x0
c001adf9:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001adfe:	50                   	push   eax
c001adff:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001ae04:	50                   	push   eax
c001ae05:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001ae0a:	50                   	push   eax
c001ae0b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ae0f:	e8 36 ff ff ff       	call   c001ad4a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001ae14:	83 c4 2c             	add    esp,0x2c
c001ae17:	c3                   	ret    

c001ae18 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c001ae18:	83 ec 18             	sub    esp,0x18
c001ae1b:	6a 0e                	push   0xe
c001ae1d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001ae22:	50                   	push   eax
c001ae23:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001ae28:	50                   	push   eax
c001ae29:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001ae2e:	50                   	push   eax
c001ae2f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ae33:	e8 12 ff ff ff       	call   c001ad4a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001ae38:	83 c4 2c             	add    esp,0x2c
c001ae3b:	0f b6 c0             	movzx  eax,al
c001ae3e:	c3                   	ret    
c001ae3f:	90                   	nop

c001ae40 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c001ae40:	55                   	push   ebp
c001ae41:	57                   	push   edi
c001ae42:	56                   	push   esi
c001ae43:	53                   	push   ebx
c001ae44:	83 ec 18             	sub    esp,0x18
c001ae47:	0f b6 74 24 38       	movzx  esi,BYTE PTR [esp+0x38]
c001ae4c:	0f b6 6c 24 34       	movzx  ebp,BYTE PTR [esp+0x34]
c001ae51:	0f b6 7c 24 30       	movzx  edi,BYTE PTR [esp+0x30]
c001ae56:	6a 0a                	push   0xa
c001ae58:	56                   	push   esi
c001ae59:	55                   	push   ebp
c001ae5a:	57                   	push   edi
c001ae5b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001ae5f:	e8 e6 fe ff ff       	call   c001ad4a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001ae64:	83 c4 14             	add    esp,0x14
c001ae67:	89 c3                	mov    ebx,eax
c001ae69:	6a 0a                	push   0xa
c001ae6b:	0f b6 db             	movzx  ebx,bl
c001ae6e:	56                   	push   esi
c001ae6f:	55                   	push   ebp
c001ae70:	57                   	push   edi
c001ae71:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001ae75:	e8 d0 fe ff ff       	call   c001ad4a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001ae7a:	83 c4 2c             	add    esp,0x2c
c001ae7d:	25 00 ff 00 00       	and    eax,0xff00
c001ae82:	09 d8                	or     eax,ebx
c001ae84:	5b                   	pop    ebx
c001ae85:	5e                   	pop    esi
c001ae86:	5f                   	pop    edi
c001ae87:	5d                   	pop    ebp
c001ae88:	c3                   	ret    
c001ae89:	90                   	nop

c001ae8a <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c001ae8a:	83 ec 18             	sub    esp,0x18
c001ae8d:	6a 08                	push   0x8
c001ae8f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001ae94:	50                   	push   eax
c001ae95:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001ae9a:	50                   	push   eax
c001ae9b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001aea0:	50                   	push   eax
c001aea1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001aea5:	e8 a0 fe ff ff       	call   c001ad4a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001aeaa:	83 c4 2c             	add    esp,0x2c
c001aead:	0f b6 c4             	movzx  eax,ah
c001aeb0:	c3                   	ret    
c001aeb1:	90                   	nop

c001aeb2 <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c001aeb2:	83 ec 18             	sub    esp,0x18
c001aeb5:	6a 08                	push   0x8
c001aeb7:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001aebc:	50                   	push   eax
c001aebd:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001aec2:	50                   	push   eax
c001aec3:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001aec8:	50                   	push   eax
c001aec9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001aecd:	e8 78 fe ff ff       	call   c001ad4a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001aed2:	83 c4 2c             	add    esp,0x2c
c001aed5:	c3                   	ret    

c001aed6 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c001aed6:	83 ec 18             	sub    esp,0x18
c001aed9:	6a 3c                	push   0x3c
c001aedb:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001aee0:	50                   	push   eax
c001aee1:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001aee6:	50                   	push   eax
c001aee7:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001aeec:	50                   	push   eax
c001aeed:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001aef1:	e8 54 fe ff ff       	call   c001ad4a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001aef6:	83 c4 2c             	add    esp,0x2c
c001aef9:	c3                   	ret    

c001aefa <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c001aefa:	83 ec 18             	sub    esp,0x18
c001aefd:	6a 18                	push   0x18
c001aeff:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001af04:	50                   	push   eax
c001af05:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001af0a:	50                   	push   eax
c001af0b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001af10:	50                   	push   eax
c001af11:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001af15:	e8 30 fe ff ff       	call   c001ad4a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001af1a:	83 c4 2c             	add    esp,0x2c
c001af1d:	0f b6 c4             	movzx  eax,ah
c001af20:	c3                   	ret    
c001af21:	90                   	nop

c001af22 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001af22:	55                   	push   ebp
c001af23:	57                   	push   edi
c001af24:	56                   	push   esi
c001af25:	53                   	push   ebx
c001af26:	83 ec 28             	sub    esp,0x28
c001af29:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001af2d:	0f b6 7c 24 48       	movzx  edi,BYTE PTR [esp+0x48]
c001af32:	0f b6 6c 24 44       	movzx  ebp,BYTE PTR [esp+0x44]
c001af37:	0f b6 4c 24 4c       	movzx  ecx,BYTE PTR [esp+0x4c]
c001af3c:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c001af43:	8d 43 12             	lea    eax,[ebx+0x12]
c001af46:	83 c3 10             	add    ebx,0x10
c001af49:	0f b6 c0             	movzx  eax,al
c001af4c:	0f b6 db             	movzx  ebx,bl
c001af4f:	50                   	push   eax
c001af50:	51                   	push   ecx
c001af51:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c001af55:	57                   	push   edi
c001af56:	55                   	push   ebp
c001af57:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001af5b:	e8 ea fd ff ff       	call   c001ad4a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001af60:	83 c4 14             	add    esp,0x14
c001af63:	89 c6                	mov    esi,eax
c001af65:	53                   	push   ebx
c001af66:	c1 e6 10             	shl    esi,0x10
c001af69:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001af6d:	51                   	push   ecx
c001af6e:	57                   	push   edi
c001af6f:	55                   	push   ebp
c001af70:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001af74:	e8 d1 fd ff ff       	call   c001ad4a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001af79:	83 c4 3c             	add    esp,0x3c
c001af7c:	0f b7 c0             	movzx  eax,ax
c001af7f:	5b                   	pop    ebx
c001af80:	09 f0                	or     eax,esi
c001af82:	5e                   	pop    esi
c001af83:	5f                   	pop    edi
c001af84:	5d                   	pop    ebp
c001af85:	c3                   	ret    

c001af86 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c001af86:	55                   	push   ebp
c001af87:	57                   	push   edi
c001af88:	56                   	push   esi
c001af89:	53                   	push   ebx
c001af8a:	83 ec 0c             	sub    esp,0xc
c001af8d:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001af91:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001af95:	89 f5                	mov    ebp,esi
c001af97:	8b 8f 58 01 00 00    	mov    ecx,DWORD PTR [edi+0x158]
c001af9d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001afa1:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001afa5:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001afa9:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001afad:	83 f9 01             	cmp    ecx,0x1
c001afb0:	75 5d                	jne    c001b00f <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x89>
c001afb2:	0f b6 c8             	movzx  ecx,al
c001afb5:	0f b6 d2             	movzx  edx,dl
c001afb8:	c1 e1 10             	shl    ecx,0x10
c001afbb:	c1 e2 0b             	shl    edx,0xb
c001afbe:	89 f0                	mov    eax,esi
c001afc0:	25 fc 00 00 00       	and    eax,0xfc
c001afc5:	09 c1                	or     ecx,eax
c001afc7:	89 e8                	mov    eax,ebp
c001afc9:	0f b6 c0             	movzx  eax,al
c001afcc:	c1 e0 08             	shl    eax,0x8
c001afcf:	09 c1                	or     ecx,eax
c001afd1:	09 d1                	or     ecx,edx
c001afd3:	ba f8 0c 00 00       	mov    edx,0xcf8
c001afd8:	81 c9 00 00 00 80    	or     ecx,0x80000000
c001afde:	89 c8                	mov    eax,ecx
c001afe0:	ef                   	out    dx,eax
c001afe1:	ba fc 0c 00 00       	mov    edx,0xcfc
c001afe6:	ed                   	in     eax,dx
c001afe7:	0f b7 db             	movzx  ebx,bx
c001afea:	83 e6 02             	and    esi,0x2
c001afed:	74 0a                	je     c001aff9 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x73>
c001afef:	0f b7 d0             	movzx  edx,ax
c001aff2:	c1 e3 10             	shl    ebx,0x10
c001aff5:	09 d3                	or     ebx,edx
c001aff7:	eb 05                	jmp    c001affe <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x78>
c001aff9:	66 31 c0             	xor    ax,ax
c001affc:	09 c3                	or     ebx,eax
c001affe:	ba f8 0c 00 00       	mov    edx,0xcf8
c001b003:	89 c8                	mov    eax,ecx
c001b005:	ef                   	out    dx,eax
c001b006:	ba fc 0c 00 00       	mov    edx,0xcfc
c001b00b:	89 d8                	mov    eax,ebx
c001b00d:	eb 41                	jmp    c001b050 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c001b00f:	83 f9 02             	cmp    ecx,0x2
c001b012:	75 45                	jne    c001b059 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xd3>
c001b014:	83 ec 0c             	sub    esp,0xc
c001b017:	0f b6 d2             	movzx  edx,dl
c001b01a:	89 f1                	mov    ecx,esi
c001b01c:	0f b6 c0             	movzx  eax,al
c001b01f:	0f b6 f1             	movzx  esi,cl
c001b022:	89 e9                	mov    ecx,ebp
c001b024:	56                   	push   esi
c001b025:	0f b6 c9             	movzx  ecx,cl
c001b028:	51                   	push   ecx
c001b029:	52                   	push   edx
c001b02a:	50                   	push   eax
c001b02b:	57                   	push   edi
c001b02c:	e8 a3 fc ff ff       	call   c001acd4 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b031:	89 c2                	mov    edx,eax
c001b033:	ed                   	in     eax,dx
c001b034:	83 c4 20             	add    esp,0x20
c001b037:	0f b7 db             	movzx  ebx,bx
c001b03a:	f6 c2 02             	test   dl,0x2
c001b03d:	74 0c                	je     c001b04b <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc5>
c001b03f:	0f b7 c8             	movzx  ecx,ax
c001b042:	89 d8                	mov    eax,ebx
c001b044:	c1 e0 10             	shl    eax,0x10
c001b047:	09 c8                	or     eax,ecx
c001b049:	eb 05                	jmp    c001b050 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c001b04b:	66 31 c0             	xor    ax,ax
c001b04e:	09 d8                	or     eax,ebx
c001b050:	ef                   	out    dx,eax
c001b051:	83 c4 0c             	add    esp,0xc
c001b054:	5b                   	pop    ebx
c001b055:	5e                   	pop    esi
c001b056:	5f                   	pop    edi
c001b057:	5d                   	pop    ebp
c001b058:	c3                   	ret    
c001b059:	c7 44 24 20 03 2a 02 c0 	mov    DWORD PTR [esp+0x20],0xc0022a03
c001b061:	83 c4 0c             	add    esp,0xc
c001b064:	5b                   	pop    ebx
c001b065:	5e                   	pop    esi
c001b066:	5f                   	pop    edi
c001b067:	5d                   	pop    ebp
c001b068:	e9 80 61 ff ff       	jmp    c00111ed <KePanic(char const*)>
c001b06d:	90                   	nop

c001b06e <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>:
c001b06e:	55                   	push   ebp
c001b06f:	57                   	push   edi
c001b070:	56                   	push   esi
c001b071:	53                   	push   ebx
c001b072:	81 ec 4c 01 00 00    	sub    esp,0x14c
c001b078:	8b ac 24 84 01 00 00 	mov    ebp,DWORD PTR [esp+0x184]
c001b07f:	80 3d 4c ae 02 c0 00 	cmp    BYTE PTR ds:0xc002ae4c,0x0
c001b086:	0f 85 bd 00 00 00    	jne    c001b149 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdb>
c001b08c:	83 ec 0c             	sub    esp,0xc
c001b08f:	68 14 01 00 00       	push   0x114
c001b094:	e8 1d ca fe ff       	call   c0007ab6 <malloc>
c001b099:	83 c4 0c             	add    esp,0xc
c001b09c:	89 c3                	mov    ebx,eax
c001b09e:	ff 35 90 a4 02 c0    	push   DWORD PTR ds:0xc002a490
c001b0a4:	68 09 2a 02 c0       	push   0xc0022a09
c001b0a9:	50                   	push   eax
c001b0aa:	e8 29 06 ff ff       	call   c000b6d8 <File::File(char const*, Process*)>
c001b0af:	83 c4 10             	add    esp,0x10
c001b0b2:	85 db                	test   ebx,ebx
c001b0b4:	0f 84 67 02 00 00    	je     c001b321 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b3>
c001b0ba:	56                   	push   esi
c001b0bb:	56                   	push   esi
c001b0bc:	6a 01                	push   0x1
c001b0be:	53                   	push   ebx
c001b0bf:	e8 d0 06 ff ff       	call   c000b794 <File::open(FileOpenMode)>
c001b0c4:	83 c4 10             	add    esp,0x10
c001b0c7:	85 c0                	test   eax,eax
c001b0c9:	0f 85 52 02 00 00    	jne    c001b321 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b3>
c001b0cf:	52                   	push   edx
c001b0d0:	8d 44 24 3f          	lea    eax,[esp+0x3f]
c001b0d4:	50                   	push   eax
c001b0d5:	8d 44 24 48          	lea    eax,[esp+0x48]
c001b0d9:	50                   	push   eax
c001b0da:	53                   	push   ebx
c001b0db:	e8 b6 09 ff ff       	call   c000ba96 <File::stat(unsigned long long*, bool*)>
c001b0e0:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001b0e4:	40                   	inc    eax
c001b0e5:	89 04 24             	mov    DWORD PTR [esp],eax
c001b0e8:	e8 c9 c9 fe ff       	call   c0007ab6 <malloc>
c001b0ed:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c001b0f1:	a3 48 ae 02 c0       	mov    ds:0xc002ae48,eax
c001b0f6:	c6 04 10 00          	mov    BYTE PTR [eax+edx*1],0x0
c001b0fa:	59                   	pop    ecx
c001b0fb:	8b 13                	mov    edx,DWORD PTR [ebx]
c001b0fd:	8d 4c 24 48          	lea    ecx,[esp+0x48]
c001b101:	51                   	push   ecx
c001b102:	50                   	push   eax
c001b103:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c001b107:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c001b10b:	53                   	push   ebx
c001b10c:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001b10f:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
c001b113:	83 c4 20             	add    esp,0x20
c001b116:	89 c8                	mov    eax,ecx
c001b118:	99                   	cdq    
c001b119:	3b 54 24 44          	cmp    edx,DWORD PTR [esp+0x44]
c001b11d:	0f 85 fe 01 00 00    	jne    c001b321 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b3>
c001b123:	3b 4c 24 40          	cmp    ecx,DWORD PTR [esp+0x40]
c001b127:	0f 85 f4 01 00 00    	jne    c001b321 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b3>
c001b12d:	83 ec 0c             	sub    esp,0xc
c001b130:	53                   	push   ebx
c001b131:	e8 bc 06 ff ff       	call   c000b7f2 <File::close()>
c001b136:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001b13a:	c6 05 4c ae 02 c0 01 	mov    BYTE PTR ds:0xc002ae4c,0x1
c001b141:	a3 44 ae 02 c0       	mov    ds:0xc002ae44,eax
c001b146:	83 c4 10             	add    esp,0x10
c001b149:	a1 44 ae 02 c0       	mov    eax,ds:0xc002ae44
c001b14e:	8b 1d 48 ae 02 c0    	mov    ebx,DWORD PTR ds:0xc002ae48
c001b154:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001b158:	31 f6                	xor    esi,esi
c001b15a:	66 8b 84 24 62 01 00 00 	mov    ax,WORD PTR [esp+0x162]
c001b162:	66 c7 44 24 0c 00 00 	mov    WORD PTR [esp+0xc],0x0
c001b169:	66 89 44 24 14       	mov    WORD PTR [esp+0x14],ax
c001b16e:	31 c9                	xor    ecx,ecx
c001b170:	66 8b 84 24 82 01 00 00 	mov    ax,WORD PTR [esp+0x182]
c001b178:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c001b17d:	0f b6 84 24 60 01 00 00 	movzx  eax,BYTE PTR [esp+0x160]
c001b185:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001b189:	0f b6 84 24 61 01 00 00 	movzx  eax,BYTE PTR [esp+0x161]
c001b191:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001b195:	39 74 24 04          	cmp    DWORD PTR [esp+0x4],esi
c001b199:	0f 8e 82 01 00 00    	jle    c001b321 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b3>
c001b19f:	8a 04 33             	mov    al,BYTE PTR [ebx+esi*1]
c001b1a2:	d4 40                	aam    0x40
c001b1a4:	d5 39                	aad    0x39
c001b1a6:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c001b1aa:	8a 44 33 01          	mov    al,BYTE PTR [ebx+esi*1+0x1]
c001b1ae:	d4 40                	aam    0x40
c001b1b0:	d5 39                	aad    0x39
c001b1b2:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001b1b6:	8a 44 33 03          	mov    al,BYTE PTR [ebx+esi*1+0x3]
c001b1ba:	d4 40                	aam    0x40
c001b1bc:	d5 39                	aad    0x39
c001b1be:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c001b1c2:	8a 44 33 04          	mov    al,BYTE PTR [ebx+esi*1+0x4]
c001b1c6:	d4 40                	aam    0x40
c001b1c8:	d5 39                	aad    0x39
c001b1ca:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001b1ce:	8a 44 33 06          	mov    al,BYTE PTR [ebx+esi*1+0x6]
c001b1d2:	88 44 24 0a          	mov    BYTE PTR [esp+0xa],al
c001b1d6:	3c 56                	cmp    al,0x56
c001b1d8:	74 43                	je     c001b21d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1af>
c001b1da:	d4 40                	aam    0x40
c001b1dc:	d5 39                	aad    0x39
c001b1de:	8d 48 d0             	lea    ecx,[eax-0x30]
c001b1e1:	8a 44 33 07          	mov    al,BYTE PTR [ebx+esi*1+0x7]
c001b1e5:	0f b6 c9             	movzx  ecx,cl
c001b1e8:	c1 e1 04             	shl    ecx,0x4
c001b1eb:	d4 40                	aam    0x40
c001b1ed:	d5 39                	aad    0x39
c001b1ef:	83 e8 30             	sub    eax,0x30
c001b1f2:	0f b6 c0             	movzx  eax,al
c001b1f5:	09 c1                	or     ecx,eax
c001b1f7:	8a 44 33 08          	mov    al,BYTE PTR [ebx+esi*1+0x8]
c001b1fb:	c1 e1 04             	shl    ecx,0x4
c001b1fe:	d4 40                	aam    0x40
c001b200:	d5 39                	aad    0x39
c001b202:	83 e8 30             	sub    eax,0x30
c001b205:	0f b6 c0             	movzx  eax,al
c001b208:	09 c1                	or     ecx,eax
c001b20a:	8a 44 33 09          	mov    al,BYTE PTR [ebx+esi*1+0x9]
c001b20e:	c1 e1 04             	shl    ecx,0x4
c001b211:	d4 40                	aam    0x40
c001b213:	d5 39                	aad    0x39
c001b215:	83 e8 30             	sub    eax,0x30
c001b218:	0f b6 c0             	movzx  eax,al
c001b21b:	09 c1                	or     ecx,eax
c001b21d:	8a 44 33 0b          	mov    al,BYTE PTR [ebx+esi*1+0xb]
c001b221:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c001b225:	3c 58                	cmp    al,0x58
c001b227:	74 47                	je     c001b270 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x202>
c001b229:	d4 40                	aam    0x40
c001b22b:	d5 39                	aad    0x39
c001b22d:	8d 50 d0             	lea    edx,[eax-0x30]
c001b230:	8a 44 33 0c          	mov    al,BYTE PTR [ebx+esi*1+0xc]
c001b234:	0f b6 d2             	movzx  edx,dl
c001b237:	c1 e2 04             	shl    edx,0x4
c001b23a:	d4 40                	aam    0x40
c001b23c:	d5 39                	aad    0x39
c001b23e:	83 e8 30             	sub    eax,0x30
c001b241:	0f b6 c0             	movzx  eax,al
c001b244:	09 c2                	or     edx,eax
c001b246:	8a 44 33 0d          	mov    al,BYTE PTR [ebx+esi*1+0xd]
c001b24a:	c1 e2 04             	shl    edx,0x4
c001b24d:	d4 40                	aam    0x40
c001b24f:	d5 39                	aad    0x39
c001b251:	83 e8 30             	sub    eax,0x30
c001b254:	0f b6 c0             	movzx  eax,al
c001b257:	09 c2                	or     edx,eax
c001b259:	8a 44 33 0e          	mov    al,BYTE PTR [ebx+esi*1+0xe]
c001b25d:	c1 e2 04             	shl    edx,0x4
c001b260:	d4 40                	aam    0x40
c001b262:	d5 39                	aad    0x39
c001b264:	83 e8 30             	sub    eax,0x30
c001b267:	0f b6 c0             	movzx  eax,al
c001b26a:	09 c2                	or     edx,eax
c001b26c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001b270:	83 c6 10             	add    esi,0x10
c001b273:	8d 7c 24 40          	lea    edi,[esp+0x40]
c001b277:	0f be 14 33          	movsx  edx,BYTE PTR [ebx+esi*1]
c001b27b:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001b27f:	83 fa 0a             	cmp    edx,0xa
c001b282:	74 0b                	je     c001b28f <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x221>
c001b284:	47                   	inc    edi
c001b285:	39 74 24 04          	cmp    DWORD PTR [esp+0x4],esi
c001b289:	75 19                	jne    c001b2a4 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x236>
c001b28b:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c001b28f:	31 c0                	xor    eax,eax
c001b291:	83 7c 24 10 0a       	cmp    DWORD PTR [esp+0x10],0xa
c001b296:	0f 94 c0             	sete   al
c001b299:	01 c6                	add    esi,eax
c001b29b:	80 7c 24 0a 56       	cmp    BYTE PTR [esp+0xa],0x56
c001b2a0:	75 0b                	jne    c001b2ad <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x23f>
c001b2a2:	eb 14                	jmp    c001b2b8 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x24a>
c001b2a4:	46                   	inc    esi
c001b2a5:	88 57 ff             	mov    BYTE PTR [edi-0x1],dl
c001b2a8:	c6 07 00             	mov    BYTE PTR [edi],0x0
c001b2ab:	eb ca                	jmp    c001b277 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x209>
c001b2ad:	66 3b 4c 24 14       	cmp    cx,WORD PTR [esp+0x14]
c001b2b2:	0f 85 dd fe ff ff    	jne    c001b195 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x127>
c001b2b8:	80 7c 24 0b 58       	cmp    BYTE PTR [esp+0xb],0x58
c001b2bd:	74 10                	je     c001b2cf <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x261>
c001b2bf:	66 8b 7c 24 16       	mov    di,WORD PTR [esp+0x16]
c001b2c4:	66 39 7c 24 0c       	cmp    WORD PTR [esp+0xc],di
c001b2c9:	0f 85 c6 fe ff ff    	jne    c001b195 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x127>
c001b2cf:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b2d3:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001b2d7:	83 e8 30             	sub    eax,0x30
c001b2da:	83 ef 30             	sub    edi,0x30
c001b2dd:	c1 e0 04             	shl    eax,0x4
c001b2e0:	09 f8                	or     eax,edi
c001b2e2:	0f b6 c0             	movzx  eax,al
c001b2e5:	39 44 24 28          	cmp    DWORD PTR [esp+0x28],eax
c001b2e9:	0f 85 a6 fe ff ff    	jne    c001b195 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x127>
c001b2ef:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b2f3:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c001b2f7:	83 e8 30             	sub    eax,0x30
c001b2fa:	83 ef 30             	sub    edi,0x30
c001b2fd:	c1 e0 04             	shl    eax,0x4
c001b300:	09 f8                	or     eax,edi
c001b302:	0f b6 c0             	movzx  eax,al
c001b305:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c001b309:	0f 85 86 fe ff ff    	jne    c001b195 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x127>
c001b30f:	50                   	push   eax
c001b310:	50                   	push   eax
c001b311:	8d 44 24 48          	lea    eax,[esp+0x48]
c001b315:	50                   	push   eax
c001b316:	55                   	push   ebp
c001b317:	e8 24 53 fe ff       	call   c0000640 <strcpy>
c001b31c:	83 c4 10             	add    esp,0x10
c001b31f:	eb 06                	jmp    c001b327 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b9>
c001b321:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c001b325:	31 ed                	xor    ebp,ebp
c001b327:	81 c4 4c 01 00 00    	add    esp,0x14c
c001b32d:	89 e8                	mov    eax,ebp
c001b32f:	5b                   	pop    ebx
c001b330:	5e                   	pop    esi
c001b331:	5f                   	pop    edi
c001b332:	5d                   	pop    ebp
c001b333:	c3                   	ret    

c001b334 <PCI::checkBus(unsigned char)>:
c001b334:	56                   	push   esi
c001b335:	53                   	push   ebx
c001b336:	31 db                	xor    ebx,ebx
c001b338:	51                   	push   ecx
c001b339:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001b33e:	52                   	push   edx
c001b33f:	53                   	push   ebx
c001b340:	43                   	inc    ebx
c001b341:	56                   	push   esi
c001b342:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b346:	e8 03 03 00 00       	call   c001b64e <PCI::checkDevice(unsigned char, unsigned char)>
c001b34b:	83 c4 10             	add    esp,0x10
c001b34e:	83 fb 20             	cmp    ebx,0x20
c001b351:	75 eb                	jne    c001b33e <PCI::checkBus(unsigned char)+0xa>
c001b353:	58                   	pop    eax
c001b354:	5b                   	pop    ebx
c001b355:	5e                   	pop    esi
c001b356:	c3                   	ret    
c001b357:	90                   	nop

c001b358 <PCI::foundDevice(PCIDeviceInfo)>:
c001b358:	55                   	push   ebp
c001b359:	57                   	push   edi
c001b35a:	56                   	push   esi
c001b35b:	53                   	push   ebx
c001b35c:	83 ec 1c             	sub    esp,0x1c
c001b35f:	0f b7 44 24 36       	movzx  eax,WORD PTR [esp+0x36]
c001b364:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001b368:	3d ff ff 00 00       	cmp    eax,0xffff
c001b36d:	0f 84 57 01 00 00    	je     c001b4ca <PCI::foundDevice(PCIDeviceInfo)+0x172>
c001b373:	0f b7 44 24 34       	movzx  eax,WORD PTR [esp+0x34]
c001b378:	66 3d 06 04          	cmp    ax,0x406
c001b37c:	75 2c                	jne    c001b3aa <PCI::foundDevice(PCIDeviceInfo)+0x52>
c001b37e:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c001b383:	50                   	push   eax
c001b384:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c001b389:	50                   	push   eax
c001b38a:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c001b38f:	50                   	push   eax
c001b390:	53                   	push   ebx
c001b391:	e8 64 fb ff ff       	call   c001aefa <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c001b396:	89 5c 24 40          	mov    DWORD PTR [esp+0x40],ebx
c001b39a:	0f b6 c0             	movzx  eax,al
c001b39d:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001b3a1:	83 c4 2c             	add    esp,0x2c
c001b3a4:	5b                   	pop    ebx
c001b3a5:	5e                   	pop    esi
c001b3a6:	5f                   	pop    edi
c001b3a7:	5d                   	pop    ebp
c001b3a8:	eb 8a                	jmp    c001b334 <PCI::checkBus(unsigned char)>
c001b3aa:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c001b3ae:	8b 93 cc 00 00 00    	mov    edx,DWORD PTR [ebx+0xcc]
c001b3b4:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001b3b8:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001b3bc:	0f b6 7c 24 54       	movzx  edi,BYTE PTR [esp+0x54]
c001b3c1:	85 d2                	test   edx,edx
c001b3c3:	74 36                	je     c001b3fb <PCI::foundDevice(PCIDeviceInfo)+0xa3>
c001b3c5:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c001b3c8:	85 c9                	test   ecx,ecx
c001b3ca:	74 2b                	je     c001b3f7 <PCI::foundDevice(PCIDeviceInfo)+0x9f>
c001b3cc:	8b b1 18 01 00 00    	mov    esi,DWORD PTR [ecx+0x118]
c001b3d2:	31 ee                	xor    esi,ebp
c001b3d4:	81 e6 ff 00 ff ff    	and    esi,0xffff00ff
c001b3da:	75 1b                	jne    c001b3f7 <PCI::foundDevice(PCIDeviceInfo)+0x9f>
c001b3dc:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c001b3e0:	39 b1 20 01 00 00    	cmp    DWORD PTR [ecx+0x120],esi
c001b3e6:	75 0f                	jne    c001b3f7 <PCI::foundDevice(PCIDeviceInfo)+0x9f>
c001b3e8:	0f b6 89 38 01 00 00 	movzx  ecx,BYTE PTR [ecx+0x138]
c001b3ef:	39 f9                	cmp    ecx,edi
c001b3f1:	0f 84 d3 00 00 00    	je     c001b4ca <PCI::foundDevice(PCIDeviceInfo)+0x172>
c001b3f7:	8b 12                	mov    edx,DWORD PTR [edx]
c001b3f9:	eb c6                	jmp    c001b3c1 <PCI::foundDevice(PCIDeviceInfo)+0x69>
c001b3fb:	3d 01 06 00 00       	cmp    eax,0x601
c001b400:	75 19                	jne    c001b41b <PCI::foundDevice(PCIDeviceInfo)+0xc3>
c001b402:	83 ec 0c             	sub    esp,0xc
c001b405:	68 64 01 00 00       	push   0x164
c001b40a:	e8 a7 c6 fe ff       	call   c0007ab6 <malloc>
c001b40f:	89 c5                	mov    ebp,eax
c001b411:	89 04 24             	mov    DWORD PTR [esp],eax
c001b414:	e8 a1 0e 00 00       	call   c001c2ba <SATABus::SATABus()>
c001b419:	eb 1e                	jmp    c001b439 <PCI::foundDevice(PCIDeviceInfo)+0xe1>
c001b41b:	3d 01 01 00 00       	cmp    eax,0x101
c001b420:	75 62                	jne    c001b484 <PCI::foundDevice(PCIDeviceInfo)+0x12c>
c001b422:	83 ec 0c             	sub    esp,0xc
c001b425:	68 70 02 00 00       	push   0x270
c001b42a:	e8 87 c6 fe ff       	call   c0007ab6 <malloc>
c001b42f:	89 c5                	mov    ebp,eax
c001b431:	89 04 24             	mov    DWORD PTR [esp],eax
c001b434:	e8 e5 02 00 00       	call   c001b71e <IDE::IDE()>
c001b439:	5f                   	pop    edi
c001b43a:	58                   	pop    eax
c001b43b:	55                   	push   ebp
c001b43c:	53                   	push   ebx
c001b43d:	e8 a0 11 ff ff       	call   c000c5e2 <Device::addChild(Device*)>
c001b442:	83 ec 1c             	sub    esp,0x1c
c001b445:	b9 09 00 00 00       	mov    ecx,0x9
c001b44a:	fc                   	cld    
c001b44b:	89 e7                	mov    edi,esp
c001b44d:	8d 74 24 60          	lea    esi,[esp+0x60]
c001b451:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001b453:	55                   	push   ebp
c001b454:	e8 cf 10 ff ff       	call   c000c528 <Device::preOpenPCI(PCIDeviceInfo)>
c001b459:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001b45c:	89 6c 24 60          	mov    DWORD PTR [esp+0x60],ebp
c001b460:	c7 44 24 6c 00 00 00 00 	mov    DWORD PTR [esp+0x6c],0x0
c001b468:	c7 44 24 68 00 00 00 00 	mov    DWORD PTR [esp+0x68],0x0
c001b470:	c7 44 24 64 00 00 00 00 	mov    DWORD PTR [esp+0x64],0x0
c001b478:	8b 42 08             	mov    eax,DWORD PTR [edx+0x8]
c001b47b:	83 c4 4c             	add    esp,0x4c
c001b47e:	5b                   	pop    ebx
c001b47f:	5e                   	pop    esi
c001b480:	5f                   	pop    edi
c001b481:	5d                   	pop    ebp
c001b482:	ff e0                	jmp    eax
c001b484:	83 ec 0c             	sub    esp,0xc
c001b487:	68 58 01 00 00       	push   0x158
c001b48c:	e8 25 c6 fe ff       	call   c0007ab6 <malloc>
c001b491:	89 c5                	mov    ebp,eax
c001b493:	58                   	pop    eax
c001b494:	5a                   	pop    edx
c001b495:	68 22 2a 02 c0       	push   0xc0022a22
c001b49a:	55                   	push   ebp
c001b49b:	e8 e0 13 ff ff       	call   c000c880 <DriverlessDevice::DriverlessDevice(char const*)>
c001b4a0:	59                   	pop    ecx
c001b4a1:	5e                   	pop    esi
c001b4a2:	55                   	push   ebp
c001b4a3:	53                   	push   ebx
c001b4a4:	e8 39 11 ff ff       	call   c000c5e2 <Device::addChild(Device*)>
c001b4a9:	83 c4 10             	add    esp,0x10
c001b4ac:	b9 09 00 00 00       	mov    ecx,0x9
c001b4b1:	fc                   	cld    
c001b4b2:	8d 7c 24 34          	lea    edi,[esp+0x34]
c001b4b6:	89 fe                	mov    esi,edi
c001b4b8:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001b4ba:	89 6c 24 30          	mov    DWORD PTR [esp+0x30],ebp
c001b4be:	83 c4 1c             	add    esp,0x1c
c001b4c1:	5b                   	pop    ebx
c001b4c2:	5e                   	pop    esi
c001b4c3:	5f                   	pop    edi
c001b4c4:	5d                   	pop    ebp
c001b4c5:	e9 5e 10 ff ff       	jmp    c000c528 <Device::preOpenPCI(PCIDeviceInfo)>
c001b4ca:	83 c4 1c             	add    esp,0x1c
c001b4cd:	5b                   	pop    ebx
c001b4ce:	5e                   	pop    esi
c001b4cf:	5f                   	pop    edi
c001b4d0:	5d                   	pop    ebp
c001b4d1:	c3                   	ret    

c001b4d2 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c001b4d2:	55                   	push   ebp
c001b4d3:	57                   	push   edi
c001b4d4:	56                   	push   esi
c001b4d5:	53                   	push   ebx
c001b4d6:	83 ec 68             	sub    esp,0x68
c001b4d9:	8b 6c 24 7c          	mov    ebp,DWORD PTR [esp+0x7c]
c001b4dd:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001b4e4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001b4e8:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001b4ef:	0f b6 74 24 20       	movzx  esi,BYTE PTR [esp+0x20]
c001b4f4:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001b4f8:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001b4ff:	0f b6 5c 24 24       	movzx  ebx,BYTE PTR [esp+0x24]
c001b504:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001b508:	0f b6 7c 24 28       	movzx  edi,BYTE PTR [esp+0x28]
c001b50d:	6a 0c                	push   0xc
c001b50f:	57                   	push   edi
c001b510:	53                   	push   ebx
c001b511:	56                   	push   esi
c001b512:	55                   	push   ebp
c001b513:	e8 32 f8 ff ff       	call   c001ad4a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b518:	83 c4 20             	add    esp,0x20
c001b51b:	57                   	push   edi
c001b51c:	53                   	push   ebx
c001b51d:	56                   	push   esi
c001b51e:	55                   	push   ebp
c001b51f:	e8 1c f9 ff ff       	call   c001ae40 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c001b524:	66 89 44 24 1c       	mov    WORD PTR [esp+0x1c],ax
c001b529:	57                   	push   edi
c001b52a:	53                   	push   ebx
c001b52b:	56                   	push   esi
c001b52c:	55                   	push   ebp
c001b52d:	e8 a4 f9 ff ff       	call   c001aed6 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c001b532:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c001b536:	83 c4 14             	add    esp,0x14
c001b539:	6a 3c                	push   0x3c
c001b53b:	57                   	push   edi
c001b53c:	53                   	push   ebx
c001b53d:	56                   	push   esi
c001b53e:	55                   	push   ebp
c001b53f:	e8 06 f8 ff ff       	call   c001ad4a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b544:	0f b6 c4             	movzx  eax,ah
c001b547:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001b54b:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c001b54f:	88 44 24 6d          	mov    BYTE PTR [esp+0x6d],al
c001b553:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c001b558:	8b 90 68 01 00 00    	mov    edx,DWORD PTR [eax+0x168]
c001b55e:	8b 82 5c 11 00 00    	mov    eax,DWORD PTR [edx+0x115c]
c001b564:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001b568:	83 c4 20             	add    esp,0x20
c001b56b:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c001b570:	74 30                	je     c001b5a2 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c001b572:	31 c0                	xor    eax,eax
c001b574:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c001b578:	7e 28                	jle    c001b5a2 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c001b57a:	0f b7 8c c2 5c 01 00 00 	movzx  ecx,WORD PTR [edx+eax*8+0x15c]
c001b582:	39 cb                	cmp    ebx,ecx
c001b584:	75 19                	jne    c001b59f <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c001b586:	0f b6 8c c2 5e 01 00 00 	movzx  ecx,BYTE PTR [edx+eax*8+0x15e]
c001b58e:	3b 4c 24 10          	cmp    ecx,DWORD PTR [esp+0x10]
c001b592:	75 0b                	jne    c001b59f <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c001b594:	8a 8c c2 5f 01 00 00 	mov    cl,BYTE PTR [edx+eax*8+0x15f]
c001b59b:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c001b59f:	40                   	inc    eax
c001b5a0:	eb d2                	jmp    c001b574 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xa2>
c001b5a2:	31 d2                	xor    edx,edx
c001b5a4:	83 ec 0c             	sub    esp,0xc
c001b5a7:	57                   	push   edi
c001b5a8:	53                   	push   ebx
c001b5a9:	56                   	push   esi
c001b5aa:	52                   	push   edx
c001b5ab:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c001b5af:	55                   	push   ebp
c001b5b0:	e8 6d f9 ff ff       	call   c001af22 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b5b5:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001b5b9:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c001b5bd:	42                   	inc    edx
c001b5be:	83 c4 20             	add    esp,0x20
c001b5c1:	83 fa 06             	cmp    edx,0x6
c001b5c4:	75 de                	jne    c001b5a4 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd2>
c001b5c6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001b5ca:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b5ce:	c1 e2 08             	shl    edx,0x8
c001b5d1:	83 ec 0c             	sub    esp,0xc
c001b5d4:	0f b6 c4             	movzx  eax,ah
c001b5d7:	09 d0                	or     eax,edx
c001b5d9:	66 89 44 24 38       	mov    WORD PTR [esp+0x38],ax
c001b5de:	6a 02                	push   0x2
c001b5e0:	57                   	push   edi
c001b5e1:	53                   	push   ebx
c001b5e2:	56                   	push   esi
c001b5e3:	55                   	push   ebp
c001b5e4:	e8 61 f7 ff ff       	call   c001ad4a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b5e9:	66 89 44 24 6e       	mov    WORD PTR [esp+0x6e],ax
c001b5ee:	83 c4 20             	add    esp,0x20
c001b5f1:	57                   	push   edi
c001b5f2:	53                   	push   ebx
c001b5f3:	56                   	push   esi
c001b5f4:	55                   	push   ebp
c001b5f5:	e8 90 f8 ff ff       	call   c001ae8a <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c001b5fa:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c001b5fe:	57                   	push   edi
c001b5ff:	53                   	push   ebx
c001b600:	56                   	push   esi
c001b601:	55                   	push   ebp
c001b602:	e8 ed f7 ff ff       	call   c001adf4 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001b607:	b9 09 00 00 00       	mov    ecx,0x9
c001b60c:	66 89 44 24 4e       	mov    WORD PTR [esp+0x4e],ax
c001b611:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c001b615:	88 44 24 6c          	mov    BYTE PTR [esp+0x6c],al
c001b619:	8a 44 24 34          	mov    al,BYTE PTR [esp+0x34]
c001b61d:	88 44 24 50          	mov    BYTE PTR [esp+0x50],al
c001b621:	8a 44 24 38          	mov    al,BYTE PTR [esp+0x38]
c001b625:	88 44 24 51          	mov    BYTE PTR [esp+0x51],al
c001b629:	8a 44 24 3c          	mov    al,BYTE PTR [esp+0x3c]
c001b62d:	88 44 24 52          	mov    BYTE PTR [esp+0x52],al
c001b631:	83 ec 0c             	sub    esp,0xc
c001b634:	fc                   	cld    
c001b635:	89 e7                	mov    edi,esp
c001b637:	8d 74 24 58          	lea    esi,[esp+0x58]
c001b63b:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001b63d:	55                   	push   ebp
c001b63e:	e8 15 fd ff ff       	call   c001b358 <PCI::foundDevice(PCIDeviceInfo)>
c001b643:	81 c4 8c 00 00 00    	add    esp,0x8c
c001b649:	5b                   	pop    ebx
c001b64a:	5e                   	pop    esi
c001b64b:	5f                   	pop    edi
c001b64c:	5d                   	pop    ebp
c001b64d:	c3                   	ret    

c001b64e <PCI::checkDevice(unsigned char, unsigned char)>:
c001b64e:	55                   	push   ebp
c001b64f:	57                   	push   edi
c001b650:	56                   	push   esi
c001b651:	53                   	push   ebx
c001b652:	83 ec 0c             	sub    esp,0xc
c001b655:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c001b659:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c001b65e:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c001b663:	6a 00                	push   0x0
c001b665:	56                   	push   esi
c001b666:	57                   	push   edi
c001b667:	55                   	push   ebp
c001b668:	e8 87 f7 ff ff       	call   c001adf4 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001b66d:	6a 00                	push   0x0
c001b66f:	56                   	push   esi
c001b670:	57                   	push   edi
c001b671:	55                   	push   ebp
c001b672:	e8 5b fe ff ff       	call   c001b4d2 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001b677:	83 c4 20             	add    esp,0x20
c001b67a:	6a 00                	push   0x0
c001b67c:	56                   	push   esi
c001b67d:	57                   	push   edi
c001b67e:	55                   	push   ebp
c001b67f:	e8 94 f7 ff ff       	call   c001ae18 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001b684:	83 c4 10             	add    esp,0x10
c001b687:	a8 80                	test   al,0x80
c001b689:	74 2d                	je     c001b6b8 <PCI::checkDevice(unsigned char, unsigned char)+0x6a>
c001b68b:	bb 01 00 00 00       	mov    ebx,0x1
c001b690:	53                   	push   ebx
c001b691:	56                   	push   esi
c001b692:	57                   	push   edi
c001b693:	55                   	push   ebp
c001b694:	e8 5b f7 ff ff       	call   c001adf4 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001b699:	83 c4 10             	add    esp,0x10
c001b69c:	0f b7 c0             	movzx  eax,ax
c001b69f:	3d ff ff 00 00       	cmp    eax,0xffff
c001b6a4:	74 0c                	je     c001b6b2 <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c001b6a6:	53                   	push   ebx
c001b6a7:	56                   	push   esi
c001b6a8:	57                   	push   edi
c001b6a9:	55                   	push   ebp
c001b6aa:	e8 23 fe ff ff       	call   c001b4d2 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001b6af:	83 c4 10             	add    esp,0x10
c001b6b2:	43                   	inc    ebx
c001b6b3:	83 fb 08             	cmp    ebx,0x8
c001b6b6:	75 d8                	jne    c001b690 <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c001b6b8:	83 c4 0c             	add    esp,0xc
c001b6bb:	5b                   	pop    ebx
c001b6bc:	5e                   	pop    esi
c001b6bd:	5f                   	pop    edi
c001b6be:	5d                   	pop    ebp
c001b6bf:	c3                   	ret    

c001b6c0 <PCI::detect()>:
c001b6c0:	56                   	push   esi
c001b6c1:	53                   	push   ebx
c001b6c2:	53                   	push   ebx
c001b6c3:	31 db                	xor    ebx,ebx
c001b6c5:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b6c9:	6a 00                	push   0x0
c001b6cb:	6a 00                	push   0x0
c001b6cd:	6a 00                	push   0x0
c001b6cf:	56                   	push   esi
c001b6d0:	e8 43 f7 ff ff       	call   c001ae18 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001b6d5:	83 c4 10             	add    esp,0x10
c001b6d8:	a8 80                	test   al,0x80
c001b6da:	75 21                	jne    c001b6fd <PCI::detect()+0x3d>
c001b6dc:	51                   	push   ecx
c001b6dd:	51                   	push   ecx
c001b6de:	6a 00                	push   0x0
c001b6e0:	56                   	push   esi
c001b6e1:	e8 4e fc ff ff       	call   c001b334 <PCI::checkBus(unsigned char)>
c001b6e6:	83 c4 10             	add    esp,0x10
c001b6e9:	eb 2a                	jmp    c001b715 <PCI::detect()+0x55>
c001b6eb:	52                   	push   edx
c001b6ec:	52                   	push   edx
c001b6ed:	53                   	push   ebx
c001b6ee:	43                   	inc    ebx
c001b6ef:	56                   	push   esi
c001b6f0:	e8 3f fc ff ff       	call   c001b334 <PCI::checkBus(unsigned char)>
c001b6f5:	83 c4 10             	add    esp,0x10
c001b6f8:	83 fb 08             	cmp    ebx,0x8
c001b6fb:	74 18                	je     c001b715 <PCI::detect()+0x55>
c001b6fd:	53                   	push   ebx
c001b6fe:	6a 00                	push   0x0
c001b700:	6a 00                	push   0x0
c001b702:	56                   	push   esi
c001b703:	e8 ec f6 ff ff       	call   c001adf4 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001b708:	83 c4 10             	add    esp,0x10
c001b70b:	0f b7 c0             	movzx  eax,ax
c001b70e:	3d ff ff 00 00       	cmp    eax,0xffff
c001b713:	74 d6                	je     c001b6eb <PCI::detect()+0x2b>
c001b715:	58                   	pop    eax
c001b716:	5b                   	pop    ebx
c001b717:	5e                   	pop    esi
c001b718:	c3                   	ret    
c001b719:	90                   	nop

c001b71a <IDE::close(int, int, void*)>:
c001b71a:	83 c8 ff             	or     eax,0xffffffff
c001b71d:	c3                   	ret    

c001b71e <IDE::IDE()>:
c001b71e:	83 ec 0c             	sub    esp,0xc
c001b721:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b725:	83 ec 08             	sub    esp,0x8
c001b728:	68 68 2a 02 c0       	push   0xc0022a68
c001b72d:	50                   	push   eax
c001b72e:	e8 f1 11 ff ff       	call   c000c924 <HardDiskController::HardDiskController(char const*)>
c001b733:	83 c4 10             	add    esp,0x10
c001b736:	ba f8 2a 02 c0       	mov    edx,0xc0022af8
c001b73b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b73f:	89 10                	mov    DWORD PTR [eax],edx
c001b741:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b745:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c001b74c:	90                   	nop
c001b74d:	83 c4 0c             	add    esp,0xc
c001b750:	c3                   	ret    
c001b751:	90                   	nop

c001b752 <IDE::prepareInterrupt(unsigned char)>:
c001b752:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001b757:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001b75b:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c001b763:	c3                   	ret    

c001b764 <selectDrive(unsigned char, unsigned char)>:
c001b764:	c3                   	ret    
c001b765:	90                   	nop

c001b766 <IDE::getBase(unsigned char)>:
c001b766:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c001b76b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b76f:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c001b777:	c3                   	ret    

c001b778 <IDE::write(unsigned char, unsigned char, unsigned char)>:
c001b778:	55                   	push   ebp
c001b779:	57                   	push   edi
c001b77a:	56                   	push   esi
c001b77b:	53                   	push   ebx
c001b77c:	83 ec 1c             	sub    esp,0x1c
c001b77f:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001b783:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001b787:	8d 4b f8             	lea    ecx,[ebx-0x8]
c001b78a:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001b78e:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001b792:	80 f9 03             	cmp    cl,0x3
c001b795:	77 4f                	ja     c001b7e6 <IDE::write(unsigned char, unsigned char, unsigned char)+0x6e>
c001b797:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b79b:	0f b6 fa             	movzx  edi,dl
c001b79e:	0f b6 db             	movzx  ebx,bl
c001b7a1:	8d 6f 2a             	lea    ebp,[edi+0x2a]
c001b7a4:	0f b6 54 ee 10       	movzx  edx,BYTE PTR [esi+ebp*8+0x10]
c001b7a9:	80 ca 80             	or     dl,0x80
c001b7ac:	52                   	push   edx
c001b7ad:	6a 0c                	push   0xc
c001b7af:	57                   	push   edi
c001b7b0:	56                   	push   esi
c001b7b1:	e8 c2 ff ff ff       	call   c001b778 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b7b6:	66 8b 54 ee 0a       	mov    dx,WORD PTR [esi+ebp*8+0xa]
c001b7bb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b7bf:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c001b7c3:	ee                   	out    dx,al
c001b7c4:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001b7c9:	89 7c 24 44          	mov    DWORD PTR [esp+0x44],edi
c001b7cd:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c001b7d1:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001b7d5:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001b7dd:	83 c4 2c             	add    esp,0x2c
c001b7e0:	5b                   	pop    ebx
c001b7e1:	5e                   	pop    esi
c001b7e2:	5f                   	pop    edi
c001b7e3:	5d                   	pop    ebp
c001b7e4:	eb 92                	jmp    c001b778 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b7e6:	0f b6 cb             	movzx  ecx,bl
c001b7e9:	83 f9 07             	cmp    ecx,0x7
c001b7ec:	77 12                	ja     c001b800 <IDE::write(unsigned char, unsigned char, unsigned char)+0x88>
c001b7ee:	0f b6 d2             	movzx  edx,dl
c001b7f1:	0f b6 db             	movzx  ebx,bl
c001b7f4:	66 8b 94 d6 5a 01 00 00 	mov    dx,WORD PTR [esi+edx*8+0x15a]
c001b7fc:	01 da                	add    edx,ebx
c001b7fe:	eb 2f                	jmp    c001b82f <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c001b800:	83 f9 0d             	cmp    ecx,0xd
c001b803:	77 13                	ja     c001b818 <IDE::write(unsigned char, unsigned char, unsigned char)+0xa0>
c001b805:	0f b6 d2             	movzx  edx,dl
c001b808:	0f b6 db             	movzx  ebx,bl
c001b80b:	8b 94 d6 5c 01 00 00 	mov    edx,DWORD PTR [esi+edx*8+0x15c]
c001b812:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c001b816:	eb 17                	jmp    c001b82f <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c001b818:	83 f9 15             	cmp    ecx,0x15
c001b81b:	77 13                	ja     c001b830 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb8>
c001b81d:	0f b6 d2             	movzx  edx,dl
c001b820:	0f b6 db             	movzx  ebx,bl
c001b823:	66 8b 94 d6 5e 01 00 00 	mov    dx,WORD PTR [esi+edx*8+0x15e]
c001b82b:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c001b82f:	ee                   	out    dx,al
c001b830:	83 c4 1c             	add    esp,0x1c
c001b833:	5b                   	pop    ebx
c001b834:	5e                   	pop    esi
c001b835:	5f                   	pop    edi
c001b836:	5d                   	pop    ebp
c001b837:	c3                   	ret    

c001b838 <IDE::read(unsigned char, unsigned char)>:
c001b838:	55                   	push   ebp
c001b839:	57                   	push   edi
c001b83a:	56                   	push   esi
c001b83b:	53                   	push   ebx
c001b83c:	83 ec 1c             	sub    esp,0x1c
c001b83f:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001b843:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001b847:	8d 43 f8             	lea    eax,[ebx-0x8]
c001b84a:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c001b84e:	3c 03                	cmp    al,0x3
c001b850:	77 40                	ja     c001b892 <IDE::read(unsigned char, unsigned char)+0x5a>
c001b852:	0f b6 f9             	movzx  edi,cl
c001b855:	8d 6f 2a             	lea    ebp,[edi+0x2a]
c001b858:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001b85d:	0c 80                	or     al,0x80
c001b85f:	50                   	push   eax
c001b860:	6a 0c                	push   0xc
c001b862:	57                   	push   edi
c001b863:	56                   	push   esi
c001b864:	e8 0f ff ff ff       	call   c001b778 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b869:	66 8b 44 ee 0a       	mov    ax,WORD PTR [esi+ebp*8+0xa]
c001b86e:	0f b6 d3             	movzx  edx,bl
c001b871:	8d 54 10 fa          	lea    edx,[eax+edx*1-0x6]
c001b875:	ec                   	in     al,dx
c001b876:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001b87a:	0f b6 54 ee 10       	movzx  edx,BYTE PTR [esi+ebp*8+0x10]
c001b87f:	52                   	push   edx
c001b880:	6a 0c                	push   0xc
c001b882:	57                   	push   edi
c001b883:	56                   	push   esi
c001b884:	e8 ef fe ff ff       	call   c001b778 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b889:	83 c4 20             	add    esp,0x20
c001b88c:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001b890:	eb 4c                	jmp    c001b8de <IDE::read(unsigned char, unsigned char)+0xa6>
c001b892:	0f b6 d3             	movzx  edx,bl
c001b895:	83 fa 07             	cmp    edx,0x7
c001b898:	77 12                	ja     c001b8ac <IDE::read(unsigned char, unsigned char)+0x74>
c001b89a:	0f b6 c9             	movzx  ecx,cl
c001b89d:	0f b6 d3             	movzx  edx,bl
c001b8a0:	66 8b 84 ce 5a 01 00 00 	mov    ax,WORD PTR [esi+ecx*8+0x15a]
c001b8a8:	01 c2                	add    edx,eax
c001b8aa:	eb 31                	jmp    c001b8dd <IDE::read(unsigned char, unsigned char)+0xa5>
c001b8ac:	83 fa 0d             	cmp    edx,0xd
c001b8af:	77 13                	ja     c001b8c4 <IDE::read(unsigned char, unsigned char)+0x8c>
c001b8b1:	0f b6 c9             	movzx  ecx,cl
c001b8b4:	0f b6 d3             	movzx  edx,bl
c001b8b7:	8b 84 ce 5c 01 00 00 	mov    eax,DWORD PTR [esi+ecx*8+0x15c]
c001b8be:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c001b8c2:	eb 19                	jmp    c001b8dd <IDE::read(unsigned char, unsigned char)+0xa5>
c001b8c4:	31 c0                	xor    eax,eax
c001b8c6:	83 fa 15             	cmp    edx,0x15
c001b8c9:	77 13                	ja     c001b8de <IDE::read(unsigned char, unsigned char)+0xa6>
c001b8cb:	0f b6 c9             	movzx  ecx,cl
c001b8ce:	0f b6 d3             	movzx  edx,bl
c001b8d1:	66 8b 84 ce 5e 01 00 00 	mov    ax,WORD PTR [esi+ecx*8+0x15e]
c001b8d9:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c001b8dd:	ec                   	in     al,dx
c001b8de:	83 c4 1c             	add    esp,0x1c
c001b8e1:	5b                   	pop    ebx
c001b8e2:	5e                   	pop    esi
c001b8e3:	5f                   	pop    edi
c001b8e4:	5d                   	pop    ebp
c001b8e5:	c3                   	ret    

c001b8e6 <IDE::waitInterrupt(unsigned char)>:
c001b8e6:	55                   	push   ebp
c001b8e7:	57                   	push   edi
c001b8e8:	56                   	push   esi
c001b8e9:	53                   	push   ebx
c001b8ea:	31 db                	xor    ebx,ebx
c001b8ec:	83 ec 0c             	sub    esp,0xc
c001b8ef:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001b8f3:	0f b6 74 24 24       	movzx  esi,BYTE PTR [esp+0x24]
c001b8f8:	0f b6 ac 37 6c 02 00 00 	movzx  ebp,BYTE PTR [edi+esi*1+0x26c]
c001b900:	89 e8                	mov    eax,ebp
c001b902:	84 c0                	test   al,al
c001b904:	75 30                	jne    c001b936 <IDE::waitInterrupt(unsigned char)+0x50>
c001b906:	50                   	push   eax
c001b907:	6a 0c                	push   0xc
c001b909:	56                   	push   esi
c001b90a:	57                   	push   edi
c001b90b:	e8 28 ff ff ff       	call   c001b838 <IDE::read(unsigned char, unsigned char)>
c001b910:	83 c4 10             	add    esp,0x10
c001b913:	a8 01                	test   al,0x1
c001b915:	75 27                	jne    c001b93e <IDE::waitInterrupt(unsigned char)+0x58>
c001b917:	f6 c3 04             	test   bl,0x4
c001b91a:	75 12                	jne    c001b92e <IDE::waitInterrupt(unsigned char)+0x48>
c001b91c:	83 fb 32             	cmp    ebx,0x32
c001b91f:	7e 0d                	jle    c001b92e <IDE::waitInterrupt(unsigned char)+0x48>
c001b921:	83 ec 0c             	sub    esp,0xc
c001b924:	6a 64                	push   0x64
c001b926:	e8 b1 a4 ff ff       	call   c0015ddc <milliTenthSleep(unsigned int)>
c001b92b:	83 c4 10             	add    esp,0x10
c001b92e:	83 fb 3c             	cmp    ebx,0x3c
c001b931:	74 0b                	je     c001b93e <IDE::waitInterrupt(unsigned char)+0x58>
c001b933:	43                   	inc    ebx
c001b934:	eb c2                	jmp    c001b8f8 <IDE::waitInterrupt(unsigned char)+0x12>
c001b936:	c6 84 37 6c 02 00 00 00 	mov    BYTE PTR [edi+esi*1+0x26c],0x0
c001b93e:	83 c4 0c             	add    esp,0xc
c001b941:	89 e8                	mov    eax,ebp
c001b943:	5b                   	pop    ebx
c001b944:	5e                   	pop    esi
c001b945:	5f                   	pop    edi
c001b946:	5d                   	pop    ebp
c001b947:	c3                   	ret    

c001b948 <ideChannel0IRQHandler(regs*, void*)>:
c001b948:	83 ec 10             	sub    esp,0x10
c001b94b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b94f:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c001b956:	6a 07                	push   0x7
c001b958:	6a 00                	push   0x0
c001b95a:	50                   	push   eax
c001b95b:	e8 d8 fe ff ff       	call   c001b838 <IDE::read(unsigned char, unsigned char)>
c001b960:	83 c4 1c             	add    esp,0x1c
c001b963:	c3                   	ret    

c001b964 <ideChannel1IRQHandler(regs*, void*)>:
c001b964:	83 ec 10             	sub    esp,0x10
c001b967:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b96b:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c001b972:	6a 07                	push   0x7
c001b974:	6a 01                	push   0x1
c001b976:	50                   	push   eax
c001b977:	e8 bc fe ff ff       	call   c001b838 <IDE::read(unsigned char, unsigned char)>
c001b97c:	83 c4 1c             	add    esp,0x1c
c001b97f:	c3                   	ret    

c001b980 <IDE::enableIRQs(unsigned char, bool)>:
c001b980:	57                   	push   edi
c001b981:	b8 02 00 00 00       	mov    eax,0x2
c001b986:	56                   	push   esi
c001b987:	53                   	push   ebx
c001b988:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b98c:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001b990:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c001b995:	74 02                	je     c001b999 <IDE::enableIRQs(unsigned char, bool)+0x19>
c001b997:	31 c0                	xor    eax,eax
c001b999:	0f b6 db             	movzx  ebx,bl
c001b99c:	bf 04 00 00 00       	mov    edi,0x4
c001b9a1:	88 84 de 60 01 00 00 	mov    BYTE PTR [esi+ebx*8+0x160],al
c001b9a8:	50                   	push   eax
c001b9a9:	6a 0c                	push   0xc
c001b9ab:	53                   	push   ebx
c001b9ac:	56                   	push   esi
c001b9ad:	e8 c6 fd ff ff       	call   c001b778 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b9b2:	83 c4 10             	add    esp,0x10
c001b9b5:	50                   	push   eax
c001b9b6:	6a 0c                	push   0xc
c001b9b8:	53                   	push   ebx
c001b9b9:	56                   	push   esi
c001b9ba:	e8 79 fe ff ff       	call   c001b838 <IDE::read(unsigned char, unsigned char)>
c001b9bf:	83 c4 10             	add    esp,0x10
c001b9c2:	4f                   	dec    edi
c001b9c3:	75 f0                	jne    c001b9b5 <IDE::enableIRQs(unsigned char, bool)+0x35>
c001b9c5:	5b                   	pop    ebx
c001b9c6:	5e                   	pop    esi
c001b9c7:	5f                   	pop    edi
c001b9c8:	c3                   	ret    
c001b9c9:	90                   	nop

c001b9ca <IDE::open(int, int, void*)>:
c001b9ca:	55                   	push   ebp
c001b9cb:	57                   	push   edi
c001b9cc:	56                   	push   esi
c001b9cd:	53                   	push   ebx
c001b9ce:	83 ec 1c             	sub    esp,0x1c
c001b9d1:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001b9d5:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c001b9de:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c001b9e7:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c001b9ee:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c001b9f5:	0f 85 de 02 00 00    	jne    c001bcd9 <IDE::open(int, int, void*)+0x30f>
c001b9fb:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c001ba01:	88 04 24             	mov    BYTE PTR [esp],al
c001ba04:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001ba07:	83 e0 7f             	and    eax,0x7f
c001ba0a:	83 f8 05             	cmp    eax,0x5
c001ba0d:	74 05                	je     c001ba14 <IDE::open(int, int, void*)+0x4a>
c001ba0f:	83 f8 0f             	cmp    eax,0xf
c001ba12:	75 32                	jne    c001ba46 <IDE::open(int, int, void*)+0x7c>
c001ba14:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c001ba1a:	83 e0 fc             	and    eax,0xfffffffc
c001ba1d:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001ba24:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c001ba2a:	83 e0 fc             	and    eax,0xfffffffc
c001ba2d:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001ba34:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c001ba3a:	83 e0 fc             	and    eax,0xfffffffc
c001ba3d:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001ba44:	eb 14                	jmp    c001ba5a <IDE::open(int, int, void*)+0x90>
c001ba46:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c001ba50:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c001ba5a:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c001ba61:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c001ba68:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001ba6c:	89 c6                	mov    esi,eax
c001ba6e:	bf f8 0c 00 00       	mov    edi,0xcf8
c001ba73:	c1 e6 10             	shl    esi,0x10
c001ba76:	89 e8                	mov    eax,ebp
c001ba78:	89 fa                	mov    edx,edi
c001ba7a:	c1 e0 0b             	shl    eax,0xb
c001ba7d:	09 f0                	or     eax,esi
c001ba7f:	0f b6 b3 1e 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11e]
c001ba86:	c1 e6 08             	shl    esi,0x8
c001ba89:	09 c6                	or     esi,eax
c001ba8b:	89 f0                	mov    eax,esi
c001ba8d:	0d 08 00 00 80       	or     eax,0x80000008
c001ba92:	ef                   	out    dx,eax
c001ba93:	b9 fc 0c 00 00       	mov    ecx,0xcfc
c001ba98:	89 ca                	mov    edx,ecx
c001ba9a:	ed                   	in     eax,dx
c001ba9b:	c1 e8 10             	shr    eax,0x10
c001ba9e:	3d ff ff 00 00       	cmp    eax,0xffff
c001baa3:	0f 84 f9 00 00 00    	je     c001bba2 <IDE::open(int, int, void*)+0x1d8>
c001baa9:	81 ce 3c 00 00 80    	or     esi,0x8000003c
c001baaf:	89 fa                	mov    edx,edi
c001bab1:	89 f0                	mov    eax,esi
c001bab3:	ef                   	out    dx,eax
c001bab4:	b0 fe                	mov    al,0xfe
c001bab6:	89 ca                	mov    edx,ecx
c001bab8:	ee                   	out    dx,al
c001bab9:	89 f0                	mov    eax,esi
c001babb:	89 fa                	mov    edx,edi
c001babd:	ef                   	out    dx,eax
c001babe:	89 ca                	mov    edx,ecx
c001bac0:	ed                   	in     eax,dx
c001bac1:	3c fe                	cmp    al,0xfe
c001bac3:	0f 85 a9 00 00 00    	jne    c001bb72 <IDE::open(int, int, void*)+0x1a8>
c001bac9:	8b 15 b8 5e 02 c0    	mov    edx,DWORD PTR ds:0xc0025eb8
c001bacf:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c001bad6:	74 33                	je     c001bb0b <IDE::open(int, int, void*)+0x141>
c001bad8:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c001bade:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c001bae2:	40                   	inc    eax
c001bae3:	83 ec 0c             	sub    esp,0xc
c001bae6:	0f b6 c0             	movzx  eax,al
c001bae9:	50                   	push   eax
c001baea:	55                   	push   ebp
c001baeb:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001baef:	ff b2 68 01 00 00    	push   DWORD PTR [edx+0x168]
c001baf5:	51                   	push   ecx
c001baf6:	e8 59 3a ff ff       	call   c000f554 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c001bafb:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c001bb00:	83 c4 1c             	add    esp,0x1c
c001bb03:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001bb09:	eb 0a                	jmp    c001bb15 <IDE::open(int, int, void*)+0x14b>
c001bb0b:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c001bb15:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c001bb1c:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001bb23:	c1 e1 10             	shl    ecx,0x10
c001bb26:	c1 e0 08             	shl    eax,0x8
c001bb29:	bf f8 0c 00 00       	mov    edi,0xcf8
c001bb2e:	09 c1                	or     ecx,eax
c001bb30:	89 fa                	mov    edx,edi
c001bb32:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c001bb39:	c1 e0 0b             	shl    eax,0xb
c001bb3c:	09 c1                	or     ecx,eax
c001bb3e:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c001bb44:	89 c8                	mov    eax,ecx
c001bb46:	ef                   	out    dx,eax
c001bb47:	be fc 0c 00 00       	mov    esi,0xcfc
c001bb4c:	8a 83 50 01 00 00    	mov    al,BYTE PTR [ebx+0x150]
c001bb52:	89 f2                	mov    edx,esi
c001bb54:	ee                   	out    dx,al
c001bb55:	89 c8                	mov    eax,ecx
c001bb57:	89 fa                	mov    edx,edi
c001bb59:	ef                   	out    dx,eax
c001bb5a:	89 f2                	mov    edx,esi
c001bb5c:	ed                   	in     eax,dx
c001bb5d:	0f b6 c0             	movzx  eax,al
c001bb60:	3b 83 50 01 00 00    	cmp    eax,DWORD PTR [ebx+0x150]
c001bb66:	74 4a                	je     c001bbb2 <IDE::open(int, int, void*)+0x1e8>
c001bb68:	83 ec 0c             	sub    esp,0xc
c001bb6b:	68 80 2a 02 c0       	push   0xc0022a80
c001bb70:	eb 38                	jmp    c001bbaa <IDE::open(int, int, void*)+0x1e0>
c001bb72:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c001bb7b:	75 1b                	jne    c001bb98 <IDE::open(int, int, void*)+0x1ce>
c001bb7d:	0f b6 04 24          	movzx  eax,BYTE PTR [esp]
c001bb81:	3d 80 00 00 00       	cmp    eax,0x80
c001bb86:	74 07                	je     c001bb8f <IDE::open(int, int, void*)+0x1c5>
c001bb88:	3d 8a 00 00 00       	cmp    eax,0x8a
c001bb8d:	75 09                	jne    c001bb98 <IDE::open(int, int, void*)+0x1ce>
c001bb8f:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001bb96:	eb 1a                	jmp    c001bbb2 <IDE::open(int, int, void*)+0x1e8>
c001bb98:	83 ec 0c             	sub    esp,0xc
c001bb9b:	68 88 2a 02 c0       	push   0xc0022a88
c001bba0:	eb 08                	jmp    c001bbaa <IDE::open(int, int, void*)+0x1e0>
c001bba2:	83 ec 0c             	sub    esp,0xc
c001bba5:	68 b9 2a 02 c0       	push   0xc0022ab9
c001bbaa:	e8 3e 56 ff ff       	call   c00111ed <KePanic(char const*)>
c001bbaf:	83 c4 10             	add    esp,0x10
c001bbb2:	f6 83 1f 01 00 00 80 	test   BYTE PTR [ebx+0x11f],0x80
c001bbb9:	74 1a                	je     c001bbd5 <IDE::open(int, int, void*)+0x20b>
c001bbbb:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c001bbc1:	83 e0 fc             	and    eax,0xfffffffc
c001bbc4:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c001bbcb:	83 c0 08             	add    eax,0x8
c001bbce:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c001bbd5:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001bbdb:	89 c2                	mov    edx,eax
c001bbdd:	83 e2 0f             	and    edx,0xf
c001bbe0:	83 fa 08             	cmp    edx,0x8
c001bbe3:	75 0a                	jne    c001bbef <IDE::open(int, int, void*)+0x225>
c001bbe5:	83 e8 02             	sub    eax,0x2
c001bbe8:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001bbef:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c001bbf5:	89 c2                	mov    edx,eax
c001bbf7:	83 e2 0f             	and    edx,0xf
c001bbfa:	83 fa 08             	cmp    edx,0x8
c001bbfd:	75 0a                	jne    c001bc09 <IDE::open(int, int, void*)+0x23f>
c001bbff:	83 e8 02             	sub    eax,0x2
c001bc02:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001bc09:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c001bc10:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c001bc17:	89 d0                	mov    eax,edx
c001bc19:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001bc1c:	8d 7a 01             	lea    edi,[edx+0x1]
c001bc1f:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001bc23:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c001bc27:	8a 4c 93 07          	mov    cl,BYTE PTR [ebx+edx*4+0x7]
c001bc2b:	83 e1 3f             	and    ecx,0x3f
c001bc2e:	88 4c 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],cl
c001bc32:	89 f9                	mov    ecx,edi
c001bc34:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c001bc3b:	0f b6 c9             	movzx  ecx,cl
c001bc3e:	8d 78 02             	lea    edi,[eax+0x2]
c001bc41:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001bc44:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001bc48:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c001bc4c:	8a 54 8b 07          	mov    dl,BYTE PTR [ebx+ecx*4+0x7]
c001bc50:	83 e2 3f             	and    edx,0x3f
c001bc53:	88 54 8b 07          	mov    BYTE PTR [ebx+ecx*4+0x7],dl
c001bc57:	89 f9                	mov    ecx,edi
c001bc59:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c001bc5f:	0f b6 d1             	movzx  edx,cl
c001bc62:	8d 78 03             	lea    edi,[eax+0x3]
c001bc65:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001bc68:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001bc6c:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c001bc70:	8a 4c 93 07          	mov    cl,BYTE PTR [ebx+edx*4+0x7]
c001bc74:	83 e1 3f             	and    ecx,0x3f
c001bc77:	88 4c 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],cl
c001bc7b:	89 f9                	mov    ecx,edi
c001bc7d:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c001bc83:	0f b6 c9             	movzx  ecx,cl
c001bc86:	8d 78 04             	lea    edi,[eax+0x4]
c001bc89:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001bc8c:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001bc90:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c001bc94:	89 fa                	mov    edx,edi
c001bc96:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c001bc9c:	8a 54 8b 07          	mov    dl,BYTE PTR [ebx+ecx*4+0x7]
c001bca0:	83 e2 3f             	and    edx,0x3f
c001bca3:	88 54 8b 07          	mov    BYTE PTR [ebx+ecx*4+0x7],dl
c001bca7:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c001bcae:	66 85 f6             	test   si,si
c001bcb1:	74 65                	je     c001bd18 <IDE::open(int, int, void*)+0x34e>
c001bcb3:	89 f9                	mov    ecx,edi
c001bcb5:	83 c0 05             	add    eax,0x5
c001bcb8:	0f b6 d1             	movzx  edx,cl
c001bcbb:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001bcbe:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001bcc2:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c001bcc6:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c001bccc:	8a 44 93 07          	mov    al,BYTE PTR [ebx+edx*4+0x7]
c001bcd0:	83 e0 3f             	and    eax,0x3f
c001bcd3:	88 44 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],al
c001bcd7:	eb 3f                	jmp    c001bd18 <IDE::open(int, int, void*)+0x34e>
c001bcd9:	8b 83 18 01 00 00    	mov    eax,DWORD PTR [ebx+0x118]
c001bcdf:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001bce6:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001bced:	05 06 02 00 00       	add    eax,0x206
c001bcf2:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001bcf9:	66 8b 83 1a 01 00 00 	mov    ax,WORD PTR [ebx+0x11a]
c001bd00:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001bd07:	05 06 02 00 00       	add    eax,0x206
c001bd0c:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001bd13:	e9 bd fe ff ff       	jmp    c001bbd5 <IDE::open(int, int, void*)+0x20b>
c001bd18:	50                   	push   eax
c001bd19:	50                   	push   eax
c001bd1a:	6a 00                	push   0x0
c001bd1c:	53                   	push   ebx
c001bd1d:	e8 30 fa ff ff       	call   c001b752 <IDE::prepareInterrupt(unsigned char)>
c001bd22:	5a                   	pop    edx
c001bd23:	59                   	pop    ecx
c001bd24:	6a 01                	push   0x1
c001bd26:	53                   	push   ebx
c001bd27:	e8 26 fa ff ff       	call   c001b752 <IDE::prepareInterrupt(unsigned char)>
c001bd2c:	83 c4 0c             	add    esp,0xc
c001bd2f:	6a 00                	push   0x0
c001bd31:	6a 00                	push   0x0
c001bd33:	53                   	push   ebx
c001bd34:	e8 47 fc ff ff       	call   c001b980 <IDE::enableIRQs(unsigned char, bool)>
c001bd39:	83 c4 0c             	add    esp,0xc
c001bd3c:	6a 00                	push   0x0
c001bd3e:	6a 01                	push   0x1
c001bd40:	53                   	push   ebx
c001bd41:	e8 3a fc ff ff       	call   c001b980 <IDE::enableIRQs(unsigned char, bool)>
c001bd46:	83 c4 10             	add    esp,0x10
c001bd49:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c001bd50:	74 34                	je     c001bd86 <IDE::open(int, int, void*)+0x3bc>
c001bd52:	83 ec 0c             	sub    esp,0xc
c001bd55:	53                   	push   ebx
c001bd56:	6a 01                	push   0x1
c001bd58:	68 48 b9 01 c0       	push   0xc001b948
c001bd5d:	6a 0e                	push   0xe
c001bd5f:	53                   	push   ebx
c001bd60:	e8 29 08 ff ff       	call   c000c58e <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001bd65:	83 c4 14             	add    esp,0x14
c001bd68:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001bd6e:	53                   	push   ebx
c001bd6f:	6a 01                	push   0x1
c001bd71:	68 64 b9 01 c0       	push   0xc001b964
c001bd76:	6a 0f                	push   0xf
c001bd78:	53                   	push   ebx
c001bd79:	e8 10 08 ff ff       	call   c000c58e <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001bd7e:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c001bd84:	eb 38                	jmp    c001bdbe <IDE::open(int, int, void*)+0x3f4>
c001bd86:	83 ec 0c             	sub    esp,0xc
c001bd89:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c001bd93:	53                   	push   ebx
c001bd94:	6a 00                	push   0x0
c001bd96:	68 48 b9 01 c0       	push   0xc001b948
c001bd9b:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c001bda1:	53                   	push   ebx
c001bda2:	e8 e7 07 ff ff       	call   c000c58e <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001bda7:	83 c4 14             	add    esp,0x14
c001bdaa:	53                   	push   ebx
c001bdab:	6a 00                	push   0x0
c001bdad:	68 64 b9 01 c0       	push   0xc001b964
c001bdb2:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c001bdb8:	53                   	push   ebx
c001bdb9:	e8 d0 07 ff ff       	call   c000c58e <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001bdbe:	8b 03                	mov    eax,DWORD PTR [ebx]
c001bdc0:	83 c4 20             	add    esp,0x20
c001bdc3:	83 ec 0c             	sub    esp,0xc
c001bdc6:	53                   	push   ebx
c001bdc7:	ff 50 18             	call   DWORD PTR [eax+0x18]
c001bdca:	83 c4 0c             	add    esp,0xc
c001bdcd:	6a 07                	push   0x7
c001bdcf:	6a 00                	push   0x0
c001bdd1:	53                   	push   ebx
c001bdd2:	e8 61 fa ff ff       	call   c001b838 <IDE::read(unsigned char, unsigned char)>
c001bdd7:	83 c4 0c             	add    esp,0xc
c001bdda:	6a 07                	push   0x7
c001bddc:	6a 01                	push   0x1
c001bdde:	53                   	push   ebx
c001bddf:	e8 54 fa ff ff       	call   c001b838 <IDE::read(unsigned char, unsigned char)>
c001bde4:	83 c4 0c             	add    esp,0xc
c001bde7:	6a 01                	push   0x1
c001bde9:	6a 00                	push   0x0
c001bdeb:	53                   	push   ebx
c001bdec:	e8 8f fb ff ff       	call   c001b980 <IDE::enableIRQs(unsigned char, bool)>
c001bdf1:	83 c4 0c             	add    esp,0xc
c001bdf4:	6a 01                	push   0x1
c001bdf6:	6a 01                	push   0x1
c001bdf8:	53                   	push   ebx
c001bdf9:	e8 82 fb ff ff       	call   c001b980 <IDE::enableIRQs(unsigned char, bool)>
c001bdfe:	83 c4 2c             	add    esp,0x2c
c001be01:	31 c0                	xor    eax,eax
c001be03:	5b                   	pop    ebx
c001be04:	5e                   	pop    esi
c001be05:	5f                   	pop    edi
c001be06:	5d                   	pop    ebp
c001be07:	c3                   	ret    

c001be08 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c001be08:	55                   	push   ebp
c001be09:	57                   	push   edi
c001be0a:	56                   	push   esi
c001be0b:	53                   	push   ebx
c001be0c:	83 ec 1c             	sub    esp,0x1c
c001be0f:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001be13:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001be17:	8d 42 f8             	lea    eax,[edx-0x8]
c001be1a:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001be1e:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c001be22:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001be26:	3c 03                	cmp    al,0x3
c001be28:	77 5a                	ja     c001be84 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x7c>
c001be2a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001be2e:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001be32:	0f b6 db             	movzx  ebx,bl
c001be35:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c001be38:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001be3d:	0c 80                	or     al,0x80
c001be3f:	50                   	push   eax
c001be40:	6a 0c                	push   0xc
c001be42:	53                   	push   ebx
c001be43:	56                   	push   esi
c001be44:	e8 2f f9 ff ff       	call   c001b778 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001be49:	66 8b 44 ee 0a       	mov    ax,WORD PTR [esi+ebp*8+0xa]
c001be4e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001be52:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001be56:	0f b6 d2             	movzx  edx,dl
c001be59:	8d 54 10 fa          	lea    edx,[eax+edx*1-0x6]
c001be5d:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001be5f:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001be64:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c001be68:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c001be6c:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001be70:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001be78:	83 c4 2c             	add    esp,0x2c
c001be7b:	5b                   	pop    ebx
c001be7c:	5e                   	pop    esi
c001be7d:	5f                   	pop    edi
c001be7e:	5d                   	pop    ebp
c001be7f:	e9 f4 f8 ff ff       	jmp    c001b778 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001be84:	0f b6 c2             	movzx  eax,dl
c001be87:	83 f8 07             	cmp    eax,0x7
c001be8a:	77 12                	ja     c001be9e <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x96>
c001be8c:	0f b6 c2             	movzx  eax,dl
c001be8f:	0f b6 db             	movzx  ebx,bl
c001be92:	66 8b 94 de 5a 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15a]
c001be9a:	01 c2                	add    edx,eax
c001be9c:	eb 2f                	jmp    c001becd <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc5>
c001be9e:	83 f8 0d             	cmp    eax,0xd
c001bea1:	77 13                	ja     c001beb6 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xae>
c001bea3:	0f b6 db             	movzx  ebx,bl
c001bea6:	0f b6 d2             	movzx  edx,dl
c001bea9:	8b 84 de 5c 01 00 00 	mov    eax,DWORD PTR [esi+ebx*8+0x15c]
c001beb0:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c001beb4:	eb 17                	jmp    c001becd <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc5>
c001beb6:	83 f8 15             	cmp    eax,0x15
c001beb9:	77 14                	ja     c001becf <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc7>
c001bebb:	0f b6 db             	movzx  ebx,bl
c001bebe:	0f b6 d2             	movzx  edx,dl
c001bec1:	66 8b 84 de 5e 01 00 00 	mov    ax,WORD PTR [esi+ebx*8+0x15e]
c001bec9:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c001becd:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001becf:	83 c4 1c             	add    esp,0x1c
c001bed2:	5b                   	pop    ebx
c001bed3:	5e                   	pop    esi
c001bed4:	5f                   	pop    edi
c001bed5:	5d                   	pop    ebp
c001bed6:	c3                   	ret    
c001bed7:	90                   	nop

c001bed8 <IDE::detect()>:
c001bed8:	55                   	push   ebp
c001bed9:	57                   	push   edi
c001beda:	56                   	push   esi
c001bedb:	53                   	push   ebx
c001bedc:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001bee2:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c001bee9:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c001bef0:	0f 85 a4 02 00 00    	jne    c001c19a <IDE::detect()+0x2c2>
c001bef6:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c001befd:	31 f6                	xor    esi,esi
c001beff:	31 ed                	xor    ebp,ebp
c001bf01:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001bf09:	89 e8                	mov    eax,ebp
c001bf0b:	c1 e0 06             	shl    eax,0x6
c001bf0e:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c001bf16:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001bf1a:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001bf1e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bf22:	c1 e0 04             	shl    eax,0x4
c001bf25:	83 c8 a0             	or     eax,0xffffffa0
c001bf28:	0f b6 c0             	movzx  eax,al
c001bf2b:	50                   	push   eax
c001bf2c:	6a 06                	push   0x6
c001bf2e:	56                   	push   esi
c001bf2f:	53                   	push   ebx
c001bf30:	e8 43 f8 ff ff       	call   c001b778 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bf35:	83 c4 0c             	add    esp,0xc
c001bf38:	6a 0c                	push   0xc
c001bf3a:	56                   	push   esi
c001bf3b:	53                   	push   ebx
c001bf3c:	e8 f7 f8 ff ff       	call   c001b838 <IDE::read(unsigned char, unsigned char)>
c001bf41:	83 c4 0c             	add    esp,0xc
c001bf44:	6a 0c                	push   0xc
c001bf46:	56                   	push   esi
c001bf47:	53                   	push   ebx
c001bf48:	e8 eb f8 ff ff       	call   c001b838 <IDE::read(unsigned char, unsigned char)>
c001bf4d:	83 c4 0c             	add    esp,0xc
c001bf50:	6a 0c                	push   0xc
c001bf52:	56                   	push   esi
c001bf53:	53                   	push   ebx
c001bf54:	e8 df f8 ff ff       	call   c001b838 <IDE::read(unsigned char, unsigned char)>
c001bf59:	83 c4 0c             	add    esp,0xc
c001bf5c:	6a 0c                	push   0xc
c001bf5e:	56                   	push   esi
c001bf5f:	53                   	push   ebx
c001bf60:	e8 d3 f8 ff ff       	call   c001b838 <IDE::read(unsigned char, unsigned char)>
c001bf65:	68 ec 00 00 00       	push   0xec
c001bf6a:	6a 07                	push   0x7
c001bf6c:	56                   	push   esi
c001bf6d:	53                   	push   ebx
c001bf6e:	e8 05 f8 ff ff       	call   c001b778 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bf73:	83 c4 1c             	add    esp,0x1c
c001bf76:	6a 0c                	push   0xc
c001bf78:	56                   	push   esi
c001bf79:	53                   	push   ebx
c001bf7a:	e8 b9 f8 ff ff       	call   c001b838 <IDE::read(unsigned char, unsigned char)>
c001bf7f:	83 c4 0c             	add    esp,0xc
c001bf82:	6a 0c                	push   0xc
c001bf84:	56                   	push   esi
c001bf85:	53                   	push   ebx
c001bf86:	e8 ad f8 ff ff       	call   c001b838 <IDE::read(unsigned char, unsigned char)>
c001bf8b:	83 c4 0c             	add    esp,0xc
c001bf8e:	6a 0c                	push   0xc
c001bf90:	56                   	push   esi
c001bf91:	53                   	push   ebx
c001bf92:	e8 a1 f8 ff ff       	call   c001b838 <IDE::read(unsigned char, unsigned char)>
c001bf97:	83 c4 0c             	add    esp,0xc
c001bf9a:	6a 0c                	push   0xc
c001bf9c:	56                   	push   esi
c001bf9d:	53                   	push   ebx
c001bf9e:	e8 95 f8 ff ff       	call   c001b838 <IDE::read(unsigned char, unsigned char)>
c001bfa3:	83 c4 0c             	add    esp,0xc
c001bfa6:	6a 0c                	push   0xc
c001bfa8:	56                   	push   esi
c001bfa9:	53                   	push   ebx
c001bfaa:	e8 89 f8 ff ff       	call   c001b838 <IDE::read(unsigned char, unsigned char)>
c001bfaf:	83 c4 10             	add    esp,0x10
c001bfb2:	84 c0                	test   al,al
c001bfb4:	0f 84 60 01 00 00    	je     c001c11a <IDE::detect()+0x242>
c001bfba:	31 ff                	xor    edi,edi
c001bfbc:	50                   	push   eax
c001bfbd:	6a 0c                	push   0xc
c001bfbf:	56                   	push   esi
c001bfc0:	53                   	push   ebx
c001bfc1:	e8 72 f8 ff ff       	call   c001b838 <IDE::read(unsigned char, unsigned char)>
c001bfc6:	83 c4 10             	add    esp,0x10
c001bfc9:	a8 01                	test   al,0x1
c001bfcb:	0f 85 6a 01 00 00    	jne    c001c13b <IDE::detect()+0x263>
c001bfd1:	a8 80                	test   al,0x80
c001bfd3:	75 04                	jne    c001bfd9 <IDE::detect()+0x101>
c001bfd5:	a8 08                	test   al,0x8
c001bfd7:	75 23                	jne    c001bffc <IDE::detect()+0x124>
c001bfd9:	47                   	inc    edi
c001bfda:	81 ff 17 01 00 00    	cmp    edi,0x117
c001bfe0:	7e da                	jle    c001bfbc <IDE::detect()+0xe4>
c001bfe2:	83 ec 0c             	sub    esp,0xc
c001bfe5:	6a 32                	push   0x32
c001bfe7:	e8 f0 9d ff ff       	call   c0015ddc <milliTenthSleep(unsigned int)>
c001bfec:	83 c4 10             	add    esp,0x10
c001bfef:	81 ff 2c 01 00 00    	cmp    edi,0x12c
c001bff5:	75 c5                	jne    c001bfbc <IDE::detect()+0xe4>
c001bff7:	e9 3f 01 00 00       	jmp    c001c13b <IDE::detect()+0x263>
c001bffc:	31 c9                	xor    ecx,ecx
c001bffe:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c001c002:	8d 7c 24 10          	lea    edi,[esp+0x10]
c001c006:	83 ec 0c             	sub    esp,0xc
c001c009:	68 80 00 00 00       	push   0x80
c001c00e:	57                   	push   edi
c001c00f:	6a 00                	push   0x0
c001c011:	56                   	push   esi
c001c012:	53                   	push   ebx
c001c013:	e8 f0 fd ff ff       	call   c001be08 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c001c018:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c001c01d:	89 e8                	mov    eax,ebp
c001c01f:	89 d1                	mov    ecx,edx
c001c021:	c1 e0 06             	shl    eax,0x6
c001c024:	01 d8                	add    eax,ebx
c001c026:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c001c02d:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c001c034:	89 f2                	mov    edx,esi
c001c036:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c001c03c:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c001c040:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c001c046:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001c04a:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c001c051:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c001c059:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c001c060:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c001c068:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c001c06e:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c001c075:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c001c07b:	8d 54 24 58          	lea    edx,[esp+0x58]
c001c07f:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c001c083:	83 c4 20             	add    esp,0x20
c001c086:	8a 57 37             	mov    dl,BYTE PTR [edi+0x37]
c001c089:	83 c0 02             	add    eax,0x2
c001c08c:	88 90 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],dl
c001c092:	83 c7 02             	add    edi,0x2
c001c095:	8a 57 34             	mov    dl,BYTE PTR [edi+0x34]
c001c098:	88 90 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],dl
c001c09e:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c001c0a2:	75 e2                	jne    c001c086 <IDE::detect()+0x1ae>
c001c0a4:	89 e8                	mov    eax,ebp
c001c0a6:	c1 e0 06             	shl    eax,0x6
c001c0a9:	01 d8                	add    eax,ebx
c001c0ab:	0f b7 90 74 01 00 00 	movzx  edx,WORD PTR [eax+0x174]
c001c0b2:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c001c0b9:	c1 ea 09             	shr    edx,0x9
c001c0bc:	83 e2 01             	and    edx,0x1
c001c0bf:	80 e1 01             	and    cl,0x1
c001c0c2:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c001c0c8:	75 22                	jne    c001c0ec <IDE::detect()+0x214>
c001c0ca:	83 b8 7c 01 00 00 00 	cmp    DWORD PTR [eax+0x17c],0x0
c001c0d1:	74 46                	je     c001c119 <IDE::detect()+0x241>
c001c0d3:	83 ec 0c             	sub    esp,0xc
c001c0d6:	68 7c 01 00 00       	push   0x17c
c001c0db:	e8 d6 b9 fe ff       	call   c0007ab6 <malloc>
c001c0e0:	89 c7                	mov    edi,eax
c001c0e2:	89 04 24             	mov    DWORD PTR [esp],eax
c001c0e5:	e8 1a 05 00 00       	call   c001c604 <ATA::ATA()>
c001c0ea:	eb 17                	jmp    c001c103 <IDE::detect()+0x22b>
c001c0ec:	83 ec 0c             	sub    esp,0xc
c001c0ef:	68 84 01 00 00       	push   0x184
c001c0f4:	e8 bd b9 fe ff       	call   c0007ab6 <malloc>
c001c0f9:	89 c7                	mov    edi,eax
c001c0fb:	89 04 24             	mov    DWORD PTR [esp],eax
c001c0fe:	e8 45 0e 00 00       	call   c001cf48 <ATAPI::ATAPI()>
c001c103:	5a                   	pop    edx
c001c104:	59                   	pop    ecx
c001c105:	57                   	push   edi
c001c106:	53                   	push   ebx
c001c107:	e8 d6 04 ff ff       	call   c000c5e2 <Device::addChild(Device*)>
c001c10c:	8b 07                	mov    eax,DWORD PTR [edi]
c001c10e:	53                   	push   ebx
c001c10f:	55                   	push   ebp
c001c110:	6a 00                	push   0x0
c001c112:	57                   	push   edi
c001c113:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001c116:	83 c4 20             	add    esp,0x20
c001c119:	45                   	inc    ebp
c001c11a:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c001c11f:	74 0d                	je     c001c12e <IDE::detect()+0x256>
c001c121:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c001c129:	e9 db fd ff ff       	jmp    c001bf09 <IDE::detect()+0x31>
c001c12e:	4e                   	dec    esi
c001c12f:	74 69                	je     c001c19a <IDE::detect()+0x2c2>
c001c131:	be 01 00 00 00       	mov    esi,0x1
c001c136:	e9 c6 fd ff ff       	jmp    c001bf01 <IDE::detect()+0x29>
c001c13b:	50                   	push   eax
c001c13c:	6a 04                	push   0x4
c001c13e:	56                   	push   esi
c001c13f:	53                   	push   ebx
c001c140:	e8 f3 f6 ff ff       	call   c001b838 <IDE::read(unsigned char, unsigned char)>
c001c145:	83 c4 0c             	add    esp,0xc
c001c148:	89 c7                	mov    edi,eax
c001c14a:	6a 05                	push   0x5
c001c14c:	56                   	push   esi
c001c14d:	53                   	push   ebx
c001c14e:	e8 e5 f6 ff ff       	call   c001b838 <IDE::read(unsigned char, unsigned char)>
c001c153:	83 c4 10             	add    esp,0x10
c001c156:	89 f9                	mov    ecx,edi
c001c158:	0f b6 c0             	movzx  eax,al
c001c15b:	0f b6 f9             	movzx  edi,cl
c001c15e:	83 ff 14             	cmp    edi,0x14
c001c161:	75 07                	jne    c001c16a <IDE::detect()+0x292>
c001c163:	3d eb 00 00 00       	cmp    eax,0xeb
c001c168:	eb 0a                	jmp    c001c174 <IDE::detect()+0x29c>
c001c16a:	3d 96 00 00 00       	cmp    eax,0x96
c001c16f:	75 a9                	jne    c001c11a <IDE::detect()+0x242>
c001c171:	83 ff 69             	cmp    edi,0x69
c001c174:	75 a4                	jne    c001c11a <IDE::detect()+0x242>
c001c176:	68 a1 00 00 00       	push   0xa1
c001c17b:	6a 07                	push   0x7
c001c17d:	56                   	push   esi
c001c17e:	53                   	push   ebx
c001c17f:	e8 f4 f5 ff ff       	call   c001b778 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c184:	c7 04 24 0a 00 00 00 	mov    DWORD PTR [esp],0xa
c001c18b:	e8 4c 9c ff ff       	call   c0015ddc <milliTenthSleep(unsigned int)>
c001c190:	83 c4 10             	add    esp,0x10
c001c193:	b1 01                	mov    cl,0x1
c001c195:	e9 64 fe ff ff       	jmp    c001bffe <IDE::detect()+0x126>
c001c19a:	81 c4 1c 02 00 00    	add    esp,0x21c
c001c1a0:	5b                   	pop    ebx
c001c1a1:	5e                   	pop    esi
c001c1a2:	5f                   	pop    edi
c001c1a3:	5d                   	pop    ebp
c001c1a4:	c3                   	ret    
c001c1a5:	90                   	nop

c001c1a6 <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c001c1a6:	55                   	push   ebp
c001c1a7:	57                   	push   edi
c001c1a8:	56                   	push   esi
c001c1a9:	53                   	push   ebx
c001c1aa:	83 ec 1c             	sub    esp,0x1c
c001c1ad:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001c1b1:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001c1b5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c1b9:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001c1bd:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001c1c1:	88 c3                	mov    bl,al
c001c1c3:	25 ff 00 00 00       	and    eax,0xff
c001c1c8:	0f 84 88 00 00 00    	je     c001c256 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001c1ce:	83 ec 0c             	sub    esp,0xc
c001c1d1:	89 c7                	mov    edi,eax
c001c1d3:	68 e3 2a 02 c0       	push   0xc0022ae3
c001c1d8:	e8 68 e7 fe ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001c1dd:	83 c4 10             	add    esp,0x10
c001c1e0:	83 ff 01             	cmp    edi,0x1
c001c1e3:	74 6b                	je     c001c250 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xaa>
c001c1e5:	83 ff 02             	cmp    edi,0x2
c001c1e8:	75 58                	jne    c001c242 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x9c>
c001c1ea:	0f b6 7c 24 0c       	movzx  edi,BYTE PTR [esp+0xc]
c001c1ef:	01 ff                	add    edi,edi
c001c1f1:	50                   	push   eax
c001c1f2:	09 fe                	or     esi,edi
c001c1f4:	6a 01                	push   0x1
c001c1f6:	89 f0                	mov    eax,esi
c001c1f8:	0f b6 f0             	movzx  esi,al
c001c1fb:	c1 e6 06             	shl    esi,0x6
c001c1fe:	0f b6 84 35 6d 01 00 00 	movzx  eax,BYTE PTR [ebp+esi*1+0x16d]
c001c206:	50                   	push   eax
c001c207:	55                   	push   ebp
c001c208:	e8 2b f6 ff ff       	call   c001b838 <IDE::read(unsigned char, unsigned char)>
c001c20d:	83 c4 10             	add    esp,0x10
c001c210:	a8 01                	test   al,0x1
c001c212:	74 02                	je     c001c216 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x70>
c001c214:	b3 07                	mov    bl,0x7
c001c216:	a8 02                	test   al,0x2
c001c218:	74 02                	je     c001c21c <IDE::printError(unsigned char, unsigned char, unsigned char)+0x76>
c001c21a:	b3 03                	mov    bl,0x3
c001c21c:	a8 04                	test   al,0x4
c001c21e:	74 02                	je     c001c222 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x7c>
c001c220:	b3 14                	mov    bl,0x14
c001c222:	a8 08                	test   al,0x8
c001c224:	74 02                	je     c001c228 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x82>
c001c226:	b3 03                	mov    bl,0x3
c001c228:	a8 10                	test   al,0x10
c001c22a:	74 02                	je     c001c22e <IDE::printError(unsigned char, unsigned char, unsigned char)+0x88>
c001c22c:	b3 15                	mov    bl,0x15
c001c22e:	a8 20                	test   al,0x20
c001c230:	74 02                	je     c001c234 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x8e>
c001c232:	b3 03                	mov    bl,0x3
c001c234:	a8 40                	test   al,0x40
c001c236:	74 02                	je     c001c23a <IDE::printError(unsigned char, unsigned char, unsigned char)+0x94>
c001c238:	b3 16                	mov    bl,0x16
c001c23a:	a8 80                	test   al,0x80
c001c23c:	74 18                	je     c001c256 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001c23e:	b3 0d                	mov    bl,0xd
c001c240:	eb 14                	jmp    c001c256 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001c242:	83 ff 03             	cmp    edi,0x3
c001c245:	74 0d                	je     c001c254 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xae>
c001c247:	83 ff 04             	cmp    edi,0x4
c001c24a:	75 0a                	jne    c001c256 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001c24c:	b3 08                	mov    bl,0x8
c001c24e:	eb 06                	jmp    c001c256 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001c250:	b3 13                	mov    bl,0x13
c001c252:	eb 02                	jmp    c001c256 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001c254:	b3 17                	mov    bl,0x17
c001c256:	83 c4 1c             	add    esp,0x1c
c001c259:	88 d8                	mov    al,bl
c001c25b:	5b                   	pop    ebx
c001c25c:	5e                   	pop    esi
c001c25d:	5f                   	pop    edi
c001c25e:	5d                   	pop    ebp
c001c25f:	c3                   	ret    

c001c260 <IDE::polling(unsigned char, unsigned int)>:
c001c260:	57                   	push   edi
c001c261:	56                   	push   esi
c001c262:	53                   	push   ebx
c001c263:	bb 04 00 00 00       	mov    ebx,0x4
c001c268:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c001c26c:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001c271:	52                   	push   edx
c001c272:	6a 0c                	push   0xc
c001c274:	56                   	push   esi
c001c275:	57                   	push   edi
c001c276:	e8 bd f5 ff ff       	call   c001b838 <IDE::read(unsigned char, unsigned char)>
c001c27b:	83 c4 10             	add    esp,0x10
c001c27e:	4b                   	dec    ebx
c001c27f:	75 f0                	jne    c001c271 <IDE::polling(unsigned char, unsigned int)+0x11>
c001c281:	bb a0 86 01 00       	mov    ebx,0x186a0
c001c286:	50                   	push   eax
c001c287:	6a 0c                	push   0xc
c001c289:	56                   	push   esi
c001c28a:	57                   	push   edi
c001c28b:	e8 a8 f5 ff ff       	call   c001b838 <IDE::read(unsigned char, unsigned char)>
c001c290:	83 c4 10             	add    esp,0x10
c001c293:	a8 01                	test   al,0x1
c001c295:	75 17                	jne    c001c2ae <IDE::polling(unsigned char, unsigned int)+0x4e>
c001c297:	a8 20                	test   al,0x20
c001c299:	75 0f                	jne    c001c2aa <IDE::polling(unsigned char, unsigned int)+0x4a>
c001c29b:	4b                   	dec    ebx
c001c29c:	74 10                	je     c001c2ae <IDE::polling(unsigned char, unsigned int)+0x4e>
c001c29e:	a8 80                	test   al,0x80
c001c2a0:	75 e4                	jne    c001c286 <IDE::polling(unsigned char, unsigned int)+0x26>
c001c2a2:	a8 08                	test   al,0x8
c001c2a4:	74 e0                	je     c001c286 <IDE::polling(unsigned char, unsigned int)+0x26>
c001c2a6:	31 c0                	xor    eax,eax
c001c2a8:	eb 06                	jmp    c001c2b0 <IDE::polling(unsigned char, unsigned int)+0x50>
c001c2aa:	b0 01                	mov    al,0x1
c001c2ac:	eb 02                	jmp    c001c2b0 <IDE::polling(unsigned char, unsigned int)+0x50>
c001c2ae:	b0 02                	mov    al,0x2
c001c2b0:	5b                   	pop    ebx
c001c2b1:	5e                   	pop    esi
c001c2b2:	5f                   	pop    edi
c001c2b3:	c3                   	ret    

c001c2b4 <SATABus::close(int, int, void*)>:
c001c2b4:	31 c0                	xor    eax,eax
c001c2b6:	c3                   	ret    
c001c2b7:	90                   	nop

c001c2b8 <SATABus::detect()>:
c001c2b8:	c3                   	ret    
c001c2b9:	90                   	nop

c001c2ba <SATABus::SATABus()>:
c001c2ba:	83 ec 0c             	sub    esp,0xc
c001c2bd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c2c1:	83 ec 08             	sub    esp,0x8
c001c2c4:	68 1c 2b 02 c0       	push   0xc0022b1c
c001c2c9:	50                   	push   eax
c001c2ca:	e8 55 06 ff ff       	call   c000c924 <HardDiskController::HardDiskController(char const*)>
c001c2cf:	83 c4 10             	add    esp,0x10
c001c2d2:	ba 48 2b 02 c0       	mov    edx,0xc0022b48
c001c2d7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c2db:	89 10                	mov    DWORD PTR [eax],edx
c001c2dd:	83 ec 0c             	sub    esp,0xc
c001c2e0:	6a 50                	push   0x50
c001c2e2:	e8 a7 bb fe ff       	call   c0007e8e <Phys::allocateContiguousPages(int)>
c001c2e7:	83 c4 10             	add    esp,0x10
c001c2ea:	89 c2                	mov    edx,eax
c001c2ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c2f0:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001c2f6:	83 ec 0c             	sub    esp,0xc
c001c2f9:	6a 50                	push   0x50
c001c2fb:	e8 0d d3 fe ff       	call   c000960d <Virt::allocateKernelVirtualPages(int)>
c001c300:	83 c4 10             	add    esp,0x10
c001c303:	89 c2                	mov    edx,eax
c001c305:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c309:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001c30f:	a1 b0 5f 02 c0       	mov    eax,ds:0xc0025fb0
c001c314:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001c318:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c001c31e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001c322:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c001c328:	83 ec 0c             	sub    esp,0xc
c001c32b:	6a 03                	push   0x3
c001c32d:	6a 50                	push   0x50
c001c32f:	51                   	push   ecx
c001c330:	52                   	push   edx
c001c331:	50                   	push   eax
c001c332:	e8 e3 db fe ff       	call   c0009f1a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001c337:	83 c4 20             	add    esp,0x20
c001c33a:	90                   	nop
c001c33b:	83 c4 0c             	add    esp,0xc
c001c33e:	c3                   	ret    
c001c33f:	90                   	nop

c001c340 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c001c340:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c344:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c001c347:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001c34a:	09 c2                	or     edx,eax
c001c34c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c350:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001c356:	8b 08                	mov    ecx,DWORD PTR [eax]
c001c358:	31 c0                	xor    eax,eax
c001c35a:	c1 e9 08             	shr    ecx,0x8
c001c35d:	83 e1 0f             	and    ecx,0xf
c001c360:	39 c8                	cmp    eax,ecx
c001c362:	74 0a                	je     c001c36e <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x2e>
c001c364:	f6 c2 01             	test   dl,0x1
c001c367:	74 08                	je     c001c371 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c001c369:	d1 ea                	shr    edx,1
c001c36b:	40                   	inc    eax
c001c36c:	eb f2                	jmp    c001c360 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x20>
c001c36e:	83 c8 ff             	or     eax,0xffffffff
c001c371:	c3                   	ret    

c001c372 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c001c372:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001c376:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c001c379:	89 c2                	mov    edx,eax
c001c37b:	c1 ea 08             	shr    edx,0x8
c001c37e:	83 e2 0f             	and    edx,0xf
c001c381:	4a                   	dec    edx
c001c382:	75 32                	jne    c001c3b6 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c001c384:	83 e0 0f             	and    eax,0xf
c001c387:	83 f8 03             	cmp    eax,0x3
c001c38a:	75 2a                	jne    c001c3b6 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c001c38c:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c001c38f:	b8 02 00 00 00       	mov    eax,0x2
c001c394:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c001c39a:	74 1c                	je     c001c3b8 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c001c39c:	b8 04 00 00 00       	mov    eax,0x4
c001c3a1:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c001c3a7:	74 0f                	je     c001c3b8 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c001c3a9:	31 c0                	xor    eax,eax
c001c3ab:	83 fa 03             	cmp    edx,0x3
c001c3ae:	0f 94 c0             	sete   al
c001c3b1:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c001c3b5:	c3                   	ret    
c001c3b6:	31 c0                	xor    eax,eax
c001c3b8:	c3                   	ret    
c001c3b9:	90                   	nop

c001c3ba <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c001c3ba:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c3be:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001c3c1:	0f ba e2 0f          	bt     edx,0xf
c001c3c5:	72 f7                	jb     c001c3be <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c001c3c7:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001c3ca:	83 ca 10             	or     edx,0x10
c001c3cd:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001c3d0:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001c3d3:	83 ca 01             	or     edx,0x1
c001c3d6:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001c3d9:	c3                   	ret    

c001c3da <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c001c3da:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c3de:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001c3e1:	83 e2 fe             	and    edx,0xfffffffe
c001c3e4:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001c3e7:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001c3ea:	83 e2 ef             	and    edx,0xffffffef
c001c3ed:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001c3f0:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001c3f3:	0f ba e2 0e          	bt     edx,0xe
c001c3f7:	72 f7                	jb     c001c3f0 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c001c3f9:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001c3fc:	0f ba e2 0f          	bt     edx,0xf
c001c400:	72 ee                	jb     c001c3f0 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c001c402:	c3                   	ret    
c001c403:	90                   	nop

c001c404 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c001c404:	55                   	push   ebp
c001c405:	57                   	push   edi
c001c406:	56                   	push   esi
c001c407:	53                   	push   ebx
c001c408:	83 ec 1c             	sub    esp,0x1c
c001c40b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001c40f:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001c413:	53                   	push   ebx
c001c414:	56                   	push   esi
c001c415:	e8 c0 ff ff ff       	call   c001c3da <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c001c41a:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c001c41e:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c001c424:	83 ec 0c             	sub    esp,0xc
c001c427:	c1 e5 0a             	shl    ebp,0xa
c001c42a:	01 e8                	add    eax,ebp
c001c42c:	89 03                	mov    DWORD PTR [ebx],eax
c001c42e:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c430:	68 00 04 00 00       	push   0x400
c001c435:	6a 00                	push   0x0
c001c437:	50                   	push   eax
c001c438:	e8 b3 40 fe ff       	call   c00004f0 <memset>
c001c43d:	8b 86 5c 01 00 00    	mov    eax,DWORD PTR [esi+0x15c]
c001c443:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c001c447:	01 e8                	add    eax,ebp
c001c449:	83 c4 1c             	add    esp,0x1c
c001c44c:	89 03                	mov    DWORD PTR [ebx],eax
c001c44e:	c1 e2 08             	shl    edx,0x8
c001c451:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001c458:	8d ba 00 80 00 00    	lea    edi,[edx+0x8000]
c001c45e:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c001c464:	01 f8                	add    eax,edi
c001c466:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001c469:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001c46c:	68 00 01 00 00       	push   0x100
c001c471:	6a 00                	push   0x0
c001c473:	50                   	push   eax
c001c474:	e8 77 40 fe ff       	call   c00004f0 <memset>
c001c479:	8b 96 5c 01 00 00    	mov    edx,DWORD PTR [esi+0x15c]
c001c47f:	01 fa                	add    edx,edi
c001c481:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c001c485:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c001c488:	c1 e7 0d             	shl    edi,0xd
c001c48b:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001c492:	8d 87 00 a0 00 00    	lea    eax,[edi+0xa000]
c001c498:	03 ae 58 01 00 00    	add    ebp,DWORD PTR [esi+0x158]
c001c49e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001c4a2:	31 ff                	xor    edi,edi
c001c4a4:	83 c4 10             	add    esp,0x10
c001c4a7:	66 c7 45 02 08 00    	mov    WORD PTR [ebp+0x2],0x8
c001c4ad:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c4b1:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c001c4b7:	83 c5 20             	add    ebp,0x20
c001c4ba:	01 f8                	add    eax,edi
c001c4bc:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001c4bf:	52                   	push   edx
c001c4c0:	68 00 01 00 00       	push   0x100
c001c4c5:	6a 00                	push   0x0
c001c4c7:	50                   	push   eax
c001c4c8:	e8 23 40 fe ff       	call   c00004f0 <memset>
c001c4cd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001c4d1:	83 c4 10             	add    esp,0x10
c001c4d4:	03 86 5c 01 00 00    	add    eax,DWORD PTR [esi+0x15c]
c001c4da:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c001c4e1:	01 f8                	add    eax,edi
c001c4e3:	81 c7 00 01 00 00    	add    edi,0x100
c001c4e9:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001c4ec:	81 ff 00 20 00 00    	cmp    edi,0x2000
c001c4f2:	75 b3                	jne    c001c4a7 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa3>
c001c4f4:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c001c4fb:	50                   	push   eax
c001c4fc:	50                   	push   eax
c001c4fd:	53                   	push   ebx
c001c4fe:	56                   	push   esi
c001c4ff:	e8 b6 fe ff ff       	call   c001c3ba <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>
c001c504:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c001c50b:	83 c4 2c             	add    esp,0x2c
c001c50e:	5b                   	pop    ebx
c001c50f:	5e                   	pop    esi
c001c510:	5f                   	pop    edi
c001c511:	5d                   	pop    ebp
c001c512:	c3                   	ret    
c001c513:	90                   	nop

c001c514 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c001c514:	55                   	push   ebp
c001c515:	57                   	push   edi
c001c516:	56                   	push   esi
c001c517:	53                   	push   ebx
c001c518:	31 db                	xor    ebx,ebx
c001c51a:	83 ec 0c             	sub    esp,0xc
c001c51d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001c521:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001c525:	8b 78 0c             	mov    edi,DWORD PTR [eax+0xc]
c001c528:	f7 c7 01 00 00 00    	test   edi,0x1
c001c52e:	74 7a                	je     c001c5aa <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c001c530:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001c534:	89 d8                	mov    eax,ebx
c001c536:	c1 e0 07             	shl    eax,0x7
c001c539:	8d ac 01 00 01 00 00 	lea    ebp,[ecx+eax*1+0x100]
c001c540:	55                   	push   ebp
c001c541:	56                   	push   esi
c001c542:	e8 2b fe ff ff       	call   c001c372 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c001c547:	5a                   	pop    edx
c001c548:	83 f8 01             	cmp    eax,0x1
c001c54b:	59                   	pop    ecx
c001c54c:	75 21                	jne    c001c56f <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x5b>
c001c54e:	50                   	push   eax
c001c54f:	53                   	push   ebx
c001c550:	55                   	push   ebp
c001c551:	56                   	push   esi
c001c552:	e8 ad fe ff ff       	call   c001c404 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001c557:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c001c55e:	e8 53 b5 fe ff       	call   c0007ab6 <malloc>
c001c563:	89 c5                	mov    ebp,eax
c001c565:	89 04 24             	mov    DWORD PTR [esp],eax
c001c568:	e8 99 10 00 00       	call   c001d606 <SATA::SATA()>
c001c56d:	eb 24                	jmp    c001c593 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x7f>
c001c56f:	83 f8 04             	cmp    eax,0x4
c001c572:	75 36                	jne    c001c5aa <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c001c574:	51                   	push   ecx
c001c575:	53                   	push   ebx
c001c576:	55                   	push   ebp
c001c577:	56                   	push   esi
c001c578:	e8 87 fe ff ff       	call   c001c404 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001c57d:	c7 04 24 84 01 00 00 	mov    DWORD PTR [esp],0x184
c001c584:	e8 2d b5 fe ff       	call   c0007ab6 <malloc>
c001c589:	89 c5                	mov    ebp,eax
c001c58b:	89 04 24             	mov    DWORD PTR [esp],eax
c001c58e:	e8 d5 17 00 00       	call   c001dd68 <SATAPI::SATAPI()>
c001c593:	58                   	pop    eax
c001c594:	5a                   	pop    edx
c001c595:	55                   	push   ebp
c001c596:	56                   	push   esi
c001c597:	e8 46 00 ff ff       	call   c000c5e2 <Device::addChild(Device*)>
c001c59c:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001c59f:	56                   	push   esi
c001c5a0:	6a 00                	push   0x0
c001c5a2:	53                   	push   ebx
c001c5a3:	55                   	push   ebp
c001c5a4:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001c5a7:	83 c4 20             	add    esp,0x20
c001c5aa:	d1 ef                	shr    edi,1
c001c5ac:	43                   	inc    ebx
c001c5ad:	83 fb 20             	cmp    ebx,0x20
c001c5b0:	0f 85 72 ff ff ff    	jne    c001c528 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14>
c001c5b6:	83 c4 0c             	add    esp,0xc
c001c5b9:	5b                   	pop    ebx
c001c5ba:	5e                   	pop    esi
c001c5bb:	5f                   	pop    edi
c001c5bc:	5d                   	pop    ebp
c001c5bd:	c3                   	ret    

c001c5be <SATABus::open(int, int, void*)>:
c001c5be:	83 ec 14             	sub    esp,0x14
c001c5c1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c5c5:	8b 90 34 01 00 00    	mov    edx,DWORD PTR [eax+0x134]
c001c5cb:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c001c5d1:	52                   	push   edx
c001c5d2:	50                   	push   eax
c001c5d3:	e8 3c ff ff ff       	call   c001c514 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c001c5d8:	31 c0                	xor    eax,eax
c001c5da:	83 c4 1c             	add    esp,0x1c
c001c5dd:	c3                   	ret    

c001c5de <ATA::close(int, int, void*)>:
c001c5de:	83 ec 0c             	sub    esp,0xc
c001c5e1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c5e5:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001c5eb:	85 c0                	test   eax,eax
c001c5ed:	74 0c                	je     c001c5fb <ATA::close(int, int, void*)+0x1d>
c001c5ef:	83 ec 0c             	sub    esp,0xc
c001c5f2:	8b 10                	mov    edx,DWORD PTR [eax]
c001c5f4:	50                   	push   eax
c001c5f5:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001c5f8:	83 c4 10             	add    esp,0x10
c001c5fb:	31 c0                	xor    eax,eax
c001c5fd:	83 c4 0c             	add    esp,0xc
c001c600:	c3                   	ret    
c001c601:	90                   	nop

c001c602 <ATA::powerSaving(PowerSavingLevel)>:
c001c602:	c3                   	ret    
c001c603:	90                   	nop

c001c604 <ATA::ATA()>:
c001c604:	83 ec 0c             	sub    esp,0xc
c001c607:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c60b:	83 ec 04             	sub    esp,0x4
c001c60e:	68 00 02 00 00       	push   0x200
c001c613:	68 15 2c 02 c0       	push   0xc0022c15
c001c618:	50                   	push   eax
c001c619:	e8 90 03 ff ff       	call   c000c9ae <PhysicalDisk::PhysicalDisk(char const*, int)>
c001c61e:	83 c4 10             	add    esp,0x10
c001c621:	ba 88 2b 02 c0       	mov    edx,0xc0022b88
c001c626:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c62a:	89 10                	mov    DWORD PTR [eax],edx
c001c62c:	90                   	nop
c001c62d:	83 c4 0c             	add    esp,0xc
c001c630:	c3                   	ret    
c001c631:	90                   	nop

c001c632 <ATA::flush(bool)>:
c001c632:	53                   	push   ebx
c001c633:	83 ec 08             	sub    esp,0x8
c001c636:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c63a:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001c63f:	83 f8 01             	cmp    eax,0x1
c001c642:	19 c0                	sbb    eax,eax
c001c644:	83 e0 fd             	and    eax,0xfffffffd
c001c647:	05 ea 00 00 00       	add    eax,0xea
c001c64c:	50                   	push   eax
c001c64d:	6a 07                	push   0x7
c001c64f:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c656:	50                   	push   eax
c001c657:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c65d:	e8 16 f1 ff ff       	call   c001b778 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c662:	83 c4 0c             	add    esp,0xc
c001c665:	6a 00                	push   0x0
c001c667:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c66e:	50                   	push   eax
c001c66f:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c675:	e8 e6 fb ff ff       	call   c001c260 <IDE::polling(unsigned char, unsigned int)>
c001c67a:	83 c4 18             	add    esp,0x18
c001c67d:	5b                   	pop    ebx
c001c67e:	c3                   	ret    
c001c67f:	90                   	nop

c001c680 <ATA::readyForCommand()>:
c001c680:	56                   	push   esi
c001c681:	53                   	push   ebx
c001c682:	53                   	push   ebx
c001c683:	31 db                	xor    ebx,ebx
c001c685:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001c689:	51                   	push   ecx
c001c68a:	6a 0c                	push   0xc
c001c68c:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001c693:	50                   	push   eax
c001c694:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001c69a:	e8 99 f1 ff ff       	call   c001b838 <IDE::read(unsigned char, unsigned char)>
c001c69f:	83 c4 10             	add    esp,0x10
c001c6a2:	a8 88                	test   al,0x88
c001c6a4:	74 1f                	je     c001c6c5 <ATA::readyForCommand()+0x45>
c001c6a6:	43                   	inc    ebx
c001c6a7:	83 fb 63             	cmp    ebx,0x63
c001c6aa:	7e dd                	jle    c001c689 <ATA::readyForCommand()+0x9>
c001c6ac:	83 ec 0c             	sub    esp,0xc
c001c6af:	6a 0a                	push   0xa
c001c6b1:	e8 26 97 ff ff       	call   c0015ddc <milliTenthSleep(unsigned int)>
c001c6b6:	83 c4 10             	add    esp,0x10
c001c6b9:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c001c6bf:	75 c8                	jne    c001c689 <ATA::readyForCommand()+0x9>
c001c6c1:	31 c0                	xor    eax,eax
c001c6c3:	eb 02                	jmp    c001c6c7 <ATA::readyForCommand()+0x47>
c001c6c5:	b0 01                	mov    al,0x1
c001c6c7:	5a                   	pop    edx
c001c6c8:	5b                   	pop    ebx
c001c6c9:	5e                   	pop    esi
c001c6ca:	c3                   	ret    
c001c6cb:	90                   	nop

c001c6cc <ATA::access(unsigned long long, int, void*, bool)>:
c001c6cc:	55                   	push   ebp
c001c6cd:	57                   	push   edi
c001c6ce:	56                   	push   esi
c001c6cf:	53                   	push   ebx
c001c6d0:	83 ec 2c             	sub    esp,0x2c
c001c6d3:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001c6d7:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001c6db:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001c6df:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001c6e3:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c001c6e7:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001c6eb:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001c6ef:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001c6f5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001c6f9:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001c6ff:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001c703:	c1 e0 06             	shl    eax,0x6
c001c706:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c001c70e:	74 5d                	je     c001c76d <ATA::access(unsigned long long, int, void*, bool)+0xa1>
c001c710:	89 fa                	mov    edx,edi
c001c712:	89 f0                	mov    eax,esi
c001c714:	0f ac d0 1c          	shrd   eax,edx,0x1c
c001c718:	c1 ea 1c             	shr    edx,0x1c
c001c71b:	89 d1                	mov    ecx,edx
c001c71d:	09 c1                	or     ecx,eax
c001c71f:	74 25                	je     c001c746 <ATA::access(unsigned long long, int, void*, bool)+0x7a>
c001c721:	31 ed                	xor    ebp,ebp
c001c723:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c001c72a:	89 fa                	mov    edx,edi
c001c72c:	89 f0                	mov    eax,esi
c001c72e:	0f ad d0             	shrd   eax,edx,cl
c001c731:	d3 ea                	shr    edx,cl
c001c733:	f6 c1 20             	test   cl,0x20
c001c736:	74 02                	je     c001c73a <ATA::access(unsigned long long, int, void*, bool)+0x6e>
c001c738:	89 d0                	mov    eax,edx
c001c73a:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c001c73e:	45                   	inc    ebp
c001c73f:	83 fd 06             	cmp    ebp,0x6
c001c742:	75 df                	jne    c001c723 <ATA::access(unsigned long long, int, void*, bool)+0x57>
c001c744:	eb 76                	jmp    c001c7bc <ATA::access(unsigned long long, int, void*, bool)+0xf0>
c001c746:	89 f0                	mov    eax,esi
c001c748:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c001c74d:	89 fa                	mov    edx,edi
c001c74f:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001c756:	0f ac d0 10          	shrd   eax,edx,0x10
c001c75a:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001c75f:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001c763:	c1 ee 18             	shr    esi,0x18
c001c766:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c001c76b:	eb 56                	jmp    c001c7c3 <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c001c76d:	6a 00                	push   0x0
c001c76f:	6a 3f                	push   0x3f
c001c771:	57                   	push   edi
c001c772:	56                   	push   esi
c001c773:	e8 a8 2a 00 00       	call   c001f220 <__umoddi3>
c001c778:	83 c4 10             	add    esp,0x10
c001c77b:	40                   	inc    eax
c001c77c:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c001c780:	6a 00                	push   0x0
c001c782:	68 f0 03 00 00       	push   0x3f0
c001c787:	57                   	push   edi
c001c788:	56                   	push   esi
c001c789:	e8 92 29 00 00       	call   c001f120 <__udivdi3>
c001c78e:	83 c4 10             	add    esp,0x10
c001c791:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c001c796:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001c79d:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001c7a2:	6a 00                	push   0x0
c001c7a4:	6a 3f                	push   0x3f
c001c7a6:	57                   	push   edi
c001c7a7:	56                   	push   esi
c001c7a8:	e8 73 29 00 00       	call   c001f120 <__udivdi3>
c001c7ad:	83 c4 10             	add    esp,0x10
c001c7b0:	83 e0 0f             	and    eax,0xf
c001c7b3:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c001c7b8:	89 c6                	mov    esi,eax
c001c7ba:	eb 07                	jmp    c001c7c3 <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c001c7bc:	31 f6                	xor    esi,esi
c001c7be:	c6 44 24 0e 02       	mov    BYTE PTR [esp+0xe],0x2
c001c7c3:	bf 01 00 00 00       	mov    edi,0x1
c001c7c8:	50                   	push   eax
c001c7c9:	6a 00                	push   0x0
c001c7cb:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c7d2:	50                   	push   eax
c001c7d3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001c7d7:	e8 a4 f1 ff ff       	call   c001b980 <IDE::enableIRQs(unsigned char, bool)>
c001c7dc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c7df:	e8 9c fe ff ff       	call   c001c680 <ATA::readyForCommand()>
c001c7e4:	83 c4 10             	add    esp,0x10
c001c7e7:	84 c0                	test   al,al
c001c7e9:	0f 84 69 02 00 00    	je     c001ca58 <ATA::access(unsigned long long, int, void*, bool)+0x38c>
c001c7ef:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001c7f5:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001c7fb:	c1 e0 04             	shl    eax,0x4
c001c7fe:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c001c805:	09 c6                	or     esi,eax
c001c807:	f6 44 24 0e 03       	test   BYTE PTR [esp+0xe],0x3
c001c80c:	75 05                	jne    c001c813 <ATA::access(unsigned long long, int, void*, bool)+0x147>
c001c80e:	83 ce a0             	or     esi,0xffffffa0
c001c811:	eb 03                	jmp    c001c816 <ATA::access(unsigned long long, int, void*, bool)+0x14a>
c001c813:	83 ce e0             	or     esi,0xffffffe0
c001c816:	89 f0                	mov    eax,esi
c001c818:	0f b6 f0             	movzx  esi,al
c001c81b:	56                   	push   esi
c001c81c:	6a 06                	push   0x6
c001c81e:	51                   	push   ecx
c001c81f:	52                   	push   edx
c001c820:	e8 53 ef ff ff       	call   c001b778 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c825:	83 c4 10             	add    esp,0x10
c001c828:	6a 00                	push   0x0
c001c82a:	6a 01                	push   0x1
c001c82c:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c833:	50                   	push   eax
c001c834:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c83a:	e8 39 ef ff ff       	call   c001b778 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c83f:	83 c4 10             	add    esp,0x10
c001c842:	0f b6 44 24 0e       	movzx  eax,BYTE PTR [esp+0xe]
c001c847:	83 f8 02             	cmp    eax,0x2
c001c84a:	75 6e                	jne    c001c8ba <ATA::access(unsigned long long, int, void*, bool)+0x1ee>
c001c84c:	6a 00                	push   0x0
c001c84e:	6a 08                	push   0x8
c001c850:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c857:	50                   	push   eax
c001c858:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c85e:	e8 15 ef ff ff       	call   c001b778 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c863:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c001c868:	50                   	push   eax
c001c869:	6a 09                	push   0x9
c001c86b:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c872:	50                   	push   eax
c001c873:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c879:	e8 fa ee ff ff       	call   c001b778 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c87e:	83 c4 20             	add    esp,0x20
c001c881:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c001c886:	50                   	push   eax
c001c887:	6a 0a                	push   0xa
c001c889:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c890:	50                   	push   eax
c001c891:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c897:	e8 dc ee ff ff       	call   c001b778 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c89c:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c001c8a1:	50                   	push   eax
c001c8a2:	6a 0b                	push   0xb
c001c8a4:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c8ab:	50                   	push   eax
c001c8ac:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c8b2:	e8 c1 ee ff ff       	call   c001b778 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c8b7:	83 c4 20             	add    esp,0x20
c001c8ba:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c001c8bf:	50                   	push   eax
c001c8c0:	6a 02                	push   0x2
c001c8c2:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c8c9:	50                   	push   eax
c001c8ca:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c8d0:	e8 a3 ee ff ff       	call   c001b778 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c8d5:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c001c8da:	50                   	push   eax
c001c8db:	6a 03                	push   0x3
c001c8dd:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c8e4:	50                   	push   eax
c001c8e5:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c8eb:	e8 88 ee ff ff       	call   c001b778 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c8f0:	83 c4 20             	add    esp,0x20
c001c8f3:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c001c8f8:	50                   	push   eax
c001c8f9:	6a 04                	push   0x4
c001c8fb:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c902:	50                   	push   eax
c001c903:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c909:	e8 6a ee ff ff       	call   c001b778 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c90e:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001c913:	50                   	push   eax
c001c914:	6a 05                	push   0x5
c001c916:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c91d:	50                   	push   eax
c001c91e:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c924:	e8 4f ee ff ff       	call   c001b778 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c929:	83 c4 20             	add    esp,0x20
c001c92c:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001c931:	0f b6 54 24 0e       	movzx  edx,BYTE PTR [esp+0xe]
c001c936:	74 11                	je     c001c949 <ATA::access(unsigned long long, int, void*, bool)+0x27d>
c001c938:	b8 30 00 00 00       	mov    eax,0x30
c001c93d:	83 fa 02             	cmp    edx,0x2
c001c940:	75 16                	jne    c001c958 <ATA::access(unsigned long long, int, void*, bool)+0x28c>
c001c942:	b8 34 00 00 00       	mov    eax,0x34
c001c947:	eb 0f                	jmp    c001c958 <ATA::access(unsigned long long, int, void*, bool)+0x28c>
c001c949:	b8 20 00 00 00       	mov    eax,0x20
c001c94e:	83 fa 02             	cmp    edx,0x2
c001c951:	75 05                	jne    c001c958 <ATA::access(unsigned long long, int, void*, bool)+0x28c>
c001c953:	b8 24 00 00 00       	mov    eax,0x24
c001c958:	50                   	push   eax
c001c959:	6a 07                	push   0x7
c001c95b:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c962:	50                   	push   eax
c001c963:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c969:	e8 0a ee ff ff       	call   c001b778 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c96e:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c001c972:	83 c4 10             	add    esp,0x10
c001c975:	0f b6 6c 24 0f       	movzx  ebp,BYTE PTR [esp+0xf]
c001c97a:	85 f6                	test   esi,esi
c001c97c:	0f 84 b3 00 00 00    	je     c001ca35 <ATA::access(unsigned long long, int, void*, bool)+0x369>
c001c982:	50                   	push   eax
c001c983:	6a 01                	push   0x1
c001c985:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c98c:	50                   	push   eax
c001c98d:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c993:	e8 c8 f8 ff ff       	call   c001c260 <IDE::polling(unsigned char, unsigned int)>
c001c998:	83 c4 10             	add    esp,0x10
c001c99b:	0f b6 f8             	movzx  edi,al
c001c99e:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c001c9a4:	85 ff                	test   edi,edi
c001c9a6:	74 1d                	je     c001c9c5 <ATA::access(unsigned long long, int, void*, bool)+0x2f9>
c001c9a8:	57                   	push   edi
c001c9a9:	0f b6 d2             	movzx  edx,dl
c001c9ac:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c001c9b3:	50                   	push   eax
c001c9b4:	52                   	push   edx
c001c9b5:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c9bb:	e8 e6 f7 ff ff       	call   c001c1a6 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001c9c0:	e9 90 00 00 00       	jmp    c001ca55 <ATA::access(unsigned long long, int, void*, bool)+0x389>
c001c9c5:	85 ed                	test   ebp,ebp
c001c9c7:	74 3b                	je     c001ca04 <ATA::access(unsigned long long, int, void*, bool)+0x338>
c001c9c9:	31 c9                	xor    ecx,ecx
c001c9cb:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001c9cf:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001c9d3:	66 8b 3c 48          	mov    di,WORD PTR [eax+ecx*2]
c001c9d7:	50                   	push   eax
c001c9d8:	50                   	push   eax
c001c9d9:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c9e0:	50                   	push   eax
c001c9e1:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c9e7:	e8 7a ed ff ff       	call   c001b766 <IDE::getBase(unsigned char)>
c001c9ec:	89 c2                	mov    edx,eax
c001c9ee:	89 f8                	mov    eax,edi
c001c9f0:	66 ef                	out    dx,ax
c001c9f2:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001c9f6:	83 c4 10             	add    esp,0x10
c001c9f9:	41                   	inc    ecx
c001c9fa:	81 f9 00 01 00 00    	cmp    ecx,0x100
c001ca00:	75 c9                	jne    c001c9cb <ATA::access(unsigned long long, int, void*, bool)+0x2ff>
c001ca02:	eb 23                	jmp    c001ca27 <ATA::access(unsigned long long, int, void*, bool)+0x35b>
c001ca04:	0f b6 d2             	movzx  edx,dl
c001ca07:	51                   	push   ecx
c001ca08:	51                   	push   ecx
c001ca09:	52                   	push   edx
c001ca0a:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ca10:	e8 51 ed ff ff       	call   c001b766 <IDE::getBase(unsigned char)>
c001ca15:	b9 00 01 00 00       	mov    ecx,0x100
c001ca1a:	89 c2                	mov    edx,eax
c001ca1c:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c001ca20:	fc                   	cld    
c001ca21:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c001ca24:	83 c4 10             	add    esp,0x10
c001ca27:	81 44 24 50 00 02 00 00 	add    DWORD PTR [esp+0x50],0x200
c001ca2f:	4e                   	dec    esi
c001ca30:	e9 45 ff ff ff       	jmp    c001c97a <ATA::access(unsigned long long, int, void*, bool)+0x2ae>
c001ca35:	31 ff                	xor    edi,edi
c001ca37:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001ca3c:	74 1a                	je     c001ca58 <ATA::access(unsigned long long, int, void*, bool)+0x38c>
c001ca3e:	50                   	push   eax
c001ca3f:	50                   	push   eax
c001ca40:	0f b6 44 24 16       	movzx  eax,BYTE PTR [esp+0x16]
c001ca45:	83 f8 02             	cmp    eax,0x2
c001ca48:	0f 94 c0             	sete   al
c001ca4b:	0f b6 c0             	movzx  eax,al
c001ca4e:	50                   	push   eax
c001ca4f:	53                   	push   ebx
c001ca50:	e8 dd fb ff ff       	call   c001c632 <ATA::flush(bool)>
c001ca55:	83 c4 10             	add    esp,0x10
c001ca58:	83 c4 2c             	add    esp,0x2c
c001ca5b:	89 f8                	mov    eax,edi
c001ca5d:	5b                   	pop    ebx
c001ca5e:	5e                   	pop    esi
c001ca5f:	5f                   	pop    edi
c001ca60:	5d                   	pop    ebp
c001ca61:	c3                   	ret    

c001ca62 <ATA::detectCHS()>:
c001ca62:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001ca66:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c001ca6c:	c1 e0 06             	shl    eax,0x6
c001ca6f:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c001ca75:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c001ca7f:	c7 44 24 04 6c 2b 02 c0 	mov    DWORD PTR [esp+0x4],0xc0022b6c
c001ca87:	e9 61 47 ff ff       	jmp    c00111ed <KePanic(char const*)>

c001ca8c <ATA::open(int, int, void*)>:
c001ca8c:	53                   	push   ebx
c001ca8d:	83 ec 08             	sub    esp,0x8
c001ca90:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001ca94:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001ca98:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ca9c:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001caa2:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001caa8:	c1 e0 06             	shl    eax,0x6
c001caab:	01 d0                	add    eax,edx
c001caad:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c001cab4:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c001caba:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c001cac1:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001cacb:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c001cad1:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c001cad8:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c001cadf:	75 0c                	jne    c001caed <ATA::open(int, int, void*)+0x61>
c001cae1:	83 ec 0c             	sub    esp,0xc
c001cae4:	53                   	push   ebx
c001cae5:	e8 78 ff ff ff       	call   c001ca62 <ATA::detectCHS()>
c001caea:	83 c4 10             	add    esp,0x10
c001caed:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001caf3:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001caf9:	c1 e0 06             	shl    eax,0x6
c001cafc:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c001cb03:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001cb0d:	d1 e8                	shr    eax,1
c001cb0f:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c001cb15:	6a 04                	push   0x4
c001cb17:	6a 0c                	push   0xc
c001cb19:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cb20:	50                   	push   eax
c001cb21:	52                   	push   edx
c001cb22:	e8 51 ec ff ff       	call   c001b778 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cb27:	90                   	nop
c001cb28:	90                   	nop
c001cb29:	6a 00                	push   0x0
c001cb2b:	6a 0c                	push   0xc
c001cb2d:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cb34:	50                   	push   eax
c001cb35:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cb3b:	e8 38 ec ff ff       	call   c001b778 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cb40:	83 c4 14             	add    esp,0x14
c001cb43:	53                   	push   ebx
c001cb44:	e8 cd fe fe ff       	call   c000ca16 <PhysicalDisk::startCache()>
c001cb49:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001cb4c:	e8 09 11 ff ff       	call   c000dc5a <createPartitionsForDisk(PhysicalDisk*)>
c001cb51:	31 c0                	xor    eax,eax
c001cb53:	83 c4 18             	add    esp,0x18
c001cb56:	5b                   	pop    ebx
c001cb57:	c3                   	ret    

c001cb58 <combineCharAndColour(char, unsigned char)>:
c001cb58:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001cb5d:	66 0f be 54 24 04    	movsx  dx,BYTE PTR [esp+0x4]
c001cb63:	c1 e0 08             	shl    eax,0x8
c001cb66:	09 d0                	or     eax,edx
c001cb68:	c3                   	ret    

c001cb69 <combineColours(unsigned char, unsigned char)>:
c001cb69:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001cb6e:	c1 e0 04             	shl    eax,0x4
c001cb71:	0b 44 24 04          	or     eax,DWORD PTR [esp+0x4]
c001cb75:	c3                   	ret    

c001cb76 <ATA::read(unsigned long long, int, void*)>:
c001cb76:	55                   	push   ebp
c001cb77:	57                   	push   edi
c001cb78:	56                   	push   esi
c001cb79:	be 04 00 00 00       	mov    esi,0x4
c001cb7e:	53                   	push   ebx
c001cb7f:	83 ec 0c             	sub    esp,0xc
c001cb82:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001cb86:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001cb8a:	8d 7b ff             	lea    edi,[ebx-0x1]
c001cb8d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001cb91:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001cb95:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001cb9b:	0f 87 a1 01 00 00    	ja     c001cd42 <ATA::read(unsigned long long, int, void*)+0x1cc>
c001cba1:	be 06 00 00 00       	mov    esi,0x6
c001cba6:	85 c9                	test   ecx,ecx
c001cba8:	0f 84 94 01 00 00    	je     c001cd42 <ATA::read(unsigned long long, int, void*)+0x1cc>
c001cbae:	55                   	push   ebp
c001cbaf:	55                   	push   ebp
c001cbb0:	6a 00                	push   0x0
c001cbb2:	51                   	push   ecx
c001cbb3:	53                   	push   ebx
c001cbb4:	52                   	push   edx
c001cbb5:	50                   	push   eax
c001cbb6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001cbba:	e8 0d fb ff ff       	call   c001c6cc <ATA::access(unsigned long long, int, void*, bool)>
c001cbbf:	83 c4 20             	add    esp,0x20
c001cbc2:	89 c6                	mov    esi,eax
c001cbc4:	85 c0                	test   eax,eax
c001cbc6:	0f 85 71 01 00 00    	jne    c001cd3d <ATA::read(unsigned long long, int, void*)+0x1c7>
c001cbcc:	03 1d 54 ae 02 c0    	add    ebx,DWORD PTR ds:0xc002ae54
c001cbd2:	89 da                	mov    edx,ebx
c001cbd4:	50                   	push   eax
c001cbd5:	bd 10 27 00 00       	mov    ebp,0x2710
c001cbda:	50                   	push   eax
c001cbdb:	89 1d 54 ae 02 c0    	mov    DWORD PTR ds:0xc002ae54,ebx
c001cbe1:	6a 0f                	push   0xf
c001cbe3:	6a 00                	push   0x0
c001cbe5:	e8 7f ff ff ff       	call   c001cb69 <combineColours(unsigned char, unsigned char)>
c001cbea:	59                   	pop    ecx
c001cbeb:	b9 0a 00 00 00       	mov    ecx,0xa
c001cbf0:	5b                   	pop    ebx
c001cbf1:	0f b6 d8             	movzx  ebx,al
c001cbf4:	89 d0                	mov    eax,edx
c001cbf6:	53                   	push   ebx
c001cbf7:	99                   	cdq    
c001cbf8:	f7 fd                	idiv   ebp
c001cbfa:	99                   	cdq    
c001cbfb:	f7 f9                	idiv   ecx
c001cbfd:	83 c2 30             	add    edx,0x30
c001cc00:	0f b6 d2             	movzx  edx,dl
c001cc03:	52                   	push   edx
c001cc04:	e8 4f ff ff ff       	call   c001cb58 <combineCharAndColour(char, unsigned char)>
c001cc09:	5f                   	pop    edi
c001cc0a:	bf e8 03 00 00       	mov    edi,0x3e8
c001cc0f:	5a                   	pop    edx
c001cc10:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c001cc16:	53                   	push   ebx
c001cc17:	a1 54 ae 02 c0       	mov    eax,ds:0xc002ae54
c001cc1c:	99                   	cdq    
c001cc1d:	f7 ff                	idiv   edi
c001cc1f:	99                   	cdq    
c001cc20:	f7 f9                	idiv   ecx
c001cc22:	8d 42 30             	lea    eax,[edx+0x30]
c001cc25:	0f b6 c0             	movzx  eax,al
c001cc28:	50                   	push   eax
c001cc29:	e8 2a ff ff ff       	call   c001cb58 <combineCharAndColour(char, unsigned char)>
c001cc2e:	5f                   	pop    edi
c001cc2f:	bf 64 00 00 00       	mov    edi,0x64
c001cc34:	5a                   	pop    edx
c001cc35:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001cc3b:	53                   	push   ebx
c001cc3c:	a1 54 ae 02 c0       	mov    eax,ds:0xc002ae54
c001cc41:	99                   	cdq    
c001cc42:	f7 ff                	idiv   edi
c001cc44:	99                   	cdq    
c001cc45:	f7 f9                	idiv   ecx
c001cc47:	8d 42 30             	lea    eax,[edx+0x30]
c001cc4a:	0f b6 c0             	movzx  eax,al
c001cc4d:	50                   	push   eax
c001cc4e:	e8 05 ff ff ff       	call   c001cb58 <combineCharAndColour(char, unsigned char)>
c001cc53:	5a                   	pop    edx
c001cc54:	5a                   	pop    edx
c001cc55:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c001cc5b:	53                   	push   ebx
c001cc5c:	a1 54 ae 02 c0       	mov    eax,ds:0xc002ae54
c001cc61:	99                   	cdq    
c001cc62:	f7 f9                	idiv   ecx
c001cc64:	99                   	cdq    
c001cc65:	f7 f9                	idiv   ecx
c001cc67:	8d 42 30             	lea    eax,[edx+0x30]
c001cc6a:	0f b6 c0             	movzx  eax,al
c001cc6d:	50                   	push   eax
c001cc6e:	e8 e5 fe ff ff       	call   c001cb58 <combineCharAndColour(char, unsigned char)>
c001cc73:	5a                   	pop    edx
c001cc74:	5a                   	pop    edx
c001cc75:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c001cc7b:	53                   	push   ebx
c001cc7c:	a1 54 ae 02 c0       	mov    eax,ds:0xc002ae54
c001cc81:	99                   	cdq    
c001cc82:	f7 f9                	idiv   ecx
c001cc84:	83 c2 30             	add    edx,0x30
c001cc87:	0f b6 d2             	movzx  edx,dl
c001cc8a:	52                   	push   edx
c001cc8b:	e8 c8 fe ff ff       	call   c001cb58 <combineCharAndColour(char, unsigned char)>
c001cc90:	5a                   	pop    edx
c001cc91:	5a                   	pop    edx
c001cc92:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c001cc98:	53                   	push   ebx
c001cc99:	a1 50 ae 02 c0       	mov    eax,ds:0xc002ae50
c001cc9e:	99                   	cdq    
c001cc9f:	f7 fd                	idiv   ebp
c001cca1:	99                   	cdq    
c001cca2:	f7 f9                	idiv   ecx
c001cca4:	8d 42 30             	lea    eax,[edx+0x30]
c001cca7:	0f b6 c0             	movzx  eax,al
c001ccaa:	50                   	push   eax
c001ccab:	e8 a8 fe ff ff       	call   c001cb58 <combineCharAndColour(char, unsigned char)>
c001ccb0:	5d                   	pop    ebp
c001ccb1:	bd e8 03 00 00       	mov    ebp,0x3e8
c001ccb6:	5a                   	pop    edx
c001ccb7:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c001ccbd:	53                   	push   ebx
c001ccbe:	a1 50 ae 02 c0       	mov    eax,ds:0xc002ae50
c001ccc3:	99                   	cdq    
c001ccc4:	f7 fd                	idiv   ebp
c001ccc6:	99                   	cdq    
c001ccc7:	f7 f9                	idiv   ecx
c001ccc9:	8d 42 30             	lea    eax,[edx+0x30]
c001cccc:	0f b6 c0             	movzx  eax,al
c001cccf:	50                   	push   eax
c001ccd0:	e8 83 fe ff ff       	call   c001cb58 <combineCharAndColour(char, unsigned char)>
c001ccd5:	5d                   	pop    ebp
c001ccd6:	5a                   	pop    edx
c001ccd7:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001ccdd:	53                   	push   ebx
c001ccde:	a1 50 ae 02 c0       	mov    eax,ds:0xc002ae50
c001cce3:	99                   	cdq    
c001cce4:	f7 ff                	idiv   edi
c001cce6:	99                   	cdq    
c001cce7:	f7 f9                	idiv   ecx
c001cce9:	8d 42 30             	lea    eax,[edx+0x30]
c001ccec:	0f b6 c0             	movzx  eax,al
c001ccef:	50                   	push   eax
c001ccf0:	e8 63 fe ff ff       	call   c001cb58 <combineCharAndColour(char, unsigned char)>
c001ccf5:	5f                   	pop    edi
c001ccf6:	5d                   	pop    ebp
c001ccf7:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001ccfd:	53                   	push   ebx
c001ccfe:	a1 50 ae 02 c0       	mov    eax,ds:0xc002ae50
c001cd03:	99                   	cdq    
c001cd04:	f7 f9                	idiv   ecx
c001cd06:	99                   	cdq    
c001cd07:	f7 f9                	idiv   ecx
c001cd09:	8d 42 30             	lea    eax,[edx+0x30]
c001cd0c:	0f b6 c0             	movzx  eax,al
c001cd0f:	50                   	push   eax
c001cd10:	e8 43 fe ff ff       	call   c001cb58 <combineCharAndColour(char, unsigned char)>
c001cd15:	5a                   	pop    edx
c001cd16:	5f                   	pop    edi
c001cd17:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001cd1d:	53                   	push   ebx
c001cd1e:	a1 50 ae 02 c0       	mov    eax,ds:0xc002ae50
c001cd23:	99                   	cdq    
c001cd24:	f7 f9                	idiv   ecx
c001cd26:	83 c2 30             	add    edx,0x30
c001cd29:	0f b6 d2             	movzx  edx,dl
c001cd2c:	52                   	push   edx
c001cd2d:	e8 26 fe ff ff       	call   c001cb58 <combineCharAndColour(char, unsigned char)>
c001cd32:	83 c4 10             	add    esp,0x10
c001cd35:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001cd3b:	eb 05                	jmp    c001cd42 <ATA::read(unsigned long long, int, void*)+0x1cc>
c001cd3d:	be 01 00 00 00       	mov    esi,0x1
c001cd42:	83 c4 0c             	add    esp,0xc
c001cd45:	89 f0                	mov    eax,esi
c001cd47:	5b                   	pop    ebx
c001cd48:	5e                   	pop    esi
c001cd49:	5f                   	pop    edi
c001cd4a:	5d                   	pop    ebp
c001cd4b:	c3                   	ret    

c001cd4c <ATA::write(unsigned long long, int, void*)>:
c001cd4c:	55                   	push   ebp
c001cd4d:	57                   	push   edi
c001cd4e:	56                   	push   esi
c001cd4f:	be 04 00 00 00       	mov    esi,0x4
c001cd54:	53                   	push   ebx
c001cd55:	83 ec 0c             	sub    esp,0xc
c001cd58:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001cd5c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001cd60:	8d 7b ff             	lea    edi,[ebx-0x1]
c001cd63:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001cd67:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001cd6b:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001cd71:	0f 87 9c 01 00 00    	ja     c001cf13 <ATA::write(unsigned long long, int, void*)+0x1c7>
c001cd77:	be 06 00 00 00       	mov    esi,0x6
c001cd7c:	85 c9                	test   ecx,ecx
c001cd7e:	0f 84 8f 01 00 00    	je     c001cf13 <ATA::write(unsigned long long, int, void*)+0x1c7>
c001cd84:	55                   	push   ebp
c001cd85:	55                   	push   ebp
c001cd86:	6a 01                	push   0x1
c001cd88:	51                   	push   ecx
c001cd89:	53                   	push   ebx
c001cd8a:	52                   	push   edx
c001cd8b:	50                   	push   eax
c001cd8c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001cd90:	e8 37 f9 ff ff       	call   c001c6cc <ATA::access(unsigned long long, int, void*, bool)>
c001cd95:	83 c4 20             	add    esp,0x20
c001cd98:	89 c6                	mov    esi,eax
c001cd9a:	85 c0                	test   eax,eax
c001cd9c:	0f 85 6c 01 00 00    	jne    c001cf0e <ATA::write(unsigned long long, int, void*)+0x1c2>
c001cda2:	01 1d 50 ae 02 c0    	add    DWORD PTR ds:0xc002ae50,ebx
c001cda8:	bd 10 27 00 00       	mov    ebp,0x2710
c001cdad:	50                   	push   eax
c001cdae:	50                   	push   eax
c001cdaf:	6a 0f                	push   0xf
c001cdb1:	6a 00                	push   0x0
c001cdb3:	e8 b1 fd ff ff       	call   c001cb69 <combineColours(unsigned char, unsigned char)>
c001cdb8:	5a                   	pop    edx
c001cdb9:	0f b6 d8             	movzx  ebx,al
c001cdbc:	59                   	pop    ecx
c001cdbd:	a1 54 ae 02 c0       	mov    eax,ds:0xc002ae54
c001cdc2:	53                   	push   ebx
c001cdc3:	b9 0a 00 00 00       	mov    ecx,0xa
c001cdc8:	99                   	cdq    
c001cdc9:	f7 fd                	idiv   ebp
c001cdcb:	99                   	cdq    
c001cdcc:	f7 f9                	idiv   ecx
c001cdce:	8d 42 30             	lea    eax,[edx+0x30]
c001cdd1:	0f b6 c0             	movzx  eax,al
c001cdd4:	50                   	push   eax
c001cdd5:	e8 7e fd ff ff       	call   c001cb58 <combineCharAndColour(char, unsigned char)>
c001cdda:	5f                   	pop    edi
c001cddb:	bf e8 03 00 00       	mov    edi,0x3e8
c001cde0:	5a                   	pop    edx
c001cde1:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c001cde7:	53                   	push   ebx
c001cde8:	a1 54 ae 02 c0       	mov    eax,ds:0xc002ae54
c001cded:	99                   	cdq    
c001cdee:	f7 ff                	idiv   edi
c001cdf0:	99                   	cdq    
c001cdf1:	f7 f9                	idiv   ecx
c001cdf3:	8d 42 30             	lea    eax,[edx+0x30]
c001cdf6:	0f b6 c0             	movzx  eax,al
c001cdf9:	50                   	push   eax
c001cdfa:	e8 59 fd ff ff       	call   c001cb58 <combineCharAndColour(char, unsigned char)>
c001cdff:	5f                   	pop    edi
c001ce00:	bf 64 00 00 00       	mov    edi,0x64
c001ce05:	5a                   	pop    edx
c001ce06:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001ce0c:	53                   	push   ebx
c001ce0d:	a1 54 ae 02 c0       	mov    eax,ds:0xc002ae54
c001ce12:	99                   	cdq    
c001ce13:	f7 ff                	idiv   edi
c001ce15:	99                   	cdq    
c001ce16:	f7 f9                	idiv   ecx
c001ce18:	8d 42 30             	lea    eax,[edx+0x30]
c001ce1b:	0f b6 c0             	movzx  eax,al
c001ce1e:	50                   	push   eax
c001ce1f:	e8 34 fd ff ff       	call   c001cb58 <combineCharAndColour(char, unsigned char)>
c001ce24:	5a                   	pop    edx
c001ce25:	5a                   	pop    edx
c001ce26:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c001ce2c:	53                   	push   ebx
c001ce2d:	a1 54 ae 02 c0       	mov    eax,ds:0xc002ae54
c001ce32:	99                   	cdq    
c001ce33:	f7 f9                	idiv   ecx
c001ce35:	99                   	cdq    
c001ce36:	f7 f9                	idiv   ecx
c001ce38:	8d 42 30             	lea    eax,[edx+0x30]
c001ce3b:	0f b6 c0             	movzx  eax,al
c001ce3e:	50                   	push   eax
c001ce3f:	e8 14 fd ff ff       	call   c001cb58 <combineCharAndColour(char, unsigned char)>
c001ce44:	5a                   	pop    edx
c001ce45:	5a                   	pop    edx
c001ce46:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c001ce4c:	53                   	push   ebx
c001ce4d:	a1 54 ae 02 c0       	mov    eax,ds:0xc002ae54
c001ce52:	99                   	cdq    
c001ce53:	f7 f9                	idiv   ecx
c001ce55:	8d 42 30             	lea    eax,[edx+0x30]
c001ce58:	0f b6 c0             	movzx  eax,al
c001ce5b:	50                   	push   eax
c001ce5c:	e8 f7 fc ff ff       	call   c001cb58 <combineCharAndColour(char, unsigned char)>
c001ce61:	5a                   	pop    edx
c001ce62:	5a                   	pop    edx
c001ce63:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c001ce69:	53                   	push   ebx
c001ce6a:	a1 50 ae 02 c0       	mov    eax,ds:0xc002ae50
c001ce6f:	99                   	cdq    
c001ce70:	f7 fd                	idiv   ebp
c001ce72:	99                   	cdq    
c001ce73:	f7 f9                	idiv   ecx
c001ce75:	8d 42 30             	lea    eax,[edx+0x30]
c001ce78:	0f b6 c0             	movzx  eax,al
c001ce7b:	50                   	push   eax
c001ce7c:	e8 d7 fc ff ff       	call   c001cb58 <combineCharAndColour(char, unsigned char)>
c001ce81:	5d                   	pop    ebp
c001ce82:	bd e8 03 00 00       	mov    ebp,0x3e8
c001ce87:	5a                   	pop    edx
c001ce88:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c001ce8e:	53                   	push   ebx
c001ce8f:	a1 50 ae 02 c0       	mov    eax,ds:0xc002ae50
c001ce94:	99                   	cdq    
c001ce95:	f7 fd                	idiv   ebp
c001ce97:	99                   	cdq    
c001ce98:	f7 f9                	idiv   ecx
c001ce9a:	8d 42 30             	lea    eax,[edx+0x30]
c001ce9d:	0f b6 c0             	movzx  eax,al
c001cea0:	50                   	push   eax
c001cea1:	e8 b2 fc ff ff       	call   c001cb58 <combineCharAndColour(char, unsigned char)>
c001cea6:	5d                   	pop    ebp
c001cea7:	5a                   	pop    edx
c001cea8:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001ceae:	53                   	push   ebx
c001ceaf:	a1 50 ae 02 c0       	mov    eax,ds:0xc002ae50
c001ceb4:	99                   	cdq    
c001ceb5:	f7 ff                	idiv   edi
c001ceb7:	99                   	cdq    
c001ceb8:	f7 f9                	idiv   ecx
c001ceba:	8d 42 30             	lea    eax,[edx+0x30]
c001cebd:	0f b6 c0             	movzx  eax,al
c001cec0:	50                   	push   eax
c001cec1:	e8 92 fc ff ff       	call   c001cb58 <combineCharAndColour(char, unsigned char)>
c001cec6:	5f                   	pop    edi
c001cec7:	5d                   	pop    ebp
c001cec8:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001cece:	53                   	push   ebx
c001cecf:	a1 50 ae 02 c0       	mov    eax,ds:0xc002ae50
c001ced4:	99                   	cdq    
c001ced5:	f7 f9                	idiv   ecx
c001ced7:	99                   	cdq    
c001ced8:	f7 f9                	idiv   ecx
c001ceda:	8d 42 30             	lea    eax,[edx+0x30]
c001cedd:	0f b6 c0             	movzx  eax,al
c001cee0:	50                   	push   eax
c001cee1:	e8 72 fc ff ff       	call   c001cb58 <combineCharAndColour(char, unsigned char)>
c001cee6:	5a                   	pop    edx
c001cee7:	5f                   	pop    edi
c001cee8:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001ceee:	53                   	push   ebx
c001ceef:	a1 50 ae 02 c0       	mov    eax,ds:0xc002ae50
c001cef4:	99                   	cdq    
c001cef5:	f7 f9                	idiv   ecx
c001cef7:	83 c2 30             	add    edx,0x30
c001cefa:	0f b6 d2             	movzx  edx,dl
c001cefd:	52                   	push   edx
c001cefe:	e8 55 fc ff ff       	call   c001cb58 <combineCharAndColour(char, unsigned char)>
c001cf03:	83 c4 10             	add    esp,0x10
c001cf06:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001cf0c:	eb 05                	jmp    c001cf13 <ATA::write(unsigned long long, int, void*)+0x1c7>
c001cf0e:	be 01 00 00 00       	mov    esi,0x1
c001cf13:	83 c4 0c             	add    esp,0xc
c001cf16:	89 f0                	mov    eax,esi
c001cf18:	5b                   	pop    ebx
c001cf19:	5e                   	pop    esi
c001cf1a:	5f                   	pop    edi
c001cf1b:	5d                   	pop    ebp
c001cf1c:	c3                   	ret    
c001cf1d:	90                   	nop

c001cf1e <ATAPI::write(unsigned long long, int, void*)>:
c001cf1e:	b8 03 00 00 00       	mov    eax,0x3
c001cf23:	c3                   	ret    

c001cf24 <ATAPI::close(int, int, void*)>:
c001cf24:	83 ec 0c             	sub    esp,0xc
c001cf27:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cf2b:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001cf31:	85 c0                	test   eax,eax
c001cf33:	74 0c                	je     c001cf41 <ATAPI::close(int, int, void*)+0x1d>
c001cf35:	83 ec 0c             	sub    esp,0xc
c001cf38:	8b 10                	mov    edx,DWORD PTR [eax]
c001cf3a:	50                   	push   eax
c001cf3b:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001cf3e:	83 c4 10             	add    esp,0x10
c001cf41:	31 c0                	xor    eax,eax
c001cf43:	83 c4 0c             	add    esp,0xc
c001cf46:	c3                   	ret    
c001cf47:	90                   	nop

c001cf48 <ATAPI::ATAPI()>:
c001cf48:	83 ec 0c             	sub    esp,0xc
c001cf4b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cf4f:	83 ec 04             	sub    esp,0x4
c001cf52:	68 00 08 00 00       	push   0x800
c001cf57:	68 b5 2c 02 c0       	push   0xc0022cb5
c001cf5c:	50                   	push   eax
c001cf5d:	e8 4c fa fe ff       	call   c000c9ae <PhysicalDisk::PhysicalDisk(char const*, int)>
c001cf62:	83 c4 10             	add    esp,0x10
c001cf65:	ba d0 2b 02 c0       	mov    edx,0xc0022bd0
c001cf6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cf6e:	89 10                	mov    DWORD PTR [eax],edx
c001cf70:	90                   	nop
c001cf71:	83 c4 0c             	add    esp,0xc
c001cf74:	c3                   	ret    
c001cf75:	90                   	nop

c001cf76 <ATAPI::readyForCommand()>:
c001cf76:	56                   	push   esi
c001cf77:	53                   	push   ebx
c001cf78:	53                   	push   ebx
c001cf79:	31 db                	xor    ebx,ebx
c001cf7b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001cf7f:	51                   	push   ecx
c001cf80:	6a 0c                	push   0xc
c001cf82:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001cf89:	50                   	push   eax
c001cf8a:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001cf90:	e8 a3 e8 ff ff       	call   c001b838 <IDE::read(unsigned char, unsigned char)>
c001cf95:	83 c4 10             	add    esp,0x10
c001cf98:	a8 88                	test   al,0x88
c001cf9a:	74 25                	je     c001cfc1 <ATAPI::readyForCommand()+0x4b>
c001cf9c:	43                   	inc    ebx
c001cf9d:	81 fb 9f 05 00 00    	cmp    ebx,0x59f
c001cfa3:	7e da                	jle    c001cf7f <ATAPI::readyForCommand()+0x9>
c001cfa5:	83 ec 0c             	sub    esp,0xc
c001cfa8:	68 5e 01 00 00       	push   0x15e
c001cfad:	e8 2a 8e ff ff       	call   c0015ddc <milliTenthSleep(unsigned int)>
c001cfb2:	83 c4 10             	add    esp,0x10
c001cfb5:	81 fb dc 05 00 00    	cmp    ebx,0x5dc
c001cfbb:	75 c2                	jne    c001cf7f <ATAPI::readyForCommand()+0x9>
c001cfbd:	31 c0                	xor    eax,eax
c001cfbf:	eb 02                	jmp    c001cfc3 <ATAPI::readyForCommand()+0x4d>
c001cfc1:	b0 01                	mov    al,0x1
c001cfc3:	5a                   	pop    edx
c001cfc4:	5b                   	pop    ebx
c001cfc5:	5e                   	pop    esi
c001cfc6:	c3                   	ret    
c001cfc7:	90                   	nop

c001cfc8 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c001cfc8:	55                   	push   ebp
c001cfc9:	57                   	push   edi
c001cfca:	56                   	push   esi
c001cfcb:	53                   	push   ebx
c001cfcc:	83 ec 20             	sub    esp,0x20
c001cfcf:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001cfd3:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c001cfd7:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001cfdb:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001cfdf:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001cfe3:	6a 01                	push   0x1
c001cfe5:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001cfec:	50                   	push   eax
c001cfed:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001cff3:	e8 88 e9 ff ff       	call   c001b980 <IDE::enableIRQs(unsigned char, bool)>
c001cff8:	5e                   	pop    esi
c001cff9:	58                   	pop    eax
c001cffa:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d001:	50                   	push   eax
c001d002:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d008:	e8 45 e7 ff ff       	call   c001b752 <IDE::prepareInterrupt(unsigned char)>
c001d00d:	89 3c 24             	mov    DWORD PTR [esp],edi
c001d010:	e8 61 ff ff ff       	call   c001cf76 <ATAPI::readyForCommand()>
c001d015:	83 c4 10             	add    esp,0x10
c001d018:	84 c0                	test   al,al
c001d01a:	75 0a                	jne    c001d026 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c001d01c:	bb 01 00 00 00       	mov    ebx,0x1
c001d021:	e9 60 02 00 00       	jmp    c001d286 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2be>
c001d026:	8b 87 74 01 00 00    	mov    eax,DWORD PTR [edi+0x174]
c001d02c:	c1 e0 04             	shl    eax,0x4
c001d02f:	0f b6 c0             	movzx  eax,al
c001d032:	50                   	push   eax
c001d033:	6a 06                	push   0x6
c001d035:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d03c:	50                   	push   eax
c001d03d:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d043:	e8 30 e7 ff ff       	call   c001b778 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d048:	6a 00                	push   0x0
c001d04a:	6a 01                	push   0x1
c001d04c:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d053:	50                   	push   eax
c001d054:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d05a:	e8 19 e7 ff ff       	call   c001b778 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d05f:	83 c4 20             	add    esp,0x20
c001d062:	0f b6 c3             	movzx  eax,bl
c001d065:	0f b6 df             	movzx  ebx,bh
c001d068:	50                   	push   eax
c001d069:	6a 04                	push   0x4
c001d06b:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d072:	50                   	push   eax
c001d073:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d079:	e8 fa e6 ff ff       	call   c001b778 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d07e:	53                   	push   ebx
c001d07f:	6a 05                	push   0x5
c001d081:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d088:	50                   	push   eax
c001d089:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d08f:	e8 e4 e6 ff ff       	call   c001b778 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d094:	83 c4 20             	add    esp,0x20
c001d097:	68 a0 00 00 00       	push   0xa0
c001d09c:	6a 07                	push   0x7
c001d09e:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d0a5:	50                   	push   eax
c001d0a6:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d0ac:	e8 c7 e6 ff ff       	call   c001b778 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d0b1:	83 c4 0c             	add    esp,0xc
c001d0b4:	6a 01                	push   0x1
c001d0b6:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d0bd:	50                   	push   eax
c001d0be:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d0c4:	e8 97 f1 ff ff       	call   c001c260 <IDE::polling(unsigned char, unsigned int)>
c001d0c9:	83 c4 10             	add    esp,0x10
c001d0cc:	0f b6 d8             	movzx  ebx,al
c001d0cf:	8b 87 70 01 00 00    	mov    eax,DWORD PTR [edi+0x170]
c001d0d5:	85 db                	test   ebx,ebx
c001d0d7:	74 20                	je     c001d0f9 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c001d0d9:	53                   	push   ebx
c001d0da:	0f b6 c0             	movzx  eax,al
c001d0dd:	0f b6 97 74 01 00 00 	movzx  edx,BYTE PTR [edi+0x174]
c001d0e4:	52                   	push   edx
c001d0e5:	50                   	push   eax
c001d0e6:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d0ec:	e8 b5 f0 ff ff       	call   c001c1a6 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001d0f1:	83 c4 10             	add    esp,0x10
c001d0f4:	e9 8d 01 00 00       	jmp    c001d286 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2be>
c001d0f9:	0f b6 c0             	movzx  eax,al
c001d0fc:	53                   	push   ebx
c001d0fd:	53                   	push   ebx
c001d0fe:	50                   	push   eax
c001d0ff:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d105:	e8 5c e6 ff ff       	call   c001b766 <IDE::getBase(unsigned char)>
c001d10a:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001d10e:	b9 06 00 00 00       	mov    ecx,0x6
c001d113:	89 c2                	mov    edx,eax
c001d115:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c001d118:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c001d11c:	83 c4 10             	add    esp,0x10
c001d11f:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c001d124:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001d128:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001d12e:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001d135:	85 db                	test   ebx,ebx
c001d137:	0f 84 ec 00 00 00    	je     c001d229 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x261>
c001d13d:	51                   	push   ecx
c001d13e:	51                   	push   ecx
c001d13f:	52                   	push   edx
c001d140:	50                   	push   eax
c001d141:	e8 a0 e7 ff ff       	call   c001b8e6 <IDE::waitInterrupt(unsigned char)>
c001d146:	83 c4 10             	add    esp,0x10
c001d149:	84 c0                	test   al,al
c001d14b:	0f 84 cb fe ff ff    	je     c001d01c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c001d151:	56                   	push   esi
c001d152:	56                   	push   esi
c001d153:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d15a:	50                   	push   eax
c001d15b:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d161:	e8 ec e5 ff ff       	call   c001b752 <IDE::prepareInterrupt(unsigned char)>
c001d166:	83 c4 0c             	add    esp,0xc
c001d169:	6a 04                	push   0x4
c001d16b:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d172:	50                   	push   eax
c001d173:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d179:	e8 ba e6 ff ff       	call   c001b838 <IDE::read(unsigned char, unsigned char)>
c001d17e:	83 c4 0c             	add    esp,0xc
c001d181:	89 c6                	mov    esi,eax
c001d183:	6a 05                	push   0x5
c001d185:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d18c:	50                   	push   eax
c001d18d:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d193:	e8 a0 e6 ff ff       	call   c001b838 <IDE::read(unsigned char, unsigned char)>
c001d198:	89 f1                	mov    ecx,esi
c001d19a:	0f b6 c0             	movzx  eax,al
c001d19d:	0f b6 f1             	movzx  esi,cl
c001d1a0:	c1 e0 08             	shl    eax,0x8
c001d1a3:	09 c6                	or     esi,eax
c001d1a5:	d1 fe                	sar    esi,1
c001d1a7:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c001d1ab:	83 c4 10             	add    esp,0x10
c001d1ae:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001d1b3:	74 41                	je     c001d1f6 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x22e>
c001d1b5:	31 c9                	xor    ecx,ecx
c001d1b7:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001d1bd:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001d1c4:	3b 4c 24 04          	cmp    ecx,DWORD PTR [esp+0x4]
c001d1c8:	75 0a                	jne    c001d1d4 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x20c>
c001d1ca:	01 c9                	add    ecx,ecx
c001d1cc:	01 cd                	add    ebp,ecx
c001d1ce:	4b                   	dec    ebx
c001d1cf:	e9 54 ff ff ff       	jmp    c001d128 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x160>
c001d1d4:	66 8b 74 4d 00       	mov    si,WORD PTR [ebp+ecx*2+0x0]
c001d1d9:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001d1dd:	51                   	push   ecx
c001d1de:	51                   	push   ecx
c001d1df:	52                   	push   edx
c001d1e0:	50                   	push   eax
c001d1e1:	e8 80 e5 ff ff       	call   c001b766 <IDE::getBase(unsigned char)>
c001d1e6:	89 c2                	mov    edx,eax
c001d1e8:	89 f0                	mov    eax,esi
c001d1ea:	66 ef                	out    dx,ax
c001d1ec:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001d1f0:	83 c4 10             	add    esp,0x10
c001d1f3:	41                   	inc    ecx
c001d1f4:	eb c1                	jmp    c001d1b7 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1ef>
c001d1f6:	31 f6                	xor    esi,esi
c001d1f8:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001d1fe:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001d205:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c001d209:	75 06                	jne    c001d211 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x249>
c001d20b:	01 f6                	add    esi,esi
c001d20d:	01 f5                	add    ebp,esi
c001d20f:	eb bd                	jmp    c001d1ce <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x206>
c001d211:	51                   	push   ecx
c001d212:	51                   	push   ecx
c001d213:	52                   	push   edx
c001d214:	50                   	push   eax
c001d215:	e8 4c e5 ff ff       	call   c001b766 <IDE::getBase(unsigned char)>
c001d21a:	89 c2                	mov    edx,eax
c001d21c:	66 ed                	in     ax,dx
c001d21e:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c001d223:	83 c4 10             	add    esp,0x10
c001d226:	46                   	inc    esi
c001d227:	eb cf                	jmp    c001d1f8 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x230>
c001d229:	51                   	push   ecx
c001d22a:	51                   	push   ecx
c001d22b:	52                   	push   edx
c001d22c:	50                   	push   eax
c001d22d:	e8 b4 e6 ff ff       	call   c001b8e6 <IDE::waitInterrupt(unsigned char)>
c001d232:	83 c4 10             	add    esp,0x10
c001d235:	84 c0                	test   al,al
c001d237:	0f 84 df fd ff ff    	je     c001d01c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c001d23d:	bb a0 86 01 00       	mov    ebx,0x186a0
c001d242:	52                   	push   edx
c001d243:	52                   	push   edx
c001d244:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d24b:	50                   	push   eax
c001d24c:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d252:	e8 fb e4 ff ff       	call   c001b752 <IDE::prepareInterrupt(unsigned char)>
c001d257:	83 c4 10             	add    esp,0x10
c001d25a:	50                   	push   eax
c001d25b:	50                   	push   eax
c001d25c:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d263:	50                   	push   eax
c001d264:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d26a:	e8 f7 e4 ff ff       	call   c001b766 <IDE::getBase(unsigned char)>
c001d26f:	8d 50 07             	lea    edx,[eax+0x7]
c001d272:	ec                   	in     al,dx
c001d273:	83 c4 10             	add    esp,0x10
c001d276:	a8 88                	test   al,0x88
c001d278:	74 0a                	je     c001d284 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2bc>
c001d27a:	4b                   	dec    ebx
c001d27b:	75 dd                	jne    c001d25a <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x292>
c001d27d:	bb 02 00 00 00       	mov    ebx,0x2
c001d282:	eb 02                	jmp    c001d286 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2be>
c001d284:	31 db                	xor    ebx,ebx
c001d286:	83 c4 1c             	add    esp,0x1c
c001d289:	89 d8                	mov    eax,ebx
c001d28b:	5b                   	pop    ebx
c001d28c:	5e                   	pop    esi
c001d28d:	5f                   	pop    edi
c001d28e:	5d                   	pop    ebp
c001d28f:	c3                   	ret    

c001d290 <ATAPI::diskRemoved()>:
c001d290:	53                   	push   ebx
c001d291:	83 ec 14             	sub    esp,0x14
c001d294:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001d298:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001d29f:	ff b3 80 01 00 00    	push   DWORD PTR [ebx+0x180]
c001d2a5:	e8 a0 06 ff ff       	call   c000d94a <LogicalDisk::unmount()>
c001d2aa:	58                   	pop    eax
c001d2ab:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001d2b1:	e8 76 10 ff ff       	call   c000e32c <VCache::writeWriteBuffer()>
c001d2b6:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c001d2bc:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001d2c0:	83 c4 18             	add    esp,0x18
c001d2c3:	5b                   	pop    ebx
c001d2c4:	e9 53 10 ff ff       	jmp    c000e31c <VCache::invalidateReadBuffer()>
c001d2c9:	90                   	nop

c001d2ca <ATAPI::eject()>:
c001d2ca:	57                   	push   edi
c001d2cb:	b9 03 00 00 00       	mov    ecx,0x3
c001d2d0:	53                   	push   ebx
c001d2d1:	83 ec 14             	sub    esp,0x14
c001d2d4:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001d2d8:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001d2dc:	fc                   	cld    
c001d2dd:	31 c0                	xor    eax,eax
c001d2df:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001d2e1:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001d2e6:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001d2eb:	50                   	push   eax
c001d2ec:	50                   	push   eax
c001d2ed:	6a 00                	push   0x0
c001d2ef:	6a 00                	push   0x0
c001d2f1:	6a 00                	push   0x0
c001d2f3:	6a 02                	push   0x2
c001d2f5:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001d2f9:	50                   	push   eax
c001d2fa:	53                   	push   ebx
c001d2fb:	e8 c8 fc ff ff       	call   c001cfc8 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001d300:	83 c4 14             	add    esp,0x14
c001d303:	53                   	push   ebx
c001d304:	e8 87 ff ff ff       	call   c001d290 <ATAPI::diskRemoved()>
c001d309:	83 c4 24             	add    esp,0x24
c001d30c:	31 c0                	xor    eax,eax
c001d30e:	5b                   	pop    ebx
c001d30f:	5f                   	pop    edi
c001d310:	c3                   	ret    
c001d311:	90                   	nop

c001d312 <ATAPI::diskInserted()>:
c001d312:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d316:	c6 80 7c 01 00 00 01 	mov    BYTE PTR [eax+0x17c],0x1
c001d31d:	c3                   	ret    

c001d31e <ATAPI::detectMedia()>:
c001d31e:	56                   	push   esi
c001d31f:	53                   	push   ebx
c001d320:	83 ec 28             	sub    esp,0x28
c001d323:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001d327:	6a 0c                	push   0xc
c001d329:	6a 00                	push   0x0
c001d32b:	8d 74 24 0e          	lea    esi,[esp+0xe]
c001d32f:	56                   	push   esi
c001d330:	e8 bb 31 fe ff       	call   c00004f0 <memset>
c001d335:	58                   	pop    eax
c001d336:	5a                   	pop    edx
c001d337:	6a 00                	push   0x0
c001d339:	6a 00                	push   0x0
c001d33b:	6a 00                	push   0x0
c001d33d:	6a 00                	push   0x0
c001d33f:	56                   	push   esi
c001d340:	53                   	push   ebx
c001d341:	e8 82 fc ff ff       	call   c001cfc8 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001d346:	83 c4 1c             	add    esp,0x1c
c001d349:	6a 0c                	push   0xc
c001d34b:	6a 00                	push   0x0
c001d34d:	56                   	push   esi
c001d34e:	e8 9d 31 fe ff       	call   c00004f0 <memset>
c001d353:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c001d358:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c001d35d:	59                   	pop    ecx
c001d35e:	58                   	pop    eax
c001d35f:	6a 01                	push   0x1
c001d361:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c001d365:	50                   	push   eax
c001d366:	6a 00                	push   0x0
c001d368:	6a 12                	push   0x12
c001d36a:	56                   	push   esi
c001d36b:	53                   	push   ebx
c001d36c:	e8 57 fc ff ff       	call   c001cfc8 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001d371:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c001d375:	83 c4 20             	add    esp,0x20
c001d378:	83 e0 7f             	and    eax,0x7f
c001d37b:	83 f8 70             	cmp    eax,0x70
c001d37e:	74 15                	je     c001d395 <ATAPI::detectMedia()+0x77>
c001d380:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001d387:	75 0c                	jne    c001d395 <ATAPI::detectMedia()+0x77>
c001d389:	83 ec 0c             	sub    esp,0xc
c001d38c:	53                   	push   ebx
c001d38d:	e8 80 ff ff ff       	call   c001d312 <ATAPI::diskInserted()>
c001d392:	83 c4 10             	add    esp,0x10
c001d395:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001d399:	83 e0 0f             	and    eax,0xf
c001d39c:	83 f8 02             	cmp    eax,0x2
c001d39f:	75 1b                	jne    c001d3bc <ATAPI::detectMedia()+0x9e>
c001d3a1:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c001d3a6:	75 2d                	jne    c001d3d5 <ATAPI::detectMedia()+0xb7>
c001d3a8:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001d3af:	74 24                	je     c001d3d5 <ATAPI::detectMedia()+0xb7>
c001d3b1:	83 ec 0c             	sub    esp,0xc
c001d3b4:	53                   	push   ebx
c001d3b5:	e8 d6 fe ff ff       	call   c001d290 <ATAPI::diskRemoved()>
c001d3ba:	eb 16                	jmp    c001d3d2 <ATAPI::detectMedia()+0xb4>
c001d3bc:	85 c0                	test   eax,eax
c001d3be:	75 15                	jne    c001d3d5 <ATAPI::detectMedia()+0xb7>
c001d3c0:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001d3c7:	75 0c                	jne    c001d3d5 <ATAPI::detectMedia()+0xb7>
c001d3c9:	83 ec 0c             	sub    esp,0xc
c001d3cc:	53                   	push   ebx
c001d3cd:	e8 40 ff ff ff       	call   c001d312 <ATAPI::diskInserted()>
c001d3d2:	83 c4 10             	add    esp,0x10
c001d3d5:	83 c4 24             	add    esp,0x24
c001d3d8:	5b                   	pop    ebx
c001d3d9:	5e                   	pop    esi
c001d3da:	c3                   	ret    
c001d3db:	90                   	nop

c001d3dc <ATAPI::open(int, int, void*)>:
c001d3dc:	56                   	push   esi
c001d3dd:	53                   	push   ebx
c001d3de:	50                   	push   eax
c001d3df:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001d3e3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d3e7:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001d3eb:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001d3f1:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001d3f7:	c1 e0 06             	shl    eax,0x6
c001d3fa:	01 d0                	add    eax,edx
c001d3fc:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c001d403:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c001d409:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c001d410:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001d41a:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001d420:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c001d427:	6a 04                	push   0x4
c001d429:	6a 0c                	push   0xc
c001d42b:	51                   	push   ecx
c001d42c:	52                   	push   edx
c001d42d:	e8 46 e3 ff ff       	call   c001b778 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d432:	90                   	nop
c001d433:	90                   	nop
c001d434:	6a 00                	push   0x0
c001d436:	6a 0c                	push   0xc
c001d438:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d43f:	50                   	push   eax
c001d440:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d446:	e8 2d e3 ff ff       	call   c001b778 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d44b:	83 c4 14             	add    esp,0x14
c001d44e:	68 78 01 00 00       	push   0x178
c001d453:	e8 5e a6 fe ff       	call   c0007ab6 <malloc>
c001d458:	83 c4 0c             	add    esp,0xc
c001d45b:	89 c6                	mov    esi,eax
c001d45d:	6a 00                	push   0x0
c001d45f:	68 ff ff ff 7f       	push   0x7fffffff
c001d464:	6a 00                	push   0x0
c001d466:	6a 00                	push   0x0
c001d468:	53                   	push   ebx
c001d469:	68 67 2d 02 c0       	push   0xc0022d67
c001d46e:	50                   	push   eax
c001d46f:	e8 14 03 ff ff       	call   c000d788 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001d474:	83 c4 14             	add    esp,0x14
c001d477:	56                   	push   esi
c001d478:	e8 cb 03 ff ff       	call   c000d848 <LogicalDisk::assignDriveLetter()>
c001d47d:	5a                   	pop    edx
c001d47e:	0f be c0             	movsx  eax,al
c001d481:	59                   	pop    ecx
c001d482:	50                   	push   eax
c001d483:	68 b8 2b 02 c0       	push   0xc0022bb8
c001d488:	e8 b8 d4 fe ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001d48d:	58                   	pop    eax
c001d48e:	5a                   	pop    edx
c001d48f:	56                   	push   esi
c001d490:	53                   	push   ebx
c001d491:	e8 4c f1 fe ff       	call   c000c5e2 <Device::addChild(Device*)>
c001d496:	89 b3 80 01 00 00    	mov    DWORD PTR [ebx+0x180],esi
c001d49c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d49f:	e8 72 f5 fe ff       	call   c000ca16 <PhysicalDisk::startCache()>
c001d4a4:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001d4ab:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d4ae:	e8 6b fe ff ff       	call   c001d31e <ATAPI::detectMedia()>
c001d4b3:	83 c4 14             	add    esp,0x14
c001d4b6:	31 c0                	xor    eax,eax
c001d4b8:	5b                   	pop    ebx
c001d4b9:	5e                   	pop    esi
c001d4ba:	c3                   	ret    
c001d4bb:	90                   	nop

c001d4bc <ATAPI::read(unsigned long long, int, void*)>:
c001d4bc:	55                   	push   ebp
c001d4bd:	57                   	push   edi
c001d4be:	56                   	push   esi
c001d4bf:	53                   	push   ebx
c001d4c0:	83 ec 1c             	sub    esp,0x1c
c001d4c3:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001d4c7:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001d4cb:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c001d4cf:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001d4d6:	74 3c                	je     c001d514 <ATAPI::read(unsigned long long, int, void*)+0x58>
c001d4d8:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001d4dc:	b9 03 00 00 00       	mov    ecx,0x3
c001d4e1:	fc                   	cld    
c001d4e2:	31 c0                	xor    eax,eax
c001d4e4:	0f ce                	bswap  esi
c001d4e6:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001d4e8:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c001d4ed:	89 74 24 06          	mov    DWORD PTR [esp+0x6],esi
c001d4f1:	89 e8                	mov    eax,ebp
c001d4f3:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c001d4f7:	50                   	push   eax
c001d4f8:	50                   	push   eax
c001d4f9:	55                   	push   ebp
c001d4fa:	c1 e5 0b             	shl    ebp,0xb
c001d4fd:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001d501:	6a 00                	push   0x0
c001d503:	55                   	push   ebp
c001d504:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001d508:	50                   	push   eax
c001d509:	53                   	push   ebx
c001d50a:	e8 b9 fa ff ff       	call   c001cfc8 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001d50f:	83 c4 20             	add    esp,0x20
c001d512:	eb 1a                	jmp    c001d52e <ATAPI::read(unsigned long long, int, void*)+0x72>
c001d514:	83 ec 0c             	sub    esp,0xc
c001d517:	53                   	push   ebx
c001d518:	e8 01 fe ff ff       	call   c001d31e <ATAPI::detectMedia()>
c001d51d:	83 c4 10             	add    esp,0x10
c001d520:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001d527:	75 af                	jne    c001d4d8 <ATAPI::read(unsigned long long, int, void*)+0x1c>
c001d529:	b8 02 00 00 00       	mov    eax,0x2
c001d52e:	83 c4 1c             	add    esp,0x1c
c001d531:	5b                   	pop    ebx
c001d532:	5e                   	pop    esi
c001d533:	5f                   	pop    edi
c001d534:	5d                   	pop    ebp
c001d535:	c3                   	ret    

c001d536 <SATA::close(int, int, void*)>:
c001d536:	83 ec 0c             	sub    esp,0xc
c001d539:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d53d:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001d543:	85 c0                	test   eax,eax
c001d545:	74 0c                	je     c001d553 <SATA::close(int, int, void*)+0x1d>
c001d547:	83 ec 0c             	sub    esp,0xc
c001d54a:	8b 10                	mov    edx,DWORD PTR [eax]
c001d54c:	50                   	push   eax
c001d54d:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001d550:	83 c4 10             	add    esp,0x10
c001d553:	31 c0                	xor    eax,eax
c001d555:	83 c4 0c             	add    esp,0xc
c001d558:	c3                   	ret    
c001d559:	90                   	nop

c001d55a <SATA::powerSaving(PowerSavingLevel)>:
c001d55a:	c3                   	ret    
c001d55b:	90                   	nop

c001d55c <SATA::open(int, int, void*)>:
c001d55c:	56                   	push   esi
c001d55d:	53                   	push   ebx
c001d55e:	50                   	push   eax
c001d55f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001d563:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001d567:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001d571:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c001d577:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c001d581:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d585:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001d58f:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001d595:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c001d59c:	e8 1e a8 fe ff       	call   c0007dbf <Phys::allocatePage()>
c001d5a1:	89 c6                	mov    esi,eax
c001d5a3:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001d5a9:	81 c6 00 10 00 00    	add    esi,0x1000
c001d5af:	e8 0b a8 fe ff       	call   c0007dbf <Phys::allocatePage()>
c001d5b4:	39 c6                	cmp    esi,eax
c001d5b6:	74 10                	je     c001d5c8 <SATA::open(int, int, void*)+0x6c>
c001d5b8:	83 ec 0c             	sub    esp,0xc
c001d5bb:	68 00 2c 02 c0       	push   0xc0022c00
c001d5c0:	e8 28 3c ff ff       	call   c00111ed <KePanic(char const*)>
c001d5c5:	83 c4 10             	add    esp,0x10
c001d5c8:	83 ec 0c             	sub    esp,0xc
c001d5cb:	6a 02                	push   0x2
c001d5cd:	e8 3b c0 fe ff       	call   c000960d <Virt::allocateKernelVirtualPages(int)>
c001d5d2:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001d5d8:	6a 03                	push   0x3
c001d5da:	50                   	push   eax
c001d5db:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c001d5e1:	ff 35 b0 5f 02 c0    	push   DWORD PTR ds:0xc0025fb0
c001d5e7:	e8 34 c7 fe ff       	call   c0009d20 <VAS::mapPage(unsigned long, unsigned long, int)>
c001d5ec:	83 c4 14             	add    esp,0x14
c001d5ef:	53                   	push   ebx
c001d5f0:	e8 21 f4 fe ff       	call   c000ca16 <PhysicalDisk::startCache()>
c001d5f5:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d5f8:	e8 5d 06 ff ff       	call   c000dc5a <createPartitionsForDisk(PhysicalDisk*)>
c001d5fd:	83 c4 14             	add    esp,0x14
c001d600:	31 c0                	xor    eax,eax
c001d602:	5b                   	pop    ebx
c001d603:	5e                   	pop    esi
c001d604:	c3                   	ret    
c001d605:	90                   	nop

c001d606 <SATA::SATA()>:
c001d606:	83 ec 0c             	sub    esp,0xc
c001d609:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d60d:	83 ec 04             	sub    esp,0x4
c001d610:	68 00 02 00 00       	push   0x200
c001d615:	68 14 2c 02 c0       	push   0xc0022c14
c001d61a:	50                   	push   eax
c001d61b:	e8 8e f3 fe ff       	call   c000c9ae <PhysicalDisk::PhysicalDisk(char const*, int)>
c001d620:	83 c4 10             	add    esp,0x10
c001d623:	ba 84 2c 02 c0       	mov    edx,0xc0022c84
c001d628:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d62c:	89 10                	mov    DWORD PTR [eax],edx
c001d62e:	90                   	nop
c001d62f:	83 c4 0c             	add    esp,0xc
c001d632:	c3                   	ret    
c001d633:	90                   	nop

c001d634 <SATA::access(unsigned long long, int, void*, bool)>:
c001d634:	55                   	push   ebp
c001d635:	57                   	push   edi
c001d636:	56                   	push   esi
c001d637:	53                   	push   ebx
c001d638:	83 ec 2c             	sub    esp,0x2c
c001d63b:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001d63f:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001d643:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001d647:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001d64b:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001d64f:	83 7c 24 4c 10       	cmp    DWORD PTR [esp+0x4c],0x10
c001d654:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d658:	7e 10                	jle    c001d66a <SATA::access(unsigned long long, int, void*, bool)+0x36>
c001d65a:	83 ec 0c             	sub    esp,0xc
c001d65d:	68 24 2c 02 c0       	push   0xc0022c24
c001d662:	e8 86 3b ff ff       	call   c00111ed <KePanic(char const*)>
c001d667:	83 c4 10             	add    esp,0x10
c001d66a:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001d670:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c001d676:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001d67c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001d680:	89 d0                	mov    eax,edx
c001d682:	c1 e0 07             	shl    eax,0x7
c001d685:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001d689:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c001d693:	51                   	push   ecx
c001d694:	8d 42 02             	lea    eax,[edx+0x2]
c001d697:	51                   	push   ecx
c001d698:	c1 e0 07             	shl    eax,0x7
c001d69b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001d69f:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001d6a3:	50                   	push   eax
c001d6a4:	ff b3 70 01 00 00    	push   DWORD PTR [ebx+0x170]
c001d6aa:	e8 91 ec ff ff       	call   c001c340 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c001d6af:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001d6b3:	83 c4 10             	add    esp,0x10
c001d6b6:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c001d6bb:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001d6bf:	0f 84 57 01 00 00    	je     c001d81c <SATA::access(unsigned long long, int, void*, bool)+0x1e8>
c001d6c5:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001d6c9:	c1 e0 09             	shl    eax,0x9
c001d6cc:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c001d6d1:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001d6d5:	74 0e                	je     c001d6e5 <SATA::access(unsigned long long, int, void*, bool)+0xb1>
c001d6d7:	8b bb 78 01 00 00    	mov    edi,DWORD PTR [ebx+0x178]
c001d6dd:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c001d6e1:	89 c1                	mov    ecx,eax
c001d6e3:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001d6e5:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c001d6eb:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001d6ef:	8d 42 02             	lea    eax,[edx+0x2]
c001d6f2:	c1 e0 07             	shl    eax,0x7
c001d6f5:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001d6f9:	8b 00                	mov    eax,DWORD PTR [eax]
c001d6fb:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c001d701:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c001d707:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001d70b:	c1 e1 05             	shl    ecx,0x5
c001d70e:	01 c8                	add    eax,ecx
c001d710:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001d714:	83 e1 01             	and    ecx,0x1
c001d717:	89 ce                	mov    esi,ecx
c001d719:	8a 08                	mov    cl,BYTE PTR [eax]
c001d71b:	c1 e6 06             	shl    esi,0x6
c001d71e:	83 e1 bf             	and    ecx,0xffffffbf
c001d721:	09 f1                	or     ecx,esi
c001d723:	88 08                	mov    BYTE PTR [eax],cl
c001d725:	8b 08                	mov    ecx,DWORD PTR [eax]
c001d727:	81 e1 e0 ff 00 00    	and    ecx,0xffe0
c001d72d:	81 c9 05 00 01 00    	or     ecx,0x10005
c001d733:	89 08                	mov    DWORD PTR [eax],ecx
c001d735:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c001d73b:	8b b1 58 01 00 00    	mov    esi,DWORD PTR [ecx+0x158]
c001d741:	2b b1 5c 01 00 00    	sub    esi,DWORD PTR [ecx+0x15c]
c001d747:	03 70 08             	add    esi,DWORD PTR [eax+0x8]
c001d74a:	50                   	push   eax
c001d74b:	68 90 00 00 00       	push   0x90
c001d750:	6a 00                	push   0x0
c001d752:	56                   	push   esi
c001d753:	e8 98 2d fe ff       	call   c00004f0 <memset>
c001d758:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001d75e:	89 86 80 00 00 00    	mov    DWORD PTR [esi+0x80],eax
c001d764:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d768:	83 c4 10             	add    esp,0x10
c001d76b:	48                   	dec    eax
c001d76c:	25 ff ff 3f 00       	and    eax,0x3fffff
c001d771:	89 c1                	mov    ecx,eax
c001d773:	8b 86 8c 00 00 00    	mov    eax,DWORD PTR [esi+0x8c]
c001d779:	25 00 00 c0 ff       	and    eax,0xffc00000
c001d77e:	09 c8                	or     eax,ecx
c001d780:	89 86 8c 00 00 00    	mov    DWORD PTR [esi+0x8c],eax
c001d786:	8a 86 8f 00 00 00    	mov    al,BYTE PTR [esi+0x8f]
c001d78c:	83 c8 80             	or     eax,0xffffff80
c001d78f:	88 86 8f 00 00 00    	mov    BYTE PTR [esi+0x8f],al
c001d795:	66 8b 06             	mov    ax,WORD PTR [esi]
c001d798:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001d79c:	25 00 7f 00 00       	and    eax,0x7f00
c001d7a1:	0d 27 80 ff ff       	or     eax,0xffff8027
c001d7a6:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c001d7ab:	66 89 06             	mov    WORD PTR [esi],ax
c001d7ae:	b0 35                	mov    al,0x35
c001d7b0:	75 02                	jne    c001d7b4 <SATA::access(unsigned long long, int, void*, bool)+0x180>
c001d7b2:	b0 25                	mov    al,0x25
c001d7b4:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c001d7b7:	66 89 6e 04          	mov    WORD PTR [esi+0x4],bp
c001d7bb:	89 e8                	mov    eax,ebp
c001d7bd:	c6 46 07 40          	mov    BYTE PTR [esi+0x7],0x40
c001d7c1:	c1 e8 10             	shr    eax,0x10
c001d7c4:	88 46 06             	mov    BYTE PTR [esi+0x6],al
c001d7c7:	89 e8                	mov    eax,ebp
c001d7c9:	c1 e8 18             	shr    eax,0x18
c001d7cc:	88 46 08             	mov    BYTE PTR [esi+0x8],al
c001d7cf:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c001d7d3:	88 46 09             	mov    BYTE PTR [esi+0x9],al
c001d7d6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d7da:	88 66 0a             	mov    BYTE PTR [esi+0xa],ah
c001d7dd:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001d7e1:	66 89 46 0c          	mov    WORD PTR [esi+0xc],ax
c001d7e5:	89 d6                	mov    esi,edx
c001d7e7:	31 c0                	xor    eax,eax
c001d7e9:	c1 e6 07             	shl    esi,0x7
c001d7ec:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001d7f0:	8b 8e 20 01 00 00    	mov    ecx,DWORD PTR [esi+0x120]
c001d7f6:	80 e1 88             	and    cl,0x88
c001d7f9:	74 0a                	je     c001d805 <SATA::access(unsigned long long, int, void*, bool)+0x1d1>
c001d7fb:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001d800:	74 0a                	je     c001d80c <SATA::access(unsigned long long, int, void*, bool)+0x1d8>
c001d802:	40                   	inc    eax
c001d803:	eb eb                	jmp    c001d7f0 <SATA::access(unsigned long long, int, void*, bool)+0x1bc>
c001d805:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001d80a:	75 17                	jne    c001d823 <SATA::access(unsigned long long, int, void*, bool)+0x1ef>
c001d80c:	83 ec 0c             	sub    esp,0xc
c001d80f:	68 5d 2c 02 c0       	push   0xc0022c5d
c001d814:	e8 2c d1 fe ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001d819:	83 c4 10             	add    esp,0x10
c001d81c:	b8 01 00 00 00       	mov    eax,0x1
c001d821:	eb 5d                	jmp    c001d880 <SATA::access(unsigned long long, int, void*, bool)+0x24c>
c001d823:	b8 01 00 00 00       	mov    eax,0x1
c001d828:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c001d82c:	c1 e2 07             	shl    edx,0x7
c001d82f:	d3 e0                	shl    eax,cl
c001d831:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c001d835:	89 86 38 01 00 00    	mov    DWORD PTR [esi+0x138],eax
c001d83b:	8b 8a 38 01 00 00    	mov    ecx,DWORD PTR [edx+0x138]
c001d841:	85 c8                	test   eax,ecx
c001d843:	74 16                	je     c001d85b <SATA::access(unsigned long long, int, void*, bool)+0x227>
c001d845:	8b 8a 10 01 00 00    	mov    ecx,DWORD PTR [edx+0x110]
c001d84b:	0f ba e1 1e          	bt     ecx,0x1e
c001d84f:	73 ea                	jae    c001d83b <SATA::access(unsigned long long, int, void*, bool)+0x207>
c001d851:	83 ec 0c             	sub    esp,0xc
c001d854:	68 6b 2c 02 c0       	push   0xc0022c6b
c001d859:	eb b9                	jmp    c001d814 <SATA::access(unsigned long long, int, void*, bool)+0x1e0>
c001d85b:	8b 82 10 01 00 00    	mov    eax,DWORD PTR [edx+0x110]
c001d861:	0f ba e0 1e          	bt     eax,0x1e
c001d865:	72 b5                	jb     c001d81c <SATA::access(unsigned long long, int, void*, bool)+0x1e8>
c001d867:	31 c0                	xor    eax,eax
c001d869:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c001d86e:	75 10                	jne    c001d880 <SATA::access(unsigned long long, int, void*, bool)+0x24c>
c001d870:	8b b3 78 01 00 00    	mov    esi,DWORD PTR [ebx+0x178]
c001d876:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c001d87a:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001d87e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001d880:	83 c4 2c             	add    esp,0x2c
c001d883:	5b                   	pop    ebx
c001d884:	5e                   	pop    esi
c001d885:	5f                   	pop    edi
c001d886:	5d                   	pop    ebp
c001d887:	c3                   	ret    

c001d888 <SATA::read(unsigned long long, int, void*)>:
c001d888:	55                   	push   ebp
c001d889:	57                   	push   edi
c001d88a:	56                   	push   esi
c001d88b:	be 04 00 00 00       	mov    esi,0x4
c001d890:	53                   	push   ebx
c001d891:	83 ec 0c             	sub    esp,0xc
c001d894:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001d898:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d89c:	8d 7b ff             	lea    edi,[ebx-0x1]
c001d89f:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001d8a3:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001d8a7:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001d8ad:	0f 87 1a 02 00 00    	ja     c001dacd <SATA::read(unsigned long long, int, void*)+0x245>
c001d8b3:	be 06 00 00 00       	mov    esi,0x6
c001d8b8:	85 c9                	test   ecx,ecx
c001d8ba:	0f 84 0d 02 00 00    	je     c001dacd <SATA::read(unsigned long long, int, void*)+0x245>
c001d8c0:	56                   	push   esi
c001d8c1:	56                   	push   esi
c001d8c2:	6a 00                	push   0x0
c001d8c4:	51                   	push   ecx
c001d8c5:	53                   	push   ebx
c001d8c6:	52                   	push   edx
c001d8c7:	50                   	push   eax
c001d8c8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001d8cc:	e8 63 fd ff ff       	call   c001d634 <SATA::access(unsigned long long, int, void*, bool)>
c001d8d1:	83 c4 20             	add    esp,0x20
c001d8d4:	89 c6                	mov    esi,eax
c001d8d6:	85 c0                	test   eax,eax
c001d8d8:	0f 85 ea 01 00 00    	jne    c001dac8 <SATA::read(unsigned long long, int, void*)+0x240>
c001d8de:	01 1d 54 ae 02 c0    	add    DWORD PTR ds:0xc002ae54,ebx
c001d8e4:	bb 0a 00 00 00       	mov    ebx,0xa
c001d8e9:	50                   	push   eax
c001d8ea:	50                   	push   eax
c001d8eb:	6a 0f                	push   0xf
c001d8ed:	6a 00                	push   0x0
c001d8ef:	e8 75 f2 ff ff       	call   c001cb69 <combineColours(unsigned char, unsigned char)>
c001d8f4:	5a                   	pop    edx
c001d8f5:	0f b6 c0             	movzx  eax,al
c001d8f8:	59                   	pop    ecx
c001d8f9:	b9 10 27 00 00       	mov    ecx,0x2710
c001d8fe:	50                   	push   eax
c001d8ff:	a1 54 ae 02 c0       	mov    eax,ds:0xc002ae54
c001d904:	99                   	cdq    
c001d905:	f7 f9                	idiv   ecx
c001d907:	99                   	cdq    
c001d908:	f7 fb                	idiv   ebx
c001d90a:	8d 42 30             	lea    eax,[edx+0x30]
c001d90d:	0f b6 c0             	movzx  eax,al
c001d910:	50                   	push   eax
c001d911:	e8 42 f2 ff ff       	call   c001cb58 <combineCharAndColour(char, unsigned char)>
c001d916:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c001d91c:	5f                   	pop    edi
c001d91d:	5d                   	pop    ebp
c001d91e:	bd e8 03 00 00       	mov    ebp,0x3e8
c001d923:	6a 0f                	push   0xf
c001d925:	6a 00                	push   0x0
c001d927:	e8 3d f2 ff ff       	call   c001cb69 <combineColours(unsigned char, unsigned char)>
c001d92c:	5a                   	pop    edx
c001d92d:	0f b6 c0             	movzx  eax,al
c001d930:	59                   	pop    ecx
c001d931:	50                   	push   eax
c001d932:	a1 54 ae 02 c0       	mov    eax,ds:0xc002ae54
c001d937:	99                   	cdq    
c001d938:	f7 fd                	idiv   ebp
c001d93a:	99                   	cdq    
c001d93b:	f7 fb                	idiv   ebx
c001d93d:	8d 42 30             	lea    eax,[edx+0x30]
c001d940:	0f b6 c0             	movzx  eax,al
c001d943:	50                   	push   eax
c001d944:	e8 0f f2 ff ff       	call   c001cb58 <combineCharAndColour(char, unsigned char)>
c001d949:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001d94f:	5f                   	pop    edi
c001d950:	bf 64 00 00 00       	mov    edi,0x64
c001d955:	58                   	pop    eax
c001d956:	6a 0f                	push   0xf
c001d958:	6a 00                	push   0x0
c001d95a:	e8 0a f2 ff ff       	call   c001cb69 <combineColours(unsigned char, unsigned char)>
c001d95f:	5a                   	pop    edx
c001d960:	0f b6 c0             	movzx  eax,al
c001d963:	59                   	pop    ecx
c001d964:	50                   	push   eax
c001d965:	a1 54 ae 02 c0       	mov    eax,ds:0xc002ae54
c001d96a:	99                   	cdq    
c001d96b:	f7 ff                	idiv   edi
c001d96d:	99                   	cdq    
c001d96e:	f7 fb                	idiv   ebx
c001d970:	8d 42 30             	lea    eax,[edx+0x30]
c001d973:	0f b6 c0             	movzx  eax,al
c001d976:	50                   	push   eax
c001d977:	e8 dc f1 ff ff       	call   c001cb58 <combineCharAndColour(char, unsigned char)>
c001d97c:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c001d982:	58                   	pop    eax
c001d983:	5a                   	pop    edx
c001d984:	6a 0f                	push   0xf
c001d986:	6a 00                	push   0x0
c001d988:	e8 dc f1 ff ff       	call   c001cb69 <combineColours(unsigned char, unsigned char)>
c001d98d:	59                   	pop    ecx
c001d98e:	0f b6 c0             	movzx  eax,al
c001d991:	5a                   	pop    edx
c001d992:	50                   	push   eax
c001d993:	a1 54 ae 02 c0       	mov    eax,ds:0xc002ae54
c001d998:	99                   	cdq    
c001d999:	f7 fb                	idiv   ebx
c001d99b:	99                   	cdq    
c001d99c:	f7 fb                	idiv   ebx
c001d99e:	8d 42 30             	lea    eax,[edx+0x30]
c001d9a1:	0f b6 c0             	movzx  eax,al
c001d9a4:	50                   	push   eax
c001d9a5:	e8 ae f1 ff ff       	call   c001cb58 <combineCharAndColour(char, unsigned char)>
c001d9aa:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c001d9b0:	59                   	pop    ecx
c001d9b1:	58                   	pop    eax
c001d9b2:	6a 0f                	push   0xf
c001d9b4:	6a 00                	push   0x0
c001d9b6:	e8 ae f1 ff ff       	call   c001cb69 <combineColours(unsigned char, unsigned char)>
c001d9bb:	5a                   	pop    edx
c001d9bc:	0f b6 c0             	movzx  eax,al
c001d9bf:	59                   	pop    ecx
c001d9c0:	50                   	push   eax
c001d9c1:	a1 54 ae 02 c0       	mov    eax,ds:0xc002ae54
c001d9c6:	99                   	cdq    
c001d9c7:	f7 fb                	idiv   ebx
c001d9c9:	8d 42 30             	lea    eax,[edx+0x30]
c001d9cc:	0f b6 c0             	movzx  eax,al
c001d9cf:	50                   	push   eax
c001d9d0:	e8 83 f1 ff ff       	call   c001cb58 <combineCharAndColour(char, unsigned char)>
c001d9d5:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c001d9db:	58                   	pop    eax
c001d9dc:	5a                   	pop    edx
c001d9dd:	6a 0f                	push   0xf
c001d9df:	6a 00                	push   0x0
c001d9e1:	e8 83 f1 ff ff       	call   c001cb69 <combineColours(unsigned char, unsigned char)>
c001d9e6:	59                   	pop    ecx
c001d9e7:	0f b6 c0             	movzx  eax,al
c001d9ea:	5a                   	pop    edx
c001d9eb:	b9 10 27 00 00       	mov    ecx,0x2710
c001d9f0:	50                   	push   eax
c001d9f1:	a1 50 ae 02 c0       	mov    eax,ds:0xc002ae50
c001d9f6:	99                   	cdq    
c001d9f7:	f7 f9                	idiv   ecx
c001d9f9:	99                   	cdq    
c001d9fa:	f7 fb                	idiv   ebx
c001d9fc:	8d 42 30             	lea    eax,[edx+0x30]
c001d9ff:	0f b6 c0             	movzx  eax,al
c001da02:	50                   	push   eax
c001da03:	e8 50 f1 ff ff       	call   c001cb58 <combineCharAndColour(char, unsigned char)>
c001da08:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c001da0e:	59                   	pop    ecx
c001da0f:	58                   	pop    eax
c001da10:	6a 0f                	push   0xf
c001da12:	6a 00                	push   0x0
c001da14:	e8 50 f1 ff ff       	call   c001cb69 <combineColours(unsigned char, unsigned char)>
c001da19:	5a                   	pop    edx
c001da1a:	0f b6 c0             	movzx  eax,al
c001da1d:	59                   	pop    ecx
c001da1e:	50                   	push   eax
c001da1f:	a1 50 ae 02 c0       	mov    eax,ds:0xc002ae50
c001da24:	99                   	cdq    
c001da25:	f7 fd                	idiv   ebp
c001da27:	99                   	cdq    
c001da28:	f7 fb                	idiv   ebx
c001da2a:	8d 42 30             	lea    eax,[edx+0x30]
c001da2d:	0f b6 c0             	movzx  eax,al
c001da30:	50                   	push   eax
c001da31:	e8 22 f1 ff ff       	call   c001cb58 <combineCharAndColour(char, unsigned char)>
c001da36:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001da3c:	5d                   	pop    ebp
c001da3d:	58                   	pop    eax
c001da3e:	6a 0f                	push   0xf
c001da40:	6a 00                	push   0x0
c001da42:	e8 22 f1 ff ff       	call   c001cb69 <combineColours(unsigned char, unsigned char)>
c001da47:	5a                   	pop    edx
c001da48:	0f b6 c0             	movzx  eax,al
c001da4b:	59                   	pop    ecx
c001da4c:	50                   	push   eax
c001da4d:	a1 50 ae 02 c0       	mov    eax,ds:0xc002ae50
c001da52:	99                   	cdq    
c001da53:	f7 ff                	idiv   edi
c001da55:	99                   	cdq    
c001da56:	f7 fb                	idiv   ebx
c001da58:	8d 42 30             	lea    eax,[edx+0x30]
c001da5b:	0f b6 c0             	movzx  eax,al
c001da5e:	50                   	push   eax
c001da5f:	e8 f4 f0 ff ff       	call   c001cb58 <combineCharAndColour(char, unsigned char)>
c001da64:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001da6a:	5f                   	pop    edi
c001da6b:	5d                   	pop    ebp
c001da6c:	6a 0f                	push   0xf
c001da6e:	6a 00                	push   0x0
c001da70:	e8 f4 f0 ff ff       	call   c001cb69 <combineColours(unsigned char, unsigned char)>
c001da75:	5a                   	pop    edx
c001da76:	0f b6 c0             	movzx  eax,al
c001da79:	59                   	pop    ecx
c001da7a:	50                   	push   eax
c001da7b:	a1 50 ae 02 c0       	mov    eax,ds:0xc002ae50
c001da80:	99                   	cdq    
c001da81:	f7 fb                	idiv   ebx
c001da83:	99                   	cdq    
c001da84:	f7 fb                	idiv   ebx
c001da86:	8d 42 30             	lea    eax,[edx+0x30]
c001da89:	0f b6 c0             	movzx  eax,al
c001da8c:	50                   	push   eax
c001da8d:	e8 c6 f0 ff ff       	call   c001cb58 <combineCharAndColour(char, unsigned char)>
c001da92:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001da98:	5f                   	pop    edi
c001da99:	5d                   	pop    ebp
c001da9a:	6a 0f                	push   0xf
c001da9c:	6a 00                	push   0x0
c001da9e:	e8 c6 f0 ff ff       	call   c001cb69 <combineColours(unsigned char, unsigned char)>
c001daa3:	5a                   	pop    edx
c001daa4:	0f b6 c0             	movzx  eax,al
c001daa7:	59                   	pop    ecx
c001daa8:	50                   	push   eax
c001daa9:	a1 50 ae 02 c0       	mov    eax,ds:0xc002ae50
c001daae:	99                   	cdq    
c001daaf:	f7 fb                	idiv   ebx
c001dab1:	83 c2 30             	add    edx,0x30
c001dab4:	0f b6 d2             	movzx  edx,dl
c001dab7:	52                   	push   edx
c001dab8:	e8 9b f0 ff ff       	call   c001cb58 <combineCharAndColour(char, unsigned char)>
c001dabd:	83 c4 10             	add    esp,0x10
c001dac0:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001dac6:	eb 05                	jmp    c001dacd <SATA::read(unsigned long long, int, void*)+0x245>
c001dac8:	be 01 00 00 00       	mov    esi,0x1
c001dacd:	83 c4 0c             	add    esp,0xc
c001dad0:	89 f0                	mov    eax,esi
c001dad2:	5b                   	pop    ebx
c001dad3:	5e                   	pop    esi
c001dad4:	5f                   	pop    edi
c001dad5:	5d                   	pop    ebp
c001dad6:	c3                   	ret    
c001dad7:	90                   	nop

c001dad8 <SATA::write(unsigned long long, int, void*)>:
c001dad8:	55                   	push   ebp
c001dad9:	b8 04 00 00 00       	mov    eax,0x4
c001dade:	57                   	push   edi
c001dadf:	56                   	push   esi
c001dae0:	53                   	push   ebx
c001dae1:	83 ec 1c             	sub    esp,0x1c
c001dae4:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c001dae8:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c001daec:	8d 75 ff             	lea    esi,[ebp-0x1]
c001daef:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001daf3:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c001daf7:	81 fe fe 00 00 00    	cmp    esi,0xfe
c001dafd:	0f 87 32 02 00 00    	ja     c001dd35 <SATA::write(unsigned long long, int, void*)+0x25d>
c001db03:	b8 06 00 00 00       	mov    eax,0x6
c001db08:	85 ff                	test   edi,edi
c001db0a:	0f 84 25 02 00 00    	je     c001dd35 <SATA::write(unsigned long long, int, void*)+0x25d>
c001db10:	89 ee                	mov    esi,ebp
c001db12:	c1 e6 09             	shl    esi,0x9
c001db15:	01 fe                	add    esi,edi
c001db17:	89 c8                	mov    eax,ecx
c001db19:	89 da                	mov    edx,ebx
c001db1b:	83 c0 01             	add    eax,0x1
c001db1e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001db22:	83 d2 00             	adc    edx,0x0
c001db25:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001db29:	50                   	push   eax
c001db2a:	50                   	push   eax
c001db2b:	6a 01                	push   0x1
c001db2d:	57                   	push   edi
c001db2e:	81 c7 00 02 00 00    	add    edi,0x200
c001db34:	6a 01                	push   0x1
c001db36:	53                   	push   ebx
c001db37:	51                   	push   ecx
c001db38:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001db3c:	e8 f3 fa ff ff       	call   c001d634 <SATA::access(unsigned long long, int, void*, bool)>
c001db41:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001db45:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001db49:	83 c4 20             	add    esp,0x20
c001db4c:	39 f7                	cmp    edi,esi
c001db4e:	75 c7                	jne    c001db17 <SATA::write(unsigned long long, int, void*)+0x3f>
c001db50:	bb 0a 00 00 00       	mov    ebx,0xa
c001db55:	01 2d 50 ae 02 c0    	add    DWORD PTR ds:0xc002ae50,ebp
c001db5b:	bd 10 27 00 00       	mov    ebp,0x2710
c001db60:	50                   	push   eax
c001db61:	50                   	push   eax
c001db62:	6a 0f                	push   0xf
c001db64:	6a 00                	push   0x0
c001db66:	e8 fe ef ff ff       	call   c001cb69 <combineColours(unsigned char, unsigned char)>
c001db6b:	5a                   	pop    edx
c001db6c:	0f b6 c0             	movzx  eax,al
c001db6f:	59                   	pop    ecx
c001db70:	50                   	push   eax
c001db71:	a1 54 ae 02 c0       	mov    eax,ds:0xc002ae54
c001db76:	99                   	cdq    
c001db77:	f7 fd                	idiv   ebp
c001db79:	99                   	cdq    
c001db7a:	f7 fb                	idiv   ebx
c001db7c:	8d 42 30             	lea    eax,[edx+0x30]
c001db7f:	0f b6 c0             	movzx  eax,al
c001db82:	50                   	push   eax
c001db83:	e8 d0 ef ff ff       	call   c001cb58 <combineCharAndColour(char, unsigned char)>
c001db88:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c001db8e:	5e                   	pop    esi
c001db8f:	5f                   	pop    edi
c001db90:	bf e8 03 00 00       	mov    edi,0x3e8
c001db95:	6a 0f                	push   0xf
c001db97:	6a 00                	push   0x0
c001db99:	e8 cb ef ff ff       	call   c001cb69 <combineColours(unsigned char, unsigned char)>
c001db9e:	5a                   	pop    edx
c001db9f:	0f b6 c0             	movzx  eax,al
c001dba2:	59                   	pop    ecx
c001dba3:	50                   	push   eax
c001dba4:	a1 54 ae 02 c0       	mov    eax,ds:0xc002ae54
c001dba9:	99                   	cdq    
c001dbaa:	f7 ff                	idiv   edi
c001dbac:	99                   	cdq    
c001dbad:	f7 fb                	idiv   ebx
c001dbaf:	8d 42 30             	lea    eax,[edx+0x30]
c001dbb2:	0f b6 c0             	movzx  eax,al
c001dbb5:	50                   	push   eax
c001dbb6:	e8 9d ef ff ff       	call   c001cb58 <combineCharAndColour(char, unsigned char)>
c001dbbb:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001dbc1:	5e                   	pop    esi
c001dbc2:	be 64 00 00 00       	mov    esi,0x64
c001dbc7:	58                   	pop    eax
c001dbc8:	6a 0f                	push   0xf
c001dbca:	6a 00                	push   0x0
c001dbcc:	e8 98 ef ff ff       	call   c001cb69 <combineColours(unsigned char, unsigned char)>
c001dbd1:	5a                   	pop    edx
c001dbd2:	0f b6 c0             	movzx  eax,al
c001dbd5:	59                   	pop    ecx
c001dbd6:	50                   	push   eax
c001dbd7:	a1 54 ae 02 c0       	mov    eax,ds:0xc002ae54
c001dbdc:	99                   	cdq    
c001dbdd:	f7 fe                	idiv   esi
c001dbdf:	99                   	cdq    
c001dbe0:	f7 fb                	idiv   ebx
c001dbe2:	8d 42 30             	lea    eax,[edx+0x30]
c001dbe5:	0f b6 c0             	movzx  eax,al
c001dbe8:	50                   	push   eax
c001dbe9:	e8 6a ef ff ff       	call   c001cb58 <combineCharAndColour(char, unsigned char)>
c001dbee:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c001dbf4:	58                   	pop    eax
c001dbf5:	5a                   	pop    edx
c001dbf6:	6a 0f                	push   0xf
c001dbf8:	6a 00                	push   0x0
c001dbfa:	e8 6a ef ff ff       	call   c001cb69 <combineColours(unsigned char, unsigned char)>
c001dbff:	59                   	pop    ecx
c001dc00:	0f b6 c0             	movzx  eax,al
c001dc03:	5a                   	pop    edx
c001dc04:	50                   	push   eax
c001dc05:	a1 54 ae 02 c0       	mov    eax,ds:0xc002ae54
c001dc0a:	99                   	cdq    
c001dc0b:	f7 fb                	idiv   ebx
c001dc0d:	99                   	cdq    
c001dc0e:	f7 fb                	idiv   ebx
c001dc10:	8d 42 30             	lea    eax,[edx+0x30]
c001dc13:	0f b6 c0             	movzx  eax,al
c001dc16:	50                   	push   eax
c001dc17:	e8 3c ef ff ff       	call   c001cb58 <combineCharAndColour(char, unsigned char)>
c001dc1c:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c001dc22:	59                   	pop    ecx
c001dc23:	58                   	pop    eax
c001dc24:	6a 0f                	push   0xf
c001dc26:	6a 00                	push   0x0
c001dc28:	e8 3c ef ff ff       	call   c001cb69 <combineColours(unsigned char, unsigned char)>
c001dc2d:	5a                   	pop    edx
c001dc2e:	0f b6 c0             	movzx  eax,al
c001dc31:	59                   	pop    ecx
c001dc32:	50                   	push   eax
c001dc33:	a1 54 ae 02 c0       	mov    eax,ds:0xc002ae54
c001dc38:	99                   	cdq    
c001dc39:	f7 fb                	idiv   ebx
c001dc3b:	83 c2 30             	add    edx,0x30
c001dc3e:	0f b6 d2             	movzx  edx,dl
c001dc41:	52                   	push   edx
c001dc42:	e8 11 ef ff ff       	call   c001cb58 <combineCharAndColour(char, unsigned char)>
c001dc47:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c001dc4d:	58                   	pop    eax
c001dc4e:	5a                   	pop    edx
c001dc4f:	6a 0f                	push   0xf
c001dc51:	6a 00                	push   0x0
c001dc53:	e8 11 ef ff ff       	call   c001cb69 <combineColours(unsigned char, unsigned char)>
c001dc58:	59                   	pop    ecx
c001dc59:	0f b6 c0             	movzx  eax,al
c001dc5c:	5a                   	pop    edx
c001dc5d:	50                   	push   eax
c001dc5e:	a1 50 ae 02 c0       	mov    eax,ds:0xc002ae50
c001dc63:	99                   	cdq    
c001dc64:	f7 fd                	idiv   ebp
c001dc66:	99                   	cdq    
c001dc67:	f7 fb                	idiv   ebx
c001dc69:	8d 42 30             	lea    eax,[edx+0x30]
c001dc6c:	0f b6 c0             	movzx  eax,al
c001dc6f:	50                   	push   eax
c001dc70:	e8 e3 ee ff ff       	call   c001cb58 <combineCharAndColour(char, unsigned char)>
c001dc75:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c001dc7b:	59                   	pop    ecx
c001dc7c:	5d                   	pop    ebp
c001dc7d:	6a 0f                	push   0xf
c001dc7f:	6a 00                	push   0x0
c001dc81:	e8 e3 ee ff ff       	call   c001cb69 <combineColours(unsigned char, unsigned char)>
c001dc86:	5a                   	pop    edx
c001dc87:	0f b6 c0             	movzx  eax,al
c001dc8a:	59                   	pop    ecx
c001dc8b:	50                   	push   eax
c001dc8c:	a1 50 ae 02 c0       	mov    eax,ds:0xc002ae50
c001dc91:	99                   	cdq    
c001dc92:	f7 ff                	idiv   edi
c001dc94:	99                   	cdq    
c001dc95:	f7 fb                	idiv   ebx
c001dc97:	8d 42 30             	lea    eax,[edx+0x30]
c001dc9a:	0f b6 c0             	movzx  eax,al
c001dc9d:	50                   	push   eax
c001dc9e:	e8 b5 ee ff ff       	call   c001cb58 <combineCharAndColour(char, unsigned char)>
c001dca3:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001dca9:	5f                   	pop    edi
c001dcaa:	5d                   	pop    ebp
c001dcab:	6a 0f                	push   0xf
c001dcad:	6a 00                	push   0x0
c001dcaf:	e8 b5 ee ff ff       	call   c001cb69 <combineColours(unsigned char, unsigned char)>
c001dcb4:	5a                   	pop    edx
c001dcb5:	0f b6 c0             	movzx  eax,al
c001dcb8:	59                   	pop    ecx
c001dcb9:	50                   	push   eax
c001dcba:	a1 50 ae 02 c0       	mov    eax,ds:0xc002ae50
c001dcbf:	99                   	cdq    
c001dcc0:	f7 fe                	idiv   esi
c001dcc2:	99                   	cdq    
c001dcc3:	f7 fb                	idiv   ebx
c001dcc5:	8d 42 30             	lea    eax,[edx+0x30]
c001dcc8:	0f b6 c0             	movzx  eax,al
c001dccb:	50                   	push   eax
c001dccc:	e8 87 ee ff ff       	call   c001cb58 <combineCharAndColour(char, unsigned char)>
c001dcd1:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001dcd7:	5e                   	pop    esi
c001dcd8:	5f                   	pop    edi
c001dcd9:	6a 0f                	push   0xf
c001dcdb:	6a 00                	push   0x0
c001dcdd:	e8 87 ee ff ff       	call   c001cb69 <combineColours(unsigned char, unsigned char)>
c001dce2:	5d                   	pop    ebp
c001dce3:	0f b6 c0             	movzx  eax,al
c001dce6:	5a                   	pop    edx
c001dce7:	50                   	push   eax
c001dce8:	a1 50 ae 02 c0       	mov    eax,ds:0xc002ae50
c001dced:	99                   	cdq    
c001dcee:	f7 fb                	idiv   ebx
c001dcf0:	99                   	cdq    
c001dcf1:	f7 fb                	idiv   ebx
c001dcf3:	8d 42 30             	lea    eax,[edx+0x30]
c001dcf6:	0f b6 c0             	movzx  eax,al
c001dcf9:	50                   	push   eax
c001dcfa:	e8 59 ee ff ff       	call   c001cb58 <combineCharAndColour(char, unsigned char)>
c001dcff:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001dd05:	59                   	pop    ecx
c001dd06:	5e                   	pop    esi
c001dd07:	6a 0f                	push   0xf
c001dd09:	6a 00                	push   0x0
c001dd0b:	e8 59 ee ff ff       	call   c001cb69 <combineColours(unsigned char, unsigned char)>
c001dd10:	5f                   	pop    edi
c001dd11:	0f b6 c0             	movzx  eax,al
c001dd14:	5d                   	pop    ebp
c001dd15:	50                   	push   eax
c001dd16:	a1 50 ae 02 c0       	mov    eax,ds:0xc002ae50
c001dd1b:	99                   	cdq    
c001dd1c:	f7 fb                	idiv   ebx
c001dd1e:	83 c2 30             	add    edx,0x30
c001dd21:	0f b6 d2             	movzx  edx,dl
c001dd24:	52                   	push   edx
c001dd25:	e8 2e ee ff ff       	call   c001cb58 <combineCharAndColour(char, unsigned char)>
c001dd2a:	83 c4 10             	add    esp,0x10
c001dd2d:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001dd33:	31 c0                	xor    eax,eax
c001dd35:	83 c4 1c             	add    esp,0x1c
c001dd38:	5b                   	pop    ebx
c001dd39:	5e                   	pop    esi
c001dd3a:	5f                   	pop    edi
c001dd3b:	5d                   	pop    ebp
c001dd3c:	c3                   	ret    
c001dd3d:	90                   	nop

c001dd3e <SATAPI::write(unsigned long long, int, void*)>:
c001dd3e:	b8 03 00 00 00       	mov    eax,0x3
c001dd43:	c3                   	ret    

c001dd44 <SATAPI::close(int, int, void*)>:
c001dd44:	83 ec 0c             	sub    esp,0xc
c001dd47:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dd4b:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001dd51:	85 c0                	test   eax,eax
c001dd53:	74 0c                	je     c001dd61 <SATAPI::close(int, int, void*)+0x1d>
c001dd55:	83 ec 0c             	sub    esp,0xc
c001dd58:	8b 10                	mov    edx,DWORD PTR [eax]
c001dd5a:	50                   	push   eax
c001dd5b:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001dd5e:	83 c4 10             	add    esp,0x10
c001dd61:	31 c0                	xor    eax,eax
c001dd63:	83 c4 0c             	add    esp,0xc
c001dd66:	c3                   	ret    
c001dd67:	90                   	nop

c001dd68 <SATAPI::SATAPI()>:
c001dd68:	83 ec 0c             	sub    esp,0xc
c001dd6b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dd6f:	83 ec 04             	sub    esp,0x4
c001dd72:	68 00 08 00 00       	push   0x800
c001dd77:	68 b4 2c 02 c0       	push   0xc0022cb4
c001dd7c:	50                   	push   eax
c001dd7d:	e8 2c ec fe ff       	call   c000c9ae <PhysicalDisk::PhysicalDisk(char const*, int)>
c001dd82:	83 c4 10             	add    esp,0x10
c001dd85:	ba a8 2d 02 c0       	mov    edx,0xc0022da8
c001dd8a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dd8e:	89 10                	mov    DWORD PTR [eax],edx
c001dd90:	90                   	nop
c001dd91:	83 c4 0c             	add    esp,0xc
c001dd94:	c3                   	ret    
c001dd95:	90                   	nop

c001dd96 <SATAPI::diskRemoved()>:
c001dd96:	c3                   	ret    
c001dd97:	90                   	nop

c001dd98 <SATAPI::diskInserted()>:
c001dd98:	83 ec 18             	sub    esp,0x18
c001dd9b:	68 c0 2c 02 c0       	push   0xc0022cc0
c001dda0:	e8 a0 cb fe ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001dda5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dda9:	c6 80 74 01 00 00 01 	mov    BYTE PTR [eax+0x174],0x1
c001ddb0:	83 c4 1c             	add    esp,0x1c
c001ddb3:	c3                   	ret    

c001ddb4 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>:
c001ddb4:	55                   	push   ebp
c001ddb5:	57                   	push   edi
c001ddb6:	56                   	push   esi
c001ddb7:	53                   	push   ebx
c001ddb8:	83 ec 34             	sub    esp,0x34
c001ddbb:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c001ddbf:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001ddc3:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c001ddc7:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001ddcb:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c001ddcf:	8b 85 70 01 00 00    	mov    eax,DWORD PTR [ebp+0x170]
c001ddd5:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001dddb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001dddf:	8b 85 6c 01 00 00    	mov    eax,DWORD PTR [ebp+0x16c]
c001dde5:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001dde9:	83 c0 02             	add    eax,0x2
c001ddec:	c1 e0 07             	shl    eax,0x7
c001ddef:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001ddf3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ddf7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ddfb:	c1 e0 07             	shl    eax,0x7
c001ddfe:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001de02:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001de06:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c001de10:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001de14:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001de1a:	e8 21 e5 ff ff       	call   c001c340 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c001de1f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001de23:	83 c4 10             	add    esp,0x10
c001de26:	b8 01 00 00 00       	mov    eax,0x1
c001de2b:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c001de30:	0f 84 53 02 00 00    	je     c001e089 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d5>
c001de36:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c001de3c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001de40:	8b 00                	mov    eax,DWORD PTR [eax]
c001de42:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c001de48:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c001de4e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001de52:	c1 e1 05             	shl    ecx,0x5
c001de55:	01 c8                	add    eax,ecx
c001de57:	8b 08                	mov    ecx,DWORD PTR [eax]
c001de59:	81 e1 80 ff 00 00    	and    ecx,0xff80
c001de5f:	81 c9 25 00 01 00    	or     ecx,0x10025
c001de65:	89 08                	mov    DWORD PTR [eax],ecx
c001de67:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c001de6d:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c001de73:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c001de79:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c001de7c:	8d 7b 40             	lea    edi,[ebx+0x40]
c001de7f:	50                   	push   eax
c001de80:	68 90 00 00 00       	push   0x90
c001de85:	6a 00                	push   0x0
c001de87:	53                   	push   ebx
c001de88:	e8 63 26 fe ff       	call   c00004f0 <memset>
c001de8d:	b9 0c 00 00 00       	mov    ecx,0xc
c001de92:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c001de96:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001de98:	8b 85 7c 01 00 00    	mov    eax,DWORD PTR [ebp+0x17c]
c001de9e:	c6 43 02 a0          	mov    BYTE PTR [ebx+0x2],0xa0
c001dea2:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c001dea8:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c001deac:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001deb0:	48                   	dec    eax
c001deb1:	25 ff ff 3f 00       	and    eax,0x3fffff
c001deb6:	89 c1                	mov    ecx,eax
c001deb8:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c001debe:	25 00 00 c0 ff       	and    eax,0xffc00000
c001dec3:	09 c8                	or     eax,ecx
c001dec5:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c001decb:	8a 83 8f 00 00 00    	mov    al,BYTE PTR [ebx+0x8f]
c001ded1:	83 c8 80             	or     eax,0xffffff80
c001ded4:	88 83 8f 00 00 00    	mov    BYTE PTR [ebx+0x8f],al
c001deda:	66 8b 03             	mov    ax,WORD PTR [ebx]
c001dedd:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001dee1:	25 00 7f 00 00       	and    eax,0x7f00
c001dee6:	66 89 53 04          	mov    WORD PTR [ebx+0x4],dx
c001deea:	0d 27 80 ff ff       	or     eax,0xffff8027
c001deef:	66 89 03             	mov    WORD PTR [ebx],ax
c001def2:	89 d0                	mov    eax,edx
c001def4:	c1 ea 18             	shr    edx,0x18
c001def7:	c1 e8 10             	shr    eax,0x10
c001defa:	88 53 08             	mov    BYTE PTR [ebx+0x8],dl
c001defd:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c001df00:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c001df04:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c001df07:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001df0b:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c001df0e:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001df12:	83 c4 10             	add    esp,0x10
c001df15:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c001df19:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001df1d:	31 c0                	xor    eax,eax
c001df1f:	8b 8a 20 01 00 00    	mov    ecx,DWORD PTR [edx+0x120]
c001df25:	80 e1 88             	and    cl,0x88
c001df28:	74 0a                	je     c001df34 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x180>
c001df2a:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001df2f:	74 0a                	je     c001df3b <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x187>
c001df31:	40                   	inc    eax
c001df32:	eb eb                	jmp    c001df1f <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x16b>
c001df34:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001df39:	75 43                	jne    c001df7e <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1ca>
c001df3b:	83 ec 0c             	sub    esp,0xc
c001df3e:	68 d8 2c 02 c0       	push   0xc0022cd8
c001df43:	e8 fd c9 fe ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001df48:	58                   	pop    eax
c001df49:	5a                   	pop    edx
c001df4a:	68 ed 2c 02 c0       	push   0xc0022ced
c001df4f:	ff 35 04 5f 02 c0    	push   DWORD PTR ds:0xc0025f04
c001df55:	e8 4c ab fe ff       	call   c0008aa6 <VgaText::puts(char const*)>
c001df5a:	59                   	pop    ecx
c001df5b:	5b                   	pop    ebx
c001df5c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001df60:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001df66:	e8 6f e4 ff ff       	call   c001c3da <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c001df6b:	5e                   	pop    esi
c001df6c:	5f                   	pop    edi
c001df6d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001df71:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001df77:	e8 3e e4 ff ff       	call   c001c3ba <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>
c001df7c:	eb 48                	jmp    c001dfc6 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x212>
c001df7e:	be 01 00 00 00       	mov    esi,0x1
c001df83:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c001df87:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001df8b:	d3 e6                	shl    esi,cl
c001df8d:	c1 e7 07             	shl    edi,0x7
c001df90:	89 b2 38 01 00 00    	mov    DWORD PTR [edx+0x138],esi
c001df96:	bb a8 e4 ff ff       	mov    ebx,0xffffe4a8
c001df9b:	03 7c 24 08          	add    edi,DWORD PTR [esp+0x8]
c001df9f:	8b 87 38 01 00 00    	mov    eax,DWORD PTR [edi+0x138]
c001dfa5:	85 c6                	test   esi,eax
c001dfa7:	8b 87 10 01 00 00    	mov    eax,DWORD PTR [edi+0x110]
c001dfad:	0f 84 a3 00 00 00    	je     c001e056 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2a2>
c001dfb3:	0f ba e0 1e          	bt     eax,0x1e
c001dfb7:	73 1a                	jae    c001dfd3 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x21f>
c001dfb9:	83 ec 0c             	sub    esp,0xc
c001dfbc:	68 ff 2c 02 c0       	push   0xc0022cff
c001dfc1:	e8 7f c9 fe ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001dfc6:	83 c4 10             	add    esp,0x10
c001dfc9:	b8 01 00 00 00       	mov    eax,0x1
c001dfce:	e9 b6 00 00 00       	jmp    c001e089 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d5>
c001dfd3:	8d 83 70 17 00 00    	lea    eax,[ebx+0x1770]
c001dfd9:	83 f8 0d             	cmp    eax,0xd
c001dfdc:	77 0a                	ja     c001dfe8 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x234>
c001dfde:	83 ec 0c             	sub    esp,0xc
c001dfe1:	68 c8 00 00 00       	push   0xc8
c001dfe6:	eb 28                	jmp    c001e010 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x25c>
c001dfe8:	8d 83 88 13 00 00    	lea    eax,[ebx+0x1388]
c001dfee:	83 f8 0d             	cmp    eax,0xd
c001dff1:	77 0a                	ja     c001dffd <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x249>
c001dff3:	83 ec 0c             	sub    esp,0xc
c001dff6:	68 58 02 00 00       	push   0x258
c001dffb:	eb 13                	jmp    c001e010 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x25c>
c001dffd:	8d 83 a0 0f 00 00    	lea    eax,[ebx+0xfa0]
c001e003:	83 f8 06             	cmp    eax,0x6
c001e006:	77 10                	ja     c001e018 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x264>
c001e008:	83 ec 0c             	sub    esp,0xc
c001e00b:	68 dc 05 00 00       	push   0x5dc
c001e010:	e8 c7 7d ff ff       	call   c0015ddc <milliTenthSleep(unsigned int)>
c001e015:	83 c4 10             	add    esp,0x10
c001e018:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001e01c:	80 38 1b             	cmp    BYTE PTR [eax],0x1b
c001e01f:	75 06                	jne    c001e027 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x273>
c001e021:	80 78 04 01          	cmp    BYTE PTR [eax+0x4],0x1
c001e025:	74 15                	je     c001e03c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x288>
c001e027:	83 fb 06             	cmp    ebx,0x6
c001e02a:	77 10                	ja     c001e03c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x288>
c001e02c:	83 ec 0c             	sub    esp,0xc
c001e02f:	68 c4 09 00 00       	push   0x9c4
c001e034:	e8 a3 7d ff ff       	call   c0015ddc <milliTenthSleep(unsigned int)>
c001e039:	83 c4 10             	add    esp,0x10
c001e03c:	43                   	inc    ebx
c001e03d:	81 fb b9 0b 00 00    	cmp    ebx,0xbb9
c001e043:	0f 85 56 ff ff ff    	jne    c001df9f <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1eb>
c001e049:	83 ec 0c             	sub    esp,0xc
c001e04c:	68 12 2d 02 c0       	push   0xc0022d12
c001e051:	e9 6b ff ff ff       	jmp    c001dfc1 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x20d>
c001e056:	0f ba e0 1e          	bt     eax,0x1e
c001e05a:	73 0d                	jae    c001e069 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2b5>
c001e05c:	83 ec 0c             	sub    esp,0xc
c001e05f:	68 26 2d 02 c0       	push   0xc0022d26
c001e064:	e9 58 ff ff ff       	jmp    c001dfc1 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x20d>
c001e069:	83 7c 24 54 00       	cmp    DWORD PTR [esp+0x54],0x0
c001e06e:	74 17                	je     c001e087 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d3>
c001e070:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c001e075:	74 10                	je     c001e087 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d3>
c001e077:	8b b5 80 01 00 00    	mov    esi,DWORD PTR [ebp+0x180]
c001e07d:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c001e081:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c001e085:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001e087:	31 c0                	xor    eax,eax
c001e089:	83 c4 2c             	add    esp,0x2c
c001e08c:	5b                   	pop    ebx
c001e08d:	5e                   	pop    esi
c001e08e:	5f                   	pop    edi
c001e08f:	5d                   	pop    ebp
c001e090:	c3                   	ret    
c001e091:	90                   	nop

c001e092 <SATAPI::eject()>:
c001e092:	57                   	push   edi
c001e093:	b9 03 00 00 00       	mov    ecx,0x3
c001e098:	83 ec 18             	sub    esp,0x18
c001e09b:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001e09f:	fc                   	cld    
c001e0a0:	31 c0                	xor    eax,eax
c001e0a2:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001e0a4:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001e0a9:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001e0ae:	50                   	push   eax
c001e0af:	6a 00                	push   0x0
c001e0b1:	6a 00                	push   0x0
c001e0b3:	6a 00                	push   0x0
c001e0b5:	6a 00                	push   0x0
c001e0b7:	6a 02                	push   0x2
c001e0b9:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001e0bd:	50                   	push   eax
c001e0be:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001e0c2:	e8 ed fc ff ff       	call   c001ddb4 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001e0c7:	31 c0                	xor    eax,eax
c001e0c9:	83 c4 38             	add    esp,0x38
c001e0cc:	5f                   	pop    edi
c001e0cd:	c3                   	ret    

c001e0ce <SATAPI::detectMedia()>:
c001e0ce:	53                   	push   ebx
c001e0cf:	83 ec 14             	sub    esp,0x14
c001e0d2:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001e0d6:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001e0dc:	e8 4b 02 ff ff       	call   c000e32c <VCache::writeWriteBuffer()>
c001e0e1:	59                   	pop    ecx
c001e0e2:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001e0e8:	e8 2f 02 ff ff       	call   c000e31c <VCache::invalidateReadBuffer()>
c001e0ed:	c7 04 24 3b 2d 02 c0 	mov    DWORD PTR [esp],0xc0022d3b
c001e0f4:	e8 4c c8 fe ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001e0f9:	83 c4 10             	add    esp,0x10
c001e0fc:	31 c0                	xor    eax,eax
c001e0fe:	8b 14 85 e0 94 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd6b20]
c001e105:	85 d2                	test   edx,edx
c001e107:	74 0f                	je     c001e118 <SATAPI::detectMedia()+0x4a>
c001e109:	39 9a 6c 01 00 00    	cmp    DWORD PTR [edx+0x16c],ebx
c001e10f:	75 07                	jne    c001e118 <SATAPI::detectMedia()+0x4a>
c001e111:	c6 82 70 01 00 00 01 	mov    BYTE PTR [edx+0x170],0x1
c001e118:	40                   	inc    eax
c001e119:	83 f8 1a             	cmp    eax,0x1a
c001e11c:	75 e0                	jne    c001e0fe <SATAPI::detectMedia()+0x30>
c001e11e:	83 c4 08             	add    esp,0x8
c001e121:	5b                   	pop    ebx
c001e122:	c3                   	ret    
c001e123:	90                   	nop

c001e124 <SATAPI::open(int, int, void*)>:
c001e124:	56                   	push   esi
c001e125:	53                   	push   ebx
c001e126:	51                   	push   ecx
c001e127:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001e12b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001e12f:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c001e139:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c001e13f:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001e149:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e14d:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001e157:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001e15d:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c001e164:	e8 56 9c fe ff       	call   c0007dbf <Phys::allocatePage()>
c001e169:	89 c6                	mov    esi,eax
c001e16b:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c001e171:	81 c6 00 10 00 00    	add    esi,0x1000
c001e177:	e8 43 9c fe ff       	call   c0007dbf <Phys::allocatePage()>
c001e17c:	39 c6                	cmp    esi,eax
c001e17e:	74 10                	je     c001e190 <SATAPI::open(int, int, void*)+0x6c>
c001e180:	83 ec 0c             	sub    esp,0xc
c001e183:	68 50 2d 02 c0       	push   0xc0022d50
c001e188:	e8 60 30 ff ff       	call   c00111ed <KePanic(char const*)>
c001e18d:	83 c4 10             	add    esp,0x10
c001e190:	83 ec 0c             	sub    esp,0xc
c001e193:	6a 02                	push   0x2
c001e195:	e8 73 b4 fe ff       	call   c000960d <Virt::allocateKernelVirtualPages(int)>
c001e19a:	89 83 80 01 00 00    	mov    DWORD PTR [ebx+0x180],eax
c001e1a0:	6a 03                	push   0x3
c001e1a2:	50                   	push   eax
c001e1a3:	ff b3 7c 01 00 00    	push   DWORD PTR [ebx+0x17c]
c001e1a9:	ff 35 b0 5f 02 c0    	push   DWORD PTR ds:0xc0025fb0
c001e1af:	e8 6c bb fe ff       	call   c0009d20 <VAS::mapPage(unsigned long, unsigned long, int)>
c001e1b4:	83 c4 14             	add    esp,0x14
c001e1b7:	68 78 01 00 00       	push   0x178
c001e1bc:	e8 f5 98 fe ff       	call   c0007ab6 <malloc>
c001e1c1:	83 c4 0c             	add    esp,0xc
c001e1c4:	89 c6                	mov    esi,eax
c001e1c6:	6a 00                	push   0x0
c001e1c8:	68 ff ff ff 7f       	push   0x7fffffff
c001e1cd:	6a 00                	push   0x0
c001e1cf:	6a 00                	push   0x0
c001e1d1:	53                   	push   ebx
c001e1d2:	68 66 2d 02 c0       	push   0xc0022d66
c001e1d7:	50                   	push   eax
c001e1d8:	e8 ab f5 fe ff       	call   c000d788 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001e1dd:	83 c4 14             	add    esp,0x14
c001e1e0:	56                   	push   esi
c001e1e1:	e8 62 f6 fe ff       	call   c000d848 <LogicalDisk::assignDriveLetter()>
c001e1e6:	5a                   	pop    edx
c001e1e7:	0f be c0             	movsx  eax,al
c001e1ea:	59                   	pop    ecx
c001e1eb:	50                   	push   eax
c001e1ec:	68 b8 2b 02 c0       	push   0xc0022bb8
c001e1f1:	e8 4f c7 fe ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001e1f6:	58                   	pop    eax
c001e1f7:	5a                   	pop    edx
c001e1f8:	56                   	push   esi
c001e1f9:	53                   	push   ebx
c001e1fa:	e8 e3 e3 fe ff       	call   c000c5e2 <Device::addChild(Device*)>
c001e1ff:	89 b3 78 01 00 00    	mov    DWORD PTR [ebx+0x178],esi
c001e205:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001e208:	e8 09 e8 fe ff       	call   c000ca16 <PhysicalDisk::startCache()>
c001e20d:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c001e214:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001e217:	e8 b2 fe ff ff       	call   c001e0ce <SATAPI::detectMedia()>
c001e21c:	83 c4 14             	add    esp,0x14
c001e21f:	31 c0                	xor    eax,eax
c001e221:	5b                   	pop    ebx
c001e222:	5e                   	pop    esi
c001e223:	c3                   	ret    

c001e224 <SATAPI::read(unsigned long long, int, void*)>:
c001e224:	57                   	push   edi
c001e225:	56                   	push   esi
c001e226:	53                   	push   ebx
c001e227:	83 ec 30             	sub    esp,0x30
c001e22a:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001e22e:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c001e232:	8b 74 24 4c          	mov    esi,DWORD PTR [esp+0x4c]
c001e236:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001e23a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001e23e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001e242:	83 fe 04             	cmp    esi,0x4
c001e245:	7e 10                	jle    c001e257 <SATAPI::read(unsigned long long, int, void*)+0x33>
c001e247:	83 ec 0c             	sub    esp,0xc
c001e24a:	68 74 2d 02 c0       	push   0xc0022d74
c001e24f:	e8 99 2f ff ff       	call   c00111ed <KePanic(char const*)>
c001e254:	83 c4 10             	add    esp,0x10
c001e257:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c001e25d:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001e263:	51                   	push   ecx
c001e264:	50                   	push   eax
c001e265:	83 c0 02             	add    eax,0x2
c001e268:	c1 e0 07             	shl    eax,0x7
c001e26b:	03 82 60 01 00 00    	add    eax,DWORD PTR [edx+0x160]
c001e271:	50                   	push   eax
c001e272:	52                   	push   edx
c001e273:	e8 8c e1 ff ff       	call   c001c404 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001e278:	8d 7c 24 28          	lea    edi,[esp+0x28]
c001e27c:	b9 03 00 00 00       	mov    ecx,0x3
c001e281:	fc                   	cld    
c001e282:	31 c0                	xor    eax,eax
c001e284:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001e286:	c6 44 24 28 1b       	mov    BYTE PTR [esp+0x28],0x1b
c001e28b:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c001e290:	83 c4 0c             	add    esp,0xc
c001e293:	6a 00                	push   0x0
c001e295:	6a 00                	push   0x0
c001e297:	6a 00                	push   0x0
c001e299:	6a 00                	push   0x0
c001e29b:	6a 02                	push   0x2
c001e29d:	8d 44 24 30          	lea    eax,[esp+0x30]
c001e2a1:	50                   	push   eax
c001e2a2:	53                   	push   ebx
c001e2a3:	e8 0c fb ff ff       	call   c001ddb4 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001e2a8:	83 c4 20             	add    esp,0x20
c001e2ab:	85 c0                	test   eax,eax
c001e2ad:	75 44                	jne    c001e2f3 <SATAPI::read(unsigned long long, int, void*)+0xcf>
c001e2af:	8d 7c 24 24          	lea    edi,[esp+0x24]
c001e2b3:	b9 03 00 00 00       	mov    ecx,0x3
c001e2b8:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001e2ba:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e2be:	c6 44 24 24 a8       	mov    BYTE PTR [esp+0x24],0xa8
c001e2c3:	0f c8                	bswap  eax
c001e2c5:	89 44 24 26          	mov    DWORD PTR [esp+0x26],eax
c001e2c9:	89 f0                	mov    eax,esi
c001e2cb:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c001e2cf:	50                   	push   eax
c001e2d0:	56                   	push   esi
c001e2d1:	c1 e6 0b             	shl    esi,0xb
c001e2d4:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c001e2d8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001e2dc:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001e2e0:	56                   	push   esi
c001e2e1:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001e2e5:	50                   	push   eax
c001e2e6:	53                   	push   ebx
c001e2e7:	e8 c8 fa ff ff       	call   c001ddb4 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001e2ec:	83 c4 20             	add    esp,0x20
c001e2ef:	85 c0                	test   eax,eax
c001e2f1:	74 14                	je     c001e307 <SATAPI::read(unsigned long long, int, void*)+0xe3>
c001e2f3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001e2f7:	83 ec 0c             	sub    esp,0xc
c001e2fa:	53                   	push   ebx
c001e2fb:	e8 ce fd ff ff       	call   c001e0ce <SATAPI::detectMedia()>
c001e300:	83 c4 10             	add    esp,0x10
c001e303:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e307:	83 c4 30             	add    esp,0x30
c001e30a:	5b                   	pop    ebx
c001e30b:	5e                   	pop    esi
c001e30c:	5f                   	pop    edi
c001e30d:	c3                   	ret    

c001e30e <IOAPIC::close(int, int, void*)>:
c001e30e:	b8 00 00 00 00       	mov    eax,0x0
c001e313:	c3                   	ret    

c001e314 <apicGetBase()>:
c001e314:	55                   	push   ebp
c001e315:	89 e5                	mov    ebp,esp
c001e317:	83 ec 18             	sub    esp,0x18
c001e31a:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c001e31f:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c001e325:	83 e0 08             	and    eax,0x8
c001e328:	0f b6 c0             	movzx  eax,al
c001e32b:	85 c0                	test   eax,eax
c001e32d:	75 07                	jne    c001e336 <apicGetBase()+0x22>
c001e32f:	b8 00 00 00 00       	mov    eax,0x0
c001e334:	eb 21                	jmp    c001e357 <apicGetBase()+0x43>
c001e336:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c001e33b:	83 ec 08             	sub    esp,0x8
c001e33e:	6a 1b                	push   0x1b
c001e340:	50                   	push   eax
c001e341:	e8 7c 8d fe ff       	call   c00070c2 <Computer::rdmsr(unsigned int)>
c001e346:	83 c4 10             	add    esp,0x10
c001e349:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001e34c:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c001e34f:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001e352:	25 00 00 ff ff       	and    eax,0xffff0000
c001e357:	c9                   	leave  
c001e358:	c3                   	ret    
c001e359:	90                   	nop

c001e35a <IOAPIC::IOAPIC()>:
c001e35a:	83 ec 0c             	sub    esp,0xc
c001e35d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e361:	83 ec 08             	sub    esp,0x8
c001e364:	68 d8 2d 02 c0       	push   0xc0022dd8
c001e369:	50                   	push   eax
c001e36a:	e8 0b e4 fe ff       	call   c000c77a <Device::Device(char const*)>
c001e36f:	83 c4 10             	add    esp,0x10
c001e372:	ba e8 2d 02 c0       	mov    edx,0xc0022de8
c001e377:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e37b:	89 10                	mov    DWORD PTR [eax],edx
c001e37d:	90                   	nop
c001e37e:	83 c4 0c             	add    esp,0xc
c001e381:	c3                   	ret    

c001e382 <apicOpen()>:
c001e382:	55                   	push   ebp
c001e383:	89 e5                	mov    ebp,esp
c001e385:	53                   	push   ebx
c001e386:	83 ec 34             	sub    esp,0x34
c001e389:	a0 a0 ae 02 c0       	mov    al,ds:0xc002aea0
c001e38e:	83 f0 01             	xor    eax,0x1
c001e391:	0f b6 c0             	movzx  eax,al
c001e394:	85 c0                	test   eax,eax
c001e396:	0f 84 a3 00 00 00    	je     c001e43f <apicOpen()+0xbd>
c001e39c:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c001e3a0:	a0 40 98 02 c0       	mov    al,ds:0xc0029840
c001e3a5:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
c001e3a9:	0f b6 c0             	movzx  eax,al
c001e3ac:	39 c2                	cmp    edx,eax
c001e3ae:	0f 83 84 00 00 00    	jae    c001e438 <apicOpen()+0xb6>
c001e3b4:	c7 45 d0 68 01 00 00 	mov    DWORD PTR [ebp-0x30],0x168
c001e3bb:	83 ec 0c             	sub    esp,0xc
c001e3be:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c001e3c1:	e8 f0 96 fe ff       	call   c0007ab6 <malloc>
c001e3c6:	83 c4 10             	add    esp,0x10
c001e3c9:	89 c3                	mov    ebx,eax
c001e3cb:	83 ec 0c             	sub    esp,0xc
c001e3ce:	53                   	push   ebx
c001e3cf:	e8 86 ff ff ff       	call   c001e35a <IOAPIC::IOAPIC()>
c001e3d4:	83 c4 10             	add    esp,0x10
c001e3d7:	89 5d ec             	mov    DWORD PTR [ebp-0x14],ebx
c001e3da:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
c001e3de:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001e3e1:	89 14 85 80 ae 02 c0 	mov    DWORD PTR [eax*4-0x3ffd5180],edx
c001e3e8:	a1 60 ae 02 c0       	mov    eax,ds:0xc002ae60
c001e3ed:	83 c0 01             	add    eax,0x1
c001e3f0:	a3 60 ae 02 c0       	mov    ds:0xc002ae60,eax
c001e3f5:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c001e3fa:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c001e400:	83 ec 08             	sub    esp,0x8
c001e403:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c001e406:	50                   	push   eax
c001e407:	e8 d6 e1 fe ff       	call   c000c5e2 <Device::addChild(Device*)>
c001e40c:	83 c4 10             	add    esp,0x10
c001e40f:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001e412:	8b 00                	mov    eax,DWORD PTR [eax]
c001e414:	83 c0 08             	add    eax,0x8
c001e417:	8b 00                	mov    eax,DWORD PTR [eax]
c001e419:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
c001e41d:	6a 00                	push   0x0
c001e41f:	6a 00                	push   0x0
c001e421:	52                   	push   edx
c001e422:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c001e425:	ff d0                	call   eax
c001e427:	83 c4 10             	add    esp,0x10
c001e42a:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
c001e42d:	83 c0 01             	add    eax,0x1
c001e430:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
c001e433:	e9 68 ff ff ff       	jmp    c001e3a0 <apicOpen()+0x1e>
c001e438:	c6 05 a0 ae 02 c0 01 	mov    BYTE PTR ds:0xc002aea0,0x1
c001e43f:	e8 d0 fe ff ff       	call   c001e314 <apicGetBase()>
c001e444:	05 f0 00 00 00       	add    eax,0xf0
c001e449:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001e44c:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c001e44f:	8b 00                	mov    eax,DWORD PTR [eax]
c001e451:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c001e454:	81 4d e4 00 01 00 00 	or     DWORD PTR [ebp-0x1c],0x100
c001e45b:	81 4d e4 ff 00 00 00 	or     DWORD PTR [ebp-0x1c],0xff
c001e462:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c001e465:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c001e468:	89 10                	mov    DWORD PTR [eax],edx
c001e46a:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
c001e471:	a1 90 97 02 c0       	mov    eax,ds:0xc0029790
c001e476:	39 45 f0             	cmp    DWORD PTR [ebp-0x10],eax
c001e479:	7d 7c                	jge    c001e4f7 <apicOpen()+0x175>
c001e47b:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001e47e:	8b 04 85 a0 97 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6860]
c001e485:	88 45 e3             	mov    BYTE PTR [ebp-0x1d],al
c001e488:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001e48b:	8b 04 85 a0 97 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6860]
c001e492:	c1 e8 08             	shr    eax,0x8
c001e495:	66 89 45 e0          	mov    WORD PTR [ebp-0x20],ax
c001e499:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001e49c:	8b 04 85 a0 97 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6860]
c001e4a3:	c1 e8 18             	shr    eax,0x18
c001e4a6:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c001e4a9:	0f b6 45 e3          	movzx  eax,BYTE PTR [ebp-0x1d]
c001e4ad:	3d ff 00 00 00       	cmp    eax,0xff
c001e4b2:	75 3a                	jne    c001e4ee <apicOpen()+0x16c>
c001e4b4:	e8 5b fe ff ff       	call   c001e314 <apicGetBase()>
c001e4b9:	0f b6 55 df          	movzx  edx,BYTE PTR [ebp-0x21]
c001e4bd:	83 fa 01             	cmp    edx,0x1
c001e4c0:	75 07                	jne    c001e4c9 <apicOpen()+0x147>
c001e4c2:	ba 60 03 00 00       	mov    edx,0x360
c001e4c7:	eb 05                	jmp    c001e4ce <apicOpen()+0x14c>
c001e4c9:	ba 50 03 00 00       	mov    edx,0x350
c001e4ce:	01 d0                	add    eax,edx
c001e4d0:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c001e4d3:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001e4d6:	8b 00                	mov    eax,DWORD PTR [eax]
c001e4d8:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c001e4db:	81 65 d4 00 ff ff ff 	and    DWORD PTR [ebp-0x2c],0xffffff00
c001e4e2:	83 4d d4 02          	or     DWORD PTR [ebp-0x2c],0x2
c001e4e6:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001e4e9:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c001e4ec:	89 10                	mov    DWORD PTR [eax],edx
c001e4ee:	83 45 f0 01          	add    DWORD PTR [ebp-0x10],0x1
c001e4f2:	e9 7a ff ff ff       	jmp    c001e471 <apicOpen()+0xef>
c001e4f7:	90                   	nop
c001e4f8:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001e4fb:	c9                   	leave  
c001e4fc:	c3                   	ret    
c001e4fd:	90                   	nop

c001e4fe <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c001e4fe:	55                   	push   ebp
c001e4ff:	89 e5                	mov    ebp,esp
c001e501:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e504:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001e50a:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001e50d:	72 1d                	jb     c001e52c <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001e50f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e512:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c001e518:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e51b:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c001e521:	01 d0                	add    eax,edx
c001e523:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001e526:	73 04                	jae    c001e52c <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001e528:	b0 01                	mov    al,0x1
c001e52a:	eb 02                	jmp    c001e52e <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c001e52c:	b0 00                	mov    al,0x0
c001e52e:	5d                   	pop    ebp
c001e52f:	c3                   	ret    

c001e530 <IOAPIC::read(int)>:
c001e530:	55                   	push   ebp
c001e531:	89 e5                	mov    ebp,esp
c001e533:	83 ec 10             	sub    esp,0x10
c001e536:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e539:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001e53f:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001e542:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001e545:	0f b6 d0             	movzx  edx,al
c001e548:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001e54b:	89 10                	mov    DWORD PTR [eax],edx
c001e54d:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001e550:	83 c0 10             	add    eax,0x10
c001e553:	8b 00                	mov    eax,DWORD PTR [eax]
c001e555:	c9                   	leave  
c001e556:	c3                   	ret    
c001e557:	90                   	nop

c001e558 <IOAPIC::open(int, int, void*)>:
c001e558:	55                   	push   ebp
c001e559:	89 e5                	mov    ebp,esp
c001e55b:	57                   	push   edi
c001e55c:	56                   	push   esi
c001e55d:	53                   	push   ebx
c001e55e:	83 ec 04             	sub    esp,0x4
c001e561:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e564:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001e567:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001e56d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e570:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001e576:	8b 14 85 80 98 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd6780]
c001e57d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e580:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001e586:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e589:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001e58f:	8b 14 85 00 99 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd6700]
c001e596:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e599:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c001e59f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e5a2:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c001e5a8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e5ab:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001e5b1:	0f b6 f0             	movzx  esi,al
c001e5b4:	89 d0                	mov    eax,edx
c001e5b6:	ba 00 00 00 00       	mov    edx,0x0
c001e5bb:	89 c7                	mov    edi,eax
c001e5bd:	83 e7 ff             	and    edi,0xffffffff
c001e5c0:	89 f9                	mov    ecx,edi
c001e5c2:	0f b6 da             	movzx  ebx,dl
c001e5c5:	89 c8                	mov    eax,ecx
c001e5c7:	89 da                	mov    edx,ebx
c001e5c9:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001e5cc:	8d 5e 08             	lea    ebx,[esi+0x8]
c001e5cf:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c001e5d3:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c001e5d7:	83 e0 00             	and    eax,0x0
c001e5da:	09 d0                	or     eax,edx
c001e5dc:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c001e5e0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e5e3:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001e5e9:	8d 50 01             	lea    edx,[eax+0x1]
c001e5ec:	88 d1                	mov    cl,dl
c001e5ee:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c001e5f1:	88 8a c5 00 00 00    	mov    BYTE PTR [edx+0xc5],cl
c001e5f7:	0f b6 d0             	movzx  edx,al
c001e5fa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e5fd:	83 c2 08             	add    edx,0x8
c001e600:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c001e604:	0f b6 c9             	movzx  ecx,cl
c001e607:	81 c9 00 ad de 00    	or     ecx,0xdead00
c001e60d:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c001e611:	6a 01                	push   0x1
c001e613:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e616:	e8 15 ff ff ff       	call   c001e530 <IOAPIC::read(int)>
c001e61b:	83 c4 08             	add    esp,0x8
c001e61e:	c1 f8 10             	sar    eax,0x10
c001e621:	0f b6 c0             	movzx  eax,al
c001e624:	8d 50 01             	lea    edx,[eax+0x1]
c001e627:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e62a:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c001e630:	b8 00 00 00 00       	mov    eax,0x0
c001e635:	8d 65 f4             	lea    esp,[ebp-0xc]
c001e638:	5b                   	pop    ebx
c001e639:	5e                   	pop    esi
c001e63a:	5f                   	pop    edi
c001e63b:	5d                   	pop    ebp
c001e63c:	c3                   	ret    
c001e63d:	90                   	nop

c001e63e <IOAPIC::write(int, int)>:
c001e63e:	55                   	push   ebp
c001e63f:	89 e5                	mov    ebp,esp
c001e641:	83 ec 10             	sub    esp,0x10
c001e644:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e647:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001e64d:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001e650:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001e653:	0f b6 d0             	movzx  edx,al
c001e656:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001e659:	89 10                	mov    DWORD PTR [eax],edx
c001e65b:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001e65e:	8d 50 10             	lea    edx,[eax+0x10]
c001e661:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001e664:	89 02                	mov    DWORD PTR [edx],eax
c001e666:	90                   	nop
c001e667:	c9                   	leave  
c001e668:	c3                   	ret    
c001e669:	90                   	nop

c001e66a <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c001e66a:	55                   	push   ebp
c001e66b:	89 e5                	mov    ebp,esp
c001e66d:	53                   	push   ebx
c001e66e:	83 ec 2c             	sub    esp,0x2c
c001e671:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001e674:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c001e677:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c001e67a:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c001e67d:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c001e680:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001e683:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c001e686:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c001e689:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c001e68c:	88 d8                	mov    al,bl
c001e68e:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c001e691:	88 c8                	mov    al,cl
c001e693:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c001e696:	88 d0                	mov    al,dl
c001e698:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c001e69b:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c001e69f:	83 c0 08             	add    eax,0x8
c001e6a2:	01 c0                	add    eax,eax
c001e6a4:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001e6a7:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c001e6ab:	83 c0 08             	add    eax,0x8
c001e6ae:	01 c0                	add    eax,eax
c001e6b0:	83 c0 01             	add    eax,0x1
c001e6b3:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c001e6b6:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001e6b9:	50                   	push   eax
c001e6ba:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e6bd:	e8 6e fe ff ff       	call   c001e530 <IOAPIC::read(int)>
c001e6c2:	83 c4 08             	add    esp,0x8
c001e6c5:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001e6c8:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c001e6cf:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001e6d2:	c1 e0 18             	shl    eax,0x18
c001e6d5:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c001e6d8:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c001e6db:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001e6de:	52                   	push   edx
c001e6df:	50                   	push   eax
c001e6e0:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e6e3:	e8 56 ff ff ff       	call   c001e63e <IOAPIC::write(int, int)>
c001e6e8:	83 c4 0c             	add    esp,0xc
c001e6eb:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001e6ee:	50                   	push   eax
c001e6ef:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e6f2:	e8 39 fe ff ff       	call   c001e530 <IOAPIC::read(int)>
c001e6f7:	83 c4 08             	add    esp,0x8
c001e6fa:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c001e6fd:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c001e704:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c001e70b:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c001e712:	0f b6 45 d4          	movzx  eax,BYTE PTR [ebp-0x2c]
c001e716:	85 c0                	test   eax,eax
c001e718:	74 09                	je     c001e723 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xb9>
c001e71a:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c001e721:	eb 07                	jmp    c001e72a <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xc0>
c001e723:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c001e72a:	0f b6 45 d0          	movzx  eax,BYTE PTR [ebp-0x30]
c001e72e:	85 c0                	test   eax,eax
c001e730:	74 09                	je     c001e73b <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd1>
c001e732:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c001e739:	eb 07                	jmp    c001e742 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd8>
c001e73b:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c001e742:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c001e749:	0f b6 45 e0          	movzx  eax,BYTE PTR [ebp-0x20]
c001e74d:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c001e750:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c001e753:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001e756:	52                   	push   edx
c001e757:	50                   	push   eax
c001e758:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e75b:	e8 de fe ff ff       	call   c001e63e <IOAPIC::write(int, int)>
c001e760:	83 c4 0c             	add    esp,0xc
c001e763:	90                   	nop
c001e764:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001e767:	c9                   	leave  
c001e768:	c3                   	ret    
c001e769:	66 90                	xchg   ax,ax
c001e76b:	90                   	nop

c001e76c <APICTimer::close(int, int, void*)>:
c001e76c:	b8 00 00 00 00       	mov    eax,0x0
c001e771:	c3                   	ret    
c001e772:	66 90                	xchg   ax,ax

c001e774 <apicTimerHandler(regs*, void*)>:
c001e774:	83 ec 0c             	sub    esp,0xc
c001e777:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e77b:	8b 08                	mov    ecx,DWORD PTR [eax]
c001e77d:	b8 10 27 00 00       	mov    eax,0x2710
c001e782:	ba 00 00 00 00       	mov    edx,0x0
c001e787:	f7 f1                	div    ecx
c001e789:	83 ec 0c             	sub    esp,0xc
c001e78c:	50                   	push   eax
c001e78d:	e8 b2 f8 fe ff       	call   c000e044 <timerHandler(unsigned int)>
c001e792:	83 c4 10             	add    esp,0x10
c001e795:	90                   	nop
c001e796:	83 c4 0c             	add    esp,0xc
c001e799:	c3                   	ret    
c001e79a:	66 90                	xchg   ax,ax

c001e79c <APICTimer::open(int, int, void*)>:
c001e79c:	83 ec 0c             	sub    esp,0xc
c001e79f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e7a3:	8b 00                	mov    eax,DWORD PTR [eax]
c001e7a5:	83 c0 24             	add    eax,0x24
c001e7a8:	8b 00                	mov    eax,DWORD PTR [eax]
c001e7aa:	83 ec 08             	sub    esp,0x8
c001e7ad:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e7b1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e7b5:	ff d0                	call   eax
c001e7b7:	83 c4 10             	add    esp,0x10
c001e7ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e7be:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001e7c2:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001e7c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e7cc:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001e7d0:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c001e7d6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001e7da:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c001e7e0:	83 ec 0c             	sub    esp,0xc
c001e7e3:	51                   	push   ecx
c001e7e4:	6a 01                	push   0x1
c001e7e6:	68 74 e7 01 c0       	push   0xc001e774
c001e7eb:	52                   	push   edx
c001e7ec:	50                   	push   eax
c001e7ed:	e8 9c dd fe ff       	call   c000c58e <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001e7f2:	83 c4 20             	add    esp,0x20
c001e7f5:	89 c2                	mov    edx,eax
c001e7f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e7fb:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001e801:	b8 00 00 00 00       	mov    eax,0x0
c001e806:	83 c4 0c             	add    esp,0xc
c001e809:	c3                   	ret    
c001e80a:	66 90                	xchg   ax,ax

c001e80c <APICTimer::write(int)>:
c001e80c:	83 ec 0c             	sub    esp,0xc
c001e80f:	83 ec 0c             	sub    esp,0xc
c001e812:	68 0c 2e 02 c0       	push   0xc0022e0c
c001e817:	e8 d1 29 ff ff       	call   c00111ed <KePanic(char const*)>
c001e81c:	83 c4 10             	add    esp,0x10
c001e81f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e823:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e827:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001e82d:	90                   	nop
c001e82e:	83 c4 0c             	add    esp,0xc
c001e831:	c3                   	ret    
c001e832:	66 90                	xchg   ax,ax

c001e834 <APICTimer::APICTimer()>:
c001e834:	83 ec 0c             	sub    esp,0xc
c001e837:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e83b:	83 ec 08             	sub    esp,0x8
c001e83e:	68 1c 2e 02 c0       	push   0xc0022e1c
c001e843:	50                   	push   eax
c001e844:	e8 2f f7 fe ff       	call   c000df78 <Timer::Timer(char const*)>
c001e849:	83 c4 10             	add    esp,0x10
c001e84c:	ba 30 2e 02 c0       	mov    edx,0xc0022e30
c001e851:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e855:	89 10                	mov    DWORD PTR [eax],edx
c001e857:	90                   	nop
c001e858:	83 c4 0c             	add    esp,0xc
c001e85b:	c3                   	ret    

c001e85c <PIT::write(int)>:
c001e85c:	83 ec 10             	sub    esp,0x10
c001e85f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e863:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001e867:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001e86d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001e871:	a3 a4 ae 02 c0       	mov    ds:0xc002aea4,eax
c001e876:	b8 dc 34 12 00       	mov    eax,0x1234dc
c001e87b:	89 c2                	mov    edx,eax
c001e87d:	c1 fa 1f             	sar    edx,0x1f
c001e880:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c001e884:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e888:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c001e88f:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c001e894:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c001e898:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c001e89d:	ee                   	out    dx,al
c001e89e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e8a2:	0f b6 c0             	movzx  eax,al
c001e8a5:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c001e8ac:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c001e8b0:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c001e8b4:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c001e8b9:	ee                   	out    dx,al
c001e8ba:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e8be:	c1 f8 08             	sar    eax,0x8
c001e8c1:	0f b6 c0             	movzx  eax,al
c001e8c4:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c001e8cb:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001e8cf:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001e8d3:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c001e8d8:	ee                   	out    dx,al
c001e8d9:	90                   	nop
c001e8da:	83 c4 10             	add    esp,0x10
c001e8dd:	c3                   	ret    
c001e8de:	66 90                	xchg   ax,ax

c001e8e0 <pitHandler(regs*, void*)>:
c001e8e0:	83 ec 0c             	sub    esp,0xc
c001e8e3:	8b 0d a4 ae 02 c0    	mov    ecx,DWORD PTR ds:0xc002aea4
c001e8e9:	b8 10 27 00 00       	mov    eax,0x2710
c001e8ee:	89 c2                	mov    edx,eax
c001e8f0:	c1 fa 1f             	sar    edx,0x1f
c001e8f3:	f7 f9                	idiv   ecx
c001e8f5:	83 ec 0c             	sub    esp,0xc
c001e8f8:	50                   	push   eax
c001e8f9:	e8 46 f7 fe ff       	call   c000e044 <timerHandler(unsigned int)>
c001e8fe:	83 c4 10             	add    esp,0x10
c001e901:	90                   	nop
c001e902:	83 c4 0c             	add    esp,0xc
c001e905:	c3                   	ret    
c001e906:	66 90                	xchg   ax,ax

c001e908 <PIT::open(int, int, void*)>:
c001e908:	83 ec 0c             	sub    esp,0xc
c001e90b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e90f:	8b 00                	mov    eax,DWORD PTR [eax]
c001e911:	83 c0 24             	add    eax,0x24
c001e914:	8b 00                	mov    eax,DWORD PTR [eax]
c001e916:	83 ec 08             	sub    esp,0x8
c001e919:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e91d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e921:	ff d0                	call   eax
c001e923:	83 c4 10             	add    esp,0x10
c001e926:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e92a:	83 ec 0c             	sub    esp,0xc
c001e92d:	6a 00                	push   0x0
c001e92f:	6a 01                	push   0x1
c001e931:	68 e0 e8 01 c0       	push   0xc001e8e0
c001e936:	6a 00                	push   0x0
c001e938:	50                   	push   eax
c001e939:	e8 50 dc fe ff       	call   c000c58e <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001e93e:	83 c4 20             	add    esp,0x20
c001e941:	89 c2                	mov    edx,eax
c001e943:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e947:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001e94d:	b8 00 00 00 00       	mov    eax,0x0
c001e952:	83 c4 0c             	add    esp,0xc
c001e955:	c3                   	ret    
c001e956:	66 90                	xchg   ax,ax

c001e958 <PIT::close(int, int, void*)>:
c001e958:	83 ec 0c             	sub    esp,0xc
c001e95b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e95f:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c001e969:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e96d:	6a 01                	push   0x1
c001e96f:	68 e0 e8 01 c0       	push   0xc001e8e0
c001e974:	6a 00                	push   0x0
c001e976:	50                   	push   eax
c001e977:	e8 48 dc fe ff       	call   c000c5c4 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c001e97c:	83 c4 10             	add    esp,0x10
c001e97f:	b8 00 00 00 00       	mov    eax,0x0
c001e984:	83 c4 0c             	add    esp,0xc
c001e987:	c3                   	ret    

c001e988 <PIT::PIT()>:
c001e988:	83 ec 0c             	sub    esp,0xc
c001e98b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e98f:	83 ec 08             	sub    esp,0x8
c001e992:	68 58 2e 02 c0       	push   0xc0022e58
c001e997:	50                   	push   eax
c001e998:	e8 db f5 fe ff       	call   c000df78 <Timer::Timer(char const*)>
c001e99d:	83 c4 10             	add    esp,0x10
c001e9a0:	ba 80 2e 02 c0       	mov    edx,0xc0022e80
c001e9a5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e9a9:	89 10                	mov    DWORD PTR [eax],edx
c001e9ab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e9af:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001e9b5:	0f b6 d0             	movzx  edx,al
c001e9b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e9bc:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c001e9c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e9c7:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001e9cd:	0f b6 d0             	movzx  edx,al
c001e9d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e9d4:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c001e9d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e9dd:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001e9e3:	8d 50 01             	lea    edx,[eax+0x1]
c001e9e6:	88 d1                	mov    cl,dl
c001e9e8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001e9ec:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c001e9f2:	0f b6 d0             	movzx  edx,al
c001e9f5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e9f9:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001e9fd:	83 e1 3f             	and    ecx,0x3f
c001ea00:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001ea04:	90                   	nop
c001ea05:	83 c4 0c             	add    esp,0xc
c001ea08:	c3                   	ret    
c001ea09:	66 90                	xchg   ax,ax
c001ea0b:	66 90                	xchg   ax,ax
c001ea0d:	66 90                	xchg   ax,ax
c001ea0f:	90                   	nop

c001ea10 <avxDetect>:
c001ea10:	b8 01 00 00 00       	mov    eax,0x1
c001ea15:	0f a2                	cpuid  
c001ea17:	f7 c1 00 00 00 10    	test   ecx,0x10000000
c001ea1d:	74 15                	je     c001ea34 <avxDetect.noAVX>
c001ea1f:	b8 01 00 00 00       	mov    eax,0x1
c001ea24:	0f a2                	cpuid  
c001ea26:	f7 c1 00 00 00 04    	test   ecx,0x4000000
c001ea2c:	74 06                	je     c001ea34 <avxDetect.noAVX>
c001ea2e:	b8 01 00 00 00       	mov    eax,0x1
c001ea33:	c3                   	ret    

c001ea34 <avxDetect.noAVX>:
c001ea34:	b8 00 00 00 00       	mov    eax,0x0
c001ea39:	c3                   	ret    

c001ea3a <avxSave>:
c001ea3a:	53                   	push   ebx
c001ea3b:	52                   	push   edx
c001ea3c:	31 c0                	xor    eax,eax
c001ea3e:	48                   	dec    eax
c001ea3f:	89 c2                	mov    edx,eax
c001ea41:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001ea45:	0f ae 23             	xsave  [ebx]
c001ea48:	5a                   	pop    edx
c001ea49:	5b                   	pop    ebx
c001ea4a:	c3                   	ret    

c001ea4b <avxLoad>:
c001ea4b:	53                   	push   ebx
c001ea4c:	52                   	push   edx
c001ea4d:	31 c0                	xor    eax,eax
c001ea4f:	48                   	dec    eax
c001ea50:	89 c2                	mov    edx,eax
c001ea52:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001ea56:	0f ae 2b             	xrstor [ebx]
c001ea59:	5a                   	pop    edx
c001ea5a:	5b                   	pop    ebx
c001ea5b:	c3                   	ret    

c001ea5c <avxInit>:
c001ea5c:	e8 67 03 00 00       	call   c001edc8 <sseInit>
c001ea61:	50                   	push   eax
c001ea62:	51                   	push   ecx
c001ea63:	0f 20 e0             	mov    eax,cr4
c001ea66:	0d 00 00 04 00       	or     eax,0x40000
c001ea6b:	0f 22 e0             	mov    cr4,eax
c001ea6e:	31 c9                	xor    ecx,ecx
c001ea70:	0f 01 d0             	xgetbv 
c001ea73:	0d 07 00 00 00       	or     eax,0x7
c001ea78:	0f 01 d1             	xsetbv 
c001ea7b:	59                   	pop    ecx
c001ea7c:	58                   	pop    eax
c001ea7d:	c3                   	ret    

c001ea7e <avxClose>:
c001ea7e:	c3                   	ret    

c001ea7f <wouldSheSayYes>:
c001ea7f:	c3                   	ret    
c001ea80:	49                   	dec    ecx
c001ea81:	20 6c 6f 76          	and    BYTE PTR [edi+ebp*2+0x76],ch
c001ea85:	65 20 79 6f          	and    BYTE PTR gs:[ecx+0x6f],bh
c001ea89:	75 20                	jne    c001eaab <isr0+0xb>
c001ea8b:	4e                   	dec    esi
c001ea8c:	79 61                	jns    c001eaef <isr7+0x3>
c001ea8e:	68 2e 2e 2e 00       	push   0x2e2e2e
c001ea93:	66 90                	xchg   ax,ax
c001ea95:	66 90                	xchg   ax,ax
c001ea97:	66 90                	xchg   ax,ax
c001ea99:	66 90                	xchg   ax,ax
c001ea9b:	66 90                	xchg   ax,ax
c001ea9d:	66 90                	xchg   ax,ax
c001ea9f:	90                   	nop

c001eaa0 <isr0>:
c001eaa0:	fa                   	cli    
c001eaa1:	68 00 00 00 00       	push   0x0
c001eaa6:	68 00 00 00 00       	push   0x0
c001eaab:	e9 56 01 00 00       	jmp    c001ec06 <int_common_stub>

c001eab0 <isr1>:
c001eab0:	fa                   	cli    
c001eab1:	6a 00                	push   0x0
c001eab3:	6a 01                	push   0x1
c001eab5:	e9 4c 01 00 00       	jmp    c001ec06 <int_common_stub>

c001eaba <isr2>:
c001eaba:	fa                   	cli    
c001eabb:	6a 00                	push   0x0
c001eabd:	6a 02                	push   0x2
c001eabf:	e9 42 01 00 00       	jmp    c001ec06 <int_common_stub>

c001eac4 <isr3>:
c001eac4:	fa                   	cli    
c001eac5:	6a 00                	push   0x0
c001eac7:	6a 03                	push   0x3
c001eac9:	e9 38 01 00 00       	jmp    c001ec06 <int_common_stub>

c001eace <isr4>:
c001eace:	fa                   	cli    
c001eacf:	6a 00                	push   0x0
c001ead1:	6a 04                	push   0x4
c001ead3:	e9 2e 01 00 00       	jmp    c001ec06 <int_common_stub>

c001ead8 <isr5>:
c001ead8:	fa                   	cli    
c001ead9:	6a 00                	push   0x0
c001eadb:	6a 05                	push   0x5
c001eadd:	e9 24 01 00 00       	jmp    c001ec06 <int_common_stub>

c001eae2 <isr6>:
c001eae2:	fa                   	cli    
c001eae3:	6a 00                	push   0x0
c001eae5:	6a 06                	push   0x6
c001eae7:	e9 1a 01 00 00       	jmp    c001ec06 <int_common_stub>

c001eaec <isr7>:
c001eaec:	fa                   	cli    
c001eaed:	6a 00                	push   0x0
c001eaef:	6a 07                	push   0x7
c001eaf1:	e9 10 01 00 00       	jmp    c001ec06 <int_common_stub>

c001eaf6 <isr8>:
c001eaf6:	fa                   	cli    
c001eaf7:	6a 08                	push   0x8
c001eaf9:	e9 08 01 00 00       	jmp    c001ec06 <int_common_stub>

c001eafe <isr9>:
c001eafe:	fa                   	cli    
c001eaff:	6a 00                	push   0x0
c001eb01:	6a 09                	push   0x9
c001eb03:	e9 fe 00 00 00       	jmp    c001ec06 <int_common_stub>

c001eb08 <isr10>:
c001eb08:	fa                   	cli    
c001eb09:	6a 0a                	push   0xa
c001eb0b:	e9 f6 00 00 00       	jmp    c001ec06 <int_common_stub>

c001eb10 <isr11>:
c001eb10:	fa                   	cli    
c001eb11:	6a 0b                	push   0xb
c001eb13:	e9 ee 00 00 00       	jmp    c001ec06 <int_common_stub>

c001eb18 <isr12>:
c001eb18:	fa                   	cli    
c001eb19:	6a 0c                	push   0xc
c001eb1b:	e9 e6 00 00 00       	jmp    c001ec06 <int_common_stub>

c001eb20 <isr13>:
c001eb20:	fa                   	cli    
c001eb21:	6a 0d                	push   0xd
c001eb23:	53                   	push   ebx
c001eb24:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001eb28:	81 fb f6 ec 01 c0    	cmp    ebx,0xc001ecf6
c001eb2e:	5b                   	pop    ebx
c001eb2f:	0f 84 c3 01 00 00    	je     c001ecf8 <finishSignal2>
c001eb35:	e9 cc 00 00 00       	jmp    c001ec06 <int_common_stub>

c001eb3a <isr14>:
c001eb3a:	fa                   	cli    
c001eb3b:	6a 0e                	push   0xe
c001eb3d:	e9 c4 00 00 00       	jmp    c001ec06 <int_common_stub>

c001eb42 <isr15>:
c001eb42:	fa                   	cli    
c001eb43:	6a 00                	push   0x0
c001eb45:	6a 0f                	push   0xf
c001eb47:	e9 ba 00 00 00       	jmp    c001ec06 <int_common_stub>

c001eb4c <isr16>:
c001eb4c:	fa                   	cli    
c001eb4d:	6a 00                	push   0x0
c001eb4f:	6a 10                	push   0x10
c001eb51:	e9 b0 00 00 00       	jmp    c001ec06 <int_common_stub>

c001eb56 <isr17>:
c001eb56:	fa                   	cli    
c001eb57:	6a 00                	push   0x0
c001eb59:	6a 11                	push   0x11
c001eb5b:	e9 a6 00 00 00       	jmp    c001ec06 <int_common_stub>

c001eb60 <isr18>:
c001eb60:	fa                   	cli    
c001eb61:	6a 00                	push   0x0
c001eb63:	6a 12                	push   0x12
c001eb65:	e9 9c 00 00 00       	jmp    c001ec06 <int_common_stub>

c001eb6a <irq3>:
c001eb6a:	fa                   	cli    
c001eb6b:	6a 00                	push   0x0
c001eb6d:	6a 23                	push   0x23
c001eb6f:	e9 92 00 00 00       	jmp    c001ec06 <int_common_stub>

c001eb74 <irq4>:
c001eb74:	fa                   	cli    
c001eb75:	6a 00                	push   0x0
c001eb77:	6a 24                	push   0x24
c001eb79:	e9 88 00 00 00       	jmp    c001ec06 <int_common_stub>

c001eb7e <irq5>:
c001eb7e:	fa                   	cli    
c001eb7f:	6a 00                	push   0x0
c001eb81:	6a 25                	push   0x25
c001eb83:	e9 7e 00 00 00       	jmp    c001ec06 <int_common_stub>

c001eb88 <irq6>:
c001eb88:	fa                   	cli    
c001eb89:	6a 00                	push   0x0
c001eb8b:	6a 26                	push   0x26
c001eb8d:	e9 74 00 00 00       	jmp    c001ec06 <int_common_stub>

c001eb92 <irq7>:
c001eb92:	fa                   	cli    
c001eb93:	6a 00                	push   0x0
c001eb95:	6a 27                	push   0x27
c001eb97:	e9 6a 00 00 00       	jmp    c001ec06 <int_common_stub>

c001eb9c <irq8>:
c001eb9c:	fa                   	cli    
c001eb9d:	6a 00                	push   0x0
c001eb9f:	6a 28                	push   0x28
c001eba1:	e9 60 00 00 00       	jmp    c001ec06 <int_common_stub>

c001eba6 <irq9>:
c001eba6:	fa                   	cli    
c001eba7:	6a 00                	push   0x0
c001eba9:	6a 29                	push   0x29
c001ebab:	e9 56 00 00 00       	jmp    c001ec06 <int_common_stub>

c001ebb0 <irq10>:
c001ebb0:	fa                   	cli    
c001ebb1:	6a 00                	push   0x0
c001ebb3:	6a 2a                	push   0x2a
c001ebb5:	e9 4c 00 00 00       	jmp    c001ec06 <int_common_stub>

c001ebba <irq11>:
c001ebba:	fa                   	cli    
c001ebbb:	6a 00                	push   0x0
c001ebbd:	6a 2b                	push   0x2b
c001ebbf:	e9 42 00 00 00       	jmp    c001ec06 <int_common_stub>

c001ebc4 <irq12>:
c001ebc4:	fa                   	cli    
c001ebc5:	6a 00                	push   0x0
c001ebc7:	6a 2c                	push   0x2c
c001ebc9:	e9 38 00 00 00       	jmp    c001ec06 <int_common_stub>

c001ebce <irq13>:
c001ebce:	fa                   	cli    
c001ebcf:	6a 00                	push   0x0
c001ebd1:	6a 2d                	push   0x2d
c001ebd3:	e9 2e 00 00 00       	jmp    c001ec06 <int_common_stub>

c001ebd8 <irq14>:
c001ebd8:	fa                   	cli    
c001ebd9:	6a 00                	push   0x0
c001ebdb:	6a 2e                	push   0x2e
c001ebdd:	e9 24 00 00 00       	jmp    c001ec06 <int_common_stub>

c001ebe2 <irq15>:
c001ebe2:	fa                   	cli    
c001ebe3:	6a 00                	push   0x0
c001ebe5:	6a 2f                	push   0x2f
c001ebe7:	e9 1a 00 00 00       	jmp    c001ec06 <int_common_stub>

c001ebec <irq1>:
c001ebec:	fa                   	cli    
c001ebed:	6a 00                	push   0x0
c001ebef:	6a 21                	push   0x21
c001ebf1:	eb 13                	jmp    c001ec06 <int_common_stub>

c001ebf3 <irq2>:
c001ebf3:	fa                   	cli    
c001ebf4:	6a 00                	push   0x0
c001ebf6:	6a 22                	push   0x22
c001ebf8:	eb 0c                	jmp    c001ec06 <int_common_stub>

c001ebfa <isr96>:
c001ebfa:	6a 00                	push   0x0
c001ebfc:	6a 60                	push   0x60
c001ebfe:	fb                   	sti    
c001ebff:	eb 37                	jmp    c001ec38 <syscall_common_stub>

c001ec01 <irq0>:
c001ec01:	fa                   	cli    
c001ec02:	6a 00                	push   0x0
c001ec04:	6a 20                	push   0x20

c001ec06 <int_common_stub>:
c001ec06:	60                   	pusha  
c001ec07:	1e                   	push   ds
c001ec08:	06                   	push   es
c001ec09:	0f a0                	push   fs
c001ec0b:	0f a8                	push   gs
c001ec0d:	66 b8 10 00          	mov    ax,0x10
c001ec11:	66 8e d8             	mov    ds,ax
c001ec14:	66 8e c0             	mov    es,ax
c001ec17:	66 8e e0             	mov    fs,ax
c001ec1a:	66 8e e8             	mov    gs,ax
c001ec1d:	54                   	push   esp
c001ec1e:	fc                   	cld    
c001ec1f:	e8 68 de fe ff       	call   c000ca8c <int_handler>
c001ec24:	81 c4 04 00 00 00    	add    esp,0x4
c001ec2a:	0f a9                	pop    gs
c001ec2c:	0f a1                	pop    fs
c001ec2e:	07                   	pop    es
c001ec2f:	1f                   	pop    ds
c001ec30:	61                   	popa   
c001ec31:	81 c4 08 00 00 00    	add    esp,0x8
c001ec37:	cf                   	iret   

c001ec38 <syscall_common_stub>:
c001ec38:	60                   	pusha  
c001ec39:	1e                   	push   ds
c001ec3a:	06                   	push   es
c001ec3b:	0f a0                	push   fs
c001ec3d:	0f a8                	push   gs
c001ec3f:	66 b8 10 00          	mov    ax,0x10
c001ec43:	66 8e d8             	mov    ds,ax
c001ec46:	66 8e c0             	mov    es,ax
c001ec49:	66 8e e0             	mov    fs,ax
c001ec4c:	66 8e e8             	mov    gs,ax
c001ec4f:	54                   	push   esp
c001ec50:	fc                   	cld    
c001ec51:	e8 36 de fe ff       	call   c000ca8c <int_handler>
c001ec56:	81 c4 04 00 00 00    	add    esp,0x4
c001ec5c:	0f a9                	pop    gs
c001ec5e:	0f a1                	pop    fs
c001ec60:	07                   	pop    es
c001ec61:	1f                   	pop    ds
c001ec62:	e8 9b 2b ff ff       	call   c0011802 <KiCheckSignalZ>
c001ec67:	3d 00 00 00 00       	cmp    eax,0x0
c001ec6c:	0f 84 c0 00 00 00    	je     c001ed32 <skipSignals>
c001ec72:	a3 08 20 00 c2       	mov    ds:0xc2002008,eax
c001ec77:	61                   	popa   
c001ec78:	53                   	push   ebx
c001ec79:	8b 1d 08 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002008
c001ec7f:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c001ec82:	5b                   	pop    ebx
c001ec83:	a1 08 20 00 c2       	mov    eax,ds:0xc2002008
c001ec88:	89 58 10             	mov    DWORD PTR [eax+0x10],ebx
c001ec8b:	89 48 14             	mov    DWORD PTR [eax+0x14],ecx
c001ec8e:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001ec91:	89 70 1c             	mov    DWORD PTR [eax+0x1c],esi
c001ec94:	89 78 20             	mov    DWORD PTR [eax+0x20],edi
c001ec97:	89 68 24             	mov    DWORD PTR [eax+0x24],ebp
c001ec9a:	81 c4 08 00 00 00    	add    esp,0x8
c001eca0:	5e                   	pop    esi
c001eca1:	5b                   	pop    ebx
c001eca2:	59                   	pop    ecx
c001eca3:	5a                   	pop    edx
c001eca4:	89 70 2c             	mov    DWORD PTR [eax+0x2c],esi
c001eca7:	89 48 30             	mov    DWORD PTR [eax+0x30],ecx
c001ecaa:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c001ecad:	52                   	push   edx
c001ecae:	51                   	push   ecx
c001ecaf:	53                   	push   ebx
c001ecb0:	56                   	push   esi
c001ecb1:	81 ec 08 00 00 00    	sub    esp,0x8
c001ecb7:	8b 70 1c             	mov    esi,DWORD PTR [eax+0x1c]
c001ecba:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c001ecbd:	8b 48 14             	mov    ecx,DWORD PTR [eax+0x14]
c001ecc0:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001ecc3:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001ecc6:	60                   	pusha  
c001ecc7:	8b 35 08 20 00 c2    	mov    esi,DWORD PTR ds:0xc2002008
c001eccd:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c001ecd0:	89 e3                	mov    ebx,esp
c001ecd2:	8b 63 34             	mov    esp,DWORD PTR [ebx+0x34]
c001ecd5:	52                   	push   edx
c001ecd6:	68 f6 ec 01 c0       	push   0xc001ecf6
c001ecdb:	89 63 34             	mov    DWORD PTR [ebx+0x34],esp
c001ecde:	89 dc                	mov    esp,ebx
c001ece0:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c001ece3:	68 23 00 00 00       	push   0x23
c001ece8:	51                   	push   ecx
c001ece9:	68 02 02 00 00       	push   0x202
c001ecee:	68 1b 00 00 00       	push   0x1b
c001ecf3:	ff 36                	push   DWORD PTR [esi]
c001ecf5:	cf                   	iret   

c001ecf6 <finishSignal>:
c001ecf6:	cd 0f                	int    0xf

c001ecf8 <finishSignal2>:
c001ecf8:	ff 35 08 20 00 c2    	push   DWORD PTR ds:0xc2002008
c001ecfe:	e8 7c 2b ff ff       	call   c001187f <KiFinishSignalZ>
c001ed03:	8b 2d 08 20 00 c2    	mov    ebp,DWORD PTR ds:0xc2002008
c001ed09:	68 23 00 00 00       	push   0x23
c001ed0e:	ff 75 28             	push   DWORD PTR [ebp+0x28]
c001ed11:	ff 75 30             	push   DWORD PTR [ebp+0x30]
c001ed14:	68 1b 00 00 00       	push   0x1b
c001ed19:	ff 75 2c             	push   DWORD PTR [ebp+0x2c]
c001ed1c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001ed1f:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c001ed22:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c001ed25:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c001ed28:	8b 75 1c             	mov    esi,DWORD PTR [ebp+0x1c]
c001ed2b:	8b 7d 20             	mov    edi,DWORD PTR [ebp+0x20]
c001ed2e:	8b 6d 24             	mov    ebp,DWORD PTR [ebp+0x24]
c001ed31:	cf                   	iret   

c001ed32 <skipSignals>:
c001ed32:	61                   	popa   
c001ed33:	81 c4 08 00 00 00    	add    esp,0x8
c001ed39:	cf                   	iret   
c001ed3a:	90                   	nop
c001ed3b:	90                   	nop

c001ed3c <irq16>:
c001ed3c:	fa                   	cli    
c001ed3d:	6a 00                	push   0x0
c001ed3f:	6a 30                	push   0x30
c001ed41:	e9 c0 fe ff ff       	jmp    c001ec06 <int_common_stub>

c001ed46 <irq17>:
c001ed46:	fa                   	cli    
c001ed47:	6a 00                	push   0x0
c001ed49:	6a 31                	push   0x31
c001ed4b:	e9 b6 fe ff ff       	jmp    c001ec06 <int_common_stub>

c001ed50 <irq18>:
c001ed50:	fa                   	cli    
c001ed51:	6a 00                	push   0x0
c001ed53:	6a 32                	push   0x32
c001ed55:	e9 ac fe ff ff       	jmp    c001ec06 <int_common_stub>

c001ed5a <irq19>:
c001ed5a:	fa                   	cli    
c001ed5b:	6a 00                	push   0x0
c001ed5d:	6a 33                	push   0x33
c001ed5f:	e9 a2 fe ff ff       	jmp    c001ec06 <int_common_stub>

c001ed64 <irq20>:
c001ed64:	fa                   	cli    
c001ed65:	6a 00                	push   0x0
c001ed67:	6a 34                	push   0x34
c001ed69:	e9 98 fe ff ff       	jmp    c001ec06 <int_common_stub>

c001ed6e <irq21>:
c001ed6e:	fa                   	cli    
c001ed6f:	6a 00                	push   0x0
c001ed71:	6a 35                	push   0x35
c001ed73:	e9 8e fe ff ff       	jmp    c001ec06 <int_common_stub>

c001ed78 <irq22>:
c001ed78:	fa                   	cli    
c001ed79:	6a 00                	push   0x0
c001ed7b:	6a 36                	push   0x36
c001ed7d:	e9 84 fe ff ff       	jmp    c001ec06 <int_common_stub>

c001ed82 <irq23>:
c001ed82:	fa                   	cli    
c001ed83:	6a 00                	push   0x0
c001ed85:	6a 37                	push   0x37
c001ed87:	e9 7a fe ff ff       	jmp    c001ec06 <int_common_stub>
c001ed8c:	66 90                	xchg   ax,ax
c001ed8e:	66 90                	xchg   ax,ax

c001ed90 <i386GetRDRAND>:
c001ed90:	b9 64 00 00 00       	mov    ecx,0x64

c001ed95 <retry>:
c001ed95:	0f c7 f0             	rdrand eax
c001ed98:	72 05                	jb     c001ed9f <retry.done>
c001ed9a:	e2 f9                	loop   c001ed95 <retry>

c001ed9c <retry.fail>:
c001ed9c:	31 c0                	xor    eax,eax
c001ed9e:	c3                   	ret    

c001ed9f <retry.done>:
c001ed9f:	c3                   	ret    

c001eda0 <absolutelyNoChanceInHell>:
c001eda0:	b8 01 00 00 00       	mov    eax,0x1
c001eda5:	0f a2                	cpuid  
c001eda7:	f7 c2 00 00 00 02    	test   edx,0x2000000
c001edad:	74 06                	je     c001edb5 <sseDetect.noSSE>
c001edaf:	b8 01 00 00 00       	mov    eax,0x1
c001edb4:	c3                   	ret    

c001edb5 <sseDetect.noSSE>:
c001edb5:	31 c0                	xor    eax,eax
c001edb7:	c3                   	ret    

c001edb8 <sseSave>:
c001edb8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001edbc:	0f ae 00             	fxsave [eax]
c001edbf:	c3                   	ret    

c001edc0 <sseLoad>:
c001edc0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001edc4:	0f ae 08             	fxrstor [eax]
c001edc7:	c3                   	ret    

c001edc8 <sseInit>:
c001edc8:	e8 42 00 00 00       	call   c001ee0f <x87Init>
c001edcd:	0f 20 e0             	mov    eax,cr4
c001edd0:	66 0d 00 06          	or     ax,0x600
c001edd4:	0f 22 e0             	mov    cr4,eax
c001edd7:	c3                   	ret    

c001edd8 <sseClose>:
c001edd8:	c3                   	ret    
c001edd9:	66 90                	xchg   ax,ax
c001eddb:	66 90                	xchg   ax,ax
c001eddd:	66 90                	xchg   ax,ax
c001eddf:	90                   	nop

c001ede0 <value_37F>:
c001ede0:	7f 03                	jg     c001ede5 <value_37A+0x1>

c001ede2 <value_37E>:
c001ede2:	7e 03                	jle    c001ede7 <x87Detect+0x1>

c001ede4 <value_37A>:
c001ede4:	7a 03                	jp     c001ede9 <x87Detect+0x3>

c001ede6 <x87Detect>:
c001ede6:	b8 01 00 00 00       	mov    eax,0x1
c001edeb:	0f a2                	cpuid  
c001eded:	f7 c2 01 00 00 00    	test   edx,0x1
c001edf3:	74 06                	je     c001edfb <x87Detect.nox87>
c001edf5:	b8 01 00 00 00       	mov    eax,0x1
c001edfa:	c3                   	ret    

c001edfb <x87Detect.nox87>:
c001edfb:	b8 00 00 00 00       	mov    eax,0x0
c001ee00:	c3                   	ret    

c001ee01 <x87Save>:
c001ee01:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ee05:	dd 30                	fnsave [eax]
c001ee07:	c3                   	ret    

c001ee08 <x87Load>:
c001ee08:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ee0c:	dd 20                	frstor [eax]
c001ee0e:	c3                   	ret    

c001ee0f <x87Init>:
c001ee0f:	0f 20 c0             	mov    eax,cr0
c001ee12:	66 25 fb ff          	and    ax,0xfffb
c001ee16:	66 0d 22 00          	or     ax,0x22
c001ee1a:	0f 22 c0             	mov    cr0,eax
c001ee1d:	db e3                	fninit 
c001ee1f:	0f 06                	clts   
c001ee21:	d9 2d e4 ed 01 c0    	fldcw  WORD PTR ds:0xc001ede4
c001ee27:	c3                   	ret    

c001ee28 <x87Close>:
c001ee28:	c3                   	ret    
c001ee29:	66 90                	xchg   ax,ax
c001ee2b:	90                   	nop

c001ee2c <__do_global_ctors_aux>:
c001ee2c:	a1 e0 fd 01 c0       	mov    eax,ds:0xc001fde0
c001ee31:	83 f8 ff             	cmp    eax,0xffffffff
c001ee34:	74 1a                	je     c001ee50 <__do_global_ctors_aux+0x24>
c001ee36:	55                   	push   ebp
c001ee37:	89 e5                	mov    ebp,esp
c001ee39:	53                   	push   ebx
c001ee3a:	52                   	push   edx
c001ee3b:	bb e0 fd 01 c0       	mov    ebx,0xc001fde0
c001ee40:	ff d0                	call   eax
c001ee42:	83 eb 04             	sub    ebx,0x4
c001ee45:	8b 03                	mov    eax,DWORD PTR [ebx]
c001ee47:	83 f8 ff             	cmp    eax,0xffffffff
c001ee4a:	75 f4                	jne    c001ee40 <__do_global_ctors_aux+0x14>
c001ee4c:	58                   	pop    eax
c001ee4d:	5b                   	pop    ebx
c001ee4e:	5d                   	pop    ebp
c001ee4f:	c3                   	ret    
c001ee50:	c3                   	ret    
c001ee51:	66 90                	xchg   ax,ax
c001ee53:	90                   	nop

c001ee54 <__divdi3>:
c001ee54:	55                   	push   ebp
c001ee55:	57                   	push   edi
c001ee56:	56                   	push   esi
c001ee57:	53                   	push   ebx
c001ee58:	83 ec 1c             	sub    esp,0x1c
c001ee5b:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001ee5f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001ee63:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001ee66:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001ee6a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ee6e:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001ee72:	85 db                	test   ebx,ebx
c001ee74:	0f 88 8e 00 00 00    	js     c001ef08 <__divdi3+0xb4>
c001ee7a:	89 dd                	mov    ebp,ebx
c001ee7c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001ee84:	89 d3                	mov    ebx,edx
c001ee86:	85 d2                	test   edx,edx
c001ee88:	79 0d                	jns    c001ee97 <__divdi3+0x43>
c001ee8a:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c001ee8e:	f7 d8                	neg    eax
c001ee90:	83 d2 00             	adc    edx,0x0
c001ee93:	f7 da                	neg    edx
c001ee95:	89 d3                	mov    ebx,edx
c001ee97:	89 c7                	mov    edi,eax
c001ee99:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001ee9c:	85 db                	test   ebx,ebx
c001ee9e:	75 48                	jne    c001eee8 <__divdi3+0x94>
c001eea0:	39 ef                	cmp    edi,ebp
c001eea2:	76 24                	jbe    c001eec8 <__divdi3+0x74>
c001eea4:	89 ea                	mov    edx,ebp
c001eea6:	f7 f7                	div    edi
c001eea8:	89 c1                	mov    ecx,eax
c001eeaa:	31 f6                	xor    esi,esi
c001eeac:	89 c8                	mov    eax,ecx
c001eeae:	89 f2                	mov    edx,esi
c001eeb0:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001eeb4:	85 c9                	test   ecx,ecx
c001eeb6:	74 07                	je     c001eebf <__divdi3+0x6b>
c001eeb8:	f7 d8                	neg    eax
c001eeba:	83 d2 00             	adc    edx,0x0
c001eebd:	f7 da                	neg    edx
c001eebf:	83 c4 1c             	add    esp,0x1c
c001eec2:	5b                   	pop    ebx
c001eec3:	5e                   	pop    esi
c001eec4:	5f                   	pop    edi
c001eec5:	5d                   	pop    ebp
c001eec6:	c3                   	ret    
c001eec7:	90                   	nop
c001eec8:	85 ff                	test   edi,edi
c001eeca:	75 0b                	jne    c001eed7 <__divdi3+0x83>
c001eecc:	b8 01 00 00 00       	mov    eax,0x1
c001eed1:	31 d2                	xor    edx,edx
c001eed3:	f7 f3                	div    ebx
c001eed5:	89 c7                	mov    edi,eax
c001eed7:	31 d2                	xor    edx,edx
c001eed9:	89 e8                	mov    eax,ebp
c001eedb:	f7 f7                	div    edi
c001eedd:	89 c6                	mov    esi,eax
c001eedf:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001eee2:	f7 f7                	div    edi
c001eee4:	89 c1                	mov    ecx,eax
c001eee6:	eb c4                	jmp    c001eeac <__divdi3+0x58>
c001eee8:	39 eb                	cmp    ebx,ebp
c001eeea:	77 3c                	ja     c001ef28 <__divdi3+0xd4>
c001eeec:	0f bd f3             	bsr    esi,ebx
c001eeef:	83 f6 1f             	xor    esi,0x1f
c001eef2:	75 40                	jne    c001ef34 <__divdi3+0xe0>
c001eef4:	39 eb                	cmp    ebx,ebp
c001eef6:	72 09                	jb     c001ef01 <__divdi3+0xad>
c001eef8:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c001eefb:	0f 87 97 00 00 00    	ja     c001ef98 <__divdi3+0x144>
c001ef01:	b9 01 00 00 00       	mov    ecx,0x1
c001ef06:	eb a4                	jmp    c001eeac <__divdi3+0x58>
c001ef08:	f7 d9                	neg    ecx
c001ef0a:	83 d3 00             	adc    ebx,0x0
c001ef0d:	f7 db                	neg    ebx
c001ef0f:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001ef12:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001ef16:	89 dd                	mov    ebp,ebx
c001ef18:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c001ef20:	e9 5f ff ff ff       	jmp    c001ee84 <__divdi3+0x30>
c001ef25:	8d 76 00             	lea    esi,[esi+0x0]
c001ef28:	31 f6                	xor    esi,esi
c001ef2a:	31 c9                	xor    ecx,ecx
c001ef2c:	e9 7b ff ff ff       	jmp    c001eeac <__divdi3+0x58>
c001ef31:	8d 76 00             	lea    esi,[esi+0x0]
c001ef34:	b8 20 00 00 00       	mov    eax,0x20
c001ef39:	29 f0                	sub    eax,esi
c001ef3b:	89 f1                	mov    ecx,esi
c001ef3d:	d3 e3                	shl    ebx,cl
c001ef3f:	89 fa                	mov    edx,edi
c001ef41:	88 c1                	mov    cl,al
c001ef43:	d3 ea                	shr    edx,cl
c001ef45:	09 da                	or     edx,ebx
c001ef47:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001ef4b:	89 f1                	mov    ecx,esi
c001ef4d:	d3 e7                	shl    edi,cl
c001ef4f:	89 eb                	mov    ebx,ebp
c001ef51:	88 c1                	mov    cl,al
c001ef53:	d3 eb                	shr    ebx,cl
c001ef55:	89 f1                	mov    ecx,esi
c001ef57:	d3 e5                	shl    ebp,cl
c001ef59:	8b 14 24             	mov    edx,DWORD PTR [esp]
c001ef5c:	88 c1                	mov    cl,al
c001ef5e:	d3 ea                	shr    edx,cl
c001ef60:	09 d5                	or     ebp,edx
c001ef62:	89 e8                	mov    eax,ebp
c001ef64:	89 da                	mov    edx,ebx
c001ef66:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c001ef6a:	89 d3                	mov    ebx,edx
c001ef6c:	89 c5                	mov    ebp,eax
c001ef6e:	f7 e7                	mul    edi
c001ef70:	39 d3                	cmp    ebx,edx
c001ef72:	72 18                	jb     c001ef8c <__divdi3+0x138>
c001ef74:	74 0a                	je     c001ef80 <__divdi3+0x12c>
c001ef76:	89 e9                	mov    ecx,ebp
c001ef78:	31 f6                	xor    esi,esi
c001ef7a:	e9 2d ff ff ff       	jmp    c001eeac <__divdi3+0x58>
c001ef7f:	90                   	nop
c001ef80:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c001ef83:	89 f1                	mov    ecx,esi
c001ef85:	d3 e7                	shl    edi,cl
c001ef87:	39 c7                	cmp    edi,eax
c001ef89:	73 eb                	jae    c001ef76 <__divdi3+0x122>
c001ef8b:	90                   	nop
c001ef8c:	8d 4d ff             	lea    ecx,[ebp-0x1]
c001ef8f:	31 f6                	xor    esi,esi
c001ef91:	e9 16 ff ff ff       	jmp    c001eeac <__divdi3+0x58>
c001ef96:	66 90                	xchg   ax,ax
c001ef98:	31 c9                	xor    ecx,ecx
c001ef9a:	e9 0d ff ff ff       	jmp    c001eeac <__divdi3+0x58>
c001ef9f:	90                   	nop

c001efa0 <__moddi3>:
c001efa0:	55                   	push   ebp
c001efa1:	57                   	push   edi
c001efa2:	56                   	push   esi
c001efa3:	53                   	push   ebx
c001efa4:	83 ec 2c             	sub    esp,0x2c
c001efa7:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001efab:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c001efaf:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001efb3:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c001efb7:	85 db                	test   ebx,ebx
c001efb9:	0f 88 85 00 00 00    	js     c001f044 <__moddi3+0xa4>
c001efbf:	89 de                	mov    esi,ebx
c001efc1:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001efc9:	89 d7                	mov    edi,edx
c001efcb:	85 d2                	test   edx,edx
c001efcd:	79 09                	jns    c001efd8 <__moddi3+0x38>
c001efcf:	f7 d8                	neg    eax
c001efd1:	83 d2 00             	adc    edx,0x0
c001efd4:	f7 da                	neg    edx
c001efd6:	89 d7                	mov    edi,edx
c001efd8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001efdc:	89 cd                	mov    ebp,ecx
c001efde:	85 ff                	test   edi,edi
c001efe0:	75 52                	jne    c001f034 <__moddi3+0x94>
c001efe2:	89 c3                	mov    ebx,eax
c001efe4:	39 f0                	cmp    eax,esi
c001efe6:	76 24                	jbe    c001f00c <__moddi3+0x6c>
c001efe8:	89 c8                	mov    eax,ecx
c001efea:	89 f2                	mov    edx,esi
c001efec:	f7 f3                	div    ebx
c001efee:	89 d6                	mov    esi,edx
c001eff0:	89 f0                	mov    eax,esi
c001eff2:	31 d2                	xor    edx,edx
c001eff4:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001eff8:	85 c9                	test   ecx,ecx
c001effa:	74 07                	je     c001f003 <__moddi3+0x63>
c001effc:	f7 d8                	neg    eax
c001effe:	83 d2 00             	adc    edx,0x0
c001f001:	f7 da                	neg    edx
c001f003:	83 c4 2c             	add    esp,0x2c
c001f006:	5b                   	pop    ebx
c001f007:	5e                   	pop    esi
c001f008:	5f                   	pop    edi
c001f009:	5d                   	pop    ebp
c001f00a:	c3                   	ret    
c001f00b:	90                   	nop
c001f00c:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001f010:	85 db                	test   ebx,ebx
c001f012:	75 0d                	jne    c001f021 <__moddi3+0x81>
c001f014:	b8 01 00 00 00       	mov    eax,0x1
c001f019:	31 d2                	xor    edx,edx
c001f01b:	f7 f7                	div    edi
c001f01d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f021:	89 f0                	mov    eax,esi
c001f023:	31 d2                	xor    edx,edx
c001f025:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001f029:	f7 f7                	div    edi
c001f02b:	89 e8                	mov    eax,ebp
c001f02d:	f7 f7                	div    edi
c001f02f:	89 d6                	mov    esi,edx
c001f031:	eb bd                	jmp    c001eff0 <__moddi3+0x50>
c001f033:	90                   	nop
c001f034:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001f038:	39 f7                	cmp    edi,esi
c001f03a:	76 20                	jbe    c001f05c <__moddi3+0xbc>
c001f03c:	89 c8                	mov    eax,ecx
c001f03e:	89 f2                	mov    edx,esi
c001f040:	eb b2                	jmp    c001eff4 <__moddi3+0x54>
c001f042:	66 90                	xchg   ax,ax
c001f044:	f7 d9                	neg    ecx
c001f046:	83 d3 00             	adc    ebx,0x0
c001f049:	f7 db                	neg    ebx
c001f04b:	89 de                	mov    esi,ebx
c001f04d:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c001f055:	e9 6f ff ff ff       	jmp    c001efc9 <__moddi3+0x29>
c001f05a:	66 90                	xchg   ax,ax
c001f05c:	0f bd c7             	bsr    eax,edi
c001f05f:	83 f0 1f             	xor    eax,0x1f
c001f062:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001f066:	75 24                	jne    c001f08c <__moddi3+0xec>
c001f068:	39 f7                	cmp    edi,esi
c001f06a:	72 06                	jb     c001f072 <__moddi3+0xd2>
c001f06c:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c001f070:	77 0c                	ja     c001f07e <__moddi3+0xde>
c001f072:	89 e9                	mov    ecx,ebp
c001f074:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c001f078:	19 fe                	sbb    esi,edi
c001f07a:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001f07e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001f082:	89 f2                	mov    edx,esi
c001f084:	e9 6b ff ff ff       	jmp    c001eff4 <__moddi3+0x54>
c001f089:	8d 76 00             	lea    esi,[esi+0x0]
c001f08c:	b8 20 00 00 00       	mov    eax,0x20
c001f091:	89 c2                	mov    edx,eax
c001f093:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001f097:	29 da                	sub    edx,ebx
c001f099:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001f09d:	88 d9                	mov    cl,bl
c001f09f:	d3 e7                	shl    edi,cl
c001f0a1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f0a5:	88 d1                	mov    cl,dl
c001f0a7:	d3 e8                	shr    eax,cl
c001f0a9:	09 c7                	or     edi,eax
c001f0ab:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c001f0af:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001f0b3:	89 d8                	mov    eax,ebx
c001f0b5:	88 d9                	mov    cl,bl
c001f0b7:	d3 e7                	shl    edi,cl
c001f0b9:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001f0bd:	89 f3                	mov    ebx,esi
c001f0bf:	88 d1                	mov    cl,dl
c001f0c1:	d3 eb                	shr    ebx,cl
c001f0c3:	89 c7                	mov    edi,eax
c001f0c5:	88 c1                	mov    cl,al
c001f0c7:	d3 e6                	shl    esi,cl
c001f0c9:	89 e8                	mov    eax,ebp
c001f0cb:	88 d1                	mov    cl,dl
c001f0cd:	d3 e8                	shr    eax,cl
c001f0cf:	09 f0                	or     eax,esi
c001f0d1:	89 f9                	mov    ecx,edi
c001f0d3:	d3 e5                	shl    ebp,cl
c001f0d5:	89 da                	mov    edx,ebx
c001f0d7:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c001f0db:	89 d3                	mov    ebx,edx
c001f0dd:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001f0e1:	89 c6                	mov    esi,eax
c001f0e3:	89 d1                	mov    ecx,edx
c001f0e5:	39 d3                	cmp    ebx,edx
c001f0e7:	72 27                	jb     c001f110 <__moddi3+0x170>
c001f0e9:	74 21                	je     c001f10c <__moddi3+0x16c>
c001f0eb:	29 f5                	sub    ebp,esi
c001f0ed:	19 cb                	sbb    ebx,ecx
c001f0ef:	89 de                	mov    esi,ebx
c001f0f1:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c001f0f5:	d3 e6                	shl    esi,cl
c001f0f7:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001f0fb:	89 f9                	mov    ecx,edi
c001f0fd:	d3 ed                	shr    ebp,cl
c001f0ff:	09 ee                	or     esi,ebp
c001f101:	89 f0                	mov    eax,esi
c001f103:	d3 eb                	shr    ebx,cl
c001f105:	89 da                	mov    edx,ebx
c001f107:	e9 e8 fe ff ff       	jmp    c001eff4 <__moddi3+0x54>
c001f10c:	39 c5                	cmp    ebp,eax
c001f10e:	73 db                	jae    c001f0eb <__moddi3+0x14b>
c001f110:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001f114:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c001f118:	89 d1                	mov    ecx,edx
c001f11a:	89 c6                	mov    esi,eax
c001f11c:	eb cd                	jmp    c001f0eb <__moddi3+0x14b>
c001f11e:	66 90                	xchg   ax,ax

c001f120 <__udivdi3>:
c001f120:	55                   	push   ebp
c001f121:	57                   	push   edi
c001f122:	56                   	push   esi
c001f123:	53                   	push   ebx
c001f124:	83 ec 1c             	sub    esp,0x1c
c001f127:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001f12b:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001f12f:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001f133:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001f137:	85 d2                	test   edx,edx
c001f139:	75 41                	jne    c001f17c <__udivdi3+0x5c>
c001f13b:	39 f7                	cmp    edi,esi
c001f13d:	76 15                	jbe    c001f154 <__udivdi3+0x34>
c001f13f:	89 e8                	mov    eax,ebp
c001f141:	89 f2                	mov    edx,esi
c001f143:	f7 f7                	div    edi
c001f145:	31 db                	xor    ebx,ebx
c001f147:	89 da                	mov    edx,ebx
c001f149:	83 c4 1c             	add    esp,0x1c
c001f14c:	5b                   	pop    ebx
c001f14d:	5e                   	pop    esi
c001f14e:	5f                   	pop    edi
c001f14f:	5d                   	pop    ebp
c001f150:	c3                   	ret    
c001f151:	8d 76 00             	lea    esi,[esi+0x0]
c001f154:	89 f9                	mov    ecx,edi
c001f156:	85 ff                	test   edi,edi
c001f158:	75 0b                	jne    c001f165 <__udivdi3+0x45>
c001f15a:	b8 01 00 00 00       	mov    eax,0x1
c001f15f:	31 d2                	xor    edx,edx
c001f161:	f7 f7                	div    edi
c001f163:	89 c1                	mov    ecx,eax
c001f165:	31 d2                	xor    edx,edx
c001f167:	89 f0                	mov    eax,esi
c001f169:	f7 f1                	div    ecx
c001f16b:	89 c3                	mov    ebx,eax
c001f16d:	89 e8                	mov    eax,ebp
c001f16f:	f7 f1                	div    ecx
c001f171:	89 da                	mov    edx,ebx
c001f173:	83 c4 1c             	add    esp,0x1c
c001f176:	5b                   	pop    ebx
c001f177:	5e                   	pop    esi
c001f178:	5f                   	pop    edi
c001f179:	5d                   	pop    ebp
c001f17a:	c3                   	ret    
c001f17b:	90                   	nop
c001f17c:	39 f2                	cmp    edx,esi
c001f17e:	77 1c                	ja     c001f19c <__udivdi3+0x7c>
c001f180:	0f bd da             	bsr    ebx,edx
c001f183:	83 f3 1f             	xor    ebx,0x1f
c001f186:	75 24                	jne    c001f1ac <__udivdi3+0x8c>
c001f188:	39 f2                	cmp    edx,esi
c001f18a:	72 08                	jb     c001f194 <__udivdi3+0x74>
c001f18c:	39 ef                	cmp    edi,ebp
c001f18e:	0f 87 84 00 00 00    	ja     c001f218 <__udivdi3+0xf8>
c001f194:	b8 01 00 00 00       	mov    eax,0x1
c001f199:	eb ac                	jmp    c001f147 <__udivdi3+0x27>
c001f19b:	90                   	nop
c001f19c:	31 db                	xor    ebx,ebx
c001f19e:	31 c0                	xor    eax,eax
c001f1a0:	89 da                	mov    edx,ebx
c001f1a2:	83 c4 1c             	add    esp,0x1c
c001f1a5:	5b                   	pop    ebx
c001f1a6:	5e                   	pop    esi
c001f1a7:	5f                   	pop    edi
c001f1a8:	5d                   	pop    ebp
c001f1a9:	c3                   	ret    
c001f1aa:	66 90                	xchg   ax,ax
c001f1ac:	b8 20 00 00 00       	mov    eax,0x20
c001f1b1:	29 d8                	sub    eax,ebx
c001f1b3:	88 d9                	mov    cl,bl
c001f1b5:	d3 e2                	shl    edx,cl
c001f1b7:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001f1bb:	89 fa                	mov    edx,edi
c001f1bd:	88 c1                	mov    cl,al
c001f1bf:	d3 ea                	shr    edx,cl
c001f1c1:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001f1c5:	09 d1                	or     ecx,edx
c001f1c7:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001f1cb:	88 d9                	mov    cl,bl
c001f1cd:	d3 e7                	shl    edi,cl
c001f1cf:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001f1d3:	89 f7                	mov    edi,esi
c001f1d5:	88 c1                	mov    cl,al
c001f1d7:	d3 ef                	shr    edi,cl
c001f1d9:	88 d9                	mov    cl,bl
c001f1db:	d3 e6                	shl    esi,cl
c001f1dd:	89 ea                	mov    edx,ebp
c001f1df:	88 c1                	mov    cl,al
c001f1e1:	d3 ea                	shr    edx,cl
c001f1e3:	09 d6                	or     esi,edx
c001f1e5:	89 f0                	mov    eax,esi
c001f1e7:	89 fa                	mov    edx,edi
c001f1e9:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001f1ed:	89 d7                	mov    edi,edx
c001f1ef:	89 c6                	mov    esi,eax
c001f1f1:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001f1f5:	39 d7                	cmp    edi,edx
c001f1f7:	72 13                	jb     c001f20c <__udivdi3+0xec>
c001f1f9:	74 09                	je     c001f204 <__udivdi3+0xe4>
c001f1fb:	89 f0                	mov    eax,esi
c001f1fd:	31 db                	xor    ebx,ebx
c001f1ff:	e9 43 ff ff ff       	jmp    c001f147 <__udivdi3+0x27>
c001f204:	88 d9                	mov    cl,bl
c001f206:	d3 e5                	shl    ebp,cl
c001f208:	39 c5                	cmp    ebp,eax
c001f20a:	73 ef                	jae    c001f1fb <__udivdi3+0xdb>
c001f20c:	8d 46 ff             	lea    eax,[esi-0x1]
c001f20f:	31 db                	xor    ebx,ebx
c001f211:	e9 31 ff ff ff       	jmp    c001f147 <__udivdi3+0x27>
c001f216:	66 90                	xchg   ax,ax
c001f218:	31 c0                	xor    eax,eax
c001f21a:	e9 28 ff ff ff       	jmp    c001f147 <__udivdi3+0x27>
c001f21f:	90                   	nop

c001f220 <__umoddi3>:
c001f220:	55                   	push   ebp
c001f221:	57                   	push   edi
c001f222:	56                   	push   esi
c001f223:	53                   	push   ebx
c001f224:	83 ec 1c             	sub    esp,0x1c
c001f227:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001f22b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001f22f:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001f233:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001f237:	89 da                	mov    edx,ebx
c001f239:	85 c0                	test   eax,eax
c001f23b:	75 37                	jne    c001f274 <__umoddi3+0x54>
c001f23d:	39 df                	cmp    edi,ebx
c001f23f:	76 13                	jbe    c001f254 <__umoddi3+0x34>
c001f241:	89 f0                	mov    eax,esi
c001f243:	f7 f7                	div    edi
c001f245:	89 d0                	mov    eax,edx
c001f247:	31 d2                	xor    edx,edx
c001f249:	83 c4 1c             	add    esp,0x1c
c001f24c:	5b                   	pop    ebx
c001f24d:	5e                   	pop    esi
c001f24e:	5f                   	pop    edi
c001f24f:	5d                   	pop    ebp
c001f250:	c3                   	ret    
c001f251:	8d 76 00             	lea    esi,[esi+0x0]
c001f254:	89 fd                	mov    ebp,edi
c001f256:	85 ff                	test   edi,edi
c001f258:	75 0b                	jne    c001f265 <__umoddi3+0x45>
c001f25a:	b8 01 00 00 00       	mov    eax,0x1
c001f25f:	31 d2                	xor    edx,edx
c001f261:	f7 f7                	div    edi
c001f263:	89 c5                	mov    ebp,eax
c001f265:	89 d8                	mov    eax,ebx
c001f267:	31 d2                	xor    edx,edx
c001f269:	f7 f5                	div    ebp
c001f26b:	89 f0                	mov    eax,esi
c001f26d:	f7 f5                	div    ebp
c001f26f:	89 d0                	mov    eax,edx
c001f271:	eb d4                	jmp    c001f247 <__umoddi3+0x27>
c001f273:	90                   	nop
c001f274:	89 f1                	mov    ecx,esi
c001f276:	39 d8                	cmp    eax,ebx
c001f278:	76 0a                	jbe    c001f284 <__umoddi3+0x64>
c001f27a:	89 f0                	mov    eax,esi
c001f27c:	83 c4 1c             	add    esp,0x1c
c001f27f:	5b                   	pop    ebx
c001f280:	5e                   	pop    esi
c001f281:	5f                   	pop    edi
c001f282:	5d                   	pop    ebp
c001f283:	c3                   	ret    
c001f284:	0f bd e8             	bsr    ebp,eax
c001f287:	83 f5 1f             	xor    ebp,0x1f
c001f28a:	75 1c                	jne    c001f2a8 <__umoddi3+0x88>
c001f28c:	39 d8                	cmp    eax,ebx
c001f28e:	72 04                	jb     c001f294 <__umoddi3+0x74>
c001f290:	39 f7                	cmp    edi,esi
c001f292:	77 08                	ja     c001f29c <__umoddi3+0x7c>
c001f294:	89 da                	mov    edx,ebx
c001f296:	29 fe                	sub    esi,edi
c001f298:	19 c2                	sbb    edx,eax
c001f29a:	89 f1                	mov    ecx,esi
c001f29c:	89 c8                	mov    eax,ecx
c001f29e:	83 c4 1c             	add    esp,0x1c
c001f2a1:	5b                   	pop    ebx
c001f2a2:	5e                   	pop    esi
c001f2a3:	5f                   	pop    edi
c001f2a4:	5d                   	pop    ebp
c001f2a5:	c3                   	ret    
c001f2a6:	66 90                	xchg   ax,ax
c001f2a8:	ba 20 00 00 00       	mov    edx,0x20
c001f2ad:	29 ea                	sub    edx,ebp
c001f2af:	89 e9                	mov    ecx,ebp
c001f2b1:	d3 e0                	shl    eax,cl
c001f2b3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001f2b7:	89 f8                	mov    eax,edi
c001f2b9:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001f2bd:	88 d1                	mov    cl,dl
c001f2bf:	d3 e8                	shr    eax,cl
c001f2c1:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001f2c5:	09 c1                	or     ecx,eax
c001f2c7:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001f2cb:	89 e9                	mov    ecx,ebp
c001f2cd:	d3 e7                	shl    edi,cl
c001f2cf:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001f2d3:	89 d8                	mov    eax,ebx
c001f2d5:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001f2d9:	88 d1                	mov    cl,dl
c001f2db:	d3 e8                	shr    eax,cl
c001f2dd:	89 c7                	mov    edi,eax
c001f2df:	89 e9                	mov    ecx,ebp
c001f2e1:	d3 e3                	shl    ebx,cl
c001f2e3:	89 f0                	mov    eax,esi
c001f2e5:	88 d1                	mov    cl,dl
c001f2e7:	d3 e8                	shr    eax,cl
c001f2e9:	09 d8                	or     eax,ebx
c001f2eb:	89 e9                	mov    ecx,ebp
c001f2ed:	d3 e6                	shl    esi,cl
c001f2ef:	89 f3                	mov    ebx,esi
c001f2f1:	89 fa                	mov    edx,edi
c001f2f3:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001f2f7:	89 d1                	mov    ecx,edx
c001f2f9:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001f2fd:	89 c6                	mov    esi,eax
c001f2ff:	89 d7                	mov    edi,edx
c001f301:	39 d1                	cmp    ecx,edx
c001f303:	72 27                	jb     c001f32c <__umoddi3+0x10c>
c001f305:	74 21                	je     c001f328 <__umoddi3+0x108>
c001f307:	89 ca                	mov    edx,ecx
c001f309:	29 f3                	sub    ebx,esi
c001f30b:	19 fa                	sbb    edx,edi
c001f30d:	89 d0                	mov    eax,edx
c001f30f:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c001f313:	d3 e0                	shl    eax,cl
c001f315:	89 e9                	mov    ecx,ebp
c001f317:	d3 eb                	shr    ebx,cl
c001f319:	09 d8                	or     eax,ebx
c001f31b:	d3 ea                	shr    edx,cl
c001f31d:	83 c4 1c             	add    esp,0x1c
c001f320:	5b                   	pop    ebx
c001f321:	5e                   	pop    esi
c001f322:	5f                   	pop    edi
c001f323:	5d                   	pop    ebp
c001f324:	c3                   	ret    
c001f325:	8d 76 00             	lea    esi,[esi+0x0]
c001f328:	39 c3                	cmp    ebx,eax
c001f32a:	73 db                	jae    c001f307 <__umoddi3+0xe7>
c001f32c:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001f330:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c001f334:	89 d7                	mov    edi,edx
c001f336:	89 c6                	mov    esi,eax
c001f338:	eb cd                	jmp    c001f307 <__umoddi3+0xe7>

Disassembly of section .init:

c001f33a <_init>:
c001f33a:	55                   	push   ebp
c001f33b:	89 e5                	mov    ebp,esp
c001f33d:	e8 b2 0d fe ff       	call   c00000f4 <frame_dummy>
c001f342:	e8 e5 fa ff ff       	call   c001ee2c <__do_global_ctors_aux>
c001f347:	5d                   	pop    ebp
c001f348:	c3                   	ret    

Disassembly of section .fini:

c001f349 <_fini>:
c001f349:	55                   	push   ebp
c001f34a:	89 e5                	mov    ebp,esp
c001f34c:	e8 33 0d fe ff       	call   c0000084 <__do_global_dtors_aux>
c001f351:	5d                   	pop    ebp
c001f352:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c001f354 <Computer::~Computer()>:
c001f354:	83 ec 0c             	sub    esp,0xc
c001f357:	ba 74 06 02 c0       	mov    edx,0xc0020674
c001f35c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f360:	89 10                	mov    DWORD PTR [eax],edx
c001f362:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f366:	83 ec 0c             	sub    esp,0xc
c001f369:	50                   	push   eax
c001f36a:	e8 75 d1 fe ff       	call   c000c4e4 <Device::~Device()>
c001f36f:	83 c4 10             	add    esp,0x10
c001f372:	90                   	nop
c001f373:	83 c4 0c             	add    esp,0xc
c001f376:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c001f378 <Computer::~Computer()>:
c001f378:	83 ec 0c             	sub    esp,0xc
c001f37b:	83 ec 0c             	sub    esp,0xc
c001f37e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f382:	e8 cd ff ff ff       	call   c001f354 <Computer::~Computer()>
c001f387:	83 c4 10             	add    esp,0x10
c001f38a:	83 ec 08             	sub    esp,0x8
c001f38d:	68 70 01 00 00       	push   0x170
c001f392:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f396:	e8 7d b4 fe ff       	call   c000a818 <operator delete(void*, unsigned long)>
c001f39b:	83 c4 10             	add    esp,0x10
c001f39e:	83 c4 0c             	add    esp,0xc
c001f3a1:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c001f3a2 <idleCommon()>:
c001f3a2:	83 ec 0c             	sub    esp,0xc
c001f3a5:	fa                   	cli    
c001f3a6:	ff 05 68 a4 02 c0    	inc    DWORD PTR ds:0xc002a468
c001f3ac:	e8 fb 66 ff ff       	call   c0015aac <schedule()>
c001f3b1:	a1 68 a4 02 c0       	mov    eax,ds:0xc002a468
c001f3b6:	48                   	dec    eax
c001f3b7:	a3 68 a4 02 c0       	mov    ds:0xc002a468,eax
c001f3bc:	75 01                	jne    c001f3bf <idleCommon()+0x1d>
c001f3be:	fb                   	sti    
c001f3bf:	83 c4 0c             	add    esp,0xc
c001f3c2:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c001f3c4 <LinkedList<UnixFile>::~LinkedList()>:
c001f3c4:	90                   	nop
c001f3c5:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c001f3c6 <LinkedList<UnixFile>::LinkedList()>:
c001f3c6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f3ca:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001f3d0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f3d4:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001f3db:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f3df:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001f3e6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f3ea:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001f3f0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f3f4:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001f3fb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f3ff:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001f406:	90                   	nop
c001f407:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c001f408 <LinkedList<UnixFile>::addElement(UnixFile*)>:
c001f408:	83 ec 0c             	sub    esp,0xc
c001f40b:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001f410:	75 10                	jne    c001f422 <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c001f412:	83 ec 0c             	sub    esp,0xc
c001f415:	68 88 08 02 c0       	push   0xc0020888
c001f41a:	e8 ce 1d ff ff       	call   c00111ed <KePanic(char const*)>
c001f41f:	83 c4 10             	add    esp,0x10
c001f422:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f426:	8b 00                	mov    eax,DWORD PTR [eax]
c001f428:	85 c0                	test   eax,eax
c001f42a:	74 34                	je     c001f460 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c001f42c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f430:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f433:	85 c0                	test   eax,eax
c001f435:	74 29                	je     c001f460 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c001f437:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f43b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f43e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f442:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001f445:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f449:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f44d:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001f450:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f454:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f457:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001f45e:	eb 65                	jmp    c001f4c5 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001f460:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f464:	8b 00                	mov    eax,DWORD PTR [eax]
c001f466:	85 c0                	test   eax,eax
c001f468:	75 4b                	jne    c001f4b5 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c001f46a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f46e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f471:	85 c0                	test   eax,eax
c001f473:	75 40                	jne    c001f4b5 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c001f475:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f479:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f47d:	89 10                	mov    DWORD PTR [eax],edx
c001f47f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f483:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f487:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001f48a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f48e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f491:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001f498:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f49c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f49f:	85 c0                	test   eax,eax
c001f4a1:	74 22                	je     c001f4c5 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001f4a3:	83 ec 0c             	sub    esp,0xc
c001f4a6:	68 aa 08 02 c0       	push   0xc00208aa
c001f4ab:	e8 3d 1d ff ff       	call   c00111ed <KePanic(char const*)>
c001f4b0:	83 c4 10             	add    esp,0x10
c001f4b3:	eb 10                	jmp    c001f4c5 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001f4b5:	83 ec 0c             	sub    esp,0xc
c001f4b8:	68 b4 08 02 c0       	push   0xc00208b4
c001f4bd:	e8 2b 1d ff ff       	call   c00111ed <KePanic(char const*)>
c001f4c2:	83 c4 10             	add    esp,0x10
c001f4c5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f4c9:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f4cc:	8d 50 01             	lea    edx,[eax+0x1]
c001f4cf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f4d3:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001f4d6:	90                   	nop
c001f4d7:	83 c4 0c             	add    esp,0xc
c001f4da:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c001f4dc <LinkedList<UnixFile>::getFirstElement()>:
c001f4dc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f4e0:	8b 00                	mov    eax,DWORD PTR [eax]
c001f4e2:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c001f4e4 <LinkedList<UnixFile>::removeFirst()>:
c001f4e4:	83 ec 0c             	sub    esp,0xc
c001f4e7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f4eb:	8b 00                	mov    eax,DWORD PTR [eax]
c001f4ed:	85 c0                	test   eax,eax
c001f4ef:	75 12                	jne    c001f503 <LinkedList<UnixFile>::removeFirst()+0x1f>
c001f4f1:	83 ec 0c             	sub    esp,0xc
c001f4f4:	68 c0 08 02 c0       	push   0xc00208c0
c001f4f9:	e8 ef 1c ff ff       	call   c00111ed <KePanic(char const*)>
c001f4fe:	83 c4 10             	add    esp,0x10
c001f501:	eb 7e                	jmp    c001f581 <LinkedList<UnixFile>::removeFirst()+0x9d>
c001f503:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f507:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f50a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f50d:	85 c0                	test   eax,eax
c001f50f:	74 10                	je     c001f521 <LinkedList<UnixFile>::removeFirst()+0x3d>
c001f511:	83 ec 0c             	sub    esp,0xc
c001f514:	68 0b 09 02 c0       	push   0xc002090b
c001f519:	e8 cf 1c ff ff       	call   c00111ed <KePanic(char const*)>
c001f51e:	83 c4 10             	add    esp,0x10
c001f521:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f525:	8b 00                	mov    eax,DWORD PTR [eax]
c001f527:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f52a:	85 c0                	test   eax,eax
c001f52c:	75 33                	jne    c001f561 <LinkedList<UnixFile>::removeFirst()+0x7d>
c001f52e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f532:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001f538:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f53c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001f543:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f547:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f54a:	83 f8 01             	cmp    eax,0x1
c001f54d:	74 21                	je     c001f570 <LinkedList<UnixFile>::removeFirst()+0x8c>
c001f54f:	83 ec 0c             	sub    esp,0xc
c001f552:	68 e4 08 02 c0       	push   0xc00208e4
c001f557:	e8 91 1c ff ff       	call   c00111ed <KePanic(char const*)>
c001f55c:	83 c4 10             	add    esp,0x10
c001f55f:	eb 0f                	jmp    c001f570 <LinkedList<UnixFile>::removeFirst()+0x8c>
c001f561:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f565:	8b 00                	mov    eax,DWORD PTR [eax]
c001f567:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c001f56a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f56e:	89 10                	mov    DWORD PTR [eax],edx
c001f570:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f574:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f577:	8d 50 ff             	lea    edx,[eax-0x1]
c001f57a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f57e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001f581:	83 c4 0c             	add    esp,0xc
c001f584:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c001f586 <LinkedList<UnixFile>::getNext(UnixFile*)>:
c001f586:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f58a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f58d:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c001f58e <DriverlessDevice::~DriverlessDevice()>:
c001f58e:	ba dc 13 02 c0       	mov    edx,0xc00213dc
c001f593:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f597:	89 10                	mov    DWORD PTR [eax],edx
c001f599:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f59d:	50                   	push   eax
c001f59e:	e8 41 cf fe ff       	call   c000c4e4 <Device::~Device()>
c001f5a3:	83 c4 04             	add    esp,0x4
c001f5a6:	90                   	nop
c001f5a7:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c001f5a8 <DriverlessDevice::~DriverlessDevice()>:
c001f5a8:	83 ec 0c             	sub    esp,0xc
c001f5ab:	83 ec 0c             	sub    esp,0xc
c001f5ae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f5b2:	e8 d7 ff ff ff       	call   c001f58e <DriverlessDevice::~DriverlessDevice()>
c001f5b7:	83 c4 10             	add    esp,0x10
c001f5ba:	83 ec 08             	sub    esp,0x8
c001f5bd:	68 58 01 00 00       	push   0x158
c001f5c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f5c6:	e8 4d b2 fe ff       	call   c000a818 <operator delete(void*, unsigned long)>
c001f5cb:	83 c4 10             	add    esp,0x10
c001f5ce:	83 c4 0c             	add    esp,0xc
c001f5d1:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c001f5d2 <LinkedList<Device>::addElement(Device*)>:
c001f5d2:	83 ec 0c             	sub    esp,0xc
c001f5d5:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001f5da:	75 10                	jne    c001f5ec <LinkedList<Device>::addElement(Device*)+0x1a>
c001f5dc:	83 ec 0c             	sub    esp,0xc
c001f5df:	68 88 08 02 c0       	push   0xc0020888
c001f5e4:	e8 04 1c ff ff       	call   c00111ed <KePanic(char const*)>
c001f5e9:	83 c4 10             	add    esp,0x10
c001f5ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f5f0:	8b 00                	mov    eax,DWORD PTR [eax]
c001f5f2:	85 c0                	test   eax,eax
c001f5f4:	74 3a                	je     c001f630 <LinkedList<Device>::addElement(Device*)+0x5e>
c001f5f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f5fa:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f5fd:	85 c0                	test   eax,eax
c001f5ff:	74 2f                	je     c001f630 <LinkedList<Device>::addElement(Device*)+0x5e>
c001f601:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f605:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f608:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f60c:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c001f612:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f616:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f61a:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001f61d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f621:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f624:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001f62e:	eb 68                	jmp    c001f698 <LinkedList<Device>::addElement(Device*)+0xc6>
c001f630:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f634:	8b 00                	mov    eax,DWORD PTR [eax]
c001f636:	85 c0                	test   eax,eax
c001f638:	75 4e                	jne    c001f688 <LinkedList<Device>::addElement(Device*)+0xb6>
c001f63a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f63e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f641:	85 c0                	test   eax,eax
c001f643:	75 43                	jne    c001f688 <LinkedList<Device>::addElement(Device*)+0xb6>
c001f645:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f649:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f64d:	89 10                	mov    DWORD PTR [eax],edx
c001f64f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f653:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f657:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001f65a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f65e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f661:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001f66b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f66f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f672:	85 c0                	test   eax,eax
c001f674:	74 22                	je     c001f698 <LinkedList<Device>::addElement(Device*)+0xc6>
c001f676:	83 ec 0c             	sub    esp,0xc
c001f679:	68 aa 08 02 c0       	push   0xc00208aa
c001f67e:	e8 6a 1b ff ff       	call   c00111ed <KePanic(char const*)>
c001f683:	83 c4 10             	add    esp,0x10
c001f686:	eb 10                	jmp    c001f698 <LinkedList<Device>::addElement(Device*)+0xc6>
c001f688:	83 ec 0c             	sub    esp,0xc
c001f68b:	68 b4 08 02 c0       	push   0xc00208b4
c001f690:	e8 58 1b ff ff       	call   c00111ed <KePanic(char const*)>
c001f695:	83 c4 10             	add    esp,0x10
c001f698:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f69c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f69f:	8d 50 01             	lea    edx,[eax+0x1]
c001f6a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f6a6:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001f6a9:	90                   	nop
c001f6aa:	83 c4 0c             	add    esp,0xc
c001f6ad:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c001f6ae <LinkedList<Device>::LinkedList()>:
c001f6ae:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f6b2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001f6b8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f6bc:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001f6c3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f6c7:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001f6ce:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f6d2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001f6d8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f6dc:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001f6e3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f6e7:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001f6ee:	90                   	nop
c001f6ef:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c001f6f0 <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c001f6f0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f6f4:	8b 00                	mov    eax,DWORD PTR [eax]
c001f6f6:	85 c0                	test   eax,eax
c001f6f8:	75 0e                	jne    c001f708 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c001f6fa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f6fe:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f701:	85 c0                	test   eax,eax
c001f703:	75 03                	jne    c001f708 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c001f705:	b0 01                	mov    al,0x1
c001f707:	c3                   	ret    
c001f708:	b0 00                	mov    al,0x0
c001f70a:	90                   	nop
c001f70b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c001f70c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c001f70c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f710:	8b 00                	mov    eax,DWORD PTR [eax]
c001f712:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c001f714 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c001f714:	83 ec 0c             	sub    esp,0xc
c001f717:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f71b:	8b 00                	mov    eax,DWORD PTR [eax]
c001f71d:	85 c0                	test   eax,eax
c001f71f:	75 17                	jne    c001f738 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x24>
c001f721:	83 ec 0c             	sub    esp,0xc
c001f724:	68 c0 08 02 c0       	push   0xc00208c0
c001f729:	e8 bf 1a ff ff       	call   c00111ed <KePanic(char const*)>
c001f72e:	83 c4 10             	add    esp,0x10
c001f731:	e9 96 00 00 00       	jmp    c001f7cc <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xb8>
c001f736:	66 90                	xchg   ax,ax
c001f738:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f73c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f73f:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001f742:	85 c0                	test   eax,eax
c001f744:	0f 95 c0             	setne  al
c001f747:	0f b6 c0             	movzx  eax,al
c001f74a:	85 c0                	test   eax,eax
c001f74c:	74 12                	je     c001f760 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x4c>
c001f74e:	83 ec 0c             	sub    esp,0xc
c001f751:	68 0b 09 02 c0       	push   0xc002090b
c001f756:	e8 92 1a ff ff       	call   c00111ed <KePanic(char const*)>
c001f75b:	83 c4 10             	add    esp,0x10
c001f75e:	66 90                	xchg   ax,ax
c001f760:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f764:	8b 00                	mov    eax,DWORD PTR [eax]
c001f766:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001f769:	85 c0                	test   eax,eax
c001f76b:	0f 94 c0             	sete   al
c001f76e:	0f b6 c0             	movzx  eax,al
c001f771:	85 c0                	test   eax,eax
c001f773:	74 33                	je     c001f7a8 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x94>
c001f775:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f779:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001f77f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f783:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001f78a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f78e:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f791:	83 f8 01             	cmp    eax,0x1
c001f794:	74 22                	je     c001f7b8 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa4>
c001f796:	83 ec 0c             	sub    esp,0xc
c001f799:	68 e4 08 02 c0       	push   0xc00208e4
c001f79e:	e8 4a 1a ff ff       	call   c00111ed <KePanic(char const*)>
c001f7a3:	83 c4 10             	add    esp,0x10
c001f7a6:	eb 10                	jmp    c001f7b8 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa4>
c001f7a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f7ac:	8b 00                	mov    eax,DWORD PTR [eax]
c001f7ae:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001f7b1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f7b5:	89 10                	mov    DWORD PTR [eax],edx
c001f7b7:	90                   	nop
c001f7b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f7bc:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f7bf:	8d 50 ff             	lea    edx,[eax-0x1]
c001f7c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f7c6:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001f7c9:	8d 76 00             	lea    esi,[esi+0x0]
c001f7cc:	83 c4 0c             	add    esp,0xc
c001f7cf:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c001f7d0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c001f7d0:	83 ec 0c             	sub    esp,0xc
c001f7d3:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001f7d8:	75 12                	jne    c001f7ec <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1c>
c001f7da:	83 ec 0c             	sub    esp,0xc
c001f7dd:	68 88 08 02 c0       	push   0xc0020888
c001f7e2:	e8 06 1a ff ff       	call   c00111ed <KePanic(char const*)>
c001f7e7:	83 c4 10             	add    esp,0x10
c001f7ea:	66 90                	xchg   ax,ax
c001f7ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f7f0:	8b 00                	mov    eax,DWORD PTR [eax]
c001f7f2:	85 c0                	test   eax,eax
c001f7f4:	74 36                	je     c001f82c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c001f7f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f7fa:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f7fd:	85 c0                	test   eax,eax
c001f7ff:	74 2b                	je     c001f82c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c001f801:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f805:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f808:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f80c:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c001f80f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f813:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f817:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001f81a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f81e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f821:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001f828:	eb 6a                	jmp    c001f894 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001f82a:	66 90                	xchg   ax,ax
c001f82c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f830:	8b 00                	mov    eax,DWORD PTR [eax]
c001f832:	85 c0                	test   eax,eax
c001f834:	75 4e                	jne    c001f884 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c001f836:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f83a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f83d:	85 c0                	test   eax,eax
c001f83f:	75 43                	jne    c001f884 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c001f841:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f845:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f849:	89 10                	mov    DWORD PTR [eax],edx
c001f84b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f84f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f853:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001f856:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f85a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f85d:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001f864:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f868:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f86b:	85 c0                	test   eax,eax
c001f86d:	74 25                	je     c001f894 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001f86f:	83 ec 0c             	sub    esp,0xc
c001f872:	68 aa 08 02 c0       	push   0xc00208aa
c001f877:	e8 71 19 ff ff       	call   c00111ed <KePanic(char const*)>
c001f87c:	83 c4 10             	add    esp,0x10
c001f87f:	eb 13                	jmp    c001f894 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001f881:	8d 76 00             	lea    esi,[esi+0x0]
c001f884:	83 ec 0c             	sub    esp,0xc
c001f887:	68 b4 08 02 c0       	push   0xc00208b4
c001f88c:	e8 5c 19 ff ff       	call   c00111ed <KePanic(char const*)>
c001f891:	83 c4 10             	add    esp,0x10
c001f894:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f898:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f89b:	8d 50 01             	lea    edx,[eax+0x1]
c001f89e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f8a2:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001f8a5:	90                   	nop
c001f8a6:	83 c4 0c             	add    esp,0xc
c001f8a9:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c001f8ac <ACPI::~ACPI()>:
c001f8ac:	83 ec 0c             	sub    esp,0xc
c001f8af:	ba e0 19 02 c0       	mov    edx,0xc00219e0
c001f8b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f8b8:	89 10                	mov    DWORD PTR [eax],edx
c001f8ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f8be:	83 ec 0c             	sub    esp,0xc
c001f8c1:	50                   	push   eax
c001f8c2:	e8 1d cc fe ff       	call   c000c4e4 <Device::~Device()>
c001f8c7:	83 c4 10             	add    esp,0x10
c001f8ca:	90                   	nop
c001f8cb:	83 c4 0c             	add    esp,0xc
c001f8ce:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c001f8d0 <ACPI::~ACPI()>:
c001f8d0:	83 ec 0c             	sub    esp,0xc
c001f8d3:	83 ec 0c             	sub    esp,0xc
c001f8d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f8da:	e8 cd ff ff ff       	call   c001f8ac <ACPI::~ACPI()>
c001f8df:	83 c4 10             	add    esp,0x10
c001f8e2:	83 ec 08             	sub    esp,0x8
c001f8e5:	68 64 12 00 00       	push   0x1264
c001f8ea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f8ee:	e8 25 af fe ff       	call   c000a818 <operator delete(void*, unsigned long)>
c001f8f3:	83 c4 10             	add    esp,0x10
c001f8f6:	83 c4 0c             	add    esp,0xc
c001f8f9:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceED2Ev:

c001f8fc <LinkedList<Device>::~LinkedList()>:
c001f8fc:	90                   	nop
c001f8fd:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE7isEmptyEv:

c001f900 <LinkedList<Device>::isEmpty()>:
c001f900:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f904:	8b 00                	mov    eax,DWORD PTR [eax]
c001f906:	85 c0                	test   eax,eax
c001f908:	75 0e                	jne    c001f918 <LinkedList<Device>::isEmpty()+0x18>
c001f90a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f90e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f911:	85 c0                	test   eax,eax
c001f913:	75 03                	jne    c001f918 <LinkedList<Device>::isEmpty()+0x18>
c001f915:	b0 01                	mov    al,0x1
c001f917:	c3                   	ret    
c001f918:	b0 00                	mov    al,0x0
c001f91a:	90                   	nop
c001f91b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE15getFirstElementEv:

c001f91c <LinkedList<Device>::getFirstElement()>:
c001f91c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f920:	8b 00                	mov    eax,DWORD PTR [eax]
c001f922:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE11removeFirstEv:

c001f924 <LinkedList<Device>::removeFirst()>:
c001f924:	83 ec 0c             	sub    esp,0xc
c001f927:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f92b:	8b 00                	mov    eax,DWORD PTR [eax]
c001f92d:	85 c0                	test   eax,eax
c001f92f:	75 17                	jne    c001f948 <LinkedList<Device>::removeFirst()+0x24>
c001f931:	83 ec 0c             	sub    esp,0xc
c001f934:	68 c0 08 02 c0       	push   0xc00208c0
c001f939:	e8 af 18 ff ff       	call   c00111ed <KePanic(char const*)>
c001f93e:	83 c4 10             	add    esp,0x10
c001f941:	e9 92 00 00 00       	jmp    c001f9d8 <LinkedList<Device>::removeFirst()+0xb4>
c001f946:	66 90                	xchg   ax,ax
c001f948:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f94c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f94f:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c001f955:	85 c0                	test   eax,eax
c001f957:	74 13                	je     c001f96c <LinkedList<Device>::removeFirst()+0x48>
c001f959:	83 ec 0c             	sub    esp,0xc
c001f95c:	68 0b 09 02 c0       	push   0xc002090b
c001f961:	e8 87 18 ff ff       	call   c00111ed <KePanic(char const*)>
c001f966:	83 c4 10             	add    esp,0x10
c001f969:	8d 76 00             	lea    esi,[esi+0x0]
c001f96c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f970:	8b 00                	mov    eax,DWORD PTR [eax]
c001f972:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c001f978:	85 c0                	test   eax,eax
c001f97a:	75 34                	jne    c001f9b0 <LinkedList<Device>::removeFirst()+0x8c>
c001f97c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f980:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001f986:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f98a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001f991:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f995:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f998:	83 f8 01             	cmp    eax,0x1
c001f99b:	74 27                	je     c001f9c4 <LinkedList<Device>::removeFirst()+0xa0>
c001f99d:	83 ec 0c             	sub    esp,0xc
c001f9a0:	68 e4 08 02 c0       	push   0xc00208e4
c001f9a5:	e8 43 18 ff ff       	call   c00111ed <KePanic(char const*)>
c001f9aa:	83 c4 10             	add    esp,0x10
c001f9ad:	eb 15                	jmp    c001f9c4 <LinkedList<Device>::removeFirst()+0xa0>
c001f9af:	90                   	nop
c001f9b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f9b4:	8b 00                	mov    eax,DWORD PTR [eax]
c001f9b6:	8b 90 48 01 00 00    	mov    edx,DWORD PTR [eax+0x148]
c001f9bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f9c0:	89 10                	mov    DWORD PTR [eax],edx
c001f9c2:	66 90                	xchg   ax,ax
c001f9c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f9c8:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f9cb:	8d 50 ff             	lea    edx,[eax-0x1]
c001f9ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f9d2:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001f9d5:	8d 76 00             	lea    esi,[esi+0x0]
c001f9d8:	83 c4 0c             	add    esp,0xc
c001f9db:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c001f9dc <CPU::~CPU()>:
c001f9dc:	83 ec 0c             	sub    esp,0xc
c001f9df:	ba 88 1b 02 c0       	mov    edx,0xc0021b88
c001f9e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f9e8:	89 10                	mov    DWORD PTR [eax],edx
c001f9ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f9ee:	83 ec 0c             	sub    esp,0xc
c001f9f1:	50                   	push   eax
c001f9f2:	e8 ed ca fe ff       	call   c000c4e4 <Device::~Device()>
c001f9f7:	83 c4 10             	add    esp,0x10
c001f9fa:	90                   	nop
c001f9fb:	83 c4 0c             	add    esp,0xc
c001f9fe:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c001fa00 <CPU::~CPU()>:
c001fa00:	83 ec 0c             	sub    esp,0xc
c001fa03:	83 ec 0c             	sub    esp,0xc
c001fa06:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fa0a:	e8 cd ff ff ff       	call   c001f9dc <CPU::~CPU()>
c001fa0f:	83 c4 10             	add    esp,0x10
c001fa12:	83 ec 08             	sub    esp,0x8
c001fa15:	68 94 11 00 00       	push   0x1194
c001fa1a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fa1e:	e8 f5 ad fe ff       	call   c000a818 <operator delete(void*, unsigned long)>
c001fa23:	83 c4 10             	add    esp,0x10
c001fa26:	83 c4 0c             	add    esp,0xc
c001fa29:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c001fa2c <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c001fa2c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001fa30:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001fa33:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c001fa34 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c001fa34:	90                   	nop
c001fa35:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c001fa38 <ThreadControlBlock::ThreadControlBlock()>:
c001fa38:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fa3c:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001fa43:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fa47:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c001fa4e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fa52:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c001fa59:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fa5d:	c7 40 3c 00 00 00 00 	mov    DWORD PTR [eax+0x3c],0x0
c001fa64:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fa68:	c7 40 55 00 00 00 00 	mov    DWORD PTR [eax+0x55],0x0
c001fa6f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fa73:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c001fa77:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fa7b:	c6 40 5e 00          	mov    BYTE PTR [eax+0x5e],0x0
c001fa7f:	90                   	nop
c001fa80:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c001fa84 <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c001fa84:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fa88:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001fa8e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fa92:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001fa99:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fa9d:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001faa4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001faa8:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001faae:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fab2:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001fab9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fabd:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001fac4:	90                   	nop
c001fac5:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c001fac6 <PCI::~PCI()>:
c001fac6:	83 ec 0c             	sub    esp,0xc
c001fac9:	ba 44 2a 02 c0       	mov    edx,0xc0022a44
c001face:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fad2:	89 10                	mov    DWORD PTR [eax],edx
c001fad4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fad8:	83 ec 0c             	sub    esp,0xc
c001fadb:	50                   	push   eax
c001fadc:	e8 9b c4 fe ff       	call   c000bf7c <Bus::~Bus()>
c001fae1:	83 c4 10             	add    esp,0x10
c001fae4:	90                   	nop
c001fae5:	83 c4 0c             	add    esp,0xc
c001fae8:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c001faea <PCI::~PCI()>:
c001faea:	83 ec 0c             	sub    esp,0xc
c001faed:	83 ec 0c             	sub    esp,0xc
c001faf0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001faf4:	e8 cd ff ff ff       	call   c001fac6 <PCI::~PCI()>
c001faf9:	83 c4 10             	add    esp,0x10
c001fafc:	83 ec 08             	sub    esp,0x8
c001faff:	68 5c 01 00 00       	push   0x15c
c001fb04:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fb08:	e8 0b ad fe ff       	call   c000a818 <operator delete(void*, unsigned long)>
c001fb0d:	83 c4 10             	add    esp,0x10
c001fb10:	83 c4 0c             	add    esp,0xc
c001fb13:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c001fb14 <IDE::~IDE()>:
c001fb14:	83 ec 0c             	sub    esp,0xc
c001fb17:	ba f8 2a 02 c0       	mov    edx,0xc0022af8
c001fb1c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb20:	89 10                	mov    DWORD PTR [eax],edx
c001fb22:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb26:	83 ec 0c             	sub    esp,0xc
c001fb29:	50                   	push   eax
c001fb2a:	e8 2d ce fe ff       	call   c000c95c <HardDiskController::~HardDiskController()>
c001fb2f:	83 c4 10             	add    esp,0x10
c001fb32:	90                   	nop
c001fb33:	83 c4 0c             	add    esp,0xc
c001fb36:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c001fb38 <IDE::~IDE()>:
c001fb38:	83 ec 0c             	sub    esp,0xc
c001fb3b:	83 ec 0c             	sub    esp,0xc
c001fb3e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fb42:	e8 cd ff ff ff       	call   c001fb14 <IDE::~IDE()>
c001fb47:	83 c4 10             	add    esp,0x10
c001fb4a:	83 ec 08             	sub    esp,0x8
c001fb4d:	68 70 02 00 00       	push   0x270
c001fb52:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fb56:	e8 bd ac fe ff       	call   c000a818 <operator delete(void*, unsigned long)>
c001fb5b:	83 c4 10             	add    esp,0x10
c001fb5e:	83 c4 0c             	add    esp,0xc
c001fb61:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c001fb62 <SATABus::~SATABus()>:
c001fb62:	83 ec 0c             	sub    esp,0xc
c001fb65:	ba 48 2b 02 c0       	mov    edx,0xc0022b48
c001fb6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb6e:	89 10                	mov    DWORD PTR [eax],edx
c001fb70:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb74:	83 ec 0c             	sub    esp,0xc
c001fb77:	50                   	push   eax
c001fb78:	e8 df cd fe ff       	call   c000c95c <HardDiskController::~HardDiskController()>
c001fb7d:	83 c4 10             	add    esp,0x10
c001fb80:	90                   	nop
c001fb81:	83 c4 0c             	add    esp,0xc
c001fb84:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c001fb86 <SATABus::~SATABus()>:
c001fb86:	83 ec 0c             	sub    esp,0xc
c001fb89:	83 ec 0c             	sub    esp,0xc
c001fb8c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fb90:	e8 cd ff ff ff       	call   c001fb62 <SATABus::~SATABus()>
c001fb95:	83 c4 10             	add    esp,0x10
c001fb98:	83 ec 08             	sub    esp,0x8
c001fb9b:	68 64 01 00 00       	push   0x164
c001fba0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fba4:	e8 6f ac fe ff       	call   c000a818 <operator delete(void*, unsigned long)>
c001fba9:	83 c4 10             	add    esp,0x10
c001fbac:	83 c4 0c             	add    esp,0xc
c001fbaf:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c001fbb0 <ATA::~ATA()>:
c001fbb0:	83 ec 0c             	sub    esp,0xc
c001fbb3:	ba 88 2b 02 c0       	mov    edx,0xc0022b88
c001fbb8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fbbc:	89 10                	mov    DWORD PTR [eax],edx
c001fbbe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fbc2:	83 ec 0c             	sub    esp,0xc
c001fbc5:	50                   	push   eax
c001fbc6:	e8 73 ce fe ff       	call   c000ca3e <PhysicalDisk::~PhysicalDisk()>
c001fbcb:	83 c4 10             	add    esp,0x10
c001fbce:	90                   	nop
c001fbcf:	83 c4 0c             	add    esp,0xc
c001fbd2:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c001fbd4 <ATA::~ATA()>:
c001fbd4:	83 ec 0c             	sub    esp,0xc
c001fbd7:	83 ec 0c             	sub    esp,0xc
c001fbda:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fbde:	e8 cd ff ff ff       	call   c001fbb0 <ATA::~ATA()>
c001fbe3:	83 c4 10             	add    esp,0x10
c001fbe6:	83 ec 08             	sub    esp,0x8
c001fbe9:	68 7c 01 00 00       	push   0x17c
c001fbee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fbf2:	e8 21 ac fe ff       	call   c000a818 <operator delete(void*, unsigned long)>
c001fbf7:	83 c4 10             	add    esp,0x10
c001fbfa:	83 c4 0c             	add    esp,0xc
c001fbfd:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c001fbfe <ATAPI::~ATAPI()>:
c001fbfe:	83 ec 0c             	sub    esp,0xc
c001fc01:	ba d0 2b 02 c0       	mov    edx,0xc0022bd0
c001fc06:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc0a:	89 10                	mov    DWORD PTR [eax],edx
c001fc0c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc10:	83 ec 0c             	sub    esp,0xc
c001fc13:	50                   	push   eax
c001fc14:	e8 25 ce fe ff       	call   c000ca3e <PhysicalDisk::~PhysicalDisk()>
c001fc19:	83 c4 10             	add    esp,0x10
c001fc1c:	90                   	nop
c001fc1d:	83 c4 0c             	add    esp,0xc
c001fc20:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c001fc22 <ATAPI::~ATAPI()>:
c001fc22:	83 ec 0c             	sub    esp,0xc
c001fc25:	83 ec 0c             	sub    esp,0xc
c001fc28:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fc2c:	e8 cd ff ff ff       	call   c001fbfe <ATAPI::~ATAPI()>
c001fc31:	83 c4 10             	add    esp,0x10
c001fc34:	83 ec 08             	sub    esp,0x8
c001fc37:	68 84 01 00 00       	push   0x184
c001fc3c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fc40:	e8 d3 ab fe ff       	call   c000a818 <operator delete(void*, unsigned long)>
c001fc45:	83 c4 10             	add    esp,0x10
c001fc48:	83 c4 0c             	add    esp,0xc
c001fc4b:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c001fc4c <SATA::~SATA()>:
c001fc4c:	83 ec 0c             	sub    esp,0xc
c001fc4f:	ba 84 2c 02 c0       	mov    edx,0xc0022c84
c001fc54:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc58:	89 10                	mov    DWORD PTR [eax],edx
c001fc5a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc5e:	83 ec 0c             	sub    esp,0xc
c001fc61:	50                   	push   eax
c001fc62:	e8 d7 cd fe ff       	call   c000ca3e <PhysicalDisk::~PhysicalDisk()>
c001fc67:	83 c4 10             	add    esp,0x10
c001fc6a:	90                   	nop
c001fc6b:	83 c4 0c             	add    esp,0xc
c001fc6e:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c001fc70 <SATA::~SATA()>:
c001fc70:	83 ec 0c             	sub    esp,0xc
c001fc73:	83 ec 0c             	sub    esp,0xc
c001fc76:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fc7a:	e8 cd ff ff ff       	call   c001fc4c <SATA::~SATA()>
c001fc7f:	83 c4 10             	add    esp,0x10
c001fc82:	83 ec 08             	sub    esp,0x8
c001fc85:	68 7c 01 00 00       	push   0x17c
c001fc8a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fc8e:	e8 85 ab fe ff       	call   c000a818 <operator delete(void*, unsigned long)>
c001fc93:	83 c4 10             	add    esp,0x10
c001fc96:	83 c4 0c             	add    esp,0xc
c001fc99:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID2Ev:

c001fc9a <SATAPI::~SATAPI()>:
c001fc9a:	83 ec 0c             	sub    esp,0xc
c001fc9d:	ba a8 2d 02 c0       	mov    edx,0xc0022da8
c001fca2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fca6:	89 10                	mov    DWORD PTR [eax],edx
c001fca8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fcac:	83 ec 0c             	sub    esp,0xc
c001fcaf:	50                   	push   eax
c001fcb0:	e8 89 cd fe ff       	call   c000ca3e <PhysicalDisk::~PhysicalDisk()>
c001fcb5:	83 c4 10             	add    esp,0x10
c001fcb8:	90                   	nop
c001fcb9:	83 c4 0c             	add    esp,0xc
c001fcbc:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID0Ev:

c001fcbe <SATAPI::~SATAPI()>:
c001fcbe:	83 ec 0c             	sub    esp,0xc
c001fcc1:	83 ec 0c             	sub    esp,0xc
c001fcc4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fcc8:	e8 cd ff ff ff       	call   c001fc9a <SATAPI::~SATAPI()>
c001fccd:	83 c4 10             	add    esp,0x10
c001fcd0:	83 ec 08             	sub    esp,0x8
c001fcd3:	68 84 01 00 00       	push   0x184
c001fcd8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fcdc:	e8 37 ab fe ff       	call   c000a818 <operator delete(void*, unsigned long)>
c001fce1:	83 c4 10             	add    esp,0x10
c001fce4:	83 c4 0c             	add    esp,0xc
c001fce7:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c001fce8 <IOAPIC::~IOAPIC()>:
c001fce8:	83 ec 0c             	sub    esp,0xc
c001fceb:	ba e8 2d 02 c0       	mov    edx,0xc0022de8
c001fcf0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fcf4:	89 10                	mov    DWORD PTR [eax],edx
c001fcf6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fcfa:	83 ec 0c             	sub    esp,0xc
c001fcfd:	50                   	push   eax
c001fcfe:	e8 e1 c7 fe ff       	call   c000c4e4 <Device::~Device()>
c001fd03:	83 c4 10             	add    esp,0x10
c001fd06:	90                   	nop
c001fd07:	83 c4 0c             	add    esp,0xc
c001fd0a:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c001fd0c <IOAPIC::~IOAPIC()>:
c001fd0c:	83 ec 0c             	sub    esp,0xc
c001fd0f:	83 ec 0c             	sub    esp,0xc
c001fd12:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fd16:	e8 cd ff ff ff       	call   c001fce8 <IOAPIC::~IOAPIC()>
c001fd1b:	83 c4 10             	add    esp,0x10
c001fd1e:	83 ec 08             	sub    esp,0x8
c001fd21:	68 68 01 00 00       	push   0x168
c001fd26:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fd2a:	e8 e9 aa fe ff       	call   c000a818 <operator delete(void*, unsigned long)>
c001fd2f:	83 c4 10             	add    esp,0x10
c001fd32:	83 c4 0c             	add    esp,0xc
c001fd35:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c001fd38 <APICTimer::~APICTimer()>:
c001fd38:	83 ec 0c             	sub    esp,0xc
c001fd3b:	ba 30 2e 02 c0       	mov    edx,0xc0022e30
c001fd40:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd44:	89 10                	mov    DWORD PTR [eax],edx
c001fd46:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd4a:	83 ec 0c             	sub    esp,0xc
c001fd4d:	50                   	push   eax
c001fd4e:	e8 5d e2 fe ff       	call   c000dfb0 <Timer::~Timer()>
c001fd53:	83 c4 10             	add    esp,0x10
c001fd56:	90                   	nop
c001fd57:	83 c4 0c             	add    esp,0xc
c001fd5a:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c001fd5c <APICTimer::~APICTimer()>:
c001fd5c:	83 ec 0c             	sub    esp,0xc
c001fd5f:	83 ec 0c             	sub    esp,0xc
c001fd62:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fd66:	e8 cd ff ff ff       	call   c001fd38 <APICTimer::~APICTimer()>
c001fd6b:	83 c4 10             	add    esp,0x10
c001fd6e:	83 ec 08             	sub    esp,0x8
c001fd71:	68 60 01 00 00       	push   0x160
c001fd76:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fd7a:	e8 99 aa fe ff       	call   c000a818 <operator delete(void*, unsigned long)>
c001fd7f:	83 c4 10             	add    esp,0x10
c001fd82:	83 c4 0c             	add    esp,0xc
c001fd85:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c001fd88 <PIT::~PIT()>:
c001fd88:	83 ec 0c             	sub    esp,0xc
c001fd8b:	ba 80 2e 02 c0       	mov    edx,0xc0022e80
c001fd90:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd94:	89 10                	mov    DWORD PTR [eax],edx
c001fd96:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd9a:	83 ec 0c             	sub    esp,0xc
c001fd9d:	50                   	push   eax
c001fd9e:	e8 0d e2 fe ff       	call   c000dfb0 <Timer::~Timer()>
c001fda3:	83 c4 10             	add    esp,0x10
c001fda6:	90                   	nop
c001fda7:	83 c4 0c             	add    esp,0xc
c001fdaa:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c001fdac <PIT::~PIT()>:
c001fdac:	83 ec 0c             	sub    esp,0xc
c001fdaf:	83 ec 0c             	sub    esp,0xc
c001fdb2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fdb6:	e8 cd ff ff ff       	call   c001fd88 <PIT::~PIT()>
c001fdbb:	83 c4 10             	add    esp,0x10
c001fdbe:	83 ec 08             	sub    esp,0x8
c001fdc1:	68 5c 01 00 00       	push   0x15c
c001fdc6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fdca:	e8 49 aa fe ff       	call   c000a818 <operator delete(void*, unsigned long)>
c001fdcf:	83 c4 10             	add    esp,0x10
c001fdd2:	83 c4 0c             	add    esp,0xc
c001fdd5:	c3                   	ret    

Disassembly of section userkernel:

c0024000 <KiDefaultSignalHandlerAbort(int)>:
c0024000:	57                   	push   edi
c0024001:	b9 07 00 00 00       	mov    ecx,0x7
c0024006:	56                   	push   esi
c0024007:	be 92 1c 02 c0       	mov    esi,0xc0021c92
c002400c:	83 ec 24             	sub    esp,0x24
c002400f:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0024013:	fc                   	cld    
c0024014:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0024016:	8d 44 24 04          	lea    eax,[esp+0x4]
c002401a:	50                   	push   eax
c002401b:	6a 00                	push   0x0
c002401d:	6a 38                	push   0x38
c002401f:	6a 01                	push   0x1
c0024021:	e8 2c 00 00 00       	call   c0024052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0024026:	83 c4 34             	add    esp,0x34
c0024029:	5e                   	pop    esi
c002402a:	5f                   	pop    edi
c002402b:	c3                   	ret    

c002402c <KiDefaultSignalHandlerTerminate(int)>:
c002402c:	57                   	push   edi
c002402d:	b9 08 00 00 00       	mov    ecx,0x8
c0024032:	56                   	push   esi
c0024033:	be ae 1c 02 c0       	mov    esi,0xc0021cae
c0024038:	83 ec 24             	sub    esp,0x24
c002403b:	89 e7                	mov    edi,esp
c002403d:	fc                   	cld    
c002403e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0024040:	54                   	push   esp
c0024041:	6a 00                	push   0x0
c0024043:	6a 37                	push   0x37
c0024045:	6a 01                	push   0x1
c0024047:	e8 06 00 00 00       	call   c0024052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c002404c:	83 c4 34             	add    esp,0x34
c002404f:	5e                   	pop    esi
c0024050:	5f                   	pop    edi
c0024051:	c3                   	ret    

c0024052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>:
c0024052:	53                   	push   ebx
c0024053:	83 ec 10             	sub    esp,0x10
c0024056:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002405a:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c002405e:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0024062:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0024066:	cd 60                	int    0x60
c0024068:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002406c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0024070:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0024074:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0024078:	83 c4 10             	add    esp,0x10
c002407b:	5b                   	pop    ebx
c002407c:	c3                   	ret    

Disassembly of section align_previous:

c0025000 <DO_NOT_DELETE()>:
c0025000:	c3                   	ret    
